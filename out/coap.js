// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { return window.MbedJSHal.network.get_mac_address(); },
 function($0) { return window.MbedJSHal.network.get_ip_address(); },
 function($0) { return window.MbedJSHal.network.get_netmask(); },
 function($0) { return window.MbedJSHal.network.socket_open($0); },
 function($0) { return window.MbedJSHal.network.socket_close($0); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_connect($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_send($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_recv($0, $1, $2); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 7936;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "coap.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }



   

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_ii = ["0", "__ZN17EthernetInterface15get_mac_addressEv", "__ZN17EthernetInterface14get_ip_addressEv", "__ZN17EthernetInterface11get_netmaskEv", "__ZN17EthernetInterface11get_gatewayEv", "__ZN17EthernetInterface7connectEv", "__ZN17EthernetInterface10disconnectEv", "__ZNK16NetworkInterface21get_connection_statusEv", "__ZN17EthernetInterface9get_stackEv", "__ZThn4_N17EthernetInterface14get_ip_addressEv", "__ZN9UDPSocket9get_protoEv", "___stdio_close", "__Z11coap_malloct", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN17EthernetInterface8set_dhcpEb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress", "__ZN16NetworkInterface12set_blockingEb", "__ZN17EthernetInterface12socket_closeEPv", "__ZN12NetworkStack14add_dns_serverERK13SocketAddress", "__ZThn4_N17EthernetInterface12socket_closeEPv", "0"];
var debug_table_iiii = ["0", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZN17EthernetInterface13socket_listenEPvi", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface13socket_listenEPvi", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv", "_do_read"];
var debug_table_iiiii = ["0", "__ZN17EthernetInterface11set_networkEPKcS1_S1_", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZN17EthernetInterface11socket_sendEPvPKvj", "__ZN17EthernetInterface11socket_recvEPvS0_j", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j", "__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv", "0", "0", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "__ZN12NetworkStack11setstackoptEiiPKvj", "__ZN12NetworkStack11getstackoptEiiPvPj", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "0"];
var debug_table_iiiiiii = ["0", "__ZN12NetworkStack10setsockoptEPviiPKvj", "__ZN12NetworkStack10getsockoptEPviiS0_Pj", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "__ZL25default_terminate_handlerv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
var debug_table_vi = ["0", "__ZN17EthernetInterfaceD2Ev", "__ZN17EthernetInterfaceD0Ev", "__ZThn4_N17EthernetInterfaceD1Ev", "__ZThn4_N17EthernetInterfaceD0Ev", "__ZN6SocketD2Ev", "__ZN6SocketD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv", "__ZN9UDPSocketD2Ev", "__ZN9UDPSocketD0Ev", "__ZN9UDPSocket5eventEv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN17EthernetInterface15get_mac_addressEv__async_cb", "__ZN17EthernetInterface14get_ip_addressEv__async_cb", "__ZN17EthernetInterface11get_netmaskEv__async_cb", "__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb", "__ZN17EthernetInterface8set_dhcpEb__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_13", "__ZN17EthernetInterface12socket_closeEPv__async_cb", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_73", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_74", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_72", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_78", "__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_56", "__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_3", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_4", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_2", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_7", "_sn_coap_parser__async_cb", "_sn_coap_parser__async_cb_17", "_sn_coap_parser__async_cb_18", "_sn_coap_parser__async_cb_19", "_sn_coap_parser__async_cb_25", "_sn_coap_parser__async_cb_20", "_sn_coap_parser__async_cb_24", "_sn_coap_parser__async_cb_23", "_sn_coap_parser__async_cb_22", "_sn_coap_parser__async_cb_21", "_sn_coap_parser_options_parse_multiple_options__async_cb", "_sn_coap_protocol_init__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_39", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_11", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_12", "__ZN6SocketD2Ev__async_cb", "__ZN6SocketD2Ev__async_cb_5", "__ZN6Socket4openEP12NetworkStack__async_cb", "__ZN6Socket4openEP12NetworkStack__async_cb_79", "__ZN6Socket4openEP12NetworkStack__async_cb_80", "__ZN6Socket4openEP12NetworkStack__async_cb_81", "__ZN6Socket4openEP12NetworkStack__async_cb_82", "__ZN4mbed8CallbackIFvvEE5thunkEPv", "__ZN6Socket4openEP12NetworkStack__async_cb_83", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_75", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb", "__ZN6Socket5closeEv__async_cb", "__ZN6Socket5closeEv__async_cb_70", "__ZN6Socket5closeEv__async_cb_71", "__ZN9UDPSocketD2Ev__async_cb_9", "__ZN9UDPSocketD2Ev__async_cb", "__ZN9UDPSocketD2Ev__async_cb_8", "__ZN9UDPSocketD0Ev__async_cb", "__ZN9UDPSocket5eventEv__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_84", "__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb", "__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_38", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_35", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_30", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_37", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_36", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_34", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_29", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_33", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_28", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_32", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_27", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_31", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb", "__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_54", "_mbed_die__async_cb_53", "_mbed_die__async_cb_52", "_mbed_die__async_cb_51", "_mbed_die__async_cb_50", "_mbed_die__async_cb_49", "_mbed_die__async_cb_48", "_mbed_die__async_cb_47", "_mbed_die__async_cb_46", "_mbed_die__async_cb_45", "_mbed_die__async_cb_44", "_mbed_die__async_cb_43", "_mbed_die__async_cb_42", "_mbed_die__async_cb_41", "_mbed_die__async_cb_40", "_mbed_die__async_cb", "_invoke_ticker__async_cb_85", "_invoke_ticker__async_cb", "_wait__async_cb", "_wait_ms__async_cb", "__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb", "__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb", "__Z17recv_coap_messagev__async_cb_67", "__Z17recv_coap_messagev__async_cb_68", "__Z17recv_coap_messagev__async_cb", "_main__async_cb_60", "_main__async_cb_59", "_main__async_cb", "_main__async_cb_62", "__Z9coap_freePv", "_main__async_cb_63", "_main__async_cb_61", "_main__async_cb_57", "_main__async_cb_58", "_main__async_cb_64", "___overflow__async_cb", "_fflush__async_cb_15", "_fflush__async_cb_14", "_fflush__async_cb_16", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_55", "_vfprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_fputc__async_cb_26", "_fputc__async_cb", "_puts__async_cb", "__Znwj__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_77", "_abort_message__async_cb", "_abort_message__async_cb_6", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_69", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_66", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_10", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_65", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_89", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_88", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_87", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_86", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_76", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vii = ["0", "__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv", "0"];
var debug_table_viiii = ["0", "__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_llvm_trap": _llvm_trap, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _llvm_trap=env._llvm_trap;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 61
 STACKTOP = STACKTOP + 16 | 0; //@line 62
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62
 $1 = sp; //@line 63
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 70
   $7 = $6 >>> 3; //@line 71
   $8 = HEAP32[1573] | 0; //@line 72
   $9 = $8 >>> $7; //@line 73
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 79
    $16 = 6332 + ($14 << 1 << 2) | 0; //@line 81
    $17 = $16 + 8 | 0; //@line 82
    $18 = HEAP32[$17 >> 2] | 0; //@line 83
    $19 = $18 + 8 | 0; //@line 84
    $20 = HEAP32[$19 >> 2] | 0; //@line 85
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[1573] = $8 & ~(1 << $14); //@line 92
     } else {
      if ((HEAP32[1577] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 97
      }
      $27 = $20 + 12 | 0; //@line 100
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 104
       HEAP32[$17 >> 2] = $20; //@line 105
       break;
      } else {
       _abort(); //@line 108
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 113
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 116
    $34 = $18 + $30 + 4 | 0; //@line 118
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 121
    $$0 = $19; //@line 122
    STACKTOP = sp; //@line 123
    return $$0 | 0; //@line 123
   }
   $37 = HEAP32[1575] | 0; //@line 125
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 131
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 134
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 137
     $49 = $47 >>> 12 & 16; //@line 139
     $50 = $47 >>> $49; //@line 140
     $52 = $50 >>> 5 & 8; //@line 142
     $54 = $50 >>> $52; //@line 144
     $56 = $54 >>> 2 & 4; //@line 146
     $58 = $54 >>> $56; //@line 148
     $60 = $58 >>> 1 & 2; //@line 150
     $62 = $58 >>> $60; //@line 152
     $64 = $62 >>> 1 & 1; //@line 154
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 157
     $69 = 6332 + ($67 << 1 << 2) | 0; //@line 159
     $70 = $69 + 8 | 0; //@line 160
     $71 = HEAP32[$70 >> 2] | 0; //@line 161
     $72 = $71 + 8 | 0; //@line 162
     $73 = HEAP32[$72 >> 2] | 0; //@line 163
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 169
       HEAP32[1573] = $77; //@line 170
       $98 = $77; //@line 171
      } else {
       if ((HEAP32[1577] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 176
       }
       $80 = $73 + 12 | 0; //@line 179
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 183
        HEAP32[$70 >> 2] = $73; //@line 184
        $98 = $8; //@line 185
        break;
       } else {
        _abort(); //@line 188
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 193
     $84 = $83 - $6 | 0; //@line 194
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 197
     $87 = $71 + $6 | 0; //@line 198
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 201
     HEAP32[$71 + $83 >> 2] = $84; //@line 203
     if ($37 | 0) {
      $92 = HEAP32[1578] | 0; //@line 206
      $93 = $37 >>> 3; //@line 207
      $95 = 6332 + ($93 << 1 << 2) | 0; //@line 209
      $96 = 1 << $93; //@line 210
      if (!($98 & $96)) {
       HEAP32[1573] = $98 | $96; //@line 215
       $$0199 = $95; //@line 217
       $$pre$phiZ2D = $95 + 8 | 0; //@line 217
      } else {
       $101 = $95 + 8 | 0; //@line 219
       $102 = HEAP32[$101 >> 2] | 0; //@line 220
       if ((HEAP32[1577] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 224
       } else {
        $$0199 = $102; //@line 227
        $$pre$phiZ2D = $101; //@line 227
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 230
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 232
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 234
      HEAP32[$92 + 12 >> 2] = $95; //@line 236
     }
     HEAP32[1575] = $84; //@line 238
     HEAP32[1578] = $87; //@line 239
     $$0 = $72; //@line 240
     STACKTOP = sp; //@line 241
     return $$0 | 0; //@line 241
    }
    $108 = HEAP32[1574] | 0; //@line 243
    if (!$108) {
     $$0197 = $6; //@line 246
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 250
     $114 = $112 >>> 12 & 16; //@line 252
     $115 = $112 >>> $114; //@line 253
     $117 = $115 >>> 5 & 8; //@line 255
     $119 = $115 >>> $117; //@line 257
     $121 = $119 >>> 2 & 4; //@line 259
     $123 = $119 >>> $121; //@line 261
     $125 = $123 >>> 1 & 2; //@line 263
     $127 = $123 >>> $125; //@line 265
     $129 = $127 >>> 1 & 1; //@line 267
     $134 = HEAP32[6596 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 272
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 276
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 282
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 285
      $$0193$lcssa$i = $138; //@line 285
     } else {
      $$01926$i = $134; //@line 287
      $$01935$i = $138; //@line 287
      $146 = $143; //@line 287
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 292
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 293
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 294
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 295
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 301
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 304
        $$0193$lcssa$i = $$$0193$i; //@line 304
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 307
        $$01935$i = $$$0193$i; //@line 307
       }
      }
     }
     $157 = HEAP32[1577] | 0; //@line 311
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 314
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 317
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 320
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 324
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 326
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 330
       $176 = HEAP32[$175 >> 2] | 0; //@line 331
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 334
        $179 = HEAP32[$178 >> 2] | 0; //@line 335
        if (!$179) {
         $$3$i = 0; //@line 338
         break;
        } else {
         $$1196$i = $179; //@line 341
         $$1198$i = $178; //@line 341
        }
       } else {
        $$1196$i = $176; //@line 344
        $$1198$i = $175; //@line 344
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 347
        $182 = HEAP32[$181 >> 2] | 0; //@line 348
        if ($182 | 0) {
         $$1196$i = $182; //@line 351
         $$1198$i = $181; //@line 351
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 354
        $185 = HEAP32[$184 >> 2] | 0; //@line 355
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 360
         $$1198$i = $184; //@line 360
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 365
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 368
        $$3$i = $$1196$i; //@line 369
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 374
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 377
       }
       $169 = $167 + 12 | 0; //@line 380
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 384
       }
       $172 = $164 + 8 | 0; //@line 387
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 391
        HEAP32[$172 >> 2] = $167; //@line 392
        $$3$i = $164; //@line 393
        break;
       } else {
        _abort(); //@line 396
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 405
       $191 = 6596 + ($190 << 2) | 0; //@line 406
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 411
         if (!$$3$i) {
          HEAP32[1574] = $108 & ~(1 << $190); //@line 417
          break L73;
         }
        } else {
         if ((HEAP32[1577] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 424
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 432
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[1577] | 0; //@line 442
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 445
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 449
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 451
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 457
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 461
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 463
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 469
       if ($214 | 0) {
        if ((HEAP32[1577] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 475
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 479
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 481
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 489
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 492
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 494
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 497
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 501
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 504
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 506
      if ($37 | 0) {
       $234 = HEAP32[1578] | 0; //@line 509
       $235 = $37 >>> 3; //@line 510
       $237 = 6332 + ($235 << 1 << 2) | 0; //@line 512
       $238 = 1 << $235; //@line 513
       if (!($8 & $238)) {
        HEAP32[1573] = $8 | $238; //@line 518
        $$0189$i = $237; //@line 520
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 520
       } else {
        $242 = $237 + 8 | 0; //@line 522
        $243 = HEAP32[$242 >> 2] | 0; //@line 523
        if ((HEAP32[1577] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 527
        } else {
         $$0189$i = $243; //@line 530
         $$pre$phi$iZ2D = $242; //@line 530
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 533
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 535
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 537
       HEAP32[$234 + 12 >> 2] = $237; //@line 539
      }
      HEAP32[1575] = $$0193$lcssa$i; //@line 541
      HEAP32[1578] = $159; //@line 542
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 545
     STACKTOP = sp; //@line 546
     return $$0 | 0; //@line 546
    }
   } else {
    $$0197 = $6; //@line 549
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 554
   } else {
    $251 = $0 + 11 | 0; //@line 556
    $252 = $251 & -8; //@line 557
    $253 = HEAP32[1574] | 0; //@line 558
    if (!$253) {
     $$0197 = $252; //@line 561
    } else {
     $255 = 0 - $252 | 0; //@line 563
     $256 = $251 >>> 8; //@line 564
     if (!$256) {
      $$0358$i = 0; //@line 567
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 571
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 575
       $262 = $256 << $261; //@line 576
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 579
       $267 = $262 << $265; //@line 581
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 584
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 589
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 595
      }
     }
     $282 = HEAP32[6596 + ($$0358$i << 2) >> 2] | 0; //@line 599
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 603
       $$3$i203 = 0; //@line 603
       $$3350$i = $255; //@line 603
       label = 81; //@line 604
      } else {
       $$0342$i = 0; //@line 611
       $$0347$i = $255; //@line 611
       $$0353$i = $282; //@line 611
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 611
       $$0362$i = 0; //@line 611
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 616
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 621
          $$435113$i = 0; //@line 621
          $$435712$i = $$0353$i; //@line 621
          label = 85; //@line 622
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 625
          $$1348$i = $292; //@line 625
         }
        } else {
         $$1343$i = $$0342$i; //@line 628
         $$1348$i = $$0347$i; //@line 628
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 631
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 634
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 638
        $302 = ($$0353$i | 0) == 0; //@line 639
        if ($302) {
         $$2355$i = $$1363$i; //@line 644
         $$3$i203 = $$1343$i; //@line 644
         $$3350$i = $$1348$i; //@line 644
         label = 81; //@line 645
         break;
        } else {
         $$0342$i = $$1343$i; //@line 648
         $$0347$i = $$1348$i; //@line 648
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 648
         $$0362$i = $$1363$i; //@line 648
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 658
       $309 = $253 & ($306 | 0 - $306); //@line 661
       if (!$309) {
        $$0197 = $252; //@line 664
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 669
       $315 = $313 >>> 12 & 16; //@line 671
       $316 = $313 >>> $315; //@line 672
       $318 = $316 >>> 5 & 8; //@line 674
       $320 = $316 >>> $318; //@line 676
       $322 = $320 >>> 2 & 4; //@line 678
       $324 = $320 >>> $322; //@line 680
       $326 = $324 >>> 1 & 2; //@line 682
       $328 = $324 >>> $326; //@line 684
       $330 = $328 >>> 1 & 1; //@line 686
       $$4$ph$i = 0; //@line 692
       $$4357$ph$i = HEAP32[6596 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 692
      } else {
       $$4$ph$i = $$3$i203; //@line 694
       $$4357$ph$i = $$2355$i; //@line 694
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 698
       $$4351$lcssa$i = $$3350$i; //@line 698
      } else {
       $$414$i = $$4$ph$i; //@line 700
       $$435113$i = $$3350$i; //@line 700
       $$435712$i = $$4357$ph$i; //@line 700
       label = 85; //@line 701
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 706
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 710
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 711
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 712
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 713
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 719
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 722
        $$4351$lcssa$i = $$$4351$i; //@line 722
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 725
        $$435113$i = $$$4351$i; //@line 725
        label = 85; //@line 726
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 732
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[1575] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[1577] | 0; //@line 738
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 741
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 744
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 747
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 751
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 753
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 757
         $371 = HEAP32[$370 >> 2] | 0; //@line 758
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 761
          $374 = HEAP32[$373 >> 2] | 0; //@line 762
          if (!$374) {
           $$3372$i = 0; //@line 765
           break;
          } else {
           $$1370$i = $374; //@line 768
           $$1374$i = $373; //@line 768
          }
         } else {
          $$1370$i = $371; //@line 771
          $$1374$i = $370; //@line 771
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 774
          $377 = HEAP32[$376 >> 2] | 0; //@line 775
          if ($377 | 0) {
           $$1370$i = $377; //@line 778
           $$1374$i = $376; //@line 778
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 781
          $380 = HEAP32[$379 >> 2] | 0; //@line 782
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 787
           $$1374$i = $379; //@line 787
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 792
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 795
          $$3372$i = $$1370$i; //@line 796
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 801
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 804
         }
         $364 = $362 + 12 | 0; //@line 807
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 811
         }
         $367 = $359 + 8 | 0; //@line 814
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 818
          HEAP32[$367 >> 2] = $362; //@line 819
          $$3372$i = $359; //@line 820
          break;
         } else {
          _abort(); //@line 823
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 831
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 834
         $386 = 6596 + ($385 << 2) | 0; //@line 835
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 840
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 845
            HEAP32[1574] = $391; //@line 846
            $475 = $391; //@line 847
            break L164;
           }
          } else {
           if ((HEAP32[1577] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 854
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 862
            if (!$$3372$i) {
             $475 = $253; //@line 865
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[1577] | 0; //@line 873
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 876
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 880
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 882
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 888
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 892
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 894
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 900
         if (!$409) {
          $475 = $253; //@line 903
         } else {
          if ((HEAP32[1577] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 908
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 912
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 914
           $475 = $253; //@line 915
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 924
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 927
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 929
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 932
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 936
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 939
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 941
         $428 = $$4351$lcssa$i >>> 3; //@line 942
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 6332 + ($428 << 1 << 2) | 0; //@line 946
          $432 = HEAP32[1573] | 0; //@line 947
          $433 = 1 << $428; //@line 948
          if (!($432 & $433)) {
           HEAP32[1573] = $432 | $433; //@line 953
           $$0368$i = $431; //@line 955
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 955
          } else {
           $437 = $431 + 8 | 0; //@line 957
           $438 = HEAP32[$437 >> 2] | 0; //@line 958
           if ((HEAP32[1577] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 962
           } else {
            $$0368$i = $438; //@line 965
            $$pre$phi$i211Z2D = $437; //@line 965
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 968
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 970
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 972
          HEAP32[$354 + 12 >> 2] = $431; //@line 974
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 977
         if (!$444) {
          $$0361$i = 0; //@line 980
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 984
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 988
           $450 = $444 << $449; //@line 989
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 992
           $455 = $450 << $453; //@line 994
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 997
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 1002
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 1008
          }
         }
         $469 = 6596 + ($$0361$i << 2) | 0; //@line 1011
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 1013
         $471 = $354 + 16 | 0; //@line 1014
         HEAP32[$471 + 4 >> 2] = 0; //@line 1016
         HEAP32[$471 >> 2] = 0; //@line 1017
         $473 = 1 << $$0361$i; //@line 1018
         if (!($475 & $473)) {
          HEAP32[1574] = $475 | $473; //@line 1023
          HEAP32[$469 >> 2] = $354; //@line 1024
          HEAP32[$354 + 24 >> 2] = $469; //@line 1026
          HEAP32[$354 + 12 >> 2] = $354; //@line 1028
          HEAP32[$354 + 8 >> 2] = $354; //@line 1030
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 1039
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 1039
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 1046
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 1050
          $494 = HEAP32[$492 >> 2] | 0; //@line 1052
          if (!$494) {
           label = 136; //@line 1055
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 1058
           $$0345$i = $494; //@line 1058
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[1577] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 1065
          } else {
           HEAP32[$492 >> 2] = $354; //@line 1068
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 1070
           HEAP32[$354 + 12 >> 2] = $354; //@line 1072
           HEAP32[$354 + 8 >> 2] = $354; //@line 1074
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 1079
          $502 = HEAP32[$501 >> 2] | 0; //@line 1080
          $503 = HEAP32[1577] | 0; //@line 1081
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 1087
           HEAP32[$501 >> 2] = $354; //@line 1088
           HEAP32[$354 + 8 >> 2] = $502; //@line 1090
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 1092
           HEAP32[$354 + 24 >> 2] = 0; //@line 1094
           break;
          } else {
           _abort(); //@line 1097
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 1104
       STACKTOP = sp; //@line 1105
       return $$0 | 0; //@line 1105
      } else {
       $$0197 = $252; //@line 1107
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[1575] | 0; //@line 1114
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 1117
  $515 = HEAP32[1578] | 0; //@line 1118
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 1121
   HEAP32[1578] = $517; //@line 1122
   HEAP32[1575] = $514; //@line 1123
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 1126
   HEAP32[$515 + $512 >> 2] = $514; //@line 1128
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 1131
  } else {
   HEAP32[1575] = 0; //@line 1133
   HEAP32[1578] = 0; //@line 1134
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 1137
   $526 = $515 + $512 + 4 | 0; //@line 1139
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 1142
  }
  $$0 = $515 + 8 | 0; //@line 1145
  STACKTOP = sp; //@line 1146
  return $$0 | 0; //@line 1146
 }
 $530 = HEAP32[1576] | 0; //@line 1148
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 1151
  HEAP32[1576] = $532; //@line 1152
  $533 = HEAP32[1579] | 0; //@line 1153
  $534 = $533 + $$0197 | 0; //@line 1154
  HEAP32[1579] = $534; //@line 1155
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 1158
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 1161
  $$0 = $533 + 8 | 0; //@line 1163
  STACKTOP = sp; //@line 1164
  return $$0 | 0; //@line 1164
 }
 if (!(HEAP32[1691] | 0)) {
  HEAP32[1693] = 4096; //@line 1169
  HEAP32[1692] = 4096; //@line 1170
  HEAP32[1694] = -1; //@line 1171
  HEAP32[1695] = -1; //@line 1172
  HEAP32[1696] = 0; //@line 1173
  HEAP32[1684] = 0; //@line 1174
  HEAP32[1691] = $1 & -16 ^ 1431655768; //@line 1178
  $548 = 4096; //@line 1179
 } else {
  $548 = HEAP32[1693] | 0; //@line 1182
 }
 $545 = $$0197 + 48 | 0; //@line 1184
 $546 = $$0197 + 47 | 0; //@line 1185
 $547 = $548 + $546 | 0; //@line 1186
 $549 = 0 - $548 | 0; //@line 1187
 $550 = $547 & $549; //@line 1188
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 1191
  STACKTOP = sp; //@line 1192
  return $$0 | 0; //@line 1192
 }
 $552 = HEAP32[1683] | 0; //@line 1194
 if ($552 | 0) {
  $554 = HEAP32[1681] | 0; //@line 1197
  $555 = $554 + $550 | 0; //@line 1198
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 1203
   STACKTOP = sp; //@line 1204
   return $$0 | 0; //@line 1204
  }
 }
 L244 : do {
  if (!(HEAP32[1684] & 4)) {
   $561 = HEAP32[1579] | 0; //@line 1212
   L246 : do {
    if (!$561) {
     label = 163; //@line 1216
    } else {
     $$0$i$i = 6740; //@line 1218
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 1220
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 1223
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 1232
      if (!$570) {
       label = 163; //@line 1235
       break L246;
      } else {
       $$0$i$i = $570; //@line 1238
      }
     }
     $595 = $547 - $530 & $549; //@line 1242
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 1245
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 1253
       } else {
        $$723947$i = $595; //@line 1255
        $$748$i = $597; //@line 1255
        label = 180; //@line 1256
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 1260
       $$2253$ph$i = $595; //@line 1260
       label = 171; //@line 1261
      }
     } else {
      $$2234243136$i = 0; //@line 1264
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 1270
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 1273
     } else {
      $574 = $572; //@line 1275
      $575 = HEAP32[1692] | 0; //@line 1276
      $576 = $575 + -1 | 0; //@line 1277
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 1285
      $584 = HEAP32[1681] | 0; //@line 1286
      $585 = $$$i + $584 | 0; //@line 1287
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[1683] | 0; //@line 1292
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 1299
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 1303
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 1306
        $$748$i = $572; //@line 1306
        label = 180; //@line 1307
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 1310
        $$2253$ph$i = $$$i; //@line 1310
        label = 171; //@line 1311
       }
      } else {
       $$2234243136$i = 0; //@line 1314
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 1321
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 1330
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 1333
       $$748$i = $$2247$ph$i; //@line 1333
       label = 180; //@line 1334
       break L244;
      }
     }
     $607 = HEAP32[1693] | 0; //@line 1338
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 1342
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 1345
      $$748$i = $$2247$ph$i; //@line 1345
      label = 180; //@line 1346
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 1352
      $$2234243136$i = 0; //@line 1353
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 1357
      $$748$i = $$2247$ph$i; //@line 1357
      label = 180; //@line 1358
      break L244;
     }
    }
   } while (0);
   HEAP32[1684] = HEAP32[1684] | 4; //@line 1365
   $$4236$i = $$2234243136$i; //@line 1366
   label = 178; //@line 1367
  } else {
   $$4236$i = 0; //@line 1369
   label = 178; //@line 1370
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 1376
   $621 = _sbrk(0) | 0; //@line 1377
   $627 = $621 - $620 | 0; //@line 1385
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 1387
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 1395
    $$748$i = $620; //@line 1395
    label = 180; //@line 1396
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[1681] | 0) + $$723947$i | 0; //@line 1402
  HEAP32[1681] = $633; //@line 1403
  if ($633 >>> 0 > (HEAP32[1682] | 0) >>> 0) {
   HEAP32[1682] = $633; //@line 1407
  }
  $636 = HEAP32[1579] | 0; //@line 1409
  do {
   if (!$636) {
    $638 = HEAP32[1577] | 0; //@line 1413
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[1577] = $$748$i; //@line 1418
    }
    HEAP32[1685] = $$748$i; //@line 1420
    HEAP32[1686] = $$723947$i; //@line 1421
    HEAP32[1688] = 0; //@line 1422
    HEAP32[1582] = HEAP32[1691]; //@line 1424
    HEAP32[1581] = -1; //@line 1425
    HEAP32[1586] = 6332; //@line 1426
    HEAP32[1585] = 6332; //@line 1427
    HEAP32[1588] = 6340; //@line 1428
    HEAP32[1587] = 6340; //@line 1429
    HEAP32[1590] = 6348; //@line 1430
    HEAP32[1589] = 6348; //@line 1431
    HEAP32[1592] = 6356; //@line 1432
    HEAP32[1591] = 6356; //@line 1433
    HEAP32[1594] = 6364; //@line 1434
    HEAP32[1593] = 6364; //@line 1435
    HEAP32[1596] = 6372; //@line 1436
    HEAP32[1595] = 6372; //@line 1437
    HEAP32[1598] = 6380; //@line 1438
    HEAP32[1597] = 6380; //@line 1439
    HEAP32[1600] = 6388; //@line 1440
    HEAP32[1599] = 6388; //@line 1441
    HEAP32[1602] = 6396; //@line 1442
    HEAP32[1601] = 6396; //@line 1443
    HEAP32[1604] = 6404; //@line 1444
    HEAP32[1603] = 6404; //@line 1445
    HEAP32[1606] = 6412; //@line 1446
    HEAP32[1605] = 6412; //@line 1447
    HEAP32[1608] = 6420; //@line 1448
    HEAP32[1607] = 6420; //@line 1449
    HEAP32[1610] = 6428; //@line 1450
    HEAP32[1609] = 6428; //@line 1451
    HEAP32[1612] = 6436; //@line 1452
    HEAP32[1611] = 6436; //@line 1453
    HEAP32[1614] = 6444; //@line 1454
    HEAP32[1613] = 6444; //@line 1455
    HEAP32[1616] = 6452; //@line 1456
    HEAP32[1615] = 6452; //@line 1457
    HEAP32[1618] = 6460; //@line 1458
    HEAP32[1617] = 6460; //@line 1459
    HEAP32[1620] = 6468; //@line 1460
    HEAP32[1619] = 6468; //@line 1461
    HEAP32[1622] = 6476; //@line 1462
    HEAP32[1621] = 6476; //@line 1463
    HEAP32[1624] = 6484; //@line 1464
    HEAP32[1623] = 6484; //@line 1465
    HEAP32[1626] = 6492; //@line 1466
    HEAP32[1625] = 6492; //@line 1467
    HEAP32[1628] = 6500; //@line 1468
    HEAP32[1627] = 6500; //@line 1469
    HEAP32[1630] = 6508; //@line 1470
    HEAP32[1629] = 6508; //@line 1471
    HEAP32[1632] = 6516; //@line 1472
    HEAP32[1631] = 6516; //@line 1473
    HEAP32[1634] = 6524; //@line 1474
    HEAP32[1633] = 6524; //@line 1475
    HEAP32[1636] = 6532; //@line 1476
    HEAP32[1635] = 6532; //@line 1477
    HEAP32[1638] = 6540; //@line 1478
    HEAP32[1637] = 6540; //@line 1479
    HEAP32[1640] = 6548; //@line 1480
    HEAP32[1639] = 6548; //@line 1481
    HEAP32[1642] = 6556; //@line 1482
    HEAP32[1641] = 6556; //@line 1483
    HEAP32[1644] = 6564; //@line 1484
    HEAP32[1643] = 6564; //@line 1485
    HEAP32[1646] = 6572; //@line 1486
    HEAP32[1645] = 6572; //@line 1487
    HEAP32[1648] = 6580; //@line 1488
    HEAP32[1647] = 6580; //@line 1489
    $642 = $$723947$i + -40 | 0; //@line 1490
    $644 = $$748$i + 8 | 0; //@line 1492
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 1497
    $650 = $$748$i + $649 | 0; //@line 1498
    $651 = $642 - $649 | 0; //@line 1499
    HEAP32[1579] = $650; //@line 1500
    HEAP32[1576] = $651; //@line 1501
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 1504
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 1507
    HEAP32[1580] = HEAP32[1695]; //@line 1509
   } else {
    $$024367$i = 6740; //@line 1511
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 1513
     $658 = $$024367$i + 4 | 0; //@line 1514
     $659 = HEAP32[$658 >> 2] | 0; //@line 1515
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 1519
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 1523
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 1528
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 1542
       $673 = (HEAP32[1576] | 0) + $$723947$i | 0; //@line 1544
       $675 = $636 + 8 | 0; //@line 1546
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 1551
       $681 = $636 + $680 | 0; //@line 1552
       $682 = $673 - $680 | 0; //@line 1553
       HEAP32[1579] = $681; //@line 1554
       HEAP32[1576] = $682; //@line 1555
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 1558
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 1561
       HEAP32[1580] = HEAP32[1695]; //@line 1563
       break;
      }
     }
    }
    $688 = HEAP32[1577] | 0; //@line 1568
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[1577] = $$748$i; //@line 1571
     $753 = $$748$i; //@line 1572
    } else {
     $753 = $688; //@line 1574
    }
    $690 = $$748$i + $$723947$i | 0; //@line 1576
    $$124466$i = 6740; //@line 1577
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 1582
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 1586
     if (!$694) {
      $$0$i$i$i = 6740; //@line 1589
      break;
     } else {
      $$124466$i = $694; //@line 1592
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 1601
      $700 = $$124466$i + 4 | 0; //@line 1602
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 1605
      $704 = $$748$i + 8 | 0; //@line 1607
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 1613
      $712 = $690 + 8 | 0; //@line 1615
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 1621
      $722 = $710 + $$0197 | 0; //@line 1625
      $723 = $718 - $710 - $$0197 | 0; //@line 1626
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 1629
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[1576] | 0) + $723 | 0; //@line 1634
        HEAP32[1576] = $728; //@line 1635
        HEAP32[1579] = $722; //@line 1636
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 1639
       } else {
        if ((HEAP32[1578] | 0) == ($718 | 0)) {
         $734 = (HEAP32[1575] | 0) + $723 | 0; //@line 1645
         HEAP32[1575] = $734; //@line 1646
         HEAP32[1578] = $722; //@line 1647
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 1650
         HEAP32[$722 + $734 >> 2] = $734; //@line 1652
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 1656
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 1660
         $743 = $739 >>> 3; //@line 1661
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 1666
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 1668
           $750 = 6332 + ($743 << 1 << 2) | 0; //@line 1670
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 1676
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 1685
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[1573] = HEAP32[1573] & ~(1 << $743); //@line 1695
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 1702
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 1706
             }
             $764 = $748 + 8 | 0; //@line 1709
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 1713
              break;
             }
             _abort(); //@line 1716
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 1721
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 1722
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 1725
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 1727
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 1731
             $783 = $782 + 4 | 0; //@line 1732
             $784 = HEAP32[$783 >> 2] | 0; //@line 1733
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 1736
              if (!$786) {
               $$3$i$i = 0; //@line 1739
               break;
              } else {
               $$1291$i$i = $786; //@line 1742
               $$1293$i$i = $782; //@line 1742
              }
             } else {
              $$1291$i$i = $784; //@line 1745
              $$1293$i$i = $783; //@line 1745
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 1748
              $789 = HEAP32[$788 >> 2] | 0; //@line 1749
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 1752
               $$1293$i$i = $788; //@line 1752
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 1755
              $792 = HEAP32[$791 >> 2] | 0; //@line 1756
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 1761
               $$1293$i$i = $791; //@line 1761
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 1766
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 1769
              $$3$i$i = $$1291$i$i; //@line 1770
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 1775
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 1778
             }
             $776 = $774 + 12 | 0; //@line 1781
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 1785
             }
             $779 = $771 + 8 | 0; //@line 1788
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 1792
              HEAP32[$779 >> 2] = $774; //@line 1793
              $$3$i$i = $771; //@line 1794
              break;
             } else {
              _abort(); //@line 1797
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 1807
           $798 = 6596 + ($797 << 2) | 0; //@line 1808
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 1813
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[1574] = HEAP32[1574] & ~(1 << $797); //@line 1822
             break L311;
            } else {
             if ((HEAP32[1577] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 1828
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 1836
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[1577] | 0; //@line 1846
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 1849
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 1853
           $815 = $718 + 16 | 0; //@line 1854
           $816 = HEAP32[$815 >> 2] | 0; //@line 1855
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 1861
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 1865
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 1867
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 1873
           if (!$822) {
            break;
           }
           if ((HEAP32[1577] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 1881
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 1885
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 1887
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 1894
         $$0287$i$i = $742 + $723 | 0; //@line 1894
        } else {
         $$0$i17$i = $718; //@line 1896
         $$0287$i$i = $723; //@line 1896
        }
        $830 = $$0$i17$i + 4 | 0; //@line 1898
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 1901
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 1904
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 1906
        $836 = $$0287$i$i >>> 3; //@line 1907
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 6332 + ($836 << 1 << 2) | 0; //@line 1911
         $840 = HEAP32[1573] | 0; //@line 1912
         $841 = 1 << $836; //@line 1913
         do {
          if (!($840 & $841)) {
           HEAP32[1573] = $840 | $841; //@line 1919
           $$0295$i$i = $839; //@line 1921
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 1921
          } else {
           $845 = $839 + 8 | 0; //@line 1923
           $846 = HEAP32[$845 >> 2] | 0; //@line 1924
           if ((HEAP32[1577] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 1928
            $$pre$phi$i19$iZ2D = $845; //@line 1928
            break;
           }
           _abort(); //@line 1931
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 1935
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 1937
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 1939
         HEAP32[$722 + 12 >> 2] = $839; //@line 1941
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 1944
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 1948
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 1952
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 1957
          $858 = $852 << $857; //@line 1958
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 1961
          $863 = $858 << $861; //@line 1963
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 1966
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 1971
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 1977
         }
        } while (0);
        $877 = 6596 + ($$0296$i$i << 2) | 0; //@line 1980
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 1982
        $879 = $722 + 16 | 0; //@line 1983
        HEAP32[$879 + 4 >> 2] = 0; //@line 1985
        HEAP32[$879 >> 2] = 0; //@line 1986
        $881 = HEAP32[1574] | 0; //@line 1987
        $882 = 1 << $$0296$i$i; //@line 1988
        if (!($881 & $882)) {
         HEAP32[1574] = $881 | $882; //@line 1993
         HEAP32[$877 >> 2] = $722; //@line 1994
         HEAP32[$722 + 24 >> 2] = $877; //@line 1996
         HEAP32[$722 + 12 >> 2] = $722; //@line 1998
         HEAP32[$722 + 8 >> 2] = $722; //@line 2000
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 2009
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 2009
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 2016
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 2020
         $902 = HEAP32[$900 >> 2] | 0; //@line 2022
         if (!$902) {
          label = 260; //@line 2025
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 2028
          $$0289$i$i = $902; //@line 2028
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[1577] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 2035
         } else {
          HEAP32[$900 >> 2] = $722; //@line 2038
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 2040
          HEAP32[$722 + 12 >> 2] = $722; //@line 2042
          HEAP32[$722 + 8 >> 2] = $722; //@line 2044
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 2049
         $910 = HEAP32[$909 >> 2] | 0; //@line 2050
         $911 = HEAP32[1577] | 0; //@line 2051
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 2057
          HEAP32[$909 >> 2] = $722; //@line 2058
          HEAP32[$722 + 8 >> 2] = $910; //@line 2060
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 2062
          HEAP32[$722 + 24 >> 2] = 0; //@line 2064
          break;
         } else {
          _abort(); //@line 2067
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 2074
      STACKTOP = sp; //@line 2075
      return $$0 | 0; //@line 2075
     } else {
      $$0$i$i$i = 6740; //@line 2077
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 2081
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 2086
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 2094
    }
    $927 = $923 + -47 | 0; //@line 2096
    $929 = $927 + 8 | 0; //@line 2098
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 2104
    $936 = $636 + 16 | 0; //@line 2105
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 2107
    $939 = $938 + 8 | 0; //@line 2108
    $940 = $938 + 24 | 0; //@line 2109
    $941 = $$723947$i + -40 | 0; //@line 2110
    $943 = $$748$i + 8 | 0; //@line 2112
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 2117
    $949 = $$748$i + $948 | 0; //@line 2118
    $950 = $941 - $948 | 0; //@line 2119
    HEAP32[1579] = $949; //@line 2120
    HEAP32[1576] = $950; //@line 2121
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 2124
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 2127
    HEAP32[1580] = HEAP32[1695]; //@line 2129
    $956 = $938 + 4 | 0; //@line 2130
    HEAP32[$956 >> 2] = 27; //@line 2131
    HEAP32[$939 >> 2] = HEAP32[1685]; //@line 2132
    HEAP32[$939 + 4 >> 2] = HEAP32[1686]; //@line 2132
    HEAP32[$939 + 8 >> 2] = HEAP32[1687]; //@line 2132
    HEAP32[$939 + 12 >> 2] = HEAP32[1688]; //@line 2132
    HEAP32[1685] = $$748$i; //@line 2133
    HEAP32[1686] = $$723947$i; //@line 2134
    HEAP32[1688] = 0; //@line 2135
    HEAP32[1687] = $939; //@line 2136
    $958 = $940; //@line 2137
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 2139
     HEAP32[$958 >> 2] = 7; //@line 2140
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 2153
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 2156
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 2159
     HEAP32[$938 >> 2] = $964; //@line 2160
     $969 = $964 >>> 3; //@line 2161
     if ($964 >>> 0 < 256) {
      $972 = 6332 + ($969 << 1 << 2) | 0; //@line 2165
      $973 = HEAP32[1573] | 0; //@line 2166
      $974 = 1 << $969; //@line 2167
      if (!($973 & $974)) {
       HEAP32[1573] = $973 | $974; //@line 2172
       $$0211$i$i = $972; //@line 2174
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 2174
      } else {
       $978 = $972 + 8 | 0; //@line 2176
       $979 = HEAP32[$978 >> 2] | 0; //@line 2177
       if ((HEAP32[1577] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 2181
       } else {
        $$0211$i$i = $979; //@line 2184
        $$pre$phi$i$iZ2D = $978; //@line 2184
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 2187
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 2189
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 2191
      HEAP32[$636 + 12 >> 2] = $972; //@line 2193
      break;
     }
     $985 = $964 >>> 8; //@line 2196
     if (!$985) {
      $$0212$i$i = 0; //@line 2199
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 2203
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 2207
       $991 = $985 << $990; //@line 2208
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 2211
       $996 = $991 << $994; //@line 2213
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 2216
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 2221
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 2227
      }
     }
     $1010 = 6596 + ($$0212$i$i << 2) | 0; //@line 2230
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 2232
     HEAP32[$636 + 20 >> 2] = 0; //@line 2234
     HEAP32[$936 >> 2] = 0; //@line 2235
     $1013 = HEAP32[1574] | 0; //@line 2236
     $1014 = 1 << $$0212$i$i; //@line 2237
     if (!($1013 & $1014)) {
      HEAP32[1574] = $1013 | $1014; //@line 2242
      HEAP32[$1010 >> 2] = $636; //@line 2243
      HEAP32[$636 + 24 >> 2] = $1010; //@line 2245
      HEAP32[$636 + 12 >> 2] = $636; //@line 2247
      HEAP32[$636 + 8 >> 2] = $636; //@line 2249
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 2258
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 2258
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 2265
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 2269
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 2271
      if (!$1034) {
       label = 286; //@line 2274
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 2277
       $$0207$i$i = $1034; //@line 2277
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[1577] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 2284
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 2287
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 2289
       HEAP32[$636 + 12 >> 2] = $636; //@line 2291
       HEAP32[$636 + 8 >> 2] = $636; //@line 2293
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 2298
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 2299
      $1043 = HEAP32[1577] | 0; //@line 2300
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 2306
       HEAP32[$1041 >> 2] = $636; //@line 2307
       HEAP32[$636 + 8 >> 2] = $1042; //@line 2309
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 2311
       HEAP32[$636 + 24 >> 2] = 0; //@line 2313
       break;
      } else {
       _abort(); //@line 2316
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[1576] | 0; //@line 2323
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 2326
   HEAP32[1576] = $1054; //@line 2327
   $1055 = HEAP32[1579] | 0; //@line 2328
   $1056 = $1055 + $$0197 | 0; //@line 2329
   HEAP32[1579] = $1056; //@line 2330
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 2333
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 2336
   $$0 = $1055 + 8 | 0; //@line 2338
   STACKTOP = sp; //@line 2339
   return $$0 | 0; //@line 2339
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 2343
 $$0 = 0; //@line 2344
 STACKTOP = sp; //@line 2345
 return $$0 | 0; //@line 2345
}
function _sn_coap_parser__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $107 = 0, $110 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $142 = 0, $143 = 0, $148 = 0, $151 = 0, $154 = 0, $155 = 0, $160 = 0, $163 = 0, $167 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $197 = 0, $199 = 0, $2 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $217 = 0, $220 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $247 = 0, $248 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $272 = 0, $275 = 0, $276 = 0, $281 = 0, $284 = 0, $286 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $327 = 0, $33 = 0, $330 = 0, $331 = 0, $336 = 0, $339 = 0, $341 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $364 = 0, $367 = 0, $368 = 0, $373 = 0, $376 = 0, $380 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $396 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $405 = 0, $408 = 0, $412 = 0, $413 = 0, $418 = 0, $419 = 0, $42 = 0, $424 = 0, $427 = 0, $433 = 0, $434 = 0, $439 = 0, $440 = 0, $445 = 0, $448 = 0, $45 = 0, $452 = 0, $453 = 0, $463 = 0, $464 = 0, $466 = 0, $473 = 0, $474 = 0, $475 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $73 = 0, $76 = 0, $8 = 0, $90 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $160$looptemp = 0, $281$looptemp = 0, $336$looptemp = 0, $373$looptemp = 0, $389$looptemp = 0, $405$looptemp = 0, $424$looptemp = 0, $445$looptemp = 0, $148$looptemp = 0;
 sp = STACKTOP; //@line 16221
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16223
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 16225
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16227
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16229
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16231
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16233
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16235
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16237
 if (!$AsyncRetVal) {
  $$0 = 0; //@line 16240
  $473 = ___async_retval; //@line 16241
  HEAP32[$473 >> 2] = $$0; //@line 16242
  return;
 }
 dest = $AsyncRetVal; //@line 16245
 stop = dest + 44 | 0; //@line 16245
 do {
  HEAP32[dest >> 2] = 0; //@line 16245
  dest = dest + 4 | 0; //@line 16245
 } while ((dest | 0) < (stop | 0));
 $17 = $AsyncRetVal + 16 | 0; //@line 16246
 HEAP32[$17 >> 2] = -1; //@line 16247
 HEAP32[$8 >> 2] = HEAP8[$6 >> 0] & -64 & 255; //@line 16251
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP8[$6 >> 0] & 48; //@line 16256
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAPU8[$6 + 1 >> 0]; //@line 16261
 $31 = HEAP8[$6 + 3 >> 0] | 0; //@line 16264
 $33 = $AsyncRetVal + 20 | 0; //@line 16266
 HEAP16[$33 >> 1] = $31 & 255; //@line 16267
 HEAP16[$33 >> 1] = HEAPU8[$6 + 2 >> 0] << 8 | $31 & 255; //@line 16274
 $40 = $6 + 4 | 0; //@line 16275
 HEAP32[$2 >> 2] = $40; //@line 16276
 $42 = HEAP8[$6 >> 0] & 15; //@line 16278
 HEAP8[$AsyncRetVal >> 0] = $42; //@line 16279
 L5 : do {
  if (!($42 << 24 >> 24)) {
   $63 = $40; //@line 16283
   $64 = $4 & 65535; //@line 16284
   $65 = $6; //@line 16285
   $66 = $65 + $64 | 0; //@line 16286
   $68 = $AsyncRetVal + 40 | 0; //@line 16288
   $69 = $AsyncRetVal + 32 | 0; //@line 16289
   $70 = $AsyncRetVal + 22 | 0; //@line 16290
   $$0208$i = 0; //@line 16291
   $$sink275$i = $66 - $63 | 0; //@line 16291
   $474 = $63; //@line 16291
   $73 = $40; //@line 16291
   L7 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 98; //@line 16296
     break;
    }
    $trunc277$i = HEAP8[$73 >> 0] | 0; //@line 16299
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 98; //@line 16302
     break;
    }
    $76 = $trunc277$i & 15; //@line 16306
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 16307
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L5;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$73 + 1 >> 0] | 0; //@line 16319
      $$sink214$i = 13; //@line 16319
      $$sink3$i = 1; //@line 16319
      label = 15; //@line 16320
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$73 + 1 >> 0] << 8) + 269 | 0; //@line 16332
      $$sink214$i = HEAPU8[$73 + 2 >> 0] | 0; //@line 16332
      $$sink3$i = 2; //@line 16332
      label = 15; //@line 16333
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 16337
      $475 = $474; //@line 16337
      $95 = $73; //@line 16337
     }
    }
    if ((label | 0) == 15) {
     label = 0; //@line 16341
     $90 = $73 + $$sink3$i | 0; //@line 16343
     HEAP32[$2 >> 2] = $90; //@line 16344
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 16346
     $475 = $90; //@line 16346
     $95 = $90; //@line 16346
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 16349
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L5;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$95 + 1 >> 0] | 0; //@line 16360
      $$sink216$i = 13; //@line 16360
      $$sink8$i = 1; //@line 16360
      label = 19; //@line 16361
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$95 + 1 >> 0] << 8) + 269 | 0; //@line 16373
      $$sink216$i = HEAPU8[$95 + 2 >> 0] | 0; //@line 16373
      $$sink8$i = 2; //@line 16373
      label = 19; //@line 16374
      break;
     }
    default:
     {
      $$1202$in$i = $76; //@line 16378
      $110 = $475; //@line 16378
      $122 = $95; //@line 16378
     }
    }
    if ((label | 0) == 19) {
     label = 0; //@line 16382
     $107 = $95 + $$sink8$i | 0; //@line 16384
     HEAP32[$2 >> 2] = $107; //@line 16385
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 16387
     $110 = $107; //@line 16387
     $122 = $107; //@line 16387
    }
    $$1202$i = $$1202$in$i & 65535; //@line 16389
    $111 = $66 - $110 & 65535; //@line 16391
    $trunc$i = $$0208$i & 65535; //@line 16392
    L23 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 60; //@line 16396
       break L7;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$68 >> 2] | 0)) {
        label = 22; //@line 16404
        break L7;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 35; //@line 16409
         break L7;
         break;
        }
       case 4:
        {
         label = 40; //@line 16414
         break L7;
         break;
        }
       case 3:
        {
         label = 43; //@line 16419
         break L7;
         break;
        }
       case 8:
        {
         label = 48; //@line 16424
         break L7;
         break;
        }
       case 20:
        {
         label = 57; //@line 16429
         break L7;
         break;
        }
       case 11:
        {
         label = 60; //@line 16434
         break L7;
         break;
        }
       case 15:
        {
         label = 68; //@line 16439
         break L7;
         break;
        }
       case 12:
        {
         label = 26; //@line 16444
         break L23;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L5;
         }
         $154 = $122 + 1 | 0; //@line 16453
         HEAP32[$2 >> 2] = $154; //@line 16454
         $155 = $$1202$in$i & 255; //@line 16455
         if (!($155 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 16458
         } else {
          $$045$i256$i = $155; //@line 16460
          $$06$i255$i = 0; //@line 16460
          $160 = $154; //@line 16460
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 16462
           $160$looptemp = $160;
           $160 = $160 + 1 | 0; //@line 16464
           HEAP32[$2 >> 2] = $160; //@line 16465
           $163 = $$06$i255$i << 8 | HEAPU8[$160$looptemp >> 0]; //@line 16468
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $163; //@line 16471
            break;
           } else {
            $$06$i255$i = $163; //@line 16474
           }
          }
         }
         HEAP32[(HEAP32[$68 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 16480
         break L23;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L5;
         }
         $272 = (HEAP32[$68 >> 2] | 0) + 28 | 0; //@line 16490
         if ((HEAP32[$272 >> 2] | 0) != -1) {
          break L5;
         }
         $275 = $122 + 1 | 0; //@line 16496
         HEAP32[$2 >> 2] = $275; //@line 16497
         $276 = $$1202$in$i & 255; //@line 16498
         if (!($276 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 16501
         } else {
          $$045$i270$i = $276; //@line 16503
          $$06$i269$i = 0; //@line 16503
          $281 = $275; //@line 16503
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 16505
           $281$looptemp = $281;
           $281 = $281 + 1 | 0; //@line 16507
           HEAP32[$2 >> 2] = $281; //@line 16508
           $284 = $$06$i269$i << 8 | HEAPU8[$281$looptemp >> 0]; //@line 16511
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $284; //@line 16514
            break;
           } else {
            $$06$i269$i = $284; //@line 16517
           }
          }
         }
         HEAP32[$272 >> 2] = $$0$lcssa$i272$i; //@line 16521
         break L23;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L5;
         }
         $327 = (HEAP32[$68 >> 2] | 0) + 32 | 0; //@line 16531
         if ((HEAP32[$327 >> 2] | 0) != -1) {
          break L5;
         }
         $330 = $122 + 1 | 0; //@line 16537
         HEAP32[$2 >> 2] = $330; //@line 16538
         $331 = $$1202$in$i & 255; //@line 16539
         if (!($331 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 16542
         } else {
          $$045$i263$i = $331; //@line 16544
          $$06$i262$i = 0; //@line 16544
          $336 = $330; //@line 16544
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 16546
           $336$looptemp = $336;
           $336 = $336 + 1 | 0; //@line 16548
           HEAP32[$2 >> 2] = $336; //@line 16549
           $339 = $$06$i262$i << 8 | HEAPU8[$336$looptemp >> 0]; //@line 16552
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $339; //@line 16555
            break;
           } else {
            $$06$i262$i = $339; //@line 16558
           }
          }
         }
         HEAP32[$327 >> 2] = $$0$lcssa$i265$i; //@line 16562
         break L23;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L5;
         }
         $364 = (HEAP32[$68 >> 2] | 0) + 40 | 0; //@line 16572
         if ((HEAP32[$364 >> 2] | 0) != -1) {
          break L5;
         }
         $367 = $122 + 1 | 0; //@line 16578
         HEAP32[$2 >> 2] = $367; //@line 16579
         $368 = $$1202$in$i & 255; //@line 16580
         if (!($368 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 16583
         } else {
          $$045$i249$i = $368; //@line 16585
          $$06$i248$i = 0; //@line 16585
          $373 = $367; //@line 16585
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 16587
           $373$looptemp = $373;
           $373 = $373 + 1 | 0; //@line 16589
           HEAP32[$2 >> 2] = $373; //@line 16590
           $376 = $$06$i248$i << 8 | HEAPU8[$373$looptemp >> 0]; //@line 16593
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $376; //@line 16596
            break;
           } else {
            $$06$i248$i = $376; //@line 16599
           }
          }
         }
         HEAP32[$364 >> 2] = $$0$lcssa$i251$i; //@line 16603
         break L23;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L5;
         }
         $380 = (HEAP32[$68 >> 2] | 0) + 36 | 0; //@line 16613
         if ((HEAP32[$380 >> 2] | 0) != -1) {
          break L5;
         }
         $383 = $122 + 1 | 0; //@line 16619
         HEAP32[$2 >> 2] = $383; //@line 16620
         $384 = $$1202$in$i & 255; //@line 16621
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 16624
         } else {
          $$045$i242$i = $384; //@line 16626
          $$06$i241$i = 0; //@line 16626
          $389 = $383; //@line 16626
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 16628
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 16630
           HEAP32[$2 >> 2] = $389; //@line 16631
           $392 = $$06$i241$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 16634
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $392; //@line 16637
            break;
           } else {
            $$06$i241$i = $392; //@line 16640
           }
          }
         }
         HEAP32[$380 >> 2] = $$0$lcssa$i244$i; //@line 16644
         break L23;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L5;
         }
         $396 = (HEAP32[$68 >> 2] | 0) + 12 | 0; //@line 16654
         if ((HEAP32[$396 >> 2] | 0) != -1) {
          break L5;
         }
         $399 = $122 + 1 | 0; //@line 16660
         HEAP32[$2 >> 2] = $399; //@line 16661
         $400 = $$1202$in$i & 255; //@line 16662
         if (!($400 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 16665
         } else {
          $$045$i235$i = $400; //@line 16667
          $$06$i234$i = 0; //@line 16667
          $405 = $399; //@line 16667
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 16669
           $405$looptemp = $405;
           $405 = $405 + 1 | 0; //@line 16671
           HEAP32[$2 >> 2] = $405; //@line 16672
           $408 = $$06$i234$i << 8 | HEAPU8[$405$looptemp >> 0]; //@line 16675
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $408; //@line 16678
            break;
           } else {
            $$06$i234$i = $408; //@line 16681
           }
          }
         }
         HEAP32[$396 >> 2] = $$0$lcssa$i237$i; //@line 16685
         break L23;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L5;
         }
         $412 = (HEAP32[$68 >> 2] | 0) + 1 | 0; //@line 16695
         $413 = HEAP8[$412 >> 0] | 0; //@line 16696
         if ($413 & 1) {
          break L5;
         }
         HEAP8[$412 >> 0] = $413 | 1; //@line 16703
         $418 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 16705
         HEAP32[$2 >> 2] = $418; //@line 16706
         $419 = $$1202$in$i & 255; //@line 16707
         if (!($419 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 16710
         } else {
          $$045$i228$i = $419; //@line 16712
          $$06$i227$i = 0; //@line 16712
          $424 = $418; //@line 16712
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 16714
           $424$looptemp = $424;
           $424 = $424 + 1 | 0; //@line 16716
           HEAP32[$2 >> 2] = $424; //@line 16717
           $427 = $$06$i227$i << 8 | HEAPU8[$424$looptemp >> 0]; //@line 16720
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $427; //@line 16723
            break;
           } else {
            $$06$i227$i = $427; //@line 16726
           }
          }
         }
         HEAP32[(HEAP32[$68 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 16732
         break L23;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L5;
         }
         $433 = (HEAP32[$68 >> 2] | 0) + 1 | 0; //@line 16742
         $434 = HEAP8[$433 >> 0] | 0; //@line 16743
         if ($434 & 2) {
          break L5;
         }
         HEAP8[$433 >> 0] = $434 | 2; //@line 16750
         $439 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 16752
         HEAP32[$2 >> 2] = $439; //@line 16753
         $440 = $$1202$in$i & 255; //@line 16754
         if (!($440 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 16757
         } else {
          $$045$i221$i = $440; //@line 16759
          $$06$i220$i = 0; //@line 16759
          $445 = $439; //@line 16759
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 16761
           $445$looptemp = $445;
           $445 = $445 + 1 | 0; //@line 16763
           HEAP32[$2 >> 2] = $445; //@line 16764
           $448 = $$06$i220$i << 8 | HEAPU8[$445$looptemp >> 0]; //@line 16767
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $448; //@line 16770
            break;
           } else {
            $$06$i220$i = $448; //@line 16773
           }
          }
         }
         HEAP32[(HEAP32[$68 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 16779
         break L23;
         break;
        }
       default:
        {
         break L5;
        }
       }
       break;
      }
     case 12:
      {
       label = 26; //@line 16790
       break;
      }
     default:
      {
       break L5;
      }
     }
    } while (0);
    if ((label | 0) == 26) {
     label = 0; //@line 16799
     if (($$1202$i & 65535) > 2) {
      break L5;
     }
     if ((HEAP32[$17 >> 2] | 0) != -1) {
      break L5;
     }
     $142 = $122 + 1 | 0; //@line 16809
     HEAP32[$2 >> 2] = $142; //@line 16810
     $143 = $$1202$in$i & 255; //@line 16811
     if (!($143 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 16814
     } else {
      $$045$i$i = $143; //@line 16816
      $$06$i$i = 0; //@line 16816
      $148 = $142; //@line 16816
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 16818
       $148$looptemp = $148;
       $148 = $148 + 1 | 0; //@line 16820
       HEAP32[$2 >> 2] = $148; //@line 16821
       $151 = $$06$i$i << 8 | HEAPU8[$148$looptemp >> 0]; //@line 16824
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $151; //@line 16827
        break;
       } else {
        $$06$i$i = $151; //@line 16830
       }
      }
     }
     HEAP32[$17 >> 2] = $$0$lcssa$i$i; //@line 16834
    }
    $452 = HEAP32[$2 >> 2] | 0; //@line 16836
    $453 = $452 - $65 | 0; //@line 16837
    if (($453 | 0) > ($64 | 0)) {
     break L5;
    } else {
     $$sink275$i = $64 - $453 | 0; //@line 16844
     $474 = $452; //@line 16844
     $73 = $452; //@line 16844
    }
   }
   if ((label | 0) == 22) {
    $114 = HEAP32[$10 >> 2] | 0; //@line 16848
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(88) | 0; //@line 16849
    $115 = FUNCTION_TABLE_ii[$114 & 15](68) | 0; //@line 16850
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 16853
     $116 = $ReallocAsyncCtx3 + 4 | 0; //@line 16854
     HEAP32[$116 >> 2] = $68; //@line 16855
     $117 = $ReallocAsyncCtx3 + 8 | 0; //@line 16856
     HEAP32[$117 >> 2] = $2; //@line 16857
     $118 = $ReallocAsyncCtx3 + 12 | 0; //@line 16858
     HEAP32[$118 >> 2] = $$1202$in$i; //@line 16859
     $119 = $ReallocAsyncCtx3 + 16 | 0; //@line 16860
     HEAP32[$119 >> 2] = $$0208$i; //@line 16861
     $120 = $ReallocAsyncCtx3 + 20 | 0; //@line 16862
     HEAP16[$120 >> 1] = $$1202$i; //@line 16863
     $121 = $ReallocAsyncCtx3 + 24 | 0; //@line 16864
     HEAP32[$121 >> 2] = $122; //@line 16865
     $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 16866
     HEAP32[$123 >> 2] = $2; //@line 16867
     $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 16868
     HEAP32[$124 >> 2] = $65; //@line 16869
     $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 16870
     HEAP32[$125 >> 2] = $64; //@line 16871
     $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 16872
     HEAP32[$126 >> 2] = $68; //@line 16873
     $127 = $ReallocAsyncCtx3 + 44 | 0; //@line 16874
     HEAP32[$127 >> 2] = $12; //@line 16875
     $128 = $ReallocAsyncCtx3 + 48 | 0; //@line 16876
     HEAP16[$128 >> 1] = $111; //@line 16877
     $129 = $ReallocAsyncCtx3 + 52 | 0; //@line 16878
     HEAP32[$129 >> 2] = $10; //@line 16879
     $130 = $ReallocAsyncCtx3 + 56 | 0; //@line 16880
     HEAP32[$130 >> 2] = $69; //@line 16881
     $131 = $ReallocAsyncCtx3 + 60 | 0; //@line 16882
     HEAP32[$131 >> 2] = $70; //@line 16883
     $132 = $ReallocAsyncCtx3 + 64 | 0; //@line 16884
     HEAP16[$132 >> 1] = $trunc$i; //@line 16885
     $133 = $ReallocAsyncCtx3 + 68 | 0; //@line 16886
     HEAP32[$133 >> 2] = $AsyncRetVal; //@line 16887
     $134 = $ReallocAsyncCtx3 + 72 | 0; //@line 16888
     HEAP32[$134 >> 2] = $14; //@line 16889
     $135 = $ReallocAsyncCtx3 + 76 | 0; //@line 16890
     HEAP32[$135 >> 2] = $AsyncRetVal; //@line 16891
     $136 = $ReallocAsyncCtx3 + 80 | 0; //@line 16892
     HEAP32[$136 >> 2] = $17; //@line 16893
     $137 = $ReallocAsyncCtx3 + 84 | 0; //@line 16894
     HEAP32[$137 >> 2] = $66; //@line 16895
     sp = STACKTOP; //@line 16896
     return;
    }
    HEAP32[___async_retval >> 2] = $115; //@line 16900
    ___async_unwind = 0; //@line 16901
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 16902
    $116 = $ReallocAsyncCtx3 + 4 | 0; //@line 16903
    HEAP32[$116 >> 2] = $68; //@line 16904
    $117 = $ReallocAsyncCtx3 + 8 | 0; //@line 16905
    HEAP32[$117 >> 2] = $2; //@line 16906
    $118 = $ReallocAsyncCtx3 + 12 | 0; //@line 16907
    HEAP32[$118 >> 2] = $$1202$in$i; //@line 16908
    $119 = $ReallocAsyncCtx3 + 16 | 0; //@line 16909
    HEAP32[$119 >> 2] = $$0208$i; //@line 16910
    $120 = $ReallocAsyncCtx3 + 20 | 0; //@line 16911
    HEAP16[$120 >> 1] = $$1202$i; //@line 16912
    $121 = $ReallocAsyncCtx3 + 24 | 0; //@line 16913
    HEAP32[$121 >> 2] = $122; //@line 16914
    $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 16915
    HEAP32[$123 >> 2] = $2; //@line 16916
    $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 16917
    HEAP32[$124 >> 2] = $65; //@line 16918
    $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 16919
    HEAP32[$125 >> 2] = $64; //@line 16920
    $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 16921
    HEAP32[$126 >> 2] = $68; //@line 16922
    $127 = $ReallocAsyncCtx3 + 44 | 0; //@line 16923
    HEAP32[$127 >> 2] = $12; //@line 16924
    $128 = $ReallocAsyncCtx3 + 48 | 0; //@line 16925
    HEAP16[$128 >> 1] = $111; //@line 16926
    $129 = $ReallocAsyncCtx3 + 52 | 0; //@line 16927
    HEAP32[$129 >> 2] = $10; //@line 16928
    $130 = $ReallocAsyncCtx3 + 56 | 0; //@line 16929
    HEAP32[$130 >> 2] = $69; //@line 16930
    $131 = $ReallocAsyncCtx3 + 60 | 0; //@line 16931
    HEAP32[$131 >> 2] = $70; //@line 16932
    $132 = $ReallocAsyncCtx3 + 64 | 0; //@line 16933
    HEAP16[$132 >> 1] = $trunc$i; //@line 16934
    $133 = $ReallocAsyncCtx3 + 68 | 0; //@line 16935
    HEAP32[$133 >> 2] = $AsyncRetVal; //@line 16936
    $134 = $ReallocAsyncCtx3 + 72 | 0; //@line 16937
    HEAP32[$134 >> 2] = $14; //@line 16938
    $135 = $ReallocAsyncCtx3 + 76 | 0; //@line 16939
    HEAP32[$135 >> 2] = $AsyncRetVal; //@line 16940
    $136 = $ReallocAsyncCtx3 + 80 | 0; //@line 16941
    HEAP32[$136 >> 2] = $17; //@line 16942
    $137 = $ReallocAsyncCtx3 + 84 | 0; //@line 16943
    HEAP32[$137 >> 2] = $66; //@line 16944
    sp = STACKTOP; //@line 16945
    return;
   } else if ((label | 0) == 35) {
    $167 = $$1202$in$i & 65535; //@line 16949
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $170 = HEAP32[$68 >> 2] | 0; //@line 16955
    if (HEAP32[$170 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$170 + 2 >> 1] = $$1202$i; //@line 16963
    $175 = $122 + 1 | 0; //@line 16964
    HEAP32[$2 >> 2] = $175; //@line 16965
    $176 = HEAP32[$10 >> 2] | 0; //@line 16966
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 16967
    $177 = FUNCTION_TABLE_ii[$176 & 15]($$1202$i) | 0; //@line 16968
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 16971
     $178 = $ReallocAsyncCtx4 + 4 | 0; //@line 16972
     HEAP32[$178 >> 2] = $68; //@line 16973
     $179 = $ReallocAsyncCtx4 + 8 | 0; //@line 16974
     HEAP32[$179 >> 2] = $2; //@line 16975
     $180 = $ReallocAsyncCtx4 + 12 | 0; //@line 16976
     HEAP32[$180 >> 2] = $2; //@line 16977
     $181 = $ReallocAsyncCtx4 + 16 | 0; //@line 16978
     HEAP32[$181 >> 2] = $65; //@line 16979
     $182 = $ReallocAsyncCtx4 + 20 | 0; //@line 16980
     HEAP32[$182 >> 2] = $64; //@line 16981
     $183 = $ReallocAsyncCtx4 + 24 | 0; //@line 16982
     HEAP32[$183 >> 2] = $68; //@line 16983
     $184 = $ReallocAsyncCtx4 + 28 | 0; //@line 16984
     HEAP32[$184 >> 2] = $12; //@line 16985
     $185 = $ReallocAsyncCtx4 + 32 | 0; //@line 16986
     HEAP32[$185 >> 2] = $10; //@line 16987
     $186 = $ReallocAsyncCtx4 + 36 | 0; //@line 16988
     HEAP32[$186 >> 2] = $69; //@line 16989
     $187 = $ReallocAsyncCtx4 + 40 | 0; //@line 16990
     HEAP32[$187 >> 2] = $70; //@line 16991
     $188 = $ReallocAsyncCtx4 + 44 | 0; //@line 16992
     HEAP32[$188 >> 2] = $AsyncRetVal; //@line 16993
     $189 = $ReallocAsyncCtx4 + 48 | 0; //@line 16994
     HEAP32[$189 >> 2] = $14; //@line 16995
     $190 = $ReallocAsyncCtx4 + 52 | 0; //@line 16996
     HEAP32[$190 >> 2] = $AsyncRetVal; //@line 16997
     $191 = $ReallocAsyncCtx4 + 56 | 0; //@line 16998
     HEAP32[$191 >> 2] = $17; //@line 16999
     $192 = $ReallocAsyncCtx4 + 60 | 0; //@line 17000
     HEAP32[$192 >> 2] = $66; //@line 17001
     $193 = $ReallocAsyncCtx4 + 64 | 0; //@line 17002
     HEAP32[$193 >> 2] = $$0208$i; //@line 17003
     $194 = $ReallocAsyncCtx4 + 68 | 0; //@line 17004
     HEAP32[$194 >> 2] = $175; //@line 17005
     $195 = $ReallocAsyncCtx4 + 72 | 0; //@line 17006
     HEAP32[$195 >> 2] = $167; //@line 17007
     sp = STACKTOP; //@line 17008
     return;
    }
    HEAP32[___async_retval >> 2] = $177; //@line 17012
    ___async_unwind = 0; //@line 17013
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 17014
    $178 = $ReallocAsyncCtx4 + 4 | 0; //@line 17015
    HEAP32[$178 >> 2] = $68; //@line 17016
    $179 = $ReallocAsyncCtx4 + 8 | 0; //@line 17017
    HEAP32[$179 >> 2] = $2; //@line 17018
    $180 = $ReallocAsyncCtx4 + 12 | 0; //@line 17019
    HEAP32[$180 >> 2] = $2; //@line 17020
    $181 = $ReallocAsyncCtx4 + 16 | 0; //@line 17021
    HEAP32[$181 >> 2] = $65; //@line 17022
    $182 = $ReallocAsyncCtx4 + 20 | 0; //@line 17023
    HEAP32[$182 >> 2] = $64; //@line 17024
    $183 = $ReallocAsyncCtx4 + 24 | 0; //@line 17025
    HEAP32[$183 >> 2] = $68; //@line 17026
    $184 = $ReallocAsyncCtx4 + 28 | 0; //@line 17027
    HEAP32[$184 >> 2] = $12; //@line 17028
    $185 = $ReallocAsyncCtx4 + 32 | 0; //@line 17029
    HEAP32[$185 >> 2] = $10; //@line 17030
    $186 = $ReallocAsyncCtx4 + 36 | 0; //@line 17031
    HEAP32[$186 >> 2] = $69; //@line 17032
    $187 = $ReallocAsyncCtx4 + 40 | 0; //@line 17033
    HEAP32[$187 >> 2] = $70; //@line 17034
    $188 = $ReallocAsyncCtx4 + 44 | 0; //@line 17035
    HEAP32[$188 >> 2] = $AsyncRetVal; //@line 17036
    $189 = $ReallocAsyncCtx4 + 48 | 0; //@line 17037
    HEAP32[$189 >> 2] = $14; //@line 17038
    $190 = $ReallocAsyncCtx4 + 52 | 0; //@line 17039
    HEAP32[$190 >> 2] = $AsyncRetVal; //@line 17040
    $191 = $ReallocAsyncCtx4 + 56 | 0; //@line 17041
    HEAP32[$191 >> 2] = $17; //@line 17042
    $192 = $ReallocAsyncCtx4 + 60 | 0; //@line 17043
    HEAP32[$192 >> 2] = $66; //@line 17044
    $193 = $ReallocAsyncCtx4 + 64 | 0; //@line 17045
    HEAP32[$193 >> 2] = $$0208$i; //@line 17046
    $194 = $ReallocAsyncCtx4 + 68 | 0; //@line 17047
    HEAP32[$194 >> 2] = $175; //@line 17048
    $195 = $ReallocAsyncCtx4 + 72 | 0; //@line 17049
    HEAP32[$195 >> 2] = $167; //@line 17050
    sp = STACKTOP; //@line 17051
    return;
   } else if ((label | 0) == 40) {
    $197 = HEAP32[$68 >> 2] | 0; //@line 17055
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 17057
    $199 = _sn_coap_parser_options_parse_multiple_options($12, $2, $111, $197 + 48 | 0, $197, 4, $$1202$i) | 0; //@line 17058
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 17061
     $200 = $ReallocAsyncCtx10 + 4 | 0; //@line 17062
     HEAP32[$200 >> 2] = $68; //@line 17063
     $201 = $ReallocAsyncCtx10 + 8 | 0; //@line 17064
     HEAP32[$201 >> 2] = $2; //@line 17065
     $202 = $ReallocAsyncCtx10 + 12 | 0; //@line 17066
     HEAP32[$202 >> 2] = $2; //@line 17067
     $203 = $ReallocAsyncCtx10 + 16 | 0; //@line 17068
     HEAP32[$203 >> 2] = $65; //@line 17069
     $204 = $ReallocAsyncCtx10 + 20 | 0; //@line 17070
     HEAP32[$204 >> 2] = $64; //@line 17071
     $205 = $ReallocAsyncCtx10 + 24 | 0; //@line 17072
     HEAP32[$205 >> 2] = $68; //@line 17073
     $206 = $ReallocAsyncCtx10 + 28 | 0; //@line 17074
     HEAP32[$206 >> 2] = $12; //@line 17075
     $207 = $ReallocAsyncCtx10 + 32 | 0; //@line 17076
     HEAP32[$207 >> 2] = $10; //@line 17077
     $208 = $ReallocAsyncCtx10 + 36 | 0; //@line 17078
     HEAP32[$208 >> 2] = $69; //@line 17079
     $209 = $ReallocAsyncCtx10 + 40 | 0; //@line 17080
     HEAP32[$209 >> 2] = $70; //@line 17081
     $210 = $ReallocAsyncCtx10 + 44 | 0; //@line 17082
     HEAP32[$210 >> 2] = $AsyncRetVal; //@line 17083
     $211 = $ReallocAsyncCtx10 + 48 | 0; //@line 17084
     HEAP32[$211 >> 2] = $14; //@line 17085
     $212 = $ReallocAsyncCtx10 + 52 | 0; //@line 17086
     HEAP32[$212 >> 2] = $AsyncRetVal; //@line 17087
     $213 = $ReallocAsyncCtx10 + 56 | 0; //@line 17088
     HEAP32[$213 >> 2] = $17; //@line 17089
     $214 = $ReallocAsyncCtx10 + 60 | 0; //@line 17090
     HEAP32[$214 >> 2] = $66; //@line 17091
     $215 = $ReallocAsyncCtx10 + 64 | 0; //@line 17092
     HEAP32[$215 >> 2] = $$0208$i; //@line 17093
     sp = STACKTOP; //@line 17094
     return;
    }
    HEAP8[___async_retval >> 0] = $199; //@line 17098
    ___async_unwind = 0; //@line 17099
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 17100
    $200 = $ReallocAsyncCtx10 + 4 | 0; //@line 17101
    HEAP32[$200 >> 2] = $68; //@line 17102
    $201 = $ReallocAsyncCtx10 + 8 | 0; //@line 17103
    HEAP32[$201 >> 2] = $2; //@line 17104
    $202 = $ReallocAsyncCtx10 + 12 | 0; //@line 17105
    HEAP32[$202 >> 2] = $2; //@line 17106
    $203 = $ReallocAsyncCtx10 + 16 | 0; //@line 17107
    HEAP32[$203 >> 2] = $65; //@line 17108
    $204 = $ReallocAsyncCtx10 + 20 | 0; //@line 17109
    HEAP32[$204 >> 2] = $64; //@line 17110
    $205 = $ReallocAsyncCtx10 + 24 | 0; //@line 17111
    HEAP32[$205 >> 2] = $68; //@line 17112
    $206 = $ReallocAsyncCtx10 + 28 | 0; //@line 17113
    HEAP32[$206 >> 2] = $12; //@line 17114
    $207 = $ReallocAsyncCtx10 + 32 | 0; //@line 17115
    HEAP32[$207 >> 2] = $10; //@line 17116
    $208 = $ReallocAsyncCtx10 + 36 | 0; //@line 17117
    HEAP32[$208 >> 2] = $69; //@line 17118
    $209 = $ReallocAsyncCtx10 + 40 | 0; //@line 17119
    HEAP32[$209 >> 2] = $70; //@line 17120
    $210 = $ReallocAsyncCtx10 + 44 | 0; //@line 17121
    HEAP32[$210 >> 2] = $AsyncRetVal; //@line 17122
    $211 = $ReallocAsyncCtx10 + 48 | 0; //@line 17123
    HEAP32[$211 >> 2] = $14; //@line 17124
    $212 = $ReallocAsyncCtx10 + 52 | 0; //@line 17125
    HEAP32[$212 >> 2] = $AsyncRetVal; //@line 17126
    $213 = $ReallocAsyncCtx10 + 56 | 0; //@line 17127
    HEAP32[$213 >> 2] = $17; //@line 17128
    $214 = $ReallocAsyncCtx10 + 60 | 0; //@line 17129
    HEAP32[$214 >> 2] = $66; //@line 17130
    $215 = $ReallocAsyncCtx10 + 64 | 0; //@line 17131
    HEAP32[$215 >> 2] = $$0208$i; //@line 17132
    sp = STACKTOP; //@line 17133
    return;
   } else if ((label | 0) == 43) {
    $217 = $$1202$in$i & 65535; //@line 17137
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $220 = HEAP32[$68 >> 2] | 0; //@line 17143
    if (HEAP32[$220 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$220 + 4 >> 1] = $$1202$i; //@line 17151
    $225 = $122 + 1 | 0; //@line 17152
    HEAP32[$2 >> 2] = $225; //@line 17153
    $226 = HEAP32[$10 >> 2] | 0; //@line 17154
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 17155
    $227 = FUNCTION_TABLE_ii[$226 & 15]($$1202$i) | 0; //@line 17156
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 17159
     $228 = $ReallocAsyncCtx5 + 4 | 0; //@line 17160
     HEAP32[$228 >> 2] = $68; //@line 17161
     $229 = $ReallocAsyncCtx5 + 8 | 0; //@line 17162
     HEAP32[$229 >> 2] = $2; //@line 17163
     $230 = $ReallocAsyncCtx5 + 12 | 0; //@line 17164
     HEAP32[$230 >> 2] = $2; //@line 17165
     $231 = $ReallocAsyncCtx5 + 16 | 0; //@line 17166
     HEAP32[$231 >> 2] = $65; //@line 17167
     $232 = $ReallocAsyncCtx5 + 20 | 0; //@line 17168
     HEAP32[$232 >> 2] = $64; //@line 17169
     $233 = $ReallocAsyncCtx5 + 24 | 0; //@line 17170
     HEAP32[$233 >> 2] = $68; //@line 17171
     $234 = $ReallocAsyncCtx5 + 28 | 0; //@line 17172
     HEAP32[$234 >> 2] = $12; //@line 17173
     $235 = $ReallocAsyncCtx5 + 32 | 0; //@line 17174
     HEAP32[$235 >> 2] = $10; //@line 17175
     $236 = $ReallocAsyncCtx5 + 36 | 0; //@line 17176
     HEAP32[$236 >> 2] = $69; //@line 17177
     $237 = $ReallocAsyncCtx5 + 40 | 0; //@line 17178
     HEAP32[$237 >> 2] = $70; //@line 17179
     $238 = $ReallocAsyncCtx5 + 44 | 0; //@line 17180
     HEAP32[$238 >> 2] = $AsyncRetVal; //@line 17181
     $239 = $ReallocAsyncCtx5 + 48 | 0; //@line 17182
     HEAP32[$239 >> 2] = $14; //@line 17183
     $240 = $ReallocAsyncCtx5 + 52 | 0; //@line 17184
     HEAP32[$240 >> 2] = $AsyncRetVal; //@line 17185
     $241 = $ReallocAsyncCtx5 + 56 | 0; //@line 17186
     HEAP32[$241 >> 2] = $17; //@line 17187
     $242 = $ReallocAsyncCtx5 + 60 | 0; //@line 17188
     HEAP32[$242 >> 2] = $66; //@line 17189
     $243 = $ReallocAsyncCtx5 + 64 | 0; //@line 17190
     HEAP32[$243 >> 2] = $$0208$i; //@line 17191
     $244 = $ReallocAsyncCtx5 + 68 | 0; //@line 17192
     HEAP32[$244 >> 2] = $225; //@line 17193
     $245 = $ReallocAsyncCtx5 + 72 | 0; //@line 17194
     HEAP32[$245 >> 2] = $217; //@line 17195
     sp = STACKTOP; //@line 17196
     return;
    }
    HEAP32[___async_retval >> 2] = $227; //@line 17200
    ___async_unwind = 0; //@line 17201
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 17202
    $228 = $ReallocAsyncCtx5 + 4 | 0; //@line 17203
    HEAP32[$228 >> 2] = $68; //@line 17204
    $229 = $ReallocAsyncCtx5 + 8 | 0; //@line 17205
    HEAP32[$229 >> 2] = $2; //@line 17206
    $230 = $ReallocAsyncCtx5 + 12 | 0; //@line 17207
    HEAP32[$230 >> 2] = $2; //@line 17208
    $231 = $ReallocAsyncCtx5 + 16 | 0; //@line 17209
    HEAP32[$231 >> 2] = $65; //@line 17210
    $232 = $ReallocAsyncCtx5 + 20 | 0; //@line 17211
    HEAP32[$232 >> 2] = $64; //@line 17212
    $233 = $ReallocAsyncCtx5 + 24 | 0; //@line 17213
    HEAP32[$233 >> 2] = $68; //@line 17214
    $234 = $ReallocAsyncCtx5 + 28 | 0; //@line 17215
    HEAP32[$234 >> 2] = $12; //@line 17216
    $235 = $ReallocAsyncCtx5 + 32 | 0; //@line 17217
    HEAP32[$235 >> 2] = $10; //@line 17218
    $236 = $ReallocAsyncCtx5 + 36 | 0; //@line 17219
    HEAP32[$236 >> 2] = $69; //@line 17220
    $237 = $ReallocAsyncCtx5 + 40 | 0; //@line 17221
    HEAP32[$237 >> 2] = $70; //@line 17222
    $238 = $ReallocAsyncCtx5 + 44 | 0; //@line 17223
    HEAP32[$238 >> 2] = $AsyncRetVal; //@line 17224
    $239 = $ReallocAsyncCtx5 + 48 | 0; //@line 17225
    HEAP32[$239 >> 2] = $14; //@line 17226
    $240 = $ReallocAsyncCtx5 + 52 | 0; //@line 17227
    HEAP32[$240 >> 2] = $AsyncRetVal; //@line 17228
    $241 = $ReallocAsyncCtx5 + 56 | 0; //@line 17229
    HEAP32[$241 >> 2] = $17; //@line 17230
    $242 = $ReallocAsyncCtx5 + 60 | 0; //@line 17231
    HEAP32[$242 >> 2] = $66; //@line 17232
    $243 = $ReallocAsyncCtx5 + 64 | 0; //@line 17233
    HEAP32[$243 >> 2] = $$0208$i; //@line 17234
    $244 = $ReallocAsyncCtx5 + 68 | 0; //@line 17235
    HEAP32[$244 >> 2] = $225; //@line 17236
    $245 = $ReallocAsyncCtx5 + 72 | 0; //@line 17237
    HEAP32[$245 >> 2] = $217; //@line 17238
    sp = STACKTOP; //@line 17239
    return;
   } else if ((label | 0) == 48) {
    $247 = HEAP32[$68 >> 2] | 0; //@line 17243
    $248 = $247 + 56 | 0; //@line 17244
    if (HEAP32[$248 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 17251
    $252 = _sn_coap_parser_options_parse_multiple_options($12, $2, $111, $248, $247 + 6 | 0, 8, $$1202$i) | 0; //@line 17252
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 17255
     $253 = $ReallocAsyncCtx9 + 4 | 0; //@line 17256
     HEAP32[$253 >> 2] = $68; //@line 17257
     $254 = $ReallocAsyncCtx9 + 8 | 0; //@line 17258
     HEAP32[$254 >> 2] = $2; //@line 17259
     $255 = $ReallocAsyncCtx9 + 12 | 0; //@line 17260
     HEAP32[$255 >> 2] = $2; //@line 17261
     $256 = $ReallocAsyncCtx9 + 16 | 0; //@line 17262
     HEAP32[$256 >> 2] = $65; //@line 17263
     $257 = $ReallocAsyncCtx9 + 20 | 0; //@line 17264
     HEAP32[$257 >> 2] = $64; //@line 17265
     $258 = $ReallocAsyncCtx9 + 24 | 0; //@line 17266
     HEAP32[$258 >> 2] = $68; //@line 17267
     $259 = $ReallocAsyncCtx9 + 28 | 0; //@line 17268
     HEAP32[$259 >> 2] = $12; //@line 17269
     $260 = $ReallocAsyncCtx9 + 32 | 0; //@line 17270
     HEAP32[$260 >> 2] = $10; //@line 17271
     $261 = $ReallocAsyncCtx9 + 36 | 0; //@line 17272
     HEAP32[$261 >> 2] = $69; //@line 17273
     $262 = $ReallocAsyncCtx9 + 40 | 0; //@line 17274
     HEAP32[$262 >> 2] = $70; //@line 17275
     $263 = $ReallocAsyncCtx9 + 44 | 0; //@line 17276
     HEAP32[$263 >> 2] = $AsyncRetVal; //@line 17277
     $264 = $ReallocAsyncCtx9 + 48 | 0; //@line 17278
     HEAP32[$264 >> 2] = $14; //@line 17279
     $265 = $ReallocAsyncCtx9 + 52 | 0; //@line 17280
     HEAP32[$265 >> 2] = $AsyncRetVal; //@line 17281
     $266 = $ReallocAsyncCtx9 + 56 | 0; //@line 17282
     HEAP32[$266 >> 2] = $17; //@line 17283
     $267 = $ReallocAsyncCtx9 + 60 | 0; //@line 17284
     HEAP32[$267 >> 2] = $66; //@line 17285
     $268 = $ReallocAsyncCtx9 + 64 | 0; //@line 17286
     HEAP32[$268 >> 2] = $$0208$i; //@line 17287
     sp = STACKTOP; //@line 17288
     return;
    }
    HEAP8[___async_retval >> 0] = $252; //@line 17292
    ___async_unwind = 0; //@line 17293
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 17294
    $253 = $ReallocAsyncCtx9 + 4 | 0; //@line 17295
    HEAP32[$253 >> 2] = $68; //@line 17296
    $254 = $ReallocAsyncCtx9 + 8 | 0; //@line 17297
    HEAP32[$254 >> 2] = $2; //@line 17298
    $255 = $ReallocAsyncCtx9 + 12 | 0; //@line 17299
    HEAP32[$255 >> 2] = $2; //@line 17300
    $256 = $ReallocAsyncCtx9 + 16 | 0; //@line 17301
    HEAP32[$256 >> 2] = $65; //@line 17302
    $257 = $ReallocAsyncCtx9 + 20 | 0; //@line 17303
    HEAP32[$257 >> 2] = $64; //@line 17304
    $258 = $ReallocAsyncCtx9 + 24 | 0; //@line 17305
    HEAP32[$258 >> 2] = $68; //@line 17306
    $259 = $ReallocAsyncCtx9 + 28 | 0; //@line 17307
    HEAP32[$259 >> 2] = $12; //@line 17308
    $260 = $ReallocAsyncCtx9 + 32 | 0; //@line 17309
    HEAP32[$260 >> 2] = $10; //@line 17310
    $261 = $ReallocAsyncCtx9 + 36 | 0; //@line 17311
    HEAP32[$261 >> 2] = $69; //@line 17312
    $262 = $ReallocAsyncCtx9 + 40 | 0; //@line 17313
    HEAP32[$262 >> 2] = $70; //@line 17314
    $263 = $ReallocAsyncCtx9 + 44 | 0; //@line 17315
    HEAP32[$263 >> 2] = $AsyncRetVal; //@line 17316
    $264 = $ReallocAsyncCtx9 + 48 | 0; //@line 17317
    HEAP32[$264 >> 2] = $14; //@line 17318
    $265 = $ReallocAsyncCtx9 + 52 | 0; //@line 17319
    HEAP32[$265 >> 2] = $AsyncRetVal; //@line 17320
    $266 = $ReallocAsyncCtx9 + 56 | 0; //@line 17321
    HEAP32[$266 >> 2] = $17; //@line 17322
    $267 = $ReallocAsyncCtx9 + 60 | 0; //@line 17323
    HEAP32[$267 >> 2] = $66; //@line 17324
    $268 = $ReallocAsyncCtx9 + 64 | 0; //@line 17325
    HEAP32[$268 >> 2] = $$0208$i; //@line 17326
    sp = STACKTOP; //@line 17327
    return;
   } else if ((label | 0) == 57) {
    $286 = HEAP32[$68 >> 2] | 0; //@line 17331
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 17334
    $289 = _sn_coap_parser_options_parse_multiple_options($12, $2, $111, $286 + 60 | 0, $286 + 8 | 0, 20, $$1202$i) | 0; //@line 17335
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 17338
     $290 = $ReallocAsyncCtx8 + 4 | 0; //@line 17339
     HEAP32[$290 >> 2] = $68; //@line 17340
     $291 = $ReallocAsyncCtx8 + 8 | 0; //@line 17341
     HEAP32[$291 >> 2] = $2; //@line 17342
     $292 = $ReallocAsyncCtx8 + 12 | 0; //@line 17343
     HEAP32[$292 >> 2] = $2; //@line 17344
     $293 = $ReallocAsyncCtx8 + 16 | 0; //@line 17345
     HEAP32[$293 >> 2] = $65; //@line 17346
     $294 = $ReallocAsyncCtx8 + 20 | 0; //@line 17347
     HEAP32[$294 >> 2] = $64; //@line 17348
     $295 = $ReallocAsyncCtx8 + 24 | 0; //@line 17349
     HEAP32[$295 >> 2] = $68; //@line 17350
     $296 = $ReallocAsyncCtx8 + 28 | 0; //@line 17351
     HEAP32[$296 >> 2] = $12; //@line 17352
     $297 = $ReallocAsyncCtx8 + 32 | 0; //@line 17353
     HEAP32[$297 >> 2] = $10; //@line 17354
     $298 = $ReallocAsyncCtx8 + 36 | 0; //@line 17355
     HEAP32[$298 >> 2] = $69; //@line 17356
     $299 = $ReallocAsyncCtx8 + 40 | 0; //@line 17357
     HEAP32[$299 >> 2] = $70; //@line 17358
     $300 = $ReallocAsyncCtx8 + 44 | 0; //@line 17359
     HEAP32[$300 >> 2] = $AsyncRetVal; //@line 17360
     $301 = $ReallocAsyncCtx8 + 48 | 0; //@line 17361
     HEAP32[$301 >> 2] = $14; //@line 17362
     $302 = $ReallocAsyncCtx8 + 52 | 0; //@line 17363
     HEAP32[$302 >> 2] = $AsyncRetVal; //@line 17364
     $303 = $ReallocAsyncCtx8 + 56 | 0; //@line 17365
     HEAP32[$303 >> 2] = $17; //@line 17366
     $304 = $ReallocAsyncCtx8 + 60 | 0; //@line 17367
     HEAP32[$304 >> 2] = $66; //@line 17368
     $305 = $ReallocAsyncCtx8 + 64 | 0; //@line 17369
     HEAP32[$305 >> 2] = $$0208$i; //@line 17370
     sp = STACKTOP; //@line 17371
     return;
    }
    HEAP8[___async_retval >> 0] = $289; //@line 17375
    ___async_unwind = 0; //@line 17376
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 17377
    $290 = $ReallocAsyncCtx8 + 4 | 0; //@line 17378
    HEAP32[$290 >> 2] = $68; //@line 17379
    $291 = $ReallocAsyncCtx8 + 8 | 0; //@line 17380
    HEAP32[$291 >> 2] = $2; //@line 17381
    $292 = $ReallocAsyncCtx8 + 12 | 0; //@line 17382
    HEAP32[$292 >> 2] = $2; //@line 17383
    $293 = $ReallocAsyncCtx8 + 16 | 0; //@line 17384
    HEAP32[$293 >> 2] = $65; //@line 17385
    $294 = $ReallocAsyncCtx8 + 20 | 0; //@line 17386
    HEAP32[$294 >> 2] = $64; //@line 17387
    $295 = $ReallocAsyncCtx8 + 24 | 0; //@line 17388
    HEAP32[$295 >> 2] = $68; //@line 17389
    $296 = $ReallocAsyncCtx8 + 28 | 0; //@line 17390
    HEAP32[$296 >> 2] = $12; //@line 17391
    $297 = $ReallocAsyncCtx8 + 32 | 0; //@line 17392
    HEAP32[$297 >> 2] = $10; //@line 17393
    $298 = $ReallocAsyncCtx8 + 36 | 0; //@line 17394
    HEAP32[$298 >> 2] = $69; //@line 17395
    $299 = $ReallocAsyncCtx8 + 40 | 0; //@line 17396
    HEAP32[$299 >> 2] = $70; //@line 17397
    $300 = $ReallocAsyncCtx8 + 44 | 0; //@line 17398
    HEAP32[$300 >> 2] = $AsyncRetVal; //@line 17399
    $301 = $ReallocAsyncCtx8 + 48 | 0; //@line 17400
    HEAP32[$301 >> 2] = $14; //@line 17401
    $302 = $ReallocAsyncCtx8 + 52 | 0; //@line 17402
    HEAP32[$302 >> 2] = $AsyncRetVal; //@line 17403
    $303 = $ReallocAsyncCtx8 + 56 | 0; //@line 17404
    HEAP32[$303 >> 2] = $17; //@line 17405
    $304 = $ReallocAsyncCtx8 + 60 | 0; //@line 17406
    HEAP32[$304 >> 2] = $66; //@line 17407
    $305 = $ReallocAsyncCtx8 + 64 | 0; //@line 17408
    HEAP32[$305 >> 2] = $$0208$i; //@line 17409
    sp = STACKTOP; //@line 17410
    return;
   } else if ((label | 0) == 60) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 17414
    $307 = _sn_coap_parser_options_parse_multiple_options($12, $2, $111, $69, $70, 11, $$1202$i) | 0; //@line 17415
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 17418
     $308 = $ReallocAsyncCtx7 + 4 | 0; //@line 17419
     HEAP32[$308 >> 2] = $68; //@line 17420
     $309 = $ReallocAsyncCtx7 + 8 | 0; //@line 17421
     HEAP32[$309 >> 2] = $2; //@line 17422
     $310 = $ReallocAsyncCtx7 + 12 | 0; //@line 17423
     HEAP32[$310 >> 2] = $2; //@line 17424
     $311 = $ReallocAsyncCtx7 + 16 | 0; //@line 17425
     HEAP32[$311 >> 2] = $65; //@line 17426
     $312 = $ReallocAsyncCtx7 + 20 | 0; //@line 17427
     HEAP32[$312 >> 2] = $64; //@line 17428
     $313 = $ReallocAsyncCtx7 + 24 | 0; //@line 17429
     HEAP32[$313 >> 2] = $68; //@line 17430
     $314 = $ReallocAsyncCtx7 + 28 | 0; //@line 17431
     HEAP32[$314 >> 2] = $12; //@line 17432
     $315 = $ReallocAsyncCtx7 + 32 | 0; //@line 17433
     HEAP32[$315 >> 2] = $10; //@line 17434
     $316 = $ReallocAsyncCtx7 + 36 | 0; //@line 17435
     HEAP32[$316 >> 2] = $69; //@line 17436
     $317 = $ReallocAsyncCtx7 + 40 | 0; //@line 17437
     HEAP32[$317 >> 2] = $70; //@line 17438
     $318 = $ReallocAsyncCtx7 + 44 | 0; //@line 17439
     HEAP32[$318 >> 2] = $AsyncRetVal; //@line 17440
     $319 = $ReallocAsyncCtx7 + 48 | 0; //@line 17441
     HEAP32[$319 >> 2] = $14; //@line 17442
     $320 = $ReallocAsyncCtx7 + 52 | 0; //@line 17443
     HEAP32[$320 >> 2] = $AsyncRetVal; //@line 17444
     $321 = $ReallocAsyncCtx7 + 56 | 0; //@line 17445
     HEAP32[$321 >> 2] = $17; //@line 17446
     $322 = $ReallocAsyncCtx7 + 60 | 0; //@line 17447
     HEAP32[$322 >> 2] = $66; //@line 17448
     $323 = $ReallocAsyncCtx7 + 64 | 0; //@line 17449
     HEAP32[$323 >> 2] = $$0208$i; //@line 17450
     sp = STACKTOP; //@line 17451
     return;
    }
    HEAP8[___async_retval >> 0] = $307; //@line 17455
    ___async_unwind = 0; //@line 17456
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 17457
    $308 = $ReallocAsyncCtx7 + 4 | 0; //@line 17458
    HEAP32[$308 >> 2] = $68; //@line 17459
    $309 = $ReallocAsyncCtx7 + 8 | 0; //@line 17460
    HEAP32[$309 >> 2] = $2; //@line 17461
    $310 = $ReallocAsyncCtx7 + 12 | 0; //@line 17462
    HEAP32[$310 >> 2] = $2; //@line 17463
    $311 = $ReallocAsyncCtx7 + 16 | 0; //@line 17464
    HEAP32[$311 >> 2] = $65; //@line 17465
    $312 = $ReallocAsyncCtx7 + 20 | 0; //@line 17466
    HEAP32[$312 >> 2] = $64; //@line 17467
    $313 = $ReallocAsyncCtx7 + 24 | 0; //@line 17468
    HEAP32[$313 >> 2] = $68; //@line 17469
    $314 = $ReallocAsyncCtx7 + 28 | 0; //@line 17470
    HEAP32[$314 >> 2] = $12; //@line 17471
    $315 = $ReallocAsyncCtx7 + 32 | 0; //@line 17472
    HEAP32[$315 >> 2] = $10; //@line 17473
    $316 = $ReallocAsyncCtx7 + 36 | 0; //@line 17474
    HEAP32[$316 >> 2] = $69; //@line 17475
    $317 = $ReallocAsyncCtx7 + 40 | 0; //@line 17476
    HEAP32[$317 >> 2] = $70; //@line 17477
    $318 = $ReallocAsyncCtx7 + 44 | 0; //@line 17478
    HEAP32[$318 >> 2] = $AsyncRetVal; //@line 17479
    $319 = $ReallocAsyncCtx7 + 48 | 0; //@line 17480
    HEAP32[$319 >> 2] = $14; //@line 17481
    $320 = $ReallocAsyncCtx7 + 52 | 0; //@line 17482
    HEAP32[$320 >> 2] = $AsyncRetVal; //@line 17483
    $321 = $ReallocAsyncCtx7 + 56 | 0; //@line 17484
    HEAP32[$321 >> 2] = $17; //@line 17485
    $322 = $ReallocAsyncCtx7 + 60 | 0; //@line 17486
    HEAP32[$322 >> 2] = $66; //@line 17487
    $323 = $ReallocAsyncCtx7 + 64 | 0; //@line 17488
    HEAP32[$323 >> 2] = $$0208$i; //@line 17489
    sp = STACKTOP; //@line 17490
    return;
   } else if ((label | 0) == 68) {
    $341 = HEAP32[$68 >> 2] | 0; //@line 17494
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 17497
    $344 = _sn_coap_parser_options_parse_multiple_options($12, $2, $111, $341 + 64 | 0, $341 + 10 | 0, 15, $$1202$i) | 0; //@line 17498
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 17501
     $345 = $ReallocAsyncCtx6 + 4 | 0; //@line 17502
     HEAP32[$345 >> 2] = $68; //@line 17503
     $346 = $ReallocAsyncCtx6 + 8 | 0; //@line 17504
     HEAP32[$346 >> 2] = $2; //@line 17505
     $347 = $ReallocAsyncCtx6 + 12 | 0; //@line 17506
     HEAP32[$347 >> 2] = $2; //@line 17507
     $348 = $ReallocAsyncCtx6 + 16 | 0; //@line 17508
     HEAP32[$348 >> 2] = $65; //@line 17509
     $349 = $ReallocAsyncCtx6 + 20 | 0; //@line 17510
     HEAP32[$349 >> 2] = $64; //@line 17511
     $350 = $ReallocAsyncCtx6 + 24 | 0; //@line 17512
     HEAP32[$350 >> 2] = $68; //@line 17513
     $351 = $ReallocAsyncCtx6 + 28 | 0; //@line 17514
     HEAP32[$351 >> 2] = $12; //@line 17515
     $352 = $ReallocAsyncCtx6 + 32 | 0; //@line 17516
     HEAP32[$352 >> 2] = $10; //@line 17517
     $353 = $ReallocAsyncCtx6 + 36 | 0; //@line 17518
     HEAP32[$353 >> 2] = $69; //@line 17519
     $354 = $ReallocAsyncCtx6 + 40 | 0; //@line 17520
     HEAP32[$354 >> 2] = $70; //@line 17521
     $355 = $ReallocAsyncCtx6 + 44 | 0; //@line 17522
     HEAP32[$355 >> 2] = $AsyncRetVal; //@line 17523
     $356 = $ReallocAsyncCtx6 + 48 | 0; //@line 17524
     HEAP32[$356 >> 2] = $14; //@line 17525
     $357 = $ReallocAsyncCtx6 + 52 | 0; //@line 17526
     HEAP32[$357 >> 2] = $AsyncRetVal; //@line 17527
     $358 = $ReallocAsyncCtx6 + 56 | 0; //@line 17528
     HEAP32[$358 >> 2] = $17; //@line 17529
     $359 = $ReallocAsyncCtx6 + 60 | 0; //@line 17530
     HEAP32[$359 >> 2] = $66; //@line 17531
     $360 = $ReallocAsyncCtx6 + 64 | 0; //@line 17532
     HEAP32[$360 >> 2] = $$0208$i; //@line 17533
     sp = STACKTOP; //@line 17534
     return;
    }
    HEAP8[___async_retval >> 0] = $344; //@line 17538
    ___async_unwind = 0; //@line 17539
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 17540
    $345 = $ReallocAsyncCtx6 + 4 | 0; //@line 17541
    HEAP32[$345 >> 2] = $68; //@line 17542
    $346 = $ReallocAsyncCtx6 + 8 | 0; //@line 17543
    HEAP32[$346 >> 2] = $2; //@line 17544
    $347 = $ReallocAsyncCtx6 + 12 | 0; //@line 17545
    HEAP32[$347 >> 2] = $2; //@line 17546
    $348 = $ReallocAsyncCtx6 + 16 | 0; //@line 17547
    HEAP32[$348 >> 2] = $65; //@line 17548
    $349 = $ReallocAsyncCtx6 + 20 | 0; //@line 17549
    HEAP32[$349 >> 2] = $64; //@line 17550
    $350 = $ReallocAsyncCtx6 + 24 | 0; //@line 17551
    HEAP32[$350 >> 2] = $68; //@line 17552
    $351 = $ReallocAsyncCtx6 + 28 | 0; //@line 17553
    HEAP32[$351 >> 2] = $12; //@line 17554
    $352 = $ReallocAsyncCtx6 + 32 | 0; //@line 17555
    HEAP32[$352 >> 2] = $10; //@line 17556
    $353 = $ReallocAsyncCtx6 + 36 | 0; //@line 17557
    HEAP32[$353 >> 2] = $69; //@line 17558
    $354 = $ReallocAsyncCtx6 + 40 | 0; //@line 17559
    HEAP32[$354 >> 2] = $70; //@line 17560
    $355 = $ReallocAsyncCtx6 + 44 | 0; //@line 17561
    HEAP32[$355 >> 2] = $AsyncRetVal; //@line 17562
    $356 = $ReallocAsyncCtx6 + 48 | 0; //@line 17563
    HEAP32[$356 >> 2] = $14; //@line 17564
    $357 = $ReallocAsyncCtx6 + 52 | 0; //@line 17565
    HEAP32[$357 >> 2] = $AsyncRetVal; //@line 17566
    $358 = $ReallocAsyncCtx6 + 56 | 0; //@line 17567
    HEAP32[$358 >> 2] = $17; //@line 17568
    $359 = $ReallocAsyncCtx6 + 60 | 0; //@line 17569
    HEAP32[$359 >> 2] = $66; //@line 17570
    $360 = $ReallocAsyncCtx6 + 64 | 0; //@line 17571
    HEAP32[$360 >> 2] = $$0208$i; //@line 17572
    sp = STACKTOP; //@line 17573
    return;
   } else if ((label | 0) == 98) {
    if (($73 - $65 | 0) >= ($64 | 0)) {
     $$0 = $AsyncRetVal; //@line 17581
     $473 = ___async_retval; //@line 17582
     HEAP32[$473 >> 2] = $$0; //@line 17583
     return;
    }
    if ((HEAP8[$73 >> 0] | 0) == -1) {
     $463 = $73 + 1 | 0; //@line 17589
     HEAP32[$2 >> 2] = $463; //@line 17590
     $464 = $463; //@line 17591
     $466 = $65 - $464 + $64 | 0; //@line 17593
     HEAP16[$AsyncRetVal + 24 >> 1] = $466; //@line 17596
     if ($466 & 65535 | 0) {
      HEAP32[$AsyncRetVal + 36 >> 2] = $464; //@line 17601
      $$0 = $AsyncRetVal; //@line 17602
      $473 = ___async_retval; //@line 17603
      HEAP32[$473 >> 2] = $$0; //@line 17604
      return;
     }
    }
    HEAP32[$AsyncRetVal + 4 >> 2] = 1; //@line 17609
    $$0 = $AsyncRetVal; //@line 17610
    $473 = ___async_retval; //@line 17611
    HEAP32[$473 >> 2] = $$0; //@line 17612
    return;
   }
  } else {
   if (($42 & 255) <= 8) {
    $45 = $AsyncRetVal + 28 | 0; //@line 17618
    if (!(HEAP32[$45 >> 2] | 0)) {
     $48 = HEAP32[$10 >> 2] | 0; //@line 17622
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 17624
     $50 = FUNCTION_TABLE_ii[$48 & 15]($42 & 255) | 0; //@line 17625
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 49; //@line 17628
      $51 = $ReallocAsyncCtx2 + 4 | 0; //@line 17629
      HEAP32[$51 >> 2] = $AsyncRetVal; //@line 17630
      $52 = $ReallocAsyncCtx2 + 8 | 0; //@line 17631
      HEAP32[$52 >> 2] = $40; //@line 17632
      $53 = $ReallocAsyncCtx2 + 12 | 0; //@line 17633
      HEAP32[$53 >> 2] = $2; //@line 17634
      $54 = $ReallocAsyncCtx2 + 16 | 0; //@line 17635
      HEAP16[$54 >> 1] = $4; //@line 17636
      $55 = $ReallocAsyncCtx2 + 20 | 0; //@line 17637
      HEAP32[$55 >> 2] = $6; //@line 17638
      $56 = $ReallocAsyncCtx2 + 24 | 0; //@line 17639
      HEAP32[$56 >> 2] = $45; //@line 17640
      $57 = $ReallocAsyncCtx2 + 28 | 0; //@line 17641
      HEAP32[$57 >> 2] = $12; //@line 17642
      $58 = $ReallocAsyncCtx2 + 32 | 0; //@line 17643
      HEAP32[$58 >> 2] = $10; //@line 17644
      $59 = $ReallocAsyncCtx2 + 36 | 0; //@line 17645
      HEAP32[$59 >> 2] = $AsyncRetVal; //@line 17646
      $60 = $ReallocAsyncCtx2 + 40 | 0; //@line 17647
      HEAP32[$60 >> 2] = $14; //@line 17648
      $61 = $ReallocAsyncCtx2 + 44 | 0; //@line 17649
      HEAP32[$61 >> 2] = $17; //@line 17650
      sp = STACKTOP; //@line 17651
      return;
     }
     HEAP32[___async_retval >> 2] = $50; //@line 17655
     ___async_unwind = 0; //@line 17656
     HEAP32[$ReallocAsyncCtx2 >> 2] = 49; //@line 17657
     $51 = $ReallocAsyncCtx2 + 4 | 0; //@line 17658
     HEAP32[$51 >> 2] = $AsyncRetVal; //@line 17659
     $52 = $ReallocAsyncCtx2 + 8 | 0; //@line 17660
     HEAP32[$52 >> 2] = $40; //@line 17661
     $53 = $ReallocAsyncCtx2 + 12 | 0; //@line 17662
     HEAP32[$53 >> 2] = $2; //@line 17663
     $54 = $ReallocAsyncCtx2 + 16 | 0; //@line 17664
     HEAP16[$54 >> 1] = $4; //@line 17665
     $55 = $ReallocAsyncCtx2 + 20 | 0; //@line 17666
     HEAP32[$55 >> 2] = $6; //@line 17667
     $56 = $ReallocAsyncCtx2 + 24 | 0; //@line 17668
     HEAP32[$56 >> 2] = $45; //@line 17669
     $57 = $ReallocAsyncCtx2 + 28 | 0; //@line 17670
     HEAP32[$57 >> 2] = $12; //@line 17671
     $58 = $ReallocAsyncCtx2 + 32 | 0; //@line 17672
     HEAP32[$58 >> 2] = $10; //@line 17673
     $59 = $ReallocAsyncCtx2 + 36 | 0; //@line 17674
     HEAP32[$59 >> 2] = $AsyncRetVal; //@line 17675
     $60 = $ReallocAsyncCtx2 + 40 | 0; //@line 17676
     HEAP32[$60 >> 2] = $14; //@line 17677
     $61 = $ReallocAsyncCtx2 + 44 | 0; //@line 17678
     HEAP32[$61 >> 2] = $17; //@line 17679
     sp = STACKTOP; //@line 17680
     return;
    }
   }
  }
 } while (0);
 HEAP32[$AsyncRetVal + 4 >> 2] = 1; //@line 17687
 $$0 = $AsyncRetVal; //@line 17688
 $473 = ___async_retval; //@line 17689
 HEAP32[$473 >> 2] = $$0; //@line 17690
 return;
}
function _sn_coap_parser__async_cb_18($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$i$reg2mem$0 = 0, $$1202$i$reg2mem$1 = 0, $$1202$i$reg2mem$2 = 0, $$1202$in$i = 0, $$1202$in$i$reg2mem$0 = 0, $$1202$in$i$reg2mem$1 = 0, $$reg2mem$0 = 0, $$reg2mem$1 = 0, $$reg2mem$2 = 0, $$reg2mem$3 = 0, $$reg2mem62$0 = 0, $$reg2mem62$1 = 0, $$reg2mem73$0 = 0, $$reg2mem73$1 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $114 = 0, $116 = 0, $12 = 0, $122 = 0, $123 = 0, $128 = 0, $131 = 0, $134 = 0, $135 = 0, $14 = 0, $140 = 0, $143 = 0, $147 = 0, $150 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $197 = 0, $2 = 0, $20 = 0, $200 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $227 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $252 = 0, $255 = 0, $256 = 0, $26 = 0, $261 = 0, $264 = 0, $266 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $307 = 0, $310 = 0, $311 = 0, $316 = 0, $319 = 0, $32 = 0, $321 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $344 = 0, $347 = 0, $348 = 0, $353 = 0, $356 = 0, $36 = 0, $360 = 0, $363 = 0, $364 = 0, $369 = 0, $372 = 0, $376 = 0, $379 = 0, $38 = 0, $380 = 0, $385 = 0, $388 = 0, $392 = 0, $393 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $407 = 0, $413 = 0, $414 = 0, $419 = 0, $42 = 0, $420 = 0, $425 = 0, $428 = 0, $432 = 0, $433 = 0, $441 = 0, $442 = 0, $444 = 0, $451 = 0, $452 = 0, $47 = 0, $50 = 0, $6 = 0, $64 = 0, $67 = 0, $69 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc$i$reg2mem$0 = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $140$looptemp = 0, $261$looptemp = 0, $316$looptemp = 0, $353$looptemp = 0, $369$looptemp = 0, $385$looptemp = 0, $404$looptemp = 0, $425$looptemp = 0, $128$looptemp = 0;
 sp = STACKTOP; //@line 19123
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19125
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19127
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19129
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19131
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 19133
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19135
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19137
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19139
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19141
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19143
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19145
 $24 = HEAP16[$0 + 48 >> 1] | 0; //@line 19147
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19149
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19151
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19153
 $32 = HEAP16[$0 + 64 >> 1] | 0; //@line 19155
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19157
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19159
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19161
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19163
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19165
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19167
 HEAP32[$20 >> 2] = $AsyncRetVal; //@line 19168
 L2 : do {
  if ($AsyncRetVal | 0) {
   dest = $AsyncRetVal; //@line 19172
   stop = dest + 68 | 0; //@line 19172
   do {
    HEAP32[dest >> 2] = 0; //@line 19172
    dest = dest + 4 | 0; //@line 19172
   } while ((dest | 0) < (stop | 0));
   $114 = HEAP32[$2 >> 2] | 0; //@line 19173
   HEAP32[$114 + 16 >> 2] = 60; //@line 19175
   $116 = $114 + 28 | 0; //@line 19176
   HEAP32[$114 + 12 >> 2] = -1; //@line 19178
   HEAP32[$116 >> 2] = -1; //@line 19179
   HEAP32[$116 + 4 >> 2] = -1; //@line 19179
   HEAP32[$116 + 8 >> 2] = -1; //@line 19179
   HEAP32[$116 + 12 >> 2] = -1; //@line 19179
   if ($114 | 0) {
    $$1202$i$reg2mem$0 = $10; //@line 19182
    $$1202$in$i$reg2mem$0 = $6; //@line 19182
    $$reg2mem$0 = $8; //@line 19182
    $$reg2mem62$0 = $12; //@line 19182
    $$reg2mem73$0 = $24; //@line 19182
    $trunc$i$reg2mem$0 = $32; //@line 19182
    L4 : while (1) {
     switch ($trunc$i$reg2mem$0 << 16 >> 16) {
     case 35:
      {
       label = 29; //@line 19186
       break L4;
       break;
      }
     case 4:
      {
       label = 34; //@line 19191
       break L4;
       break;
      }
     case 3:
      {
       label = 37; //@line 19196
       break L4;
       break;
      }
     case 8:
      {
       label = 42; //@line 19201
       break L4;
       break;
      }
     case 20:
      {
       label = 51; //@line 19206
       break L4;
       break;
      }
     case 11:
      {
       $$1202$i$reg2mem$2 = $$1202$i$reg2mem$0; //@line 19211
       $$reg2mem$2 = $$reg2mem$0; //@line 19211
       $$reg2mem73$1 = $$reg2mem73$0; //@line 19211
       label = 54; //@line 19212
       break L4;
       break;
      }
     case 15:
      {
       label = 62; //@line 19217
       break L4;
       break;
      }
     case 12:
      {
       $$1202$i$reg2mem$1 = $$1202$i$reg2mem$0; //@line 19222
       $$1202$in$i$reg2mem$1 = $$1202$in$i$reg2mem$0; //@line 19222
       $$reg2mem$1 = $$reg2mem$0; //@line 19222
       $$reg2mem62$1 = $$reg2mem62$0; //@line 19222
       label = 20; //@line 19223
       break;
      }
     case 14:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        break L2;
       }
       $134 = $$reg2mem62$0 + 1 | 0; //@line 19231
       HEAP32[$4 >> 2] = $134; //@line 19232
       $135 = $$1202$in$i$reg2mem$0 & 255; //@line 19233
       if (!($135 << 24 >> 24)) {
        $$0$lcssa$i258$i = 0; //@line 19236
       } else {
        $$045$i256$i = $135; //@line 19238
        $$06$i255$i = 0; //@line 19238
        $140 = $134; //@line 19238
        while (1) {
         $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 19240
         $140$looptemp = $140;
         $140 = $140 + 1 | 0; //@line 19242
         HEAP32[$4 >> 2] = $140; //@line 19243
         $143 = $$06$i255$i << 8 | HEAPU8[$140$looptemp >> 0]; //@line 19246
         if (!($$045$i256$i << 24 >> 24)) {
          $$0$lcssa$i258$i = $143; //@line 19249
          break;
         } else {
          $$06$i255$i = $143; //@line 19252
         }
        }
       }
       HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 19258
       $$reg2mem$3 = $$reg2mem$0; //@line 19259
       break;
      }
     case 7:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        break L2;
       }
       $252 = (HEAP32[$2 >> 2] | 0) + 28 | 0; //@line 19268
       if ((HEAP32[$252 >> 2] | 0) != -1) {
        break L2;
       }
       $255 = $$reg2mem62$0 + 1 | 0; //@line 19274
       HEAP32[$4 >> 2] = $255; //@line 19275
       $256 = $$1202$in$i$reg2mem$0 & 255; //@line 19276
       if (!($256 << 24 >> 24)) {
        $$0$lcssa$i272$i = 0; //@line 19279
       } else {
        $$045$i270$i = $256; //@line 19281
        $$06$i269$i = 0; //@line 19281
        $261 = $255; //@line 19281
        while (1) {
         $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 19283
         $261$looptemp = $261;
         $261 = $261 + 1 | 0; //@line 19285
         HEAP32[$4 >> 2] = $261; //@line 19286
         $264 = $$06$i269$i << 8 | HEAPU8[$261$looptemp >> 0]; //@line 19289
         if (!($$045$i270$i << 24 >> 24)) {
          $$0$lcssa$i272$i = $264; //@line 19292
          break;
         } else {
          $$06$i269$i = $264; //@line 19295
         }
        }
       }
       HEAP32[$252 >> 2] = $$0$lcssa$i272$i; //@line 19299
       $$reg2mem$3 = $$reg2mem$0; //@line 19300
       break;
      }
     case 6:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        break L2;
       }
       $307 = (HEAP32[$2 >> 2] | 0) + 32 | 0; //@line 19309
       if ((HEAP32[$307 >> 2] | 0) != -1) {
        break L2;
       }
       $310 = $$reg2mem62$0 + 1 | 0; //@line 19315
       HEAP32[$4 >> 2] = $310; //@line 19316
       $311 = $$1202$in$i$reg2mem$0 & 255; //@line 19317
       if (!($311 << 24 >> 24)) {
        $$0$lcssa$i265$i = 0; //@line 19320
       } else {
        $$045$i263$i = $311; //@line 19322
        $$06$i262$i = 0; //@line 19322
        $316 = $310; //@line 19322
        while (1) {
         $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 19324
         $316$looptemp = $316;
         $316 = $316 + 1 | 0; //@line 19326
         HEAP32[$4 >> 2] = $316; //@line 19327
         $319 = $$06$i262$i << 8 | HEAPU8[$316$looptemp >> 0]; //@line 19330
         if (!($$045$i263$i << 24 >> 24)) {
          $$0$lcssa$i265$i = $319; //@line 19333
          break;
         } else {
          $$06$i262$i = $319; //@line 19336
         }
        }
       }
       HEAP32[$307 >> 2] = $$0$lcssa$i265$i; //@line 19340
       $$reg2mem$3 = $$reg2mem$0; //@line 19341
       break;
      }
     case 23:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 3) {
        break L2;
       }
       $344 = (HEAP32[$2 >> 2] | 0) + 40 | 0; //@line 19350
       if ((HEAP32[$344 >> 2] | 0) != -1) {
        break L2;
       }
       $347 = $$reg2mem62$0 + 1 | 0; //@line 19356
       HEAP32[$4 >> 2] = $347; //@line 19357
       $348 = $$1202$in$i$reg2mem$0 & 255; //@line 19358
       if (!($348 << 24 >> 24)) {
        $$0$lcssa$i251$i = 0; //@line 19361
       } else {
        $$045$i249$i = $348; //@line 19363
        $$06$i248$i = 0; //@line 19363
        $353 = $347; //@line 19363
        while (1) {
         $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 19365
         $353$looptemp = $353;
         $353 = $353 + 1 | 0; //@line 19367
         HEAP32[$4 >> 2] = $353; //@line 19368
         $356 = $$06$i248$i << 8 | HEAPU8[$353$looptemp >> 0]; //@line 19371
         if (!($$045$i249$i << 24 >> 24)) {
          $$0$lcssa$i251$i = $356; //@line 19374
          break;
         } else {
          $$06$i248$i = $356; //@line 19377
         }
        }
       }
       HEAP32[$344 >> 2] = $$0$lcssa$i251$i; //@line 19381
       $$reg2mem$3 = $$reg2mem$0; //@line 19382
       break;
      }
     case 27:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 3) {
        break L2;
       }
       $360 = (HEAP32[$2 >> 2] | 0) + 36 | 0; //@line 19391
       if ((HEAP32[$360 >> 2] | 0) != -1) {
        break L2;
       }
       $363 = $$reg2mem62$0 + 1 | 0; //@line 19397
       HEAP32[$4 >> 2] = $363; //@line 19398
       $364 = $$1202$in$i$reg2mem$0 & 255; //@line 19399
       if (!($364 << 24 >> 24)) {
        $$0$lcssa$i244$i = 0; //@line 19402
       } else {
        $$045$i242$i = $364; //@line 19404
        $$06$i241$i = 0; //@line 19404
        $369 = $363; //@line 19404
        while (1) {
         $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 19406
         $369$looptemp = $369;
         $369 = $369 + 1 | 0; //@line 19408
         HEAP32[$4 >> 2] = $369; //@line 19409
         $372 = $$06$i241$i << 8 | HEAPU8[$369$looptemp >> 0]; //@line 19412
         if (!($$045$i242$i << 24 >> 24)) {
          $$0$lcssa$i244$i = $372; //@line 19415
          break;
         } else {
          $$06$i241$i = $372; //@line 19418
         }
        }
       }
       HEAP32[$360 >> 2] = $$0$lcssa$i244$i; //@line 19422
       $$reg2mem$3 = $$reg2mem$0; //@line 19423
       break;
      }
     case 17:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        break L2;
       }
       $376 = (HEAP32[$2 >> 2] | 0) + 12 | 0; //@line 19432
       if ((HEAP32[$376 >> 2] | 0) != -1) {
        break L2;
       }
       $379 = $$reg2mem62$0 + 1 | 0; //@line 19438
       HEAP32[$4 >> 2] = $379; //@line 19439
       $380 = $$1202$in$i$reg2mem$0 & 255; //@line 19440
       if (!($380 << 24 >> 24)) {
        $$0$lcssa$i237$i = 0; //@line 19443
       } else {
        $$045$i235$i = $380; //@line 19445
        $$06$i234$i = 0; //@line 19445
        $385 = $379; //@line 19445
        while (1) {
         $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 19447
         $385$looptemp = $385;
         $385 = $385 + 1 | 0; //@line 19449
         HEAP32[$4 >> 2] = $385; //@line 19450
         $388 = $$06$i234$i << 8 | HEAPU8[$385$looptemp >> 0]; //@line 19453
         if (!($$045$i235$i << 24 >> 24)) {
          $$0$lcssa$i237$i = $388; //@line 19456
          break;
         } else {
          $$06$i234$i = $388; //@line 19459
         }
        }
       }
       HEAP32[$376 >> 2] = $$0$lcssa$i237$i; //@line 19463
       $$reg2mem$3 = $$reg2mem$0; //@line 19464
       break;
      }
     case 60:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        break L2;
       }
       $392 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 19473
       $393 = HEAP8[$392 >> 0] | 0; //@line 19474
       if ($393 & 1) {
        break L2;
       }
       HEAP8[$392 >> 0] = $393 | 1; //@line 19481
       $398 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 19483
       HEAP32[$4 >> 2] = $398; //@line 19484
       $399 = $$1202$in$i$reg2mem$0 & 255; //@line 19485
       if (!($399 << 24 >> 24)) {
        $$0$lcssa$i230$i = 0; //@line 19488
       } else {
        $$045$i228$i = $399; //@line 19490
        $$06$i227$i = 0; //@line 19490
        $404 = $398; //@line 19490
        while (1) {
         $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 19492
         $404$looptemp = $404;
         $404 = $404 + 1 | 0; //@line 19494
         HEAP32[$4 >> 2] = $404; //@line 19495
         $407 = $$06$i227$i << 8 | HEAPU8[$404$looptemp >> 0]; //@line 19498
         if (!($$045$i228$i << 24 >> 24)) {
          $$0$lcssa$i230$i = $407; //@line 19501
          break;
         } else {
          $$06$i227$i = $407; //@line 19504
         }
        }
       }
       HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 19510
       $$reg2mem$3 = $$reg2mem$0; //@line 19511
       break;
      }
     case 28:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        break L2;
       }
       $413 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 19520
       $414 = HEAP8[$413 >> 0] | 0; //@line 19521
       if ($414 & 2) {
        break L2;
       }
       HEAP8[$413 >> 0] = $414 | 2; //@line 19528
       $419 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 19530
       HEAP32[$4 >> 2] = $419; //@line 19531
       $420 = $$1202$in$i$reg2mem$0 & 255; //@line 19532
       if (!($420 << 24 >> 24)) {
        $$0$lcssa$i223$i = 0; //@line 19535
       } else {
        $$045$i221$i = $420; //@line 19537
        $$06$i220$i = 0; //@line 19537
        $425 = $419; //@line 19537
        while (1) {
         $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 19539
         $425$looptemp = $425;
         $425 = $425 + 1 | 0; //@line 19541
         HEAP32[$4 >> 2] = $425; //@line 19542
         $428 = $$06$i220$i << 8 | HEAPU8[$425$looptemp >> 0]; //@line 19545
         if (!($$045$i221$i << 24 >> 24)) {
          $$0$lcssa$i223$i = $428; //@line 19548
          break;
         } else {
          $$06$i220$i = $428; //@line 19551
         }
        }
       }
       HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 19557
       $$reg2mem$3 = $$reg2mem$0; //@line 19558
       break;
      }
     default:
      {
       break L2;
      }
     }
     L62 : while (1) {
      if ((label | 0) == 20) {
       label = 0; //@line 19567
       if (($$1202$i$reg2mem$1 & 65535) > 2) {
        break L2;
       }
       if ((HEAP32[$40 >> 2] | 0) != -1) {
        break L2;
       }
       $122 = $$reg2mem62$1 + 1 | 0; //@line 19577
       HEAP32[$4 >> 2] = $122; //@line 19578
       $123 = $$1202$in$i$reg2mem$1 & 255; //@line 19579
       if (!($123 << 24 >> 24)) {
        $$0$lcssa$i$i = 0; //@line 19582
       } else {
        $$045$i$i = $123; //@line 19584
        $$06$i$i = 0; //@line 19584
        $128 = $122; //@line 19584
        while (1) {
         $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 19586
         $128$looptemp = $128;
         $128 = $128 + 1 | 0; //@line 19588
         HEAP32[$4 >> 2] = $128; //@line 19589
         $131 = $$06$i$i << 8 | HEAPU8[$128$looptemp >> 0]; //@line 19592
         if (!($$045$i$i << 24 >> 24)) {
          $$0$lcssa$i$i = $131; //@line 19595
          break;
         } else {
          $$06$i$i = $131; //@line 19598
         }
        }
       }
       HEAP32[$40 >> 2] = $$0$lcssa$i$i; //@line 19602
       $$reg2mem$3 = $$reg2mem$1; //@line 19603
      }
      $432 = HEAP32[$14 >> 2] | 0; //@line 19605
      $433 = $432 - $16 | 0; //@line 19606
      $47 = $432; //@line 19609
      if (($433 | 0) > ($18 | 0)) {
       break L2;
      }
      if (!(($18 - $433 & 65535) << 16 >> 16)) {
       label = 92; //@line 19616
       break L4;
      }
      $trunc277$i = HEAP8[$47 >> 0] | 0; //@line 19619
      if ($trunc277$i << 24 >> 24 == -1) {
       label = 92; //@line 19622
       break L4;
      }
      $50 = $trunc277$i & 15; //@line 19626
      $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 19627
      switch ($trunc276$i & 15) {
      case 15:
       {
        break L2;
        break;
       }
      case 13:
       {
        $$sink$i = HEAPU8[$47 + 1 >> 0] | 0; //@line 19639
        $$sink214$i = 13; //@line 19639
        $$sink3$i = 1; //@line 19639
        label = 7; //@line 19640
        break;
       }
      case 14:
       {
        $$sink$i = (HEAPU8[$47 + 1 >> 0] << 8) + 269 | 0; //@line 19652
        $$sink214$i = HEAPU8[$47 + 2 >> 0] | 0; //@line 19652
        $$sink3$i = 2; //@line 19652
        label = 7; //@line 19653
        break;
       }
      default:
       {
        $$1$i = $trunc276$i & 255; //@line 19657
        $452 = $432; //@line 19657
        $69 = $47; //@line 19657
       }
      }
      if ((label | 0) == 7) {
       label = 0; //@line 19661
       $64 = $47 + $$sink3$i | 0; //@line 19663
       HEAP32[$4 >> 2] = $64; //@line 19664
       $$1$i = $$sink$i + $$sink214$i | 0; //@line 19666
       $452 = $64; //@line 19666
       $69 = $64; //@line 19666
      }
      $67 = $$1$i + ($$reg2mem$3 & 255) | 0; //@line 19669
      switch ($trunc277$i & 15) {
      case 15:
       {
        break L2;
        break;
       }
      case 13:
       {
        $$sink215$i = HEAPU8[$69 + 1 >> 0] | 0; //@line 19680
        $$sink216$i = 13; //@line 19680
        $$sink8$i = 1; //@line 19680
        label = 11; //@line 19681
        break;
       }
      case 14:
       {
        $$sink215$i = (HEAPU8[$69 + 1 >> 0] << 8) + 269 | 0; //@line 19693
        $$sink216$i = HEAPU8[$69 + 2 >> 0] | 0; //@line 19693
        $$sink8$i = 2; //@line 19693
        label = 11; //@line 19694
        break;
       }
      default:
       {
        $$1202$in$i = $50; //@line 19698
        $84 = $452; //@line 19698
        $96 = $69; //@line 19698
       }
      }
      if ((label | 0) == 11) {
       label = 0; //@line 19702
       $81 = $69 + $$sink8$i | 0; //@line 19704
       HEAP32[$4 >> 2] = $81; //@line 19705
       $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 19707
       $84 = $81; //@line 19707
       $96 = $81; //@line 19707
      }
      $$1202$i = $$1202$in$i & 65535; //@line 19709
      $85 = $42 - $84 & 65535; //@line 19711
      $trunc$i = $67 & 65535; //@line 19712
      switch ($trunc$i << 16 >> 16) {
      case 11:
       {
        $$1202$i$reg2mem$2 = $$1202$i; //@line 19715
        $$reg2mem$2 = $67; //@line 19715
        $$reg2mem73$1 = $85; //@line 19715
        label = 54; //@line 19716
        break L4;
        break;
       }
      case 12:
       {
        $$1202$i$reg2mem$1 = $$1202$i; //@line 19721
        $$1202$in$i$reg2mem$1 = $$1202$in$i; //@line 19721
        $$reg2mem$1 = $67; //@line 19721
        $$reg2mem62$1 = $96; //@line 19721
        label = 20; //@line 19722
        break;
       }
      case 28:
      case 60:
      case 17:
      case 27:
      case 23:
      case 15:
      case 6:
      case 20:
      case 7:
      case 8:
      case 3:
      case 4:
      case 35:
      case 14:
       {
        break L62;
        break;
       }
      default:
       {
        break L2;
       }
      }
     }
     if (!(HEAP32[$2 >> 2] | 0)) {
      label = 14; //@line 19737
      break;
     } else {
      $$1202$i$reg2mem$0 = $$1202$i; //@line 19740
      $$1202$in$i$reg2mem$0 = $$1202$in$i; //@line 19740
      $$reg2mem$0 = $67; //@line 19740
      $$reg2mem62$0 = $96; //@line 19740
      $$reg2mem73$0 = $85; //@line 19740
      $trunc$i$reg2mem$0 = $trunc$i; //@line 19740
     }
    }
    if ((label | 0) == 14) {
     $88 = HEAP32[$26 >> 2] | 0; //@line 19744
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(88) | 0; //@line 19745
     $89 = FUNCTION_TABLE_ii[$88 & 15](68) | 0; //@line 19746
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 19749
      $90 = $ReallocAsyncCtx3 + 4 | 0; //@line 19750
      HEAP32[$90 >> 2] = $2; //@line 19751
      $91 = $ReallocAsyncCtx3 + 8 | 0; //@line 19752
      HEAP32[$91 >> 2] = $4; //@line 19753
      $92 = $ReallocAsyncCtx3 + 12 | 0; //@line 19754
      HEAP32[$92 >> 2] = $$1202$in$i; //@line 19755
      $93 = $ReallocAsyncCtx3 + 16 | 0; //@line 19756
      HEAP32[$93 >> 2] = $67; //@line 19757
      $94 = $ReallocAsyncCtx3 + 20 | 0; //@line 19758
      HEAP16[$94 >> 1] = $$1202$i; //@line 19759
      $95 = $ReallocAsyncCtx3 + 24 | 0; //@line 19760
      HEAP32[$95 >> 2] = $96; //@line 19761
      $97 = $ReallocAsyncCtx3 + 28 | 0; //@line 19762
      HEAP32[$97 >> 2] = $14; //@line 19763
      $98 = $ReallocAsyncCtx3 + 32 | 0; //@line 19764
      HEAP32[$98 >> 2] = $16; //@line 19765
      $99 = $ReallocAsyncCtx3 + 36 | 0; //@line 19766
      HEAP32[$99 >> 2] = $18; //@line 19767
      $100 = $ReallocAsyncCtx3 + 40 | 0; //@line 19768
      HEAP32[$100 >> 2] = $20; //@line 19769
      $101 = $ReallocAsyncCtx3 + 44 | 0; //@line 19770
      HEAP32[$101 >> 2] = $22; //@line 19771
      $102 = $ReallocAsyncCtx3 + 48 | 0; //@line 19772
      HEAP16[$102 >> 1] = $85; //@line 19773
      $103 = $ReallocAsyncCtx3 + 52 | 0; //@line 19774
      HEAP32[$103 >> 2] = $26; //@line 19775
      $104 = $ReallocAsyncCtx3 + 56 | 0; //@line 19776
      HEAP32[$104 >> 2] = $28; //@line 19777
      $105 = $ReallocAsyncCtx3 + 60 | 0; //@line 19778
      HEAP32[$105 >> 2] = $30; //@line 19779
      $106 = $ReallocAsyncCtx3 + 64 | 0; //@line 19780
      HEAP16[$106 >> 1] = $trunc$i; //@line 19781
      $107 = $ReallocAsyncCtx3 + 68 | 0; //@line 19782
      HEAP32[$107 >> 2] = $34; //@line 19783
      $108 = $ReallocAsyncCtx3 + 72 | 0; //@line 19784
      HEAP32[$108 >> 2] = $36; //@line 19785
      $109 = $ReallocAsyncCtx3 + 76 | 0; //@line 19786
      HEAP32[$109 >> 2] = $38; //@line 19787
      $110 = $ReallocAsyncCtx3 + 80 | 0; //@line 19788
      HEAP32[$110 >> 2] = $40; //@line 19789
      $111 = $ReallocAsyncCtx3 + 84 | 0; //@line 19790
      HEAP32[$111 >> 2] = $42; //@line 19791
      sp = STACKTOP; //@line 19792
      return;
     }
     HEAP32[___async_retval >> 2] = $89; //@line 19796
     ___async_unwind = 0; //@line 19797
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 19798
     $90 = $ReallocAsyncCtx3 + 4 | 0; //@line 19799
     HEAP32[$90 >> 2] = $2; //@line 19800
     $91 = $ReallocAsyncCtx3 + 8 | 0; //@line 19801
     HEAP32[$91 >> 2] = $4; //@line 19802
     $92 = $ReallocAsyncCtx3 + 12 | 0; //@line 19803
     HEAP32[$92 >> 2] = $$1202$in$i; //@line 19804
     $93 = $ReallocAsyncCtx3 + 16 | 0; //@line 19805
     HEAP32[$93 >> 2] = $67; //@line 19806
     $94 = $ReallocAsyncCtx3 + 20 | 0; //@line 19807
     HEAP16[$94 >> 1] = $$1202$i; //@line 19808
     $95 = $ReallocAsyncCtx3 + 24 | 0; //@line 19809
     HEAP32[$95 >> 2] = $96; //@line 19810
     $97 = $ReallocAsyncCtx3 + 28 | 0; //@line 19811
     HEAP32[$97 >> 2] = $14; //@line 19812
     $98 = $ReallocAsyncCtx3 + 32 | 0; //@line 19813
     HEAP32[$98 >> 2] = $16; //@line 19814
     $99 = $ReallocAsyncCtx3 + 36 | 0; //@line 19815
     HEAP32[$99 >> 2] = $18; //@line 19816
     $100 = $ReallocAsyncCtx3 + 40 | 0; //@line 19817
     HEAP32[$100 >> 2] = $20; //@line 19818
     $101 = $ReallocAsyncCtx3 + 44 | 0; //@line 19819
     HEAP32[$101 >> 2] = $22; //@line 19820
     $102 = $ReallocAsyncCtx3 + 48 | 0; //@line 19821
     HEAP16[$102 >> 1] = $85; //@line 19822
     $103 = $ReallocAsyncCtx3 + 52 | 0; //@line 19823
     HEAP32[$103 >> 2] = $26; //@line 19824
     $104 = $ReallocAsyncCtx3 + 56 | 0; //@line 19825
     HEAP32[$104 >> 2] = $28; //@line 19826
     $105 = $ReallocAsyncCtx3 + 60 | 0; //@line 19827
     HEAP32[$105 >> 2] = $30; //@line 19828
     $106 = $ReallocAsyncCtx3 + 64 | 0; //@line 19829
     HEAP16[$106 >> 1] = $trunc$i; //@line 19830
     $107 = $ReallocAsyncCtx3 + 68 | 0; //@line 19831
     HEAP32[$107 >> 2] = $34; //@line 19832
     $108 = $ReallocAsyncCtx3 + 72 | 0; //@line 19833
     HEAP32[$108 >> 2] = $36; //@line 19834
     $109 = $ReallocAsyncCtx3 + 76 | 0; //@line 19835
     HEAP32[$109 >> 2] = $38; //@line 19836
     $110 = $ReallocAsyncCtx3 + 80 | 0; //@line 19837
     HEAP32[$110 >> 2] = $40; //@line 19838
     $111 = $ReallocAsyncCtx3 + 84 | 0; //@line 19839
     HEAP32[$111 >> 2] = $42; //@line 19840
     sp = STACKTOP; //@line 19841
     return;
    } else if ((label | 0) == 29) {
     $147 = $$1202$in$i$reg2mem$0 & 65535; //@line 19845
     if (($$1202$i$reg2mem$0 + -1 & 65535) > 1033) {
      break;
     }
     $150 = HEAP32[$2 >> 2] | 0; //@line 19851
     if (HEAP32[$150 + 44 >> 2] | 0) {
      break;
     }
     HEAP16[$150 + 2 >> 1] = $$1202$i$reg2mem$0; //@line 19859
     $155 = $$reg2mem62$0 + 1 | 0; //@line 19860
     HEAP32[$4 >> 2] = $155; //@line 19861
     $156 = HEAP32[$26 >> 2] | 0; //@line 19862
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 19863
     $157 = FUNCTION_TABLE_ii[$156 & 15]($$1202$i$reg2mem$0) | 0; //@line 19864
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 19867
      $158 = $ReallocAsyncCtx4 + 4 | 0; //@line 19868
      HEAP32[$158 >> 2] = $2; //@line 19869
      $159 = $ReallocAsyncCtx4 + 8 | 0; //@line 19870
      HEAP32[$159 >> 2] = $4; //@line 19871
      $160 = $ReallocAsyncCtx4 + 12 | 0; //@line 19872
      HEAP32[$160 >> 2] = $14; //@line 19873
      $161 = $ReallocAsyncCtx4 + 16 | 0; //@line 19874
      HEAP32[$161 >> 2] = $16; //@line 19875
      $162 = $ReallocAsyncCtx4 + 20 | 0; //@line 19876
      HEAP32[$162 >> 2] = $18; //@line 19877
      $163 = $ReallocAsyncCtx4 + 24 | 0; //@line 19878
      HEAP32[$163 >> 2] = $20; //@line 19879
      $164 = $ReallocAsyncCtx4 + 28 | 0; //@line 19880
      HEAP32[$164 >> 2] = $22; //@line 19881
      $165 = $ReallocAsyncCtx4 + 32 | 0; //@line 19882
      HEAP32[$165 >> 2] = $26; //@line 19883
      $166 = $ReallocAsyncCtx4 + 36 | 0; //@line 19884
      HEAP32[$166 >> 2] = $28; //@line 19885
      $167 = $ReallocAsyncCtx4 + 40 | 0; //@line 19886
      HEAP32[$167 >> 2] = $30; //@line 19887
      $168 = $ReallocAsyncCtx4 + 44 | 0; //@line 19888
      HEAP32[$168 >> 2] = $34; //@line 19889
      $169 = $ReallocAsyncCtx4 + 48 | 0; //@line 19890
      HEAP32[$169 >> 2] = $36; //@line 19891
      $170 = $ReallocAsyncCtx4 + 52 | 0; //@line 19892
      HEAP32[$170 >> 2] = $38; //@line 19893
      $171 = $ReallocAsyncCtx4 + 56 | 0; //@line 19894
      HEAP32[$171 >> 2] = $40; //@line 19895
      $172 = $ReallocAsyncCtx4 + 60 | 0; //@line 19896
      HEAP32[$172 >> 2] = $42; //@line 19897
      $173 = $ReallocAsyncCtx4 + 64 | 0; //@line 19898
      HEAP32[$173 >> 2] = $$reg2mem$0; //@line 19899
      $174 = $ReallocAsyncCtx4 + 68 | 0; //@line 19900
      HEAP32[$174 >> 2] = $155; //@line 19901
      $175 = $ReallocAsyncCtx4 + 72 | 0; //@line 19902
      HEAP32[$175 >> 2] = $147; //@line 19903
      sp = STACKTOP; //@line 19904
      return;
     }
     HEAP32[___async_retval >> 2] = $157; //@line 19908
     ___async_unwind = 0; //@line 19909
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 19910
     $158 = $ReallocAsyncCtx4 + 4 | 0; //@line 19911
     HEAP32[$158 >> 2] = $2; //@line 19912
     $159 = $ReallocAsyncCtx4 + 8 | 0; //@line 19913
     HEAP32[$159 >> 2] = $4; //@line 19914
     $160 = $ReallocAsyncCtx4 + 12 | 0; //@line 19915
     HEAP32[$160 >> 2] = $14; //@line 19916
     $161 = $ReallocAsyncCtx4 + 16 | 0; //@line 19917
     HEAP32[$161 >> 2] = $16; //@line 19918
     $162 = $ReallocAsyncCtx4 + 20 | 0; //@line 19919
     HEAP32[$162 >> 2] = $18; //@line 19920
     $163 = $ReallocAsyncCtx4 + 24 | 0; //@line 19921
     HEAP32[$163 >> 2] = $20; //@line 19922
     $164 = $ReallocAsyncCtx4 + 28 | 0; //@line 19923
     HEAP32[$164 >> 2] = $22; //@line 19924
     $165 = $ReallocAsyncCtx4 + 32 | 0; //@line 19925
     HEAP32[$165 >> 2] = $26; //@line 19926
     $166 = $ReallocAsyncCtx4 + 36 | 0; //@line 19927
     HEAP32[$166 >> 2] = $28; //@line 19928
     $167 = $ReallocAsyncCtx4 + 40 | 0; //@line 19929
     HEAP32[$167 >> 2] = $30; //@line 19930
     $168 = $ReallocAsyncCtx4 + 44 | 0; //@line 19931
     HEAP32[$168 >> 2] = $34; //@line 19932
     $169 = $ReallocAsyncCtx4 + 48 | 0; //@line 19933
     HEAP32[$169 >> 2] = $36; //@line 19934
     $170 = $ReallocAsyncCtx4 + 52 | 0; //@line 19935
     HEAP32[$170 >> 2] = $38; //@line 19936
     $171 = $ReallocAsyncCtx4 + 56 | 0; //@line 19937
     HEAP32[$171 >> 2] = $40; //@line 19938
     $172 = $ReallocAsyncCtx4 + 60 | 0; //@line 19939
     HEAP32[$172 >> 2] = $42; //@line 19940
     $173 = $ReallocAsyncCtx4 + 64 | 0; //@line 19941
     HEAP32[$173 >> 2] = $$reg2mem$0; //@line 19942
     $174 = $ReallocAsyncCtx4 + 68 | 0; //@line 19943
     HEAP32[$174 >> 2] = $155; //@line 19944
     $175 = $ReallocAsyncCtx4 + 72 | 0; //@line 19945
     HEAP32[$175 >> 2] = $147; //@line 19946
     sp = STACKTOP; //@line 19947
     return;
    } else if ((label | 0) == 34) {
     $177 = HEAP32[$2 >> 2] | 0; //@line 19951
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 19953
     $179 = _sn_coap_parser_options_parse_multiple_options($22, $4, $$reg2mem73$0, $177 + 48 | 0, $177, 4, $$1202$i$reg2mem$0) | 0; //@line 19954
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 19957
      $180 = $ReallocAsyncCtx10 + 4 | 0; //@line 19958
      HEAP32[$180 >> 2] = $2; //@line 19959
      $181 = $ReallocAsyncCtx10 + 8 | 0; //@line 19960
      HEAP32[$181 >> 2] = $4; //@line 19961
      $182 = $ReallocAsyncCtx10 + 12 | 0; //@line 19962
      HEAP32[$182 >> 2] = $14; //@line 19963
      $183 = $ReallocAsyncCtx10 + 16 | 0; //@line 19964
      HEAP32[$183 >> 2] = $16; //@line 19965
      $184 = $ReallocAsyncCtx10 + 20 | 0; //@line 19966
      HEAP32[$184 >> 2] = $18; //@line 19967
      $185 = $ReallocAsyncCtx10 + 24 | 0; //@line 19968
      HEAP32[$185 >> 2] = $20; //@line 19969
      $186 = $ReallocAsyncCtx10 + 28 | 0; //@line 19970
      HEAP32[$186 >> 2] = $22; //@line 19971
      $187 = $ReallocAsyncCtx10 + 32 | 0; //@line 19972
      HEAP32[$187 >> 2] = $26; //@line 19973
      $188 = $ReallocAsyncCtx10 + 36 | 0; //@line 19974
      HEAP32[$188 >> 2] = $28; //@line 19975
      $189 = $ReallocAsyncCtx10 + 40 | 0; //@line 19976
      HEAP32[$189 >> 2] = $30; //@line 19977
      $190 = $ReallocAsyncCtx10 + 44 | 0; //@line 19978
      HEAP32[$190 >> 2] = $34; //@line 19979
      $191 = $ReallocAsyncCtx10 + 48 | 0; //@line 19980
      HEAP32[$191 >> 2] = $36; //@line 19981
      $192 = $ReallocAsyncCtx10 + 52 | 0; //@line 19982
      HEAP32[$192 >> 2] = $38; //@line 19983
      $193 = $ReallocAsyncCtx10 + 56 | 0; //@line 19984
      HEAP32[$193 >> 2] = $40; //@line 19985
      $194 = $ReallocAsyncCtx10 + 60 | 0; //@line 19986
      HEAP32[$194 >> 2] = $42; //@line 19987
      $195 = $ReallocAsyncCtx10 + 64 | 0; //@line 19988
      HEAP32[$195 >> 2] = $$reg2mem$0; //@line 19989
      sp = STACKTOP; //@line 19990
      return;
     }
     HEAP8[___async_retval >> 0] = $179; //@line 19994
     ___async_unwind = 0; //@line 19995
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 19996
     $180 = $ReallocAsyncCtx10 + 4 | 0; //@line 19997
     HEAP32[$180 >> 2] = $2; //@line 19998
     $181 = $ReallocAsyncCtx10 + 8 | 0; //@line 19999
     HEAP32[$181 >> 2] = $4; //@line 20000
     $182 = $ReallocAsyncCtx10 + 12 | 0; //@line 20001
     HEAP32[$182 >> 2] = $14; //@line 20002
     $183 = $ReallocAsyncCtx10 + 16 | 0; //@line 20003
     HEAP32[$183 >> 2] = $16; //@line 20004
     $184 = $ReallocAsyncCtx10 + 20 | 0; //@line 20005
     HEAP32[$184 >> 2] = $18; //@line 20006
     $185 = $ReallocAsyncCtx10 + 24 | 0; //@line 20007
     HEAP32[$185 >> 2] = $20; //@line 20008
     $186 = $ReallocAsyncCtx10 + 28 | 0; //@line 20009
     HEAP32[$186 >> 2] = $22; //@line 20010
     $187 = $ReallocAsyncCtx10 + 32 | 0; //@line 20011
     HEAP32[$187 >> 2] = $26; //@line 20012
     $188 = $ReallocAsyncCtx10 + 36 | 0; //@line 20013
     HEAP32[$188 >> 2] = $28; //@line 20014
     $189 = $ReallocAsyncCtx10 + 40 | 0; //@line 20015
     HEAP32[$189 >> 2] = $30; //@line 20016
     $190 = $ReallocAsyncCtx10 + 44 | 0; //@line 20017
     HEAP32[$190 >> 2] = $34; //@line 20018
     $191 = $ReallocAsyncCtx10 + 48 | 0; //@line 20019
     HEAP32[$191 >> 2] = $36; //@line 20020
     $192 = $ReallocAsyncCtx10 + 52 | 0; //@line 20021
     HEAP32[$192 >> 2] = $38; //@line 20022
     $193 = $ReallocAsyncCtx10 + 56 | 0; //@line 20023
     HEAP32[$193 >> 2] = $40; //@line 20024
     $194 = $ReallocAsyncCtx10 + 60 | 0; //@line 20025
     HEAP32[$194 >> 2] = $42; //@line 20026
     $195 = $ReallocAsyncCtx10 + 64 | 0; //@line 20027
     HEAP32[$195 >> 2] = $$reg2mem$0; //@line 20028
     sp = STACKTOP; //@line 20029
     return;
    } else if ((label | 0) == 37) {
     $197 = $$1202$in$i$reg2mem$0 & 65535; //@line 20033
     if (($$1202$i$reg2mem$0 + -1 & 65535) > 254) {
      break;
     }
     $200 = HEAP32[$2 >> 2] | 0; //@line 20039
     if (HEAP32[$200 + 52 >> 2] | 0) {
      break;
     }
     HEAP16[$200 + 4 >> 1] = $$1202$i$reg2mem$0; //@line 20047
     $205 = $$reg2mem62$0 + 1 | 0; //@line 20048
     HEAP32[$4 >> 2] = $205; //@line 20049
     $206 = HEAP32[$26 >> 2] | 0; //@line 20050
     $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 20051
     $207 = FUNCTION_TABLE_ii[$206 & 15]($$1202$i$reg2mem$0) | 0; //@line 20052
     if (___async) {
      HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 20055
      $208 = $ReallocAsyncCtx5 + 4 | 0; //@line 20056
      HEAP32[$208 >> 2] = $2; //@line 20057
      $209 = $ReallocAsyncCtx5 + 8 | 0; //@line 20058
      HEAP32[$209 >> 2] = $4; //@line 20059
      $210 = $ReallocAsyncCtx5 + 12 | 0; //@line 20060
      HEAP32[$210 >> 2] = $14; //@line 20061
      $211 = $ReallocAsyncCtx5 + 16 | 0; //@line 20062
      HEAP32[$211 >> 2] = $16; //@line 20063
      $212 = $ReallocAsyncCtx5 + 20 | 0; //@line 20064
      HEAP32[$212 >> 2] = $18; //@line 20065
      $213 = $ReallocAsyncCtx5 + 24 | 0; //@line 20066
      HEAP32[$213 >> 2] = $20; //@line 20067
      $214 = $ReallocAsyncCtx5 + 28 | 0; //@line 20068
      HEAP32[$214 >> 2] = $22; //@line 20069
      $215 = $ReallocAsyncCtx5 + 32 | 0; //@line 20070
      HEAP32[$215 >> 2] = $26; //@line 20071
      $216 = $ReallocAsyncCtx5 + 36 | 0; //@line 20072
      HEAP32[$216 >> 2] = $28; //@line 20073
      $217 = $ReallocAsyncCtx5 + 40 | 0; //@line 20074
      HEAP32[$217 >> 2] = $30; //@line 20075
      $218 = $ReallocAsyncCtx5 + 44 | 0; //@line 20076
      HEAP32[$218 >> 2] = $34; //@line 20077
      $219 = $ReallocAsyncCtx5 + 48 | 0; //@line 20078
      HEAP32[$219 >> 2] = $36; //@line 20079
      $220 = $ReallocAsyncCtx5 + 52 | 0; //@line 20080
      HEAP32[$220 >> 2] = $38; //@line 20081
      $221 = $ReallocAsyncCtx5 + 56 | 0; //@line 20082
      HEAP32[$221 >> 2] = $40; //@line 20083
      $222 = $ReallocAsyncCtx5 + 60 | 0; //@line 20084
      HEAP32[$222 >> 2] = $42; //@line 20085
      $223 = $ReallocAsyncCtx5 + 64 | 0; //@line 20086
      HEAP32[$223 >> 2] = $$reg2mem$0; //@line 20087
      $224 = $ReallocAsyncCtx5 + 68 | 0; //@line 20088
      HEAP32[$224 >> 2] = $205; //@line 20089
      $225 = $ReallocAsyncCtx5 + 72 | 0; //@line 20090
      HEAP32[$225 >> 2] = $197; //@line 20091
      sp = STACKTOP; //@line 20092
      return;
     }
     HEAP32[___async_retval >> 2] = $207; //@line 20096
     ___async_unwind = 0; //@line 20097
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 20098
     $208 = $ReallocAsyncCtx5 + 4 | 0; //@line 20099
     HEAP32[$208 >> 2] = $2; //@line 20100
     $209 = $ReallocAsyncCtx5 + 8 | 0; //@line 20101
     HEAP32[$209 >> 2] = $4; //@line 20102
     $210 = $ReallocAsyncCtx5 + 12 | 0; //@line 20103
     HEAP32[$210 >> 2] = $14; //@line 20104
     $211 = $ReallocAsyncCtx5 + 16 | 0; //@line 20105
     HEAP32[$211 >> 2] = $16; //@line 20106
     $212 = $ReallocAsyncCtx5 + 20 | 0; //@line 20107
     HEAP32[$212 >> 2] = $18; //@line 20108
     $213 = $ReallocAsyncCtx5 + 24 | 0; //@line 20109
     HEAP32[$213 >> 2] = $20; //@line 20110
     $214 = $ReallocAsyncCtx5 + 28 | 0; //@line 20111
     HEAP32[$214 >> 2] = $22; //@line 20112
     $215 = $ReallocAsyncCtx5 + 32 | 0; //@line 20113
     HEAP32[$215 >> 2] = $26; //@line 20114
     $216 = $ReallocAsyncCtx5 + 36 | 0; //@line 20115
     HEAP32[$216 >> 2] = $28; //@line 20116
     $217 = $ReallocAsyncCtx5 + 40 | 0; //@line 20117
     HEAP32[$217 >> 2] = $30; //@line 20118
     $218 = $ReallocAsyncCtx5 + 44 | 0; //@line 20119
     HEAP32[$218 >> 2] = $34; //@line 20120
     $219 = $ReallocAsyncCtx5 + 48 | 0; //@line 20121
     HEAP32[$219 >> 2] = $36; //@line 20122
     $220 = $ReallocAsyncCtx5 + 52 | 0; //@line 20123
     HEAP32[$220 >> 2] = $38; //@line 20124
     $221 = $ReallocAsyncCtx5 + 56 | 0; //@line 20125
     HEAP32[$221 >> 2] = $40; //@line 20126
     $222 = $ReallocAsyncCtx5 + 60 | 0; //@line 20127
     HEAP32[$222 >> 2] = $42; //@line 20128
     $223 = $ReallocAsyncCtx5 + 64 | 0; //@line 20129
     HEAP32[$223 >> 2] = $$reg2mem$0; //@line 20130
     $224 = $ReallocAsyncCtx5 + 68 | 0; //@line 20131
     HEAP32[$224 >> 2] = $205; //@line 20132
     $225 = $ReallocAsyncCtx5 + 72 | 0; //@line 20133
     HEAP32[$225 >> 2] = $197; //@line 20134
     sp = STACKTOP; //@line 20135
     return;
    } else if ((label | 0) == 42) {
     $227 = HEAP32[$2 >> 2] | 0; //@line 20139
     $228 = $227 + 56 | 0; //@line 20140
     if (HEAP32[$228 >> 2] | 0) {
      break;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 20147
     $232 = _sn_coap_parser_options_parse_multiple_options($22, $4, $$reg2mem73$0, $228, $227 + 6 | 0, 8, $$1202$i$reg2mem$0) | 0; //@line 20148
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 20151
      $233 = $ReallocAsyncCtx9 + 4 | 0; //@line 20152
      HEAP32[$233 >> 2] = $2; //@line 20153
      $234 = $ReallocAsyncCtx9 + 8 | 0; //@line 20154
      HEAP32[$234 >> 2] = $4; //@line 20155
      $235 = $ReallocAsyncCtx9 + 12 | 0; //@line 20156
      HEAP32[$235 >> 2] = $14; //@line 20157
      $236 = $ReallocAsyncCtx9 + 16 | 0; //@line 20158
      HEAP32[$236 >> 2] = $16; //@line 20159
      $237 = $ReallocAsyncCtx9 + 20 | 0; //@line 20160
      HEAP32[$237 >> 2] = $18; //@line 20161
      $238 = $ReallocAsyncCtx9 + 24 | 0; //@line 20162
      HEAP32[$238 >> 2] = $20; //@line 20163
      $239 = $ReallocAsyncCtx9 + 28 | 0; //@line 20164
      HEAP32[$239 >> 2] = $22; //@line 20165
      $240 = $ReallocAsyncCtx9 + 32 | 0; //@line 20166
      HEAP32[$240 >> 2] = $26; //@line 20167
      $241 = $ReallocAsyncCtx9 + 36 | 0; //@line 20168
      HEAP32[$241 >> 2] = $28; //@line 20169
      $242 = $ReallocAsyncCtx9 + 40 | 0; //@line 20170
      HEAP32[$242 >> 2] = $30; //@line 20171
      $243 = $ReallocAsyncCtx9 + 44 | 0; //@line 20172
      HEAP32[$243 >> 2] = $34; //@line 20173
      $244 = $ReallocAsyncCtx9 + 48 | 0; //@line 20174
      HEAP32[$244 >> 2] = $36; //@line 20175
      $245 = $ReallocAsyncCtx9 + 52 | 0; //@line 20176
      HEAP32[$245 >> 2] = $38; //@line 20177
      $246 = $ReallocAsyncCtx9 + 56 | 0; //@line 20178
      HEAP32[$246 >> 2] = $40; //@line 20179
      $247 = $ReallocAsyncCtx9 + 60 | 0; //@line 20180
      HEAP32[$247 >> 2] = $42; //@line 20181
      $248 = $ReallocAsyncCtx9 + 64 | 0; //@line 20182
      HEAP32[$248 >> 2] = $$reg2mem$0; //@line 20183
      sp = STACKTOP; //@line 20184
      return;
     }
     HEAP8[___async_retval >> 0] = $232; //@line 20188
     ___async_unwind = 0; //@line 20189
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 20190
     $233 = $ReallocAsyncCtx9 + 4 | 0; //@line 20191
     HEAP32[$233 >> 2] = $2; //@line 20192
     $234 = $ReallocAsyncCtx9 + 8 | 0; //@line 20193
     HEAP32[$234 >> 2] = $4; //@line 20194
     $235 = $ReallocAsyncCtx9 + 12 | 0; //@line 20195
     HEAP32[$235 >> 2] = $14; //@line 20196
     $236 = $ReallocAsyncCtx9 + 16 | 0; //@line 20197
     HEAP32[$236 >> 2] = $16; //@line 20198
     $237 = $ReallocAsyncCtx9 + 20 | 0; //@line 20199
     HEAP32[$237 >> 2] = $18; //@line 20200
     $238 = $ReallocAsyncCtx9 + 24 | 0; //@line 20201
     HEAP32[$238 >> 2] = $20; //@line 20202
     $239 = $ReallocAsyncCtx9 + 28 | 0; //@line 20203
     HEAP32[$239 >> 2] = $22; //@line 20204
     $240 = $ReallocAsyncCtx9 + 32 | 0; //@line 20205
     HEAP32[$240 >> 2] = $26; //@line 20206
     $241 = $ReallocAsyncCtx9 + 36 | 0; //@line 20207
     HEAP32[$241 >> 2] = $28; //@line 20208
     $242 = $ReallocAsyncCtx9 + 40 | 0; //@line 20209
     HEAP32[$242 >> 2] = $30; //@line 20210
     $243 = $ReallocAsyncCtx9 + 44 | 0; //@line 20211
     HEAP32[$243 >> 2] = $34; //@line 20212
     $244 = $ReallocAsyncCtx9 + 48 | 0; //@line 20213
     HEAP32[$244 >> 2] = $36; //@line 20214
     $245 = $ReallocAsyncCtx9 + 52 | 0; //@line 20215
     HEAP32[$245 >> 2] = $38; //@line 20216
     $246 = $ReallocAsyncCtx9 + 56 | 0; //@line 20217
     HEAP32[$246 >> 2] = $40; //@line 20218
     $247 = $ReallocAsyncCtx9 + 60 | 0; //@line 20219
     HEAP32[$247 >> 2] = $42; //@line 20220
     $248 = $ReallocAsyncCtx9 + 64 | 0; //@line 20221
     HEAP32[$248 >> 2] = $$reg2mem$0; //@line 20222
     sp = STACKTOP; //@line 20223
     return;
    } else if ((label | 0) == 51) {
     $266 = HEAP32[$2 >> 2] | 0; //@line 20227
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 20230
     $269 = _sn_coap_parser_options_parse_multiple_options($22, $4, $$reg2mem73$0, $266 + 60 | 0, $266 + 8 | 0, 20, $$1202$i$reg2mem$0) | 0; //@line 20231
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 20234
      $270 = $ReallocAsyncCtx8 + 4 | 0; //@line 20235
      HEAP32[$270 >> 2] = $2; //@line 20236
      $271 = $ReallocAsyncCtx8 + 8 | 0; //@line 20237
      HEAP32[$271 >> 2] = $4; //@line 20238
      $272 = $ReallocAsyncCtx8 + 12 | 0; //@line 20239
      HEAP32[$272 >> 2] = $14; //@line 20240
      $273 = $ReallocAsyncCtx8 + 16 | 0; //@line 20241
      HEAP32[$273 >> 2] = $16; //@line 20242
      $274 = $ReallocAsyncCtx8 + 20 | 0; //@line 20243
      HEAP32[$274 >> 2] = $18; //@line 20244
      $275 = $ReallocAsyncCtx8 + 24 | 0; //@line 20245
      HEAP32[$275 >> 2] = $20; //@line 20246
      $276 = $ReallocAsyncCtx8 + 28 | 0; //@line 20247
      HEAP32[$276 >> 2] = $22; //@line 20248
      $277 = $ReallocAsyncCtx8 + 32 | 0; //@line 20249
      HEAP32[$277 >> 2] = $26; //@line 20250
      $278 = $ReallocAsyncCtx8 + 36 | 0; //@line 20251
      HEAP32[$278 >> 2] = $28; //@line 20252
      $279 = $ReallocAsyncCtx8 + 40 | 0; //@line 20253
      HEAP32[$279 >> 2] = $30; //@line 20254
      $280 = $ReallocAsyncCtx8 + 44 | 0; //@line 20255
      HEAP32[$280 >> 2] = $34; //@line 20256
      $281 = $ReallocAsyncCtx8 + 48 | 0; //@line 20257
      HEAP32[$281 >> 2] = $36; //@line 20258
      $282 = $ReallocAsyncCtx8 + 52 | 0; //@line 20259
      HEAP32[$282 >> 2] = $38; //@line 20260
      $283 = $ReallocAsyncCtx8 + 56 | 0; //@line 20261
      HEAP32[$283 >> 2] = $40; //@line 20262
      $284 = $ReallocAsyncCtx8 + 60 | 0; //@line 20263
      HEAP32[$284 >> 2] = $42; //@line 20264
      $285 = $ReallocAsyncCtx8 + 64 | 0; //@line 20265
      HEAP32[$285 >> 2] = $$reg2mem$0; //@line 20266
      sp = STACKTOP; //@line 20267
      return;
     }
     HEAP8[___async_retval >> 0] = $269; //@line 20271
     ___async_unwind = 0; //@line 20272
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 20273
     $270 = $ReallocAsyncCtx8 + 4 | 0; //@line 20274
     HEAP32[$270 >> 2] = $2; //@line 20275
     $271 = $ReallocAsyncCtx8 + 8 | 0; //@line 20276
     HEAP32[$271 >> 2] = $4; //@line 20277
     $272 = $ReallocAsyncCtx8 + 12 | 0; //@line 20278
     HEAP32[$272 >> 2] = $14; //@line 20279
     $273 = $ReallocAsyncCtx8 + 16 | 0; //@line 20280
     HEAP32[$273 >> 2] = $16; //@line 20281
     $274 = $ReallocAsyncCtx8 + 20 | 0; //@line 20282
     HEAP32[$274 >> 2] = $18; //@line 20283
     $275 = $ReallocAsyncCtx8 + 24 | 0; //@line 20284
     HEAP32[$275 >> 2] = $20; //@line 20285
     $276 = $ReallocAsyncCtx8 + 28 | 0; //@line 20286
     HEAP32[$276 >> 2] = $22; //@line 20287
     $277 = $ReallocAsyncCtx8 + 32 | 0; //@line 20288
     HEAP32[$277 >> 2] = $26; //@line 20289
     $278 = $ReallocAsyncCtx8 + 36 | 0; //@line 20290
     HEAP32[$278 >> 2] = $28; //@line 20291
     $279 = $ReallocAsyncCtx8 + 40 | 0; //@line 20292
     HEAP32[$279 >> 2] = $30; //@line 20293
     $280 = $ReallocAsyncCtx8 + 44 | 0; //@line 20294
     HEAP32[$280 >> 2] = $34; //@line 20295
     $281 = $ReallocAsyncCtx8 + 48 | 0; //@line 20296
     HEAP32[$281 >> 2] = $36; //@line 20297
     $282 = $ReallocAsyncCtx8 + 52 | 0; //@line 20298
     HEAP32[$282 >> 2] = $38; //@line 20299
     $283 = $ReallocAsyncCtx8 + 56 | 0; //@line 20300
     HEAP32[$283 >> 2] = $40; //@line 20301
     $284 = $ReallocAsyncCtx8 + 60 | 0; //@line 20302
     HEAP32[$284 >> 2] = $42; //@line 20303
     $285 = $ReallocAsyncCtx8 + 64 | 0; //@line 20304
     HEAP32[$285 >> 2] = $$reg2mem$0; //@line 20305
     sp = STACKTOP; //@line 20306
     return;
    } else if ((label | 0) == 54) {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 20310
     $287 = _sn_coap_parser_options_parse_multiple_options($22, $4, $$reg2mem73$1, $28, $30, 11, $$1202$i$reg2mem$2) | 0; //@line 20311
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 20314
      $288 = $ReallocAsyncCtx7 + 4 | 0; //@line 20315
      HEAP32[$288 >> 2] = $2; //@line 20316
      $289 = $ReallocAsyncCtx7 + 8 | 0; //@line 20317
      HEAP32[$289 >> 2] = $4; //@line 20318
      $290 = $ReallocAsyncCtx7 + 12 | 0; //@line 20319
      HEAP32[$290 >> 2] = $14; //@line 20320
      $291 = $ReallocAsyncCtx7 + 16 | 0; //@line 20321
      HEAP32[$291 >> 2] = $16; //@line 20322
      $292 = $ReallocAsyncCtx7 + 20 | 0; //@line 20323
      HEAP32[$292 >> 2] = $18; //@line 20324
      $293 = $ReallocAsyncCtx7 + 24 | 0; //@line 20325
      HEAP32[$293 >> 2] = $20; //@line 20326
      $294 = $ReallocAsyncCtx7 + 28 | 0; //@line 20327
      HEAP32[$294 >> 2] = $22; //@line 20328
      $295 = $ReallocAsyncCtx7 + 32 | 0; //@line 20329
      HEAP32[$295 >> 2] = $26; //@line 20330
      $296 = $ReallocAsyncCtx7 + 36 | 0; //@line 20331
      HEAP32[$296 >> 2] = $28; //@line 20332
      $297 = $ReallocAsyncCtx7 + 40 | 0; //@line 20333
      HEAP32[$297 >> 2] = $30; //@line 20334
      $298 = $ReallocAsyncCtx7 + 44 | 0; //@line 20335
      HEAP32[$298 >> 2] = $34; //@line 20336
      $299 = $ReallocAsyncCtx7 + 48 | 0; //@line 20337
      HEAP32[$299 >> 2] = $36; //@line 20338
      $300 = $ReallocAsyncCtx7 + 52 | 0; //@line 20339
      HEAP32[$300 >> 2] = $38; //@line 20340
      $301 = $ReallocAsyncCtx7 + 56 | 0; //@line 20341
      HEAP32[$301 >> 2] = $40; //@line 20342
      $302 = $ReallocAsyncCtx7 + 60 | 0; //@line 20343
      HEAP32[$302 >> 2] = $42; //@line 20344
      $303 = $ReallocAsyncCtx7 + 64 | 0; //@line 20345
      HEAP32[$303 >> 2] = $$reg2mem$2; //@line 20346
      sp = STACKTOP; //@line 20347
      return;
     }
     HEAP8[___async_retval >> 0] = $287; //@line 20351
     ___async_unwind = 0; //@line 20352
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 20353
     $288 = $ReallocAsyncCtx7 + 4 | 0; //@line 20354
     HEAP32[$288 >> 2] = $2; //@line 20355
     $289 = $ReallocAsyncCtx7 + 8 | 0; //@line 20356
     HEAP32[$289 >> 2] = $4; //@line 20357
     $290 = $ReallocAsyncCtx7 + 12 | 0; //@line 20358
     HEAP32[$290 >> 2] = $14; //@line 20359
     $291 = $ReallocAsyncCtx7 + 16 | 0; //@line 20360
     HEAP32[$291 >> 2] = $16; //@line 20361
     $292 = $ReallocAsyncCtx7 + 20 | 0; //@line 20362
     HEAP32[$292 >> 2] = $18; //@line 20363
     $293 = $ReallocAsyncCtx7 + 24 | 0; //@line 20364
     HEAP32[$293 >> 2] = $20; //@line 20365
     $294 = $ReallocAsyncCtx7 + 28 | 0; //@line 20366
     HEAP32[$294 >> 2] = $22; //@line 20367
     $295 = $ReallocAsyncCtx7 + 32 | 0; //@line 20368
     HEAP32[$295 >> 2] = $26; //@line 20369
     $296 = $ReallocAsyncCtx7 + 36 | 0; //@line 20370
     HEAP32[$296 >> 2] = $28; //@line 20371
     $297 = $ReallocAsyncCtx7 + 40 | 0; //@line 20372
     HEAP32[$297 >> 2] = $30; //@line 20373
     $298 = $ReallocAsyncCtx7 + 44 | 0; //@line 20374
     HEAP32[$298 >> 2] = $34; //@line 20375
     $299 = $ReallocAsyncCtx7 + 48 | 0; //@line 20376
     HEAP32[$299 >> 2] = $36; //@line 20377
     $300 = $ReallocAsyncCtx7 + 52 | 0; //@line 20378
     HEAP32[$300 >> 2] = $38; //@line 20379
     $301 = $ReallocAsyncCtx7 + 56 | 0; //@line 20380
     HEAP32[$301 >> 2] = $40; //@line 20381
     $302 = $ReallocAsyncCtx7 + 60 | 0; //@line 20382
     HEAP32[$302 >> 2] = $42; //@line 20383
     $303 = $ReallocAsyncCtx7 + 64 | 0; //@line 20384
     HEAP32[$303 >> 2] = $$reg2mem$2; //@line 20385
     sp = STACKTOP; //@line 20386
     return;
    } else if ((label | 0) == 62) {
     $321 = HEAP32[$2 >> 2] | 0; //@line 20390
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 20393
     $324 = _sn_coap_parser_options_parse_multiple_options($22, $4, $$reg2mem73$0, $321 + 64 | 0, $321 + 10 | 0, 15, $$1202$i$reg2mem$0) | 0; //@line 20394
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 20397
      $325 = $ReallocAsyncCtx6 + 4 | 0; //@line 20398
      HEAP32[$325 >> 2] = $2; //@line 20399
      $326 = $ReallocAsyncCtx6 + 8 | 0; //@line 20400
      HEAP32[$326 >> 2] = $4; //@line 20401
      $327 = $ReallocAsyncCtx6 + 12 | 0; //@line 20402
      HEAP32[$327 >> 2] = $14; //@line 20403
      $328 = $ReallocAsyncCtx6 + 16 | 0; //@line 20404
      HEAP32[$328 >> 2] = $16; //@line 20405
      $329 = $ReallocAsyncCtx6 + 20 | 0; //@line 20406
      HEAP32[$329 >> 2] = $18; //@line 20407
      $330 = $ReallocAsyncCtx6 + 24 | 0; //@line 20408
      HEAP32[$330 >> 2] = $20; //@line 20409
      $331 = $ReallocAsyncCtx6 + 28 | 0; //@line 20410
      HEAP32[$331 >> 2] = $22; //@line 20411
      $332 = $ReallocAsyncCtx6 + 32 | 0; //@line 20412
      HEAP32[$332 >> 2] = $26; //@line 20413
      $333 = $ReallocAsyncCtx6 + 36 | 0; //@line 20414
      HEAP32[$333 >> 2] = $28; //@line 20415
      $334 = $ReallocAsyncCtx6 + 40 | 0; //@line 20416
      HEAP32[$334 >> 2] = $30; //@line 20417
      $335 = $ReallocAsyncCtx6 + 44 | 0; //@line 20418
      HEAP32[$335 >> 2] = $34; //@line 20419
      $336 = $ReallocAsyncCtx6 + 48 | 0; //@line 20420
      HEAP32[$336 >> 2] = $36; //@line 20421
      $337 = $ReallocAsyncCtx6 + 52 | 0; //@line 20422
      HEAP32[$337 >> 2] = $38; //@line 20423
      $338 = $ReallocAsyncCtx6 + 56 | 0; //@line 20424
      HEAP32[$338 >> 2] = $40; //@line 20425
      $339 = $ReallocAsyncCtx6 + 60 | 0; //@line 20426
      HEAP32[$339 >> 2] = $42; //@line 20427
      $340 = $ReallocAsyncCtx6 + 64 | 0; //@line 20428
      HEAP32[$340 >> 2] = $$reg2mem$0; //@line 20429
      sp = STACKTOP; //@line 20430
      return;
     }
     HEAP8[___async_retval >> 0] = $324; //@line 20434
     ___async_unwind = 0; //@line 20435
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 20436
     $325 = $ReallocAsyncCtx6 + 4 | 0; //@line 20437
     HEAP32[$325 >> 2] = $2; //@line 20438
     $326 = $ReallocAsyncCtx6 + 8 | 0; //@line 20439
     HEAP32[$326 >> 2] = $4; //@line 20440
     $327 = $ReallocAsyncCtx6 + 12 | 0; //@line 20441
     HEAP32[$327 >> 2] = $14; //@line 20442
     $328 = $ReallocAsyncCtx6 + 16 | 0; //@line 20443
     HEAP32[$328 >> 2] = $16; //@line 20444
     $329 = $ReallocAsyncCtx6 + 20 | 0; //@line 20445
     HEAP32[$329 >> 2] = $18; //@line 20446
     $330 = $ReallocAsyncCtx6 + 24 | 0; //@line 20447
     HEAP32[$330 >> 2] = $20; //@line 20448
     $331 = $ReallocAsyncCtx6 + 28 | 0; //@line 20449
     HEAP32[$331 >> 2] = $22; //@line 20450
     $332 = $ReallocAsyncCtx6 + 32 | 0; //@line 20451
     HEAP32[$332 >> 2] = $26; //@line 20452
     $333 = $ReallocAsyncCtx6 + 36 | 0; //@line 20453
     HEAP32[$333 >> 2] = $28; //@line 20454
     $334 = $ReallocAsyncCtx6 + 40 | 0; //@line 20455
     HEAP32[$334 >> 2] = $30; //@line 20456
     $335 = $ReallocAsyncCtx6 + 44 | 0; //@line 20457
     HEAP32[$335 >> 2] = $34; //@line 20458
     $336 = $ReallocAsyncCtx6 + 48 | 0; //@line 20459
     HEAP32[$336 >> 2] = $36; //@line 20460
     $337 = $ReallocAsyncCtx6 + 52 | 0; //@line 20461
     HEAP32[$337 >> 2] = $38; //@line 20462
     $338 = $ReallocAsyncCtx6 + 56 | 0; //@line 20463
     HEAP32[$338 >> 2] = $40; //@line 20464
     $339 = $ReallocAsyncCtx6 + 60 | 0; //@line 20465
     HEAP32[$339 >> 2] = $42; //@line 20466
     $340 = $ReallocAsyncCtx6 + 64 | 0; //@line 20467
     HEAP32[$340 >> 2] = $$reg2mem$0; //@line 20468
     sp = STACKTOP; //@line 20469
     return;
    } else if ((label | 0) == 92) {
     if (($47 - $16 | 0) >= ($18 | 0)) {
      $451 = ___async_retval; //@line 20477
      HEAP32[$451 >> 2] = $34; //@line 20478
      return;
     }
     if ((HEAP8[$47 >> 0] | 0) == -1) {
      $441 = $47 + 1 | 0; //@line 20484
      HEAP32[$4 >> 2] = $441; //@line 20485
      $442 = $441; //@line 20486
      $444 = $16 - $442 + $18 | 0; //@line 20488
      HEAP16[$38 + 24 >> 1] = $444; //@line 20491
      if ($444 & 65535 | 0) {
       HEAP32[$38 + 36 >> 2] = $442; //@line 20496
       $451 = ___async_retval; //@line 20497
       HEAP32[$451 >> 2] = $34; //@line 20498
       return;
      }
     }
     HEAP32[$38 + 4 >> 2] = 1; //@line 20503
     $451 = ___async_retval; //@line 20504
     HEAP32[$451 >> 2] = $34; //@line 20505
     return;
    }
   }
  }
 } while (0);
 HEAP32[$38 + 4 >> 2] = 1; //@line 20512
 $451 = ___async_retval; //@line 20513
 HEAP32[$451 >> 2] = $34; //@line 20514
 return;
}
function _sn_coap_parser__async_cb_17($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $109 = 0, $110 = 0, $115 = 0, $118 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $134 = 0, $137 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $187 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $214 = 0, $215 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $239 = 0, $242 = 0, $243 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $294 = 0, $297 = 0, $298 = 0, $30 = 0, $303 = 0, $306 = 0, $308 = 0, $31 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $331 = 0, $334 = 0, $335 = 0, $340 = 0, $343 = 0, $347 = 0, $35 = 0, $350 = 0, $351 = 0, $356 = 0, $359 = 0, $36 = 0, $363 = 0, $366 = 0, $367 = 0, $37 = 0, $372 = 0, $375 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $394 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $406 = 0, $407 = 0, $412 = 0, $415 = 0, $419 = 0, $420 = 0, $43 = 0, $430 = 0, $431 = 0, $433 = 0, $440 = 0, $441 = 0, $442 = 0, $57 = 0, $6 = 0, $62 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $127$looptemp = 0, $248$looptemp = 0, $303$looptemp = 0, $340$looptemp = 0, $356$looptemp = 0, $372$looptemp = 0, $391$looptemp = 0, $412$looptemp = 0, $115$looptemp = 0;
 sp = STACKTOP; //@line 17721
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17723
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17725
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17727
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 17729
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17731
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17735
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17737
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17739
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17741
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17743
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17745
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $AsyncRetVal; //@line 17746
 L2 : do {
  if ($AsyncRetVal | 0) {
   _memcpy($AsyncRetVal | 0, $4 | 0, HEAPU8[$2 >> 0] | 0) | 0; //@line 17752
   $29 = $4 + (HEAPU8[$2 >> 0] | 0) | 0; //@line 17755
   HEAP32[$6 >> 2] = $29; //@line 17756
   $30 = $29; //@line 17757
   $31 = $8 & 65535; //@line 17758
   $32 = $10; //@line 17759
   $33 = $32 + $31 | 0; //@line 17760
   $35 = $2 + 40 | 0; //@line 17762
   $36 = $2 + 32 | 0; //@line 17763
   $37 = $2 + 22 | 0; //@line 17764
   $$0208$i = 0; //@line 17765
   $$sink275$i = $33 - $30 | 0; //@line 17765
   $40 = $29; //@line 17765
   $441 = $30; //@line 17765
   L5 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 93; //@line 17770
     break;
    }
    $trunc277$i = HEAP8[$40 >> 0] | 0; //@line 17773
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 93; //@line 17776
     break;
    }
    $43 = $trunc277$i & 15; //@line 17780
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 17781
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$40 + 1 >> 0] | 0; //@line 17793
      $$sink214$i = 13; //@line 17793
      $$sink3$i = 1; //@line 17793
      label = 10; //@line 17794
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$40 + 1 >> 0] << 8) + 269 | 0; //@line 17806
      $$sink214$i = HEAPU8[$40 + 2 >> 0] | 0; //@line 17806
      $$sink3$i = 2; //@line 17806
      label = 10; //@line 17807
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 17811
      $442 = $441; //@line 17811
      $62 = $40; //@line 17811
     }
    }
    if ((label | 0) == 10) {
     label = 0; //@line 17815
     $57 = $40 + $$sink3$i | 0; //@line 17817
     HEAP32[$6 >> 2] = $57; //@line 17818
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 17820
     $442 = $57; //@line 17820
     $62 = $57; //@line 17820
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 17823
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$62 + 1 >> 0] | 0; //@line 17834
      $$sink216$i = 13; //@line 17834
      $$sink8$i = 1; //@line 17834
      label = 14; //@line 17835
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$62 + 1 >> 0] << 8) + 269 | 0; //@line 17847
      $$sink216$i = HEAPU8[$62 + 2 >> 0] | 0; //@line 17847
      $$sink8$i = 2; //@line 17847
      label = 14; //@line 17848
      break;
     }
    default:
     {
      $$1202$in$i = $43; //@line 17852
      $77 = $442; //@line 17852
      $89 = $62; //@line 17852
     }
    }
    if ((label | 0) == 14) {
     label = 0; //@line 17856
     $74 = $62 + $$sink8$i | 0; //@line 17858
     HEAP32[$6 >> 2] = $74; //@line 17859
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 17861
     $77 = $74; //@line 17861
     $89 = $74; //@line 17861
    }
    $$1202$i = $$1202$in$i & 65535; //@line 17863
    $78 = $33 - $77 & 65535; //@line 17865
    $trunc$i = $$0208$i & 65535; //@line 17866
    L21 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 55; //@line 17870
       break L5;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$35 >> 2] | 0)) {
        label = 17; //@line 17878
        break L5;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 30; //@line 17883
         break L5;
         break;
        }
       case 4:
        {
         label = 35; //@line 17888
         break L5;
         break;
        }
       case 3:
        {
         label = 38; //@line 17893
         break L5;
         break;
        }
       case 8:
        {
         label = 43; //@line 17898
         break L5;
         break;
        }
       case 20:
        {
         label = 52; //@line 17903
         break L5;
         break;
        }
       case 11:
        {
         label = 55; //@line 17908
         break L5;
         break;
        }
       case 15:
        {
         label = 63; //@line 17913
         break L5;
         break;
        }
       case 12:
        {
         label = 21; //@line 17918
         break L21;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $121 = $89 + 1 | 0; //@line 17927
         HEAP32[$6 >> 2] = $121; //@line 17928
         $122 = $$1202$in$i & 255; //@line 17929
         if (!($122 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 17932
         } else {
          $$045$i256$i = $122; //@line 17934
          $$06$i255$i = 0; //@line 17934
          $127 = $121; //@line 17934
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 17936
           $127$looptemp = $127;
           $127 = $127 + 1 | 0; //@line 17938
           HEAP32[$6 >> 2] = $127; //@line 17939
           $130 = $$06$i255$i << 8 | HEAPU8[$127$looptemp >> 0]; //@line 17942
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $130; //@line 17945
            break;
           } else {
            $$06$i255$i = $130; //@line 17948
           }
          }
         }
         HEAP32[(HEAP32[$35 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 17954
         break L21;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $239 = (HEAP32[$35 >> 2] | 0) + 28 | 0; //@line 17964
         if ((HEAP32[$239 >> 2] | 0) != -1) {
          break L2;
         }
         $242 = $89 + 1 | 0; //@line 17970
         HEAP32[$6 >> 2] = $242; //@line 17971
         $243 = $$1202$in$i & 255; //@line 17972
         if (!($243 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 17975
         } else {
          $$045$i270$i = $243; //@line 17977
          $$06$i269$i = 0; //@line 17977
          $248 = $242; //@line 17977
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 17979
           $248$looptemp = $248;
           $248 = $248 + 1 | 0; //@line 17981
           HEAP32[$6 >> 2] = $248; //@line 17982
           $251 = $$06$i269$i << 8 | HEAPU8[$248$looptemp >> 0]; //@line 17985
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $251; //@line 17988
            break;
           } else {
            $$06$i269$i = $251; //@line 17991
           }
          }
         }
         HEAP32[$239 >> 2] = $$0$lcssa$i272$i; //@line 17995
         break L21;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $294 = (HEAP32[$35 >> 2] | 0) + 32 | 0; //@line 18005
         if ((HEAP32[$294 >> 2] | 0) != -1) {
          break L2;
         }
         $297 = $89 + 1 | 0; //@line 18011
         HEAP32[$6 >> 2] = $297; //@line 18012
         $298 = $$1202$in$i & 255; //@line 18013
         if (!($298 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 18016
         } else {
          $$045$i263$i = $298; //@line 18018
          $$06$i262$i = 0; //@line 18018
          $303 = $297; //@line 18018
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 18020
           $303$looptemp = $303;
           $303 = $303 + 1 | 0; //@line 18022
           HEAP32[$6 >> 2] = $303; //@line 18023
           $306 = $$06$i262$i << 8 | HEAPU8[$303$looptemp >> 0]; //@line 18026
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $306; //@line 18029
            break;
           } else {
            $$06$i262$i = $306; //@line 18032
           }
          }
         }
         HEAP32[$294 >> 2] = $$0$lcssa$i265$i; //@line 18036
         break L21;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $331 = (HEAP32[$35 >> 2] | 0) + 40 | 0; //@line 18046
         if ((HEAP32[$331 >> 2] | 0) != -1) {
          break L2;
         }
         $334 = $89 + 1 | 0; //@line 18052
         HEAP32[$6 >> 2] = $334; //@line 18053
         $335 = $$1202$in$i & 255; //@line 18054
         if (!($335 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 18057
         } else {
          $$045$i249$i = $335; //@line 18059
          $$06$i248$i = 0; //@line 18059
          $340 = $334; //@line 18059
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 18061
           $340$looptemp = $340;
           $340 = $340 + 1 | 0; //@line 18063
           HEAP32[$6 >> 2] = $340; //@line 18064
           $343 = $$06$i248$i << 8 | HEAPU8[$340$looptemp >> 0]; //@line 18067
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $343; //@line 18070
            break;
           } else {
            $$06$i248$i = $343; //@line 18073
           }
          }
         }
         HEAP32[$331 >> 2] = $$0$lcssa$i251$i; //@line 18077
         break L21;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $347 = (HEAP32[$35 >> 2] | 0) + 36 | 0; //@line 18087
         if ((HEAP32[$347 >> 2] | 0) != -1) {
          break L2;
         }
         $350 = $89 + 1 | 0; //@line 18093
         HEAP32[$6 >> 2] = $350; //@line 18094
         $351 = $$1202$in$i & 255; //@line 18095
         if (!($351 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 18098
         } else {
          $$045$i242$i = $351; //@line 18100
          $$06$i241$i = 0; //@line 18100
          $356 = $350; //@line 18100
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 18102
           $356$looptemp = $356;
           $356 = $356 + 1 | 0; //@line 18104
           HEAP32[$6 >> 2] = $356; //@line 18105
           $359 = $$06$i241$i << 8 | HEAPU8[$356$looptemp >> 0]; //@line 18108
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $359; //@line 18111
            break;
           } else {
            $$06$i241$i = $359; //@line 18114
           }
          }
         }
         HEAP32[$347 >> 2] = $$0$lcssa$i244$i; //@line 18118
         break L21;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $363 = (HEAP32[$35 >> 2] | 0) + 12 | 0; //@line 18128
         if ((HEAP32[$363 >> 2] | 0) != -1) {
          break L2;
         }
         $366 = $89 + 1 | 0; //@line 18134
         HEAP32[$6 >> 2] = $366; //@line 18135
         $367 = $$1202$in$i & 255; //@line 18136
         if (!($367 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 18139
         } else {
          $$045$i235$i = $367; //@line 18141
          $$06$i234$i = 0; //@line 18141
          $372 = $366; //@line 18141
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 18143
           $372$looptemp = $372;
           $372 = $372 + 1 | 0; //@line 18145
           HEAP32[$6 >> 2] = $372; //@line 18146
           $375 = $$06$i234$i << 8 | HEAPU8[$372$looptemp >> 0]; //@line 18149
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $375; //@line 18152
            break;
           } else {
            $$06$i234$i = $375; //@line 18155
           }
          }
         }
         HEAP32[$363 >> 2] = $$0$lcssa$i237$i; //@line 18159
         break L21;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $379 = (HEAP32[$35 >> 2] | 0) + 1 | 0; //@line 18169
         $380 = HEAP8[$379 >> 0] | 0; //@line 18170
         if ($380 & 1) {
          break L2;
         }
         HEAP8[$379 >> 0] = $380 | 1; //@line 18177
         $385 = (HEAP32[$6 >> 2] | 0) + 1 | 0; //@line 18179
         HEAP32[$6 >> 2] = $385; //@line 18180
         $386 = $$1202$in$i & 255; //@line 18181
         if (!($386 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 18184
         } else {
          $$045$i228$i = $386; //@line 18186
          $$06$i227$i = 0; //@line 18186
          $391 = $385; //@line 18186
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 18188
           $391$looptemp = $391;
           $391 = $391 + 1 | 0; //@line 18190
           HEAP32[$6 >> 2] = $391; //@line 18191
           $394 = $$06$i227$i << 8 | HEAPU8[$391$looptemp >> 0]; //@line 18194
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $394; //@line 18197
            break;
           } else {
            $$06$i227$i = $394; //@line 18200
           }
          }
         }
         HEAP32[(HEAP32[$35 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 18206
         break L21;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $400 = (HEAP32[$35 >> 2] | 0) + 1 | 0; //@line 18216
         $401 = HEAP8[$400 >> 0] | 0; //@line 18217
         if ($401 & 2) {
          break L2;
         }
         HEAP8[$400 >> 0] = $401 | 2; //@line 18224
         $406 = (HEAP32[$6 >> 2] | 0) + 1 | 0; //@line 18226
         HEAP32[$6 >> 2] = $406; //@line 18227
         $407 = $$1202$in$i & 255; //@line 18228
         if (!($407 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 18231
         } else {
          $$045$i221$i = $407; //@line 18233
          $$06$i220$i = 0; //@line 18233
          $412 = $406; //@line 18233
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 18235
           $412$looptemp = $412;
           $412 = $412 + 1 | 0; //@line 18237
           HEAP32[$6 >> 2] = $412; //@line 18238
           $415 = $$06$i220$i << 8 | HEAPU8[$412$looptemp >> 0]; //@line 18241
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $415; //@line 18244
            break;
           } else {
            $$06$i220$i = $415; //@line 18247
           }
          }
         }
         HEAP32[(HEAP32[$35 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 18253
         break L21;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       label = 21; //@line 18264
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if ((label | 0) == 21) {
     label = 0; //@line 18273
     if (($$1202$i & 65535) > 2) {
      break L2;
     }
     if ((HEAP32[$22 >> 2] | 0) != -1) {
      break L2;
     }
     $109 = $89 + 1 | 0; //@line 18283
     HEAP32[$6 >> 2] = $109; //@line 18284
     $110 = $$1202$in$i & 255; //@line 18285
     if (!($110 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 18288
     } else {
      $$045$i$i = $110; //@line 18290
      $$06$i$i = 0; //@line 18290
      $115 = $109; //@line 18290
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 18292
       $115$looptemp = $115;
       $115 = $115 + 1 | 0; //@line 18294
       HEAP32[$6 >> 2] = $115; //@line 18295
       $118 = $$06$i$i << 8 | HEAPU8[$115$looptemp >> 0]; //@line 18298
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $118; //@line 18301
        break;
       } else {
        $$06$i$i = $118; //@line 18304
       }
      }
     }
     HEAP32[$22 >> 2] = $$0$lcssa$i$i; //@line 18308
    }
    $419 = HEAP32[$6 >> 2] | 0; //@line 18310
    $420 = $419 - $32 | 0; //@line 18311
    if (($420 | 0) > ($31 | 0)) {
     break L2;
    } else {
     $$sink275$i = $31 - $420 | 0; //@line 18318
     $40 = $419; //@line 18318
     $441 = $419; //@line 18318
    }
   }
   if ((label | 0) == 17) {
    $81 = HEAP32[$16 >> 2] | 0; //@line 18322
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(88) | 0; //@line 18323
    $82 = FUNCTION_TABLE_ii[$81 & 15](68) | 0; //@line 18324
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 18327
     $83 = $ReallocAsyncCtx3 + 4 | 0; //@line 18328
     HEAP32[$83 >> 2] = $35; //@line 18329
     $84 = $ReallocAsyncCtx3 + 8 | 0; //@line 18330
     HEAP32[$84 >> 2] = $6; //@line 18331
     $85 = $ReallocAsyncCtx3 + 12 | 0; //@line 18332
     HEAP32[$85 >> 2] = $$1202$in$i; //@line 18333
     $86 = $ReallocAsyncCtx3 + 16 | 0; //@line 18334
     HEAP32[$86 >> 2] = $$0208$i; //@line 18335
     $87 = $ReallocAsyncCtx3 + 20 | 0; //@line 18336
     HEAP16[$87 >> 1] = $$1202$i; //@line 18337
     $88 = $ReallocAsyncCtx3 + 24 | 0; //@line 18338
     HEAP32[$88 >> 2] = $89; //@line 18339
     $90 = $ReallocAsyncCtx3 + 28 | 0; //@line 18340
     HEAP32[$90 >> 2] = $6; //@line 18341
     $91 = $ReallocAsyncCtx3 + 32 | 0; //@line 18342
     HEAP32[$91 >> 2] = $32; //@line 18343
     $92 = $ReallocAsyncCtx3 + 36 | 0; //@line 18344
     HEAP32[$92 >> 2] = $31; //@line 18345
     $93 = $ReallocAsyncCtx3 + 40 | 0; //@line 18346
     HEAP32[$93 >> 2] = $35; //@line 18347
     $94 = $ReallocAsyncCtx3 + 44 | 0; //@line 18348
     HEAP32[$94 >> 2] = $14; //@line 18349
     $95 = $ReallocAsyncCtx3 + 48 | 0; //@line 18350
     HEAP16[$95 >> 1] = $78; //@line 18351
     $96 = $ReallocAsyncCtx3 + 52 | 0; //@line 18352
     HEAP32[$96 >> 2] = $16; //@line 18353
     $97 = $ReallocAsyncCtx3 + 56 | 0; //@line 18354
     HEAP32[$97 >> 2] = $36; //@line 18355
     $98 = $ReallocAsyncCtx3 + 60 | 0; //@line 18356
     HEAP32[$98 >> 2] = $37; //@line 18357
     $99 = $ReallocAsyncCtx3 + 64 | 0; //@line 18358
     HEAP16[$99 >> 1] = $trunc$i; //@line 18359
     $100 = $ReallocAsyncCtx3 + 68 | 0; //@line 18360
     HEAP32[$100 >> 2] = $18; //@line 18361
     $101 = $ReallocAsyncCtx3 + 72 | 0; //@line 18362
     HEAP32[$101 >> 2] = $20; //@line 18363
     $102 = $ReallocAsyncCtx3 + 76 | 0; //@line 18364
     HEAP32[$102 >> 2] = $2; //@line 18365
     $103 = $ReallocAsyncCtx3 + 80 | 0; //@line 18366
     HEAP32[$103 >> 2] = $22; //@line 18367
     $104 = $ReallocAsyncCtx3 + 84 | 0; //@line 18368
     HEAP32[$104 >> 2] = $33; //@line 18369
     sp = STACKTOP; //@line 18370
     return;
    }
    HEAP32[___async_retval >> 2] = $82; //@line 18374
    ___async_unwind = 0; //@line 18375
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 18376
    $83 = $ReallocAsyncCtx3 + 4 | 0; //@line 18377
    HEAP32[$83 >> 2] = $35; //@line 18378
    $84 = $ReallocAsyncCtx3 + 8 | 0; //@line 18379
    HEAP32[$84 >> 2] = $6; //@line 18380
    $85 = $ReallocAsyncCtx3 + 12 | 0; //@line 18381
    HEAP32[$85 >> 2] = $$1202$in$i; //@line 18382
    $86 = $ReallocAsyncCtx3 + 16 | 0; //@line 18383
    HEAP32[$86 >> 2] = $$0208$i; //@line 18384
    $87 = $ReallocAsyncCtx3 + 20 | 0; //@line 18385
    HEAP16[$87 >> 1] = $$1202$i; //@line 18386
    $88 = $ReallocAsyncCtx3 + 24 | 0; //@line 18387
    HEAP32[$88 >> 2] = $89; //@line 18388
    $90 = $ReallocAsyncCtx3 + 28 | 0; //@line 18389
    HEAP32[$90 >> 2] = $6; //@line 18390
    $91 = $ReallocAsyncCtx3 + 32 | 0; //@line 18391
    HEAP32[$91 >> 2] = $32; //@line 18392
    $92 = $ReallocAsyncCtx3 + 36 | 0; //@line 18393
    HEAP32[$92 >> 2] = $31; //@line 18394
    $93 = $ReallocAsyncCtx3 + 40 | 0; //@line 18395
    HEAP32[$93 >> 2] = $35; //@line 18396
    $94 = $ReallocAsyncCtx3 + 44 | 0; //@line 18397
    HEAP32[$94 >> 2] = $14; //@line 18398
    $95 = $ReallocAsyncCtx3 + 48 | 0; //@line 18399
    HEAP16[$95 >> 1] = $78; //@line 18400
    $96 = $ReallocAsyncCtx3 + 52 | 0; //@line 18401
    HEAP32[$96 >> 2] = $16; //@line 18402
    $97 = $ReallocAsyncCtx3 + 56 | 0; //@line 18403
    HEAP32[$97 >> 2] = $36; //@line 18404
    $98 = $ReallocAsyncCtx3 + 60 | 0; //@line 18405
    HEAP32[$98 >> 2] = $37; //@line 18406
    $99 = $ReallocAsyncCtx3 + 64 | 0; //@line 18407
    HEAP16[$99 >> 1] = $trunc$i; //@line 18408
    $100 = $ReallocAsyncCtx3 + 68 | 0; //@line 18409
    HEAP32[$100 >> 2] = $18; //@line 18410
    $101 = $ReallocAsyncCtx3 + 72 | 0; //@line 18411
    HEAP32[$101 >> 2] = $20; //@line 18412
    $102 = $ReallocAsyncCtx3 + 76 | 0; //@line 18413
    HEAP32[$102 >> 2] = $2; //@line 18414
    $103 = $ReallocAsyncCtx3 + 80 | 0; //@line 18415
    HEAP32[$103 >> 2] = $22; //@line 18416
    $104 = $ReallocAsyncCtx3 + 84 | 0; //@line 18417
    HEAP32[$104 >> 2] = $33; //@line 18418
    sp = STACKTOP; //@line 18419
    return;
   } else if ((label | 0) == 30) {
    $134 = $$1202$in$i & 65535; //@line 18423
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $137 = HEAP32[$35 >> 2] | 0; //@line 18429
    if (HEAP32[$137 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$137 + 2 >> 1] = $$1202$i; //@line 18437
    $142 = $89 + 1 | 0; //@line 18438
    HEAP32[$6 >> 2] = $142; //@line 18439
    $143 = HEAP32[$16 >> 2] | 0; //@line 18440
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 18441
    $144 = FUNCTION_TABLE_ii[$143 & 15]($$1202$i) | 0; //@line 18442
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 18445
     $145 = $ReallocAsyncCtx4 + 4 | 0; //@line 18446
     HEAP32[$145 >> 2] = $35; //@line 18447
     $146 = $ReallocAsyncCtx4 + 8 | 0; //@line 18448
     HEAP32[$146 >> 2] = $6; //@line 18449
     $147 = $ReallocAsyncCtx4 + 12 | 0; //@line 18450
     HEAP32[$147 >> 2] = $6; //@line 18451
     $148 = $ReallocAsyncCtx4 + 16 | 0; //@line 18452
     HEAP32[$148 >> 2] = $32; //@line 18453
     $149 = $ReallocAsyncCtx4 + 20 | 0; //@line 18454
     HEAP32[$149 >> 2] = $31; //@line 18455
     $150 = $ReallocAsyncCtx4 + 24 | 0; //@line 18456
     HEAP32[$150 >> 2] = $35; //@line 18457
     $151 = $ReallocAsyncCtx4 + 28 | 0; //@line 18458
     HEAP32[$151 >> 2] = $14; //@line 18459
     $152 = $ReallocAsyncCtx4 + 32 | 0; //@line 18460
     HEAP32[$152 >> 2] = $16; //@line 18461
     $153 = $ReallocAsyncCtx4 + 36 | 0; //@line 18462
     HEAP32[$153 >> 2] = $36; //@line 18463
     $154 = $ReallocAsyncCtx4 + 40 | 0; //@line 18464
     HEAP32[$154 >> 2] = $37; //@line 18465
     $155 = $ReallocAsyncCtx4 + 44 | 0; //@line 18466
     HEAP32[$155 >> 2] = $18; //@line 18467
     $156 = $ReallocAsyncCtx4 + 48 | 0; //@line 18468
     HEAP32[$156 >> 2] = $20; //@line 18469
     $157 = $ReallocAsyncCtx4 + 52 | 0; //@line 18470
     HEAP32[$157 >> 2] = $2; //@line 18471
     $158 = $ReallocAsyncCtx4 + 56 | 0; //@line 18472
     HEAP32[$158 >> 2] = $22; //@line 18473
     $159 = $ReallocAsyncCtx4 + 60 | 0; //@line 18474
     HEAP32[$159 >> 2] = $33; //@line 18475
     $160 = $ReallocAsyncCtx4 + 64 | 0; //@line 18476
     HEAP32[$160 >> 2] = $$0208$i; //@line 18477
     $161 = $ReallocAsyncCtx4 + 68 | 0; //@line 18478
     HEAP32[$161 >> 2] = $142; //@line 18479
     $162 = $ReallocAsyncCtx4 + 72 | 0; //@line 18480
     HEAP32[$162 >> 2] = $134; //@line 18481
     sp = STACKTOP; //@line 18482
     return;
    }
    HEAP32[___async_retval >> 2] = $144; //@line 18486
    ___async_unwind = 0; //@line 18487
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 18488
    $145 = $ReallocAsyncCtx4 + 4 | 0; //@line 18489
    HEAP32[$145 >> 2] = $35; //@line 18490
    $146 = $ReallocAsyncCtx4 + 8 | 0; //@line 18491
    HEAP32[$146 >> 2] = $6; //@line 18492
    $147 = $ReallocAsyncCtx4 + 12 | 0; //@line 18493
    HEAP32[$147 >> 2] = $6; //@line 18494
    $148 = $ReallocAsyncCtx4 + 16 | 0; //@line 18495
    HEAP32[$148 >> 2] = $32; //@line 18496
    $149 = $ReallocAsyncCtx4 + 20 | 0; //@line 18497
    HEAP32[$149 >> 2] = $31; //@line 18498
    $150 = $ReallocAsyncCtx4 + 24 | 0; //@line 18499
    HEAP32[$150 >> 2] = $35; //@line 18500
    $151 = $ReallocAsyncCtx4 + 28 | 0; //@line 18501
    HEAP32[$151 >> 2] = $14; //@line 18502
    $152 = $ReallocAsyncCtx4 + 32 | 0; //@line 18503
    HEAP32[$152 >> 2] = $16; //@line 18504
    $153 = $ReallocAsyncCtx4 + 36 | 0; //@line 18505
    HEAP32[$153 >> 2] = $36; //@line 18506
    $154 = $ReallocAsyncCtx4 + 40 | 0; //@line 18507
    HEAP32[$154 >> 2] = $37; //@line 18508
    $155 = $ReallocAsyncCtx4 + 44 | 0; //@line 18509
    HEAP32[$155 >> 2] = $18; //@line 18510
    $156 = $ReallocAsyncCtx4 + 48 | 0; //@line 18511
    HEAP32[$156 >> 2] = $20; //@line 18512
    $157 = $ReallocAsyncCtx4 + 52 | 0; //@line 18513
    HEAP32[$157 >> 2] = $2; //@line 18514
    $158 = $ReallocAsyncCtx4 + 56 | 0; //@line 18515
    HEAP32[$158 >> 2] = $22; //@line 18516
    $159 = $ReallocAsyncCtx4 + 60 | 0; //@line 18517
    HEAP32[$159 >> 2] = $33; //@line 18518
    $160 = $ReallocAsyncCtx4 + 64 | 0; //@line 18519
    HEAP32[$160 >> 2] = $$0208$i; //@line 18520
    $161 = $ReallocAsyncCtx4 + 68 | 0; //@line 18521
    HEAP32[$161 >> 2] = $142; //@line 18522
    $162 = $ReallocAsyncCtx4 + 72 | 0; //@line 18523
    HEAP32[$162 >> 2] = $134; //@line 18524
    sp = STACKTOP; //@line 18525
    return;
   } else if ((label | 0) == 35) {
    $164 = HEAP32[$35 >> 2] | 0; //@line 18529
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 18531
    $166 = _sn_coap_parser_options_parse_multiple_options($14, $6, $78, $164 + 48 | 0, $164, 4, $$1202$i) | 0; //@line 18532
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 18535
     $167 = $ReallocAsyncCtx10 + 4 | 0; //@line 18536
     HEAP32[$167 >> 2] = $35; //@line 18537
     $168 = $ReallocAsyncCtx10 + 8 | 0; //@line 18538
     HEAP32[$168 >> 2] = $6; //@line 18539
     $169 = $ReallocAsyncCtx10 + 12 | 0; //@line 18540
     HEAP32[$169 >> 2] = $6; //@line 18541
     $170 = $ReallocAsyncCtx10 + 16 | 0; //@line 18542
     HEAP32[$170 >> 2] = $32; //@line 18543
     $171 = $ReallocAsyncCtx10 + 20 | 0; //@line 18544
     HEAP32[$171 >> 2] = $31; //@line 18545
     $172 = $ReallocAsyncCtx10 + 24 | 0; //@line 18546
     HEAP32[$172 >> 2] = $35; //@line 18547
     $173 = $ReallocAsyncCtx10 + 28 | 0; //@line 18548
     HEAP32[$173 >> 2] = $14; //@line 18549
     $174 = $ReallocAsyncCtx10 + 32 | 0; //@line 18550
     HEAP32[$174 >> 2] = $16; //@line 18551
     $175 = $ReallocAsyncCtx10 + 36 | 0; //@line 18552
     HEAP32[$175 >> 2] = $36; //@line 18553
     $176 = $ReallocAsyncCtx10 + 40 | 0; //@line 18554
     HEAP32[$176 >> 2] = $37; //@line 18555
     $177 = $ReallocAsyncCtx10 + 44 | 0; //@line 18556
     HEAP32[$177 >> 2] = $18; //@line 18557
     $178 = $ReallocAsyncCtx10 + 48 | 0; //@line 18558
     HEAP32[$178 >> 2] = $20; //@line 18559
     $179 = $ReallocAsyncCtx10 + 52 | 0; //@line 18560
     HEAP32[$179 >> 2] = $2; //@line 18561
     $180 = $ReallocAsyncCtx10 + 56 | 0; //@line 18562
     HEAP32[$180 >> 2] = $22; //@line 18563
     $181 = $ReallocAsyncCtx10 + 60 | 0; //@line 18564
     HEAP32[$181 >> 2] = $33; //@line 18565
     $182 = $ReallocAsyncCtx10 + 64 | 0; //@line 18566
     HEAP32[$182 >> 2] = $$0208$i; //@line 18567
     sp = STACKTOP; //@line 18568
     return;
    }
    HEAP8[___async_retval >> 0] = $166; //@line 18572
    ___async_unwind = 0; //@line 18573
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 18574
    $167 = $ReallocAsyncCtx10 + 4 | 0; //@line 18575
    HEAP32[$167 >> 2] = $35; //@line 18576
    $168 = $ReallocAsyncCtx10 + 8 | 0; //@line 18577
    HEAP32[$168 >> 2] = $6; //@line 18578
    $169 = $ReallocAsyncCtx10 + 12 | 0; //@line 18579
    HEAP32[$169 >> 2] = $6; //@line 18580
    $170 = $ReallocAsyncCtx10 + 16 | 0; //@line 18581
    HEAP32[$170 >> 2] = $32; //@line 18582
    $171 = $ReallocAsyncCtx10 + 20 | 0; //@line 18583
    HEAP32[$171 >> 2] = $31; //@line 18584
    $172 = $ReallocAsyncCtx10 + 24 | 0; //@line 18585
    HEAP32[$172 >> 2] = $35; //@line 18586
    $173 = $ReallocAsyncCtx10 + 28 | 0; //@line 18587
    HEAP32[$173 >> 2] = $14; //@line 18588
    $174 = $ReallocAsyncCtx10 + 32 | 0; //@line 18589
    HEAP32[$174 >> 2] = $16; //@line 18590
    $175 = $ReallocAsyncCtx10 + 36 | 0; //@line 18591
    HEAP32[$175 >> 2] = $36; //@line 18592
    $176 = $ReallocAsyncCtx10 + 40 | 0; //@line 18593
    HEAP32[$176 >> 2] = $37; //@line 18594
    $177 = $ReallocAsyncCtx10 + 44 | 0; //@line 18595
    HEAP32[$177 >> 2] = $18; //@line 18596
    $178 = $ReallocAsyncCtx10 + 48 | 0; //@line 18597
    HEAP32[$178 >> 2] = $20; //@line 18598
    $179 = $ReallocAsyncCtx10 + 52 | 0; //@line 18599
    HEAP32[$179 >> 2] = $2; //@line 18600
    $180 = $ReallocAsyncCtx10 + 56 | 0; //@line 18601
    HEAP32[$180 >> 2] = $22; //@line 18602
    $181 = $ReallocAsyncCtx10 + 60 | 0; //@line 18603
    HEAP32[$181 >> 2] = $33; //@line 18604
    $182 = $ReallocAsyncCtx10 + 64 | 0; //@line 18605
    HEAP32[$182 >> 2] = $$0208$i; //@line 18606
    sp = STACKTOP; //@line 18607
    return;
   } else if ((label | 0) == 38) {
    $184 = $$1202$in$i & 65535; //@line 18611
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $187 = HEAP32[$35 >> 2] | 0; //@line 18617
    if (HEAP32[$187 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$187 + 4 >> 1] = $$1202$i; //@line 18625
    $192 = $89 + 1 | 0; //@line 18626
    HEAP32[$6 >> 2] = $192; //@line 18627
    $193 = HEAP32[$16 >> 2] | 0; //@line 18628
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 18629
    $194 = FUNCTION_TABLE_ii[$193 & 15]($$1202$i) | 0; //@line 18630
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 18633
     $195 = $ReallocAsyncCtx5 + 4 | 0; //@line 18634
     HEAP32[$195 >> 2] = $35; //@line 18635
     $196 = $ReallocAsyncCtx5 + 8 | 0; //@line 18636
     HEAP32[$196 >> 2] = $6; //@line 18637
     $197 = $ReallocAsyncCtx5 + 12 | 0; //@line 18638
     HEAP32[$197 >> 2] = $6; //@line 18639
     $198 = $ReallocAsyncCtx5 + 16 | 0; //@line 18640
     HEAP32[$198 >> 2] = $32; //@line 18641
     $199 = $ReallocAsyncCtx5 + 20 | 0; //@line 18642
     HEAP32[$199 >> 2] = $31; //@line 18643
     $200 = $ReallocAsyncCtx5 + 24 | 0; //@line 18644
     HEAP32[$200 >> 2] = $35; //@line 18645
     $201 = $ReallocAsyncCtx5 + 28 | 0; //@line 18646
     HEAP32[$201 >> 2] = $14; //@line 18647
     $202 = $ReallocAsyncCtx5 + 32 | 0; //@line 18648
     HEAP32[$202 >> 2] = $16; //@line 18649
     $203 = $ReallocAsyncCtx5 + 36 | 0; //@line 18650
     HEAP32[$203 >> 2] = $36; //@line 18651
     $204 = $ReallocAsyncCtx5 + 40 | 0; //@line 18652
     HEAP32[$204 >> 2] = $37; //@line 18653
     $205 = $ReallocAsyncCtx5 + 44 | 0; //@line 18654
     HEAP32[$205 >> 2] = $18; //@line 18655
     $206 = $ReallocAsyncCtx5 + 48 | 0; //@line 18656
     HEAP32[$206 >> 2] = $20; //@line 18657
     $207 = $ReallocAsyncCtx5 + 52 | 0; //@line 18658
     HEAP32[$207 >> 2] = $2; //@line 18659
     $208 = $ReallocAsyncCtx5 + 56 | 0; //@line 18660
     HEAP32[$208 >> 2] = $22; //@line 18661
     $209 = $ReallocAsyncCtx5 + 60 | 0; //@line 18662
     HEAP32[$209 >> 2] = $33; //@line 18663
     $210 = $ReallocAsyncCtx5 + 64 | 0; //@line 18664
     HEAP32[$210 >> 2] = $$0208$i; //@line 18665
     $211 = $ReallocAsyncCtx5 + 68 | 0; //@line 18666
     HEAP32[$211 >> 2] = $192; //@line 18667
     $212 = $ReallocAsyncCtx5 + 72 | 0; //@line 18668
     HEAP32[$212 >> 2] = $184; //@line 18669
     sp = STACKTOP; //@line 18670
     return;
    }
    HEAP32[___async_retval >> 2] = $194; //@line 18674
    ___async_unwind = 0; //@line 18675
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 18676
    $195 = $ReallocAsyncCtx5 + 4 | 0; //@line 18677
    HEAP32[$195 >> 2] = $35; //@line 18678
    $196 = $ReallocAsyncCtx5 + 8 | 0; //@line 18679
    HEAP32[$196 >> 2] = $6; //@line 18680
    $197 = $ReallocAsyncCtx5 + 12 | 0; //@line 18681
    HEAP32[$197 >> 2] = $6; //@line 18682
    $198 = $ReallocAsyncCtx5 + 16 | 0; //@line 18683
    HEAP32[$198 >> 2] = $32; //@line 18684
    $199 = $ReallocAsyncCtx5 + 20 | 0; //@line 18685
    HEAP32[$199 >> 2] = $31; //@line 18686
    $200 = $ReallocAsyncCtx5 + 24 | 0; //@line 18687
    HEAP32[$200 >> 2] = $35; //@line 18688
    $201 = $ReallocAsyncCtx5 + 28 | 0; //@line 18689
    HEAP32[$201 >> 2] = $14; //@line 18690
    $202 = $ReallocAsyncCtx5 + 32 | 0; //@line 18691
    HEAP32[$202 >> 2] = $16; //@line 18692
    $203 = $ReallocAsyncCtx5 + 36 | 0; //@line 18693
    HEAP32[$203 >> 2] = $36; //@line 18694
    $204 = $ReallocAsyncCtx5 + 40 | 0; //@line 18695
    HEAP32[$204 >> 2] = $37; //@line 18696
    $205 = $ReallocAsyncCtx5 + 44 | 0; //@line 18697
    HEAP32[$205 >> 2] = $18; //@line 18698
    $206 = $ReallocAsyncCtx5 + 48 | 0; //@line 18699
    HEAP32[$206 >> 2] = $20; //@line 18700
    $207 = $ReallocAsyncCtx5 + 52 | 0; //@line 18701
    HEAP32[$207 >> 2] = $2; //@line 18702
    $208 = $ReallocAsyncCtx5 + 56 | 0; //@line 18703
    HEAP32[$208 >> 2] = $22; //@line 18704
    $209 = $ReallocAsyncCtx5 + 60 | 0; //@line 18705
    HEAP32[$209 >> 2] = $33; //@line 18706
    $210 = $ReallocAsyncCtx5 + 64 | 0; //@line 18707
    HEAP32[$210 >> 2] = $$0208$i; //@line 18708
    $211 = $ReallocAsyncCtx5 + 68 | 0; //@line 18709
    HEAP32[$211 >> 2] = $192; //@line 18710
    $212 = $ReallocAsyncCtx5 + 72 | 0; //@line 18711
    HEAP32[$212 >> 2] = $184; //@line 18712
    sp = STACKTOP; //@line 18713
    return;
   } else if ((label | 0) == 43) {
    $214 = HEAP32[$35 >> 2] | 0; //@line 18717
    $215 = $214 + 56 | 0; //@line 18718
    if (HEAP32[$215 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 18725
    $219 = _sn_coap_parser_options_parse_multiple_options($14, $6, $78, $215, $214 + 6 | 0, 8, $$1202$i) | 0; //@line 18726
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 18729
     $220 = $ReallocAsyncCtx9 + 4 | 0; //@line 18730
     HEAP32[$220 >> 2] = $35; //@line 18731
     $221 = $ReallocAsyncCtx9 + 8 | 0; //@line 18732
     HEAP32[$221 >> 2] = $6; //@line 18733
     $222 = $ReallocAsyncCtx9 + 12 | 0; //@line 18734
     HEAP32[$222 >> 2] = $6; //@line 18735
     $223 = $ReallocAsyncCtx9 + 16 | 0; //@line 18736
     HEAP32[$223 >> 2] = $32; //@line 18737
     $224 = $ReallocAsyncCtx9 + 20 | 0; //@line 18738
     HEAP32[$224 >> 2] = $31; //@line 18739
     $225 = $ReallocAsyncCtx9 + 24 | 0; //@line 18740
     HEAP32[$225 >> 2] = $35; //@line 18741
     $226 = $ReallocAsyncCtx9 + 28 | 0; //@line 18742
     HEAP32[$226 >> 2] = $14; //@line 18743
     $227 = $ReallocAsyncCtx9 + 32 | 0; //@line 18744
     HEAP32[$227 >> 2] = $16; //@line 18745
     $228 = $ReallocAsyncCtx9 + 36 | 0; //@line 18746
     HEAP32[$228 >> 2] = $36; //@line 18747
     $229 = $ReallocAsyncCtx9 + 40 | 0; //@line 18748
     HEAP32[$229 >> 2] = $37; //@line 18749
     $230 = $ReallocAsyncCtx9 + 44 | 0; //@line 18750
     HEAP32[$230 >> 2] = $18; //@line 18751
     $231 = $ReallocAsyncCtx9 + 48 | 0; //@line 18752
     HEAP32[$231 >> 2] = $20; //@line 18753
     $232 = $ReallocAsyncCtx9 + 52 | 0; //@line 18754
     HEAP32[$232 >> 2] = $2; //@line 18755
     $233 = $ReallocAsyncCtx9 + 56 | 0; //@line 18756
     HEAP32[$233 >> 2] = $22; //@line 18757
     $234 = $ReallocAsyncCtx9 + 60 | 0; //@line 18758
     HEAP32[$234 >> 2] = $33; //@line 18759
     $235 = $ReallocAsyncCtx9 + 64 | 0; //@line 18760
     HEAP32[$235 >> 2] = $$0208$i; //@line 18761
     sp = STACKTOP; //@line 18762
     return;
    }
    HEAP8[___async_retval >> 0] = $219; //@line 18766
    ___async_unwind = 0; //@line 18767
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 18768
    $220 = $ReallocAsyncCtx9 + 4 | 0; //@line 18769
    HEAP32[$220 >> 2] = $35; //@line 18770
    $221 = $ReallocAsyncCtx9 + 8 | 0; //@line 18771
    HEAP32[$221 >> 2] = $6; //@line 18772
    $222 = $ReallocAsyncCtx9 + 12 | 0; //@line 18773
    HEAP32[$222 >> 2] = $6; //@line 18774
    $223 = $ReallocAsyncCtx9 + 16 | 0; //@line 18775
    HEAP32[$223 >> 2] = $32; //@line 18776
    $224 = $ReallocAsyncCtx9 + 20 | 0; //@line 18777
    HEAP32[$224 >> 2] = $31; //@line 18778
    $225 = $ReallocAsyncCtx9 + 24 | 0; //@line 18779
    HEAP32[$225 >> 2] = $35; //@line 18780
    $226 = $ReallocAsyncCtx9 + 28 | 0; //@line 18781
    HEAP32[$226 >> 2] = $14; //@line 18782
    $227 = $ReallocAsyncCtx9 + 32 | 0; //@line 18783
    HEAP32[$227 >> 2] = $16; //@line 18784
    $228 = $ReallocAsyncCtx9 + 36 | 0; //@line 18785
    HEAP32[$228 >> 2] = $36; //@line 18786
    $229 = $ReallocAsyncCtx9 + 40 | 0; //@line 18787
    HEAP32[$229 >> 2] = $37; //@line 18788
    $230 = $ReallocAsyncCtx9 + 44 | 0; //@line 18789
    HEAP32[$230 >> 2] = $18; //@line 18790
    $231 = $ReallocAsyncCtx9 + 48 | 0; //@line 18791
    HEAP32[$231 >> 2] = $20; //@line 18792
    $232 = $ReallocAsyncCtx9 + 52 | 0; //@line 18793
    HEAP32[$232 >> 2] = $2; //@line 18794
    $233 = $ReallocAsyncCtx9 + 56 | 0; //@line 18795
    HEAP32[$233 >> 2] = $22; //@line 18796
    $234 = $ReallocAsyncCtx9 + 60 | 0; //@line 18797
    HEAP32[$234 >> 2] = $33; //@line 18798
    $235 = $ReallocAsyncCtx9 + 64 | 0; //@line 18799
    HEAP32[$235 >> 2] = $$0208$i; //@line 18800
    sp = STACKTOP; //@line 18801
    return;
   } else if ((label | 0) == 52) {
    $253 = HEAP32[$35 >> 2] | 0; //@line 18805
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 18808
    $256 = _sn_coap_parser_options_parse_multiple_options($14, $6, $78, $253 + 60 | 0, $253 + 8 | 0, 20, $$1202$i) | 0; //@line 18809
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 18812
     $257 = $ReallocAsyncCtx8 + 4 | 0; //@line 18813
     HEAP32[$257 >> 2] = $35; //@line 18814
     $258 = $ReallocAsyncCtx8 + 8 | 0; //@line 18815
     HEAP32[$258 >> 2] = $6; //@line 18816
     $259 = $ReallocAsyncCtx8 + 12 | 0; //@line 18817
     HEAP32[$259 >> 2] = $6; //@line 18818
     $260 = $ReallocAsyncCtx8 + 16 | 0; //@line 18819
     HEAP32[$260 >> 2] = $32; //@line 18820
     $261 = $ReallocAsyncCtx8 + 20 | 0; //@line 18821
     HEAP32[$261 >> 2] = $31; //@line 18822
     $262 = $ReallocAsyncCtx8 + 24 | 0; //@line 18823
     HEAP32[$262 >> 2] = $35; //@line 18824
     $263 = $ReallocAsyncCtx8 + 28 | 0; //@line 18825
     HEAP32[$263 >> 2] = $14; //@line 18826
     $264 = $ReallocAsyncCtx8 + 32 | 0; //@line 18827
     HEAP32[$264 >> 2] = $16; //@line 18828
     $265 = $ReallocAsyncCtx8 + 36 | 0; //@line 18829
     HEAP32[$265 >> 2] = $36; //@line 18830
     $266 = $ReallocAsyncCtx8 + 40 | 0; //@line 18831
     HEAP32[$266 >> 2] = $37; //@line 18832
     $267 = $ReallocAsyncCtx8 + 44 | 0; //@line 18833
     HEAP32[$267 >> 2] = $18; //@line 18834
     $268 = $ReallocAsyncCtx8 + 48 | 0; //@line 18835
     HEAP32[$268 >> 2] = $20; //@line 18836
     $269 = $ReallocAsyncCtx8 + 52 | 0; //@line 18837
     HEAP32[$269 >> 2] = $2; //@line 18838
     $270 = $ReallocAsyncCtx8 + 56 | 0; //@line 18839
     HEAP32[$270 >> 2] = $22; //@line 18840
     $271 = $ReallocAsyncCtx8 + 60 | 0; //@line 18841
     HEAP32[$271 >> 2] = $33; //@line 18842
     $272 = $ReallocAsyncCtx8 + 64 | 0; //@line 18843
     HEAP32[$272 >> 2] = $$0208$i; //@line 18844
     sp = STACKTOP; //@line 18845
     return;
    }
    HEAP8[___async_retval >> 0] = $256; //@line 18849
    ___async_unwind = 0; //@line 18850
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 18851
    $257 = $ReallocAsyncCtx8 + 4 | 0; //@line 18852
    HEAP32[$257 >> 2] = $35; //@line 18853
    $258 = $ReallocAsyncCtx8 + 8 | 0; //@line 18854
    HEAP32[$258 >> 2] = $6; //@line 18855
    $259 = $ReallocAsyncCtx8 + 12 | 0; //@line 18856
    HEAP32[$259 >> 2] = $6; //@line 18857
    $260 = $ReallocAsyncCtx8 + 16 | 0; //@line 18858
    HEAP32[$260 >> 2] = $32; //@line 18859
    $261 = $ReallocAsyncCtx8 + 20 | 0; //@line 18860
    HEAP32[$261 >> 2] = $31; //@line 18861
    $262 = $ReallocAsyncCtx8 + 24 | 0; //@line 18862
    HEAP32[$262 >> 2] = $35; //@line 18863
    $263 = $ReallocAsyncCtx8 + 28 | 0; //@line 18864
    HEAP32[$263 >> 2] = $14; //@line 18865
    $264 = $ReallocAsyncCtx8 + 32 | 0; //@line 18866
    HEAP32[$264 >> 2] = $16; //@line 18867
    $265 = $ReallocAsyncCtx8 + 36 | 0; //@line 18868
    HEAP32[$265 >> 2] = $36; //@line 18869
    $266 = $ReallocAsyncCtx8 + 40 | 0; //@line 18870
    HEAP32[$266 >> 2] = $37; //@line 18871
    $267 = $ReallocAsyncCtx8 + 44 | 0; //@line 18872
    HEAP32[$267 >> 2] = $18; //@line 18873
    $268 = $ReallocAsyncCtx8 + 48 | 0; //@line 18874
    HEAP32[$268 >> 2] = $20; //@line 18875
    $269 = $ReallocAsyncCtx8 + 52 | 0; //@line 18876
    HEAP32[$269 >> 2] = $2; //@line 18877
    $270 = $ReallocAsyncCtx8 + 56 | 0; //@line 18878
    HEAP32[$270 >> 2] = $22; //@line 18879
    $271 = $ReallocAsyncCtx8 + 60 | 0; //@line 18880
    HEAP32[$271 >> 2] = $33; //@line 18881
    $272 = $ReallocAsyncCtx8 + 64 | 0; //@line 18882
    HEAP32[$272 >> 2] = $$0208$i; //@line 18883
    sp = STACKTOP; //@line 18884
    return;
   } else if ((label | 0) == 55) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 18888
    $274 = _sn_coap_parser_options_parse_multiple_options($14, $6, $78, $36, $37, 11, $$1202$i) | 0; //@line 18889
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 18892
     $275 = $ReallocAsyncCtx7 + 4 | 0; //@line 18893
     HEAP32[$275 >> 2] = $35; //@line 18894
     $276 = $ReallocAsyncCtx7 + 8 | 0; //@line 18895
     HEAP32[$276 >> 2] = $6; //@line 18896
     $277 = $ReallocAsyncCtx7 + 12 | 0; //@line 18897
     HEAP32[$277 >> 2] = $6; //@line 18898
     $278 = $ReallocAsyncCtx7 + 16 | 0; //@line 18899
     HEAP32[$278 >> 2] = $32; //@line 18900
     $279 = $ReallocAsyncCtx7 + 20 | 0; //@line 18901
     HEAP32[$279 >> 2] = $31; //@line 18902
     $280 = $ReallocAsyncCtx7 + 24 | 0; //@line 18903
     HEAP32[$280 >> 2] = $35; //@line 18904
     $281 = $ReallocAsyncCtx7 + 28 | 0; //@line 18905
     HEAP32[$281 >> 2] = $14; //@line 18906
     $282 = $ReallocAsyncCtx7 + 32 | 0; //@line 18907
     HEAP32[$282 >> 2] = $16; //@line 18908
     $283 = $ReallocAsyncCtx7 + 36 | 0; //@line 18909
     HEAP32[$283 >> 2] = $36; //@line 18910
     $284 = $ReallocAsyncCtx7 + 40 | 0; //@line 18911
     HEAP32[$284 >> 2] = $37; //@line 18912
     $285 = $ReallocAsyncCtx7 + 44 | 0; //@line 18913
     HEAP32[$285 >> 2] = $18; //@line 18914
     $286 = $ReallocAsyncCtx7 + 48 | 0; //@line 18915
     HEAP32[$286 >> 2] = $20; //@line 18916
     $287 = $ReallocAsyncCtx7 + 52 | 0; //@line 18917
     HEAP32[$287 >> 2] = $2; //@line 18918
     $288 = $ReallocAsyncCtx7 + 56 | 0; //@line 18919
     HEAP32[$288 >> 2] = $22; //@line 18920
     $289 = $ReallocAsyncCtx7 + 60 | 0; //@line 18921
     HEAP32[$289 >> 2] = $33; //@line 18922
     $290 = $ReallocAsyncCtx7 + 64 | 0; //@line 18923
     HEAP32[$290 >> 2] = $$0208$i; //@line 18924
     sp = STACKTOP; //@line 18925
     return;
    }
    HEAP8[___async_retval >> 0] = $274; //@line 18929
    ___async_unwind = 0; //@line 18930
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 18931
    $275 = $ReallocAsyncCtx7 + 4 | 0; //@line 18932
    HEAP32[$275 >> 2] = $35; //@line 18933
    $276 = $ReallocAsyncCtx7 + 8 | 0; //@line 18934
    HEAP32[$276 >> 2] = $6; //@line 18935
    $277 = $ReallocAsyncCtx7 + 12 | 0; //@line 18936
    HEAP32[$277 >> 2] = $6; //@line 18937
    $278 = $ReallocAsyncCtx7 + 16 | 0; //@line 18938
    HEAP32[$278 >> 2] = $32; //@line 18939
    $279 = $ReallocAsyncCtx7 + 20 | 0; //@line 18940
    HEAP32[$279 >> 2] = $31; //@line 18941
    $280 = $ReallocAsyncCtx7 + 24 | 0; //@line 18942
    HEAP32[$280 >> 2] = $35; //@line 18943
    $281 = $ReallocAsyncCtx7 + 28 | 0; //@line 18944
    HEAP32[$281 >> 2] = $14; //@line 18945
    $282 = $ReallocAsyncCtx7 + 32 | 0; //@line 18946
    HEAP32[$282 >> 2] = $16; //@line 18947
    $283 = $ReallocAsyncCtx7 + 36 | 0; //@line 18948
    HEAP32[$283 >> 2] = $36; //@line 18949
    $284 = $ReallocAsyncCtx7 + 40 | 0; //@line 18950
    HEAP32[$284 >> 2] = $37; //@line 18951
    $285 = $ReallocAsyncCtx7 + 44 | 0; //@line 18952
    HEAP32[$285 >> 2] = $18; //@line 18953
    $286 = $ReallocAsyncCtx7 + 48 | 0; //@line 18954
    HEAP32[$286 >> 2] = $20; //@line 18955
    $287 = $ReallocAsyncCtx7 + 52 | 0; //@line 18956
    HEAP32[$287 >> 2] = $2; //@line 18957
    $288 = $ReallocAsyncCtx7 + 56 | 0; //@line 18958
    HEAP32[$288 >> 2] = $22; //@line 18959
    $289 = $ReallocAsyncCtx7 + 60 | 0; //@line 18960
    HEAP32[$289 >> 2] = $33; //@line 18961
    $290 = $ReallocAsyncCtx7 + 64 | 0; //@line 18962
    HEAP32[$290 >> 2] = $$0208$i; //@line 18963
    sp = STACKTOP; //@line 18964
    return;
   } else if ((label | 0) == 63) {
    $308 = HEAP32[$35 >> 2] | 0; //@line 18968
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 18971
    $311 = _sn_coap_parser_options_parse_multiple_options($14, $6, $78, $308 + 64 | 0, $308 + 10 | 0, 15, $$1202$i) | 0; //@line 18972
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 18975
     $312 = $ReallocAsyncCtx6 + 4 | 0; //@line 18976
     HEAP32[$312 >> 2] = $35; //@line 18977
     $313 = $ReallocAsyncCtx6 + 8 | 0; //@line 18978
     HEAP32[$313 >> 2] = $6; //@line 18979
     $314 = $ReallocAsyncCtx6 + 12 | 0; //@line 18980
     HEAP32[$314 >> 2] = $6; //@line 18981
     $315 = $ReallocAsyncCtx6 + 16 | 0; //@line 18982
     HEAP32[$315 >> 2] = $32; //@line 18983
     $316 = $ReallocAsyncCtx6 + 20 | 0; //@line 18984
     HEAP32[$316 >> 2] = $31; //@line 18985
     $317 = $ReallocAsyncCtx6 + 24 | 0; //@line 18986
     HEAP32[$317 >> 2] = $35; //@line 18987
     $318 = $ReallocAsyncCtx6 + 28 | 0; //@line 18988
     HEAP32[$318 >> 2] = $14; //@line 18989
     $319 = $ReallocAsyncCtx6 + 32 | 0; //@line 18990
     HEAP32[$319 >> 2] = $16; //@line 18991
     $320 = $ReallocAsyncCtx6 + 36 | 0; //@line 18992
     HEAP32[$320 >> 2] = $36; //@line 18993
     $321 = $ReallocAsyncCtx6 + 40 | 0; //@line 18994
     HEAP32[$321 >> 2] = $37; //@line 18995
     $322 = $ReallocAsyncCtx6 + 44 | 0; //@line 18996
     HEAP32[$322 >> 2] = $18; //@line 18997
     $323 = $ReallocAsyncCtx6 + 48 | 0; //@line 18998
     HEAP32[$323 >> 2] = $20; //@line 18999
     $324 = $ReallocAsyncCtx6 + 52 | 0; //@line 19000
     HEAP32[$324 >> 2] = $2; //@line 19001
     $325 = $ReallocAsyncCtx6 + 56 | 0; //@line 19002
     HEAP32[$325 >> 2] = $22; //@line 19003
     $326 = $ReallocAsyncCtx6 + 60 | 0; //@line 19004
     HEAP32[$326 >> 2] = $33; //@line 19005
     $327 = $ReallocAsyncCtx6 + 64 | 0; //@line 19006
     HEAP32[$327 >> 2] = $$0208$i; //@line 19007
     sp = STACKTOP; //@line 19008
     return;
    }
    HEAP8[___async_retval >> 0] = $311; //@line 19012
    ___async_unwind = 0; //@line 19013
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 19014
    $312 = $ReallocAsyncCtx6 + 4 | 0; //@line 19015
    HEAP32[$312 >> 2] = $35; //@line 19016
    $313 = $ReallocAsyncCtx6 + 8 | 0; //@line 19017
    HEAP32[$313 >> 2] = $6; //@line 19018
    $314 = $ReallocAsyncCtx6 + 12 | 0; //@line 19019
    HEAP32[$314 >> 2] = $6; //@line 19020
    $315 = $ReallocAsyncCtx6 + 16 | 0; //@line 19021
    HEAP32[$315 >> 2] = $32; //@line 19022
    $316 = $ReallocAsyncCtx6 + 20 | 0; //@line 19023
    HEAP32[$316 >> 2] = $31; //@line 19024
    $317 = $ReallocAsyncCtx6 + 24 | 0; //@line 19025
    HEAP32[$317 >> 2] = $35; //@line 19026
    $318 = $ReallocAsyncCtx6 + 28 | 0; //@line 19027
    HEAP32[$318 >> 2] = $14; //@line 19028
    $319 = $ReallocAsyncCtx6 + 32 | 0; //@line 19029
    HEAP32[$319 >> 2] = $16; //@line 19030
    $320 = $ReallocAsyncCtx6 + 36 | 0; //@line 19031
    HEAP32[$320 >> 2] = $36; //@line 19032
    $321 = $ReallocAsyncCtx6 + 40 | 0; //@line 19033
    HEAP32[$321 >> 2] = $37; //@line 19034
    $322 = $ReallocAsyncCtx6 + 44 | 0; //@line 19035
    HEAP32[$322 >> 2] = $18; //@line 19036
    $323 = $ReallocAsyncCtx6 + 48 | 0; //@line 19037
    HEAP32[$323 >> 2] = $20; //@line 19038
    $324 = $ReallocAsyncCtx6 + 52 | 0; //@line 19039
    HEAP32[$324 >> 2] = $2; //@line 19040
    $325 = $ReallocAsyncCtx6 + 56 | 0; //@line 19041
    HEAP32[$325 >> 2] = $22; //@line 19042
    $326 = $ReallocAsyncCtx6 + 60 | 0; //@line 19043
    HEAP32[$326 >> 2] = $33; //@line 19044
    $327 = $ReallocAsyncCtx6 + 64 | 0; //@line 19045
    HEAP32[$327 >> 2] = $$0208$i; //@line 19046
    sp = STACKTOP; //@line 19047
    return;
   } else if ((label | 0) == 93) {
    if (($40 - $32 | 0) >= ($31 | 0)) {
     $440 = ___async_retval; //@line 19055
     HEAP32[$440 >> 2] = $18; //@line 19056
     return;
    }
    if ((HEAP8[$40 >> 0] | 0) == -1) {
     $430 = $40 + 1 | 0; //@line 19062
     HEAP32[$6 >> 2] = $430; //@line 19063
     $431 = $430; //@line 19064
     $433 = $32 - $431 + $31 | 0; //@line 19066
     HEAP16[$2 + 24 >> 1] = $433; //@line 19069
     if ($433 & 65535 | 0) {
      HEAP32[$2 + 36 >> 2] = $431; //@line 19074
      $440 = ___async_retval; //@line 19075
      HEAP32[$440 >> 2] = $18; //@line 19076
      return;
     }
    }
    HEAP32[$2 + 4 >> 2] = 1; //@line 19081
    $440 = ___async_retval; //@line 19082
    HEAP32[$440 >> 2] = $18; //@line 19083
    return;
   }
  }
 } while (0);
 HEAP32[$2 + 4 >> 2] = 1; //@line 19089
 $440 = ___async_retval; //@line 19090
 HEAP32[$440 >> 2] = $18; //@line 19091
 return;
}
function _sn_coap_parser__async_cb_19($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $110 = 0, $111 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $123 = 0, $128 = 0, $131 = 0, $135 = 0, $138 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $189 = 0, $192 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $219 = 0, $22 = 0, $220 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $247 = 0, $248 = 0, $253 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $299 = 0, $30 = 0, $302 = 0, $303 = 0, $308 = 0, $311 = 0, $313 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $336 = 0, $339 = 0, $34 = 0, $340 = 0, $345 = 0, $348 = 0, $352 = 0, $355 = 0, $356 = 0, $36 = 0, $361 = 0, $364 = 0, $368 = 0, $371 = 0, $372 = 0, $377 = 0, $380 = 0, $384 = 0, $385 = 0, $390 = 0, $391 = 0, $396 = 0, $399 = 0, $4 = 0, $405 = 0, $406 = 0, $41 = 0, $411 = 0, $412 = 0, $417 = 0, $420 = 0, $424 = 0, $425 = 0, $433 = 0, $434 = 0, $436 = 0, $44 = 0, $443 = 0, $444 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $128$looptemp = 0, $253$looptemp = 0, $308$looptemp = 0, $345$looptemp = 0, $361$looptemp = 0, $377$looptemp = 0, $396$looptemp = 0, $417$looptemp = 0, $116$looptemp = 0;
 sp = STACKTOP; //@line 20545
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20547
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20549
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20551
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20553
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20555
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20557
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20559
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20561
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20563
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20565
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20567
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20569
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20571
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20573
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20575
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20577
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20579
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20581
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20583
 HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] = $AsyncRetVal; //@line 20586
 L2 : do {
  if ($AsyncRetVal | 0) {
   _memcpy($AsyncRetVal | 0, $34 | 0, $36 | 0) | 0; //@line 20590
   HEAP32[$4 >> 2] = $34 + $36; //@line 20592
   $$reg2mem$0 = $32; //@line 20593
   L4 : while (1) {
    $424 = HEAP32[$6 >> 2] | 0; //@line 20595
    $425 = $424 - $8 | 0; //@line 20596
    $41 = $424; //@line 20599
    if (($425 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $425 & 65535) << 16 >> 16)) {
     label = 92; //@line 20606
     break;
    }
    $trunc277$i = HEAP8[$41 >> 0] | 0; //@line 20609
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 92; //@line 20612
     break;
    }
    $44 = $trunc277$i & 15; //@line 20616
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 20617
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$41 + 1 >> 0] | 0; //@line 20629
      $$sink214$i = 13; //@line 20629
      $$sink3$i = 1; //@line 20629
      label = 7; //@line 20630
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$41 + 1 >> 0] << 8) + 269 | 0; //@line 20642
      $$sink214$i = HEAPU8[$41 + 2 >> 0] | 0; //@line 20642
      $$sink3$i = 2; //@line 20642
      label = 7; //@line 20643
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 20647
      $444 = $424; //@line 20647
      $63 = $41; //@line 20647
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 20651
     $58 = $41 + $$sink3$i | 0; //@line 20653
     HEAP32[$4 >> 2] = $58; //@line 20654
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 20656
     $444 = $58; //@line 20656
     $63 = $58; //@line 20656
    }
    $61 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 20659
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$63 + 1 >> 0] | 0; //@line 20670
      $$sink216$i = 13; //@line 20670
      $$sink8$i = 1; //@line 20670
      label = 11; //@line 20671
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$63 + 1 >> 0] << 8) + 269 | 0; //@line 20683
      $$sink216$i = HEAPU8[$63 + 2 >> 0] | 0; //@line 20683
      $$sink8$i = 2; //@line 20683
      label = 11; //@line 20684
      break;
     }
    default:
     {
      $$1202$in$i = $44; //@line 20688
      $78 = $444; //@line 20688
      $90 = $63; //@line 20688
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 20692
     $75 = $63 + $$sink8$i | 0; //@line 20694
     HEAP32[$4 >> 2] = $75; //@line 20695
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 20697
     $78 = $75; //@line 20697
     $90 = $75; //@line 20697
    }
    $$1202$i = $$1202$in$i & 65535; //@line 20699
    $79 = $30 - $78 & 65535; //@line 20701
    $trunc$i = $61 & 65535; //@line 20702
    L21 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 54; //@line 20706
       break L4;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$2 >> 2] | 0)) {
        label = 14; //@line 20714
        break L4;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 20719
         break L4;
         break;
        }
       case 4:
        {
         label = 34; //@line 20724
         break L4;
         break;
        }
       case 3:
        {
         label = 37; //@line 20729
         break L4;
         break;
        }
       case 8:
        {
         label = 42; //@line 20734
         break L4;
         break;
        }
       case 20:
        {
         label = 51; //@line 20739
         break L4;
         break;
        }
       case 11:
        {
         label = 54; //@line 20744
         break L4;
         break;
        }
       case 15:
        {
         label = 62; //@line 20749
         break L4;
         break;
        }
       case 12:
        {
         break L21;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $122 = $90 + 1 | 0; //@line 20762
         HEAP32[$4 >> 2] = $122; //@line 20763
         $123 = $$1202$in$i & 255; //@line 20764
         if (!($123 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 20767
         } else {
          $$045$i256$i = $123; //@line 20769
          $$06$i255$i = 0; //@line 20769
          $128 = $122; //@line 20769
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 20771
           $128$looptemp = $128;
           $128 = $128 + 1 | 0; //@line 20773
           HEAP32[$4 >> 2] = $128; //@line 20774
           $131 = $$06$i255$i << 8 | HEAPU8[$128$looptemp >> 0]; //@line 20777
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $131; //@line 20780
            break;
           } else {
            $$06$i255$i = $131; //@line 20783
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 20789
         $$reg2mem$0 = $61; //@line 20790
         continue L4;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $244 = (HEAP32[$2 >> 2] | 0) + 28 | 0; //@line 20800
         if ((HEAP32[$244 >> 2] | 0) != -1) {
          break L2;
         }
         $247 = $90 + 1 | 0; //@line 20806
         HEAP32[$4 >> 2] = $247; //@line 20807
         $248 = $$1202$in$i & 255; //@line 20808
         if (!($248 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 20811
         } else {
          $$045$i270$i = $248; //@line 20813
          $$06$i269$i = 0; //@line 20813
          $253 = $247; //@line 20813
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 20815
           $253$looptemp = $253;
           $253 = $253 + 1 | 0; //@line 20817
           HEAP32[$4 >> 2] = $253; //@line 20818
           $256 = $$06$i269$i << 8 | HEAPU8[$253$looptemp >> 0]; //@line 20821
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $256; //@line 20824
            break;
           } else {
            $$06$i269$i = $256; //@line 20827
           }
          }
         }
         HEAP32[$244 >> 2] = $$0$lcssa$i272$i; //@line 20831
         $$reg2mem$0 = $61; //@line 20832
         continue L4;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $299 = (HEAP32[$2 >> 2] | 0) + 32 | 0; //@line 20842
         if ((HEAP32[$299 >> 2] | 0) != -1) {
          break L2;
         }
         $302 = $90 + 1 | 0; //@line 20848
         HEAP32[$4 >> 2] = $302; //@line 20849
         $303 = $$1202$in$i & 255; //@line 20850
         if (!($303 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 20853
         } else {
          $$045$i263$i = $303; //@line 20855
          $$06$i262$i = 0; //@line 20855
          $308 = $302; //@line 20855
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 20857
           $308$looptemp = $308;
           $308 = $308 + 1 | 0; //@line 20859
           HEAP32[$4 >> 2] = $308; //@line 20860
           $311 = $$06$i262$i << 8 | HEAPU8[$308$looptemp >> 0]; //@line 20863
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $311; //@line 20866
            break;
           } else {
            $$06$i262$i = $311; //@line 20869
           }
          }
         }
         HEAP32[$299 >> 2] = $$0$lcssa$i265$i; //@line 20873
         $$reg2mem$0 = $61; //@line 20874
         continue L4;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $336 = (HEAP32[$2 >> 2] | 0) + 40 | 0; //@line 20884
         if ((HEAP32[$336 >> 2] | 0) != -1) {
          break L2;
         }
         $339 = $90 + 1 | 0; //@line 20890
         HEAP32[$4 >> 2] = $339; //@line 20891
         $340 = $$1202$in$i & 255; //@line 20892
         if (!($340 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 20895
         } else {
          $$045$i249$i = $340; //@line 20897
          $$06$i248$i = 0; //@line 20897
          $345 = $339; //@line 20897
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 20899
           $345$looptemp = $345;
           $345 = $345 + 1 | 0; //@line 20901
           HEAP32[$4 >> 2] = $345; //@line 20902
           $348 = $$06$i248$i << 8 | HEAPU8[$345$looptemp >> 0]; //@line 20905
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $348; //@line 20908
            break;
           } else {
            $$06$i248$i = $348; //@line 20911
           }
          }
         }
         HEAP32[$336 >> 2] = $$0$lcssa$i251$i; //@line 20915
         $$reg2mem$0 = $61; //@line 20916
         continue L4;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $352 = (HEAP32[$2 >> 2] | 0) + 36 | 0; //@line 20926
         if ((HEAP32[$352 >> 2] | 0) != -1) {
          break L2;
         }
         $355 = $90 + 1 | 0; //@line 20932
         HEAP32[$4 >> 2] = $355; //@line 20933
         $356 = $$1202$in$i & 255; //@line 20934
         if (!($356 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 20937
         } else {
          $$045$i242$i = $356; //@line 20939
          $$06$i241$i = 0; //@line 20939
          $361 = $355; //@line 20939
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 20941
           $361$looptemp = $361;
           $361 = $361 + 1 | 0; //@line 20943
           HEAP32[$4 >> 2] = $361; //@line 20944
           $364 = $$06$i241$i << 8 | HEAPU8[$361$looptemp >> 0]; //@line 20947
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $364; //@line 20950
            break;
           } else {
            $$06$i241$i = $364; //@line 20953
           }
          }
         }
         HEAP32[$352 >> 2] = $$0$lcssa$i244$i; //@line 20957
         $$reg2mem$0 = $61; //@line 20958
         continue L4;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $368 = (HEAP32[$2 >> 2] | 0) + 12 | 0; //@line 20968
         if ((HEAP32[$368 >> 2] | 0) != -1) {
          break L2;
         }
         $371 = $90 + 1 | 0; //@line 20974
         HEAP32[$4 >> 2] = $371; //@line 20975
         $372 = $$1202$in$i & 255; //@line 20976
         if (!($372 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 20979
         } else {
          $$045$i235$i = $372; //@line 20981
          $$06$i234$i = 0; //@line 20981
          $377 = $371; //@line 20981
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 20983
           $377$looptemp = $377;
           $377 = $377 + 1 | 0; //@line 20985
           HEAP32[$4 >> 2] = $377; //@line 20986
           $380 = $$06$i234$i << 8 | HEAPU8[$377$looptemp >> 0]; //@line 20989
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $380; //@line 20992
            break;
           } else {
            $$06$i234$i = $380; //@line 20995
           }
          }
         }
         HEAP32[$368 >> 2] = $$0$lcssa$i237$i; //@line 20999
         $$reg2mem$0 = $61; //@line 21000
         continue L4;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $384 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 21010
         $385 = HEAP8[$384 >> 0] | 0; //@line 21011
         if ($385 & 1) {
          break L2;
         }
         HEAP8[$384 >> 0] = $385 | 1; //@line 21018
         $390 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 21020
         HEAP32[$4 >> 2] = $390; //@line 21021
         $391 = $$1202$in$i & 255; //@line 21022
         if (!($391 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 21025
         } else {
          $$045$i228$i = $391; //@line 21027
          $$06$i227$i = 0; //@line 21027
          $396 = $390; //@line 21027
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 21029
           $396$looptemp = $396;
           $396 = $396 + 1 | 0; //@line 21031
           HEAP32[$4 >> 2] = $396; //@line 21032
           $399 = $$06$i227$i << 8 | HEAPU8[$396$looptemp >> 0]; //@line 21035
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $399; //@line 21038
            break;
           } else {
            $$06$i227$i = $399; //@line 21041
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 21047
         $$reg2mem$0 = $61; //@line 21048
         continue L4;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $405 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 21058
         $406 = HEAP8[$405 >> 0] | 0; //@line 21059
         if ($406 & 2) {
          break L2;
         }
         HEAP8[$405 >> 0] = $406 | 2; //@line 21066
         $411 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 21068
         HEAP32[$4 >> 2] = $411; //@line 21069
         $412 = $$1202$in$i & 255; //@line 21070
         if (!($412 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 21073
         } else {
          $$045$i221$i = $412; //@line 21075
          $$06$i220$i = 0; //@line 21075
          $417 = $411; //@line 21075
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 21077
           $417$looptemp = $417;
           $417 = $417 + 1 | 0; //@line 21079
           HEAP32[$4 >> 2] = $417; //@line 21080
           $420 = $$06$i220$i << 8 | HEAPU8[$417$looptemp >> 0]; //@line 21083
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $420; //@line 21086
            break;
           } else {
            $$06$i220$i = $420; //@line 21089
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 21095
         $$reg2mem$0 = $61; //@line 21096
         continue L4;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$28 >> 2] | 0) != -1) {
     break L2;
    }
    $110 = $90 + 1 | 0; //@line 21123
    HEAP32[$4 >> 2] = $110; //@line 21124
    $111 = $$1202$in$i & 255; //@line 21125
    if (!($111 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 21128
    } else {
     $$045$i$i = $111; //@line 21130
     $$06$i$i = 0; //@line 21130
     $116 = $110; //@line 21130
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 21132
      $116$looptemp = $116;
      $116 = $116 + 1 | 0; //@line 21134
      HEAP32[$4 >> 2] = $116; //@line 21135
      $119 = $$06$i$i << 8 | HEAPU8[$116$looptemp >> 0]; //@line 21138
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $119; //@line 21141
       break;
      } else {
       $$06$i$i = $119; //@line 21144
      }
     }
    }
    HEAP32[$28 >> 2] = $$0$lcssa$i$i; //@line 21148
    $$reg2mem$0 = $61; //@line 21149
   }
   if ((label | 0) == 14) {
    $82 = HEAP32[$16 >> 2] | 0; //@line 21152
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(88) | 0; //@line 21153
    $83 = FUNCTION_TABLE_ii[$82 & 15](68) | 0; //@line 21154
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 21157
     $84 = $ReallocAsyncCtx3 + 4 | 0; //@line 21158
     HEAP32[$84 >> 2] = $2; //@line 21159
     $85 = $ReallocAsyncCtx3 + 8 | 0; //@line 21160
     HEAP32[$85 >> 2] = $4; //@line 21161
     $86 = $ReallocAsyncCtx3 + 12 | 0; //@line 21162
     HEAP32[$86 >> 2] = $$1202$in$i; //@line 21163
     $87 = $ReallocAsyncCtx3 + 16 | 0; //@line 21164
     HEAP32[$87 >> 2] = $61; //@line 21165
     $88 = $ReallocAsyncCtx3 + 20 | 0; //@line 21166
     HEAP16[$88 >> 1] = $$1202$i; //@line 21167
     $89 = $ReallocAsyncCtx3 + 24 | 0; //@line 21168
     HEAP32[$89 >> 2] = $90; //@line 21169
     $91 = $ReallocAsyncCtx3 + 28 | 0; //@line 21170
     HEAP32[$91 >> 2] = $6; //@line 21171
     $92 = $ReallocAsyncCtx3 + 32 | 0; //@line 21172
     HEAP32[$92 >> 2] = $8; //@line 21173
     $93 = $ReallocAsyncCtx3 + 36 | 0; //@line 21174
     HEAP32[$93 >> 2] = $10; //@line 21175
     $94 = $ReallocAsyncCtx3 + 40 | 0; //@line 21176
     HEAP32[$94 >> 2] = $12; //@line 21177
     $95 = $ReallocAsyncCtx3 + 44 | 0; //@line 21178
     HEAP32[$95 >> 2] = $14; //@line 21179
     $96 = $ReallocAsyncCtx3 + 48 | 0; //@line 21180
     HEAP16[$96 >> 1] = $79; //@line 21181
     $97 = $ReallocAsyncCtx3 + 52 | 0; //@line 21182
     HEAP32[$97 >> 2] = $16; //@line 21183
     $98 = $ReallocAsyncCtx3 + 56 | 0; //@line 21184
     HEAP32[$98 >> 2] = $18; //@line 21185
     $99 = $ReallocAsyncCtx3 + 60 | 0; //@line 21186
     HEAP32[$99 >> 2] = $20; //@line 21187
     $100 = $ReallocAsyncCtx3 + 64 | 0; //@line 21188
     HEAP16[$100 >> 1] = $trunc$i; //@line 21189
     $101 = $ReallocAsyncCtx3 + 68 | 0; //@line 21190
     HEAP32[$101 >> 2] = $22; //@line 21191
     $102 = $ReallocAsyncCtx3 + 72 | 0; //@line 21192
     HEAP32[$102 >> 2] = $24; //@line 21193
     $103 = $ReallocAsyncCtx3 + 76 | 0; //@line 21194
     HEAP32[$103 >> 2] = $26; //@line 21195
     $104 = $ReallocAsyncCtx3 + 80 | 0; //@line 21196
     HEAP32[$104 >> 2] = $28; //@line 21197
     $105 = $ReallocAsyncCtx3 + 84 | 0; //@line 21198
     HEAP32[$105 >> 2] = $30; //@line 21199
     sp = STACKTOP; //@line 21200
     return;
    }
    HEAP32[___async_retval >> 2] = $83; //@line 21204
    ___async_unwind = 0; //@line 21205
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 21206
    $84 = $ReallocAsyncCtx3 + 4 | 0; //@line 21207
    HEAP32[$84 >> 2] = $2; //@line 21208
    $85 = $ReallocAsyncCtx3 + 8 | 0; //@line 21209
    HEAP32[$85 >> 2] = $4; //@line 21210
    $86 = $ReallocAsyncCtx3 + 12 | 0; //@line 21211
    HEAP32[$86 >> 2] = $$1202$in$i; //@line 21212
    $87 = $ReallocAsyncCtx3 + 16 | 0; //@line 21213
    HEAP32[$87 >> 2] = $61; //@line 21214
    $88 = $ReallocAsyncCtx3 + 20 | 0; //@line 21215
    HEAP16[$88 >> 1] = $$1202$i; //@line 21216
    $89 = $ReallocAsyncCtx3 + 24 | 0; //@line 21217
    HEAP32[$89 >> 2] = $90; //@line 21218
    $91 = $ReallocAsyncCtx3 + 28 | 0; //@line 21219
    HEAP32[$91 >> 2] = $6; //@line 21220
    $92 = $ReallocAsyncCtx3 + 32 | 0; //@line 21221
    HEAP32[$92 >> 2] = $8; //@line 21222
    $93 = $ReallocAsyncCtx3 + 36 | 0; //@line 21223
    HEAP32[$93 >> 2] = $10; //@line 21224
    $94 = $ReallocAsyncCtx3 + 40 | 0; //@line 21225
    HEAP32[$94 >> 2] = $12; //@line 21226
    $95 = $ReallocAsyncCtx3 + 44 | 0; //@line 21227
    HEAP32[$95 >> 2] = $14; //@line 21228
    $96 = $ReallocAsyncCtx3 + 48 | 0; //@line 21229
    HEAP16[$96 >> 1] = $79; //@line 21230
    $97 = $ReallocAsyncCtx3 + 52 | 0; //@line 21231
    HEAP32[$97 >> 2] = $16; //@line 21232
    $98 = $ReallocAsyncCtx3 + 56 | 0; //@line 21233
    HEAP32[$98 >> 2] = $18; //@line 21234
    $99 = $ReallocAsyncCtx3 + 60 | 0; //@line 21235
    HEAP32[$99 >> 2] = $20; //@line 21236
    $100 = $ReallocAsyncCtx3 + 64 | 0; //@line 21237
    HEAP16[$100 >> 1] = $trunc$i; //@line 21238
    $101 = $ReallocAsyncCtx3 + 68 | 0; //@line 21239
    HEAP32[$101 >> 2] = $22; //@line 21240
    $102 = $ReallocAsyncCtx3 + 72 | 0; //@line 21241
    HEAP32[$102 >> 2] = $24; //@line 21242
    $103 = $ReallocAsyncCtx3 + 76 | 0; //@line 21243
    HEAP32[$103 >> 2] = $26; //@line 21244
    $104 = $ReallocAsyncCtx3 + 80 | 0; //@line 21245
    HEAP32[$104 >> 2] = $28; //@line 21246
    $105 = $ReallocAsyncCtx3 + 84 | 0; //@line 21247
    HEAP32[$105 >> 2] = $30; //@line 21248
    sp = STACKTOP; //@line 21249
    return;
   } else if ((label | 0) == 27) {
    $135 = $$1202$in$i & 65535; //@line 21253
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $138 = HEAP32[$2 >> 2] | 0; //@line 21259
    if (HEAP32[$138 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$138 + 2 >> 1] = $$1202$i; //@line 21267
    $143 = $90 + 1 | 0; //@line 21268
    HEAP32[$4 >> 2] = $143; //@line 21269
    $144 = HEAP32[$16 >> 2] | 0; //@line 21270
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 21271
    $145 = FUNCTION_TABLE_ii[$144 & 15]($$1202$i) | 0; //@line 21272
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 21275
     $146 = $ReallocAsyncCtx4 + 4 | 0; //@line 21276
     HEAP32[$146 >> 2] = $2; //@line 21277
     $147 = $ReallocAsyncCtx4 + 8 | 0; //@line 21278
     HEAP32[$147 >> 2] = $4; //@line 21279
     $148 = $ReallocAsyncCtx4 + 12 | 0; //@line 21280
     HEAP32[$148 >> 2] = $6; //@line 21281
     $149 = $ReallocAsyncCtx4 + 16 | 0; //@line 21282
     HEAP32[$149 >> 2] = $8; //@line 21283
     $150 = $ReallocAsyncCtx4 + 20 | 0; //@line 21284
     HEAP32[$150 >> 2] = $10; //@line 21285
     $151 = $ReallocAsyncCtx4 + 24 | 0; //@line 21286
     HEAP32[$151 >> 2] = $12; //@line 21287
     $152 = $ReallocAsyncCtx4 + 28 | 0; //@line 21288
     HEAP32[$152 >> 2] = $14; //@line 21289
     $153 = $ReallocAsyncCtx4 + 32 | 0; //@line 21290
     HEAP32[$153 >> 2] = $16; //@line 21291
     $154 = $ReallocAsyncCtx4 + 36 | 0; //@line 21292
     HEAP32[$154 >> 2] = $18; //@line 21293
     $155 = $ReallocAsyncCtx4 + 40 | 0; //@line 21294
     HEAP32[$155 >> 2] = $20; //@line 21295
     $156 = $ReallocAsyncCtx4 + 44 | 0; //@line 21296
     HEAP32[$156 >> 2] = $22; //@line 21297
     $157 = $ReallocAsyncCtx4 + 48 | 0; //@line 21298
     HEAP32[$157 >> 2] = $24; //@line 21299
     $158 = $ReallocAsyncCtx4 + 52 | 0; //@line 21300
     HEAP32[$158 >> 2] = $26; //@line 21301
     $159 = $ReallocAsyncCtx4 + 56 | 0; //@line 21302
     HEAP32[$159 >> 2] = $28; //@line 21303
     $160 = $ReallocAsyncCtx4 + 60 | 0; //@line 21304
     HEAP32[$160 >> 2] = $30; //@line 21305
     $161 = $ReallocAsyncCtx4 + 64 | 0; //@line 21306
     HEAP32[$161 >> 2] = $61; //@line 21307
     $162 = $ReallocAsyncCtx4 + 68 | 0; //@line 21308
     HEAP32[$162 >> 2] = $143; //@line 21309
     $163 = $ReallocAsyncCtx4 + 72 | 0; //@line 21310
     HEAP32[$163 >> 2] = $135; //@line 21311
     sp = STACKTOP; //@line 21312
     return;
    }
    HEAP32[___async_retval >> 2] = $145; //@line 21316
    ___async_unwind = 0; //@line 21317
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 21318
    $146 = $ReallocAsyncCtx4 + 4 | 0; //@line 21319
    HEAP32[$146 >> 2] = $2; //@line 21320
    $147 = $ReallocAsyncCtx4 + 8 | 0; //@line 21321
    HEAP32[$147 >> 2] = $4; //@line 21322
    $148 = $ReallocAsyncCtx4 + 12 | 0; //@line 21323
    HEAP32[$148 >> 2] = $6; //@line 21324
    $149 = $ReallocAsyncCtx4 + 16 | 0; //@line 21325
    HEAP32[$149 >> 2] = $8; //@line 21326
    $150 = $ReallocAsyncCtx4 + 20 | 0; //@line 21327
    HEAP32[$150 >> 2] = $10; //@line 21328
    $151 = $ReallocAsyncCtx4 + 24 | 0; //@line 21329
    HEAP32[$151 >> 2] = $12; //@line 21330
    $152 = $ReallocAsyncCtx4 + 28 | 0; //@line 21331
    HEAP32[$152 >> 2] = $14; //@line 21332
    $153 = $ReallocAsyncCtx4 + 32 | 0; //@line 21333
    HEAP32[$153 >> 2] = $16; //@line 21334
    $154 = $ReallocAsyncCtx4 + 36 | 0; //@line 21335
    HEAP32[$154 >> 2] = $18; //@line 21336
    $155 = $ReallocAsyncCtx4 + 40 | 0; //@line 21337
    HEAP32[$155 >> 2] = $20; //@line 21338
    $156 = $ReallocAsyncCtx4 + 44 | 0; //@line 21339
    HEAP32[$156 >> 2] = $22; //@line 21340
    $157 = $ReallocAsyncCtx4 + 48 | 0; //@line 21341
    HEAP32[$157 >> 2] = $24; //@line 21342
    $158 = $ReallocAsyncCtx4 + 52 | 0; //@line 21343
    HEAP32[$158 >> 2] = $26; //@line 21344
    $159 = $ReallocAsyncCtx4 + 56 | 0; //@line 21345
    HEAP32[$159 >> 2] = $28; //@line 21346
    $160 = $ReallocAsyncCtx4 + 60 | 0; //@line 21347
    HEAP32[$160 >> 2] = $30; //@line 21348
    $161 = $ReallocAsyncCtx4 + 64 | 0; //@line 21349
    HEAP32[$161 >> 2] = $61; //@line 21350
    $162 = $ReallocAsyncCtx4 + 68 | 0; //@line 21351
    HEAP32[$162 >> 2] = $143; //@line 21352
    $163 = $ReallocAsyncCtx4 + 72 | 0; //@line 21353
    HEAP32[$163 >> 2] = $135; //@line 21354
    sp = STACKTOP; //@line 21355
    return;
   } else if ((label | 0) == 34) {
    $169 = HEAP32[$2 >> 2] | 0; //@line 21359
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 21361
    $171 = _sn_coap_parser_options_parse_multiple_options($14, $4, $79, $169 + 48 | 0, $169, 4, $$1202$i) | 0; //@line 21362
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 21365
     $172 = $ReallocAsyncCtx10 + 4 | 0; //@line 21366
     HEAP32[$172 >> 2] = $2; //@line 21367
     $173 = $ReallocAsyncCtx10 + 8 | 0; //@line 21368
     HEAP32[$173 >> 2] = $4; //@line 21369
     $174 = $ReallocAsyncCtx10 + 12 | 0; //@line 21370
     HEAP32[$174 >> 2] = $6; //@line 21371
     $175 = $ReallocAsyncCtx10 + 16 | 0; //@line 21372
     HEAP32[$175 >> 2] = $8; //@line 21373
     $176 = $ReallocAsyncCtx10 + 20 | 0; //@line 21374
     HEAP32[$176 >> 2] = $10; //@line 21375
     $177 = $ReallocAsyncCtx10 + 24 | 0; //@line 21376
     HEAP32[$177 >> 2] = $12; //@line 21377
     $178 = $ReallocAsyncCtx10 + 28 | 0; //@line 21378
     HEAP32[$178 >> 2] = $14; //@line 21379
     $179 = $ReallocAsyncCtx10 + 32 | 0; //@line 21380
     HEAP32[$179 >> 2] = $16; //@line 21381
     $180 = $ReallocAsyncCtx10 + 36 | 0; //@line 21382
     HEAP32[$180 >> 2] = $18; //@line 21383
     $181 = $ReallocAsyncCtx10 + 40 | 0; //@line 21384
     HEAP32[$181 >> 2] = $20; //@line 21385
     $182 = $ReallocAsyncCtx10 + 44 | 0; //@line 21386
     HEAP32[$182 >> 2] = $22; //@line 21387
     $183 = $ReallocAsyncCtx10 + 48 | 0; //@line 21388
     HEAP32[$183 >> 2] = $24; //@line 21389
     $184 = $ReallocAsyncCtx10 + 52 | 0; //@line 21390
     HEAP32[$184 >> 2] = $26; //@line 21391
     $185 = $ReallocAsyncCtx10 + 56 | 0; //@line 21392
     HEAP32[$185 >> 2] = $28; //@line 21393
     $186 = $ReallocAsyncCtx10 + 60 | 0; //@line 21394
     HEAP32[$186 >> 2] = $30; //@line 21395
     $187 = $ReallocAsyncCtx10 + 64 | 0; //@line 21396
     HEAP32[$187 >> 2] = $61; //@line 21397
     sp = STACKTOP; //@line 21398
     return;
    }
    HEAP8[___async_retval >> 0] = $171; //@line 21402
    ___async_unwind = 0; //@line 21403
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 21404
    $172 = $ReallocAsyncCtx10 + 4 | 0; //@line 21405
    HEAP32[$172 >> 2] = $2; //@line 21406
    $173 = $ReallocAsyncCtx10 + 8 | 0; //@line 21407
    HEAP32[$173 >> 2] = $4; //@line 21408
    $174 = $ReallocAsyncCtx10 + 12 | 0; //@line 21409
    HEAP32[$174 >> 2] = $6; //@line 21410
    $175 = $ReallocAsyncCtx10 + 16 | 0; //@line 21411
    HEAP32[$175 >> 2] = $8; //@line 21412
    $176 = $ReallocAsyncCtx10 + 20 | 0; //@line 21413
    HEAP32[$176 >> 2] = $10; //@line 21414
    $177 = $ReallocAsyncCtx10 + 24 | 0; //@line 21415
    HEAP32[$177 >> 2] = $12; //@line 21416
    $178 = $ReallocAsyncCtx10 + 28 | 0; //@line 21417
    HEAP32[$178 >> 2] = $14; //@line 21418
    $179 = $ReallocAsyncCtx10 + 32 | 0; //@line 21419
    HEAP32[$179 >> 2] = $16; //@line 21420
    $180 = $ReallocAsyncCtx10 + 36 | 0; //@line 21421
    HEAP32[$180 >> 2] = $18; //@line 21422
    $181 = $ReallocAsyncCtx10 + 40 | 0; //@line 21423
    HEAP32[$181 >> 2] = $20; //@line 21424
    $182 = $ReallocAsyncCtx10 + 44 | 0; //@line 21425
    HEAP32[$182 >> 2] = $22; //@line 21426
    $183 = $ReallocAsyncCtx10 + 48 | 0; //@line 21427
    HEAP32[$183 >> 2] = $24; //@line 21428
    $184 = $ReallocAsyncCtx10 + 52 | 0; //@line 21429
    HEAP32[$184 >> 2] = $26; //@line 21430
    $185 = $ReallocAsyncCtx10 + 56 | 0; //@line 21431
    HEAP32[$185 >> 2] = $28; //@line 21432
    $186 = $ReallocAsyncCtx10 + 60 | 0; //@line 21433
    HEAP32[$186 >> 2] = $30; //@line 21434
    $187 = $ReallocAsyncCtx10 + 64 | 0; //@line 21435
    HEAP32[$187 >> 2] = $61; //@line 21436
    sp = STACKTOP; //@line 21437
    return;
   } else if ((label | 0) == 37) {
    $189 = $$1202$in$i & 65535; //@line 21441
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $192 = HEAP32[$2 >> 2] | 0; //@line 21447
    if (HEAP32[$192 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$192 + 4 >> 1] = $$1202$i; //@line 21455
    $197 = $90 + 1 | 0; //@line 21456
    HEAP32[$4 >> 2] = $197; //@line 21457
    $198 = HEAP32[$16 >> 2] | 0; //@line 21458
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 21459
    $199 = FUNCTION_TABLE_ii[$198 & 15]($$1202$i) | 0; //@line 21460
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 21463
     $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 21464
     HEAP32[$200 >> 2] = $2; //@line 21465
     $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 21466
     HEAP32[$201 >> 2] = $4; //@line 21467
     $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 21468
     HEAP32[$202 >> 2] = $6; //@line 21469
     $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 21470
     HEAP32[$203 >> 2] = $8; //@line 21471
     $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 21472
     HEAP32[$204 >> 2] = $10; //@line 21473
     $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 21474
     HEAP32[$205 >> 2] = $12; //@line 21475
     $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 21476
     HEAP32[$206 >> 2] = $14; //@line 21477
     $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 21478
     HEAP32[$207 >> 2] = $16; //@line 21479
     $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 21480
     HEAP32[$208 >> 2] = $18; //@line 21481
     $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 21482
     HEAP32[$209 >> 2] = $20; //@line 21483
     $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 21484
     HEAP32[$210 >> 2] = $22; //@line 21485
     $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 21486
     HEAP32[$211 >> 2] = $24; //@line 21487
     $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 21488
     HEAP32[$212 >> 2] = $26; //@line 21489
     $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 21490
     HEAP32[$213 >> 2] = $28; //@line 21491
     $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 21492
     HEAP32[$214 >> 2] = $30; //@line 21493
     $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 21494
     HEAP32[$215 >> 2] = $61; //@line 21495
     $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 21496
     HEAP32[$216 >> 2] = $197; //@line 21497
     $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 21498
     HEAP32[$217 >> 2] = $189; //@line 21499
     sp = STACKTOP; //@line 21500
     return;
    }
    HEAP32[___async_retval >> 2] = $199; //@line 21504
    ___async_unwind = 0; //@line 21505
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 21506
    $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 21507
    HEAP32[$200 >> 2] = $2; //@line 21508
    $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 21509
    HEAP32[$201 >> 2] = $4; //@line 21510
    $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 21511
    HEAP32[$202 >> 2] = $6; //@line 21512
    $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 21513
    HEAP32[$203 >> 2] = $8; //@line 21514
    $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 21515
    HEAP32[$204 >> 2] = $10; //@line 21516
    $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 21517
    HEAP32[$205 >> 2] = $12; //@line 21518
    $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 21519
    HEAP32[$206 >> 2] = $14; //@line 21520
    $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 21521
    HEAP32[$207 >> 2] = $16; //@line 21522
    $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 21523
    HEAP32[$208 >> 2] = $18; //@line 21524
    $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 21525
    HEAP32[$209 >> 2] = $20; //@line 21526
    $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 21527
    HEAP32[$210 >> 2] = $22; //@line 21528
    $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 21529
    HEAP32[$211 >> 2] = $24; //@line 21530
    $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 21531
    HEAP32[$212 >> 2] = $26; //@line 21532
    $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 21533
    HEAP32[$213 >> 2] = $28; //@line 21534
    $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 21535
    HEAP32[$214 >> 2] = $30; //@line 21536
    $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 21537
    HEAP32[$215 >> 2] = $61; //@line 21538
    $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 21539
    HEAP32[$216 >> 2] = $197; //@line 21540
    $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 21541
    HEAP32[$217 >> 2] = $189; //@line 21542
    sp = STACKTOP; //@line 21543
    return;
   } else if ((label | 0) == 42) {
    $219 = HEAP32[$2 >> 2] | 0; //@line 21547
    $220 = $219 + 56 | 0; //@line 21548
    if (HEAP32[$220 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 21555
    $224 = _sn_coap_parser_options_parse_multiple_options($14, $4, $79, $220, $219 + 6 | 0, 8, $$1202$i) | 0; //@line 21556
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 21559
     $225 = $ReallocAsyncCtx9 + 4 | 0; //@line 21560
     HEAP32[$225 >> 2] = $2; //@line 21561
     $226 = $ReallocAsyncCtx9 + 8 | 0; //@line 21562
     HEAP32[$226 >> 2] = $4; //@line 21563
     $227 = $ReallocAsyncCtx9 + 12 | 0; //@line 21564
     HEAP32[$227 >> 2] = $6; //@line 21565
     $228 = $ReallocAsyncCtx9 + 16 | 0; //@line 21566
     HEAP32[$228 >> 2] = $8; //@line 21567
     $229 = $ReallocAsyncCtx9 + 20 | 0; //@line 21568
     HEAP32[$229 >> 2] = $10; //@line 21569
     $230 = $ReallocAsyncCtx9 + 24 | 0; //@line 21570
     HEAP32[$230 >> 2] = $12; //@line 21571
     $231 = $ReallocAsyncCtx9 + 28 | 0; //@line 21572
     HEAP32[$231 >> 2] = $14; //@line 21573
     $232 = $ReallocAsyncCtx9 + 32 | 0; //@line 21574
     HEAP32[$232 >> 2] = $16; //@line 21575
     $233 = $ReallocAsyncCtx9 + 36 | 0; //@line 21576
     HEAP32[$233 >> 2] = $18; //@line 21577
     $234 = $ReallocAsyncCtx9 + 40 | 0; //@line 21578
     HEAP32[$234 >> 2] = $20; //@line 21579
     $235 = $ReallocAsyncCtx9 + 44 | 0; //@line 21580
     HEAP32[$235 >> 2] = $22; //@line 21581
     $236 = $ReallocAsyncCtx9 + 48 | 0; //@line 21582
     HEAP32[$236 >> 2] = $24; //@line 21583
     $237 = $ReallocAsyncCtx9 + 52 | 0; //@line 21584
     HEAP32[$237 >> 2] = $26; //@line 21585
     $238 = $ReallocAsyncCtx9 + 56 | 0; //@line 21586
     HEAP32[$238 >> 2] = $28; //@line 21587
     $239 = $ReallocAsyncCtx9 + 60 | 0; //@line 21588
     HEAP32[$239 >> 2] = $30; //@line 21589
     $240 = $ReallocAsyncCtx9 + 64 | 0; //@line 21590
     HEAP32[$240 >> 2] = $61; //@line 21591
     sp = STACKTOP; //@line 21592
     return;
    }
    HEAP8[___async_retval >> 0] = $224; //@line 21596
    ___async_unwind = 0; //@line 21597
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 21598
    $225 = $ReallocAsyncCtx9 + 4 | 0; //@line 21599
    HEAP32[$225 >> 2] = $2; //@line 21600
    $226 = $ReallocAsyncCtx9 + 8 | 0; //@line 21601
    HEAP32[$226 >> 2] = $4; //@line 21602
    $227 = $ReallocAsyncCtx9 + 12 | 0; //@line 21603
    HEAP32[$227 >> 2] = $6; //@line 21604
    $228 = $ReallocAsyncCtx9 + 16 | 0; //@line 21605
    HEAP32[$228 >> 2] = $8; //@line 21606
    $229 = $ReallocAsyncCtx9 + 20 | 0; //@line 21607
    HEAP32[$229 >> 2] = $10; //@line 21608
    $230 = $ReallocAsyncCtx9 + 24 | 0; //@line 21609
    HEAP32[$230 >> 2] = $12; //@line 21610
    $231 = $ReallocAsyncCtx9 + 28 | 0; //@line 21611
    HEAP32[$231 >> 2] = $14; //@line 21612
    $232 = $ReallocAsyncCtx9 + 32 | 0; //@line 21613
    HEAP32[$232 >> 2] = $16; //@line 21614
    $233 = $ReallocAsyncCtx9 + 36 | 0; //@line 21615
    HEAP32[$233 >> 2] = $18; //@line 21616
    $234 = $ReallocAsyncCtx9 + 40 | 0; //@line 21617
    HEAP32[$234 >> 2] = $20; //@line 21618
    $235 = $ReallocAsyncCtx9 + 44 | 0; //@line 21619
    HEAP32[$235 >> 2] = $22; //@line 21620
    $236 = $ReallocAsyncCtx9 + 48 | 0; //@line 21621
    HEAP32[$236 >> 2] = $24; //@line 21622
    $237 = $ReallocAsyncCtx9 + 52 | 0; //@line 21623
    HEAP32[$237 >> 2] = $26; //@line 21624
    $238 = $ReallocAsyncCtx9 + 56 | 0; //@line 21625
    HEAP32[$238 >> 2] = $28; //@line 21626
    $239 = $ReallocAsyncCtx9 + 60 | 0; //@line 21627
    HEAP32[$239 >> 2] = $30; //@line 21628
    $240 = $ReallocAsyncCtx9 + 64 | 0; //@line 21629
    HEAP32[$240 >> 2] = $61; //@line 21630
    sp = STACKTOP; //@line 21631
    return;
   } else if ((label | 0) == 51) {
    $258 = HEAP32[$2 >> 2] | 0; //@line 21635
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 21638
    $261 = _sn_coap_parser_options_parse_multiple_options($14, $4, $79, $258 + 60 | 0, $258 + 8 | 0, 20, $$1202$i) | 0; //@line 21639
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 21642
     $262 = $ReallocAsyncCtx8 + 4 | 0; //@line 21643
     HEAP32[$262 >> 2] = $2; //@line 21644
     $263 = $ReallocAsyncCtx8 + 8 | 0; //@line 21645
     HEAP32[$263 >> 2] = $4; //@line 21646
     $264 = $ReallocAsyncCtx8 + 12 | 0; //@line 21647
     HEAP32[$264 >> 2] = $6; //@line 21648
     $265 = $ReallocAsyncCtx8 + 16 | 0; //@line 21649
     HEAP32[$265 >> 2] = $8; //@line 21650
     $266 = $ReallocAsyncCtx8 + 20 | 0; //@line 21651
     HEAP32[$266 >> 2] = $10; //@line 21652
     $267 = $ReallocAsyncCtx8 + 24 | 0; //@line 21653
     HEAP32[$267 >> 2] = $12; //@line 21654
     $268 = $ReallocAsyncCtx8 + 28 | 0; //@line 21655
     HEAP32[$268 >> 2] = $14; //@line 21656
     $269 = $ReallocAsyncCtx8 + 32 | 0; //@line 21657
     HEAP32[$269 >> 2] = $16; //@line 21658
     $270 = $ReallocAsyncCtx8 + 36 | 0; //@line 21659
     HEAP32[$270 >> 2] = $18; //@line 21660
     $271 = $ReallocAsyncCtx8 + 40 | 0; //@line 21661
     HEAP32[$271 >> 2] = $20; //@line 21662
     $272 = $ReallocAsyncCtx8 + 44 | 0; //@line 21663
     HEAP32[$272 >> 2] = $22; //@line 21664
     $273 = $ReallocAsyncCtx8 + 48 | 0; //@line 21665
     HEAP32[$273 >> 2] = $24; //@line 21666
     $274 = $ReallocAsyncCtx8 + 52 | 0; //@line 21667
     HEAP32[$274 >> 2] = $26; //@line 21668
     $275 = $ReallocAsyncCtx8 + 56 | 0; //@line 21669
     HEAP32[$275 >> 2] = $28; //@line 21670
     $276 = $ReallocAsyncCtx8 + 60 | 0; //@line 21671
     HEAP32[$276 >> 2] = $30; //@line 21672
     $277 = $ReallocAsyncCtx8 + 64 | 0; //@line 21673
     HEAP32[$277 >> 2] = $61; //@line 21674
     sp = STACKTOP; //@line 21675
     return;
    }
    HEAP8[___async_retval >> 0] = $261; //@line 21679
    ___async_unwind = 0; //@line 21680
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 21681
    $262 = $ReallocAsyncCtx8 + 4 | 0; //@line 21682
    HEAP32[$262 >> 2] = $2; //@line 21683
    $263 = $ReallocAsyncCtx8 + 8 | 0; //@line 21684
    HEAP32[$263 >> 2] = $4; //@line 21685
    $264 = $ReallocAsyncCtx8 + 12 | 0; //@line 21686
    HEAP32[$264 >> 2] = $6; //@line 21687
    $265 = $ReallocAsyncCtx8 + 16 | 0; //@line 21688
    HEAP32[$265 >> 2] = $8; //@line 21689
    $266 = $ReallocAsyncCtx8 + 20 | 0; //@line 21690
    HEAP32[$266 >> 2] = $10; //@line 21691
    $267 = $ReallocAsyncCtx8 + 24 | 0; //@line 21692
    HEAP32[$267 >> 2] = $12; //@line 21693
    $268 = $ReallocAsyncCtx8 + 28 | 0; //@line 21694
    HEAP32[$268 >> 2] = $14; //@line 21695
    $269 = $ReallocAsyncCtx8 + 32 | 0; //@line 21696
    HEAP32[$269 >> 2] = $16; //@line 21697
    $270 = $ReallocAsyncCtx8 + 36 | 0; //@line 21698
    HEAP32[$270 >> 2] = $18; //@line 21699
    $271 = $ReallocAsyncCtx8 + 40 | 0; //@line 21700
    HEAP32[$271 >> 2] = $20; //@line 21701
    $272 = $ReallocAsyncCtx8 + 44 | 0; //@line 21702
    HEAP32[$272 >> 2] = $22; //@line 21703
    $273 = $ReallocAsyncCtx8 + 48 | 0; //@line 21704
    HEAP32[$273 >> 2] = $24; //@line 21705
    $274 = $ReallocAsyncCtx8 + 52 | 0; //@line 21706
    HEAP32[$274 >> 2] = $26; //@line 21707
    $275 = $ReallocAsyncCtx8 + 56 | 0; //@line 21708
    HEAP32[$275 >> 2] = $28; //@line 21709
    $276 = $ReallocAsyncCtx8 + 60 | 0; //@line 21710
    HEAP32[$276 >> 2] = $30; //@line 21711
    $277 = $ReallocAsyncCtx8 + 64 | 0; //@line 21712
    HEAP32[$277 >> 2] = $61; //@line 21713
    sp = STACKTOP; //@line 21714
    return;
   } else if ((label | 0) == 54) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 21718
    $279 = _sn_coap_parser_options_parse_multiple_options($14, $4, $79, $18, $20, 11, $$1202$i) | 0; //@line 21719
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 21722
     $280 = $ReallocAsyncCtx7 + 4 | 0; //@line 21723
     HEAP32[$280 >> 2] = $2; //@line 21724
     $281 = $ReallocAsyncCtx7 + 8 | 0; //@line 21725
     HEAP32[$281 >> 2] = $4; //@line 21726
     $282 = $ReallocAsyncCtx7 + 12 | 0; //@line 21727
     HEAP32[$282 >> 2] = $6; //@line 21728
     $283 = $ReallocAsyncCtx7 + 16 | 0; //@line 21729
     HEAP32[$283 >> 2] = $8; //@line 21730
     $284 = $ReallocAsyncCtx7 + 20 | 0; //@line 21731
     HEAP32[$284 >> 2] = $10; //@line 21732
     $285 = $ReallocAsyncCtx7 + 24 | 0; //@line 21733
     HEAP32[$285 >> 2] = $12; //@line 21734
     $286 = $ReallocAsyncCtx7 + 28 | 0; //@line 21735
     HEAP32[$286 >> 2] = $14; //@line 21736
     $287 = $ReallocAsyncCtx7 + 32 | 0; //@line 21737
     HEAP32[$287 >> 2] = $16; //@line 21738
     $288 = $ReallocAsyncCtx7 + 36 | 0; //@line 21739
     HEAP32[$288 >> 2] = $18; //@line 21740
     $289 = $ReallocAsyncCtx7 + 40 | 0; //@line 21741
     HEAP32[$289 >> 2] = $20; //@line 21742
     $290 = $ReallocAsyncCtx7 + 44 | 0; //@line 21743
     HEAP32[$290 >> 2] = $22; //@line 21744
     $291 = $ReallocAsyncCtx7 + 48 | 0; //@line 21745
     HEAP32[$291 >> 2] = $24; //@line 21746
     $292 = $ReallocAsyncCtx7 + 52 | 0; //@line 21747
     HEAP32[$292 >> 2] = $26; //@line 21748
     $293 = $ReallocAsyncCtx7 + 56 | 0; //@line 21749
     HEAP32[$293 >> 2] = $28; //@line 21750
     $294 = $ReallocAsyncCtx7 + 60 | 0; //@line 21751
     HEAP32[$294 >> 2] = $30; //@line 21752
     $295 = $ReallocAsyncCtx7 + 64 | 0; //@line 21753
     HEAP32[$295 >> 2] = $61; //@line 21754
     sp = STACKTOP; //@line 21755
     return;
    }
    HEAP8[___async_retval >> 0] = $279; //@line 21759
    ___async_unwind = 0; //@line 21760
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 21761
    $280 = $ReallocAsyncCtx7 + 4 | 0; //@line 21762
    HEAP32[$280 >> 2] = $2; //@line 21763
    $281 = $ReallocAsyncCtx7 + 8 | 0; //@line 21764
    HEAP32[$281 >> 2] = $4; //@line 21765
    $282 = $ReallocAsyncCtx7 + 12 | 0; //@line 21766
    HEAP32[$282 >> 2] = $6; //@line 21767
    $283 = $ReallocAsyncCtx7 + 16 | 0; //@line 21768
    HEAP32[$283 >> 2] = $8; //@line 21769
    $284 = $ReallocAsyncCtx7 + 20 | 0; //@line 21770
    HEAP32[$284 >> 2] = $10; //@line 21771
    $285 = $ReallocAsyncCtx7 + 24 | 0; //@line 21772
    HEAP32[$285 >> 2] = $12; //@line 21773
    $286 = $ReallocAsyncCtx7 + 28 | 0; //@line 21774
    HEAP32[$286 >> 2] = $14; //@line 21775
    $287 = $ReallocAsyncCtx7 + 32 | 0; //@line 21776
    HEAP32[$287 >> 2] = $16; //@line 21777
    $288 = $ReallocAsyncCtx7 + 36 | 0; //@line 21778
    HEAP32[$288 >> 2] = $18; //@line 21779
    $289 = $ReallocAsyncCtx7 + 40 | 0; //@line 21780
    HEAP32[$289 >> 2] = $20; //@line 21781
    $290 = $ReallocAsyncCtx7 + 44 | 0; //@line 21782
    HEAP32[$290 >> 2] = $22; //@line 21783
    $291 = $ReallocAsyncCtx7 + 48 | 0; //@line 21784
    HEAP32[$291 >> 2] = $24; //@line 21785
    $292 = $ReallocAsyncCtx7 + 52 | 0; //@line 21786
    HEAP32[$292 >> 2] = $26; //@line 21787
    $293 = $ReallocAsyncCtx7 + 56 | 0; //@line 21788
    HEAP32[$293 >> 2] = $28; //@line 21789
    $294 = $ReallocAsyncCtx7 + 60 | 0; //@line 21790
    HEAP32[$294 >> 2] = $30; //@line 21791
    $295 = $ReallocAsyncCtx7 + 64 | 0; //@line 21792
    HEAP32[$295 >> 2] = $61; //@line 21793
    sp = STACKTOP; //@line 21794
    return;
   } else if ((label | 0) == 62) {
    $313 = HEAP32[$2 >> 2] | 0; //@line 21798
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 21801
    $316 = _sn_coap_parser_options_parse_multiple_options($14, $4, $79, $313 + 64 | 0, $313 + 10 | 0, 15, $$1202$i) | 0; //@line 21802
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 21805
     $317 = $ReallocAsyncCtx6 + 4 | 0; //@line 21806
     HEAP32[$317 >> 2] = $2; //@line 21807
     $318 = $ReallocAsyncCtx6 + 8 | 0; //@line 21808
     HEAP32[$318 >> 2] = $4; //@line 21809
     $319 = $ReallocAsyncCtx6 + 12 | 0; //@line 21810
     HEAP32[$319 >> 2] = $6; //@line 21811
     $320 = $ReallocAsyncCtx6 + 16 | 0; //@line 21812
     HEAP32[$320 >> 2] = $8; //@line 21813
     $321 = $ReallocAsyncCtx6 + 20 | 0; //@line 21814
     HEAP32[$321 >> 2] = $10; //@line 21815
     $322 = $ReallocAsyncCtx6 + 24 | 0; //@line 21816
     HEAP32[$322 >> 2] = $12; //@line 21817
     $323 = $ReallocAsyncCtx6 + 28 | 0; //@line 21818
     HEAP32[$323 >> 2] = $14; //@line 21819
     $324 = $ReallocAsyncCtx6 + 32 | 0; //@line 21820
     HEAP32[$324 >> 2] = $16; //@line 21821
     $325 = $ReallocAsyncCtx6 + 36 | 0; //@line 21822
     HEAP32[$325 >> 2] = $18; //@line 21823
     $326 = $ReallocAsyncCtx6 + 40 | 0; //@line 21824
     HEAP32[$326 >> 2] = $20; //@line 21825
     $327 = $ReallocAsyncCtx6 + 44 | 0; //@line 21826
     HEAP32[$327 >> 2] = $22; //@line 21827
     $328 = $ReallocAsyncCtx6 + 48 | 0; //@line 21828
     HEAP32[$328 >> 2] = $24; //@line 21829
     $329 = $ReallocAsyncCtx6 + 52 | 0; //@line 21830
     HEAP32[$329 >> 2] = $26; //@line 21831
     $330 = $ReallocAsyncCtx6 + 56 | 0; //@line 21832
     HEAP32[$330 >> 2] = $28; //@line 21833
     $331 = $ReallocAsyncCtx6 + 60 | 0; //@line 21834
     HEAP32[$331 >> 2] = $30; //@line 21835
     $332 = $ReallocAsyncCtx6 + 64 | 0; //@line 21836
     HEAP32[$332 >> 2] = $61; //@line 21837
     sp = STACKTOP; //@line 21838
     return;
    }
    HEAP8[___async_retval >> 0] = $316; //@line 21842
    ___async_unwind = 0; //@line 21843
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 21844
    $317 = $ReallocAsyncCtx6 + 4 | 0; //@line 21845
    HEAP32[$317 >> 2] = $2; //@line 21846
    $318 = $ReallocAsyncCtx6 + 8 | 0; //@line 21847
    HEAP32[$318 >> 2] = $4; //@line 21848
    $319 = $ReallocAsyncCtx6 + 12 | 0; //@line 21849
    HEAP32[$319 >> 2] = $6; //@line 21850
    $320 = $ReallocAsyncCtx6 + 16 | 0; //@line 21851
    HEAP32[$320 >> 2] = $8; //@line 21852
    $321 = $ReallocAsyncCtx6 + 20 | 0; //@line 21853
    HEAP32[$321 >> 2] = $10; //@line 21854
    $322 = $ReallocAsyncCtx6 + 24 | 0; //@line 21855
    HEAP32[$322 >> 2] = $12; //@line 21856
    $323 = $ReallocAsyncCtx6 + 28 | 0; //@line 21857
    HEAP32[$323 >> 2] = $14; //@line 21858
    $324 = $ReallocAsyncCtx6 + 32 | 0; //@line 21859
    HEAP32[$324 >> 2] = $16; //@line 21860
    $325 = $ReallocAsyncCtx6 + 36 | 0; //@line 21861
    HEAP32[$325 >> 2] = $18; //@line 21862
    $326 = $ReallocAsyncCtx6 + 40 | 0; //@line 21863
    HEAP32[$326 >> 2] = $20; //@line 21864
    $327 = $ReallocAsyncCtx6 + 44 | 0; //@line 21865
    HEAP32[$327 >> 2] = $22; //@line 21866
    $328 = $ReallocAsyncCtx6 + 48 | 0; //@line 21867
    HEAP32[$328 >> 2] = $24; //@line 21868
    $329 = $ReallocAsyncCtx6 + 52 | 0; //@line 21869
    HEAP32[$329 >> 2] = $26; //@line 21870
    $330 = $ReallocAsyncCtx6 + 56 | 0; //@line 21871
    HEAP32[$330 >> 2] = $28; //@line 21872
    $331 = $ReallocAsyncCtx6 + 60 | 0; //@line 21873
    HEAP32[$331 >> 2] = $30; //@line 21874
    $332 = $ReallocAsyncCtx6 + 64 | 0; //@line 21875
    HEAP32[$332 >> 2] = $61; //@line 21876
    sp = STACKTOP; //@line 21877
    return;
   } else if ((label | 0) == 92) {
    if (($41 - $8 | 0) >= ($10 | 0)) {
     $443 = ___async_retval; //@line 21885
     HEAP32[$443 >> 2] = $22; //@line 21886
     return;
    }
    if ((HEAP8[$41 >> 0] | 0) == -1) {
     $433 = $41 + 1 | 0; //@line 21892
     HEAP32[$4 >> 2] = $433; //@line 21893
     $434 = $433; //@line 21894
     $436 = $8 - $434 + $10 | 0; //@line 21896
     HEAP16[$26 + 24 >> 1] = $436; //@line 21899
     if ($436 & 65535 | 0) {
      HEAP32[$26 + 36 >> 2] = $434; //@line 21904
      $443 = ___async_retval; //@line 21905
      HEAP32[$443 >> 2] = $22; //@line 21906
      return;
     }
    }
    HEAP32[$26 + 4 >> 2] = 1; //@line 21911
    $443 = ___async_retval; //@line 21912
    HEAP32[$443 >> 2] = $22; //@line 21913
    return;
   }
  }
 } while (0);
 HEAP32[$26 + 4 >> 2] = 1; //@line 21919
 $443 = ___async_retval; //@line 21920
 HEAP32[$443 >> 2] = $22; //@line 21921
 return;
}
function _sn_coap_parser__async_cb_25($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $185 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $237 = 0, $24 = 0, $240 = 0, $241 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $296 = 0, $30 = 0, $301 = 0, $304 = 0, $306 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $354 = 0, $357 = 0, $361 = 0, $364 = 0, $365 = 0, $37 = 0, $370 = 0, $373 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $405 = 0, $410 = 0, $413 = 0, $417 = 0, $418 = 0, $426 = 0, $427 = 0, $429 = 0, $436 = 0, $437 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $124$looptemp = 0, $246$looptemp = 0, $301$looptemp = 0, $338$looptemp = 0, $354$looptemp = 0, $370$looptemp = 0, $389$looptemp = 0, $410$looptemp = 0, $112$looptemp = 0;
 sp = STACKTOP; //@line 7018
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7020
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7022
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7024
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7026
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7028
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7030
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7032
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7034
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7036
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7038
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7040
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7042
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7044
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7046
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7048
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 64 >> 2] | 0; //@line 7056
   L3 : while (1) {
    $417 = HEAP32[$6 >> 2] | 0; //@line 7058
    $418 = $417 - $8 | 0; //@line 7059
    $37 = $417; //@line 7062
    if (($418 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $418 & 65535) << 16 >> 16)) {
     label = 91; //@line 7069
     break;
    }
    $trunc277$i = HEAP8[$37 >> 0] | 0; //@line 7072
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 91; //@line 7075
     break;
    }
    $40 = $trunc277$i & 15; //@line 7079
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 7080
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$37 + 1 >> 0] | 0; //@line 7092
      $$sink214$i = 13; //@line 7092
      $$sink3$i = 1; //@line 7092
      label = 7; //@line 7093
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$37 + 1 >> 0] << 8) + 269 | 0; //@line 7105
      $$sink214$i = HEAPU8[$37 + 2 >> 0] | 0; //@line 7105
      $$sink3$i = 2; //@line 7105
      label = 7; //@line 7106
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 7110
      $437 = $417; //@line 7110
      $59 = $37; //@line 7110
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 7114
     $54 = $37 + $$sink3$i | 0; //@line 7116
     HEAP32[$4 >> 2] = $54; //@line 7117
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 7119
     $437 = $54; //@line 7119
     $59 = $54; //@line 7119
    }
    $57 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 7122
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$59 + 1 >> 0] | 0; //@line 7133
      $$sink216$i = 13; //@line 7133
      $$sink8$i = 1; //@line 7133
      label = 11; //@line 7134
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$59 + 1 >> 0] << 8) + 269 | 0; //@line 7146
      $$sink216$i = HEAPU8[$59 + 2 >> 0] | 0; //@line 7146
      $$sink8$i = 2; //@line 7146
      label = 11; //@line 7147
      break;
     }
    default:
     {
      $$1202$in$i = $40; //@line 7151
      $74 = $437; //@line 7151
      $86 = $59; //@line 7151
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 7155
     $71 = $59 + $$sink8$i | 0; //@line 7157
     HEAP32[$4 >> 2] = $71; //@line 7158
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 7160
     $74 = $71; //@line 7160
     $86 = $71; //@line 7160
    }
    $$1202$i = $$1202$in$i & 65535; //@line 7162
    $75 = $30 - $74 & 65535; //@line 7164
    $trunc$i = $57 & 65535; //@line 7165
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 53; //@line 7169
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$2 >> 2] | 0)) {
        label = 14; //@line 7177
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 7182
         break L3;
         break;
        }
       case 4:
        {
         label = 32; //@line 7187
         break L3;
         break;
        }
       case 3:
        {
         label = 36; //@line 7192
         break L3;
         break;
        }
       case 8:
        {
         label = 41; //@line 7197
         break L3;
         break;
        }
       case 20:
        {
         label = 50; //@line 7202
         break L3;
         break;
        }
       case 11:
        {
         label = 53; //@line 7207
         break L3;
         break;
        }
       case 15:
        {
         label = 61; //@line 7212
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $118 = $86 + 1 | 0; //@line 7225
         HEAP32[$4 >> 2] = $118; //@line 7226
         $119 = $$1202$in$i & 255; //@line 7227
         if (!($119 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 7230
         } else {
          $$045$i256$i = $119; //@line 7232
          $$06$i255$i = 0; //@line 7232
          $124 = $118; //@line 7232
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 7234
           $124$looptemp = $124;
           $124 = $124 + 1 | 0; //@line 7236
           HEAP32[$4 >> 2] = $124; //@line 7237
           $127 = $$06$i255$i << 8 | HEAPU8[$124$looptemp >> 0]; //@line 7240
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $127; //@line 7243
            break;
           } else {
            $$06$i255$i = $127; //@line 7246
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 7252
         $$reg2mem$0 = $57; //@line 7253
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $237 = (HEAP32[$2 >> 2] | 0) + 28 | 0; //@line 7263
         if ((HEAP32[$237 >> 2] | 0) != -1) {
          break L2;
         }
         $240 = $86 + 1 | 0; //@line 7269
         HEAP32[$4 >> 2] = $240; //@line 7270
         $241 = $$1202$in$i & 255; //@line 7271
         if (!($241 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 7274
         } else {
          $$045$i270$i = $241; //@line 7276
          $$06$i269$i = 0; //@line 7276
          $246 = $240; //@line 7276
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 7278
           $246$looptemp = $246;
           $246 = $246 + 1 | 0; //@line 7280
           HEAP32[$4 >> 2] = $246; //@line 7281
           $249 = $$06$i269$i << 8 | HEAPU8[$246$looptemp >> 0]; //@line 7284
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $249; //@line 7287
            break;
           } else {
            $$06$i269$i = $249; //@line 7290
           }
          }
         }
         HEAP32[$237 >> 2] = $$0$lcssa$i272$i; //@line 7294
         $$reg2mem$0 = $57; //@line 7295
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $292 = (HEAP32[$2 >> 2] | 0) + 32 | 0; //@line 7305
         if ((HEAP32[$292 >> 2] | 0) != -1) {
          break L2;
         }
         $295 = $86 + 1 | 0; //@line 7311
         HEAP32[$4 >> 2] = $295; //@line 7312
         $296 = $$1202$in$i & 255; //@line 7313
         if (!($296 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 7316
         } else {
          $$045$i263$i = $296; //@line 7318
          $$06$i262$i = 0; //@line 7318
          $301 = $295; //@line 7318
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 7320
           $301$looptemp = $301;
           $301 = $301 + 1 | 0; //@line 7322
           HEAP32[$4 >> 2] = $301; //@line 7323
           $304 = $$06$i262$i << 8 | HEAPU8[$301$looptemp >> 0]; //@line 7326
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $304; //@line 7329
            break;
           } else {
            $$06$i262$i = $304; //@line 7332
           }
          }
         }
         HEAP32[$292 >> 2] = $$0$lcssa$i265$i; //@line 7336
         $$reg2mem$0 = $57; //@line 7337
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $329 = (HEAP32[$2 >> 2] | 0) + 40 | 0; //@line 7347
         if ((HEAP32[$329 >> 2] | 0) != -1) {
          break L2;
         }
         $332 = $86 + 1 | 0; //@line 7353
         HEAP32[$4 >> 2] = $332; //@line 7354
         $333 = $$1202$in$i & 255; //@line 7355
         if (!($333 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 7358
         } else {
          $$045$i249$i = $333; //@line 7360
          $$06$i248$i = 0; //@line 7360
          $338 = $332; //@line 7360
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 7362
           $338$looptemp = $338;
           $338 = $338 + 1 | 0; //@line 7364
           HEAP32[$4 >> 2] = $338; //@line 7365
           $341 = $$06$i248$i << 8 | HEAPU8[$338$looptemp >> 0]; //@line 7368
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $341; //@line 7371
            break;
           } else {
            $$06$i248$i = $341; //@line 7374
           }
          }
         }
         HEAP32[$329 >> 2] = $$0$lcssa$i251$i; //@line 7378
         $$reg2mem$0 = $57; //@line 7379
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $345 = (HEAP32[$2 >> 2] | 0) + 36 | 0; //@line 7389
         if ((HEAP32[$345 >> 2] | 0) != -1) {
          break L2;
         }
         $348 = $86 + 1 | 0; //@line 7395
         HEAP32[$4 >> 2] = $348; //@line 7396
         $349 = $$1202$in$i & 255; //@line 7397
         if (!($349 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 7400
         } else {
          $$045$i242$i = $349; //@line 7402
          $$06$i241$i = 0; //@line 7402
          $354 = $348; //@line 7402
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 7404
           $354$looptemp = $354;
           $354 = $354 + 1 | 0; //@line 7406
           HEAP32[$4 >> 2] = $354; //@line 7407
           $357 = $$06$i241$i << 8 | HEAPU8[$354$looptemp >> 0]; //@line 7410
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $357; //@line 7413
            break;
           } else {
            $$06$i241$i = $357; //@line 7416
           }
          }
         }
         HEAP32[$345 >> 2] = $$0$lcssa$i244$i; //@line 7420
         $$reg2mem$0 = $57; //@line 7421
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $361 = (HEAP32[$2 >> 2] | 0) + 12 | 0; //@line 7431
         if ((HEAP32[$361 >> 2] | 0) != -1) {
          break L2;
         }
         $364 = $86 + 1 | 0; //@line 7437
         HEAP32[$4 >> 2] = $364; //@line 7438
         $365 = $$1202$in$i & 255; //@line 7439
         if (!($365 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 7442
         } else {
          $$045$i235$i = $365; //@line 7444
          $$06$i234$i = 0; //@line 7444
          $370 = $364; //@line 7444
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 7446
           $370$looptemp = $370;
           $370 = $370 + 1 | 0; //@line 7448
           HEAP32[$4 >> 2] = $370; //@line 7449
           $373 = $$06$i234$i << 8 | HEAPU8[$370$looptemp >> 0]; //@line 7452
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $373; //@line 7455
            break;
           } else {
            $$06$i234$i = $373; //@line 7458
           }
          }
         }
         HEAP32[$361 >> 2] = $$0$lcssa$i237$i; //@line 7462
         $$reg2mem$0 = $57; //@line 7463
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $377 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 7473
         $378 = HEAP8[$377 >> 0] | 0; //@line 7474
         if ($378 & 1) {
          break L2;
         }
         HEAP8[$377 >> 0] = $378 | 1; //@line 7481
         $383 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 7483
         HEAP32[$4 >> 2] = $383; //@line 7484
         $384 = $$1202$in$i & 255; //@line 7485
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 7488
         } else {
          $$045$i228$i = $384; //@line 7490
          $$06$i227$i = 0; //@line 7490
          $389 = $383; //@line 7490
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 7492
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 7494
           HEAP32[$4 >> 2] = $389; //@line 7495
           $392 = $$06$i227$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 7498
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $392; //@line 7501
            break;
           } else {
            $$06$i227$i = $392; //@line 7504
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 7510
         $$reg2mem$0 = $57; //@line 7511
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $398 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 7521
         $399 = HEAP8[$398 >> 0] | 0; //@line 7522
         if ($399 & 2) {
          break L2;
         }
         HEAP8[$398 >> 0] = $399 | 2; //@line 7529
         $404 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 7531
         HEAP32[$4 >> 2] = $404; //@line 7532
         $405 = $$1202$in$i & 255; //@line 7533
         if (!($405 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 7536
         } else {
          $$045$i221$i = $405; //@line 7538
          $$06$i220$i = 0; //@line 7538
          $410 = $404; //@line 7538
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 7540
           $410$looptemp = $410;
           $410 = $410 + 1 | 0; //@line 7542
           HEAP32[$4 >> 2] = $410; //@line 7543
           $413 = $$06$i220$i << 8 | HEAPU8[$410$looptemp >> 0]; //@line 7546
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $413; //@line 7549
            break;
           } else {
            $$06$i220$i = $413; //@line 7552
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 7558
         $$reg2mem$0 = $57; //@line 7559
         continue L3;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$28 >> 2] | 0) != -1) {
     break L2;
    }
    $106 = $86 + 1 | 0; //@line 7586
    HEAP32[$4 >> 2] = $106; //@line 7587
    $107 = $$1202$in$i & 255; //@line 7588
    if (!($107 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 7591
    } else {
     $$045$i$i = $107; //@line 7593
     $$06$i$i = 0; //@line 7593
     $112 = $106; //@line 7593
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 7595
      $112$looptemp = $112;
      $112 = $112 + 1 | 0; //@line 7597
      HEAP32[$4 >> 2] = $112; //@line 7598
      $115 = $$06$i$i << 8 | HEAPU8[$112$looptemp >> 0]; //@line 7601
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $115; //@line 7604
       break;
      } else {
       $$06$i$i = $115; //@line 7607
      }
     }
    }
    HEAP32[$28 >> 2] = $$0$lcssa$i$i; //@line 7611
    $$reg2mem$0 = $57; //@line 7612
   }
   if ((label | 0) == 14) {
    $78 = HEAP32[$16 >> 2] | 0; //@line 7615
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(88) | 0; //@line 7616
    $79 = FUNCTION_TABLE_ii[$78 & 15](68) | 0; //@line 7617
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 7620
     $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 7621
     HEAP32[$80 >> 2] = $2; //@line 7622
     $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 7623
     HEAP32[$81 >> 2] = $4; //@line 7624
     $82 = $ReallocAsyncCtx3 + 12 | 0; //@line 7625
     HEAP32[$82 >> 2] = $$1202$in$i; //@line 7626
     $83 = $ReallocAsyncCtx3 + 16 | 0; //@line 7627
     HEAP32[$83 >> 2] = $57; //@line 7628
     $84 = $ReallocAsyncCtx3 + 20 | 0; //@line 7629
     HEAP16[$84 >> 1] = $$1202$i; //@line 7630
     $85 = $ReallocAsyncCtx3 + 24 | 0; //@line 7631
     HEAP32[$85 >> 2] = $86; //@line 7632
     $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 7633
     HEAP32[$87 >> 2] = $6; //@line 7634
     $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 7635
     HEAP32[$88 >> 2] = $8; //@line 7636
     $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 7637
     HEAP32[$89 >> 2] = $10; //@line 7638
     $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 7639
     HEAP32[$90 >> 2] = $12; //@line 7640
     $91 = $ReallocAsyncCtx3 + 44 | 0; //@line 7641
     HEAP32[$91 >> 2] = $14; //@line 7642
     $92 = $ReallocAsyncCtx3 + 48 | 0; //@line 7643
     HEAP16[$92 >> 1] = $75; //@line 7644
     $93 = $ReallocAsyncCtx3 + 52 | 0; //@line 7645
     HEAP32[$93 >> 2] = $16; //@line 7646
     $94 = $ReallocAsyncCtx3 + 56 | 0; //@line 7647
     HEAP32[$94 >> 2] = $18; //@line 7648
     $95 = $ReallocAsyncCtx3 + 60 | 0; //@line 7649
     HEAP32[$95 >> 2] = $20; //@line 7650
     $96 = $ReallocAsyncCtx3 + 64 | 0; //@line 7651
     HEAP16[$96 >> 1] = $trunc$i; //@line 7652
     $97 = $ReallocAsyncCtx3 + 68 | 0; //@line 7653
     HEAP32[$97 >> 2] = $22; //@line 7654
     $98 = $ReallocAsyncCtx3 + 72 | 0; //@line 7655
     HEAP32[$98 >> 2] = $24; //@line 7656
     $99 = $ReallocAsyncCtx3 + 76 | 0; //@line 7657
     HEAP32[$99 >> 2] = $26; //@line 7658
     $100 = $ReallocAsyncCtx3 + 80 | 0; //@line 7659
     HEAP32[$100 >> 2] = $28; //@line 7660
     $101 = $ReallocAsyncCtx3 + 84 | 0; //@line 7661
     HEAP32[$101 >> 2] = $30; //@line 7662
     sp = STACKTOP; //@line 7663
     return;
    }
    HEAP32[___async_retval >> 2] = $79; //@line 7667
    ___async_unwind = 0; //@line 7668
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 7669
    $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 7670
    HEAP32[$80 >> 2] = $2; //@line 7671
    $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 7672
    HEAP32[$81 >> 2] = $4; //@line 7673
    $82 = $ReallocAsyncCtx3 + 12 | 0; //@line 7674
    HEAP32[$82 >> 2] = $$1202$in$i; //@line 7675
    $83 = $ReallocAsyncCtx3 + 16 | 0; //@line 7676
    HEAP32[$83 >> 2] = $57; //@line 7677
    $84 = $ReallocAsyncCtx3 + 20 | 0; //@line 7678
    HEAP16[$84 >> 1] = $$1202$i; //@line 7679
    $85 = $ReallocAsyncCtx3 + 24 | 0; //@line 7680
    HEAP32[$85 >> 2] = $86; //@line 7681
    $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 7682
    HEAP32[$87 >> 2] = $6; //@line 7683
    $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 7684
    HEAP32[$88 >> 2] = $8; //@line 7685
    $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 7686
    HEAP32[$89 >> 2] = $10; //@line 7687
    $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 7688
    HEAP32[$90 >> 2] = $12; //@line 7689
    $91 = $ReallocAsyncCtx3 + 44 | 0; //@line 7690
    HEAP32[$91 >> 2] = $14; //@line 7691
    $92 = $ReallocAsyncCtx3 + 48 | 0; //@line 7692
    HEAP16[$92 >> 1] = $75; //@line 7693
    $93 = $ReallocAsyncCtx3 + 52 | 0; //@line 7694
    HEAP32[$93 >> 2] = $16; //@line 7695
    $94 = $ReallocAsyncCtx3 + 56 | 0; //@line 7696
    HEAP32[$94 >> 2] = $18; //@line 7697
    $95 = $ReallocAsyncCtx3 + 60 | 0; //@line 7698
    HEAP32[$95 >> 2] = $20; //@line 7699
    $96 = $ReallocAsyncCtx3 + 64 | 0; //@line 7700
    HEAP16[$96 >> 1] = $trunc$i; //@line 7701
    $97 = $ReallocAsyncCtx3 + 68 | 0; //@line 7702
    HEAP32[$97 >> 2] = $22; //@line 7703
    $98 = $ReallocAsyncCtx3 + 72 | 0; //@line 7704
    HEAP32[$98 >> 2] = $24; //@line 7705
    $99 = $ReallocAsyncCtx3 + 76 | 0; //@line 7706
    HEAP32[$99 >> 2] = $26; //@line 7707
    $100 = $ReallocAsyncCtx3 + 80 | 0; //@line 7708
    HEAP32[$100 >> 2] = $28; //@line 7709
    $101 = $ReallocAsyncCtx3 + 84 | 0; //@line 7710
    HEAP32[$101 >> 2] = $30; //@line 7711
    sp = STACKTOP; //@line 7712
    return;
   } else if ((label | 0) == 27) {
    $131 = $$1202$in$i & 65535; //@line 7716
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $134 = HEAP32[$2 >> 2] | 0; //@line 7722
    if (HEAP32[$134 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$134 + 2 >> 1] = $$1202$i; //@line 7730
    $139 = $86 + 1 | 0; //@line 7731
    HEAP32[$4 >> 2] = $139; //@line 7732
    $140 = HEAP32[$16 >> 2] | 0; //@line 7733
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 7734
    $141 = FUNCTION_TABLE_ii[$140 & 15]($$1202$i) | 0; //@line 7735
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 7738
     $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 7739
     HEAP32[$142 >> 2] = $2; //@line 7740
     $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 7741
     HEAP32[$143 >> 2] = $4; //@line 7742
     $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 7743
     HEAP32[$144 >> 2] = $6; //@line 7744
     $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 7745
     HEAP32[$145 >> 2] = $8; //@line 7746
     $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 7747
     HEAP32[$146 >> 2] = $10; //@line 7748
     $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 7749
     HEAP32[$147 >> 2] = $12; //@line 7750
     $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 7751
     HEAP32[$148 >> 2] = $14; //@line 7752
     $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 7753
     HEAP32[$149 >> 2] = $16; //@line 7754
     $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 7755
     HEAP32[$150 >> 2] = $18; //@line 7756
     $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 7757
     HEAP32[$151 >> 2] = $20; //@line 7758
     $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 7759
     HEAP32[$152 >> 2] = $22; //@line 7760
     $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 7761
     HEAP32[$153 >> 2] = $24; //@line 7762
     $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 7763
     HEAP32[$154 >> 2] = $26; //@line 7764
     $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 7765
     HEAP32[$155 >> 2] = $28; //@line 7766
     $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 7767
     HEAP32[$156 >> 2] = $30; //@line 7768
     $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 7769
     HEAP32[$157 >> 2] = $57; //@line 7770
     $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 7771
     HEAP32[$158 >> 2] = $139; //@line 7772
     $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 7773
     HEAP32[$159 >> 2] = $131; //@line 7774
     sp = STACKTOP; //@line 7775
     return;
    }
    HEAP32[___async_retval >> 2] = $141; //@line 7779
    ___async_unwind = 0; //@line 7780
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 7781
    $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 7782
    HEAP32[$142 >> 2] = $2; //@line 7783
    $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 7784
    HEAP32[$143 >> 2] = $4; //@line 7785
    $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 7786
    HEAP32[$144 >> 2] = $6; //@line 7787
    $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 7788
    HEAP32[$145 >> 2] = $8; //@line 7789
    $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 7790
    HEAP32[$146 >> 2] = $10; //@line 7791
    $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 7792
    HEAP32[$147 >> 2] = $12; //@line 7793
    $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 7794
    HEAP32[$148 >> 2] = $14; //@line 7795
    $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 7796
    HEAP32[$149 >> 2] = $16; //@line 7797
    $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 7798
    HEAP32[$150 >> 2] = $18; //@line 7799
    $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 7800
    HEAP32[$151 >> 2] = $20; //@line 7801
    $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 7802
    HEAP32[$152 >> 2] = $22; //@line 7803
    $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 7804
    HEAP32[$153 >> 2] = $24; //@line 7805
    $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 7806
    HEAP32[$154 >> 2] = $26; //@line 7807
    $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 7808
    HEAP32[$155 >> 2] = $28; //@line 7809
    $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 7810
    HEAP32[$156 >> 2] = $30; //@line 7811
    $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 7812
    HEAP32[$157 >> 2] = $57; //@line 7813
    $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 7814
    HEAP32[$158 >> 2] = $139; //@line 7815
    $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 7816
    HEAP32[$159 >> 2] = $131; //@line 7817
    sp = STACKTOP; //@line 7818
    return;
   } else if ((label | 0) == 32) {
    $161 = HEAP32[$2 >> 2] | 0; //@line 7822
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 7824
    $163 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $161 + 48 | 0, $161, 4, $$1202$i) | 0; //@line 7825
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 7828
     $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 7829
     HEAP32[$164 >> 2] = $2; //@line 7830
     $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 7831
     HEAP32[$165 >> 2] = $4; //@line 7832
     $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 7833
     HEAP32[$166 >> 2] = $6; //@line 7834
     $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 7835
     HEAP32[$167 >> 2] = $8; //@line 7836
     $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 7837
     HEAP32[$168 >> 2] = $10; //@line 7838
     $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 7839
     HEAP32[$169 >> 2] = $12; //@line 7840
     $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 7841
     HEAP32[$170 >> 2] = $14; //@line 7842
     $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 7843
     HEAP32[$171 >> 2] = $16; //@line 7844
     $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 7845
     HEAP32[$172 >> 2] = $18; //@line 7846
     $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 7847
     HEAP32[$173 >> 2] = $20; //@line 7848
     $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 7849
     HEAP32[$174 >> 2] = $22; //@line 7850
     $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 7851
     HEAP32[$175 >> 2] = $24; //@line 7852
     $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 7853
     HEAP32[$176 >> 2] = $26; //@line 7854
     $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 7855
     HEAP32[$177 >> 2] = $28; //@line 7856
     $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 7857
     HEAP32[$178 >> 2] = $30; //@line 7858
     $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 7859
     HEAP32[$179 >> 2] = $57; //@line 7860
     sp = STACKTOP; //@line 7861
     return;
    }
    HEAP8[___async_retval >> 0] = $163; //@line 7865
    ___async_unwind = 0; //@line 7866
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 7867
    $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 7868
    HEAP32[$164 >> 2] = $2; //@line 7869
    $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 7870
    HEAP32[$165 >> 2] = $4; //@line 7871
    $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 7872
    HEAP32[$166 >> 2] = $6; //@line 7873
    $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 7874
    HEAP32[$167 >> 2] = $8; //@line 7875
    $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 7876
    HEAP32[$168 >> 2] = $10; //@line 7877
    $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 7878
    HEAP32[$169 >> 2] = $12; //@line 7879
    $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 7880
    HEAP32[$170 >> 2] = $14; //@line 7881
    $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 7882
    HEAP32[$171 >> 2] = $16; //@line 7883
    $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 7884
    HEAP32[$172 >> 2] = $18; //@line 7885
    $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 7886
    HEAP32[$173 >> 2] = $20; //@line 7887
    $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 7888
    HEAP32[$174 >> 2] = $22; //@line 7889
    $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 7890
    HEAP32[$175 >> 2] = $24; //@line 7891
    $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 7892
    HEAP32[$176 >> 2] = $26; //@line 7893
    $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 7894
    HEAP32[$177 >> 2] = $28; //@line 7895
    $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 7896
    HEAP32[$178 >> 2] = $30; //@line 7897
    $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 7898
    HEAP32[$179 >> 2] = $57; //@line 7899
    sp = STACKTOP; //@line 7900
    return;
   } else if ((label | 0) == 36) {
    $182 = $$1202$in$i & 65535; //@line 7904
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $185 = HEAP32[$2 >> 2] | 0; //@line 7910
    if (HEAP32[$185 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$185 + 4 >> 1] = $$1202$i; //@line 7918
    $190 = $86 + 1 | 0; //@line 7919
    HEAP32[$4 >> 2] = $190; //@line 7920
    $191 = HEAP32[$16 >> 2] | 0; //@line 7921
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 7922
    $192 = FUNCTION_TABLE_ii[$191 & 15]($$1202$i) | 0; //@line 7923
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 7926
     $193 = $ReallocAsyncCtx5 + 4 | 0; //@line 7927
     HEAP32[$193 >> 2] = $2; //@line 7928
     $194 = $ReallocAsyncCtx5 + 8 | 0; //@line 7929
     HEAP32[$194 >> 2] = $4; //@line 7930
     $195 = $ReallocAsyncCtx5 + 12 | 0; //@line 7931
     HEAP32[$195 >> 2] = $6; //@line 7932
     $196 = $ReallocAsyncCtx5 + 16 | 0; //@line 7933
     HEAP32[$196 >> 2] = $8; //@line 7934
     $197 = $ReallocAsyncCtx5 + 20 | 0; //@line 7935
     HEAP32[$197 >> 2] = $10; //@line 7936
     $198 = $ReallocAsyncCtx5 + 24 | 0; //@line 7937
     HEAP32[$198 >> 2] = $12; //@line 7938
     $199 = $ReallocAsyncCtx5 + 28 | 0; //@line 7939
     HEAP32[$199 >> 2] = $14; //@line 7940
     $200 = $ReallocAsyncCtx5 + 32 | 0; //@line 7941
     HEAP32[$200 >> 2] = $16; //@line 7942
     $201 = $ReallocAsyncCtx5 + 36 | 0; //@line 7943
     HEAP32[$201 >> 2] = $18; //@line 7944
     $202 = $ReallocAsyncCtx5 + 40 | 0; //@line 7945
     HEAP32[$202 >> 2] = $20; //@line 7946
     $203 = $ReallocAsyncCtx5 + 44 | 0; //@line 7947
     HEAP32[$203 >> 2] = $22; //@line 7948
     $204 = $ReallocAsyncCtx5 + 48 | 0; //@line 7949
     HEAP32[$204 >> 2] = $24; //@line 7950
     $205 = $ReallocAsyncCtx5 + 52 | 0; //@line 7951
     HEAP32[$205 >> 2] = $26; //@line 7952
     $206 = $ReallocAsyncCtx5 + 56 | 0; //@line 7953
     HEAP32[$206 >> 2] = $28; //@line 7954
     $207 = $ReallocAsyncCtx5 + 60 | 0; //@line 7955
     HEAP32[$207 >> 2] = $30; //@line 7956
     $208 = $ReallocAsyncCtx5 + 64 | 0; //@line 7957
     HEAP32[$208 >> 2] = $57; //@line 7958
     $209 = $ReallocAsyncCtx5 + 68 | 0; //@line 7959
     HEAP32[$209 >> 2] = $190; //@line 7960
     $210 = $ReallocAsyncCtx5 + 72 | 0; //@line 7961
     HEAP32[$210 >> 2] = $182; //@line 7962
     sp = STACKTOP; //@line 7963
     return;
    }
    HEAP32[___async_retval >> 2] = $192; //@line 7967
    ___async_unwind = 0; //@line 7968
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 7969
    $193 = $ReallocAsyncCtx5 + 4 | 0; //@line 7970
    HEAP32[$193 >> 2] = $2; //@line 7971
    $194 = $ReallocAsyncCtx5 + 8 | 0; //@line 7972
    HEAP32[$194 >> 2] = $4; //@line 7973
    $195 = $ReallocAsyncCtx5 + 12 | 0; //@line 7974
    HEAP32[$195 >> 2] = $6; //@line 7975
    $196 = $ReallocAsyncCtx5 + 16 | 0; //@line 7976
    HEAP32[$196 >> 2] = $8; //@line 7977
    $197 = $ReallocAsyncCtx5 + 20 | 0; //@line 7978
    HEAP32[$197 >> 2] = $10; //@line 7979
    $198 = $ReallocAsyncCtx5 + 24 | 0; //@line 7980
    HEAP32[$198 >> 2] = $12; //@line 7981
    $199 = $ReallocAsyncCtx5 + 28 | 0; //@line 7982
    HEAP32[$199 >> 2] = $14; //@line 7983
    $200 = $ReallocAsyncCtx5 + 32 | 0; //@line 7984
    HEAP32[$200 >> 2] = $16; //@line 7985
    $201 = $ReallocAsyncCtx5 + 36 | 0; //@line 7986
    HEAP32[$201 >> 2] = $18; //@line 7987
    $202 = $ReallocAsyncCtx5 + 40 | 0; //@line 7988
    HEAP32[$202 >> 2] = $20; //@line 7989
    $203 = $ReallocAsyncCtx5 + 44 | 0; //@line 7990
    HEAP32[$203 >> 2] = $22; //@line 7991
    $204 = $ReallocAsyncCtx5 + 48 | 0; //@line 7992
    HEAP32[$204 >> 2] = $24; //@line 7993
    $205 = $ReallocAsyncCtx5 + 52 | 0; //@line 7994
    HEAP32[$205 >> 2] = $26; //@line 7995
    $206 = $ReallocAsyncCtx5 + 56 | 0; //@line 7996
    HEAP32[$206 >> 2] = $28; //@line 7997
    $207 = $ReallocAsyncCtx5 + 60 | 0; //@line 7998
    HEAP32[$207 >> 2] = $30; //@line 7999
    $208 = $ReallocAsyncCtx5 + 64 | 0; //@line 8000
    HEAP32[$208 >> 2] = $57; //@line 8001
    $209 = $ReallocAsyncCtx5 + 68 | 0; //@line 8002
    HEAP32[$209 >> 2] = $190; //@line 8003
    $210 = $ReallocAsyncCtx5 + 72 | 0; //@line 8004
    HEAP32[$210 >> 2] = $182; //@line 8005
    sp = STACKTOP; //@line 8006
    return;
   } else if ((label | 0) == 41) {
    $212 = HEAP32[$2 >> 2] | 0; //@line 8010
    $213 = $212 + 56 | 0; //@line 8011
    if (HEAP32[$213 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 8018
    $217 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $213, $212 + 6 | 0, 8, $$1202$i) | 0; //@line 8019
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 8022
     $218 = $ReallocAsyncCtx9 + 4 | 0; //@line 8023
     HEAP32[$218 >> 2] = $2; //@line 8024
     $219 = $ReallocAsyncCtx9 + 8 | 0; //@line 8025
     HEAP32[$219 >> 2] = $4; //@line 8026
     $220 = $ReallocAsyncCtx9 + 12 | 0; //@line 8027
     HEAP32[$220 >> 2] = $6; //@line 8028
     $221 = $ReallocAsyncCtx9 + 16 | 0; //@line 8029
     HEAP32[$221 >> 2] = $8; //@line 8030
     $222 = $ReallocAsyncCtx9 + 20 | 0; //@line 8031
     HEAP32[$222 >> 2] = $10; //@line 8032
     $223 = $ReallocAsyncCtx9 + 24 | 0; //@line 8033
     HEAP32[$223 >> 2] = $12; //@line 8034
     $224 = $ReallocAsyncCtx9 + 28 | 0; //@line 8035
     HEAP32[$224 >> 2] = $14; //@line 8036
     $225 = $ReallocAsyncCtx9 + 32 | 0; //@line 8037
     HEAP32[$225 >> 2] = $16; //@line 8038
     $226 = $ReallocAsyncCtx9 + 36 | 0; //@line 8039
     HEAP32[$226 >> 2] = $18; //@line 8040
     $227 = $ReallocAsyncCtx9 + 40 | 0; //@line 8041
     HEAP32[$227 >> 2] = $20; //@line 8042
     $228 = $ReallocAsyncCtx9 + 44 | 0; //@line 8043
     HEAP32[$228 >> 2] = $22; //@line 8044
     $229 = $ReallocAsyncCtx9 + 48 | 0; //@line 8045
     HEAP32[$229 >> 2] = $24; //@line 8046
     $230 = $ReallocAsyncCtx9 + 52 | 0; //@line 8047
     HEAP32[$230 >> 2] = $26; //@line 8048
     $231 = $ReallocAsyncCtx9 + 56 | 0; //@line 8049
     HEAP32[$231 >> 2] = $28; //@line 8050
     $232 = $ReallocAsyncCtx9 + 60 | 0; //@line 8051
     HEAP32[$232 >> 2] = $30; //@line 8052
     $233 = $ReallocAsyncCtx9 + 64 | 0; //@line 8053
     HEAP32[$233 >> 2] = $57; //@line 8054
     sp = STACKTOP; //@line 8055
     return;
    }
    HEAP8[___async_retval >> 0] = $217; //@line 8059
    ___async_unwind = 0; //@line 8060
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 8061
    $218 = $ReallocAsyncCtx9 + 4 | 0; //@line 8062
    HEAP32[$218 >> 2] = $2; //@line 8063
    $219 = $ReallocAsyncCtx9 + 8 | 0; //@line 8064
    HEAP32[$219 >> 2] = $4; //@line 8065
    $220 = $ReallocAsyncCtx9 + 12 | 0; //@line 8066
    HEAP32[$220 >> 2] = $6; //@line 8067
    $221 = $ReallocAsyncCtx9 + 16 | 0; //@line 8068
    HEAP32[$221 >> 2] = $8; //@line 8069
    $222 = $ReallocAsyncCtx9 + 20 | 0; //@line 8070
    HEAP32[$222 >> 2] = $10; //@line 8071
    $223 = $ReallocAsyncCtx9 + 24 | 0; //@line 8072
    HEAP32[$223 >> 2] = $12; //@line 8073
    $224 = $ReallocAsyncCtx9 + 28 | 0; //@line 8074
    HEAP32[$224 >> 2] = $14; //@line 8075
    $225 = $ReallocAsyncCtx9 + 32 | 0; //@line 8076
    HEAP32[$225 >> 2] = $16; //@line 8077
    $226 = $ReallocAsyncCtx9 + 36 | 0; //@line 8078
    HEAP32[$226 >> 2] = $18; //@line 8079
    $227 = $ReallocAsyncCtx9 + 40 | 0; //@line 8080
    HEAP32[$227 >> 2] = $20; //@line 8081
    $228 = $ReallocAsyncCtx9 + 44 | 0; //@line 8082
    HEAP32[$228 >> 2] = $22; //@line 8083
    $229 = $ReallocAsyncCtx9 + 48 | 0; //@line 8084
    HEAP32[$229 >> 2] = $24; //@line 8085
    $230 = $ReallocAsyncCtx9 + 52 | 0; //@line 8086
    HEAP32[$230 >> 2] = $26; //@line 8087
    $231 = $ReallocAsyncCtx9 + 56 | 0; //@line 8088
    HEAP32[$231 >> 2] = $28; //@line 8089
    $232 = $ReallocAsyncCtx9 + 60 | 0; //@line 8090
    HEAP32[$232 >> 2] = $30; //@line 8091
    $233 = $ReallocAsyncCtx9 + 64 | 0; //@line 8092
    HEAP32[$233 >> 2] = $57; //@line 8093
    sp = STACKTOP; //@line 8094
    return;
   } else if ((label | 0) == 50) {
    $251 = HEAP32[$2 >> 2] | 0; //@line 8098
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 8101
    $254 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $251 + 60 | 0, $251 + 8 | 0, 20, $$1202$i) | 0; //@line 8102
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 8105
     $255 = $ReallocAsyncCtx8 + 4 | 0; //@line 8106
     HEAP32[$255 >> 2] = $2; //@line 8107
     $256 = $ReallocAsyncCtx8 + 8 | 0; //@line 8108
     HEAP32[$256 >> 2] = $4; //@line 8109
     $257 = $ReallocAsyncCtx8 + 12 | 0; //@line 8110
     HEAP32[$257 >> 2] = $6; //@line 8111
     $258 = $ReallocAsyncCtx8 + 16 | 0; //@line 8112
     HEAP32[$258 >> 2] = $8; //@line 8113
     $259 = $ReallocAsyncCtx8 + 20 | 0; //@line 8114
     HEAP32[$259 >> 2] = $10; //@line 8115
     $260 = $ReallocAsyncCtx8 + 24 | 0; //@line 8116
     HEAP32[$260 >> 2] = $12; //@line 8117
     $261 = $ReallocAsyncCtx8 + 28 | 0; //@line 8118
     HEAP32[$261 >> 2] = $14; //@line 8119
     $262 = $ReallocAsyncCtx8 + 32 | 0; //@line 8120
     HEAP32[$262 >> 2] = $16; //@line 8121
     $263 = $ReallocAsyncCtx8 + 36 | 0; //@line 8122
     HEAP32[$263 >> 2] = $18; //@line 8123
     $264 = $ReallocAsyncCtx8 + 40 | 0; //@line 8124
     HEAP32[$264 >> 2] = $20; //@line 8125
     $265 = $ReallocAsyncCtx8 + 44 | 0; //@line 8126
     HEAP32[$265 >> 2] = $22; //@line 8127
     $266 = $ReallocAsyncCtx8 + 48 | 0; //@line 8128
     HEAP32[$266 >> 2] = $24; //@line 8129
     $267 = $ReallocAsyncCtx8 + 52 | 0; //@line 8130
     HEAP32[$267 >> 2] = $26; //@line 8131
     $268 = $ReallocAsyncCtx8 + 56 | 0; //@line 8132
     HEAP32[$268 >> 2] = $28; //@line 8133
     $269 = $ReallocAsyncCtx8 + 60 | 0; //@line 8134
     HEAP32[$269 >> 2] = $30; //@line 8135
     $270 = $ReallocAsyncCtx8 + 64 | 0; //@line 8136
     HEAP32[$270 >> 2] = $57; //@line 8137
     sp = STACKTOP; //@line 8138
     return;
    }
    HEAP8[___async_retval >> 0] = $254; //@line 8142
    ___async_unwind = 0; //@line 8143
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 8144
    $255 = $ReallocAsyncCtx8 + 4 | 0; //@line 8145
    HEAP32[$255 >> 2] = $2; //@line 8146
    $256 = $ReallocAsyncCtx8 + 8 | 0; //@line 8147
    HEAP32[$256 >> 2] = $4; //@line 8148
    $257 = $ReallocAsyncCtx8 + 12 | 0; //@line 8149
    HEAP32[$257 >> 2] = $6; //@line 8150
    $258 = $ReallocAsyncCtx8 + 16 | 0; //@line 8151
    HEAP32[$258 >> 2] = $8; //@line 8152
    $259 = $ReallocAsyncCtx8 + 20 | 0; //@line 8153
    HEAP32[$259 >> 2] = $10; //@line 8154
    $260 = $ReallocAsyncCtx8 + 24 | 0; //@line 8155
    HEAP32[$260 >> 2] = $12; //@line 8156
    $261 = $ReallocAsyncCtx8 + 28 | 0; //@line 8157
    HEAP32[$261 >> 2] = $14; //@line 8158
    $262 = $ReallocAsyncCtx8 + 32 | 0; //@line 8159
    HEAP32[$262 >> 2] = $16; //@line 8160
    $263 = $ReallocAsyncCtx8 + 36 | 0; //@line 8161
    HEAP32[$263 >> 2] = $18; //@line 8162
    $264 = $ReallocAsyncCtx8 + 40 | 0; //@line 8163
    HEAP32[$264 >> 2] = $20; //@line 8164
    $265 = $ReallocAsyncCtx8 + 44 | 0; //@line 8165
    HEAP32[$265 >> 2] = $22; //@line 8166
    $266 = $ReallocAsyncCtx8 + 48 | 0; //@line 8167
    HEAP32[$266 >> 2] = $24; //@line 8168
    $267 = $ReallocAsyncCtx8 + 52 | 0; //@line 8169
    HEAP32[$267 >> 2] = $26; //@line 8170
    $268 = $ReallocAsyncCtx8 + 56 | 0; //@line 8171
    HEAP32[$268 >> 2] = $28; //@line 8172
    $269 = $ReallocAsyncCtx8 + 60 | 0; //@line 8173
    HEAP32[$269 >> 2] = $30; //@line 8174
    $270 = $ReallocAsyncCtx8 + 64 | 0; //@line 8175
    HEAP32[$270 >> 2] = $57; //@line 8176
    sp = STACKTOP; //@line 8177
    return;
   } else if ((label | 0) == 53) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 8181
    $272 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $18, $20, 11, $$1202$i) | 0; //@line 8182
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 8185
     $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 8186
     HEAP32[$273 >> 2] = $2; //@line 8187
     $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 8188
     HEAP32[$274 >> 2] = $4; //@line 8189
     $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 8190
     HEAP32[$275 >> 2] = $6; //@line 8191
     $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 8192
     HEAP32[$276 >> 2] = $8; //@line 8193
     $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 8194
     HEAP32[$277 >> 2] = $10; //@line 8195
     $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 8196
     HEAP32[$278 >> 2] = $12; //@line 8197
     $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 8198
     HEAP32[$279 >> 2] = $14; //@line 8199
     $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 8200
     HEAP32[$280 >> 2] = $16; //@line 8201
     $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 8202
     HEAP32[$281 >> 2] = $18; //@line 8203
     $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 8204
     HEAP32[$282 >> 2] = $20; //@line 8205
     $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 8206
     HEAP32[$283 >> 2] = $22; //@line 8207
     $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 8208
     HEAP32[$284 >> 2] = $24; //@line 8209
     $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 8210
     HEAP32[$285 >> 2] = $26; //@line 8211
     $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 8212
     HEAP32[$286 >> 2] = $28; //@line 8213
     $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 8214
     HEAP32[$287 >> 2] = $30; //@line 8215
     $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 8216
     HEAP32[$288 >> 2] = $57; //@line 8217
     sp = STACKTOP; //@line 8218
     return;
    }
    HEAP8[___async_retval >> 0] = $272; //@line 8222
    ___async_unwind = 0; //@line 8223
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 8224
    $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 8225
    HEAP32[$273 >> 2] = $2; //@line 8226
    $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 8227
    HEAP32[$274 >> 2] = $4; //@line 8228
    $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 8229
    HEAP32[$275 >> 2] = $6; //@line 8230
    $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 8231
    HEAP32[$276 >> 2] = $8; //@line 8232
    $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 8233
    HEAP32[$277 >> 2] = $10; //@line 8234
    $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 8235
    HEAP32[$278 >> 2] = $12; //@line 8236
    $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 8237
    HEAP32[$279 >> 2] = $14; //@line 8238
    $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 8239
    HEAP32[$280 >> 2] = $16; //@line 8240
    $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 8241
    HEAP32[$281 >> 2] = $18; //@line 8242
    $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 8243
    HEAP32[$282 >> 2] = $20; //@line 8244
    $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 8245
    HEAP32[$283 >> 2] = $22; //@line 8246
    $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 8247
    HEAP32[$284 >> 2] = $24; //@line 8248
    $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 8249
    HEAP32[$285 >> 2] = $26; //@line 8250
    $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 8251
    HEAP32[$286 >> 2] = $28; //@line 8252
    $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 8253
    HEAP32[$287 >> 2] = $30; //@line 8254
    $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 8255
    HEAP32[$288 >> 2] = $57; //@line 8256
    sp = STACKTOP; //@line 8257
    return;
   } else if ((label | 0) == 61) {
    $306 = HEAP32[$2 >> 2] | 0; //@line 8261
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 8264
    $309 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $306 + 64 | 0, $306 + 10 | 0, 15, $$1202$i) | 0; //@line 8265
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 8268
     $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 8269
     HEAP32[$310 >> 2] = $2; //@line 8270
     $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 8271
     HEAP32[$311 >> 2] = $4; //@line 8272
     $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 8273
     HEAP32[$312 >> 2] = $6; //@line 8274
     $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 8275
     HEAP32[$313 >> 2] = $8; //@line 8276
     $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 8277
     HEAP32[$314 >> 2] = $10; //@line 8278
     $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 8279
     HEAP32[$315 >> 2] = $12; //@line 8280
     $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 8281
     HEAP32[$316 >> 2] = $14; //@line 8282
     $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 8283
     HEAP32[$317 >> 2] = $16; //@line 8284
     $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 8285
     HEAP32[$318 >> 2] = $18; //@line 8286
     $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 8287
     HEAP32[$319 >> 2] = $20; //@line 8288
     $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 8289
     HEAP32[$320 >> 2] = $22; //@line 8290
     $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 8291
     HEAP32[$321 >> 2] = $24; //@line 8292
     $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 8293
     HEAP32[$322 >> 2] = $26; //@line 8294
     $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 8295
     HEAP32[$323 >> 2] = $28; //@line 8296
     $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 8297
     HEAP32[$324 >> 2] = $30; //@line 8298
     $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 8299
     HEAP32[$325 >> 2] = $57; //@line 8300
     sp = STACKTOP; //@line 8301
     return;
    }
    HEAP8[___async_retval >> 0] = $309; //@line 8305
    ___async_unwind = 0; //@line 8306
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 8307
    $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 8308
    HEAP32[$310 >> 2] = $2; //@line 8309
    $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 8310
    HEAP32[$311 >> 2] = $4; //@line 8311
    $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 8312
    HEAP32[$312 >> 2] = $6; //@line 8313
    $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 8314
    HEAP32[$313 >> 2] = $8; //@line 8315
    $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 8316
    HEAP32[$314 >> 2] = $10; //@line 8317
    $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 8318
    HEAP32[$315 >> 2] = $12; //@line 8319
    $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 8320
    HEAP32[$316 >> 2] = $14; //@line 8321
    $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 8322
    HEAP32[$317 >> 2] = $16; //@line 8323
    $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 8324
    HEAP32[$318 >> 2] = $18; //@line 8325
    $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 8326
    HEAP32[$319 >> 2] = $20; //@line 8327
    $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 8328
    HEAP32[$320 >> 2] = $22; //@line 8329
    $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 8330
    HEAP32[$321 >> 2] = $24; //@line 8331
    $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 8332
    HEAP32[$322 >> 2] = $26; //@line 8333
    $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 8334
    HEAP32[$323 >> 2] = $28; //@line 8335
    $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 8336
    HEAP32[$324 >> 2] = $30; //@line 8337
    $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 8338
    HEAP32[$325 >> 2] = $57; //@line 8339
    sp = STACKTOP; //@line 8340
    return;
   } else if ((label | 0) == 91) {
    if (($37 - $8 | 0) >= ($10 | 0)) {
     $436 = ___async_retval; //@line 8348
     HEAP32[$436 >> 2] = $22; //@line 8349
     return;
    }
    if ((HEAP8[$37 >> 0] | 0) == -1) {
     $426 = $37 + 1 | 0; //@line 8355
     HEAP32[$4 >> 2] = $426; //@line 8356
     $427 = $426; //@line 8357
     $429 = $8 - $427 + $10 | 0; //@line 8359
     HEAP16[$26 + 24 >> 1] = $429; //@line 8362
     if ($429 & 65535 | 0) {
      HEAP32[$26 + 36 >> 2] = $427; //@line 8367
      $436 = ___async_retval; //@line 8368
      HEAP32[$436 >> 2] = $22; //@line 8369
      return;
     }
    }
    HEAP32[$26 + 4 >> 2] = 1; //@line 8374
    $436 = ___async_retval; //@line 8375
    HEAP32[$436 >> 2] = $22; //@line 8376
    return;
   }
  }
 } while (0);
 HEAP32[$26 + 4 >> 2] = 1; //@line 8382
 $436 = ___async_retval; //@line 8383
 HEAP32[$436 >> 2] = $22; //@line 8384
 return;
}
function _sn_coap_parser__async_cb_24($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $184 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $237 = 0, $24 = 0, $240 = 0, $241 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $296 = 0, $30 = 0, $301 = 0, $304 = 0, $306 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $354 = 0, $357 = 0, $361 = 0, $364 = 0, $365 = 0, $37 = 0, $370 = 0, $373 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $405 = 0, $410 = 0, $413 = 0, $417 = 0, $418 = 0, $426 = 0, $427 = 0, $429 = 0, $436 = 0, $437 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $124$looptemp = 0, $246$looptemp = 0, $301$looptemp = 0, $338$looptemp = 0, $354$looptemp = 0, $370$looptemp = 0, $389$looptemp = 0, $410$looptemp = 0, $112$looptemp = 0;
 sp = STACKTOP; //@line 5622
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5624
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5626
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5628
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5630
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5632
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5634
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5636
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5638
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5640
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5642
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 5644
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 5646
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 5648
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 5650
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 5652
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 64 >> 2] | 0; //@line 5660
   L3 : while (1) {
    $417 = HEAP32[$6 >> 2] | 0; //@line 5662
    $418 = $417 - $8 | 0; //@line 5663
    $37 = $417; //@line 5666
    if (($418 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $418 & 65535) << 16 >> 16)) {
     label = 91; //@line 5673
     break;
    }
    $trunc277$i = HEAP8[$37 >> 0] | 0; //@line 5676
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 91; //@line 5679
     break;
    }
    $40 = $trunc277$i & 15; //@line 5683
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 5684
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$37 + 1 >> 0] | 0; //@line 5696
      $$sink214$i = 13; //@line 5696
      $$sink3$i = 1; //@line 5696
      label = 7; //@line 5697
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$37 + 1 >> 0] << 8) + 269 | 0; //@line 5709
      $$sink214$i = HEAPU8[$37 + 2 >> 0] | 0; //@line 5709
      $$sink3$i = 2; //@line 5709
      label = 7; //@line 5710
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 5714
      $437 = $417; //@line 5714
      $59 = $37; //@line 5714
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 5718
     $54 = $37 + $$sink3$i | 0; //@line 5720
     HEAP32[$4 >> 2] = $54; //@line 5721
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 5723
     $437 = $54; //@line 5723
     $59 = $54; //@line 5723
    }
    $57 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 5726
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$59 + 1 >> 0] | 0; //@line 5737
      $$sink216$i = 13; //@line 5737
      $$sink8$i = 1; //@line 5737
      label = 11; //@line 5738
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$59 + 1 >> 0] << 8) + 269 | 0; //@line 5750
      $$sink216$i = HEAPU8[$59 + 2 >> 0] | 0; //@line 5750
      $$sink8$i = 2; //@line 5750
      label = 11; //@line 5751
      break;
     }
    default:
     {
      $$1202$in$i = $40; //@line 5755
      $74 = $437; //@line 5755
      $86 = $59; //@line 5755
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 5759
     $71 = $59 + $$sink8$i | 0; //@line 5761
     HEAP32[$4 >> 2] = $71; //@line 5762
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 5764
     $74 = $71; //@line 5764
     $86 = $71; //@line 5764
    }
    $$1202$i = $$1202$in$i & 65535; //@line 5766
    $75 = $30 - $74 & 65535; //@line 5768
    $trunc$i = $57 & 65535; //@line 5769
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 53; //@line 5773
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$2 >> 2] | 0)) {
        label = 14; //@line 5781
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 5786
         break L3;
         break;
        }
       case 4:
        {
         label = 32; //@line 5791
         break L3;
         break;
        }
       case 3:
        {
         label = 35; //@line 5796
         break L3;
         break;
        }
       case 8:
        {
         label = 40; //@line 5801
         break L3;
         break;
        }
       case 20:
        {
         label = 50; //@line 5806
         break L3;
         break;
        }
       case 11:
        {
         label = 53; //@line 5811
         break L3;
         break;
        }
       case 15:
        {
         label = 61; //@line 5816
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $118 = $86 + 1 | 0; //@line 5829
         HEAP32[$4 >> 2] = $118; //@line 5830
         $119 = $$1202$in$i & 255; //@line 5831
         if (!($119 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 5834
         } else {
          $$045$i256$i = $119; //@line 5836
          $$06$i255$i = 0; //@line 5836
          $124 = $118; //@line 5836
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 5838
           $124$looptemp = $124;
           $124 = $124 + 1 | 0; //@line 5840
           HEAP32[$4 >> 2] = $124; //@line 5841
           $127 = $$06$i255$i << 8 | HEAPU8[$124$looptemp >> 0]; //@line 5844
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $127; //@line 5847
            break;
           } else {
            $$06$i255$i = $127; //@line 5850
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 5856
         $$reg2mem$0 = $57; //@line 5857
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $237 = (HEAP32[$2 >> 2] | 0) + 28 | 0; //@line 5867
         if ((HEAP32[$237 >> 2] | 0) != -1) {
          break L2;
         }
         $240 = $86 + 1 | 0; //@line 5873
         HEAP32[$4 >> 2] = $240; //@line 5874
         $241 = $$1202$in$i & 255; //@line 5875
         if (!($241 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 5878
         } else {
          $$045$i270$i = $241; //@line 5880
          $$06$i269$i = 0; //@line 5880
          $246 = $240; //@line 5880
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 5882
           $246$looptemp = $246;
           $246 = $246 + 1 | 0; //@line 5884
           HEAP32[$4 >> 2] = $246; //@line 5885
           $249 = $$06$i269$i << 8 | HEAPU8[$246$looptemp >> 0]; //@line 5888
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $249; //@line 5891
            break;
           } else {
            $$06$i269$i = $249; //@line 5894
           }
          }
         }
         HEAP32[$237 >> 2] = $$0$lcssa$i272$i; //@line 5898
         $$reg2mem$0 = $57; //@line 5899
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $292 = (HEAP32[$2 >> 2] | 0) + 32 | 0; //@line 5909
         if ((HEAP32[$292 >> 2] | 0) != -1) {
          break L2;
         }
         $295 = $86 + 1 | 0; //@line 5915
         HEAP32[$4 >> 2] = $295; //@line 5916
         $296 = $$1202$in$i & 255; //@line 5917
         if (!($296 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 5920
         } else {
          $$045$i263$i = $296; //@line 5922
          $$06$i262$i = 0; //@line 5922
          $301 = $295; //@line 5922
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 5924
           $301$looptemp = $301;
           $301 = $301 + 1 | 0; //@line 5926
           HEAP32[$4 >> 2] = $301; //@line 5927
           $304 = $$06$i262$i << 8 | HEAPU8[$301$looptemp >> 0]; //@line 5930
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $304; //@line 5933
            break;
           } else {
            $$06$i262$i = $304; //@line 5936
           }
          }
         }
         HEAP32[$292 >> 2] = $$0$lcssa$i265$i; //@line 5940
         $$reg2mem$0 = $57; //@line 5941
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $329 = (HEAP32[$2 >> 2] | 0) + 40 | 0; //@line 5951
         if ((HEAP32[$329 >> 2] | 0) != -1) {
          break L2;
         }
         $332 = $86 + 1 | 0; //@line 5957
         HEAP32[$4 >> 2] = $332; //@line 5958
         $333 = $$1202$in$i & 255; //@line 5959
         if (!($333 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 5962
         } else {
          $$045$i249$i = $333; //@line 5964
          $$06$i248$i = 0; //@line 5964
          $338 = $332; //@line 5964
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 5966
           $338$looptemp = $338;
           $338 = $338 + 1 | 0; //@line 5968
           HEAP32[$4 >> 2] = $338; //@line 5969
           $341 = $$06$i248$i << 8 | HEAPU8[$338$looptemp >> 0]; //@line 5972
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $341; //@line 5975
            break;
           } else {
            $$06$i248$i = $341; //@line 5978
           }
          }
         }
         HEAP32[$329 >> 2] = $$0$lcssa$i251$i; //@line 5982
         $$reg2mem$0 = $57; //@line 5983
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $345 = (HEAP32[$2 >> 2] | 0) + 36 | 0; //@line 5993
         if ((HEAP32[$345 >> 2] | 0) != -1) {
          break L2;
         }
         $348 = $86 + 1 | 0; //@line 5999
         HEAP32[$4 >> 2] = $348; //@line 6000
         $349 = $$1202$in$i & 255; //@line 6001
         if (!($349 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 6004
         } else {
          $$045$i242$i = $349; //@line 6006
          $$06$i241$i = 0; //@line 6006
          $354 = $348; //@line 6006
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 6008
           $354$looptemp = $354;
           $354 = $354 + 1 | 0; //@line 6010
           HEAP32[$4 >> 2] = $354; //@line 6011
           $357 = $$06$i241$i << 8 | HEAPU8[$354$looptemp >> 0]; //@line 6014
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $357; //@line 6017
            break;
           } else {
            $$06$i241$i = $357; //@line 6020
           }
          }
         }
         HEAP32[$345 >> 2] = $$0$lcssa$i244$i; //@line 6024
         $$reg2mem$0 = $57; //@line 6025
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $361 = (HEAP32[$2 >> 2] | 0) + 12 | 0; //@line 6035
         if ((HEAP32[$361 >> 2] | 0) != -1) {
          break L2;
         }
         $364 = $86 + 1 | 0; //@line 6041
         HEAP32[$4 >> 2] = $364; //@line 6042
         $365 = $$1202$in$i & 255; //@line 6043
         if (!($365 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 6046
         } else {
          $$045$i235$i = $365; //@line 6048
          $$06$i234$i = 0; //@line 6048
          $370 = $364; //@line 6048
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 6050
           $370$looptemp = $370;
           $370 = $370 + 1 | 0; //@line 6052
           HEAP32[$4 >> 2] = $370; //@line 6053
           $373 = $$06$i234$i << 8 | HEAPU8[$370$looptemp >> 0]; //@line 6056
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $373; //@line 6059
            break;
           } else {
            $$06$i234$i = $373; //@line 6062
           }
          }
         }
         HEAP32[$361 >> 2] = $$0$lcssa$i237$i; //@line 6066
         $$reg2mem$0 = $57; //@line 6067
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $377 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 6077
         $378 = HEAP8[$377 >> 0] | 0; //@line 6078
         if ($378 & 1) {
          break L2;
         }
         HEAP8[$377 >> 0] = $378 | 1; //@line 6085
         $383 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 6087
         HEAP32[$4 >> 2] = $383; //@line 6088
         $384 = $$1202$in$i & 255; //@line 6089
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 6092
         } else {
          $$045$i228$i = $384; //@line 6094
          $$06$i227$i = 0; //@line 6094
          $389 = $383; //@line 6094
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 6096
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 6098
           HEAP32[$4 >> 2] = $389; //@line 6099
           $392 = $$06$i227$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 6102
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $392; //@line 6105
            break;
           } else {
            $$06$i227$i = $392; //@line 6108
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 6114
         $$reg2mem$0 = $57; //@line 6115
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $398 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 6125
         $399 = HEAP8[$398 >> 0] | 0; //@line 6126
         if ($399 & 2) {
          break L2;
         }
         HEAP8[$398 >> 0] = $399 | 2; //@line 6133
         $404 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 6135
         HEAP32[$4 >> 2] = $404; //@line 6136
         $405 = $$1202$in$i & 255; //@line 6137
         if (!($405 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 6140
         } else {
          $$045$i221$i = $405; //@line 6142
          $$06$i220$i = 0; //@line 6142
          $410 = $404; //@line 6142
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 6144
           $410$looptemp = $410;
           $410 = $410 + 1 | 0; //@line 6146
           HEAP32[$4 >> 2] = $410; //@line 6147
           $413 = $$06$i220$i << 8 | HEAPU8[$410$looptemp >> 0]; //@line 6150
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $413; //@line 6153
            break;
           } else {
            $$06$i220$i = $413; //@line 6156
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 6162
         $$reg2mem$0 = $57; //@line 6163
         continue L3;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$28 >> 2] | 0) != -1) {
     break L2;
    }
    $106 = $86 + 1 | 0; //@line 6190
    HEAP32[$4 >> 2] = $106; //@line 6191
    $107 = $$1202$in$i & 255; //@line 6192
    if (!($107 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 6195
    } else {
     $$045$i$i = $107; //@line 6197
     $$06$i$i = 0; //@line 6197
     $112 = $106; //@line 6197
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 6199
      $112$looptemp = $112;
      $112 = $112 + 1 | 0; //@line 6201
      HEAP32[$4 >> 2] = $112; //@line 6202
      $115 = $$06$i$i << 8 | HEAPU8[$112$looptemp >> 0]; //@line 6205
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $115; //@line 6208
       break;
      } else {
       $$06$i$i = $115; //@line 6211
      }
     }
    }
    HEAP32[$28 >> 2] = $$0$lcssa$i$i; //@line 6215
    $$reg2mem$0 = $57; //@line 6216
   }
   if ((label | 0) == 14) {
    $78 = HEAP32[$16 >> 2] | 0; //@line 6219
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(88) | 0; //@line 6220
    $79 = FUNCTION_TABLE_ii[$78 & 15](68) | 0; //@line 6221
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 6224
     $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 6225
     HEAP32[$80 >> 2] = $2; //@line 6226
     $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 6227
     HEAP32[$81 >> 2] = $4; //@line 6228
     $82 = $ReallocAsyncCtx3 + 12 | 0; //@line 6229
     HEAP32[$82 >> 2] = $$1202$in$i; //@line 6230
     $83 = $ReallocAsyncCtx3 + 16 | 0; //@line 6231
     HEAP32[$83 >> 2] = $57; //@line 6232
     $84 = $ReallocAsyncCtx3 + 20 | 0; //@line 6233
     HEAP16[$84 >> 1] = $$1202$i; //@line 6234
     $85 = $ReallocAsyncCtx3 + 24 | 0; //@line 6235
     HEAP32[$85 >> 2] = $86; //@line 6236
     $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 6237
     HEAP32[$87 >> 2] = $6; //@line 6238
     $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 6239
     HEAP32[$88 >> 2] = $8; //@line 6240
     $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 6241
     HEAP32[$89 >> 2] = $10; //@line 6242
     $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 6243
     HEAP32[$90 >> 2] = $12; //@line 6244
     $91 = $ReallocAsyncCtx3 + 44 | 0; //@line 6245
     HEAP32[$91 >> 2] = $14; //@line 6246
     $92 = $ReallocAsyncCtx3 + 48 | 0; //@line 6247
     HEAP16[$92 >> 1] = $75; //@line 6248
     $93 = $ReallocAsyncCtx3 + 52 | 0; //@line 6249
     HEAP32[$93 >> 2] = $16; //@line 6250
     $94 = $ReallocAsyncCtx3 + 56 | 0; //@line 6251
     HEAP32[$94 >> 2] = $18; //@line 6252
     $95 = $ReallocAsyncCtx3 + 60 | 0; //@line 6253
     HEAP32[$95 >> 2] = $20; //@line 6254
     $96 = $ReallocAsyncCtx3 + 64 | 0; //@line 6255
     HEAP16[$96 >> 1] = $trunc$i; //@line 6256
     $97 = $ReallocAsyncCtx3 + 68 | 0; //@line 6257
     HEAP32[$97 >> 2] = $22; //@line 6258
     $98 = $ReallocAsyncCtx3 + 72 | 0; //@line 6259
     HEAP32[$98 >> 2] = $24; //@line 6260
     $99 = $ReallocAsyncCtx3 + 76 | 0; //@line 6261
     HEAP32[$99 >> 2] = $26; //@line 6262
     $100 = $ReallocAsyncCtx3 + 80 | 0; //@line 6263
     HEAP32[$100 >> 2] = $28; //@line 6264
     $101 = $ReallocAsyncCtx3 + 84 | 0; //@line 6265
     HEAP32[$101 >> 2] = $30; //@line 6266
     sp = STACKTOP; //@line 6267
     return;
    }
    HEAP32[___async_retval >> 2] = $79; //@line 6271
    ___async_unwind = 0; //@line 6272
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 6273
    $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 6274
    HEAP32[$80 >> 2] = $2; //@line 6275
    $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 6276
    HEAP32[$81 >> 2] = $4; //@line 6277
    $82 = $ReallocAsyncCtx3 + 12 | 0; //@line 6278
    HEAP32[$82 >> 2] = $$1202$in$i; //@line 6279
    $83 = $ReallocAsyncCtx3 + 16 | 0; //@line 6280
    HEAP32[$83 >> 2] = $57; //@line 6281
    $84 = $ReallocAsyncCtx3 + 20 | 0; //@line 6282
    HEAP16[$84 >> 1] = $$1202$i; //@line 6283
    $85 = $ReallocAsyncCtx3 + 24 | 0; //@line 6284
    HEAP32[$85 >> 2] = $86; //@line 6285
    $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 6286
    HEAP32[$87 >> 2] = $6; //@line 6287
    $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 6288
    HEAP32[$88 >> 2] = $8; //@line 6289
    $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 6290
    HEAP32[$89 >> 2] = $10; //@line 6291
    $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 6292
    HEAP32[$90 >> 2] = $12; //@line 6293
    $91 = $ReallocAsyncCtx3 + 44 | 0; //@line 6294
    HEAP32[$91 >> 2] = $14; //@line 6295
    $92 = $ReallocAsyncCtx3 + 48 | 0; //@line 6296
    HEAP16[$92 >> 1] = $75; //@line 6297
    $93 = $ReallocAsyncCtx3 + 52 | 0; //@line 6298
    HEAP32[$93 >> 2] = $16; //@line 6299
    $94 = $ReallocAsyncCtx3 + 56 | 0; //@line 6300
    HEAP32[$94 >> 2] = $18; //@line 6301
    $95 = $ReallocAsyncCtx3 + 60 | 0; //@line 6302
    HEAP32[$95 >> 2] = $20; //@line 6303
    $96 = $ReallocAsyncCtx3 + 64 | 0; //@line 6304
    HEAP16[$96 >> 1] = $trunc$i; //@line 6305
    $97 = $ReallocAsyncCtx3 + 68 | 0; //@line 6306
    HEAP32[$97 >> 2] = $22; //@line 6307
    $98 = $ReallocAsyncCtx3 + 72 | 0; //@line 6308
    HEAP32[$98 >> 2] = $24; //@line 6309
    $99 = $ReallocAsyncCtx3 + 76 | 0; //@line 6310
    HEAP32[$99 >> 2] = $26; //@line 6311
    $100 = $ReallocAsyncCtx3 + 80 | 0; //@line 6312
    HEAP32[$100 >> 2] = $28; //@line 6313
    $101 = $ReallocAsyncCtx3 + 84 | 0; //@line 6314
    HEAP32[$101 >> 2] = $30; //@line 6315
    sp = STACKTOP; //@line 6316
    return;
   } else if ((label | 0) == 27) {
    $131 = $$1202$in$i & 65535; //@line 6320
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $134 = HEAP32[$2 >> 2] | 0; //@line 6326
    if (HEAP32[$134 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$134 + 2 >> 1] = $$1202$i; //@line 6334
    $139 = $86 + 1 | 0; //@line 6335
    HEAP32[$4 >> 2] = $139; //@line 6336
    $140 = HEAP32[$16 >> 2] | 0; //@line 6337
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 6338
    $141 = FUNCTION_TABLE_ii[$140 & 15]($$1202$i) | 0; //@line 6339
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 6342
     $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 6343
     HEAP32[$142 >> 2] = $2; //@line 6344
     $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 6345
     HEAP32[$143 >> 2] = $4; //@line 6346
     $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 6347
     HEAP32[$144 >> 2] = $6; //@line 6348
     $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 6349
     HEAP32[$145 >> 2] = $8; //@line 6350
     $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 6351
     HEAP32[$146 >> 2] = $10; //@line 6352
     $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 6353
     HEAP32[$147 >> 2] = $12; //@line 6354
     $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 6355
     HEAP32[$148 >> 2] = $14; //@line 6356
     $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 6357
     HEAP32[$149 >> 2] = $16; //@line 6358
     $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 6359
     HEAP32[$150 >> 2] = $18; //@line 6360
     $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 6361
     HEAP32[$151 >> 2] = $20; //@line 6362
     $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 6363
     HEAP32[$152 >> 2] = $22; //@line 6364
     $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 6365
     HEAP32[$153 >> 2] = $24; //@line 6366
     $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 6367
     HEAP32[$154 >> 2] = $26; //@line 6368
     $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 6369
     HEAP32[$155 >> 2] = $28; //@line 6370
     $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 6371
     HEAP32[$156 >> 2] = $30; //@line 6372
     $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 6373
     HEAP32[$157 >> 2] = $57; //@line 6374
     $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 6375
     HEAP32[$158 >> 2] = $139; //@line 6376
     $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 6377
     HEAP32[$159 >> 2] = $131; //@line 6378
     sp = STACKTOP; //@line 6379
     return;
    }
    HEAP32[___async_retval >> 2] = $141; //@line 6383
    ___async_unwind = 0; //@line 6384
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 6385
    $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 6386
    HEAP32[$142 >> 2] = $2; //@line 6387
    $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 6388
    HEAP32[$143 >> 2] = $4; //@line 6389
    $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 6390
    HEAP32[$144 >> 2] = $6; //@line 6391
    $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 6392
    HEAP32[$145 >> 2] = $8; //@line 6393
    $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 6394
    HEAP32[$146 >> 2] = $10; //@line 6395
    $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 6396
    HEAP32[$147 >> 2] = $12; //@line 6397
    $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 6398
    HEAP32[$148 >> 2] = $14; //@line 6399
    $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 6400
    HEAP32[$149 >> 2] = $16; //@line 6401
    $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 6402
    HEAP32[$150 >> 2] = $18; //@line 6403
    $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 6404
    HEAP32[$151 >> 2] = $20; //@line 6405
    $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 6406
    HEAP32[$152 >> 2] = $22; //@line 6407
    $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 6408
    HEAP32[$153 >> 2] = $24; //@line 6409
    $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 6410
    HEAP32[$154 >> 2] = $26; //@line 6411
    $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 6412
    HEAP32[$155 >> 2] = $28; //@line 6413
    $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 6414
    HEAP32[$156 >> 2] = $30; //@line 6415
    $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 6416
    HEAP32[$157 >> 2] = $57; //@line 6417
    $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 6418
    HEAP32[$158 >> 2] = $139; //@line 6419
    $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 6420
    HEAP32[$159 >> 2] = $131; //@line 6421
    sp = STACKTOP; //@line 6422
    return;
   } else if ((label | 0) == 32) {
    $161 = HEAP32[$2 >> 2] | 0; //@line 6426
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 6428
    $163 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $161 + 48 | 0, $161, 4, $$1202$i) | 0; //@line 6429
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 6432
     $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 6433
     HEAP32[$164 >> 2] = $2; //@line 6434
     $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 6435
     HEAP32[$165 >> 2] = $4; //@line 6436
     $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 6437
     HEAP32[$166 >> 2] = $6; //@line 6438
     $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 6439
     HEAP32[$167 >> 2] = $8; //@line 6440
     $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 6441
     HEAP32[$168 >> 2] = $10; //@line 6442
     $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 6443
     HEAP32[$169 >> 2] = $12; //@line 6444
     $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 6445
     HEAP32[$170 >> 2] = $14; //@line 6446
     $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 6447
     HEAP32[$171 >> 2] = $16; //@line 6448
     $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 6449
     HEAP32[$172 >> 2] = $18; //@line 6450
     $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 6451
     HEAP32[$173 >> 2] = $20; //@line 6452
     $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 6453
     HEAP32[$174 >> 2] = $22; //@line 6454
     $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 6455
     HEAP32[$175 >> 2] = $24; //@line 6456
     $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 6457
     HEAP32[$176 >> 2] = $26; //@line 6458
     $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 6459
     HEAP32[$177 >> 2] = $28; //@line 6460
     $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 6461
     HEAP32[$178 >> 2] = $30; //@line 6462
     $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 6463
     HEAP32[$179 >> 2] = $57; //@line 6464
     sp = STACKTOP; //@line 6465
     return;
    }
    HEAP8[___async_retval >> 0] = $163; //@line 6469
    ___async_unwind = 0; //@line 6470
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 6471
    $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 6472
    HEAP32[$164 >> 2] = $2; //@line 6473
    $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 6474
    HEAP32[$165 >> 2] = $4; //@line 6475
    $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 6476
    HEAP32[$166 >> 2] = $6; //@line 6477
    $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 6478
    HEAP32[$167 >> 2] = $8; //@line 6479
    $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 6480
    HEAP32[$168 >> 2] = $10; //@line 6481
    $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 6482
    HEAP32[$169 >> 2] = $12; //@line 6483
    $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 6484
    HEAP32[$170 >> 2] = $14; //@line 6485
    $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 6486
    HEAP32[$171 >> 2] = $16; //@line 6487
    $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 6488
    HEAP32[$172 >> 2] = $18; //@line 6489
    $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 6490
    HEAP32[$173 >> 2] = $20; //@line 6491
    $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 6492
    HEAP32[$174 >> 2] = $22; //@line 6493
    $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 6494
    HEAP32[$175 >> 2] = $24; //@line 6495
    $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 6496
    HEAP32[$176 >> 2] = $26; //@line 6497
    $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 6498
    HEAP32[$177 >> 2] = $28; //@line 6499
    $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 6500
    HEAP32[$178 >> 2] = $30; //@line 6501
    $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 6502
    HEAP32[$179 >> 2] = $57; //@line 6503
    sp = STACKTOP; //@line 6504
    return;
   } else if ((label | 0) == 35) {
    $181 = $$1202$in$i & 65535; //@line 6508
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $184 = HEAP32[$2 >> 2] | 0; //@line 6514
    if (HEAP32[$184 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$184 + 4 >> 1] = $$1202$i; //@line 6522
    $189 = $86 + 1 | 0; //@line 6523
    HEAP32[$4 >> 2] = $189; //@line 6524
    $190 = HEAP32[$16 >> 2] | 0; //@line 6525
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 6526
    $191 = FUNCTION_TABLE_ii[$190 & 15]($$1202$i) | 0; //@line 6527
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 6530
     $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 6531
     HEAP32[$192 >> 2] = $2; //@line 6532
     $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 6533
     HEAP32[$193 >> 2] = $4; //@line 6534
     $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 6535
     HEAP32[$194 >> 2] = $6; //@line 6536
     $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 6537
     HEAP32[$195 >> 2] = $8; //@line 6538
     $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 6539
     HEAP32[$196 >> 2] = $10; //@line 6540
     $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 6541
     HEAP32[$197 >> 2] = $12; //@line 6542
     $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 6543
     HEAP32[$198 >> 2] = $14; //@line 6544
     $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 6545
     HEAP32[$199 >> 2] = $16; //@line 6546
     $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 6547
     HEAP32[$200 >> 2] = $18; //@line 6548
     $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 6549
     HEAP32[$201 >> 2] = $20; //@line 6550
     $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 6551
     HEAP32[$202 >> 2] = $22; //@line 6552
     $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 6553
     HEAP32[$203 >> 2] = $24; //@line 6554
     $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 6555
     HEAP32[$204 >> 2] = $26; //@line 6556
     $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 6557
     HEAP32[$205 >> 2] = $28; //@line 6558
     $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 6559
     HEAP32[$206 >> 2] = $30; //@line 6560
     $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 6561
     HEAP32[$207 >> 2] = $57; //@line 6562
     $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 6563
     HEAP32[$208 >> 2] = $189; //@line 6564
     $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 6565
     HEAP32[$209 >> 2] = $181; //@line 6566
     sp = STACKTOP; //@line 6567
     return;
    }
    HEAP32[___async_retval >> 2] = $191; //@line 6571
    ___async_unwind = 0; //@line 6572
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 6573
    $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 6574
    HEAP32[$192 >> 2] = $2; //@line 6575
    $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 6576
    HEAP32[$193 >> 2] = $4; //@line 6577
    $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 6578
    HEAP32[$194 >> 2] = $6; //@line 6579
    $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 6580
    HEAP32[$195 >> 2] = $8; //@line 6581
    $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 6582
    HEAP32[$196 >> 2] = $10; //@line 6583
    $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 6584
    HEAP32[$197 >> 2] = $12; //@line 6585
    $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 6586
    HEAP32[$198 >> 2] = $14; //@line 6587
    $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 6588
    HEAP32[$199 >> 2] = $16; //@line 6589
    $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 6590
    HEAP32[$200 >> 2] = $18; //@line 6591
    $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 6592
    HEAP32[$201 >> 2] = $20; //@line 6593
    $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 6594
    HEAP32[$202 >> 2] = $22; //@line 6595
    $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 6596
    HEAP32[$203 >> 2] = $24; //@line 6597
    $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 6598
    HEAP32[$204 >> 2] = $26; //@line 6599
    $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 6600
    HEAP32[$205 >> 2] = $28; //@line 6601
    $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 6602
    HEAP32[$206 >> 2] = $30; //@line 6603
    $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 6604
    HEAP32[$207 >> 2] = $57; //@line 6605
    $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 6606
    HEAP32[$208 >> 2] = $189; //@line 6607
    $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 6608
    HEAP32[$209 >> 2] = $181; //@line 6609
    sp = STACKTOP; //@line 6610
    return;
   } else if ((label | 0) == 40) {
    $211 = HEAP32[$2 >> 2] | 0; //@line 6614
    $212 = $211 + 56 | 0; //@line 6615
    if (HEAP32[$212 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 6622
    $216 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $212, $211 + 6 | 0, 8, $$1202$i) | 0; //@line 6623
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 6626
     $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 6627
     HEAP32[$217 >> 2] = $2; //@line 6628
     $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 6629
     HEAP32[$218 >> 2] = $4; //@line 6630
     $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 6631
     HEAP32[$219 >> 2] = $6; //@line 6632
     $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 6633
     HEAP32[$220 >> 2] = $8; //@line 6634
     $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 6635
     HEAP32[$221 >> 2] = $10; //@line 6636
     $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 6637
     HEAP32[$222 >> 2] = $12; //@line 6638
     $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 6639
     HEAP32[$223 >> 2] = $14; //@line 6640
     $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 6641
     HEAP32[$224 >> 2] = $16; //@line 6642
     $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 6643
     HEAP32[$225 >> 2] = $18; //@line 6644
     $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 6645
     HEAP32[$226 >> 2] = $20; //@line 6646
     $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 6647
     HEAP32[$227 >> 2] = $22; //@line 6648
     $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 6649
     HEAP32[$228 >> 2] = $24; //@line 6650
     $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 6651
     HEAP32[$229 >> 2] = $26; //@line 6652
     $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 6653
     HEAP32[$230 >> 2] = $28; //@line 6654
     $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 6655
     HEAP32[$231 >> 2] = $30; //@line 6656
     $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 6657
     HEAP32[$232 >> 2] = $57; //@line 6658
     sp = STACKTOP; //@line 6659
     return;
    }
    HEAP8[___async_retval >> 0] = $216; //@line 6663
    ___async_unwind = 0; //@line 6664
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 6665
    $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 6666
    HEAP32[$217 >> 2] = $2; //@line 6667
    $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 6668
    HEAP32[$218 >> 2] = $4; //@line 6669
    $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 6670
    HEAP32[$219 >> 2] = $6; //@line 6671
    $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 6672
    HEAP32[$220 >> 2] = $8; //@line 6673
    $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 6674
    HEAP32[$221 >> 2] = $10; //@line 6675
    $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 6676
    HEAP32[$222 >> 2] = $12; //@line 6677
    $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 6678
    HEAP32[$223 >> 2] = $14; //@line 6679
    $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 6680
    HEAP32[$224 >> 2] = $16; //@line 6681
    $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 6682
    HEAP32[$225 >> 2] = $18; //@line 6683
    $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 6684
    HEAP32[$226 >> 2] = $20; //@line 6685
    $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 6686
    HEAP32[$227 >> 2] = $22; //@line 6687
    $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 6688
    HEAP32[$228 >> 2] = $24; //@line 6689
    $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 6690
    HEAP32[$229 >> 2] = $26; //@line 6691
    $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 6692
    HEAP32[$230 >> 2] = $28; //@line 6693
    $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 6694
    HEAP32[$231 >> 2] = $30; //@line 6695
    $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 6696
    HEAP32[$232 >> 2] = $57; //@line 6697
    sp = STACKTOP; //@line 6698
    return;
   } else if ((label | 0) == 50) {
    $251 = HEAP32[$2 >> 2] | 0; //@line 6702
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 6705
    $254 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $251 + 60 | 0, $251 + 8 | 0, 20, $$1202$i) | 0; //@line 6706
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 6709
     $255 = $ReallocAsyncCtx8 + 4 | 0; //@line 6710
     HEAP32[$255 >> 2] = $2; //@line 6711
     $256 = $ReallocAsyncCtx8 + 8 | 0; //@line 6712
     HEAP32[$256 >> 2] = $4; //@line 6713
     $257 = $ReallocAsyncCtx8 + 12 | 0; //@line 6714
     HEAP32[$257 >> 2] = $6; //@line 6715
     $258 = $ReallocAsyncCtx8 + 16 | 0; //@line 6716
     HEAP32[$258 >> 2] = $8; //@line 6717
     $259 = $ReallocAsyncCtx8 + 20 | 0; //@line 6718
     HEAP32[$259 >> 2] = $10; //@line 6719
     $260 = $ReallocAsyncCtx8 + 24 | 0; //@line 6720
     HEAP32[$260 >> 2] = $12; //@line 6721
     $261 = $ReallocAsyncCtx8 + 28 | 0; //@line 6722
     HEAP32[$261 >> 2] = $14; //@line 6723
     $262 = $ReallocAsyncCtx8 + 32 | 0; //@line 6724
     HEAP32[$262 >> 2] = $16; //@line 6725
     $263 = $ReallocAsyncCtx8 + 36 | 0; //@line 6726
     HEAP32[$263 >> 2] = $18; //@line 6727
     $264 = $ReallocAsyncCtx8 + 40 | 0; //@line 6728
     HEAP32[$264 >> 2] = $20; //@line 6729
     $265 = $ReallocAsyncCtx8 + 44 | 0; //@line 6730
     HEAP32[$265 >> 2] = $22; //@line 6731
     $266 = $ReallocAsyncCtx8 + 48 | 0; //@line 6732
     HEAP32[$266 >> 2] = $24; //@line 6733
     $267 = $ReallocAsyncCtx8 + 52 | 0; //@line 6734
     HEAP32[$267 >> 2] = $26; //@line 6735
     $268 = $ReallocAsyncCtx8 + 56 | 0; //@line 6736
     HEAP32[$268 >> 2] = $28; //@line 6737
     $269 = $ReallocAsyncCtx8 + 60 | 0; //@line 6738
     HEAP32[$269 >> 2] = $30; //@line 6739
     $270 = $ReallocAsyncCtx8 + 64 | 0; //@line 6740
     HEAP32[$270 >> 2] = $57; //@line 6741
     sp = STACKTOP; //@line 6742
     return;
    }
    HEAP8[___async_retval >> 0] = $254; //@line 6746
    ___async_unwind = 0; //@line 6747
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 6748
    $255 = $ReallocAsyncCtx8 + 4 | 0; //@line 6749
    HEAP32[$255 >> 2] = $2; //@line 6750
    $256 = $ReallocAsyncCtx8 + 8 | 0; //@line 6751
    HEAP32[$256 >> 2] = $4; //@line 6752
    $257 = $ReallocAsyncCtx8 + 12 | 0; //@line 6753
    HEAP32[$257 >> 2] = $6; //@line 6754
    $258 = $ReallocAsyncCtx8 + 16 | 0; //@line 6755
    HEAP32[$258 >> 2] = $8; //@line 6756
    $259 = $ReallocAsyncCtx8 + 20 | 0; //@line 6757
    HEAP32[$259 >> 2] = $10; //@line 6758
    $260 = $ReallocAsyncCtx8 + 24 | 0; //@line 6759
    HEAP32[$260 >> 2] = $12; //@line 6760
    $261 = $ReallocAsyncCtx8 + 28 | 0; //@line 6761
    HEAP32[$261 >> 2] = $14; //@line 6762
    $262 = $ReallocAsyncCtx8 + 32 | 0; //@line 6763
    HEAP32[$262 >> 2] = $16; //@line 6764
    $263 = $ReallocAsyncCtx8 + 36 | 0; //@line 6765
    HEAP32[$263 >> 2] = $18; //@line 6766
    $264 = $ReallocAsyncCtx8 + 40 | 0; //@line 6767
    HEAP32[$264 >> 2] = $20; //@line 6768
    $265 = $ReallocAsyncCtx8 + 44 | 0; //@line 6769
    HEAP32[$265 >> 2] = $22; //@line 6770
    $266 = $ReallocAsyncCtx8 + 48 | 0; //@line 6771
    HEAP32[$266 >> 2] = $24; //@line 6772
    $267 = $ReallocAsyncCtx8 + 52 | 0; //@line 6773
    HEAP32[$267 >> 2] = $26; //@line 6774
    $268 = $ReallocAsyncCtx8 + 56 | 0; //@line 6775
    HEAP32[$268 >> 2] = $28; //@line 6776
    $269 = $ReallocAsyncCtx8 + 60 | 0; //@line 6777
    HEAP32[$269 >> 2] = $30; //@line 6778
    $270 = $ReallocAsyncCtx8 + 64 | 0; //@line 6779
    HEAP32[$270 >> 2] = $57; //@line 6780
    sp = STACKTOP; //@line 6781
    return;
   } else if ((label | 0) == 53) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 6785
    $272 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $18, $20, 11, $$1202$i) | 0; //@line 6786
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 6789
     $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 6790
     HEAP32[$273 >> 2] = $2; //@line 6791
     $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 6792
     HEAP32[$274 >> 2] = $4; //@line 6793
     $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 6794
     HEAP32[$275 >> 2] = $6; //@line 6795
     $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 6796
     HEAP32[$276 >> 2] = $8; //@line 6797
     $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 6798
     HEAP32[$277 >> 2] = $10; //@line 6799
     $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 6800
     HEAP32[$278 >> 2] = $12; //@line 6801
     $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 6802
     HEAP32[$279 >> 2] = $14; //@line 6803
     $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 6804
     HEAP32[$280 >> 2] = $16; //@line 6805
     $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 6806
     HEAP32[$281 >> 2] = $18; //@line 6807
     $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 6808
     HEAP32[$282 >> 2] = $20; //@line 6809
     $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 6810
     HEAP32[$283 >> 2] = $22; //@line 6811
     $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 6812
     HEAP32[$284 >> 2] = $24; //@line 6813
     $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 6814
     HEAP32[$285 >> 2] = $26; //@line 6815
     $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 6816
     HEAP32[$286 >> 2] = $28; //@line 6817
     $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 6818
     HEAP32[$287 >> 2] = $30; //@line 6819
     $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 6820
     HEAP32[$288 >> 2] = $57; //@line 6821
     sp = STACKTOP; //@line 6822
     return;
    }
    HEAP8[___async_retval >> 0] = $272; //@line 6826
    ___async_unwind = 0; //@line 6827
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 6828
    $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 6829
    HEAP32[$273 >> 2] = $2; //@line 6830
    $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 6831
    HEAP32[$274 >> 2] = $4; //@line 6832
    $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 6833
    HEAP32[$275 >> 2] = $6; //@line 6834
    $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 6835
    HEAP32[$276 >> 2] = $8; //@line 6836
    $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 6837
    HEAP32[$277 >> 2] = $10; //@line 6838
    $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 6839
    HEAP32[$278 >> 2] = $12; //@line 6840
    $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 6841
    HEAP32[$279 >> 2] = $14; //@line 6842
    $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 6843
    HEAP32[$280 >> 2] = $16; //@line 6844
    $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 6845
    HEAP32[$281 >> 2] = $18; //@line 6846
    $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 6847
    HEAP32[$282 >> 2] = $20; //@line 6848
    $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 6849
    HEAP32[$283 >> 2] = $22; //@line 6850
    $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 6851
    HEAP32[$284 >> 2] = $24; //@line 6852
    $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 6853
    HEAP32[$285 >> 2] = $26; //@line 6854
    $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 6855
    HEAP32[$286 >> 2] = $28; //@line 6856
    $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 6857
    HEAP32[$287 >> 2] = $30; //@line 6858
    $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 6859
    HEAP32[$288 >> 2] = $57; //@line 6860
    sp = STACKTOP; //@line 6861
    return;
   } else if ((label | 0) == 61) {
    $306 = HEAP32[$2 >> 2] | 0; //@line 6865
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 6868
    $309 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $306 + 64 | 0, $306 + 10 | 0, 15, $$1202$i) | 0; //@line 6869
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 6872
     $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 6873
     HEAP32[$310 >> 2] = $2; //@line 6874
     $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 6875
     HEAP32[$311 >> 2] = $4; //@line 6876
     $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 6877
     HEAP32[$312 >> 2] = $6; //@line 6878
     $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 6879
     HEAP32[$313 >> 2] = $8; //@line 6880
     $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 6881
     HEAP32[$314 >> 2] = $10; //@line 6882
     $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 6883
     HEAP32[$315 >> 2] = $12; //@line 6884
     $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 6885
     HEAP32[$316 >> 2] = $14; //@line 6886
     $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 6887
     HEAP32[$317 >> 2] = $16; //@line 6888
     $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 6889
     HEAP32[$318 >> 2] = $18; //@line 6890
     $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 6891
     HEAP32[$319 >> 2] = $20; //@line 6892
     $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 6893
     HEAP32[$320 >> 2] = $22; //@line 6894
     $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 6895
     HEAP32[$321 >> 2] = $24; //@line 6896
     $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 6897
     HEAP32[$322 >> 2] = $26; //@line 6898
     $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 6899
     HEAP32[$323 >> 2] = $28; //@line 6900
     $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 6901
     HEAP32[$324 >> 2] = $30; //@line 6902
     $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 6903
     HEAP32[$325 >> 2] = $57; //@line 6904
     sp = STACKTOP; //@line 6905
     return;
    }
    HEAP8[___async_retval >> 0] = $309; //@line 6909
    ___async_unwind = 0; //@line 6910
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 6911
    $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 6912
    HEAP32[$310 >> 2] = $2; //@line 6913
    $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 6914
    HEAP32[$311 >> 2] = $4; //@line 6915
    $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 6916
    HEAP32[$312 >> 2] = $6; //@line 6917
    $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 6918
    HEAP32[$313 >> 2] = $8; //@line 6919
    $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 6920
    HEAP32[$314 >> 2] = $10; //@line 6921
    $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 6922
    HEAP32[$315 >> 2] = $12; //@line 6923
    $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 6924
    HEAP32[$316 >> 2] = $14; //@line 6925
    $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 6926
    HEAP32[$317 >> 2] = $16; //@line 6927
    $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 6928
    HEAP32[$318 >> 2] = $18; //@line 6929
    $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 6930
    HEAP32[$319 >> 2] = $20; //@line 6931
    $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 6932
    HEAP32[$320 >> 2] = $22; //@line 6933
    $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 6934
    HEAP32[$321 >> 2] = $24; //@line 6935
    $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 6936
    HEAP32[$322 >> 2] = $26; //@line 6937
    $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 6938
    HEAP32[$323 >> 2] = $28; //@line 6939
    $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 6940
    HEAP32[$324 >> 2] = $30; //@line 6941
    $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 6942
    HEAP32[$325 >> 2] = $57; //@line 6943
    sp = STACKTOP; //@line 6944
    return;
   } else if ((label | 0) == 91) {
    if (($37 - $8 | 0) >= ($10 | 0)) {
     $436 = ___async_retval; //@line 6952
     HEAP32[$436 >> 2] = $22; //@line 6953
     return;
    }
    if ((HEAP8[$37 >> 0] | 0) == -1) {
     $426 = $37 + 1 | 0; //@line 6959
     HEAP32[$4 >> 2] = $426; //@line 6960
     $427 = $426; //@line 6961
     $429 = $8 - $427 + $10 | 0; //@line 6963
     HEAP16[$26 + 24 >> 1] = $429; //@line 6966
     if ($429 & 65535 | 0) {
      HEAP32[$26 + 36 >> 2] = $427; //@line 6971
      $436 = ___async_retval; //@line 6972
      HEAP32[$436 >> 2] = $22; //@line 6973
      return;
     }
    }
    HEAP32[$26 + 4 >> 2] = 1; //@line 6978
    $436 = ___async_retval; //@line 6979
    HEAP32[$436 >> 2] = $22; //@line 6980
    return;
   }
  }
 } while (0);
 HEAP32[$26 + 4 >> 2] = 1; //@line 6986
 $436 = ___async_retval; //@line 6987
 HEAP32[$436 >> 2] = $22; //@line 6988
 return;
}
function _sn_coap_parser__async_cb_23($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $184 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $239 = 0, $24 = 0, $240 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $296 = 0, $30 = 0, $301 = 0, $304 = 0, $306 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $354 = 0, $357 = 0, $361 = 0, $364 = 0, $365 = 0, $37 = 0, $370 = 0, $373 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $405 = 0, $410 = 0, $413 = 0, $417 = 0, $418 = 0, $426 = 0, $427 = 0, $429 = 0, $436 = 0, $437 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $124$looptemp = 0, $245$looptemp = 0, $301$looptemp = 0, $338$looptemp = 0, $354$looptemp = 0, $370$looptemp = 0, $389$looptemp = 0, $410$looptemp = 0, $112$looptemp = 0;
 sp = STACKTOP; //@line 4226
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4228
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4230
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4232
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4234
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4236
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4238
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4240
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4242
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4244
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4246
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4248
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4250
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 4252
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 4254
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 4256
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 64 >> 2] | 0; //@line 4264
   L3 : while (1) {
    $417 = HEAP32[$6 >> 2] | 0; //@line 4266
    $418 = $417 - $8 | 0; //@line 4267
    $37 = $417; //@line 4270
    if (($418 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $418 & 65535) << 16 >> 16)) {
     label = 91; //@line 4277
     break;
    }
    $trunc277$i = HEAP8[$37 >> 0] | 0; //@line 4280
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 91; //@line 4283
     break;
    }
    $40 = $trunc277$i & 15; //@line 4287
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 4288
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$37 + 1 >> 0] | 0; //@line 4300
      $$sink214$i = 13; //@line 4300
      $$sink3$i = 1; //@line 4300
      label = 7; //@line 4301
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$37 + 1 >> 0] << 8) + 269 | 0; //@line 4313
      $$sink214$i = HEAPU8[$37 + 2 >> 0] | 0; //@line 4313
      $$sink3$i = 2; //@line 4313
      label = 7; //@line 4314
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 4318
      $437 = $417; //@line 4318
      $59 = $37; //@line 4318
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 4322
     $54 = $37 + $$sink3$i | 0; //@line 4324
     HEAP32[$4 >> 2] = $54; //@line 4325
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 4327
     $437 = $54; //@line 4327
     $59 = $54; //@line 4327
    }
    $57 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 4330
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$59 + 1 >> 0] | 0; //@line 4341
      $$sink216$i = 13; //@line 4341
      $$sink8$i = 1; //@line 4341
      label = 11; //@line 4342
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$59 + 1 >> 0] << 8) + 269 | 0; //@line 4354
      $$sink216$i = HEAPU8[$59 + 2 >> 0] | 0; //@line 4354
      $$sink8$i = 2; //@line 4354
      label = 11; //@line 4355
      break;
     }
    default:
     {
      $$1202$in$i = $40; //@line 4359
      $74 = $437; //@line 4359
      $86 = $59; //@line 4359
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 4363
     $71 = $59 + $$sink8$i | 0; //@line 4365
     HEAP32[$4 >> 2] = $71; //@line 4366
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 4368
     $74 = $71; //@line 4368
     $86 = $71; //@line 4368
    }
    $$1202$i = $$1202$in$i & 65535; //@line 4370
    $75 = $30 - $74 & 65535; //@line 4372
    $trunc$i = $57 & 65535; //@line 4373
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 53; //@line 4377
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$2 >> 2] | 0)) {
        label = 14; //@line 4385
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 4390
         break L3;
         break;
        }
       case 4:
        {
         label = 32; //@line 4395
         break L3;
         break;
        }
       case 3:
        {
         label = 35; //@line 4400
         break L3;
         break;
        }
       case 8:
        {
         label = 40; //@line 4405
         break L3;
         break;
        }
       case 20:
        {
         label = 49; //@line 4410
         break L3;
         break;
        }
       case 11:
        {
         label = 53; //@line 4415
         break L3;
         break;
        }
       case 15:
        {
         label = 61; //@line 4420
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $118 = $86 + 1 | 0; //@line 4433
         HEAP32[$4 >> 2] = $118; //@line 4434
         $119 = $$1202$in$i & 255; //@line 4435
         if (!($119 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 4438
         } else {
          $$045$i256$i = $119; //@line 4440
          $$06$i255$i = 0; //@line 4440
          $124 = $118; //@line 4440
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 4442
           $124$looptemp = $124;
           $124 = $124 + 1 | 0; //@line 4444
           HEAP32[$4 >> 2] = $124; //@line 4445
           $127 = $$06$i255$i << 8 | HEAPU8[$124$looptemp >> 0]; //@line 4448
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $127; //@line 4451
            break;
           } else {
            $$06$i255$i = $127; //@line 4454
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 4460
         $$reg2mem$0 = $57; //@line 4461
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $236 = (HEAP32[$2 >> 2] | 0) + 28 | 0; //@line 4471
         if ((HEAP32[$236 >> 2] | 0) != -1) {
          break L2;
         }
         $239 = $86 + 1 | 0; //@line 4477
         HEAP32[$4 >> 2] = $239; //@line 4478
         $240 = $$1202$in$i & 255; //@line 4479
         if (!($240 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 4482
         } else {
          $$045$i270$i = $240; //@line 4484
          $$06$i269$i = 0; //@line 4484
          $245 = $239; //@line 4484
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 4486
           $245$looptemp = $245;
           $245 = $245 + 1 | 0; //@line 4488
           HEAP32[$4 >> 2] = $245; //@line 4489
           $248 = $$06$i269$i << 8 | HEAPU8[$245$looptemp >> 0]; //@line 4492
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $248; //@line 4495
            break;
           } else {
            $$06$i269$i = $248; //@line 4498
           }
          }
         }
         HEAP32[$236 >> 2] = $$0$lcssa$i272$i; //@line 4502
         $$reg2mem$0 = $57; //@line 4503
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $292 = (HEAP32[$2 >> 2] | 0) + 32 | 0; //@line 4513
         if ((HEAP32[$292 >> 2] | 0) != -1) {
          break L2;
         }
         $295 = $86 + 1 | 0; //@line 4519
         HEAP32[$4 >> 2] = $295; //@line 4520
         $296 = $$1202$in$i & 255; //@line 4521
         if (!($296 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 4524
         } else {
          $$045$i263$i = $296; //@line 4526
          $$06$i262$i = 0; //@line 4526
          $301 = $295; //@line 4526
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 4528
           $301$looptemp = $301;
           $301 = $301 + 1 | 0; //@line 4530
           HEAP32[$4 >> 2] = $301; //@line 4531
           $304 = $$06$i262$i << 8 | HEAPU8[$301$looptemp >> 0]; //@line 4534
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $304; //@line 4537
            break;
           } else {
            $$06$i262$i = $304; //@line 4540
           }
          }
         }
         HEAP32[$292 >> 2] = $$0$lcssa$i265$i; //@line 4544
         $$reg2mem$0 = $57; //@line 4545
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $329 = (HEAP32[$2 >> 2] | 0) + 40 | 0; //@line 4555
         if ((HEAP32[$329 >> 2] | 0) != -1) {
          break L2;
         }
         $332 = $86 + 1 | 0; //@line 4561
         HEAP32[$4 >> 2] = $332; //@line 4562
         $333 = $$1202$in$i & 255; //@line 4563
         if (!($333 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 4566
         } else {
          $$045$i249$i = $333; //@line 4568
          $$06$i248$i = 0; //@line 4568
          $338 = $332; //@line 4568
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 4570
           $338$looptemp = $338;
           $338 = $338 + 1 | 0; //@line 4572
           HEAP32[$4 >> 2] = $338; //@line 4573
           $341 = $$06$i248$i << 8 | HEAPU8[$338$looptemp >> 0]; //@line 4576
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $341; //@line 4579
            break;
           } else {
            $$06$i248$i = $341; //@line 4582
           }
          }
         }
         HEAP32[$329 >> 2] = $$0$lcssa$i251$i; //@line 4586
         $$reg2mem$0 = $57; //@line 4587
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $345 = (HEAP32[$2 >> 2] | 0) + 36 | 0; //@line 4597
         if ((HEAP32[$345 >> 2] | 0) != -1) {
          break L2;
         }
         $348 = $86 + 1 | 0; //@line 4603
         HEAP32[$4 >> 2] = $348; //@line 4604
         $349 = $$1202$in$i & 255; //@line 4605
         if (!($349 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 4608
         } else {
          $$045$i242$i = $349; //@line 4610
          $$06$i241$i = 0; //@line 4610
          $354 = $348; //@line 4610
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 4612
           $354$looptemp = $354;
           $354 = $354 + 1 | 0; //@line 4614
           HEAP32[$4 >> 2] = $354; //@line 4615
           $357 = $$06$i241$i << 8 | HEAPU8[$354$looptemp >> 0]; //@line 4618
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $357; //@line 4621
            break;
           } else {
            $$06$i241$i = $357; //@line 4624
           }
          }
         }
         HEAP32[$345 >> 2] = $$0$lcssa$i244$i; //@line 4628
         $$reg2mem$0 = $57; //@line 4629
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $361 = (HEAP32[$2 >> 2] | 0) + 12 | 0; //@line 4639
         if ((HEAP32[$361 >> 2] | 0) != -1) {
          break L2;
         }
         $364 = $86 + 1 | 0; //@line 4645
         HEAP32[$4 >> 2] = $364; //@line 4646
         $365 = $$1202$in$i & 255; //@line 4647
         if (!($365 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 4650
         } else {
          $$045$i235$i = $365; //@line 4652
          $$06$i234$i = 0; //@line 4652
          $370 = $364; //@line 4652
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 4654
           $370$looptemp = $370;
           $370 = $370 + 1 | 0; //@line 4656
           HEAP32[$4 >> 2] = $370; //@line 4657
           $373 = $$06$i234$i << 8 | HEAPU8[$370$looptemp >> 0]; //@line 4660
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $373; //@line 4663
            break;
           } else {
            $$06$i234$i = $373; //@line 4666
           }
          }
         }
         HEAP32[$361 >> 2] = $$0$lcssa$i237$i; //@line 4670
         $$reg2mem$0 = $57; //@line 4671
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $377 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 4681
         $378 = HEAP8[$377 >> 0] | 0; //@line 4682
         if ($378 & 1) {
          break L2;
         }
         HEAP8[$377 >> 0] = $378 | 1; //@line 4689
         $383 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 4691
         HEAP32[$4 >> 2] = $383; //@line 4692
         $384 = $$1202$in$i & 255; //@line 4693
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 4696
         } else {
          $$045$i228$i = $384; //@line 4698
          $$06$i227$i = 0; //@line 4698
          $389 = $383; //@line 4698
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 4700
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 4702
           HEAP32[$4 >> 2] = $389; //@line 4703
           $392 = $$06$i227$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 4706
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $392; //@line 4709
            break;
           } else {
            $$06$i227$i = $392; //@line 4712
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 4718
         $$reg2mem$0 = $57; //@line 4719
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $398 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 4729
         $399 = HEAP8[$398 >> 0] | 0; //@line 4730
         if ($399 & 2) {
          break L2;
         }
         HEAP8[$398 >> 0] = $399 | 2; //@line 4737
         $404 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 4739
         HEAP32[$4 >> 2] = $404; //@line 4740
         $405 = $$1202$in$i & 255; //@line 4741
         if (!($405 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 4744
         } else {
          $$045$i221$i = $405; //@line 4746
          $$06$i220$i = 0; //@line 4746
          $410 = $404; //@line 4746
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 4748
           $410$looptemp = $410;
           $410 = $410 + 1 | 0; //@line 4750
           HEAP32[$4 >> 2] = $410; //@line 4751
           $413 = $$06$i220$i << 8 | HEAPU8[$410$looptemp >> 0]; //@line 4754
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $413; //@line 4757
            break;
           } else {
            $$06$i220$i = $413; //@line 4760
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 4766
         $$reg2mem$0 = $57; //@line 4767
         continue L3;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$28 >> 2] | 0) != -1) {
     break L2;
    }
    $106 = $86 + 1 | 0; //@line 4794
    HEAP32[$4 >> 2] = $106; //@line 4795
    $107 = $$1202$in$i & 255; //@line 4796
    if (!($107 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 4799
    } else {
     $$045$i$i = $107; //@line 4801
     $$06$i$i = 0; //@line 4801
     $112 = $106; //@line 4801
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 4803
      $112$looptemp = $112;
      $112 = $112 + 1 | 0; //@line 4805
      HEAP32[$4 >> 2] = $112; //@line 4806
      $115 = $$06$i$i << 8 | HEAPU8[$112$looptemp >> 0]; //@line 4809
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $115; //@line 4812
       break;
      } else {
       $$06$i$i = $115; //@line 4815
      }
     }
    }
    HEAP32[$28 >> 2] = $$0$lcssa$i$i; //@line 4819
    $$reg2mem$0 = $57; //@line 4820
   }
   if ((label | 0) == 14) {
    $78 = HEAP32[$16 >> 2] | 0; //@line 4823
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(88) | 0; //@line 4824
    $79 = FUNCTION_TABLE_ii[$78 & 15](68) | 0; //@line 4825
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 4828
     $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 4829
     HEAP32[$80 >> 2] = $2; //@line 4830
     $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 4831
     HEAP32[$81 >> 2] = $4; //@line 4832
     $82 = $ReallocAsyncCtx3 + 12 | 0; //@line 4833
     HEAP32[$82 >> 2] = $$1202$in$i; //@line 4834
     $83 = $ReallocAsyncCtx3 + 16 | 0; //@line 4835
     HEAP32[$83 >> 2] = $57; //@line 4836
     $84 = $ReallocAsyncCtx3 + 20 | 0; //@line 4837
     HEAP16[$84 >> 1] = $$1202$i; //@line 4838
     $85 = $ReallocAsyncCtx3 + 24 | 0; //@line 4839
     HEAP32[$85 >> 2] = $86; //@line 4840
     $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 4841
     HEAP32[$87 >> 2] = $6; //@line 4842
     $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 4843
     HEAP32[$88 >> 2] = $8; //@line 4844
     $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 4845
     HEAP32[$89 >> 2] = $10; //@line 4846
     $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 4847
     HEAP32[$90 >> 2] = $12; //@line 4848
     $91 = $ReallocAsyncCtx3 + 44 | 0; //@line 4849
     HEAP32[$91 >> 2] = $14; //@line 4850
     $92 = $ReallocAsyncCtx3 + 48 | 0; //@line 4851
     HEAP16[$92 >> 1] = $75; //@line 4852
     $93 = $ReallocAsyncCtx3 + 52 | 0; //@line 4853
     HEAP32[$93 >> 2] = $16; //@line 4854
     $94 = $ReallocAsyncCtx3 + 56 | 0; //@line 4855
     HEAP32[$94 >> 2] = $18; //@line 4856
     $95 = $ReallocAsyncCtx3 + 60 | 0; //@line 4857
     HEAP32[$95 >> 2] = $20; //@line 4858
     $96 = $ReallocAsyncCtx3 + 64 | 0; //@line 4859
     HEAP16[$96 >> 1] = $trunc$i; //@line 4860
     $97 = $ReallocAsyncCtx3 + 68 | 0; //@line 4861
     HEAP32[$97 >> 2] = $22; //@line 4862
     $98 = $ReallocAsyncCtx3 + 72 | 0; //@line 4863
     HEAP32[$98 >> 2] = $24; //@line 4864
     $99 = $ReallocAsyncCtx3 + 76 | 0; //@line 4865
     HEAP32[$99 >> 2] = $26; //@line 4866
     $100 = $ReallocAsyncCtx3 + 80 | 0; //@line 4867
     HEAP32[$100 >> 2] = $28; //@line 4868
     $101 = $ReallocAsyncCtx3 + 84 | 0; //@line 4869
     HEAP32[$101 >> 2] = $30; //@line 4870
     sp = STACKTOP; //@line 4871
     return;
    }
    HEAP32[___async_retval >> 2] = $79; //@line 4875
    ___async_unwind = 0; //@line 4876
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 4877
    $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 4878
    HEAP32[$80 >> 2] = $2; //@line 4879
    $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 4880
    HEAP32[$81 >> 2] = $4; //@line 4881
    $82 = $ReallocAsyncCtx3 + 12 | 0; //@line 4882
    HEAP32[$82 >> 2] = $$1202$in$i; //@line 4883
    $83 = $ReallocAsyncCtx3 + 16 | 0; //@line 4884
    HEAP32[$83 >> 2] = $57; //@line 4885
    $84 = $ReallocAsyncCtx3 + 20 | 0; //@line 4886
    HEAP16[$84 >> 1] = $$1202$i; //@line 4887
    $85 = $ReallocAsyncCtx3 + 24 | 0; //@line 4888
    HEAP32[$85 >> 2] = $86; //@line 4889
    $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 4890
    HEAP32[$87 >> 2] = $6; //@line 4891
    $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 4892
    HEAP32[$88 >> 2] = $8; //@line 4893
    $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 4894
    HEAP32[$89 >> 2] = $10; //@line 4895
    $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 4896
    HEAP32[$90 >> 2] = $12; //@line 4897
    $91 = $ReallocAsyncCtx3 + 44 | 0; //@line 4898
    HEAP32[$91 >> 2] = $14; //@line 4899
    $92 = $ReallocAsyncCtx3 + 48 | 0; //@line 4900
    HEAP16[$92 >> 1] = $75; //@line 4901
    $93 = $ReallocAsyncCtx3 + 52 | 0; //@line 4902
    HEAP32[$93 >> 2] = $16; //@line 4903
    $94 = $ReallocAsyncCtx3 + 56 | 0; //@line 4904
    HEAP32[$94 >> 2] = $18; //@line 4905
    $95 = $ReallocAsyncCtx3 + 60 | 0; //@line 4906
    HEAP32[$95 >> 2] = $20; //@line 4907
    $96 = $ReallocAsyncCtx3 + 64 | 0; //@line 4908
    HEAP16[$96 >> 1] = $trunc$i; //@line 4909
    $97 = $ReallocAsyncCtx3 + 68 | 0; //@line 4910
    HEAP32[$97 >> 2] = $22; //@line 4911
    $98 = $ReallocAsyncCtx3 + 72 | 0; //@line 4912
    HEAP32[$98 >> 2] = $24; //@line 4913
    $99 = $ReallocAsyncCtx3 + 76 | 0; //@line 4914
    HEAP32[$99 >> 2] = $26; //@line 4915
    $100 = $ReallocAsyncCtx3 + 80 | 0; //@line 4916
    HEAP32[$100 >> 2] = $28; //@line 4917
    $101 = $ReallocAsyncCtx3 + 84 | 0; //@line 4918
    HEAP32[$101 >> 2] = $30; //@line 4919
    sp = STACKTOP; //@line 4920
    return;
   } else if ((label | 0) == 27) {
    $131 = $$1202$in$i & 65535; //@line 4924
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $134 = HEAP32[$2 >> 2] | 0; //@line 4930
    if (HEAP32[$134 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$134 + 2 >> 1] = $$1202$i; //@line 4938
    $139 = $86 + 1 | 0; //@line 4939
    HEAP32[$4 >> 2] = $139; //@line 4940
    $140 = HEAP32[$16 >> 2] | 0; //@line 4941
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 4942
    $141 = FUNCTION_TABLE_ii[$140 & 15]($$1202$i) | 0; //@line 4943
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 4946
     $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 4947
     HEAP32[$142 >> 2] = $2; //@line 4948
     $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 4949
     HEAP32[$143 >> 2] = $4; //@line 4950
     $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 4951
     HEAP32[$144 >> 2] = $6; //@line 4952
     $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 4953
     HEAP32[$145 >> 2] = $8; //@line 4954
     $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 4955
     HEAP32[$146 >> 2] = $10; //@line 4956
     $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 4957
     HEAP32[$147 >> 2] = $12; //@line 4958
     $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 4959
     HEAP32[$148 >> 2] = $14; //@line 4960
     $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 4961
     HEAP32[$149 >> 2] = $16; //@line 4962
     $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 4963
     HEAP32[$150 >> 2] = $18; //@line 4964
     $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 4965
     HEAP32[$151 >> 2] = $20; //@line 4966
     $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 4967
     HEAP32[$152 >> 2] = $22; //@line 4968
     $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 4969
     HEAP32[$153 >> 2] = $24; //@line 4970
     $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 4971
     HEAP32[$154 >> 2] = $26; //@line 4972
     $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 4973
     HEAP32[$155 >> 2] = $28; //@line 4974
     $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 4975
     HEAP32[$156 >> 2] = $30; //@line 4976
     $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 4977
     HEAP32[$157 >> 2] = $57; //@line 4978
     $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 4979
     HEAP32[$158 >> 2] = $139; //@line 4980
     $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 4981
     HEAP32[$159 >> 2] = $131; //@line 4982
     sp = STACKTOP; //@line 4983
     return;
    }
    HEAP32[___async_retval >> 2] = $141; //@line 4987
    ___async_unwind = 0; //@line 4988
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 4989
    $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 4990
    HEAP32[$142 >> 2] = $2; //@line 4991
    $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 4992
    HEAP32[$143 >> 2] = $4; //@line 4993
    $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 4994
    HEAP32[$144 >> 2] = $6; //@line 4995
    $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 4996
    HEAP32[$145 >> 2] = $8; //@line 4997
    $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 4998
    HEAP32[$146 >> 2] = $10; //@line 4999
    $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 5000
    HEAP32[$147 >> 2] = $12; //@line 5001
    $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 5002
    HEAP32[$148 >> 2] = $14; //@line 5003
    $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 5004
    HEAP32[$149 >> 2] = $16; //@line 5005
    $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 5006
    HEAP32[$150 >> 2] = $18; //@line 5007
    $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 5008
    HEAP32[$151 >> 2] = $20; //@line 5009
    $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 5010
    HEAP32[$152 >> 2] = $22; //@line 5011
    $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 5012
    HEAP32[$153 >> 2] = $24; //@line 5013
    $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 5014
    HEAP32[$154 >> 2] = $26; //@line 5015
    $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 5016
    HEAP32[$155 >> 2] = $28; //@line 5017
    $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 5018
    HEAP32[$156 >> 2] = $30; //@line 5019
    $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 5020
    HEAP32[$157 >> 2] = $57; //@line 5021
    $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 5022
    HEAP32[$158 >> 2] = $139; //@line 5023
    $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 5024
    HEAP32[$159 >> 2] = $131; //@line 5025
    sp = STACKTOP; //@line 5026
    return;
   } else if ((label | 0) == 32) {
    $161 = HEAP32[$2 >> 2] | 0; //@line 5030
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 5032
    $163 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $161 + 48 | 0, $161, 4, $$1202$i) | 0; //@line 5033
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 5036
     $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 5037
     HEAP32[$164 >> 2] = $2; //@line 5038
     $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 5039
     HEAP32[$165 >> 2] = $4; //@line 5040
     $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 5041
     HEAP32[$166 >> 2] = $6; //@line 5042
     $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 5043
     HEAP32[$167 >> 2] = $8; //@line 5044
     $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 5045
     HEAP32[$168 >> 2] = $10; //@line 5046
     $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 5047
     HEAP32[$169 >> 2] = $12; //@line 5048
     $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 5049
     HEAP32[$170 >> 2] = $14; //@line 5050
     $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 5051
     HEAP32[$171 >> 2] = $16; //@line 5052
     $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 5053
     HEAP32[$172 >> 2] = $18; //@line 5054
     $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 5055
     HEAP32[$173 >> 2] = $20; //@line 5056
     $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 5057
     HEAP32[$174 >> 2] = $22; //@line 5058
     $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 5059
     HEAP32[$175 >> 2] = $24; //@line 5060
     $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 5061
     HEAP32[$176 >> 2] = $26; //@line 5062
     $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 5063
     HEAP32[$177 >> 2] = $28; //@line 5064
     $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 5065
     HEAP32[$178 >> 2] = $30; //@line 5066
     $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 5067
     HEAP32[$179 >> 2] = $57; //@line 5068
     sp = STACKTOP; //@line 5069
     return;
    }
    HEAP8[___async_retval >> 0] = $163; //@line 5073
    ___async_unwind = 0; //@line 5074
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 5075
    $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 5076
    HEAP32[$164 >> 2] = $2; //@line 5077
    $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 5078
    HEAP32[$165 >> 2] = $4; //@line 5079
    $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 5080
    HEAP32[$166 >> 2] = $6; //@line 5081
    $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 5082
    HEAP32[$167 >> 2] = $8; //@line 5083
    $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 5084
    HEAP32[$168 >> 2] = $10; //@line 5085
    $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 5086
    HEAP32[$169 >> 2] = $12; //@line 5087
    $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 5088
    HEAP32[$170 >> 2] = $14; //@line 5089
    $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 5090
    HEAP32[$171 >> 2] = $16; //@line 5091
    $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 5092
    HEAP32[$172 >> 2] = $18; //@line 5093
    $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 5094
    HEAP32[$173 >> 2] = $20; //@line 5095
    $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 5096
    HEAP32[$174 >> 2] = $22; //@line 5097
    $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 5098
    HEAP32[$175 >> 2] = $24; //@line 5099
    $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 5100
    HEAP32[$176 >> 2] = $26; //@line 5101
    $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 5102
    HEAP32[$177 >> 2] = $28; //@line 5103
    $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 5104
    HEAP32[$178 >> 2] = $30; //@line 5105
    $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 5106
    HEAP32[$179 >> 2] = $57; //@line 5107
    sp = STACKTOP; //@line 5108
    return;
   } else if ((label | 0) == 35) {
    $181 = $$1202$in$i & 65535; //@line 5112
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $184 = HEAP32[$2 >> 2] | 0; //@line 5118
    if (HEAP32[$184 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$184 + 4 >> 1] = $$1202$i; //@line 5126
    $189 = $86 + 1 | 0; //@line 5127
    HEAP32[$4 >> 2] = $189; //@line 5128
    $190 = HEAP32[$16 >> 2] | 0; //@line 5129
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 5130
    $191 = FUNCTION_TABLE_ii[$190 & 15]($$1202$i) | 0; //@line 5131
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 5134
     $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 5135
     HEAP32[$192 >> 2] = $2; //@line 5136
     $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 5137
     HEAP32[$193 >> 2] = $4; //@line 5138
     $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 5139
     HEAP32[$194 >> 2] = $6; //@line 5140
     $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 5141
     HEAP32[$195 >> 2] = $8; //@line 5142
     $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 5143
     HEAP32[$196 >> 2] = $10; //@line 5144
     $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 5145
     HEAP32[$197 >> 2] = $12; //@line 5146
     $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 5147
     HEAP32[$198 >> 2] = $14; //@line 5148
     $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 5149
     HEAP32[$199 >> 2] = $16; //@line 5150
     $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 5151
     HEAP32[$200 >> 2] = $18; //@line 5152
     $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 5153
     HEAP32[$201 >> 2] = $20; //@line 5154
     $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 5155
     HEAP32[$202 >> 2] = $22; //@line 5156
     $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 5157
     HEAP32[$203 >> 2] = $24; //@line 5158
     $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 5159
     HEAP32[$204 >> 2] = $26; //@line 5160
     $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 5161
     HEAP32[$205 >> 2] = $28; //@line 5162
     $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 5163
     HEAP32[$206 >> 2] = $30; //@line 5164
     $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 5165
     HEAP32[$207 >> 2] = $57; //@line 5166
     $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 5167
     HEAP32[$208 >> 2] = $189; //@line 5168
     $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 5169
     HEAP32[$209 >> 2] = $181; //@line 5170
     sp = STACKTOP; //@line 5171
     return;
    }
    HEAP32[___async_retval >> 2] = $191; //@line 5175
    ___async_unwind = 0; //@line 5176
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 5177
    $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 5178
    HEAP32[$192 >> 2] = $2; //@line 5179
    $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 5180
    HEAP32[$193 >> 2] = $4; //@line 5181
    $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 5182
    HEAP32[$194 >> 2] = $6; //@line 5183
    $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 5184
    HEAP32[$195 >> 2] = $8; //@line 5185
    $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 5186
    HEAP32[$196 >> 2] = $10; //@line 5187
    $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 5188
    HEAP32[$197 >> 2] = $12; //@line 5189
    $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 5190
    HEAP32[$198 >> 2] = $14; //@line 5191
    $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 5192
    HEAP32[$199 >> 2] = $16; //@line 5193
    $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 5194
    HEAP32[$200 >> 2] = $18; //@line 5195
    $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 5196
    HEAP32[$201 >> 2] = $20; //@line 5197
    $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 5198
    HEAP32[$202 >> 2] = $22; //@line 5199
    $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 5200
    HEAP32[$203 >> 2] = $24; //@line 5201
    $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 5202
    HEAP32[$204 >> 2] = $26; //@line 5203
    $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 5204
    HEAP32[$205 >> 2] = $28; //@line 5205
    $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 5206
    HEAP32[$206 >> 2] = $30; //@line 5207
    $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 5208
    HEAP32[$207 >> 2] = $57; //@line 5209
    $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 5210
    HEAP32[$208 >> 2] = $189; //@line 5211
    $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 5212
    HEAP32[$209 >> 2] = $181; //@line 5213
    sp = STACKTOP; //@line 5214
    return;
   } else if ((label | 0) == 40) {
    $211 = HEAP32[$2 >> 2] | 0; //@line 5218
    $212 = $211 + 56 | 0; //@line 5219
    if (HEAP32[$212 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 5226
    $216 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $212, $211 + 6 | 0, 8, $$1202$i) | 0; //@line 5227
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 5230
     $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 5231
     HEAP32[$217 >> 2] = $2; //@line 5232
     $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 5233
     HEAP32[$218 >> 2] = $4; //@line 5234
     $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 5235
     HEAP32[$219 >> 2] = $6; //@line 5236
     $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 5237
     HEAP32[$220 >> 2] = $8; //@line 5238
     $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 5239
     HEAP32[$221 >> 2] = $10; //@line 5240
     $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 5241
     HEAP32[$222 >> 2] = $12; //@line 5242
     $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 5243
     HEAP32[$223 >> 2] = $14; //@line 5244
     $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 5245
     HEAP32[$224 >> 2] = $16; //@line 5246
     $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 5247
     HEAP32[$225 >> 2] = $18; //@line 5248
     $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 5249
     HEAP32[$226 >> 2] = $20; //@line 5250
     $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 5251
     HEAP32[$227 >> 2] = $22; //@line 5252
     $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 5253
     HEAP32[$228 >> 2] = $24; //@line 5254
     $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 5255
     HEAP32[$229 >> 2] = $26; //@line 5256
     $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 5257
     HEAP32[$230 >> 2] = $28; //@line 5258
     $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 5259
     HEAP32[$231 >> 2] = $30; //@line 5260
     $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 5261
     HEAP32[$232 >> 2] = $57; //@line 5262
     sp = STACKTOP; //@line 5263
     return;
    }
    HEAP8[___async_retval >> 0] = $216; //@line 5267
    ___async_unwind = 0; //@line 5268
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 5269
    $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 5270
    HEAP32[$217 >> 2] = $2; //@line 5271
    $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 5272
    HEAP32[$218 >> 2] = $4; //@line 5273
    $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 5274
    HEAP32[$219 >> 2] = $6; //@line 5275
    $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 5276
    HEAP32[$220 >> 2] = $8; //@line 5277
    $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 5278
    HEAP32[$221 >> 2] = $10; //@line 5279
    $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 5280
    HEAP32[$222 >> 2] = $12; //@line 5281
    $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 5282
    HEAP32[$223 >> 2] = $14; //@line 5283
    $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 5284
    HEAP32[$224 >> 2] = $16; //@line 5285
    $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 5286
    HEAP32[$225 >> 2] = $18; //@line 5287
    $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 5288
    HEAP32[$226 >> 2] = $20; //@line 5289
    $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 5290
    HEAP32[$227 >> 2] = $22; //@line 5291
    $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 5292
    HEAP32[$228 >> 2] = $24; //@line 5293
    $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 5294
    HEAP32[$229 >> 2] = $26; //@line 5295
    $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 5296
    HEAP32[$230 >> 2] = $28; //@line 5297
    $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 5298
    HEAP32[$231 >> 2] = $30; //@line 5299
    $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 5300
    HEAP32[$232 >> 2] = $57; //@line 5301
    sp = STACKTOP; //@line 5302
    return;
   } else if ((label | 0) == 49) {
    $250 = HEAP32[$2 >> 2] | 0; //@line 5306
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 5309
    $253 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $250 + 60 | 0, $250 + 8 | 0, 20, $$1202$i) | 0; //@line 5310
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 5313
     $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 5314
     HEAP32[$254 >> 2] = $2; //@line 5315
     $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 5316
     HEAP32[$255 >> 2] = $4; //@line 5317
     $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 5318
     HEAP32[$256 >> 2] = $6; //@line 5319
     $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 5320
     HEAP32[$257 >> 2] = $8; //@line 5321
     $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 5322
     HEAP32[$258 >> 2] = $10; //@line 5323
     $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 5324
     HEAP32[$259 >> 2] = $12; //@line 5325
     $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 5326
     HEAP32[$260 >> 2] = $14; //@line 5327
     $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 5328
     HEAP32[$261 >> 2] = $16; //@line 5329
     $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 5330
     HEAP32[$262 >> 2] = $18; //@line 5331
     $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 5332
     HEAP32[$263 >> 2] = $20; //@line 5333
     $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 5334
     HEAP32[$264 >> 2] = $22; //@line 5335
     $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 5336
     HEAP32[$265 >> 2] = $24; //@line 5337
     $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 5338
     HEAP32[$266 >> 2] = $26; //@line 5339
     $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 5340
     HEAP32[$267 >> 2] = $28; //@line 5341
     $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 5342
     HEAP32[$268 >> 2] = $30; //@line 5343
     $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 5344
     HEAP32[$269 >> 2] = $57; //@line 5345
     sp = STACKTOP; //@line 5346
     return;
    }
    HEAP8[___async_retval >> 0] = $253; //@line 5350
    ___async_unwind = 0; //@line 5351
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 5352
    $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 5353
    HEAP32[$254 >> 2] = $2; //@line 5354
    $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 5355
    HEAP32[$255 >> 2] = $4; //@line 5356
    $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 5357
    HEAP32[$256 >> 2] = $6; //@line 5358
    $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 5359
    HEAP32[$257 >> 2] = $8; //@line 5360
    $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 5361
    HEAP32[$258 >> 2] = $10; //@line 5362
    $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 5363
    HEAP32[$259 >> 2] = $12; //@line 5364
    $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 5365
    HEAP32[$260 >> 2] = $14; //@line 5366
    $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 5367
    HEAP32[$261 >> 2] = $16; //@line 5368
    $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 5369
    HEAP32[$262 >> 2] = $18; //@line 5370
    $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 5371
    HEAP32[$263 >> 2] = $20; //@line 5372
    $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 5373
    HEAP32[$264 >> 2] = $22; //@line 5374
    $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 5375
    HEAP32[$265 >> 2] = $24; //@line 5376
    $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 5377
    HEAP32[$266 >> 2] = $26; //@line 5378
    $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 5379
    HEAP32[$267 >> 2] = $28; //@line 5380
    $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 5381
    HEAP32[$268 >> 2] = $30; //@line 5382
    $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 5383
    HEAP32[$269 >> 2] = $57; //@line 5384
    sp = STACKTOP; //@line 5385
    return;
   } else if ((label | 0) == 53) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 5389
    $272 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $18, $20, 11, $$1202$i) | 0; //@line 5390
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 5393
     $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 5394
     HEAP32[$273 >> 2] = $2; //@line 5395
     $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 5396
     HEAP32[$274 >> 2] = $4; //@line 5397
     $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 5398
     HEAP32[$275 >> 2] = $6; //@line 5399
     $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 5400
     HEAP32[$276 >> 2] = $8; //@line 5401
     $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 5402
     HEAP32[$277 >> 2] = $10; //@line 5403
     $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 5404
     HEAP32[$278 >> 2] = $12; //@line 5405
     $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 5406
     HEAP32[$279 >> 2] = $14; //@line 5407
     $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 5408
     HEAP32[$280 >> 2] = $16; //@line 5409
     $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 5410
     HEAP32[$281 >> 2] = $18; //@line 5411
     $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 5412
     HEAP32[$282 >> 2] = $20; //@line 5413
     $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 5414
     HEAP32[$283 >> 2] = $22; //@line 5415
     $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 5416
     HEAP32[$284 >> 2] = $24; //@line 5417
     $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 5418
     HEAP32[$285 >> 2] = $26; //@line 5419
     $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 5420
     HEAP32[$286 >> 2] = $28; //@line 5421
     $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 5422
     HEAP32[$287 >> 2] = $30; //@line 5423
     $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 5424
     HEAP32[$288 >> 2] = $57; //@line 5425
     sp = STACKTOP; //@line 5426
     return;
    }
    HEAP8[___async_retval >> 0] = $272; //@line 5430
    ___async_unwind = 0; //@line 5431
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 5432
    $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 5433
    HEAP32[$273 >> 2] = $2; //@line 5434
    $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 5435
    HEAP32[$274 >> 2] = $4; //@line 5436
    $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 5437
    HEAP32[$275 >> 2] = $6; //@line 5438
    $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 5439
    HEAP32[$276 >> 2] = $8; //@line 5440
    $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 5441
    HEAP32[$277 >> 2] = $10; //@line 5442
    $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 5443
    HEAP32[$278 >> 2] = $12; //@line 5444
    $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 5445
    HEAP32[$279 >> 2] = $14; //@line 5446
    $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 5447
    HEAP32[$280 >> 2] = $16; //@line 5448
    $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 5449
    HEAP32[$281 >> 2] = $18; //@line 5450
    $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 5451
    HEAP32[$282 >> 2] = $20; //@line 5452
    $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 5453
    HEAP32[$283 >> 2] = $22; //@line 5454
    $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 5455
    HEAP32[$284 >> 2] = $24; //@line 5456
    $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 5457
    HEAP32[$285 >> 2] = $26; //@line 5458
    $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 5459
    HEAP32[$286 >> 2] = $28; //@line 5460
    $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 5461
    HEAP32[$287 >> 2] = $30; //@line 5462
    $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 5463
    HEAP32[$288 >> 2] = $57; //@line 5464
    sp = STACKTOP; //@line 5465
    return;
   } else if ((label | 0) == 61) {
    $306 = HEAP32[$2 >> 2] | 0; //@line 5469
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 5472
    $309 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $306 + 64 | 0, $306 + 10 | 0, 15, $$1202$i) | 0; //@line 5473
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 5476
     $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 5477
     HEAP32[$310 >> 2] = $2; //@line 5478
     $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 5479
     HEAP32[$311 >> 2] = $4; //@line 5480
     $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 5481
     HEAP32[$312 >> 2] = $6; //@line 5482
     $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 5483
     HEAP32[$313 >> 2] = $8; //@line 5484
     $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 5485
     HEAP32[$314 >> 2] = $10; //@line 5486
     $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 5487
     HEAP32[$315 >> 2] = $12; //@line 5488
     $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 5489
     HEAP32[$316 >> 2] = $14; //@line 5490
     $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 5491
     HEAP32[$317 >> 2] = $16; //@line 5492
     $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 5493
     HEAP32[$318 >> 2] = $18; //@line 5494
     $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 5495
     HEAP32[$319 >> 2] = $20; //@line 5496
     $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 5497
     HEAP32[$320 >> 2] = $22; //@line 5498
     $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 5499
     HEAP32[$321 >> 2] = $24; //@line 5500
     $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 5501
     HEAP32[$322 >> 2] = $26; //@line 5502
     $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 5503
     HEAP32[$323 >> 2] = $28; //@line 5504
     $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 5505
     HEAP32[$324 >> 2] = $30; //@line 5506
     $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 5507
     HEAP32[$325 >> 2] = $57; //@line 5508
     sp = STACKTOP; //@line 5509
     return;
    }
    HEAP8[___async_retval >> 0] = $309; //@line 5513
    ___async_unwind = 0; //@line 5514
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 5515
    $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 5516
    HEAP32[$310 >> 2] = $2; //@line 5517
    $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 5518
    HEAP32[$311 >> 2] = $4; //@line 5519
    $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 5520
    HEAP32[$312 >> 2] = $6; //@line 5521
    $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 5522
    HEAP32[$313 >> 2] = $8; //@line 5523
    $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 5524
    HEAP32[$314 >> 2] = $10; //@line 5525
    $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 5526
    HEAP32[$315 >> 2] = $12; //@line 5527
    $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 5528
    HEAP32[$316 >> 2] = $14; //@line 5529
    $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 5530
    HEAP32[$317 >> 2] = $16; //@line 5531
    $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 5532
    HEAP32[$318 >> 2] = $18; //@line 5533
    $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 5534
    HEAP32[$319 >> 2] = $20; //@line 5535
    $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 5536
    HEAP32[$320 >> 2] = $22; //@line 5537
    $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 5538
    HEAP32[$321 >> 2] = $24; //@line 5539
    $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 5540
    HEAP32[$322 >> 2] = $26; //@line 5541
    $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 5542
    HEAP32[$323 >> 2] = $28; //@line 5543
    $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 5544
    HEAP32[$324 >> 2] = $30; //@line 5545
    $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 5546
    HEAP32[$325 >> 2] = $57; //@line 5547
    sp = STACKTOP; //@line 5548
    return;
   } else if ((label | 0) == 91) {
    if (($37 - $8 | 0) >= ($10 | 0)) {
     $436 = ___async_retval; //@line 5556
     HEAP32[$436 >> 2] = $22; //@line 5557
     return;
    }
    if ((HEAP8[$37 >> 0] | 0) == -1) {
     $426 = $37 + 1 | 0; //@line 5563
     HEAP32[$4 >> 2] = $426; //@line 5564
     $427 = $426; //@line 5565
     $429 = $8 - $427 + $10 | 0; //@line 5567
     HEAP16[$26 + 24 >> 1] = $429; //@line 5570
     if ($429 & 65535 | 0) {
      HEAP32[$26 + 36 >> 2] = $427; //@line 5575
      $436 = ___async_retval; //@line 5576
      HEAP32[$436 >> 2] = $22; //@line 5577
      return;
     }
    }
    HEAP32[$26 + 4 >> 2] = 1; //@line 5582
    $436 = ___async_retval; //@line 5583
    HEAP32[$436 >> 2] = $22; //@line 5584
    return;
   }
  }
 } while (0);
 HEAP32[$26 + 4 >> 2] = 1; //@line 5590
 $436 = ___async_retval; //@line 5591
 HEAP32[$436 >> 2] = $22; //@line 5592
 return;
}
function _sn_coap_parser__async_cb_22($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $184 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $239 = 0, $24 = 0, $240 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $292 = 0, $295 = 0, $296 = 0, $30 = 0, $301 = 0, $304 = 0, $306 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $354 = 0, $357 = 0, $361 = 0, $364 = 0, $365 = 0, $37 = 0, $370 = 0, $373 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $405 = 0, $410 = 0, $413 = 0, $417 = 0, $418 = 0, $426 = 0, $427 = 0, $429 = 0, $436 = 0, $437 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $124$looptemp = 0, $245$looptemp = 0, $301$looptemp = 0, $338$looptemp = 0, $354$looptemp = 0, $370$looptemp = 0, $389$looptemp = 0, $410$looptemp = 0, $112$looptemp = 0;
 sp = STACKTOP; //@line 2830
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2832
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2834
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2836
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2838
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2840
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2842
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2844
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2846
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2848
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2850
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2852
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2854
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2856
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2858
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2860
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 64 >> 2] | 0; //@line 2868
   L3 : while (1) {
    $417 = HEAP32[$6 >> 2] | 0; //@line 2870
    $418 = $417 - $8 | 0; //@line 2871
    $37 = $417; //@line 2874
    if (($418 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $418 & 65535) << 16 >> 16)) {
     label = 91; //@line 2881
     break;
    }
    $trunc277$i = HEAP8[$37 >> 0] | 0; //@line 2884
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 91; //@line 2887
     break;
    }
    $40 = $trunc277$i & 15; //@line 2891
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 2892
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$37 + 1 >> 0] | 0; //@line 2904
      $$sink214$i = 13; //@line 2904
      $$sink3$i = 1; //@line 2904
      label = 7; //@line 2905
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$37 + 1 >> 0] << 8) + 269 | 0; //@line 2917
      $$sink214$i = HEAPU8[$37 + 2 >> 0] | 0; //@line 2917
      $$sink3$i = 2; //@line 2917
      label = 7; //@line 2918
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 2922
      $437 = $417; //@line 2922
      $59 = $37; //@line 2922
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 2926
     $54 = $37 + $$sink3$i | 0; //@line 2928
     HEAP32[$4 >> 2] = $54; //@line 2929
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 2931
     $437 = $54; //@line 2931
     $59 = $54; //@line 2931
    }
    $57 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 2934
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$59 + 1 >> 0] | 0; //@line 2945
      $$sink216$i = 13; //@line 2945
      $$sink8$i = 1; //@line 2945
      label = 11; //@line 2946
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$59 + 1 >> 0] << 8) + 269 | 0; //@line 2958
      $$sink216$i = HEAPU8[$59 + 2 >> 0] | 0; //@line 2958
      $$sink8$i = 2; //@line 2958
      label = 11; //@line 2959
      break;
     }
    default:
     {
      $$1202$in$i = $40; //@line 2963
      $74 = $437; //@line 2963
      $86 = $59; //@line 2963
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 2967
     $71 = $59 + $$sink8$i | 0; //@line 2969
     HEAP32[$4 >> 2] = $71; //@line 2970
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 2972
     $74 = $71; //@line 2972
     $86 = $71; //@line 2972
    }
    $$1202$i = $$1202$in$i & 65535; //@line 2974
    $75 = $30 - $74 & 65535; //@line 2976
    $trunc$i = $57 & 65535; //@line 2977
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 52; //@line 2981
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$2 >> 2] | 0)) {
        label = 14; //@line 2989
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 2994
         break L3;
         break;
        }
       case 4:
        {
         label = 32; //@line 2999
         break L3;
         break;
        }
       case 3:
        {
         label = 35; //@line 3004
         break L3;
         break;
        }
       case 8:
        {
         label = 40; //@line 3009
         break L3;
         break;
        }
       case 20:
        {
         label = 49; //@line 3014
         break L3;
         break;
        }
       case 11:
        {
         label = 52; //@line 3019
         break L3;
         break;
        }
       case 15:
        {
         label = 61; //@line 3024
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $118 = $86 + 1 | 0; //@line 3037
         HEAP32[$4 >> 2] = $118; //@line 3038
         $119 = $$1202$in$i & 255; //@line 3039
         if (!($119 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 3042
         } else {
          $$045$i256$i = $119; //@line 3044
          $$06$i255$i = 0; //@line 3044
          $124 = $118; //@line 3044
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 3046
           $124$looptemp = $124;
           $124 = $124 + 1 | 0; //@line 3048
           HEAP32[$4 >> 2] = $124; //@line 3049
           $127 = $$06$i255$i << 8 | HEAPU8[$124$looptemp >> 0]; //@line 3052
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $127; //@line 3055
            break;
           } else {
            $$06$i255$i = $127; //@line 3058
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 3064
         $$reg2mem$0 = $57; //@line 3065
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $236 = (HEAP32[$2 >> 2] | 0) + 28 | 0; //@line 3075
         if ((HEAP32[$236 >> 2] | 0) != -1) {
          break L2;
         }
         $239 = $86 + 1 | 0; //@line 3081
         HEAP32[$4 >> 2] = $239; //@line 3082
         $240 = $$1202$in$i & 255; //@line 3083
         if (!($240 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 3086
         } else {
          $$045$i270$i = $240; //@line 3088
          $$06$i269$i = 0; //@line 3088
          $245 = $239; //@line 3088
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 3090
           $245$looptemp = $245;
           $245 = $245 + 1 | 0; //@line 3092
           HEAP32[$4 >> 2] = $245; //@line 3093
           $248 = $$06$i269$i << 8 | HEAPU8[$245$looptemp >> 0]; //@line 3096
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $248; //@line 3099
            break;
           } else {
            $$06$i269$i = $248; //@line 3102
           }
          }
         }
         HEAP32[$236 >> 2] = $$0$lcssa$i272$i; //@line 3106
         $$reg2mem$0 = $57; //@line 3107
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $292 = (HEAP32[$2 >> 2] | 0) + 32 | 0; //@line 3117
         if ((HEAP32[$292 >> 2] | 0) != -1) {
          break L2;
         }
         $295 = $86 + 1 | 0; //@line 3123
         HEAP32[$4 >> 2] = $295; //@line 3124
         $296 = $$1202$in$i & 255; //@line 3125
         if (!($296 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 3128
         } else {
          $$045$i263$i = $296; //@line 3130
          $$06$i262$i = 0; //@line 3130
          $301 = $295; //@line 3130
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 3132
           $301$looptemp = $301;
           $301 = $301 + 1 | 0; //@line 3134
           HEAP32[$4 >> 2] = $301; //@line 3135
           $304 = $$06$i262$i << 8 | HEAPU8[$301$looptemp >> 0]; //@line 3138
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $304; //@line 3141
            break;
           } else {
            $$06$i262$i = $304; //@line 3144
           }
          }
         }
         HEAP32[$292 >> 2] = $$0$lcssa$i265$i; //@line 3148
         $$reg2mem$0 = $57; //@line 3149
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $329 = (HEAP32[$2 >> 2] | 0) + 40 | 0; //@line 3159
         if ((HEAP32[$329 >> 2] | 0) != -1) {
          break L2;
         }
         $332 = $86 + 1 | 0; //@line 3165
         HEAP32[$4 >> 2] = $332; //@line 3166
         $333 = $$1202$in$i & 255; //@line 3167
         if (!($333 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 3170
         } else {
          $$045$i249$i = $333; //@line 3172
          $$06$i248$i = 0; //@line 3172
          $338 = $332; //@line 3172
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 3174
           $338$looptemp = $338;
           $338 = $338 + 1 | 0; //@line 3176
           HEAP32[$4 >> 2] = $338; //@line 3177
           $341 = $$06$i248$i << 8 | HEAPU8[$338$looptemp >> 0]; //@line 3180
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $341; //@line 3183
            break;
           } else {
            $$06$i248$i = $341; //@line 3186
           }
          }
         }
         HEAP32[$329 >> 2] = $$0$lcssa$i251$i; //@line 3190
         $$reg2mem$0 = $57; //@line 3191
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $345 = (HEAP32[$2 >> 2] | 0) + 36 | 0; //@line 3201
         if ((HEAP32[$345 >> 2] | 0) != -1) {
          break L2;
         }
         $348 = $86 + 1 | 0; //@line 3207
         HEAP32[$4 >> 2] = $348; //@line 3208
         $349 = $$1202$in$i & 255; //@line 3209
         if (!($349 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 3212
         } else {
          $$045$i242$i = $349; //@line 3214
          $$06$i241$i = 0; //@line 3214
          $354 = $348; //@line 3214
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 3216
           $354$looptemp = $354;
           $354 = $354 + 1 | 0; //@line 3218
           HEAP32[$4 >> 2] = $354; //@line 3219
           $357 = $$06$i241$i << 8 | HEAPU8[$354$looptemp >> 0]; //@line 3222
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $357; //@line 3225
            break;
           } else {
            $$06$i241$i = $357; //@line 3228
           }
          }
         }
         HEAP32[$345 >> 2] = $$0$lcssa$i244$i; //@line 3232
         $$reg2mem$0 = $57; //@line 3233
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $361 = (HEAP32[$2 >> 2] | 0) + 12 | 0; //@line 3243
         if ((HEAP32[$361 >> 2] | 0) != -1) {
          break L2;
         }
         $364 = $86 + 1 | 0; //@line 3249
         HEAP32[$4 >> 2] = $364; //@line 3250
         $365 = $$1202$in$i & 255; //@line 3251
         if (!($365 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 3254
         } else {
          $$045$i235$i = $365; //@line 3256
          $$06$i234$i = 0; //@line 3256
          $370 = $364; //@line 3256
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 3258
           $370$looptemp = $370;
           $370 = $370 + 1 | 0; //@line 3260
           HEAP32[$4 >> 2] = $370; //@line 3261
           $373 = $$06$i234$i << 8 | HEAPU8[$370$looptemp >> 0]; //@line 3264
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $373; //@line 3267
            break;
           } else {
            $$06$i234$i = $373; //@line 3270
           }
          }
         }
         HEAP32[$361 >> 2] = $$0$lcssa$i237$i; //@line 3274
         $$reg2mem$0 = $57; //@line 3275
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $377 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 3285
         $378 = HEAP8[$377 >> 0] | 0; //@line 3286
         if ($378 & 1) {
          break L2;
         }
         HEAP8[$377 >> 0] = $378 | 1; //@line 3293
         $383 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 3295
         HEAP32[$4 >> 2] = $383; //@line 3296
         $384 = $$1202$in$i & 255; //@line 3297
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 3300
         } else {
          $$045$i228$i = $384; //@line 3302
          $$06$i227$i = 0; //@line 3302
          $389 = $383; //@line 3302
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 3304
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 3306
           HEAP32[$4 >> 2] = $389; //@line 3307
           $392 = $$06$i227$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 3310
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $392; //@line 3313
            break;
           } else {
            $$06$i227$i = $392; //@line 3316
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 3322
         $$reg2mem$0 = $57; //@line 3323
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $398 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 3333
         $399 = HEAP8[$398 >> 0] | 0; //@line 3334
         if ($399 & 2) {
          break L2;
         }
         HEAP8[$398 >> 0] = $399 | 2; //@line 3341
         $404 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 3343
         HEAP32[$4 >> 2] = $404; //@line 3344
         $405 = $$1202$in$i & 255; //@line 3345
         if (!($405 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 3348
         } else {
          $$045$i221$i = $405; //@line 3350
          $$06$i220$i = 0; //@line 3350
          $410 = $404; //@line 3350
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 3352
           $410$looptemp = $410;
           $410 = $410 + 1 | 0; //@line 3354
           HEAP32[$4 >> 2] = $410; //@line 3355
           $413 = $$06$i220$i << 8 | HEAPU8[$410$looptemp >> 0]; //@line 3358
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $413; //@line 3361
            break;
           } else {
            $$06$i220$i = $413; //@line 3364
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 3370
         $$reg2mem$0 = $57; //@line 3371
         continue L3;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$28 >> 2] | 0) != -1) {
     break L2;
    }
    $106 = $86 + 1 | 0; //@line 3398
    HEAP32[$4 >> 2] = $106; //@line 3399
    $107 = $$1202$in$i & 255; //@line 3400
    if (!($107 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 3403
    } else {
     $$045$i$i = $107; //@line 3405
     $$06$i$i = 0; //@line 3405
     $112 = $106; //@line 3405
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 3407
      $112$looptemp = $112;
      $112 = $112 + 1 | 0; //@line 3409
      HEAP32[$4 >> 2] = $112; //@line 3410
      $115 = $$06$i$i << 8 | HEAPU8[$112$looptemp >> 0]; //@line 3413
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $115; //@line 3416
       break;
      } else {
       $$06$i$i = $115; //@line 3419
      }
     }
    }
    HEAP32[$28 >> 2] = $$0$lcssa$i$i; //@line 3423
    $$reg2mem$0 = $57; //@line 3424
   }
   if ((label | 0) == 14) {
    $78 = HEAP32[$16 >> 2] | 0; //@line 3427
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(88) | 0; //@line 3428
    $79 = FUNCTION_TABLE_ii[$78 & 15](68) | 0; //@line 3429
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 3432
     $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 3433
     HEAP32[$80 >> 2] = $2; //@line 3434
     $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 3435
     HEAP32[$81 >> 2] = $4; //@line 3436
     $82 = $ReallocAsyncCtx3 + 12 | 0; //@line 3437
     HEAP32[$82 >> 2] = $$1202$in$i; //@line 3438
     $83 = $ReallocAsyncCtx3 + 16 | 0; //@line 3439
     HEAP32[$83 >> 2] = $57; //@line 3440
     $84 = $ReallocAsyncCtx3 + 20 | 0; //@line 3441
     HEAP16[$84 >> 1] = $$1202$i; //@line 3442
     $85 = $ReallocAsyncCtx3 + 24 | 0; //@line 3443
     HEAP32[$85 >> 2] = $86; //@line 3444
     $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 3445
     HEAP32[$87 >> 2] = $6; //@line 3446
     $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 3447
     HEAP32[$88 >> 2] = $8; //@line 3448
     $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 3449
     HEAP32[$89 >> 2] = $10; //@line 3450
     $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 3451
     HEAP32[$90 >> 2] = $12; //@line 3452
     $91 = $ReallocAsyncCtx3 + 44 | 0; //@line 3453
     HEAP32[$91 >> 2] = $14; //@line 3454
     $92 = $ReallocAsyncCtx3 + 48 | 0; //@line 3455
     HEAP16[$92 >> 1] = $75; //@line 3456
     $93 = $ReallocAsyncCtx3 + 52 | 0; //@line 3457
     HEAP32[$93 >> 2] = $16; //@line 3458
     $94 = $ReallocAsyncCtx3 + 56 | 0; //@line 3459
     HEAP32[$94 >> 2] = $18; //@line 3460
     $95 = $ReallocAsyncCtx3 + 60 | 0; //@line 3461
     HEAP32[$95 >> 2] = $20; //@line 3462
     $96 = $ReallocAsyncCtx3 + 64 | 0; //@line 3463
     HEAP16[$96 >> 1] = $trunc$i; //@line 3464
     $97 = $ReallocAsyncCtx3 + 68 | 0; //@line 3465
     HEAP32[$97 >> 2] = $22; //@line 3466
     $98 = $ReallocAsyncCtx3 + 72 | 0; //@line 3467
     HEAP32[$98 >> 2] = $24; //@line 3468
     $99 = $ReallocAsyncCtx3 + 76 | 0; //@line 3469
     HEAP32[$99 >> 2] = $26; //@line 3470
     $100 = $ReallocAsyncCtx3 + 80 | 0; //@line 3471
     HEAP32[$100 >> 2] = $28; //@line 3472
     $101 = $ReallocAsyncCtx3 + 84 | 0; //@line 3473
     HEAP32[$101 >> 2] = $30; //@line 3474
     sp = STACKTOP; //@line 3475
     return;
    }
    HEAP32[___async_retval >> 2] = $79; //@line 3479
    ___async_unwind = 0; //@line 3480
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 3481
    $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 3482
    HEAP32[$80 >> 2] = $2; //@line 3483
    $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 3484
    HEAP32[$81 >> 2] = $4; //@line 3485
    $82 = $ReallocAsyncCtx3 + 12 | 0; //@line 3486
    HEAP32[$82 >> 2] = $$1202$in$i; //@line 3487
    $83 = $ReallocAsyncCtx3 + 16 | 0; //@line 3488
    HEAP32[$83 >> 2] = $57; //@line 3489
    $84 = $ReallocAsyncCtx3 + 20 | 0; //@line 3490
    HEAP16[$84 >> 1] = $$1202$i; //@line 3491
    $85 = $ReallocAsyncCtx3 + 24 | 0; //@line 3492
    HEAP32[$85 >> 2] = $86; //@line 3493
    $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 3494
    HEAP32[$87 >> 2] = $6; //@line 3495
    $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 3496
    HEAP32[$88 >> 2] = $8; //@line 3497
    $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 3498
    HEAP32[$89 >> 2] = $10; //@line 3499
    $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 3500
    HEAP32[$90 >> 2] = $12; //@line 3501
    $91 = $ReallocAsyncCtx3 + 44 | 0; //@line 3502
    HEAP32[$91 >> 2] = $14; //@line 3503
    $92 = $ReallocAsyncCtx3 + 48 | 0; //@line 3504
    HEAP16[$92 >> 1] = $75; //@line 3505
    $93 = $ReallocAsyncCtx3 + 52 | 0; //@line 3506
    HEAP32[$93 >> 2] = $16; //@line 3507
    $94 = $ReallocAsyncCtx3 + 56 | 0; //@line 3508
    HEAP32[$94 >> 2] = $18; //@line 3509
    $95 = $ReallocAsyncCtx3 + 60 | 0; //@line 3510
    HEAP32[$95 >> 2] = $20; //@line 3511
    $96 = $ReallocAsyncCtx3 + 64 | 0; //@line 3512
    HEAP16[$96 >> 1] = $trunc$i; //@line 3513
    $97 = $ReallocAsyncCtx3 + 68 | 0; //@line 3514
    HEAP32[$97 >> 2] = $22; //@line 3515
    $98 = $ReallocAsyncCtx3 + 72 | 0; //@line 3516
    HEAP32[$98 >> 2] = $24; //@line 3517
    $99 = $ReallocAsyncCtx3 + 76 | 0; //@line 3518
    HEAP32[$99 >> 2] = $26; //@line 3519
    $100 = $ReallocAsyncCtx3 + 80 | 0; //@line 3520
    HEAP32[$100 >> 2] = $28; //@line 3521
    $101 = $ReallocAsyncCtx3 + 84 | 0; //@line 3522
    HEAP32[$101 >> 2] = $30; //@line 3523
    sp = STACKTOP; //@line 3524
    return;
   } else if ((label | 0) == 27) {
    $131 = $$1202$in$i & 65535; //@line 3528
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $134 = HEAP32[$2 >> 2] | 0; //@line 3534
    if (HEAP32[$134 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$134 + 2 >> 1] = $$1202$i; //@line 3542
    $139 = $86 + 1 | 0; //@line 3543
    HEAP32[$4 >> 2] = $139; //@line 3544
    $140 = HEAP32[$16 >> 2] | 0; //@line 3545
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 3546
    $141 = FUNCTION_TABLE_ii[$140 & 15]($$1202$i) | 0; //@line 3547
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 3550
     $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 3551
     HEAP32[$142 >> 2] = $2; //@line 3552
     $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 3553
     HEAP32[$143 >> 2] = $4; //@line 3554
     $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 3555
     HEAP32[$144 >> 2] = $6; //@line 3556
     $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 3557
     HEAP32[$145 >> 2] = $8; //@line 3558
     $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 3559
     HEAP32[$146 >> 2] = $10; //@line 3560
     $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 3561
     HEAP32[$147 >> 2] = $12; //@line 3562
     $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 3563
     HEAP32[$148 >> 2] = $14; //@line 3564
     $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 3565
     HEAP32[$149 >> 2] = $16; //@line 3566
     $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 3567
     HEAP32[$150 >> 2] = $18; //@line 3568
     $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 3569
     HEAP32[$151 >> 2] = $20; //@line 3570
     $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 3571
     HEAP32[$152 >> 2] = $22; //@line 3572
     $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 3573
     HEAP32[$153 >> 2] = $24; //@line 3574
     $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 3575
     HEAP32[$154 >> 2] = $26; //@line 3576
     $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 3577
     HEAP32[$155 >> 2] = $28; //@line 3578
     $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 3579
     HEAP32[$156 >> 2] = $30; //@line 3580
     $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 3581
     HEAP32[$157 >> 2] = $57; //@line 3582
     $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 3583
     HEAP32[$158 >> 2] = $139; //@line 3584
     $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 3585
     HEAP32[$159 >> 2] = $131; //@line 3586
     sp = STACKTOP; //@line 3587
     return;
    }
    HEAP32[___async_retval >> 2] = $141; //@line 3591
    ___async_unwind = 0; //@line 3592
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 3593
    $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 3594
    HEAP32[$142 >> 2] = $2; //@line 3595
    $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 3596
    HEAP32[$143 >> 2] = $4; //@line 3597
    $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 3598
    HEAP32[$144 >> 2] = $6; //@line 3599
    $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 3600
    HEAP32[$145 >> 2] = $8; //@line 3601
    $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 3602
    HEAP32[$146 >> 2] = $10; //@line 3603
    $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 3604
    HEAP32[$147 >> 2] = $12; //@line 3605
    $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 3606
    HEAP32[$148 >> 2] = $14; //@line 3607
    $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 3608
    HEAP32[$149 >> 2] = $16; //@line 3609
    $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 3610
    HEAP32[$150 >> 2] = $18; //@line 3611
    $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 3612
    HEAP32[$151 >> 2] = $20; //@line 3613
    $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 3614
    HEAP32[$152 >> 2] = $22; //@line 3615
    $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 3616
    HEAP32[$153 >> 2] = $24; //@line 3617
    $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 3618
    HEAP32[$154 >> 2] = $26; //@line 3619
    $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 3620
    HEAP32[$155 >> 2] = $28; //@line 3621
    $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 3622
    HEAP32[$156 >> 2] = $30; //@line 3623
    $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 3624
    HEAP32[$157 >> 2] = $57; //@line 3625
    $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 3626
    HEAP32[$158 >> 2] = $139; //@line 3627
    $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 3628
    HEAP32[$159 >> 2] = $131; //@line 3629
    sp = STACKTOP; //@line 3630
    return;
   } else if ((label | 0) == 32) {
    $161 = HEAP32[$2 >> 2] | 0; //@line 3634
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 3636
    $163 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $161 + 48 | 0, $161, 4, $$1202$i) | 0; //@line 3637
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 3640
     $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 3641
     HEAP32[$164 >> 2] = $2; //@line 3642
     $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 3643
     HEAP32[$165 >> 2] = $4; //@line 3644
     $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 3645
     HEAP32[$166 >> 2] = $6; //@line 3646
     $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 3647
     HEAP32[$167 >> 2] = $8; //@line 3648
     $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 3649
     HEAP32[$168 >> 2] = $10; //@line 3650
     $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 3651
     HEAP32[$169 >> 2] = $12; //@line 3652
     $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 3653
     HEAP32[$170 >> 2] = $14; //@line 3654
     $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 3655
     HEAP32[$171 >> 2] = $16; //@line 3656
     $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 3657
     HEAP32[$172 >> 2] = $18; //@line 3658
     $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 3659
     HEAP32[$173 >> 2] = $20; //@line 3660
     $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 3661
     HEAP32[$174 >> 2] = $22; //@line 3662
     $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 3663
     HEAP32[$175 >> 2] = $24; //@line 3664
     $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 3665
     HEAP32[$176 >> 2] = $26; //@line 3666
     $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 3667
     HEAP32[$177 >> 2] = $28; //@line 3668
     $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 3669
     HEAP32[$178 >> 2] = $30; //@line 3670
     $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 3671
     HEAP32[$179 >> 2] = $57; //@line 3672
     sp = STACKTOP; //@line 3673
     return;
    }
    HEAP8[___async_retval >> 0] = $163; //@line 3677
    ___async_unwind = 0; //@line 3678
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 3679
    $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 3680
    HEAP32[$164 >> 2] = $2; //@line 3681
    $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 3682
    HEAP32[$165 >> 2] = $4; //@line 3683
    $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 3684
    HEAP32[$166 >> 2] = $6; //@line 3685
    $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 3686
    HEAP32[$167 >> 2] = $8; //@line 3687
    $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 3688
    HEAP32[$168 >> 2] = $10; //@line 3689
    $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 3690
    HEAP32[$169 >> 2] = $12; //@line 3691
    $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 3692
    HEAP32[$170 >> 2] = $14; //@line 3693
    $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 3694
    HEAP32[$171 >> 2] = $16; //@line 3695
    $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 3696
    HEAP32[$172 >> 2] = $18; //@line 3697
    $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 3698
    HEAP32[$173 >> 2] = $20; //@line 3699
    $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 3700
    HEAP32[$174 >> 2] = $22; //@line 3701
    $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 3702
    HEAP32[$175 >> 2] = $24; //@line 3703
    $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 3704
    HEAP32[$176 >> 2] = $26; //@line 3705
    $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 3706
    HEAP32[$177 >> 2] = $28; //@line 3707
    $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 3708
    HEAP32[$178 >> 2] = $30; //@line 3709
    $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 3710
    HEAP32[$179 >> 2] = $57; //@line 3711
    sp = STACKTOP; //@line 3712
    return;
   } else if ((label | 0) == 35) {
    $181 = $$1202$in$i & 65535; //@line 3716
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $184 = HEAP32[$2 >> 2] | 0; //@line 3722
    if (HEAP32[$184 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$184 + 4 >> 1] = $$1202$i; //@line 3730
    $189 = $86 + 1 | 0; //@line 3731
    HEAP32[$4 >> 2] = $189; //@line 3732
    $190 = HEAP32[$16 >> 2] | 0; //@line 3733
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 3734
    $191 = FUNCTION_TABLE_ii[$190 & 15]($$1202$i) | 0; //@line 3735
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 3738
     $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 3739
     HEAP32[$192 >> 2] = $2; //@line 3740
     $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 3741
     HEAP32[$193 >> 2] = $4; //@line 3742
     $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 3743
     HEAP32[$194 >> 2] = $6; //@line 3744
     $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 3745
     HEAP32[$195 >> 2] = $8; //@line 3746
     $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 3747
     HEAP32[$196 >> 2] = $10; //@line 3748
     $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 3749
     HEAP32[$197 >> 2] = $12; //@line 3750
     $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 3751
     HEAP32[$198 >> 2] = $14; //@line 3752
     $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 3753
     HEAP32[$199 >> 2] = $16; //@line 3754
     $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 3755
     HEAP32[$200 >> 2] = $18; //@line 3756
     $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 3757
     HEAP32[$201 >> 2] = $20; //@line 3758
     $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 3759
     HEAP32[$202 >> 2] = $22; //@line 3760
     $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 3761
     HEAP32[$203 >> 2] = $24; //@line 3762
     $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 3763
     HEAP32[$204 >> 2] = $26; //@line 3764
     $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 3765
     HEAP32[$205 >> 2] = $28; //@line 3766
     $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 3767
     HEAP32[$206 >> 2] = $30; //@line 3768
     $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 3769
     HEAP32[$207 >> 2] = $57; //@line 3770
     $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 3771
     HEAP32[$208 >> 2] = $189; //@line 3772
     $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 3773
     HEAP32[$209 >> 2] = $181; //@line 3774
     sp = STACKTOP; //@line 3775
     return;
    }
    HEAP32[___async_retval >> 2] = $191; //@line 3779
    ___async_unwind = 0; //@line 3780
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 3781
    $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 3782
    HEAP32[$192 >> 2] = $2; //@line 3783
    $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 3784
    HEAP32[$193 >> 2] = $4; //@line 3785
    $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 3786
    HEAP32[$194 >> 2] = $6; //@line 3787
    $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 3788
    HEAP32[$195 >> 2] = $8; //@line 3789
    $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 3790
    HEAP32[$196 >> 2] = $10; //@line 3791
    $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 3792
    HEAP32[$197 >> 2] = $12; //@line 3793
    $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 3794
    HEAP32[$198 >> 2] = $14; //@line 3795
    $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 3796
    HEAP32[$199 >> 2] = $16; //@line 3797
    $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 3798
    HEAP32[$200 >> 2] = $18; //@line 3799
    $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 3800
    HEAP32[$201 >> 2] = $20; //@line 3801
    $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 3802
    HEAP32[$202 >> 2] = $22; //@line 3803
    $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 3804
    HEAP32[$203 >> 2] = $24; //@line 3805
    $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 3806
    HEAP32[$204 >> 2] = $26; //@line 3807
    $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 3808
    HEAP32[$205 >> 2] = $28; //@line 3809
    $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 3810
    HEAP32[$206 >> 2] = $30; //@line 3811
    $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 3812
    HEAP32[$207 >> 2] = $57; //@line 3813
    $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 3814
    HEAP32[$208 >> 2] = $189; //@line 3815
    $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 3816
    HEAP32[$209 >> 2] = $181; //@line 3817
    sp = STACKTOP; //@line 3818
    return;
   } else if ((label | 0) == 40) {
    $211 = HEAP32[$2 >> 2] | 0; //@line 3822
    $212 = $211 + 56 | 0; //@line 3823
    if (HEAP32[$212 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 3830
    $216 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $212, $211 + 6 | 0, 8, $$1202$i) | 0; //@line 3831
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 3834
     $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 3835
     HEAP32[$217 >> 2] = $2; //@line 3836
     $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 3837
     HEAP32[$218 >> 2] = $4; //@line 3838
     $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 3839
     HEAP32[$219 >> 2] = $6; //@line 3840
     $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 3841
     HEAP32[$220 >> 2] = $8; //@line 3842
     $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 3843
     HEAP32[$221 >> 2] = $10; //@line 3844
     $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 3845
     HEAP32[$222 >> 2] = $12; //@line 3846
     $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 3847
     HEAP32[$223 >> 2] = $14; //@line 3848
     $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 3849
     HEAP32[$224 >> 2] = $16; //@line 3850
     $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 3851
     HEAP32[$225 >> 2] = $18; //@line 3852
     $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 3853
     HEAP32[$226 >> 2] = $20; //@line 3854
     $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 3855
     HEAP32[$227 >> 2] = $22; //@line 3856
     $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 3857
     HEAP32[$228 >> 2] = $24; //@line 3858
     $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 3859
     HEAP32[$229 >> 2] = $26; //@line 3860
     $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 3861
     HEAP32[$230 >> 2] = $28; //@line 3862
     $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 3863
     HEAP32[$231 >> 2] = $30; //@line 3864
     $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 3865
     HEAP32[$232 >> 2] = $57; //@line 3866
     sp = STACKTOP; //@line 3867
     return;
    }
    HEAP8[___async_retval >> 0] = $216; //@line 3871
    ___async_unwind = 0; //@line 3872
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 3873
    $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 3874
    HEAP32[$217 >> 2] = $2; //@line 3875
    $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 3876
    HEAP32[$218 >> 2] = $4; //@line 3877
    $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 3878
    HEAP32[$219 >> 2] = $6; //@line 3879
    $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 3880
    HEAP32[$220 >> 2] = $8; //@line 3881
    $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 3882
    HEAP32[$221 >> 2] = $10; //@line 3883
    $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 3884
    HEAP32[$222 >> 2] = $12; //@line 3885
    $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 3886
    HEAP32[$223 >> 2] = $14; //@line 3887
    $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 3888
    HEAP32[$224 >> 2] = $16; //@line 3889
    $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 3890
    HEAP32[$225 >> 2] = $18; //@line 3891
    $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 3892
    HEAP32[$226 >> 2] = $20; //@line 3893
    $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 3894
    HEAP32[$227 >> 2] = $22; //@line 3895
    $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 3896
    HEAP32[$228 >> 2] = $24; //@line 3897
    $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 3898
    HEAP32[$229 >> 2] = $26; //@line 3899
    $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 3900
    HEAP32[$230 >> 2] = $28; //@line 3901
    $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 3902
    HEAP32[$231 >> 2] = $30; //@line 3903
    $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 3904
    HEAP32[$232 >> 2] = $57; //@line 3905
    sp = STACKTOP; //@line 3906
    return;
   } else if ((label | 0) == 49) {
    $250 = HEAP32[$2 >> 2] | 0; //@line 3910
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 3913
    $253 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $250 + 60 | 0, $250 + 8 | 0, 20, $$1202$i) | 0; //@line 3914
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 3917
     $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 3918
     HEAP32[$254 >> 2] = $2; //@line 3919
     $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 3920
     HEAP32[$255 >> 2] = $4; //@line 3921
     $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 3922
     HEAP32[$256 >> 2] = $6; //@line 3923
     $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 3924
     HEAP32[$257 >> 2] = $8; //@line 3925
     $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 3926
     HEAP32[$258 >> 2] = $10; //@line 3927
     $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 3928
     HEAP32[$259 >> 2] = $12; //@line 3929
     $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 3930
     HEAP32[$260 >> 2] = $14; //@line 3931
     $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 3932
     HEAP32[$261 >> 2] = $16; //@line 3933
     $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 3934
     HEAP32[$262 >> 2] = $18; //@line 3935
     $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 3936
     HEAP32[$263 >> 2] = $20; //@line 3937
     $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 3938
     HEAP32[$264 >> 2] = $22; //@line 3939
     $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 3940
     HEAP32[$265 >> 2] = $24; //@line 3941
     $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 3942
     HEAP32[$266 >> 2] = $26; //@line 3943
     $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 3944
     HEAP32[$267 >> 2] = $28; //@line 3945
     $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 3946
     HEAP32[$268 >> 2] = $30; //@line 3947
     $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 3948
     HEAP32[$269 >> 2] = $57; //@line 3949
     sp = STACKTOP; //@line 3950
     return;
    }
    HEAP8[___async_retval >> 0] = $253; //@line 3954
    ___async_unwind = 0; //@line 3955
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 3956
    $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 3957
    HEAP32[$254 >> 2] = $2; //@line 3958
    $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 3959
    HEAP32[$255 >> 2] = $4; //@line 3960
    $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 3961
    HEAP32[$256 >> 2] = $6; //@line 3962
    $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 3963
    HEAP32[$257 >> 2] = $8; //@line 3964
    $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 3965
    HEAP32[$258 >> 2] = $10; //@line 3966
    $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 3967
    HEAP32[$259 >> 2] = $12; //@line 3968
    $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 3969
    HEAP32[$260 >> 2] = $14; //@line 3970
    $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 3971
    HEAP32[$261 >> 2] = $16; //@line 3972
    $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 3973
    HEAP32[$262 >> 2] = $18; //@line 3974
    $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 3975
    HEAP32[$263 >> 2] = $20; //@line 3976
    $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 3977
    HEAP32[$264 >> 2] = $22; //@line 3978
    $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 3979
    HEAP32[$265 >> 2] = $24; //@line 3980
    $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 3981
    HEAP32[$266 >> 2] = $26; //@line 3982
    $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 3983
    HEAP32[$267 >> 2] = $28; //@line 3984
    $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 3985
    HEAP32[$268 >> 2] = $30; //@line 3986
    $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 3987
    HEAP32[$269 >> 2] = $57; //@line 3988
    sp = STACKTOP; //@line 3989
    return;
   } else if ((label | 0) == 52) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 3993
    $271 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $18, $20, 11, $$1202$i) | 0; //@line 3994
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 3997
     $272 = $ReallocAsyncCtx7 + 4 | 0; //@line 3998
     HEAP32[$272 >> 2] = $2; //@line 3999
     $273 = $ReallocAsyncCtx7 + 8 | 0; //@line 4000
     HEAP32[$273 >> 2] = $4; //@line 4001
     $274 = $ReallocAsyncCtx7 + 12 | 0; //@line 4002
     HEAP32[$274 >> 2] = $6; //@line 4003
     $275 = $ReallocAsyncCtx7 + 16 | 0; //@line 4004
     HEAP32[$275 >> 2] = $8; //@line 4005
     $276 = $ReallocAsyncCtx7 + 20 | 0; //@line 4006
     HEAP32[$276 >> 2] = $10; //@line 4007
     $277 = $ReallocAsyncCtx7 + 24 | 0; //@line 4008
     HEAP32[$277 >> 2] = $12; //@line 4009
     $278 = $ReallocAsyncCtx7 + 28 | 0; //@line 4010
     HEAP32[$278 >> 2] = $14; //@line 4011
     $279 = $ReallocAsyncCtx7 + 32 | 0; //@line 4012
     HEAP32[$279 >> 2] = $16; //@line 4013
     $280 = $ReallocAsyncCtx7 + 36 | 0; //@line 4014
     HEAP32[$280 >> 2] = $18; //@line 4015
     $281 = $ReallocAsyncCtx7 + 40 | 0; //@line 4016
     HEAP32[$281 >> 2] = $20; //@line 4017
     $282 = $ReallocAsyncCtx7 + 44 | 0; //@line 4018
     HEAP32[$282 >> 2] = $22; //@line 4019
     $283 = $ReallocAsyncCtx7 + 48 | 0; //@line 4020
     HEAP32[$283 >> 2] = $24; //@line 4021
     $284 = $ReallocAsyncCtx7 + 52 | 0; //@line 4022
     HEAP32[$284 >> 2] = $26; //@line 4023
     $285 = $ReallocAsyncCtx7 + 56 | 0; //@line 4024
     HEAP32[$285 >> 2] = $28; //@line 4025
     $286 = $ReallocAsyncCtx7 + 60 | 0; //@line 4026
     HEAP32[$286 >> 2] = $30; //@line 4027
     $287 = $ReallocAsyncCtx7 + 64 | 0; //@line 4028
     HEAP32[$287 >> 2] = $57; //@line 4029
     sp = STACKTOP; //@line 4030
     return;
    }
    HEAP8[___async_retval >> 0] = $271; //@line 4034
    ___async_unwind = 0; //@line 4035
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 4036
    $272 = $ReallocAsyncCtx7 + 4 | 0; //@line 4037
    HEAP32[$272 >> 2] = $2; //@line 4038
    $273 = $ReallocAsyncCtx7 + 8 | 0; //@line 4039
    HEAP32[$273 >> 2] = $4; //@line 4040
    $274 = $ReallocAsyncCtx7 + 12 | 0; //@line 4041
    HEAP32[$274 >> 2] = $6; //@line 4042
    $275 = $ReallocAsyncCtx7 + 16 | 0; //@line 4043
    HEAP32[$275 >> 2] = $8; //@line 4044
    $276 = $ReallocAsyncCtx7 + 20 | 0; //@line 4045
    HEAP32[$276 >> 2] = $10; //@line 4046
    $277 = $ReallocAsyncCtx7 + 24 | 0; //@line 4047
    HEAP32[$277 >> 2] = $12; //@line 4048
    $278 = $ReallocAsyncCtx7 + 28 | 0; //@line 4049
    HEAP32[$278 >> 2] = $14; //@line 4050
    $279 = $ReallocAsyncCtx7 + 32 | 0; //@line 4051
    HEAP32[$279 >> 2] = $16; //@line 4052
    $280 = $ReallocAsyncCtx7 + 36 | 0; //@line 4053
    HEAP32[$280 >> 2] = $18; //@line 4054
    $281 = $ReallocAsyncCtx7 + 40 | 0; //@line 4055
    HEAP32[$281 >> 2] = $20; //@line 4056
    $282 = $ReallocAsyncCtx7 + 44 | 0; //@line 4057
    HEAP32[$282 >> 2] = $22; //@line 4058
    $283 = $ReallocAsyncCtx7 + 48 | 0; //@line 4059
    HEAP32[$283 >> 2] = $24; //@line 4060
    $284 = $ReallocAsyncCtx7 + 52 | 0; //@line 4061
    HEAP32[$284 >> 2] = $26; //@line 4062
    $285 = $ReallocAsyncCtx7 + 56 | 0; //@line 4063
    HEAP32[$285 >> 2] = $28; //@line 4064
    $286 = $ReallocAsyncCtx7 + 60 | 0; //@line 4065
    HEAP32[$286 >> 2] = $30; //@line 4066
    $287 = $ReallocAsyncCtx7 + 64 | 0; //@line 4067
    HEAP32[$287 >> 2] = $57; //@line 4068
    sp = STACKTOP; //@line 4069
    return;
   } else if ((label | 0) == 61) {
    $306 = HEAP32[$2 >> 2] | 0; //@line 4073
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 4076
    $309 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $306 + 64 | 0, $306 + 10 | 0, 15, $$1202$i) | 0; //@line 4077
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 4080
     $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 4081
     HEAP32[$310 >> 2] = $2; //@line 4082
     $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 4083
     HEAP32[$311 >> 2] = $4; //@line 4084
     $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 4085
     HEAP32[$312 >> 2] = $6; //@line 4086
     $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 4087
     HEAP32[$313 >> 2] = $8; //@line 4088
     $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 4089
     HEAP32[$314 >> 2] = $10; //@line 4090
     $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 4091
     HEAP32[$315 >> 2] = $12; //@line 4092
     $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 4093
     HEAP32[$316 >> 2] = $14; //@line 4094
     $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 4095
     HEAP32[$317 >> 2] = $16; //@line 4096
     $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 4097
     HEAP32[$318 >> 2] = $18; //@line 4098
     $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 4099
     HEAP32[$319 >> 2] = $20; //@line 4100
     $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 4101
     HEAP32[$320 >> 2] = $22; //@line 4102
     $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 4103
     HEAP32[$321 >> 2] = $24; //@line 4104
     $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 4105
     HEAP32[$322 >> 2] = $26; //@line 4106
     $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 4107
     HEAP32[$323 >> 2] = $28; //@line 4108
     $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 4109
     HEAP32[$324 >> 2] = $30; //@line 4110
     $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 4111
     HEAP32[$325 >> 2] = $57; //@line 4112
     sp = STACKTOP; //@line 4113
     return;
    }
    HEAP8[___async_retval >> 0] = $309; //@line 4117
    ___async_unwind = 0; //@line 4118
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 4119
    $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 4120
    HEAP32[$310 >> 2] = $2; //@line 4121
    $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 4122
    HEAP32[$311 >> 2] = $4; //@line 4123
    $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 4124
    HEAP32[$312 >> 2] = $6; //@line 4125
    $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 4126
    HEAP32[$313 >> 2] = $8; //@line 4127
    $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 4128
    HEAP32[$314 >> 2] = $10; //@line 4129
    $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 4130
    HEAP32[$315 >> 2] = $12; //@line 4131
    $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 4132
    HEAP32[$316 >> 2] = $14; //@line 4133
    $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 4134
    HEAP32[$317 >> 2] = $16; //@line 4135
    $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 4136
    HEAP32[$318 >> 2] = $18; //@line 4137
    $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 4138
    HEAP32[$319 >> 2] = $20; //@line 4139
    $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 4140
    HEAP32[$320 >> 2] = $22; //@line 4141
    $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 4142
    HEAP32[$321 >> 2] = $24; //@line 4143
    $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 4144
    HEAP32[$322 >> 2] = $26; //@line 4145
    $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 4146
    HEAP32[$323 >> 2] = $28; //@line 4147
    $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 4148
    HEAP32[$324 >> 2] = $30; //@line 4149
    $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 4150
    HEAP32[$325 >> 2] = $57; //@line 4151
    sp = STACKTOP; //@line 4152
    return;
   } else if ((label | 0) == 91) {
    if (($37 - $8 | 0) >= ($10 | 0)) {
     $436 = ___async_retval; //@line 4160
     HEAP32[$436 >> 2] = $22; //@line 4161
     return;
    }
    if ((HEAP8[$37 >> 0] | 0) == -1) {
     $426 = $37 + 1 | 0; //@line 4167
     HEAP32[$4 >> 2] = $426; //@line 4168
     $427 = $426; //@line 4169
     $429 = $8 - $427 + $10 | 0; //@line 4171
     HEAP16[$26 + 24 >> 1] = $429; //@line 4174
     if ($429 & 65535 | 0) {
      HEAP32[$26 + 36 >> 2] = $427; //@line 4179
      $436 = ___async_retval; //@line 4180
      HEAP32[$436 >> 2] = $22; //@line 4181
      return;
     }
    }
    HEAP32[$26 + 4 >> 2] = 1; //@line 4186
    $436 = ___async_retval; //@line 4187
    HEAP32[$436 >> 2] = $22; //@line 4188
    return;
   }
  }
 } while (0);
 HEAP32[$26 + 4 >> 2] = 1; //@line 4194
 $436 = ___async_retval; //@line 4195
 HEAP32[$436 >> 2] = $22; //@line 4196
 return;
}
function _sn_coap_parser__async_cb_21($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $184 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $239 = 0, $24 = 0, $240 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $295 = 0, $30 = 0, $300 = 0, $303 = 0, $305 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $354 = 0, $357 = 0, $361 = 0, $364 = 0, $365 = 0, $37 = 0, $370 = 0, $373 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $405 = 0, $410 = 0, $413 = 0, $417 = 0, $418 = 0, $426 = 0, $427 = 0, $429 = 0, $436 = 0, $437 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $124$looptemp = 0, $245$looptemp = 0, $300$looptemp = 0, $338$looptemp = 0, $354$looptemp = 0, $370$looptemp = 0, $389$looptemp = 0, $410$looptemp = 0, $112$looptemp = 0;
 sp = STACKTOP; //@line 1434
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1436
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1438
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1440
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1442
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1444
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1446
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1448
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1450
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1452
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1454
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1456
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 1458
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 1460
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 1462
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 1464
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 64 >> 2] | 0; //@line 1472
   L3 : while (1) {
    $417 = HEAP32[$6 >> 2] | 0; //@line 1474
    $418 = $417 - $8 | 0; //@line 1475
    $37 = $417; //@line 1478
    if (($418 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $418 & 65535) << 16 >> 16)) {
     label = 91; //@line 1485
     break;
    }
    $trunc277$i = HEAP8[$37 >> 0] | 0; //@line 1488
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 91; //@line 1491
     break;
    }
    $40 = $trunc277$i & 15; //@line 1495
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 1496
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$37 + 1 >> 0] | 0; //@line 1508
      $$sink214$i = 13; //@line 1508
      $$sink3$i = 1; //@line 1508
      label = 7; //@line 1509
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$37 + 1 >> 0] << 8) + 269 | 0; //@line 1521
      $$sink214$i = HEAPU8[$37 + 2 >> 0] | 0; //@line 1521
      $$sink3$i = 2; //@line 1521
      label = 7; //@line 1522
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 1526
      $437 = $417; //@line 1526
      $59 = $37; //@line 1526
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 1530
     $54 = $37 + $$sink3$i | 0; //@line 1532
     HEAP32[$4 >> 2] = $54; //@line 1533
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 1535
     $437 = $54; //@line 1535
     $59 = $54; //@line 1535
    }
    $57 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 1538
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$59 + 1 >> 0] | 0; //@line 1549
      $$sink216$i = 13; //@line 1549
      $$sink8$i = 1; //@line 1549
      label = 11; //@line 1550
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$59 + 1 >> 0] << 8) + 269 | 0; //@line 1562
      $$sink216$i = HEAPU8[$59 + 2 >> 0] | 0; //@line 1562
      $$sink8$i = 2; //@line 1562
      label = 11; //@line 1563
      break;
     }
    default:
     {
      $$1202$in$i = $40; //@line 1567
      $74 = $437; //@line 1567
      $86 = $59; //@line 1567
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 1571
     $71 = $59 + $$sink8$i | 0; //@line 1573
     HEAP32[$4 >> 2] = $71; //@line 1574
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 1576
     $74 = $71; //@line 1576
     $86 = $71; //@line 1576
    }
    $$1202$i = $$1202$in$i & 65535; //@line 1578
    $75 = $30 - $74 & 65535; //@line 1580
    $trunc$i = $57 & 65535; //@line 1581
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 52; //@line 1585
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$2 >> 2] | 0)) {
        label = 14; //@line 1593
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 1598
         break L3;
         break;
        }
       case 4:
        {
         label = 32; //@line 1603
         break L3;
         break;
        }
       case 3:
        {
         label = 35; //@line 1608
         break L3;
         break;
        }
       case 8:
        {
         label = 40; //@line 1613
         break L3;
         break;
        }
       case 20:
        {
         label = 49; //@line 1618
         break L3;
         break;
        }
       case 11:
        {
         label = 52; //@line 1623
         break L3;
         break;
        }
       case 15:
        {
         label = 60; //@line 1628
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $118 = $86 + 1 | 0; //@line 1641
         HEAP32[$4 >> 2] = $118; //@line 1642
         $119 = $$1202$in$i & 255; //@line 1643
         if (!($119 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 1646
         } else {
          $$045$i256$i = $119; //@line 1648
          $$06$i255$i = 0; //@line 1648
          $124 = $118; //@line 1648
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 1650
           $124$looptemp = $124;
           $124 = $124 + 1 | 0; //@line 1652
           HEAP32[$4 >> 2] = $124; //@line 1653
           $127 = $$06$i255$i << 8 | HEAPU8[$124$looptemp >> 0]; //@line 1656
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $127; //@line 1659
            break;
           } else {
            $$06$i255$i = $127; //@line 1662
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 1668
         $$reg2mem$0 = $57; //@line 1669
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $236 = (HEAP32[$2 >> 2] | 0) + 28 | 0; //@line 1679
         if ((HEAP32[$236 >> 2] | 0) != -1) {
          break L2;
         }
         $239 = $86 + 1 | 0; //@line 1685
         HEAP32[$4 >> 2] = $239; //@line 1686
         $240 = $$1202$in$i & 255; //@line 1687
         if (!($240 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 1690
         } else {
          $$045$i270$i = $240; //@line 1692
          $$06$i269$i = 0; //@line 1692
          $245 = $239; //@line 1692
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 1694
           $245$looptemp = $245;
           $245 = $245 + 1 | 0; //@line 1696
           HEAP32[$4 >> 2] = $245; //@line 1697
           $248 = $$06$i269$i << 8 | HEAPU8[$245$looptemp >> 0]; //@line 1700
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $248; //@line 1703
            break;
           } else {
            $$06$i269$i = $248; //@line 1706
           }
          }
         }
         HEAP32[$236 >> 2] = $$0$lcssa$i272$i; //@line 1710
         $$reg2mem$0 = $57; //@line 1711
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $291 = (HEAP32[$2 >> 2] | 0) + 32 | 0; //@line 1721
         if ((HEAP32[$291 >> 2] | 0) != -1) {
          break L2;
         }
         $294 = $86 + 1 | 0; //@line 1727
         HEAP32[$4 >> 2] = $294; //@line 1728
         $295 = $$1202$in$i & 255; //@line 1729
         if (!($295 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 1732
         } else {
          $$045$i263$i = $295; //@line 1734
          $$06$i262$i = 0; //@line 1734
          $300 = $294; //@line 1734
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 1736
           $300$looptemp = $300;
           $300 = $300 + 1 | 0; //@line 1738
           HEAP32[$4 >> 2] = $300; //@line 1739
           $303 = $$06$i262$i << 8 | HEAPU8[$300$looptemp >> 0]; //@line 1742
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $303; //@line 1745
            break;
           } else {
            $$06$i262$i = $303; //@line 1748
           }
          }
         }
         HEAP32[$291 >> 2] = $$0$lcssa$i265$i; //@line 1752
         $$reg2mem$0 = $57; //@line 1753
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $329 = (HEAP32[$2 >> 2] | 0) + 40 | 0; //@line 1763
         if ((HEAP32[$329 >> 2] | 0) != -1) {
          break L2;
         }
         $332 = $86 + 1 | 0; //@line 1769
         HEAP32[$4 >> 2] = $332; //@line 1770
         $333 = $$1202$in$i & 255; //@line 1771
         if (!($333 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 1774
         } else {
          $$045$i249$i = $333; //@line 1776
          $$06$i248$i = 0; //@line 1776
          $338 = $332; //@line 1776
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 1778
           $338$looptemp = $338;
           $338 = $338 + 1 | 0; //@line 1780
           HEAP32[$4 >> 2] = $338; //@line 1781
           $341 = $$06$i248$i << 8 | HEAPU8[$338$looptemp >> 0]; //@line 1784
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $341; //@line 1787
            break;
           } else {
            $$06$i248$i = $341; //@line 1790
           }
          }
         }
         HEAP32[$329 >> 2] = $$0$lcssa$i251$i; //@line 1794
         $$reg2mem$0 = $57; //@line 1795
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $345 = (HEAP32[$2 >> 2] | 0) + 36 | 0; //@line 1805
         if ((HEAP32[$345 >> 2] | 0) != -1) {
          break L2;
         }
         $348 = $86 + 1 | 0; //@line 1811
         HEAP32[$4 >> 2] = $348; //@line 1812
         $349 = $$1202$in$i & 255; //@line 1813
         if (!($349 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 1816
         } else {
          $$045$i242$i = $349; //@line 1818
          $$06$i241$i = 0; //@line 1818
          $354 = $348; //@line 1818
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 1820
           $354$looptemp = $354;
           $354 = $354 + 1 | 0; //@line 1822
           HEAP32[$4 >> 2] = $354; //@line 1823
           $357 = $$06$i241$i << 8 | HEAPU8[$354$looptemp >> 0]; //@line 1826
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $357; //@line 1829
            break;
           } else {
            $$06$i241$i = $357; //@line 1832
           }
          }
         }
         HEAP32[$345 >> 2] = $$0$lcssa$i244$i; //@line 1836
         $$reg2mem$0 = $57; //@line 1837
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $361 = (HEAP32[$2 >> 2] | 0) + 12 | 0; //@line 1847
         if ((HEAP32[$361 >> 2] | 0) != -1) {
          break L2;
         }
         $364 = $86 + 1 | 0; //@line 1853
         HEAP32[$4 >> 2] = $364; //@line 1854
         $365 = $$1202$in$i & 255; //@line 1855
         if (!($365 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 1858
         } else {
          $$045$i235$i = $365; //@line 1860
          $$06$i234$i = 0; //@line 1860
          $370 = $364; //@line 1860
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 1862
           $370$looptemp = $370;
           $370 = $370 + 1 | 0; //@line 1864
           HEAP32[$4 >> 2] = $370; //@line 1865
           $373 = $$06$i234$i << 8 | HEAPU8[$370$looptemp >> 0]; //@line 1868
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $373; //@line 1871
            break;
           } else {
            $$06$i234$i = $373; //@line 1874
           }
          }
         }
         HEAP32[$361 >> 2] = $$0$lcssa$i237$i; //@line 1878
         $$reg2mem$0 = $57; //@line 1879
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $377 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 1889
         $378 = HEAP8[$377 >> 0] | 0; //@line 1890
         if ($378 & 1) {
          break L2;
         }
         HEAP8[$377 >> 0] = $378 | 1; //@line 1897
         $383 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 1899
         HEAP32[$4 >> 2] = $383; //@line 1900
         $384 = $$1202$in$i & 255; //@line 1901
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 1904
         } else {
          $$045$i228$i = $384; //@line 1906
          $$06$i227$i = 0; //@line 1906
          $389 = $383; //@line 1906
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 1908
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 1910
           HEAP32[$4 >> 2] = $389; //@line 1911
           $392 = $$06$i227$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 1914
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $392; //@line 1917
            break;
           } else {
            $$06$i227$i = $392; //@line 1920
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 1926
         $$reg2mem$0 = $57; //@line 1927
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $398 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 1937
         $399 = HEAP8[$398 >> 0] | 0; //@line 1938
         if ($399 & 2) {
          break L2;
         }
         HEAP8[$398 >> 0] = $399 | 2; //@line 1945
         $404 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 1947
         HEAP32[$4 >> 2] = $404; //@line 1948
         $405 = $$1202$in$i & 255; //@line 1949
         if (!($405 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 1952
         } else {
          $$045$i221$i = $405; //@line 1954
          $$06$i220$i = 0; //@line 1954
          $410 = $404; //@line 1954
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 1956
           $410$looptemp = $410;
           $410 = $410 + 1 | 0; //@line 1958
           HEAP32[$4 >> 2] = $410; //@line 1959
           $413 = $$06$i220$i << 8 | HEAPU8[$410$looptemp >> 0]; //@line 1962
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $413; //@line 1965
            break;
           } else {
            $$06$i220$i = $413; //@line 1968
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 1974
         $$reg2mem$0 = $57; //@line 1975
         continue L3;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$28 >> 2] | 0) != -1) {
     break L2;
    }
    $106 = $86 + 1 | 0; //@line 2002
    HEAP32[$4 >> 2] = $106; //@line 2003
    $107 = $$1202$in$i & 255; //@line 2004
    if (!($107 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 2007
    } else {
     $$045$i$i = $107; //@line 2009
     $$06$i$i = 0; //@line 2009
     $112 = $106; //@line 2009
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 2011
      $112$looptemp = $112;
      $112 = $112 + 1 | 0; //@line 2013
      HEAP32[$4 >> 2] = $112; //@line 2014
      $115 = $$06$i$i << 8 | HEAPU8[$112$looptemp >> 0]; //@line 2017
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $115; //@line 2020
       break;
      } else {
       $$06$i$i = $115; //@line 2023
      }
     }
    }
    HEAP32[$28 >> 2] = $$0$lcssa$i$i; //@line 2027
    $$reg2mem$0 = $57; //@line 2028
   }
   if ((label | 0) == 14) {
    $78 = HEAP32[$16 >> 2] | 0; //@line 2031
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(88) | 0; //@line 2032
    $79 = FUNCTION_TABLE_ii[$78 & 15](68) | 0; //@line 2033
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 2036
     $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 2037
     HEAP32[$80 >> 2] = $2; //@line 2038
     $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 2039
     HEAP32[$81 >> 2] = $4; //@line 2040
     $82 = $ReallocAsyncCtx3 + 12 | 0; //@line 2041
     HEAP32[$82 >> 2] = $$1202$in$i; //@line 2042
     $83 = $ReallocAsyncCtx3 + 16 | 0; //@line 2043
     HEAP32[$83 >> 2] = $57; //@line 2044
     $84 = $ReallocAsyncCtx3 + 20 | 0; //@line 2045
     HEAP16[$84 >> 1] = $$1202$i; //@line 2046
     $85 = $ReallocAsyncCtx3 + 24 | 0; //@line 2047
     HEAP32[$85 >> 2] = $86; //@line 2048
     $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 2049
     HEAP32[$87 >> 2] = $6; //@line 2050
     $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 2051
     HEAP32[$88 >> 2] = $8; //@line 2052
     $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 2053
     HEAP32[$89 >> 2] = $10; //@line 2054
     $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 2055
     HEAP32[$90 >> 2] = $12; //@line 2056
     $91 = $ReallocAsyncCtx3 + 44 | 0; //@line 2057
     HEAP32[$91 >> 2] = $14; //@line 2058
     $92 = $ReallocAsyncCtx3 + 48 | 0; //@line 2059
     HEAP16[$92 >> 1] = $75; //@line 2060
     $93 = $ReallocAsyncCtx3 + 52 | 0; //@line 2061
     HEAP32[$93 >> 2] = $16; //@line 2062
     $94 = $ReallocAsyncCtx3 + 56 | 0; //@line 2063
     HEAP32[$94 >> 2] = $18; //@line 2064
     $95 = $ReallocAsyncCtx3 + 60 | 0; //@line 2065
     HEAP32[$95 >> 2] = $20; //@line 2066
     $96 = $ReallocAsyncCtx3 + 64 | 0; //@line 2067
     HEAP16[$96 >> 1] = $trunc$i; //@line 2068
     $97 = $ReallocAsyncCtx3 + 68 | 0; //@line 2069
     HEAP32[$97 >> 2] = $22; //@line 2070
     $98 = $ReallocAsyncCtx3 + 72 | 0; //@line 2071
     HEAP32[$98 >> 2] = $24; //@line 2072
     $99 = $ReallocAsyncCtx3 + 76 | 0; //@line 2073
     HEAP32[$99 >> 2] = $26; //@line 2074
     $100 = $ReallocAsyncCtx3 + 80 | 0; //@line 2075
     HEAP32[$100 >> 2] = $28; //@line 2076
     $101 = $ReallocAsyncCtx3 + 84 | 0; //@line 2077
     HEAP32[$101 >> 2] = $30; //@line 2078
     sp = STACKTOP; //@line 2079
     return;
    }
    HEAP32[___async_retval >> 2] = $79; //@line 2083
    ___async_unwind = 0; //@line 2084
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 2085
    $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 2086
    HEAP32[$80 >> 2] = $2; //@line 2087
    $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 2088
    HEAP32[$81 >> 2] = $4; //@line 2089
    $82 = $ReallocAsyncCtx3 + 12 | 0; //@line 2090
    HEAP32[$82 >> 2] = $$1202$in$i; //@line 2091
    $83 = $ReallocAsyncCtx3 + 16 | 0; //@line 2092
    HEAP32[$83 >> 2] = $57; //@line 2093
    $84 = $ReallocAsyncCtx3 + 20 | 0; //@line 2094
    HEAP16[$84 >> 1] = $$1202$i; //@line 2095
    $85 = $ReallocAsyncCtx3 + 24 | 0; //@line 2096
    HEAP32[$85 >> 2] = $86; //@line 2097
    $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 2098
    HEAP32[$87 >> 2] = $6; //@line 2099
    $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 2100
    HEAP32[$88 >> 2] = $8; //@line 2101
    $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 2102
    HEAP32[$89 >> 2] = $10; //@line 2103
    $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 2104
    HEAP32[$90 >> 2] = $12; //@line 2105
    $91 = $ReallocAsyncCtx3 + 44 | 0; //@line 2106
    HEAP32[$91 >> 2] = $14; //@line 2107
    $92 = $ReallocAsyncCtx3 + 48 | 0; //@line 2108
    HEAP16[$92 >> 1] = $75; //@line 2109
    $93 = $ReallocAsyncCtx3 + 52 | 0; //@line 2110
    HEAP32[$93 >> 2] = $16; //@line 2111
    $94 = $ReallocAsyncCtx3 + 56 | 0; //@line 2112
    HEAP32[$94 >> 2] = $18; //@line 2113
    $95 = $ReallocAsyncCtx3 + 60 | 0; //@line 2114
    HEAP32[$95 >> 2] = $20; //@line 2115
    $96 = $ReallocAsyncCtx3 + 64 | 0; //@line 2116
    HEAP16[$96 >> 1] = $trunc$i; //@line 2117
    $97 = $ReallocAsyncCtx3 + 68 | 0; //@line 2118
    HEAP32[$97 >> 2] = $22; //@line 2119
    $98 = $ReallocAsyncCtx3 + 72 | 0; //@line 2120
    HEAP32[$98 >> 2] = $24; //@line 2121
    $99 = $ReallocAsyncCtx3 + 76 | 0; //@line 2122
    HEAP32[$99 >> 2] = $26; //@line 2123
    $100 = $ReallocAsyncCtx3 + 80 | 0; //@line 2124
    HEAP32[$100 >> 2] = $28; //@line 2125
    $101 = $ReallocAsyncCtx3 + 84 | 0; //@line 2126
    HEAP32[$101 >> 2] = $30; //@line 2127
    sp = STACKTOP; //@line 2128
    return;
   } else if ((label | 0) == 27) {
    $131 = $$1202$in$i & 65535; //@line 2132
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $134 = HEAP32[$2 >> 2] | 0; //@line 2138
    if (HEAP32[$134 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$134 + 2 >> 1] = $$1202$i; //@line 2146
    $139 = $86 + 1 | 0; //@line 2147
    HEAP32[$4 >> 2] = $139; //@line 2148
    $140 = HEAP32[$16 >> 2] | 0; //@line 2149
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 2150
    $141 = FUNCTION_TABLE_ii[$140 & 15]($$1202$i) | 0; //@line 2151
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 2154
     $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 2155
     HEAP32[$142 >> 2] = $2; //@line 2156
     $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 2157
     HEAP32[$143 >> 2] = $4; //@line 2158
     $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 2159
     HEAP32[$144 >> 2] = $6; //@line 2160
     $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 2161
     HEAP32[$145 >> 2] = $8; //@line 2162
     $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 2163
     HEAP32[$146 >> 2] = $10; //@line 2164
     $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 2165
     HEAP32[$147 >> 2] = $12; //@line 2166
     $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 2167
     HEAP32[$148 >> 2] = $14; //@line 2168
     $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 2169
     HEAP32[$149 >> 2] = $16; //@line 2170
     $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 2171
     HEAP32[$150 >> 2] = $18; //@line 2172
     $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 2173
     HEAP32[$151 >> 2] = $20; //@line 2174
     $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 2175
     HEAP32[$152 >> 2] = $22; //@line 2176
     $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 2177
     HEAP32[$153 >> 2] = $24; //@line 2178
     $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 2179
     HEAP32[$154 >> 2] = $26; //@line 2180
     $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 2181
     HEAP32[$155 >> 2] = $28; //@line 2182
     $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 2183
     HEAP32[$156 >> 2] = $30; //@line 2184
     $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 2185
     HEAP32[$157 >> 2] = $57; //@line 2186
     $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 2187
     HEAP32[$158 >> 2] = $139; //@line 2188
     $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 2189
     HEAP32[$159 >> 2] = $131; //@line 2190
     sp = STACKTOP; //@line 2191
     return;
    }
    HEAP32[___async_retval >> 2] = $141; //@line 2195
    ___async_unwind = 0; //@line 2196
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 2197
    $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 2198
    HEAP32[$142 >> 2] = $2; //@line 2199
    $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 2200
    HEAP32[$143 >> 2] = $4; //@line 2201
    $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 2202
    HEAP32[$144 >> 2] = $6; //@line 2203
    $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 2204
    HEAP32[$145 >> 2] = $8; //@line 2205
    $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 2206
    HEAP32[$146 >> 2] = $10; //@line 2207
    $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 2208
    HEAP32[$147 >> 2] = $12; //@line 2209
    $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 2210
    HEAP32[$148 >> 2] = $14; //@line 2211
    $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 2212
    HEAP32[$149 >> 2] = $16; //@line 2213
    $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 2214
    HEAP32[$150 >> 2] = $18; //@line 2215
    $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 2216
    HEAP32[$151 >> 2] = $20; //@line 2217
    $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 2218
    HEAP32[$152 >> 2] = $22; //@line 2219
    $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 2220
    HEAP32[$153 >> 2] = $24; //@line 2221
    $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 2222
    HEAP32[$154 >> 2] = $26; //@line 2223
    $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 2224
    HEAP32[$155 >> 2] = $28; //@line 2225
    $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 2226
    HEAP32[$156 >> 2] = $30; //@line 2227
    $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 2228
    HEAP32[$157 >> 2] = $57; //@line 2229
    $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 2230
    HEAP32[$158 >> 2] = $139; //@line 2231
    $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 2232
    HEAP32[$159 >> 2] = $131; //@line 2233
    sp = STACKTOP; //@line 2234
    return;
   } else if ((label | 0) == 32) {
    $161 = HEAP32[$2 >> 2] | 0; //@line 2238
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 2240
    $163 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $161 + 48 | 0, $161, 4, $$1202$i) | 0; //@line 2241
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 2244
     $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 2245
     HEAP32[$164 >> 2] = $2; //@line 2246
     $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 2247
     HEAP32[$165 >> 2] = $4; //@line 2248
     $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 2249
     HEAP32[$166 >> 2] = $6; //@line 2250
     $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 2251
     HEAP32[$167 >> 2] = $8; //@line 2252
     $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 2253
     HEAP32[$168 >> 2] = $10; //@line 2254
     $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 2255
     HEAP32[$169 >> 2] = $12; //@line 2256
     $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 2257
     HEAP32[$170 >> 2] = $14; //@line 2258
     $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 2259
     HEAP32[$171 >> 2] = $16; //@line 2260
     $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 2261
     HEAP32[$172 >> 2] = $18; //@line 2262
     $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 2263
     HEAP32[$173 >> 2] = $20; //@line 2264
     $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 2265
     HEAP32[$174 >> 2] = $22; //@line 2266
     $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 2267
     HEAP32[$175 >> 2] = $24; //@line 2268
     $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 2269
     HEAP32[$176 >> 2] = $26; //@line 2270
     $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 2271
     HEAP32[$177 >> 2] = $28; //@line 2272
     $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 2273
     HEAP32[$178 >> 2] = $30; //@line 2274
     $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 2275
     HEAP32[$179 >> 2] = $57; //@line 2276
     sp = STACKTOP; //@line 2277
     return;
    }
    HEAP8[___async_retval >> 0] = $163; //@line 2281
    ___async_unwind = 0; //@line 2282
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 2283
    $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 2284
    HEAP32[$164 >> 2] = $2; //@line 2285
    $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 2286
    HEAP32[$165 >> 2] = $4; //@line 2287
    $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 2288
    HEAP32[$166 >> 2] = $6; //@line 2289
    $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 2290
    HEAP32[$167 >> 2] = $8; //@line 2291
    $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 2292
    HEAP32[$168 >> 2] = $10; //@line 2293
    $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 2294
    HEAP32[$169 >> 2] = $12; //@line 2295
    $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 2296
    HEAP32[$170 >> 2] = $14; //@line 2297
    $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 2298
    HEAP32[$171 >> 2] = $16; //@line 2299
    $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 2300
    HEAP32[$172 >> 2] = $18; //@line 2301
    $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 2302
    HEAP32[$173 >> 2] = $20; //@line 2303
    $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 2304
    HEAP32[$174 >> 2] = $22; //@line 2305
    $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 2306
    HEAP32[$175 >> 2] = $24; //@line 2307
    $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 2308
    HEAP32[$176 >> 2] = $26; //@line 2309
    $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 2310
    HEAP32[$177 >> 2] = $28; //@line 2311
    $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 2312
    HEAP32[$178 >> 2] = $30; //@line 2313
    $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 2314
    HEAP32[$179 >> 2] = $57; //@line 2315
    sp = STACKTOP; //@line 2316
    return;
   } else if ((label | 0) == 35) {
    $181 = $$1202$in$i & 65535; //@line 2320
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $184 = HEAP32[$2 >> 2] | 0; //@line 2326
    if (HEAP32[$184 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$184 + 4 >> 1] = $$1202$i; //@line 2334
    $189 = $86 + 1 | 0; //@line 2335
    HEAP32[$4 >> 2] = $189; //@line 2336
    $190 = HEAP32[$16 >> 2] | 0; //@line 2337
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 2338
    $191 = FUNCTION_TABLE_ii[$190 & 15]($$1202$i) | 0; //@line 2339
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 2342
     $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 2343
     HEAP32[$192 >> 2] = $2; //@line 2344
     $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 2345
     HEAP32[$193 >> 2] = $4; //@line 2346
     $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 2347
     HEAP32[$194 >> 2] = $6; //@line 2348
     $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 2349
     HEAP32[$195 >> 2] = $8; //@line 2350
     $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 2351
     HEAP32[$196 >> 2] = $10; //@line 2352
     $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 2353
     HEAP32[$197 >> 2] = $12; //@line 2354
     $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 2355
     HEAP32[$198 >> 2] = $14; //@line 2356
     $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 2357
     HEAP32[$199 >> 2] = $16; //@line 2358
     $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 2359
     HEAP32[$200 >> 2] = $18; //@line 2360
     $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 2361
     HEAP32[$201 >> 2] = $20; //@line 2362
     $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 2363
     HEAP32[$202 >> 2] = $22; //@line 2364
     $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 2365
     HEAP32[$203 >> 2] = $24; //@line 2366
     $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 2367
     HEAP32[$204 >> 2] = $26; //@line 2368
     $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 2369
     HEAP32[$205 >> 2] = $28; //@line 2370
     $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 2371
     HEAP32[$206 >> 2] = $30; //@line 2372
     $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 2373
     HEAP32[$207 >> 2] = $57; //@line 2374
     $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 2375
     HEAP32[$208 >> 2] = $189; //@line 2376
     $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 2377
     HEAP32[$209 >> 2] = $181; //@line 2378
     sp = STACKTOP; //@line 2379
     return;
    }
    HEAP32[___async_retval >> 2] = $191; //@line 2383
    ___async_unwind = 0; //@line 2384
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 2385
    $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 2386
    HEAP32[$192 >> 2] = $2; //@line 2387
    $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 2388
    HEAP32[$193 >> 2] = $4; //@line 2389
    $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 2390
    HEAP32[$194 >> 2] = $6; //@line 2391
    $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 2392
    HEAP32[$195 >> 2] = $8; //@line 2393
    $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 2394
    HEAP32[$196 >> 2] = $10; //@line 2395
    $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 2396
    HEAP32[$197 >> 2] = $12; //@line 2397
    $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 2398
    HEAP32[$198 >> 2] = $14; //@line 2399
    $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 2400
    HEAP32[$199 >> 2] = $16; //@line 2401
    $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 2402
    HEAP32[$200 >> 2] = $18; //@line 2403
    $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 2404
    HEAP32[$201 >> 2] = $20; //@line 2405
    $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 2406
    HEAP32[$202 >> 2] = $22; //@line 2407
    $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 2408
    HEAP32[$203 >> 2] = $24; //@line 2409
    $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 2410
    HEAP32[$204 >> 2] = $26; //@line 2411
    $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 2412
    HEAP32[$205 >> 2] = $28; //@line 2413
    $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 2414
    HEAP32[$206 >> 2] = $30; //@line 2415
    $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 2416
    HEAP32[$207 >> 2] = $57; //@line 2417
    $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 2418
    HEAP32[$208 >> 2] = $189; //@line 2419
    $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 2420
    HEAP32[$209 >> 2] = $181; //@line 2421
    sp = STACKTOP; //@line 2422
    return;
   } else if ((label | 0) == 40) {
    $211 = HEAP32[$2 >> 2] | 0; //@line 2426
    $212 = $211 + 56 | 0; //@line 2427
    if (HEAP32[$212 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 2434
    $216 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $212, $211 + 6 | 0, 8, $$1202$i) | 0; //@line 2435
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 2438
     $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 2439
     HEAP32[$217 >> 2] = $2; //@line 2440
     $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 2441
     HEAP32[$218 >> 2] = $4; //@line 2442
     $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 2443
     HEAP32[$219 >> 2] = $6; //@line 2444
     $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 2445
     HEAP32[$220 >> 2] = $8; //@line 2446
     $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 2447
     HEAP32[$221 >> 2] = $10; //@line 2448
     $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 2449
     HEAP32[$222 >> 2] = $12; //@line 2450
     $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 2451
     HEAP32[$223 >> 2] = $14; //@line 2452
     $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 2453
     HEAP32[$224 >> 2] = $16; //@line 2454
     $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 2455
     HEAP32[$225 >> 2] = $18; //@line 2456
     $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 2457
     HEAP32[$226 >> 2] = $20; //@line 2458
     $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 2459
     HEAP32[$227 >> 2] = $22; //@line 2460
     $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 2461
     HEAP32[$228 >> 2] = $24; //@line 2462
     $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 2463
     HEAP32[$229 >> 2] = $26; //@line 2464
     $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 2465
     HEAP32[$230 >> 2] = $28; //@line 2466
     $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 2467
     HEAP32[$231 >> 2] = $30; //@line 2468
     $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 2469
     HEAP32[$232 >> 2] = $57; //@line 2470
     sp = STACKTOP; //@line 2471
     return;
    }
    HEAP8[___async_retval >> 0] = $216; //@line 2475
    ___async_unwind = 0; //@line 2476
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 2477
    $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 2478
    HEAP32[$217 >> 2] = $2; //@line 2479
    $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 2480
    HEAP32[$218 >> 2] = $4; //@line 2481
    $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 2482
    HEAP32[$219 >> 2] = $6; //@line 2483
    $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 2484
    HEAP32[$220 >> 2] = $8; //@line 2485
    $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 2486
    HEAP32[$221 >> 2] = $10; //@line 2487
    $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 2488
    HEAP32[$222 >> 2] = $12; //@line 2489
    $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 2490
    HEAP32[$223 >> 2] = $14; //@line 2491
    $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 2492
    HEAP32[$224 >> 2] = $16; //@line 2493
    $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 2494
    HEAP32[$225 >> 2] = $18; //@line 2495
    $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 2496
    HEAP32[$226 >> 2] = $20; //@line 2497
    $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 2498
    HEAP32[$227 >> 2] = $22; //@line 2499
    $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 2500
    HEAP32[$228 >> 2] = $24; //@line 2501
    $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 2502
    HEAP32[$229 >> 2] = $26; //@line 2503
    $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 2504
    HEAP32[$230 >> 2] = $28; //@line 2505
    $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 2506
    HEAP32[$231 >> 2] = $30; //@line 2507
    $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 2508
    HEAP32[$232 >> 2] = $57; //@line 2509
    sp = STACKTOP; //@line 2510
    return;
   } else if ((label | 0) == 49) {
    $250 = HEAP32[$2 >> 2] | 0; //@line 2514
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 2517
    $253 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $250 + 60 | 0, $250 + 8 | 0, 20, $$1202$i) | 0; //@line 2518
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 2521
     $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 2522
     HEAP32[$254 >> 2] = $2; //@line 2523
     $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 2524
     HEAP32[$255 >> 2] = $4; //@line 2525
     $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 2526
     HEAP32[$256 >> 2] = $6; //@line 2527
     $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 2528
     HEAP32[$257 >> 2] = $8; //@line 2529
     $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 2530
     HEAP32[$258 >> 2] = $10; //@line 2531
     $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 2532
     HEAP32[$259 >> 2] = $12; //@line 2533
     $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 2534
     HEAP32[$260 >> 2] = $14; //@line 2535
     $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 2536
     HEAP32[$261 >> 2] = $16; //@line 2537
     $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 2538
     HEAP32[$262 >> 2] = $18; //@line 2539
     $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 2540
     HEAP32[$263 >> 2] = $20; //@line 2541
     $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 2542
     HEAP32[$264 >> 2] = $22; //@line 2543
     $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 2544
     HEAP32[$265 >> 2] = $24; //@line 2545
     $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 2546
     HEAP32[$266 >> 2] = $26; //@line 2547
     $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 2548
     HEAP32[$267 >> 2] = $28; //@line 2549
     $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 2550
     HEAP32[$268 >> 2] = $30; //@line 2551
     $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 2552
     HEAP32[$269 >> 2] = $57; //@line 2553
     sp = STACKTOP; //@line 2554
     return;
    }
    HEAP8[___async_retval >> 0] = $253; //@line 2558
    ___async_unwind = 0; //@line 2559
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 2560
    $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 2561
    HEAP32[$254 >> 2] = $2; //@line 2562
    $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 2563
    HEAP32[$255 >> 2] = $4; //@line 2564
    $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 2565
    HEAP32[$256 >> 2] = $6; //@line 2566
    $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 2567
    HEAP32[$257 >> 2] = $8; //@line 2568
    $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 2569
    HEAP32[$258 >> 2] = $10; //@line 2570
    $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 2571
    HEAP32[$259 >> 2] = $12; //@line 2572
    $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 2573
    HEAP32[$260 >> 2] = $14; //@line 2574
    $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 2575
    HEAP32[$261 >> 2] = $16; //@line 2576
    $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 2577
    HEAP32[$262 >> 2] = $18; //@line 2578
    $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 2579
    HEAP32[$263 >> 2] = $20; //@line 2580
    $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 2581
    HEAP32[$264 >> 2] = $22; //@line 2582
    $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 2583
    HEAP32[$265 >> 2] = $24; //@line 2584
    $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 2585
    HEAP32[$266 >> 2] = $26; //@line 2586
    $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 2587
    HEAP32[$267 >> 2] = $28; //@line 2588
    $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 2589
    HEAP32[$268 >> 2] = $30; //@line 2590
    $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 2591
    HEAP32[$269 >> 2] = $57; //@line 2592
    sp = STACKTOP; //@line 2593
    return;
   } else if ((label | 0) == 52) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 2597
    $271 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $18, $20, 11, $$1202$i) | 0; //@line 2598
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 2601
     $272 = $ReallocAsyncCtx7 + 4 | 0; //@line 2602
     HEAP32[$272 >> 2] = $2; //@line 2603
     $273 = $ReallocAsyncCtx7 + 8 | 0; //@line 2604
     HEAP32[$273 >> 2] = $4; //@line 2605
     $274 = $ReallocAsyncCtx7 + 12 | 0; //@line 2606
     HEAP32[$274 >> 2] = $6; //@line 2607
     $275 = $ReallocAsyncCtx7 + 16 | 0; //@line 2608
     HEAP32[$275 >> 2] = $8; //@line 2609
     $276 = $ReallocAsyncCtx7 + 20 | 0; //@line 2610
     HEAP32[$276 >> 2] = $10; //@line 2611
     $277 = $ReallocAsyncCtx7 + 24 | 0; //@line 2612
     HEAP32[$277 >> 2] = $12; //@line 2613
     $278 = $ReallocAsyncCtx7 + 28 | 0; //@line 2614
     HEAP32[$278 >> 2] = $14; //@line 2615
     $279 = $ReallocAsyncCtx7 + 32 | 0; //@line 2616
     HEAP32[$279 >> 2] = $16; //@line 2617
     $280 = $ReallocAsyncCtx7 + 36 | 0; //@line 2618
     HEAP32[$280 >> 2] = $18; //@line 2619
     $281 = $ReallocAsyncCtx7 + 40 | 0; //@line 2620
     HEAP32[$281 >> 2] = $20; //@line 2621
     $282 = $ReallocAsyncCtx7 + 44 | 0; //@line 2622
     HEAP32[$282 >> 2] = $22; //@line 2623
     $283 = $ReallocAsyncCtx7 + 48 | 0; //@line 2624
     HEAP32[$283 >> 2] = $24; //@line 2625
     $284 = $ReallocAsyncCtx7 + 52 | 0; //@line 2626
     HEAP32[$284 >> 2] = $26; //@line 2627
     $285 = $ReallocAsyncCtx7 + 56 | 0; //@line 2628
     HEAP32[$285 >> 2] = $28; //@line 2629
     $286 = $ReallocAsyncCtx7 + 60 | 0; //@line 2630
     HEAP32[$286 >> 2] = $30; //@line 2631
     $287 = $ReallocAsyncCtx7 + 64 | 0; //@line 2632
     HEAP32[$287 >> 2] = $57; //@line 2633
     sp = STACKTOP; //@line 2634
     return;
    }
    HEAP8[___async_retval >> 0] = $271; //@line 2638
    ___async_unwind = 0; //@line 2639
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 2640
    $272 = $ReallocAsyncCtx7 + 4 | 0; //@line 2641
    HEAP32[$272 >> 2] = $2; //@line 2642
    $273 = $ReallocAsyncCtx7 + 8 | 0; //@line 2643
    HEAP32[$273 >> 2] = $4; //@line 2644
    $274 = $ReallocAsyncCtx7 + 12 | 0; //@line 2645
    HEAP32[$274 >> 2] = $6; //@line 2646
    $275 = $ReallocAsyncCtx7 + 16 | 0; //@line 2647
    HEAP32[$275 >> 2] = $8; //@line 2648
    $276 = $ReallocAsyncCtx7 + 20 | 0; //@line 2649
    HEAP32[$276 >> 2] = $10; //@line 2650
    $277 = $ReallocAsyncCtx7 + 24 | 0; //@line 2651
    HEAP32[$277 >> 2] = $12; //@line 2652
    $278 = $ReallocAsyncCtx7 + 28 | 0; //@line 2653
    HEAP32[$278 >> 2] = $14; //@line 2654
    $279 = $ReallocAsyncCtx7 + 32 | 0; //@line 2655
    HEAP32[$279 >> 2] = $16; //@line 2656
    $280 = $ReallocAsyncCtx7 + 36 | 0; //@line 2657
    HEAP32[$280 >> 2] = $18; //@line 2658
    $281 = $ReallocAsyncCtx7 + 40 | 0; //@line 2659
    HEAP32[$281 >> 2] = $20; //@line 2660
    $282 = $ReallocAsyncCtx7 + 44 | 0; //@line 2661
    HEAP32[$282 >> 2] = $22; //@line 2662
    $283 = $ReallocAsyncCtx7 + 48 | 0; //@line 2663
    HEAP32[$283 >> 2] = $24; //@line 2664
    $284 = $ReallocAsyncCtx7 + 52 | 0; //@line 2665
    HEAP32[$284 >> 2] = $26; //@line 2666
    $285 = $ReallocAsyncCtx7 + 56 | 0; //@line 2667
    HEAP32[$285 >> 2] = $28; //@line 2668
    $286 = $ReallocAsyncCtx7 + 60 | 0; //@line 2669
    HEAP32[$286 >> 2] = $30; //@line 2670
    $287 = $ReallocAsyncCtx7 + 64 | 0; //@line 2671
    HEAP32[$287 >> 2] = $57; //@line 2672
    sp = STACKTOP; //@line 2673
    return;
   } else if ((label | 0) == 60) {
    $305 = HEAP32[$2 >> 2] | 0; //@line 2677
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 2680
    $308 = _sn_coap_parser_options_parse_multiple_options($14, $4, $75, $305 + 64 | 0, $305 + 10 | 0, 15, $$1202$i) | 0; //@line 2681
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 2684
     $309 = $ReallocAsyncCtx6 + 4 | 0; //@line 2685
     HEAP32[$309 >> 2] = $2; //@line 2686
     $310 = $ReallocAsyncCtx6 + 8 | 0; //@line 2687
     HEAP32[$310 >> 2] = $4; //@line 2688
     $311 = $ReallocAsyncCtx6 + 12 | 0; //@line 2689
     HEAP32[$311 >> 2] = $6; //@line 2690
     $312 = $ReallocAsyncCtx6 + 16 | 0; //@line 2691
     HEAP32[$312 >> 2] = $8; //@line 2692
     $313 = $ReallocAsyncCtx6 + 20 | 0; //@line 2693
     HEAP32[$313 >> 2] = $10; //@line 2694
     $314 = $ReallocAsyncCtx6 + 24 | 0; //@line 2695
     HEAP32[$314 >> 2] = $12; //@line 2696
     $315 = $ReallocAsyncCtx6 + 28 | 0; //@line 2697
     HEAP32[$315 >> 2] = $14; //@line 2698
     $316 = $ReallocAsyncCtx6 + 32 | 0; //@line 2699
     HEAP32[$316 >> 2] = $16; //@line 2700
     $317 = $ReallocAsyncCtx6 + 36 | 0; //@line 2701
     HEAP32[$317 >> 2] = $18; //@line 2702
     $318 = $ReallocAsyncCtx6 + 40 | 0; //@line 2703
     HEAP32[$318 >> 2] = $20; //@line 2704
     $319 = $ReallocAsyncCtx6 + 44 | 0; //@line 2705
     HEAP32[$319 >> 2] = $22; //@line 2706
     $320 = $ReallocAsyncCtx6 + 48 | 0; //@line 2707
     HEAP32[$320 >> 2] = $24; //@line 2708
     $321 = $ReallocAsyncCtx6 + 52 | 0; //@line 2709
     HEAP32[$321 >> 2] = $26; //@line 2710
     $322 = $ReallocAsyncCtx6 + 56 | 0; //@line 2711
     HEAP32[$322 >> 2] = $28; //@line 2712
     $323 = $ReallocAsyncCtx6 + 60 | 0; //@line 2713
     HEAP32[$323 >> 2] = $30; //@line 2714
     $324 = $ReallocAsyncCtx6 + 64 | 0; //@line 2715
     HEAP32[$324 >> 2] = $57; //@line 2716
     sp = STACKTOP; //@line 2717
     return;
    }
    HEAP8[___async_retval >> 0] = $308; //@line 2721
    ___async_unwind = 0; //@line 2722
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 2723
    $309 = $ReallocAsyncCtx6 + 4 | 0; //@line 2724
    HEAP32[$309 >> 2] = $2; //@line 2725
    $310 = $ReallocAsyncCtx6 + 8 | 0; //@line 2726
    HEAP32[$310 >> 2] = $4; //@line 2727
    $311 = $ReallocAsyncCtx6 + 12 | 0; //@line 2728
    HEAP32[$311 >> 2] = $6; //@line 2729
    $312 = $ReallocAsyncCtx6 + 16 | 0; //@line 2730
    HEAP32[$312 >> 2] = $8; //@line 2731
    $313 = $ReallocAsyncCtx6 + 20 | 0; //@line 2732
    HEAP32[$313 >> 2] = $10; //@line 2733
    $314 = $ReallocAsyncCtx6 + 24 | 0; //@line 2734
    HEAP32[$314 >> 2] = $12; //@line 2735
    $315 = $ReallocAsyncCtx6 + 28 | 0; //@line 2736
    HEAP32[$315 >> 2] = $14; //@line 2737
    $316 = $ReallocAsyncCtx6 + 32 | 0; //@line 2738
    HEAP32[$316 >> 2] = $16; //@line 2739
    $317 = $ReallocAsyncCtx6 + 36 | 0; //@line 2740
    HEAP32[$317 >> 2] = $18; //@line 2741
    $318 = $ReallocAsyncCtx6 + 40 | 0; //@line 2742
    HEAP32[$318 >> 2] = $20; //@line 2743
    $319 = $ReallocAsyncCtx6 + 44 | 0; //@line 2744
    HEAP32[$319 >> 2] = $22; //@line 2745
    $320 = $ReallocAsyncCtx6 + 48 | 0; //@line 2746
    HEAP32[$320 >> 2] = $24; //@line 2747
    $321 = $ReallocAsyncCtx6 + 52 | 0; //@line 2748
    HEAP32[$321 >> 2] = $26; //@line 2749
    $322 = $ReallocAsyncCtx6 + 56 | 0; //@line 2750
    HEAP32[$322 >> 2] = $28; //@line 2751
    $323 = $ReallocAsyncCtx6 + 60 | 0; //@line 2752
    HEAP32[$323 >> 2] = $30; //@line 2753
    $324 = $ReallocAsyncCtx6 + 64 | 0; //@line 2754
    HEAP32[$324 >> 2] = $57; //@line 2755
    sp = STACKTOP; //@line 2756
    return;
   } else if ((label | 0) == 91) {
    if (($37 - $8 | 0) >= ($10 | 0)) {
     $436 = ___async_retval; //@line 2764
     HEAP32[$436 >> 2] = $22; //@line 2765
     return;
    }
    if ((HEAP8[$37 >> 0] | 0) == -1) {
     $426 = $37 + 1 | 0; //@line 2771
     HEAP32[$4 >> 2] = $426; //@line 2772
     $427 = $426; //@line 2773
     $429 = $8 - $427 + $10 | 0; //@line 2775
     HEAP16[$26 + 24 >> 1] = $429; //@line 2778
     if ($429 & 65535 | 0) {
      HEAP32[$26 + 36 >> 2] = $427; //@line 2783
      $436 = ___async_retval; //@line 2784
      HEAP32[$436 >> 2] = $22; //@line 2785
      return;
     }
    }
    HEAP32[$26 + 4 >> 2] = 1; //@line 2790
    $436 = ___async_retval; //@line 2791
    HEAP32[$436 >> 2] = $22; //@line 2792
    return;
   }
  }
 } while (0);
 HEAP32[$26 + 4 >> 2] = 1; //@line 2798
 $436 = ___async_retval; //@line 2799
 HEAP32[$436 >> 2] = $22; //@line 2800
 return;
}
function _sn_coap_parser__async_cb_20($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $110 = 0, $111 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $123 = 0, $128 = 0, $131 = 0, $135 = 0, $138 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $185 = 0, $188 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $219 = 0, $22 = 0, $220 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $247 = 0, $248 = 0, $253 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $299 = 0, $30 = 0, $302 = 0, $303 = 0, $308 = 0, $311 = 0, $313 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $336 = 0, $339 = 0, $34 = 0, $340 = 0, $345 = 0, $348 = 0, $352 = 0, $355 = 0, $356 = 0, $36 = 0, $361 = 0, $364 = 0, $368 = 0, $371 = 0, $372 = 0, $377 = 0, $380 = 0, $384 = 0, $385 = 0, $390 = 0, $391 = 0, $396 = 0, $399 = 0, $4 = 0, $405 = 0, $406 = 0, $41 = 0, $411 = 0, $412 = 0, $417 = 0, $420 = 0, $424 = 0, $425 = 0, $433 = 0, $434 = 0, $436 = 0, $44 = 0, $443 = 0, $444 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $128$looptemp = 0, $253$looptemp = 0, $308$looptemp = 0, $345$looptemp = 0, $361$looptemp = 0, $377$looptemp = 0, $396$looptemp = 0, $417$looptemp = 0, $116$looptemp = 0;
 sp = STACKTOP; //@line 28
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 38
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 40
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 42
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 44
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 46
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 48
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 50
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 52
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 54
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 56
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 58
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 60
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 62
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 64
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 66
 HEAP32[(HEAP32[$2 >> 2] | 0) + 52 >> 2] = $AsyncRetVal; //@line 69
 L2 : do {
  if ($AsyncRetVal | 0) {
   _memcpy($AsyncRetVal | 0, $34 | 0, $36 | 0) | 0; //@line 73
   HEAP32[$4 >> 2] = $34 + $36; //@line 75
   $$reg2mem$0 = $32; //@line 76
   L4 : while (1) {
    $424 = HEAP32[$6 >> 2] | 0; //@line 78
    $425 = $424 - $8 | 0; //@line 79
    $41 = $424; //@line 82
    if (($425 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $425 & 65535) << 16 >> 16)) {
     label = 92; //@line 89
     break;
    }
    $trunc277$i = HEAP8[$41 >> 0] | 0; //@line 92
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 92; //@line 95
     break;
    }
    $44 = $trunc277$i & 15; //@line 99
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 100
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$41 + 1 >> 0] | 0; //@line 112
      $$sink214$i = 13; //@line 112
      $$sink3$i = 1; //@line 112
      label = 7; //@line 113
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$41 + 1 >> 0] << 8) + 269 | 0; //@line 125
      $$sink214$i = HEAPU8[$41 + 2 >> 0] | 0; //@line 125
      $$sink3$i = 2; //@line 125
      label = 7; //@line 126
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 130
      $444 = $424; //@line 130
      $63 = $41; //@line 130
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 134
     $58 = $41 + $$sink3$i | 0; //@line 136
     HEAP32[$4 >> 2] = $58; //@line 137
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 139
     $444 = $58; //@line 139
     $63 = $58; //@line 139
    }
    $61 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 142
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$63 + 1 >> 0] | 0; //@line 153
      $$sink216$i = 13; //@line 153
      $$sink8$i = 1; //@line 153
      label = 11; //@line 154
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$63 + 1 >> 0] << 8) + 269 | 0; //@line 166
      $$sink216$i = HEAPU8[$63 + 2 >> 0] | 0; //@line 166
      $$sink8$i = 2; //@line 166
      label = 11; //@line 167
      break;
     }
    default:
     {
      $$1202$in$i = $44; //@line 171
      $78 = $444; //@line 171
      $90 = $63; //@line 171
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 175
     $75 = $63 + $$sink8$i | 0; //@line 177
     HEAP32[$4 >> 2] = $75; //@line 178
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 180
     $78 = $75; //@line 180
     $90 = $75; //@line 180
    }
    $$1202$i = $$1202$in$i & 65535; //@line 182
    $79 = $30 - $78 & 65535; //@line 184
    $trunc$i = $61 & 65535; //@line 185
    L21 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 54; //@line 189
       break L4;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$2 >> 2] | 0)) {
        label = 14; //@line 197
        break L4;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 202
         break L4;
         break;
        }
       case 4:
        {
         label = 32; //@line 207
         break L4;
         break;
        }
       case 3:
        {
         label = 35; //@line 212
         break L4;
         break;
        }
       case 8:
        {
         label = 42; //@line 217
         break L4;
         break;
        }
       case 20:
        {
         label = 51; //@line 222
         break L4;
         break;
        }
       case 11:
        {
         label = 54; //@line 227
         break L4;
         break;
        }
       case 15:
        {
         label = 62; //@line 232
         break L4;
         break;
        }
       case 12:
        {
         break L21;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $122 = $90 + 1 | 0; //@line 245
         HEAP32[$4 >> 2] = $122; //@line 246
         $123 = $$1202$in$i & 255; //@line 247
         if (!($123 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 250
         } else {
          $$045$i256$i = $123; //@line 252
          $$06$i255$i = 0; //@line 252
          $128 = $122; //@line 252
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 254
           $128$looptemp = $128;
           $128 = $128 + 1 | 0; //@line 256
           HEAP32[$4 >> 2] = $128; //@line 257
           $131 = $$06$i255$i << 8 | HEAPU8[$128$looptemp >> 0]; //@line 260
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $131; //@line 263
            break;
           } else {
            $$06$i255$i = $131; //@line 266
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 272
         $$reg2mem$0 = $61; //@line 273
         continue L4;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $244 = (HEAP32[$2 >> 2] | 0) + 28 | 0; //@line 283
         if ((HEAP32[$244 >> 2] | 0) != -1) {
          break L2;
         }
         $247 = $90 + 1 | 0; //@line 289
         HEAP32[$4 >> 2] = $247; //@line 290
         $248 = $$1202$in$i & 255; //@line 291
         if (!($248 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 294
         } else {
          $$045$i270$i = $248; //@line 296
          $$06$i269$i = 0; //@line 296
          $253 = $247; //@line 296
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 298
           $253$looptemp = $253;
           $253 = $253 + 1 | 0; //@line 300
           HEAP32[$4 >> 2] = $253; //@line 301
           $256 = $$06$i269$i << 8 | HEAPU8[$253$looptemp >> 0]; //@line 304
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $256; //@line 307
            break;
           } else {
            $$06$i269$i = $256; //@line 310
           }
          }
         }
         HEAP32[$244 >> 2] = $$0$lcssa$i272$i; //@line 314
         $$reg2mem$0 = $61; //@line 315
         continue L4;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $299 = (HEAP32[$2 >> 2] | 0) + 32 | 0; //@line 325
         if ((HEAP32[$299 >> 2] | 0) != -1) {
          break L2;
         }
         $302 = $90 + 1 | 0; //@line 331
         HEAP32[$4 >> 2] = $302; //@line 332
         $303 = $$1202$in$i & 255; //@line 333
         if (!($303 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 336
         } else {
          $$045$i263$i = $303; //@line 338
          $$06$i262$i = 0; //@line 338
          $308 = $302; //@line 338
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 340
           $308$looptemp = $308;
           $308 = $308 + 1 | 0; //@line 342
           HEAP32[$4 >> 2] = $308; //@line 343
           $311 = $$06$i262$i << 8 | HEAPU8[$308$looptemp >> 0]; //@line 346
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $311; //@line 349
            break;
           } else {
            $$06$i262$i = $311; //@line 352
           }
          }
         }
         HEAP32[$299 >> 2] = $$0$lcssa$i265$i; //@line 356
         $$reg2mem$0 = $61; //@line 357
         continue L4;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $336 = (HEAP32[$2 >> 2] | 0) + 40 | 0; //@line 367
         if ((HEAP32[$336 >> 2] | 0) != -1) {
          break L2;
         }
         $339 = $90 + 1 | 0; //@line 373
         HEAP32[$4 >> 2] = $339; //@line 374
         $340 = $$1202$in$i & 255; //@line 375
         if (!($340 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 378
         } else {
          $$045$i249$i = $340; //@line 380
          $$06$i248$i = 0; //@line 380
          $345 = $339; //@line 380
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 382
           $345$looptemp = $345;
           $345 = $345 + 1 | 0; //@line 384
           HEAP32[$4 >> 2] = $345; //@line 385
           $348 = $$06$i248$i << 8 | HEAPU8[$345$looptemp >> 0]; //@line 388
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $348; //@line 391
            break;
           } else {
            $$06$i248$i = $348; //@line 394
           }
          }
         }
         HEAP32[$336 >> 2] = $$0$lcssa$i251$i; //@line 398
         $$reg2mem$0 = $61; //@line 399
         continue L4;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $352 = (HEAP32[$2 >> 2] | 0) + 36 | 0; //@line 409
         if ((HEAP32[$352 >> 2] | 0) != -1) {
          break L2;
         }
         $355 = $90 + 1 | 0; //@line 415
         HEAP32[$4 >> 2] = $355; //@line 416
         $356 = $$1202$in$i & 255; //@line 417
         if (!($356 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 420
         } else {
          $$045$i242$i = $356; //@line 422
          $$06$i241$i = 0; //@line 422
          $361 = $355; //@line 422
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 424
           $361$looptemp = $361;
           $361 = $361 + 1 | 0; //@line 426
           HEAP32[$4 >> 2] = $361; //@line 427
           $364 = $$06$i241$i << 8 | HEAPU8[$361$looptemp >> 0]; //@line 430
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $364; //@line 433
            break;
           } else {
            $$06$i241$i = $364; //@line 436
           }
          }
         }
         HEAP32[$352 >> 2] = $$0$lcssa$i244$i; //@line 440
         $$reg2mem$0 = $61; //@line 441
         continue L4;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $368 = (HEAP32[$2 >> 2] | 0) + 12 | 0; //@line 451
         if ((HEAP32[$368 >> 2] | 0) != -1) {
          break L2;
         }
         $371 = $90 + 1 | 0; //@line 457
         HEAP32[$4 >> 2] = $371; //@line 458
         $372 = $$1202$in$i & 255; //@line 459
         if (!($372 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 462
         } else {
          $$045$i235$i = $372; //@line 464
          $$06$i234$i = 0; //@line 464
          $377 = $371; //@line 464
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 466
           $377$looptemp = $377;
           $377 = $377 + 1 | 0; //@line 468
           HEAP32[$4 >> 2] = $377; //@line 469
           $380 = $$06$i234$i << 8 | HEAPU8[$377$looptemp >> 0]; //@line 472
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $380; //@line 475
            break;
           } else {
            $$06$i234$i = $380; //@line 478
           }
          }
         }
         HEAP32[$368 >> 2] = $$0$lcssa$i237$i; //@line 482
         $$reg2mem$0 = $61; //@line 483
         continue L4;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $384 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 493
         $385 = HEAP8[$384 >> 0] | 0; //@line 494
         if ($385 & 1) {
          break L2;
         }
         HEAP8[$384 >> 0] = $385 | 1; //@line 501
         $390 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 503
         HEAP32[$4 >> 2] = $390; //@line 504
         $391 = $$1202$in$i & 255; //@line 505
         if (!($391 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 508
         } else {
          $$045$i228$i = $391; //@line 510
          $$06$i227$i = 0; //@line 510
          $396 = $390; //@line 510
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 512
           $396$looptemp = $396;
           $396 = $396 + 1 | 0; //@line 514
           HEAP32[$4 >> 2] = $396; //@line 515
           $399 = $$06$i227$i << 8 | HEAPU8[$396$looptemp >> 0]; //@line 518
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $399; //@line 521
            break;
           } else {
            $$06$i227$i = $399; //@line 524
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 530
         $$reg2mem$0 = $61; //@line 531
         continue L4;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $405 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 541
         $406 = HEAP8[$405 >> 0] | 0; //@line 542
         if ($406 & 2) {
          break L2;
         }
         HEAP8[$405 >> 0] = $406 | 2; //@line 549
         $411 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 551
         HEAP32[$4 >> 2] = $411; //@line 552
         $412 = $$1202$in$i & 255; //@line 553
         if (!($412 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 556
         } else {
          $$045$i221$i = $412; //@line 558
          $$06$i220$i = 0; //@line 558
          $417 = $411; //@line 558
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 560
           $417$looptemp = $417;
           $417 = $417 + 1 | 0; //@line 562
           HEAP32[$4 >> 2] = $417; //@line 563
           $420 = $$06$i220$i << 8 | HEAPU8[$417$looptemp >> 0]; //@line 566
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $420; //@line 569
            break;
           } else {
            $$06$i220$i = $420; //@line 572
           }
          }
         }
         HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 578
         $$reg2mem$0 = $61; //@line 579
         continue L4;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$28 >> 2] | 0) != -1) {
     break L2;
    }
    $110 = $90 + 1 | 0; //@line 606
    HEAP32[$4 >> 2] = $110; //@line 607
    $111 = $$1202$in$i & 255; //@line 608
    if (!($111 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 611
    } else {
     $$045$i$i = $111; //@line 613
     $$06$i$i = 0; //@line 613
     $116 = $110; //@line 613
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 615
      $116$looptemp = $116;
      $116 = $116 + 1 | 0; //@line 617
      HEAP32[$4 >> 2] = $116; //@line 618
      $119 = $$06$i$i << 8 | HEAPU8[$116$looptemp >> 0]; //@line 621
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $119; //@line 624
       break;
      } else {
       $$06$i$i = $119; //@line 627
      }
     }
    }
    HEAP32[$28 >> 2] = $$0$lcssa$i$i; //@line 631
    $$reg2mem$0 = $61; //@line 632
   }
   if ((label | 0) == 14) {
    $82 = HEAP32[$16 >> 2] | 0; //@line 635
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(88) | 0; //@line 636
    $83 = FUNCTION_TABLE_ii[$82 & 15](68) | 0; //@line 637
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 640
     $84 = $ReallocAsyncCtx3 + 4 | 0; //@line 641
     HEAP32[$84 >> 2] = $2; //@line 642
     $85 = $ReallocAsyncCtx3 + 8 | 0; //@line 643
     HEAP32[$85 >> 2] = $4; //@line 644
     $86 = $ReallocAsyncCtx3 + 12 | 0; //@line 645
     HEAP32[$86 >> 2] = $$1202$in$i; //@line 646
     $87 = $ReallocAsyncCtx3 + 16 | 0; //@line 647
     HEAP32[$87 >> 2] = $61; //@line 648
     $88 = $ReallocAsyncCtx3 + 20 | 0; //@line 649
     HEAP16[$88 >> 1] = $$1202$i; //@line 650
     $89 = $ReallocAsyncCtx3 + 24 | 0; //@line 651
     HEAP32[$89 >> 2] = $90; //@line 652
     $91 = $ReallocAsyncCtx3 + 28 | 0; //@line 653
     HEAP32[$91 >> 2] = $6; //@line 654
     $92 = $ReallocAsyncCtx3 + 32 | 0; //@line 655
     HEAP32[$92 >> 2] = $8; //@line 656
     $93 = $ReallocAsyncCtx3 + 36 | 0; //@line 657
     HEAP32[$93 >> 2] = $10; //@line 658
     $94 = $ReallocAsyncCtx3 + 40 | 0; //@line 659
     HEAP32[$94 >> 2] = $12; //@line 660
     $95 = $ReallocAsyncCtx3 + 44 | 0; //@line 661
     HEAP32[$95 >> 2] = $14; //@line 662
     $96 = $ReallocAsyncCtx3 + 48 | 0; //@line 663
     HEAP16[$96 >> 1] = $79; //@line 664
     $97 = $ReallocAsyncCtx3 + 52 | 0; //@line 665
     HEAP32[$97 >> 2] = $16; //@line 666
     $98 = $ReallocAsyncCtx3 + 56 | 0; //@line 667
     HEAP32[$98 >> 2] = $18; //@line 668
     $99 = $ReallocAsyncCtx3 + 60 | 0; //@line 669
     HEAP32[$99 >> 2] = $20; //@line 670
     $100 = $ReallocAsyncCtx3 + 64 | 0; //@line 671
     HEAP16[$100 >> 1] = $trunc$i; //@line 672
     $101 = $ReallocAsyncCtx3 + 68 | 0; //@line 673
     HEAP32[$101 >> 2] = $22; //@line 674
     $102 = $ReallocAsyncCtx3 + 72 | 0; //@line 675
     HEAP32[$102 >> 2] = $24; //@line 676
     $103 = $ReallocAsyncCtx3 + 76 | 0; //@line 677
     HEAP32[$103 >> 2] = $26; //@line 678
     $104 = $ReallocAsyncCtx3 + 80 | 0; //@line 679
     HEAP32[$104 >> 2] = $28; //@line 680
     $105 = $ReallocAsyncCtx3 + 84 | 0; //@line 681
     HEAP32[$105 >> 2] = $30; //@line 682
     sp = STACKTOP; //@line 683
     return;
    }
    HEAP32[___async_retval >> 2] = $83; //@line 687
    ___async_unwind = 0; //@line 688
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 689
    $84 = $ReallocAsyncCtx3 + 4 | 0; //@line 690
    HEAP32[$84 >> 2] = $2; //@line 691
    $85 = $ReallocAsyncCtx3 + 8 | 0; //@line 692
    HEAP32[$85 >> 2] = $4; //@line 693
    $86 = $ReallocAsyncCtx3 + 12 | 0; //@line 694
    HEAP32[$86 >> 2] = $$1202$in$i; //@line 695
    $87 = $ReallocAsyncCtx3 + 16 | 0; //@line 696
    HEAP32[$87 >> 2] = $61; //@line 697
    $88 = $ReallocAsyncCtx3 + 20 | 0; //@line 698
    HEAP16[$88 >> 1] = $$1202$i; //@line 699
    $89 = $ReallocAsyncCtx3 + 24 | 0; //@line 700
    HEAP32[$89 >> 2] = $90; //@line 701
    $91 = $ReallocAsyncCtx3 + 28 | 0; //@line 702
    HEAP32[$91 >> 2] = $6; //@line 703
    $92 = $ReallocAsyncCtx3 + 32 | 0; //@line 704
    HEAP32[$92 >> 2] = $8; //@line 705
    $93 = $ReallocAsyncCtx3 + 36 | 0; //@line 706
    HEAP32[$93 >> 2] = $10; //@line 707
    $94 = $ReallocAsyncCtx3 + 40 | 0; //@line 708
    HEAP32[$94 >> 2] = $12; //@line 709
    $95 = $ReallocAsyncCtx3 + 44 | 0; //@line 710
    HEAP32[$95 >> 2] = $14; //@line 711
    $96 = $ReallocAsyncCtx3 + 48 | 0; //@line 712
    HEAP16[$96 >> 1] = $79; //@line 713
    $97 = $ReallocAsyncCtx3 + 52 | 0; //@line 714
    HEAP32[$97 >> 2] = $16; //@line 715
    $98 = $ReallocAsyncCtx3 + 56 | 0; //@line 716
    HEAP32[$98 >> 2] = $18; //@line 717
    $99 = $ReallocAsyncCtx3 + 60 | 0; //@line 718
    HEAP32[$99 >> 2] = $20; //@line 719
    $100 = $ReallocAsyncCtx3 + 64 | 0; //@line 720
    HEAP16[$100 >> 1] = $trunc$i; //@line 721
    $101 = $ReallocAsyncCtx3 + 68 | 0; //@line 722
    HEAP32[$101 >> 2] = $22; //@line 723
    $102 = $ReallocAsyncCtx3 + 72 | 0; //@line 724
    HEAP32[$102 >> 2] = $24; //@line 725
    $103 = $ReallocAsyncCtx3 + 76 | 0; //@line 726
    HEAP32[$103 >> 2] = $26; //@line 727
    $104 = $ReallocAsyncCtx3 + 80 | 0; //@line 728
    HEAP32[$104 >> 2] = $28; //@line 729
    $105 = $ReallocAsyncCtx3 + 84 | 0; //@line 730
    HEAP32[$105 >> 2] = $30; //@line 731
    sp = STACKTOP; //@line 732
    return;
   } else if ((label | 0) == 27) {
    $135 = $$1202$in$i & 65535; //@line 736
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $138 = HEAP32[$2 >> 2] | 0; //@line 742
    if (HEAP32[$138 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$138 + 2 >> 1] = $$1202$i; //@line 750
    $143 = $90 + 1 | 0; //@line 751
    HEAP32[$4 >> 2] = $143; //@line 752
    $144 = HEAP32[$16 >> 2] | 0; //@line 753
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 754
    $145 = FUNCTION_TABLE_ii[$144 & 15]($$1202$i) | 0; //@line 755
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 758
     $146 = $ReallocAsyncCtx4 + 4 | 0; //@line 759
     HEAP32[$146 >> 2] = $2; //@line 760
     $147 = $ReallocAsyncCtx4 + 8 | 0; //@line 761
     HEAP32[$147 >> 2] = $4; //@line 762
     $148 = $ReallocAsyncCtx4 + 12 | 0; //@line 763
     HEAP32[$148 >> 2] = $6; //@line 764
     $149 = $ReallocAsyncCtx4 + 16 | 0; //@line 765
     HEAP32[$149 >> 2] = $8; //@line 766
     $150 = $ReallocAsyncCtx4 + 20 | 0; //@line 767
     HEAP32[$150 >> 2] = $10; //@line 768
     $151 = $ReallocAsyncCtx4 + 24 | 0; //@line 769
     HEAP32[$151 >> 2] = $12; //@line 770
     $152 = $ReallocAsyncCtx4 + 28 | 0; //@line 771
     HEAP32[$152 >> 2] = $14; //@line 772
     $153 = $ReallocAsyncCtx4 + 32 | 0; //@line 773
     HEAP32[$153 >> 2] = $16; //@line 774
     $154 = $ReallocAsyncCtx4 + 36 | 0; //@line 775
     HEAP32[$154 >> 2] = $18; //@line 776
     $155 = $ReallocAsyncCtx4 + 40 | 0; //@line 777
     HEAP32[$155 >> 2] = $20; //@line 778
     $156 = $ReallocAsyncCtx4 + 44 | 0; //@line 779
     HEAP32[$156 >> 2] = $22; //@line 780
     $157 = $ReallocAsyncCtx4 + 48 | 0; //@line 781
     HEAP32[$157 >> 2] = $24; //@line 782
     $158 = $ReallocAsyncCtx4 + 52 | 0; //@line 783
     HEAP32[$158 >> 2] = $26; //@line 784
     $159 = $ReallocAsyncCtx4 + 56 | 0; //@line 785
     HEAP32[$159 >> 2] = $28; //@line 786
     $160 = $ReallocAsyncCtx4 + 60 | 0; //@line 787
     HEAP32[$160 >> 2] = $30; //@line 788
     $161 = $ReallocAsyncCtx4 + 64 | 0; //@line 789
     HEAP32[$161 >> 2] = $61; //@line 790
     $162 = $ReallocAsyncCtx4 + 68 | 0; //@line 791
     HEAP32[$162 >> 2] = $143; //@line 792
     $163 = $ReallocAsyncCtx4 + 72 | 0; //@line 793
     HEAP32[$163 >> 2] = $135; //@line 794
     sp = STACKTOP; //@line 795
     return;
    }
    HEAP32[___async_retval >> 2] = $145; //@line 799
    ___async_unwind = 0; //@line 800
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 801
    $146 = $ReallocAsyncCtx4 + 4 | 0; //@line 802
    HEAP32[$146 >> 2] = $2; //@line 803
    $147 = $ReallocAsyncCtx4 + 8 | 0; //@line 804
    HEAP32[$147 >> 2] = $4; //@line 805
    $148 = $ReallocAsyncCtx4 + 12 | 0; //@line 806
    HEAP32[$148 >> 2] = $6; //@line 807
    $149 = $ReallocAsyncCtx4 + 16 | 0; //@line 808
    HEAP32[$149 >> 2] = $8; //@line 809
    $150 = $ReallocAsyncCtx4 + 20 | 0; //@line 810
    HEAP32[$150 >> 2] = $10; //@line 811
    $151 = $ReallocAsyncCtx4 + 24 | 0; //@line 812
    HEAP32[$151 >> 2] = $12; //@line 813
    $152 = $ReallocAsyncCtx4 + 28 | 0; //@line 814
    HEAP32[$152 >> 2] = $14; //@line 815
    $153 = $ReallocAsyncCtx4 + 32 | 0; //@line 816
    HEAP32[$153 >> 2] = $16; //@line 817
    $154 = $ReallocAsyncCtx4 + 36 | 0; //@line 818
    HEAP32[$154 >> 2] = $18; //@line 819
    $155 = $ReallocAsyncCtx4 + 40 | 0; //@line 820
    HEAP32[$155 >> 2] = $20; //@line 821
    $156 = $ReallocAsyncCtx4 + 44 | 0; //@line 822
    HEAP32[$156 >> 2] = $22; //@line 823
    $157 = $ReallocAsyncCtx4 + 48 | 0; //@line 824
    HEAP32[$157 >> 2] = $24; //@line 825
    $158 = $ReallocAsyncCtx4 + 52 | 0; //@line 826
    HEAP32[$158 >> 2] = $26; //@line 827
    $159 = $ReallocAsyncCtx4 + 56 | 0; //@line 828
    HEAP32[$159 >> 2] = $28; //@line 829
    $160 = $ReallocAsyncCtx4 + 60 | 0; //@line 830
    HEAP32[$160 >> 2] = $30; //@line 831
    $161 = $ReallocAsyncCtx4 + 64 | 0; //@line 832
    HEAP32[$161 >> 2] = $61; //@line 833
    $162 = $ReallocAsyncCtx4 + 68 | 0; //@line 834
    HEAP32[$162 >> 2] = $143; //@line 835
    $163 = $ReallocAsyncCtx4 + 72 | 0; //@line 836
    HEAP32[$163 >> 2] = $135; //@line 837
    sp = STACKTOP; //@line 838
    return;
   } else if ((label | 0) == 32) {
    $165 = HEAP32[$2 >> 2] | 0; //@line 842
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 844
    $167 = _sn_coap_parser_options_parse_multiple_options($14, $4, $79, $165 + 48 | 0, $165, 4, $$1202$i) | 0; //@line 845
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 848
     $168 = $ReallocAsyncCtx10 + 4 | 0; //@line 849
     HEAP32[$168 >> 2] = $2; //@line 850
     $169 = $ReallocAsyncCtx10 + 8 | 0; //@line 851
     HEAP32[$169 >> 2] = $4; //@line 852
     $170 = $ReallocAsyncCtx10 + 12 | 0; //@line 853
     HEAP32[$170 >> 2] = $6; //@line 854
     $171 = $ReallocAsyncCtx10 + 16 | 0; //@line 855
     HEAP32[$171 >> 2] = $8; //@line 856
     $172 = $ReallocAsyncCtx10 + 20 | 0; //@line 857
     HEAP32[$172 >> 2] = $10; //@line 858
     $173 = $ReallocAsyncCtx10 + 24 | 0; //@line 859
     HEAP32[$173 >> 2] = $12; //@line 860
     $174 = $ReallocAsyncCtx10 + 28 | 0; //@line 861
     HEAP32[$174 >> 2] = $14; //@line 862
     $175 = $ReallocAsyncCtx10 + 32 | 0; //@line 863
     HEAP32[$175 >> 2] = $16; //@line 864
     $176 = $ReallocAsyncCtx10 + 36 | 0; //@line 865
     HEAP32[$176 >> 2] = $18; //@line 866
     $177 = $ReallocAsyncCtx10 + 40 | 0; //@line 867
     HEAP32[$177 >> 2] = $20; //@line 868
     $178 = $ReallocAsyncCtx10 + 44 | 0; //@line 869
     HEAP32[$178 >> 2] = $22; //@line 870
     $179 = $ReallocAsyncCtx10 + 48 | 0; //@line 871
     HEAP32[$179 >> 2] = $24; //@line 872
     $180 = $ReallocAsyncCtx10 + 52 | 0; //@line 873
     HEAP32[$180 >> 2] = $26; //@line 874
     $181 = $ReallocAsyncCtx10 + 56 | 0; //@line 875
     HEAP32[$181 >> 2] = $28; //@line 876
     $182 = $ReallocAsyncCtx10 + 60 | 0; //@line 877
     HEAP32[$182 >> 2] = $30; //@line 878
     $183 = $ReallocAsyncCtx10 + 64 | 0; //@line 879
     HEAP32[$183 >> 2] = $61; //@line 880
     sp = STACKTOP; //@line 881
     return;
    }
    HEAP8[___async_retval >> 0] = $167; //@line 885
    ___async_unwind = 0; //@line 886
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 887
    $168 = $ReallocAsyncCtx10 + 4 | 0; //@line 888
    HEAP32[$168 >> 2] = $2; //@line 889
    $169 = $ReallocAsyncCtx10 + 8 | 0; //@line 890
    HEAP32[$169 >> 2] = $4; //@line 891
    $170 = $ReallocAsyncCtx10 + 12 | 0; //@line 892
    HEAP32[$170 >> 2] = $6; //@line 893
    $171 = $ReallocAsyncCtx10 + 16 | 0; //@line 894
    HEAP32[$171 >> 2] = $8; //@line 895
    $172 = $ReallocAsyncCtx10 + 20 | 0; //@line 896
    HEAP32[$172 >> 2] = $10; //@line 897
    $173 = $ReallocAsyncCtx10 + 24 | 0; //@line 898
    HEAP32[$173 >> 2] = $12; //@line 899
    $174 = $ReallocAsyncCtx10 + 28 | 0; //@line 900
    HEAP32[$174 >> 2] = $14; //@line 901
    $175 = $ReallocAsyncCtx10 + 32 | 0; //@line 902
    HEAP32[$175 >> 2] = $16; //@line 903
    $176 = $ReallocAsyncCtx10 + 36 | 0; //@line 904
    HEAP32[$176 >> 2] = $18; //@line 905
    $177 = $ReallocAsyncCtx10 + 40 | 0; //@line 906
    HEAP32[$177 >> 2] = $20; //@line 907
    $178 = $ReallocAsyncCtx10 + 44 | 0; //@line 908
    HEAP32[$178 >> 2] = $22; //@line 909
    $179 = $ReallocAsyncCtx10 + 48 | 0; //@line 910
    HEAP32[$179 >> 2] = $24; //@line 911
    $180 = $ReallocAsyncCtx10 + 52 | 0; //@line 912
    HEAP32[$180 >> 2] = $26; //@line 913
    $181 = $ReallocAsyncCtx10 + 56 | 0; //@line 914
    HEAP32[$181 >> 2] = $28; //@line 915
    $182 = $ReallocAsyncCtx10 + 60 | 0; //@line 916
    HEAP32[$182 >> 2] = $30; //@line 917
    $183 = $ReallocAsyncCtx10 + 64 | 0; //@line 918
    HEAP32[$183 >> 2] = $61; //@line 919
    sp = STACKTOP; //@line 920
    return;
   } else if ((label | 0) == 35) {
    $185 = $$1202$in$i & 65535; //@line 924
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $188 = HEAP32[$2 >> 2] | 0; //@line 930
    if (HEAP32[$188 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$188 + 4 >> 1] = $$1202$i; //@line 938
    $193 = $90 + 1 | 0; //@line 939
    HEAP32[$4 >> 2] = $193; //@line 940
    $194 = HEAP32[$16 >> 2] | 0; //@line 941
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 942
    $195 = FUNCTION_TABLE_ii[$194 & 15]($$1202$i) | 0; //@line 943
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 946
     $196 = $ReallocAsyncCtx5 + 4 | 0; //@line 947
     HEAP32[$196 >> 2] = $2; //@line 948
     $197 = $ReallocAsyncCtx5 + 8 | 0; //@line 949
     HEAP32[$197 >> 2] = $4; //@line 950
     $198 = $ReallocAsyncCtx5 + 12 | 0; //@line 951
     HEAP32[$198 >> 2] = $6; //@line 952
     $199 = $ReallocAsyncCtx5 + 16 | 0; //@line 953
     HEAP32[$199 >> 2] = $8; //@line 954
     $200 = $ReallocAsyncCtx5 + 20 | 0; //@line 955
     HEAP32[$200 >> 2] = $10; //@line 956
     $201 = $ReallocAsyncCtx5 + 24 | 0; //@line 957
     HEAP32[$201 >> 2] = $12; //@line 958
     $202 = $ReallocAsyncCtx5 + 28 | 0; //@line 959
     HEAP32[$202 >> 2] = $14; //@line 960
     $203 = $ReallocAsyncCtx5 + 32 | 0; //@line 961
     HEAP32[$203 >> 2] = $16; //@line 962
     $204 = $ReallocAsyncCtx5 + 36 | 0; //@line 963
     HEAP32[$204 >> 2] = $18; //@line 964
     $205 = $ReallocAsyncCtx5 + 40 | 0; //@line 965
     HEAP32[$205 >> 2] = $20; //@line 966
     $206 = $ReallocAsyncCtx5 + 44 | 0; //@line 967
     HEAP32[$206 >> 2] = $22; //@line 968
     $207 = $ReallocAsyncCtx5 + 48 | 0; //@line 969
     HEAP32[$207 >> 2] = $24; //@line 970
     $208 = $ReallocAsyncCtx5 + 52 | 0; //@line 971
     HEAP32[$208 >> 2] = $26; //@line 972
     $209 = $ReallocAsyncCtx5 + 56 | 0; //@line 973
     HEAP32[$209 >> 2] = $28; //@line 974
     $210 = $ReallocAsyncCtx5 + 60 | 0; //@line 975
     HEAP32[$210 >> 2] = $30; //@line 976
     $211 = $ReallocAsyncCtx5 + 64 | 0; //@line 977
     HEAP32[$211 >> 2] = $61; //@line 978
     $212 = $ReallocAsyncCtx5 + 68 | 0; //@line 979
     HEAP32[$212 >> 2] = $193; //@line 980
     $213 = $ReallocAsyncCtx5 + 72 | 0; //@line 981
     HEAP32[$213 >> 2] = $185; //@line 982
     sp = STACKTOP; //@line 983
     return;
    }
    HEAP32[___async_retval >> 2] = $195; //@line 987
    ___async_unwind = 0; //@line 988
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 989
    $196 = $ReallocAsyncCtx5 + 4 | 0; //@line 990
    HEAP32[$196 >> 2] = $2; //@line 991
    $197 = $ReallocAsyncCtx5 + 8 | 0; //@line 992
    HEAP32[$197 >> 2] = $4; //@line 993
    $198 = $ReallocAsyncCtx5 + 12 | 0; //@line 994
    HEAP32[$198 >> 2] = $6; //@line 995
    $199 = $ReallocAsyncCtx5 + 16 | 0; //@line 996
    HEAP32[$199 >> 2] = $8; //@line 997
    $200 = $ReallocAsyncCtx5 + 20 | 0; //@line 998
    HEAP32[$200 >> 2] = $10; //@line 999
    $201 = $ReallocAsyncCtx5 + 24 | 0; //@line 1000
    HEAP32[$201 >> 2] = $12; //@line 1001
    $202 = $ReallocAsyncCtx5 + 28 | 0; //@line 1002
    HEAP32[$202 >> 2] = $14; //@line 1003
    $203 = $ReallocAsyncCtx5 + 32 | 0; //@line 1004
    HEAP32[$203 >> 2] = $16; //@line 1005
    $204 = $ReallocAsyncCtx5 + 36 | 0; //@line 1006
    HEAP32[$204 >> 2] = $18; //@line 1007
    $205 = $ReallocAsyncCtx5 + 40 | 0; //@line 1008
    HEAP32[$205 >> 2] = $20; //@line 1009
    $206 = $ReallocAsyncCtx5 + 44 | 0; //@line 1010
    HEAP32[$206 >> 2] = $22; //@line 1011
    $207 = $ReallocAsyncCtx5 + 48 | 0; //@line 1012
    HEAP32[$207 >> 2] = $24; //@line 1013
    $208 = $ReallocAsyncCtx5 + 52 | 0; //@line 1014
    HEAP32[$208 >> 2] = $26; //@line 1015
    $209 = $ReallocAsyncCtx5 + 56 | 0; //@line 1016
    HEAP32[$209 >> 2] = $28; //@line 1017
    $210 = $ReallocAsyncCtx5 + 60 | 0; //@line 1018
    HEAP32[$210 >> 2] = $30; //@line 1019
    $211 = $ReallocAsyncCtx5 + 64 | 0; //@line 1020
    HEAP32[$211 >> 2] = $61; //@line 1021
    $212 = $ReallocAsyncCtx5 + 68 | 0; //@line 1022
    HEAP32[$212 >> 2] = $193; //@line 1023
    $213 = $ReallocAsyncCtx5 + 72 | 0; //@line 1024
    HEAP32[$213 >> 2] = $185; //@line 1025
    sp = STACKTOP; //@line 1026
    return;
   } else if ((label | 0) == 42) {
    $219 = HEAP32[$2 >> 2] | 0; //@line 1030
    $220 = $219 + 56 | 0; //@line 1031
    if (HEAP32[$220 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 1038
    $224 = _sn_coap_parser_options_parse_multiple_options($14, $4, $79, $220, $219 + 6 | 0, 8, $$1202$i) | 0; //@line 1039
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 1042
     $225 = $ReallocAsyncCtx9 + 4 | 0; //@line 1043
     HEAP32[$225 >> 2] = $2; //@line 1044
     $226 = $ReallocAsyncCtx9 + 8 | 0; //@line 1045
     HEAP32[$226 >> 2] = $4; //@line 1046
     $227 = $ReallocAsyncCtx9 + 12 | 0; //@line 1047
     HEAP32[$227 >> 2] = $6; //@line 1048
     $228 = $ReallocAsyncCtx9 + 16 | 0; //@line 1049
     HEAP32[$228 >> 2] = $8; //@line 1050
     $229 = $ReallocAsyncCtx9 + 20 | 0; //@line 1051
     HEAP32[$229 >> 2] = $10; //@line 1052
     $230 = $ReallocAsyncCtx9 + 24 | 0; //@line 1053
     HEAP32[$230 >> 2] = $12; //@line 1054
     $231 = $ReallocAsyncCtx9 + 28 | 0; //@line 1055
     HEAP32[$231 >> 2] = $14; //@line 1056
     $232 = $ReallocAsyncCtx9 + 32 | 0; //@line 1057
     HEAP32[$232 >> 2] = $16; //@line 1058
     $233 = $ReallocAsyncCtx9 + 36 | 0; //@line 1059
     HEAP32[$233 >> 2] = $18; //@line 1060
     $234 = $ReallocAsyncCtx9 + 40 | 0; //@line 1061
     HEAP32[$234 >> 2] = $20; //@line 1062
     $235 = $ReallocAsyncCtx9 + 44 | 0; //@line 1063
     HEAP32[$235 >> 2] = $22; //@line 1064
     $236 = $ReallocAsyncCtx9 + 48 | 0; //@line 1065
     HEAP32[$236 >> 2] = $24; //@line 1066
     $237 = $ReallocAsyncCtx9 + 52 | 0; //@line 1067
     HEAP32[$237 >> 2] = $26; //@line 1068
     $238 = $ReallocAsyncCtx9 + 56 | 0; //@line 1069
     HEAP32[$238 >> 2] = $28; //@line 1070
     $239 = $ReallocAsyncCtx9 + 60 | 0; //@line 1071
     HEAP32[$239 >> 2] = $30; //@line 1072
     $240 = $ReallocAsyncCtx9 + 64 | 0; //@line 1073
     HEAP32[$240 >> 2] = $61; //@line 1074
     sp = STACKTOP; //@line 1075
     return;
    }
    HEAP8[___async_retval >> 0] = $224; //@line 1079
    ___async_unwind = 0; //@line 1080
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 1081
    $225 = $ReallocAsyncCtx9 + 4 | 0; //@line 1082
    HEAP32[$225 >> 2] = $2; //@line 1083
    $226 = $ReallocAsyncCtx9 + 8 | 0; //@line 1084
    HEAP32[$226 >> 2] = $4; //@line 1085
    $227 = $ReallocAsyncCtx9 + 12 | 0; //@line 1086
    HEAP32[$227 >> 2] = $6; //@line 1087
    $228 = $ReallocAsyncCtx9 + 16 | 0; //@line 1088
    HEAP32[$228 >> 2] = $8; //@line 1089
    $229 = $ReallocAsyncCtx9 + 20 | 0; //@line 1090
    HEAP32[$229 >> 2] = $10; //@line 1091
    $230 = $ReallocAsyncCtx9 + 24 | 0; //@line 1092
    HEAP32[$230 >> 2] = $12; //@line 1093
    $231 = $ReallocAsyncCtx9 + 28 | 0; //@line 1094
    HEAP32[$231 >> 2] = $14; //@line 1095
    $232 = $ReallocAsyncCtx9 + 32 | 0; //@line 1096
    HEAP32[$232 >> 2] = $16; //@line 1097
    $233 = $ReallocAsyncCtx9 + 36 | 0; //@line 1098
    HEAP32[$233 >> 2] = $18; //@line 1099
    $234 = $ReallocAsyncCtx9 + 40 | 0; //@line 1100
    HEAP32[$234 >> 2] = $20; //@line 1101
    $235 = $ReallocAsyncCtx9 + 44 | 0; //@line 1102
    HEAP32[$235 >> 2] = $22; //@line 1103
    $236 = $ReallocAsyncCtx9 + 48 | 0; //@line 1104
    HEAP32[$236 >> 2] = $24; //@line 1105
    $237 = $ReallocAsyncCtx9 + 52 | 0; //@line 1106
    HEAP32[$237 >> 2] = $26; //@line 1107
    $238 = $ReallocAsyncCtx9 + 56 | 0; //@line 1108
    HEAP32[$238 >> 2] = $28; //@line 1109
    $239 = $ReallocAsyncCtx9 + 60 | 0; //@line 1110
    HEAP32[$239 >> 2] = $30; //@line 1111
    $240 = $ReallocAsyncCtx9 + 64 | 0; //@line 1112
    HEAP32[$240 >> 2] = $61; //@line 1113
    sp = STACKTOP; //@line 1114
    return;
   } else if ((label | 0) == 51) {
    $258 = HEAP32[$2 >> 2] | 0; //@line 1118
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 1121
    $261 = _sn_coap_parser_options_parse_multiple_options($14, $4, $79, $258 + 60 | 0, $258 + 8 | 0, 20, $$1202$i) | 0; //@line 1122
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 1125
     $262 = $ReallocAsyncCtx8 + 4 | 0; //@line 1126
     HEAP32[$262 >> 2] = $2; //@line 1127
     $263 = $ReallocAsyncCtx8 + 8 | 0; //@line 1128
     HEAP32[$263 >> 2] = $4; //@line 1129
     $264 = $ReallocAsyncCtx8 + 12 | 0; //@line 1130
     HEAP32[$264 >> 2] = $6; //@line 1131
     $265 = $ReallocAsyncCtx8 + 16 | 0; //@line 1132
     HEAP32[$265 >> 2] = $8; //@line 1133
     $266 = $ReallocAsyncCtx8 + 20 | 0; //@line 1134
     HEAP32[$266 >> 2] = $10; //@line 1135
     $267 = $ReallocAsyncCtx8 + 24 | 0; //@line 1136
     HEAP32[$267 >> 2] = $12; //@line 1137
     $268 = $ReallocAsyncCtx8 + 28 | 0; //@line 1138
     HEAP32[$268 >> 2] = $14; //@line 1139
     $269 = $ReallocAsyncCtx8 + 32 | 0; //@line 1140
     HEAP32[$269 >> 2] = $16; //@line 1141
     $270 = $ReallocAsyncCtx8 + 36 | 0; //@line 1142
     HEAP32[$270 >> 2] = $18; //@line 1143
     $271 = $ReallocAsyncCtx8 + 40 | 0; //@line 1144
     HEAP32[$271 >> 2] = $20; //@line 1145
     $272 = $ReallocAsyncCtx8 + 44 | 0; //@line 1146
     HEAP32[$272 >> 2] = $22; //@line 1147
     $273 = $ReallocAsyncCtx8 + 48 | 0; //@line 1148
     HEAP32[$273 >> 2] = $24; //@line 1149
     $274 = $ReallocAsyncCtx8 + 52 | 0; //@line 1150
     HEAP32[$274 >> 2] = $26; //@line 1151
     $275 = $ReallocAsyncCtx8 + 56 | 0; //@line 1152
     HEAP32[$275 >> 2] = $28; //@line 1153
     $276 = $ReallocAsyncCtx8 + 60 | 0; //@line 1154
     HEAP32[$276 >> 2] = $30; //@line 1155
     $277 = $ReallocAsyncCtx8 + 64 | 0; //@line 1156
     HEAP32[$277 >> 2] = $61; //@line 1157
     sp = STACKTOP; //@line 1158
     return;
    }
    HEAP8[___async_retval >> 0] = $261; //@line 1162
    ___async_unwind = 0; //@line 1163
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 1164
    $262 = $ReallocAsyncCtx8 + 4 | 0; //@line 1165
    HEAP32[$262 >> 2] = $2; //@line 1166
    $263 = $ReallocAsyncCtx8 + 8 | 0; //@line 1167
    HEAP32[$263 >> 2] = $4; //@line 1168
    $264 = $ReallocAsyncCtx8 + 12 | 0; //@line 1169
    HEAP32[$264 >> 2] = $6; //@line 1170
    $265 = $ReallocAsyncCtx8 + 16 | 0; //@line 1171
    HEAP32[$265 >> 2] = $8; //@line 1172
    $266 = $ReallocAsyncCtx8 + 20 | 0; //@line 1173
    HEAP32[$266 >> 2] = $10; //@line 1174
    $267 = $ReallocAsyncCtx8 + 24 | 0; //@line 1175
    HEAP32[$267 >> 2] = $12; //@line 1176
    $268 = $ReallocAsyncCtx8 + 28 | 0; //@line 1177
    HEAP32[$268 >> 2] = $14; //@line 1178
    $269 = $ReallocAsyncCtx8 + 32 | 0; //@line 1179
    HEAP32[$269 >> 2] = $16; //@line 1180
    $270 = $ReallocAsyncCtx8 + 36 | 0; //@line 1181
    HEAP32[$270 >> 2] = $18; //@line 1182
    $271 = $ReallocAsyncCtx8 + 40 | 0; //@line 1183
    HEAP32[$271 >> 2] = $20; //@line 1184
    $272 = $ReallocAsyncCtx8 + 44 | 0; //@line 1185
    HEAP32[$272 >> 2] = $22; //@line 1186
    $273 = $ReallocAsyncCtx8 + 48 | 0; //@line 1187
    HEAP32[$273 >> 2] = $24; //@line 1188
    $274 = $ReallocAsyncCtx8 + 52 | 0; //@line 1189
    HEAP32[$274 >> 2] = $26; //@line 1190
    $275 = $ReallocAsyncCtx8 + 56 | 0; //@line 1191
    HEAP32[$275 >> 2] = $28; //@line 1192
    $276 = $ReallocAsyncCtx8 + 60 | 0; //@line 1193
    HEAP32[$276 >> 2] = $30; //@line 1194
    $277 = $ReallocAsyncCtx8 + 64 | 0; //@line 1195
    HEAP32[$277 >> 2] = $61; //@line 1196
    sp = STACKTOP; //@line 1197
    return;
   } else if ((label | 0) == 54) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 1201
    $279 = _sn_coap_parser_options_parse_multiple_options($14, $4, $79, $18, $20, 11, $$1202$i) | 0; //@line 1202
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 1205
     $280 = $ReallocAsyncCtx7 + 4 | 0; //@line 1206
     HEAP32[$280 >> 2] = $2; //@line 1207
     $281 = $ReallocAsyncCtx7 + 8 | 0; //@line 1208
     HEAP32[$281 >> 2] = $4; //@line 1209
     $282 = $ReallocAsyncCtx7 + 12 | 0; //@line 1210
     HEAP32[$282 >> 2] = $6; //@line 1211
     $283 = $ReallocAsyncCtx7 + 16 | 0; //@line 1212
     HEAP32[$283 >> 2] = $8; //@line 1213
     $284 = $ReallocAsyncCtx7 + 20 | 0; //@line 1214
     HEAP32[$284 >> 2] = $10; //@line 1215
     $285 = $ReallocAsyncCtx7 + 24 | 0; //@line 1216
     HEAP32[$285 >> 2] = $12; //@line 1217
     $286 = $ReallocAsyncCtx7 + 28 | 0; //@line 1218
     HEAP32[$286 >> 2] = $14; //@line 1219
     $287 = $ReallocAsyncCtx7 + 32 | 0; //@line 1220
     HEAP32[$287 >> 2] = $16; //@line 1221
     $288 = $ReallocAsyncCtx7 + 36 | 0; //@line 1222
     HEAP32[$288 >> 2] = $18; //@line 1223
     $289 = $ReallocAsyncCtx7 + 40 | 0; //@line 1224
     HEAP32[$289 >> 2] = $20; //@line 1225
     $290 = $ReallocAsyncCtx7 + 44 | 0; //@line 1226
     HEAP32[$290 >> 2] = $22; //@line 1227
     $291 = $ReallocAsyncCtx7 + 48 | 0; //@line 1228
     HEAP32[$291 >> 2] = $24; //@line 1229
     $292 = $ReallocAsyncCtx7 + 52 | 0; //@line 1230
     HEAP32[$292 >> 2] = $26; //@line 1231
     $293 = $ReallocAsyncCtx7 + 56 | 0; //@line 1232
     HEAP32[$293 >> 2] = $28; //@line 1233
     $294 = $ReallocAsyncCtx7 + 60 | 0; //@line 1234
     HEAP32[$294 >> 2] = $30; //@line 1235
     $295 = $ReallocAsyncCtx7 + 64 | 0; //@line 1236
     HEAP32[$295 >> 2] = $61; //@line 1237
     sp = STACKTOP; //@line 1238
     return;
    }
    HEAP8[___async_retval >> 0] = $279; //@line 1242
    ___async_unwind = 0; //@line 1243
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 1244
    $280 = $ReallocAsyncCtx7 + 4 | 0; //@line 1245
    HEAP32[$280 >> 2] = $2; //@line 1246
    $281 = $ReallocAsyncCtx7 + 8 | 0; //@line 1247
    HEAP32[$281 >> 2] = $4; //@line 1248
    $282 = $ReallocAsyncCtx7 + 12 | 0; //@line 1249
    HEAP32[$282 >> 2] = $6; //@line 1250
    $283 = $ReallocAsyncCtx7 + 16 | 0; //@line 1251
    HEAP32[$283 >> 2] = $8; //@line 1252
    $284 = $ReallocAsyncCtx7 + 20 | 0; //@line 1253
    HEAP32[$284 >> 2] = $10; //@line 1254
    $285 = $ReallocAsyncCtx7 + 24 | 0; //@line 1255
    HEAP32[$285 >> 2] = $12; //@line 1256
    $286 = $ReallocAsyncCtx7 + 28 | 0; //@line 1257
    HEAP32[$286 >> 2] = $14; //@line 1258
    $287 = $ReallocAsyncCtx7 + 32 | 0; //@line 1259
    HEAP32[$287 >> 2] = $16; //@line 1260
    $288 = $ReallocAsyncCtx7 + 36 | 0; //@line 1261
    HEAP32[$288 >> 2] = $18; //@line 1262
    $289 = $ReallocAsyncCtx7 + 40 | 0; //@line 1263
    HEAP32[$289 >> 2] = $20; //@line 1264
    $290 = $ReallocAsyncCtx7 + 44 | 0; //@line 1265
    HEAP32[$290 >> 2] = $22; //@line 1266
    $291 = $ReallocAsyncCtx7 + 48 | 0; //@line 1267
    HEAP32[$291 >> 2] = $24; //@line 1268
    $292 = $ReallocAsyncCtx7 + 52 | 0; //@line 1269
    HEAP32[$292 >> 2] = $26; //@line 1270
    $293 = $ReallocAsyncCtx7 + 56 | 0; //@line 1271
    HEAP32[$293 >> 2] = $28; //@line 1272
    $294 = $ReallocAsyncCtx7 + 60 | 0; //@line 1273
    HEAP32[$294 >> 2] = $30; //@line 1274
    $295 = $ReallocAsyncCtx7 + 64 | 0; //@line 1275
    HEAP32[$295 >> 2] = $61; //@line 1276
    sp = STACKTOP; //@line 1277
    return;
   } else if ((label | 0) == 62) {
    $313 = HEAP32[$2 >> 2] | 0; //@line 1281
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 1284
    $316 = _sn_coap_parser_options_parse_multiple_options($14, $4, $79, $313 + 64 | 0, $313 + 10 | 0, 15, $$1202$i) | 0; //@line 1285
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 1288
     $317 = $ReallocAsyncCtx6 + 4 | 0; //@line 1289
     HEAP32[$317 >> 2] = $2; //@line 1290
     $318 = $ReallocAsyncCtx6 + 8 | 0; //@line 1291
     HEAP32[$318 >> 2] = $4; //@line 1292
     $319 = $ReallocAsyncCtx6 + 12 | 0; //@line 1293
     HEAP32[$319 >> 2] = $6; //@line 1294
     $320 = $ReallocAsyncCtx6 + 16 | 0; //@line 1295
     HEAP32[$320 >> 2] = $8; //@line 1296
     $321 = $ReallocAsyncCtx6 + 20 | 0; //@line 1297
     HEAP32[$321 >> 2] = $10; //@line 1298
     $322 = $ReallocAsyncCtx6 + 24 | 0; //@line 1299
     HEAP32[$322 >> 2] = $12; //@line 1300
     $323 = $ReallocAsyncCtx6 + 28 | 0; //@line 1301
     HEAP32[$323 >> 2] = $14; //@line 1302
     $324 = $ReallocAsyncCtx6 + 32 | 0; //@line 1303
     HEAP32[$324 >> 2] = $16; //@line 1304
     $325 = $ReallocAsyncCtx6 + 36 | 0; //@line 1305
     HEAP32[$325 >> 2] = $18; //@line 1306
     $326 = $ReallocAsyncCtx6 + 40 | 0; //@line 1307
     HEAP32[$326 >> 2] = $20; //@line 1308
     $327 = $ReallocAsyncCtx6 + 44 | 0; //@line 1309
     HEAP32[$327 >> 2] = $22; //@line 1310
     $328 = $ReallocAsyncCtx6 + 48 | 0; //@line 1311
     HEAP32[$328 >> 2] = $24; //@line 1312
     $329 = $ReallocAsyncCtx6 + 52 | 0; //@line 1313
     HEAP32[$329 >> 2] = $26; //@line 1314
     $330 = $ReallocAsyncCtx6 + 56 | 0; //@line 1315
     HEAP32[$330 >> 2] = $28; //@line 1316
     $331 = $ReallocAsyncCtx6 + 60 | 0; //@line 1317
     HEAP32[$331 >> 2] = $30; //@line 1318
     $332 = $ReallocAsyncCtx6 + 64 | 0; //@line 1319
     HEAP32[$332 >> 2] = $61; //@line 1320
     sp = STACKTOP; //@line 1321
     return;
    }
    HEAP8[___async_retval >> 0] = $316; //@line 1325
    ___async_unwind = 0; //@line 1326
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 1327
    $317 = $ReallocAsyncCtx6 + 4 | 0; //@line 1328
    HEAP32[$317 >> 2] = $2; //@line 1329
    $318 = $ReallocAsyncCtx6 + 8 | 0; //@line 1330
    HEAP32[$318 >> 2] = $4; //@line 1331
    $319 = $ReallocAsyncCtx6 + 12 | 0; //@line 1332
    HEAP32[$319 >> 2] = $6; //@line 1333
    $320 = $ReallocAsyncCtx6 + 16 | 0; //@line 1334
    HEAP32[$320 >> 2] = $8; //@line 1335
    $321 = $ReallocAsyncCtx6 + 20 | 0; //@line 1336
    HEAP32[$321 >> 2] = $10; //@line 1337
    $322 = $ReallocAsyncCtx6 + 24 | 0; //@line 1338
    HEAP32[$322 >> 2] = $12; //@line 1339
    $323 = $ReallocAsyncCtx6 + 28 | 0; //@line 1340
    HEAP32[$323 >> 2] = $14; //@line 1341
    $324 = $ReallocAsyncCtx6 + 32 | 0; //@line 1342
    HEAP32[$324 >> 2] = $16; //@line 1343
    $325 = $ReallocAsyncCtx6 + 36 | 0; //@line 1344
    HEAP32[$325 >> 2] = $18; //@line 1345
    $326 = $ReallocAsyncCtx6 + 40 | 0; //@line 1346
    HEAP32[$326 >> 2] = $20; //@line 1347
    $327 = $ReallocAsyncCtx6 + 44 | 0; //@line 1348
    HEAP32[$327 >> 2] = $22; //@line 1349
    $328 = $ReallocAsyncCtx6 + 48 | 0; //@line 1350
    HEAP32[$328 >> 2] = $24; //@line 1351
    $329 = $ReallocAsyncCtx6 + 52 | 0; //@line 1352
    HEAP32[$329 >> 2] = $26; //@line 1353
    $330 = $ReallocAsyncCtx6 + 56 | 0; //@line 1354
    HEAP32[$330 >> 2] = $28; //@line 1355
    $331 = $ReallocAsyncCtx6 + 60 | 0; //@line 1356
    HEAP32[$331 >> 2] = $30; //@line 1357
    $332 = $ReallocAsyncCtx6 + 64 | 0; //@line 1358
    HEAP32[$332 >> 2] = $61; //@line 1359
    sp = STACKTOP; //@line 1360
    return;
   } else if ((label | 0) == 92) {
    if (($41 - $8 | 0) >= ($10 | 0)) {
     $443 = ___async_retval; //@line 1368
     HEAP32[$443 >> 2] = $22; //@line 1369
     return;
    }
    if ((HEAP8[$41 >> 0] | 0) == -1) {
     $433 = $41 + 1 | 0; //@line 1375
     HEAP32[$4 >> 2] = $433; //@line 1376
     $434 = $433; //@line 1377
     $436 = $8 - $434 + $10 | 0; //@line 1379
     HEAP16[$26 + 24 >> 1] = $436; //@line 1382
     if ($436 & 65535 | 0) {
      HEAP32[$26 + 36 >> 2] = $434; //@line 1387
      $443 = ___async_retval; //@line 1388
      HEAP32[$443 >> 2] = $22; //@line 1389
      return;
     }
    }
    HEAP32[$26 + 4 >> 2] = 1; //@line 1394
    $443 = ___async_retval; //@line 1395
    HEAP32[$443 >> 2] = $22; //@line 1396
    return;
   }
  }
 } while (0);
 HEAP32[$26 + 4 >> 2] = 1; //@line 1402
 $443 = ___async_retval; //@line 1403
 HEAP32[$443 >> 2] = $22; //@line 1404
 return;
}
function _sn_coap_builder_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$120$129$i$i = 0, $$120$129$i14$i = 0, $$120$129$i23$i = 0, $$120$129$i32$i = 0, $$120$129$i41$i = 0, $$120$129$i5$i = 0, $$120$129$i50$i = 0, $$120$129$i59$i = 0, $$120$129$i68$i = 0, $$120$232$i$i = 0, $$120$232$i16$i = 0, $$120$232$i25$i = 0, $$120$232$i34$i = 0, $$120$232$i43$i = 0, $$120$232$i52$i = 0, $$120$232$i61$i = 0, $$120$232$i7$i = 0, $$120$232$i70$i = 0, $$120$3$i$i = 0, $$120$3$i17$i = 0, $$120$3$i26$i = 0, $$120$3$i35$i = 0, $$120$3$i44$i = 0, $$120$3$i53$i = 0, $$120$3$i62$i = 0, $$120$3$i71$i = 0, $$120$3$i8$i = 0, $$12026$i$i = 0, $$12026$i12$i = 0, $$12026$i21$i = 0, $$12026$i3$i = 0, $$12026$i30$i = 0, $$12026$i39$i = 0, $$12026$i48$i = 0, $$12026$i57$i = 0, $$12026$i66$i = 0, $$sink13$i = 0, $$sink13$i70 = 0, $$sink63$i = 0, $$sink63$i69 = 0, $$sink7$i = 0, $$sink7$i106 = 0, $$sink7$i16 = 0, $$sink7$i24 = 0, $$sink7$i34 = 0, $$sink7$i44 = 0, $$sink7$i54 = 0, $$sink7$i76 = 0, $$sink7$i86 = 0, $$sink7$i96 = 0, $101 = 0, $102 = 0, $104 = 0, $105 = 0, $108 = 0, $112 = 0, $118 = 0, $120 = 0, $129 = 0, $138 = 0, $14 = 0, $143 = 0, $144 = 0, $166 = 0, $167 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $181 = 0, $185 = 0, $191 = 0, $193 = 0, $202 = 0, $211 = 0, $216 = 0, $217 = 0, $22 = 0, $239 = 0, $243 = 0, $250 = 0, $251 = 0, $253 = 0, $254 = 0, $257 = 0, $261 = 0, $267 = 0, $269 = 0, $278 = 0, $287 = 0, $292 = 0, $293 = 0, $3 = 0, $314 = 0, $317 = 0, $324 = 0, $325 = 0, $327 = 0, $328 = 0, $33 = 0, $331 = 0, $335 = 0, $341 = 0, $343 = 0, $352 = 0, $361 = 0, $366 = 0, $367 = 0, $389 = 0, $391 = 0, $393 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $403 = 0, $404 = 0, $407 = 0, $411 = 0, $417 = 0, $419 = 0, $428 = 0, $43 = 0, $437 = 0, $442 = 0, $443 = 0, $465 = 0, $468 = 0, $470 = 0, $477 = 0, $478 = 0, $480 = 0, $481 = 0, $484 = 0, $488 = 0, $494 = 0, $496 = 0, $5 = 0, $505 = 0, $514 = 0, $519 = 0, $520 = 0, $542 = 0, $543 = 0, $55 = 0, $550 = 0, $552 = 0, $553 = 0, $557 = 0, $56 = 0, $561 = 0, $567 = 0, $569 = 0, $578 = 0, $587 = 0, $59 = 0, $592 = 0, $593 = 0, $615 = 0, $62 = 0, $620 = 0, $626 = 0, $628 = 0, $629 = 0, $63 = 0, $633 = 0, $637 = 0, $64 = 0, $643 = 0, $645 = 0, $65 = 0, $654 = 0, $663 = 0, $668 = 0, $669 = 0, $68 = 0, $691 = 0, $692 = 0, $694 = 0, $696 = 0, $698 = 0, $699 = 0, $70 = 0, $704 = 0, $708 = 0, $714 = 0, $716 = 0, $72 = 0, $725 = 0, $734 = 0, $738 = 0, $743 = 0, $745 = 0, $746 = 0, $749 = 0, $754 = 0, $760 = 0, $762 = 0, $763 = 0, $767 = 0, $771 = 0, $777 = 0, $779 = 0, $78 = 0, $788 = 0, $797 = 0, $8 = 0, $802 = 0, $803 = 0, $82 = 0, $824 = 0, $827 = 0, $832 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1206
 STACKTOP = STACKTOP + 16 | 0; //@line 1207
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1207
 $3 = sp + 8 | 0; //@line 1208
 $4 = sp + 4 | 0; //@line 1209
 $5 = sp; //@line 1210
 HEAP32[$5 >> 2] = $0; //@line 1211
 $8 = $0; //@line 1215
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$1 = -2; //@line 1217
  STACKTOP = sp; //@line 1218
  return $$1 | 0; //@line 1218
 }
 $9 = _sn_coap_builder_calc_needed_packet_data_size_2($1, 0) | 0; //@line 1220
 if (!($9 << 16 >> 16)) {
  $$1 = -1; //@line 1223
  STACKTOP = sp; //@line 1224
  return $$1 | 0; //@line 1224
 }
 _memset($0 | 0, 0, $9 & 65535 | 0) | 0; //@line 1227
 if ((_sn_coap_header_validity_check($1, 64) | 0) << 24 >> 24) {
  $$1 = -1; //@line 1231
  STACKTOP = sp; //@line 1232
  return $$1 | 0; //@line 1232
 }
 $14 = HEAP8[$0 >> 0] | 0; //@line 1234
 HEAP8[$0 >> 0] = ($14 & 255) + 64; //@line 1238
 $18 = $1 + 12 | 0; //@line 1239
 $22 = (HEAP32[$18 >> 2] | 0) + ($14 + 64 & 255) | 0; //@line 1243
 HEAP8[$0 >> 0] = $22; //@line 1245
 HEAP8[$0 >> 0] = $22 + (HEAPU8[$1 >> 0] | 0); //@line 1250
 HEAP8[$0 + 1 >> 0] = HEAP32[$1 + 8 >> 2]; //@line 1255
 $33 = $1 + 20 | 0; //@line 1257
 HEAP8[$0 + 2 >> 0] = (HEAPU16[$33 >> 1] | 0) >>> 8; //@line 1261
 HEAP8[$0 + 3 >> 0] = HEAP16[$33 >> 1]; //@line 1265
 $40 = $0 + 4 | 0; //@line 1266
 HEAP32[$5 >> 2] = $40; //@line 1267
 if ((HEAP32[$18 >> 2] | 0) != 48) {
  $43 = $1 + 32 | 0; //@line 1271
  if (!(HEAP32[$43 >> 2] | 0)) {
   if (!(HEAP32[$1 + 28 >> 2] | 0)) {
    if ((HEAP32[$1 + 16 >> 2] | 0) == -1) {
     if (HEAP32[$1 + 40 >> 2] | 0) {
      label = 9; //@line 1287
     }
    } else {
     label = 9; //@line 1290
    }
   } else {
    label = 9; //@line 1293
   }
  } else {
   label = 9; //@line 1296
  }
  if ((label | 0) == 9) {
   $55 = HEAP8[$1 >> 0] | 0; //@line 1299
   $56 = $55 & 255; //@line 1300
   if (!($55 << 24 >> 24)) {
    $62 = 0; //@line 1303
   } else {
    $59 = HEAP32[$1 + 28 >> 2] | 0; //@line 1306
    if (!$59) {
     $62 = $55; //@line 1309
    } else {
     _memcpy($40 | 0, $59 | 0, $56 | 0) | 0; //@line 1311
     $62 = HEAP8[$1 >> 0] | 0; //@line 1313
    }
   }
   $63 = $40 + ($62 & 255) | 0; //@line 1317
   HEAP32[$5 >> 2] = $63; //@line 1318
   HEAP16[$4 >> 1] = 0; //@line 1319
   $64 = $1 + 40 | 0; //@line 1320
   $65 = HEAP32[$64 >> 2] | 0; //@line 1321
   if ($65 | 0) {
    $68 = HEAP16[$65 + 4 >> 1] | 0; //@line 1325
    $70 = HEAP32[$65 + 52 >> 2] | 0; //@line 1327
    if (!$70) {
     $91 = $65; //@line 1330
    } else {
     $72 = $68 & 65535; //@line 1332
     HEAP8[$63 >> 0] = (($68 & 65535) < 13 ? $68 & 65535 : ($68 & 65535) < 269 ? 13 : 14) + 48; //@line 1340
     $78 = $63 + 1 | 0; //@line 1341
     HEAP32[$5 >> 2] = $78; //@line 1342
     if (($68 + -13 & 65535) < 256) {
      $$sink13$i70 = 1; //@line 1347
      $$sink63$i69 = $72 + 243 | 0; //@line 1347
      label = 18; //@line 1348
     } else {
      if (($68 & 65535) > 268) {
       $82 = $72 + -269 | 0; //@line 1352
       HEAP8[$63 + 2 >> 0] = $82; //@line 1355
       $$sink13$i70 = 2; //@line 1357
       $$sink63$i69 = $82 >>> 8; //@line 1357
       label = 18; //@line 1358
      } else {
       $88 = $78; //@line 1360
      }
     }
     if ((label | 0) == 18) {
      HEAP8[$78 >> 0] = $$sink63$i69; //@line 1365
      $87 = $78 + $$sink13$i70 | 0; //@line 1366
      HEAP32[$5 >> 2] = $87; //@line 1367
      $88 = $87; //@line 1368
     }
     HEAP16[$4 >> 1] = 3; //@line 1370
     _memcpy($88 | 0, $70 | 0, $72 | 0) | 0; //@line 1371
     HEAP32[$5 >> 2] = $88 + $72; //@line 1373
     $91 = HEAP32[$64 >> 2] | 0; //@line 1375
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $91 + 48 | 0, $91, 4, $4); //@line 1378
    $92 = HEAP32[$64 >> 2] | 0; //@line 1379
    $94 = HEAP32[$92 + 32 >> 2] | 0; //@line 1381
    if (($94 | 0) == -1) {
     $166 = $92; //@line 1384
    } else {
     if ($94 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $94 >>> 24; //@line 1390
      $$12026$i$i = 1; //@line 1391
      label = 32; //@line 1392
     } else {
      if ($94 << 8 >>> 0 > 16777215) {
       $$12026$i$i = 0; //@line 1397
       label = 32; //@line 1398
      } else {
       if ($94 << 16 >>> 0 > 16777215) {
        $$120$129$i$i = 0; //@line 1403
        label = 34; //@line 1404
       } else {
        if ($94 << 24 >>> 0 > 16777215) {
         $$120$232$i$i = 0; //@line 1409
         label = 36; //@line 1410
        } else {
         $$120$3$i$i = 0; //@line 1412
        }
       }
      }
     }
     if ((label | 0) == 32) {
      HEAP8[$3 + ($$12026$i$i & 255) >> 0] = $94 >>> 16; //@line 1423
      $$120$129$i$i = $$12026$i$i + 1 << 24 >> 24; //@line 1424
      label = 34; //@line 1425
     }
     if ((label | 0) == 34) {
      HEAP8[$3 + ($$120$129$i$i & 255) >> 0] = $94 >>> 8; //@line 1433
      $$120$232$i$i = $$120$129$i$i + 1 << 24 >> 24; //@line 1434
      label = 36; //@line 1435
     }
     if ((label | 0) == 36) {
      HEAP8[$3 + ($$120$232$i$i & 255) >> 0] = $94; //@line 1442
      $$120$3$i$i = $$120$232$i$i + 1 << 24 >> 24; //@line 1443
     }
     $101 = $$120$3$i$i & 255; //@line 1445
     $102 = HEAP16[$4 >> 1] | 0; //@line 1446
     $104 = 6 - ($102 & 65535) | 0; //@line 1448
     $105 = $$120$3$i$i & 255; //@line 1449
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i$i & 255) < 13 ? $$120$3$i$i : 13; //@line 1453
     $108 = 6 - $102 << 16 >> 16; //@line 1454
     do {
      if (($108 & 65535) < 13) {
       $112 = HEAP32[$5 >> 2] | 0; //@line 1460
       HEAP8[$112 >> 0] = (($108 & 65535) << 4) + (HEAPU8[$112 >> 0] | 0); //@line 1465
       $$sink7$i96 = 1; //@line 1466
      } else {
       $118 = HEAP32[$5 >> 2] | 0; //@line 1469
       $120 = HEAPU8[$118 >> 0] | 0; //@line 1471
       if (($108 & 65535) < 269) {
        HEAP8[$118 >> 0] = $120 + 208; //@line 1475
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $104 + 243; //@line 1480
        $$sink7$i96 = 2; //@line 1481
        break;
       } else {
        HEAP8[$118 >> 0] = $120 + 224; //@line 1486
        $129 = $104 + 65267 | 0; //@line 1487
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $129; //@line 1491
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $129 >>> 8; //@line 1496
        $$sink7$i96 = 3; //@line 1497
        break;
       }
      }
     } while (0);
     $138 = (HEAP32[$5 >> 2] | 0) + $$sink7$i96 | 0; //@line 1503
     HEAP32[$5 >> 2] = $138; //@line 1504
     if (($101 + -13 & 65535) < 256) {
      HEAP8[$138 >> 0] = $105 + 243; //@line 1510
      $143 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1512
      HEAP32[$5 >> 2] = $143; //@line 1513
      $144 = $143; //@line 1514
     } else {
      $144 = $138; //@line 1516
     }
     HEAP16[$4 >> 1] = 6; //@line 1518
     _memcpy($144 | 0, $3 | 0, $105 | 0) | 0; //@line 1519
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $105; //@line 1522
     $166 = HEAP32[$64 >> 2] | 0; //@line 1524
    }
    $167 = HEAP32[$166 + 28 >> 2] | 0; //@line 1527
    if (($167 | 0) == -1) {
     $239 = $166; //@line 1530
    } else {
     if ($167 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $167 >>> 24; //@line 1536
      $$12026$i3$i = 1; //@line 1537
      label = 49; //@line 1538
     } else {
      if ($167 << 8 >>> 0 > 16777215) {
       $$12026$i3$i = 0; //@line 1543
       label = 49; //@line 1544
      } else {
       if ($167 << 16 >>> 0 > 16777215) {
        $$120$129$i5$i = 0; //@line 1549
        label = 51; //@line 1550
       } else {
        if ($167 << 24 >>> 0 > 16777215) {
         $$120$232$i7$i = 0; //@line 1555
         label = 53; //@line 1556
        } else {
         $$120$3$i8$i = 0; //@line 1558
        }
       }
      }
     }
     if ((label | 0) == 49) {
      HEAP8[$3 + ($$12026$i3$i & 255) >> 0] = $167 >>> 16; //@line 1569
      $$120$129$i5$i = $$12026$i3$i + 1 << 24 >> 24; //@line 1570
      label = 51; //@line 1571
     }
     if ((label | 0) == 51) {
      HEAP8[$3 + ($$120$129$i5$i & 255) >> 0] = $167 >>> 8; //@line 1579
      $$120$232$i7$i = $$120$129$i5$i + 1 << 24 >> 24; //@line 1580
      label = 53; //@line 1581
     }
     if ((label | 0) == 53) {
      HEAP8[$3 + ($$120$232$i7$i & 255) >> 0] = $167; //@line 1588
      $$120$3$i8$i = $$120$232$i7$i + 1 << 24 >> 24; //@line 1589
     }
     $174 = $$120$3$i8$i & 255; //@line 1591
     $175 = HEAP16[$4 >> 1] | 0; //@line 1592
     $177 = 7 - ($175 & 65535) | 0; //@line 1594
     $178 = $$120$3$i8$i & 255; //@line 1595
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i8$i & 255) < 13 ? $$120$3$i8$i : 13; //@line 1599
     $181 = 7 - $175 << 16 >> 16; //@line 1600
     do {
      if (($181 & 65535) < 13) {
       $185 = HEAP32[$5 >> 2] | 0; //@line 1606
       HEAP8[$185 >> 0] = (($181 & 65535) << 4) + (HEAPU8[$185 >> 0] | 0); //@line 1611
       $$sink7$i106 = 1; //@line 1612
      } else {
       $191 = HEAP32[$5 >> 2] | 0; //@line 1615
       $193 = HEAPU8[$191 >> 0] | 0; //@line 1617
       if (($181 & 65535) < 269) {
        HEAP8[$191 >> 0] = $193 + 208; //@line 1621
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $177 + 243; //@line 1626
        $$sink7$i106 = 2; //@line 1627
        break;
       } else {
        HEAP8[$191 >> 0] = $193 + 224; //@line 1632
        $202 = $177 + 65267 | 0; //@line 1633
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $202; //@line 1637
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $202 >>> 8; //@line 1642
        $$sink7$i106 = 3; //@line 1643
        break;
       }
      }
     } while (0);
     $211 = (HEAP32[$5 >> 2] | 0) + $$sink7$i106 | 0; //@line 1649
     HEAP32[$5 >> 2] = $211; //@line 1650
     if (($174 + -13 & 65535) < 256) {
      HEAP8[$211 >> 0] = $178 + 243; //@line 1656
      $216 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1658
      HEAP32[$5 >> 2] = $216; //@line 1659
      $217 = $216; //@line 1660
     } else {
      $217 = $211; //@line 1662
     }
     HEAP16[$4 >> 1] = 7; //@line 1664
     _memcpy($217 | 0, $3 | 0, $178 | 0) | 0; //@line 1665
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $178; //@line 1668
     $239 = HEAP32[$64 >> 2] | 0; //@line 1670
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $239 + 56 | 0, $239 + 6 | 0, 8, $4); //@line 1674
   }
   _sn_coap_builder_options_build_add_multiple_option($5, $43, $1 + 22 | 0, 11, $4); //@line 1677
   $243 = HEAP32[$1 + 16 >> 2] | 0; //@line 1679
   if (($243 | 0) != -1) {
    if ($243 >>> 0 > 16777215) {
     HEAP8[$3 >> 0] = $243 >>> 24; //@line 1686
     $$12026$i12$i = 1; //@line 1687
     label = 67; //@line 1688
    } else {
     if ($243 << 8 >>> 0 > 16777215) {
      $$12026$i12$i = 0; //@line 1693
      label = 67; //@line 1694
     } else {
      if ($243 << 16 >>> 0 > 16777215) {
       $$120$129$i14$i = 0; //@line 1699
       label = 69; //@line 1700
      } else {
       if ($243 << 24 >>> 0 > 16777215) {
        $$120$232$i16$i = 0; //@line 1705
        label = 71; //@line 1706
       } else {
        $$120$3$i17$i = 0; //@line 1708
       }
      }
     }
    }
    if ((label | 0) == 67) {
     HEAP8[$3 + ($$12026$i12$i & 255) >> 0] = $243 >>> 16; //@line 1719
     $$120$129$i14$i = $$12026$i12$i + 1 << 24 >> 24; //@line 1720
     label = 69; //@line 1721
    }
    if ((label | 0) == 69) {
     HEAP8[$3 + ($$120$129$i14$i & 255) >> 0] = $243 >>> 8; //@line 1729
     $$120$232$i16$i = $$120$129$i14$i + 1 << 24 >> 24; //@line 1730
     label = 71; //@line 1731
    }
    if ((label | 0) == 71) {
     HEAP8[$3 + ($$120$232$i16$i & 255) >> 0] = $243; //@line 1738
     $$120$3$i17$i = $$120$232$i16$i + 1 << 24 >> 24; //@line 1739
    }
    $250 = $$120$3$i17$i & 255; //@line 1741
    $251 = HEAP16[$4 >> 1] | 0; //@line 1742
    $253 = 12 - ($251 & 65535) | 0; //@line 1744
    $254 = $$120$3$i17$i & 255; //@line 1745
    HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i17$i & 255) < 13 ? $$120$3$i17$i : 13; //@line 1749
    $257 = 12 - $251 << 16 >> 16; //@line 1750
    do {
     if (($257 & 65535) < 13) {
      $261 = HEAP32[$5 >> 2] | 0; //@line 1756
      HEAP8[$261 >> 0] = (($257 & 65535) << 4) + (HEAPU8[$261 >> 0] | 0); //@line 1761
      $$sink7$i86 = 1; //@line 1762
     } else {
      $267 = HEAP32[$5 >> 2] | 0; //@line 1765
      $269 = HEAPU8[$267 >> 0] | 0; //@line 1767
      if (($257 & 65535) < 269) {
       HEAP8[$267 >> 0] = $269 + 208; //@line 1771
       HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $253 + 243; //@line 1776
       $$sink7$i86 = 2; //@line 1777
       break;
      } else {
       HEAP8[$267 >> 0] = $269 + 224; //@line 1782
       $278 = $253 + 65267 | 0; //@line 1783
       HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $278; //@line 1787
       HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $278 >>> 8; //@line 1792
       $$sink7$i86 = 3; //@line 1793
       break;
      }
     }
    } while (0);
    $287 = (HEAP32[$5 >> 2] | 0) + $$sink7$i86 | 0; //@line 1799
    HEAP32[$5 >> 2] = $287; //@line 1800
    if (($250 + -13 & 65535) < 256) {
     HEAP8[$287 >> 0] = $254 + 243; //@line 1806
     $292 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1808
     HEAP32[$5 >> 2] = $292; //@line 1809
     $293 = $292; //@line 1810
    } else {
     $293 = $287; //@line 1812
    }
    HEAP16[$4 >> 1] = 12; //@line 1814
    _memcpy($293 | 0, $3 | 0, $254 | 0) | 0; //@line 1815
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $254; //@line 1818
   }
   $314 = HEAP32[$64 >> 2] | 0; //@line 1820
   if ($314 | 0) {
    $317 = HEAP32[$314 + 16 >> 2] | 0; //@line 1824
    if (($317 | 0) == 60) {
     $389 = $314; //@line 1827
    } else {
     if ($317 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $317 >>> 24; //@line 1833
      $$12026$i21$i = 1; //@line 1834
      label = 85; //@line 1835
     } else {
      if ($317 << 8 >>> 0 > 16777215) {
       $$12026$i21$i = 0; //@line 1840
       label = 85; //@line 1841
      } else {
       if ($317 << 16 >>> 0 > 16777215) {
        $$120$129$i23$i = 0; //@line 1846
        label = 87; //@line 1847
       } else {
        if ($317 << 24 >>> 0 > 16777215) {
         $$120$232$i25$i = 0; //@line 1852
         label = 89; //@line 1853
        } else {
         $$120$3$i26$i = 0; //@line 1855
        }
       }
      }
     }
     if ((label | 0) == 85) {
      HEAP8[$3 + ($$12026$i21$i & 255) >> 0] = $317 >>> 16; //@line 1866
      $$120$129$i23$i = $$12026$i21$i + 1 << 24 >> 24; //@line 1867
      label = 87; //@line 1868
     }
     if ((label | 0) == 87) {
      HEAP8[$3 + ($$120$129$i23$i & 255) >> 0] = $317 >>> 8; //@line 1876
      $$120$232$i25$i = $$120$129$i23$i + 1 << 24 >> 24; //@line 1877
      label = 89; //@line 1878
     }
     if ((label | 0) == 89) {
      HEAP8[$3 + ($$120$232$i25$i & 255) >> 0] = $317; //@line 1885
      $$120$3$i26$i = $$120$232$i25$i + 1 << 24 >> 24; //@line 1886
     }
     $324 = $$120$3$i26$i & 255; //@line 1888
     $325 = HEAP16[$4 >> 1] | 0; //@line 1889
     $327 = 14 - ($325 & 65535) | 0; //@line 1891
     $328 = $$120$3$i26$i & 255; //@line 1892
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i26$i & 255) < 13 ? $$120$3$i26$i : 13; //@line 1896
     $331 = 14 - $325 << 16 >> 16; //@line 1897
     do {
      if (($331 & 65535) < 13) {
       $335 = HEAP32[$5 >> 2] | 0; //@line 1903
       HEAP8[$335 >> 0] = (($331 & 65535) << 4) + (HEAPU8[$335 >> 0] | 0); //@line 1908
       $$sink7$i76 = 1; //@line 1909
      } else {
       $341 = HEAP32[$5 >> 2] | 0; //@line 1912
       $343 = HEAPU8[$341 >> 0] | 0; //@line 1914
       if (($331 & 65535) < 269) {
        HEAP8[$341 >> 0] = $343 + 208; //@line 1918
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $327 + 243; //@line 1923
        $$sink7$i76 = 2; //@line 1924
        break;
       } else {
        HEAP8[$341 >> 0] = $343 + 224; //@line 1929
        $352 = $327 + 65267 | 0; //@line 1930
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $352; //@line 1934
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $352 >>> 8; //@line 1939
        $$sink7$i76 = 3; //@line 1940
        break;
       }
      }
     } while (0);
     $361 = (HEAP32[$5 >> 2] | 0) + $$sink7$i76 | 0; //@line 1946
     HEAP32[$5 >> 2] = $361; //@line 1947
     if (($324 + -13 & 65535) < 256) {
      HEAP8[$361 >> 0] = $328 + 243; //@line 1953
      $366 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1955
      HEAP32[$5 >> 2] = $366; //@line 1956
      $367 = $366; //@line 1957
     } else {
      $367 = $361; //@line 1959
     }
     HEAP16[$4 >> 1] = 14; //@line 1961
     _memcpy($367 | 0, $3 | 0, $328 | 0) | 0; //@line 1962
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $328; //@line 1965
     $389 = HEAP32[$64 >> 2] | 0; //@line 1967
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $389 + 64 | 0, $389 + 10 | 0, 15, $4); //@line 1971
    $391 = HEAP32[$64 >> 2] | 0; //@line 1972
    $393 = HEAP32[$391 + 12 >> 2] | 0; //@line 1974
    if (($393 | 0) == -1) {
     $465 = $391; //@line 1977
    } else {
     if ($393 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $393 >>> 24; //@line 1983
      $$12026$i30$i = 1; //@line 1984
      label = 102; //@line 1985
     } else {
      if ($393 << 8 >>> 0 > 16777215) {
       $$12026$i30$i = 0; //@line 1990
       label = 102; //@line 1991
      } else {
       if ($393 << 16 >>> 0 > 16777215) {
        $$120$129$i32$i = 0; //@line 1996
        label = 104; //@line 1997
       } else {
        if ($393 << 24 >>> 0 > 16777215) {
         $$120$232$i34$i = 0; //@line 2002
         label = 106; //@line 2003
        } else {
         $$120$3$i35$i = 0; //@line 2005
        }
       }
      }
     }
     if ((label | 0) == 102) {
      HEAP8[$3 + ($$12026$i30$i & 255) >> 0] = $393 >>> 16; //@line 2016
      $$120$129$i32$i = $$12026$i30$i + 1 << 24 >> 24; //@line 2017
      label = 104; //@line 2018
     }
     if ((label | 0) == 104) {
      HEAP8[$3 + ($$120$129$i32$i & 255) >> 0] = $393 >>> 8; //@line 2026
      $$120$232$i34$i = $$120$129$i32$i + 1 << 24 >> 24; //@line 2027
      label = 106; //@line 2028
     }
     if ((label | 0) == 106) {
      HEAP8[$3 + ($$120$232$i34$i & 255) >> 0] = $393; //@line 2035
      $$120$3$i35$i = $$120$232$i34$i + 1 << 24 >> 24; //@line 2036
     }
     $400 = $$120$3$i35$i & 255; //@line 2038
     $401 = HEAP16[$4 >> 1] | 0; //@line 2039
     $403 = 17 - ($401 & 65535) | 0; //@line 2041
     $404 = $$120$3$i35$i & 255; //@line 2042
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i35$i & 255) < 13 ? $$120$3$i35$i : 13; //@line 2046
     $407 = 17 - $401 << 16 >> 16; //@line 2047
     do {
      if (($407 & 65535) < 13) {
       $411 = HEAP32[$5 >> 2] | 0; //@line 2053
       HEAP8[$411 >> 0] = (($407 & 65535) << 4) + (HEAPU8[$411 >> 0] | 0); //@line 2058
       $$sink7$i54 = 1; //@line 2059
      } else {
       $417 = HEAP32[$5 >> 2] | 0; //@line 2062
       $419 = HEAPU8[$417 >> 0] | 0; //@line 2064
       if (($407 & 65535) < 269) {
        HEAP8[$417 >> 0] = $419 + 208; //@line 2068
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $403 + 243; //@line 2073
        $$sink7$i54 = 2; //@line 2074
        break;
       } else {
        HEAP8[$417 >> 0] = $419 + 224; //@line 2079
        $428 = $403 + 65267 | 0; //@line 2080
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $428; //@line 2084
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $428 >>> 8; //@line 2089
        $$sink7$i54 = 3; //@line 2090
        break;
       }
      }
     } while (0);
     $437 = (HEAP32[$5 >> 2] | 0) + $$sink7$i54 | 0; //@line 2096
     HEAP32[$5 >> 2] = $437; //@line 2097
     if (($400 + -13 & 65535) < 256) {
      HEAP8[$437 >> 0] = $404 + 243; //@line 2103
      $442 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2105
      HEAP32[$5 >> 2] = $442; //@line 2106
      $443 = $442; //@line 2107
     } else {
      $443 = $437; //@line 2109
     }
     HEAP16[$4 >> 1] = 17; //@line 2111
     _memcpy($443 | 0, $3 | 0, $404 | 0) | 0; //@line 2112
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $404; //@line 2115
     $465 = HEAP32[$64 >> 2] | 0; //@line 2117
    }
    if ($465 | 0) {
     _sn_coap_builder_options_build_add_multiple_option($5, $465 + 60 | 0, $465 + 8 | 0, 20, $4); //@line 2123
     $468 = HEAP32[$64 >> 2] | 0; //@line 2124
     $470 = HEAP32[$468 + 40 >> 2] | 0; //@line 2126
     if (($470 | 0) == -1) {
      $542 = $468; //@line 2129
     } else {
      do {
       if ($470 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $470 >>> 24; //@line 2136
        $$12026$i39$i = 1; //@line 2137
        label = 120; //@line 2138
       } else {
        if ($470 << 8 >>> 0 > 16777215) {
         $$12026$i39$i = 0; //@line 2143
         label = 120; //@line 2144
        } else {
         if ($470 << 16 >>> 0 > 16777215) {
          $$120$129$i41$i = 0; //@line 2149
          label = 122; //@line 2150
          break;
         }
         if ($470 << 24 >>> 0 > 16777215) {
          $$120$232$i43$i = 0; //@line 2156
          label = 124; //@line 2157
         } else {
          $$120$3$i44$i = 0; //@line 2159
         }
        }
       }
      } while (0);
      if ((label | 0) == 120) {
       HEAP8[$3 + ($$12026$i39$i & 255) >> 0] = $470 >>> 16; //@line 2170
       $$120$129$i41$i = $$12026$i39$i + 1 << 24 >> 24; //@line 2171
       label = 122; //@line 2172
      }
      if ((label | 0) == 122) {
       HEAP8[$3 + ($$120$129$i41$i & 255) >> 0] = $470 >>> 8; //@line 2180
       $$120$232$i43$i = $$120$129$i41$i + 1 << 24 >> 24; //@line 2181
       label = 124; //@line 2182
      }
      if ((label | 0) == 124) {
       HEAP8[$3 + ($$120$232$i43$i & 255) >> 0] = $470; //@line 2189
       $$120$3$i44$i = $$120$232$i43$i + 1 << 24 >> 24; //@line 2190
      }
      $477 = $$120$3$i44$i & 255; //@line 2192
      $478 = HEAP16[$4 >> 1] | 0; //@line 2193
      $480 = 23 - ($478 & 65535) | 0; //@line 2195
      $481 = $$120$3$i44$i & 255; //@line 2196
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i44$i & 255) < 13 ? $$120$3$i44$i : 13; //@line 2200
      $484 = 23 - $478 << 16 >> 16; //@line 2201
      do {
       if (($484 & 65535) < 13) {
        $488 = HEAP32[$5 >> 2] | 0; //@line 2207
        HEAP8[$488 >> 0] = (($484 & 65535) << 4) + (HEAPU8[$488 >> 0] | 0); //@line 2212
        $$sink7$i44 = 1; //@line 2213
       } else {
        $494 = HEAP32[$5 >> 2] | 0; //@line 2216
        $496 = HEAPU8[$494 >> 0] | 0; //@line 2218
        if (($484 & 65535) < 269) {
         HEAP8[$494 >> 0] = $496 + 208; //@line 2222
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $480 + 243; //@line 2227
         $$sink7$i44 = 2; //@line 2228
         break;
        } else {
         HEAP8[$494 >> 0] = $496 + 224; //@line 2233
         $505 = $480 + 65267 | 0; //@line 2234
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $505; //@line 2238
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $505 >>> 8; //@line 2243
         $$sink7$i44 = 3; //@line 2244
         break;
        }
       }
      } while (0);
      $514 = (HEAP32[$5 >> 2] | 0) + $$sink7$i44 | 0; //@line 2250
      HEAP32[$5 >> 2] = $514; //@line 2251
      if (($477 + -13 & 65535) < 256) {
       HEAP8[$514 >> 0] = $481 + 243; //@line 2257
       $519 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2259
       HEAP32[$5 >> 2] = $519; //@line 2260
       $520 = $519; //@line 2261
      } else {
       $520 = $514; //@line 2263
      }
      HEAP16[$4 >> 1] = 23; //@line 2265
      _memcpy($520 | 0, $3 | 0, $481 | 0) | 0; //@line 2266
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $481; //@line 2269
      $542 = HEAP32[$64 >> 2] | 0; //@line 2271
     }
     $543 = HEAP32[$542 + 36 >> 2] | 0; //@line 2274
     if (($543 | 0) == -1) {
      $615 = $542; //@line 2277
     } else {
      do {
       if ($543 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $543 >>> 24; //@line 2284
        $$12026$i48$i = 1; //@line 2285
        label = 137; //@line 2286
       } else {
        if ($543 << 8 >>> 0 > 16777215) {
         $$12026$i48$i = 0; //@line 2291
         label = 137; //@line 2292
         break;
        }
        if ($543 << 16 >>> 0 > 16777215) {
         $$120$129$i50$i = 0; //@line 2298
         label = 139; //@line 2299
         break;
        }
        if ($543 << 24 >>> 0 > 16777215) {
         $$120$232$i52$i = 0; //@line 2305
         label = 141; //@line 2306
        } else {
         $$120$3$i53$i = 0; //@line 2308
        }
       }
      } while (0);
      if ((label | 0) == 137) {
       HEAP8[$3 + ($$12026$i48$i & 255) >> 0] = $543 >>> 16; //@line 2318
       $$120$129$i50$i = $$12026$i48$i + 1 << 24 >> 24; //@line 2319
       label = 139; //@line 2320
      }
      if ((label | 0) == 139) {
       HEAP8[$3 + ($$120$129$i50$i & 255) >> 0] = $543 >>> 8; //@line 2328
       $$120$232$i52$i = $$120$129$i50$i + 1 << 24 >> 24; //@line 2329
       label = 141; //@line 2330
      }
      if ((label | 0) == 141) {
       HEAP8[$3 + ($$120$232$i52$i & 255) >> 0] = $543; //@line 2337
       $$120$3$i53$i = $$120$232$i52$i + 1 & 255; //@line 2339
      }
      $550 = HEAP16[$4 >> 1] | 0; //@line 2341
      $552 = 27 - ($550 & 65535) | 0; //@line 2343
      $553 = $$120$3$i53$i & 65535; //@line 2344
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i53$i & 65535) < 13 ? $$120$3$i53$i : 13; //@line 2349
      $557 = 27 - $550 << 16 >> 16; //@line 2350
      do {
       if (($557 & 65535) < 13) {
        $561 = HEAP32[$5 >> 2] | 0; //@line 2356
        HEAP8[$561 >> 0] = (($557 & 65535) << 4) + (HEAPU8[$561 >> 0] | 0); //@line 2361
        $$sink7$i34 = 1; //@line 2362
       } else {
        $567 = HEAP32[$5 >> 2] | 0; //@line 2365
        $569 = HEAPU8[$567 >> 0] | 0; //@line 2367
        if (($557 & 65535) < 269) {
         HEAP8[$567 >> 0] = $569 + 208; //@line 2371
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $552 + 243; //@line 2376
         $$sink7$i34 = 2; //@line 2377
         break;
        } else {
         HEAP8[$567 >> 0] = $569 + 224; //@line 2382
         $578 = $552 + 65267 | 0; //@line 2383
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $578; //@line 2387
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $578 >>> 8; //@line 2392
         $$sink7$i34 = 3; //@line 2393
         break;
        }
       }
      } while (0);
      $587 = (HEAP32[$5 >> 2] | 0) + $$sink7$i34 | 0; //@line 2399
      HEAP32[$5 >> 2] = $587; //@line 2400
      if (($$120$3$i53$i + -13 & 65535) < 256) {
       HEAP8[$587 >> 0] = $553 + 243; //@line 2406
       $592 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2408
       HEAP32[$5 >> 2] = $592; //@line 2409
       $593 = $592; //@line 2410
      } else {
       $593 = $587; //@line 2412
      }
      HEAP16[$4 >> 1] = 27; //@line 2414
      _memcpy($593 | 0, $3 | 0, $553 | 0) | 0; //@line 2415
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $553; //@line 2418
      $615 = HEAP32[$64 >> 2] | 0; //@line 2420
     }
     if (!(HEAP8[$615 + 1 >> 0] & 2)) {
      $691 = $615; //@line 2427
     } else {
      $620 = HEAP32[$615 + 24 >> 2] | 0; //@line 2430
      do {
       if ($620 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $620 >>> 24; //@line 2436
        $$12026$i57$i = 1; //@line 2437
        label = 154; //@line 2438
       } else {
        if ($620 << 8 >>> 0 > 16777215) {
         $$12026$i57$i = 0; //@line 2443
         label = 154; //@line 2444
         break;
        }
        if ($620 << 16 >>> 0 > 16777215) {
         $$120$129$i59$i = 0; //@line 2450
         label = 156; //@line 2451
         break;
        }
        if ($620 << 24 >>> 0 > 16777215) {
         $$120$232$i61$i = 0; //@line 2457
         label = 158; //@line 2458
        } else {
         $$120$3$i62$i = 0; //@line 2460
        }
       }
      } while (0);
      if ((label | 0) == 154) {
       HEAP8[$3 + ($$12026$i57$i & 255) >> 0] = $620 >>> 16; //@line 2470
       $$120$129$i59$i = $$12026$i57$i + 1 << 24 >> 24; //@line 2471
       label = 156; //@line 2472
      }
      if ((label | 0) == 156) {
       HEAP8[$3 + ($$120$129$i59$i & 255) >> 0] = $620 >>> 8; //@line 2480
       $$120$232$i61$i = $$120$129$i59$i + 1 << 24 >> 24; //@line 2481
       label = 158; //@line 2482
      }
      if ((label | 0) == 158) {
       HEAP8[$3 + ($$120$232$i61$i & 255) >> 0] = $620; //@line 2489
       $$120$3$i62$i = $$120$232$i61$i + 1 & 255; //@line 2491
      }
      $626 = HEAP16[$4 >> 1] | 0; //@line 2493
      $628 = 28 - ($626 & 65535) | 0; //@line 2495
      $629 = $$120$3$i62$i & 65535; //@line 2496
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i62$i & 65535) < 13 ? $$120$3$i62$i : 13; //@line 2501
      $633 = 28 - $626 << 16 >> 16; //@line 2502
      do {
       if (($633 & 65535) < 13) {
        $637 = HEAP32[$5 >> 2] | 0; //@line 2508
        HEAP8[$637 >> 0] = (($633 & 65535) << 4) + (HEAPU8[$637 >> 0] | 0); //@line 2513
        $$sink7$i24 = 1; //@line 2514
       } else {
        $643 = HEAP32[$5 >> 2] | 0; //@line 2517
        $645 = HEAPU8[$643 >> 0] | 0; //@line 2519
        if (($633 & 65535) < 269) {
         HEAP8[$643 >> 0] = $645 + 208; //@line 2523
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $628 + 243; //@line 2528
         $$sink7$i24 = 2; //@line 2529
         break;
        } else {
         HEAP8[$643 >> 0] = $645 + 224; //@line 2534
         $654 = $628 + 65267 | 0; //@line 2535
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $654; //@line 2539
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $654 >>> 8; //@line 2544
         $$sink7$i24 = 3; //@line 2545
         break;
        }
       }
      } while (0);
      $663 = (HEAP32[$5 >> 2] | 0) + $$sink7$i24 | 0; //@line 2551
      HEAP32[$5 >> 2] = $663; //@line 2552
      if (($$120$3$i62$i + -13 & 65535) < 256) {
       HEAP8[$663 >> 0] = $629 + 243; //@line 2558
       $668 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2560
       HEAP32[$5 >> 2] = $668; //@line 2561
       $669 = $668; //@line 2562
      } else {
       $669 = $663; //@line 2564
      }
      HEAP16[$4 >> 1] = 28; //@line 2566
      _memcpy($669 | 0, $3 | 0, $629 | 0) | 0; //@line 2567
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $629; //@line 2570
      $691 = HEAP32[$64 >> 2] | 0; //@line 2572
     }
     $692 = HEAP16[$691 + 2 >> 1] | 0; //@line 2575
     $694 = HEAP32[$691 + 44 >> 2] | 0; //@line 2577
     if (!$694) {
      $749 = $691; //@line 2580
     } else {
      $696 = HEAP16[$4 >> 1] | 0; //@line 2582
      $698 = 35 - ($696 & 65535) | 0; //@line 2584
      $699 = $692 & 65535; //@line 2585
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($692 & 65535) < 13 ? $692 & 255 : ($692 & 65535) < 269 ? 13 : 14; //@line 2592
      $704 = 35 - $696 << 16 >> 16; //@line 2593
      do {
       if (($704 & 65535) < 13) {
        $708 = HEAP32[$5 >> 2] | 0; //@line 2599
        HEAP8[$708 >> 0] = (($704 & 65535) << 4) + (HEAPU8[$708 >> 0] | 0); //@line 2604
        $$sink7$i16 = 1; //@line 2605
       } else {
        $714 = HEAP32[$5 >> 2] | 0; //@line 2608
        $716 = HEAPU8[$714 >> 0] | 0; //@line 2610
        if (($704 & 65535) < 269) {
         HEAP8[$714 >> 0] = $716 + 208; //@line 2614
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $698 + 243; //@line 2619
         $$sink7$i16 = 2; //@line 2620
         break;
        } else {
         HEAP8[$714 >> 0] = $716 + 224; //@line 2625
         $725 = $698 + 65267 | 0; //@line 2626
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $725; //@line 2630
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $725 >>> 8; //@line 2635
         $$sink7$i16 = 3; //@line 2636
         break;
        }
       }
      } while (0);
      $734 = (HEAP32[$5 >> 2] | 0) + $$sink7$i16 | 0; //@line 2642
      HEAP32[$5 >> 2] = $734; //@line 2643
      do {
       if (($692 + -13 & 65535) < 256) {
        $$sink13$i = 1; //@line 2649
        $$sink63$i = $699 + 243 | 0; //@line 2649
        $743 = $734; //@line 2649
        label = 169; //@line 2650
       } else {
        if (($692 & 65535) <= 268) {
         $746 = $734; //@line 2654
         break;
        }
        $738 = $699 + -269 | 0; //@line 2657
        HEAP8[$734 + 1 >> 0] = $738; //@line 2660
        $$sink13$i = 2; //@line 2663
        $$sink63$i = $738 >>> 8; //@line 2663
        $743 = HEAP32[$5 >> 2] | 0; //@line 2663
        label = 169; //@line 2664
       }
      } while (0);
      if ((label | 0) == 169) {
       HEAP8[$743 >> 0] = $$sink63$i; //@line 2669
       $745 = (HEAP32[$5 >> 2] | 0) + $$sink13$i | 0; //@line 2671
       HEAP32[$5 >> 2] = $745; //@line 2672
       $746 = $745; //@line 2673
      }
      HEAP16[$4 >> 1] = 35; //@line 2675
      _memcpy($746 | 0, $694 | 0, $699 | 0) | 0; //@line 2676
      HEAP32[$5 >> 2] = $746 + $699; //@line 2678
      $749 = HEAP32[$64 >> 2] | 0; //@line 2680
     }
     if (HEAP8[$749 + 1 >> 0] & 1) {
      $754 = HEAP32[$749 + 20 >> 2] | 0; //@line 2688
      do {
       if ($754 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $754 >>> 24; //@line 2694
        $$12026$i66$i = 1; //@line 2695
        label = 183; //@line 2696
       } else {
        if ($754 << 8 >>> 0 > 16777215) {
         $$12026$i66$i = 0; //@line 2701
         label = 183; //@line 2702
         break;
        }
        if ($754 << 16 >>> 0 > 16777215) {
         $$120$129$i68$i = 0; //@line 2708
         label = 185; //@line 2709
         break;
        }
        if ($754 << 24 >>> 0 > 16777215) {
         $$120$232$i70$i = 0; //@line 2715
         label = 187; //@line 2716
        } else {
         $$120$3$i71$i = 0; //@line 2718
        }
       }
      } while (0);
      if ((label | 0) == 183) {
       HEAP8[$3 + ($$12026$i66$i & 255) >> 0] = $754 >>> 16; //@line 2728
       $$120$129$i68$i = $$12026$i66$i + 1 << 24 >> 24; //@line 2729
       label = 185; //@line 2730
      }
      if ((label | 0) == 185) {
       HEAP8[$3 + ($$120$129$i68$i & 255) >> 0] = $754 >>> 8; //@line 2738
       $$120$232$i70$i = $$120$129$i68$i + 1 << 24 >> 24; //@line 2739
       label = 187; //@line 2740
      }
      if ((label | 0) == 187) {
       HEAP8[$3 + ($$120$232$i70$i & 255) >> 0] = $754; //@line 2747
       $$120$3$i71$i = $$120$232$i70$i + 1 & 255; //@line 2749
      }
      $760 = HEAP16[$4 >> 1] | 0; //@line 2751
      $762 = 60 - ($760 & 65535) | 0; //@line 2753
      $763 = $$120$3$i71$i & 65535; //@line 2754
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i71$i & 65535) < 13 ? $$120$3$i71$i : 13; //@line 2759
      $767 = 60 - $760 << 16 >> 16; //@line 2760
      do {
       if (($767 & 65535) < 13) {
        $771 = HEAP32[$5 >> 2] | 0; //@line 2766
        HEAP8[$771 >> 0] = (($767 & 65535) << 4) + (HEAPU8[$771 >> 0] | 0); //@line 2771
        $$sink7$i = 1; //@line 2772
       } else {
        $777 = HEAP32[$5 >> 2] | 0; //@line 2775
        $779 = HEAPU8[$777 >> 0] | 0; //@line 2777
        if (($767 & 65535) < 269) {
         HEAP8[$777 >> 0] = $779 + 208; //@line 2781
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $762 + 243; //@line 2786
         $$sink7$i = 2; //@line 2787
         break;
        } else {
         HEAP8[$777 >> 0] = $779 + 224; //@line 2792
         $788 = $762 + 65267 | 0; //@line 2793
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $788; //@line 2797
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $788 >>> 8; //@line 2802
         $$sink7$i = 3; //@line 2803
         break;
        }
       }
      } while (0);
      $797 = (HEAP32[$5 >> 2] | 0) + $$sink7$i | 0; //@line 2809
      HEAP32[$5 >> 2] = $797; //@line 2810
      if (($$120$3$i71$i + -13 & 65535) < 256) {
       HEAP8[$797 >> 0] = $763 + 243; //@line 2816
       $802 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2818
       HEAP32[$5 >> 2] = $802; //@line 2819
       $803 = $802; //@line 2820
      } else {
       $803 = $797; //@line 2822
      }
      HEAP16[$4 >> 1] = 60; //@line 2824
      _memcpy($803 | 0, $3 | 0, $763 | 0) | 0; //@line 2825
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $763; //@line 2828
     }
    }
   }
  }
  $824 = $1 + 24 | 0; //@line 2833
  if (HEAP16[$824 >> 1] | 0) {
   $827 = $1 + 36 | 0; //@line 2837
   if (HEAP32[$827 >> 2] | 0) {
    HEAP8[HEAP32[$5 >> 2] >> 0] = -1; //@line 2842
    $832 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2844
    _memcpy($832 | 0, HEAP32[$827 >> 2] | 0, HEAPU16[$824 >> 1] | 0) | 0; //@line 2848
    HEAP32[$5 >> 2] = $832 + (HEAPU16[$824 >> 1] | 0); //@line 2852
   }
  }
 }
 $$1 = (HEAP32[$5 >> 2] | 0) - $8 & 65535; //@line 2859
 STACKTOP = sp; //@line 2860
 return $$1 | 0; //@line 2860
}
function _sn_coap_parser($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$in = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $101 = 0, $113 = 0, $116 = 0, $117 = 0, $120 = 0, $121 = 0, $128 = 0, $145 = 0, $147 = 0, $153 = 0, $154 = 0, $159 = 0, $162 = 0, $165 = 0, $166 = 0, $171 = 0, $174 = 0, $178 = 0, $18 = 0, $181 = 0, $186 = 0, $187 = 0, $188 = 0, $211 = 0, $213 = 0, $231 = 0, $234 = 0, $239 = 0, $240 = 0, $241 = 0, $264 = 0, $265 = 0, $269 = 0, $289 = 0, $292 = 0, $293 = 0, $298 = 0, $301 = 0, $303 = 0, $306 = 0, $32 = 0, $324 = 0, $34 = 0, $344 = 0, $347 = 0, $348 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $381 = 0, $384 = 0, $385 = 0, $390 = 0, $393 = 0, $397 = 0, $4 = 0, $400 = 0, $401 = 0, $406 = 0, $409 = 0, $41 = 0, $413 = 0, $416 = 0, $417 = 0, $422 = 0, $425 = 0, $429 = 0, $43 = 0, $430 = 0, $435 = 0, $436 = 0, $441 = 0, $444 = 0, $450 = 0, $451 = 0, $456 = 0, $457 = 0, $46 = 0, $462 = 0, $465 = 0, $469 = 0, $470 = 0, $480 = 0, $481 = 0, $483 = 0, $49 = 0, $490 = 0, $491 = 0, $51 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $82 = 0, $9 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx7 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $171$looptemp = 0, $298$looptemp = 0, $353$looptemp = 0, $390$looptemp = 0, $406$looptemp = 0, $422$looptemp = 0, $441$looptemp = 0, $462$looptemp = 0, $159$looptemp = 0;
 sp = STACKTOP; //@line 4667
 STACKTOP = STACKTOP + 16 | 0; //@line 4668
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4668
 $4 = sp; //@line 4669
 HEAP32[$4 >> 2] = $2; //@line 4670
 if (!$2) {
  $$0 = 0; //@line 4673
  STACKTOP = sp; //@line 4674
  return $$0 | 0; //@line 4674
 }
 if (($0 | 0) == 0 | ($1 & 65535) < 4) {
  $$0 = 0; //@line 4680
  STACKTOP = sp; //@line 4681
  return $$0 | 0; //@line 4681
 }
 $8 = HEAP32[$0 >> 2] | 0; //@line 4683
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 4684
 $9 = FUNCTION_TABLE_ii[$8 & 15](44) | 0; //@line 4685
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 48; //@line 4688
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4690
  HEAP16[$AsyncCtx + 8 >> 1] = $1; //@line 4692
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 4694
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 4696
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 4698
  HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 4700
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 4702
  sp = STACKTOP; //@line 4703
  STACKTOP = sp; //@line 4704
  return 0; //@line 4704
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4706
 if (!$9) {
  $$0 = 0; //@line 4709
  STACKTOP = sp; //@line 4710
  return $$0 | 0; //@line 4710
 }
 dest = $9; //@line 4712
 stop = dest + 44 | 0; //@line 4712
 do {
  HEAP32[dest >> 2] = 0; //@line 4712
  dest = dest + 4 | 0; //@line 4712
 } while ((dest | 0) < (stop | 0));
 $18 = $9 + 16 | 0; //@line 4713
 HEAP32[$18 >> 2] = -1; //@line 4714
 HEAP32[$3 >> 2] = HEAP8[$2 >> 0] & -64 & 255; //@line 4718
 HEAP32[$9 + 12 >> 2] = HEAP8[$2 >> 0] & 48; //@line 4723
 HEAP32[$9 + 8 >> 2] = HEAPU8[$2 + 1 >> 0]; //@line 4728
 $32 = HEAP8[$2 + 3 >> 0] | 0; //@line 4731
 $34 = $9 + 20 | 0; //@line 4733
 HEAP16[$34 >> 1] = $32 & 255; //@line 4734
 HEAP16[$34 >> 1] = HEAPU8[$2 + 2 >> 0] << 8 | $32 & 255; //@line 4741
 $41 = $2 + 4 | 0; //@line 4742
 HEAP32[$4 >> 2] = $41; //@line 4743
 $43 = HEAP8[$2 >> 0] & 15; //@line 4745
 HEAP8[$9 >> 0] = $43; //@line 4746
 if (!($43 << 24 >> 24)) {
  $$in = $41; //@line 4749
  label = 13; //@line 4750
 } else {
  if (($43 & 255) <= 8) {
   $46 = $9 + 28 | 0; //@line 4754
   if (!(HEAP32[$46 >> 2] | 0)) {
    $49 = HEAP32[$0 >> 2] | 0; //@line 4758
    $AsyncCtx3 = _emscripten_alloc_async_context(48, sp) | 0; //@line 4760
    $51 = FUNCTION_TABLE_ii[$49 & 15]($43 & 255) | 0; //@line 4761
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 49; //@line 4764
     HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 4766
     HEAP32[$AsyncCtx3 + 8 >> 2] = $41; //@line 4768
     HEAP32[$AsyncCtx3 + 12 >> 2] = $4; //@line 4770
     HEAP16[$AsyncCtx3 + 16 >> 1] = $1; //@line 4772
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 4774
     HEAP32[$AsyncCtx3 + 24 >> 2] = $46; //@line 4776
     HEAP32[$AsyncCtx3 + 28 >> 2] = $0; //@line 4778
     HEAP32[$AsyncCtx3 + 32 >> 2] = $0; //@line 4780
     HEAP32[$AsyncCtx3 + 36 >> 2] = $9; //@line 4782
     HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 4784
     HEAP32[$AsyncCtx3 + 44 >> 2] = $18; //@line 4786
     sp = STACKTOP; //@line 4787
     STACKTOP = sp; //@line 4788
     return 0; //@line 4788
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4790
    HEAP32[$46 >> 2] = $51; //@line 4791
    if ($51 | 0) {
     _memcpy($51 | 0, $41 | 0, HEAPU8[$9 >> 0] | 0) | 0; //@line 4796
     $68 = $41 + (HEAPU8[$9 >> 0] | 0) | 0; //@line 4799
     HEAP32[$4 >> 2] = $68; //@line 4800
     $$in = $68; //@line 4801
     label = 13; //@line 4802
    }
   }
  }
 }
 L21 : do {
  if ((label | 0) == 13) {
   $69 = $$in; //@line 4809
   $70 = $1 & 65535; //@line 4810
   $71 = $2; //@line 4811
   $72 = $71 + $70 | 0; //@line 4812
   $74 = $9 + 40 | 0; //@line 4814
   $75 = $9 + 32 | 0; //@line 4815
   $76 = $9 + 22 | 0; //@line 4816
   $$0208$i = 0; //@line 4817
   $$sink275$i = $72 - $69 | 0; //@line 4817
   $490 = $69; //@line 4817
   $79 = $$in; //@line 4817
   L23 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 105; //@line 4822
     break;
    }
    $trunc277$i = HEAP8[$79 >> 0] | 0; //@line 4825
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 105; //@line 4828
     break;
    }
    $82 = $trunc277$i & 15; //@line 4832
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 4833
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L21;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$79 + 1 >> 0] | 0; //@line 4845
      $$sink214$i = 13; //@line 4845
      $$sink3$i = 1; //@line 4845
      label = 19; //@line 4846
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$79 + 1 >> 0] << 8) + 269 | 0; //@line 4858
      $$sink214$i = HEAPU8[$79 + 2 >> 0] | 0; //@line 4858
      $$sink3$i = 2; //@line 4858
      label = 19; //@line 4859
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 4863
      $101 = $79; //@line 4863
      $491 = $490; //@line 4863
     }
    }
    if ((label | 0) == 19) {
     label = 0; //@line 4867
     $96 = $79 + $$sink3$i | 0; //@line 4869
     HEAP32[$4 >> 2] = $96; //@line 4870
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 4872
     $101 = $96; //@line 4872
     $491 = $96; //@line 4872
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 4875
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L21;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$101 + 1 >> 0] | 0; //@line 4886
      $$sink216$i = 13; //@line 4886
      $$sink8$i = 1; //@line 4886
      label = 23; //@line 4887
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$101 + 1 >> 0] << 8) + 269 | 0; //@line 4899
      $$sink216$i = HEAPU8[$101 + 2 >> 0] | 0; //@line 4899
      $$sink8$i = 2; //@line 4899
      label = 23; //@line 4900
      break;
     }
    default:
     {
      $$1202$in$i = $82; //@line 4904
      $116 = $491; //@line 4904
      $128 = $101; //@line 4904
     }
    }
    if ((label | 0) == 23) {
     label = 0; //@line 4908
     $113 = $101 + $$sink8$i | 0; //@line 4910
     HEAP32[$4 >> 2] = $113; //@line 4911
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 4913
     $116 = $113; //@line 4913
     $128 = $113; //@line 4913
    }
    $$1202$i = $$1202$in$i & 65535; //@line 4915
    $117 = $72 - $116 & 65535; //@line 4917
    $trunc$i = $$0208$i & 65535; //@line 4918
    L39 : do {
     switch ($trunc$i << 16 >> 16) {
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$74 >> 2] | 0)) {
        $120 = HEAP32[$0 >> 2] | 0; //@line 4925
        $AsyncCtx7 = _emscripten_alloc_async_context(88, sp) | 0; //@line 4926
        $121 = FUNCTION_TABLE_ii[$120 & 15](68) | 0; //@line 4927
        if (___async) {
         label = 27; //@line 4930
         break L23;
        }
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4933
        HEAP32[$74 >> 2] = $121; //@line 4934
        if (!$121) {
         break L21;
        }
        dest = $121; //@line 4939
        stop = dest + 68 | 0; //@line 4939
        do {
         HEAP32[dest >> 2] = 0; //@line 4939
         dest = dest + 4 | 0; //@line 4939
        } while ((dest | 0) < (stop | 0));
        $145 = HEAP32[$74 >> 2] | 0; //@line 4940
        HEAP32[$145 + 16 >> 2] = 60; //@line 4942
        $147 = $145 + 28 | 0; //@line 4943
        HEAP32[$145 + 12 >> 2] = -1; //@line 4945
        HEAP32[$147 >> 2] = -1; //@line 4946
        HEAP32[$147 + 4 >> 2] = -1; //@line 4946
        HEAP32[$147 + 8 >> 2] = -1; //@line 4946
        HEAP32[$147 + 12 >> 2] = -1; //@line 4946
        if (!$145) {
         break L21;
        }
       }
       do {
        switch ($trunc$i << 16 >> 16) {
        case 12:
         {
          label = 31; //@line 4955
          break L39;
          break;
         }
        case 11:
         {
          label = 67; //@line 4960
          break L39;
          break;
         }
        case 14:
         {
          if (($$1202$i & 65535) > 4) {
           break L21;
          }
          $165 = $128 + 1 | 0; //@line 4969
          HEAP32[$4 >> 2] = $165; //@line 4970
          $166 = $$1202$in$i & 255; //@line 4971
          if (!($166 << 24 >> 24)) {
           $$0$lcssa$i258$i = 0; //@line 4974
          } else {
           $$045$i256$i = $166; //@line 4976
           $$06$i255$i = 0; //@line 4976
           $171 = $165; //@line 4976
           while (1) {
            $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 4978
            $171$looptemp = $171;
            $171 = $171 + 1 | 0; //@line 4980
            HEAP32[$4 >> 2] = $171; //@line 4981
            $174 = $$06$i255$i << 8 | HEAPU8[$171$looptemp >> 0]; //@line 4984
            if (!($$045$i256$i << 24 >> 24)) {
             $$0$lcssa$i258$i = $174; //@line 4987
             break;
            } else {
             $$06$i255$i = $174; //@line 4990
            }
           }
          }
          HEAP32[(HEAP32[$74 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 4996
          break L39;
          break;
         }
        case 35:
         {
          $178 = $$1202$in$i & 65535; //@line 5001
          if (($$1202$i + -1 & 65535) > 1033) {
           break L21;
          }
          $181 = HEAP32[$74 >> 2] | 0; //@line 5007
          if (HEAP32[$181 + 44 >> 2] | 0) {
           break L21;
          }
          HEAP16[$181 + 2 >> 1] = $$1202$i; //@line 5015
          $186 = $128 + 1 | 0; //@line 5016
          HEAP32[$4 >> 2] = $186; //@line 5017
          $187 = HEAP32[$0 >> 2] | 0; //@line 5018
          $AsyncCtx11 = _emscripten_alloc_async_context(76, sp) | 0; //@line 5019
          $188 = FUNCTION_TABLE_ii[$187 & 15]($$1202$i) | 0; //@line 5020
          if (___async) {
           label = 43; //@line 5023
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5026
          HEAP32[(HEAP32[$74 >> 2] | 0) + 44 >> 2] = $188; //@line 5029
          if (!$188) {
           break L21;
          }
          _memcpy($188 | 0, $186 | 0, $178 | 0) | 0; //@line 5034
          HEAP32[$4 >> 2] = $186 + $178; //@line 5036
          break L39;
          break;
         }
        case 4:
         {
          $211 = HEAP32[$74 >> 2] | 0; //@line 5041
          $AsyncCtx35 = _emscripten_alloc_async_context(68, sp) | 0; //@line 5043
          $213 = _sn_coap_parser_options_parse_multiple_options($0, $4, $117, $211 + 48 | 0, $211, 4, $$1202$i) | 0; //@line 5044
          if (___async) {
           label = 47; //@line 5047
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5050
          if ($213 << 24 >> 24 > -1) {
           break L39;
          } else {
           break L21;
          }
          break;
         }
        case 3:
         {
          $231 = $$1202$in$i & 65535; //@line 5060
          if (($$1202$i + -1 & 65535) > 254) {
           break L21;
          }
          $234 = HEAP32[$74 >> 2] | 0; //@line 5066
          if (HEAP32[$234 + 52 >> 2] | 0) {
           break L21;
          }
          HEAP16[$234 + 4 >> 1] = $$1202$i; //@line 5074
          $239 = $128 + 1 | 0; //@line 5075
          HEAP32[$4 >> 2] = $239; //@line 5076
          $240 = HEAP32[$0 >> 2] | 0; //@line 5077
          $AsyncCtx15 = _emscripten_alloc_async_context(76, sp) | 0; //@line 5078
          $241 = FUNCTION_TABLE_ii[$240 & 15]($$1202$i) | 0; //@line 5079
          if (___async) {
           label = 52; //@line 5082
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5085
          HEAP32[(HEAP32[$74 >> 2] | 0) + 52 >> 2] = $241; //@line 5088
          if (!$241) {
           break L21;
          }
          _memcpy($241 | 0, $239 | 0, $231 | 0) | 0; //@line 5093
          HEAP32[$4 >> 2] = $239 + $231; //@line 5095
          break L39;
          break;
         }
        case 8:
         {
          $264 = HEAP32[$74 >> 2] | 0; //@line 5100
          $265 = $264 + 56 | 0; //@line 5101
          if (HEAP32[$265 >> 2] | 0) {
           break L21;
          }
          $AsyncCtx31 = _emscripten_alloc_async_context(68, sp) | 0; //@line 5108
          $269 = _sn_coap_parser_options_parse_multiple_options($0, $4, $117, $265, $264 + 6 | 0, 8, $$1202$i) | 0; //@line 5109
          if (___async) {
           label = 57; //@line 5112
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5115
          if ($269 << 24 >> 24 > -1) {
           break L39;
          } else {
           break L21;
          }
          break;
         }
        case 7:
         {
          if (($$1202$i & 65535) > 2) {
           break L21;
          }
          $289 = (HEAP32[$74 >> 2] | 0) + 28 | 0; //@line 5130
          if ((HEAP32[$289 >> 2] | 0) != -1) {
           break L21;
          }
          $292 = $128 + 1 | 0; //@line 5136
          HEAP32[$4 >> 2] = $292; //@line 5137
          $293 = $$1202$in$i & 255; //@line 5138
          if (!($293 << 24 >> 24)) {
           $$0$lcssa$i272$i = 0; //@line 5141
          } else {
           $$045$i270$i = $293; //@line 5143
           $$06$i269$i = 0; //@line 5143
           $298 = $292; //@line 5143
           while (1) {
            $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 5145
            $298$looptemp = $298;
            $298 = $298 + 1 | 0; //@line 5147
            HEAP32[$4 >> 2] = $298; //@line 5148
            $301 = $$06$i269$i << 8 | HEAPU8[$298$looptemp >> 0]; //@line 5151
            if (!($$045$i270$i << 24 >> 24)) {
             $$0$lcssa$i272$i = $301; //@line 5154
             break;
            } else {
             $$06$i269$i = $301; //@line 5157
            }
           }
          }
          HEAP32[$289 >> 2] = $$0$lcssa$i272$i; //@line 5161
          break L39;
          break;
         }
        case 20:
         {
          $303 = HEAP32[$74 >> 2] | 0; //@line 5166
          $AsyncCtx27 = _emscripten_alloc_async_context(68, sp) | 0; //@line 5169
          $306 = _sn_coap_parser_options_parse_multiple_options($0, $4, $117, $303 + 60 | 0, $303 + 8 | 0, 20, $$1202$i) | 0; //@line 5170
          if (___async) {
           label = 65; //@line 5173
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx27 | 0); //@line 5176
          if ($306 << 24 >> 24 > -1) {
           break L39;
          } else {
           break L21;
          }
          break;
         }
        case 6:
         {
          if (($$1202$i & 65535) > 2) {
           break L21;
          }
          $344 = (HEAP32[$74 >> 2] | 0) + 32 | 0; //@line 5191
          if ((HEAP32[$344 >> 2] | 0) != -1) {
           break L21;
          }
          $347 = $128 + 1 | 0; //@line 5197
          HEAP32[$4 >> 2] = $347; //@line 5198
          $348 = $$1202$in$i & 255; //@line 5199
          if (!($348 << 24 >> 24)) {
           $$0$lcssa$i265$i = 0; //@line 5202
          } else {
           $$045$i263$i = $348; //@line 5204
           $$06$i262$i = 0; //@line 5204
           $353 = $347; //@line 5204
           while (1) {
            $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 5206
            $353$looptemp = $353;
            $353 = $353 + 1 | 0; //@line 5208
            HEAP32[$4 >> 2] = $353; //@line 5209
            $356 = $$06$i262$i << 8 | HEAPU8[$353$looptemp >> 0]; //@line 5212
            if (!($$045$i263$i << 24 >> 24)) {
             $$0$lcssa$i265$i = $356; //@line 5215
             break;
            } else {
             $$06$i262$i = $356; //@line 5218
            }
           }
          }
          HEAP32[$344 >> 2] = $$0$lcssa$i265$i; //@line 5222
          break L39;
          break;
         }
        case 15:
         {
          $358 = HEAP32[$74 >> 2] | 0; //@line 5227
          $AsyncCtx19 = _emscripten_alloc_async_context(68, sp) | 0; //@line 5230
          $361 = _sn_coap_parser_options_parse_multiple_options($0, $4, $117, $358 + 64 | 0, $358 + 10 | 0, 15, $$1202$i) | 0; //@line 5231
          if (___async) {
           label = 76; //@line 5234
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5237
          if ($361 << 24 >> 24 > -1) {
           break L39;
          } else {
           break L21;
          }
          break;
         }
        case 23:
         {
          if (($$1202$i & 65535) > 3) {
           break L21;
          }
          $381 = (HEAP32[$74 >> 2] | 0) + 40 | 0; //@line 5252
          if ((HEAP32[$381 >> 2] | 0) != -1) {
           break L21;
          }
          $384 = $128 + 1 | 0; //@line 5258
          HEAP32[$4 >> 2] = $384; //@line 5259
          $385 = $$1202$in$i & 255; //@line 5260
          if (!($385 << 24 >> 24)) {
           $$0$lcssa$i251$i = 0; //@line 5263
          } else {
           $$045$i249$i = $385; //@line 5265
           $$06$i248$i = 0; //@line 5265
           $390 = $384; //@line 5265
           while (1) {
            $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 5267
            $390$looptemp = $390;
            $390 = $390 + 1 | 0; //@line 5269
            HEAP32[$4 >> 2] = $390; //@line 5270
            $393 = $$06$i248$i << 8 | HEAPU8[$390$looptemp >> 0]; //@line 5273
            if (!($$045$i249$i << 24 >> 24)) {
             $$0$lcssa$i251$i = $393; //@line 5276
             break;
            } else {
             $$06$i248$i = $393; //@line 5279
            }
           }
          }
          HEAP32[$381 >> 2] = $$0$lcssa$i251$i; //@line 5283
          break L39;
          break;
         }
        case 27:
         {
          if (($$1202$i & 65535) > 3) {
           break L21;
          }
          $397 = (HEAP32[$74 >> 2] | 0) + 36 | 0; //@line 5293
          if ((HEAP32[$397 >> 2] | 0) != -1) {
           break L21;
          }
          $400 = $128 + 1 | 0; //@line 5299
          HEAP32[$4 >> 2] = $400; //@line 5300
          $401 = $$1202$in$i & 255; //@line 5301
          if (!($401 << 24 >> 24)) {
           $$0$lcssa$i244$i = 0; //@line 5304
          } else {
           $$045$i242$i = $401; //@line 5306
           $$06$i241$i = 0; //@line 5306
           $406 = $400; //@line 5306
           while (1) {
            $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 5308
            $406$looptemp = $406;
            $406 = $406 + 1 | 0; //@line 5310
            HEAP32[$4 >> 2] = $406; //@line 5311
            $409 = $$06$i241$i << 8 | HEAPU8[$406$looptemp >> 0]; //@line 5314
            if (!($$045$i242$i << 24 >> 24)) {
             $$0$lcssa$i244$i = $409; //@line 5317
             break;
            } else {
             $$06$i241$i = $409; //@line 5320
            }
           }
          }
          HEAP32[$397 >> 2] = $$0$lcssa$i244$i; //@line 5324
          break L39;
          break;
         }
        case 17:
         {
          if (($$1202$i & 65535) > 2) {
           break L21;
          }
          $413 = (HEAP32[$74 >> 2] | 0) + 12 | 0; //@line 5334
          if ((HEAP32[$413 >> 2] | 0) != -1) {
           break L21;
          }
          $416 = $128 + 1 | 0; //@line 5340
          HEAP32[$4 >> 2] = $416; //@line 5341
          $417 = $$1202$in$i & 255; //@line 5342
          if (!($417 << 24 >> 24)) {
           $$0$lcssa$i237$i = 0; //@line 5345
          } else {
           $$045$i235$i = $417; //@line 5347
           $$06$i234$i = 0; //@line 5347
           $422 = $416; //@line 5347
           while (1) {
            $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 5349
            $422$looptemp = $422;
            $422 = $422 + 1 | 0; //@line 5351
            HEAP32[$4 >> 2] = $422; //@line 5352
            $425 = $$06$i234$i << 8 | HEAPU8[$422$looptemp >> 0]; //@line 5355
            if (!($$045$i235$i << 24 >> 24)) {
             $$0$lcssa$i237$i = $425; //@line 5358
             break;
            } else {
             $$06$i234$i = $425; //@line 5361
            }
           }
          }
          HEAP32[$413 >> 2] = $$0$lcssa$i237$i; //@line 5365
          break L39;
          break;
         }
        case 60:
         {
          if (($$1202$i & 65535) > 4) {
           break L21;
          }
          $429 = (HEAP32[$74 >> 2] | 0) + 1 | 0; //@line 5375
          $430 = HEAP8[$429 >> 0] | 0; //@line 5376
          if ($430 & 1) {
           break L21;
          }
          HEAP8[$429 >> 0] = $430 | 1; //@line 5383
          $435 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 5385
          HEAP32[$4 >> 2] = $435; //@line 5386
          $436 = $$1202$in$i & 255; //@line 5387
          if (!($436 << 24 >> 24)) {
           $$0$lcssa$i230$i = 0; //@line 5390
          } else {
           $$045$i228$i = $436; //@line 5392
           $$06$i227$i = 0; //@line 5392
           $441 = $435; //@line 5392
           while (1) {
            $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 5394
            $441$looptemp = $441;
            $441 = $441 + 1 | 0; //@line 5396
            HEAP32[$4 >> 2] = $441; //@line 5397
            $444 = $$06$i227$i << 8 | HEAPU8[$441$looptemp >> 0]; //@line 5400
            if (!($$045$i228$i << 24 >> 24)) {
             $$0$lcssa$i230$i = $444; //@line 5403
             break;
            } else {
             $$06$i227$i = $444; //@line 5406
            }
           }
          }
          HEAP32[(HEAP32[$74 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 5412
          break L39;
          break;
         }
        case 28:
         {
          if (($$1202$i & 65535) > 4) {
           break L21;
          }
          $450 = (HEAP32[$74 >> 2] | 0) + 1 | 0; //@line 5422
          $451 = HEAP8[$450 >> 0] | 0; //@line 5423
          if ($451 & 2) {
           break L21;
          }
          HEAP8[$450 >> 0] = $451 | 2; //@line 5430
          $456 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 5432
          HEAP32[$4 >> 2] = $456; //@line 5433
          $457 = $$1202$in$i & 255; //@line 5434
          if (!($457 << 24 >> 24)) {
           $$0$lcssa$i223$i = 0; //@line 5437
          } else {
           $$045$i221$i = $457; //@line 5439
           $$06$i220$i = 0; //@line 5439
           $462 = $456; //@line 5439
           while (1) {
            $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 5441
            $462$looptemp = $462;
            $462 = $462 + 1 | 0; //@line 5443
            HEAP32[$4 >> 2] = $462; //@line 5444
            $465 = $$06$i220$i << 8 | HEAPU8[$462$looptemp >> 0]; //@line 5447
            if (!($$045$i221$i << 24 >> 24)) {
             $$0$lcssa$i223$i = $465; //@line 5450
             break;
            } else {
             $$06$i220$i = $465; //@line 5453
            }
           }
          }
          HEAP32[(HEAP32[$74 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 5459
          break L39;
          break;
         }
        default:
         {
          break L21;
         }
        }
       } while (0);
       break;
      }
     case 12:
      {
       label = 31; //@line 5471
       break;
      }
     case 11:
      {
       label = 67; //@line 5475
       break;
      }
     default:
      {
       break L21;
      }
     }
    } while (0);
    if ((label | 0) == 31) {
     label = 0; //@line 5484
     if (($$1202$i & 65535) > 2) {
      break L21;
     }
     if ((HEAP32[$18 >> 2] | 0) != -1) {
      break L21;
     }
     $153 = $128 + 1 | 0; //@line 5494
     HEAP32[$4 >> 2] = $153; //@line 5495
     $154 = $$1202$in$i & 255; //@line 5496
     if (!($154 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 5499
     } else {
      $$045$i$i = $154; //@line 5501
      $$06$i$i = 0; //@line 5501
      $159 = $153; //@line 5501
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 5503
       $159$looptemp = $159;
       $159 = $159 + 1 | 0; //@line 5505
       HEAP32[$4 >> 2] = $159; //@line 5506
       $162 = $$06$i$i << 8 | HEAPU8[$159$looptemp >> 0]; //@line 5509
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $162; //@line 5512
        break;
       } else {
        $$06$i$i = $162; //@line 5515
       }
      }
     }
     HEAP32[$18 >> 2] = $$0$lcssa$i$i; //@line 5519
    } else if ((label | 0) == 67) {
     label = 0; //@line 5522
     $AsyncCtx23 = _emscripten_alloc_async_context(68, sp) | 0; //@line 5523
     $324 = _sn_coap_parser_options_parse_multiple_options($0, $4, $117, $75, $76, 11, $$1202$i) | 0; //@line 5524
     if (___async) {
      label = 68; //@line 5527
      break;
     }
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5530
     if ($324 << 24 >> 24 <= -1) {
      break L21;
     }
    }
    $469 = HEAP32[$4 >> 2] | 0; //@line 5536
    $470 = $469 - $71 | 0; //@line 5537
    if (($470 | 0) > ($70 | 0)) {
     break L21;
    } else {
     $$sink275$i = $70 - $470 | 0; //@line 5544
     $490 = $469; //@line 5544
     $79 = $469; //@line 5544
    }
   }
   if ((label | 0) == 27) {
    HEAP32[$AsyncCtx7 >> 2] = 50; //@line 5548
    HEAP32[$AsyncCtx7 + 4 >> 2] = $74; //@line 5550
    HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 5552
    HEAP32[$AsyncCtx7 + 12 >> 2] = $$1202$in$i; //@line 5554
    HEAP32[$AsyncCtx7 + 16 >> 2] = $$0208$i; //@line 5556
    HEAP16[$AsyncCtx7 + 20 >> 1] = $$1202$i; //@line 5558
    HEAP32[$AsyncCtx7 + 24 >> 2] = $128; //@line 5560
    HEAP32[$AsyncCtx7 + 28 >> 2] = $4; //@line 5562
    HEAP32[$AsyncCtx7 + 32 >> 2] = $71; //@line 5564
    HEAP32[$AsyncCtx7 + 36 >> 2] = $70; //@line 5566
    HEAP32[$AsyncCtx7 + 40 >> 2] = $74; //@line 5568
    HEAP32[$AsyncCtx7 + 44 >> 2] = $0; //@line 5570
    HEAP16[$AsyncCtx7 + 48 >> 1] = $117; //@line 5572
    HEAP32[$AsyncCtx7 + 52 >> 2] = $0; //@line 5574
    HEAP32[$AsyncCtx7 + 56 >> 2] = $75; //@line 5576
    HEAP32[$AsyncCtx7 + 60 >> 2] = $76; //@line 5578
    HEAP16[$AsyncCtx7 + 64 >> 1] = $trunc$i; //@line 5580
    HEAP32[$AsyncCtx7 + 68 >> 2] = $9; //@line 5582
    HEAP32[$AsyncCtx7 + 72 >> 2] = $4; //@line 5584
    HEAP32[$AsyncCtx7 + 76 >> 2] = $9; //@line 5586
    HEAP32[$AsyncCtx7 + 80 >> 2] = $18; //@line 5588
    HEAP32[$AsyncCtx7 + 84 >> 2] = $72; //@line 5590
    sp = STACKTOP; //@line 5591
    STACKTOP = sp; //@line 5592
    return 0; //@line 5592
   } else if ((label | 0) == 43) {
    HEAP32[$AsyncCtx11 >> 2] = 51; //@line 5595
    HEAP32[$AsyncCtx11 + 4 >> 2] = $74; //@line 5597
    HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 5599
    HEAP32[$AsyncCtx11 + 12 >> 2] = $4; //@line 5601
    HEAP32[$AsyncCtx11 + 16 >> 2] = $71; //@line 5603
    HEAP32[$AsyncCtx11 + 20 >> 2] = $70; //@line 5605
    HEAP32[$AsyncCtx11 + 24 >> 2] = $74; //@line 5607
    HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 5609
    HEAP32[$AsyncCtx11 + 32 >> 2] = $0; //@line 5611
    HEAP32[$AsyncCtx11 + 36 >> 2] = $75; //@line 5613
    HEAP32[$AsyncCtx11 + 40 >> 2] = $76; //@line 5615
    HEAP32[$AsyncCtx11 + 44 >> 2] = $9; //@line 5617
    HEAP32[$AsyncCtx11 + 48 >> 2] = $4; //@line 5619
    HEAP32[$AsyncCtx11 + 52 >> 2] = $9; //@line 5621
    HEAP32[$AsyncCtx11 + 56 >> 2] = $18; //@line 5623
    HEAP32[$AsyncCtx11 + 60 >> 2] = $72; //@line 5625
    HEAP32[$AsyncCtx11 + 64 >> 2] = $$0208$i; //@line 5627
    HEAP32[$AsyncCtx11 + 68 >> 2] = $186; //@line 5629
    HEAP32[$AsyncCtx11 + 72 >> 2] = $178; //@line 5631
    sp = STACKTOP; //@line 5632
    STACKTOP = sp; //@line 5633
    return 0; //@line 5633
   } else if ((label | 0) == 47) {
    HEAP32[$AsyncCtx35 >> 2] = 52; //@line 5636
    HEAP32[$AsyncCtx35 + 4 >> 2] = $74; //@line 5638
    HEAP32[$AsyncCtx35 + 8 >> 2] = $4; //@line 5640
    HEAP32[$AsyncCtx35 + 12 >> 2] = $4; //@line 5642
    HEAP32[$AsyncCtx35 + 16 >> 2] = $71; //@line 5644
    HEAP32[$AsyncCtx35 + 20 >> 2] = $70; //@line 5646
    HEAP32[$AsyncCtx35 + 24 >> 2] = $74; //@line 5648
    HEAP32[$AsyncCtx35 + 28 >> 2] = $0; //@line 5650
    HEAP32[$AsyncCtx35 + 32 >> 2] = $0; //@line 5652
    HEAP32[$AsyncCtx35 + 36 >> 2] = $75; //@line 5654
    HEAP32[$AsyncCtx35 + 40 >> 2] = $76; //@line 5656
    HEAP32[$AsyncCtx35 + 44 >> 2] = $9; //@line 5658
    HEAP32[$AsyncCtx35 + 48 >> 2] = $4; //@line 5660
    HEAP32[$AsyncCtx35 + 52 >> 2] = $9; //@line 5662
    HEAP32[$AsyncCtx35 + 56 >> 2] = $18; //@line 5664
    HEAP32[$AsyncCtx35 + 60 >> 2] = $72; //@line 5666
    HEAP32[$AsyncCtx35 + 64 >> 2] = $$0208$i; //@line 5668
    sp = STACKTOP; //@line 5669
    STACKTOP = sp; //@line 5670
    return 0; //@line 5670
   } else if ((label | 0) == 52) {
    HEAP32[$AsyncCtx15 >> 2] = 53; //@line 5673
    HEAP32[$AsyncCtx15 + 4 >> 2] = $74; //@line 5675
    HEAP32[$AsyncCtx15 + 8 >> 2] = $4; //@line 5677
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 5679
    HEAP32[$AsyncCtx15 + 16 >> 2] = $71; //@line 5681
    HEAP32[$AsyncCtx15 + 20 >> 2] = $70; //@line 5683
    HEAP32[$AsyncCtx15 + 24 >> 2] = $74; //@line 5685
    HEAP32[$AsyncCtx15 + 28 >> 2] = $0; //@line 5687
    HEAP32[$AsyncCtx15 + 32 >> 2] = $0; //@line 5689
    HEAP32[$AsyncCtx15 + 36 >> 2] = $75; //@line 5691
    HEAP32[$AsyncCtx15 + 40 >> 2] = $76; //@line 5693
    HEAP32[$AsyncCtx15 + 44 >> 2] = $9; //@line 5695
    HEAP32[$AsyncCtx15 + 48 >> 2] = $4; //@line 5697
    HEAP32[$AsyncCtx15 + 52 >> 2] = $9; //@line 5699
    HEAP32[$AsyncCtx15 + 56 >> 2] = $18; //@line 5701
    HEAP32[$AsyncCtx15 + 60 >> 2] = $72; //@line 5703
    HEAP32[$AsyncCtx15 + 64 >> 2] = $$0208$i; //@line 5705
    HEAP32[$AsyncCtx15 + 68 >> 2] = $239; //@line 5707
    HEAP32[$AsyncCtx15 + 72 >> 2] = $231; //@line 5709
    sp = STACKTOP; //@line 5710
    STACKTOP = sp; //@line 5711
    return 0; //@line 5711
   } else if ((label | 0) == 57) {
    HEAP32[$AsyncCtx31 >> 2] = 54; //@line 5714
    HEAP32[$AsyncCtx31 + 4 >> 2] = $74; //@line 5716
    HEAP32[$AsyncCtx31 + 8 >> 2] = $4; //@line 5718
    HEAP32[$AsyncCtx31 + 12 >> 2] = $4; //@line 5720
    HEAP32[$AsyncCtx31 + 16 >> 2] = $71; //@line 5722
    HEAP32[$AsyncCtx31 + 20 >> 2] = $70; //@line 5724
    HEAP32[$AsyncCtx31 + 24 >> 2] = $74; //@line 5726
    HEAP32[$AsyncCtx31 + 28 >> 2] = $0; //@line 5728
    HEAP32[$AsyncCtx31 + 32 >> 2] = $0; //@line 5730
    HEAP32[$AsyncCtx31 + 36 >> 2] = $75; //@line 5732
    HEAP32[$AsyncCtx31 + 40 >> 2] = $76; //@line 5734
    HEAP32[$AsyncCtx31 + 44 >> 2] = $9; //@line 5736
    HEAP32[$AsyncCtx31 + 48 >> 2] = $4; //@line 5738
    HEAP32[$AsyncCtx31 + 52 >> 2] = $9; //@line 5740
    HEAP32[$AsyncCtx31 + 56 >> 2] = $18; //@line 5742
    HEAP32[$AsyncCtx31 + 60 >> 2] = $72; //@line 5744
    HEAP32[$AsyncCtx31 + 64 >> 2] = $$0208$i; //@line 5746
    sp = STACKTOP; //@line 5747
    STACKTOP = sp; //@line 5748
    return 0; //@line 5748
   } else if ((label | 0) == 65) {
    HEAP32[$AsyncCtx27 >> 2] = 55; //@line 5751
    HEAP32[$AsyncCtx27 + 4 >> 2] = $74; //@line 5753
    HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 5755
    HEAP32[$AsyncCtx27 + 12 >> 2] = $4; //@line 5757
    HEAP32[$AsyncCtx27 + 16 >> 2] = $71; //@line 5759
    HEAP32[$AsyncCtx27 + 20 >> 2] = $70; //@line 5761
    HEAP32[$AsyncCtx27 + 24 >> 2] = $74; //@line 5763
    HEAP32[$AsyncCtx27 + 28 >> 2] = $0; //@line 5765
    HEAP32[$AsyncCtx27 + 32 >> 2] = $0; //@line 5767
    HEAP32[$AsyncCtx27 + 36 >> 2] = $75; //@line 5769
    HEAP32[$AsyncCtx27 + 40 >> 2] = $76; //@line 5771
    HEAP32[$AsyncCtx27 + 44 >> 2] = $9; //@line 5773
    HEAP32[$AsyncCtx27 + 48 >> 2] = $4; //@line 5775
    HEAP32[$AsyncCtx27 + 52 >> 2] = $9; //@line 5777
    HEAP32[$AsyncCtx27 + 56 >> 2] = $18; //@line 5779
    HEAP32[$AsyncCtx27 + 60 >> 2] = $72; //@line 5781
    HEAP32[$AsyncCtx27 + 64 >> 2] = $$0208$i; //@line 5783
    sp = STACKTOP; //@line 5784
    STACKTOP = sp; //@line 5785
    return 0; //@line 5785
   } else if ((label | 0) == 68) {
    HEAP32[$AsyncCtx23 >> 2] = 56; //@line 5788
    HEAP32[$AsyncCtx23 + 4 >> 2] = $74; //@line 5790
    HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 5792
    HEAP32[$AsyncCtx23 + 12 >> 2] = $4; //@line 5794
    HEAP32[$AsyncCtx23 + 16 >> 2] = $71; //@line 5796
    HEAP32[$AsyncCtx23 + 20 >> 2] = $70; //@line 5798
    HEAP32[$AsyncCtx23 + 24 >> 2] = $74; //@line 5800
    HEAP32[$AsyncCtx23 + 28 >> 2] = $0; //@line 5802
    HEAP32[$AsyncCtx23 + 32 >> 2] = $0; //@line 5804
    HEAP32[$AsyncCtx23 + 36 >> 2] = $75; //@line 5806
    HEAP32[$AsyncCtx23 + 40 >> 2] = $76; //@line 5808
    HEAP32[$AsyncCtx23 + 44 >> 2] = $9; //@line 5810
    HEAP32[$AsyncCtx23 + 48 >> 2] = $4; //@line 5812
    HEAP32[$AsyncCtx23 + 52 >> 2] = $9; //@line 5814
    HEAP32[$AsyncCtx23 + 56 >> 2] = $18; //@line 5816
    HEAP32[$AsyncCtx23 + 60 >> 2] = $72; //@line 5818
    HEAP32[$AsyncCtx23 + 64 >> 2] = $$0208$i; //@line 5820
    sp = STACKTOP; //@line 5821
    STACKTOP = sp; //@line 5822
    return 0; //@line 5822
   } else if ((label | 0) == 76) {
    HEAP32[$AsyncCtx19 >> 2] = 57; //@line 5825
    HEAP32[$AsyncCtx19 + 4 >> 2] = $74; //@line 5827
    HEAP32[$AsyncCtx19 + 8 >> 2] = $4; //@line 5829
    HEAP32[$AsyncCtx19 + 12 >> 2] = $4; //@line 5831
    HEAP32[$AsyncCtx19 + 16 >> 2] = $71; //@line 5833
    HEAP32[$AsyncCtx19 + 20 >> 2] = $70; //@line 5835
    HEAP32[$AsyncCtx19 + 24 >> 2] = $74; //@line 5837
    HEAP32[$AsyncCtx19 + 28 >> 2] = $0; //@line 5839
    HEAP32[$AsyncCtx19 + 32 >> 2] = $0; //@line 5841
    HEAP32[$AsyncCtx19 + 36 >> 2] = $75; //@line 5843
    HEAP32[$AsyncCtx19 + 40 >> 2] = $76; //@line 5845
    HEAP32[$AsyncCtx19 + 44 >> 2] = $9; //@line 5847
    HEAP32[$AsyncCtx19 + 48 >> 2] = $4; //@line 5849
    HEAP32[$AsyncCtx19 + 52 >> 2] = $9; //@line 5851
    HEAP32[$AsyncCtx19 + 56 >> 2] = $18; //@line 5853
    HEAP32[$AsyncCtx19 + 60 >> 2] = $72; //@line 5855
    HEAP32[$AsyncCtx19 + 64 >> 2] = $$0208$i; //@line 5857
    sp = STACKTOP; //@line 5858
    STACKTOP = sp; //@line 5859
    return 0; //@line 5859
   } else if ((label | 0) == 105) {
    if (($79 - $71 | 0) >= ($70 | 0)) {
     $$0 = $9; //@line 5866
     STACKTOP = sp; //@line 5867
     return $$0 | 0; //@line 5867
    }
    if ((HEAP8[$79 >> 0] | 0) == -1) {
     $480 = $79 + 1 | 0; //@line 5872
     HEAP32[$4 >> 2] = $480; //@line 5873
     $481 = $480; //@line 5874
     $483 = $71 - $481 + $70 | 0; //@line 5876
     HEAP16[$9 + 24 >> 1] = $483; //@line 5879
     if ($483 & 65535 | 0) {
      HEAP32[$9 + 36 >> 2] = $481; //@line 5884
      $$0 = $9; //@line 5885
      STACKTOP = sp; //@line 5886
      return $$0 | 0; //@line 5886
     }
    }
    HEAP32[$9 + 4 >> 2] = 1; //@line 5890
    $$0 = $9; //@line 5891
    STACKTOP = sp; //@line 5892
    return $$0 | 0; //@line 5892
   }
  }
 } while (0);
 HEAP32[$9 + 4 >> 2] = 1; //@line 5897
 $$0 = $9; //@line 5898
 STACKTOP = sp; //@line 5899
 return $$0 | 0; //@line 5899
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$019$i = 0, $$019$i$1 = 0, $$019$i$2 = 0, $$019$i$3 = 0, $$019$i$4 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$2 = 0, $$3 = 0, $$355 = 0, $$byval_copy58 = 0, $$lcssa$i = 0, $$lcssa127 = 0, $$sink$i = 0, $11 = 0, $114 = 0, $120 = 0, $127 = 0, $128 = 0, $133 = 0, $135 = 0, $136 = 0, $139 = 0, $143 = 0, $144 = 0, $148 = 0, $151 = 0, $153 = 0, $154 = 0, $159 = 0, $167 = 0, $178 = 0, $183 = 0, $184 = 0, $186 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $261 = 0, $268 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $283 = 0, $29 = 0, $290 = 0, $30 = 0, $31 = 0, $311 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $349 = 0, $35 = 0, $356 = 0, $37 = 0, $377 = 0, $38 = 0, $39 = 0, $40 = 0, $400 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $415 = 0, $422 = 0, $443 = 0, $466 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $481 = 0, $488 = 0, $5 = 0, $50 = 0, $505 = 0, $521 = 0, $57 = 0, $6 = 0, $78 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8701
 STACKTOP = STACKTOP + 144 | 0; //@line 8702
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 8702
 $$byval_copy58 = sp + 120 | 0; //@line 8703
 $5 = sp + 64 | 0; //@line 8704
 $6 = sp; //@line 8705
 if (!$1) {
  $$3 = -3003; //@line 8708
  STACKTOP = sp; //@line 8709
  return $$3 | 0; //@line 8709
 }
 $8 = _strlen($1) | 0; //@line 8711
 if (($8 | 0) > 128 | ($8 | 0) == 0) {
  $$3 = -3003; //@line 8716
  STACKTOP = sp; //@line 8717
  return $$3 | 0; //@line 8717
 }
 __ZN9UDPSocketC2Ev($5); //@line 8719
 $AsyncCtx41 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8720
 $11 = __ZN6Socket4openEP12NetworkStack($5, $0) | 0; //@line 8721
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 90; //@line 8724
  HEAP32[$AsyncCtx41 + 4 >> 2] = $5; //@line 8726
  HEAP32[$AsyncCtx41 + 8 >> 2] = $5; //@line 8728
  HEAP32[$AsyncCtx41 + 12 >> 2] = $6; //@line 8730
  HEAP32[$AsyncCtx41 + 16 >> 2] = $1; //@line 8732
  HEAP32[$AsyncCtx41 + 20 >> 2] = $3; //@line 8734
  HEAP32[$AsyncCtx41 + 24 >> 2] = $5; //@line 8736
  HEAP32[$AsyncCtx41 + 28 >> 2] = $2; //@line 8738
  HEAP32[$AsyncCtx41 + 32 >> 2] = $4; //@line 8740
  sp = STACKTOP; //@line 8741
  STACKTOP = sp; //@line 8742
  return 0; //@line 8742
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 8744
 do {
  if (!$11) {
   __ZN6Socket11set_timeoutEi($5, 5e3); //@line 8748
   $21 = _malloc(512) | 0; //@line 8749
   if (!$21) {
    $$2 = -3007; //@line 8752
   } else {
    $23 = $21; //@line 8754
    $24 = $21 + 1 | 0; //@line 8755
    $25 = $21 + 2 | 0; //@line 8756
    $26 = $21 + 3 | 0; //@line 8757
    $27 = $21 + 4 | 0; //@line 8758
    $28 = $21 + 5 | 0; //@line 8759
    $29 = $21 + 6 | 0; //@line 8760
    $30 = $21 + 7 | 0; //@line 8761
    $31 = $21 + 12 | 0; //@line 8762
    $$sink$i = ($4 | 0) == 2 ? 28 : 1; //@line 8764
    HEAP8[$21 >> 0] = 0; //@line 8765
    HEAP8[$24 >> 0] = 1; //@line 8766
    HEAP8[$25 >> 0] = 1; //@line 8767
    HEAP8[$26 >> 0] = 0; //@line 8768
    HEAP8[$27 >> 0] = 0; //@line 8769
    HEAP8[$28 >> 0] = 1; //@line 8770
    HEAP8[$29 >> 0] = 0; //@line 8771
    HEAP8[$29 + 1 >> 0] = 0; //@line 8771
    HEAP8[$29 + 2 >> 0] = 0; //@line 8771
    HEAP8[$29 + 3 >> 0] = 0; //@line 8771
    HEAP8[$29 + 4 >> 0] = 0; //@line 8771
    HEAP8[$29 + 5 >> 0] = 0; //@line 8771
    if (!(HEAP8[$1 >> 0] | 0)) {
     $50 = $31; //@line 8775
    } else {
     $$019$i = $1; //@line 8777
     $38 = $31; //@line 8777
     while (1) {
      $35 = _strcspn($$019$i, 3745) | 0; //@line 8779
      $37 = $38 + 1 | 0; //@line 8781
      HEAP8[$38 >> 0] = $35; //@line 8782
      $39 = $35 & 255; //@line 8783
      _memcpy($37 | 0, $$019$i | 0, $39 | 0) | 0; //@line 8784
      $40 = $37 + $39 | 0; //@line 8785
      $$019$i = $$019$i + ($35 + ((HEAP8[$$019$i + $35 >> 0] | 0) == 46 & 1)) | 0; //@line 8791
      if (!(HEAP8[$$019$i >> 0] | 0)) {
       $50 = $40; //@line 8795
       break;
      } else {
       $38 = $40; //@line 8798
      }
     }
    }
    HEAP8[$50 >> 0] = 0; //@line 8803
    HEAP8[$50 + 1 >> 0] = 0; //@line 8805
    HEAP8[$50 + 2 >> 0] = $$sink$i; //@line 8807
    HEAP8[$50 + 3 >> 0] = 0; //@line 8809
    HEAP8[$50 + 4 >> 0] = 1; //@line 8810
    HEAP32[$$byval_copy58 >> 2] = HEAP32[114]; //@line 8811
    HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[115]; //@line 8811
    HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[116]; //@line 8811
    HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[117]; //@line 8811
    HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[118]; //@line 8811
    __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 8812
    $AsyncCtx30 = _emscripten_alloc_async_context(80, sp) | 0; //@line 8816
    $57 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $50 + 5 - $23 | 0) | 0; //@line 8817
    if (___async) {
     HEAP32[$AsyncCtx30 >> 2] = 91; //@line 8820
     HEAP32[$AsyncCtx30 + 4 >> 2] = $5; //@line 8822
     HEAP32[$AsyncCtx30 + 8 >> 2] = $5; //@line 8824
     HEAP32[$AsyncCtx30 + 12 >> 2] = $21; //@line 8826
     HEAP32[$AsyncCtx30 + 16 >> 2] = $31; //@line 8828
     HEAP8[$AsyncCtx30 + 20 >> 0] = $$sink$i; //@line 8830
     HEAP32[$AsyncCtx30 + 24 >> 2] = $6; //@line 8832
     HEAP32[$AsyncCtx30 + 28 >> 2] = $6; //@line 8834
     HEAP32[$AsyncCtx30 + 32 >> 2] = $23; //@line 8836
     HEAP32[$AsyncCtx30 + 36 >> 2] = $1; //@line 8838
     HEAP32[$AsyncCtx30 + 40 >> 2] = $24; //@line 8840
     HEAP32[$AsyncCtx30 + 44 >> 2] = $25; //@line 8842
     HEAP32[$AsyncCtx30 + 48 >> 2] = $26; //@line 8844
     HEAP32[$AsyncCtx30 + 52 >> 2] = $27; //@line 8846
     HEAP32[$AsyncCtx30 + 56 >> 2] = $28; //@line 8848
     HEAP32[$AsyncCtx30 + 60 >> 2] = $29; //@line 8850
     HEAP32[$AsyncCtx30 + 64 >> 2] = $3; //@line 8852
     HEAP32[$AsyncCtx30 + 68 >> 2] = $5; //@line 8854
     HEAP32[$AsyncCtx30 + 72 >> 2] = $30; //@line 8856
     HEAP32[$AsyncCtx30 + 76 >> 2] = $2; //@line 8858
     sp = STACKTOP; //@line 8859
     STACKTOP = sp; //@line 8860
     return 0; //@line 8860
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 8862
    do {
     if (($57 | 0) < 0) {
      label = 35; //@line 8866
     } else {
      $AsyncCtx15 = _emscripten_alloc_async_context(80, sp) | 0; //@line 8868
      $78 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 8869
      if (___async) {
       HEAP32[$AsyncCtx15 >> 2] = 92; //@line 8872
       HEAP32[$AsyncCtx15 + 4 >> 2] = $5; //@line 8874
       HEAP32[$AsyncCtx15 + 8 >> 2] = $5; //@line 8876
       HEAP32[$AsyncCtx15 + 12 >> 2] = $21; //@line 8878
       HEAP32[$AsyncCtx15 + 16 >> 2] = $31; //@line 8880
       HEAP8[$AsyncCtx15 + 20 >> 0] = $$sink$i; //@line 8882
       HEAP32[$AsyncCtx15 + 24 >> 2] = $6; //@line 8884
       HEAP32[$AsyncCtx15 + 28 >> 2] = $6; //@line 8886
       HEAP32[$AsyncCtx15 + 32 >> 2] = $23; //@line 8888
       HEAP32[$AsyncCtx15 + 36 >> 2] = $1; //@line 8890
       HEAP32[$AsyncCtx15 + 40 >> 2] = $24; //@line 8892
       HEAP32[$AsyncCtx15 + 44 >> 2] = $25; //@line 8894
       HEAP32[$AsyncCtx15 + 48 >> 2] = $26; //@line 8896
       HEAP32[$AsyncCtx15 + 52 >> 2] = $27; //@line 8898
       HEAP32[$AsyncCtx15 + 56 >> 2] = $28; //@line 8900
       HEAP32[$AsyncCtx15 + 60 >> 2] = $29; //@line 8902
       HEAP32[$AsyncCtx15 + 64 >> 2] = $3; //@line 8904
       HEAP32[$AsyncCtx15 + 68 >> 2] = $5; //@line 8906
       HEAP32[$AsyncCtx15 + 72 >> 2] = $30; //@line 8908
       HEAP32[$AsyncCtx15 + 76 >> 2] = $2; //@line 8910
       sp = STACKTOP; //@line 8911
       STACKTOP = sp; //@line 8912
       return 0; //@line 8912
      } else {
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8914
       if (($78 | 0) == -3001) {
        label = 35; //@line 8917
        break;
       } else {
        $$lcssa127 = $78; //@line 8920
        label = 15; //@line 8921
        break;
       }
      }
     }
    } while (0);
    L25 : do {
     if ((label | 0) == 35) {
      HEAP8[$21 >> 0] = 0; //@line 8929
      HEAP8[$24 >> 0] = 1; //@line 8930
      HEAP8[$25 >> 0] = 1; //@line 8931
      HEAP8[$26 >> 0] = 0; //@line 8932
      HEAP8[$27 >> 0] = 0; //@line 8933
      HEAP8[$28 >> 0] = 1; //@line 8934
      HEAP8[$29 >> 0] = 0; //@line 8935
      HEAP8[$29 + 1 >> 0] = 0; //@line 8935
      HEAP8[$29 + 2 >> 0] = 0; //@line 8935
      HEAP8[$29 + 3 >> 0] = 0; //@line 8935
      HEAP8[$29 + 4 >> 0] = 0; //@line 8935
      HEAP8[$29 + 5 >> 0] = 0; //@line 8935
      if (!(HEAP8[$1 >> 0] | 0)) {
       $283 = $31; //@line 8939
      } else {
       $$019$i$1 = $1; //@line 8941
       $271 = $31; //@line 8941
       while (1) {
        $268 = _strcspn($$019$i$1, 3745) | 0; //@line 8943
        $270 = $271 + 1 | 0; //@line 8945
        HEAP8[$271 >> 0] = $268; //@line 8946
        $272 = $268 & 255; //@line 8947
        _memcpy($270 | 0, $$019$i$1 | 0, $272 | 0) | 0; //@line 8948
        $273 = $270 + $272 | 0; //@line 8949
        $$019$i$1 = $$019$i$1 + ($268 + ((HEAP8[$$019$i$1 + $268 >> 0] | 0) == 46 & 1)) | 0; //@line 8955
        if (!(HEAP8[$$019$i$1 >> 0] | 0)) {
         $283 = $273; //@line 8959
         break;
        } else {
         $271 = $273; //@line 8962
        }
       }
      }
      HEAP8[$283 >> 0] = 0; //@line 8967
      HEAP8[$283 + 1 >> 0] = 0; //@line 8969
      HEAP8[$283 + 2 >> 0] = $$sink$i; //@line 8971
      HEAP8[$283 + 3 >> 0] = 0; //@line 8973
      HEAP8[$283 + 4 >> 0] = 1; //@line 8974
      HEAP32[$$byval_copy58 >> 2] = HEAP32[119]; //@line 8975
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[120]; //@line 8975
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[121]; //@line 8975
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[122]; //@line 8975
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[123]; //@line 8975
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 8976
      $AsyncCtx27 = _emscripten_alloc_async_context(80, sp) | 0; //@line 8980
      $290 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $283 + 5 - $23 | 0) | 0; //@line 8981
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 95; //@line 8984
       HEAP32[$AsyncCtx27 + 4 >> 2] = $5; //@line 8986
       HEAP32[$AsyncCtx27 + 8 >> 2] = $5; //@line 8988
       HEAP32[$AsyncCtx27 + 12 >> 2] = $21; //@line 8990
       HEAP32[$AsyncCtx27 + 16 >> 2] = $31; //@line 8992
       HEAP8[$AsyncCtx27 + 20 >> 0] = $$sink$i; //@line 8994
       HEAP32[$AsyncCtx27 + 24 >> 2] = $6; //@line 8996
       HEAP32[$AsyncCtx27 + 28 >> 2] = $6; //@line 8998
       HEAP32[$AsyncCtx27 + 32 >> 2] = $23; //@line 9000
       HEAP32[$AsyncCtx27 + 36 >> 2] = $1; //@line 9002
       HEAP32[$AsyncCtx27 + 40 >> 2] = $24; //@line 9004
       HEAP32[$AsyncCtx27 + 44 >> 2] = $25; //@line 9006
       HEAP32[$AsyncCtx27 + 48 >> 2] = $26; //@line 9008
       HEAP32[$AsyncCtx27 + 52 >> 2] = $27; //@line 9010
       HEAP32[$AsyncCtx27 + 56 >> 2] = $28; //@line 9012
       HEAP32[$AsyncCtx27 + 60 >> 2] = $29; //@line 9014
       HEAP32[$AsyncCtx27 + 64 >> 2] = $3; //@line 9016
       HEAP32[$AsyncCtx27 + 68 >> 2] = $5; //@line 9018
       HEAP32[$AsyncCtx27 + 72 >> 2] = $30; //@line 9020
       HEAP32[$AsyncCtx27 + 76 >> 2] = $2; //@line 9022
       sp = STACKTOP; //@line 9023
       STACKTOP = sp; //@line 9024
       return 0; //@line 9024
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 9026
      do {
       if (($290 | 0) >= 0) {
        $AsyncCtx11 = _emscripten_alloc_async_context(80, sp) | 0; //@line 9030
        $311 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 9031
        if (___async) {
         HEAP32[$AsyncCtx11 >> 2] = 96; //@line 9034
         HEAP32[$AsyncCtx11 + 4 >> 2] = $5; //@line 9036
         HEAP32[$AsyncCtx11 + 8 >> 2] = $5; //@line 9038
         HEAP32[$AsyncCtx11 + 12 >> 2] = $21; //@line 9040
         HEAP32[$AsyncCtx11 + 16 >> 2] = $31; //@line 9042
         HEAP8[$AsyncCtx11 + 20 >> 0] = $$sink$i; //@line 9044
         HEAP32[$AsyncCtx11 + 24 >> 2] = $6; //@line 9046
         HEAP32[$AsyncCtx11 + 28 >> 2] = $6; //@line 9048
         HEAP32[$AsyncCtx11 + 32 >> 2] = $23; //@line 9050
         HEAP32[$AsyncCtx11 + 36 >> 2] = $1; //@line 9052
         HEAP32[$AsyncCtx11 + 40 >> 2] = $24; //@line 9054
         HEAP32[$AsyncCtx11 + 44 >> 2] = $25; //@line 9056
         HEAP32[$AsyncCtx11 + 48 >> 2] = $26; //@line 9058
         HEAP32[$AsyncCtx11 + 52 >> 2] = $27; //@line 9060
         HEAP32[$AsyncCtx11 + 56 >> 2] = $28; //@line 9062
         HEAP32[$AsyncCtx11 + 60 >> 2] = $29; //@line 9064
         HEAP32[$AsyncCtx11 + 64 >> 2] = $3; //@line 9066
         HEAP32[$AsyncCtx11 + 68 >> 2] = $5; //@line 9068
         HEAP32[$AsyncCtx11 + 72 >> 2] = $30; //@line 9070
         HEAP32[$AsyncCtx11 + 76 >> 2] = $2; //@line 9072
         sp = STACKTOP; //@line 9073
         STACKTOP = sp; //@line 9074
         return 0; //@line 9074
        } else {
         _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9076
         if (($311 | 0) == -3001) {
          break;
         } else {
          $$lcssa127 = $311; //@line 9081
          label = 15; //@line 9082
          break L25;
         }
        }
       }
      } while (0);
      HEAP8[$21 >> 0] = 0; //@line 9088
      HEAP8[$24 >> 0] = 1; //@line 9089
      HEAP8[$25 >> 0] = 1; //@line 9090
      HEAP8[$26 >> 0] = 0; //@line 9091
      HEAP8[$27 >> 0] = 0; //@line 9092
      HEAP8[$28 >> 0] = 1; //@line 9093
      HEAP8[$29 >> 0] = 0; //@line 9094
      HEAP8[$29 + 1 >> 0] = 0; //@line 9094
      HEAP8[$29 + 2 >> 0] = 0; //@line 9094
      HEAP8[$29 + 3 >> 0] = 0; //@line 9094
      HEAP8[$29 + 4 >> 0] = 0; //@line 9094
      HEAP8[$29 + 5 >> 0] = 0; //@line 9094
      if (!(HEAP8[$1 >> 0] | 0)) {
       $349 = $31; //@line 9098
      } else {
       $$019$i$2 = $1; //@line 9100
       $337 = $31; //@line 9100
       while (1) {
        $334 = _strcspn($$019$i$2, 3745) | 0; //@line 9102
        $336 = $337 + 1 | 0; //@line 9104
        HEAP8[$337 >> 0] = $334; //@line 9105
        $338 = $334 & 255; //@line 9106
        _memcpy($336 | 0, $$019$i$2 | 0, $338 | 0) | 0; //@line 9107
        $339 = $336 + $338 | 0; //@line 9108
        $$019$i$2 = $$019$i$2 + ($334 + ((HEAP8[$$019$i$2 + $334 >> 0] | 0) == 46 & 1)) | 0; //@line 9114
        if (!(HEAP8[$$019$i$2 >> 0] | 0)) {
         $349 = $339; //@line 9118
         break;
        } else {
         $337 = $339; //@line 9121
        }
       }
      }
      HEAP8[$349 >> 0] = 0; //@line 9126
      HEAP8[$349 + 1 >> 0] = 0; //@line 9128
      HEAP8[$349 + 2 >> 0] = $$sink$i; //@line 9130
      HEAP8[$349 + 3 >> 0] = 0; //@line 9132
      HEAP8[$349 + 4 >> 0] = 1; //@line 9133
      HEAP32[$$byval_copy58 >> 2] = HEAP32[124]; //@line 9134
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[125]; //@line 9134
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[126]; //@line 9134
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[127]; //@line 9134
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[128]; //@line 9134
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 9135
      $AsyncCtx24 = _emscripten_alloc_async_context(80, sp) | 0; //@line 9139
      $356 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $349 + 5 - $23 | 0) | 0; //@line 9140
      if (___async) {
       HEAP32[$AsyncCtx24 >> 2] = 97; //@line 9143
       HEAP32[$AsyncCtx24 + 4 >> 2] = $5; //@line 9145
       HEAP32[$AsyncCtx24 + 8 >> 2] = $5; //@line 9147
       HEAP32[$AsyncCtx24 + 12 >> 2] = $21; //@line 9149
       HEAP32[$AsyncCtx24 + 16 >> 2] = $31; //@line 9151
       HEAP8[$AsyncCtx24 + 20 >> 0] = $$sink$i; //@line 9153
       HEAP32[$AsyncCtx24 + 24 >> 2] = $6; //@line 9155
       HEAP32[$AsyncCtx24 + 28 >> 2] = $6; //@line 9157
       HEAP32[$AsyncCtx24 + 32 >> 2] = $23; //@line 9159
       HEAP32[$AsyncCtx24 + 36 >> 2] = $1; //@line 9161
       HEAP32[$AsyncCtx24 + 40 >> 2] = $24; //@line 9163
       HEAP32[$AsyncCtx24 + 44 >> 2] = $25; //@line 9165
       HEAP32[$AsyncCtx24 + 48 >> 2] = $26; //@line 9167
       HEAP32[$AsyncCtx24 + 52 >> 2] = $27; //@line 9169
       HEAP32[$AsyncCtx24 + 56 >> 2] = $28; //@line 9171
       HEAP32[$AsyncCtx24 + 60 >> 2] = $29; //@line 9173
       HEAP32[$AsyncCtx24 + 64 >> 2] = $3; //@line 9175
       HEAP32[$AsyncCtx24 + 68 >> 2] = $5; //@line 9177
       HEAP32[$AsyncCtx24 + 72 >> 2] = $30; //@line 9179
       HEAP32[$AsyncCtx24 + 76 >> 2] = $2; //@line 9181
       sp = STACKTOP; //@line 9182
       STACKTOP = sp; //@line 9183
       return 0; //@line 9183
      }
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 9185
      do {
       if (($356 | 0) >= 0) {
        $AsyncCtx7 = _emscripten_alloc_async_context(80, sp) | 0; //@line 9189
        $377 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 9190
        if (___async) {
         HEAP32[$AsyncCtx7 >> 2] = 98; //@line 9193
         HEAP32[$AsyncCtx7 + 4 >> 2] = $5; //@line 9195
         HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 9197
         HEAP32[$AsyncCtx7 + 12 >> 2] = $21; //@line 9199
         HEAP32[$AsyncCtx7 + 16 >> 2] = $31; //@line 9201
         HEAP8[$AsyncCtx7 + 20 >> 0] = $$sink$i; //@line 9203
         HEAP32[$AsyncCtx7 + 24 >> 2] = $6; //@line 9205
         HEAP32[$AsyncCtx7 + 28 >> 2] = $6; //@line 9207
         HEAP32[$AsyncCtx7 + 32 >> 2] = $23; //@line 9209
         HEAP32[$AsyncCtx7 + 36 >> 2] = $1; //@line 9211
         HEAP32[$AsyncCtx7 + 40 >> 2] = $24; //@line 9213
         HEAP32[$AsyncCtx7 + 44 >> 2] = $25; //@line 9215
         HEAP32[$AsyncCtx7 + 48 >> 2] = $26; //@line 9217
         HEAP32[$AsyncCtx7 + 52 >> 2] = $27; //@line 9219
         HEAP32[$AsyncCtx7 + 56 >> 2] = $28; //@line 9221
         HEAP32[$AsyncCtx7 + 60 >> 2] = $29; //@line 9223
         HEAP32[$AsyncCtx7 + 64 >> 2] = $3; //@line 9225
         HEAP32[$AsyncCtx7 + 68 >> 2] = $5; //@line 9227
         HEAP32[$AsyncCtx7 + 72 >> 2] = $30; //@line 9229
         HEAP32[$AsyncCtx7 + 76 >> 2] = $2; //@line 9231
         sp = STACKTOP; //@line 9232
         STACKTOP = sp; //@line 9233
         return 0; //@line 9233
        } else {
         _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9235
         if (($377 | 0) == -3001) {
          break;
         } else {
          $$lcssa127 = $377; //@line 9240
          label = 15; //@line 9241
          break L25;
         }
        }
       }
      } while (0);
      HEAP8[$21 >> 0] = 0; //@line 9247
      HEAP8[$24 >> 0] = 1; //@line 9248
      HEAP8[$25 >> 0] = 1; //@line 9249
      HEAP8[$26 >> 0] = 0; //@line 9250
      HEAP8[$27 >> 0] = 0; //@line 9251
      HEAP8[$28 >> 0] = 1; //@line 9252
      HEAP8[$29 >> 0] = 0; //@line 9253
      HEAP8[$29 + 1 >> 0] = 0; //@line 9253
      HEAP8[$29 + 2 >> 0] = 0; //@line 9253
      HEAP8[$29 + 3 >> 0] = 0; //@line 9253
      HEAP8[$29 + 4 >> 0] = 0; //@line 9253
      HEAP8[$29 + 5 >> 0] = 0; //@line 9253
      if (!(HEAP8[$1 >> 0] | 0)) {
       $415 = $31; //@line 9257
      } else {
       $$019$i$3 = $1; //@line 9259
       $403 = $31; //@line 9259
       while (1) {
        $400 = _strcspn($$019$i$3, 3745) | 0; //@line 9261
        $402 = $403 + 1 | 0; //@line 9263
        HEAP8[$403 >> 0] = $400; //@line 9264
        $404 = $400 & 255; //@line 9265
        _memcpy($402 | 0, $$019$i$3 | 0, $404 | 0) | 0; //@line 9266
        $405 = $402 + $404 | 0; //@line 9267
        $$019$i$3 = $$019$i$3 + ($400 + ((HEAP8[$$019$i$3 + $400 >> 0] | 0) == 46 & 1)) | 0; //@line 9273
        if (!(HEAP8[$$019$i$3 >> 0] | 0)) {
         $415 = $405; //@line 9277
         break;
        } else {
         $403 = $405; //@line 9280
        }
       }
      }
      HEAP8[$415 >> 0] = 0; //@line 9285
      HEAP8[$415 + 1 >> 0] = 0; //@line 9287
      HEAP8[$415 + 2 >> 0] = $$sink$i; //@line 9289
      HEAP8[$415 + 3 >> 0] = 0; //@line 9291
      HEAP8[$415 + 4 >> 0] = 1; //@line 9292
      HEAP32[$$byval_copy58 >> 2] = HEAP32[129]; //@line 9293
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[130]; //@line 9293
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[131]; //@line 9293
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[132]; //@line 9293
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[133]; //@line 9293
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 9294
      $AsyncCtx21 = _emscripten_alloc_async_context(80, sp) | 0; //@line 9298
      $422 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $415 + 5 - $23 | 0) | 0; //@line 9299
      if (___async) {
       HEAP32[$AsyncCtx21 >> 2] = 99; //@line 9302
       HEAP32[$AsyncCtx21 + 4 >> 2] = $5; //@line 9304
       HEAP32[$AsyncCtx21 + 8 >> 2] = $5; //@line 9306
       HEAP32[$AsyncCtx21 + 12 >> 2] = $21; //@line 9308
       HEAP32[$AsyncCtx21 + 16 >> 2] = $31; //@line 9310
       HEAP32[$AsyncCtx21 + 20 >> 2] = $1; //@line 9312
       HEAP8[$AsyncCtx21 + 24 >> 0] = $$sink$i; //@line 9314
       HEAP32[$AsyncCtx21 + 28 >> 2] = $6; //@line 9316
       HEAP32[$AsyncCtx21 + 32 >> 2] = $6; //@line 9318
       HEAP32[$AsyncCtx21 + 36 >> 2] = $23; //@line 9320
       HEAP32[$AsyncCtx21 + 40 >> 2] = $24; //@line 9322
       HEAP32[$AsyncCtx21 + 44 >> 2] = $25; //@line 9324
       HEAP32[$AsyncCtx21 + 48 >> 2] = $26; //@line 9326
       HEAP32[$AsyncCtx21 + 52 >> 2] = $27; //@line 9328
       HEAP32[$AsyncCtx21 + 56 >> 2] = $28; //@line 9330
       HEAP32[$AsyncCtx21 + 60 >> 2] = $29; //@line 9332
       HEAP32[$AsyncCtx21 + 64 >> 2] = $3; //@line 9334
       HEAP32[$AsyncCtx21 + 68 >> 2] = $5; //@line 9336
       HEAP32[$AsyncCtx21 + 72 >> 2] = $30; //@line 9338
       HEAP32[$AsyncCtx21 + 76 >> 2] = $2; //@line 9340
       sp = STACKTOP; //@line 9341
       STACKTOP = sp; //@line 9342
       return 0; //@line 9342
      }
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 9344
      do {
       if (($422 | 0) >= 0) {
        $AsyncCtx3 = _emscripten_alloc_async_context(80, sp) | 0; //@line 9348
        $443 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 9349
        if (___async) {
         HEAP32[$AsyncCtx3 >> 2] = 100; //@line 9352
         HEAP32[$AsyncCtx3 + 4 >> 2] = $5; //@line 9354
         HEAP32[$AsyncCtx3 + 8 >> 2] = $31; //@line 9356
         HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 9358
         HEAP8[$AsyncCtx3 + 16 >> 0] = $$sink$i; //@line 9360
         HEAP32[$AsyncCtx3 + 20 >> 2] = $6; //@line 9362
         HEAP32[$AsyncCtx3 + 24 >> 2] = $6; //@line 9364
         HEAP32[$AsyncCtx3 + 28 >> 2] = $23; //@line 9366
         HEAP32[$AsyncCtx3 + 32 >> 2] = $5; //@line 9368
         HEAP32[$AsyncCtx3 + 36 >> 2] = $21; //@line 9370
         HEAP32[$AsyncCtx3 + 40 >> 2] = $24; //@line 9372
         HEAP32[$AsyncCtx3 + 44 >> 2] = $25; //@line 9374
         HEAP32[$AsyncCtx3 + 48 >> 2] = $26; //@line 9376
         HEAP32[$AsyncCtx3 + 52 >> 2] = $27; //@line 9378
         HEAP32[$AsyncCtx3 + 56 >> 2] = $28; //@line 9380
         HEAP32[$AsyncCtx3 + 60 >> 2] = $29; //@line 9382
         HEAP32[$AsyncCtx3 + 64 >> 2] = $3; //@line 9384
         HEAP32[$AsyncCtx3 + 68 >> 2] = $5; //@line 9386
         HEAP32[$AsyncCtx3 + 72 >> 2] = $30; //@line 9388
         HEAP32[$AsyncCtx3 + 76 >> 2] = $2; //@line 9390
         sp = STACKTOP; //@line 9391
         STACKTOP = sp; //@line 9392
         return 0; //@line 9392
        } else {
         _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9394
         if (($443 | 0) == -3001) {
          break;
         } else {
          $$lcssa127 = $443; //@line 9399
          label = 15; //@line 9400
          break L25;
         }
        }
       }
      } while (0);
      HEAP8[$21 >> 0] = 0; //@line 9406
      HEAP8[$24 >> 0] = 1; //@line 9407
      HEAP8[$25 >> 0] = 1; //@line 9408
      HEAP8[$26 >> 0] = 0; //@line 9409
      HEAP8[$27 >> 0] = 0; //@line 9410
      HEAP8[$28 >> 0] = 1; //@line 9411
      HEAP8[$29 >> 0] = 0; //@line 9412
      HEAP8[$29 + 1 >> 0] = 0; //@line 9412
      HEAP8[$29 + 2 >> 0] = 0; //@line 9412
      HEAP8[$29 + 3 >> 0] = 0; //@line 9412
      HEAP8[$29 + 4 >> 0] = 0; //@line 9412
      HEAP8[$29 + 5 >> 0] = 0; //@line 9412
      if (!(HEAP8[$1 >> 0] | 0)) {
       $481 = $31; //@line 9416
      } else {
       $$019$i$4 = $1; //@line 9418
       $469 = $31; //@line 9418
       while (1) {
        $466 = _strcspn($$019$i$4, 3745) | 0; //@line 9420
        $468 = $469 + 1 | 0; //@line 9422
        HEAP8[$469 >> 0] = $466; //@line 9423
        $470 = $466 & 255; //@line 9424
        _memcpy($468 | 0, $$019$i$4 | 0, $470 | 0) | 0; //@line 9425
        $471 = $468 + $470 | 0; //@line 9426
        $$019$i$4 = $$019$i$4 + ($466 + ((HEAP8[$$019$i$4 + $466 >> 0] | 0) == 46 & 1)) | 0; //@line 9432
        if (!(HEAP8[$$019$i$4 >> 0] | 0)) {
         $481 = $471; //@line 9436
         break;
        } else {
         $469 = $471; //@line 9439
        }
       }
      }
      HEAP8[$481 >> 0] = 0; //@line 9444
      HEAP8[$481 + 1 >> 0] = 0; //@line 9446
      HEAP8[$481 + 2 >> 0] = $$sink$i; //@line 9448
      HEAP8[$481 + 3 >> 0] = 0; //@line 9450
      HEAP8[$481 + 4 >> 0] = 1; //@line 9451
      HEAP32[$$byval_copy58 >> 2] = HEAP32[134]; //@line 9452
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[135]; //@line 9452
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[136]; //@line 9452
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[137]; //@line 9452
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[138]; //@line 9452
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 9453
      $AsyncCtx18 = _emscripten_alloc_async_context(64, sp) | 0; //@line 9457
      $488 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $481 + 5 - $23 | 0) | 0; //@line 9458
      if (___async) {
       HEAP32[$AsyncCtx18 >> 2] = 101; //@line 9461
       HEAP32[$AsyncCtx18 + 4 >> 2] = $5; //@line 9463
       HEAP32[$AsyncCtx18 + 8 >> 2] = $3; //@line 9465
       HEAP32[$AsyncCtx18 + 12 >> 2] = $21; //@line 9467
       HEAP32[$AsyncCtx18 + 16 >> 2] = $5; //@line 9469
       HEAP32[$AsyncCtx18 + 20 >> 2] = $6; //@line 9471
       HEAP32[$AsyncCtx18 + 24 >> 2] = $5; //@line 9473
       HEAP32[$AsyncCtx18 + 28 >> 2] = $24; //@line 9475
       HEAP32[$AsyncCtx18 + 32 >> 2] = $25; //@line 9477
       HEAP32[$AsyncCtx18 + 36 >> 2] = $26; //@line 9479
       HEAP32[$AsyncCtx18 + 40 >> 2] = $27; //@line 9481
       HEAP32[$AsyncCtx18 + 44 >> 2] = $28; //@line 9483
       HEAP32[$AsyncCtx18 + 48 >> 2] = $29; //@line 9485
       HEAP32[$AsyncCtx18 + 52 >> 2] = $30; //@line 9487
       HEAP32[$AsyncCtx18 + 56 >> 2] = $31; //@line 9489
       HEAP32[$AsyncCtx18 + 60 >> 2] = $2; //@line 9491
       sp = STACKTOP; //@line 9492
       STACKTOP = sp; //@line 9493
       return 0; //@line 9493
      }
      _emscripten_free_async_context($AsyncCtx18 | 0); //@line 9495
      if (($488 | 0) < 0) {
       $$355 = -3009; //@line 9498
       break;
      }
      $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 9501
      $505 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 9502
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 102; //@line 9505
       HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 9507
       HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 9509
       HEAP32[$AsyncCtx + 12 >> 2] = $21; //@line 9511
       HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 9513
       HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 9515
       HEAP32[$AsyncCtx + 24 >> 2] = $24; //@line 9517
       HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 9519
       HEAP32[$AsyncCtx + 32 >> 2] = $26; //@line 9521
       HEAP32[$AsyncCtx + 36 >> 2] = $27; //@line 9523
       HEAP32[$AsyncCtx + 40 >> 2] = $28; //@line 9525
       HEAP32[$AsyncCtx + 44 >> 2] = $29; //@line 9527
       HEAP32[$AsyncCtx + 48 >> 2] = $30; //@line 9529
       HEAP32[$AsyncCtx + 52 >> 2] = $31; //@line 9531
       HEAP32[$AsyncCtx + 56 >> 2] = $2; //@line 9533
       sp = STACKTOP; //@line 9534
       STACKTOP = sp; //@line 9535
       return 0; //@line 9535
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 9537
       if (($505 | 0) == -3001) {
        $$355 = -3009; //@line 9540
        break;
       } else {
        $$lcssa127 = $505; //@line 9543
        label = 15; //@line 9544
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 15) {
     if (($$lcssa127 | 0) < 0) {
      $$355 = $$lcssa127; //@line 9553
     } else {
      $114 = HEAPU8[$27 >> 0] << 8 | HEAPU8[$28 >> 0]; //@line 9569
      $120 = HEAPU8[$29 >> 0] << 8 | HEAPU8[$30 >> 0]; //@line 9575
      if (((HEAP8[$25 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$21 >> 0] << 8 | HEAPU8[$24 >> 0] | 0) == 1 : 0) & (HEAP8[$26 >> 0] & 15) == 0) {
       if (!$114) {
        $521 = $31; //@line 9585
       } else {
        $$093119$i = 0; //@line 9587
        $128 = $31; //@line 9587
        while (1) {
         $127 = HEAP8[$128 >> 0] | 0; //@line 9589
         if (!($127 << 24 >> 24)) {
          $$lcssa$i = $128; //@line 9592
         } else {
          $133 = $128; //@line 9594
          $135 = $127; //@line 9594
          while (1) {
           $136 = $133 + 1 + ($135 & 255) | 0; //@line 9598
           $135 = HEAP8[$136 >> 0] | 0; //@line 9599
           if (!($135 << 24 >> 24)) {
            $$lcssa$i = $136; //@line 9602
            break;
           } else {
            $133 = $136; //@line 9605
           }
          }
         }
         $139 = $$lcssa$i + 5 | 0; //@line 9609
         $$093119$i = $$093119$i + 1 | 0; //@line 9610
         if (($$093119$i | 0) >= ($114 | 0)) {
          $521 = $139; //@line 9615
          break;
         } else {
          $128 = $139; //@line 9613
         }
        }
       }
       if (($3 | 0) != 0 & ($120 | 0) != 0) {
        $$090117$i = $2; //@line 9624
        $$094116$i = 0; //@line 9624
        $$095115$i = 0; //@line 9624
        $143 = $521; //@line 9624
        while (1) {
         $144 = HEAP8[$143 >> 0] | 0; //@line 9627
         do {
          if (!($144 << 24 >> 24)) {
           $159 = $143 + 1 | 0; //@line 9631
          } else {
           $148 = $144 & 255; //@line 9634
           $151 = $143; //@line 9634
           while (1) {
            if ($148 & 192 | 0) {
             label = 25; //@line 9639
             break;
            }
            $153 = $151 + 1 + $148 | 0; //@line 9643
            $154 = HEAP8[$153 >> 0] | 0; //@line 9644
            if (!($154 << 24 >> 24)) {
             label = 27; //@line 9648
             break;
            } else {
             $148 = $154 & 255; //@line 9651
             $151 = $153; //@line 9651
            }
           }
           if ((label | 0) == 25) {
            label = 0; //@line 9655
            $159 = $151 + 2 | 0; //@line 9657
            break;
           } else if ((label | 0) == 27) {
            label = 0; //@line 9661
            $159 = $153 + 1 | 0; //@line 9663
            break;
           }
          }
         } while (0);
         $167 = (HEAPU8[$159 >> 0] << 8 | HEAPU8[$159 + 1 >> 0]) & 65535; //@line 9676
         $178 = $159 + 10 | 0; //@line 9687
         $183 = HEAPU8[$159 + 8 >> 0] << 8 | HEAPU8[$159 + 9 >> 0]; //@line 9692
         $184 = $183 & 65535; //@line 9693
         $186 = (HEAPU8[$159 + 2 >> 0] << 8 | HEAPU8[$159 + 3 >> 0] | 0) == 1; //@line 9695
         do {
          if ($167 << 16 >> 16 == 1 & $186 & $184 << 16 >> 16 == 4) {
           HEAP32[$$090117$i >> 2] = 1; //@line 9701
           HEAP8[$$090117$i + 4 >> 0] = HEAP8[$178 >> 0] | 0; //@line 9705
           HEAP8[$$090117$i + 5 >> 0] = HEAP8[$159 + 11 >> 0] | 0; //@line 9709
           HEAP8[$$090117$i + 6 >> 0] = HEAP8[$159 + 12 >> 0] | 0; //@line 9713
           HEAP8[$$090117$i + 7 >> 0] = HEAP8[$159 + 13 >> 0] | 0; //@line 9717
           $$0 = $159 + 14 | 0; //@line 9720
           $$1$i = $$090117$i + 20 | 0; //@line 9720
           $$196$i = $$095115$i + 1 | 0; //@line 9720
          } else {
           if ($167 << 16 >> 16 == 28 & $186 & $184 << 16 >> 16 == 16) {
            HEAP32[$$090117$i >> 2] = 2; //@line 9727
            HEAP8[$$090117$i + 4 >> 0] = HEAP8[$178 >> 0] | 0; //@line 9731
            HEAP8[$$090117$i + 5 >> 0] = HEAP8[$159 + 11 >> 0] | 0; //@line 9735
            HEAP8[$$090117$i + 6 >> 0] = HEAP8[$159 + 12 >> 0] | 0; //@line 9739
            HEAP8[$$090117$i + 7 >> 0] = HEAP8[$159 + 13 >> 0] | 0; //@line 9743
            HEAP8[$$090117$i + 8 >> 0] = HEAP8[$159 + 14 >> 0] | 0; //@line 9747
            HEAP8[$$090117$i + 9 >> 0] = HEAP8[$159 + 15 >> 0] | 0; //@line 9751
            HEAP8[$$090117$i + 10 >> 0] = HEAP8[$159 + 16 >> 0] | 0; //@line 9755
            HEAP8[$$090117$i + 11 >> 0] = HEAP8[$159 + 17 >> 0] | 0; //@line 9759
            HEAP8[$$090117$i + 12 >> 0] = HEAP8[$159 + 18 >> 0] | 0; //@line 9763
            HEAP8[$$090117$i + 13 >> 0] = HEAP8[$159 + 19 >> 0] | 0; //@line 9767
            HEAP8[$$090117$i + 14 >> 0] = HEAP8[$159 + 20 >> 0] | 0; //@line 9771
            HEAP8[$$090117$i + 15 >> 0] = HEAP8[$159 + 21 >> 0] | 0; //@line 9775
            HEAP8[$$090117$i + 16 >> 0] = HEAP8[$159 + 22 >> 0] | 0; //@line 9779
            HEAP8[$$090117$i + 17 >> 0] = HEAP8[$159 + 23 >> 0] | 0; //@line 9783
            HEAP8[$$090117$i + 18 >> 0] = HEAP8[$159 + 24 >> 0] | 0; //@line 9787
            HEAP8[$$090117$i + 19 >> 0] = HEAP8[$159 + 25 >> 0] | 0; //@line 9791
            $$0 = $159 + 26 | 0; //@line 9794
            $$1$i = $$090117$i + 20 | 0; //@line 9794
            $$196$i = $$095115$i + 1 | 0; //@line 9794
            break;
           } else {
            $$0 = $178 + $183 | 0; //@line 9798
            $$1$i = $$090117$i; //@line 9798
            $$196$i = $$095115$i; //@line 9798
            break;
           }
          }
         } while (0);
         $$094116$i = $$094116$i + 1 | 0; //@line 9803
         if (!(($$094116$i | 0) < ($120 | 0) & $$196$i >>> 0 < $3 >>> 0)) {
          $$089$i = $$196$i; //@line 9810
          break;
         } else {
          $$090117$i = $$1$i; //@line 9808
          $$095115$i = $$196$i; //@line 9808
          $143 = $$0; //@line 9808
         }
        }
       } else {
        $$089$i = 0; //@line 9815
       }
      } else {
       $$089$i = 0; //@line 9818
      }
      $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 9822
     }
    }
    _free($21); //@line 9825
    $AsyncCtx37 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9826
    $261 = __ZN6Socket5closeEv($5) | 0; //@line 9827
    if (___async) {
     HEAP32[$AsyncCtx37 >> 2] = 93; //@line 9830
     HEAP32[$AsyncCtx37 + 4 >> 2] = $$355; //@line 9832
     HEAP32[$AsyncCtx37 + 8 >> 2] = $5; //@line 9834
     HEAP32[$AsyncCtx37 + 12 >> 2] = $5; //@line 9836
     sp = STACKTOP; //@line 9837
     STACKTOP = sp; //@line 9838
     return 0; //@line 9838
    } else {
     _emscripten_free_async_context($AsyncCtx37 | 0); //@line 9840
     $$2 = ($261 | 0) == 0 ? $$355 : $261; //@line 9843
     break;
    }
   }
  } else {
   $$2 = $11; //@line 9848
  }
 } while (0);
 $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9851
 __ZN9UDPSocketD2Ev($5); //@line 9852
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 94; //@line 9855
  HEAP32[$AsyncCtx34 + 4 >> 2] = $5; //@line 9857
  HEAP32[$AsyncCtx34 + 8 >> 2] = $$2; //@line 9859
  sp = STACKTOP; //@line 9860
  STACKTOP = sp; //@line 9861
  return 0; //@line 9861
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 9863
 $$3 = $$2; //@line 9864
 STACKTOP = sp; //@line 9865
 return $$3 | 0; //@line 9865
}
function _sn_coap_builder_calc_needed_packet_data_size_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$$65$i = 0, $$0104 = 0, $$012$lcssa$i54$i = 0, $$012$lcssa$i54$i146 = 0, $$012$lcssa$i54$i181 = 0, $$012$lcssa$i54$i216 = 0, $$012$lcssa$i54$i238 = 0, $$01213$i$i = 0, $$01213$i$i142 = 0, $$01213$i$i177 = 0, $$01213$i$i212 = 0, $$01213$i$i234 = 0, $$014$i$i = 0, $$014$i$i141 = 0, $$014$i$i176 = 0, $$014$i$i211 = 0, $$014$i$i233 = 0, $$02441$i = 0, $$02441$i157 = 0, $$02441$i192 = 0, $$02441$i222 = 0, $$02441$i244 = 0, $$02540$i = 0, $$02540$i158 = 0, $$02540$i193 = 0, $$02540$i223 = 0, $$02540$i245 = 0, $$028$lcssa$i = 0, $$028$lcssa$i165 = 0, $$028$lcssa$i200 = 0, $$028$lcssa$i230 = 0, $$028$lcssa$i252 = 0, $$02839$i = 0, $$02839$i159 = 0, $$02839$i194 = 0, $$02839$i224 = 0, $$02839$i246 = 0, $$03138$i = 0, $$03138$i160 = 0, $$03138$i195 = 0, $$03138$i225 = 0, $$03138$i247 = 0, $$03239$i = 0, $$03239$i$us = 0, $$03239$i148 = 0, $$03239$i183 = 0, $$03239$i183$us = 0, $$03239$us$i = 0, $$03239$us46$i = 0, $$03239$us46$i$us = 0, $$03538$i = 0, $$03538$i$us = 0, $$03538$i149 = 0, $$03538$i184 = 0, $$03538$i184$us = 0, $$03538$us$i = 0, $$03538$us47$i = 0, $$03538$us47$i$us = 0, $$10 = 0, $$1058$i = 0, $$11 = 0, $$11$i = 0, $$1105 = 0, $$1159$i = 0, $$12 = 0, $$120$232$i = 0, $$120$232$i121 = 0, $$120$232$i129 = 0, $$120$232$i137 = 0, $$120$232$i172 = 0, $$120$232$i207 = 0, $$120$232$i259 = 0, $$120$232$i267 = 0, $$120$232$i275 = 0, $$120$3$i = 0, $$120$3$i122 = 0, $$120$3$i130 = 0, $$120$3$i138 = 0, $$120$3$i173 = 0, $$120$3$i208 = 0, $$120$3$i260 = 0, $$120$3$i268 = 0, $$120$3$i276 = 0, $$126$i = 0, $$126$i164 = 0, $$126$i199 = 0, $$126$i229 = 0, $$126$i251 = 0, $$1260$i = 0, $$129$i = 0, $$129$i163 = 0, $$129$i198 = 0, $$129$i228 = 0, $$129$i250 = 0, $$13 = 0, $$13$i = 0, $$133$i = 0, $$133$i152 = 0, $$133$i187 = 0, $$133$us49$i = 0, $$1361$i = 0, $$14 = 0, $$1462$i = 0, $$15 = 0, $$16 = 0, $$16$i = 0, $$17 = 0, $$18 = 0, $$2 = 0, $$2108 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$5$i = 0, $$553$$$i = 0, $$553$$$i$ = 0, $$553$$i = 0, $$6 = 0, $$7 = 0, $$7$i = 0, $$8 = 0, $$9 = 0, $$9$i = 0, $$957$i = 0, $$lcssa296 = 0, $$lcssa297 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $115 = 0, $131 = 0, $133 = 0, $134 = 0, $136 = 0, $139 = 0, $149 = 0, $16 = 0, $17 = 0, $174 = 0, $186 = 0, $189 = 0, $19 = 0, $191 = 0, $194 = 0, $203 = 0, $208 = 0, $21 = 0, $224 = 0, $225 = 0, $234 = 0, $24 = 0, $249 = 0, $252 = 0, $254 = 0, $257 = 0, $266 = 0, $271 = 0, $287 = 0, $288 = 0, $297 = 0, $312 = 0, $315 = 0, $317 = 0, $320 = 0, $33 = 0, $330 = 0, $347 = 0, $356 = 0, $371 = 0, $375 = 0, $38 = 0, $389 = 0, $406 = 0, $418 = 0, $426 = 0, $428 = 0, $466 = 0, $474 = 0, $475 = 0, $504 = 0, $517 = 0, $54 = 0, $55 = 0, $64 = 0, $65 = 0, $79 = 0, $80 = 0, $82 = 0, $9 = 0, $97 = 0, $merge$i = 0, $narrow$i = 0, $phitmp$i$i = 0, $phitmp$i$i144 = 0, $phitmp$i$i179 = 0, $phitmp$i$i214 = 0, $phitmp$i$i236 = 0, label = 0;
 if (!$0) {
  $$2108 = 0; //@line 2904
  return $$2108 | 0; //@line 2905
 }
 if ((HEAP32[$0 + 12 >> 2] | 0) == 48) {
  $$2108 = 4; //@line 2911
  return $$2108 | 0; //@line 2912
 }
 do {
  if (!(HEAP32[$0 + 28 >> 2] | 0)) {
   $$0104 = 4; //@line 2919
  } else {
   $9 = HEAP8[$0 >> 0] | 0; //@line 2921
   if (($9 + -1 & 255) > 7) {
    $$2108 = 0; //@line 2925
    return $$2108 | 0; //@line 2926
   } else {
    $$0104 = ($9 & 255) + 4 & 65535; //@line 2931
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2937
 $17 = ($16 | 0) == 0; //@line 2938
 do {
  if ($17) {
   $$1105 = $$0104; //@line 2941
  } else {
   $19 = HEAP16[$0 + 22 >> 1] | 0; //@line 2944
   $21 = ($19 & 65535) + -1 | 0; //@line 2946
   if (($19 & 65535) > 2) {
    $$01213$i$i = 0; //@line 2949
    $$014$i$i = 1; //@line 2949
    $24 = 1; //@line 2949
    do {
     $$01213$i$i = $$01213$i$i + ((HEAP8[$16 + $24 >> 0] | 0) == 47 & 1) << 24 >> 24; //@line 2955
     $$014$i$i = $$014$i$i + 1 << 16 >> 16; //@line 2956
     $24 = $$014$i$i & 65535; //@line 2957
    } while (($21 | 0) > ($24 | 0));
    $phitmp$i$i = $$01213$i$i + 1 << 24 >> 24; //@line 2965
    if (!($phitmp$i$i << 24 >> 24)) {
     $$2108 = 0; //@line 2968
     return $$2108 | 0; //@line 2969
    } else {
     $$012$lcssa$i54$i = $phitmp$i$i; //@line 2971
    }
   } else {
    $$012$lcssa$i54$i = 1; //@line 2974
   }
   L21 : do {
    if (!($19 << 16 >> 16)) {
     $$03239$i$us = 0; //@line 2979
     $$03538$i$us = 0; //@line 2979
     do {
      $33 = $$03239$i$us + 1 | 0; //@line 2981
      $$03239$i$us = $33 & 65535; //@line 2982
      $$03538$i$us = $$03538$i$us + 1 << 24 >> 24; //@line 2983
     } while (($$03538$i$us & 255) < ($$012$lcssa$i54$i & 255));
     $$lcssa301 = $33 & 65535; //@line 2992
     $$lcssa302 = $$03239$i$us; //@line 2992
    } else {
     $$03239$i = 0; //@line 2994
     $$03538$i = 0; //@line 2994
     while (1) {
      $$02441$i = 0; //@line 2996
      $$02540$i = 0; //@line 2996
      $$02839$i = 0; //@line 2996
      $$03138$i = $16; //@line 2996
      while (1) {
       $38 = (HEAP8[$$03138$i >> 0] | 0) != 47; //@line 2999
       if ($$02839$i << 16 >> 16 == 0 | $38) {
        $$126$i = $$02540$i; //@line 3005
        $$129$i = $$02839$i + ($38 & 1) << 16 >> 16; //@line 3005
       } else {
        if ($$02540$i << 24 >> 24 == $$03538$i << 24 >> 24) {
         $$028$lcssa$i = $$02839$i; //@line 3009
         break;
        }
        $$126$i = $$02540$i + 1 << 24 >> 24; //@line 3013
        $$129$i = 0; //@line 3013
       }
       $$02441$i = $$02441$i + 1 << 16 >> 16; //@line 3016
       if (($$02441$i & 65535) >= ($19 & 65535)) {
        $$028$lcssa$i = $$129$i; //@line 3021
        break;
       } else {
        $$02540$i = $$126$i; //@line 3019
        $$02839$i = $$129$i; //@line 3019
        $$03138$i = $$03138$i + 1 | 0; //@line 3019
       }
      }
      if (($$028$lcssa$i & 65535) > 255) {
       $$2108 = 0; //@line 3027
       break;
      }
      if (($$028$lcssa$i & 65535) < 13) {
       $$133$i = $$03239$i + 1 << 16 >> 16; //@line 3034
      } else {
       $$133$i = ($$03239$i & 65535) + 2 & 65535; //@line 3039
      }
      $54 = ($$133$i & 65535) + ($$028$lcssa$i & 65535) | 0; //@line 3042
      $55 = $54 & 65535; //@line 3043
      $$03538$i = $$03538$i + 1 << 24 >> 24; //@line 3044
      if (($$03538$i & 255) >= ($$012$lcssa$i54$i & 255)) {
       $$lcssa301 = $55; //@line 3049
       $$lcssa302 = $54; //@line 3049
       break L21;
      } else {
       $$03239$i = $55; //@line 3047
      }
     }
     return $$2108 | 0; //@line 3053
    }
   } while (0);
   if (!($$lcssa301 << 16 >> 16)) {
    $$2108 = 0; //@line 3058
    return $$2108 | 0; //@line 3059
   } else {
    $$1105 = $$lcssa302 + ($$0104 & 65535) & 65535; //@line 3064
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$0 + 16 >> 2] | 0; //@line 3070
 $65 = ($64 | 0) == -1; //@line 3071
 if ($65) {
  $$2 = $$1105; //@line 3073
 } else {
  if ($64 >>> 0 > 65535) {
   $$2108 = 0; //@line 3077
   return $$2108 | 0; //@line 3078
  }
  if ($64 << 8 >>> 0 > 16777215) {
   $$120$232$i275 = 3; //@line 3083
   label = 31; //@line 3084
  } else {
   if ($64 << 16 >>> 0 > 16777215) {
    $$120$232$i275 = 2; //@line 3089
    label = 31; //@line 3090
   } else {
    if ($64 << 24 >>> 0 > 16777215) {
     $$120$232$i275 = 1; //@line 3095
     label = 31; //@line 3096
    } else {
     $$120$3$i276 = 0; //@line 3098
    }
   }
  }
  if ((label | 0) == 31) {
   $$120$3$i276 = $$120$232$i275; //@line 3103
  }
  $$2 = ($$120$3$i276 + 1 & 255) + ($$1105 & 65535) & 65535; //@line 3110
 }
 $79 = HEAP32[$0 + 40 >> 2] | 0; //@line 3113
 $80 = ($79 | 0) == 0; //@line 3114
 do {
  if ($80) {
   $$18 = $$2; //@line 3117
  } else {
   $82 = HEAP32[$79 + 12 >> 2] | 0; //@line 3120
   if (($82 | 0) == -1) {
    $$3 = $$2; //@line 3123
   } else {
    if ($82 >>> 0 > 65535) {
     $$2108 = 0; //@line 3127
     return $$2108 | 0; //@line 3128
    }
    if ($82 << 8 >>> 0 > 16777215) {
     $$120$232$i267 = 3; //@line 3133
     label = 39; //@line 3134
    } else {
     if ($82 << 16 >>> 0 > 16777215) {
      $$120$232$i267 = 2; //@line 3139
      label = 39; //@line 3140
     } else {
      if ($82 << 24 >>> 0 > 16777215) {
       $$120$232$i267 = 1; //@line 3145
       label = 39; //@line 3146
      } else {
       $$120$3$i268 = 0; //@line 3148
      }
     }
    }
    if ((label | 0) == 39) {
     $$120$3$i268 = $$120$232$i267; //@line 3153
    }
    $$3 = ($$120$3$i268 + 1 & 255) + ($$2 & 65535) & 65535; //@line 3160
   }
   $97 = HEAP32[$79 + 16 >> 2] | 0; //@line 3163
   if (($97 | 0) == 60) {
    $$4 = $$3; //@line 3166
   } else {
    if ($97 >>> 0 > 16777215) {
     $$120$232$i259 = 4; //@line 3170
     label = 46; //@line 3171
    } else {
     if ($97 << 8 >>> 0 > 16777215) {
      $$120$232$i259 = 3; //@line 3176
      label = 46; //@line 3177
     } else {
      if ($97 << 16 >>> 0 > 16777215) {
       $$120$232$i259 = 2; //@line 3182
       label = 46; //@line 3183
      } else {
       if ($97 << 24 >>> 0 > 16777215) {
        $$120$232$i259 = 1; //@line 3188
        label = 46; //@line 3189
       } else {
        $$120$3$i260 = 0; //@line 3191
       }
      }
     }
    }
    if ((label | 0) == 46) {
     $$120$3$i260 = $$120$232$i259; //@line 3197
    }
    $$4 = ($$120$3$i260 + 1 & 255) + ($$3 & 65535) & 65535; //@line 3204
   }
   if (!(HEAP32[$79 + 44 >> 2] | 0)) {
    $$6 = $$4; //@line 3210
   } else {
    $115 = HEAP16[$79 + 2 >> 1] | 0; //@line 3213
    do {
     if (($115 + -1 & 65535) < 12) {
      $$5 = $$4 + 1 << 16 >> 16; //@line 3219
     } else {
      if (($115 + -13 & 65535) < 257) {
       $$5 = ($$4 & 65535) + 2 & 65535; //@line 3227
       break;
      }
      if (($115 + -270 & 65535) < 765) {
       $$5 = ($$4 & 65535) + 3 & 65535; //@line 3236
       break;
      } else {
       $$2108 = 0; //@line 3239
       return $$2108 | 0; //@line 3240
      }
     }
    } while (0);
    $$6 = ($115 & 65535) + ($$5 & 65535) & 65535; //@line 3248
   }
   $131 = HEAP32[$79 + 48 >> 2] | 0; //@line 3251
   do {
    if (!$131) {
     $$7 = $$6; //@line 3255
    } else {
     $133 = HEAP8[$79 >> 0] | 0; //@line 3257
     $134 = $133 & 255; //@line 3258
     $136 = ($133 & 255) + -1 | 0; //@line 3260
     if (($133 & 255) > 2) {
      $$01213$i$i234 = 0; //@line 3263
      $$014$i$i233 = 1; //@line 3263
      $139 = 1; //@line 3263
      do {
       $$01213$i$i234 = $$01213$i$i234 + ((HEAP8[$131 + $139 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3269
       $$014$i$i233 = $$014$i$i233 + 1 << 16 >> 16; //@line 3270
       $139 = $$014$i$i233 & 65535; //@line 3271
      } while (($136 | 0) > ($139 | 0));
      $phitmp$i$i236 = $$01213$i$i234 + 1 << 24 >> 24; //@line 3279
      if (!($phitmp$i$i236 << 24 >> 24)) {
       $$2108 = 0; //@line 3282
       return $$2108 | 0; //@line 3283
      } else {
       $$012$lcssa$i54$i238 = $phitmp$i$i236; //@line 3285
      }
     } else {
      $$012$lcssa$i54$i238 = 1; //@line 3288
     }
     if (!($133 << 24 >> 24)) {
      $$2108 = 0; //@line 3292
      return $$2108 | 0; //@line 3293
     } else {
      $$03239$us$i = 0; //@line 3295
      $$03538$us$i = 0; //@line 3295
     }
     do {
      $$02441$i244 = 0; //@line 3298
      $$02540$i245 = 0; //@line 3298
      $$02839$i246 = 0; //@line 3298
      $$03138$i247 = $131; //@line 3298
      while (1) {
       $149 = (HEAP8[$$03138$i247 >> 0] | 0) != 38; //@line 3301
       if ($$02839$i246 << 16 >> 16 == 0 | $149) {
        $$126$i251 = $$02540$i245; //@line 3307
        $$129$i250 = $$02839$i246 + ($149 & 1) << 16 >> 16; //@line 3307
       } else {
        if ($$02540$i245 << 24 >> 24 == $$03538$us$i << 24 >> 24) {
         $$028$lcssa$i252 = $$02839$i246; //@line 3311
         break;
        }
        $$126$i251 = $$02540$i245 + 1 << 24 >> 24; //@line 3315
        $$129$i250 = 0; //@line 3315
       }
       $$02441$i244 = $$02441$i244 + 1 << 16 >> 16; //@line 3318
       if (($$02441$i244 & 65535) >= ($134 & 65535)) {
        $$028$lcssa$i252 = $$129$i250; //@line 3323
        break;
       } else {
        $$02540$i245 = $$126$i251; //@line 3321
        $$02839$i246 = $$129$i250; //@line 3321
        $$03138$i247 = $$03138$i247 + 1 | 0; //@line 3321
       }
      }
      if (($$028$lcssa$i252 + -1 & 65535) > 7) {
       $$2108 = 0; //@line 3330
       label = 204; //@line 3331
       break;
      }
      $$03239$us$i = ($$03239$us$i + 1 & 65535) + ($$028$lcssa$i252 & 65535) | 0; //@line 3337
      $$03538$us$i = $$03538$us$i + 1 << 24 >> 24; //@line 3338
     } while (($$03538$us$i & 255) < ($$012$lcssa$i54$i238 & 255));
     if ((label | 0) == 204) {
      return $$2108 | 0; //@line 3347
     }
     if (!(($$03239$us$i & 65535) << 16 >> 16)) {
      $$2108 = 0; //@line 3352
      return $$2108 | 0; //@line 3353
     } else {
      $$7 = $$03239$us$i + ($$6 & 65535) & 65535; //@line 3358
      break;
     }
    }
   } while (0);
   if (!(HEAP32[$79 + 52 >> 2] | 0)) {
    $$9 = $$7; //@line 3367
   } else {
    $174 = HEAP16[$79 + 4 >> 1] | 0; //@line 3370
    do {
     if (($174 + -1 & 65535) < 12) {
      $$8 = $$7 + 1 << 16 >> 16; //@line 3376
     } else {
      if (($174 + -13 & 65535) < 243) {
       $$8 = ($$7 & 65535) + 2 & 65535; //@line 3384
       break;
      } else {
       $$2108 = 0; //@line 3387
       return $$2108 | 0; //@line 3388
      }
     }
    } while (0);
    $$9 = ($174 & 65535) + ($$8 & 65535) & 65535; //@line 3396
   }
   $186 = HEAP32[$79 + 56 >> 2] | 0; //@line 3399
   do {
    if (!$186) {
     $$10 = $$9; //@line 3403
    } else {
     $189 = HEAP16[$79 + 6 >> 1] | 0; //@line 3406
     $191 = ($189 & 65535) + -1 | 0; //@line 3408
     if (($189 & 65535) > 2) {
      $$01213$i$i212 = 0; //@line 3411
      $$014$i$i211 = 1; //@line 3411
      $194 = 1; //@line 3411
      do {
       $$01213$i$i212 = $$01213$i$i212 + ((HEAP8[$186 + $194 >> 0] | 0) == 47 & 1) << 24 >> 24; //@line 3417
       $$014$i$i211 = $$014$i$i211 + 1 << 16 >> 16; //@line 3418
       $194 = $$014$i$i211 & 65535; //@line 3419
      } while (($191 | 0) > ($194 | 0));
      $phitmp$i$i214 = $$01213$i$i212 + 1 << 24 >> 24; //@line 3427
      if (!($phitmp$i$i214 << 24 >> 24)) {
       $$2108 = 0; //@line 3430
       return $$2108 | 0; //@line 3431
      } else {
       $$012$lcssa$i54$i216 = $phitmp$i$i214; //@line 3433
      }
     } else {
      $$012$lcssa$i54$i216 = 1; //@line 3436
     }
     L141 : do {
      if (!($189 << 16 >> 16)) {
       $$03239$us46$i$us = 0; //@line 3441
       $$03538$us47$i$us = 0; //@line 3441
       do {
        $203 = $$03239$us46$i$us + 1 | 0; //@line 3443
        $$03239$us46$i$us = $203 & 65535; //@line 3444
        $$03538$us47$i$us = $$03538$us47$i$us + 1 << 24 >> 24; //@line 3445
       } while (($$03538$us47$i$us & 255) < ($$012$lcssa$i54$i216 & 255));
       $$lcssa298 = $203 & 65535; //@line 3454
       $$lcssa299 = $$03239$us46$i$us; //@line 3454
      } else {
       $$03239$us46$i = 0; //@line 3456
       $$03538$us47$i = 0; //@line 3456
       while (1) {
        $$02441$i222 = 0; //@line 3458
        $$02540$i223 = 0; //@line 3458
        $$02839$i224 = 0; //@line 3458
        $$03138$i225 = $186; //@line 3458
        while (1) {
         $208 = (HEAP8[$$03138$i225 >> 0] | 0) != 47; //@line 3461
         if ($$02839$i224 << 16 >> 16 == 0 | $208) {
          $$126$i229 = $$02540$i223; //@line 3467
          $$129$i228 = $$02839$i224 + ($208 & 1) << 16 >> 16; //@line 3467
         } else {
          if ($$02540$i223 << 24 >> 24 == $$03538$us47$i << 24 >> 24) {
           $$028$lcssa$i230 = $$02839$i224; //@line 3471
           break;
          }
          $$126$i229 = $$02540$i223 + 1 << 24 >> 24; //@line 3475
          $$129$i228 = 0; //@line 3475
         }
         $$02441$i222 = $$02441$i222 + 1 << 16 >> 16; //@line 3478
         if (($$02441$i222 & 65535) >= ($189 & 65535)) {
          $$028$lcssa$i230 = $$129$i228; //@line 3483
          break;
         } else {
          $$02540$i223 = $$126$i229; //@line 3481
          $$02839$i224 = $$129$i228; //@line 3481
          $$03138$i225 = $$03138$i225 + 1 | 0; //@line 3481
         }
        }
        if (($$028$lcssa$i230 & 65535) > 255) {
         $$2108 = 0; //@line 3489
         break;
        }
        if (($$028$lcssa$i230 & 65535) < 13) {
         $$133$us49$i = $$03239$us46$i + 1 << 16 >> 16; //@line 3496
        } else {
         $$133$us49$i = ($$03239$us46$i & 65535) + 2 & 65535; //@line 3501
        }
        $224 = ($$133$us49$i & 65535) + ($$028$lcssa$i230 & 65535) | 0; //@line 3504
        $225 = $224 & 65535; //@line 3505
        $$03538$us47$i = $$03538$us47$i + 1 << 24 >> 24; //@line 3506
        if (($$03538$us47$i & 255) >= ($$012$lcssa$i54$i216 & 255)) {
         $$lcssa298 = $225; //@line 3511
         $$lcssa299 = $224; //@line 3511
         break L141;
        } else {
         $$03239$us46$i = $225; //@line 3509
        }
       }
       return $$2108 | 0; //@line 3515
      }
     } while (0);
     if (!($$lcssa298 << 16 >> 16)) {
      $$2108 = 0; //@line 3520
      return $$2108 | 0; //@line 3521
     } else {
      $$10 = $$lcssa299 + ($$9 & 65535) & 65535; //@line 3526
      break;
     }
    }
   } while (0);
   $234 = HEAP32[$79 + 28 >> 2] | 0; //@line 3532
   if (($234 | 0) == -1) {
    $$11 = $$10; //@line 3535
   } else {
    if ($234 >>> 0 > 65535) {
     $$2108 = 0; //@line 3539
     return $$2108 | 0; //@line 3540
    }
    if ($234 << 8 >>> 0 > 16777215) {
     $$120$232$i207 = 3; //@line 3545
     label = 102; //@line 3546
    } else {
     if ($234 << 16 >>> 0 > 16777215) {
      $$120$232$i207 = 2; //@line 3551
      label = 102; //@line 3552
     } else {
      if ($234 << 24 >>> 0 > 16777215) {
       $$120$232$i207 = 1; //@line 3557
       label = 102; //@line 3558
      } else {
       $$120$3$i208 = 0; //@line 3560
      }
     }
    }
    if ((label | 0) == 102) {
     $$120$3$i208 = $$120$232$i207; //@line 3565
    }
    $$11 = ($$120$3$i208 + 1 & 255) + ($$10 & 65535) & 65535; //@line 3572
   }
   $249 = HEAP32[$79 + 60 >> 2] | 0; //@line 3575
   do {
    if (!$249) {
     $$12 = $$11; //@line 3579
    } else {
     $252 = HEAP16[$79 + 8 >> 1] | 0; //@line 3582
     $254 = ($252 & 65535) + -1 | 0; //@line 3584
     if (($252 & 65535) > 2) {
      $$01213$i$i177 = 0; //@line 3587
      $$014$i$i176 = 1; //@line 3587
      $257 = 1; //@line 3587
      do {
       $$01213$i$i177 = $$01213$i$i177 + ((HEAP8[$249 + $257 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3593
       $$014$i$i176 = $$014$i$i176 + 1 << 16 >> 16; //@line 3594
       $257 = $$014$i$i176 & 65535; //@line 3595
      } while (($254 | 0) > ($257 | 0));
      $phitmp$i$i179 = $$01213$i$i177 + 1 << 24 >> 24; //@line 3603
      if (!($phitmp$i$i179 << 24 >> 24)) {
       $$2108 = 0; //@line 3606
       return $$2108 | 0; //@line 3607
      } else {
       $$012$lcssa$i54$i181 = $phitmp$i$i179; //@line 3609
      }
     } else {
      $$012$lcssa$i54$i181 = 1; //@line 3612
     }
     L186 : do {
      if (!($252 << 16 >> 16)) {
       $$03239$i183$us = 0; //@line 3617
       $$03538$i184$us = 0; //@line 3617
       do {
        $266 = $$03239$i183$us + 1 | 0; //@line 3619
        $$03239$i183$us = $266 & 65535; //@line 3620
        $$03538$i184$us = $$03538$i184$us + 1 << 24 >> 24; //@line 3621
       } while (($$03538$i184$us & 255) < ($$012$lcssa$i54$i181 & 255));
       $$lcssa296 = $266 & 65535; //@line 3630
       $$lcssa297 = $$03239$i183$us; //@line 3630
      } else {
       $$03239$i183 = 0; //@line 3632
       $$03538$i184 = 0; //@line 3632
       while (1) {
        $$02441$i192 = 0; //@line 3634
        $$02540$i193 = 0; //@line 3634
        $$02839$i194 = 0; //@line 3634
        $$03138$i195 = $249; //@line 3634
        while (1) {
         $271 = (HEAP8[$$03138$i195 >> 0] | 0) != 38; //@line 3637
         if ($$02839$i194 << 16 >> 16 == 0 | $271) {
          $$126$i199 = $$02540$i193; //@line 3643
          $$129$i198 = $$02839$i194 + ($271 & 1) << 16 >> 16; //@line 3643
         } else {
          if ($$02540$i193 << 24 >> 24 == $$03538$i184 << 24 >> 24) {
           $$028$lcssa$i200 = $$02839$i194; //@line 3647
           break;
          }
          $$126$i199 = $$02540$i193 + 1 << 24 >> 24; //@line 3651
          $$129$i198 = 0; //@line 3651
         }
         $$02441$i192 = $$02441$i192 + 1 << 16 >> 16; //@line 3654
         if (($$02441$i192 & 65535) >= ($252 & 65535)) {
          $$028$lcssa$i200 = $$129$i198; //@line 3659
          break;
         } else {
          $$02540$i193 = $$126$i199; //@line 3657
          $$02839$i194 = $$129$i198; //@line 3657
          $$03138$i195 = $$03138$i195 + 1 | 0; //@line 3657
         }
        }
        if (($$028$lcssa$i200 & 65535) > 255) {
         $$2108 = 0; //@line 3665
         break;
        }
        if (($$028$lcssa$i200 & 65535) < 13) {
         $$133$i187 = $$03239$i183 + 1 << 16 >> 16; //@line 3672
        } else {
         $$133$i187 = ($$03239$i183 & 65535) + 2 & 65535; //@line 3677
        }
        $287 = ($$133$i187 & 65535) + ($$028$lcssa$i200 & 65535) | 0; //@line 3680
        $288 = $287 & 65535; //@line 3681
        $$03538$i184 = $$03538$i184 + 1 << 24 >> 24; //@line 3682
        if (($$03538$i184 & 255) >= ($$012$lcssa$i54$i181 & 255)) {
         $$lcssa296 = $288; //@line 3687
         $$lcssa297 = $287; //@line 3687
         break L186;
        } else {
         $$03239$i183 = $288; //@line 3685
        }
       }
       return $$2108 | 0; //@line 3691
      }
     } while (0);
     if (!($$lcssa296 << 16 >> 16)) {
      $$2108 = 0; //@line 3696
      return $$2108 | 0; //@line 3697
     } else {
      $$12 = $$lcssa297 + ($$11 & 65535) & 65535; //@line 3702
      break;
     }
    }
   } while (0);
   $297 = HEAP32[$79 + 32 >> 2] | 0; //@line 3708
   if (($297 | 0) == -1) {
    $$13 = $$12; //@line 3711
   } else {
    if ($297 >>> 0 > 16777215) {
     $$2108 = 0; //@line 3715
     return $$2108 | 0; //@line 3716
    }
    do {
     if ($297 << 8 >>> 0 > 16777215) {
      $$120$232$i172 = 3; //@line 3722
      label = 129; //@line 3723
     } else {
      if ($297 << 16 >>> 0 > 16777215) {
       $$120$232$i172 = 2; //@line 3728
       label = 129; //@line 3729
       break;
      }
      if ($297 << 24 >>> 0 > 16777215) {
       $$120$232$i172 = 1; //@line 3735
       label = 129; //@line 3736
      } else {
       $$120$3$i173 = 0; //@line 3738
      }
     }
    } while (0);
    if ((label | 0) == 129) {
     $$120$3$i173 = $$120$232$i172; //@line 3743
    }
    $$13 = ($$120$3$i173 + 1 & 255) + ($$12 & 65535) & 65535; //@line 3750
   }
   $312 = HEAP32[$79 + 64 >> 2] | 0; //@line 3753
   do {
    if (!$312) {
     $$14 = $$13; //@line 3757
    } else {
     $315 = HEAP16[$79 + 10 >> 1] | 0; //@line 3760
     $317 = ($315 & 65535) + -1 | 0; //@line 3762
     do {
      if (($315 & 65535) > 2) {
       $$01213$i$i142 = 0; //@line 3766
       $$014$i$i141 = 1; //@line 3766
       $320 = 1; //@line 3766
       do {
        $$01213$i$i142 = $$01213$i$i142 + ((HEAP8[$312 + $320 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3772
        $$014$i$i141 = $$014$i$i141 + 1 << 16 >> 16; //@line 3773
        $320 = $$014$i$i141 & 65535; //@line 3774
       } while (($317 | 0) > ($320 | 0));
       $phitmp$i$i144 = $$01213$i$i142 + 1 << 24 >> 24; //@line 3782
       if (!($phitmp$i$i144 << 24 >> 24)) {
        $$2108 = 0; //@line 3785
       } else {
        $$012$lcssa$i54$i146 = $phitmp$i$i144; //@line 3787
        break;
       }
       return $$2108 | 0; //@line 3790
      } else {
       $$012$lcssa$i54$i146 = 1; //@line 3792
      }
     } while (0);
     if (!($315 << 16 >> 16)) {
      $$2108 = 0; //@line 3797
      return $$2108 | 0; //@line 3798
     } else {
      $$03239$i148 = 0; //@line 3800
      $$03538$i149 = 0; //@line 3800
     }
     do {
      $$02441$i157 = 0; //@line 3803
      $$02540$i158 = 0; //@line 3803
      $$02839$i159 = 0; //@line 3803
      $$03138$i160 = $312; //@line 3803
      while (1) {
       $330 = (HEAP8[$$03138$i160 >> 0] | 0) != 38; //@line 3806
       if ($$02839$i159 << 16 >> 16 == 0 | $330) {
        $$126$i164 = $$02540$i158; //@line 3812
        $$129$i163 = $$02839$i159 + ($330 & 1) << 16 >> 16; //@line 3812
       } else {
        if ($$02540$i158 << 24 >> 24 == $$03538$i149 << 24 >> 24) {
         $$028$lcssa$i165 = $$02839$i159; //@line 3816
         break;
        }
        $$126$i164 = $$02540$i158 + 1 << 24 >> 24; //@line 3820
        $$129$i163 = 0; //@line 3820
       }
       $$02441$i157 = $$02441$i157 + 1 << 16 >> 16; //@line 3823
       if (($$02441$i157 & 65535) >= ($315 & 65535)) {
        $$028$lcssa$i165 = $$129$i163; //@line 3828
        break;
       } else {
        $$02540$i158 = $$126$i164; //@line 3826
        $$02839$i159 = $$129$i163; //@line 3826
        $$03138$i160 = $$03138$i160 + 1 | 0; //@line 3826
       }
      }
      if (($$028$lcssa$i165 + -1 & 65535) > 254) {
       $$2108 = 0; //@line 3835
       label = 204; //@line 3836
       break;
      }
      if (($$028$lcssa$i165 & 65535) < 13) {
       $$133$i152 = $$03239$i148 + 1 << 16 >> 16; //@line 3843
      } else {
       $$133$i152 = ($$03239$i148 & 65535) + 2 & 65535; //@line 3848
      }
      $347 = ($$133$i152 & 65535) + ($$028$lcssa$i165 & 65535) | 0; //@line 3851
      $$03239$i148 = $347 & 65535; //@line 3852
      $$03538$i149 = $$03538$i149 + 1 << 24 >> 24; //@line 3853
     } while (($$03538$i149 & 255) < ($$012$lcssa$i54$i146 & 255));
     if ((label | 0) == 204) {
      return $$2108 | 0; //@line 3862
     }
     if (!($$03239$i148 << 16 >> 16)) {
      $$2108 = 0; //@line 3866
      return $$2108 | 0; //@line 3867
     } else {
      $$14 = $347 + ($$13 & 65535) & 65535; //@line 3872
      break;
     }
    }
   } while (0);
   $356 = HEAP32[$79 + 36 >> 2] | 0; //@line 3878
   if (($356 | 0) == -1) {
    $$15 = $$14; //@line 3881
   } else {
    if ($356 >>> 0 > 16777215) {
     $$2108 = 0; //@line 3885
     return $$2108 | 0; //@line 3886
    }
    do {
     if ($356 << 8 >>> 0 > 16777215) {
      $$120$232$i137 = 3; //@line 3892
      label = 154; //@line 3893
     } else {
      if ($356 << 16 >>> 0 > 16777215) {
       $$120$232$i137 = 2; //@line 3898
       label = 154; //@line 3899
       break;
      }
      if ($356 << 24 >>> 0 > 16777215) {
       $$120$232$i137 = 1; //@line 3905
       label = 154; //@line 3906
      } else {
       $$120$3$i138 = 0; //@line 3908
      }
     }
    } while (0);
    if ((label | 0) == 154) {
     $$120$3$i138 = $$120$232$i137; //@line 3913
    }
    $$15 = ($$120$3$i138 + 1 & 255) + ($$14 & 65535) & 65535; //@line 3920
   }
   $371 = HEAP8[$79 + 1 >> 0] | 0; //@line 3923
   if (!($371 & 1)) {
    $$16 = $$15; //@line 3927
   } else {
    $375 = HEAP32[$79 + 20 >> 2] | 0; //@line 3930
    do {
     if ($375 >>> 0 > 16777215) {
      $$120$232$i129 = 4; //@line 3934
      label = 161; //@line 3935
     } else {
      if ($375 << 8 >>> 0 > 16777215) {
       $$120$232$i129 = 3; //@line 3940
       label = 161; //@line 3941
       break;
      }
      if ($375 << 16 >>> 0 > 16777215) {
       $$120$232$i129 = 2; //@line 3947
       label = 161; //@line 3948
       break;
      }
      if ($375 << 24 >>> 0 > 16777215) {
       $$120$232$i129 = 1; //@line 3954
       label = 161; //@line 3955
      } else {
       $$120$3$i130 = 0; //@line 3957
      }
     }
    } while (0);
    if ((label | 0) == 161) {
     $$120$3$i130 = $$120$232$i129; //@line 3962
    }
    $$16 = ($$120$3$i130 + 1 & 255) + ($$15 & 65535) & 65535; //@line 3969
   }
   $389 = HEAP32[$79 + 40 >> 2] | 0; //@line 3972
   if (($389 | 0) == -1) {
    $$17 = $$16; //@line 3975
   } else {
    if ($389 >>> 0 > 16777215) {
     $$2108 = 0; //@line 3979
     return $$2108 | 0; //@line 3980
    }
    do {
     if ($389 << 8 >>> 0 > 16777215) {
      $$120$232$i121 = 3; //@line 3986
      label = 168; //@line 3987
     } else {
      if ($389 << 16 >>> 0 > 16777215) {
       $$120$232$i121 = 2; //@line 3992
       label = 168; //@line 3993
       break;
      }
      if ($389 << 24 >>> 0 > 16777215) {
       $$120$232$i121 = 1; //@line 3999
       label = 168; //@line 4000
      } else {
       $$120$3$i122 = 0; //@line 4002
      }
     }
    } while (0);
    if ((label | 0) == 168) {
     $$120$3$i122 = $$120$232$i121; //@line 4007
    }
    $$17 = ($$120$3$i122 + 1 & 255) + ($$16 & 65535) & 65535; //@line 4014
   }
   if (!($371 & 2)) {
    $$18 = $$17; //@line 4019
    break;
   }
   $406 = HEAP32[$79 + 24 >> 2] | 0; //@line 4023
   do {
    if ($406 >>> 0 > 16777215) {
     $$120$232$i = 5; //@line 4027
     label = 175; //@line 4028
    } else {
     if ($406 << 8 >>> 0 > 16777215) {
      $$120$232$i = 4; //@line 4033
      label = 175; //@line 4034
      break;
     }
     if ($406 << 16 >>> 0 > 16777215) {
      $$120$232$i = 3; //@line 4040
      label = 175; //@line 4041
      break;
     }
     if ($406 << 24 >>> 0 > 16777215) {
      $$120$232$i = 2; //@line 4047
      label = 175; //@line 4048
     } else {
      $$120$3$i = 1; //@line 4050
     }
    }
   } while (0);
   if ((label | 0) == 175) {
    $$120$3$i = $$120$232$i; //@line 4055
   }
   $$18 = $$120$3$i + ($$17 & 65535) & 65535; //@line 4060
  }
 } while (0);
 $418 = HEAP16[$0 + 24 >> 1] | 0; //@line 4064
 $$ = ($418 & 65535) + ($$18 & 65535) + ($418 << 16 >> 16 != 0 & 1) | 0; //@line 4070
 do {
  if ($80) {
   $merge$i = 0; //@line 4073
  } else {
   $426 = (HEAP32[$79 + 64 >> 2] | 0) == 0; //@line 4077
   $428 = HEAP32[$79 + 12 >> 2] | 0; //@line 4079
   if ($426 & ($428 | 0) == -1) {
    if (!(HEAP32[$79 + 60 >> 2] | 0)) {
     if ((HEAP32[$79 + 40 >> 2] | 0) == -1) {
      if ((HEAP32[$79 + 36 >> 2] | 0) == -1) {
       if (!(HEAP32[$79 + 44 >> 2] | 0)) {
        if ((HEAP32[$79 + 16 >> 2] | 0) == 60) {
         if (!(HEAP8[$79 + 1 >> 0] & 3)) {
          $merge$i = 0; //@line 4108
          break;
         } else {
          $475 = -1; //@line 4111
         }
        } else {
         $475 = -1; //@line 4114
        }
       } else {
        $475 = -1; //@line 4117
       }
      } else {
       $475 = -1; //@line 4120
      }
     } else {
      $475 = -1; //@line 4123
     }
    } else {
     $475 = -1; //@line 4126
    }
   } else {
    $475 = $428; //@line 4129
   }
   $$553$$i = $65 ? $17 ? (HEAP32[$79 + 56 >> 2] | 0) == 0 ? (HEAP32[$79 + 28 >> 2] | 0) == -1 ? (HEAP32[$79 + 32 >> 2] | 0) == -1 ? (HEAP32[$79 + 48 >> 2] | 0) == 0 ? (HEAP32[$79 + 52 >> 2] | 0) == 0 ? 0 : 3 : 4 : 6 : 7 : 8 : 11 : 12; //@line 4152
   $466 = (HEAP32[$79 + 16 >> 2] | 0) == 60; //@line 4155
   $$553$$$i = $466 ? $$553$$i : 14; //@line 4159
   $narrow$i = (14 - ($$553$$i & 255) | 0) > 12 & ($466 ^ 1); //@line 4161
   $$$65$i = $narrow$i & 1; //@line 4162
   $$553$$$i$ = $426 ? $$553$$$i : 15; //@line 4168
   $474 = ($475 | 0) == -1; //@line 4170
   $$957$i = $474 ? $$553$$$i$ : 17; //@line 4174
   $$5$i = ($426 ? $$$65$i : (15 - ($$553$$$i & 255) | 0) > 12 ? $narrow$i ? 2 : 1 : $$$65$i) + ((17 - ($$553$$$i$ & 255) | 0) > 12 & ($474 ^ 1) & 1) << 24 >> 24; //@line 4178
   if (!(HEAP32[$79 + 60 >> 2] | 0)) {
    $$1058$i = $$957$i; //@line 4183
    $$7$i = $$5$i; //@line 4183
   } else {
    $$1058$i = 20; //@line 4190
    $$7$i = $$5$i + ((20 - ($$957$i & 255) | 0) > 12 & 1) << 24 >> 24; //@line 4190
   }
   if ((HEAP32[$79 + 40 >> 2] | 0) == -1) {
    $$1159$i = $$1058$i; //@line 4196
    $$9$i = $$7$i; //@line 4196
   } else {
    if ((23 - ($$1058$i & 255) | 0) > 12) {
     $$1159$i = 23; //@line 4205
     $$9$i = ($$7$i & 255) + 1 & 255; //@line 4205
    } else {
     $$1159$i = 23; //@line 4207
     $$9$i = $$7$i; //@line 4207
    }
   }
   if ((HEAP32[$79 + 36 >> 2] | 0) == -1) {
    $$11$i = $$9$i; //@line 4214
    $$1260$i = $$1159$i; //@line 4214
   } else {
    if ((27 - ($$1159$i & 255) | 0) > 12) {
     $$11$i = ($$9$i & 255) + 1 & 255; //@line 4223
     $$1260$i = 27; //@line 4223
    } else {
     $$11$i = $$9$i; //@line 4225
     $$1260$i = 27; //@line 4225
    }
   }
   $504 = HEAP8[$79 + 1 >> 0] | 0; //@line 4229
   if (!($504 & 2)) {
    $$13$i = $$11$i; //@line 4233
    $$1361$i = $$1260$i; //@line 4233
   } else {
    if ((28 - ($$1260$i & 255) | 0) > 12) {
     $$13$i = ($$11$i & 255) + 1 & 255; //@line 4242
     $$1361$i = 28; //@line 4242
    } else {
     $$13$i = $$11$i; //@line 4244
     $$1361$i = 28; //@line 4244
    }
   }
   if (!(HEAP32[$79 + 44 >> 2] | 0)) {
    $$1462$i = $$1361$i; //@line 4251
    $$16$i = $$13$i; //@line 4251
   } else {
    $517 = 35 - ($$1361$i & 255) | 0; //@line 4254
    if (($517 | 0) > 12) {
     if (($517 | 0) > 269) {
      $$1462$i = 35; //@line 4266
      $$16$i = ($$13$i + 1 & 255) + 1 & 255; //@line 4266
     } else {
      $$1462$i = 35; //@line 4268
      $$16$i = ($$13$i & 255) + 1 & 255; //@line 4268
     }
    } else {
     $$1462$i = 35; //@line 4271
     $$16$i = $$13$i; //@line 4271
    }
   }
   if (!($504 & 1)) {
    $merge$i = $$16$i; //@line 4277
   } else {
    if ((60 - ($$1462$i & 255) | 0) > 12) {
     $merge$i = ($$16$i & 255) + 1 & 255; //@line 4286
    } else {
     $merge$i = $$16$i; //@line 4288
    }
   }
  }
 } while (0);
 $$2108 = $$ + ($merge$i & 255) & 65535; //@line 4296
 return $$2108 | 0; //@line 4297
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $65 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5569
 STACKTOP = STACKTOP + 288 | 0; //@line 5570
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 5570
 $3 = sp + 8 | 0; //@line 5571
 $4 = sp + 17 | 0; //@line 5572
 $5 = sp; //@line 5573
 $6 = sp + 16 | 0; //@line 5574
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $314 = ___lockfile($0) | 0; //@line 5580
 } else {
  $314 = 0; //@line 5582
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 5584
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 5588
  } else {
   $13 = $0 + 4 | 0; //@line 5590
   $14 = $0 + 100 | 0; //@line 5591
   $15 = $0 + 108 | 0; //@line 5592
   $16 = $0 + 8 | 0; //@line 5593
   $17 = $4 + 10 | 0; //@line 5594
   $18 = $4 + 33 | 0; //@line 5595
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 5596
   $$0273408 = $1; //@line 5597
   $$0283407 = 0; //@line 5597
   $$0288404 = 0; //@line 5597
   $$0305402 = 0; //@line 5597
   $20 = $11; //@line 5597
   $315 = 0; //@line 5597
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 5605
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 5608
        $52 = HEAP8[$51 >> 0] | 0; //@line 5609
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 5618
           $$2275 = $$0273408 + 2 | 0; //@line 5618
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n_727($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 5635
             $$2275 = $$0273408 + 3 | 0; //@line 5635
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5650
           $91 = HEAP32[$90 >> 2] | 0; //@line 5651
           HEAP32[$2 >> 2] = $90 + 4; //@line 5653
           $$0293 = $91; //@line 5654
           $$2275 = $51; //@line 5654
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 5663
         $$3$lcssa = $$2275; //@line 5663
        } else {
         $$0266397 = 0; //@line 5665
         $$3396 = $$2275; //@line 5665
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 5671
          $101 = $$3396 + 1 | 0; //@line 5672
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 5678
           $$3$lcssa = $101; //@line 5678
           break;
          } else {
           $$0266397 = $100; //@line 5681
           $$3396 = $101; //@line 5681
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 5685
        $108 = $$3$lcssa + 1 | 0; //@line 5687
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 5692
         $$1306 = 0; //@line 5692
         $$4 = $108; //@line 5692
         $112 = HEAP8[$108 >> 0] | 0; //@line 5692
         $318 = 0; //@line 5692
        } else {
         $$0270 = 0; //@line 5694
         $$1306 = $$0305402; //@line 5694
         $$4 = $$3$lcssa; //@line 5694
         $112 = $106; //@line 5694
         $318 = $315; //@line 5694
        }
        $111 = $$4 + 1 | 0; //@line 5696
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 5700
          $$0268 = $114 ? -2 : -1; //@line 5704
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 5704
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 5709
          $$0268 = $117 ? 3 : 1; //@line 5713
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 5713
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 5717
          $$5 = $111; //@line 5717
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 5721
          $$5 = $111; //@line 5721
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 5725
          $$5 = $111; //@line 5725
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 5729
          $$5 = $$4; //@line 5729
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 5733
          $319 = $318; //@line 5733
          label = 136; //@line 5734
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 5739
        $122 = ($120 & 47 | 0) == 3; //@line 5741
        $$ = $122 ? $120 | 32 : $120; //@line 5743
        $$$0268 = $122 ? 1 : $$0268; //@line 5744
        $trunc = $$ & 255; //@line 5745
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 5750
          $$1284 = $$0283407; //@line 5750
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 5754
          $$1284 = $$0283407; //@line 5754
          break;
         }
        case 110:
         {
          _store_int_728($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 5760
          $$11 = $$5; //@line 5761
          $$1289 = $$0288404; //@line 5761
          $$2285 = $$0283407; //@line 5761
          $$6311 = $$1306; //@line 5761
          $316 = $318; //@line 5761
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 5766
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 5768
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 5773
            $134 = HEAPU8[$127 >> 0] | 0; //@line 5776
           } else {
            $134 = ___shgetc($0) | 0; //@line 5779
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 5791
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 5794
           HEAP32[$13 >> 2] = $140; //@line 5795
           $146 = $140; //@line 5797
          }
          $$1267 = $$0266$lcssa; //@line 5804
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 5804
         }
        }
        ___shlim($0, $$1267); //@line 5807
        $148 = HEAP32[$13 >> 2] | 0; //@line 5808
        $149 = HEAP32[$14 >> 2] | 0; //@line 5809
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 5813
         $155 = $149; //@line 5814
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 5819
          $319 = $318; //@line 5819
          label = 136; //@line 5820
          break L6;
         }
         $155 = HEAP32[$14 >> 2] | 0; //@line 5824
        }
        if ($155 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 5830
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 5835
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 5841
             HEAP8[$4 >> 0] = 0; //@line 5842
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 5844
              HEAP8[$17 >> 0] = 0; //@line 5845
              HEAP8[$17 + 1 >> 0] = 0; //@line 5845
              HEAP8[$17 + 2 >> 0] = 0; //@line 5845
              HEAP8[$17 + 3 >> 0] = 0; //@line 5845
              HEAP8[$17 + 4 >> 0] = 0; //@line 5845
              $$9 = $$5; //@line 5846
             } else {
              $$9 = $$5; //@line 5848
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 5851
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 5853
             $$0292 = $164 & 1; //@line 5855
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 5856
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 5857
             HEAP8[$4 >> 0] = 0; //@line 5858
             $166 = HEAP8[$$6 >> 0] | 0; //@line 5859
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 5862
               $$sink330 = 46; //@line 5862
               label = 65; //@line 5863
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 5867
               $$sink330 = 94; //@line 5867
               label = 65; //@line 5868
               break;
              }
             default:
              {
               $$7 = $$6; //@line 5872
               $168 = $166; //@line 5872
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 5877
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 5881
               $$7$ph = $$6$pn + 1 | 0; //@line 5882
               $$7 = $$7$ph; //@line 5884
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 5884
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 5889
                 $319 = $318; //@line 5889
                 label = 136; //@line 5890
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 5895
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 5900
                 $170 = HEAP8[$169 >> 0] | 0; //@line 5901
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 5904
                   $183 = 45; //@line 5904
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 5912
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 5917
                  $$0286399 = $172 & 255; //@line 5918
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 5920
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 5922
                   $179 = HEAP8[$169 >> 0] | 0; //@line 5923
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 5929
                  $183 = $179; //@line 5929
                 } else {
                  $$8 = $169; //@line 5934
                  $183 = $170; //@line 5934
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 5939
                 $183 = $168; //@line 5939
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 5945
              $$sink330 = ($183 & 255) + 1 | 0; //@line 5945
              label = 65; //@line 5946
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 5951
           $187 = ($$$0268 | 0) == 1; //@line 5952
           $188 = ($$0270 | 0) != 0; //@line 5953
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 5958
              if (!$190) {
               $$7312 = 0; //@line 5961
               $319 = 0; //@line 5961
               label = 136; //@line 5962
               break L6;
              } else {
               $321 = $190; //@line 5965
              }
             } else {
              $321 = $$0293; //@line 5968
             }
             HEAP32[$3 >> 2] = 0; //@line 5970
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 5971
             $$0276$ph = $186; //@line 5972
             $$0278$ph = 0; //@line 5972
             $$ph = $321; //@line 5972
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 5974
              $$0278$ph336 = $$0278$ph; //@line 5975
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 5978
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 5983
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 5986
                } else {
                 $201 = ___shgetc($0) | 0; //@line 5989
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 5999
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 6003
                  $319 = $$ph; //@line 6003
                  label = 136; //@line 6004
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 6017
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 6022
                $$1279 = $$0278$ph336 + 1 | 0; //@line 6023
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 6030
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 6034
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 6036
              if (!$213) {
               $$7312 = 0; //@line 6039
               $319 = $$ph; //@line 6039
               label = 136; //@line 6040
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 6043
               $$0276$ph = $211; //@line 6043
               $$ph = $213; //@line 6043
               $$0278$ph = $$0278$ph$phi; //@line 6043
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 6049
              $319 = $$ph; //@line 6049
              label = 136; //@line 6050
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 6053
              $$4309 = 0; //@line 6053
              $$5299 = $$ph; //@line 6053
              $322 = $$ph; //@line 6053
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 6057
              if (!$217) {
               $$7312 = 0; //@line 6060
               $319 = 0; //@line 6060
               label = 136; //@line 6061
               break L6;
              } else {
               $$1277$ph = $186; //@line 6064
               $$2280$ph = 0; //@line 6064
               $$2307$ph = $217; //@line 6064
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 6067
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 6069
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 6074
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 6077
                } else {
                 $227 = ___shgetc($0) | 0; //@line 6080
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 6087
                 $$4309 = $$2307$ph; //@line 6087
                 $$5299 = 0; //@line 6087
                 $322 = 0; //@line 6087
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 6093
                $$2280 = $$2280 + 1 | 0; //@line 6091
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 6102
               $236 = _realloc($$2307$ph, $235) | 0; //@line 6103
               if (!$236) {
                $$7312 = $$2307$ph; //@line 6106
                $319 = 0; //@line 6106
                label = 136; //@line 6107
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 6110
                $$1277$ph = $235; //@line 6110
                $$2307$ph = $236; //@line 6110
                $$2280$ph = $$2280$ph$phi; //@line 6110
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 6117
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 6122
                $262 = HEAPU8[$254 >> 0] | 0; //@line 6125
               } else {
                $262 = ___shgetc($0) | 0; //@line 6128
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 6135
                $$4309 = 0; //@line 6135
                $$5299 = 0; //@line 6135
                $322 = 0; //@line 6135
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 6140
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 6143
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 6148
               $247 = HEAPU8[$239 >> 0] | 0; //@line 6151
              } else {
               $247 = ___shgetc($0) | 0; //@line 6154
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 6161
               $$4309 = $$0293; //@line 6161
               $$5299 = 0; //@line 6161
               $322 = 0; //@line 6161
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 6167
              $$3281 = $$3281 + 1 | 0; //@line 6168
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 6176
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6179
            HEAP32[$13 >> 2] = $269; //@line 6180
            $274 = $269; //@line 6182
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 6187
           if (!$275) {
            $$2 = $$0270; //@line 6190
            $$2290 = $$0288404; //@line 6190
            $$9314 = $$4309; //@line 6190
            $312 = $322; //@line 6190
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 6197
            $$2290 = $$0288404; //@line 6197
            $$9314 = $$4309; //@line 6197
            $312 = $322; //@line 6197
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 6203
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 6206
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 6212
            $$5310 = $$4309; //@line 6212
            $320 = $322; //@line 6212
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 6217
            }
            if (!$$4309) {
             $$10 = $$9; //@line 6221
             $$5310 = 0; //@line 6221
             $320 = $322; //@line 6221
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 6225
            $$10 = $$9; //@line 6226
            $$5310 = $$4309; //@line 6226
            $320 = $322; //@line 6226
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 6231
           label = 124; //@line 6232
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 6236
           label = 124; //@line 6237
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 6241
           label = 124; //@line 6242
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 6246
           label = 124; //@line 6247
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 6251
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 6258
            $$2290 = $$0288404; //@line 6258
            $$9314 = $$1306; //@line 6258
            $312 = $318; //@line 6258
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 6263
            $$5310 = $$1306; //@line 6263
            $320 = $318; //@line 6263
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 6268
              $$10 = $$5; //@line 6269
              $$5310 = $$1306; //@line 6269
              $320 = $318; //@line 6269
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6274
              $$10 = $$5; //@line 6275
              $$5310 = $$1306; //@line 6275
              $320 = $318; //@line 6275
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6280
              $$10 = $$5; //@line 6281
              $$5310 = $$1306; //@line 6281
              $320 = $318; //@line 6281
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 6286
              $$5310 = $$1306; //@line 6286
              $320 = $318; //@line 6286
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 6294
           $$5310 = $$1306; //@line 6294
           $320 = $318; //@line 6294
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 6300
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 6301
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 6309
           $$2290 = $$0288404; //@line 6309
           $$9314 = $$1306; //@line 6309
           $312 = $318; //@line 6309
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 6317
           $$10 = $$5; //@line 6318
           $$5310 = $$1306; //@line 6318
           $320 = $318; //@line 6318
           break;
          } else {
           _store_int_728($$0293, $$$0268, $282, tempRet0); //@line 6321
           $$10 = $$5; //@line 6322
           $$5310 = $$1306; //@line 6322
           $320 = $318; //@line 6322
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 6336
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 6336
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 6336
        $$6311 = $$5310; //@line 6336
        $316 = $320; //@line 6336
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 6341
      ___shlim($0, 0); //@line 6342
      $55 = HEAP32[$13 >> 2] | 0; //@line 6343
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 6348
       $65 = HEAPU8[$55 >> 0] | 0; //@line 6351
      } else {
       $65 = ___shgetc($0) | 0; //@line 6354
      }
      if (($65 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 6360
       break L6;
      }
      $$11 = $54; //@line 6364
      $$1289 = $$0288404; //@line 6364
      $$2285 = $$0283407 + 1 | 0; //@line 6364
      $$6311 = $$0305402; //@line 6364
      $316 = $315; //@line 6364
     } else {
      $$1274 = $$0273408; //@line 6366
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 6368
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 6376
       }
      }
      ___shlim($0, 0); //@line 6379
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 6381
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 6386
        $35 = HEAPU8[$28 >> 0] | 0; //@line 6389
       } else {
        $35 = ___shgetc($0) | 0; //@line 6392
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 6404
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6407
       HEAP32[$13 >> 2] = $41; //@line 6408
       $47 = $41; //@line 6410
      }
      $$11 = $$1274; //@line 6417
      $$1289 = $$0288404; //@line 6417
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 6417
      $$6311 = $$0305402; //@line 6417
      $316 = $315; //@line 6417
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 6420
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 6421
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 6424
     break L4;
    } else {
     $$0283407 = $$2285; //@line 6427
     $$0288404 = $$1289; //@line 6427
     $$0305402 = $$6311; //@line 6427
     $315 = $316; //@line 6427
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 6436
    }
    if (($$0288404 | 0) != 0 | ($65 | 0) > -1) {
     $$3291 = $$0288404; //@line 6442
     break;
    } else {
     $$1271 = 0; //@line 6445
     $$8313 = $$0305402; //@line 6445
     $317 = $315; //@line 6445
     label = 137; //@line 6446
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 6452
     $$8313 = $$7312; //@line 6452
     $317 = $319; //@line 6452
     label = 137; //@line 6453
    } else {
     $$2 = $$0270; //@line 6455
     $$2290 = $$0288404; //@line 6455
     $$9314 = $$7312; //@line 6455
     $312 = $319; //@line 6455
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 6459
    $$2290 = -1; //@line 6459
    $$9314 = $$8313; //@line 6459
    $312 = $317; //@line 6459
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 6463
   } else {
    _free($$9314); //@line 6465
    _free($312); //@line 6466
    $$3291 = $$2290; //@line 6467
   }
  }
 } while (0);
 if ($314 | 0) {
  ___unlockfile($0); //@line 6473
 }
 STACKTOP = sp; //@line 6475
 return $$3291 | 0; //@line 6475
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8292
 STACKTOP = STACKTOP + 512 | 0; //@line 8293
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 8293
 $6 = sp; //@line 8294
 $sum = $3 + $2 | 0; //@line 8295
 $7 = 0 - $sum | 0; //@line 8296
 $8 = $0 + 4 | 0; //@line 8297
 $9 = $0 + 100 | 0; //@line 8298
 $$0329 = $1; //@line 8299
 $$0396 = 0; //@line 8299
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 8303
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 8311
    $$2 = $$0329; //@line 8311
    $$2398 = $$0396; //@line 8311
    $368 = 0; //@line 8311
    $369 = 0; //@line 8311
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 8315
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 8320
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 8323
   $$0396 = 1; //@line 8323
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 8327
   $$0396 = 1; //@line 8327
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 8332
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 8337
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 8340
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 8343
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 8347
   $26 = 0; //@line 8347
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 8349
    $28 = tempRet0; //@line 8350
    $29 = HEAP32[$8 >> 2] | 0; //@line 8351
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 8356
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 8359
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 8362
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 8366
     $26 = $28; //@line 8366
    } else {
     $$0393 = 1; //@line 8368
     $$2 = $$1330$be; //@line 8368
     $$2398 = 1; //@line 8368
     $368 = $27; //@line 8368
     $369 = $28; //@line 8368
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 8373
   $$2 = $$1330$ph; //@line 8373
   $$2398 = $$0396; //@line 8373
   $368 = 0; //@line 8373
   $369 = 0; //@line 8373
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 8376
 $37 = $$2 + -48 | 0; //@line 8377
 $39 = ($$2 | 0) == 46; //@line 8379
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 8383
   $$0341511 = 0; //@line 8384
   $$0345510 = 0; //@line 8384
   $$0401507 = 0; //@line 8384
   $$1394509 = $$0393; //@line 8384
   $$3399508 = $$2398; //@line 8384
   $$3512 = $$2; //@line 8384
   $370 = $39; //@line 8384
   $371 = $37; //@line 8384
   $372 = $368; //@line 8384
   $373 = $369; //@line 8384
   $44 = 0; //@line 8384
   $45 = 0; //@line 8384
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 8390
       $$2347 = $$0345510; //@line 8390
       $$2395 = 1; //@line 8390
       $$2403 = $$0401507; //@line 8390
       $$4400 = $$3399508; //@line 8390
       $374 = $44; //@line 8390
       $375 = $45; //@line 8390
       $376 = $44; //@line 8390
       $377 = $45; //@line 8390
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 8396
      $47 = tempRet0; //@line 8397
      $48 = ($$3512 | 0) != 48; //@line 8398
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 8401
        $$2347 = $$0345510; //@line 8401
        $$2395 = $$1394509; //@line 8401
        $$2403 = $$0401507; //@line 8401
        $$4400 = $$3399508; //@line 8401
        $374 = $372; //@line 8401
        $375 = $373; //@line 8401
        $376 = $46; //@line 8401
        $377 = $47; //@line 8401
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 8406
       $$2343 = $$0341511; //@line 8407
       $$2347 = $$0345510; //@line 8407
       $$2395 = $$1394509; //@line 8407
       $$2403 = $$0401507; //@line 8407
       $$4400 = $$3399508; //@line 8407
       $374 = $372; //@line 8407
       $375 = $373; //@line 8407
       $376 = $46; //@line 8407
       $377 = $47; //@line 8407
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 8412
      if (!$$0341511) {
       $$sink = $371; //@line 8414
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 8420
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 8422
      $54 = $$0341511 + 1 | 0; //@line 8423
      $55 = ($54 | 0) == 9; //@line 8424
      $$2343 = $55 ? 0 : $54; //@line 8428
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 8428
      $$2395 = $$1394509; //@line 8428
      $$2403 = $48 ? $46 : $$0401507; //@line 8428
      $$4400 = 1; //@line 8428
      $374 = $372; //@line 8428
      $375 = $373; //@line 8428
      $376 = $46; //@line 8428
      $377 = $47; //@line 8428
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 8431
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 8436
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 8439
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 8442
    }
    $371 = $$3$be + -48 | 0; //@line 8444
    $370 = ($$3$be | 0) == 46; //@line 8446
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 8451
     $$0345$lcssa = $$2347; //@line 8451
     $$0401$lcssa = $$2403; //@line 8451
     $$1394$lcssa = $$2395; //@line 8451
     $$3$lcssa = $$3$be; //@line 8451
     $$3399$lcssa = $$4400; //@line 8451
     $72 = $376; //@line 8451
     $73 = $374; //@line 8451
     $75 = $377; //@line 8451
     $76 = $375; //@line 8451
     label = 29; //@line 8452
     break L20;
    } else {
     $$0341511 = $$2343; //@line 8449
     $$0345510 = $$2347; //@line 8449
     $$0401507 = $$2403; //@line 8449
     $$1394509 = $$2395; //@line 8449
     $$3399508 = $$4400; //@line 8449
     $$3512 = $$3$be; //@line 8449
     $372 = $374; //@line 8449
     $373 = $375; //@line 8449
     $44 = $376; //@line 8449
     $45 = $377; //@line 8449
    }
   }
   $$0341463 = $$0341511; //@line 8457
   $$0345467 = $$0345510; //@line 8457
   $$0401473 = $$0401507; //@line 8457
   $378 = $44; //@line 8457
   $379 = $45; //@line 8457
   $380 = $372; //@line 8457
   $381 = $373; //@line 8457
   $382 = ($$3399508 | 0) != 0; //@line 8457
   label = 37; //@line 8458
  } else {
   $$0341$lcssa = 0; //@line 8460
   $$0345$lcssa = 0; //@line 8460
   $$0401$lcssa = 0; //@line 8460
   $$1394$lcssa = $$0393; //@line 8460
   $$3$lcssa = $$2; //@line 8460
   $$3399$lcssa = $$2398; //@line 8460
   $72 = 0; //@line 8460
   $73 = $368; //@line 8460
   $75 = 0; //@line 8460
   $76 = $369; //@line 8460
   label = 29; //@line 8461
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 8466
   $71 = $70 ? $72 : $73; //@line 8467
   $74 = $70 ? $75 : $76; //@line 8468
   $77 = ($$3399$lcssa | 0) != 0; //@line 8469
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 8476
     $$0345467 = $$0345$lcssa; //@line 8476
     $$0401473 = $$0401$lcssa; //@line 8476
     $378 = $72; //@line 8476
     $379 = $75; //@line 8476
     $380 = $71; //@line 8476
     $381 = $74; //@line 8476
     $382 = $77; //@line 8476
     label = 37; //@line 8477
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 8480
     $$0345466 = $$0345$lcssa; //@line 8480
     $$0401472 = $$0401$lcssa; //@line 8480
     $383 = $72; //@line 8480
     $384 = $75; //@line 8480
     $385 = $77; //@line 8480
     $386 = $71; //@line 8480
     $387 = $74; //@line 8480
     label = 39; //@line 8481
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 8485
   $81 = tempRet0; //@line 8486
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 8493
     $$1 = 0.0; //@line 8494
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 8500
     $91 = 0; //@line 8500
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8504
     $90 = 0; //@line 8505
     $91 = 0; //@line 8505
    }
   } else {
    $90 = $80; //@line 8508
    $91 = $81; //@line 8508
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0; //@line 8510
   $$0341461 = $$0341$lcssa; //@line 8512
   $$0345465 = $$0345$lcssa; //@line 8512
   $$0401471 = $$0401$lcssa; //@line 8512
   $105 = $92; //@line 8512
   $106 = $72; //@line 8512
   $108 = tempRet0; //@line 8512
   $109 = $75; //@line 8512
   label = 41; //@line 8513
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 8520
   $$0345466 = $$0345467; //@line 8520
   $$0401472 = $$0401473; //@line 8520
   $383 = $378; //@line 8520
   $384 = $379; //@line 8520
   $385 = $382; //@line 8520
   $386 = $380; //@line 8520
   $387 = $381; //@line 8520
   label = 39; //@line 8521
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8525
   if ($382) {
    $$0341461 = $$0341463; //@line 8527
    $$0345465 = $$0345467; //@line 8527
    $$0401471 = $$0401473; //@line 8527
    $105 = $380; //@line 8527
    $106 = $378; //@line 8527
    $108 = $381; //@line 8527
    $109 = $379; //@line 8527
    label = 41; //@line 8528
   } else {
    label = 40; //@line 8530
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 8536
   $$0345465 = $$0345466; //@line 8536
   $$0401471 = $$0401472; //@line 8536
   $105 = $386; //@line 8536
   $106 = $383; //@line 8536
   $108 = $387; //@line 8536
   $109 = $384; //@line 8536
   label = 41; //@line 8537
  } else {
   label = 40; //@line 8539
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 8545
   ___shlim($0, 0); //@line 8546
   $$1 = 0.0; //@line 8547
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 8550
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 8555
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 8576
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 8580
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 8582
   if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8590
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8594
    break;
   }
   $134 = $3 + -106 | 0; //@line 8597
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 8599
   if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8607
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8611
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 8616
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 8620
     $$3344501 = $$0341461; //@line 8622
     $150 = HEAP32[$148 >> 2] | 0; //@line 8622
     while (1) {
      $150 = $150 * 10 | 0; //@line 8624
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 8628
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 8633
    }
    $$3348 = $$0345465 + 1 | 0; //@line 8636
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
     if (($105 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 8650
      break;
     }
     if (($105 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[1268 + (8 - $105 << 2) >> 2] | 0); //@line 8664
      break;
     }
     $172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0; //@line 8669
     $$pre = HEAP32[$6 >> 2] | 0; //@line 8671
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[1268 + ($105 + -10 << 2) >> 2] | 0); //@line 8684
      break;
     }
    }
   }
   $184 = ($105 | 0) % 9 | 0; //@line 8689
   if (!$184) {
    $$0380$ph = 0; //@line 8692
    $$1373$ph446 = $$3348; //@line 8692
    $$2352$ph447 = 0; //@line 8692
    $$2387$ph445 = $105; //@line 8692
   } else {
    $188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 8696
    $191 = HEAP32[1268 + (8 - $188 << 2) >> 2] | 0; //@line 8699
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 8702
     $$0372 = 0; //@line 8702
     $$0385$lcssa552 = $105; //@line 8702
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 8704
     $$0340494 = 0; //@line 8705
     $$0350492 = 0; //@line 8705
     $$0385491 = $105; //@line 8705
     $$4349493 = 0; //@line 8705
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 8707
      $195 = HEAP32[$194 >> 2] | 0; //@line 8708
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 8711
      HEAP32[$194 >> 2] = $198; //@line 8712
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 8713
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 8716
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 8720
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 8721
      $$4349493 = $$4349493 + 1 | 0; //@line 8722
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 8732
      $$0372 = $$3348; //@line 8732
      $$0385$lcssa552 = $$0385491; //@line 8732
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 8736
      $$0350$lcssa553 = $$0350492; //@line 8737
      $$0372 = $$3348 + 1 | 0; //@line 8737
      $$0385$lcssa552 = $$0385491; //@line 8737
     }
    }
    $$0380$ph = 0; //@line 8742
    $$1373$ph446 = $$0372; //@line 8742
    $$2352$ph447 = $$0350$lcssa553; //@line 8742
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 8742
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 8745
    $213 = ($$2387$ph445 | 0) == 18; //@line 8746
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 8747
    $$0380 = $$0380$ph; //@line 8748
    $$1373 = $$1373$ph446; //@line 8748
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 8752
       $$4354$ph = $$2352$ph447; //@line 8752
       $$4389$ph443 = $$2387$ph445; //@line 8752
       $$6378$ph = $$1373; //@line 8752
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 8758
       $$4354$ph = $$2352$ph447; //@line 8758
       $$4389$ph443 = 18; //@line 8758
       $$6378$ph = $$1373; //@line 8758
       break L101;
      }
     }
     $$0334 = 0; //@line 8763
     $$2374 = $$1373; //@line 8763
     $$5$in = $$1373 + 127 | 0; //@line 8763
     while (1) {
      $$5 = $$5$in & 127; //@line 8765
      $218 = $6 + ($$5 << 2) | 0; //@line 8766
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 8768
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 8770
      $223 = tempRet0; //@line 8771
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8778
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8780
       $$1335 = $229; //@line 8782
       $$sink419$off0 = $231; //@line 8782
      } else {
       $$1335 = 0; //@line 8784
       $$sink419$off0 = $222; //@line 8784
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 8786
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 8790
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 8795
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 8800
       $$5$in = $$5 + -1 | 0; //@line 8800
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 8803
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 8806
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 8813
    $246 = $$2374 + 127 & 127; //@line 8816
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 8819
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 8825
     $$4376 = $246; //@line 8826
    } else {
     $$4376 = $$2374; //@line 8828
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 8831
    $$0380$ph = $$0380; //@line 8832
    $$1373$ph446 = $$4376; //@line 8832
    $$2352$ph447 = $243; //@line 8832
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 8832
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 & 127; //@line 8836
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 8839
    $$1381$ph557 = $$1381$ph; //@line 8840
    $$4354$ph558 = $$4354$ph; //@line 8840
    $$4389$ph = $$4389$ph443; //@line 8840
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 8842
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 8844
     $$1381 = $$1381$ph557; //@line 8845
     $$4354 = $$4354$ph558; //@line 8845
     while (1) {
      $$0336484 = 0; //@line 8847
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 8850
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 8853
        label = 88; //@line 8854
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 8858
       $261 = HEAP32[1300 + ($$0336484 << 2) >> 2] | 0; //@line 8860
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 8863
        label = 88; //@line 8864
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 8871
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 8874
       } else {
        $$1337 = $264; //@line 8876
        label = 88; //@line 8877
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 8882
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 8886
        $$4483 = 0; //@line 8886
        $$9481 = $$6378$ph; //@line 8886
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 8890
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 8893
       $$4354 = $$6378$ph; //@line 8893
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 8899
     $272 = 1e9 >>> $$423; //@line 8900
     $$0332488 = 0; //@line 8901
     $$5355486 = $$4354; //@line 8901
     $$5390485 = $$4389$ph; //@line 8901
     $$6487 = $$4354; //@line 8901
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 8903
      $274 = HEAP32[$273 >> 2] | 0; //@line 8904
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 8907
      HEAP32[$273 >> 2] = $277; //@line 8908
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 8909
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 8912
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 8916
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 8917
      $$6487 = $$6487 + 1 & 127; //@line 8919
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 8929
      $$4354$ph558 = $$5355486; //@line 8929
      $$4389$ph = $$5390485; //@line 8929
      continue;
     }
     if (($289 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 8938
     $$1381$ph557 = $268; //@line 8939
     $$4354$ph558 = $$5355486; //@line 8939
     $$4389$ph = $$5390485; //@line 8939
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 8942
    $$1381$ph = $268; //@line 8943
    $$4354$ph = $$5355486; //@line 8943
    $$4389$ph443 = $$5390485; //@line 8943
    $$6378$ph = $289; //@line 8943
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 8947
    $302 = $$9481 + 1 & 127; //@line 8950
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 8954
     $$10 = $302; //@line 8955
    } else {
     $$10 = $$9481; //@line 8957
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 8963
    $$4483 = $$4483 + 1 | 0; //@line 8964
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 8969
    }
   }
   $311 = +($4 | 0); //@line 8972
   $312 = $$0365482 * $311; //@line 8973
   $313 = $$1381 + 53 | 0; //@line 8974
   $314 = $313 - $3 | 0; //@line 8975
   $315 = ($314 | 0) < ($2 | 0); //@line 8976
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 8979
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 8984
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 8987
    $$0360 = $320; //@line 8990
    $$0361 = $323; //@line 8990
    $$1366 = $320 + ($312 - $323); //@line 8990
   } else {
    $$0360 = 0.0; //@line 8992
    $$0361 = 0.0; //@line 8992
    $$1366 = $312; //@line 8992
   }
   $327 = $$4354 + 2 & 127; //@line 8995
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 8998
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 9001
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 9011
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 9017
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 9023
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 9032
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 9037
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 9048
     } else {
      $$3364 = $$1362 + 1.0; //@line 9051
     }
    } else {
     $$3364 = $$1362; //@line 9054
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 9058
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 9065
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 9069
     $$2367 = $359 ? $354 : $354 * .5; //@line 9070
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 9080
       $$4384 = $$3383; //@line 9080
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 9085
     $$3368 = $$2367; //@line 9086
     $$4384 = $$3383; //@line 9086
    } else {
     $$3368 = $354; //@line 9088
     $$4384 = $$1381; //@line 9088
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 9092
  }
 } while (0);
 STACKTOP = sp; //@line 9095
 return +$$1;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11464
 STACKTOP = STACKTOP + 560 | 0; //@line 11465
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 11465
 $6 = sp + 8 | 0; //@line 11466
 $7 = sp; //@line 11467
 $8 = sp + 524 | 0; //@line 11468
 $9 = $8; //@line 11469
 $10 = sp + 512 | 0; //@line 11470
 HEAP32[$7 >> 2] = 0; //@line 11471
 $11 = $10 + 12 | 0; //@line 11472
 ___DOUBLE_BITS_677($1) | 0; //@line 11473
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 11478
  $$0520 = 1; //@line 11478
  $$0521 = 3694; //@line 11478
 } else {
  $$0471 = $1; //@line 11489
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 11489
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 3695 : 3700 : 3697; //@line 11489
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 11491
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 11500
   $31 = $$0520 + 3 | 0; //@line 11505
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 11507
   _out_670($0, $$0521, $$0520); //@line 11508
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 3721 : 3725 : $27 ? 3713 : 3717, 3); //@line 11509
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 11511
   $$sink560 = $31; //@line 11512
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 11515
   $36 = $35 != 0.0; //@line 11516
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 11520
   }
   $39 = $5 | 32; //@line 11522
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 11525
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 11528
    $44 = $$0520 | 2; //@line 11529
    $46 = 12 - $3 | 0; //@line 11531
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 11536
     } else {
      $$0509585 = 8.0; //@line 11538
      $$1508586 = $46; //@line 11538
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 11540
       $$0509585 = $$0509585 * 16.0; //@line 11541
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 11556
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 11561
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 11566
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 11569
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 11572
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 11575
     HEAP8[$68 >> 0] = 48; //@line 11576
     $$0511 = $68; //@line 11577
    } else {
     $$0511 = $66; //@line 11579
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 11586
    $76 = $$0511 + -2 | 0; //@line 11589
    HEAP8[$76 >> 0] = $5 + 15; //@line 11590
    $77 = ($3 | 0) < 1; //@line 11591
    $79 = ($4 & 8 | 0) == 0; //@line 11593
    $$0523 = $8; //@line 11594
    $$2473 = $$1472; //@line 11594
    while (1) {
     $80 = ~~$$2473; //@line 11596
     $86 = $$0523 + 1 | 0; //@line 11602
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[3729 + $80 >> 0]; //@line 11603
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 11606
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 11615
      } else {
       HEAP8[$86 >> 0] = 46; //@line 11618
       $$1524 = $$0523 + 2 | 0; //@line 11619
      }
     } else {
      $$1524 = $86; //@line 11622
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 11626
     }
    }
    $$pre693 = $$1524; //@line 11632
    if (!$3) {
     label = 24; //@line 11634
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 11642
      $$sink = $3 + 2 | 0; //@line 11642
     } else {
      label = 24; //@line 11644
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 11648
     $$pre$phi691Z2D = $101; //@line 11649
     $$sink = $101; //@line 11649
    }
    $104 = $11 - $76 | 0; //@line 11653
    $106 = $104 + $44 + $$sink | 0; //@line 11655
    _pad_676($0, 32, $2, $106, $4); //@line 11656
    _out_670($0, $$0521$, $44); //@line 11657
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 11659
    _out_670($0, $8, $$pre$phi691Z2D); //@line 11660
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 11662
    _out_670($0, $76, $104); //@line 11663
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 11665
    $$sink560 = $106; //@line 11666
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 11670
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 11674
    HEAP32[$7 >> 2] = $113; //@line 11675
    $$3 = $35 * 268435456.0; //@line 11676
    $$pr = $113; //@line 11676
   } else {
    $$3 = $35; //@line 11679
    $$pr = HEAP32[$7 >> 2] | 0; //@line 11679
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 11683
   $$0498 = $$561; //@line 11684
   $$4 = $$3; //@line 11684
   do {
    $116 = ~~$$4 >>> 0; //@line 11686
    HEAP32[$$0498 >> 2] = $116; //@line 11687
    $$0498 = $$0498 + 4 | 0; //@line 11688
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 11691
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 11701
    $$1499662 = $$0498; //@line 11701
    $124 = $$pr; //@line 11701
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 11704
     $$0488655 = $$1499662 + -4 | 0; //@line 11705
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 11708
     } else {
      $$0488657 = $$0488655; //@line 11710
      $$0497656 = 0; //@line 11710
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 11713
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 11715
       $131 = tempRet0; //@line 11716
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11717
       HEAP32[$$0488657 >> 2] = $132; //@line 11719
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11720
       $$0488657 = $$0488657 + -4 | 0; //@line 11722
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 11732
      } else {
       $138 = $$1482663 + -4 | 0; //@line 11734
       HEAP32[$138 >> 2] = $$0497656; //@line 11735
       $$2483$ph = $138; //@line 11736
      }
     }
     $$2500 = $$1499662; //@line 11739
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 11745
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 11749
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 11755
     HEAP32[$7 >> 2] = $144; //@line 11756
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 11759
      $$1499662 = $$2500; //@line 11759
      $124 = $144; //@line 11759
     } else {
      $$1482$lcssa = $$2483$ph; //@line 11761
      $$1499$lcssa = $$2500; //@line 11761
      $$pr566 = $144; //@line 11761
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 11766
    $$1499$lcssa = $$0498; //@line 11766
    $$pr566 = $$pr; //@line 11766
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 11772
    $150 = ($39 | 0) == 102; //@line 11773
    $$3484650 = $$1482$lcssa; //@line 11774
    $$3501649 = $$1499$lcssa; //@line 11774
    $152 = $$pr566; //@line 11774
    while (1) {
     $151 = 0 - $152 | 0; //@line 11776
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 11778
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 11782
      $161 = 1e9 >>> $154; //@line 11783
      $$0487644 = 0; //@line 11784
      $$1489643 = $$3484650; //@line 11784
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 11786
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 11790
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 11791
       $$1489643 = $$1489643 + 4 | 0; //@line 11792
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11803
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 11806
       $$4502 = $$3501649; //@line 11806
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 11809
       $$$3484700 = $$$3484; //@line 11810
       $$4502 = $$3501649 + 4 | 0; //@line 11810
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11817
      $$4502 = $$3501649; //@line 11817
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 11819
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 11826
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 11828
     HEAP32[$7 >> 2] = $152; //@line 11829
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 11834
      $$3501$lcssa = $$$4502; //@line 11834
      break;
     } else {
      $$3484650 = $$$3484700; //@line 11832
      $$3501649 = $$$4502; //@line 11832
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 11839
    $$3501$lcssa = $$1499$lcssa; //@line 11839
   }
   $185 = $$561; //@line 11842
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 11847
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 11848
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 11851
    } else {
     $$0514639 = $189; //@line 11853
     $$0530638 = 10; //@line 11853
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 11855
      $193 = $$0514639 + 1 | 0; //@line 11856
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 11859
       break;
      } else {
       $$0514639 = $193; //@line 11862
      }
     }
    }
   } else {
    $$1515 = 0; //@line 11867
   }
   $198 = ($39 | 0) == 103; //@line 11872
   $199 = ($$540 | 0) != 0; //@line 11873
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 11876
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 11885
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 11888
    $213 = ($209 | 0) % 9 | 0; //@line 11889
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 11892
     $$1531632 = 10; //@line 11892
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 11895
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 11898
       $$1531632 = $215; //@line 11898
      } else {
       $$1531$lcssa = $215; //@line 11900
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 11905
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 11907
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 11908
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 11911
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 11914
     $$4518 = $$1515; //@line 11914
     $$8 = $$3484$lcssa; //@line 11914
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 11919
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 11920
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 11925
     if (!$$0520) {
      $$1467 = $$$564; //@line 11928
      $$1469 = $$543; //@line 11928
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 11931
      $$1467 = $230 ? -$$$564 : $$$564; //@line 11936
      $$1469 = $230 ? -$$543 : $$543; //@line 11936
     }
     $233 = $217 - $218 | 0; //@line 11938
     HEAP32[$212 >> 2] = $233; //@line 11939
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 11943
      HEAP32[$212 >> 2] = $236; //@line 11944
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 11947
       $$sink547625 = $212; //@line 11947
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 11949
        HEAP32[$$sink547625 >> 2] = 0; //@line 11950
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 11953
         HEAP32[$240 >> 2] = 0; //@line 11954
         $$6 = $240; //@line 11955
        } else {
         $$6 = $$5486626; //@line 11957
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 11960
        HEAP32[$238 >> 2] = $242; //@line 11961
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 11964
         $$sink547625 = $238; //@line 11964
        } else {
         $$5486$lcssa = $$6; //@line 11966
         $$sink547$lcssa = $238; //@line 11966
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 11971
       $$sink547$lcssa = $212; //@line 11971
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 11976
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 11977
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 11980
       $$4518 = $247; //@line 11980
       $$8 = $$5486$lcssa; //@line 11980
      } else {
       $$2516621 = $247; //@line 11982
       $$2532620 = 10; //@line 11982
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 11984
        $251 = $$2516621 + 1 | 0; //@line 11985
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 11988
         $$4518 = $251; //@line 11988
         $$8 = $$5486$lcssa; //@line 11988
         break;
        } else {
         $$2516621 = $251; //@line 11991
        }
       }
      }
     } else {
      $$4492 = $212; //@line 11996
      $$4518 = $$1515; //@line 11996
      $$8 = $$3484$lcssa; //@line 11996
     }
    }
    $253 = $$4492 + 4 | 0; //@line 11999
    $$5519$ph = $$4518; //@line 12002
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 12002
    $$9$ph = $$8; //@line 12002
   } else {
    $$5519$ph = $$1515; //@line 12004
    $$7505$ph = $$3501$lcssa; //@line 12004
    $$9$ph = $$3484$lcssa; //@line 12004
   }
   $$7505 = $$7505$ph; //@line 12006
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 12010
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 12013
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 12017
    } else {
     $$lcssa675 = 1; //@line 12019
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 12023
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 12028
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 12036
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 12036
     } else {
      $$0479 = $5 + -2 | 0; //@line 12040
      $$2476 = $$540$ + -1 | 0; //@line 12040
     }
     $267 = $4 & 8; //@line 12042
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 12047
       if (!$270) {
        $$2529 = 9; //@line 12050
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 12055
         $$3533616 = 10; //@line 12055
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 12057
          $275 = $$1528617 + 1 | 0; //@line 12058
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 12064
           break;
          } else {
           $$1528617 = $275; //@line 12062
          }
         }
        } else {
         $$2529 = 0; //@line 12069
        }
       }
      } else {
       $$2529 = 9; //@line 12073
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 12081
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 12083
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 12085
       $$1480 = $$0479; //@line 12088
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 12088
       $$pre$phi698Z2D = 0; //@line 12088
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 12092
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 12094
       $$1480 = $$0479; //@line 12097
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 12097
       $$pre$phi698Z2D = 0; //@line 12097
       break;
      }
     } else {
      $$1480 = $$0479; //@line 12101
      $$3477 = $$2476; //@line 12101
      $$pre$phi698Z2D = $267; //@line 12101
     }
    } else {
     $$1480 = $5; //@line 12105
     $$3477 = $$540; //@line 12105
     $$pre$phi698Z2D = $4 & 8; //@line 12105
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 12108
   $294 = ($292 | 0) != 0 & 1; //@line 12110
   $296 = ($$1480 | 32 | 0) == 102; //@line 12112
   if ($296) {
    $$2513 = 0; //@line 12116
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 12116
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 12119
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 12122
    $304 = $11; //@line 12123
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 12128
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 12130
      HEAP8[$308 >> 0] = 48; //@line 12131
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 12136
      } else {
       $$1512$lcssa = $308; //@line 12138
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 12143
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 12150
    $318 = $$1512$lcssa + -2 | 0; //@line 12152
    HEAP8[$318 >> 0] = $$1480; //@line 12153
    $$2513 = $318; //@line 12156
    $$pn = $304 - $318 | 0; //@line 12156
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 12161
   _pad_676($0, 32, $2, $323, $4); //@line 12162
   _out_670($0, $$0521, $$0520); //@line 12163
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 12165
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 12168
    $326 = $8 + 9 | 0; //@line 12169
    $327 = $326; //@line 12170
    $328 = $8 + 8 | 0; //@line 12171
    $$5493600 = $$0496$$9; //@line 12172
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 12175
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 12180
       $$1465 = $328; //@line 12181
      } else {
       $$1465 = $330; //@line 12183
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 12190
       $$0464597 = $330; //@line 12191
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 12193
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 12196
        } else {
         $$1465 = $335; //@line 12198
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 12203
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 12208
     $$5493600 = $$5493600 + 4 | 0; //@line 12209
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 3745, 1); //@line 12219
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 12225
     $$6494592 = $$5493600; //@line 12225
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 12228
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 12233
       $$0463587 = $347; //@line 12234
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 12236
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 12239
        } else {
         $$0463$lcssa = $351; //@line 12241
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 12246
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 12250
      $$6494592 = $$6494592 + 4 | 0; //@line 12251
      $356 = $$4478593 + -9 | 0; //@line 12252
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 12259
       break;
      } else {
       $$4478593 = $356; //@line 12257
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 12264
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 12267
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 12270
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 12273
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 12274
     $365 = $363; //@line 12275
     $366 = 0 - $9 | 0; //@line 12276
     $367 = $8 + 8 | 0; //@line 12277
     $$5605 = $$3477; //@line 12278
     $$7495604 = $$9$ph; //@line 12278
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 12281
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 12284
       $$0 = $367; //@line 12285
      } else {
       $$0 = $369; //@line 12287
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 12292
        _out_670($0, $$0, 1); //@line 12293
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 12297
         break;
        }
        _out_670($0, 3745, 1); //@line 12300
        $$2 = $375; //@line 12301
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 12305
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 12310
        $$1601 = $$0; //@line 12311
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 12313
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 12316
         } else {
          $$2 = $373; //@line 12318
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 12325
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 12328
      $381 = $$5605 - $378 | 0; //@line 12329
      $$7495604 = $$7495604 + 4 | 0; //@line 12330
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 12337
       break;
      } else {
       $$5605 = $381; //@line 12335
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 12342
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 12345
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 12349
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 12352
   $$sink560 = $323; //@line 12353
  }
 } while (0);
 STACKTOP = sp; //@line 12358
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 12358
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 10036
 STACKTOP = STACKTOP + 64 | 0; //@line 10037
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 10037
 $5 = sp + 16 | 0; //@line 10038
 $6 = sp; //@line 10039
 $7 = sp + 24 | 0; //@line 10040
 $8 = sp + 8 | 0; //@line 10041
 $9 = sp + 20 | 0; //@line 10042
 HEAP32[$5 >> 2] = $1; //@line 10043
 $10 = ($0 | 0) != 0; //@line 10044
 $11 = $7 + 40 | 0; //@line 10045
 $12 = $11; //@line 10046
 $13 = $7 + 39 | 0; //@line 10047
 $14 = $8 + 4 | 0; //@line 10048
 $$0243 = 0; //@line 10049
 $$0247 = 0; //@line 10049
 $$0269 = 0; //@line 10049
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 10058
     $$1248 = -1; //@line 10059
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 10063
     break;
    }
   } else {
    $$1248 = $$0247; //@line 10067
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 10070
  $21 = HEAP8[$20 >> 0] | 0; //@line 10071
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 10074
   break;
  } else {
   $23 = $21; //@line 10077
   $25 = $20; //@line 10077
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 10082
     $27 = $25; //@line 10082
     label = 9; //@line 10083
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 10088
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 10095
   HEAP32[$5 >> 2] = $24; //@line 10096
   $23 = HEAP8[$24 >> 0] | 0; //@line 10098
   $25 = $24; //@line 10098
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 10103
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 10108
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 10111
     $27 = $27 + 2 | 0; //@line 10112
     HEAP32[$5 >> 2] = $27; //@line 10113
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 10120
      break;
     } else {
      $$0249303 = $30; //@line 10117
      label = 9; //@line 10118
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 10128
  if ($10) {
   _out_670($0, $20, $36); //@line 10130
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 10134
   $$0247 = $$1248; //@line 10134
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 10142
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 10143
  if ($43) {
   $$0253 = -1; //@line 10145
   $$1270 = $$0269; //@line 10145
   $$sink = 1; //@line 10145
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 10155
    $$1270 = 1; //@line 10155
    $$sink = 3; //@line 10155
   } else {
    $$0253 = -1; //@line 10157
    $$1270 = $$0269; //@line 10157
    $$sink = 1; //@line 10157
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 10160
  HEAP32[$5 >> 2] = $51; //@line 10161
  $52 = HEAP8[$51 >> 0] | 0; //@line 10162
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 10164
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 10171
   $$lcssa291 = $52; //@line 10171
   $$lcssa292 = $51; //@line 10171
  } else {
   $$0262309 = 0; //@line 10173
   $60 = $52; //@line 10173
   $65 = $51; //@line 10173
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 10178
    $64 = $65 + 1 | 0; //@line 10179
    HEAP32[$5 >> 2] = $64; //@line 10180
    $66 = HEAP8[$64 >> 0] | 0; //@line 10181
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 10183
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 10190
     $$lcssa291 = $66; //@line 10190
     $$lcssa292 = $64; //@line 10190
     break;
    } else {
     $$0262309 = $63; //@line 10193
     $60 = $66; //@line 10193
     $65 = $64; //@line 10193
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 10205
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 10207
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 10212
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10217
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10229
     $$2271 = 1; //@line 10229
     $storemerge274 = $79 + 3 | 0; //@line 10229
    } else {
     label = 23; //@line 10231
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 10235
    if ($$1270 | 0) {
     $$0 = -1; //@line 10238
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10253
     $106 = HEAP32[$105 >> 2] | 0; //@line 10254
     HEAP32[$2 >> 2] = $105 + 4; //@line 10256
     $363 = $106; //@line 10257
    } else {
     $363 = 0; //@line 10259
    }
    $$0259 = $363; //@line 10263
    $$2271 = 0; //@line 10263
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 10263
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 10265
   $109 = ($$0259 | 0) < 0; //@line 10266
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 10271
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 10271
   $$3272 = $$2271; //@line 10271
   $115 = $storemerge274; //@line 10271
  } else {
   $112 = _getint_671($5) | 0; //@line 10273
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 10276
    break;
   }
   $$1260 = $112; //@line 10280
   $$1263 = $$0262$lcssa; //@line 10280
   $$3272 = $$1270; //@line 10280
   $115 = HEAP32[$5 >> 2] | 0; //@line 10280
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 10291
     $156 = _getint_671($5) | 0; //@line 10292
     $$0254 = $156; //@line 10294
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 10294
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 10303
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 10308
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10313
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10320
      $144 = $125 + 4 | 0; //@line 10324
      HEAP32[$5 >> 2] = $144; //@line 10325
      $$0254 = $140; //@line 10326
      $$pre345 = $144; //@line 10326
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 10332
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10347
     $152 = HEAP32[$151 >> 2] | 0; //@line 10348
     HEAP32[$2 >> 2] = $151 + 4; //@line 10350
     $364 = $152; //@line 10351
    } else {
     $364 = 0; //@line 10353
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 10356
    HEAP32[$5 >> 2] = $154; //@line 10357
    $$0254 = $364; //@line 10358
    $$pre345 = $154; //@line 10358
   } else {
    $$0254 = -1; //@line 10360
    $$pre345 = $115; //@line 10360
   }
  } while (0);
  $$0252 = 0; //@line 10363
  $158 = $$pre345; //@line 10363
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 10370
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 10373
   HEAP32[$5 >> 2] = $158; //@line 10374
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (3213 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 10379
   $168 = $167 & 255; //@line 10380
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 10384
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 10391
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 10395
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 10399
     break L1;
    } else {
     label = 50; //@line 10402
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 10407
     $176 = $3 + ($$0253 << 3) | 0; //@line 10409
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 10414
     $182 = $6; //@line 10415
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 10417
     HEAP32[$182 + 4 >> 2] = $181; //@line 10420
     label = 50; //@line 10421
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 10425
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 10428
    $187 = HEAP32[$5 >> 2] | 0; //@line 10430
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 10434
   if ($10) {
    $187 = $158; //@line 10436
   } else {
    $$0243 = 0; //@line 10438
    $$0247 = $$1248; //@line 10438
    $$0269 = $$3272; //@line 10438
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 10444
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 10450
  $196 = $$1263 & -65537; //@line 10453
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 10454
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10462
       $$0243 = 0; //@line 10463
       $$0247 = $$1248; //@line 10463
       $$0269 = $$3272; //@line 10463
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10469
       $$0243 = 0; //@line 10470
       $$0247 = $$1248; //@line 10470
       $$0269 = $$3272; //@line 10470
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 10478
       HEAP32[$208 >> 2] = $$1248; //@line 10480
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10483
       $$0243 = 0; //@line 10484
       $$0247 = $$1248; //@line 10484
       $$0269 = $$3272; //@line 10484
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 10491
       $$0243 = 0; //@line 10492
       $$0247 = $$1248; //@line 10492
       $$0269 = $$3272; //@line 10492
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 10499
       $$0243 = 0; //@line 10500
       $$0247 = $$1248; //@line 10500
       $$0269 = $$3272; //@line 10500
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10506
       $$0243 = 0; //@line 10507
       $$0247 = $$1248; //@line 10507
       $$0269 = $$3272; //@line 10507
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 10515
       HEAP32[$220 >> 2] = $$1248; //@line 10517
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10520
       $$0243 = 0; //@line 10521
       $$0247 = $$1248; //@line 10521
       $$0269 = $$3272; //@line 10521
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 10526
       $$0247 = $$1248; //@line 10526
       $$0269 = $$3272; //@line 10526
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 10536
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 10536
     $$3265 = $$1263$ | 8; //@line 10536
     label = 62; //@line 10537
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 10541
     $$1255 = $$0254; //@line 10541
     $$3265 = $$1263$; //@line 10541
     label = 62; //@line 10542
     break;
    }
   case 111:
    {
     $242 = $6; //@line 10546
     $244 = HEAP32[$242 >> 2] | 0; //@line 10548
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 10551
     $248 = _fmt_o($244, $247, $11) | 0; //@line 10552
     $252 = $12 - $248 | 0; //@line 10556
     $$0228 = $248; //@line 10561
     $$1233 = 0; //@line 10561
     $$1238 = 3677; //@line 10561
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 10561
     $$4266 = $$1263$; //@line 10561
     $281 = $244; //@line 10561
     $283 = $247; //@line 10561
     label = 68; //@line 10562
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 10566
     $258 = HEAP32[$256 >> 2] | 0; //@line 10568
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 10571
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 10574
      $264 = tempRet0; //@line 10575
      $265 = $6; //@line 10576
      HEAP32[$265 >> 2] = $263; //@line 10578
      HEAP32[$265 + 4 >> 2] = $264; //@line 10581
      $$0232 = 1; //@line 10582
      $$0237 = 3677; //@line 10582
      $275 = $263; //@line 10582
      $276 = $264; //@line 10582
      label = 67; //@line 10583
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 10595
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 3677 : 3679 : 3678; //@line 10595
      $275 = $258; //@line 10595
      $276 = $261; //@line 10595
      label = 67; //@line 10596
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 10602
     $$0232 = 0; //@line 10608
     $$0237 = 3677; //@line 10608
     $275 = HEAP32[$197 >> 2] | 0; //@line 10608
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 10608
     label = 67; //@line 10609
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 10620
     $$2 = $13; //@line 10621
     $$2234 = 0; //@line 10621
     $$2239 = 3677; //@line 10621
     $$2251 = $11; //@line 10621
     $$5 = 1; //@line 10621
     $$6268 = $196; //@line 10621
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 10628
     label = 72; //@line 10629
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 10633
     $$1 = $302 | 0 ? $302 : 3687; //@line 10636
     label = 72; //@line 10637
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 10647
     HEAP32[$14 >> 2] = 0; //@line 10648
     HEAP32[$6 >> 2] = $8; //@line 10649
     $$4258354 = -1; //@line 10650
     $365 = $8; //@line 10650
     label = 76; //@line 10651
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 10655
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 10658
      $$0240$lcssa356 = 0; //@line 10659
      label = 85; //@line 10660
     } else {
      $$4258354 = $$0254; //@line 10662
      $365 = $$pre348; //@line 10662
      label = 76; //@line 10663
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 10670
     $$0247 = $$1248; //@line 10670
     $$0269 = $$3272; //@line 10670
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 10675
     $$2234 = 0; //@line 10675
     $$2239 = 3677; //@line 10675
     $$2251 = $11; //@line 10675
     $$5 = $$0254; //@line 10675
     $$6268 = $$1263$; //@line 10675
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 10681
    $227 = $6; //@line 10682
    $229 = HEAP32[$227 >> 2] | 0; //@line 10684
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 10687
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 10689
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 10695
    $$0228 = $234; //@line 10700
    $$1233 = $or$cond278 ? 0 : 2; //@line 10700
    $$1238 = $or$cond278 ? 3677 : 3677 + ($$1236 >> 4) | 0; //@line 10700
    $$2256 = $$1255; //@line 10700
    $$4266 = $$3265; //@line 10700
    $281 = $229; //@line 10700
    $283 = $232; //@line 10700
    label = 68; //@line 10701
   } else if ((label | 0) == 67) {
    label = 0; //@line 10704
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 10706
    $$1233 = $$0232; //@line 10706
    $$1238 = $$0237; //@line 10706
    $$2256 = $$0254; //@line 10706
    $$4266 = $$1263$; //@line 10706
    $281 = $275; //@line 10706
    $283 = $276; //@line 10706
    label = 68; //@line 10707
   } else if ((label | 0) == 72) {
    label = 0; //@line 10710
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 10711
    $306 = ($305 | 0) == 0; //@line 10712
    $$2 = $$1; //@line 10719
    $$2234 = 0; //@line 10719
    $$2239 = 3677; //@line 10719
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 10719
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 10719
    $$6268 = $196; //@line 10719
   } else if ((label | 0) == 76) {
    label = 0; //@line 10722
    $$0229316 = $365; //@line 10723
    $$0240315 = 0; //@line 10723
    $$1244314 = 0; //@line 10723
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 10725
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 10728
      $$2245 = $$1244314; //@line 10728
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 10731
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 10737
      $$2245 = $320; //@line 10737
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 10741
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 10744
      $$0240315 = $325; //@line 10744
      $$1244314 = $320; //@line 10744
     } else {
      $$0240$lcssa = $325; //@line 10746
      $$2245 = $320; //@line 10746
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 10752
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 10755
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 10758
     label = 85; //@line 10759
    } else {
     $$1230327 = $365; //@line 10761
     $$1241326 = 0; //@line 10761
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 10763
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10766
       label = 85; //@line 10767
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 10770
      $$1241326 = $331 + $$1241326 | 0; //@line 10771
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10774
       label = 85; //@line 10775
       break L97;
      }
      _out_670($0, $9, $331); //@line 10779
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10784
       label = 85; //@line 10785
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 10782
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 10793
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 10799
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 10801
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 10806
   $$2 = $or$cond ? $$0228 : $11; //@line 10811
   $$2234 = $$1233; //@line 10811
   $$2239 = $$1238; //@line 10811
   $$2251 = $11; //@line 10811
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 10811
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 10811
  } else if ((label | 0) == 85) {
   label = 0; //@line 10814
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 10816
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 10819
   $$0247 = $$1248; //@line 10819
   $$0269 = $$3272; //@line 10819
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 10824
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 10826
  $345 = $$$5 + $$2234 | 0; //@line 10827
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 10829
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 10830
  _out_670($0, $$2239, $$2234); //@line 10831
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 10833
  _pad_676($0, 48, $$$5, $343, 0); //@line 10834
  _out_670($0, $$2, $343); //@line 10835
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 10837
  $$0243 = $$2261; //@line 10838
  $$0247 = $$1248; //@line 10838
  $$0269 = $$3272; //@line 10838
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 10846
    } else {
     $$2242302 = 1; //@line 10848
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 10851
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 10854
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 10858
      $356 = $$2242302 + 1 | 0; //@line 10859
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 10862
      } else {
       $$2242$lcssa = $356; //@line 10864
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 10870
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 10876
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 10882
       } else {
        $$0 = 1; //@line 10884
        break;
       }
      }
     } else {
      $$0 = 1; //@line 10889
     }
    }
   } else {
    $$0 = $$1248; //@line 10893
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10897
 return $$0 | 0; //@line 10897
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 2372
 $3 = HEAP32[1577] | 0; //@line 2373
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 2376
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 2380
 $7 = $6 & 3; //@line 2381
 if (($7 | 0) == 1) {
  _abort(); //@line 2384
 }
 $9 = $6 & -8; //@line 2387
 $10 = $2 + $9 | 0; //@line 2388
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 2393
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 2399
   $17 = $13 + $9 | 0; //@line 2400
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 2403
   }
   if ((HEAP32[1578] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 2409
    $106 = HEAP32[$105 >> 2] | 0; //@line 2410
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 2414
     $$1382 = $17; //@line 2414
     $114 = $16; //@line 2414
     break;
    }
    HEAP32[1575] = $17; //@line 2417
    HEAP32[$105 >> 2] = $106 & -2; //@line 2419
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 2422
    HEAP32[$16 + $17 >> 2] = $17; //@line 2424
    return;
   }
   $21 = $13 >>> 3; //@line 2427
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 2431
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 2433
    $28 = 6332 + ($21 << 1 << 2) | 0; //@line 2435
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 2440
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2447
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[1573] = HEAP32[1573] & ~(1 << $21); //@line 2457
     $$1 = $16; //@line 2458
     $$1382 = $17; //@line 2458
     $114 = $16; //@line 2458
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 2464
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 2468
     }
     $41 = $26 + 8 | 0; //@line 2471
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 2475
     } else {
      _abort(); //@line 2477
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 2482
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 2483
    $$1 = $16; //@line 2484
    $$1382 = $17; //@line 2484
    $114 = $16; //@line 2484
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 2488
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 2490
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 2494
     $60 = $59 + 4 | 0; //@line 2495
     $61 = HEAP32[$60 >> 2] | 0; //@line 2496
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 2499
      if (!$63) {
       $$3 = 0; //@line 2502
       break;
      } else {
       $$1387 = $63; //@line 2505
       $$1390 = $59; //@line 2505
      }
     } else {
      $$1387 = $61; //@line 2508
      $$1390 = $60; //@line 2508
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 2511
      $66 = HEAP32[$65 >> 2] | 0; //@line 2512
      if ($66 | 0) {
       $$1387 = $66; //@line 2515
       $$1390 = $65; //@line 2515
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 2518
      $69 = HEAP32[$68 >> 2] | 0; //@line 2519
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 2524
       $$1390 = $68; //@line 2524
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 2529
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 2532
      $$3 = $$1387; //@line 2533
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 2538
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 2541
     }
     $53 = $51 + 12 | 0; //@line 2544
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2548
     }
     $56 = $48 + 8 | 0; //@line 2551
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 2555
      HEAP32[$56 >> 2] = $51; //@line 2556
      $$3 = $48; //@line 2557
      break;
     } else {
      _abort(); //@line 2560
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 2567
    $$1382 = $17; //@line 2567
    $114 = $16; //@line 2567
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 2570
    $75 = 6596 + ($74 << 2) | 0; //@line 2571
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 2576
      if (!$$3) {
       HEAP32[1574] = HEAP32[1574] & ~(1 << $74); //@line 2583
       $$1 = $16; //@line 2584
       $$1382 = $17; //@line 2584
       $114 = $16; //@line 2584
       break L10;
      }
     } else {
      if ((HEAP32[1577] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 2591
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 2599
       if (!$$3) {
        $$1 = $16; //@line 2602
        $$1382 = $17; //@line 2602
        $114 = $16; //@line 2602
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[1577] | 0; //@line 2610
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 2613
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 2617
    $92 = $16 + 16 | 0; //@line 2618
    $93 = HEAP32[$92 >> 2] | 0; //@line 2619
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 2625
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 2629
       HEAP32[$93 + 24 >> 2] = $$3; //@line 2631
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 2637
    if (!$99) {
     $$1 = $16; //@line 2640
     $$1382 = $17; //@line 2640
     $114 = $16; //@line 2640
    } else {
     if ((HEAP32[1577] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 2645
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 2649
      HEAP32[$99 + 24 >> 2] = $$3; //@line 2651
      $$1 = $16; //@line 2652
      $$1382 = $17; //@line 2652
      $114 = $16; //@line 2652
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 2658
   $$1382 = $9; //@line 2658
   $114 = $2; //@line 2658
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 2663
 }
 $115 = $10 + 4 | 0; //@line 2666
 $116 = HEAP32[$115 >> 2] | 0; //@line 2667
 if (!($116 & 1)) {
  _abort(); //@line 2671
 }
 if (!($116 & 2)) {
  if ((HEAP32[1579] | 0) == ($10 | 0)) {
   $124 = (HEAP32[1576] | 0) + $$1382 | 0; //@line 2681
   HEAP32[1576] = $124; //@line 2682
   HEAP32[1579] = $$1; //@line 2683
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 2686
   if (($$1 | 0) != (HEAP32[1578] | 0)) {
    return;
   }
   HEAP32[1578] = 0; //@line 2692
   HEAP32[1575] = 0; //@line 2693
   return;
  }
  if ((HEAP32[1578] | 0) == ($10 | 0)) {
   $132 = (HEAP32[1575] | 0) + $$1382 | 0; //@line 2700
   HEAP32[1575] = $132; //@line 2701
   HEAP32[1578] = $114; //@line 2702
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 2705
   HEAP32[$114 + $132 >> 2] = $132; //@line 2707
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 2711
  $138 = $116 >>> 3; //@line 2712
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 2717
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 2719
    $145 = 6332 + ($138 << 1 << 2) | 0; //@line 2721
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[1577] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 2727
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 2734
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[1573] = HEAP32[1573] & ~(1 << $138); //@line 2744
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 2750
    } else {
     if ((HEAP32[1577] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 2755
     }
     $160 = $143 + 8 | 0; //@line 2758
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 2762
     } else {
      _abort(); //@line 2764
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 2769
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 2770
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 2773
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 2775
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 2779
      $180 = $179 + 4 | 0; //@line 2780
      $181 = HEAP32[$180 >> 2] | 0; //@line 2781
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 2784
       if (!$183) {
        $$3400 = 0; //@line 2787
        break;
       } else {
        $$1398 = $183; //@line 2790
        $$1402 = $179; //@line 2790
       }
      } else {
       $$1398 = $181; //@line 2793
       $$1402 = $180; //@line 2793
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 2796
       $186 = HEAP32[$185 >> 2] | 0; //@line 2797
       if ($186 | 0) {
        $$1398 = $186; //@line 2800
        $$1402 = $185; //@line 2800
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 2803
       $189 = HEAP32[$188 >> 2] | 0; //@line 2804
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 2809
        $$1402 = $188; //@line 2809
       }
      }
      if ((HEAP32[1577] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 2815
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 2818
       $$3400 = $$1398; //@line 2819
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 2824
      if ((HEAP32[1577] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 2828
      }
      $173 = $170 + 12 | 0; //@line 2831
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 2835
      }
      $176 = $167 + 8 | 0; //@line 2838
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 2842
       HEAP32[$176 >> 2] = $170; //@line 2843
       $$3400 = $167; //@line 2844
       break;
      } else {
       _abort(); //@line 2847
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 2855
     $196 = 6596 + ($195 << 2) | 0; //@line 2856
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 2861
       if (!$$3400) {
        HEAP32[1574] = HEAP32[1574] & ~(1 << $195); //@line 2868
        break L108;
       }
      } else {
       if ((HEAP32[1577] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 2875
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 2883
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[1577] | 0; //@line 2893
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 2896
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 2900
     $213 = $10 + 16 | 0; //@line 2901
     $214 = HEAP32[$213 >> 2] | 0; //@line 2902
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 2908
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 2912
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 2914
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 2920
     if ($220 | 0) {
      if ((HEAP32[1577] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 2926
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 2930
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 2932
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 2941
  HEAP32[$114 + $137 >> 2] = $137; //@line 2943
  if (($$1 | 0) == (HEAP32[1578] | 0)) {
   HEAP32[1575] = $137; //@line 2947
   return;
  } else {
   $$2 = $137; //@line 2950
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 2954
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 2957
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 2959
  $$2 = $$1382; //@line 2960
 }
 $235 = $$2 >>> 3; //@line 2962
 if ($$2 >>> 0 < 256) {
  $238 = 6332 + ($235 << 1 << 2) | 0; //@line 2966
  $239 = HEAP32[1573] | 0; //@line 2967
  $240 = 1 << $235; //@line 2968
  if (!($239 & $240)) {
   HEAP32[1573] = $239 | $240; //@line 2973
   $$0403 = $238; //@line 2975
   $$pre$phiZ2D = $238 + 8 | 0; //@line 2975
  } else {
   $244 = $238 + 8 | 0; //@line 2977
   $245 = HEAP32[$244 >> 2] | 0; //@line 2978
   if ((HEAP32[1577] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 2982
   } else {
    $$0403 = $245; //@line 2985
    $$pre$phiZ2D = $244; //@line 2985
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 2988
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 2990
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 2992
  HEAP32[$$1 + 12 >> 2] = $238; //@line 2994
  return;
 }
 $251 = $$2 >>> 8; //@line 2997
 if (!$251) {
  $$0396 = 0; //@line 3000
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 3004
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 3008
   $257 = $251 << $256; //@line 3009
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 3012
   $262 = $257 << $260; //@line 3014
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 3017
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 3022
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 3028
  }
 }
 $276 = 6596 + ($$0396 << 2) | 0; //@line 3031
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 3033
 HEAP32[$$1 + 20 >> 2] = 0; //@line 3036
 HEAP32[$$1 + 16 >> 2] = 0; //@line 3037
 $280 = HEAP32[1574] | 0; //@line 3038
 $281 = 1 << $$0396; //@line 3039
 do {
  if (!($280 & $281)) {
   HEAP32[1574] = $280 | $281; //@line 3045
   HEAP32[$276 >> 2] = $$1; //@line 3046
   HEAP32[$$1 + 24 >> 2] = $276; //@line 3048
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 3050
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 3052
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 3060
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 3060
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 3067
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 3071
    $301 = HEAP32[$299 >> 2] | 0; //@line 3073
    if (!$301) {
     label = 121; //@line 3076
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 3079
     $$0384 = $301; //@line 3079
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[1577] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 3086
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 3089
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 3091
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 3093
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 3095
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 3100
    $309 = HEAP32[$308 >> 2] | 0; //@line 3101
    $310 = HEAP32[1577] | 0; //@line 3102
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 3108
     HEAP32[$308 >> 2] = $$1; //@line 3109
     HEAP32[$$1 + 8 >> 2] = $309; //@line 3111
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 3113
     HEAP32[$$1 + 24 >> 2] = 0; //@line 3115
     break;
    } else {
     _abort(); //@line 3118
    }
   }
  }
 } while (0);
 $319 = (HEAP32[1581] | 0) + -1 | 0; //@line 3125
 HEAP32[1581] = $319; //@line 3126
 if (!$319) {
  $$0212$in$i = 6748; //@line 3129
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 3134
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 3140
  }
 }
 HEAP32[1581] = -1; //@line 3143
 return;
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 3675
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 3677
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 3682
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 3689
   $12 = $7 + $1 | 0; //@line 3690
   $13 = HEAP32[1577] | 0; //@line 3691
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 3694
   }
   if ((HEAP32[1578] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 3700
    $102 = HEAP32[$101 >> 2] | 0; //@line 3701
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 3705
     $$1418 = $12; //@line 3705
     break;
    }
    HEAP32[1575] = $12; //@line 3708
    HEAP32[$101 >> 2] = $102 & -2; //@line 3710
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 3713
    HEAP32[$2 >> 2] = $12; //@line 3714
    return;
   }
   $17 = $7 >>> 3; //@line 3717
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 3721
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 3723
    $24 = 6332 + ($17 << 1 << 2) | 0; //@line 3725
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 3730
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3737
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[1573] = HEAP32[1573] & ~(1 << $17); //@line 3747
     $$1 = $11; //@line 3748
     $$1418 = $12; //@line 3748
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 3754
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 3758
     }
     $37 = $22 + 8 | 0; //@line 3761
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 3765
     } else {
      _abort(); //@line 3767
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 3772
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 3773
    $$1 = $11; //@line 3774
    $$1418 = $12; //@line 3774
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 3778
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 3780
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 3784
     $56 = $55 + 4 | 0; //@line 3785
     $57 = HEAP32[$56 >> 2] | 0; //@line 3786
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 3789
      if (!$59) {
       $$3 = 0; //@line 3792
       break;
      } else {
       $$1426 = $59; //@line 3795
       $$1429 = $55; //@line 3795
      }
     } else {
      $$1426 = $57; //@line 3798
      $$1429 = $56; //@line 3798
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 3801
      $62 = HEAP32[$61 >> 2] | 0; //@line 3802
      if ($62 | 0) {
       $$1426 = $62; //@line 3805
       $$1429 = $61; //@line 3805
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 3808
      $65 = HEAP32[$64 >> 2] | 0; //@line 3809
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 3814
       $$1429 = $64; //@line 3814
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 3819
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 3822
      $$3 = $$1426; //@line 3823
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 3828
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 3831
     }
     $49 = $47 + 12 | 0; //@line 3834
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3838
     }
     $52 = $44 + 8 | 0; //@line 3841
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 3845
      HEAP32[$52 >> 2] = $47; //@line 3846
      $$3 = $44; //@line 3847
      break;
     } else {
      _abort(); //@line 3850
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 3857
    $$1418 = $12; //@line 3857
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 3860
    $71 = 6596 + ($70 << 2) | 0; //@line 3861
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 3866
      if (!$$3) {
       HEAP32[1574] = HEAP32[1574] & ~(1 << $70); //@line 3873
       $$1 = $11; //@line 3874
       $$1418 = $12; //@line 3874
       break L1;
      }
     } else {
      if ((HEAP32[1577] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 3881
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 3889
       if (!$$3) {
        $$1 = $11; //@line 3892
        $$1418 = $12; //@line 3892
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[1577] | 0; //@line 3900
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3903
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 3907
    $88 = $11 + 16 | 0; //@line 3908
    $89 = HEAP32[$88 >> 2] | 0; //@line 3909
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 3915
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 3919
       HEAP32[$89 + 24 >> 2] = $$3; //@line 3921
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 3927
    if (!$95) {
     $$1 = $11; //@line 3930
     $$1418 = $12; //@line 3930
    } else {
     if ((HEAP32[1577] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 3935
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 3939
      HEAP32[$95 + 24 >> 2] = $$3; //@line 3941
      $$1 = $11; //@line 3942
      $$1418 = $12; //@line 3942
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 3948
   $$1418 = $1; //@line 3948
  }
 } while (0);
 $108 = HEAP32[1577] | 0; //@line 3951
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 3954
 }
 $110 = $2 + 4 | 0; //@line 3957
 $111 = HEAP32[$110 >> 2] | 0; //@line 3958
 if (!($111 & 2)) {
  if ((HEAP32[1579] | 0) == ($2 | 0)) {
   $117 = (HEAP32[1576] | 0) + $$1418 | 0; //@line 3966
   HEAP32[1576] = $117; //@line 3967
   HEAP32[1579] = $$1; //@line 3968
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 3971
   if (($$1 | 0) != (HEAP32[1578] | 0)) {
    return;
   }
   HEAP32[1578] = 0; //@line 3977
   HEAP32[1575] = 0; //@line 3978
   return;
  }
  if ((HEAP32[1578] | 0) == ($2 | 0)) {
   $125 = (HEAP32[1575] | 0) + $$1418 | 0; //@line 3985
   HEAP32[1575] = $125; //@line 3986
   HEAP32[1578] = $$1; //@line 3987
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 3990
   HEAP32[$$1 + $125 >> 2] = $125; //@line 3992
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 3996
  $131 = $111 >>> 3; //@line 3997
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 4002
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 4004
    $138 = 6332 + ($131 << 1 << 2) | 0; //@line 4006
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 4011
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 4018
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[1573] = HEAP32[1573] & ~(1 << $131); //@line 4028
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 4034
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 4038
     }
     $151 = $136 + 8 | 0; //@line 4041
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 4045
     } else {
      _abort(); //@line 4047
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 4052
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 4053
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 4056
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 4058
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 4062
      $170 = $169 + 4 | 0; //@line 4063
      $171 = HEAP32[$170 >> 2] | 0; //@line 4064
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 4067
       if (!$173) {
        $$3435 = 0; //@line 4070
        break;
       } else {
        $$1433 = $173; //@line 4073
        $$1437 = $169; //@line 4073
       }
      } else {
       $$1433 = $171; //@line 4076
       $$1437 = $170; //@line 4076
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 4079
       $176 = HEAP32[$175 >> 2] | 0; //@line 4080
       if ($176 | 0) {
        $$1433 = $176; //@line 4083
        $$1437 = $175; //@line 4083
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 4086
       $179 = HEAP32[$178 >> 2] | 0; //@line 4087
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 4092
        $$1437 = $178; //@line 4092
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 4097
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 4100
       $$3435 = $$1433; //@line 4101
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 4106
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 4109
      }
      $163 = $161 + 12 | 0; //@line 4112
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 4116
      }
      $166 = $158 + 8 | 0; //@line 4119
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 4123
       HEAP32[$166 >> 2] = $161; //@line 4124
       $$3435 = $158; //@line 4125
       break;
      } else {
       _abort(); //@line 4128
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 4136
     $185 = 6596 + ($184 << 2) | 0; //@line 4137
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 4142
       if (!$$3435) {
        HEAP32[1574] = HEAP32[1574] & ~(1 << $184); //@line 4149
        break L96;
       }
      } else {
       if ((HEAP32[1577] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 4156
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 4164
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[1577] | 0; //@line 4174
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 4177
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 4181
     $202 = $2 + 16 | 0; //@line 4182
     $203 = HEAP32[$202 >> 2] | 0; //@line 4183
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 4189
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 4193
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 4195
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 4201
     if ($209 | 0) {
      if ((HEAP32[1577] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 4207
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 4211
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 4213
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 4222
  HEAP32[$$1 + $130 >> 2] = $130; //@line 4224
  if (($$1 | 0) == (HEAP32[1578] | 0)) {
   HEAP32[1575] = $130; //@line 4228
   return;
  } else {
   $$2 = $130; //@line 4231
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 4235
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 4238
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 4240
  $$2 = $$1418; //@line 4241
 }
 $224 = $$2 >>> 3; //@line 4243
 if ($$2 >>> 0 < 256) {
  $227 = 6332 + ($224 << 1 << 2) | 0; //@line 4247
  $228 = HEAP32[1573] | 0; //@line 4248
  $229 = 1 << $224; //@line 4249
  if (!($228 & $229)) {
   HEAP32[1573] = $228 | $229; //@line 4254
   $$0438 = $227; //@line 4256
   $$pre$phiZ2D = $227 + 8 | 0; //@line 4256
  } else {
   $233 = $227 + 8 | 0; //@line 4258
   $234 = HEAP32[$233 >> 2] | 0; //@line 4259
   if ((HEAP32[1577] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 4263
   } else {
    $$0438 = $234; //@line 4266
    $$pre$phiZ2D = $233; //@line 4266
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 4269
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 4271
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 4273
  HEAP32[$$1 + 12 >> 2] = $227; //@line 4275
  return;
 }
 $240 = $$2 >>> 8; //@line 4278
 if (!$240) {
  $$0431 = 0; //@line 4281
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 4285
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 4289
   $246 = $240 << $245; //@line 4290
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 4293
   $251 = $246 << $249; //@line 4295
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 4298
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 4303
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 4309
  }
 }
 $265 = 6596 + ($$0431 << 2) | 0; //@line 4312
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 4314
 HEAP32[$$1 + 20 >> 2] = 0; //@line 4317
 HEAP32[$$1 + 16 >> 2] = 0; //@line 4318
 $269 = HEAP32[1574] | 0; //@line 4319
 $270 = 1 << $$0431; //@line 4320
 if (!($269 & $270)) {
  HEAP32[1574] = $269 | $270; //@line 4325
  HEAP32[$265 >> 2] = $$1; //@line 4326
  HEAP32[$$1 + 24 >> 2] = $265; //@line 4328
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4330
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4332
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 4341
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 4341
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 4348
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 4352
  $290 = HEAP32[$288 >> 2] | 0; //@line 4354
  if (!$290) {
   label = 118; //@line 4357
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 4360
   $$0420 = $290; //@line 4360
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[1577] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 4367
  }
  HEAP32[$288 >> 2] = $$1; //@line 4370
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 4372
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4374
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4376
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 4380
  $298 = HEAP32[$297 >> 2] | 0; //@line 4381
  $299 = HEAP32[1577] | 0; //@line 4382
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 4387
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 4391
  HEAP32[$297 >> 2] = $$1; //@line 4392
  HEAP32[$$1 + 8 >> 2] = $298; //@line 4394
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 4396
  HEAP32[$$1 + 24 >> 2] = 0; //@line 4398
  return;
 }
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $263 = 0, $265 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 6864
   $289 = 0; //@line 6865
   $290 = 0; //@line 6865
  } else {
   $6 = $0 + 4 | 0; //@line 6867
   $7 = $0 + 100 | 0; //@line 6868
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 6870
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 6875
     $16 = HEAPU8[$9 >> 0] | 0; //@line 6878
    } else {
     $16 = ___shgetc($0) | 0; //@line 6881
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 6893
      $21 = HEAP32[$6 >> 2] | 0; //@line 6894
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 6899
       $$0157 = $20; //@line 6902
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 6902
       break L11;
      } else {
       $$0157 = $20; //@line 6906
       $$0159 = ___shgetc($0) | 0; //@line 6906
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 6912
      $$0159 = $16; //@line 6912
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 6916
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 6923
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 6928
      $40 = HEAPU8[$32 >> 0] | 0; //@line 6931
     } else {
      $40 = ___shgetc($0) | 0; //@line 6934
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 6940
       $$1165167 = 8; //@line 6940
       label = 46; //@line 6941
       break;
      } else {
       $$1160 = $40; //@line 6944
       $$1165 = $1; //@line 6944
       label = 32; //@line 6945
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 6949
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 6954
      $50 = HEAPU8[$42 >> 0] | 0; //@line 6957
     } else {
      $50 = ___shgetc($0) | 0; //@line 6960
     }
     if ((HEAPU8[2948 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 6967
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 6971
      }
      if (!$2) {
       ___shlim($0, 0); //@line 6975
       $289 = 0; //@line 6976
       $290 = 0; //@line 6976
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 6980
       $290 = 0; //@line 6980
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 6985
      $289 = 0; //@line 6986
      $290 = 0; //@line 6986
      break L1;
     } else {
      $$1160169 = $50; //@line 6989
      $$1165167 = 16; //@line 6989
      label = 46; //@line 6990
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 6993
     if ($$166 >>> 0 > (HEAPU8[2948 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 6999
      $$1165 = $$166; //@line 6999
      label = 32; //@line 7000
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7007
      }
      ___shlim($0, 0); //@line 7009
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7011
      $289 = 0; //@line 7012
      $290 = 0; //@line 7012
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 7021
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 7024
       $74 = $70; //@line 7024
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 7027
        $75 = HEAP32[$6 >> 2] | 0; //@line 7028
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 7033
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 7036
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 7039
        }
        $74 = $$2161$be + -48 | 0; //@line 7041
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 7051
       $291 = $$0154222; //@line 7051
       $292 = 0; //@line 7051
      } else {
       $$2161$lcssa = $$1160; //@line 7053
       $291 = 0; //@line 7053
       $292 = 0; //@line 7053
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 7055
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 7058
       $88 = $291; //@line 7058
       $89 = $292; //@line 7058
       $93 = $86; //@line 7058
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 7060
        $91 = tempRet0; //@line 7061
        $94 = (($93 | 0) < 0) << 31 >> 31; //@line 7063
        $96 = ~$94; //@line 7065
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
         $$1165168 = 10; //@line 7072
         $$8 = $$3162215; //@line 7072
         $293 = $88; //@line 7072
         $294 = $89; //@line 7072
         label = 72; //@line 7073
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0; //@line 7076
        $89 = tempRet0; //@line 7077
        $104 = HEAP32[$6 >> 2] | 0; //@line 7078
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 7083
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 7086
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 7089
        }
        $93 = $$3162$be + -48 | 0; //@line 7091
        if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 7100
        }
       }
       if ($93 >>> 0 > 9) {
        $$1158 = $$0157; //@line 7107
        $263 = $89; //@line 7107
        $265 = $88; //@line 7107
       } else {
        $$1165168 = 10; //@line 7109
        $$8 = $$3162$be; //@line 7109
        $293 = $88; //@line 7109
        $294 = $89; //@line 7109
        label = 72; //@line 7110
       }
      } else {
       $$1158 = $$0157; //@line 7113
       $263 = $292; //@line 7113
       $265 = $291; //@line 7113
      }
     } else {
      $$1160169 = $$1160; //@line 7116
      $$1165167 = $$1165; //@line 7116
      label = 46; //@line 7117
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[3204 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 7132
      $133 = HEAP8[2948 + $$1160169 >> 0] | 0; //@line 7134
      $134 = $133 & 255; //@line 7135
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 7138
       $138 = $134; //@line 7138
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 7141
        $139 = HEAP32[$6 >> 2] | 0; //@line 7142
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 7147
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 7150
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 7153
        }
        $147 = HEAP8[2948 + $$4163$be >> 0] | 0; //@line 7156
        $138 = $147 & 255; //@line 7157
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 7167
       $155 = $147; //@line 7167
       $158 = 0; //@line 7167
       $160 = $$1155192; //@line 7167
      } else {
       $$4163$lcssa = $$1160169; //@line 7169
       $155 = $133; //@line 7169
       $158 = 0; //@line 7169
       $160 = 0; //@line 7169
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 7171
      $153 = tempRet0; //@line 7172
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 7182
       $$8 = $$4163$lcssa; //@line 7182
       $293 = $160; //@line 7182
       $294 = $158; //@line 7182
       label = 72; //@line 7183
       break;
      } else {
       $164 = $160; //@line 7186
       $165 = $158; //@line 7186
       $169 = $155; //@line 7186
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 7189
       $167 = tempRet0; //@line 7190
       $170 = $166 | $169 & 255; //@line 7192
       $171 = HEAP32[$6 >> 2] | 0; //@line 7193
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 7198
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 7201
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 7204
       }
       $169 = HEAP8[2948 + $$5$be >> 0] | 0; //@line 7207
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 7217
        $$8 = $$5$be; //@line 7217
        $293 = $170; //@line 7217
        $294 = $167; //@line 7217
        label = 72; //@line 7218
        break L63;
       } else {
        $164 = $170; //@line 7221
        $165 = $167; //@line 7221
       }
      }
     }
     $123 = HEAP8[2948 + $$1160169 >> 0] | 0; //@line 7226
     $124 = $123 & 255; //@line 7227
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 7230
      $189 = $124; //@line 7230
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 7233
       $190 = HEAP32[$6 >> 2] | 0; //@line 7234
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 7239
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 7242
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 7245
       }
       $198 = HEAP8[2948 + $$6$be >> 0] | 0; //@line 7248
       $189 = $198 & 255; //@line 7249
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 7259
      $204 = $198; //@line 7259
      $295 = $$2156210; //@line 7259
      $296 = 0; //@line 7259
     } else {
      $$6$lcssa = $$1160169; //@line 7261
      $204 = $123; //@line 7261
      $295 = 0; //@line 7261
      $296 = 0; //@line 7261
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 7266
      $207 = tempRet0; //@line 7267
      $$7198 = $$6$lcssa; //@line 7268
      $209 = $296; //@line 7268
      $211 = $295; //@line 7268
      $218 = $204; //@line 7268
      while (1) {
       if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 7276
        $$8 = $$7198; //@line 7276
        $293 = $211; //@line 7276
        $294 = $209; //@line 7276
        label = 72; //@line 7277
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0; //@line 7280
       $216 = tempRet0; //@line 7281
       $217 = $218 & 255; //@line 7282
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 7290
        $$8 = $$7198; //@line 7290
        $293 = $211; //@line 7290
        $294 = $209; //@line 7290
        label = 72; //@line 7291
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 7294
       $226 = tempRet0; //@line 7295
       $227 = HEAP32[$6 >> 2] | 0; //@line 7296
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 7301
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 7304
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 7307
       }
       $218 = HEAP8[2948 + $$7$be >> 0] | 0; //@line 7310
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 7316
        $$8 = $$7$be; //@line 7316
        $293 = $225; //@line 7316
        $294 = $226; //@line 7316
        label = 72; //@line 7317
        break;
       } else {
        $$7198 = $$7$be; //@line 7314
        $209 = $226; //@line 7314
        $211 = $225; //@line 7314
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 7322
      $$8 = $$6$lcssa; //@line 7322
      $293 = $295; //@line 7322
      $294 = $296; //@line 7322
      label = 72; //@line 7323
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[2948 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 7334
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 7339
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 7342
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 7345
      }
     } while ($$1165168 >>> 0 > (HEAPU8[2948 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7356
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 7362
     $263 = $4; //@line 7362
     $265 = $3; //@line 7362
    } else {
     $$1158 = $$0157; //@line 7364
     $263 = $294; //@line 7364
     $265 = $293; //@line 7364
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7372
   }
   if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7388
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 7389
     $289 = tempRet0; //@line 7391
     $290 = $275; //@line 7391
     break;
    }
    if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7401
     $289 = $4; //@line 7402
     $290 = $3; //@line 7402
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 7407
   $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 7410
   $289 = tempRet0; //@line 7412
   $290 = $287; //@line 7412
  }
 } while (0);
 tempRet0 = $289; //@line 7415
 return $290 | 0; //@line 7416
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_30($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$1 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $101 = 0, $109 = 0, $12 = 0, $120 = 0, $125 = 0, $126 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $56 = 0, $6 = 0, $62 = 0, $69 = 0, $70 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $85 = 0, $86 = 0, $90 = 0, $93 = 0, $95 = 0, $96 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10354
 STACKTOP = STACKTOP + 32 | 0; //@line 10355
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10355
 $$byval_copy = sp; //@line 10356
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10358
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10360
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10362
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10364
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 10366
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10368
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10370
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10372
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10374
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10376
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10378
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10380
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10382
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10384
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10386
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10388
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 10390
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 10392
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 10394
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10396
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$6 >> 0] = 0; //@line 10399
  HEAP8[$20 >> 0] = 1; //@line 10400
  HEAP8[$22 >> 0] = 1; //@line 10401
  HEAP8[$24 >> 0] = 0; //@line 10402
  HEAP8[$26 >> 0] = 0; //@line 10403
  HEAP8[$28 >> 0] = 1; //@line 10404
  HEAP8[$30 >> 0] = 0; //@line 10405
  HEAP8[$30 + 1 >> 0] = 0; //@line 10405
  HEAP8[$30 + 2 >> 0] = 0; //@line 10405
  HEAP8[$30 + 3 >> 0] = 0; //@line 10405
  HEAP8[$30 + 4 >> 0] = 0; //@line 10405
  HEAP8[$30 + 5 >> 0] = 0; //@line 10405
  if (!(HEAP8[$18 >> 0] | 0)) {
   $223 = $8; //@line 10409
  } else {
   $$019$i$1 = $18; //@line 10411
   $211 = $8; //@line 10411
   while (1) {
    $208 = _strcspn($$019$i$1, 3745) | 0; //@line 10413
    $210 = $211 + 1 | 0; //@line 10415
    HEAP8[$211 >> 0] = $208; //@line 10416
    $212 = $208 & 255; //@line 10417
    _memcpy($210 | 0, $$019$i$1 | 0, $212 | 0) | 0; //@line 10418
    $213 = $210 + $212 | 0; //@line 10419
    $$019$i$1 = $$019$i$1 + ($208 + ((HEAP8[$$019$i$1 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 10425
    if (!(HEAP8[$$019$i$1 >> 0] | 0)) {
     $223 = $213; //@line 10429
     break;
    } else {
     $211 = $213; //@line 10432
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 10437
  HEAP8[$223 + 1 >> 0] = 0; //@line 10439
  HEAP8[$223 + 2 >> 0] = $10; //@line 10441
  HEAP8[$223 + 3 >> 0] = 0; //@line 10443
  HEAP8[$223 + 4 >> 0] = 1; //@line 10444
  HEAP32[$$byval_copy >> 2] = HEAP32[119]; //@line 10445
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[120]; //@line 10445
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[121]; //@line 10445
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[122]; //@line 10445
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[123]; //@line 10445
  __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy, 53); //@line 10446
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(80) | 0; //@line 10450
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($4, $14, $6, $223 + 5 - $16 | 0) | 0; //@line 10451
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 95; //@line 10454
   $231 = $ReallocAsyncCtx9 + 4 | 0; //@line 10455
   HEAP32[$231 >> 2] = $2; //@line 10456
   $232 = $ReallocAsyncCtx9 + 8 | 0; //@line 10457
   HEAP32[$232 >> 2] = $4; //@line 10458
   $233 = $ReallocAsyncCtx9 + 12 | 0; //@line 10459
   HEAP32[$233 >> 2] = $6; //@line 10460
   $234 = $ReallocAsyncCtx9 + 16 | 0; //@line 10461
   HEAP32[$234 >> 2] = $8; //@line 10462
   $235 = $ReallocAsyncCtx9 + 20 | 0; //@line 10463
   HEAP8[$235 >> 0] = $10; //@line 10464
   $236 = $ReallocAsyncCtx9 + 24 | 0; //@line 10465
   HEAP32[$236 >> 2] = $12; //@line 10466
   $237 = $ReallocAsyncCtx9 + 28 | 0; //@line 10467
   HEAP32[$237 >> 2] = $14; //@line 10468
   $238 = $ReallocAsyncCtx9 + 32 | 0; //@line 10469
   HEAP32[$238 >> 2] = $16; //@line 10470
   $239 = $ReallocAsyncCtx9 + 36 | 0; //@line 10471
   HEAP32[$239 >> 2] = $18; //@line 10472
   $240 = $ReallocAsyncCtx9 + 40 | 0; //@line 10473
   HEAP32[$240 >> 2] = $20; //@line 10474
   $241 = $ReallocAsyncCtx9 + 44 | 0; //@line 10475
   HEAP32[$241 >> 2] = $22; //@line 10476
   $242 = $ReallocAsyncCtx9 + 48 | 0; //@line 10477
   HEAP32[$242 >> 2] = $24; //@line 10478
   $243 = $ReallocAsyncCtx9 + 52 | 0; //@line 10479
   HEAP32[$243 >> 2] = $26; //@line 10480
   $244 = $ReallocAsyncCtx9 + 56 | 0; //@line 10481
   HEAP32[$244 >> 2] = $28; //@line 10482
   $245 = $ReallocAsyncCtx9 + 60 | 0; //@line 10483
   HEAP32[$245 >> 2] = $30; //@line 10484
   $246 = $ReallocAsyncCtx9 + 64 | 0; //@line 10485
   HEAP32[$246 >> 2] = $32; //@line 10486
   $247 = $ReallocAsyncCtx9 + 68 | 0; //@line 10487
   HEAP32[$247 >> 2] = $34; //@line 10488
   $248 = $ReallocAsyncCtx9 + 72 | 0; //@line 10489
   HEAP32[$248 >> 2] = $36; //@line 10490
   $249 = $ReallocAsyncCtx9 + 76 | 0; //@line 10491
   HEAP32[$249 >> 2] = $38; //@line 10492
   sp = STACKTOP; //@line 10493
   STACKTOP = sp; //@line 10494
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 10497
  ___async_unwind = 0; //@line 10498
  HEAP32[$ReallocAsyncCtx9 >> 2] = 95; //@line 10499
  $231 = $ReallocAsyncCtx9 + 4 | 0; //@line 10500
  HEAP32[$231 >> 2] = $2; //@line 10501
  $232 = $ReallocAsyncCtx9 + 8 | 0; //@line 10502
  HEAP32[$232 >> 2] = $4; //@line 10503
  $233 = $ReallocAsyncCtx9 + 12 | 0; //@line 10504
  HEAP32[$233 >> 2] = $6; //@line 10505
  $234 = $ReallocAsyncCtx9 + 16 | 0; //@line 10506
  HEAP32[$234 >> 2] = $8; //@line 10507
  $235 = $ReallocAsyncCtx9 + 20 | 0; //@line 10508
  HEAP8[$235 >> 0] = $10; //@line 10509
  $236 = $ReallocAsyncCtx9 + 24 | 0; //@line 10510
  HEAP32[$236 >> 2] = $12; //@line 10511
  $237 = $ReallocAsyncCtx9 + 28 | 0; //@line 10512
  HEAP32[$237 >> 2] = $14; //@line 10513
  $238 = $ReallocAsyncCtx9 + 32 | 0; //@line 10514
  HEAP32[$238 >> 2] = $16; //@line 10515
  $239 = $ReallocAsyncCtx9 + 36 | 0; //@line 10516
  HEAP32[$239 >> 2] = $18; //@line 10517
  $240 = $ReallocAsyncCtx9 + 40 | 0; //@line 10518
  HEAP32[$240 >> 2] = $20; //@line 10519
  $241 = $ReallocAsyncCtx9 + 44 | 0; //@line 10520
  HEAP32[$241 >> 2] = $22; //@line 10521
  $242 = $ReallocAsyncCtx9 + 48 | 0; //@line 10522
  HEAP32[$242 >> 2] = $24; //@line 10523
  $243 = $ReallocAsyncCtx9 + 52 | 0; //@line 10524
  HEAP32[$243 >> 2] = $26; //@line 10525
  $244 = $ReallocAsyncCtx9 + 56 | 0; //@line 10526
  HEAP32[$244 >> 2] = $28; //@line 10527
  $245 = $ReallocAsyncCtx9 + 60 | 0; //@line 10528
  HEAP32[$245 >> 2] = $30; //@line 10529
  $246 = $ReallocAsyncCtx9 + 64 | 0; //@line 10530
  HEAP32[$246 >> 2] = $32; //@line 10531
  $247 = $ReallocAsyncCtx9 + 68 | 0; //@line 10532
  HEAP32[$247 >> 2] = $34; //@line 10533
  $248 = $ReallocAsyncCtx9 + 72 | 0; //@line 10534
  HEAP32[$248 >> 2] = $36; //@line 10535
  $249 = $ReallocAsyncCtx9 + 76 | 0; //@line 10536
  HEAP32[$249 >> 2] = $38; //@line 10537
  sp = STACKTOP; //@line 10538
  STACKTOP = sp; //@line 10539
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 10543
 } else {
  $56 = HEAPU8[$26 >> 0] << 8 | HEAPU8[$28 >> 0]; //@line 10559
  $62 = HEAPU8[$30 >> 0] << 8 | HEAPU8[$36 >> 0]; //@line 10565
  if (((HEAP8[$22 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$6 >> 0] << 8 | HEAPU8[$20 >> 0] | 0) == 1 : 0) & (HEAP8[$24 >> 0] & 15) == 0) {
   if (!$56) {
    $251 = $8; //@line 10575
   } else {
    $$093119$i = 0; //@line 10577
    $70 = $8; //@line 10577
    while (1) {
     $69 = HEAP8[$70 >> 0] | 0; //@line 10579
     if (!($69 << 24 >> 24)) {
      $$lcssa$i = $70; //@line 10582
     } else {
      $75 = $70; //@line 10584
      $77 = $69; //@line 10584
      while (1) {
       $78 = $75 + 1 + ($77 & 255) | 0; //@line 10588
       $77 = HEAP8[$78 >> 0] | 0; //@line 10589
       if (!($77 << 24 >> 24)) {
        $$lcssa$i = $78; //@line 10592
        break;
       } else {
        $75 = $78; //@line 10595
       }
      }
     }
     $81 = $$lcssa$i + 5 | 0; //@line 10599
     $$093119$i = $$093119$i + 1 | 0; //@line 10600
     if (($$093119$i | 0) >= ($56 | 0)) {
      $251 = $81; //@line 10605
      break;
     } else {
      $70 = $81; //@line 10603
     }
    }
   }
   if (($32 | 0) != 0 & ($62 | 0) != 0) {
    $$090117$i = $38; //@line 10614
    $$094116$i = 0; //@line 10614
    $$095115$i = 0; //@line 10614
    $85 = $251; //@line 10614
    while (1) {
     $86 = HEAP8[$85 >> 0] | 0; //@line 10617
     do {
      if (!($86 << 24 >> 24)) {
       $101 = $85 + 1 | 0; //@line 10621
      } else {
       $90 = $86 & 255; //@line 10624
       $93 = $85; //@line 10624
       while (1) {
        if ($90 & 192 | 0) {
         label = 13; //@line 10629
         break;
        }
        $95 = $93 + 1 + $90 | 0; //@line 10633
        $96 = HEAP8[$95 >> 0] | 0; //@line 10634
        if (!($96 << 24 >> 24)) {
         label = 15; //@line 10638
         break;
        } else {
         $90 = $96 & 255; //@line 10641
         $93 = $95; //@line 10641
        }
       }
       if ((label | 0) == 13) {
        label = 0; //@line 10645
        $101 = $93 + 2 | 0; //@line 10647
        break;
       } else if ((label | 0) == 15) {
        label = 0; //@line 10651
        $101 = $95 + 1 | 0; //@line 10653
        break;
       }
      }
     } while (0);
     $109 = (HEAPU8[$101 >> 0] << 8 | HEAPU8[$101 + 1 >> 0]) & 65535; //@line 10666
     $120 = $101 + 10 | 0; //@line 10677
     $125 = HEAPU8[$101 + 8 >> 0] << 8 | HEAPU8[$101 + 9 >> 0]; //@line 10682
     $126 = $125 & 65535; //@line 10683
     $128 = (HEAPU8[$101 + 2 >> 0] << 8 | HEAPU8[$101 + 3 >> 0] | 0) == 1; //@line 10685
     do {
      if ($109 << 16 >> 16 == 1 & $128 & $126 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 10691
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$120 >> 0] | 0; //@line 10695
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$101 + 11 >> 0] | 0; //@line 10699
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$101 + 12 >> 0] | 0; //@line 10703
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$101 + 13 >> 0] | 0; //@line 10707
       $$0 = $101 + 14 | 0; //@line 10710
       $$1$i = $$090117$i + 20 | 0; //@line 10710
       $$196$i = $$095115$i + 1 | 0; //@line 10710
      } else {
       if ($109 << 16 >> 16 == 28 & $128 & $126 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 10717
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$120 >> 0] | 0; //@line 10721
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$101 + 11 >> 0] | 0; //@line 10725
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$101 + 12 >> 0] | 0; //@line 10729
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$101 + 13 >> 0] | 0; //@line 10733
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$101 + 14 >> 0] | 0; //@line 10737
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$101 + 15 >> 0] | 0; //@line 10741
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$101 + 16 >> 0] | 0; //@line 10745
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$101 + 17 >> 0] | 0; //@line 10749
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$101 + 18 >> 0] | 0; //@line 10753
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$101 + 19 >> 0] | 0; //@line 10757
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$101 + 20 >> 0] | 0; //@line 10761
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$101 + 21 >> 0] | 0; //@line 10765
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$101 + 22 >> 0] | 0; //@line 10769
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$101 + 23 >> 0] | 0; //@line 10773
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$101 + 24 >> 0] | 0; //@line 10777
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$101 + 25 >> 0] | 0; //@line 10781
        $$0 = $101 + 26 | 0; //@line 10784
        $$1$i = $$090117$i + 20 | 0; //@line 10784
        $$196$i = $$095115$i + 1 | 0; //@line 10784
        break;
       } else {
        $$0 = $120 + $125 | 0; //@line 10788
        $$1$i = $$090117$i; //@line 10788
        $$196$i = $$095115$i; //@line 10788
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 10793
     if (!(($$094116$i | 0) < ($62 | 0) & $$196$i >>> 0 < $32 >>> 0)) {
      $$089$i = $$196$i; //@line 10800
      break;
     } else {
      $$090117$i = $$1$i; //@line 10798
      $$095115$i = $$196$i; //@line 10798
      $85 = $$0; //@line 10798
     }
    }
   } else {
    $$089$i = 0; //@line 10805
   }
  } else {
   $$089$i = 0; //@line 10808
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 10812
 }
 _free($6); //@line 10814
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 10815
 $203 = __ZN6Socket5closeEv($34) | 0; //@line 10816
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 10819
  $204 = $ReallocAsyncCtx12 + 4 | 0; //@line 10820
  HEAP32[$204 >> 2] = $$355; //@line 10821
  $205 = $ReallocAsyncCtx12 + 8 | 0; //@line 10822
  HEAP32[$205 >> 2] = $4; //@line 10823
  $206 = $ReallocAsyncCtx12 + 12 | 0; //@line 10824
  HEAP32[$206 >> 2] = $2; //@line 10825
  sp = STACKTOP; //@line 10826
  STACKTOP = sp; //@line 10827
  return;
 }
 HEAP32[___async_retval >> 2] = $203; //@line 10830
 ___async_unwind = 0; //@line 10831
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 10832
 $204 = $ReallocAsyncCtx12 + 4 | 0; //@line 10833
 HEAP32[$204 >> 2] = $$355; //@line 10834
 $205 = $ReallocAsyncCtx12 + 8 | 0; //@line 10835
 HEAP32[$205 >> 2] = $4; //@line 10836
 $206 = $ReallocAsyncCtx12 + 12 | 0; //@line 10837
 HEAP32[$206 >> 2] = $2; //@line 10838
 sp = STACKTOP; //@line 10839
 STACKTOP = sp; //@line 10840
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_29($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$2 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $100 = 0, $108 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $55 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9850
 STACKTOP = STACKTOP + 32 | 0; //@line 9851
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9851
 $$byval_copy = sp; //@line 9852
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9854
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9856
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9858
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9860
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 9862
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9864
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9866
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9868
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9870
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9872
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9874
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9876
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9878
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9880
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9882
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9884
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9886
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9888
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9890
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9892
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$6 >> 0] = 0; //@line 9895
  HEAP8[$20 >> 0] = 1; //@line 9896
  HEAP8[$22 >> 0] = 1; //@line 9897
  HEAP8[$24 >> 0] = 0; //@line 9898
  HEAP8[$26 >> 0] = 0; //@line 9899
  HEAP8[$28 >> 0] = 1; //@line 9900
  HEAP8[$30 >> 0] = 0; //@line 9901
  HEAP8[$30 + 1 >> 0] = 0; //@line 9901
  HEAP8[$30 + 2 >> 0] = 0; //@line 9901
  HEAP8[$30 + 3 >> 0] = 0; //@line 9901
  HEAP8[$30 + 4 >> 0] = 0; //@line 9901
  HEAP8[$30 + 5 >> 0] = 0; //@line 9901
  if (!(HEAP8[$18 >> 0] | 0)) {
   $223 = $8; //@line 9905
  } else {
   $$019$i$2 = $18; //@line 9907
   $211 = $8; //@line 9907
   while (1) {
    $208 = _strcspn($$019$i$2, 3745) | 0; //@line 9909
    $210 = $211 + 1 | 0; //@line 9911
    HEAP8[$211 >> 0] = $208; //@line 9912
    $212 = $208 & 255; //@line 9913
    _memcpy($210 | 0, $$019$i$2 | 0, $212 | 0) | 0; //@line 9914
    $213 = $210 + $212 | 0; //@line 9915
    $$019$i$2 = $$019$i$2 + ($208 + ((HEAP8[$$019$i$2 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 9921
    if (!(HEAP8[$$019$i$2 >> 0] | 0)) {
     $223 = $213; //@line 9925
     break;
    } else {
     $211 = $213; //@line 9928
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 9933
  HEAP8[$223 + 1 >> 0] = 0; //@line 9935
  HEAP8[$223 + 2 >> 0] = $10; //@line 9937
  HEAP8[$223 + 3 >> 0] = 0; //@line 9939
  HEAP8[$223 + 4 >> 0] = 1; //@line 9940
  HEAP32[$$byval_copy >> 2] = HEAP32[124]; //@line 9941
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[125]; //@line 9941
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[126]; //@line 9941
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[127]; //@line 9941
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[128]; //@line 9941
  __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy, 53); //@line 9942
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(80) | 0; //@line 9946
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($4, $14, $6, $223 + 5 - $16 | 0) | 0; //@line 9947
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 9950
   $231 = $ReallocAsyncCtx8 + 4 | 0; //@line 9951
   HEAP32[$231 >> 2] = $2; //@line 9952
   $232 = $ReallocAsyncCtx8 + 8 | 0; //@line 9953
   HEAP32[$232 >> 2] = $4; //@line 9954
   $233 = $ReallocAsyncCtx8 + 12 | 0; //@line 9955
   HEAP32[$233 >> 2] = $6; //@line 9956
   $234 = $ReallocAsyncCtx8 + 16 | 0; //@line 9957
   HEAP32[$234 >> 2] = $8; //@line 9958
   $235 = $ReallocAsyncCtx8 + 20 | 0; //@line 9959
   HEAP8[$235 >> 0] = $10; //@line 9960
   $236 = $ReallocAsyncCtx8 + 24 | 0; //@line 9961
   HEAP32[$236 >> 2] = $12; //@line 9962
   $237 = $ReallocAsyncCtx8 + 28 | 0; //@line 9963
   HEAP32[$237 >> 2] = $14; //@line 9964
   $238 = $ReallocAsyncCtx8 + 32 | 0; //@line 9965
   HEAP32[$238 >> 2] = $16; //@line 9966
   $239 = $ReallocAsyncCtx8 + 36 | 0; //@line 9967
   HEAP32[$239 >> 2] = $18; //@line 9968
   $240 = $ReallocAsyncCtx8 + 40 | 0; //@line 9969
   HEAP32[$240 >> 2] = $20; //@line 9970
   $241 = $ReallocAsyncCtx8 + 44 | 0; //@line 9971
   HEAP32[$241 >> 2] = $22; //@line 9972
   $242 = $ReallocAsyncCtx8 + 48 | 0; //@line 9973
   HEAP32[$242 >> 2] = $24; //@line 9974
   $243 = $ReallocAsyncCtx8 + 52 | 0; //@line 9975
   HEAP32[$243 >> 2] = $26; //@line 9976
   $244 = $ReallocAsyncCtx8 + 56 | 0; //@line 9977
   HEAP32[$244 >> 2] = $28; //@line 9978
   $245 = $ReallocAsyncCtx8 + 60 | 0; //@line 9979
   HEAP32[$245 >> 2] = $30; //@line 9980
   $246 = $ReallocAsyncCtx8 + 64 | 0; //@line 9981
   HEAP32[$246 >> 2] = $32; //@line 9982
   $247 = $ReallocAsyncCtx8 + 68 | 0; //@line 9983
   HEAP32[$247 >> 2] = $34; //@line 9984
   $248 = $ReallocAsyncCtx8 + 72 | 0; //@line 9985
   HEAP32[$248 >> 2] = $36; //@line 9986
   $249 = $ReallocAsyncCtx8 + 76 | 0; //@line 9987
   HEAP32[$249 >> 2] = $38; //@line 9988
   sp = STACKTOP; //@line 9989
   STACKTOP = sp; //@line 9990
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 9993
  ___async_unwind = 0; //@line 9994
  HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 9995
  $231 = $ReallocAsyncCtx8 + 4 | 0; //@line 9996
  HEAP32[$231 >> 2] = $2; //@line 9997
  $232 = $ReallocAsyncCtx8 + 8 | 0; //@line 9998
  HEAP32[$232 >> 2] = $4; //@line 9999
  $233 = $ReallocAsyncCtx8 + 12 | 0; //@line 10000
  HEAP32[$233 >> 2] = $6; //@line 10001
  $234 = $ReallocAsyncCtx8 + 16 | 0; //@line 10002
  HEAP32[$234 >> 2] = $8; //@line 10003
  $235 = $ReallocAsyncCtx8 + 20 | 0; //@line 10004
  HEAP8[$235 >> 0] = $10; //@line 10005
  $236 = $ReallocAsyncCtx8 + 24 | 0; //@line 10006
  HEAP32[$236 >> 2] = $12; //@line 10007
  $237 = $ReallocAsyncCtx8 + 28 | 0; //@line 10008
  HEAP32[$237 >> 2] = $14; //@line 10009
  $238 = $ReallocAsyncCtx8 + 32 | 0; //@line 10010
  HEAP32[$238 >> 2] = $16; //@line 10011
  $239 = $ReallocAsyncCtx8 + 36 | 0; //@line 10012
  HEAP32[$239 >> 2] = $18; //@line 10013
  $240 = $ReallocAsyncCtx8 + 40 | 0; //@line 10014
  HEAP32[$240 >> 2] = $20; //@line 10015
  $241 = $ReallocAsyncCtx8 + 44 | 0; //@line 10016
  HEAP32[$241 >> 2] = $22; //@line 10017
  $242 = $ReallocAsyncCtx8 + 48 | 0; //@line 10018
  HEAP32[$242 >> 2] = $24; //@line 10019
  $243 = $ReallocAsyncCtx8 + 52 | 0; //@line 10020
  HEAP32[$243 >> 2] = $26; //@line 10021
  $244 = $ReallocAsyncCtx8 + 56 | 0; //@line 10022
  HEAP32[$244 >> 2] = $28; //@line 10023
  $245 = $ReallocAsyncCtx8 + 60 | 0; //@line 10024
  HEAP32[$245 >> 2] = $30; //@line 10025
  $246 = $ReallocAsyncCtx8 + 64 | 0; //@line 10026
  HEAP32[$246 >> 2] = $32; //@line 10027
  $247 = $ReallocAsyncCtx8 + 68 | 0; //@line 10028
  HEAP32[$247 >> 2] = $34; //@line 10029
  $248 = $ReallocAsyncCtx8 + 72 | 0; //@line 10030
  HEAP32[$248 >> 2] = $36; //@line 10031
  $249 = $ReallocAsyncCtx8 + 76 | 0; //@line 10032
  HEAP32[$249 >> 2] = $38; //@line 10033
  sp = STACKTOP; //@line 10034
  STACKTOP = sp; //@line 10035
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 10039
 } else {
  $55 = HEAPU8[$26 >> 0] << 8 | HEAPU8[$28 >> 0]; //@line 10055
  $61 = HEAPU8[$30 >> 0] << 8 | HEAPU8[$36 >> 0]; //@line 10061
  if (((HEAP8[$22 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$6 >> 0] << 8 | HEAPU8[$20 >> 0] | 0) == 1 : 0) & (HEAP8[$24 >> 0] & 15) == 0) {
   if (!$55) {
    $251 = $8; //@line 10071
   } else {
    $$093119$i = 0; //@line 10073
    $69 = $8; //@line 10073
    while (1) {
     $68 = HEAP8[$69 >> 0] | 0; //@line 10075
     if (!($68 << 24 >> 24)) {
      $$lcssa$i = $69; //@line 10078
     } else {
      $74 = $69; //@line 10080
      $76 = $68; //@line 10080
      while (1) {
       $77 = $74 + 1 + ($76 & 255) | 0; //@line 10084
       $76 = HEAP8[$77 >> 0] | 0; //@line 10085
       if (!($76 << 24 >> 24)) {
        $$lcssa$i = $77; //@line 10088
        break;
       } else {
        $74 = $77; //@line 10091
       }
      }
     }
     $80 = $$lcssa$i + 5 | 0; //@line 10095
     $$093119$i = $$093119$i + 1 | 0; //@line 10096
     if (($$093119$i | 0) >= ($55 | 0)) {
      $251 = $80; //@line 10101
      break;
     } else {
      $69 = $80; //@line 10099
     }
    }
   }
   if (($32 | 0) != 0 & ($61 | 0) != 0) {
    $$090117$i = $38; //@line 10110
    $$094116$i = 0; //@line 10110
    $$095115$i = 0; //@line 10110
    $84 = $251; //@line 10110
    while (1) {
     $85 = HEAP8[$84 >> 0] | 0; //@line 10113
     do {
      if (!($85 << 24 >> 24)) {
       $100 = $84 + 1 | 0; //@line 10117
      } else {
       $89 = $85 & 255; //@line 10120
       $92 = $84; //@line 10120
       while (1) {
        if ($89 & 192 | 0) {
         label = 12; //@line 10125
         break;
        }
        $94 = $92 + 1 + $89 | 0; //@line 10129
        $95 = HEAP8[$94 >> 0] | 0; //@line 10130
        if (!($95 << 24 >> 24)) {
         label = 14; //@line 10134
         break;
        } else {
         $89 = $95 & 255; //@line 10137
         $92 = $94; //@line 10137
        }
       }
       if ((label | 0) == 12) {
        label = 0; //@line 10141
        $100 = $92 + 2 | 0; //@line 10143
        break;
       } else if ((label | 0) == 14) {
        label = 0; //@line 10147
        $100 = $94 + 1 | 0; //@line 10149
        break;
       }
      }
     } while (0);
     $108 = (HEAPU8[$100 >> 0] << 8 | HEAPU8[$100 + 1 >> 0]) & 65535; //@line 10162
     $119 = $100 + 10 | 0; //@line 10173
     $124 = HEAPU8[$100 + 8 >> 0] << 8 | HEAPU8[$100 + 9 >> 0]; //@line 10178
     $125 = $124 & 65535; //@line 10179
     $127 = (HEAPU8[$100 + 2 >> 0] << 8 | HEAPU8[$100 + 3 >> 0] | 0) == 1; //@line 10181
     do {
      if ($108 << 16 >> 16 == 1 & $127 & $125 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 10187
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 10191
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 10195
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 10199
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 10203
       $$0 = $100 + 14 | 0; //@line 10206
       $$1$i = $$090117$i + 20 | 0; //@line 10206
       $$196$i = $$095115$i + 1 | 0; //@line 10206
      } else {
       if ($108 << 16 >> 16 == 28 & $127 & $125 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 10213
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 10217
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 10221
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 10225
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 10229
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$100 + 14 >> 0] | 0; //@line 10233
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$100 + 15 >> 0] | 0; //@line 10237
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$100 + 16 >> 0] | 0; //@line 10241
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$100 + 17 >> 0] | 0; //@line 10245
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$100 + 18 >> 0] | 0; //@line 10249
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$100 + 19 >> 0] | 0; //@line 10253
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$100 + 20 >> 0] | 0; //@line 10257
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$100 + 21 >> 0] | 0; //@line 10261
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$100 + 22 >> 0] | 0; //@line 10265
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$100 + 23 >> 0] | 0; //@line 10269
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$100 + 24 >> 0] | 0; //@line 10273
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$100 + 25 >> 0] | 0; //@line 10277
        $$0 = $100 + 26 | 0; //@line 10280
        $$1$i = $$090117$i + 20 | 0; //@line 10280
        $$196$i = $$095115$i + 1 | 0; //@line 10280
        break;
       } else {
        $$0 = $119 + $124 | 0; //@line 10284
        $$1$i = $$090117$i; //@line 10284
        $$196$i = $$095115$i; //@line 10284
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 10289
     if (!(($$094116$i | 0) < ($61 | 0) & $$196$i >>> 0 < $32 >>> 0)) {
      $$089$i = $$196$i; //@line 10296
      break;
     } else {
      $$090117$i = $$1$i; //@line 10294
      $$095115$i = $$196$i; //@line 10294
      $84 = $$0; //@line 10294
     }
    }
   } else {
    $$089$i = 0; //@line 10301
   }
  } else {
   $$089$i = 0; //@line 10304
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 10308
 }
 _free($6); //@line 10310
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 10311
 $200 = __ZN6Socket5closeEv($34) | 0; //@line 10312
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 10315
  $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 10316
  HEAP32[$201 >> 2] = $$355; //@line 10317
  $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 10318
  HEAP32[$202 >> 2] = $4; //@line 10319
  $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 10320
  HEAP32[$203 >> 2] = $2; //@line 10321
  sp = STACKTOP; //@line 10322
  STACKTOP = sp; //@line 10323
  return;
 }
 HEAP32[___async_retval >> 2] = $200; //@line 10326
 ___async_unwind = 0; //@line 10327
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 10328
 $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 10329
 HEAP32[$201 >> 2] = $$355; //@line 10330
 $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 10331
 HEAP32[$202 >> 2] = $4; //@line 10332
 $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 10333
 HEAP32[$203 >> 2] = $2; //@line 10334
 sp = STACKTOP; //@line 10335
 STACKTOP = sp; //@line 10336
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_28($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$3 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $100 = 0, $108 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $55 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9346
 STACKTOP = STACKTOP + 32 | 0; //@line 9347
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9347
 $$byval_copy = sp; //@line 9348
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9350
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9352
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9354
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9356
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 9358
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9360
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9362
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9364
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9366
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9368
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9370
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9372
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9374
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9376
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9378
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9380
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9382
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9384
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9386
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9388
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$6 >> 0] = 0; //@line 9391
  HEAP8[$20 >> 0] = 1; //@line 9392
  HEAP8[$22 >> 0] = 1; //@line 9393
  HEAP8[$24 >> 0] = 0; //@line 9394
  HEAP8[$26 >> 0] = 0; //@line 9395
  HEAP8[$28 >> 0] = 1; //@line 9396
  HEAP8[$30 >> 0] = 0; //@line 9397
  HEAP8[$30 + 1 >> 0] = 0; //@line 9397
  HEAP8[$30 + 2 >> 0] = 0; //@line 9397
  HEAP8[$30 + 3 >> 0] = 0; //@line 9397
  HEAP8[$30 + 4 >> 0] = 0; //@line 9397
  HEAP8[$30 + 5 >> 0] = 0; //@line 9397
  if (!(HEAP8[$18 >> 0] | 0)) {
   $223 = $8; //@line 9401
  } else {
   $$019$i$3 = $18; //@line 9403
   $211 = $8; //@line 9403
   while (1) {
    $208 = _strcspn($$019$i$3, 3745) | 0; //@line 9405
    $210 = $211 + 1 | 0; //@line 9407
    HEAP8[$211 >> 0] = $208; //@line 9408
    $212 = $208 & 255; //@line 9409
    _memcpy($210 | 0, $$019$i$3 | 0, $212 | 0) | 0; //@line 9410
    $213 = $210 + $212 | 0; //@line 9411
    $$019$i$3 = $$019$i$3 + ($208 + ((HEAP8[$$019$i$3 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 9417
    if (!(HEAP8[$$019$i$3 >> 0] | 0)) {
     $223 = $213; //@line 9421
     break;
    } else {
     $211 = $213; //@line 9424
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 9429
  HEAP8[$223 + 1 >> 0] = 0; //@line 9431
  HEAP8[$223 + 2 >> 0] = $10; //@line 9433
  HEAP8[$223 + 3 >> 0] = 0; //@line 9435
  HEAP8[$223 + 4 >> 0] = 1; //@line 9436
  HEAP32[$$byval_copy >> 2] = HEAP32[129]; //@line 9437
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[130]; //@line 9437
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[131]; //@line 9437
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[132]; //@line 9437
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[133]; //@line 9437
  __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy, 53); //@line 9438
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(80) | 0; //@line 9442
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($4, $14, $6, $223 + 5 - $16 | 0) | 0; //@line 9443
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 9446
   $231 = $ReallocAsyncCtx7 + 4 | 0; //@line 9447
   HEAP32[$231 >> 2] = $2; //@line 9448
   $232 = $ReallocAsyncCtx7 + 8 | 0; //@line 9449
   HEAP32[$232 >> 2] = $4; //@line 9450
   $233 = $ReallocAsyncCtx7 + 12 | 0; //@line 9451
   HEAP32[$233 >> 2] = $6; //@line 9452
   $234 = $ReallocAsyncCtx7 + 16 | 0; //@line 9453
   HEAP32[$234 >> 2] = $8; //@line 9454
   $235 = $ReallocAsyncCtx7 + 20 | 0; //@line 9455
   HEAP32[$235 >> 2] = $18; //@line 9456
   $236 = $ReallocAsyncCtx7 + 24 | 0; //@line 9457
   HEAP8[$236 >> 0] = $10; //@line 9458
   $237 = $ReallocAsyncCtx7 + 28 | 0; //@line 9459
   HEAP32[$237 >> 2] = $12; //@line 9460
   $238 = $ReallocAsyncCtx7 + 32 | 0; //@line 9461
   HEAP32[$238 >> 2] = $14; //@line 9462
   $239 = $ReallocAsyncCtx7 + 36 | 0; //@line 9463
   HEAP32[$239 >> 2] = $16; //@line 9464
   $240 = $ReallocAsyncCtx7 + 40 | 0; //@line 9465
   HEAP32[$240 >> 2] = $20; //@line 9466
   $241 = $ReallocAsyncCtx7 + 44 | 0; //@line 9467
   HEAP32[$241 >> 2] = $22; //@line 9468
   $242 = $ReallocAsyncCtx7 + 48 | 0; //@line 9469
   HEAP32[$242 >> 2] = $24; //@line 9470
   $243 = $ReallocAsyncCtx7 + 52 | 0; //@line 9471
   HEAP32[$243 >> 2] = $26; //@line 9472
   $244 = $ReallocAsyncCtx7 + 56 | 0; //@line 9473
   HEAP32[$244 >> 2] = $28; //@line 9474
   $245 = $ReallocAsyncCtx7 + 60 | 0; //@line 9475
   HEAP32[$245 >> 2] = $30; //@line 9476
   $246 = $ReallocAsyncCtx7 + 64 | 0; //@line 9477
   HEAP32[$246 >> 2] = $32; //@line 9478
   $247 = $ReallocAsyncCtx7 + 68 | 0; //@line 9479
   HEAP32[$247 >> 2] = $34; //@line 9480
   $248 = $ReallocAsyncCtx7 + 72 | 0; //@line 9481
   HEAP32[$248 >> 2] = $36; //@line 9482
   $249 = $ReallocAsyncCtx7 + 76 | 0; //@line 9483
   HEAP32[$249 >> 2] = $38; //@line 9484
   sp = STACKTOP; //@line 9485
   STACKTOP = sp; //@line 9486
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 9489
  ___async_unwind = 0; //@line 9490
  HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 9491
  $231 = $ReallocAsyncCtx7 + 4 | 0; //@line 9492
  HEAP32[$231 >> 2] = $2; //@line 9493
  $232 = $ReallocAsyncCtx7 + 8 | 0; //@line 9494
  HEAP32[$232 >> 2] = $4; //@line 9495
  $233 = $ReallocAsyncCtx7 + 12 | 0; //@line 9496
  HEAP32[$233 >> 2] = $6; //@line 9497
  $234 = $ReallocAsyncCtx7 + 16 | 0; //@line 9498
  HEAP32[$234 >> 2] = $8; //@line 9499
  $235 = $ReallocAsyncCtx7 + 20 | 0; //@line 9500
  HEAP32[$235 >> 2] = $18; //@line 9501
  $236 = $ReallocAsyncCtx7 + 24 | 0; //@line 9502
  HEAP8[$236 >> 0] = $10; //@line 9503
  $237 = $ReallocAsyncCtx7 + 28 | 0; //@line 9504
  HEAP32[$237 >> 2] = $12; //@line 9505
  $238 = $ReallocAsyncCtx7 + 32 | 0; //@line 9506
  HEAP32[$238 >> 2] = $14; //@line 9507
  $239 = $ReallocAsyncCtx7 + 36 | 0; //@line 9508
  HEAP32[$239 >> 2] = $16; //@line 9509
  $240 = $ReallocAsyncCtx7 + 40 | 0; //@line 9510
  HEAP32[$240 >> 2] = $20; //@line 9511
  $241 = $ReallocAsyncCtx7 + 44 | 0; //@line 9512
  HEAP32[$241 >> 2] = $22; //@line 9513
  $242 = $ReallocAsyncCtx7 + 48 | 0; //@line 9514
  HEAP32[$242 >> 2] = $24; //@line 9515
  $243 = $ReallocAsyncCtx7 + 52 | 0; //@line 9516
  HEAP32[$243 >> 2] = $26; //@line 9517
  $244 = $ReallocAsyncCtx7 + 56 | 0; //@line 9518
  HEAP32[$244 >> 2] = $28; //@line 9519
  $245 = $ReallocAsyncCtx7 + 60 | 0; //@line 9520
  HEAP32[$245 >> 2] = $30; //@line 9521
  $246 = $ReallocAsyncCtx7 + 64 | 0; //@line 9522
  HEAP32[$246 >> 2] = $32; //@line 9523
  $247 = $ReallocAsyncCtx7 + 68 | 0; //@line 9524
  HEAP32[$247 >> 2] = $34; //@line 9525
  $248 = $ReallocAsyncCtx7 + 72 | 0; //@line 9526
  HEAP32[$248 >> 2] = $36; //@line 9527
  $249 = $ReallocAsyncCtx7 + 76 | 0; //@line 9528
  HEAP32[$249 >> 2] = $38; //@line 9529
  sp = STACKTOP; //@line 9530
  STACKTOP = sp; //@line 9531
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 9535
 } else {
  $55 = HEAPU8[$26 >> 0] << 8 | HEAPU8[$28 >> 0]; //@line 9551
  $61 = HEAPU8[$30 >> 0] << 8 | HEAPU8[$36 >> 0]; //@line 9557
  if (((HEAP8[$22 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$6 >> 0] << 8 | HEAPU8[$20 >> 0] | 0) == 1 : 0) & (HEAP8[$24 >> 0] & 15) == 0) {
   if (!$55) {
    $251 = $8; //@line 9567
   } else {
    $$093119$i = 0; //@line 9569
    $69 = $8; //@line 9569
    while (1) {
     $68 = HEAP8[$69 >> 0] | 0; //@line 9571
     if (!($68 << 24 >> 24)) {
      $$lcssa$i = $69; //@line 9574
     } else {
      $74 = $69; //@line 9576
      $76 = $68; //@line 9576
      while (1) {
       $77 = $74 + 1 + ($76 & 255) | 0; //@line 9580
       $76 = HEAP8[$77 >> 0] | 0; //@line 9581
       if (!($76 << 24 >> 24)) {
        $$lcssa$i = $77; //@line 9584
        break;
       } else {
        $74 = $77; //@line 9587
       }
      }
     }
     $80 = $$lcssa$i + 5 | 0; //@line 9591
     $$093119$i = $$093119$i + 1 | 0; //@line 9592
     if (($$093119$i | 0) >= ($55 | 0)) {
      $251 = $80; //@line 9597
      break;
     } else {
      $69 = $80; //@line 9595
     }
    }
   }
   if (($32 | 0) != 0 & ($61 | 0) != 0) {
    $$090117$i = $38; //@line 9606
    $$094116$i = 0; //@line 9606
    $$095115$i = 0; //@line 9606
    $84 = $251; //@line 9606
    while (1) {
     $85 = HEAP8[$84 >> 0] | 0; //@line 9609
     do {
      if (!($85 << 24 >> 24)) {
       $100 = $84 + 1 | 0; //@line 9613
      } else {
       $89 = $85 & 255; //@line 9616
       $92 = $84; //@line 9616
       while (1) {
        if ($89 & 192 | 0) {
         label = 12; //@line 9621
         break;
        }
        $94 = $92 + 1 + $89 | 0; //@line 9625
        $95 = HEAP8[$94 >> 0] | 0; //@line 9626
        if (!($95 << 24 >> 24)) {
         label = 14; //@line 9630
         break;
        } else {
         $89 = $95 & 255; //@line 9633
         $92 = $94; //@line 9633
        }
       }
       if ((label | 0) == 12) {
        label = 0; //@line 9637
        $100 = $92 + 2 | 0; //@line 9639
        break;
       } else if ((label | 0) == 14) {
        label = 0; //@line 9643
        $100 = $94 + 1 | 0; //@line 9645
        break;
       }
      }
     } while (0);
     $108 = (HEAPU8[$100 >> 0] << 8 | HEAPU8[$100 + 1 >> 0]) & 65535; //@line 9658
     $119 = $100 + 10 | 0; //@line 9669
     $124 = HEAPU8[$100 + 8 >> 0] << 8 | HEAPU8[$100 + 9 >> 0]; //@line 9674
     $125 = $124 & 65535; //@line 9675
     $127 = (HEAPU8[$100 + 2 >> 0] << 8 | HEAPU8[$100 + 3 >> 0] | 0) == 1; //@line 9677
     do {
      if ($108 << 16 >> 16 == 1 & $127 & $125 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 9683
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 9687
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 9691
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 9695
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 9699
       $$0 = $100 + 14 | 0; //@line 9702
       $$1$i = $$090117$i + 20 | 0; //@line 9702
       $$196$i = $$095115$i + 1 | 0; //@line 9702
      } else {
       if ($108 << 16 >> 16 == 28 & $127 & $125 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 9709
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 9713
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 9717
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 9721
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 9725
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$100 + 14 >> 0] | 0; //@line 9729
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$100 + 15 >> 0] | 0; //@line 9733
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$100 + 16 >> 0] | 0; //@line 9737
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$100 + 17 >> 0] | 0; //@line 9741
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$100 + 18 >> 0] | 0; //@line 9745
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$100 + 19 >> 0] | 0; //@line 9749
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$100 + 20 >> 0] | 0; //@line 9753
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$100 + 21 >> 0] | 0; //@line 9757
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$100 + 22 >> 0] | 0; //@line 9761
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$100 + 23 >> 0] | 0; //@line 9765
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$100 + 24 >> 0] | 0; //@line 9769
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$100 + 25 >> 0] | 0; //@line 9773
        $$0 = $100 + 26 | 0; //@line 9776
        $$1$i = $$090117$i + 20 | 0; //@line 9776
        $$196$i = $$095115$i + 1 | 0; //@line 9776
        break;
       } else {
        $$0 = $119 + $124 | 0; //@line 9780
        $$1$i = $$090117$i; //@line 9780
        $$196$i = $$095115$i; //@line 9780
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 9785
     if (!(($$094116$i | 0) < ($61 | 0) & $$196$i >>> 0 < $32 >>> 0)) {
      $$089$i = $$196$i; //@line 9792
      break;
     } else {
      $$090117$i = $$1$i; //@line 9790
      $$095115$i = $$196$i; //@line 9790
      $84 = $$0; //@line 9790
     }
    }
   } else {
    $$089$i = 0; //@line 9797
   }
  } else {
   $$089$i = 0; //@line 9800
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 9804
 }
 _free($6); //@line 9806
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 9807
 $200 = __ZN6Socket5closeEv($34) | 0; //@line 9808
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 9811
  $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 9812
  HEAP32[$201 >> 2] = $$355; //@line 9813
  $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 9814
  HEAP32[$202 >> 2] = $4; //@line 9815
  $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 9816
  HEAP32[$203 >> 2] = $2; //@line 9817
  sp = STACKTOP; //@line 9818
  STACKTOP = sp; //@line 9819
  return;
 }
 HEAP32[___async_retval >> 2] = $200; //@line 9822
 ___async_unwind = 0; //@line 9823
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 9824
 $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 9825
 HEAP32[$201 >> 2] = $$355; //@line 9826
 $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 9827
 HEAP32[$202 >> 2] = $4; //@line 9828
 $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 9829
 HEAP32[$203 >> 2] = $2; //@line 9830
 sp = STACKTOP; //@line 9831
 STACKTOP = sp; //@line 9832
 return;
}
function _sn_coap_parser_options_parse_multiple_options($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$04966$i = 0, $$04966$us$i = 0, $$05165$i = 0, $$05165$us$i = 0, $$053$i68 = 0, $$06378 = 0, $$06378$us = 0, $$064 = 0, $$065$be$in = 0, $$065$be$us$in = 0, $$06577 = 0, $$06577$us = 0, $$080 = 0, $$080$us = 0, $$1 = 0, $$1$i = 0, $$1$us = 0, $$1$us$i = 0, $$152$in$i = 0, $$152$in$us$i = 0, $$lcssa94$sink$i = 0, $$sink = 0, $$sink69 = 0, $$sink69$in = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $106 = 0, $11 = 0, $111 = 0, $113 = 0, $116 = 0, $121 = 0, $123 = 0, $124 = 0, $127 = 0, $130 = 0, $139 = 0, $144 = 0, $148 = 0, $15 = 0, $150 = 0, $153 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $164 = 0, $167 = 0, $17 = 0, $172 = 0, $174 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $43 = 0, $49 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $76 = 0, $8 = 0, $88 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $AsyncCtx = 0, $sext = 0, $trunc = 0, $trunc$i = 0, $trunc$us$i = 0, $trunc110 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5921
 $7 = HEAP32[$1 >> 2] | 0; //@line 5922
 $8 = $2 & 65535; //@line 5923
 do {
  if ($2 << 16 >> 16) {
   $10 = ($5 | 0) == 17; //@line 5927
   $11 = ($5 | 0) == 4; //@line 5928
   L3 : do {
    switch ($5 | 0) {
    case 8:
    case 11:
    case 15:
    case 20:
     {
      $$04966$us$i = 0; //@line 5932
      $$05165$us$i = $6; //@line 5932
      $17 = 1; //@line 5932
      L22 : while (1) {
       if ($11 & ($$05165$us$i & 65535) > 8 | (($$05165$us$i & 65535) > 255 | $10 & ($$05165$us$i & 65535) > 2)) {
        $$064 = -1; //@line 5942
        label = 54; //@line 5943
        break;
       }
       $15 = $$05165$us$i & 65535; //@line 5946
       $16 = $17 + $15 | 0; //@line 5947
       $18 = $16 & 65535; //@line 5948
       $21 = ($$04966$us$i & 65535) + 1 + $15 | 0; //@line 5951
       $22 = $16 & 65535; //@line 5952
       if (($22 | 0) == ($8 | 0)) {
        $$lcssa94$sink$i = $21; //@line 5955
        label = 23; //@line 5956
        break L3;
       }
       if ($22 >>> 0 > $8 >>> 0) {
        $$064 = -1; //@line 5961
        label = 54; //@line 5962
        break;
       }
       $25 = $7 + $22 | 0; //@line 5965
       $trunc$us$i = HEAP8[$25 >> 0] | 0; //@line 5966
       $26 = $trunc$us$i & 255; //@line 5967
       if ($26 & 240 | 0) {
        $$sink69$in = $21; //@line 5971
        break L3;
       }
       switch ($trunc$us$i & 15) {
       case 15:
        {
         $$064 = -1; //@line 5978
         label = 54; //@line 5979
         break L22;
         break;
        }
       case 13:
        {
         if (($22 + 1 | 0) >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 5987
          label = 54; //@line 5988
          break L22;
         }
         $43 = $18 + 1 << 16 >> 16; //@line 5991
         $$1$us$i = $43; //@line 5997
         $$152$in$us$i = (HEAPU8[$7 + ($43 & 65535) >> 0] | 0) + 13 | 0; //@line 5997
         break;
        }
       case 14:
        {
         $29 = $22 + 2 | 0; //@line 6001
         if ($29 >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 6004
          label = 54; //@line 6005
          break L22;
         }
         $$1$us$i = $29 & 65535; //@line 6018
         $$152$in$us$i = (HEAPU8[$25 + 2 >> 0] | 0) + 269 + ((HEAPU8[$25 + 1 >> 0] | 0) << 8) | 0; //@line 6018
         break;
        }
       default:
        {
         $$1$us$i = $18; //@line 6022
         $$152$in$us$i = $26 & 15; //@line 6022
        }
       }
       $49 = $$1$us$i + 1 << 16 >> 16; //@line 6026
       if (($49 & 65535) > ($2 & 65535)) {
        $$lcssa94$sink$i = $21; //@line 6030
        label = 23; //@line 6031
        break L3;
       } else {
        $$04966$us$i = $21; //@line 6034
        $$05165$us$i = $$152$in$us$i & 65535; //@line 6034
        $17 = $49 & 65535; //@line 6034
       }
      }
      if ((label | 0) == 54) {
       return $$064 | 0; //@line 6038
      }
      break;
     }
    default:
     {
      $$04966$i = 0; //@line 6043
      $$05165$i = $6; //@line 6043
      $56 = 1; //@line 6043
      L4 : while (1) {
       if ($10 & ($$05165$i & 65535) > 2 | $11 & ($$05165$i & 65535) > 8) {
        $$064 = -1; //@line 6051
        label = 54; //@line 6052
        break;
       }
       $54 = $$05165$i & 65535; //@line 6055
       $55 = $56 + $54 | 0; //@line 6056
       $57 = $55 & 65535; //@line 6057
       $60 = ($$04966$i & 65535) + 1 + $54 | 0; //@line 6060
       $61 = $55 & 65535; //@line 6061
       if (($61 | 0) == ($8 | 0)) {
        $$lcssa94$sink$i = $60; //@line 6064
        label = 23; //@line 6065
        break L3;
       }
       if ($61 >>> 0 > $8 >>> 0) {
        $$064 = -1; //@line 6070
        label = 54; //@line 6071
        break;
       }
       $64 = $7 + $61 | 0; //@line 6074
       $trunc$i = HEAP8[$64 >> 0] | 0; //@line 6075
       $65 = $trunc$i & 255; //@line 6076
       if ($65 & 240 | 0) {
        $$sink69$in = $60; //@line 6080
        break L3;
       }
       switch ($trunc$i & 15) {
       case 15:
        {
         $$064 = -1; //@line 6087
         label = 54; //@line 6088
         break L4;
         break;
        }
       case 13:
        {
         if (($61 + 1 | 0) >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 6096
          label = 54; //@line 6097
          break L4;
         }
         $70 = $57 + 1 << 16 >> 16; //@line 6100
         $$1$i = $70; //@line 6106
         $$152$in$i = (HEAPU8[$7 + ($70 & 65535) >> 0] | 0) + 13 | 0; //@line 6106
         break;
        }
       case 14:
        {
         $76 = $61 + 2 | 0; //@line 6110
         if ($76 >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 6113
          label = 54; //@line 6114
          break L4;
         }
         $$1$i = $76 & 65535; //@line 6127
         $$152$in$i = (HEAPU8[$64 + 2 >> 0] | 0) + 269 + ((HEAPU8[$64 + 1 >> 0] | 0) << 8) | 0; //@line 6127
         break;
        }
       default:
        {
         $$1$i = $57; //@line 6131
         $$152$in$i = $65 & 15; //@line 6131
        }
       }
       $88 = $$1$i + 1 << 16 >> 16; //@line 6135
       if (($88 & 65535) > ($2 & 65535)) {
        $$lcssa94$sink$i = $60; //@line 6139
        label = 23; //@line 6140
        break L3;
       } else {
        $$04966$i = $60; //@line 6143
        $$05165$i = $$152$in$i & 65535; //@line 6143
        $56 = $88 & 65535; //@line 6143
       }
      }
      if ((label | 0) == 54) {
       return $$064 | 0; //@line 6147
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    if (!(($$lcssa94$sink$i & 65535) << 16 >> 16)) {
     break;
    } else {
     $$sink69$in = $$lcssa94$sink$i; //@line 6158
    }
   }
   $$sink69 = $$sink69$in + 65535 | 0; //@line 6161
   $93 = $$sink69 & 65535; //@line 6162
   $sext = $$sink69 << 16; //@line 6163
   $94 = $sext >> 16; //@line 6164
   switch ($93 << 16 >> 16) {
   case 0:
    {
     $$053$i68 = 0; //@line 6167
     break;
    }
   case -1:
    {
     $$064 = -1; //@line 6171
     return $$064 | 0; //@line 6172
    }
   default:
    {
     label = 25; //@line 6176
    }
   }
   if ((label | 0) == 25) {
    $95 = HEAP32[$0 >> 2] | 0; //@line 6180
    $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 6181
    $96 = FUNCTION_TABLE_ii[$95 & 15]($93) | 0; //@line 6182
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 58; //@line 6185
     HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6187
     HEAP32[$AsyncCtx + 8 >> 2] = $94; //@line 6189
     HEAP16[$AsyncCtx + 12 >> 1] = $6; //@line 6191
     HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 6193
     HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 6195
     HEAP16[$AsyncCtx + 24 >> 1] = $93; //@line 6197
     HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 6199
     HEAP32[$AsyncCtx + 32 >> 2] = $sext; //@line 6201
     sp = STACKTOP; //@line 6202
     return 0; //@line 6203
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6205
    HEAP32[$3 >> 2] = $96; //@line 6206
    if (!$96) {
     $$064 = -1; //@line 6209
     return $$064 | 0; //@line 6210
    } else {
     $$053$i68 = $93; //@line 6212
    }
   }
   HEAP16[$4 >> 1] = $$053$i68; //@line 6215
   $106 = HEAP32[$3 >> 2] | 0; //@line 6216
   if (($sext | 0) <= 0) {
    $$064 = 0; //@line 6219
    return $$064 | 0; //@line 6220
   }
   if (($5 | 0) == 20) {
    $$06378$us = $106; //@line 6224
    $$06577$us = $6; //@line 6224
    $$080$us = 0; //@line 6224
    while (1) {
     if (!($$080$us << 24 >> 24)) {
      $$1$us = $$06378$us; //@line 6228
     } else {
      HEAP8[$$06378$us >> 0] = 38; //@line 6230
      $$1$us = $$06378$us + 1 | 0; //@line 6232
     }
     $111 = $$080$us + 1 << 24 >> 24; //@line 6234
     $113 = (HEAP32[$1 >> 2] | 0) + 1 | 0; //@line 6236
     HEAP32[$1 >> 2] = $113; //@line 6237
     $116 = $$06577$us & 65535; //@line 6240
     if (($$1$us + $116 - (HEAP32[$3 >> 2] | 0) | 0) > ($94 | 0)) {
      $$064 = -1; //@line 6245
      label = 54; //@line 6246
      break;
     }
     _memcpy($$1$us | 0, $113 | 0, $116 | 0) | 0; //@line 6249
     $121 = (HEAP32[$1 >> 2] | 0) + $116 | 0; //@line 6251
     HEAP32[$1 >> 2] = $121; //@line 6252
     $$06378$us = $$1$us + $116 | 0; //@line 6253
     $123 = HEAP32[$3 >> 2] | 0; //@line 6254
     $124 = $$06378$us; //@line 6255
     if (($124 - $123 | 0) >= ($94 | 0)) {
      $$064 = $111; //@line 6259
      label = 54; //@line 6260
      break;
     }
     $trunc110 = HEAP8[$121 >> 0] | 0; //@line 6263
     $127 = $trunc110 & 255; //@line 6264
     if ($127 & 240 | 0) {
      $$064 = $111; //@line 6268
      label = 54; //@line 6269
      break;
     }
     switch ($trunc110 & 15) {
     case 13:
      {
       $139 = $121 + 1 | 0; //@line 6276
       $$sink87 = $139; //@line 6280
       $$sink88 = (HEAPU8[$139 >> 0] | 0) + 13 | 0; //@line 6280
       label = 39; //@line 6281
       break;
      }
     case 14:
      {
       $130 = $121 + 2 | 0; //@line 6285
       $$sink87 = $130; //@line 6294
       $$sink88 = (HEAPU8[$130 >> 0] | 0) + 269 + ((HEAPU8[$121 + 1 >> 0] | 0) << 8) | 0; //@line 6294
       label = 39; //@line 6295
       break;
      }
     default:
      {
       $$065$be$us$in = $127 & 15; //@line 6299
       $144 = $123; //@line 6299
      }
     }
     if ((label | 0) == 39) {
      label = 0; //@line 6303
      HEAP32[$1 >> 2] = $$sink87; //@line 6304
      $$065$be$us$in = $$sink88; //@line 6306
      $144 = HEAP32[$3 >> 2] | 0; //@line 6306
     }
     if (($124 - $144 | 0) >= ($94 | 0)) {
      $$064 = $111; //@line 6314
      label = 54; //@line 6315
      break;
     } else {
      $$06577$us = $$065$be$us$in & 65535; //@line 6312
      $$080$us = $111; //@line 6312
     }
    }
    if ((label | 0) == 54) {
     return $$064 | 0; //@line 6320
    }
   } else {
    $$06378 = $106; //@line 6323
    $$06577 = $6; //@line 6323
    $$080 = 0; //@line 6323
   }
   while (1) {
    if (!($$080 << 24 >> 24)) {
     $$1 = $$06378; //@line 6328
    } else {
     switch ($5 | 0) {
     case 4:
     case 15:
     case 17:
     case 20:
      {
       $$sink = 38; //@line 6332
       label = 44; //@line 6333
       break;
      }
     case 8:
     case 11:
      {
       $$sink = 47; //@line 6337
       label = 44; //@line 6338
       break;
      }
     default:
      {}
     }
     if ((label | 0) == 44) {
      label = 0; //@line 6345
      HEAP8[$$06378 >> 0] = $$sink; //@line 6346
     }
     $$1 = $$06378 + 1 | 0; //@line 6349
    }
    $148 = $$080 + 1 << 24 >> 24; //@line 6351
    $150 = (HEAP32[$1 >> 2] | 0) + 1 | 0; //@line 6353
    HEAP32[$1 >> 2] = $150; //@line 6354
    $153 = $$06577 & 65535; //@line 6357
    if (($$1 + $153 - (HEAP32[$3 >> 2] | 0) | 0) > ($94 | 0)) {
     $$064 = -1; //@line 6362
     label = 54; //@line 6363
     break;
    }
    _memcpy($$1 | 0, $150 | 0, $153 | 0) | 0; //@line 6366
    $158 = (HEAP32[$1 >> 2] | 0) + $153 | 0; //@line 6368
    HEAP32[$1 >> 2] = $158; //@line 6369
    $$06378 = $$1 + $153 | 0; //@line 6370
    $160 = HEAP32[$3 >> 2] | 0; //@line 6371
    $161 = $$06378; //@line 6372
    if (($161 - $160 | 0) >= ($94 | 0)) {
     $$064 = $148; //@line 6376
     label = 54; //@line 6377
     break;
    }
    $trunc = HEAP8[$158 >> 0] | 0; //@line 6380
    $164 = $trunc & 255; //@line 6381
    if ($164 & 240 | 0) {
     $$064 = $148; //@line 6385
     label = 54; //@line 6386
     break;
    }
    switch ($trunc & 15) {
    case 13:
     {
      $167 = $158 + 1 | 0; //@line 6393
      $$sink89 = $167; //@line 6397
      $$sink90 = (HEAPU8[$167 >> 0] | 0) + 13 | 0; //@line 6397
      label = 51; //@line 6398
      break;
     }
    case 14:
     {
      $174 = $158 + 2 | 0; //@line 6402
      $$sink89 = $174; //@line 6411
      $$sink90 = (HEAPU8[$174 >> 0] | 0) + 269 + ((HEAPU8[$158 + 1 >> 0] | 0) << 8) | 0; //@line 6411
      label = 51; //@line 6412
      break;
     }
    default:
     {
      $$065$be$in = $164 & 15; //@line 6416
      $172 = $160; //@line 6416
     }
    }
    if ((label | 0) == 51) {
     label = 0; //@line 6420
     HEAP32[$1 >> 2] = $$sink89; //@line 6421
     $$065$be$in = $$sink90; //@line 6423
     $172 = HEAP32[$3 >> 2] | 0; //@line 6423
    }
    if (($161 - $172 | 0) >= ($94 | 0)) {
     $$064 = $148; //@line 6431
     label = 54; //@line 6432
     break;
    } else {
     $$06577 = $$065$be$in & 65535; //@line 6429
     $$080 = $148; //@line 6429
    }
   }
   if ((label | 0) == 54) {
    return $$064 | 0; //@line 6437
   }
  }
 } while (0);
 HEAP16[$4 >> 1] = 0; //@line 6441
 $$064 = 0; //@line 6442
 return $$064 | 0; //@line 6443
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_27($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$4 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $100 = 0, $108 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $247 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $55 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8858
 STACKTOP = STACKTOP + 32 | 0; //@line 8859
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8859
 $$byval_copy = sp; //@line 8860
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8862
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8864
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8866
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 8868
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8870
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8872
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8874
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8876
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8878
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8880
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8882
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8884
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8886
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8888
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8890
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8892
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8894
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8896
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8898
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8900
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$18 >> 0] = 0; //@line 8903
  HEAP8[$20 >> 0] = 1; //@line 8904
  HEAP8[$22 >> 0] = 1; //@line 8905
  HEAP8[$24 >> 0] = 0; //@line 8906
  HEAP8[$26 >> 0] = 0; //@line 8907
  HEAP8[$28 >> 0] = 1; //@line 8908
  HEAP8[$30 >> 0] = 0; //@line 8909
  HEAP8[$30 + 1 >> 0] = 0; //@line 8909
  HEAP8[$30 + 2 >> 0] = 0; //@line 8909
  HEAP8[$30 + 3 >> 0] = 0; //@line 8909
  HEAP8[$30 + 4 >> 0] = 0; //@line 8909
  HEAP8[$30 + 5 >> 0] = 0; //@line 8909
  if (!(HEAP8[$6 >> 0] | 0)) {
   $223 = $4; //@line 8913
  } else {
   $$019$i$4 = $6; //@line 8915
   $211 = $4; //@line 8915
   while (1) {
    $208 = _strcspn($$019$i$4, 3745) | 0; //@line 8917
    $210 = $211 + 1 | 0; //@line 8919
    HEAP8[$211 >> 0] = $208; //@line 8920
    $212 = $208 & 255; //@line 8921
    _memcpy($210 | 0, $$019$i$4 | 0, $212 | 0) | 0; //@line 8922
    $213 = $210 + $212 | 0; //@line 8923
    $$019$i$4 = $$019$i$4 + ($208 + ((HEAP8[$$019$i$4 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 8929
    if (!(HEAP8[$$019$i$4 >> 0] | 0)) {
     $223 = $213; //@line 8933
     break;
    } else {
     $211 = $213; //@line 8936
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 8941
  HEAP8[$223 + 1 >> 0] = 0; //@line 8943
  HEAP8[$223 + 2 >> 0] = $8; //@line 8945
  HEAP8[$223 + 3 >> 0] = 0; //@line 8947
  HEAP8[$223 + 4 >> 0] = 1; //@line 8948
  HEAP32[$$byval_copy >> 2] = HEAP32[134]; //@line 8949
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[135]; //@line 8949
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[136]; //@line 8949
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[137]; //@line 8949
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[138]; //@line 8949
  __ZN13SocketAddressC2E10nsapi_addrt($12, $$byval_copy, 53); //@line 8950
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 8954
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($16, $12, $18, $223 + 5 - $14 | 0) | 0; //@line 8955
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 101; //@line 8958
   $231 = $ReallocAsyncCtx6 + 4 | 0; //@line 8959
   HEAP32[$231 >> 2] = $2; //@line 8960
   $232 = $ReallocAsyncCtx6 + 8 | 0; //@line 8961
   HEAP32[$232 >> 2] = $32; //@line 8962
   $233 = $ReallocAsyncCtx6 + 12 | 0; //@line 8963
   HEAP32[$233 >> 2] = $18; //@line 8964
   $234 = $ReallocAsyncCtx6 + 16 | 0; //@line 8965
   HEAP32[$234 >> 2] = $34; //@line 8966
   $235 = $ReallocAsyncCtx6 + 20 | 0; //@line 8967
   HEAP32[$235 >> 2] = $10; //@line 8968
   $236 = $ReallocAsyncCtx6 + 24 | 0; //@line 8969
   HEAP32[$236 >> 2] = $16; //@line 8970
   $237 = $ReallocAsyncCtx6 + 28 | 0; //@line 8971
   HEAP32[$237 >> 2] = $20; //@line 8972
   $238 = $ReallocAsyncCtx6 + 32 | 0; //@line 8973
   HEAP32[$238 >> 2] = $22; //@line 8974
   $239 = $ReallocAsyncCtx6 + 36 | 0; //@line 8975
   HEAP32[$239 >> 2] = $24; //@line 8976
   $240 = $ReallocAsyncCtx6 + 40 | 0; //@line 8977
   HEAP32[$240 >> 2] = $26; //@line 8978
   $241 = $ReallocAsyncCtx6 + 44 | 0; //@line 8979
   HEAP32[$241 >> 2] = $28; //@line 8980
   $242 = $ReallocAsyncCtx6 + 48 | 0; //@line 8981
   HEAP32[$242 >> 2] = $30; //@line 8982
   $243 = $ReallocAsyncCtx6 + 52 | 0; //@line 8983
   HEAP32[$243 >> 2] = $36; //@line 8984
   $244 = $ReallocAsyncCtx6 + 56 | 0; //@line 8985
   HEAP32[$244 >> 2] = $4; //@line 8986
   $245 = $ReallocAsyncCtx6 + 60 | 0; //@line 8987
   HEAP32[$245 >> 2] = $38; //@line 8988
   sp = STACKTOP; //@line 8989
   STACKTOP = sp; //@line 8990
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 8993
  ___async_unwind = 0; //@line 8994
  HEAP32[$ReallocAsyncCtx6 >> 2] = 101; //@line 8995
  $231 = $ReallocAsyncCtx6 + 4 | 0; //@line 8996
  HEAP32[$231 >> 2] = $2; //@line 8997
  $232 = $ReallocAsyncCtx6 + 8 | 0; //@line 8998
  HEAP32[$232 >> 2] = $32; //@line 8999
  $233 = $ReallocAsyncCtx6 + 12 | 0; //@line 9000
  HEAP32[$233 >> 2] = $18; //@line 9001
  $234 = $ReallocAsyncCtx6 + 16 | 0; //@line 9002
  HEAP32[$234 >> 2] = $34; //@line 9003
  $235 = $ReallocAsyncCtx6 + 20 | 0; //@line 9004
  HEAP32[$235 >> 2] = $10; //@line 9005
  $236 = $ReallocAsyncCtx6 + 24 | 0; //@line 9006
  HEAP32[$236 >> 2] = $16; //@line 9007
  $237 = $ReallocAsyncCtx6 + 28 | 0; //@line 9008
  HEAP32[$237 >> 2] = $20; //@line 9009
  $238 = $ReallocAsyncCtx6 + 32 | 0; //@line 9010
  HEAP32[$238 >> 2] = $22; //@line 9011
  $239 = $ReallocAsyncCtx6 + 36 | 0; //@line 9012
  HEAP32[$239 >> 2] = $24; //@line 9013
  $240 = $ReallocAsyncCtx6 + 40 | 0; //@line 9014
  HEAP32[$240 >> 2] = $26; //@line 9015
  $241 = $ReallocAsyncCtx6 + 44 | 0; //@line 9016
  HEAP32[$241 >> 2] = $28; //@line 9017
  $242 = $ReallocAsyncCtx6 + 48 | 0; //@line 9018
  HEAP32[$242 >> 2] = $30; //@line 9019
  $243 = $ReallocAsyncCtx6 + 52 | 0; //@line 9020
  HEAP32[$243 >> 2] = $36; //@line 9021
  $244 = $ReallocAsyncCtx6 + 56 | 0; //@line 9022
  HEAP32[$244 >> 2] = $4; //@line 9023
  $245 = $ReallocAsyncCtx6 + 60 | 0; //@line 9024
  HEAP32[$245 >> 2] = $38; //@line 9025
  sp = STACKTOP; //@line 9026
  STACKTOP = sp; //@line 9027
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 9031
 } else {
  $55 = HEAPU8[$26 >> 0] << 8 | HEAPU8[$28 >> 0]; //@line 9047
  $61 = HEAPU8[$30 >> 0] << 8 | HEAPU8[$36 >> 0]; //@line 9053
  if (((HEAP8[$22 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$18 >> 0] << 8 | HEAPU8[$20 >> 0] | 0) == 1 : 0) & (HEAP8[$24 >> 0] & 15) == 0) {
   if (!$55) {
    $247 = $4; //@line 9063
   } else {
    $$093119$i = 0; //@line 9065
    $69 = $4; //@line 9065
    while (1) {
     $68 = HEAP8[$69 >> 0] | 0; //@line 9067
     if (!($68 << 24 >> 24)) {
      $$lcssa$i = $69; //@line 9070
     } else {
      $74 = $69; //@line 9072
      $76 = $68; //@line 9072
      while (1) {
       $77 = $74 + 1 + ($76 & 255) | 0; //@line 9076
       $76 = HEAP8[$77 >> 0] | 0; //@line 9077
       if (!($76 << 24 >> 24)) {
        $$lcssa$i = $77; //@line 9080
        break;
       } else {
        $74 = $77; //@line 9083
       }
      }
     }
     $80 = $$lcssa$i + 5 | 0; //@line 9087
     $$093119$i = $$093119$i + 1 | 0; //@line 9088
     if (($$093119$i | 0) >= ($55 | 0)) {
      $247 = $80; //@line 9093
      break;
     } else {
      $69 = $80; //@line 9091
     }
    }
   }
   if (($32 | 0) != 0 & ($61 | 0) != 0) {
    $$090117$i = $38; //@line 9102
    $$094116$i = 0; //@line 9102
    $$095115$i = 0; //@line 9102
    $84 = $247; //@line 9102
    while (1) {
     $85 = HEAP8[$84 >> 0] | 0; //@line 9105
     do {
      if (!($85 << 24 >> 24)) {
       $100 = $84 + 1 | 0; //@line 9109
      } else {
       $89 = $85 & 255; //@line 9112
       $92 = $84; //@line 9112
       while (1) {
        if ($89 & 192 | 0) {
         label = 12; //@line 9117
         break;
        }
        $94 = $92 + 1 + $89 | 0; //@line 9121
        $95 = HEAP8[$94 >> 0] | 0; //@line 9122
        if (!($95 << 24 >> 24)) {
         label = 14; //@line 9126
         break;
        } else {
         $89 = $95 & 255; //@line 9129
         $92 = $94; //@line 9129
        }
       }
       if ((label | 0) == 12) {
        label = 0; //@line 9133
        $100 = $92 + 2 | 0; //@line 9135
        break;
       } else if ((label | 0) == 14) {
        label = 0; //@line 9139
        $100 = $94 + 1 | 0; //@line 9141
        break;
       }
      }
     } while (0);
     $108 = (HEAPU8[$100 >> 0] << 8 | HEAPU8[$100 + 1 >> 0]) & 65535; //@line 9154
     $119 = $100 + 10 | 0; //@line 9165
     $124 = HEAPU8[$100 + 8 >> 0] << 8 | HEAPU8[$100 + 9 >> 0]; //@line 9170
     $125 = $124 & 65535; //@line 9171
     $127 = (HEAPU8[$100 + 2 >> 0] << 8 | HEAPU8[$100 + 3 >> 0] | 0) == 1; //@line 9173
     do {
      if ($108 << 16 >> 16 == 1 & $127 & $125 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 9179
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 9183
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 9187
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 9191
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 9195
       $$0 = $100 + 14 | 0; //@line 9198
       $$1$i = $$090117$i + 20 | 0; //@line 9198
       $$196$i = $$095115$i + 1 | 0; //@line 9198
      } else {
       if ($108 << 16 >> 16 == 28 & $127 & $125 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 9205
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 9209
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 9213
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 9217
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 9221
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$100 + 14 >> 0] | 0; //@line 9225
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$100 + 15 >> 0] | 0; //@line 9229
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$100 + 16 >> 0] | 0; //@line 9233
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$100 + 17 >> 0] | 0; //@line 9237
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$100 + 18 >> 0] | 0; //@line 9241
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$100 + 19 >> 0] | 0; //@line 9245
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$100 + 20 >> 0] | 0; //@line 9249
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$100 + 21 >> 0] | 0; //@line 9253
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$100 + 22 >> 0] | 0; //@line 9257
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$100 + 23 >> 0] | 0; //@line 9261
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$100 + 24 >> 0] | 0; //@line 9265
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$100 + 25 >> 0] | 0; //@line 9269
        $$0 = $100 + 26 | 0; //@line 9272
        $$1$i = $$090117$i + 20 | 0; //@line 9272
        $$196$i = $$095115$i + 1 | 0; //@line 9272
        break;
       } else {
        $$0 = $119 + $124 | 0; //@line 9276
        $$1$i = $$090117$i; //@line 9276
        $$196$i = $$095115$i; //@line 9276
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 9281
     if (!(($$094116$i | 0) < ($61 | 0) & $$196$i >>> 0 < $32 >>> 0)) {
      $$089$i = $$196$i; //@line 9288
      break;
     } else {
      $$090117$i = $$1$i; //@line 9286
      $$095115$i = $$196$i; //@line 9286
      $84 = $$0; //@line 9286
     }
    }
   } else {
    $$089$i = 0; //@line 9293
   }
  } else {
   $$089$i = 0; //@line 9296
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 9300
 }
 _free($18); //@line 9302
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 9303
 $200 = __ZN6Socket5closeEv($34) | 0; //@line 9304
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 9307
  $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 9308
  HEAP32[$201 >> 2] = $$355; //@line 9309
  $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 9310
  HEAP32[$202 >> 2] = $16; //@line 9311
  $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 9312
  HEAP32[$203 >> 2] = $2; //@line 9313
  sp = STACKTOP; //@line 9314
  STACKTOP = sp; //@line 9315
  return;
 }
 HEAP32[___async_retval >> 2] = $200; //@line 9318
 ___async_unwind = 0; //@line 9319
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 9320
 $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 9321
 HEAP32[$201 >> 2] = $$355; //@line 9322
 $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 9323
 HEAP32[$202 >> 2] = $16; //@line 9324
 $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 9325
 HEAP32[$203 >> 2] = $2; //@line 9326
 sp = STACKTOP; //@line 9327
 STACKTOP = sp; //@line 9328
 return;
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 7839
 $6 = HEAP32[$5 >> 2] | 0; //@line 7840
 $7 = $0 + 100 | 0; //@line 7841
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 7846
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 7849
  $$0142 = 0; //@line 7849
 } else {
  $$0 = ___shgetc($0) | 0; //@line 7852
  $$0142 = 0; //@line 7852
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 7857
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 7865
    $$0148 = 0; //@line 7865
    $$0152 = 1.0; //@line 7865
    $$0155 = 0.0; //@line 7865
    $$0159 = 0; //@line 7865
    $$2 = $$0; //@line 7865
    $$2144 = $$0142; //@line 7865
    $51 = 0; //@line 7865
    $53 = 0; //@line 7865
    $96 = 0; //@line 7865
    $98 = 0; //@line 7865
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 7869
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 7874
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 7877
   $$0142 = 1; //@line 7877
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 7881
   $$0142 = 1; //@line 7881
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 7886
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 7891
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 7894
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 7897
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 7901
   $37 = 0; //@line 7901
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 7903
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 7908
     $41 = HEAPU8[$29 >> 0] | 0; //@line 7911
    } else {
     $41 = ___shgetc($0) | 0; //@line 7914
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 7916
    $39 = tempRet0; //@line 7917
    if (($41 | 0) == 48) {
     $36 = $38; //@line 7920
     $37 = $39; //@line 7920
    } else {
     $$0146 = 1; //@line 7922
     $$0148 = 0; //@line 7922
     $$0152 = 1.0; //@line 7922
     $$0155 = 0.0; //@line 7922
     $$0159 = 0; //@line 7922
     $$2 = $41; //@line 7922
     $$2144 = 1; //@line 7922
     $51 = 0; //@line 7922
     $53 = 0; //@line 7922
     $96 = $38; //@line 7922
     $98 = $39; //@line 7922
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 7927
   $$0148 = 0; //@line 7927
   $$0152 = 1.0; //@line 7927
   $$0155 = 0.0; //@line 7927
   $$0159 = 0; //@line 7927
   $$2 = $$1$ph; //@line 7927
   $$2144 = $$0142; //@line 7927
   $51 = 0; //@line 7927
   $53 = 0; //@line 7927
   $96 = 0; //@line 7927
   $98 = 0; //@line 7927
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 7931
  $$pre = $$2 | 32; //@line 7933
  if ($42 >>> 0 < 10) {
   label = 20; //@line 7935
  } else {
   $46 = ($$2 | 0) == 46; //@line 7939
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 7942
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 7948
     $$2150 = $$0148; //@line 7948
     $$2154 = $$0152; //@line 7948
     $$2157 = $$0155; //@line 7948
     $$2161 = $$0159; //@line 7948
     $$3145 = $$2144; //@line 7948
     $211 = $53; //@line 7948
     $212 = $51; //@line 7948
     $213 = $53; //@line 7948
     $214 = $51; //@line 7948
    } else {
     $$2$lcssa = 46; //@line 7950
     break;
    }
   } else {
    label = 20; //@line 7954
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 7958
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 7961
   do {
    if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
     $$1149 = $$0148; //@line 7971
     $$1153 = $$0152; //@line 7971
     $$1156 = $$0155; //@line 7971
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 7971
    } else {
     if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 7980
      $$1149 = $$0148; //@line 7983
      $$1153 = $65; //@line 7983
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 7983
      $$1160 = $$0159; //@line 7983
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 7988
      $$1149 = $or$cond ? $$0148 : 1; //@line 7993
      $$1153 = $$0152; //@line 7993
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 7993
      $$1160 = $$0159; //@line 7993
      break;
     }
    }
   } while (0);
   $72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0; //@line 7998
   $$1147 = $$0146; //@line 8000
   $$2150 = $$1149; //@line 8000
   $$2154 = $$1153; //@line 8000
   $$2157 = $$1156; //@line 8000
   $$2161 = $$1160; //@line 8000
   $$3145 = 1; //@line 8000
   $211 = $96; //@line 8000
   $212 = $98; //@line 8000
   $213 = $72; //@line 8000
   $214 = tempRet0; //@line 8000
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 8002
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 8007
   $$0146 = $$1147; //@line 8010
   $$0148 = $$2150; //@line 8010
   $$0152 = $$2154; //@line 8010
   $$0155 = $$2157; //@line 8010
   $$0159 = $$2161; //@line 8010
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 8010
   $$2144 = $$3145; //@line 8010
   $51 = $214; //@line 8010
   $53 = $213; //@line 8010
   $96 = $211; //@line 8010
   $98 = $212; //@line 8010
   continue;
  } else {
   $$0146 = $$1147; //@line 8014
   $$0148 = $$2150; //@line 8014
   $$0152 = $$2154; //@line 8014
   $$0155 = $$2157; //@line 8014
   $$0159 = $$2161; //@line 8014
   $$2 = ___shgetc($0) | 0; //@line 8014
   $$2144 = $$3145; //@line 8014
   $51 = $214; //@line 8014
   $53 = $213; //@line 8014
   $96 = $211; //@line 8014
   $98 = $212; //@line 8014
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 8022
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8026
   }
   if (!$4) {
    ___shlim($0, 0); //@line 8030
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8035
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8042
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 8047
  } else {
   $94 = ($$0146 | 0) == 0; //@line 8049
   $95 = $94 ? $53 : $96; //@line 8050
   $97 = $94 ? $51 : $98; //@line 8051
   if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 8058
    $105 = $53; //@line 8058
    $106 = $51; //@line 8058
    while (1) {
     $104 = $$3162183 << 4; //@line 8060
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 8061
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 8071
      break;
     } else {
      $$3162183 = $104; //@line 8069
      $106 = tempRet0; //@line 8069
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 8076
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 8081
    $117 = tempRet0; //@line 8082
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 8089
      $$0165 = 0.0; //@line 8090
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 8096
      $135 = 0; //@line 8096
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8100
      $134 = 0; //@line 8101
      $135 = 0; //@line 8101
     }
    } else {
     $134 = $116; //@line 8104
     $135 = $117; //@line 8104
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 8110
     $135 = 0; //@line 8110
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8114
     $134 = 0; //@line 8115
     $135 = 0; //@line 8115
    }
   }
   $130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0; //@line 8118
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 8120
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 8122
   $137 = tempRet0; //@line 8123
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 8128
    break;
   }
   $141 = 0 - $2 | 0; //@line 8131
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 8133
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8141
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8145
    break;
   }
   $153 = $2 + -106 | 0; //@line 8148
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 8150
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8158
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8162
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 8167
    $$4163178 = $$3162$lcssa; //@line 8167
    $170 = $136; //@line 8167
    $171 = $137; //@line 8167
    while (1) {
     $166 = !($$3158179 >= .5); //@line 8169
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 8174
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 8176
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 8177
     $173 = tempRet0; //@line 8178
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 8181
      $$4163178 = $$5164; //@line 8181
      $170 = $172; //@line 8181
      $171 = $173; //@line 8181
     } else {
      $$3158$lcssa = $$4; //@line 8183
      $$4163$lcssa = $$5164; //@line 8183
      $181 = $172; //@line 8183
      $182 = $173; //@line 8183
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 8188
    $$4163$lcssa = $$3162$lcssa; //@line 8188
    $181 = $136; //@line 8188
    $182 = $137; //@line 8188
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 8191
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 8194
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 8196
   $184 = tempRet0; //@line 8197
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 8206
     label = 59; //@line 8207
    } else {
     $$0166170 = 0; //@line 8209
     $194 = 84; //@line 8209
     label = 61; //@line 8210
    }
   } else {
    $$0166 = $1; //@line 8213
    label = 59; //@line 8214
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 8220
     $194 = 84 - $$0166 | 0; //@line 8220
     label = 61; //@line 8221
    } else {
     $$0151 = 0.0; //@line 8224
     $$0166169 = $$0166; //@line 8224
     $$pre$phi201Z2D = +($3 | 0); //@line 8224
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 8228
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 8231
    $$0166169 = $$0166170; //@line 8231
    $$pre$phi201Z2D = $193; //@line 8231
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 8238
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 8247
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8251
   }
   $$0165 = +_scalbnl($207, $181); //@line 8254
  }
 } while (0);
 return +$$0165;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_35($0) {
 $0 = $0 | 0;
 var $$019$i$1 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11800
 STACKTOP = STACKTOP + 32 | 0; //@line 11801
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11801
 $$byval_copy = sp; //@line 11802
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11804
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11806
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11808
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11810
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 11812
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11814
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11816
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11818
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11820
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11822
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11824
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11826
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11828
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11830
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11832
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11834
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11836
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11838
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11840
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(80) | 0; //@line 11845
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($4, 0, $6, 512) | 0; //@line 11846
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 92; //@line 11849
   $42 = $ReallocAsyncCtx5 + 4 | 0; //@line 11850
   HEAP32[$42 >> 2] = $2; //@line 11851
   $43 = $ReallocAsyncCtx5 + 8 | 0; //@line 11852
   HEAP32[$43 >> 2] = $4; //@line 11853
   $44 = $ReallocAsyncCtx5 + 12 | 0; //@line 11854
   HEAP32[$44 >> 2] = $6; //@line 11855
   $45 = $ReallocAsyncCtx5 + 16 | 0; //@line 11856
   HEAP32[$45 >> 2] = $8; //@line 11857
   $46 = $ReallocAsyncCtx5 + 20 | 0; //@line 11858
   HEAP8[$46 >> 0] = $10; //@line 11859
   $47 = $ReallocAsyncCtx5 + 24 | 0; //@line 11860
   HEAP32[$47 >> 2] = $12; //@line 11861
   $48 = $ReallocAsyncCtx5 + 28 | 0; //@line 11862
   HEAP32[$48 >> 2] = $14; //@line 11863
   $49 = $ReallocAsyncCtx5 + 32 | 0; //@line 11864
   HEAP32[$49 >> 2] = $16; //@line 11865
   $50 = $ReallocAsyncCtx5 + 36 | 0; //@line 11866
   HEAP32[$50 >> 2] = $18; //@line 11867
   $51 = $ReallocAsyncCtx5 + 40 | 0; //@line 11868
   HEAP32[$51 >> 2] = $20; //@line 11869
   $52 = $ReallocAsyncCtx5 + 44 | 0; //@line 11870
   HEAP32[$52 >> 2] = $22; //@line 11871
   $53 = $ReallocAsyncCtx5 + 48 | 0; //@line 11872
   HEAP32[$53 >> 2] = $24; //@line 11873
   $54 = $ReallocAsyncCtx5 + 52 | 0; //@line 11874
   HEAP32[$54 >> 2] = $26; //@line 11875
   $55 = $ReallocAsyncCtx5 + 56 | 0; //@line 11876
   HEAP32[$55 >> 2] = $28; //@line 11877
   $56 = $ReallocAsyncCtx5 + 60 | 0; //@line 11878
   HEAP32[$56 >> 2] = $30; //@line 11879
   $57 = $ReallocAsyncCtx5 + 64 | 0; //@line 11880
   HEAP32[$57 >> 2] = $32; //@line 11881
   $58 = $ReallocAsyncCtx5 + 68 | 0; //@line 11882
   HEAP32[$58 >> 2] = $34; //@line 11883
   $59 = $ReallocAsyncCtx5 + 72 | 0; //@line 11884
   HEAP32[$59 >> 2] = $36; //@line 11885
   $60 = $ReallocAsyncCtx5 + 76 | 0; //@line 11886
   HEAP32[$60 >> 2] = $38; //@line 11887
   sp = STACKTOP; //@line 11888
   STACKTOP = sp; //@line 11889
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 11892
  ___async_unwind = 0; //@line 11893
  HEAP32[$ReallocAsyncCtx5 >> 2] = 92; //@line 11894
  $42 = $ReallocAsyncCtx5 + 4 | 0; //@line 11895
  HEAP32[$42 >> 2] = $2; //@line 11896
  $43 = $ReallocAsyncCtx5 + 8 | 0; //@line 11897
  HEAP32[$43 >> 2] = $4; //@line 11898
  $44 = $ReallocAsyncCtx5 + 12 | 0; //@line 11899
  HEAP32[$44 >> 2] = $6; //@line 11900
  $45 = $ReallocAsyncCtx5 + 16 | 0; //@line 11901
  HEAP32[$45 >> 2] = $8; //@line 11902
  $46 = $ReallocAsyncCtx5 + 20 | 0; //@line 11903
  HEAP8[$46 >> 0] = $10; //@line 11904
  $47 = $ReallocAsyncCtx5 + 24 | 0; //@line 11905
  HEAP32[$47 >> 2] = $12; //@line 11906
  $48 = $ReallocAsyncCtx5 + 28 | 0; //@line 11907
  HEAP32[$48 >> 2] = $14; //@line 11908
  $49 = $ReallocAsyncCtx5 + 32 | 0; //@line 11909
  HEAP32[$49 >> 2] = $16; //@line 11910
  $50 = $ReallocAsyncCtx5 + 36 | 0; //@line 11911
  HEAP32[$50 >> 2] = $18; //@line 11912
  $51 = $ReallocAsyncCtx5 + 40 | 0; //@line 11913
  HEAP32[$51 >> 2] = $20; //@line 11914
  $52 = $ReallocAsyncCtx5 + 44 | 0; //@line 11915
  HEAP32[$52 >> 2] = $22; //@line 11916
  $53 = $ReallocAsyncCtx5 + 48 | 0; //@line 11917
  HEAP32[$53 >> 2] = $24; //@line 11918
  $54 = $ReallocAsyncCtx5 + 52 | 0; //@line 11919
  HEAP32[$54 >> 2] = $26; //@line 11920
  $55 = $ReallocAsyncCtx5 + 56 | 0; //@line 11921
  HEAP32[$55 >> 2] = $28; //@line 11922
  $56 = $ReallocAsyncCtx5 + 60 | 0; //@line 11923
  HEAP32[$56 >> 2] = $30; //@line 11924
  $57 = $ReallocAsyncCtx5 + 64 | 0; //@line 11925
  HEAP32[$57 >> 2] = $32; //@line 11926
  $58 = $ReallocAsyncCtx5 + 68 | 0; //@line 11927
  HEAP32[$58 >> 2] = $34; //@line 11928
  $59 = $ReallocAsyncCtx5 + 72 | 0; //@line 11929
  HEAP32[$59 >> 2] = $36; //@line 11930
  $60 = $ReallocAsyncCtx5 + 76 | 0; //@line 11931
  HEAP32[$60 >> 2] = $38; //@line 11932
  sp = STACKTOP; //@line 11933
  STACKTOP = sp; //@line 11934
  return;
 }
 HEAP8[$6 >> 0] = 0; //@line 11936
 HEAP8[$20 >> 0] = 1; //@line 11937
 HEAP8[$22 >> 0] = 1; //@line 11938
 HEAP8[$24 >> 0] = 0; //@line 11939
 HEAP8[$26 >> 0] = 0; //@line 11940
 HEAP8[$28 >> 0] = 1; //@line 11941
 HEAP8[$30 >> 0] = 0; //@line 11942
 HEAP8[$30 + 1 >> 0] = 0; //@line 11942
 HEAP8[$30 + 2 >> 0] = 0; //@line 11942
 HEAP8[$30 + 3 >> 0] = 0; //@line 11942
 HEAP8[$30 + 4 >> 0] = 0; //@line 11942
 HEAP8[$30 + 5 >> 0] = 0; //@line 11942
 if (!(HEAP8[$18 >> 0] | 0)) {
  $79 = $8; //@line 11946
 } else {
  $$019$i$1 = $18; //@line 11948
  $67 = $8; //@line 11948
  while (1) {
   $64 = _strcspn($$019$i$1, 3745) | 0; //@line 11950
   $66 = $67 + 1 | 0; //@line 11952
   HEAP8[$67 >> 0] = $64; //@line 11953
   $68 = $64 & 255; //@line 11954
   _memcpy($66 | 0, $$019$i$1 | 0, $68 | 0) | 0; //@line 11955
   $69 = $66 + $68 | 0; //@line 11956
   $$019$i$1 = $$019$i$1 + ($64 + ((HEAP8[$$019$i$1 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 11962
   if (!(HEAP8[$$019$i$1 >> 0] | 0)) {
    $79 = $69; //@line 11966
    break;
   } else {
    $67 = $69; //@line 11969
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 11974
 HEAP8[$79 + 1 >> 0] = 0; //@line 11976
 HEAP8[$79 + 2 >> 0] = $10; //@line 11978
 HEAP8[$79 + 3 >> 0] = 0; //@line 11980
 HEAP8[$79 + 4 >> 0] = 1; //@line 11981
 HEAP32[$$byval_copy >> 2] = HEAP32[119]; //@line 11982
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[120]; //@line 11982
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[121]; //@line 11982
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[122]; //@line 11982
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[123]; //@line 11982
 __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy, 53); //@line 11983
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(80) | 0; //@line 11987
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($4, $14, $6, $79 + 5 - $16 | 0) | 0; //@line 11988
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 95; //@line 11991
  $87 = $ReallocAsyncCtx9 + 4 | 0; //@line 11992
  HEAP32[$87 >> 2] = $2; //@line 11993
  $88 = $ReallocAsyncCtx9 + 8 | 0; //@line 11994
  HEAP32[$88 >> 2] = $4; //@line 11995
  $89 = $ReallocAsyncCtx9 + 12 | 0; //@line 11996
  HEAP32[$89 >> 2] = $6; //@line 11997
  $90 = $ReallocAsyncCtx9 + 16 | 0; //@line 11998
  HEAP32[$90 >> 2] = $8; //@line 11999
  $91 = $ReallocAsyncCtx9 + 20 | 0; //@line 12000
  HEAP8[$91 >> 0] = $10; //@line 12001
  $92 = $ReallocAsyncCtx9 + 24 | 0; //@line 12002
  HEAP32[$92 >> 2] = $12; //@line 12003
  $93 = $ReallocAsyncCtx9 + 28 | 0; //@line 12004
  HEAP32[$93 >> 2] = $14; //@line 12005
  $94 = $ReallocAsyncCtx9 + 32 | 0; //@line 12006
  HEAP32[$94 >> 2] = $16; //@line 12007
  $95 = $ReallocAsyncCtx9 + 36 | 0; //@line 12008
  HEAP32[$95 >> 2] = $18; //@line 12009
  $96 = $ReallocAsyncCtx9 + 40 | 0; //@line 12010
  HEAP32[$96 >> 2] = $20; //@line 12011
  $97 = $ReallocAsyncCtx9 + 44 | 0; //@line 12012
  HEAP32[$97 >> 2] = $22; //@line 12013
  $98 = $ReallocAsyncCtx9 + 48 | 0; //@line 12014
  HEAP32[$98 >> 2] = $24; //@line 12015
  $99 = $ReallocAsyncCtx9 + 52 | 0; //@line 12016
  HEAP32[$99 >> 2] = $26; //@line 12017
  $100 = $ReallocAsyncCtx9 + 56 | 0; //@line 12018
  HEAP32[$100 >> 2] = $28; //@line 12019
  $101 = $ReallocAsyncCtx9 + 60 | 0; //@line 12020
  HEAP32[$101 >> 2] = $30; //@line 12021
  $102 = $ReallocAsyncCtx9 + 64 | 0; //@line 12022
  HEAP32[$102 >> 2] = $32; //@line 12023
  $103 = $ReallocAsyncCtx9 + 68 | 0; //@line 12024
  HEAP32[$103 >> 2] = $34; //@line 12025
  $104 = $ReallocAsyncCtx9 + 72 | 0; //@line 12026
  HEAP32[$104 >> 2] = $36; //@line 12027
  $105 = $ReallocAsyncCtx9 + 76 | 0; //@line 12028
  HEAP32[$105 >> 2] = $38; //@line 12029
  sp = STACKTOP; //@line 12030
  STACKTOP = sp; //@line 12031
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 12034
 ___async_unwind = 0; //@line 12035
 HEAP32[$ReallocAsyncCtx9 >> 2] = 95; //@line 12036
 $87 = $ReallocAsyncCtx9 + 4 | 0; //@line 12037
 HEAP32[$87 >> 2] = $2; //@line 12038
 $88 = $ReallocAsyncCtx9 + 8 | 0; //@line 12039
 HEAP32[$88 >> 2] = $4; //@line 12040
 $89 = $ReallocAsyncCtx9 + 12 | 0; //@line 12041
 HEAP32[$89 >> 2] = $6; //@line 12042
 $90 = $ReallocAsyncCtx9 + 16 | 0; //@line 12043
 HEAP32[$90 >> 2] = $8; //@line 12044
 $91 = $ReallocAsyncCtx9 + 20 | 0; //@line 12045
 HEAP8[$91 >> 0] = $10; //@line 12046
 $92 = $ReallocAsyncCtx9 + 24 | 0; //@line 12047
 HEAP32[$92 >> 2] = $12; //@line 12048
 $93 = $ReallocAsyncCtx9 + 28 | 0; //@line 12049
 HEAP32[$93 >> 2] = $14; //@line 12050
 $94 = $ReallocAsyncCtx9 + 32 | 0; //@line 12051
 HEAP32[$94 >> 2] = $16; //@line 12052
 $95 = $ReallocAsyncCtx9 + 36 | 0; //@line 12053
 HEAP32[$95 >> 2] = $18; //@line 12054
 $96 = $ReallocAsyncCtx9 + 40 | 0; //@line 12055
 HEAP32[$96 >> 2] = $20; //@line 12056
 $97 = $ReallocAsyncCtx9 + 44 | 0; //@line 12057
 HEAP32[$97 >> 2] = $22; //@line 12058
 $98 = $ReallocAsyncCtx9 + 48 | 0; //@line 12059
 HEAP32[$98 >> 2] = $24; //@line 12060
 $99 = $ReallocAsyncCtx9 + 52 | 0; //@line 12061
 HEAP32[$99 >> 2] = $26; //@line 12062
 $100 = $ReallocAsyncCtx9 + 56 | 0; //@line 12063
 HEAP32[$100 >> 2] = $28; //@line 12064
 $101 = $ReallocAsyncCtx9 + 60 | 0; //@line 12065
 HEAP32[$101 >> 2] = $30; //@line 12066
 $102 = $ReallocAsyncCtx9 + 64 | 0; //@line 12067
 HEAP32[$102 >> 2] = $32; //@line 12068
 $103 = $ReallocAsyncCtx9 + 68 | 0; //@line 12069
 HEAP32[$103 >> 2] = $34; //@line 12070
 $104 = $ReallocAsyncCtx9 + 72 | 0; //@line 12071
 HEAP32[$104 >> 2] = $36; //@line 12072
 $105 = $ReallocAsyncCtx9 + 76 | 0; //@line 12073
 HEAP32[$105 >> 2] = $38; //@line 12074
 sp = STACKTOP; //@line 12075
 STACKTOP = sp; //@line 12076
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_34($0) {
 $0 = $0 | 0;
 var $$019$i$2 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11514
 STACKTOP = STACKTOP + 32 | 0; //@line 11515
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11515
 $$byval_copy = sp; //@line 11516
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11518
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11520
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11522
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11524
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 11526
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11528
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11530
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11532
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11534
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11536
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11538
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11540
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11542
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11544
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11546
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11548
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11550
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11552
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11554
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(80) | 0; //@line 11559
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($4, 0, $6, 512) | 0; //@line 11560
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 96; //@line 11563
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 11564
   HEAP32[$42 >> 2] = $2; //@line 11565
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 11566
   HEAP32[$43 >> 2] = $4; //@line 11567
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 11568
   HEAP32[$44 >> 2] = $6; //@line 11569
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 11570
   HEAP32[$45 >> 2] = $8; //@line 11571
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 11572
   HEAP8[$46 >> 0] = $10; //@line 11573
   $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 11574
   HEAP32[$47 >> 2] = $12; //@line 11575
   $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 11576
   HEAP32[$48 >> 2] = $14; //@line 11577
   $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 11578
   HEAP32[$49 >> 2] = $16; //@line 11579
   $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 11580
   HEAP32[$50 >> 2] = $18; //@line 11581
   $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 11582
   HEAP32[$51 >> 2] = $20; //@line 11583
   $52 = $ReallocAsyncCtx4 + 44 | 0; //@line 11584
   HEAP32[$52 >> 2] = $22; //@line 11585
   $53 = $ReallocAsyncCtx4 + 48 | 0; //@line 11586
   HEAP32[$53 >> 2] = $24; //@line 11587
   $54 = $ReallocAsyncCtx4 + 52 | 0; //@line 11588
   HEAP32[$54 >> 2] = $26; //@line 11589
   $55 = $ReallocAsyncCtx4 + 56 | 0; //@line 11590
   HEAP32[$55 >> 2] = $28; //@line 11591
   $56 = $ReallocAsyncCtx4 + 60 | 0; //@line 11592
   HEAP32[$56 >> 2] = $30; //@line 11593
   $57 = $ReallocAsyncCtx4 + 64 | 0; //@line 11594
   HEAP32[$57 >> 2] = $32; //@line 11595
   $58 = $ReallocAsyncCtx4 + 68 | 0; //@line 11596
   HEAP32[$58 >> 2] = $34; //@line 11597
   $59 = $ReallocAsyncCtx4 + 72 | 0; //@line 11598
   HEAP32[$59 >> 2] = $36; //@line 11599
   $60 = $ReallocAsyncCtx4 + 76 | 0; //@line 11600
   HEAP32[$60 >> 2] = $38; //@line 11601
   sp = STACKTOP; //@line 11602
   STACKTOP = sp; //@line 11603
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 11606
  ___async_unwind = 0; //@line 11607
  HEAP32[$ReallocAsyncCtx4 >> 2] = 96; //@line 11608
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 11609
  HEAP32[$42 >> 2] = $2; //@line 11610
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 11611
  HEAP32[$43 >> 2] = $4; //@line 11612
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 11613
  HEAP32[$44 >> 2] = $6; //@line 11614
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 11615
  HEAP32[$45 >> 2] = $8; //@line 11616
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 11617
  HEAP8[$46 >> 0] = $10; //@line 11618
  $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 11619
  HEAP32[$47 >> 2] = $12; //@line 11620
  $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 11621
  HEAP32[$48 >> 2] = $14; //@line 11622
  $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 11623
  HEAP32[$49 >> 2] = $16; //@line 11624
  $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 11625
  HEAP32[$50 >> 2] = $18; //@line 11626
  $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 11627
  HEAP32[$51 >> 2] = $20; //@line 11628
  $52 = $ReallocAsyncCtx4 + 44 | 0; //@line 11629
  HEAP32[$52 >> 2] = $22; //@line 11630
  $53 = $ReallocAsyncCtx4 + 48 | 0; //@line 11631
  HEAP32[$53 >> 2] = $24; //@line 11632
  $54 = $ReallocAsyncCtx4 + 52 | 0; //@line 11633
  HEAP32[$54 >> 2] = $26; //@line 11634
  $55 = $ReallocAsyncCtx4 + 56 | 0; //@line 11635
  HEAP32[$55 >> 2] = $28; //@line 11636
  $56 = $ReallocAsyncCtx4 + 60 | 0; //@line 11637
  HEAP32[$56 >> 2] = $30; //@line 11638
  $57 = $ReallocAsyncCtx4 + 64 | 0; //@line 11639
  HEAP32[$57 >> 2] = $32; //@line 11640
  $58 = $ReallocAsyncCtx4 + 68 | 0; //@line 11641
  HEAP32[$58 >> 2] = $34; //@line 11642
  $59 = $ReallocAsyncCtx4 + 72 | 0; //@line 11643
  HEAP32[$59 >> 2] = $36; //@line 11644
  $60 = $ReallocAsyncCtx4 + 76 | 0; //@line 11645
  HEAP32[$60 >> 2] = $38; //@line 11646
  sp = STACKTOP; //@line 11647
  STACKTOP = sp; //@line 11648
  return;
 }
 HEAP8[$6 >> 0] = 0; //@line 11650
 HEAP8[$20 >> 0] = 1; //@line 11651
 HEAP8[$22 >> 0] = 1; //@line 11652
 HEAP8[$24 >> 0] = 0; //@line 11653
 HEAP8[$26 >> 0] = 0; //@line 11654
 HEAP8[$28 >> 0] = 1; //@line 11655
 HEAP8[$30 >> 0] = 0; //@line 11656
 HEAP8[$30 + 1 >> 0] = 0; //@line 11656
 HEAP8[$30 + 2 >> 0] = 0; //@line 11656
 HEAP8[$30 + 3 >> 0] = 0; //@line 11656
 HEAP8[$30 + 4 >> 0] = 0; //@line 11656
 HEAP8[$30 + 5 >> 0] = 0; //@line 11656
 if (!(HEAP8[$18 >> 0] | 0)) {
  $79 = $8; //@line 11660
 } else {
  $$019$i$2 = $18; //@line 11662
  $67 = $8; //@line 11662
  while (1) {
   $64 = _strcspn($$019$i$2, 3745) | 0; //@line 11664
   $66 = $67 + 1 | 0; //@line 11666
   HEAP8[$67 >> 0] = $64; //@line 11667
   $68 = $64 & 255; //@line 11668
   _memcpy($66 | 0, $$019$i$2 | 0, $68 | 0) | 0; //@line 11669
   $69 = $66 + $68 | 0; //@line 11670
   $$019$i$2 = $$019$i$2 + ($64 + ((HEAP8[$$019$i$2 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 11676
   if (!(HEAP8[$$019$i$2 >> 0] | 0)) {
    $79 = $69; //@line 11680
    break;
   } else {
    $67 = $69; //@line 11683
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 11688
 HEAP8[$79 + 1 >> 0] = 0; //@line 11690
 HEAP8[$79 + 2 >> 0] = $10; //@line 11692
 HEAP8[$79 + 3 >> 0] = 0; //@line 11694
 HEAP8[$79 + 4 >> 0] = 1; //@line 11695
 HEAP32[$$byval_copy >> 2] = HEAP32[124]; //@line 11696
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[125]; //@line 11696
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[126]; //@line 11696
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[127]; //@line 11696
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[128]; //@line 11696
 __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy, 53); //@line 11697
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(80) | 0; //@line 11701
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($4, $14, $6, $79 + 5 - $16 | 0) | 0; //@line 11702
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 11705
  $87 = $ReallocAsyncCtx8 + 4 | 0; //@line 11706
  HEAP32[$87 >> 2] = $2; //@line 11707
  $88 = $ReallocAsyncCtx8 + 8 | 0; //@line 11708
  HEAP32[$88 >> 2] = $4; //@line 11709
  $89 = $ReallocAsyncCtx8 + 12 | 0; //@line 11710
  HEAP32[$89 >> 2] = $6; //@line 11711
  $90 = $ReallocAsyncCtx8 + 16 | 0; //@line 11712
  HEAP32[$90 >> 2] = $8; //@line 11713
  $91 = $ReallocAsyncCtx8 + 20 | 0; //@line 11714
  HEAP8[$91 >> 0] = $10; //@line 11715
  $92 = $ReallocAsyncCtx8 + 24 | 0; //@line 11716
  HEAP32[$92 >> 2] = $12; //@line 11717
  $93 = $ReallocAsyncCtx8 + 28 | 0; //@line 11718
  HEAP32[$93 >> 2] = $14; //@line 11719
  $94 = $ReallocAsyncCtx8 + 32 | 0; //@line 11720
  HEAP32[$94 >> 2] = $16; //@line 11721
  $95 = $ReallocAsyncCtx8 + 36 | 0; //@line 11722
  HEAP32[$95 >> 2] = $18; //@line 11723
  $96 = $ReallocAsyncCtx8 + 40 | 0; //@line 11724
  HEAP32[$96 >> 2] = $20; //@line 11725
  $97 = $ReallocAsyncCtx8 + 44 | 0; //@line 11726
  HEAP32[$97 >> 2] = $22; //@line 11727
  $98 = $ReallocAsyncCtx8 + 48 | 0; //@line 11728
  HEAP32[$98 >> 2] = $24; //@line 11729
  $99 = $ReallocAsyncCtx8 + 52 | 0; //@line 11730
  HEAP32[$99 >> 2] = $26; //@line 11731
  $100 = $ReallocAsyncCtx8 + 56 | 0; //@line 11732
  HEAP32[$100 >> 2] = $28; //@line 11733
  $101 = $ReallocAsyncCtx8 + 60 | 0; //@line 11734
  HEAP32[$101 >> 2] = $30; //@line 11735
  $102 = $ReallocAsyncCtx8 + 64 | 0; //@line 11736
  HEAP32[$102 >> 2] = $32; //@line 11737
  $103 = $ReallocAsyncCtx8 + 68 | 0; //@line 11738
  HEAP32[$103 >> 2] = $34; //@line 11739
  $104 = $ReallocAsyncCtx8 + 72 | 0; //@line 11740
  HEAP32[$104 >> 2] = $36; //@line 11741
  $105 = $ReallocAsyncCtx8 + 76 | 0; //@line 11742
  HEAP32[$105 >> 2] = $38; //@line 11743
  sp = STACKTOP; //@line 11744
  STACKTOP = sp; //@line 11745
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 11748
 ___async_unwind = 0; //@line 11749
 HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 11750
 $87 = $ReallocAsyncCtx8 + 4 | 0; //@line 11751
 HEAP32[$87 >> 2] = $2; //@line 11752
 $88 = $ReallocAsyncCtx8 + 8 | 0; //@line 11753
 HEAP32[$88 >> 2] = $4; //@line 11754
 $89 = $ReallocAsyncCtx8 + 12 | 0; //@line 11755
 HEAP32[$89 >> 2] = $6; //@line 11756
 $90 = $ReallocAsyncCtx8 + 16 | 0; //@line 11757
 HEAP32[$90 >> 2] = $8; //@line 11758
 $91 = $ReallocAsyncCtx8 + 20 | 0; //@line 11759
 HEAP8[$91 >> 0] = $10; //@line 11760
 $92 = $ReallocAsyncCtx8 + 24 | 0; //@line 11761
 HEAP32[$92 >> 2] = $12; //@line 11762
 $93 = $ReallocAsyncCtx8 + 28 | 0; //@line 11763
 HEAP32[$93 >> 2] = $14; //@line 11764
 $94 = $ReallocAsyncCtx8 + 32 | 0; //@line 11765
 HEAP32[$94 >> 2] = $16; //@line 11766
 $95 = $ReallocAsyncCtx8 + 36 | 0; //@line 11767
 HEAP32[$95 >> 2] = $18; //@line 11768
 $96 = $ReallocAsyncCtx8 + 40 | 0; //@line 11769
 HEAP32[$96 >> 2] = $20; //@line 11770
 $97 = $ReallocAsyncCtx8 + 44 | 0; //@line 11771
 HEAP32[$97 >> 2] = $22; //@line 11772
 $98 = $ReallocAsyncCtx8 + 48 | 0; //@line 11773
 HEAP32[$98 >> 2] = $24; //@line 11774
 $99 = $ReallocAsyncCtx8 + 52 | 0; //@line 11775
 HEAP32[$99 >> 2] = $26; //@line 11776
 $100 = $ReallocAsyncCtx8 + 56 | 0; //@line 11777
 HEAP32[$100 >> 2] = $28; //@line 11778
 $101 = $ReallocAsyncCtx8 + 60 | 0; //@line 11779
 HEAP32[$101 >> 2] = $30; //@line 11780
 $102 = $ReallocAsyncCtx8 + 64 | 0; //@line 11781
 HEAP32[$102 >> 2] = $32; //@line 11782
 $103 = $ReallocAsyncCtx8 + 68 | 0; //@line 11783
 HEAP32[$103 >> 2] = $34; //@line 11784
 $104 = $ReallocAsyncCtx8 + 72 | 0; //@line 11785
 HEAP32[$104 >> 2] = $36; //@line 11786
 $105 = $ReallocAsyncCtx8 + 76 | 0; //@line 11787
 HEAP32[$105 >> 2] = $38; //@line 11788
 sp = STACKTOP; //@line 11789
 STACKTOP = sp; //@line 11790
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_33($0) {
 $0 = $0 | 0;
 var $$019$i$3 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11228
 STACKTOP = STACKTOP + 32 | 0; //@line 11229
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11229
 $$byval_copy = sp; //@line 11230
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11232
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11234
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11236
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11238
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 11240
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11242
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11244
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11246
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11248
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11250
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11252
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11254
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11256
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11258
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11260
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11262
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11264
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11266
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11268
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(80) | 0; //@line 11273
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($4, 0, $6, 512) | 0; //@line 11274
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 98; //@line 11277
   $42 = $ReallocAsyncCtx3 + 4 | 0; //@line 11278
   HEAP32[$42 >> 2] = $2; //@line 11279
   $43 = $ReallocAsyncCtx3 + 8 | 0; //@line 11280
   HEAP32[$43 >> 2] = $4; //@line 11281
   $44 = $ReallocAsyncCtx3 + 12 | 0; //@line 11282
   HEAP32[$44 >> 2] = $6; //@line 11283
   $45 = $ReallocAsyncCtx3 + 16 | 0; //@line 11284
   HEAP32[$45 >> 2] = $8; //@line 11285
   $46 = $ReallocAsyncCtx3 + 20 | 0; //@line 11286
   HEAP8[$46 >> 0] = $10; //@line 11287
   $47 = $ReallocAsyncCtx3 + 24 | 0; //@line 11288
   HEAP32[$47 >> 2] = $12; //@line 11289
   $48 = $ReallocAsyncCtx3 + 28 | 0; //@line 11290
   HEAP32[$48 >> 2] = $14; //@line 11291
   $49 = $ReallocAsyncCtx3 + 32 | 0; //@line 11292
   HEAP32[$49 >> 2] = $16; //@line 11293
   $50 = $ReallocAsyncCtx3 + 36 | 0; //@line 11294
   HEAP32[$50 >> 2] = $18; //@line 11295
   $51 = $ReallocAsyncCtx3 + 40 | 0; //@line 11296
   HEAP32[$51 >> 2] = $20; //@line 11297
   $52 = $ReallocAsyncCtx3 + 44 | 0; //@line 11298
   HEAP32[$52 >> 2] = $22; //@line 11299
   $53 = $ReallocAsyncCtx3 + 48 | 0; //@line 11300
   HEAP32[$53 >> 2] = $24; //@line 11301
   $54 = $ReallocAsyncCtx3 + 52 | 0; //@line 11302
   HEAP32[$54 >> 2] = $26; //@line 11303
   $55 = $ReallocAsyncCtx3 + 56 | 0; //@line 11304
   HEAP32[$55 >> 2] = $28; //@line 11305
   $56 = $ReallocAsyncCtx3 + 60 | 0; //@line 11306
   HEAP32[$56 >> 2] = $30; //@line 11307
   $57 = $ReallocAsyncCtx3 + 64 | 0; //@line 11308
   HEAP32[$57 >> 2] = $32; //@line 11309
   $58 = $ReallocAsyncCtx3 + 68 | 0; //@line 11310
   HEAP32[$58 >> 2] = $34; //@line 11311
   $59 = $ReallocAsyncCtx3 + 72 | 0; //@line 11312
   HEAP32[$59 >> 2] = $36; //@line 11313
   $60 = $ReallocAsyncCtx3 + 76 | 0; //@line 11314
   HEAP32[$60 >> 2] = $38; //@line 11315
   sp = STACKTOP; //@line 11316
   STACKTOP = sp; //@line 11317
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 11320
  ___async_unwind = 0; //@line 11321
  HEAP32[$ReallocAsyncCtx3 >> 2] = 98; //@line 11322
  $42 = $ReallocAsyncCtx3 + 4 | 0; //@line 11323
  HEAP32[$42 >> 2] = $2; //@line 11324
  $43 = $ReallocAsyncCtx3 + 8 | 0; //@line 11325
  HEAP32[$43 >> 2] = $4; //@line 11326
  $44 = $ReallocAsyncCtx3 + 12 | 0; //@line 11327
  HEAP32[$44 >> 2] = $6; //@line 11328
  $45 = $ReallocAsyncCtx3 + 16 | 0; //@line 11329
  HEAP32[$45 >> 2] = $8; //@line 11330
  $46 = $ReallocAsyncCtx3 + 20 | 0; //@line 11331
  HEAP8[$46 >> 0] = $10; //@line 11332
  $47 = $ReallocAsyncCtx3 + 24 | 0; //@line 11333
  HEAP32[$47 >> 2] = $12; //@line 11334
  $48 = $ReallocAsyncCtx3 + 28 | 0; //@line 11335
  HEAP32[$48 >> 2] = $14; //@line 11336
  $49 = $ReallocAsyncCtx3 + 32 | 0; //@line 11337
  HEAP32[$49 >> 2] = $16; //@line 11338
  $50 = $ReallocAsyncCtx3 + 36 | 0; //@line 11339
  HEAP32[$50 >> 2] = $18; //@line 11340
  $51 = $ReallocAsyncCtx3 + 40 | 0; //@line 11341
  HEAP32[$51 >> 2] = $20; //@line 11342
  $52 = $ReallocAsyncCtx3 + 44 | 0; //@line 11343
  HEAP32[$52 >> 2] = $22; //@line 11344
  $53 = $ReallocAsyncCtx3 + 48 | 0; //@line 11345
  HEAP32[$53 >> 2] = $24; //@line 11346
  $54 = $ReallocAsyncCtx3 + 52 | 0; //@line 11347
  HEAP32[$54 >> 2] = $26; //@line 11348
  $55 = $ReallocAsyncCtx3 + 56 | 0; //@line 11349
  HEAP32[$55 >> 2] = $28; //@line 11350
  $56 = $ReallocAsyncCtx3 + 60 | 0; //@line 11351
  HEAP32[$56 >> 2] = $30; //@line 11352
  $57 = $ReallocAsyncCtx3 + 64 | 0; //@line 11353
  HEAP32[$57 >> 2] = $32; //@line 11354
  $58 = $ReallocAsyncCtx3 + 68 | 0; //@line 11355
  HEAP32[$58 >> 2] = $34; //@line 11356
  $59 = $ReallocAsyncCtx3 + 72 | 0; //@line 11357
  HEAP32[$59 >> 2] = $36; //@line 11358
  $60 = $ReallocAsyncCtx3 + 76 | 0; //@line 11359
  HEAP32[$60 >> 2] = $38; //@line 11360
  sp = STACKTOP; //@line 11361
  STACKTOP = sp; //@line 11362
  return;
 }
 HEAP8[$6 >> 0] = 0; //@line 11364
 HEAP8[$20 >> 0] = 1; //@line 11365
 HEAP8[$22 >> 0] = 1; //@line 11366
 HEAP8[$24 >> 0] = 0; //@line 11367
 HEAP8[$26 >> 0] = 0; //@line 11368
 HEAP8[$28 >> 0] = 1; //@line 11369
 HEAP8[$30 >> 0] = 0; //@line 11370
 HEAP8[$30 + 1 >> 0] = 0; //@line 11370
 HEAP8[$30 + 2 >> 0] = 0; //@line 11370
 HEAP8[$30 + 3 >> 0] = 0; //@line 11370
 HEAP8[$30 + 4 >> 0] = 0; //@line 11370
 HEAP8[$30 + 5 >> 0] = 0; //@line 11370
 if (!(HEAP8[$18 >> 0] | 0)) {
  $79 = $8; //@line 11374
 } else {
  $$019$i$3 = $18; //@line 11376
  $67 = $8; //@line 11376
  while (1) {
   $64 = _strcspn($$019$i$3, 3745) | 0; //@line 11378
   $66 = $67 + 1 | 0; //@line 11380
   HEAP8[$67 >> 0] = $64; //@line 11381
   $68 = $64 & 255; //@line 11382
   _memcpy($66 | 0, $$019$i$3 | 0, $68 | 0) | 0; //@line 11383
   $69 = $66 + $68 | 0; //@line 11384
   $$019$i$3 = $$019$i$3 + ($64 + ((HEAP8[$$019$i$3 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 11390
   if (!(HEAP8[$$019$i$3 >> 0] | 0)) {
    $79 = $69; //@line 11394
    break;
   } else {
    $67 = $69; //@line 11397
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 11402
 HEAP8[$79 + 1 >> 0] = 0; //@line 11404
 HEAP8[$79 + 2 >> 0] = $10; //@line 11406
 HEAP8[$79 + 3 >> 0] = 0; //@line 11408
 HEAP8[$79 + 4 >> 0] = 1; //@line 11409
 HEAP32[$$byval_copy >> 2] = HEAP32[129]; //@line 11410
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[130]; //@line 11410
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[131]; //@line 11410
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[132]; //@line 11410
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[133]; //@line 11410
 __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy, 53); //@line 11411
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(80) | 0; //@line 11415
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($4, $14, $6, $79 + 5 - $16 | 0) | 0; //@line 11416
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 11419
  $87 = $ReallocAsyncCtx7 + 4 | 0; //@line 11420
  HEAP32[$87 >> 2] = $2; //@line 11421
  $88 = $ReallocAsyncCtx7 + 8 | 0; //@line 11422
  HEAP32[$88 >> 2] = $4; //@line 11423
  $89 = $ReallocAsyncCtx7 + 12 | 0; //@line 11424
  HEAP32[$89 >> 2] = $6; //@line 11425
  $90 = $ReallocAsyncCtx7 + 16 | 0; //@line 11426
  HEAP32[$90 >> 2] = $8; //@line 11427
  $91 = $ReallocAsyncCtx7 + 20 | 0; //@line 11428
  HEAP32[$91 >> 2] = $18; //@line 11429
  $92 = $ReallocAsyncCtx7 + 24 | 0; //@line 11430
  HEAP8[$92 >> 0] = $10; //@line 11431
  $93 = $ReallocAsyncCtx7 + 28 | 0; //@line 11432
  HEAP32[$93 >> 2] = $12; //@line 11433
  $94 = $ReallocAsyncCtx7 + 32 | 0; //@line 11434
  HEAP32[$94 >> 2] = $14; //@line 11435
  $95 = $ReallocAsyncCtx7 + 36 | 0; //@line 11436
  HEAP32[$95 >> 2] = $16; //@line 11437
  $96 = $ReallocAsyncCtx7 + 40 | 0; //@line 11438
  HEAP32[$96 >> 2] = $20; //@line 11439
  $97 = $ReallocAsyncCtx7 + 44 | 0; //@line 11440
  HEAP32[$97 >> 2] = $22; //@line 11441
  $98 = $ReallocAsyncCtx7 + 48 | 0; //@line 11442
  HEAP32[$98 >> 2] = $24; //@line 11443
  $99 = $ReallocAsyncCtx7 + 52 | 0; //@line 11444
  HEAP32[$99 >> 2] = $26; //@line 11445
  $100 = $ReallocAsyncCtx7 + 56 | 0; //@line 11446
  HEAP32[$100 >> 2] = $28; //@line 11447
  $101 = $ReallocAsyncCtx7 + 60 | 0; //@line 11448
  HEAP32[$101 >> 2] = $30; //@line 11449
  $102 = $ReallocAsyncCtx7 + 64 | 0; //@line 11450
  HEAP32[$102 >> 2] = $32; //@line 11451
  $103 = $ReallocAsyncCtx7 + 68 | 0; //@line 11452
  HEAP32[$103 >> 2] = $34; //@line 11453
  $104 = $ReallocAsyncCtx7 + 72 | 0; //@line 11454
  HEAP32[$104 >> 2] = $36; //@line 11455
  $105 = $ReallocAsyncCtx7 + 76 | 0; //@line 11456
  HEAP32[$105 >> 2] = $38; //@line 11457
  sp = STACKTOP; //@line 11458
  STACKTOP = sp; //@line 11459
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 11462
 ___async_unwind = 0; //@line 11463
 HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 11464
 $87 = $ReallocAsyncCtx7 + 4 | 0; //@line 11465
 HEAP32[$87 >> 2] = $2; //@line 11466
 $88 = $ReallocAsyncCtx7 + 8 | 0; //@line 11467
 HEAP32[$88 >> 2] = $4; //@line 11468
 $89 = $ReallocAsyncCtx7 + 12 | 0; //@line 11469
 HEAP32[$89 >> 2] = $6; //@line 11470
 $90 = $ReallocAsyncCtx7 + 16 | 0; //@line 11471
 HEAP32[$90 >> 2] = $8; //@line 11472
 $91 = $ReallocAsyncCtx7 + 20 | 0; //@line 11473
 HEAP32[$91 >> 2] = $18; //@line 11474
 $92 = $ReallocAsyncCtx7 + 24 | 0; //@line 11475
 HEAP8[$92 >> 0] = $10; //@line 11476
 $93 = $ReallocAsyncCtx7 + 28 | 0; //@line 11477
 HEAP32[$93 >> 2] = $12; //@line 11478
 $94 = $ReallocAsyncCtx7 + 32 | 0; //@line 11479
 HEAP32[$94 >> 2] = $14; //@line 11480
 $95 = $ReallocAsyncCtx7 + 36 | 0; //@line 11481
 HEAP32[$95 >> 2] = $16; //@line 11482
 $96 = $ReallocAsyncCtx7 + 40 | 0; //@line 11483
 HEAP32[$96 >> 2] = $20; //@line 11484
 $97 = $ReallocAsyncCtx7 + 44 | 0; //@line 11485
 HEAP32[$97 >> 2] = $22; //@line 11486
 $98 = $ReallocAsyncCtx7 + 48 | 0; //@line 11487
 HEAP32[$98 >> 2] = $24; //@line 11488
 $99 = $ReallocAsyncCtx7 + 52 | 0; //@line 11489
 HEAP32[$99 >> 2] = $26; //@line 11490
 $100 = $ReallocAsyncCtx7 + 56 | 0; //@line 11491
 HEAP32[$100 >> 2] = $28; //@line 11492
 $101 = $ReallocAsyncCtx7 + 60 | 0; //@line 11493
 HEAP32[$101 >> 2] = $30; //@line 11494
 $102 = $ReallocAsyncCtx7 + 64 | 0; //@line 11495
 HEAP32[$102 >> 2] = $32; //@line 11496
 $103 = $ReallocAsyncCtx7 + 68 | 0; //@line 11497
 HEAP32[$103 >> 2] = $34; //@line 11498
 $104 = $ReallocAsyncCtx7 + 72 | 0; //@line 11499
 HEAP32[$104 >> 2] = $36; //@line 11500
 $105 = $ReallocAsyncCtx7 + 76 | 0; //@line 11501
 HEAP32[$105 >> 2] = $38; //@line 11502
 sp = STACKTOP; //@line 11503
 STACKTOP = sp; //@line 11504
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_32($0) {
 $0 = $0 | 0;
 var $$019$i$4 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10958
 STACKTOP = STACKTOP + 32 | 0; //@line 10959
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10959
 $$byval_copy = sp; //@line 10960
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10962
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10964
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10966
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10968
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10970
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 10972
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10974
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10976
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10978
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10980
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10982
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10984
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10986
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10988
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10990
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10992
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 10994
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 10996
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 10998
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(80) | 0; //@line 11003
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($4, 0, $6, 512) | 0; //@line 11004
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 100; //@line 11007
   $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 11008
   HEAP32[$42 >> 2] = $2; //@line 11009
   $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 11010
   HEAP32[$43 >> 2] = $8; //@line 11011
   $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 11012
   HEAP32[$44 >> 2] = $10; //@line 11013
   $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 11014
   HEAP8[$45 >> 0] = $12; //@line 11015
   $46 = $ReallocAsyncCtx2 + 20 | 0; //@line 11016
   HEAP32[$46 >> 2] = $14; //@line 11017
   $47 = $ReallocAsyncCtx2 + 24 | 0; //@line 11018
   HEAP32[$47 >> 2] = $16; //@line 11019
   $48 = $ReallocAsyncCtx2 + 28 | 0; //@line 11020
   HEAP32[$48 >> 2] = $18; //@line 11021
   $49 = $ReallocAsyncCtx2 + 32 | 0; //@line 11022
   HEAP32[$49 >> 2] = $4; //@line 11023
   $50 = $ReallocAsyncCtx2 + 36 | 0; //@line 11024
   HEAP32[$50 >> 2] = $6; //@line 11025
   $51 = $ReallocAsyncCtx2 + 40 | 0; //@line 11026
   HEAP32[$51 >> 2] = $20; //@line 11027
   $52 = $ReallocAsyncCtx2 + 44 | 0; //@line 11028
   HEAP32[$52 >> 2] = $22; //@line 11029
   $53 = $ReallocAsyncCtx2 + 48 | 0; //@line 11030
   HEAP32[$53 >> 2] = $24; //@line 11031
   $54 = $ReallocAsyncCtx2 + 52 | 0; //@line 11032
   HEAP32[$54 >> 2] = $26; //@line 11033
   $55 = $ReallocAsyncCtx2 + 56 | 0; //@line 11034
   HEAP32[$55 >> 2] = $28; //@line 11035
   $56 = $ReallocAsyncCtx2 + 60 | 0; //@line 11036
   HEAP32[$56 >> 2] = $30; //@line 11037
   $57 = $ReallocAsyncCtx2 + 64 | 0; //@line 11038
   HEAP32[$57 >> 2] = $32; //@line 11039
   $58 = $ReallocAsyncCtx2 + 68 | 0; //@line 11040
   HEAP32[$58 >> 2] = $34; //@line 11041
   $59 = $ReallocAsyncCtx2 + 72 | 0; //@line 11042
   HEAP32[$59 >> 2] = $36; //@line 11043
   $60 = $ReallocAsyncCtx2 + 76 | 0; //@line 11044
   HEAP32[$60 >> 2] = $38; //@line 11045
   sp = STACKTOP; //@line 11046
   STACKTOP = sp; //@line 11047
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 11050
  ___async_unwind = 0; //@line 11051
  HEAP32[$ReallocAsyncCtx2 >> 2] = 100; //@line 11052
  $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 11053
  HEAP32[$42 >> 2] = $2; //@line 11054
  $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 11055
  HEAP32[$43 >> 2] = $8; //@line 11056
  $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 11057
  HEAP32[$44 >> 2] = $10; //@line 11058
  $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 11059
  HEAP8[$45 >> 0] = $12; //@line 11060
  $46 = $ReallocAsyncCtx2 + 20 | 0; //@line 11061
  HEAP32[$46 >> 2] = $14; //@line 11062
  $47 = $ReallocAsyncCtx2 + 24 | 0; //@line 11063
  HEAP32[$47 >> 2] = $16; //@line 11064
  $48 = $ReallocAsyncCtx2 + 28 | 0; //@line 11065
  HEAP32[$48 >> 2] = $18; //@line 11066
  $49 = $ReallocAsyncCtx2 + 32 | 0; //@line 11067
  HEAP32[$49 >> 2] = $4; //@line 11068
  $50 = $ReallocAsyncCtx2 + 36 | 0; //@line 11069
  HEAP32[$50 >> 2] = $6; //@line 11070
  $51 = $ReallocAsyncCtx2 + 40 | 0; //@line 11071
  HEAP32[$51 >> 2] = $20; //@line 11072
  $52 = $ReallocAsyncCtx2 + 44 | 0; //@line 11073
  HEAP32[$52 >> 2] = $22; //@line 11074
  $53 = $ReallocAsyncCtx2 + 48 | 0; //@line 11075
  HEAP32[$53 >> 2] = $24; //@line 11076
  $54 = $ReallocAsyncCtx2 + 52 | 0; //@line 11077
  HEAP32[$54 >> 2] = $26; //@line 11078
  $55 = $ReallocAsyncCtx2 + 56 | 0; //@line 11079
  HEAP32[$55 >> 2] = $28; //@line 11080
  $56 = $ReallocAsyncCtx2 + 60 | 0; //@line 11081
  HEAP32[$56 >> 2] = $30; //@line 11082
  $57 = $ReallocAsyncCtx2 + 64 | 0; //@line 11083
  HEAP32[$57 >> 2] = $32; //@line 11084
  $58 = $ReallocAsyncCtx2 + 68 | 0; //@line 11085
  HEAP32[$58 >> 2] = $34; //@line 11086
  $59 = $ReallocAsyncCtx2 + 72 | 0; //@line 11087
  HEAP32[$59 >> 2] = $36; //@line 11088
  $60 = $ReallocAsyncCtx2 + 76 | 0; //@line 11089
  HEAP32[$60 >> 2] = $38; //@line 11090
  sp = STACKTOP; //@line 11091
  STACKTOP = sp; //@line 11092
  return;
 }
 HEAP8[$6 >> 0] = 0; //@line 11094
 HEAP8[$20 >> 0] = 1; //@line 11095
 HEAP8[$22 >> 0] = 1; //@line 11096
 HEAP8[$24 >> 0] = 0; //@line 11097
 HEAP8[$26 >> 0] = 0; //@line 11098
 HEAP8[$28 >> 0] = 1; //@line 11099
 HEAP8[$30 >> 0] = 0; //@line 11100
 HEAP8[$30 + 1 >> 0] = 0; //@line 11100
 HEAP8[$30 + 2 >> 0] = 0; //@line 11100
 HEAP8[$30 + 3 >> 0] = 0; //@line 11100
 HEAP8[$30 + 4 >> 0] = 0; //@line 11100
 HEAP8[$30 + 5 >> 0] = 0; //@line 11100
 if (!(HEAP8[$10 >> 0] | 0)) {
  $79 = $8; //@line 11104
 } else {
  $$019$i$4 = $10; //@line 11106
  $67 = $8; //@line 11106
  while (1) {
   $64 = _strcspn($$019$i$4, 3745) | 0; //@line 11108
   $66 = $67 + 1 | 0; //@line 11110
   HEAP8[$67 >> 0] = $64; //@line 11111
   $68 = $64 & 255; //@line 11112
   _memcpy($66 | 0, $$019$i$4 | 0, $68 | 0) | 0; //@line 11113
   $69 = $66 + $68 | 0; //@line 11114
   $$019$i$4 = $$019$i$4 + ($64 + ((HEAP8[$$019$i$4 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 11120
   if (!(HEAP8[$$019$i$4 >> 0] | 0)) {
    $79 = $69; //@line 11124
    break;
   } else {
    $67 = $69; //@line 11127
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 11132
 HEAP8[$79 + 1 >> 0] = 0; //@line 11134
 HEAP8[$79 + 2 >> 0] = $12; //@line 11136
 HEAP8[$79 + 3 >> 0] = 0; //@line 11138
 HEAP8[$79 + 4 >> 0] = 1; //@line 11139
 HEAP32[$$byval_copy >> 2] = HEAP32[134]; //@line 11140
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[135]; //@line 11140
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[136]; //@line 11140
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[137]; //@line 11140
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[138]; //@line 11140
 __ZN13SocketAddressC2E10nsapi_addrt($16, $$byval_copy, 53); //@line 11141
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 11145
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($4, $16, $6, $79 + 5 - $18 | 0) | 0; //@line 11146
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 101; //@line 11149
  $87 = $ReallocAsyncCtx6 + 4 | 0; //@line 11150
  HEAP32[$87 >> 2] = $2; //@line 11151
  $88 = $ReallocAsyncCtx6 + 8 | 0; //@line 11152
  HEAP32[$88 >> 2] = $32; //@line 11153
  $89 = $ReallocAsyncCtx6 + 12 | 0; //@line 11154
  HEAP32[$89 >> 2] = $6; //@line 11155
  $90 = $ReallocAsyncCtx6 + 16 | 0; //@line 11156
  HEAP32[$90 >> 2] = $34; //@line 11157
  $91 = $ReallocAsyncCtx6 + 20 | 0; //@line 11158
  HEAP32[$91 >> 2] = $14; //@line 11159
  $92 = $ReallocAsyncCtx6 + 24 | 0; //@line 11160
  HEAP32[$92 >> 2] = $4; //@line 11161
  $93 = $ReallocAsyncCtx6 + 28 | 0; //@line 11162
  HEAP32[$93 >> 2] = $20; //@line 11163
  $94 = $ReallocAsyncCtx6 + 32 | 0; //@line 11164
  HEAP32[$94 >> 2] = $22; //@line 11165
  $95 = $ReallocAsyncCtx6 + 36 | 0; //@line 11166
  HEAP32[$95 >> 2] = $24; //@line 11167
  $96 = $ReallocAsyncCtx6 + 40 | 0; //@line 11168
  HEAP32[$96 >> 2] = $26; //@line 11169
  $97 = $ReallocAsyncCtx6 + 44 | 0; //@line 11170
  HEAP32[$97 >> 2] = $28; //@line 11171
  $98 = $ReallocAsyncCtx6 + 48 | 0; //@line 11172
  HEAP32[$98 >> 2] = $30; //@line 11173
  $99 = $ReallocAsyncCtx6 + 52 | 0; //@line 11174
  HEAP32[$99 >> 2] = $36; //@line 11175
  $100 = $ReallocAsyncCtx6 + 56 | 0; //@line 11176
  HEAP32[$100 >> 2] = $8; //@line 11177
  $101 = $ReallocAsyncCtx6 + 60 | 0; //@line 11178
  HEAP32[$101 >> 2] = $38; //@line 11179
  sp = STACKTOP; //@line 11180
  STACKTOP = sp; //@line 11181
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 11184
 ___async_unwind = 0; //@line 11185
 HEAP32[$ReallocAsyncCtx6 >> 2] = 101; //@line 11186
 $87 = $ReallocAsyncCtx6 + 4 | 0; //@line 11187
 HEAP32[$87 >> 2] = $2; //@line 11188
 $88 = $ReallocAsyncCtx6 + 8 | 0; //@line 11189
 HEAP32[$88 >> 2] = $32; //@line 11190
 $89 = $ReallocAsyncCtx6 + 12 | 0; //@line 11191
 HEAP32[$89 >> 2] = $6; //@line 11192
 $90 = $ReallocAsyncCtx6 + 16 | 0; //@line 11193
 HEAP32[$90 >> 2] = $34; //@line 11194
 $91 = $ReallocAsyncCtx6 + 20 | 0; //@line 11195
 HEAP32[$91 >> 2] = $14; //@line 11196
 $92 = $ReallocAsyncCtx6 + 24 | 0; //@line 11197
 HEAP32[$92 >> 2] = $4; //@line 11198
 $93 = $ReallocAsyncCtx6 + 28 | 0; //@line 11199
 HEAP32[$93 >> 2] = $20; //@line 11200
 $94 = $ReallocAsyncCtx6 + 32 | 0; //@line 11201
 HEAP32[$94 >> 2] = $22; //@line 11202
 $95 = $ReallocAsyncCtx6 + 36 | 0; //@line 11203
 HEAP32[$95 >> 2] = $24; //@line 11204
 $96 = $ReallocAsyncCtx6 + 40 | 0; //@line 11205
 HEAP32[$96 >> 2] = $26; //@line 11206
 $97 = $ReallocAsyncCtx6 + 44 | 0; //@line 11207
 HEAP32[$97 >> 2] = $28; //@line 11208
 $98 = $ReallocAsyncCtx6 + 48 | 0; //@line 11209
 HEAP32[$98 >> 2] = $30; //@line 11210
 $99 = $ReallocAsyncCtx6 + 52 | 0; //@line 11211
 HEAP32[$99 >> 2] = $36; //@line 11212
 $100 = $ReallocAsyncCtx6 + 56 | 0; //@line 11213
 HEAP32[$100 >> 2] = $8; //@line 11214
 $101 = $ReallocAsyncCtx6 + 60 | 0; //@line 11215
 HEAP32[$101 >> 2] = $38; //@line 11216
 sp = STACKTOP; //@line 11217
 STACKTOP = sp; //@line 11218
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14261
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14267
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 14276
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 14281
      $19 = $1 + 44 | 0; //@line 14282
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 14291
      $26 = $1 + 52 | 0; //@line 14292
      $27 = $1 + 53 | 0; //@line 14293
      $28 = $1 + 54 | 0; //@line 14294
      $29 = $0 + 8 | 0; //@line 14295
      $30 = $1 + 24 | 0; //@line 14296
      $$081$off0 = 0; //@line 14297
      $$084 = $0 + 16 | 0; //@line 14297
      $$085$off0 = 0; //@line 14297
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 14301
        label = 20; //@line 14302
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 14305
       HEAP8[$27 >> 0] = 0; //@line 14306
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14307
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 14308
       if (___async) {
        label = 12; //@line 14311
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 14314
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 14318
        label = 20; //@line 14319
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 14326
         $$186$off0 = $$085$off0; //@line 14326
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 14335
           label = 20; //@line 14336
           break L10;
          } else {
           $$182$off0 = 1; //@line 14339
           $$186$off0 = $$085$off0; //@line 14339
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 14346
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 14353
          break L10;
         } else {
          $$182$off0 = 1; //@line 14356
          $$186$off0 = 1; //@line 14356
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 14361
       $$084 = $$084 + 8 | 0; //@line 14361
       $$085$off0 = $$186$off0; //@line 14361
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 172; //@line 14364
       HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 14366
       HEAP32[$AsyncCtx15 + 8 >> 2] = $30; //@line 14368
       HEAP32[$AsyncCtx15 + 12 >> 2] = $2; //@line 14370
       HEAP32[$AsyncCtx15 + 16 >> 2] = $13; //@line 14372
       HEAP32[$AsyncCtx15 + 20 >> 2] = $1; //@line 14374
       HEAP8[$AsyncCtx15 + 24 >> 0] = $$081$off0 & 1; //@line 14377
       HEAP8[$AsyncCtx15 + 25 >> 0] = $$085$off0 & 1; //@line 14380
       HEAP32[$AsyncCtx15 + 28 >> 2] = $$084; //@line 14382
       HEAP32[$AsyncCtx15 + 32 >> 2] = $29; //@line 14384
       HEAP32[$AsyncCtx15 + 36 >> 2] = $26; //@line 14386
       HEAP32[$AsyncCtx15 + 40 >> 2] = $27; //@line 14388
       HEAP8[$AsyncCtx15 + 44 >> 0] = $4 & 1; //@line 14391
       HEAP32[$AsyncCtx15 + 48 >> 2] = $25; //@line 14393
       HEAP32[$AsyncCtx15 + 52 >> 2] = $19; //@line 14395
       sp = STACKTOP; //@line 14396
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 14402
         $61 = $1 + 40 | 0; //@line 14403
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 14406
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 14414
           if ($$283$off0) {
            label = 25; //@line 14416
            break;
           } else {
            $69 = 4; //@line 14419
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 14426
        } else {
         $69 = 4; //@line 14428
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 14433
      }
      HEAP32[$19 >> 2] = $69; //@line 14435
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 14444
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 14449
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 14450
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14451
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 14452
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 173; //@line 14455
    HEAP32[$AsyncCtx11 + 4 >> 2] = $73; //@line 14457
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 14459
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 14461
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 14463
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 14466
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 14468
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 14470
    sp = STACKTOP; //@line 14471
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 14474
   $81 = $0 + 24 | 0; //@line 14475
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 14479
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 14483
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 14490
       $$2 = $81; //@line 14491
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 14503
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 14504
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 14509
        $136 = $$2 + 8 | 0; //@line 14510
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 14513
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 176; //@line 14518
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 14520
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 14522
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 14524
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 14526
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 14528
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 14530
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 14532
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 14535
       sp = STACKTOP; //@line 14536
       return;
      }
      $104 = $1 + 24 | 0; //@line 14539
      $105 = $1 + 54 | 0; //@line 14540
      $$1 = $81; //@line 14541
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 14557
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 14558
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14563
       $122 = $$1 + 8 | 0; //@line 14564
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 14567
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 175; //@line 14572
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 14574
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 14576
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 14578
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 14580
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 14582
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 14584
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 14586
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 14588
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 14591
      sp = STACKTOP; //@line 14592
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 14596
    $$0 = $81; //@line 14597
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14604
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 14605
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14610
     $100 = $$0 + 8 | 0; //@line 14611
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 14614
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 174; //@line 14619
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 14621
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 14623
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 14625
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 14627
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 14629
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 14631
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 14634
    sp = STACKTOP; //@line 14635
    return;
   }
  }
 } while (0);
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 1219
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 1220
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 1221
 $d_sroa_0_0_extract_trunc = $b$0; //@line 1222
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 1223
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 1224
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 1226
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 1229
    HEAP32[$rem + 4 >> 2] = 0; //@line 1230
   }
   $_0$1 = 0; //@line 1232
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 1233
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1234
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 1237
    $_0$0 = 0; //@line 1238
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1239
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 1241
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 1242
   $_0$1 = 0; //@line 1243
   $_0$0 = 0; //@line 1244
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1245
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 1248
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 1253
     HEAP32[$rem + 4 >> 2] = 0; //@line 1254
    }
    $_0$1 = 0; //@line 1256
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 1257
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1258
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 1262
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 1263
    }
    $_0$1 = 0; //@line 1265
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 1266
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1267
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 1269
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 1272
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 1273
    }
    $_0$1 = 0; //@line 1275
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 1276
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1277
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 1280
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 1282
    $58 = 31 - $51 | 0; //@line 1283
    $sr_1_ph = $57; //@line 1284
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 1285
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 1286
    $q_sroa_0_1_ph = 0; //@line 1287
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 1288
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 1292
    $_0$0 = 0; //@line 1293
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1294
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 1296
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 1297
   $_0$1 = 0; //@line 1298
   $_0$0 = 0; //@line 1299
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1300
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 1304
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 1306
     $126 = 31 - $119 | 0; //@line 1307
     $130 = $119 - 31 >> 31; //@line 1308
     $sr_1_ph = $125; //@line 1309
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 1310
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 1311
     $q_sroa_0_1_ph = 0; //@line 1312
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 1313
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 1317
     $_0$0 = 0; //@line 1318
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1319
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 1321
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 1322
    $_0$1 = 0; //@line 1323
    $_0$0 = 0; //@line 1324
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1325
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 1327
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 1330
    $89 = 64 - $88 | 0; //@line 1331
    $91 = 32 - $88 | 0; //@line 1332
    $92 = $91 >> 31; //@line 1333
    $95 = $88 - 32 | 0; //@line 1334
    $105 = $95 >> 31; //@line 1335
    $sr_1_ph = $88; //@line 1336
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 1337
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 1338
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 1339
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 1340
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 1344
    HEAP32[$rem + 4 >> 2] = 0; //@line 1345
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 1348
    $_0$0 = $a$0 | 0 | 0; //@line 1349
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1350
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 1352
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 1353
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 1354
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1355
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 1360
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 1361
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 1362
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 1363
  $carry_0_lcssa$1 = 0; //@line 1364
  $carry_0_lcssa$0 = 0; //@line 1365
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 1367
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 1368
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 1369
  $137$1 = tempRet0; //@line 1370
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 1371
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 1372
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 1373
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 1374
  $sr_1202 = $sr_1_ph; //@line 1375
  $carry_0203 = 0; //@line 1376
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 1378
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 1379
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 1380
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 1381
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 1382
   $150$1 = tempRet0; //@line 1383
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 1384
   $carry_0203 = $151$0 & 1; //@line 1385
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 1387
   $r_sroa_1_1200 = tempRet0; //@line 1388
   $sr_1202 = $sr_1202 - 1 | 0; //@line 1389
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 1401
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 1402
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 1403
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 1404
  $carry_0_lcssa$1 = 0; //@line 1405
  $carry_0_lcssa$0 = $carry_0203; //@line 1406
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 1408
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 1409
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 1412
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 1413
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 1415
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 1416
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1417
}
function __Z17recv_coap_messagev() {
 var $$016$i$i = 0, $$017$i$i = 0, $$byval_copy = 0, $$pre$phi23Z2D = 0, $$pre22$pre$phiZZ2D = 0, $0 = 0, $1 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $76 = 0, $AsyncCtx = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10420
 STACKTOP = STACKTOP + 176 | 0; //@line 10421
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 10421
 $$byval_copy = sp + 144 | 0; //@line 10422
 $vararg_buffer19 = sp + 56 | 0; //@line 10423
 $vararg_buffer16 = sp + 48 | 0; //@line 10424
 $vararg_buffer13 = sp + 40 | 0; //@line 10425
 $vararg_buffer10 = sp + 32 | 0; //@line 10426
 $vararg_buffer7 = sp + 24 | 0; //@line 10427
 $vararg_buffer4 = sp + 16 | 0; //@line 10428
 $vararg_buffer1 = sp + 8 | 0; //@line 10429
 $vararg_buffer = sp; //@line 10430
 $0 = sp + 80 | 0; //@line 10431
 $1 = sp + 60 | 0; //@line 10432
 HEAP32[$1 >> 2] = 0; //@line 10433
 HEAP32[$1 + 4 >> 2] = 0; //@line 10433
 HEAP32[$1 + 8 >> 2] = 0; //@line 10433
 HEAP32[$1 + 12 >> 2] = 0; //@line 10433
 HEAP32[$1 + 16 >> 2] = 0; //@line 10433
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 10434
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10434
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 10434
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 10434
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 10434
 __ZN13SocketAddressC2E10nsapi_addrt($0, $$byval_copy, 0); //@line 10435
 $2 = _malloc(1280) | 0; //@line 10436
 $AsyncCtx23 = _emscripten_alloc_async_context(80, sp) | 0; //@line 10437
 $3 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj(6232, $0, $2, 1280) | 0; //@line 10438
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 127; //@line 10441
  HEAP32[$AsyncCtx23 + 4 >> 2] = $vararg_buffer; //@line 10443
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer; //@line 10445
  HEAP32[$AsyncCtx23 + 12 >> 2] = $2; //@line 10447
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer19; //@line 10449
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer19; //@line 10451
  HEAP32[$AsyncCtx23 + 24 >> 2] = $0; //@line 10453
  HEAP32[$AsyncCtx23 + 28 >> 2] = $$byval_copy; //@line 10455
  HEAP32[$AsyncCtx23 + 32 >> 2] = $vararg_buffer1; //@line 10457
  HEAP32[$AsyncCtx23 + 36 >> 2] = $vararg_buffer1; //@line 10459
  HEAP32[$AsyncCtx23 + 40 >> 2] = $vararg_buffer4; //@line 10461
  HEAP32[$AsyncCtx23 + 44 >> 2] = $vararg_buffer4; //@line 10463
  HEAP32[$AsyncCtx23 + 48 >> 2] = $vararg_buffer7; //@line 10465
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer7; //@line 10467
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer10; //@line 10469
  HEAP32[$AsyncCtx23 + 60 >> 2] = $vararg_buffer10; //@line 10471
  HEAP32[$AsyncCtx23 + 64 >> 2] = $vararg_buffer13; //@line 10473
  HEAP32[$AsyncCtx23 + 68 >> 2] = $vararg_buffer13; //@line 10475
  HEAP32[$AsyncCtx23 + 72 >> 2] = $vararg_buffer16; //@line 10477
  HEAP32[$AsyncCtx23 + 76 >> 2] = $vararg_buffer16; //@line 10479
  sp = STACKTOP; //@line 10480
  STACKTOP = sp; //@line 10481
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 10483
 if (($3 | 0) <= 0) {
  HEAP32[$vararg_buffer19 >> 2] = $3; //@line 10486
  _printf(2705, $vararg_buffer19) | 0; //@line 10487
  _free($2); //@line 10488
  STACKTOP = sp; //@line 10489
  return;
 }
 HEAP32[$vararg_buffer >> 2] = $3; //@line 10491
 _printf(2532, $vararg_buffer) | 0; //@line 10492
 $24 = HEAP32[1572] | 0; //@line 10493
 $AsyncCtx27 = _emscripten_alloc_async_context(64, sp) | 0; //@line 10495
 $26 = _sn_coap_parser($24, $3 & 65535, $2, 556) | 0; //@line 10496
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 128; //@line 10499
  HEAP32[$AsyncCtx27 + 4 >> 2] = $$byval_copy; //@line 10501
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer1; //@line 10503
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 10505
  HEAP32[$AsyncCtx27 + 16 >> 2] = $vararg_buffer4; //@line 10507
  HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer4; //@line 10509
  HEAP32[$AsyncCtx27 + 24 >> 2] = $vararg_buffer7; //@line 10511
  HEAP32[$AsyncCtx27 + 28 >> 2] = $vararg_buffer7; //@line 10513
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer10; //@line 10515
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer10; //@line 10517
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer13; //@line 10519
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer13; //@line 10521
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer16; //@line 10523
  HEAP32[$AsyncCtx27 + 52 >> 2] = $vararg_buffer16; //@line 10525
  HEAP32[$AsyncCtx27 + 56 >> 2] = $2; //@line 10527
  HEAP32[$AsyncCtx27 + 60 >> 2] = $0; //@line 10529
  sp = STACKTOP; //@line 10530
  STACKTOP = sp; //@line 10531
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 10533
 $43 = HEAP32[$26 + 36 >> 2] | 0; //@line 10535
 $44 = $26 + 24 | 0; //@line 10536
 $45 = HEAP16[$44 >> 1] | 0; //@line 10537
 $46 = $45 & 65535; //@line 10538
 HEAP32[$$byval_copy >> 2] = 0; //@line 10539
 HEAP32[$$byval_copy + 4 >> 2] = 0; //@line 10539
 HEAP32[$$byval_copy + 8 >> 2] = 0; //@line 10539
 do {
  if (($45 & 65535) < 11) {
   $76 = $$byval_copy + 11 | 0; //@line 10544
   HEAP8[$76 >> 0] = $45; //@line 10545
   if (!($45 << 16 >> 16)) {
    $$017$i$i = $$byval_copy; //@line 10548
    $$pre$phi23Z2D = $76; //@line 10548
   } else {
    $$016$i$i = $$byval_copy; //@line 10550
    $$pre22$pre$phiZZ2D = $76; //@line 10550
    label = 11; //@line 10551
   }
  } else {
   $49 = $46 + 16 & 131056; //@line 10555
   $AsyncCtx = _emscripten_alloc_async_context(88, sp) | 0; //@line 10556
   $50 = __Znwj($49) | 0; //@line 10557
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 129; //@line 10560
    HEAP32[$AsyncCtx + 4 >> 2] = $$byval_copy; //@line 10562
    HEAP32[$AsyncCtx + 8 >> 2] = $49; //@line 10564
    HEAP32[$AsyncCtx + 12 >> 2] = $46; //@line 10566
    HEAP32[$AsyncCtx + 16 >> 2] = $43; //@line 10568
    HEAP32[$AsyncCtx + 20 >> 2] = $26; //@line 10570
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 10572
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 10574
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer4; //@line 10576
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer4; //@line 10578
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer7; //@line 10580
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer7; //@line 10582
    HEAP32[$AsyncCtx + 48 >> 2] = $44; //@line 10584
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer10; //@line 10586
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer10; //@line 10588
    HEAP32[$AsyncCtx + 60 >> 2] = $$byval_copy; //@line 10590
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer13; //@line 10592
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer13; //@line 10594
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer16; //@line 10596
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer16; //@line 10598
    HEAP32[$AsyncCtx + 80 >> 2] = $2; //@line 10600
    HEAP32[$AsyncCtx + 84 >> 2] = $0; //@line 10602
    sp = STACKTOP; //@line 10603
    STACKTOP = sp; //@line 10604
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10606
    HEAP32[$$byval_copy >> 2] = $50; //@line 10607
    HEAP32[$$byval_copy + 8 >> 2] = $49 | -2147483648; //@line 10610
    HEAP32[$$byval_copy + 4 >> 2] = $46; //@line 10612
    $$016$i$i = $50; //@line 10614
    $$pre22$pre$phiZZ2D = $$byval_copy + 11 | 0; //@line 10614
    label = 11; //@line 10615
    break;
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  _memcpy($$016$i$i | 0, $43 | 0, $46 | 0) | 0; //@line 10621
  $$017$i$i = $$016$i$i; //@line 10622
  $$pre$phi23Z2D = $$pre22$pre$phiZZ2D; //@line 10622
 }
 HEAP8[$$017$i$i + $46 >> 0] = 0; //@line 10625
 HEAP32[$vararg_buffer1 >> 2] = HEAPU16[$26 + 20 >> 1]; //@line 10629
 _printf(2567, $vararg_buffer1) | 0; //@line 10630
 HEAP32[$vararg_buffer4 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 10633
 _printf(2590, $vararg_buffer4) | 0; //@line 10634
 HEAP32[$vararg_buffer7 >> 2] = HEAP32[$26 + 16 >> 2]; //@line 10637
 _printf(2613, $vararg_buffer7) | 0; //@line 10638
 HEAP32[$vararg_buffer10 >> 2] = HEAPU16[$44 >> 1]; //@line 10641
 _printf(2636, $vararg_buffer10) | 0; //@line 10642
 HEAP32[$vararg_buffer13 >> 2] = (HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0 ? HEAP32[$$byval_copy >> 2] | 0 : $$byval_copy; //@line 10647
 _printf(2659, $vararg_buffer13) | 0; //@line 10648
 HEAP32[$vararg_buffer16 >> 2] = HEAP32[$26 + 40 >> 2]; //@line 10651
 _printf(2682, $vararg_buffer16) | 0; //@line 10652
 if ((HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 10657
 }
 _free($2); //@line 10659
 STACKTOP = sp; //@line 10660
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_38($0) {
 $0 = $0 | 0;
 var $$019$i = 0, $$2 = 0, $$byval_copy = 0, $$sink$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $48 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 12125
 STACKTOP = STACKTOP + 32 | 0; //@line 12126
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12126
 $$byval_copy = sp; //@line 12127
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12129
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12131
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12133
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12135
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12137
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12139
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12141
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12143
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12145
 if (!$AsyncRetVal) {
  __ZN6Socket11set_timeoutEi($12, 5e3); //@line 12148
  $19 = _malloc(512) | 0; //@line 12149
  if (!$19) {
   $$2 = -3007; //@line 12152
  } else {
   $21 = $19; //@line 12154
   $22 = $19 + 1 | 0; //@line 12155
   $23 = $19 + 2 | 0; //@line 12156
   $24 = $19 + 3 | 0; //@line 12157
   $25 = $19 + 4 | 0; //@line 12158
   $26 = $19 + 5 | 0; //@line 12159
   $27 = $19 + 6 | 0; //@line 12160
   $28 = $19 + 7 | 0; //@line 12161
   $29 = $19 + 12 | 0; //@line 12162
   $$sink$i = ($16 | 0) == 2 ? 28 : 1; //@line 12164
   HEAP8[$19 >> 0] = 0; //@line 12165
   HEAP8[$22 >> 0] = 1; //@line 12166
   HEAP8[$23 >> 0] = 1; //@line 12167
   HEAP8[$24 >> 0] = 0; //@line 12168
   HEAP8[$25 >> 0] = 0; //@line 12169
   HEAP8[$26 >> 0] = 1; //@line 12170
   HEAP8[$27 >> 0] = 0; //@line 12171
   HEAP8[$27 + 1 >> 0] = 0; //@line 12171
   HEAP8[$27 + 2 >> 0] = 0; //@line 12171
   HEAP8[$27 + 3 >> 0] = 0; //@line 12171
   HEAP8[$27 + 4 >> 0] = 0; //@line 12171
   HEAP8[$27 + 5 >> 0] = 0; //@line 12171
   if (!(HEAP8[$8 >> 0] | 0)) {
    $48 = $29; //@line 12175
   } else {
    $$019$i = $8; //@line 12177
    $36 = $29; //@line 12177
    while (1) {
     $33 = _strcspn($$019$i, 3745) | 0; //@line 12179
     $35 = $36 + 1 | 0; //@line 12181
     HEAP8[$36 >> 0] = $33; //@line 12182
     $37 = $33 & 255; //@line 12183
     _memcpy($35 | 0, $$019$i | 0, $37 | 0) | 0; //@line 12184
     $38 = $35 + $37 | 0; //@line 12185
     $$019$i = $$019$i + ($33 + ((HEAP8[$$019$i + $33 >> 0] | 0) == 46 & 1)) | 0; //@line 12191
     if (!(HEAP8[$$019$i >> 0] | 0)) {
      $48 = $38; //@line 12195
      break;
     } else {
      $36 = $38; //@line 12198
     }
    }
   }
   HEAP8[$48 >> 0] = 0; //@line 12203
   HEAP8[$48 + 1 >> 0] = 0; //@line 12205
   HEAP8[$48 + 2 >> 0] = $$sink$i; //@line 12207
   HEAP8[$48 + 3 >> 0] = 0; //@line 12209
   HEAP8[$48 + 4 >> 0] = 1; //@line 12210
   HEAP32[$$byval_copy >> 2] = HEAP32[114]; //@line 12211
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[115]; //@line 12211
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[116]; //@line 12211
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[117]; //@line 12211
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[118]; //@line 12211
   __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy, 53); //@line 12212
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(80) | 0; //@line 12216
   $55 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($2, $6, $19, $48 + 5 - $21 | 0) | 0; //@line 12217
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 91; //@line 12220
    $56 = $ReallocAsyncCtx10 + 4 | 0; //@line 12221
    HEAP32[$56 >> 2] = $4; //@line 12222
    $57 = $ReallocAsyncCtx10 + 8 | 0; //@line 12223
    HEAP32[$57 >> 2] = $2; //@line 12224
    $58 = $ReallocAsyncCtx10 + 12 | 0; //@line 12225
    HEAP32[$58 >> 2] = $19; //@line 12226
    $59 = $ReallocAsyncCtx10 + 16 | 0; //@line 12227
    HEAP32[$59 >> 2] = $29; //@line 12228
    $60 = $ReallocAsyncCtx10 + 20 | 0; //@line 12229
    HEAP8[$60 >> 0] = $$sink$i; //@line 12230
    $61 = $ReallocAsyncCtx10 + 24 | 0; //@line 12231
    HEAP32[$61 >> 2] = $6; //@line 12232
    $62 = $ReallocAsyncCtx10 + 28 | 0; //@line 12233
    HEAP32[$62 >> 2] = $6; //@line 12234
    $63 = $ReallocAsyncCtx10 + 32 | 0; //@line 12235
    HEAP32[$63 >> 2] = $21; //@line 12236
    $64 = $ReallocAsyncCtx10 + 36 | 0; //@line 12237
    HEAP32[$64 >> 2] = $8; //@line 12238
    $65 = $ReallocAsyncCtx10 + 40 | 0; //@line 12239
    HEAP32[$65 >> 2] = $22; //@line 12240
    $66 = $ReallocAsyncCtx10 + 44 | 0; //@line 12241
    HEAP32[$66 >> 2] = $23; //@line 12242
    $67 = $ReallocAsyncCtx10 + 48 | 0; //@line 12243
    HEAP32[$67 >> 2] = $24; //@line 12244
    $68 = $ReallocAsyncCtx10 + 52 | 0; //@line 12245
    HEAP32[$68 >> 2] = $25; //@line 12246
    $69 = $ReallocAsyncCtx10 + 56 | 0; //@line 12247
    HEAP32[$69 >> 2] = $26; //@line 12248
    $70 = $ReallocAsyncCtx10 + 60 | 0; //@line 12249
    HEAP32[$70 >> 2] = $27; //@line 12250
    $71 = $ReallocAsyncCtx10 + 64 | 0; //@line 12251
    HEAP32[$71 >> 2] = $10; //@line 12252
    $72 = $ReallocAsyncCtx10 + 68 | 0; //@line 12253
    HEAP32[$72 >> 2] = $12; //@line 12254
    $73 = $ReallocAsyncCtx10 + 72 | 0; //@line 12255
    HEAP32[$73 >> 2] = $28; //@line 12256
    $74 = $ReallocAsyncCtx10 + 76 | 0; //@line 12257
    HEAP32[$74 >> 2] = $14; //@line 12258
    sp = STACKTOP; //@line 12259
    STACKTOP = sp; //@line 12260
    return;
   }
   HEAP32[___async_retval >> 2] = $55; //@line 12263
   ___async_unwind = 0; //@line 12264
   HEAP32[$ReallocAsyncCtx10 >> 2] = 91; //@line 12265
   $56 = $ReallocAsyncCtx10 + 4 | 0; //@line 12266
   HEAP32[$56 >> 2] = $4; //@line 12267
   $57 = $ReallocAsyncCtx10 + 8 | 0; //@line 12268
   HEAP32[$57 >> 2] = $2; //@line 12269
   $58 = $ReallocAsyncCtx10 + 12 | 0; //@line 12270
   HEAP32[$58 >> 2] = $19; //@line 12271
   $59 = $ReallocAsyncCtx10 + 16 | 0; //@line 12272
   HEAP32[$59 >> 2] = $29; //@line 12273
   $60 = $ReallocAsyncCtx10 + 20 | 0; //@line 12274
   HEAP8[$60 >> 0] = $$sink$i; //@line 12275
   $61 = $ReallocAsyncCtx10 + 24 | 0; //@line 12276
   HEAP32[$61 >> 2] = $6; //@line 12277
   $62 = $ReallocAsyncCtx10 + 28 | 0; //@line 12278
   HEAP32[$62 >> 2] = $6; //@line 12279
   $63 = $ReallocAsyncCtx10 + 32 | 0; //@line 12280
   HEAP32[$63 >> 2] = $21; //@line 12281
   $64 = $ReallocAsyncCtx10 + 36 | 0; //@line 12282
   HEAP32[$64 >> 2] = $8; //@line 12283
   $65 = $ReallocAsyncCtx10 + 40 | 0; //@line 12284
   HEAP32[$65 >> 2] = $22; //@line 12285
   $66 = $ReallocAsyncCtx10 + 44 | 0; //@line 12286
   HEAP32[$66 >> 2] = $23; //@line 12287
   $67 = $ReallocAsyncCtx10 + 48 | 0; //@line 12288
   HEAP32[$67 >> 2] = $24; //@line 12289
   $68 = $ReallocAsyncCtx10 + 52 | 0; //@line 12290
   HEAP32[$68 >> 2] = $25; //@line 12291
   $69 = $ReallocAsyncCtx10 + 56 | 0; //@line 12292
   HEAP32[$69 >> 2] = $26; //@line 12293
   $70 = $ReallocAsyncCtx10 + 60 | 0; //@line 12294
   HEAP32[$70 >> 2] = $27; //@line 12295
   $71 = $ReallocAsyncCtx10 + 64 | 0; //@line 12296
   HEAP32[$71 >> 2] = $10; //@line 12297
   $72 = $ReallocAsyncCtx10 + 68 | 0; //@line 12298
   HEAP32[$72 >> 2] = $12; //@line 12299
   $73 = $ReallocAsyncCtx10 + 72 | 0; //@line 12300
   HEAP32[$73 >> 2] = $28; //@line 12301
   $74 = $ReallocAsyncCtx10 + 76 | 0; //@line 12302
   HEAP32[$74 >> 2] = $14; //@line 12303
   sp = STACKTOP; //@line 12304
   STACKTOP = sp; //@line 12305
   return;
  }
 } else {
  $$2 = $AsyncRetVal; //@line 12308
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 12310
 __ZN9UDPSocketD2Ev($2); //@line 12311
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 94; //@line 12314
  $76 = $ReallocAsyncCtx11 + 4 | 0; //@line 12315
  HEAP32[$76 >> 2] = $4; //@line 12316
  $77 = $ReallocAsyncCtx11 + 8 | 0; //@line 12317
  HEAP32[$77 >> 2] = $$2; //@line 12318
  sp = STACKTOP; //@line 12319
  STACKTOP = sp; //@line 12320
  return;
 }
 ___async_unwind = 0; //@line 12322
 HEAP32[$ReallocAsyncCtx11 >> 2] = 94; //@line 12323
 $76 = $ReallocAsyncCtx11 + 4 | 0; //@line 12324
 HEAP32[$76 >> 2] = $4; //@line 12325
 $77 = $ReallocAsyncCtx11 + 8 | 0; //@line 12326
 HEAP32[$77 >> 2] = $$2; //@line 12327
 sp = STACKTOP; //@line 12328
 STACKTOP = sp; //@line 12329
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9932
 STACKTOP = STACKTOP + 32 | 0; //@line 9933
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9933
 $0 = sp; //@line 9934
 _gpio_init_out($0, 50); //@line 9935
 while (1) {
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 9938
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9939
  _wait_ms(150); //@line 9940
  if (___async) {
   label = 3; //@line 9943
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 9946
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 9948
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9949
  _wait_ms(150); //@line 9950
  if (___async) {
   label = 5; //@line 9953
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 9956
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 9958
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9959
  _wait_ms(150); //@line 9960
  if (___async) {
   label = 7; //@line 9963
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 9966
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 9968
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9969
  _wait_ms(150); //@line 9970
  if (___async) {
   label = 9; //@line 9973
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 9976
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 9978
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9979
  _wait_ms(150); //@line 9980
  if (___async) {
   label = 11; //@line 9983
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 9986
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 9988
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9989
  _wait_ms(150); //@line 9990
  if (___async) {
   label = 13; //@line 9993
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 9996
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 9998
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9999
  _wait_ms(150); //@line 10000
  if (___async) {
   label = 15; //@line 10003
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 10006
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 10008
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10009
  _wait_ms(150); //@line 10010
  if (___async) {
   label = 17; //@line 10013
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 10016
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 10018
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10019
  _wait_ms(400); //@line 10020
  if (___async) {
   label = 19; //@line 10023
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 10026
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 10028
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10029
  _wait_ms(400); //@line 10030
  if (___async) {
   label = 21; //@line 10033
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 10036
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 10038
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10039
  _wait_ms(400); //@line 10040
  if (___async) {
   label = 23; //@line 10043
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 10046
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 10048
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10049
  _wait_ms(400); //@line 10050
  if (___async) {
   label = 25; //@line 10053
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10056
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 10058
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10059
  _wait_ms(400); //@line 10060
  if (___async) {
   label = 27; //@line 10063
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10066
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 10068
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10069
  _wait_ms(400); //@line 10070
  if (___async) {
   label = 29; //@line 10073
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10076
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 10078
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10079
  _wait_ms(400); //@line 10080
  if (___async) {
   label = 31; //@line 10083
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10086
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 10088
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10089
  _wait_ms(400); //@line 10090
  if (___async) {
   label = 33; //@line 10093
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10096
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 105; //@line 10100
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 10102
   sp = STACKTOP; //@line 10103
   STACKTOP = sp; //@line 10104
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 106; //@line 10108
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 10110
   sp = STACKTOP; //@line 10111
   STACKTOP = sp; //@line 10112
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 107; //@line 10116
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 10118
   sp = STACKTOP; //@line 10119
   STACKTOP = sp; //@line 10120
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 108; //@line 10124
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 10126
   sp = STACKTOP; //@line 10127
   STACKTOP = sp; //@line 10128
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 109; //@line 10132
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 10134
   sp = STACKTOP; //@line 10135
   STACKTOP = sp; //@line 10136
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 110; //@line 10140
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 10142
   sp = STACKTOP; //@line 10143
   STACKTOP = sp; //@line 10144
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 111; //@line 10148
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 10150
   sp = STACKTOP; //@line 10151
   STACKTOP = sp; //@line 10152
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 112; //@line 10156
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 10158
   sp = STACKTOP; //@line 10159
   STACKTOP = sp; //@line 10160
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 113; //@line 10164
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 10166
   sp = STACKTOP; //@line 10167
   STACKTOP = sp; //@line 10168
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 114; //@line 10172
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 10174
   sp = STACKTOP; //@line 10175
   STACKTOP = sp; //@line 10176
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 115; //@line 10180
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 10182
   sp = STACKTOP; //@line 10183
   STACKTOP = sp; //@line 10184
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 116; //@line 10188
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 10190
   sp = STACKTOP; //@line 10191
   STACKTOP = sp; //@line 10192
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 117; //@line 10196
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 10198
   sp = STACKTOP; //@line 10199
   STACKTOP = sp; //@line 10200
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 118; //@line 10204
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10206
   sp = STACKTOP; //@line 10207
   STACKTOP = sp; //@line 10208
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 119; //@line 10212
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10214
   sp = STACKTOP; //@line 10215
   STACKTOP = sp; //@line 10216
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 120; //@line 10220
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10222
   sp = STACKTOP; //@line 10223
   STACKTOP = sp; //@line 10224
   return;
  }
 }
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 7433
   $$0106$ph = 24; //@line 7433
   label = 4; //@line 7434
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 7438
   $$0106$ph = 53; //@line 7438
   label = 4; //@line 7439
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 7443
   $$0106$ph = 53; //@line 7443
   label = 4; //@line 7444
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 7448
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 7453
   $4 = $0 + 100 | 0; //@line 7454
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 7456
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 7461
     $12 = HEAPU8[$5 >> 0] | 0; //@line 7464
    } else {
     $12 = ___shgetc($0) | 0; //@line 7467
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 7481
      $19 = HEAP32[$3 >> 2] | 0; //@line 7482
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 7487
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 7490
       $$0113 = $18; //@line 7490
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 7494
       $$0113 = $18; //@line 7494
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 7500
      $$0113 = 1; //@line 7500
     }
    }
   } while (0);
   $$0107127 = 0; //@line 7504
   $$1128 = $$0; //@line 7504
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[2938 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 7512
     $$1$lcssa = $$1128; //@line 7512
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 7518
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 7523
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 7526
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 7530
       break;
      }
     } else {
      $$2 = $$1128; //@line 7534
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 7537
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 7540
     $$1128 = $$2; //@line 7540
    } else {
     $$0107$lcssa = $39; //@line 7542
     $$1$lcssa = $$2; //@line 7542
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 7552
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 7557
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 7564
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 7571
        $$3126 = $$1$lcssa; //@line 7571
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[3721 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 7579
          $$5 = $$3126; //@line 7579
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 7585
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 7590
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 7593
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 7597
            break;
           }
          } else {
           $$4 = $$3126; //@line 7601
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 7604
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 7607
          $$3126 = $$4; //@line 7607
         } else {
          $$3110 = $70; //@line 7609
          $$5 = $$4; //@line 7609
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 7614
        $$5 = $$1$lcssa; //@line 7614
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 7619
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 7624
         $80 = HEAPU8[$72 >> 0] | 0; //@line 7627
        } else {
         $80 = ___shgetc($0) | 0; //@line 7630
        }
        if (($80 | 0) == 40) {
         $$4111 = 1; //@line 7634
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 7639
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7644
         $$0114 = nan; //@line 7645
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 7649
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 7654
          $93 = HEAPU8[$85 >> 0] | 0; //@line 7657
         } else {
          $93 = ___shgetc($0) | 0; //@line 7660
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 7677
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 7681
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7685
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7689
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7693
         ___shlim($0, 0); //@line 7694
         $$0114 = 0.0; //@line 7695
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 7700
         break L4;
        } else {
         $$in = $$4111; //@line 7703
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 7706
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7710
         }
         if (!$$in) {
          $$0114 = nan; //@line 7714
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 7725
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 7730
          $126 = HEAPU8[$118 >> 0] | 0; //@line 7733
         } else {
          $126 = ___shgetc($0) | 0; //@line 7736
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7742
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 7748
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7752
          $$6 = 48; //@line 7753
         }
        } else {
         $$6 = $$5; //@line 7756
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7759
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7769
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7772
        ___shlim($0, 0); //@line 7773
        $$0114 = 0.0; //@line 7774
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7783
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7787
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 7793
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7798
      }
      $$1108 = $$1108 + -1 | 0; //@line 7800
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 7813
  }
 } while (0);
 return +$$0114;
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 3247
 $3 = HEAP32[$2 >> 2] | 0; //@line 3248
 $4 = $3 & -8; //@line 3249
 $5 = $0 + $4 | 0; //@line 3250
 $6 = HEAP32[1577] | 0; //@line 3251
 $8 = $3 & 3; //@line 3253
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 3259
 }
 $11 = $5 + 4 | 0; //@line 3262
 $12 = HEAP32[$11 >> 2] | 0; //@line 3263
 if (!($12 & 1)) {
  _abort(); //@line 3267
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 3274
   return $$2 | 0; //@line 3275
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[1693] << 1 >>> 0) {
    $$2 = $0; //@line 3285
    return $$2 | 0; //@line 3286
   }
  }
  $$2 = 0; //@line 3289
  return $$2 | 0; //@line 3290
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 3294
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 3297
   return $$2 | 0; //@line 3298
  }
  $26 = $0 + $1 | 0; //@line 3300
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3304
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 3307
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 3310
  _dispose_chunk($26, $24); //@line 3311
  $$2 = $0; //@line 3312
  return $$2 | 0; //@line 3313
 }
 if ((HEAP32[1579] | 0) == ($5 | 0)) {
  $37 = (HEAP32[1576] | 0) + $4 | 0; //@line 3319
  $39 = $37 - $1 | 0; //@line 3321
  $40 = $0 + $1 | 0; //@line 3322
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 3324
   return $$2 | 0; //@line 3325
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3332
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 3333
  HEAP32[1579] = $40; //@line 3334
  HEAP32[1576] = $39; //@line 3335
  $$2 = $0; //@line 3336
  return $$2 | 0; //@line 3337
 }
 if ((HEAP32[1578] | 0) == ($5 | 0)) {
  $49 = (HEAP32[1575] | 0) + $4 | 0; //@line 3343
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 3346
   return $$2 | 0; //@line 3347
  }
  $51 = $49 - $1 | 0; //@line 3349
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 3352
   $54 = $0 + $49 | 0; //@line 3353
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3357
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 3360
   HEAP32[$54 >> 2] = $51; //@line 3361
   $60 = $54 + 4 | 0; //@line 3362
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 3365
   $storemerge = $53; //@line 3366
   $storemerge4 = $51; //@line 3366
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 3371
   $67 = $0 + $49 + 4 | 0; //@line 3373
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 3376
   $storemerge = 0; //@line 3377
   $storemerge4 = 0; //@line 3377
  }
  HEAP32[1575] = $storemerge4; //@line 3379
  HEAP32[1578] = $storemerge; //@line 3380
  $$2 = $0; //@line 3381
  return $$2 | 0; //@line 3382
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 3387
  return $$2 | 0; //@line 3388
 }
 $73 = ($12 & -8) + $4 | 0; //@line 3391
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 3394
  return $$2 | 0; //@line 3395
 }
 $75 = $73 - $1 | 0; //@line 3397
 $76 = $12 >>> 3; //@line 3398
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 3403
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 3405
   $83 = 6332 + ($76 << 1 << 2) | 0; //@line 3407
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 3412
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 3419
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[1573] = HEAP32[1573] & ~(1 << $76); //@line 3429
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 3435
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 3439
    }
    $96 = $81 + 8 | 0; //@line 3442
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 3446
    } else {
     _abort(); //@line 3448
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 3453
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 3454
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 3457
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 3459
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 3463
     $115 = $114 + 4 | 0; //@line 3464
     $116 = HEAP32[$115 >> 2] | 0; //@line 3465
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 3468
      if (!$118) {
       $$3 = 0; //@line 3471
       break;
      } else {
       $$1272 = $118; //@line 3474
       $$1275 = $114; //@line 3474
      }
     } else {
      $$1272 = $116; //@line 3477
      $$1275 = $115; //@line 3477
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 3480
      $121 = HEAP32[$120 >> 2] | 0; //@line 3481
      if ($121 | 0) {
       $$1272 = $121; //@line 3484
       $$1275 = $120; //@line 3484
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 3487
      $124 = HEAP32[$123 >> 2] | 0; //@line 3488
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 3493
       $$1275 = $123; //@line 3493
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 3498
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 3501
      $$3 = $$1272; //@line 3502
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 3507
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 3510
     }
     $108 = $106 + 12 | 0; //@line 3513
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 3517
     }
     $111 = $103 + 8 | 0; //@line 3520
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 3524
      HEAP32[$111 >> 2] = $106; //@line 3525
      $$3 = $103; //@line 3526
      break;
     } else {
      _abort(); //@line 3529
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 3537
    $130 = 6596 + ($129 << 2) | 0; //@line 3538
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 3543
      if (!$$3) {
       HEAP32[1574] = HEAP32[1574] & ~(1 << $129); //@line 3550
       break L49;
      }
     } else {
      if ((HEAP32[1577] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 3557
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 3565
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[1577] | 0; //@line 3575
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3578
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 3582
    $147 = $5 + 16 | 0; //@line 3583
    $148 = HEAP32[$147 >> 2] | 0; //@line 3584
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 3590
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 3594
       HEAP32[$148 + 24 >> 2] = $$3; //@line 3596
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 3602
    if ($154 | 0) {
     if ((HEAP32[1577] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 3608
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 3612
      HEAP32[$154 + 24 >> 2] = $$3; //@line 3614
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 3626
  $165 = $0 + $73 + 4 | 0; //@line 3628
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 3631
  $$2 = $0; //@line 3632
  return $$2 | 0; //@line 3633
 } else {
  $168 = $0 + $1 | 0; //@line 3635
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3639
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 3642
  $175 = $0 + $73 + 4 | 0; //@line 3644
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 3647
  _dispose_chunk($168, $75); //@line 3648
  $$2 = $0; //@line 3649
  return $$2 | 0; //@line 3650
 }
 return 0; //@line 3652
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$lcssa$i = 0, $10 = 0, $109 = 0, $114 = 0, $115 = 0, $117 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $196 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $45 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $66 = 0, $67 = 0, $70 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $82 = 0, $84 = 0, $85 = 0, $90 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8505
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8507
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8509
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8511
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8513
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8515
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8517
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8519
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8521
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8523
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8525
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8527
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8529
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8531
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8533
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8535
 if (($AsyncRetVal | 0) == -3001) {
  $$355 = -3009; //@line 8538
 } else {
  if (($AsyncRetVal | 0) < 0) {
   $$355 = $AsyncRetVal; //@line 8542
  } else {
   $45 = (HEAPU8[$18 >> 0] | 0) << 8 | (HEAPU8[$20 >> 0] | 0); //@line 8558
   $51 = (HEAPU8[$22 >> 0] | 0) << 8 | (HEAPU8[$24 >> 0] | 0); //@line 8564
   if (((HEAP8[$14 >> 0] & -8) << 24 >> 24 == -128 ? ((HEAPU8[$6 >> 0] | 0) << 8 | (HEAPU8[$12 >> 0] | 0) | 0) == 1 : 0) & (HEAP8[$16 >> 0] & 15) == 0) {
    if (!$45) {
     $196 = $26; //@line 8574
    } else {
     $$093119$i = 0; //@line 8576
     $59 = $26; //@line 8576
     while (1) {
      $58 = HEAP8[$59 >> 0] | 0; //@line 8578
      if (!($58 << 24 >> 24)) {
       $$lcssa$i = $59; //@line 8581
      } else {
       $64 = $59; //@line 8583
       $66 = $58; //@line 8583
       while (1) {
        $67 = $64 + 1 + ($66 & 255) | 0; //@line 8587
        $66 = HEAP8[$67 >> 0] | 0; //@line 8588
        if (!($66 << 24 >> 24)) {
         $$lcssa$i = $67; //@line 8591
         break;
        } else {
         $64 = $67; //@line 8594
        }
       }
      }
      $70 = $$lcssa$i + 5 | 0; //@line 8598
      $$093119$i = $$093119$i + 1 | 0; //@line 8599
      if (($$093119$i | 0) >= ($45 | 0)) {
       $196 = $70; //@line 8604
       break;
      } else {
       $59 = $70; //@line 8602
      }
     }
    }
    if (($4 | 0) != 0 & ($51 | 0) != 0) {
     $$090117$i = $28; //@line 8613
     $$094116$i = 0; //@line 8613
     $$095115$i = 0; //@line 8613
     $74 = $196; //@line 8613
     while (1) {
      $75 = HEAP8[$74 >> 0] | 0; //@line 8616
      do {
       if (!($75 << 24 >> 24)) {
        $90 = $74 + 1 | 0; //@line 8620
       } else {
        $79 = $75 & 255; //@line 8623
        $82 = $74; //@line 8623
        while (1) {
         if ($79 & 192 | 0) {
          label = 12; //@line 8628
          break;
         }
         $84 = $82 + 1 + $79 | 0; //@line 8632
         $85 = HEAP8[$84 >> 0] | 0; //@line 8633
         if (!($85 << 24 >> 24)) {
          label = 14; //@line 8637
          break;
         } else {
          $79 = $85 & 255; //@line 8640
          $82 = $84; //@line 8640
         }
        }
        if ((label | 0) == 12) {
         label = 0; //@line 8644
         $90 = $82 + 2 | 0; //@line 8646
         break;
        } else if ((label | 0) == 14) {
         label = 0; //@line 8650
         $90 = $84 + 1 | 0; //@line 8652
         break;
        }
       }
      } while (0);
      $98 = ((HEAPU8[$90 >> 0] | 0) << 8 | (HEAPU8[$90 + 1 >> 0] | 0)) & 65535; //@line 8665
      $109 = $90 + 10 | 0; //@line 8676
      $114 = (HEAPU8[$90 + 8 >> 0] | 0) << 8 | (HEAPU8[$90 + 9 >> 0] | 0); //@line 8681
      $115 = $114 & 65535; //@line 8682
      $117 = ((HEAPU8[$90 + 2 >> 0] | 0) << 8 | (HEAPU8[$90 + 3 >> 0] | 0) | 0) == 1; //@line 8684
      do {
       if ($98 << 16 >> 16 == 1 & $117 & $115 << 16 >> 16 == 4) {
        HEAP32[$$090117$i >> 2] = 1; //@line 8690
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$109 >> 0] | 0; //@line 8694
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$90 + 11 >> 0] | 0; //@line 8698
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$90 + 12 >> 0] | 0; //@line 8702
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$90 + 13 >> 0] | 0; //@line 8706
        $$0 = $90 + 14 | 0; //@line 8709
        $$1$i = $$090117$i + 20 | 0; //@line 8709
        $$196$i = $$095115$i + 1 | 0; //@line 8709
       } else {
        if ($98 << 16 >> 16 == 28 & $117 & $115 << 16 >> 16 == 16) {
         HEAP32[$$090117$i >> 2] = 2; //@line 8716
         HEAP8[$$090117$i + 4 >> 0] = HEAP8[$109 >> 0] | 0; //@line 8720
         HEAP8[$$090117$i + 5 >> 0] = HEAP8[$90 + 11 >> 0] | 0; //@line 8724
         HEAP8[$$090117$i + 6 >> 0] = HEAP8[$90 + 12 >> 0] | 0; //@line 8728
         HEAP8[$$090117$i + 7 >> 0] = HEAP8[$90 + 13 >> 0] | 0; //@line 8732
         HEAP8[$$090117$i + 8 >> 0] = HEAP8[$90 + 14 >> 0] | 0; //@line 8736
         HEAP8[$$090117$i + 9 >> 0] = HEAP8[$90 + 15 >> 0] | 0; //@line 8740
         HEAP8[$$090117$i + 10 >> 0] = HEAP8[$90 + 16 >> 0] | 0; //@line 8744
         HEAP8[$$090117$i + 11 >> 0] = HEAP8[$90 + 17 >> 0] | 0; //@line 8748
         HEAP8[$$090117$i + 12 >> 0] = HEAP8[$90 + 18 >> 0] | 0; //@line 8752
         HEAP8[$$090117$i + 13 >> 0] = HEAP8[$90 + 19 >> 0] | 0; //@line 8756
         HEAP8[$$090117$i + 14 >> 0] = HEAP8[$90 + 20 >> 0] | 0; //@line 8760
         HEAP8[$$090117$i + 15 >> 0] = HEAP8[$90 + 21 >> 0] | 0; //@line 8764
         HEAP8[$$090117$i + 16 >> 0] = HEAP8[$90 + 22 >> 0] | 0; //@line 8768
         HEAP8[$$090117$i + 17 >> 0] = HEAP8[$90 + 23 >> 0] | 0; //@line 8772
         HEAP8[$$090117$i + 18 >> 0] = HEAP8[$90 + 24 >> 0] | 0; //@line 8776
         HEAP8[$$090117$i + 19 >> 0] = HEAP8[$90 + 25 >> 0] | 0; //@line 8780
         $$0 = $90 + 26 | 0; //@line 8783
         $$1$i = $$090117$i + 20 | 0; //@line 8783
         $$196$i = $$095115$i + 1 | 0; //@line 8783
         break;
        } else {
         $$0 = $109 + $114 | 0; //@line 8787
         $$1$i = $$090117$i; //@line 8787
         $$196$i = $$095115$i; //@line 8787
         break;
        }
       }
      } while (0);
      $$094116$i = $$094116$i + 1 | 0; //@line 8792
      if (!(($$094116$i | 0) < ($51 | 0) & $$196$i >>> 0 < $4 >>> 0)) {
       $$089$i = $$196$i; //@line 8799
       break;
      } else {
       $$090117$i = $$1$i; //@line 8797
       $$095115$i = $$196$i; //@line 8797
       $74 = $$0; //@line 8797
      }
     }
    } else {
     $$089$i = 0; //@line 8804
    }
   } else {
    $$089$i = 0; //@line 8807
   }
   $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 8811
  }
 }
 _free($6); //@line 8814
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 8815
 $190 = __ZN6Socket5closeEv($8) | 0; //@line 8816
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 8819
  $191 = $ReallocAsyncCtx12 + 4 | 0; //@line 8820
  HEAP32[$191 >> 2] = $$355; //@line 8821
  $192 = $ReallocAsyncCtx12 + 8 | 0; //@line 8822
  HEAP32[$192 >> 2] = $10; //@line 8823
  $193 = $ReallocAsyncCtx12 + 12 | 0; //@line 8824
  HEAP32[$193 >> 2] = $2; //@line 8825
  sp = STACKTOP; //@line 8826
  return;
 }
 HEAP32[___async_retval >> 2] = $190; //@line 8830
 ___async_unwind = 0; //@line 8831
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 8832
 $191 = $ReallocAsyncCtx12 + 4 | 0; //@line 8833
 HEAP32[$191 >> 2] = $$355; //@line 8834
 $192 = $ReallocAsyncCtx12 + 8 | 0; //@line 8835
 HEAP32[$192 >> 2] = $10; //@line 8836
 $193 = $ReallocAsyncCtx12 + 12 | 0; //@line 8837
 HEAP32[$193 >> 2] = $2; //@line 8838
 sp = STACKTOP; //@line 8839
 return;
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9371
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9371
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9372
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9373
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9373
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9374
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 9375
 $8 = $6 & 2047; //@line 9377
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 9378
 $11 = $9 & 2047; //@line 9380
 $12 = $3 & -2147483648; //@line 9381
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 9382
 $14 = tempRet0; //@line 9383
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 9389
  } else {
   $18 = ___DOUBLE_BITS_563($1) | 0; //@line 9391
   $20 = tempRet0 & 2147483647; //@line 9393
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 9402
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 9404
    $30 = tempRet0; //@line 9405
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 9421
     $42 = tempRet0; //@line 9422
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 9429
      $49 = $41; //@line 9429
      $50 = $42; //@line 9429
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 9431
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 9432
       $50 = tempRet0; //@line 9433
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 9442
        break;
       } else {
        $$073100 = $48; //@line 9440
       }
      }
     } else {
      $$073$lcssa = 0; //@line 9447
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 9450
     $$174 = $$073$lcssa; //@line 9452
     $87 = $59; //@line 9452
     $88 = tempRet0; //@line 9452
    } else {
     $$174 = $8; //@line 9456
     $87 = $2; //@line 9456
     $88 = $3 & 1048575 | 1048576; //@line 9456
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 9460
     $65 = tempRet0; //@line 9461
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 9468
      $72 = $64; //@line 9468
      $73 = $65; //@line 9468
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 9470
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 9471
       $73 = tempRet0; //@line 9472
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 9481
        break;
       } else {
        $$07194 = $71; //@line 9479
       }
      }
     } else {
      $$071$lcssa = 0; //@line 9486
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 9489
     $$172$ph = $$071$lcssa; //@line 9491
     $89 = $82; //@line 9491
     $90 = tempRet0; //@line 9491
    } else {
     $$172$ph = $11; //@line 9495
     $89 = $4; //@line 9495
     $90 = $5 & 1048575 | 1048576; //@line 9495
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 9498
    $92 = tempRet0; //@line 9499
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 9504
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 9507
      $101 = $92; //@line 9507
      $156 = $97; //@line 9507
      $157 = $87; //@line 9507
      $158 = $88; //@line 9507
      $99 = $91; //@line 9507
      while (1) {
       if ($156) {
        if (($99 | 0) == 0 & ($101 | 0) == 0) {
         break;
        } else {
         $104 = $99; //@line 9516
         $105 = $101; //@line 9516
        }
       } else {
        $104 = $157; //@line 9519
        $105 = $158; //@line 9519
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 9521
       $107 = tempRet0; //@line 9522
       $108 = $$27586 + -1 | 0; //@line 9523
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 9525
       $111 = tempRet0; //@line 9526
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 9531
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 9533
        $101 = $111; //@line 9533
        $156 = $116; //@line 9533
        $157 = $106; //@line 9533
        $158 = $107; //@line 9533
        $99 = $110; //@line 9533
       } else {
        $$275$lcssa = $108; //@line 9535
        $$lcssa = $116; //@line 9535
        $118 = $110; //@line 9535
        $120 = $111; //@line 9535
        $159 = $106; //@line 9535
        $160 = $107; //@line 9535
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 9540
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 9543
      $$lcssa = $97; //@line 9543
      $118 = $91; //@line 9543
      $120 = $92; //@line 9543
      $159 = $87; //@line 9543
      $160 = $88; //@line 9543
     }
    } while (0);
    if ($$lcssa) {
     if (($118 | 0) == 0 & ($120 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 9552
      break;
     } else {
      $123 = $120; //@line 9555
      $125 = $118; //@line 9555
     }
    } else {
     $123 = $160; //@line 9558
     $125 = $159; //@line 9558
    }
    if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 9566
     $130 = $125; //@line 9566
     $131 = $123; //@line 9566
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 9568
      $133 = tempRet0; //@line 9569
      $134 = $$37683 + -1 | 0; //@line 9570
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 9577
       $130 = $132; //@line 9577
       $131 = $133; //@line 9577
      } else {
       $$376$lcssa = $134; //@line 9579
       $141 = $132; //@line 9579
       $142 = $133; //@line 9579
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 9584
     $141 = $125; //@line 9584
     $142 = $123; //@line 9584
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 9588
     $144 = tempRet0; //@line 9589
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 9590
     $153 = $144 | tempRet0; //@line 9594
     $154 = $143 | $145; //@line 9594
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 9597
     $153 = tempRet0; //@line 9599
     $154 = $150; //@line 9599
    }
    HEAP32[tempDoublePtr >> 2] = $154; //@line 9602
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 9602
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 9603
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 9608
  $$070 = $27 / $27; //@line 9610
 }
 return +$$070;
}
function __ZN13SocketAddress14set_ip_addressEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i = 0, $$025$i = 0, $$02537$i = 0, $$026$i = 0, $$02636$i = 0, $$1$1$i = 0, $$1$2$i = 0, $$1$3$i = 0, $$1$i = 0, $$pre$phi$iZ2D = 0, $103 = 0, $110 = 0, $117 = 0, $124 = 0, $130 = 0, $2 = 0, $25 = 0, $33 = 0, $4 = 0, $42 = 0, $52 = 0, $6 = 0, $62 = 0, $65 = 0, $72 = 0, $76 = 0, $82 = 0, $89 = 0, $9 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7265
 STACKTOP = STACKTOP + 48 | 0; //@line 7266
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7266
 $vararg_buffer7 = sp + 24 | 0; //@line 7267
 $vararg_buffer4 = sp + 16 | 0; //@line 7268
 $vararg_buffer1 = sp + 8 | 0; //@line 7269
 $vararg_buffer = sp; //@line 7270
 $2 = sp + 32 | 0; //@line 7271
 HEAP8[$0 >> 0] = 0; //@line 7272
 L1 : do {
  if ($1 | 0) {
   $4 = HEAP8[$1 >> 0] | 0; //@line 7276
   do {
    if ($4 << 24 >> 24) {
     $$016$i = 0; //@line 7280
     $6 = $4; //@line 7280
     while (1) {
      if (!($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10)) {
       $$02537$i = 0; //@line 7287
       $$02636$i = 0; //@line 7287
       $52 = $4; //@line 7287
       break;
      }
      $9 = $$016$i + 1 | 0; //@line 7290
      $6 = HEAP8[$1 + $9 >> 0] | 0; //@line 7292
      if (!($6 << 24 >> 24)) {
       label = 5; //@line 7295
       break;
      } else {
       $$016$i = $9; //@line 7298
      }
     }
     if ((label | 0) == 5) {
      if (($$016$i | 0) <= -1) {
       break;
      }
      if ((HEAP8[$1 + $$016$i >> 0] | 0) == 46) {
       $$02537$i = 0; //@line 7310
       $$02636$i = 0; //@line 7310
       $52 = $4; //@line 7310
      } else {
       break;
      }
     }
     do {
      if (!(($52 + -48 & 255) < 10 | ($52 + -97 & 255) < 6)) {
       switch ($52 << 24 >> 24) {
       case 58:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
        {
         break;
        }
       default:
        {
         break L1;
        }
       }
      }
      $$02636$i = $$02636$i + ($52 << 24 >> 24 == 58 & 1) | 0; //@line 7333
      $$02537$i = $$02537$i + 1 | 0; //@line 7334
      $52 = HEAP8[$1 + $$02537$i >> 0] | 0; //@line 7336
     } while ($52 << 24 >> 24 != 0);
     if (($$02636$i | 0) <= 1) {
      break L1;
     }
     HEAP32[$0 + 40 >> 2] = 2; //@line 7349
     $62 = $0 + 44 | 0; //@line 7350
     $$025$i = 0; //@line 7351
     L17 : while (1) {
      switch (HEAP8[$1 + $$025$i >> 0] | 0) {
      case 0:
       {
        label = 34; //@line 7357
        break L17;
        break;
       }
      case 58:
       {
        $65 = $$025$i + 1 | 0; //@line 7362
        if ((HEAP8[$1 + $65 >> 0] | 0) == 58) {
         label = 33; //@line 7367
         break L17;
        } else {
         $$025$i = $65; //@line 7370
         continue L17;
        }
        break;
       }
      default:
       {
        $$025$i = $$025$i + 1 | 0; //@line 7377
        continue L17;
       }
      }
     }
     if ((label | 0) == 33) {
      $$026$i = __ZL15ipv6_scan_chunkPtPKc($2, $1 + ($$025$i + 2) | 0) | 0; //@line 7386
      $$pre$phi$iZ2D = $2; //@line 7386
     } else if ((label | 0) == 34) {
      $$026$i = 0; //@line 7389
      $$pre$phi$iZ2D = $2; //@line 7389
     }
     $72 = 8 - $$026$i | 0; //@line 7391
     _memmove($2 + ($72 << 1) | 0, $2 | 0, $$026$i << 1 | 0) | 0; //@line 7394
     _memset($2 | 0, 0, $72 << 1 | 0) | 0; //@line 7396
     __ZL15ipv6_scan_chunkPtPKc($$pre$phi$iZ2D, $1) | 0; //@line 7397
     $76 = HEAP16[$$pre$phi$iZ2D >> 1] | 0; //@line 7398
     HEAP8[$62 >> 0] = ($76 & 65535) >>> 8; //@line 7401
     HEAP8[$0 + 45 >> 0] = $76; //@line 7404
     $82 = HEAP16[$2 + 2 >> 1] | 0; //@line 7406
     HEAP8[$0 + 46 >> 0] = ($82 & 65535) >>> 8; //@line 7410
     HEAP8[$0 + 47 >> 0] = $82; //@line 7413
     $89 = HEAP16[$2 + 4 >> 1] | 0; //@line 7415
     HEAP8[$0 + 48 >> 0] = ($89 & 65535) >>> 8; //@line 7419
     HEAP8[$0 + 49 >> 0] = $89; //@line 7422
     $96 = HEAP16[$2 + 6 >> 1] | 0; //@line 7424
     HEAP8[$0 + 50 >> 0] = ($96 & 65535) >>> 8; //@line 7428
     HEAP8[$0 + 51 >> 0] = $96; //@line 7431
     $103 = HEAP16[$2 + 8 >> 1] | 0; //@line 7433
     HEAP8[$0 + 52 >> 0] = ($103 & 65535) >>> 8; //@line 7437
     HEAP8[$0 + 53 >> 0] = $103; //@line 7440
     $110 = HEAP16[$2 + 10 >> 1] | 0; //@line 7442
     HEAP8[$0 + 54 >> 0] = ($110 & 65535) >>> 8; //@line 7446
     HEAP8[$0 + 55 >> 0] = $110; //@line 7449
     $117 = HEAP16[$2 + 12 >> 1] | 0; //@line 7451
     HEAP8[$0 + 56 >> 0] = ($117 & 65535) >>> 8; //@line 7455
     HEAP8[$0 + 57 >> 0] = $117; //@line 7458
     $124 = HEAP16[$2 + 14 >> 1] | 0; //@line 7460
     HEAP8[$0 + 58 >> 0] = ($124 & 65535) >>> 8; //@line 7464
     HEAP8[$0 + 59 >> 0] = $124; //@line 7467
     $$0 = 1; //@line 7468
     STACKTOP = sp; //@line 7469
     return $$0 | 0; //@line 7469
    }
   } while (0);
   HEAP32[$0 + 40 >> 2] = 1; //@line 7473
   HEAP32[$vararg_buffer >> 2] = $2; //@line 7474
   L28 : do {
    if ((_sscanf($1, 2257, $vararg_buffer) | 0) >= 1) {
     HEAP8[$0 + 44 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7481
     $$1$i = 0; //@line 7482
     L30 : while (1) {
      switch (HEAP8[$1 + $$1$i >> 0] | 0) {
      case 0:
       {
        break L28;
        break;
       }
      case 46:
       {
        break L30;
        break;
       }
      default:
       {}
      }
      $$1$i = $$1$i + 1 | 0; //@line 7499
     }
     $25 = $$1$i + 1 | 0; //@line 7501
     HEAP32[$vararg_buffer1 >> 2] = $2; //@line 7503
     if ((_sscanf($1 + $25 | 0, 2257, $vararg_buffer1) | 0) >= 1) {
      HEAP8[$0 + 45 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7509
      $$1$1$i = $25; //@line 7510
      L35 : while (1) {
       switch (HEAP8[$1 + $$1$1$i >> 0] | 0) {
       case 0:
        {
         break L28;
         break;
        }
       case 46:
        {
         break L35;
         break;
        }
       default:
        {}
       }
       $$1$1$i = $$1$1$i + 1 | 0; //@line 7527
      }
      $33 = $$1$1$i + 1 | 0; //@line 7529
      HEAP32[$vararg_buffer4 >> 2] = $2; //@line 7531
      if ((_sscanf($1 + $33 | 0, 2257, $vararg_buffer4) | 0) >= 1) {
       HEAP8[$0 + 46 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7537
       $$1$2$i = $33; //@line 7538
       L40 : while (1) {
        switch (HEAP8[$1 + $$1$2$i >> 0] | 0) {
        case 0:
         {
          break L28;
          break;
         }
        case 46:
         {
          break L40;
          break;
         }
        default:
         {}
        }
        $$1$2$i = $$1$2$i + 1 | 0; //@line 7555
       }
       $42 = $$1$2$i + 1 | 0; //@line 7557
       HEAP32[$vararg_buffer7 >> 2] = $2; //@line 7559
       if ((_sscanf($1 + $42 | 0, 2257, $vararg_buffer7) | 0) >= 1) {
        HEAP8[$0 + 47 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7565
        $$1$3$i = $42; //@line 7566
        L45 : while (1) {
         switch (HEAP8[$1 + $$1$3$i >> 0] | 0) {
         case 0:
          {
           break L28;
           break;
          }
         case 46:
          {
           break L45;
           break;
          }
         default:
          {}
         }
         $$1$3$i = $$1$3$i + 1 | 0; //@line 7583
        }
        $$0 = 1; //@line 7585
        STACKTOP = sp; //@line 7586
        return $$0 | 0; //@line 7586
       }
      }
     }
    }
   } while (0);
   $$0 = 1; //@line 7592
   STACKTOP = sp; //@line 7593
   return $$0 | 0; //@line 7593
  }
 } while (0);
 $130 = $0 + 40 | 0; //@line 7596
 HEAP32[$130 >> 2] = 0; //@line 7597
 HEAP32[$130 + 4 >> 2] = 0; //@line 7597
 HEAP32[$130 + 8 >> 2] = 0; //@line 7597
 HEAP32[$130 + 12 >> 2] = 0; //@line 7597
 HEAP32[$130 + 16 >> 2] = 0; //@line 7597
 $$0 = 0; //@line 7598
 STACKTOP = sp; //@line 7599
 return $$0 | 0; //@line 7599
}
function __Z17recv_coap_messagev__async_cb_68($0) {
 $0 = $0 | 0;
 var $$017$i$i = 0, $$pre$phi23Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13824
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13826
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13828
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13830
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13832
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13834
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13836
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13838
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13840
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13842
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13844
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13846
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13848
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13850
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13852
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13854
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13856
 $33 = HEAP32[$AsyncRetVal + 36 >> 2] | 0; //@line 13858
 $34 = $AsyncRetVal + 24 | 0; //@line 13859
 $35 = HEAP16[$34 >> 1] | 0; //@line 13860
 $36 = $35 & 65535; //@line 13861
 HEAP32[$2 >> 2] = 0; //@line 13862
 HEAP32[$2 + 4 >> 2] = 0; //@line 13862
 HEAP32[$2 + 8 >> 2] = 0; //@line 13862
 if (($35 & 65535) >= 11) {
  $39 = $36 + 16 & 131056; //@line 13866
  $ReallocAsyncCtx = _emscripten_realloc_async_context(88) | 0; //@line 13867
  $40 = __Znwj($39) | 0; //@line 13868
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 13871
   $41 = $ReallocAsyncCtx + 4 | 0; //@line 13872
   HEAP32[$41 >> 2] = $2; //@line 13873
   $42 = $ReallocAsyncCtx + 8 | 0; //@line 13874
   HEAP32[$42 >> 2] = $39; //@line 13875
   $43 = $ReallocAsyncCtx + 12 | 0; //@line 13876
   HEAP32[$43 >> 2] = $36; //@line 13877
   $44 = $ReallocAsyncCtx + 16 | 0; //@line 13878
   HEAP32[$44 >> 2] = $33; //@line 13879
   $45 = $ReallocAsyncCtx + 20 | 0; //@line 13880
   HEAP32[$45 >> 2] = $AsyncRetVal; //@line 13881
   $46 = $ReallocAsyncCtx + 24 | 0; //@line 13882
   HEAP32[$46 >> 2] = $4; //@line 13883
   $47 = $ReallocAsyncCtx + 28 | 0; //@line 13884
   HEAP32[$47 >> 2] = $6; //@line 13885
   $48 = $ReallocAsyncCtx + 32 | 0; //@line 13886
   HEAP32[$48 >> 2] = $8; //@line 13887
   $49 = $ReallocAsyncCtx + 36 | 0; //@line 13888
   HEAP32[$49 >> 2] = $10; //@line 13889
   $50 = $ReallocAsyncCtx + 40 | 0; //@line 13890
   HEAP32[$50 >> 2] = $12; //@line 13891
   $51 = $ReallocAsyncCtx + 44 | 0; //@line 13892
   HEAP32[$51 >> 2] = $14; //@line 13893
   $52 = $ReallocAsyncCtx + 48 | 0; //@line 13894
   HEAP32[$52 >> 2] = $34; //@line 13895
   $53 = $ReallocAsyncCtx + 52 | 0; //@line 13896
   HEAP32[$53 >> 2] = $16; //@line 13897
   $54 = $ReallocAsyncCtx + 56 | 0; //@line 13898
   HEAP32[$54 >> 2] = $18; //@line 13899
   $55 = $ReallocAsyncCtx + 60 | 0; //@line 13900
   HEAP32[$55 >> 2] = $2; //@line 13901
   $56 = $ReallocAsyncCtx + 64 | 0; //@line 13902
   HEAP32[$56 >> 2] = $20; //@line 13903
   $57 = $ReallocAsyncCtx + 68 | 0; //@line 13904
   HEAP32[$57 >> 2] = $22; //@line 13905
   $58 = $ReallocAsyncCtx + 72 | 0; //@line 13906
   HEAP32[$58 >> 2] = $24; //@line 13907
   $59 = $ReallocAsyncCtx + 76 | 0; //@line 13908
   HEAP32[$59 >> 2] = $26; //@line 13909
   $60 = $ReallocAsyncCtx + 80 | 0; //@line 13910
   HEAP32[$60 >> 2] = $28; //@line 13911
   $61 = $ReallocAsyncCtx + 84 | 0; //@line 13912
   HEAP32[$61 >> 2] = $30; //@line 13913
   sp = STACKTOP; //@line 13914
   return;
  }
  HEAP32[___async_retval >> 2] = $40; //@line 13918
  ___async_unwind = 0; //@line 13919
  HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 13920
  $41 = $ReallocAsyncCtx + 4 | 0; //@line 13921
  HEAP32[$41 >> 2] = $2; //@line 13922
  $42 = $ReallocAsyncCtx + 8 | 0; //@line 13923
  HEAP32[$42 >> 2] = $39; //@line 13924
  $43 = $ReallocAsyncCtx + 12 | 0; //@line 13925
  HEAP32[$43 >> 2] = $36; //@line 13926
  $44 = $ReallocAsyncCtx + 16 | 0; //@line 13927
  HEAP32[$44 >> 2] = $33; //@line 13928
  $45 = $ReallocAsyncCtx + 20 | 0; //@line 13929
  HEAP32[$45 >> 2] = $AsyncRetVal; //@line 13930
  $46 = $ReallocAsyncCtx + 24 | 0; //@line 13931
  HEAP32[$46 >> 2] = $4; //@line 13932
  $47 = $ReallocAsyncCtx + 28 | 0; //@line 13933
  HEAP32[$47 >> 2] = $6; //@line 13934
  $48 = $ReallocAsyncCtx + 32 | 0; //@line 13935
  HEAP32[$48 >> 2] = $8; //@line 13936
  $49 = $ReallocAsyncCtx + 36 | 0; //@line 13937
  HEAP32[$49 >> 2] = $10; //@line 13938
  $50 = $ReallocAsyncCtx + 40 | 0; //@line 13939
  HEAP32[$50 >> 2] = $12; //@line 13940
  $51 = $ReallocAsyncCtx + 44 | 0; //@line 13941
  HEAP32[$51 >> 2] = $14; //@line 13942
  $52 = $ReallocAsyncCtx + 48 | 0; //@line 13943
  HEAP32[$52 >> 2] = $34; //@line 13944
  $53 = $ReallocAsyncCtx + 52 | 0; //@line 13945
  HEAP32[$53 >> 2] = $16; //@line 13946
  $54 = $ReallocAsyncCtx + 56 | 0; //@line 13947
  HEAP32[$54 >> 2] = $18; //@line 13948
  $55 = $ReallocAsyncCtx + 60 | 0; //@line 13949
  HEAP32[$55 >> 2] = $2; //@line 13950
  $56 = $ReallocAsyncCtx + 64 | 0; //@line 13951
  HEAP32[$56 >> 2] = $20; //@line 13952
  $57 = $ReallocAsyncCtx + 68 | 0; //@line 13953
  HEAP32[$57 >> 2] = $22; //@line 13954
  $58 = $ReallocAsyncCtx + 72 | 0; //@line 13955
  HEAP32[$58 >> 2] = $24; //@line 13956
  $59 = $ReallocAsyncCtx + 76 | 0; //@line 13957
  HEAP32[$59 >> 2] = $26; //@line 13958
  $60 = $ReallocAsyncCtx + 80 | 0; //@line 13959
  HEAP32[$60 >> 2] = $28; //@line 13960
  $61 = $ReallocAsyncCtx + 84 | 0; //@line 13961
  HEAP32[$61 >> 2] = $30; //@line 13962
  sp = STACKTOP; //@line 13963
  return;
 }
 $64 = $2 + 11 | 0; //@line 13967
 HEAP8[$64 >> 0] = $35; //@line 13968
 if (!($35 << 16 >> 16)) {
  $$017$i$i = $2; //@line 13971
  $$pre$phi23Z2D = $64; //@line 13971
 } else {
  _memcpy($2 | 0, $33 | 0, $36 | 0) | 0; //@line 13973
  $$017$i$i = $2; //@line 13974
  $$pre$phi23Z2D = $64; //@line 13974
 }
 HEAP8[$$017$i$i + $36 >> 0] = 0; //@line 13977
 HEAP32[$4 >> 2] = HEAPU16[$AsyncRetVal + 20 >> 1]; //@line 13981
 _printf(2567, $4) | 0; //@line 13982
 HEAP32[$8 >> 2] = HEAP32[$AsyncRetVal + 8 >> 2]; //@line 13985
 _printf(2590, $8) | 0; //@line 13986
 HEAP32[$12 >> 2] = HEAP32[$AsyncRetVal + 16 >> 2]; //@line 13989
 _printf(2613, $12) | 0; //@line 13990
 HEAP32[$16 >> 2] = HEAPU16[$34 >> 1]; //@line 13993
 _printf(2636, $16) | 0; //@line 13994
 HEAP32[$20 >> 2] = (HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2; //@line 13999
 _printf(2659, $20) | 0; //@line 14000
 HEAP32[$24 >> 2] = HEAP32[$AsyncRetVal + 40 >> 2]; //@line 14003
 _printf(2682, $24) | 0; //@line 14004
 if ((HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 14009
 }
 _free($28); //@line 14011
 return;
}
function _main() {
 var $$0 = 0, $0 = 0, $12 = 0, $13 = 0, $19 = 0, $25 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 10667
 STACKTOP = STACKTOP + 880 | 0; //@line 10668
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(880); //@line 10668
 $vararg_buffer1 = sp + 8 | 0; //@line 10669
 $vararg_buffer = sp; //@line 10670
 $0 = sp + 16 | 0; //@line 10671
 __ZN17EthernetInterfaceC2Ev($0); //@line 10672
 if (__ZN17EthernetInterface7connectEv($0) | 0) {
  $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10676
  _puts(2737) | 0; //@line 10677
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 130; //@line 10680
   HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 10682
   sp = STACKTOP; //@line 10683
   STACKTOP = sp; //@line 10684
   return 0; //@line 10684
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 10686
  $$0 = 1; //@line 10687
  STACKTOP = sp; //@line 10688
  return $$0 | 0; //@line 10688
 }
 $AsyncCtx13 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10690
 _puts(2786) | 0; //@line 10691
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 131; //@line 10694
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 10696
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 10698
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 10700
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 10702
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 10704
  HEAP32[$AsyncCtx13 + 24 >> 2] = $0; //@line 10706
  sp = STACKTOP; //@line 10707
  STACKTOP = sp; //@line 10708
  return 0; //@line 10708
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10710
 $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 10713
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 10714
 $13 = FUNCTION_TABLE_ii[$12 & 15]($0) | 0; //@line 10715
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 132; //@line 10718
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 10720
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 10722
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 10724
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 10726
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 10728
  sp = STACKTOP; //@line 10729
  STACKTOP = sp; //@line 10730
  return 0; //@line 10730
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10732
 $19 = __Z18nsapi_create_stackP12NetworkStack($13) | 0; //@line 10733
 $AsyncCtx24 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10734
 __ZN6Socket4openEP12NetworkStack(6232, $19) | 0; //@line 10735
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 133; //@line 10738
  HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer; //@line 10740
  HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer; //@line 10742
  HEAP32[$AsyncCtx24 + 12 >> 2] = $vararg_buffer1; //@line 10744
  HEAP32[$AsyncCtx24 + 16 >> 2] = $vararg_buffer1; //@line 10746
  HEAP32[$AsyncCtx24 + 20 >> 2] = $0; //@line 10748
  sp = STACKTOP; //@line 10749
  STACKTOP = sp; //@line 10750
  return 0; //@line 10750
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10752
 $AsyncCtx27 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10753
 $25 = _sn_coap_protocol_init(12, 134, 10, 14) | 0; //@line 10754
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 135; //@line 10757
  HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer; //@line 10759
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 10761
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 10763
  HEAP32[$AsyncCtx27 + 16 >> 2] = $vararg_buffer1; //@line 10765
  HEAP32[$AsyncCtx27 + 20 >> 2] = $0; //@line 10767
  sp = STACKTOP; //@line 10768
  STACKTOP = sp; //@line 10769
  return 0; //@line 10769
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 10771
 HEAP32[1572] = $25; //@line 10772
 $31 = _calloc(44, 1) | 0; //@line 10773
 HEAP32[$31 + 32 >> 2] = 2832; //@line 10775
 HEAP16[$31 + 22 >> 1] = 6; //@line 10777
 HEAP32[$31 + 8 >> 2] = 1; //@line 10779
 HEAP16[$31 + 20 >> 1] = 7; //@line 10781
 $37 = (_sn_coap_builder_calc_needed_packet_data_size($31) | 0) & 65535; //@line 10783
 HEAP32[$vararg_buffer >> 2] = $37; //@line 10784
 _printf(2839, $vararg_buffer) | 0; //@line 10785
 $38 = _malloc($37) | 0; //@line 10786
 _sn_coap_builder($38, $31) | 0; //@line 10787
 $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10788
 $39 = __ZN9UDPSocket6sendtoEPKctPKvj(6232, 2876, 5683, $38, $37) | 0; //@line 10789
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 136; //@line 10792
  HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 10794
  HEAP32[$AsyncCtx20 + 8 >> 2] = $vararg_buffer1; //@line 10796
  HEAP32[$AsyncCtx20 + 12 >> 2] = $31; //@line 10798
  HEAP32[$AsyncCtx20 + 16 >> 2] = $38; //@line 10800
  HEAP32[$AsyncCtx20 + 20 >> 2] = $0; //@line 10802
  sp = STACKTOP; //@line 10803
  STACKTOP = sp; //@line 10804
  return 0; //@line 10804
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 10806
 HEAP32[$vararg_buffer1 >> 2] = $39; //@line 10807
 HEAP32[$vararg_buffer1 + 4 >> 2] = 2832; //@line 10809
 _printf(2884, $vararg_buffer1) | 0; //@line 10810
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10811
 __Z17recv_coap_messagev(); //@line 10812
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 137; //@line 10815
  HEAP32[$AsyncCtx6 + 4 >> 2] = $31; //@line 10817
  HEAP32[$AsyncCtx6 + 8 >> 2] = $38; //@line 10819
  HEAP32[$AsyncCtx6 + 12 >> 2] = $0; //@line 10821
  sp = STACKTOP; //@line 10822
  STACKTOP = sp; //@line 10823
  return 0; //@line 10823
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10825
 _free($31); //@line 10826
 _free($38); //@line 10827
 $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10828
 _puts(2932) | 0; //@line 10829
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 138; //@line 10832
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 10834
  sp = STACKTOP; //@line 10835
  STACKTOP = sp; //@line 10836
  return 0; //@line 10836
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10838
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10839
 _wait(4294967296.0); //@line 10840
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 139; //@line 10843
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 10845
  sp = STACKTOP; //@line 10846
  STACKTOP = sp; //@line 10847
  return 0; //@line 10847
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 10849
 $$0 = 0; //@line 10850
 STACKTOP = sp; //@line 10851
 return $$0 | 0; //@line 10851
}
function __ZN6Socket4openEP12NetworkStack($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6831
 STACKTOP = STACKTOP + 32 | 0; //@line 6832
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6832
 $2 = sp + 16 | 0; //@line 6833
 $3 = sp; //@line 6834
 $4 = $0 + 4 | 0; //@line 6835
 if (($1 | 0) == 0 | (HEAP32[$4 >> 2] | 0) != 0) {
  $$1 = -3003; //@line 6841
  STACKTOP = sp; //@line 6842
  return $$1 | 0; //@line 6842
 }
 HEAP32[$4 >> 2] = $1; //@line 6844
 $10 = HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] | 0; //@line 6847
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 6850
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 6851
 $14 = FUNCTION_TABLE_ii[$13 & 15]($0) | 0; //@line 6852
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 68; //@line 6855
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6857
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6859
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 6861
  HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6863
  HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 6865
  HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 6867
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 6869
  sp = STACKTOP; //@line 6870
  STACKTOP = sp; //@line 6871
  return 0; //@line 6871
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6873
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6874
 $22 = FUNCTION_TABLE_iiii[$10 & 15]($1, $2, $14) | 0; //@line 6875
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 69; //@line 6878
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 6880
  HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 6882
  HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 6884
  HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 6886
  HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 6888
  sp = STACKTOP; //@line 6889
  STACKTOP = sp; //@line 6890
  return 0; //@line 6890
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6892
 do {
  if (!$22) {
   $30 = $0 + 8 | 0; //@line 6897
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 6898
   $31 = $3 + 12 | 0; //@line 6899
   HEAP32[$3 >> 2] = 12; //@line 6900
   HEAP32[$3 + 4 >> 2] = 1; //@line 6902
   HEAP32[$3 + 8 >> 2] = $0; //@line 6904
   HEAP32[$31 >> 2] = 420; //@line 6905
   $32 = $0 + 16 | 0; //@line 6906
   do {
    if (($32 | 0) == ($3 | 0)) {
     $60 = 420; //@line 6910
     label = 16; //@line 6911
    } else {
     $34 = $0 + 28 | 0; //@line 6913
     $35 = HEAP32[$34 >> 2] | 0; //@line 6914
     if (!$35) {
      $48 = 420; //@line 6917
     } else {
      $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 6920
      $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6921
      FUNCTION_TABLE_vi[$38 & 255]($32); //@line 6922
      if (___async) {
       HEAP32[$AsyncCtx5 >> 2] = 70; //@line 6925
       HEAP32[$AsyncCtx5 + 4 >> 2] = $31; //@line 6927
       HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 6929
       HEAP32[$AsyncCtx5 + 12 >> 2] = $32; //@line 6931
       HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 6933
       HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 6935
       HEAP32[$AsyncCtx5 + 24 >> 2] = $30; //@line 6937
       HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 6939
       sp = STACKTOP; //@line 6940
       STACKTOP = sp; //@line 6941
       return 0; //@line 6941
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6943
      $$pre = HEAP32[$31 >> 2] | 0; //@line 6944
      if (!$$pre) {
       HEAP32[$34 >> 2] = 0; //@line 6947
       break;
      } else {
       $48 = $$pre; //@line 6950
      }
     }
     $49 = HEAP32[$48 + 4 >> 2] | 0; //@line 6954
     $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6955
     FUNCTION_TABLE_vii[$49 & 3]($32, $3); //@line 6956
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 71; //@line 6959
      HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 6961
      HEAP32[$AsyncCtx8 + 8 >> 2] = $34; //@line 6963
      HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 6965
      HEAP32[$AsyncCtx8 + 16 >> 2] = $4; //@line 6967
      HEAP32[$AsyncCtx8 + 20 >> 2] = $30; //@line 6969
      HEAP32[$AsyncCtx8 + 24 >> 2] = $32; //@line 6971
      HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 6973
      sp = STACKTOP; //@line 6974
      STACKTOP = sp; //@line 6975
      return 0; //@line 6975
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6977
      $$pre$i$i = HEAP32[$31 >> 2] | 0; //@line 6978
      HEAP32[$34 >> 2] = $$pre$i$i; //@line 6980
      if (!$$pre$i$i) {
       break;
      } else {
       $60 = $$pre$i$i; //@line 6985
       label = 16; //@line 6986
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 16) {
     $61 = HEAP32[$60 + 8 >> 2] | 0; //@line 6995
     $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6996
     FUNCTION_TABLE_vi[$61 & 255]($3); //@line 6997
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 72; //@line 7000
      HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 7002
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 7004
      HEAP32[$AsyncCtx11 + 12 >> 2] = $30; //@line 7006
      HEAP32[$AsyncCtx11 + 16 >> 2] = $32; //@line 7008
      HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 7010
      sp = STACKTOP; //@line 7011
      STACKTOP = sp; //@line 7012
      return 0; //@line 7012
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 7014
      break;
     }
    }
   } while (0);
   $67 = HEAP32[$4 >> 2] | 0; //@line 7019
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 68 >> 2] | 0; //@line 7022
   $71 = HEAP32[$30 >> 2] | 0; //@line 7023
   $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7024
   FUNCTION_TABLE_viiii[$70 & 7]($67, $71, 73, $32); //@line 7025
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 74; //@line 7028
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 7030
    sp = STACKTOP; //@line 7031
    STACKTOP = sp; //@line 7032
    return 0; //@line 7032
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 7034
    $$0 = 0; //@line 7035
    break;
   }
  } else {
   $$0 = $22; //@line 7039
  }
 } while (0);
 $$1 = $$0; //@line 7042
 STACKTOP = sp; //@line 7043
 return $$1 | 0; //@line 7043
}
function __ZL15ipv6_scan_chunkPtPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$ph = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $$124$4 = 0, $$124$5 = 0, $$124$6 = 0, $$124$7 = 0, $$2 = 0, $17 = 0, $2 = 0, $26 = 0, $35 = 0, $44 = 0, $53 = 0, $62 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 7609
 STACKTOP = STACKTOP + 64 | 0; //@line 7610
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 7610
 $vararg_buffer19 = sp + 56 | 0; //@line 7611
 $vararg_buffer16 = sp + 48 | 0; //@line 7612
 $vararg_buffer13 = sp + 40 | 0; //@line 7613
 $vararg_buffer10 = sp + 32 | 0; //@line 7614
 $vararg_buffer7 = sp + 24 | 0; //@line 7615
 $vararg_buffer4 = sp + 16 | 0; //@line 7616
 $vararg_buffer1 = sp + 8 | 0; //@line 7617
 $vararg_buffer = sp; //@line 7618
 $2 = sp + 60 | 0; //@line 7619
 HEAP32[$vararg_buffer >> 2] = $2; //@line 7620
 L1 : do {
  if ((_sscanf($1, 2262, $vararg_buffer) | 0) < 1) {
   $$1$ph = 0; //@line 7625
  } else {
   HEAP16[$0 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7628
   $$124 = 0; //@line 7629
   L3 : while (1) {
    switch (HEAP8[$1 + $$124 >> 0] | 0) {
    case 0:
     {
      $$1$ph = 1; //@line 7635
      break L1;
      break;
     }
    case 58:
     {
      break L3;
      break;
     }
    default:
     {}
    }
    $$124 = $$124 + 1 | 0; //@line 7647
   }
   $9 = $$124 + 1 | 0; //@line 7649
   HEAP32[$vararg_buffer1 >> 2] = $2; //@line 7651
   if ((_sscanf($1 + $9 | 0, 2262, $vararg_buffer1) | 0) < 1) {
    $$1$ph = 1; //@line 7655
   } else {
    HEAP16[$0 + 2 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7659
    $$124$1 = $9; //@line 7660
    L8 : while (1) {
     switch (HEAP8[$1 + $$124$1 >> 0] | 0) {
     case 0:
      {
       $$1$ph = 2; //@line 7666
       break L1;
       break;
      }
     case 58:
      {
       break L8;
       break;
      }
     default:
      {}
     }
     $$124$1 = $$124$1 + 1 | 0; //@line 7678
    }
    $17 = $$124$1 + 1 | 0; //@line 7680
    HEAP32[$vararg_buffer4 >> 2] = $2; //@line 7682
    if ((_sscanf($1 + $17 | 0, 2262, $vararg_buffer4) | 0) < 1) {
     $$1$ph = 2; //@line 7686
    } else {
     HEAP16[$0 + 4 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7690
     $$124$2 = $17; //@line 7691
     L13 : while (1) {
      switch (HEAP8[$1 + $$124$2 >> 0] | 0) {
      case 0:
       {
        $$1$ph = 3; //@line 7697
        break L1;
        break;
       }
      case 58:
       {
        break L13;
        break;
       }
      default:
       {}
      }
      $$124$2 = $$124$2 + 1 | 0; //@line 7709
     }
     $26 = $$124$2 + 1 | 0; //@line 7711
     HEAP32[$vararg_buffer7 >> 2] = $2; //@line 7713
     if ((_sscanf($1 + $26 | 0, 2262, $vararg_buffer7) | 0) < 1) {
      $$1$ph = 3; //@line 7717
     } else {
      HEAP16[$0 + 6 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7721
      $$124$3 = $26; //@line 7722
      L18 : while (1) {
       switch (HEAP8[$1 + $$124$3 >> 0] | 0) {
       case 0:
        {
         $$1$ph = 4; //@line 7728
         break L1;
         break;
        }
       case 58:
        {
         break L18;
         break;
        }
       default:
        {}
       }
       $$124$3 = $$124$3 + 1 | 0; //@line 7740
      }
      $35 = $$124$3 + 1 | 0; //@line 7742
      HEAP32[$vararg_buffer10 >> 2] = $2; //@line 7744
      if ((_sscanf($1 + $35 | 0, 2262, $vararg_buffer10) | 0) < 1) {
       $$1$ph = 4; //@line 7748
      } else {
       HEAP16[$0 + 8 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7752
       $$124$4 = $35; //@line 7753
       L23 : while (1) {
        switch (HEAP8[$1 + $$124$4 >> 0] | 0) {
        case 0:
         {
          $$1$ph = 5; //@line 7759
          break L1;
          break;
         }
        case 58:
         {
          break L23;
          break;
         }
        default:
         {}
        }
        $$124$4 = $$124$4 + 1 | 0; //@line 7771
       }
       $44 = $$124$4 + 1 | 0; //@line 7773
       HEAP32[$vararg_buffer13 >> 2] = $2; //@line 7775
       if ((_sscanf($1 + $44 | 0, 2262, $vararg_buffer13) | 0) < 1) {
        $$1$ph = 5; //@line 7779
       } else {
        HEAP16[$0 + 10 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7783
        $$124$5 = $44; //@line 7784
        L28 : while (1) {
         switch (HEAP8[$1 + $$124$5 >> 0] | 0) {
         case 0:
          {
           $$1$ph = 6; //@line 7790
           break L1;
           break;
          }
         case 58:
          {
           break L28;
           break;
          }
         default:
          {}
         }
         $$124$5 = $$124$5 + 1 | 0; //@line 7802
        }
        $53 = $$124$5 + 1 | 0; //@line 7804
        HEAP32[$vararg_buffer16 >> 2] = $2; //@line 7806
        if ((_sscanf($1 + $53 | 0, 2262, $vararg_buffer16) | 0) < 1) {
         $$1$ph = 6; //@line 7810
        } else {
         HEAP16[$0 + 12 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7814
         $$124$6 = $53; //@line 7815
         L33 : while (1) {
          switch (HEAP8[$1 + $$124$6 >> 0] | 0) {
          case 0:
           {
            $$1$ph = 7; //@line 7821
            break L1;
            break;
           }
          case 58:
           {
            break L33;
            break;
           }
          default:
           {}
          }
          $$124$6 = $$124$6 + 1 | 0; //@line 7833
         }
         $62 = $$124$6 + 1 | 0; //@line 7835
         HEAP32[$vararg_buffer19 >> 2] = $2; //@line 7837
         if ((_sscanf($1 + $62 | 0, 2262, $vararg_buffer19) | 0) < 1) {
          $$1$ph = 7; //@line 7841
         } else {
          HEAP16[$0 + 14 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7845
          $$124$7 = $62; //@line 7846
          L38 : while (1) {
           switch (HEAP8[$1 + $$124$7 >> 0] | 0) {
           case 0:
            {
             $$1$ph = 8; //@line 7852
             break L1;
             break;
            }
           case 58:
            {
             break L38;
             break;
            }
           default:
            {}
           }
           $$124$7 = $$124$7 + 1 | 0; //@line 7864
          }
          $$2 = 8; //@line 7866
          STACKTOP = sp; //@line 7867
          return $$2 | 0; //@line 7867
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 $$2 = $$1$ph; //@line 7877
 STACKTOP = sp; //@line 7878
 return $$2 | 0; //@line 7878
}
function _sn_coap_parser_options_parse_multiple_options__async_cb($0) {
 $0 = $0 | 0;
 var $$06378 = 0, $$06378$us = 0, $$064 = 0, $$065$be$in = 0, $$065$be$us$in = 0, $$06577 = 0, $$06577$us = 0, $$080 = 0, $$080$us = 0, $$1 = 0, $$1$us = 0, $$sink = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $29 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $52 = 0, $57 = 0, $6 = 0, $61 = 0, $63 = 0, $66 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $8 = 0, $80 = 0, $85 = 0, $87 = 0, $96 = 0, $AsyncRetVal = 0, $trunc = 0, $trunc110 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15525
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15527
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 15529
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15531
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15533
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 15535
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15537
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15539
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15541
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 15542
 if (!$AsyncRetVal) {
  $$064 = -1; //@line 15545
  $96 = ___async_retval; //@line 15546
  HEAP8[$96 >> 0] = $$064; //@line 15547
  return;
 }
 HEAP16[$14 >> 1] = $12; //@line 15550
 $19 = HEAP32[$10 >> 2] | 0; //@line 15551
 if (($16 | 0) <= 0) {
  $$064 = 0; //@line 15554
  $96 = ___async_retval; //@line 15555
  HEAP8[$96 >> 0] = $$064; //@line 15556
  return;
 }
 if (($8 | 0) == 20) {
  $$06378$us = $19; //@line 15561
  $$06577$us = $6; //@line 15561
  $$080$us = 0; //@line 15561
  while (1) {
   if (!($$080$us << 24 >> 24)) {
    $$1$us = $$06378$us; //@line 15565
   } else {
    HEAP8[$$06378$us >> 0] = 38; //@line 15567
    $$1$us = $$06378$us + 1 | 0; //@line 15569
   }
   $24 = $$080$us + 1 << 24 >> 24; //@line 15571
   $26 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 15573
   HEAP32[$2 >> 2] = $26; //@line 15574
   $29 = $$06577$us & 65535; //@line 15577
   if (($$1$us + $29 - (HEAP32[$10 >> 2] | 0) | 0) > ($4 | 0)) {
    $$064 = -1; //@line 15582
    label = 28; //@line 15583
    break;
   }
   _memcpy($$1$us | 0, $26 | 0, $29 | 0) | 0; //@line 15586
   $34 = (HEAP32[$2 >> 2] | 0) + $29 | 0; //@line 15588
   HEAP32[$2 >> 2] = $34; //@line 15589
   $$06378$us = $$1$us + $29 | 0; //@line 15590
   $36 = HEAP32[$10 >> 2] | 0; //@line 15591
   $37 = $$06378$us; //@line 15592
   if (($37 - $36 | 0) >= ($4 | 0)) {
    $$064 = $24; //@line 15596
    label = 28; //@line 15597
    break;
   }
   $trunc110 = HEAP8[$34 >> 0] | 0; //@line 15600
   $40 = $trunc110 & 255; //@line 15601
   if ($40 & 240 | 0) {
    $$064 = $24; //@line 15605
    label = 28; //@line 15606
    break;
   }
   switch ($trunc110 & 15) {
   case 13:
    {
     $52 = $34 + 1 | 0; //@line 15613
     $$sink87 = $52; //@line 15617
     $$sink88 = (HEAPU8[$52 >> 0] | 0) + 13 | 0; //@line 15617
     label = 13; //@line 15618
     break;
    }
   case 14:
    {
     $43 = $34 + 2 | 0; //@line 15622
     $$sink87 = $43; //@line 15631
     $$sink88 = (HEAPU8[$43 >> 0] | 0) + 269 + ((HEAPU8[$34 + 1 >> 0] | 0) << 8) | 0; //@line 15631
     label = 13; //@line 15632
     break;
    }
   default:
    {
     $$065$be$us$in = $40 & 15; //@line 15636
     $57 = $36; //@line 15636
    }
   }
   if ((label | 0) == 13) {
    label = 0; //@line 15640
    HEAP32[$2 >> 2] = $$sink87; //@line 15641
    $$065$be$us$in = $$sink88; //@line 15643
    $57 = HEAP32[$10 >> 2] | 0; //@line 15643
   }
   if (($37 - $57 | 0) >= ($4 | 0)) {
    $$064 = $24; //@line 15651
    label = 28; //@line 15652
    break;
   } else {
    $$06577$us = $$065$be$us$in & 65535; //@line 15649
    $$080$us = $24; //@line 15649
   }
  }
  if ((label | 0) == 28) {
   $96 = ___async_retval; //@line 15657
   HEAP8[$96 >> 0] = $$064; //@line 15658
   return;
  }
 } else {
  $$06378 = $19; //@line 15662
  $$06577 = $6; //@line 15662
  $$080 = 0; //@line 15662
 }
 while (1) {
  if (!($$080 << 24 >> 24)) {
   $$1 = $$06378; //@line 15667
  } else {
   switch ($8 | 0) {
   case 4:
   case 15:
   case 17:
   case 20:
    {
     $$sink = 38; //@line 15671
     label = 18; //@line 15672
     break;
    }
   case 8:
   case 11:
    {
     $$sink = 47; //@line 15676
     label = 18; //@line 15677
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 18) {
    label = 0; //@line 15684
    HEAP8[$$06378 >> 0] = $$sink; //@line 15685
   }
   $$1 = $$06378 + 1 | 0; //@line 15688
  }
  $61 = $$080 + 1 << 24 >> 24; //@line 15690
  $63 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 15692
  HEAP32[$2 >> 2] = $63; //@line 15693
  $66 = $$06577 & 65535; //@line 15696
  if (($$1 + $66 - (HEAP32[$10 >> 2] | 0) | 0) > ($4 | 0)) {
   $$064 = -1; //@line 15701
   label = 28; //@line 15702
   break;
  }
  _memcpy($$1 | 0, $63 | 0, $66 | 0) | 0; //@line 15705
  $71 = (HEAP32[$2 >> 2] | 0) + $66 | 0; //@line 15707
  HEAP32[$2 >> 2] = $71; //@line 15708
  $$06378 = $$1 + $66 | 0; //@line 15709
  $73 = HEAP32[$10 >> 2] | 0; //@line 15710
  $74 = $$06378; //@line 15711
  if (($74 - $73 | 0) >= ($4 | 0)) {
   $$064 = $61; //@line 15715
   label = 28; //@line 15716
   break;
  }
  $trunc = HEAP8[$71 >> 0] | 0; //@line 15719
  $77 = $trunc & 255; //@line 15720
  if ($77 & 240 | 0) {
   $$064 = $61; //@line 15724
   label = 28; //@line 15725
   break;
  }
  switch ($trunc & 15) {
  case 13:
   {
    $80 = $71 + 1 | 0; //@line 15732
    $$sink89 = $80; //@line 15736
    $$sink90 = (HEAPU8[$80 >> 0] | 0) + 13 | 0; //@line 15736
    label = 25; //@line 15737
    break;
   }
  case 14:
   {
    $87 = $71 + 2 | 0; //@line 15741
    $$sink89 = $87; //@line 15750
    $$sink90 = (HEAPU8[$87 >> 0] | 0) + 269 + ((HEAPU8[$71 + 1 >> 0] | 0) << 8) | 0; //@line 15750
    label = 25; //@line 15751
    break;
   }
  default:
   {
    $$065$be$in = $77 & 15; //@line 15755
    $85 = $73; //@line 15755
   }
  }
  if ((label | 0) == 25) {
   label = 0; //@line 15759
   HEAP32[$2 >> 2] = $$sink89; //@line 15760
   $$065$be$in = $$sink90; //@line 15762
   $85 = HEAP32[$10 >> 2] | 0; //@line 15762
  }
  if (($74 - $85 | 0) >= ($4 | 0)) {
   $$064 = $61; //@line 15770
   label = 28; //@line 15771
   break;
  } else {
   $$06577 = $$065$be$in & 65535; //@line 15768
   $$080 = $61; //@line 15768
  }
 }
 if ((label | 0) == 28) {
  $96 = ___async_retval; //@line 15776
  HEAP8[$96 >> 0] = $$064; //@line 15777
  return;
 }
}
function __ZN6Socket4openEP12NetworkStack__async_cb_79($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 21
  return;
 }
 $14 = $8 + 8 | 0; //@line 25
 HEAP32[$14 >> 2] = HEAP32[$6 >> 2]; //@line 26
 $15 = $10 + 12 | 0; //@line 27
 HEAP32[$10 >> 2] = 12; //@line 28
 HEAP32[$10 + 4 >> 2] = 1; //@line 30
 HEAP32[$10 + 8 >> 2] = $8; //@line 32
 HEAP32[$15 >> 2] = 420; //@line 33
 $16 = $8 + 16 | 0; //@line 34
 if (($16 | 0) == ($10 | 0)) {
  $40 = HEAP32[107] | 0; //@line 38
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 39
  FUNCTION_TABLE_vi[$40 & 255]($10); //@line 40
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 43
   $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 44
   HEAP32[$41 >> 2] = $10; //@line 45
   $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 46
   HEAP32[$42 >> 2] = $4; //@line 47
   $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 48
   HEAP32[$43 >> 2] = $14; //@line 49
   $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 50
   HEAP32[$44 >> 2] = $16; //@line 51
   $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 52
   HEAP32[$45 >> 2] = $2; //@line 53
   sp = STACKTOP; //@line 54
   return;
  }
  ___async_unwind = 0; //@line 57
  HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 58
  $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 59
  HEAP32[$41 >> 2] = $10; //@line 60
  $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 61
  HEAP32[$42 >> 2] = $4; //@line 62
  $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 63
  HEAP32[$43 >> 2] = $14; //@line 64
  $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 65
  HEAP32[$44 >> 2] = $16; //@line 66
  $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 67
  HEAP32[$45 >> 2] = $2; //@line 68
  sp = STACKTOP; //@line 69
  return;
 }
 $18 = $8 + 28 | 0; //@line 72
 $19 = HEAP32[$18 >> 2] | 0; //@line 73
 if (!$19) {
  $31 = HEAP32[106] | 0; //@line 77
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 78
  FUNCTION_TABLE_vii[$31 & 3]($16, $10); //@line 79
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 71; //@line 82
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 83
   HEAP32[$32 >> 2] = $15; //@line 84
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 85
   HEAP32[$33 >> 2] = $18; //@line 86
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 87
   HEAP32[$34 >> 2] = $10; //@line 88
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 89
   HEAP32[$35 >> 2] = $4; //@line 90
   $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 91
   HEAP32[$36 >> 2] = $14; //@line 92
   $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 93
   HEAP32[$37 >> 2] = $16; //@line 94
   $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 95
   HEAP32[$38 >> 2] = $2; //@line 96
   sp = STACKTOP; //@line 97
   return;
  }
  ___async_unwind = 0; //@line 100
  HEAP32[$ReallocAsyncCtx4 >> 2] = 71; //@line 101
  $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 102
  HEAP32[$32 >> 2] = $15; //@line 103
  $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 104
  HEAP32[$33 >> 2] = $18; //@line 105
  $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 106
  HEAP32[$34 >> 2] = $10; //@line 107
  $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 108
  HEAP32[$35 >> 2] = $4; //@line 109
  $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 110
  HEAP32[$36 >> 2] = $14; //@line 111
  $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 112
  HEAP32[$37 >> 2] = $16; //@line 113
  $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 114
  HEAP32[$38 >> 2] = $2; //@line 115
  sp = STACKTOP; //@line 116
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 120
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 121
  FUNCTION_TABLE_vi[$22 & 255]($16); //@line 122
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 70; //@line 125
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 126
   HEAP32[$23 >> 2] = $15; //@line 127
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 128
   HEAP32[$24 >> 2] = $18; //@line 129
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 130
   HEAP32[$25 >> 2] = $16; //@line 131
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 132
   HEAP32[$26 >> 2] = $10; //@line 133
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 134
   HEAP32[$27 >> 2] = $4; //@line 135
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 136
   HEAP32[$28 >> 2] = $14; //@line 137
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 138
   HEAP32[$29 >> 2] = $2; //@line 139
   sp = STACKTOP; //@line 140
   return;
  }
  ___async_unwind = 0; //@line 143
  HEAP32[$ReallocAsyncCtx3 >> 2] = 70; //@line 144
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 145
  HEAP32[$23 >> 2] = $15; //@line 146
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 147
  HEAP32[$24 >> 2] = $18; //@line 148
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 149
  HEAP32[$25 >> 2] = $16; //@line 150
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 151
  HEAP32[$26 >> 2] = $10; //@line 152
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 153
  HEAP32[$27 >> 2] = $4; //@line 154
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 155
  HEAP32[$28 >> 2] = $14; //@line 156
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 157
  HEAP32[$29 >> 2] = $2; //@line 158
  sp = STACKTOP; //@line 159
  return;
 }
}
function __ZNK13SocketAddress14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $23 = 0, $31 = 0, $39 = 0, $47 = 0, $55 = 0, $63 = 0, $71 = 0, $79 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 7905
 STACKTOP = STACKTOP + 80 | 0; //@line 7906
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 7906
 $vararg_buffer32 = sp + 72 | 0; //@line 7907
 $vararg_buffer28 = sp + 64 | 0; //@line 7908
 $vararg_buffer24 = sp + 56 | 0; //@line 7909
 $vararg_buffer20 = sp + 48 | 0; //@line 7910
 $vararg_buffer16 = sp + 40 | 0; //@line 7911
 $vararg_buffer12 = sp + 32 | 0; //@line 7912
 $vararg_buffer8 = sp + 24 | 0; //@line 7913
 $vararg_buffer4 = sp + 16 | 0; //@line 7914
 $vararg_buffer = sp; //@line 7915
 $2 = HEAP32[$0 + 40 >> 2] | 0; //@line 7917
 if (!$2) {
  $$0 = 0; //@line 7920
  STACKTOP = sp; //@line 7921
  return $$0 | 0; //@line 7921
 }
 if (HEAP8[$0 >> 0] | 0) {
  $$0 = $0; //@line 7926
  STACKTOP = sp; //@line 7927
  return $$0 | 0; //@line 7927
 }
 switch ($2 | 0) {
 case 1:
  {
   $11 = HEAPU8[$0 + 45 >> 0] | 0; //@line 7936
   $14 = HEAPU8[$0 + 46 >> 0] | 0; //@line 7939
   $17 = HEAPU8[$0 + 47 >> 0] | 0; //@line 7942
   HEAP32[$vararg_buffer >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 7943
   HEAP32[$vararg_buffer + 4 >> 2] = $11; //@line 7945
   HEAP32[$vararg_buffer + 8 >> 2] = $14; //@line 7947
   HEAP32[$vararg_buffer + 12 >> 2] = $17; //@line 7949
   _sprintf($0, 2266, $vararg_buffer) | 0; //@line 7950
   $$0 = $0; //@line 7951
   STACKTOP = sp; //@line 7952
   return $$0 | 0; //@line 7952
  }
 case 2:
  {
   $23 = HEAPU8[$0 + 45 >> 0] | 0; //@line 7961
   HEAP32[$vararg_buffer4 >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 7962
   HEAP32[$vararg_buffer4 + 4 >> 2] = $23; //@line 7964
   _sprintf($0, 2278, $vararg_buffer4) | 0; //@line 7965
   HEAP8[$0 + 4 >> 0] = 58; //@line 7967
   $31 = HEAPU8[$0 + 47 >> 0] | 0; //@line 7974
   HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$0 + 46 >> 0]; //@line 7975
   HEAP32[$vararg_buffer8 + 4 >> 2] = $31; //@line 7977
   _sprintf($0 + 5 | 0, 2278, $vararg_buffer8) | 0; //@line 7978
   HEAP8[$0 + 9 >> 0] = 58; //@line 7980
   $39 = HEAPU8[$0 + 49 >> 0] | 0; //@line 7987
   HEAP32[$vararg_buffer12 >> 2] = HEAPU8[$0 + 48 >> 0]; //@line 7988
   HEAP32[$vararg_buffer12 + 4 >> 2] = $39; //@line 7990
   _sprintf($0 + 10 | 0, 2278, $vararg_buffer12) | 0; //@line 7991
   HEAP8[$0 + 14 >> 0] = 58; //@line 7993
   $47 = HEAPU8[$0 + 51 >> 0] | 0; //@line 8000
   HEAP32[$vararg_buffer16 >> 2] = HEAPU8[$0 + 50 >> 0]; //@line 8001
   HEAP32[$vararg_buffer16 + 4 >> 2] = $47; //@line 8003
   _sprintf($0 + 15 | 0, 2278, $vararg_buffer16) | 0; //@line 8004
   HEAP8[$0 + 19 >> 0] = 58; //@line 8006
   $55 = HEAPU8[$0 + 53 >> 0] | 0; //@line 8013
   HEAP32[$vararg_buffer20 >> 2] = HEAPU8[$0 + 52 >> 0]; //@line 8014
   HEAP32[$vararg_buffer20 + 4 >> 2] = $55; //@line 8016
   _sprintf($0 + 20 | 0, 2278, $vararg_buffer20) | 0; //@line 8017
   HEAP8[$0 + 24 >> 0] = 58; //@line 8019
   $63 = HEAPU8[$0 + 55 >> 0] | 0; //@line 8026
   HEAP32[$vararg_buffer24 >> 2] = HEAPU8[$0 + 54 >> 0]; //@line 8027
   HEAP32[$vararg_buffer24 + 4 >> 2] = $63; //@line 8029
   _sprintf($0 + 25 | 0, 2278, $vararg_buffer24) | 0; //@line 8030
   HEAP8[$0 + 29 >> 0] = 58; //@line 8032
   $71 = HEAPU8[$0 + 57 >> 0] | 0; //@line 8039
   HEAP32[$vararg_buffer28 >> 2] = HEAPU8[$0 + 56 >> 0]; //@line 8040
   HEAP32[$vararg_buffer28 + 4 >> 2] = $71; //@line 8042
   _sprintf($0 + 30 | 0, 2278, $vararg_buffer28) | 0; //@line 8043
   HEAP8[$0 + 34 >> 0] = 58; //@line 8045
   $79 = HEAPU8[$0 + 59 >> 0] | 0; //@line 8052
   HEAP32[$vararg_buffer32 >> 2] = HEAPU8[$0 + 58 >> 0]; //@line 8053
   HEAP32[$vararg_buffer32 + 4 >> 2] = $79; //@line 8055
   _sprintf($0 + 35 | 0, 2278, $vararg_buffer32) | 0; //@line 8056
   HEAP8[$0 + 39 >> 0] = 0; //@line 8058
   $$0 = $0; //@line 8059
   STACKTOP = sp; //@line 8060
   return $$0 | 0; //@line 8060
  }
 default:
  {
   $$0 = $0; //@line 8064
   STACKTOP = sp; //@line 8065
   return $$0 | 0; //@line 8065
  }
 }
 return 0; //@line 8068
}
function _sn_coap_builder_options_build_add_multiple_option($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$i = 0, $$012$lcssa$i10 = 0, $$01213$i = 0, $$014$i = 0, $$02441$i = 0, $$02540$i = 0, $$02542$i = 0, $$02641$i = 0, $$028$lcssa$i$ph = 0, $$02839$i = 0, $$03138$i = 0, $$03139$i = 0, $$07$us = 0, $$126$i = 0, $$127$i = 0, $$129$i = 0, $13 = 0, $15 = 0, $27 = 0, $29 = 0, $34 = 0, $39 = 0, $49 = 0, $5 = 0, $50 = 0, $61 = 0, $66 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $or$cond$i3 = 0, $phitmp$i = 0, $wide$trip$count = 0;
 $5 = HEAP32[$1 >> 2] | 0; //@line 4311
 if (!$5) {
  return;
 }
 $7 = HEAP16[$2 >> 1] | 0; //@line 4316
 $9 = ($7 & 65535) + -1 | 0; //@line 4318
 if (($7 & 65535) > 2) {
  $13 = ($3 | 0) == 11 | ($3 | 0) == 8 ? 47 : 38; //@line 4324
  $$01213$i = 0; //@line 4325
  $$014$i = 1; //@line 4325
  $15 = 1; //@line 4325
  do {
   $$01213$i = $$01213$i + (($13 | 0) == (HEAPU8[$5 + $15 >> 0] | 0) & 1) << 24 >> 24; //@line 4332
   $$014$i = $$014$i + 1 << 16 >> 16; //@line 4333
   $15 = $$014$i & 65535; //@line 4334
  } while (($9 | 0) > ($15 | 0));
  $phitmp$i = $$01213$i + 1 << 24 >> 24; //@line 4342
  if (!($phitmp$i << 24 >> 24)) {
   return;
  } else {
   $$012$lcssa$i10 = $phitmp$i; //@line 4347
  }
 } else {
  $$012$lcssa$i10 = 1; //@line 4350
 }
 $or$cond$i3 = ($3 | 0) == 11 | ($3 | 0) == 8; //@line 4355
 $$$i = $or$cond$i3 ? 47 : 38; //@line 4356
 $27 = $or$cond$i3 ? 47 : 38; //@line 4357
 if (!($7 << 16 >> 16)) {
  $$07$us = 0; //@line 4359
  do {
   if (!($$07$us << 24 >> 24)) {
    $29 = HEAP8[$5 >> 0] | 0; //@line 4363
    $34 = ($29 << 24 >> 24 == 0 ? 1 : $29 << 24 >> 24 == $$$i << 24 >> 24) & 1; //@line 4368
   } else {
    $34 = 65535; //@line 4370
   }
   _sn_coap_builder_options_build_add_one_option($0, 0, (HEAP32[$1 >> 2] | 0) + $34 | 0, $3, $4) | 0; //@line 4374
   $$07$us = $$07$us + 1 << 24 >> 24; //@line 4375
  } while (($$07$us & 255) < ($$012$lcssa$i10 & 255));
  return;
 }
 $wide$trip$count = $$012$lcssa$i10 & 255; //@line 4385
 $indvars$iv = 0; //@line 4386
 do {
  $$02441$i = 0; //@line 4388
  $$02540$i = 0; //@line 4388
  $$02839$i = 0; //@line 4388
  $$03138$i = $5; //@line 4388
  while (1) {
   $39 = ($27 | 0) != (HEAPU8[$$03138$i >> 0] | 0); //@line 4392
   if ($$02839$i << 16 >> 16 == 0 | $39) {
    $$126$i = $$02540$i; //@line 4398
    $$129$i = $$02839$i + ($39 & 1) << 16 >> 16; //@line 4398
   } else {
    if (($indvars$iv | 0) == ($$02540$i & 255 | 0)) {
     $$028$lcssa$i$ph = $$02839$i; //@line 4403
     break;
    }
    $$126$i = $$02540$i + 1 << 24 >> 24; //@line 4407
    $$129$i = 0; //@line 4407
   }
   $$02441$i = $$02441$i + 1 << 16 >> 16; //@line 4410
   if (($$02441$i & 65535) >= ($7 & 65535)) {
    $$028$lcssa$i$ph = $$129$i; //@line 4415
    break;
   } else {
    $$02540$i = $$126$i; //@line 4413
    $$02839$i = $$129$i; //@line 4413
    $$03138$i = $$03138$i + 1 | 0; //@line 4413
   }
  }
  L29 : do {
   if (!$indvars$iv) {
    $50 = HEAP8[$5 >> 0] | 0; //@line 4422
    $66 = ($50 << 24 >> 24 == 0 ? 1 : $50 << 24 >> 24 == $$$i << 24 >> 24) & 1; //@line 4427
   } else {
    $49 = $indvars$iv + -1 | 0; //@line 4429
    $$02542$i = 0; //@line 4430
    $$02641$i = 0; //@line 4430
    $$03139$i = $5; //@line 4430
    while (1) {
     if ($$02542$i << 16 >> 16 == 0 ? 1 : (HEAP8[$$03139$i >> 0] | 0) != $$$i << 24 >> 24) {
      $$127$i = $$02641$i; //@line 4437
     } else {
      if (($49 | 0) == ($$02641$i & 255 | 0)) {
       break;
      }
      $$127$i = $$02641$i + 1 << 24 >> 24; //@line 4445
     }
     $61 = $$02542$i + 1 << 16 >> 16; //@line 4447
     if (($61 & 65535) < ($7 & 65535)) {
      $$02542$i = $61; //@line 4451
      $$02641$i = $$127$i; //@line 4451
      $$03139$i = $$03139$i + 1 | 0; //@line 4451
     } else {
      $66 = 65535; //@line 4453
      break L29;
     }
    }
    $66 = ($$02542$i & 65535) + 1 | 0; //@line 4459
   }
  } while (0);
  _sn_coap_builder_options_build_add_one_option($0, $$028$lcssa$i$ph, (HEAP32[$1 >> 2] | 0) + ($66 & 65535) | 0, $3, $4) | 0; //@line 4465
  $indvars$iv = $indvars$iv + 1 | 0; //@line 4466
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_89($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 974
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 976
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 978
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 980
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 982
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 984
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 987
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 990
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 992
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 994
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 996
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 998
 $24 = HEAP8[$0 + 44 >> 0] & 1; //@line 1001
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 1003
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 1005
 L2 : do {
  if (!(HEAP8[$2 >> 0] | 0)) {
   do {
    if (!(HEAP8[$22 >> 0] | 0)) {
     $$182$off0 = $12; //@line 1014
     $$186$off0 = $14; //@line 1014
    } else {
     if (!(HEAP8[$20 >> 0] | 0)) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $14; //@line 1023
       $$283$off0 = 1; //@line 1023
       label = 13; //@line 1024
       break L2;
      } else {
       $$182$off0 = 1; //@line 1027
       $$186$off0 = $14; //@line 1027
       break;
      }
     }
     if ((HEAP32[$4 >> 2] | 0) == 1) {
      label = 18; //@line 1034
      break L2;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      label = 18; //@line 1041
      break L2;
     } else {
      $$182$off0 = 1; //@line 1044
      $$186$off0 = 1; //@line 1044
     }
    }
   } while (0);
   $30 = $16 + 8 | 0; //@line 1048
   if ($30 >>> 0 < $26 >>> 0) {
    HEAP8[$20 >> 0] = 0; //@line 1051
    HEAP8[$22 >> 0] = 0; //@line 1052
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 1053
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $10, $6, $6, 1, $24); //@line 1054
    if (!___async) {
     ___async_unwind = 0; //@line 1057
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 172; //@line 1059
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 1061
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 1063
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 1065
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 1067
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 1069
    HEAP8[$ReallocAsyncCtx5 + 24 >> 0] = $$182$off0 & 1; //@line 1072
    HEAP8[$ReallocAsyncCtx5 + 25 >> 0] = $$186$off0 & 1; //@line 1075
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $30; //@line 1077
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 1079
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 1081
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 1083
    HEAP8[$ReallocAsyncCtx5 + 44 >> 0] = $24 & 1; //@line 1086
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 1088
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 1090
    sp = STACKTOP; //@line 1091
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 1094
    $$283$off0 = $$182$off0; //@line 1094
    label = 13; //@line 1095
   }
  } else {
   $$085$off0$reg2mem$0 = $14; //@line 1098
   $$283$off0 = $12; //@line 1098
   label = 13; //@line 1099
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$8 >> 2] = $6; //@line 1105
    $59 = $10 + 40 | 0; //@line 1106
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 1109
    if ((HEAP32[$10 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$4 >> 2] | 0) == 2) {
      HEAP8[$2 >> 0] = 1; //@line 1117
      if ($$283$off0) {
       label = 18; //@line 1119
       break;
      } else {
       $67 = 4; //@line 1122
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 1129
   } else {
    $67 = 4; //@line 1131
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 1136
 }
 HEAP32[$28 >> 2] = $67; //@line 1138
 return;
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 9107
 $3 = HEAP32[$2 >> 2] | 0; //@line 9108
 $4 = $0 + 100 | 0; //@line 9109
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 9114
  $11 = HEAPU8[$3 >> 0] | 0; //@line 9117
 } else {
  $11 = ___shgetc($0) | 0; //@line 9120
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 9125
   $14 = HEAP32[$2 >> 2] | 0; //@line 9126
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 9131
    $22 = HEAPU8[$14 >> 0] | 0; //@line 9134
   } else {
    $22 = ___shgetc($0) | 0; //@line 9137
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 9147
     $$049 = $22; //@line 9147
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9151
     $$0 = $13; //@line 9152
     $$049 = $22; //@line 9152
    }
   } else {
    $$0 = $13; //@line 9155
    $$049 = $22; //@line 9155
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 9160
   $$049 = $11; //@line 9160
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 9169
   $101 = 0; //@line 9169
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9173
   $100 = -2147483648; //@line 9174
   $101 = 0; //@line 9174
  }
 } else {
  $$04860 = 0; //@line 9177
  $$159 = $$049; //@line 9177
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 9181
   $38 = HEAP32[$2 >> 2] | 0; //@line 9182
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 9187
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 9190
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 9193
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 9200
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 9206
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 9210
   $55 = $$04860; //@line 9210
   $56 = $50; //@line 9210
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 9212
    $58 = tempRet0; //@line 9213
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 9216
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 9218
    $64 = tempRet0; //@line 9219
    $65 = HEAP32[$2 >> 2] | 0; //@line 9220
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 9225
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 9228
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 9231
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 9242
     $55 = $63; //@line 9242
     $56 = $64; //@line 9242
    } else {
     $$2$lcssa = $$2$be; //@line 9244
     $94 = $63; //@line 9244
     $95 = $64; //@line 9244
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 9249
   $94 = $$04860; //@line 9249
   $95 = $50; //@line 9249
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 9255
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 9260
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 9263
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 9266
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9280
  }
  $93 = ($$0 | 0) != 0; //@line 9282
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 9283
  $100 = $93 ? tempRet0 : $95; //@line 9287
  $101 = $93 ? $96 : $94; //@line 9287
 }
 tempRet0 = $100; //@line 9289
 return $101 | 0; //@line 9290
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14099
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14104
 } else {
  $9 = $1 + 52 | 0; //@line 14106
  $10 = HEAP8[$9 >> 0] | 0; //@line 14107
  $11 = $1 + 53 | 0; //@line 14108
  $12 = HEAP8[$11 >> 0] | 0; //@line 14109
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 14112
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 14113
  HEAP8[$9 >> 0] = 0; //@line 14114
  HEAP8[$11 >> 0] = 0; //@line 14115
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14116
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 14117
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 170; //@line 14120
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 14122
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14124
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 14126
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 14128
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 14130
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 14132
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 14134
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 14136
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 14138
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 14140
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 14143
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 14145
   sp = STACKTOP; //@line 14146
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14149
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 14154
    $32 = $0 + 8 | 0; //@line 14155
    $33 = $1 + 54 | 0; //@line 14156
    $$0 = $0 + 24 | 0; //@line 14157
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 14190
     HEAP8[$11 >> 0] = 0; //@line 14191
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 14192
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 14193
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14198
     $62 = $$0 + 8 | 0; //@line 14199
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 14202
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 171; //@line 14207
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 14209
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 14211
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 14213
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 14215
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 14217
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 14219
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 14221
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 14223
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 14225
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 14227
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 14229
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 14231
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 14233
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 14236
    sp = STACKTOP; //@line 14237
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 14241
  HEAP8[$11 >> 0] = $12; //@line 14242
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10981
      $10 = HEAP32[$9 >> 2] | 0; //@line 10982
      HEAP32[$2 >> 2] = $9 + 4; //@line 10984
      HEAP32[$0 >> 2] = $10; //@line 10985
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11001
      $17 = HEAP32[$16 >> 2] | 0; //@line 11002
      HEAP32[$2 >> 2] = $16 + 4; //@line 11004
      $20 = $0; //@line 11007
      HEAP32[$20 >> 2] = $17; //@line 11009
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 11012
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11028
      $30 = HEAP32[$29 >> 2] | 0; //@line 11029
      HEAP32[$2 >> 2] = $29 + 4; //@line 11031
      $31 = $0; //@line 11032
      HEAP32[$31 >> 2] = $30; //@line 11034
      HEAP32[$31 + 4 >> 2] = 0; //@line 11037
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11053
      $41 = $40; //@line 11054
      $43 = HEAP32[$41 >> 2] | 0; //@line 11056
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 11059
      HEAP32[$2 >> 2] = $40 + 8; //@line 11061
      $47 = $0; //@line 11062
      HEAP32[$47 >> 2] = $43; //@line 11064
      HEAP32[$47 + 4 >> 2] = $46; //@line 11067
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11083
      $57 = HEAP32[$56 >> 2] | 0; //@line 11084
      HEAP32[$2 >> 2] = $56 + 4; //@line 11086
      $59 = ($57 & 65535) << 16 >> 16; //@line 11088
      $62 = $0; //@line 11091
      HEAP32[$62 >> 2] = $59; //@line 11093
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 11096
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11112
      $72 = HEAP32[$71 >> 2] | 0; //@line 11113
      HEAP32[$2 >> 2] = $71 + 4; //@line 11115
      $73 = $0; //@line 11117
      HEAP32[$73 >> 2] = $72 & 65535; //@line 11119
      HEAP32[$73 + 4 >> 2] = 0; //@line 11122
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11138
      $83 = HEAP32[$82 >> 2] | 0; //@line 11139
      HEAP32[$2 >> 2] = $82 + 4; //@line 11141
      $85 = ($83 & 255) << 24 >> 24; //@line 11143
      $88 = $0; //@line 11146
      HEAP32[$88 >> 2] = $85; //@line 11148
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 11151
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11167
      $98 = HEAP32[$97 >> 2] | 0; //@line 11168
      HEAP32[$2 >> 2] = $97 + 4; //@line 11170
      $99 = $0; //@line 11172
      HEAP32[$99 >> 2] = $98 & 255; //@line 11174
      HEAP32[$99 + 4 >> 2] = 0; //@line 11177
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11193
      $109 = +HEAPF64[$108 >> 3]; //@line 11194
      HEAP32[$2 >> 2] = $108 + 8; //@line 11196
      HEAPF64[$0 >> 3] = $109; //@line 11197
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11213
      $116 = +HEAPF64[$115 >> 3]; //@line 11214
      HEAP32[$2 >> 2] = $115 + 8; //@line 11216
      HEAPF64[$0 >> 3] = $116; //@line 11217
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_88($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 818
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 820
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 822
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 824
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 826
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 829
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 831
 $15 = $12 + 24 | 0; //@line 834
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 839
   if (!($18 & 2)) {
    $21 = $4 + 36 | 0; //@line 843
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $4 + 54 | 0; //@line 850
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 861
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 862
      if (!___async) {
       ___async_unwind = 0; //@line 865
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 176; //@line 867
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 869
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 871
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 873
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 875
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $4; //@line 877
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 879
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 881
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 884
      sp = STACKTOP; //@line 885
      return;
     }
     $36 = $4 + 24 | 0; //@line 888
     $37 = $4 + 54 | 0; //@line 889
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 904
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 905
     if (!___async) {
      ___async_unwind = 0; //@line 908
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 175; //@line 910
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 912
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 914
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 916
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 918
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 920
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 922
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 924
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 926
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 929
     sp = STACKTOP; //@line 930
     return;
    }
   }
   $24 = $4 + 54 | 0; //@line 934
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 938
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 939
    if (!___async) {
     ___async_unwind = 0; //@line 942
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 944
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 946
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 948
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 950
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 952
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 954
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 956
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 959
    sp = STACKTOP; //@line 960
    return;
   }
  }
 } while (0);
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 9881
 STACKTOP = STACKTOP + 224 | 0; //@line 9882
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 9882
 $3 = sp + 120 | 0; //@line 9883
 $4 = sp + 80 | 0; //@line 9884
 $5 = sp; //@line 9885
 $6 = sp + 136 | 0; //@line 9886
 dest = $4; //@line 9887
 stop = dest + 40 | 0; //@line 9887
 do {
  HEAP32[dest >> 2] = 0; //@line 9887
  dest = dest + 4 | 0; //@line 9887
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 9889
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 9893
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 9900
  } else {
   $43 = 0; //@line 9902
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 9904
  $14 = $13 & 32; //@line 9905
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 9911
  }
  $19 = $0 + 48 | 0; //@line 9913
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 9918
    $24 = HEAP32[$23 >> 2] | 0; //@line 9919
    HEAP32[$23 >> 2] = $6; //@line 9920
    $25 = $0 + 28 | 0; //@line 9921
    HEAP32[$25 >> 2] = $6; //@line 9922
    $26 = $0 + 20 | 0; //@line 9923
    HEAP32[$26 >> 2] = $6; //@line 9924
    HEAP32[$19 >> 2] = 80; //@line 9925
    $28 = $0 + 16 | 0; //@line 9927
    HEAP32[$28 >> 2] = $6 + 80; //@line 9928
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 9929
    if (!$24) {
     $$1 = $29; //@line 9932
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 9935
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 9936
     FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0; //@line 9937
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 147; //@line 9940
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 9942
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 9944
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 9946
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 9948
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 9950
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 9952
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 9954
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 9956
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 9958
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 9960
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 9962
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 9964
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 9966
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 9968
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 9970
      sp = STACKTOP; //@line 9971
      STACKTOP = sp; //@line 9972
      return 0; //@line 9972
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 9974
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 9977
      HEAP32[$23 >> 2] = $24; //@line 9978
      HEAP32[$19 >> 2] = 0; //@line 9979
      HEAP32[$28 >> 2] = 0; //@line 9980
      HEAP32[$25 >> 2] = 0; //@line 9981
      HEAP32[$26 >> 2] = 0; //@line 9982
      $$1 = $$; //@line 9983
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 9989
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 9992
  HEAP32[$0 >> 2] = $51 | $14; //@line 9997
  if ($43 | 0) {
   ___unlockfile($0); //@line 10000
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 10002
 }
 STACKTOP = sp; //@line 10004
 return $$0 | 0; //@line 10004
}
function __ZN9UDPSocket6sendtoEPKctPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$byval_copy = 0, $11 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8422
 STACKTOP = STACKTOP + 112 | 0; //@line 8423
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 8423
 $$byval_copy = sp + 88 | 0; //@line 8424
 $5 = sp + 24 | 0; //@line 8425
 $6 = sp; //@line 8426
 HEAP32[$6 >> 2] = 0; //@line 8427
 HEAP32[$6 + 4 >> 2] = 0; //@line 8427
 HEAP32[$6 + 8 >> 2] = 0; //@line 8427
 HEAP32[$6 + 12 >> 2] = 0; //@line 8427
 HEAP32[$6 + 16 >> 2] = 0; //@line 8427
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 8428
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 8428
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 8428
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 8428
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 8428
 __ZN13SocketAddressC2E10nsapi_addrt($5, $$byval_copy, 0); //@line 8429
 $7 = $0 + 4 | 0; //@line 8430
 $8 = HEAP32[$7 >> 2] | 0; //@line 8431
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0; //@line 8434
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 8435
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($8, $1, $5, 0) | 0; //@line 8436
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 86; //@line 8439
  HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8441
  HEAP16[$AsyncCtx + 8 >> 1] = $2; //@line 8443
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8445
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 8447
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 8449
  HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 8451
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 8453
  sp = STACKTOP; //@line 8454
  STACKTOP = sp; //@line 8455
  return 0; //@line 8455
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8457
 if ($12 | 0) {
  $$0 = -3009; //@line 8460
  STACKTOP = sp; //@line 8461
  return $$0 | 0; //@line 8461
 }
 __ZN13SocketAddress8set_portEt($5, $2); //@line 8463
 $21 = $0 + 8 | 0; //@line 8464
 $22 = $0 + 52 | 0; //@line 8465
 $23 = $0 + 12 | 0; //@line 8466
 while (1) {
  $24 = HEAP32[$21 >> 2] | 0; //@line 8468
  if (!$24) {
   $$0 = -3005; //@line 8471
   label = 9; //@line 8472
   break;
  }
  HEAP32[$22 >> 2] = 0; //@line 8475
  $26 = HEAP32[$7 >> 2] | 0; //@line 8476
  $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 8479
  $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8480
  $30 = FUNCTION_TABLE_iiiiii[$29 & 7]($26, $24, $5, $3, $4) | 0; //@line 8481
  if (___async) {
   label = 7; //@line 8484
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8487
  if (($30 | 0) != -3001 | (HEAP32[$23 >> 2] | 0) == 0) {
   $$0 = $30; //@line 8493
   label = 9; //@line 8494
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx3 >> 2] = 87; //@line 8499
  HEAP32[$AsyncCtx3 + 4 >> 2] = $23; //@line 8501
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 8503
  HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 8505
  HEAP32[$AsyncCtx3 + 16 >> 2] = $22; //@line 8507
  HEAP32[$AsyncCtx3 + 20 >> 2] = $7; //@line 8509
  HEAP32[$AsyncCtx3 + 24 >> 2] = $5; //@line 8511
  HEAP32[$AsyncCtx3 + 28 >> 2] = $3; //@line 8513
  HEAP32[$AsyncCtx3 + 32 >> 2] = $4; //@line 8515
  sp = STACKTOP; //@line 8516
  STACKTOP = sp; //@line 8517
  return 0; //@line 8517
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 8520
  return $$0 | 0; //@line 8520
 }
 return 0; //@line 8522
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 13634
 STACKTOP = STACKTOP + 64 | 0; //@line 13635
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 13635
 $4 = sp; //@line 13636
 $5 = HEAP32[$0 >> 2] | 0; //@line 13637
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 13640
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 13642
 HEAP32[$4 >> 2] = $2; //@line 13643
 HEAP32[$4 + 4 >> 2] = $0; //@line 13645
 HEAP32[$4 + 8 >> 2] = $1; //@line 13647
 HEAP32[$4 + 12 >> 2] = $3; //@line 13649
 $14 = $4 + 16 | 0; //@line 13650
 $15 = $4 + 20 | 0; //@line 13651
 $16 = $4 + 24 | 0; //@line 13652
 $17 = $4 + 28 | 0; //@line 13653
 $18 = $4 + 32 | 0; //@line 13654
 $19 = $4 + 40 | 0; //@line 13655
 dest = $14; //@line 13656
 stop = dest + 36 | 0; //@line 13656
 do {
  HEAP32[dest >> 2] = 0; //@line 13656
  dest = dest + 4 | 0; //@line 13656
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 13656
 HEAP8[$14 + 38 >> 0] = 0; //@line 13656
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 13661
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 13664
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13665
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 13666
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 162; //@line 13669
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 13671
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 13673
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 13675
    sp = STACKTOP; //@line 13676
    STACKTOP = sp; //@line 13677
    return 0; //@line 13677
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13679
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 13683
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 13687
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 13690
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13691
   FUNCTION_TABLE_viiiii[$33 & 3]($10, $4, $8, 1, 0); //@line 13692
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 163; //@line 13695
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 13697
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 13699
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 13701
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 13703
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 13705
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 13707
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 13709
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 13711
    sp = STACKTOP; //@line 13712
    STACKTOP = sp; //@line 13713
    return 0; //@line 13713
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13715
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 13729
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 13737
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 13753
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 13758
  }
 } while (0);
 STACKTOP = sp; //@line 13761
 return $$0 | 0; //@line 13761
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 9753
 $7 = ($2 | 0) != 0; //@line 9757
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 9761
   $$03555 = $0; //@line 9762
   $$03654 = $2; //@line 9762
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 9767
     $$036$lcssa64 = $$03654; //@line 9767
     label = 6; //@line 9768
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 9771
    $12 = $$03654 + -1 | 0; //@line 9772
    $16 = ($12 | 0) != 0; //@line 9776
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 9779
     $$03654 = $12; //@line 9779
    } else {
     $$035$lcssa = $11; //@line 9781
     $$036$lcssa = $12; //@line 9781
     $$lcssa = $16; //@line 9781
     label = 5; //@line 9782
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 9787
   $$036$lcssa = $2; //@line 9787
   $$lcssa = $7; //@line 9787
   label = 5; //@line 9788
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 9793
   $$036$lcssa64 = $$036$lcssa; //@line 9793
   label = 6; //@line 9794
  } else {
   $$2 = $$035$lcssa; //@line 9796
   $$3 = 0; //@line 9796
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 9802
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 9805
    $$3 = $$036$lcssa64; //@line 9805
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 9807
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 9811
      $$13745 = $$036$lcssa64; //@line 9811
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 9814
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 9823
       $30 = $$13745 + -4 | 0; //@line 9824
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 9827
        $$13745 = $30; //@line 9827
       } else {
        $$0$lcssa = $29; //@line 9829
        $$137$lcssa = $30; //@line 9829
        label = 11; //@line 9830
        break L11;
       }
      }
      $$140 = $$046; //@line 9834
      $$23839 = $$13745; //@line 9834
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 9836
      $$137$lcssa = $$036$lcssa64; //@line 9836
      label = 11; //@line 9837
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 9843
      $$3 = 0; //@line 9843
      break;
     } else {
      $$140 = $$0$lcssa; //@line 9846
      $$23839 = $$137$lcssa; //@line 9846
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 9853
      $$3 = $$23839; //@line 9853
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 9856
     $$23839 = $$23839 + -1 | 0; //@line 9857
     if (!$$23839) {
      $$2 = $35; //@line 9860
      $$3 = 0; //@line 9860
      break;
     } else {
      $$140 = $35; //@line 9863
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 9871
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 5282
 do {
  if (!$0) {
   do {
    if (!(HEAP32[204] | 0)) {
     $34 = 0; //@line 5290
    } else {
     $12 = HEAP32[204] | 0; //@line 5292
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5293
     $13 = _fflush($12) | 0; //@line 5294
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 143; //@line 5297
      sp = STACKTOP; //@line 5298
      return 0; //@line 5299
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 5301
      $34 = $13; //@line 5302
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 5308
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 5312
    } else {
     $$02327 = $$02325; //@line 5314
     $$02426 = $34; //@line 5314
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 5321
      } else {
       $28 = 0; //@line 5323
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5331
       $25 = ___fflush_unlocked($$02327) | 0; //@line 5332
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 5337
       $$1 = $25 | $$02426; //@line 5339
      } else {
       $$1 = $$02426; //@line 5341
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 5345
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 5348
      if (!$$023) {
       $$024$lcssa = $$1; //@line 5351
       break L9;
      } else {
       $$02327 = $$023; //@line 5354
       $$02426 = $$1; //@line 5354
      }
     }
     HEAP32[$AsyncCtx >> 2] = 144; //@line 5357
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 5359
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 5361
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 5363
     sp = STACKTOP; //@line 5364
     return 0; //@line 5365
    }
   } while (0);
   ___ofl_unlock(); //@line 5368
   $$0 = $$024$lcssa; //@line 5369
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5375
    $5 = ___fflush_unlocked($0) | 0; //@line 5376
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 141; //@line 5379
     sp = STACKTOP; //@line 5380
     return 0; //@line 5381
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5383
     $$0 = $5; //@line 5384
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 5389
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5390
   $7 = ___fflush_unlocked($0) | 0; //@line 5391
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 142; //@line 5394
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 5397
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5399
    sp = STACKTOP; //@line 5400
    return 0; //@line 5401
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5403
   if ($phitmp) {
    $$0 = $7; //@line 5405
   } else {
    ___unlockfile($0); //@line 5407
    $$0 = $7; //@line 5408
   }
  }
 } while (0);
 return $$0 | 0; //@line 5412
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13816
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 13822
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 13828
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 13831
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13832
    FUNCTION_TABLE_viiiii[$53 & 3]($50, $1, $2, $3, $4); //@line 13833
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 166; //@line 13836
     sp = STACKTOP; //@line 13837
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13840
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 13848
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 13853
     $19 = $1 + 44 | 0; //@line 13854
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 13860
     HEAP8[$22 >> 0] = 0; //@line 13861
     $23 = $1 + 53 | 0; //@line 13862
     HEAP8[$23 >> 0] = 0; //@line 13863
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 13865
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 13868
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 13869
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 13870
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 165; //@line 13873
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 13875
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13877
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 13879
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 13881
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 13883
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 13885
      sp = STACKTOP; //@line 13886
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 13889
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 13893
      label = 13; //@line 13894
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 13899
       label = 13; //@line 13900
      } else {
       $$037$off039 = 3; //@line 13902
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 13906
      $39 = $1 + 40 | 0; //@line 13907
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 13910
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 13920
        $$037$off039 = $$037$off038; //@line 13921
       } else {
        $$037$off039 = $$037$off038; //@line 13923
       }
      } else {
       $$037$off039 = $$037$off038; //@line 13926
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 13929
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 13936
   }
  }
 } while (0);
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 13128
 STACKTOP = STACKTOP + 48 | 0; //@line 13129
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13129
 $vararg_buffer10 = sp + 32 | 0; //@line 13130
 $vararg_buffer7 = sp + 24 | 0; //@line 13131
 $vararg_buffer3 = sp + 16 | 0; //@line 13132
 $vararg_buffer = sp; //@line 13133
 $0 = sp + 36 | 0; //@line 13134
 $1 = ___cxa_get_globals_fast() | 0; //@line 13135
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 13138
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 13143
   $9 = HEAP32[$7 >> 2] | 0; //@line 13145
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 13148
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 5775; //@line 13154
    _abort_message(5725, $vararg_buffer7); //@line 13155
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 13164
   } else {
    $22 = $3 + 80 | 0; //@line 13166
   }
   HEAP32[$0 >> 2] = $22; //@line 13168
   $23 = HEAP32[$3 >> 2] | 0; //@line 13169
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 13171
   $28 = HEAP32[(HEAP32[20] | 0) + 16 >> 2] | 0; //@line 13174
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 13175
   $29 = FUNCTION_TABLE_iiii[$28 & 15](80, $23, $0) | 0; //@line 13176
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 156; //@line 13179
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13181
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 13183
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 13185
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 13187
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 13189
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 13191
    sp = STACKTOP; //@line 13192
    STACKTOP = sp; //@line 13193
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13195
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 5775; //@line 13197
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 13199
    _abort_message(5684, $vararg_buffer3); //@line 13200
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 13203
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 13206
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13207
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 13208
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 157; //@line 13211
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 13213
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 13215
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 13217
    sp = STACKTOP; //@line 13218
    STACKTOP = sp; //@line 13219
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 13221
    HEAP32[$vararg_buffer >> 2] = 5775; //@line 13222
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 13224
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 13226
    _abort_message(5639, $vararg_buffer); //@line 13227
   }
  }
 }
 _abort_message(5763, $vararg_buffer10); //@line 13232
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1$i = 0, $14 = 0, $15 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 793
 $5 = $0 + -4 | 0; //@line 794
 $6 = $1 + 8 | 0; //@line 795
 do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   label = 7; //@line 800
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$6 >> 0] | 0)) {
     label = 7; //@line 808
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 814
   _puts(1556) | 0; //@line 815
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 42; //@line 818
    sp = STACKTOP; //@line 819
    return 0; //@line 820
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 822
   $$1$i = -3012; //@line 823
   return $$1$i | 0; //@line 824
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $14 = HEAP32[(HEAP32[$5 >> 2] | 0) + 80 >> 2] | 0; //@line 831
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 832
   $15 = FUNCTION_TABLE_iiii[$14 & 15]($5, $1, $2) | 0; //@line 833
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 43; //@line 836
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 838
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 840
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 842
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 844
    HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 846
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 848
    sp = STACKTOP; //@line 849
    return 0; //@line 850
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 852
   if (($15 | 0) < 0) {
    $$1$i = $15; //@line 855
    return $$1$i | 0; //@line 856
   } else {
    $23 = $1 + 12 | 0; //@line 858
    dest = $23; //@line 859
    src = $2; //@line 859
    stop = dest + 60 | 0; //@line 859
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 859
     dest = dest + 4 | 0; //@line 859
     src = src + 4 | 0; //@line 859
    } while ((dest | 0) < (stop | 0));
    HEAP16[$23 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 859
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 864
 _wait_ms(1); //@line 865
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 44; //@line 868
  HEAP32[$AsyncCtx10 + 4 >> 2] = $5; //@line 870
  HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 872
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 874
  HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 876
  HEAP32[$AsyncCtx10 + 20 >> 2] = $4; //@line 878
  sp = STACKTOP; //@line 879
  return 0; //@line 880
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 882
 $31 = HEAP32[(HEAP32[$5 >> 2] | 0) + 88 >> 2] | 0; //@line 885
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 886
 $32 = FUNCTION_TABLE_iiiii[$31 & 15]($5, $1, $3, $4) | 0; //@line 887
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 45; //@line 890
  sp = STACKTOP; //@line 891
  return 0; //@line 892
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 894
 $$1$i = $32; //@line 895
 return $$1$i | 0; //@line 896
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_31($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 10847
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10849
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10851
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10853
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10855
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10859
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10861
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10863
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10865
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10867
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10869
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10871
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10873
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10875
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10877
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 10882
  $38 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($12, 0, $6, 512) | 0; //@line 10883
  if (!___async) {
   HEAP32[___async_retval >> 2] = $38; //@line 10887
   ___async_unwind = 0; //@line 10888
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 102; //@line 10890
  HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 10892
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 10894
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 10896
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 10898
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 10900
  HEAP32[$ReallocAsyncCtx + 24 >> 2] = $14; //@line 10902
  HEAP32[$ReallocAsyncCtx + 28 >> 2] = $16; //@line 10904
  HEAP32[$ReallocAsyncCtx + 32 >> 2] = $18; //@line 10906
  HEAP32[$ReallocAsyncCtx + 36 >> 2] = $20; //@line 10908
  HEAP32[$ReallocAsyncCtx + 40 >> 2] = $22; //@line 10910
  HEAP32[$ReallocAsyncCtx + 44 >> 2] = $24; //@line 10912
  HEAP32[$ReallocAsyncCtx + 48 >> 2] = $26; //@line 10914
  HEAP32[$ReallocAsyncCtx + 52 >> 2] = $28; //@line 10916
  HEAP32[$ReallocAsyncCtx + 56 >> 2] = $30; //@line 10918
  sp = STACKTOP; //@line 10919
  return;
 }
 _free($6); //@line 10922
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 10923
 $32 = __ZN6Socket5closeEv($8) | 0; //@line 10924
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 10927
  $33 = $ReallocAsyncCtx12 + 4 | 0; //@line 10928
  HEAP32[$33 >> 2] = -3009; //@line 10929
  $34 = $ReallocAsyncCtx12 + 8 | 0; //@line 10930
  HEAP32[$34 >> 2] = $12; //@line 10931
  $35 = $ReallocAsyncCtx12 + 12 | 0; //@line 10932
  HEAP32[$35 >> 2] = $2; //@line 10933
  sp = STACKTOP; //@line 10934
  return;
 }
 HEAP32[___async_retval >> 2] = $32; //@line 10938
 ___async_unwind = 0; //@line 10939
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 10940
 $33 = $ReallocAsyncCtx12 + 4 | 0; //@line 10941
 HEAP32[$33 >> 2] = -3009; //@line 10942
 $34 = $ReallocAsyncCtx12 + 8 | 0; //@line 10943
 HEAP32[$34 >> 2] = $12; //@line 10944
 $35 = $ReallocAsyncCtx12 + 12 | 0; //@line 10945
 HEAP32[$35 >> 2] = $2; //@line 10946
 sp = STACKTOP; //@line 10947
 return;
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6690
 STACKTOP = STACKTOP + 16 | 0; //@line 6691
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6691
 $4 = sp; //@line 6692
 $$ = ($3 | 0) == 0 ? 6868 : $3; //@line 6694
 $6 = HEAP32[$$ >> 2] | 0; //@line 6695
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 6701
   } else {
    label = 17; //@line 6703
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 6707
   if (!$2) {
    $$0 = -2; //@line 6710
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 6714
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 6718
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 6721
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_913() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 6728
     $22 = HEAP8[$1 >> 0] | 0; //@line 6729
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 6733
      $$0 = 1; //@line 6734
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 6738
     if ($26 >>> 0 > 50) {
      label = 17; //@line 6741
      break;
     }
     $30 = HEAP32[820 + ($26 << 2) >> 2] | 0; //@line 6746
     $31 = $2 + -1 | 0; //@line 6747
     if (!$31) {
      $$2 = $30; //@line 6750
     } else {
      $$03952 = $1 + 1 | 0; //@line 6752
      $$04051 = $30; //@line 6752
      $$04350 = $31; //@line 6752
      label = 11; //@line 6753
     }
    } else {
     $$03952 = $1; //@line 6756
     $$04051 = $6; //@line 6756
     $$04350 = $2; //@line 6756
     label = 11; //@line 6757
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 6761
      $35 = ($33 & 255) >>> 3; //@line 6763
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 6770
       break L1;
      } else {
       $$1 = $$03952; //@line 6773
       $$141 = $$04051; //@line 6773
       $$144 = $$04350; //@line 6773
       $44 = $33; //@line 6773
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 6777
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 6780
       $$144 = $$144 + -1 | 0; //@line 6781
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 6788
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 6791
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 6797
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 6801
      HEAP32[$$47 >> 2] = $$141; //@line 6802
      $$0 = $2 - $$144 | 0; //@line 6804
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 6808
    $$0 = -2; //@line 6809
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 6814
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 6816
  $$0 = -1; //@line 6817
 }
 STACKTOP = sp; //@line 6819
 return $$0 | 0; //@line 6819
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 395
 $5 = $1 + 8 | 0; //@line 396
 do {
  if (!(HEAP8[$5 >> 0] | 0)) {
   label = 7; //@line 401
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$5 >> 0] | 0)) {
     label = 7; //@line 409
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 415
   _puts(1556) | 0; //@line 416
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 29; //@line 419
    sp = STACKTOP; //@line 420
    return 0; //@line 421
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 423
   $$1 = -3012; //@line 424
   return $$1 | 0; //@line 425
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 80 >> 2] | 0; //@line 432
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 433
   $14 = FUNCTION_TABLE_iiii[$13 & 15]($0, $1, $2) | 0; //@line 434
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 30; //@line 437
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 439
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 441
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 443
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 445
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 447
    sp = STACKTOP; //@line 448
    return 0; //@line 449
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 451
   if (($14 | 0) < 0) {
    $$1 = $14; //@line 454
    return $$1 | 0; //@line 455
   } else {
    $21 = $1 + 12 | 0; //@line 457
    dest = $21; //@line 458
    src = $2; //@line 458
    stop = dest + 60 | 0; //@line 458
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 458
     dest = dest + 4 | 0; //@line 458
     src = src + 4 | 0; //@line 458
    } while ((dest | 0) < (stop | 0));
    HEAP16[$21 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 458
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 463
 _wait_ms(1); //@line 464
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 31; //@line 467
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 469
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 471
  HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 473
  HEAP32[$AsyncCtx10 + 16 >> 2] = $4; //@line 475
  sp = STACKTOP; //@line 476
  return 0; //@line 477
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 479
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 482
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 483
 $29 = FUNCTION_TABLE_iiiii[$28 & 15]($0, $1, $3, $4) | 0; //@line 484
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 32; //@line 487
  sp = STACKTOP; //@line 488
  return 0; //@line 489
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 491
 $$1 = $29; //@line 492
 return $$1 | 0; //@line 493
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4424
 STACKTOP = STACKTOP + 48 | 0; //@line 4425
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 4425
 $vararg_buffer3 = sp + 16 | 0; //@line 4426
 $vararg_buffer = sp; //@line 4427
 $3 = sp + 32 | 0; //@line 4428
 $4 = $0 + 28 | 0; //@line 4429
 $5 = HEAP32[$4 >> 2] | 0; //@line 4430
 HEAP32[$3 >> 2] = $5; //@line 4431
 $7 = $0 + 20 | 0; //@line 4433
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 4435
 HEAP32[$3 + 4 >> 2] = $9; //@line 4436
 HEAP32[$3 + 8 >> 2] = $1; //@line 4438
 HEAP32[$3 + 12 >> 2] = $2; //@line 4440
 $12 = $9 + $2 | 0; //@line 4441
 $13 = $0 + 60 | 0; //@line 4442
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 4445
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 4447
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 4449
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 4451
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 4455
  } else {
   $$04756 = 2; //@line 4457
   $$04855 = $12; //@line 4457
   $$04954 = $3; //@line 4457
   $27 = $17; //@line 4457
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 4463
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 4465
    $38 = $27 >>> 0 > $37 >>> 0; //@line 4466
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 4468
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 4470
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 4472
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 4475
    $44 = $$150 + 4 | 0; //@line 4476
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 4479
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 4482
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 4484
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 4486
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 4488
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 4491
     break L1;
    } else {
     $$04756 = $$1; //@line 4494
     $$04954 = $$150; //@line 4494
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 4498
   HEAP32[$4 >> 2] = 0; //@line 4499
   HEAP32[$7 >> 2] = 0; //@line 4500
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 4503
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 4506
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 4511
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 4517
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4522
  $25 = $20; //@line 4523
  HEAP32[$4 >> 2] = $25; //@line 4524
  HEAP32[$7 >> 2] = $25; //@line 4525
  $$051 = $2; //@line 4526
 }
 STACKTOP = sp; //@line 4528
 return $$051 | 0; //@line 4528
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 410
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 412
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 414
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 416
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 418
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 420
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 422
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 424
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -3009; //@line 429
  $36 = ___async_retval; //@line 430
  HEAP32[$36 >> 2] = $$0; //@line 431
  return;
 }
 __ZN13SocketAddress8set_portEt($2, $4); //@line 434
 $17 = $6 + 8 | 0; //@line 435
 $18 = $6 + 52 | 0; //@line 436
 $19 = $6 + 12 | 0; //@line 437
 $20 = HEAP32[$17 >> 2] | 0; //@line 438
 if (!$20) {
  $$0 = -3005; //@line 441
  $36 = ___async_retval; //@line 442
  HEAP32[$36 >> 2] = $$0; //@line 443
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 446
 $22 = HEAP32[$10 >> 2] | 0; //@line 447
 $25 = HEAP32[(HEAP32[$22 >> 2] | 0) + 60 >> 2] | 0; //@line 450
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 451
 $26 = FUNCTION_TABLE_iiiiii[$25 & 7]($22, $20, $2, $12, $14) | 0; //@line 452
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 455
  $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 456
  HEAP32[$27 >> 2] = $19; //@line 457
  $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 458
  HEAP32[$28 >> 2] = $8; //@line 459
  $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 460
  HEAP32[$29 >> 2] = $17; //@line 461
  $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 462
  HEAP32[$30 >> 2] = $18; //@line 463
  $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 464
  HEAP32[$31 >> 2] = $10; //@line 465
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 466
  HEAP32[$32 >> 2] = $2; //@line 467
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 468
  HEAP32[$33 >> 2] = $12; //@line 469
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 470
  HEAP32[$34 >> 2] = $14; //@line 471
  sp = STACKTOP; //@line 472
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 476
 ___async_unwind = 0; //@line 477
 HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 478
 $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 479
 HEAP32[$27 >> 2] = $19; //@line 480
 $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 481
 HEAP32[$28 >> 2] = $8; //@line 482
 $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 483
 HEAP32[$29 >> 2] = $17; //@line 484
 $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 485
 HEAP32[$30 >> 2] = $18; //@line 486
 $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 487
 HEAP32[$31 >> 2] = $10; //@line 488
 $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 489
 HEAP32[$32 >> 2] = $2; //@line 490
 $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 491
 HEAP32[$33 >> 2] = $12; //@line 492
 $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 493
 HEAP32[$34 >> 2] = $14; //@line 494
 sp = STACKTOP; //@line 495
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_80($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 167
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 169
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 171
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 173
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 175
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 177
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 179
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 181
 $$pre = HEAP32[$2 >> 2] | 0; //@line 182
 if ($$pre | 0) {
  $17 = HEAP32[$$pre + 4 >> 2] | 0; //@line 186
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 187
  FUNCTION_TABLE_vii[$17 & 3]($6, $8); //@line 188
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 71; //@line 191
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 192
   HEAP32[$18 >> 2] = $2; //@line 193
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 194
   HEAP32[$19 >> 2] = $4; //@line 195
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 196
   HEAP32[$20 >> 2] = $8; //@line 197
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 198
   HEAP32[$21 >> 2] = $10; //@line 199
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 200
   HEAP32[$22 >> 2] = $12; //@line 201
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 202
   HEAP32[$23 >> 2] = $6; //@line 203
   $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 204
   HEAP32[$24 >> 2] = $14; //@line 205
   sp = STACKTOP; //@line 206
   return;
  }
  ___async_unwind = 0; //@line 209
  HEAP32[$ReallocAsyncCtx4 >> 2] = 71; //@line 210
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 211
  HEAP32[$18 >> 2] = $2; //@line 212
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 213
  HEAP32[$19 >> 2] = $4; //@line 214
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 215
  HEAP32[$20 >> 2] = $8; //@line 216
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 217
  HEAP32[$21 >> 2] = $10; //@line 218
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 219
  HEAP32[$22 >> 2] = $12; //@line 220
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 221
  HEAP32[$23 >> 2] = $6; //@line 222
  $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 223
  HEAP32[$24 >> 2] = $14; //@line 224
  sp = STACKTOP; //@line 225
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 228
 $25 = HEAP32[$10 >> 2] | 0; //@line 229
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 68 >> 2] | 0; //@line 232
 $29 = HEAP32[$12 >> 2] | 0; //@line 233
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 234
 FUNCTION_TABLE_viiii[$28 & 7]($25, $29, 73, $6); //@line 235
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 238
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 239
  HEAP32[$30 >> 2] = $14; //@line 240
  sp = STACKTOP; //@line 241
  return;
 }
 ___async_unwind = 0; //@line 244
 HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 245
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 246
 HEAP32[$30 >> 2] = $14; //@line 247
 sp = STACKTOP; //@line 248
 return;
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb_84($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 503
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 505
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 507
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 509
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 511
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 513
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 515
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 517
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 519
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 521
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$0 = $AsyncRetVal; //@line 527
  $37 = ___async_retval; //@line 528
  HEAP32[$37 >> 2] = $$0; //@line 529
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 532
 if (!$18) {
  $$0 = -3005; //@line 535
  $37 = ___async_retval; //@line 536
  HEAP32[$37 >> 2] = $$0; //@line 537
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 540
 $20 = HEAP32[$10 >> 2] | 0; //@line 541
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 60 >> 2] | 0; //@line 544
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 545
 $24 = FUNCTION_TABLE_iiiiii[$23 & 7]($20, $18, $12, $14, $16) | 0; //@line 546
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 549
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 550
  HEAP32[$25 >> 2] = $2; //@line 551
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 552
  HEAP32[$26 >> 2] = $4; //@line 553
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 554
  HEAP32[$27 >> 2] = $6; //@line 555
  $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 556
  HEAP32[$28 >> 2] = $8; //@line 557
  $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 558
  HEAP32[$29 >> 2] = $10; //@line 559
  $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 560
  HEAP32[$30 >> 2] = $12; //@line 561
  $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 562
  HEAP32[$31 >> 2] = $14; //@line 563
  $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 564
  HEAP32[$32 >> 2] = $16; //@line 565
  sp = STACKTOP; //@line 566
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 570
 ___async_unwind = 0; //@line 571
 HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 572
 $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 573
 HEAP32[$25 >> 2] = $2; //@line 574
 $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 575
 HEAP32[$26 >> 2] = $4; //@line 576
 $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 577
 HEAP32[$27 >> 2] = $6; //@line 578
 $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 579
 HEAP32[$28 >> 2] = $8; //@line 580
 $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 581
 HEAP32[$29 >> 2] = $10; //@line 582
 $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 583
 HEAP32[$30 >> 2] = $12; //@line 584
 $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 585
 HEAP32[$31 >> 2] = $14; //@line 586
 $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 587
 HEAP32[$32 >> 2] = $16; //@line 588
 sp = STACKTOP; //@line 589
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$09 = 0, $$1 = 0, $$byval_copy = 0, $12 = 0, $13 = 0, $22 = 0, $4 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6622
 STACKTOP = STACKTOP + 112 | 0; //@line 6623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 6623
 $$byval_copy = sp + 88 | 0; //@line 6624
 $4 = sp + 24 | 0; //@line 6625
 $5 = sp; //@line 6626
 $7 = ($3 | 0) == 0; //@line 6628
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, $1) | 0) {
  if (!$7) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($2) | 0) != ($3 | 0)) {
    $$09 = -3009; //@line 6634
    STACKTOP = sp; //@line 6635
    return $$09 | 0; //@line 6635
   }
  }
  $$09 = 0; //@line 6638
  STACKTOP = sp; //@line 6639
  return $$09 | 0; //@line 6639
 }
 if ($7) {
  HEAP32[$5 >> 2] = 0; //@line 6642
  HEAP32[$5 + 4 >> 2] = 0; //@line 6642
  HEAP32[$5 + 8 >> 2] = 0; //@line 6642
  HEAP32[$5 + 12 >> 2] = 0; //@line 6642
  HEAP32[$5 + 16 >> 2] = 0; //@line 6642
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 6643
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 6643
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 6643
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 6643
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 6643
  __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 6644
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 6647
  $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 6648
  $13 = FUNCTION_TABLE_ii[$12 & 15]($0) | 0; //@line 6649
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 64; //@line 6652
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 6654
   HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6656
   HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 6658
   HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 6660
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 6662
   HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 6664
   sp = STACKTOP; //@line 6665
   STACKTOP = sp; //@line 6666
   return 0; //@line 6666
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6668
  if (__ZN13SocketAddress14set_ip_addressEPKc($4, $13) | 0) {
   $$0 = __ZNK13SocketAddress14get_ip_versionEv($4) | 0; //@line 6672
  } else {
   $$0 = 0; //@line 6674
  }
  $$1 = $$0; //@line 6676
 } else {
  $$1 = $3; //@line 6678
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6680
 $22 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $$1) | 0; //@line 6681
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 65; //@line 6684
  sp = STACKTOP; //@line 6685
  STACKTOP = sp; //@line 6686
  return 0; //@line 6686
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6688
 $$09 = $22; //@line 6689
 STACKTOP = sp; //@line 6690
 return $$09 | 0; //@line 6690
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15341
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15343
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15345
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15347
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15349
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15351
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15353
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15355
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15357
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 15363
  $34 = ___async_retval; //@line 15364
  HEAP32[$34 >> 2] = $$2; //@line 15365
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 15368
 if (!$16) {
  $$2 = -3005; //@line 15371
  $34 = ___async_retval; //@line 15372
  HEAP32[$34 >> 2] = $$2; //@line 15373
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 15376
 $18 = HEAP32[$8 >> 2] | 0; //@line 15377
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 64 >> 2] | 0; //@line 15380
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 15381
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 15382
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 89; //@line 15385
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 15386
  HEAP32[$23 >> 2] = $2; //@line 15387
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 15388
  HEAP32[$24 >> 2] = $4; //@line 15389
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 15390
  HEAP32[$25 >> 2] = $6; //@line 15391
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 15392
  HEAP32[$26 >> 2] = $8; //@line 15393
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 15394
  HEAP32[$27 >> 2] = $10; //@line 15395
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 15396
  HEAP32[$28 >> 2] = $12; //@line 15397
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 15398
  HEAP32[$29 >> 2] = $14; //@line 15399
  sp = STACKTOP; //@line 15400
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 15404
 ___async_unwind = 0; //@line 15405
 HEAP32[$ReallocAsyncCtx >> 2] = 89; //@line 15406
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 15407
 HEAP32[$23 >> 2] = $2; //@line 15408
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 15409
 HEAP32[$24 >> 2] = $4; //@line 15410
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 15411
 HEAP32[$25 >> 2] = $6; //@line 15412
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 15413
 HEAP32[$26 >> 2] = $8; //@line 15414
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 15415
 HEAP32[$27 >> 2] = $10; //@line 15416
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 15417
 HEAP32[$28 >> 2] = $12; //@line 15418
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 15419
 HEAP32[$29 >> 2] = $14; //@line 15420
 sp = STACKTOP; //@line 15421
 return;
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15076
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15078
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15080
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15082
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15084
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15086
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15088
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15090
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15092
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 15098
  $34 = ___async_retval; //@line 15099
  HEAP32[$34 >> 2] = $$2; //@line 15100
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 15103
 if (!$16) {
  $$2 = -3005; //@line 15106
  $34 = ___async_retval; //@line 15107
  HEAP32[$34 >> 2] = $$2; //@line 15108
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 15111
 $18 = HEAP32[$8 >> 2] | 0; //@line 15112
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 60 >> 2] | 0; //@line 15115
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 15116
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 15117
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 88; //@line 15120
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 15121
  HEAP32[$23 >> 2] = $2; //@line 15122
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 15123
  HEAP32[$24 >> 2] = $4; //@line 15124
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 15125
  HEAP32[$25 >> 2] = $6; //@line 15126
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 15127
  HEAP32[$26 >> 2] = $8; //@line 15128
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 15129
  HEAP32[$27 >> 2] = $10; //@line 15130
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 15131
  HEAP32[$28 >> 2] = $12; //@line 15132
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 15133
  HEAP32[$29 >> 2] = $14; //@line 15134
  sp = STACKTOP; //@line 15135
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 15139
 ___async_unwind = 0; //@line 15140
 HEAP32[$ReallocAsyncCtx >> 2] = 88; //@line 15141
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 15142
 HEAP32[$23 >> 2] = $2; //@line 15143
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 15144
 HEAP32[$24 >> 2] = $4; //@line 15145
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 15146
 HEAP32[$25 >> 2] = $6; //@line 15147
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 15148
 HEAP32[$26 >> 2] = $8; //@line 15149
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 15150
 HEAP32[$27 >> 2] = $10; //@line 15151
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 15152
 HEAP32[$28 >> 2] = $12; //@line 15153
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 15154
 HEAP32[$29 >> 2] = $14; //@line 15155
 sp = STACKTOP; //@line 15156
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_65($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13425
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13429
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13431
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 13433
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13435
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 13437
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13439
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13441
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13443
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13445
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 13448
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13450
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 13454
   $27 = $6 + 24 | 0; //@line 13455
   $28 = $4 + 8 | 0; //@line 13456
   $29 = $6 + 54 | 0; //@line 13457
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 13487
    HEAP8[$14 >> 0] = 0; //@line 13488
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 13489
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 13490
    if (!___async) {
     ___async_unwind = 0; //@line 13493
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 171; //@line 13495
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 13497
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 13499
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 13501
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 13503
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13505
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 13507
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 13509
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 13511
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 13513
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 13515
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 13517
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 13519
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 13521
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 13524
    sp = STACKTOP; //@line 13525
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 13530
 HEAP8[$14 >> 0] = $12; //@line 13531
 return;
}
function _randLIB_seed_random() {
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $37 = 0, $38 = 0, $39 = 0, $43 = 0, $44 = 0, $45 = 0, $49 = 0, $50 = 0, $51 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0;
 $0 = _arm_random_seed_get() | 0; //@line 979
 $1 = _arm_random_seed_get() | 0; //@line 980
 $2 = 6216; //@line 981
 $9 = $0 ^ HEAP32[$2 + 4 >> 2]; //@line 988
 $10 = 6216; //@line 989
 HEAP32[$10 >> 2] = $1 ^ HEAP32[$2 >> 2]; //@line 991
 HEAP32[$10 + 4 >> 2] = $9; //@line 994
 $14 = _arm_random_seed_get() | 0; //@line 995
 $15 = _arm_random_seed_get() | 0; //@line 996
 $16 = 6224; //@line 997
 $22 = $15 ^ HEAP32[$16 >> 2]; //@line 1003
 $23 = $14 ^ HEAP32[$16 + 4 >> 2]; //@line 1004
 $24 = 6224; //@line 1005
 HEAP32[$24 >> 2] = $22; //@line 1007
 HEAP32[$24 + 4 >> 2] = $23; //@line 1010
 $28 = 6216; //@line 1011
 if (!((HEAP32[$28 >> 2] | 0) == ($22 | 0) ? (HEAP32[$28 + 4 >> 2] | 0) == ($23 | 0) : 0)) {
  return;
 }
 $37 = _i64Add($22 | 0, $23 | 0, 2135587861, -1640531527) | 0; //@line 1023
 $38 = tempRet0; //@line 1024
 $39 = _bitshift64Lshr($37 | 0, $38 | 0, 30) | 0; //@line 1025
 $43 = ___muldi3($39 ^ $37 | 0, tempRet0 ^ $38 | 0, 484763065, -1084733587) | 0; //@line 1029
 $44 = tempRet0; //@line 1030
 $45 = _bitshift64Lshr($43 | 0, $44 | 0, 27) | 0; //@line 1031
 $49 = ___muldi3($45 ^ $43 | 0, tempRet0 ^ $44 | 0, 321982955, -1798288965) | 0; //@line 1035
 $50 = tempRet0; //@line 1036
 $51 = _bitshift64Lshr($49 | 0, $50 | 0, 31) | 0; //@line 1037
 $55 = $49 ^ $22 ^ $51; //@line 1041
 $56 = $50 ^ $23 ^ tempRet0; //@line 1042
 $57 = 6216; //@line 1043
 HEAP32[$57 >> 2] = $55; //@line 1045
 HEAP32[$57 + 4 >> 2] = $56; //@line 1048
 $61 = _i64Add($22 | 0, $23 | 0, -23791574, 1013904242) | 0; //@line 1049
 $62 = tempRet0; //@line 1050
 $63 = _bitshift64Lshr($61 | 0, $62 | 0, 30) | 0; //@line 1051
 $67 = ___muldi3($63 ^ $61 | 0, tempRet0 ^ $62 | 0, 484763065, -1084733587) | 0; //@line 1055
 $68 = tempRet0; //@line 1056
 $69 = _bitshift64Lshr($67 | 0, $68 | 0, 27) | 0; //@line 1057
 $73 = ___muldi3($69 ^ $67 | 0, tempRet0 ^ $68 | 0, 321982955, -1798288965) | 0; //@line 1061
 $74 = tempRet0; //@line 1062
 $75 = _bitshift64Lshr($73 | 0, $74 | 0, 31) | 0; //@line 1063
 $79 = $75 ^ $73 ^ $22; //@line 1067
 $80 = tempRet0 ^ $74 ^ $23; //@line 1068
 $81 = 6224; //@line 1069
 HEAP32[$81 >> 2] = $79; //@line 1071
 HEAP32[$81 + 4 >> 2] = $80; //@line 1074
 if (!(($79 | $55 | 0) == 0 & ($80 | $56 | 0) == 0)) {
  return;
 }
 $90 = 6216; //@line 1083
 HEAP32[$90 >> 2] = 1; //@line 1085
 HEAP32[$90 + 4 >> 2] = 0; //@line 1088
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13309
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13313
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13315
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 13317
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13319
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 13321
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13323
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13325
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13327
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13329
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13331
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13333
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13335
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 13338
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 13339
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 13372
    HEAP8[$14 >> 0] = 0; //@line 13373
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 13374
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 13375
    if (!___async) {
     ___async_unwind = 0; //@line 13378
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 171; //@line 13380
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 13382
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 13384
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 13386
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 13388
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13390
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 13392
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 13394
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 13396
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 13398
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 13400
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 13402
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 13404
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 13406
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 13409
    sp = STACKTOP; //@line 13410
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 13415
 HEAP8[$14 >> 0] = $12; //@line 13416
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_81($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 255
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 261
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 263
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 265
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 267
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 269
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 270
 $15 = $$pre$i$i; //@line 271
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 272
 if (!$$pre$i$i) {
  $24 = HEAP32[$8 >> 2] | 0; //@line 275
  $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 68 >> 2] | 0; //@line 278
  $28 = HEAP32[$10 >> 2] | 0; //@line 279
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 280
  FUNCTION_TABLE_viiii[$27 & 7]($24, $28, 73, $12); //@line 281
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 284
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 285
   HEAP32[$29 >> 2] = $14; //@line 286
   sp = STACKTOP; //@line 287
   return;
  }
  ___async_unwind = 0; //@line 290
  HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 291
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 292
  HEAP32[$29 >> 2] = $14; //@line 293
  sp = STACKTOP; //@line 294
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 298
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 299
  FUNCTION_TABLE_vi[$18 & 255]($6); //@line 300
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 303
   $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 304
   HEAP32[$19 >> 2] = $6; //@line 305
   $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 306
   HEAP32[$20 >> 2] = $8; //@line 307
   $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 308
   HEAP32[$21 >> 2] = $10; //@line 309
   $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 310
   HEAP32[$22 >> 2] = $12; //@line 311
   $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 312
   HEAP32[$23 >> 2] = $14; //@line 313
   sp = STACKTOP; //@line 314
   return;
  }
  ___async_unwind = 0; //@line 317
  HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 318
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 319
  HEAP32[$19 >> 2] = $6; //@line 320
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 321
  HEAP32[$20 >> 2] = $8; //@line 322
  $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 323
  HEAP32[$21 >> 2] = $10; //@line 324
  $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 325
  HEAP32[$22 >> 2] = $12; //@line 326
  $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 327
  HEAP32[$23 >> 2] = $14; //@line 328
  sp = STACKTOP; //@line 329
  return;
 }
}
function __Z17recv_coap_messagev__async_cb_67($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $41 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13723
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13725
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13729
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13731
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13735
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13737
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13739
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13741
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13743
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13745
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13747
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13749
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13751
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13753
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13755
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13757
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13759
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 13761
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13763
 if (($AsyncRetVal | 0) <= 0) {
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 13766
  _printf(2705, $8) | 0; //@line 13767
  _free($6); //@line 13768
  return;
 }
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 13771
 _printf(2532, $2) | 0; //@line 13772
 $41 = HEAP32[1572] | 0; //@line 13773
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 13775
 $43 = _sn_coap_parser($41, $AsyncRetVal & 65535, $6, 556) | 0; //@line 13776
 if (!___async) {
  HEAP32[___async_retval >> 2] = $43; //@line 13780
  ___async_unwind = 0; //@line 13781
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 128; //@line 13783
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $14; //@line 13785
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $16; //@line 13787
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $18; //@line 13789
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $20; //@line 13791
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $22; //@line 13793
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $24; //@line 13795
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $26; //@line 13797
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $28; //@line 13799
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $30; //@line 13801
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $32; //@line 13803
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $34; //@line 13805
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $36; //@line 13807
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $38; //@line 13809
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $6; //@line 13811
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $12; //@line 13813
 sp = STACKTOP; //@line 13814
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 1526
 }
 ret = dest | 0; //@line 1529
 dest_end = dest + num | 0; //@line 1530
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 1534
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1535
   dest = dest + 1 | 0; //@line 1536
   src = src + 1 | 0; //@line 1537
   num = num - 1 | 0; //@line 1538
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 1540
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 1541
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 1543
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 1544
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 1545
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 1546
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 1547
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 1548
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 1549
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 1550
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 1551
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 1552
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 1553
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 1554
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 1555
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 1556
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 1557
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 1558
   dest = dest + 64 | 0; //@line 1559
   src = src + 64 | 0; //@line 1560
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 1563
   dest = dest + 4 | 0; //@line 1564
   src = src + 4 | 0; //@line 1565
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 1569
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1571
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 1572
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 1573
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 1574
   dest = dest + 4 | 0; //@line 1575
   src = src + 4 | 0; //@line 1576
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1581
  dest = dest + 1 | 0; //@line 1582
  src = src + 1 | 0; //@line 1583
 }
 return ret | 0; //@line 1585
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 13317
 STACKTOP = STACKTOP + 64 | 0; //@line 13318
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 13318
 $3 = sp; //@line 13319
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 13322
 } else {
  if (!$1) {
   $$2 = 0; //@line 13326
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13328
   $6 = ___dynamic_cast($1, 104, 88, 0) | 0; //@line 13329
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 160; //@line 13332
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 13334
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 13336
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 13338
    sp = STACKTOP; //@line 13339
    STACKTOP = sp; //@line 13340
    return 0; //@line 13340
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13342
   if (!$6) {
    $$2 = 0; //@line 13345
   } else {
    dest = $3 + 4 | 0; //@line 13348
    stop = dest + 52 | 0; //@line 13348
    do {
     HEAP32[dest >> 2] = 0; //@line 13348
     dest = dest + 4 | 0; //@line 13348
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 13349
    HEAP32[$3 + 8 >> 2] = $0; //@line 13351
    HEAP32[$3 + 12 >> 2] = -1; //@line 13353
    HEAP32[$3 + 48 >> 2] = 1; //@line 13355
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 13358
    $18 = HEAP32[$2 >> 2] | 0; //@line 13359
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13360
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 13361
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 161; //@line 13364
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 13366
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13368
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 13370
     sp = STACKTOP; //@line 13371
     STACKTOP = sp; //@line 13372
     return 0; //@line 13372
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13374
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 13381
     $$0 = 1; //@line 13382
    } else {
     $$0 = 0; //@line 13384
    }
    $$2 = $$0; //@line 13386
   }
  }
 }
 STACKTOP = sp; //@line 13390
 return $$2 | 0; //@line 13390
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 12664
 STACKTOP = STACKTOP + 128 | 0; //@line 12665
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 12665
 $4 = sp + 124 | 0; //@line 12666
 $5 = sp; //@line 12667
 dest = $5; //@line 12668
 src = 1308; //@line 12668
 stop = dest + 124 | 0; //@line 12668
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 12668
  dest = dest + 4 | 0; //@line 12668
  src = src + 4 | 0; //@line 12668
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 12674
   $$015 = 1; //@line 12674
   label = 4; //@line 12675
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 12678
   $$0 = -1; //@line 12679
  }
 } else {
  $$014 = $0; //@line 12682
  $$015 = $1; //@line 12682
  label = 4; //@line 12683
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 12687
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 12689
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 12691
  $14 = $5 + 20 | 0; //@line 12692
  HEAP32[$14 >> 2] = $$014; //@line 12693
  HEAP32[$5 + 44 >> 2] = $$014; //@line 12695
  $16 = $$014 + $$$015 | 0; //@line 12696
  $17 = $5 + 16 | 0; //@line 12697
  HEAP32[$17 >> 2] = $16; //@line 12698
  HEAP32[$5 + 28 >> 2] = $16; //@line 12700
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12701
  $19 = _vfprintf($5, $2, $3) | 0; //@line 12702
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 148; //@line 12705
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 12707
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 12709
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 12711
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 12713
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 12715
   sp = STACKTOP; //@line 12716
   STACKTOP = sp; //@line 12717
   return 0; //@line 12717
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12719
  if (!$$$015) {
   $$0 = $19; //@line 12722
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 12724
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 12729
   $$0 = $19; //@line 12730
  }
 }
 STACKTOP = sp; //@line 12733
 return $$0 | 0; //@line 12733
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14649
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14655
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 14659
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 14660
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14661
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 14662
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 177; //@line 14665
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 14667
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14669
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 14671
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 14673
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 14675
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 14677
    sp = STACKTOP; //@line 14678
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14681
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 14685
    $$0 = $0 + 24 | 0; //@line 14686
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14688
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 14689
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14694
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 14700
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 14703
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 178; //@line 14708
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 14710
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 14712
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 14714
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 14716
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 14718
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 14720
    sp = STACKTOP; //@line 14721
    return;
   }
  }
 } while (0);
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 595
 STACKTOP = STACKTOP + 48 | 0; //@line 596
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 596
 $$byval_copy = sp + 20 | 0; //@line 597
 $3 = sp; //@line 598
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 599
 $4 = __Znwj(76) | 0; //@line 600
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 36; //@line 603
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 605
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 607
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 609
  sp = STACKTOP; //@line 610
  STACKTOP = sp; //@line 611
  return 0; //@line 611
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 613
 dest = $4; //@line 614
 stop = dest + 76 | 0; //@line 614
 do {
  HEAP32[dest >> 2] = 0; //@line 614
  dest = dest + 4 | 0; //@line 614
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 615
 HEAP32[$3 >> 2] = 0; //@line 616
 HEAP32[$3 + 4 >> 2] = 0; //@line 616
 HEAP32[$3 + 8 >> 2] = 0; //@line 616
 HEAP32[$3 + 12 >> 2] = 0; //@line 616
 HEAP32[$3 + 16 >> 2] = 0; //@line 616
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 617
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 617
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 617
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 617
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 617
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 618
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 619
 if (($9 | 0) == -1) {
  $$0$i = -3001; //@line 622
  STACKTOP = sp; //@line 623
  return $$0$i | 0; //@line 623
 }
 HEAP32[$4 >> 2] = $9; //@line 625
 HEAP8[$4 + 8 >> 0] = 0; //@line 627
 HEAP32[$4 + 4 >> 2] = $2; //@line 629
 HEAP32[$1 >> 2] = $4; //@line 630
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 631
 _wait_ms(1); //@line 632
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 37; //@line 635
  sp = STACKTOP; //@line 636
  STACKTOP = sp; //@line 637
  return 0; //@line 637
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 639
 $$0$i = 0; //@line 640
 STACKTOP = sp; //@line 641
 return $$0$i | 0; //@line 641
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 198
 STACKTOP = STACKTOP + 48 | 0; //@line 199
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 199
 $$byval_copy = sp + 20 | 0; //@line 200
 $3 = sp; //@line 201
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 202
 $4 = __Znwj(76) | 0; //@line 203
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 23; //@line 206
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 208
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 210
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 212
  sp = STACKTOP; //@line 213
  STACKTOP = sp; //@line 214
  return 0; //@line 214
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 216
 dest = $4; //@line 217
 stop = dest + 76 | 0; //@line 217
 do {
  HEAP32[dest >> 2] = 0; //@line 217
  dest = dest + 4 | 0; //@line 217
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 218
 HEAP32[$3 >> 2] = 0; //@line 219
 HEAP32[$3 + 4 >> 2] = 0; //@line 219
 HEAP32[$3 + 8 >> 2] = 0; //@line 219
 HEAP32[$3 + 12 >> 2] = 0; //@line 219
 HEAP32[$3 + 16 >> 2] = 0; //@line 219
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 220
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 220
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 220
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 220
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 220
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 221
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 222
 if (($9 | 0) == -1) {
  $$0 = -3001; //@line 225
  STACKTOP = sp; //@line 226
  return $$0 | 0; //@line 226
 }
 HEAP32[$4 >> 2] = $9; //@line 228
 HEAP8[$4 + 8 >> 0] = 0; //@line 230
 HEAP32[$4 + 4 >> 2] = $2; //@line 232
 HEAP32[$1 >> 2] = $4; //@line 233
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 234
 _wait_ms(1); //@line 235
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 24; //@line 238
  sp = STACKTOP; //@line 239
  STACKTOP = sp; //@line 240
  return 0; //@line 240
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 242
 $$0 = 0; //@line 243
 STACKTOP = sp; //@line 244
 return $$0 | 0; //@line 244
}
function _sn_coap_builder_options_build_add_one_option($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$sink13 = 0, $$sink63 = 0, $$sink7 = 0, $14 = 0, $17 = 0, $23 = 0, $25 = 0, $34 = 0, $43 = 0, $47 = 0, $52 = 0, $54 = 0, $56 = 0, $8 = 0, $9 = 0, label = 0;
 if (!$2) {
  $$0 = 0; //@line 4489
  return $$0 | 0; //@line 4490
 }
 $8 = $3 - (HEAPU16[$4 >> 1] | 0) | 0; //@line 4494
 $9 = $1 & 65535; //@line 4495
 HEAP8[HEAP32[$0 >> 2] >> 0] = ($1 & 65535) < 13 ? $1 & 255 : ($1 & 65535) < 269 ? 13 : 14; //@line 4502
 $14 = $8 & 65535; //@line 4503
 do {
  if ($14 >>> 0 < 13) {
   $17 = HEAP32[$0 >> 2] | 0; //@line 4508
   HEAP8[$17 >> 0] = ($14 << 4) + (HEAPU8[$17 >> 0] | 0); //@line 4513
   $$sink7 = 1; //@line 4514
  } else {
   $23 = HEAP32[$0 >> 2] | 0; //@line 4517
   $25 = HEAPU8[$23 >> 0] | 0; //@line 4519
   if ($14 >>> 0 < 269) {
    HEAP8[$23 >> 0] = $25 + 208; //@line 4523
    HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = $8 + 243; //@line 4528
    $$sink7 = 2; //@line 4529
    break;
   } else {
    HEAP8[$23 >> 0] = $25 + 224; //@line 4534
    $34 = $8 + 65267 | 0; //@line 4535
    HEAP8[(HEAP32[$0 >> 2] | 0) + 2 >> 0] = $34; //@line 4539
    HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = $34 >>> 8; //@line 4544
    $$sink7 = 3; //@line 4545
    break;
   }
  }
 } while (0);
 $43 = (HEAP32[$0 >> 2] | 0) + $$sink7 | 0; //@line 4551
 HEAP32[$0 >> 2] = $43; //@line 4552
 if (($1 + -13 & 65535) < 256) {
  $$sink13 = 1; //@line 4557
  $$sink63 = $9 + 243 | 0; //@line 4557
  $52 = $43; //@line 4557
  label = 11; //@line 4558
 } else {
  if (($1 & 65535) > 268) {
   $47 = $9 + -269 | 0; //@line 4562
   HEAP8[$43 + 1 >> 0] = $47; //@line 4565
   $$sink13 = 2; //@line 4568
   $$sink63 = $47 >>> 8; //@line 4568
   $52 = HEAP32[$0 >> 2] | 0; //@line 4568
   label = 11; //@line 4569
  } else {
   $56 = $43; //@line 4571
  }
 }
 if ((label | 0) == 11) {
  HEAP8[$52 >> 0] = $$sink63; //@line 4576
  $54 = (HEAP32[$0 >> 2] | 0) + $$sink13 | 0; //@line 4578
  HEAP32[$0 >> 2] = $54; //@line 4579
  $56 = $54; //@line 4580
 }
 HEAP16[$4 >> 1] = $3; //@line 4583
 _memcpy($56 | 0, $2 | 0, $9 | 0) | 0; //@line 4584
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $9; //@line 4587
 $$0 = 1; //@line 4588
 return $$0 | 0; //@line 4589
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12827
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 12832
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 12837
  } else {
   $20 = $0 & 255; //@line 12839
   $21 = $0 & 255; //@line 12840
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 12846
   } else {
    $26 = $1 + 20 | 0; //@line 12848
    $27 = HEAP32[$26 >> 2] | 0; //@line 12849
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 12855
     HEAP8[$27 >> 0] = $20; //@line 12856
     $34 = $21; //@line 12857
    } else {
     label = 12; //@line 12859
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12864
     $32 = ___overflow($1, $0) | 0; //@line 12865
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 153; //@line 12868
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12870
      sp = STACKTOP; //@line 12871
      return 0; //@line 12872
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12874
      $34 = $32; //@line 12875
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 12880
   $$0 = $34; //@line 12881
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 12886
   $8 = $0 & 255; //@line 12887
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 12893
    $14 = HEAP32[$13 >> 2] | 0; //@line 12894
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 12900
     HEAP8[$14 >> 0] = $7; //@line 12901
     $$0 = $8; //@line 12902
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12906
   $19 = ___overflow($1, $0) | 0; //@line 12907
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 152; //@line 12910
    sp = STACKTOP; //@line 12911
    return 0; //@line 12912
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12914
    $$0 = $19; //@line 12915
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 12920
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 5045
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 5048
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 5051
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 5054
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 5060
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 5069
     $24 = $13 >>> 2; //@line 5070
     $$090 = 0; //@line 5071
     $$094 = $7; //@line 5071
     while (1) {
      $25 = $$094 >>> 1; //@line 5073
      $26 = $$090 + $25 | 0; //@line 5074
      $27 = $26 << 1; //@line 5075
      $28 = $27 + $23 | 0; //@line 5076
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 5079
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5083
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 5089
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 5097
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 5101
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 5107
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 5112
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 5115
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 5115
      }
     }
     $46 = $27 + $24 | 0; //@line 5118
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 5121
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5125
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 5137
     } else {
      $$4 = 0; //@line 5139
     }
    } else {
     $$4 = 0; //@line 5142
    }
   } else {
    $$4 = 0; //@line 5145
   }
  } else {
   $$4 = 0; //@line 5148
  }
 } while (0);
 return $$4 | 0; //@line 5151
}
function _main__async_cb_63($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13195
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13197
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13201
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13203
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13205
 HEAP32[1572] = HEAP32[___async_retval >> 2]; //@line 13208
 $12 = _calloc(44, 1) | 0; //@line 13209
 HEAP32[$12 + 32 >> 2] = 2832; //@line 13211
 HEAP16[$12 + 22 >> 1] = 6; //@line 13213
 HEAP32[$12 + 8 >> 2] = 1; //@line 13215
 HEAP16[$12 + 20 >> 1] = 7; //@line 13217
 $18 = (_sn_coap_builder_calc_needed_packet_data_size($12) | 0) & 65535; //@line 13219
 HEAP32[$2 >> 2] = $18; //@line 13220
 _printf(2839, $2) | 0; //@line 13221
 $19 = _malloc($18) | 0; //@line 13222
 _sn_coap_builder($19, $12) | 0; //@line 13223
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 13224
 $20 = __ZN9UDPSocket6sendtoEPKctPKvj(6232, 2876, 5683, $19, $18) | 0; //@line 13225
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 13228
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 13229
  HEAP32[$21 >> 2] = $6; //@line 13230
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 13231
  HEAP32[$22 >> 2] = $8; //@line 13232
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 13233
  HEAP32[$23 >> 2] = $12; //@line 13234
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 13235
  HEAP32[$24 >> 2] = $19; //@line 13236
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 13237
  HEAP32[$25 >> 2] = $10; //@line 13238
  sp = STACKTOP; //@line 13239
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 13243
 ___async_unwind = 0; //@line 13244
 HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 13245
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 13246
 HEAP32[$21 >> 2] = $6; //@line 13247
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 13248
 HEAP32[$22 >> 2] = $8; //@line 13249
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 13250
 HEAP32[$23 >> 2] = $12; //@line 13251
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 13252
 HEAP32[$24 >> 2] = $19; //@line 13253
 $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 13254
 HEAP32[$25 >> 2] = $10; //@line 13255
 sp = STACKTOP; //@line 13256
 return;
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5418
 $1 = $0 + 20 | 0; //@line 5419
 $3 = $0 + 28 | 0; //@line 5421
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 5427
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5428
   FUNCTION_TABLE_iiii[$7 & 15]($0, 0, 0) | 0; //@line 5429
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 145; //@line 5432
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5434
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5436
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 5438
    sp = STACKTOP; //@line 5439
    return 0; //@line 5440
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5442
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 5446
     break;
    } else {
     label = 5; //@line 5449
     break;
    }
   }
  } else {
   label = 5; //@line 5454
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 5458
  $14 = HEAP32[$13 >> 2] | 0; //@line 5459
  $15 = $0 + 8 | 0; //@line 5460
  $16 = HEAP32[$15 >> 2] | 0; //@line 5461
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 5469
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5470
    FUNCTION_TABLE_iiii[$22 & 15]($0, $14 - $16 | 0, 1) | 0; //@line 5471
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 146; //@line 5474
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5476
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 5478
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5480
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 5482
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 5484
     sp = STACKTOP; //@line 5485
     return 0; //@line 5486
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5488
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 5494
  HEAP32[$3 >> 2] = 0; //@line 5495
  HEAP32[$1 >> 2] = 0; //@line 5496
  HEAP32[$15 >> 2] = 0; //@line 5497
  HEAP32[$13 >> 2] = 0; //@line 5498
  $$0 = 0; //@line 5499
 }
 return $$0 | 0; //@line 5501
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 12911
 STACKTOP = STACKTOP + 32 | 0; //@line 12912
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12912
 $$byval_copy = sp; //@line 12913
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12915
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12917
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12919
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12921
 dest = $AsyncRetVal; //@line 12922
 stop = dest + 76 | 0; //@line 12922
 do {
  HEAP32[dest >> 2] = 0; //@line 12922
  dest = dest + 4 | 0; //@line 12922
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 12923
 HEAP32[$2 >> 2] = 0; //@line 12924
 HEAP32[$2 + 4 >> 2] = 0; //@line 12924
 HEAP32[$2 + 8 >> 2] = 0; //@line 12924
 HEAP32[$2 + 12 >> 2] = 0; //@line 12924
 HEAP32[$2 + 16 >> 2] = 0; //@line 12924
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 12925
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 12925
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 12925
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 12925
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 12925
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 12926
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 12927
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 12931
  STACKTOP = sp; //@line 12932
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 12934
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 12936
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 12938
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 12939
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 12940
 _wait_ms(1); //@line 12941
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 37; //@line 12944
  sp = STACKTOP; //@line 12945
  STACKTOP = sp; //@line 12946
  return;
 }
 ___async_unwind = 0; //@line 12948
 HEAP32[$ReallocAsyncCtx2 >> 2] = 37; //@line 12949
 sp = STACKTOP; //@line 12950
 STACKTOP = sp; //@line 12951
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15963
 STACKTOP = STACKTOP + 32 | 0; //@line 15964
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15964
 $$byval_copy = sp; //@line 15965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15967
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15969
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15971
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15973
 dest = $AsyncRetVal; //@line 15974
 stop = dest + 76 | 0; //@line 15974
 do {
  HEAP32[dest >> 2] = 0; //@line 15974
  dest = dest + 4 | 0; //@line 15974
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 15975
 HEAP32[$2 >> 2] = 0; //@line 15976
 HEAP32[$2 + 4 >> 2] = 0; //@line 15976
 HEAP32[$2 + 8 >> 2] = 0; //@line 15976
 HEAP32[$2 + 12 >> 2] = 0; //@line 15976
 HEAP32[$2 + 16 >> 2] = 0; //@line 15976
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 15977
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 15977
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 15977
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 15977
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 15977
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 15978
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 15979
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 15983
  STACKTOP = sp; //@line 15984
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 15986
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 15988
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 15990
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 15991
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15992
 _wait_ms(1); //@line 15993
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 24; //@line 15996
  sp = STACKTOP; //@line 15997
  STACKTOP = sp; //@line 15998
  return;
 }
 ___async_unwind = 0; //@line 16000
 HEAP32[$ReallocAsyncCtx2 >> 2] = 24; //@line 16001
 sp = STACKTOP; //@line 16002
 STACKTOP = sp; //@line 16003
 return;
}
function __ZN6Socket5closeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7140
 $1 = $0 + 8 | 0; //@line 7141
 $2 = HEAP32[$1 >> 2] | 0; //@line 7142
 $$pre = $0 + 4 | 0; //@line 7144
 do {
  if (!$2) {
   $$0 = 0; //@line 7147
  } else {
   $4 = HEAP32[$$pre >> 2] | 0; //@line 7149
   $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 68 >> 2] | 0; //@line 7152
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7153
   FUNCTION_TABLE_viiii[$7 & 7]($4, $2, 0, 0); //@line 7154
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 78; //@line 7157
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7159
    HEAP32[$AsyncCtx + 8 >> 2] = $$pre; //@line 7161
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7163
    sp = STACKTOP; //@line 7164
    return 0; //@line 7165
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7167
   $11 = HEAP32[$1 >> 2] | 0; //@line 7168
   HEAP32[$1 >> 2] = 0; //@line 7169
   $12 = HEAP32[$$pre >> 2] | 0; //@line 7170
   $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] | 0; //@line 7173
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7174
   $16 = FUNCTION_TABLE_iii[$15 & 7]($12, $11) | 0; //@line 7175
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 79; //@line 7178
    HEAP32[$AsyncCtx2 + 4 >> 2] = $$pre; //@line 7180
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7182
    sp = STACKTOP; //@line 7183
    return 0; //@line 7184
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7186
    $$0 = $16; //@line 7187
    break;
   }
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0; //@line 7192
 $21 = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0; //@line 7195
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7196
 FUNCTION_TABLE_vi[$21 & 255]($0); //@line 7197
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 80; //@line 7200
  HEAP32[$AsyncCtx5 + 4 >> 2] = $$0; //@line 7202
  sp = STACKTOP; //@line 7203
  return 0; //@line 7204
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7206
  return $$0 | 0; //@line 7207
 }
 return 0; //@line 7209
}
function __ZNK13SocketAddresscvbEv($0) {
 $0 = $0 | 0;
 var $12 = 0;
 switch (HEAP32[$0 + 40 >> 2] | 0) {
 case 1:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 8093
    return $12 | 0; //@line 8094
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 8100
    return $12 | 0; //@line 8101
   }
   if (!(HEAP8[$0 + 46 >> 0] | 0)) {
    return (HEAP8[$0 + 47 >> 0] | 0) != 0 | 0; //@line 8110
   } else {
    $12 = 1; //@line 8112
    return $12 | 0; //@line 8113
   }
   break;
  }
 case 2:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 8122
    return $12 | 0; //@line 8123
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 8129
    return $12 | 0; //@line 8130
   }
   if (HEAP8[$0 + 46 >> 0] | 0) {
    $12 = 1; //@line 8136
    return $12 | 0; //@line 8137
   }
   if (HEAP8[$0 + 47 >> 0] | 0) {
    $12 = 1; //@line 8143
    return $12 | 0; //@line 8144
   }
   if (HEAP8[$0 + 48 >> 0] | 0) {
    $12 = 1; //@line 8150
    return $12 | 0; //@line 8151
   }
   if (HEAP8[$0 + 49 >> 0] | 0) {
    $12 = 1; //@line 8157
    return $12 | 0; //@line 8158
   }
   if (HEAP8[$0 + 50 >> 0] | 0) {
    $12 = 1; //@line 8164
    return $12 | 0; //@line 8165
   }
   if (HEAP8[$0 + 51 >> 0] | 0) {
    $12 = 1; //@line 8171
    return $12 | 0; //@line 8172
   }
   if (HEAP8[$0 + 52 >> 0] | 0) {
    $12 = 1; //@line 8178
    return $12 | 0; //@line 8179
   }
   if (HEAP8[$0 + 53 >> 0] | 0) {
    $12 = 1; //@line 8185
    return $12 | 0; //@line 8186
   }
   if (HEAP8[$0 + 54 >> 0] | 0) {
    $12 = 1; //@line 8192
    return $12 | 0; //@line 8193
   }
   if (HEAP8[$0 + 55 >> 0] | 0) {
    $12 = 1; //@line 8199
    return $12 | 0; //@line 8200
   }
   if (HEAP8[$0 + 56 >> 0] | 0) {
    $12 = 1; //@line 8206
    return $12 | 0; //@line 8207
   }
   if (HEAP8[$0 + 57 >> 0] | 0) {
    $12 = 1; //@line 8213
    return $12 | 0; //@line 8214
   }
   if (HEAP8[$0 + 58 >> 0] | 0) {
    $12 = 1; //@line 8220
    return $12 | 0; //@line 8221
   }
   $12 = (HEAP8[$0 + 59 >> 0] | 0) != 0; //@line 8226
   return $12 | 0; //@line 8227
  }
 default:
  {
   $12 = 0; //@line 8231
   return $12 | 0; //@line 8232
  }
 }
 return 0; //@line 8235
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 14284
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14286
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14288
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14290
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14292
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14294
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14296
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 14300
  return;
 }
 $13 = $2 + 12 | 0; //@line 14303
 dest = $13; //@line 14304
 src = $4; //@line 14304
 stop = dest + 60 | 0; //@line 14304
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 14304
  dest = dest + 4 | 0; //@line 14304
  src = src + 4 | 0; //@line 14304
 } while ((dest | 0) < (stop | 0));
 HEAP16[$13 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 14304
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 14305
 _wait_ms(1); //@line 14306
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 31; //@line 14309
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 14310
  HEAP32[$14 >> 2] = $6; //@line 14311
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 14312
  HEAP32[$15 >> 2] = $2; //@line 14313
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 14314
  HEAP32[$16 >> 2] = $8; //@line 14315
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 14316
  HEAP32[$17 >> 2] = $10; //@line 14317
  sp = STACKTOP; //@line 14318
  return;
 }
 ___async_unwind = 0; //@line 14321
 HEAP32[$ReallocAsyncCtx4 >> 2] = 31; //@line 14322
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 14323
 HEAP32[$14 >> 2] = $6; //@line 14324
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 14325
 HEAP32[$15 >> 2] = $2; //@line 14326
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 14327
 HEAP32[$16 >> 2] = $8; //@line 14328
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 14329
 HEAP32[$17 >> 2] = $10; //@line 14330
 sp = STACKTOP; //@line 14331
 return;
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 5182
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 5188
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 5194
   } else {
    $7 = $1 & 255; //@line 5196
    $$03039 = $0; //@line 5197
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 5199
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 5204
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 5207
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 5212
      break;
     } else {
      $$03039 = $13; //@line 5215
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 5219
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 5220
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 5228
     $25 = $18; //@line 5228
     while (1) {
      $24 = $25 ^ $17; //@line 5230
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 5237
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 5240
      $25 = HEAP32[$31 >> 2] | 0; //@line 5241
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 5250
       break;
      } else {
       $$02936 = $31; //@line 5248
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 5255
    }
   } while (0);
   $38 = $1 & 255; //@line 5258
   $$1 = $$029$lcssa; //@line 5259
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 5261
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 5267
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 5270
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 5275
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 6508
 $2 = HEAP32[$1 >> 2] | 0; //@line 6509
 if (!$2) {
  label = 3; //@line 6512
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 6518
  } else {
   label = 4; //@line 6520
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 6524
  if (($7 | 0) < 0) {
   label = 4; //@line 6527
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 6529
   $$phi$trans$insert = $0 + 8 | 0; //@line 6531
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6533
    $$sink = $$pre; //@line 6534
    $26 = $$pre; //@line 6534
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6536
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 6538
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 6543
    $21 = $12; //@line 6545
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 6547
     $26 = $21; //@line 6547
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 6551
     $26 = $21; //@line 6551
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 6555
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 6557
   if (!$26) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6560
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6562
    $29 = $0 + 108 | 0; //@line 6564
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 6569
    $36 = $27; //@line 6571
   }
   $35 = $36 + -1 | 0; //@line 6573
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 6578
   } else {
    HEAP8[$35 >> 0] = $7; //@line 6581
    $$0 = $7; //@line 6582
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 6588
  $$0 = -1; //@line 6589
 }
 return $$0 | 0; //@line 6591
}
function __Z17recv_coap_messagev__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $36 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13628
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13630
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13632
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13634
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13636
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13638
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13642
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13646
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13650
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13652
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13656
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13658
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13662
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 13666
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13670
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 13671
 HEAP32[$2 + 8 >> 2] = $4 | -2147483648; //@line 13674
 HEAP32[$2 + 4 >> 2] = $6; //@line 13676
 $$pre = $2 + 11 | 0; //@line 13677
 _memcpy($AsyncRetVal | 0, $8 | 0, $6 | 0) | 0; //@line 13678
 HEAP8[$AsyncRetVal + $6 >> 0] = 0; //@line 13680
 HEAP32[$12 >> 2] = HEAPU16[$10 + 20 >> 1]; //@line 13684
 _printf(2567, $12) | 0; //@line 13685
 HEAP32[$16 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 13688
 _printf(2590, $16) | 0; //@line 13689
 HEAP32[$20 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 13692
 _printf(2613, $20) | 0; //@line 13693
 HEAP32[$26 >> 2] = HEAPU16[$24 >> 1]; //@line 13696
 _printf(2636, $26) | 0; //@line 13697
 HEAP32[$32 >> 2] = (HEAP8[$$pre >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $30; //@line 13702
 _printf(2659, $32) | 0; //@line 13703
 HEAP32[$36 >> 2] = HEAP32[$10 + 40 >> 2]; //@line 13706
 _printf(2682, $36) | 0; //@line 13707
 if ((HEAP8[$$pre >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 13712
 }
 _free($40); //@line 13714
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 4936
 $4 = HEAP32[$3 >> 2] | 0; //@line 4937
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 4944
   label = 5; //@line 4945
  } else {
   $$1 = 0; //@line 4947
  }
 } else {
  $12 = $4; //@line 4951
  label = 5; //@line 4952
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 4956
   $10 = HEAP32[$9 >> 2] | 0; //@line 4957
   $14 = $10; //@line 4960
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0; //@line 4965
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 4973
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 4977
       $$141 = $0; //@line 4977
       $$143 = $1; //@line 4977
       $31 = $14; //@line 4977
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 4980
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 4987
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0; //@line 4992
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 4995
      break L5;
     }
     $$139 = $$038; //@line 5001
     $$141 = $0 + $$038 | 0; //@line 5001
     $$143 = $1 - $$038 | 0; //@line 5001
     $31 = HEAP32[$9 >> 2] | 0; //@line 5001
    } else {
     $$139 = 0; //@line 5003
     $$141 = $0; //@line 5003
     $$143 = $1; //@line 5003
     $31 = $14; //@line 5003
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 5006
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 5009
   $$1 = $$139 + $$143 | 0; //@line 5011
  }
 } while (0);
 return $$1 | 0; //@line 5014
}
function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12991
 STACKTOP = STACKTOP + 32 | 0; //@line 12992
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12992
 $2 = sp; //@line 12993
 $3 = HEAP8[$1 >> 0] | 0; //@line 12994
 L1 : do {
  if (!($3 << 24 >> 24)) {
   label = 3; //@line 12998
  } else {
   if (!(HEAP8[$1 + 1 >> 0] | 0)) {
    label = 3; //@line 13004
   } else {
    _memset($2 | 0, 0, 32) | 0; //@line 13006
    $10 = HEAP8[$1 >> 0] | 0; //@line 13007
    if ($10 << 24 >> 24) {
     $$01824 = $1; //@line 13010
     $15 = $10; //@line 13010
     do {
      $19 = $2 + ((($15 & 255) >>> 5 & 255) << 2) | 0; //@line 13017
      HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($15 & 31); //@line 13020
      $$01824 = $$01824 + 1 | 0; //@line 13021
      $15 = HEAP8[$$01824 >> 0] | 0; //@line 13022
     } while ($15 << 24 >> 24 != 0);
    }
    $12 = HEAP8[$0 >> 0] | 0; //@line 13031
    if (!($12 << 24 >> 24)) {
     $$019$sink = $0; //@line 13034
    } else {
     $$01922 = $0; //@line 13036
     $25 = $12; //@line 13036
     while (1) {
      if (HEAP32[$2 + ((($25 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($25 & 31) | 0) {
       $$019$sink = $$01922; //@line 13048
       break L1;
      }
      $34 = $$01922 + 1 | 0; //@line 13051
      $25 = HEAP8[$34 >> 0] | 0; //@line 13052
      if (!($25 << 24 >> 24)) {
       $$019$sink = $34; //@line 13055
       break;
      } else {
       $$01922 = $34; //@line 13058
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0; //@line 13068
 }
 STACKTOP = sp; //@line 13073
 return $$019$sink - $0 | 0; //@line 13073
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_86($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 689
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 693
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 695
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 697
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 699
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 701
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 703
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 705
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 708
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 709
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 725
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 726
    if (!___async) {
     ___async_unwind = 0; //@line 729
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 175; //@line 731
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 733
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 735
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 737
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 739
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 741
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 743
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 745
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 747
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 750
    sp = STACKTOP; //@line 751
    return;
   }
  }
 } while (0);
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4822
 STACKTOP = STACKTOP + 16 | 0; //@line 4823
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4823
 $2 = sp; //@line 4824
 $3 = $1 & 255; //@line 4825
 HEAP8[$2 >> 0] = $3; //@line 4826
 $4 = $0 + 16 | 0; //@line 4827
 $5 = HEAP32[$4 >> 2] | 0; //@line 4828
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 4835
   label = 4; //@line 4836
  } else {
   $$0 = -1; //@line 4838
  }
 } else {
  $12 = $5; //@line 4841
  label = 4; //@line 4842
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 4846
   $10 = HEAP32[$9 >> 2] | 0; //@line 4847
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 4850
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 4857
     HEAP8[$10 >> 0] = $3; //@line 4858
     $$0 = $13; //@line 4859
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 4864
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4865
   $21 = FUNCTION_TABLE_iiii[$20 & 15]($0, $2, 1) | 0; //@line 4866
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 140; //@line 4869
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4871
    sp = STACKTOP; //@line 4872
    STACKTOP = sp; //@line 4873
    return 0; //@line 4873
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4875
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 4880
   } else {
    $$0 = -1; //@line 4882
   }
  }
 } while (0);
 STACKTOP = sp; //@line 4886
 return $$0 | 0; //@line 4886
}
function _sn_coap_protocol_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6452
 if (($0 | 0) == 0 | ($1 | 0) == 0 | ($2 | 0) == 0) {
  $$1 = 0; //@line 6459
  return $$1 | 0; //@line 6460
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6462
 $7 = FUNCTION_TABLE_ii[$0 & 15](44) | 0; //@line 6463
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 6466
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6468
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6470
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6472
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 6474
  sp = STACKTOP; //@line 6475
  return 0; //@line 6476
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6478
 if (!$7) {
  $$1 = 0; //@line 6481
  return $$1 | 0; //@line 6482
 }
 $13 = $7 + 16 | 0; //@line 6484
 HEAP32[$13 >> 2] = 0; //@line 6485
 HEAP32[$13 + 4 >> 2] = 0; //@line 6485
 HEAP32[$13 + 8 >> 2] = 0; //@line 6485
 HEAP32[$13 + 12 >> 2] = 0; //@line 6485
 HEAP32[$13 + 16 >> 2] = 0; //@line 6485
 HEAP32[$13 + 20 >> 2] = 0; //@line 6485
 HEAP32[$13 + 24 >> 2] = 0; //@line 6485
 HEAP32[$7 + 8 >> 2] = $2; //@line 6487
 HEAP32[$7 + 4 >> 2] = $1; //@line 6489
 HEAP32[$7 >> 2] = $0; //@line 6490
 HEAP32[$7 + 12 >> 2] = $3; //@line 6492
 HEAP8[$7 + 43 >> 0] = 1; //@line 6494
 _ns_list_init_($7 + 16 | 0); //@line 6496
 HEAP8[$7 + 34 >> 0] = 2; //@line 6498
 HEAP32[$7 + 36 >> 2] = 0; //@line 6500
 HEAP8[$7 + 41 >> 0] = 10; //@line 6502
 HEAP8[$7 + 40 >> 0] = 3; //@line 6504
 _randLIB_seed_random(); //@line 6505
 _randLIB_get_16bit() | 0; //@line 6506
 $$1 = $7; //@line 6507
 return $$1 | 0; //@line 6508
}
function _fflush__async_cb_16($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16124
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16126
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 16128
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 16132
  } else {
   $$02327 = $$02325; //@line 16134
   $$02426 = $AsyncRetVal; //@line 16134
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 16141
    } else {
     $16 = 0; //@line 16143
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 16155
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 16158
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 16161
     break L3;
    } else {
     $$02327 = $$023; //@line 16164
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 16167
   $13 = ___fflush_unlocked($$02327) | 0; //@line 16168
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 16172
    ___async_unwind = 0; //@line 16173
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 144; //@line 16175
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 16177
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 16179
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 16181
   sp = STACKTOP; //@line 16182
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 16186
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 16188
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 1610
 value = value & 255; //@line 1612
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 1615
   ptr = ptr + 1 | 0; //@line 1616
  }
  aligned_end = end & -4 | 0; //@line 1619
  block_aligned_end = aligned_end - 64 | 0; //@line 1620
  value4 = value | value << 8 | value << 16 | value << 24; //@line 1621
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 1624
   HEAP32[ptr + 4 >> 2] = value4; //@line 1625
   HEAP32[ptr + 8 >> 2] = value4; //@line 1626
   HEAP32[ptr + 12 >> 2] = value4; //@line 1627
   HEAP32[ptr + 16 >> 2] = value4; //@line 1628
   HEAP32[ptr + 20 >> 2] = value4; //@line 1629
   HEAP32[ptr + 24 >> 2] = value4; //@line 1630
   HEAP32[ptr + 28 >> 2] = value4; //@line 1631
   HEAP32[ptr + 32 >> 2] = value4; //@line 1632
   HEAP32[ptr + 36 >> 2] = value4; //@line 1633
   HEAP32[ptr + 40 >> 2] = value4; //@line 1634
   HEAP32[ptr + 44 >> 2] = value4; //@line 1635
   HEAP32[ptr + 48 >> 2] = value4; //@line 1636
   HEAP32[ptr + 52 >> 2] = value4; //@line 1637
   HEAP32[ptr + 56 >> 2] = value4; //@line 1638
   HEAP32[ptr + 60 >> 2] = value4; //@line 1639
   ptr = ptr + 64 | 0; //@line 1640
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 1644
   ptr = ptr + 4 | 0; //@line 1645
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 1650
  ptr = ptr + 1 | 0; //@line 1651
 }
 return end - num | 0; //@line 1653
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8598
 $4 = $0 + 8 | 0; //@line 8599
 $5 = $0 + 52 | 0; //@line 8600
 $6 = $0 + 4 | 0; //@line 8601
 $7 = $0 + 12 | 0; //@line 8602
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 8604
  if (!$8) {
   $$2 = -3005; //@line 8607
   label = 6; //@line 8608
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 8611
  $10 = HEAP32[$6 >> 2] | 0; //@line 8612
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 64 >> 2] | 0; //@line 8615
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 8616
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 8617
  if (___async) {
   label = 4; //@line 8620
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8623
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 8629
   label = 6; //@line 8630
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 89; //@line 8635
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 8637
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 8639
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 8641
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 8643
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 8645
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 8647
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 8649
  sp = STACKTOP; //@line 8650
  return 0; //@line 8651
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 8654
 }
 return 0; //@line 8656
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8531
 $4 = $0 + 8 | 0; //@line 8532
 $5 = $0 + 52 | 0; //@line 8533
 $6 = $0 + 4 | 0; //@line 8534
 $7 = $0 + 12 | 0; //@line 8535
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 8537
  if (!$8) {
   $$2 = -3005; //@line 8540
   label = 6; //@line 8541
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 8544
  $10 = HEAP32[$6 >> 2] | 0; //@line 8545
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 60 >> 2] | 0; //@line 8548
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 8549
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 8550
  if (___async) {
   label = 4; //@line 8553
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8556
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 8562
   label = 6; //@line 8563
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 88; //@line 8568
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 8570
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 8572
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 8574
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 8576
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 8578
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 8580
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 8582
  sp = STACKTOP; //@line 8583
  return 0; //@line 8584
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 8587
 }
 return 0; //@line 8589
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 14951
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14953
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14955
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14957
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14959
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14961
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14963
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14965
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 14969
  return;
 }
 $15 = $2 + 12 | 0; //@line 14972
 dest = $15; //@line 14973
 src = $4; //@line 14973
 stop = dest + 60 | 0; //@line 14973
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 14973
  dest = dest + 4 | 0; //@line 14973
  src = src + 4 | 0; //@line 14973
 } while ((dest | 0) < (stop | 0));
 HEAP16[$15 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 14973
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 14974
 _wait_ms(1); //@line 14975
 if (!___async) {
  ___async_unwind = 0; //@line 14978
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 44; //@line 14980
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $6; //@line 14982
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $8; //@line 14984
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $2; //@line 14986
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 14988
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $12; //@line 14990
 sp = STACKTOP; //@line 14991
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16025
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 16035
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 16035
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 16035
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 16039
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 16042
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 16045
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 16053
  } else {
   $20 = 0; //@line 16055
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 16065
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 16069
  HEAP32[___async_retval >> 2] = $$1; //@line 16071
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 16074
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 16075
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 16079
  ___async_unwind = 0; //@line 16080
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 144; //@line 16082
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 16084
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 16086
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 16088
 sp = STACKTOP; //@line 16089
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12774
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12776
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12778
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12780
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 12785
  } else {
   $9 = $4 + 4 | 0; //@line 12787
   $10 = HEAP32[$9 >> 2] | 0; //@line 12788
   $11 = $4 + 8 | 0; //@line 12789
   $12 = HEAP32[$11 >> 2] | 0; //@line 12790
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 12794
    HEAP32[$6 >> 2] = 0; //@line 12795
    HEAP32[$2 >> 2] = 0; //@line 12796
    HEAP32[$11 >> 2] = 0; //@line 12797
    HEAP32[$9 >> 2] = 0; //@line 12798
    $$0 = 0; //@line 12799
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 12806
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 12807
   FUNCTION_TABLE_iiii[$18 & 15]($4, $10 - $12 | 0, 1) | 0; //@line 12808
   if (!___async) {
    ___async_unwind = 0; //@line 12811
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 146; //@line 12813
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 12815
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 12817
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 12819
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 12821
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 12823
   sp = STACKTOP; //@line 12824
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 12829
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 906
 $5 = $0 + -4 | 0; //@line 907
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 92 >> 2] | 0; //@line 910
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 911
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($5, $1, $3, $4) | 0; //@line 912
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 915
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 917
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 919
  sp = STACKTOP; //@line 920
  return 0; //@line 921
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 923
 if (($2 | 0) != 0 & ($9 | 0) > -1) {
  $14 = $1 + 12 | 0; //@line 928
  dest = $2; //@line 929
  src = $14; //@line 929
  stop = dest + 60 | 0; //@line 929
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 929
   dest = dest + 4 | 0; //@line 929
   src = src + 4 | 0; //@line 929
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$14 + 60 >> 1] | 0; //@line 929
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 931
 _wait_ms(1); //@line 932
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 47; //@line 935
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 937
  sp = STACKTOP; //@line 938
  return 0; //@line 939
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 941
  return $9 | 0; //@line 942
 }
 return 0; //@line 944
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 626
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 630
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 632
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 634
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 636
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 638
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 640
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 643
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 644
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 653
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 654
    if (!___async) {
     ___async_unwind = 0; //@line 657
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 176; //@line 659
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 661
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 663
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 665
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 667
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 669
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 671
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 673
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 676
    sp = STACKTOP; //@line 677
    return;
   }
  }
 }
 return;
}
function _sn_coap_protocol_init__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $11 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15199
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15201
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15203
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15205
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15207
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 15210
  $21 = ___async_retval; //@line 15211
  HEAP32[$21 >> 2] = $$1; //@line 15212
  return;
 }
 $11 = $AsyncRetVal + 16 | 0; //@line 15215
 HEAP32[$11 >> 2] = 0; //@line 15216
 HEAP32[$11 + 4 >> 2] = 0; //@line 15216
 HEAP32[$11 + 8 >> 2] = 0; //@line 15216
 HEAP32[$11 + 12 >> 2] = 0; //@line 15216
 HEAP32[$11 + 16 >> 2] = 0; //@line 15216
 HEAP32[$11 + 20 >> 2] = 0; //@line 15216
 HEAP32[$11 + 24 >> 2] = 0; //@line 15216
 HEAP32[$AsyncRetVal + 8 >> 2] = $2; //@line 15218
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 15220
 HEAP32[$AsyncRetVal >> 2] = $6; //@line 15221
 HEAP32[$AsyncRetVal + 12 >> 2] = $8; //@line 15223
 HEAP8[$AsyncRetVal + 43 >> 0] = 1; //@line 15225
 _ns_list_init_($AsyncRetVal + 16 | 0); //@line 15227
 HEAP8[$AsyncRetVal + 34 >> 0] = 2; //@line 15229
 HEAP32[$AsyncRetVal + 36 >> 2] = 0; //@line 15231
 HEAP8[$AsyncRetVal + 41 >> 0] = 10; //@line 15233
 HEAP8[$AsyncRetVal + 40 >> 0] = 3; //@line 15235
 _randLIB_seed_random(); //@line 15236
 _randLIB_get_16bit() | 0; //@line 15237
 $$1 = $AsyncRetVal; //@line 15238
 $21 = ___async_retval; //@line 15239
 HEAP32[$21 >> 2] = $$1; //@line 15240
 return;
}
function __ZN9UDPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8287
 HEAP32[$0 >> 2] = 440; //@line 8288
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8289
 __ZN6Socket5closeEv($0) | 0; //@line 8290
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 81; //@line 8293
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 8295
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 8297
  sp = STACKTOP; //@line 8298
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8301
 HEAP32[$0 >> 2] = 404; //@line 8302
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 8304
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 8310
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8311
   FUNCTION_TABLE_vi[$8 & 255]($0 + 32 | 0); //@line 8312
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 82; //@line 8315
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8317
    sp = STACKTOP; //@line 8318
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8321
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 8327
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 8334
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8335
 FUNCTION_TABLE_vi[$15 & 255]($0 + 16 | 0); //@line 8336
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 83; //@line 8339
  sp = STACKTOP; //@line 8340
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8343
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 502
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 92 >> 2] | 0; //@line 505
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 506
 $8 = FUNCTION_TABLE_iiiii[$7 & 15]($0, $1, $3, $4) | 0; //@line 507
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 33; //@line 510
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 512
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 514
  sp = STACKTOP; //@line 515
  return 0; //@line 516
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 518
 if (($2 | 0) != 0 & ($8 | 0) > -1) {
  $13 = $1 + 12 | 0; //@line 523
  dest = $2; //@line 524
  src = $13; //@line 524
  stop = dest + 60 | 0; //@line 524
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 524
   dest = dest + 4 | 0; //@line 524
   src = src + 4 | 0; //@line 524
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$13 + 60 >> 1] | 0; //@line 524
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 526
 _wait_ms(1); //@line 527
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 34; //@line 530
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 532
  sp = STACKTOP; //@line 533
  return 0; //@line 534
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 536
  return $8 | 0; //@line 537
 }
 return 0; //@line 539
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9873
 STACKTOP = STACKTOP + 48 | 0; //@line 9874
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9874
 $$byval_copy = sp + 20 | 0; //@line 9875
 $4 = sp; //@line 9876
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9877
 $5 = __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $4, 1, $3) | 0; //@line 9878
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 103; //@line 9881
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 9883
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 9885
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 9887
  sp = STACKTOP; //@line 9888
  STACKTOP = sp; //@line 9889
  return 0; //@line 9889
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9891
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 9892
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 9892
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 9892
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 9892
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 9892
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 9893
  STACKTOP = sp; //@line 9896
  return (($5 | 0) < 0 ? $5 : 0) | 0; //@line 9896
 }
 return 0; //@line 9898
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 12432
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 12437
    $$0 = 1; //@line 12438
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 12451
     $$0 = 1; //@line 12452
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12456
     $$0 = -1; //@line 12457
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 12467
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 12471
    $$0 = 2; //@line 12472
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 12484
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 12490
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 12494
    $$0 = 3; //@line 12495
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 12505
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 12511
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 12517
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 12521
    $$0 = 4; //@line 12522
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12526
    $$0 = -1; //@line 12527
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 12532
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_69($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14141
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14143
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14145
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14147
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14149
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 14154
  return;
 }
 dest = $2 + 4 | 0; //@line 14158
 stop = dest + 52 | 0; //@line 14158
 do {
  HEAP32[dest >> 2] = 0; //@line 14158
  dest = dest + 4 | 0; //@line 14158
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 14159
 HEAP32[$2 + 8 >> 2] = $4; //@line 14161
 HEAP32[$2 + 12 >> 2] = -1; //@line 14163
 HEAP32[$2 + 48 >> 2] = 1; //@line 14165
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 14168
 $16 = HEAP32[$6 >> 2] | 0; //@line 14169
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 14170
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 14171
 if (!___async) {
  ___async_unwind = 0; //@line 14174
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 161; //@line 14176
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 14178
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 14180
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 14182
 sp = STACKTOP; //@line 14183
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_9($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15462
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15466
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 404; //@line 15467
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 15469
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 15474
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 15475
  FUNCTION_TABLE_vi[$10 & 255]($4 + 32 | 0); //@line 15476
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 82; //@line 15479
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 15480
   HEAP32[$11 >> 2] = $4; //@line 15481
   sp = STACKTOP; //@line 15482
   return;
  }
  ___async_unwind = 0; //@line 15485
  HEAP32[$ReallocAsyncCtx >> 2] = 82; //@line 15486
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 15487
  HEAP32[$11 >> 2] = $4; //@line 15488
  sp = STACKTOP; //@line 15489
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 15493
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 15500
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15501
 FUNCTION_TABLE_vi[$17 & 255]($4 + 16 | 0); //@line 15502
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 15505
  sp = STACKTOP; //@line 15506
  return;
 }
 ___async_unwind = 0; //@line 15509
 HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 15510
 sp = STACKTOP; //@line 15511
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_87($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 762
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 766
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 768
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 770
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 772
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 774
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 777
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 778
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 784
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 785
   if (!___async) {
    ___async_unwind = 0; //@line 788
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 790
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 792
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 794
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 796
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 798
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 800
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 802
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 805
   sp = STACKTOP; //@line 806
   return;
  }
 }
 return;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 11316
  $8 = $0; //@line 11316
  $9 = $1; //@line 11316
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11318
   $$0914 = $$0914 + -1 | 0; //@line 11322
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 11323
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11324
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 11332
   }
  }
  $$010$lcssa$off0 = $8; //@line 11337
  $$09$lcssa = $$0914; //@line 11337
 } else {
  $$010$lcssa$off0 = $0; //@line 11339
  $$09$lcssa = $2; //@line 11339
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 11343
 } else {
  $$012 = $$010$lcssa$off0; //@line 11345
  $$111 = $$09$lcssa; //@line 11345
  while (1) {
   $26 = $$111 + -1 | 0; //@line 11350
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 11351
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 11355
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 11358
    $$111 = $26; //@line 11358
   }
  }
 }
 return $$1$lcssa | 0; //@line 11362
}
function _randLIB_get_16bit() {
 var $0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $42 = 0, $5 = 0, $6 = 0, $8 = 0;
 $0 = 6216; //@line 1096
 $2 = HEAP32[$0 >> 2] | 0; //@line 1098
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 1101
 $6 = 6224; //@line 1102
 $8 = HEAP32[$6 >> 2] | 0; //@line 1104
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 1107
 $12 = _i64Add($8 | 0, $11 | 0, $2 | 0, $5 | 0) | 0; //@line 1108
 $13 = tempRet0; //@line 1109
 $14 = $8 ^ $2; //@line 1110
 $15 = $11 ^ $5; //@line 1111
 $16 = _bitshift64Shl($2 | 0, $5 | 0, 55) | 0; //@line 1112
 $17 = tempRet0; //@line 1113
 $18 = _bitshift64Lshr($2 | 0, $5 | 0, 9) | 0; //@line 1114
 $23 = (tempRet0 | $17) ^ $15; //@line 1119
 $24 = _bitshift64Shl($14 | 0, $15 | 0, 14) | 0; //@line 1120
 $28 = 6216; //@line 1124
 HEAP32[$28 >> 2] = ($18 | $16) ^ $14 ^ $24; //@line 1126
 HEAP32[$28 + 4 >> 2] = $23 ^ tempRet0; //@line 1129
 $32 = _bitshift64Shl($14 | 0, $15 | 0, 36) | 0; //@line 1130
 $33 = tempRet0; //@line 1131
 $34 = _bitshift64Lshr($14 | 0, $15 | 0, 28) | 0; //@line 1132
 $38 = 6224; //@line 1136
 HEAP32[$38 >> 2] = $34 | $32; //@line 1138
 HEAP32[$38 + 4 >> 2] = tempRet0 | $33; //@line 1141
 $42 = _bitshift64Lshr($12 | 0, $13 | 0, 48) | 0; //@line 1142
 return $42 & 65535 | 0; //@line 1145
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14433
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14435
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14439
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14441
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14443
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14445
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 14449
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 14452
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 14453
   if (!___async) {
    ___async_unwind = 0; //@line 14456
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 178; //@line 14458
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 14460
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 14462
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 14464
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 14466
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 14468
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 14470
   sp = STACKTOP; //@line 14471
   return;
  }
 }
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15295
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15297
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15301
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 15306
  dest = $2; //@line 15307
  src = $8; //@line 15307
  stop = dest + 60 | 0; //@line 15307
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15307
   dest = dest + 4 | 0; //@line 15307
   src = src + 4 | 0; //@line 15307
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 15307
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 15309
 _wait_ms(1); //@line 15310
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 47; //@line 15313
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 15314
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 15315
  sp = STACKTOP; //@line 15316
  return;
 }
 ___async_unwind = 0; //@line 15319
 HEAP32[$ReallocAsyncCtx2 >> 2] = 47; //@line 15320
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 15321
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 15322
 sp = STACKTOP; //@line 15323
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 4688
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 4693
   label = 4; //@line 4694
  } else {
   $$01519 = $0; //@line 4696
   $23 = $1; //@line 4696
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 4701
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 4704
    $23 = $6; //@line 4705
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 4709
     label = 4; //@line 4710
     break;
    } else {
     $$01519 = $6; //@line 4713
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 4719
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 4721
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 4729
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 4737
  } else {
   $$pn = $$0; //@line 4739
   while (1) {
    $19 = $$pn + 1 | 0; //@line 4741
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 4745
     break;
    } else {
     $$pn = $19; //@line 4748
    }
   }
  }
  $$sink = $$1$lcssa; //@line 4753
 }
 return $$sink - $1 | 0; //@line 4756
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 14632
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14634
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14638
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 14643
  dest = $2; //@line 14644
  src = $8; //@line 14644
  stop = dest + 60 | 0; //@line 14644
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 14644
   dest = dest + 4 | 0; //@line 14644
   src = src + 4 | 0; //@line 14644
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 14644
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 14646
 _wait_ms(1); //@line 14647
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 34; //@line 14650
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 14651
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 14652
  sp = STACKTOP; //@line 14653
  return;
 }
 ___async_unwind = 0; //@line 14656
 HEAP32[$ReallocAsyncCtx2 >> 2] = 34; //@line 14657
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 14658
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 14659
 sp = STACKTOP; //@line 14660
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 13564
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 13571
   $10 = $1 + 16 | 0; //@line 13572
   $11 = HEAP32[$10 >> 2] | 0; //@line 13573
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 13576
    HEAP32[$1 + 24 >> 2] = $4; //@line 13578
    HEAP32[$1 + 36 >> 2] = 1; //@line 13580
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 13590
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 13595
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 13598
    HEAP8[$1 + 54 >> 0] = 1; //@line 13600
    break;
   }
   $21 = $1 + 24 | 0; //@line 13603
   $22 = HEAP32[$21 >> 2] | 0; //@line 13604
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 13607
    $28 = $4; //@line 13608
   } else {
    $28 = $22; //@line 13610
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 13619
   }
  }
 } while (0);
 return;
}
function __ZN6Socket5closeEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14203
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14205
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14207
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14209
 $7 = HEAP32[$2 >> 2] | 0; //@line 14210
 HEAP32[$2 >> 2] = 0; //@line 14211
 $8 = HEAP32[$4 >> 2] | 0; //@line 14212
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0; //@line 14215
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 14216
 $12 = FUNCTION_TABLE_iii[$11 & 7]($8, $7) | 0; //@line 14217
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 79; //@line 14220
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 14221
  HEAP32[$13 >> 2] = $4; //@line 14222
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 14223
  HEAP32[$14 >> 2] = $6; //@line 14224
  sp = STACKTOP; //@line 14225
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 14229
 ___async_unwind = 0; //@line 14230
 HEAP32[$ReallocAsyncCtx2 >> 2] = 79; //@line 14231
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 14232
 HEAP32[$13 >> 2] = $4; //@line 14233
 $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 14234
 HEAP32[$14 >> 2] = $6; //@line 14235
 sp = STACKTOP; //@line 14236
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12926
 $1 = HEAP32[172] | 0; //@line 12927
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 12933
 } else {
  $19 = 0; //@line 12935
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 12941
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 12947
    $12 = HEAP32[$11 >> 2] | 0; //@line 12948
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 12954
     HEAP8[$12 >> 0] = 10; //@line 12955
     $22 = 0; //@line 12956
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12960
   $17 = ___overflow($1, 10) | 0; //@line 12961
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 154; //@line 12964
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 12966
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 12968
    sp = STACKTOP; //@line 12969
    return 0; //@line 12970
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12972
    $22 = $17 >> 31; //@line 12974
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 12981
 }
 return $22 | 0; //@line 12983
}
function __ZN6Socket4openEP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14677
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14679
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14681
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14683
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14685
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14687
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14689
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14691
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14693
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 14694
 $16 = FUNCTION_TABLE_iiii[$6 & 15]($2, $4, $AsyncRetVal) | 0; //@line 14695
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 14699
  ___async_unwind = 0; //@line 14700
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 69; //@line 14702
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 14704
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 14706
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $4; //@line 14708
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 14710
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 14712
 sp = STACKTOP; //@line 14713
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_76($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14481
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14487
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14489
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14491
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14493
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 14498
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 14500
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 14501
 if (!___async) {
  ___async_unwind = 0; //@line 14504
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 178; //@line 14506
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 14508
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 14510
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 14512
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 14514
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 14516
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 14518
 sp = STACKTOP; //@line 14519
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $14 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6525
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 6528
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6529
 $7 = FUNCTION_TABLE_ii[$6 & 15]($0) | 0; //@line 6530
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 6533
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6535
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6537
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 6539
  sp = STACKTOP; //@line 6540
  return 0; //@line 6541
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6543
 $13 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 6546
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6547
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($7, $1, $2, $3) | 0; //@line 6548
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 61; //@line 6551
  sp = STACKTOP; //@line 6552
  return 0; //@line 6553
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6555
  return $14 | 0; //@line 6556
 }
 return 0; //@line 6558
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14556
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14558
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14560
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14562
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 14564
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 14566
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 5775; //@line 14571
  HEAP32[$4 + 4 >> 2] = $6; //@line 14573
  _abort_message(5684, $4); //@line 14574
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 14577
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 14580
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 14581
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 14582
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 14586
  ___async_unwind = 0; //@line 14587
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 157; //@line 14589
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 14591
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 14593
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 14595
 sp = STACKTOP; //@line 14596
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15789
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15791
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15793
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15797
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 15801
  label = 4; //@line 15802
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 15807
   label = 4; //@line 15808
  } else {
   $$037$off039 = 3; //@line 15810
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 15814
  $17 = $8 + 40 | 0; //@line 15815
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 15818
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 15828
    $$037$off039 = $$037$off038; //@line 15829
   } else {
    $$037$off039 = $$037$off038; //@line 15831
   }
  } else {
   $$037$off039 = $$037$off038; //@line 15834
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 15837
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 13423
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 13432
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 13437
      HEAP32[$13 >> 2] = $2; //@line 13438
      $19 = $1 + 40 | 0; //@line 13439
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 13442
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 13452
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 13456
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 13463
    }
   }
  }
 } while (0);
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 12552
 while (1) {
  if ((HEAPU8[3747 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 12559
   break;
  }
  $7 = $$016 + 1 | 0; //@line 12562
  if (($7 | 0) == 87) {
   $$01214 = 3835; //@line 12565
   $$115 = 87; //@line 12565
   label = 5; //@line 12566
   break;
  } else {
   $$016 = $7; //@line 12569
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 3835; //@line 12575
  } else {
   $$01214 = 3835; //@line 12577
   $$115 = $$016; //@line 12577
   label = 5; //@line 12578
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 12583
   $$113 = $$01214; //@line 12584
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 12588
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 12595
   if (!$$115) {
    $$012$lcssa = $$113; //@line 12598
    break;
   } else {
    $$01214 = $$113; //@line 12601
    label = 5; //@line 12602
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 12609
}
function _main__async_cb_59($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13070
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13072
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13074
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13076
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13078
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13080
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13082
 $15 = HEAP32[(HEAP32[$2 >> 2] | 0) + 60 >> 2] | 0; //@line 13085
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 13086
 $16 = FUNCTION_TABLE_ii[$15 & 15]($2) | 0; //@line 13087
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 13091
  ___async_unwind = 0; //@line 13092
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 13094
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $4; //@line 13096
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 13098
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 13100
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 13102
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 13104
 sp = STACKTOP; //@line 13105
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10261
 $2 = $0 + 12 | 0; //@line 10263
 $3 = HEAP32[$2 >> 2] | 0; //@line 10264
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10268
   _mbed_assert_internal(2421, 2426, 528); //@line 10269
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 121; //@line 10272
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 10274
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10276
    sp = STACKTOP; //@line 10277
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10280
    $8 = HEAP32[$2 >> 2] | 0; //@line 10282
    break;
   }
  } else {
   $8 = $3; //@line 10286
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 10289
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10291
 FUNCTION_TABLE_vi[$7 & 255]($0); //@line 10292
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 122; //@line 10295
  sp = STACKTOP; //@line 10296
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10299
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7048
 $1 = $0 + 12 | 0; //@line 7049
 $2 = HEAP32[$1 >> 2] | 0; //@line 7050
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7054
   _mbed_assert_internal(2421, 2426, 528); //@line 7055
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 75; //@line 7058
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 7060
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7062
    sp = STACKTOP; //@line 7063
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7066
    $7 = HEAP32[$1 >> 2] | 0; //@line 7068
    break;
   }
  } else {
   $7 = $2; //@line 7072
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 7075
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7076
 FUNCTION_TABLE_vi[$6 & 255]($0); //@line 7077
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 76; //@line 7080
  sp = STACKTOP; //@line 7081
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7084
  return;
 }
}
function __ZN6SocketD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6771
 HEAP32[$0 >> 2] = 404; //@line 6772
 $2 = HEAP32[$0 + 44 >> 2] | 0; //@line 6774
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 6780
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6781
   FUNCTION_TABLE_vi[$6 & 255]($0 + 32 | 0); //@line 6782
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 66; //@line 6785
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6787
    sp = STACKTOP; //@line 6788
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6791
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 28 >> 2] | 0; //@line 6797
 if (!$9) {
  return;
 }
 $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 6804
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6805
 FUNCTION_TABLE_vi[$13 & 255]($0 + 16 | 0); //@line 6806
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 67; //@line 6809
  sp = STACKTOP; //@line 6810
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6813
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13256
 STACKTOP = STACKTOP + 16 | 0; //@line 13257
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13257
 $1 = sp; //@line 13258
 HEAP32[$1 >> 2] = $varargs; //@line 13259
 $2 = HEAP32[140] | 0; //@line 13260
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13261
 _vfprintf($2, $0, $1) | 0; //@line 13262
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 158; //@line 13265
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13267
  sp = STACKTOP; //@line 13268
  STACKTOP = sp; //@line 13269
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13271
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13272
 _fputc(10, $2) | 0; //@line 13273
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 159; //@line 13276
  sp = STACKTOP; //@line 13277
  STACKTOP = sp; //@line 13278
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13280
  _abort(); //@line 13281
 }
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15914
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15916
 $6 = HEAP32[$0 + 16 >> 2] | 0; //@line 15920
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 15922
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 15924
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$0 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 15930
 } else {
  $$0 = 0; //@line 15932
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15934
 $14 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($6, $8, $10, $$0) | 0; //@line 15935
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 15938
  sp = STACKTOP; //@line 15939
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 15943
 ___async_unwind = 0; //@line 15944
 HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 15945
 sp = STACKTOP; //@line 15946
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12383
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12383
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12384
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 12385
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 12394
    $$016 = $9; //@line 12397
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 12397
   } else {
    $$016 = $0; //@line 12399
    $storemerge = 0; //@line 12399
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 12401
   $$0 = $$016; //@line 12402
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 12406
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 12412
   HEAP32[tempDoublePtr >> 2] = $2; //@line 12415
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 12415
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 12416
  }
 }
 return +$$0;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6564
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 6567
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6568
 $5 = FUNCTION_TABLE_ii[$4 & 15]($0) | 0; //@line 6569
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 62; //@line 6572
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6574
  sp = STACKTOP; //@line 6575
  return 0; //@line 6576
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6578
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] | 0; //@line 6581
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6582
 $10 = FUNCTION_TABLE_iii[$9 & 7]($5, $1) | 0; //@line 6583
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 63; //@line 6586
  sp = STACKTOP; //@line 6587
  return 0; //@line 6588
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6590
  return $10 | 0; //@line 6591
 }
 return 0; //@line 6593
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12990
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12992
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12994
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12996
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12998
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13000
 $12 = __Z18nsapi_create_stackP12NetworkStack(HEAP32[___async_retval >> 2] | 0) | 0; //@line 13003
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 13004
 __ZN6Socket4openEP12NetworkStack(6232, $12) | 0; //@line 13005
 if (!___async) {
  ___async_unwind = 0; //@line 13008
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 133; //@line 13010
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 13012
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 13014
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 13016
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 13018
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 13020
 sp = STACKTOP; //@line 13021
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14868
 STACKTOP = STACKTOP + 16 | 0; //@line 14869
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14869
 $3 = sp; //@line 14870
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 14872
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 14875
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14876
 $8 = FUNCTION_TABLE_iiii[$7 & 15]($0, $1, $3) | 0; //@line 14877
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 182; //@line 14880
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14882
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14884
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14886
  sp = STACKTOP; //@line 14887
  STACKTOP = sp; //@line 14888
  return 0; //@line 14888
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14890
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 14894
 }
 STACKTOP = sp; //@line 14896
 return $8 & 1 | 0; //@line 14896
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, sp = 0;
 sp = STACKTOP; //@line 12859
 STACKTOP = STACKTOP + 32 | 0; //@line 12860
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12860
 $$byval_copy = sp; //@line 12861
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12863
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12865
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12869
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 12870
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 12870
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 12870
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 12870
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 12870
 __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 12871
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) < 0 ? $AsyncRetVal : 0; //@line 12875
 STACKTOP = sp; //@line 12876
 return;
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 9300
  $5 = ($1 | 0) > 2046; //@line 9302
  $7 = $1 + -2046 | 0; //@line 9304
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 9309
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 9309
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 9313
   $12 = ($1 | 0) < -2044; //@line 9315
   $14 = $1 + 2044 | 0; //@line 9317
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 9322
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 9322
  } else {
   $$0 = $0; //@line 9324
   $$020 = $1; //@line 9324
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 9328
 $18 = tempRet0; //@line 9329
 HEAP32[tempDoublePtr >> 2] = $17; //@line 9330
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 9330
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13779
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 13785
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 13788
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 13791
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13792
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 13793
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 164; //@line 13796
    sp = STACKTOP; //@line 13797
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13800
    break;
   }
  }
 } while (0);
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8402
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8410
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8412
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8414
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8416
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8418
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8420
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8422
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 8433
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 8434
 HEAP32[$10 >> 2] = 0; //@line 8435
 HEAP32[$12 >> 2] = 0; //@line 8436
 HEAP32[$14 >> 2] = 0; //@line 8437
 HEAP32[$2 >> 2] = 0; //@line 8438
 $33 = HEAP32[$16 >> 2] | 0; //@line 8439
 HEAP32[$16 >> 2] = $33 | $18; //@line 8444
 if ($20 | 0) {
  ___unlockfile($22); //@line 8447
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 8450
 return;
}
function _main__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 13158
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13160
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13162
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13164
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13166
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13168
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 13169
 $11 = _sn_coap_protocol_init(12, 134, 10, 14) | 0; //@line 13170
 if (!___async) {
  HEAP32[___async_retval >> 2] = $11; //@line 13174
  ___async_unwind = 0; //@line 13175
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 135; //@line 13177
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 13179
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 13181
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 13183
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 13185
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 13187
 sp = STACKTOP; //@line 13188
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_82($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 336
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 344
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 346
 $11 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 347
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 68 >> 2] | 0; //@line 350
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 351
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 352
 FUNCTION_TABLE_viiii[$14 & 7]($11, $15, 73, $8); //@line 353
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 356
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 357
  HEAP32[$16 >> 2] = $10; //@line 358
  sp = STACKTOP; //@line 359
  return;
 }
 ___async_unwind = 0; //@line 362
 HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 363
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 364
 HEAP32[$16 >> 2] = $10; //@line 365
 sp = STACKTOP; //@line 366
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14778
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 14780
 $8 = $7 >> 8; //@line 14781
 if (!($7 & 1)) {
  $$0 = $8; //@line 14785
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 14790
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 14792
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 14795
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14800
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 14801
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 180; //@line 14804
  sp = STACKTOP; //@line 14805
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14808
  return;
 }
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13078
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 13080
 while (1) {
  $2 = _malloc($$) | 0; //@line 13082
  if ($2 | 0) {
   $$lcssa = $2; //@line 13085
   label = 7; //@line 13086
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 13089
  if (!$4) {
   $$lcssa = 0; //@line 13092
   label = 7; //@line 13093
   break;
  }
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13096
  FUNCTION_TABLE_v[$4 & 3](); //@line 13097
  if (___async) {
   label = 5; //@line 13100
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13103
 }
 if ((label | 0) == 5) {
  HEAP32[$AsyncCtx >> 2] = 155; //@line 13106
  HEAP32[$AsyncCtx + 4 >> 2] = $$; //@line 13108
  sp = STACKTOP; //@line 13109
  return 0; //@line 13110
 } else if ((label | 0) == 7) {
  return $$lcssa | 0; //@line 13113
 }
 return 0; //@line 13115
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13948
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 13954
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 13957
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 13960
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13961
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 13962
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 167; //@line 13965
    sp = STACKTOP; //@line 13966
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13969
    break;
   }
  }
 } while (0);
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12343
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12345
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12347
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12349
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12351
 $10 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 12 >> 2] | 0; //@line 12354
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 12355
 $11 = FUNCTION_TABLE_iiiii[$10 & 15]($AsyncRetVal, $2, $4, $6) | 0; //@line 12356
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 61; //@line 12359
  sp = STACKTOP; //@line 12360
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 12364
 ___async_unwind = 0; //@line 12365
 HEAP32[$ReallocAsyncCtx2 >> 2] = 61; //@line 12366
 sp = STACKTOP; //@line 12367
 return;
}
function ___dynamic_cast__async_cb_66($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13562
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13564
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13566
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13572
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 13587
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 13603
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 13608
    break;
   }
  default:
   {
    $$0 = 0; //@line 13612
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 13617
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14820
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 14822
 $7 = $6 >> 8; //@line 14823
 if (!($6 & 1)) {
  $$0 = $7; //@line 14827
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 14832
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 14834
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 14837
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14842
 FUNCTION_TABLE_viiiii[$16 & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 14843
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 181; //@line 14846
  sp = STACKTOP; //@line 14847
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14850
  return;
 }
}
function __ZN6Socket5closeEv__async_cb_70($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14242
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14246
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14248
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 14249
 $8 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; //@line 14252
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14253
 FUNCTION_TABLE_vi[$8 & 255]($4); //@line 14254
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 14257
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 14258
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 14259
  sp = STACKTOP; //@line 14260
  return;
 }
 ___async_unwind = 0; //@line 14263
 HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 14264
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 14265
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 14266
 sp = STACKTOP; //@line 14267
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14735
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 14737
 $6 = $5 >> 8; //@line 14738
 if (!($5 & 1)) {
  $$0 = $6; //@line 14742
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 14747
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 14749
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 14752
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14757
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 14758
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 179; //@line 14761
  sp = STACKTOP; //@line 14762
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14765
  return;
 }
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_4($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15015
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15019
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15021
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15023
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15025
 $13 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 88 >> 2] | 0; //@line 15028
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15029
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($4, $6, $8, $10) | 0; //@line 15030
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 15033
  sp = STACKTOP; //@line 15034
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 15038
 ___async_unwind = 0; //@line 15039
 HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 15040
 sp = STACKTOP; //@line 15041
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 11381
 STACKTOP = STACKTOP + 256 | 0; //@line 11382
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 11382
 $5 = sp; //@line 11383
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 11389
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 11393
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 11396
   $$011 = $9; //@line 11397
   do {
    _out_670($0, $5, 256); //@line 11399
    $$011 = $$011 + -256 | 0; //@line 11400
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 11409
  } else {
   $$0$lcssa = $9; //@line 11411
  }
  _out_670($0, $5, $$0$lcssa); //@line 11413
 }
 STACKTOP = sp; //@line 11415
 return;
}
function _main__async_cb_61($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13121
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13123
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13127
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13129
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13131
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 13134
 HEAP32[$2 + 4 >> 2] = 2832; //@line 13136
 _printf(2884, $2) | 0; //@line 13137
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 13138
 __Z17recv_coap_messagev(); //@line 13139
 if (!___async) {
  ___async_unwind = 0; //@line 13142
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 137; //@line 13144
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 13146
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 13148
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 13150
 sp = STACKTOP; //@line 13151
 return;
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 9674
 $3 = HEAP8[$1 >> 0] | 0; //@line 9676
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 9680
 $7 = $0 + 20 | 0; //@line 9681
 $9 = $0 + 28 | 0; //@line 9683
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0; //@line 9689
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 9692
 HEAP32[$9 >> 2] = 0; //@line 9693
 HEAP32[$7 >> 2] = 0; //@line 9694
 $15 = HEAP32[$0 >> 2] | 0; //@line 9695
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 9703
  HEAP32[$0 + 8 >> 2] = $23; //@line 9705
  HEAP32[$0 + 4 >> 2] = $23; //@line 9707
  $$0 = $15 << 27 >> 31; //@line 9710
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 9713
  $$0 = -1; //@line 9714
 }
 return $$0 | 0; //@line 9716
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_74($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14355
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14357
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14359
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14361
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14363
 $11 = HEAP32[(HEAP32[$2 >> 2] | 0) + 88 >> 2] | 0; //@line 14366
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 14367
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($2, $4, $6, $8) | 0; //@line 14368
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 14371
  sp = STACKTOP; //@line 14372
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 14376
 ___async_unwind = 0; //@line 14377
 HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 14378
 sp = STACKTOP; //@line 14379
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 693
 $3 = HEAP32[$1 >> 2] | 0; //@line 694
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 696
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0$i = -3012; //@line 702
  return $$0$i | 0; //@line 703
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 705
 _wait_ms(1); //@line 706
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 39; //@line 709
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 711
  sp = STACKTOP; //@line 712
  return 0; //@line 713
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 715
 HEAP8[$1 + 8 >> 0] = 1; //@line 717
 $$0$i = 0; //@line 718
 return $$0$i | 0; //@line 719
}
function _sn_coap_header_validity_check($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0;
 L1 : do {
  if (($1 | 0) == 64) {
   $4 = HEAP32[$0 + 12 >> 2] | 0; //@line 4607
   if (($4 >>> 4 | $4 << 28) >>> 0 < 4) {
    switch (HEAP32[$0 + 8 >> 2] | 0) {
    case 95:
    case 165:
    case 164:
    case 163:
    case 162:
    case 161:
    case 160:
    case 143:
    case 141:
    case 140:
    case 136:
    case 134:
    case 133:
    case 132:
    case 131:
    case 130:
    case 129:
    case 128:
    case 69:
    case 68:
    case 67:
    case 66:
    case 65:
    case 4:
    case 3:
    case 2:
    case 1:
    case 0:
     {
      break;
     }
    default:
     {
      $$0 = -1; //@line 4620
      break L1;
     }
    }
    $$0 = 0; //@line 4624
   } else {
    $$0 = -1; //@line 4626
   }
  } else {
   $$0 = -1; //@line 4629
  }
 } while (0);
 return $$0 | 0; //@line 4632
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 3191
  return $$1 | 0; //@line 3192
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 3197
  $$1 = 0; //@line 3198
  return $$1 | 0; //@line 3199
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 3206
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 3210
  return $$1 | 0; //@line 3211
 }
 $14 = _malloc($1) | 0; //@line 3213
 if (!$14) {
  $$1 = 0; //@line 3216
  return $$1 | 0; //@line 3217
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 3220
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 3225
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 3228
 _free($0); //@line 3229
 $$1 = $14; //@line 3230
 return $$1 | 0; //@line 3231
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 296
 $3 = HEAP32[$1 >> 2] | 0; //@line 297
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 299
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0 = -3012; //@line 305
  return $$0 | 0; //@line 306
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 308
 _wait_ms(1); //@line 309
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 26; //@line 312
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 314
  sp = STACKTOP; //@line 315
  return 0; //@line 316
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 318
 HEAP8[$1 + 8 >> 0] = 1; //@line 320
 $$0 = 0; //@line 321
 return $$0 | 0; //@line 322
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4535
 STACKTOP = STACKTOP + 32 | 0; //@line 4536
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4536
 $vararg_buffer = sp; //@line 4537
 $3 = sp + 20 | 0; //@line 4538
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4542
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 4544
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 4546
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 4548
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 4550
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 4555
  $10 = -1; //@line 4556
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 4559
 }
 STACKTOP = sp; //@line 4561
 return $10 | 0; //@line 4561
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 9905
 STACKTOP = STACKTOP + 16 | 0; //@line 9906
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9906
 $vararg_buffer = sp; //@line 9907
 HEAP32[$vararg_buffer >> 2] = $0; //@line 9908
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 9910
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 9912
 _mbed_error_printf(2298, $vararg_buffer); //@line 9913
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9914
 _mbed_die(); //@line 9915
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 104; //@line 9918
  sp = STACKTOP; //@line 9919
  STACKTOP = sp; //@line 9920
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9922
  STACKTOP = sp; //@line 9923
  return;
 }
}
function __ZN12NetworkStack14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 6696
 STACKTOP = STACKTOP + 48 | 0; //@line 6697
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6697
 $$byval_copy = sp + 20 | 0; //@line 6698
 $2 = sp; //@line 6699
 __ZNK13SocketAddress8get_addrEv($2, $1); //@line 6700
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 6701
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 6701
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 6701
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 6701
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 6701
 $3 = _nsapi_dns_add_server($$byval_copy) | 0; //@line 6702
 STACKTOP = sp; //@line 6703
 return $3 | 0; //@line 6703
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_37($0) {
 $0 = $0 | 0;
 var $$355$ = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 12093
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12097
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12099
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12101
 $$355$ = ($AsyncRetVal | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : $AsyncRetVal; //@line 12103
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 12104
 __ZN9UDPSocketD2Ev($4); //@line 12105
 if (!___async) {
  ___async_unwind = 0; //@line 12108
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 94; //@line 12110
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $6; //@line 12112
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $$355$; //@line 12114
 sp = STACKTOP; //@line 12115
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12802
 STACKTOP = STACKTOP + 16 | 0; //@line 12803
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12803
 $1 = sp; //@line 12804
 HEAP32[$1 >> 2] = $varargs; //@line 12805
 $2 = HEAP32[172] | 0; //@line 12806
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12807
 $3 = _vfprintf($2, $0, $1) | 0; //@line 12808
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 12811
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12813
  sp = STACKTOP; //@line 12814
  STACKTOP = sp; //@line 12815
  return 0; //@line 12815
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12817
  STACKTOP = sp; //@line 12818
  return $3 | 0; //@line 12818
 }
 return 0; //@line 12820
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7091
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7094
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7096
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 7098
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 7103
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7108
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7110
 FUNCTION_TABLE_vi[$11 & 255]($4); //@line 7111
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 77; //@line 7114
  sp = STACKTOP; //@line 7115
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7118
  return;
 }
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12760
 STACKTOP = STACKTOP + 16 | 0; //@line 12761
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12761
 $2 = sp; //@line 12762
 HEAP32[$2 >> 2] = $varargs; //@line 12763
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12764
 $3 = _vsprintf($0, $1, $2) | 0; //@line 12765
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 149; //@line 12768
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 12770
  sp = STACKTOP; //@line 12771
  STACKTOP = sp; //@line 12772
  return 0; //@line 12772
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12774
  STACKTOP = sp; //@line 12775
  return $3 | 0; //@line 12775
 }
 return 0; //@line 12777
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 13501
 $5 = HEAP32[$4 >> 2] | 0; //@line 13502
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 13506
   HEAP32[$1 + 24 >> 2] = $3; //@line 13508
   HEAP32[$1 + 36 >> 2] = 1; //@line 13510
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 13514
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 13517
    HEAP32[$1 + 24 >> 2] = 2; //@line 13519
    HEAP8[$1 + 54 >> 0] = 1; //@line 13521
    break;
   }
   $10 = $1 + 24 | 0; //@line 13524
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 13528
   }
  }
 } while (0);
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15865
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15867
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15869
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 16 >> 2] | 0; //@line 15872
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15873
 $7 = FUNCTION_TABLE_iii[$6 & 7]($AsyncRetVal, $2) | 0; //@line 15874
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 15877
  sp = STACKTOP; //@line 15878
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 15882
 ___async_unwind = 0; //@line 15883
 HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 15884
 sp = STACKTOP; //@line 15885
 return;
}
function __ZneRK13SocketAddressS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $5 = 0, label = 0;
 if (__ZNK13SocketAddresscvbEv($0) | 0) {
  label = 3; //@line 8244
 } else {
  if (__ZNK13SocketAddresscvbEv($1) | 0) {
   label = 3; //@line 8248
  } else {
   $$0$i = 1; //@line 8250
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = HEAP32[$0 + 40 >> 2] | 0; //@line 8256
   if (($5 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
    $10 = $0 + 44 | 0; //@line 8262
    $11 = $1 + 44 | 0; //@line 8263
    if (($5 | 0) == 1) {
     $$0$i = (_memcmp($10, $11, 4) | 0) == 0; //@line 8267
     break;
    } else {
     $$0$i = (_memcmp($10, $11, 16) | 0) == 0; //@line 8272
     break;
    }
   } else {
    $$0$i = 0; //@line 8276
   }
  }
 } while (0);
 return $$0$i ^ 1 | 0; //@line 8281
}
function __Znwj__async_cb($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14017
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14019
 $3 = _malloc($2) | 0; //@line 14020
 if (!$3) {
  $5 = __ZSt15get_new_handlerv() | 0; //@line 14023
  if (!$5) {
   $$lcssa = 0; //@line 14026
  } else {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 14028
   FUNCTION_TABLE_v[$5 & 3](); //@line 14029
   if (!___async) {
    ___async_unwind = 0; //@line 14032
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 14034
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 14036
   sp = STACKTOP; //@line 14037
   return;
  }
 } else {
  $$lcssa = $3; //@line 14041
 }
 HEAP32[___async_retval >> 2] = $$lcssa; //@line 14044
 return;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14051
 STACKTOP = STACKTOP + 16 | 0; //@line 14052
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14052
 $vararg_buffer = sp; //@line 14053
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14054
 FUNCTION_TABLE_v[$0 & 3](); //@line 14055
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 169; //@line 14058
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 14060
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14062
  sp = STACKTOP; //@line 14063
  STACKTOP = sp; //@line 14064
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14066
  _abort_message(6066, $vararg_buffer); //@line 14067
 }
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 4642
 $3 = HEAP8[$1 >> 0] | 0; //@line 4643
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 4648
  $$lcssa8 = $2; //@line 4648
 } else {
  $$011 = $1; //@line 4650
  $$0710 = $0; //@line 4650
  do {
   $$0710 = $$0710 + 1 | 0; //@line 4652
   $$011 = $$011 + 1 | 0; //@line 4653
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 4654
   $9 = HEAP8[$$011 >> 0] | 0; //@line 4655
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 4660
  $$lcssa8 = $8; //@line 4660
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 4670
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 12628
  } else {
   $$01318 = $0; //@line 12630
   $$01417 = $2; //@line 12630
   $$019 = $1; //@line 12630
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 12632
    $5 = HEAP8[$$019 >> 0] | 0; //@line 12633
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 12638
    if (!$$01417) {
     $14 = 0; //@line 12643
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 12646
     $$019 = $$019 + 1 | 0; //@line 12646
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 12652
  }
 } while (0);
 return $14 | 0; //@line 12655
}
function _mbed_die__async_cb_53($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 12728
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12730
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12732
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 12733
 _wait_ms(150); //@line 12734
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 107; //@line 12737
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 12738
  HEAP32[$4 >> 2] = $2; //@line 12739
  sp = STACKTOP; //@line 12740
  return;
 }
 ___async_unwind = 0; //@line 12743
 HEAP32[$ReallocAsyncCtx14 >> 2] = 107; //@line 12744
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 12745
 HEAP32[$4 >> 2] = $2; //@line 12746
 sp = STACKTOP; //@line 12747
 return;
}
function _mbed_die__async_cb_52($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 12703
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12705
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12707
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 12708
 _wait_ms(150); //@line 12709
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 108; //@line 12712
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 12713
  HEAP32[$4 >> 2] = $2; //@line 12714
  sp = STACKTOP; //@line 12715
  return;
 }
 ___async_unwind = 0; //@line 12718
 HEAP32[$ReallocAsyncCtx13 >> 2] = 108; //@line 12719
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 12720
 HEAP32[$4 >> 2] = $2; //@line 12721
 sp = STACKTOP; //@line 12722
 return;
}
function _mbed_die__async_cb_51($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 12678
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12680
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12682
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 12683
 _wait_ms(150); //@line 12684
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 109; //@line 12687
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 12688
  HEAP32[$4 >> 2] = $2; //@line 12689
  sp = STACKTOP; //@line 12690
  return;
 }
 ___async_unwind = 0; //@line 12693
 HEAP32[$ReallocAsyncCtx12 >> 2] = 109; //@line 12694
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 12695
 HEAP32[$4 >> 2] = $2; //@line 12696
 sp = STACKTOP; //@line 12697
 return;
}
function _mbed_die__async_cb_50($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 12653
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12655
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12657
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 12658
 _wait_ms(150); //@line 12659
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 110; //@line 12662
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 12663
  HEAP32[$4 >> 2] = $2; //@line 12664
  sp = STACKTOP; //@line 12665
  return;
 }
 ___async_unwind = 0; //@line 12668
 HEAP32[$ReallocAsyncCtx11 >> 2] = 110; //@line 12669
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 12670
 HEAP32[$4 >> 2] = $2; //@line 12671
 sp = STACKTOP; //@line 12672
 return;
}
function _mbed_die__async_cb_49($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 12628
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12630
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12632
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 12633
 _wait_ms(150); //@line 12634
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 111; //@line 12637
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 12638
  HEAP32[$4 >> 2] = $2; //@line 12639
  sp = STACKTOP; //@line 12640
  return;
 }
 ___async_unwind = 0; //@line 12643
 HEAP32[$ReallocAsyncCtx10 >> 2] = 111; //@line 12644
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 12645
 HEAP32[$4 >> 2] = $2; //@line 12646
 sp = STACKTOP; //@line 12647
 return;
}
function _mbed_die__async_cb_48($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12603
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12605
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12607
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 12608
 _wait_ms(150); //@line 12609
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 112; //@line 12612
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 12613
  HEAP32[$4 >> 2] = $2; //@line 12614
  sp = STACKTOP; //@line 12615
  return;
 }
 ___async_unwind = 0; //@line 12618
 HEAP32[$ReallocAsyncCtx9 >> 2] = 112; //@line 12619
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 12620
 HEAP32[$4 >> 2] = $2; //@line 12621
 sp = STACKTOP; //@line 12622
 return;
}
function _mbed_die__async_cb_47($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12578
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12580
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12582
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 12583
 _wait_ms(400); //@line 12584
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 113; //@line 12587
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 12588
  HEAP32[$4 >> 2] = $2; //@line 12589
  sp = STACKTOP; //@line 12590
  return;
 }
 ___async_unwind = 0; //@line 12593
 HEAP32[$ReallocAsyncCtx8 >> 2] = 113; //@line 12594
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 12595
 HEAP32[$4 >> 2] = $2; //@line 12596
 sp = STACKTOP; //@line 12597
 return;
}
function _mbed_die__async_cb_46($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12553
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12555
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12557
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 12558
 _wait_ms(400); //@line 12559
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 114; //@line 12562
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 12563
  HEAP32[$4 >> 2] = $2; //@line 12564
  sp = STACKTOP; //@line 12565
  return;
 }
 ___async_unwind = 0; //@line 12568
 HEAP32[$ReallocAsyncCtx7 >> 2] = 114; //@line 12569
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 12570
 HEAP32[$4 >> 2] = $2; //@line 12571
 sp = STACKTOP; //@line 12572
 return;
}
function _mbed_die__async_cb_45($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12528
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12530
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12532
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 12533
 _wait_ms(400); //@line 12534
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 115; //@line 12537
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 12538
  HEAP32[$4 >> 2] = $2; //@line 12539
  sp = STACKTOP; //@line 12540
  return;
 }
 ___async_unwind = 0; //@line 12543
 HEAP32[$ReallocAsyncCtx6 >> 2] = 115; //@line 12544
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 12545
 HEAP32[$4 >> 2] = $2; //@line 12546
 sp = STACKTOP; //@line 12547
 return;
}
function _mbed_die__async_cb_44($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12503
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12505
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12507
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 12508
 _wait_ms(400); //@line 12509
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 116; //@line 12512
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 12513
  HEAP32[$4 >> 2] = $2; //@line 12514
  sp = STACKTOP; //@line 12515
  return;
 }
 ___async_unwind = 0; //@line 12518
 HEAP32[$ReallocAsyncCtx5 >> 2] = 116; //@line 12519
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 12520
 HEAP32[$4 >> 2] = $2; //@line 12521
 sp = STACKTOP; //@line 12522
 return;
}
function _mbed_die__async_cb_43($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12478
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12480
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12482
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 12483
 _wait_ms(400); //@line 12484
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 12487
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 12488
  HEAP32[$4 >> 2] = $2; //@line 12489
  sp = STACKTOP; //@line 12490
  return;
 }
 ___async_unwind = 0; //@line 12493
 HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 12494
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 12495
 HEAP32[$4 >> 2] = $2; //@line 12496
 sp = STACKTOP; //@line 12497
 return;
}
function _mbed_die__async_cb_42($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12453
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12455
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12457
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 12458
 _wait_ms(400); //@line 12459
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 118; //@line 12462
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 12463
  HEAP32[$4 >> 2] = $2; //@line 12464
  sp = STACKTOP; //@line 12465
  return;
 }
 ___async_unwind = 0; //@line 12468
 HEAP32[$ReallocAsyncCtx3 >> 2] = 118; //@line 12469
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 12470
 HEAP32[$4 >> 2] = $2; //@line 12471
 sp = STACKTOP; //@line 12472
 return;
}
function _mbed_die__async_cb_41($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12428
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12430
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12432
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 12433
 _wait_ms(400); //@line 12434
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 119; //@line 12437
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 12438
  HEAP32[$4 >> 2] = $2; //@line 12439
  sp = STACKTOP; //@line 12440
  return;
 }
 ___async_unwind = 0; //@line 12443
 HEAP32[$ReallocAsyncCtx2 >> 2] = 119; //@line 12444
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 12445
 HEAP32[$4 >> 2] = $2; //@line 12446
 sp = STACKTOP; //@line 12447
 return;
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4594
 STACKTOP = STACKTOP + 32 | 0; //@line 4595
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4595
 $vararg_buffer = sp; //@line 4596
 HEAP32[$0 + 36 >> 2] = 9; //@line 4599
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4607
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 4609
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 4611
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 4616
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 4619
 STACKTOP = sp; //@line 4620
 return $14 | 0; //@line 4620
}
function _mbed_die__async_cb_40($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12403
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12405
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12407
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 12408
 _wait_ms(400); //@line 12409
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 120; //@line 12412
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 12413
  HEAP32[$4 >> 2] = $2; //@line 12414
  sp = STACKTOP; //@line 12415
  return;
 }
 ___async_unwind = 0; //@line 12418
 HEAP32[$ReallocAsyncCtx >> 2] = 120; //@line 12419
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 12420
 HEAP32[$4 >> 2] = $2; //@line 12421
 sp = STACKTOP; //@line 12422
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 761
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 764
 if (($6 | 0) < 0) {
  $$0$i = -3001; //@line 767
  return $$0$i | 0; //@line 768
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 770
 _wait_ms(1); //@line 771
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 41; //@line 774
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 776
  sp = STACKTOP; //@line 777
  return 0; //@line 778
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 780
 $$0$i = $6; //@line 781
 return $$0$i | 0; //@line 782
}
function _store_int_728($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 6643
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 6649
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 6654
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 6659
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 6664
     HEAP32[$7 >> 2] = $2; //@line 6666
     HEAP32[$7 + 4 >> 2] = $3; //@line 6669
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5520
 STACKTOP = STACKTOP + 128 | 0; //@line 5521
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 5521
 $3 = sp; //@line 5522
 dest = $3; //@line 5523
 stop = dest + 124 | 0; //@line 5523
 do {
  HEAP32[dest >> 2] = 0; //@line 5523
  dest = dest + 4 | 0; //@line 5523
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 15; //@line 5525
 HEAP32[$3 + 44 >> 2] = $0; //@line 5527
 HEAP32[$3 + 76 >> 2] = -1; //@line 5529
 HEAP32[$3 + 84 >> 2] = $0; //@line 5531
 $8 = _vfscanf($3, $1, $2) | 0; //@line 5532
 STACKTOP = sp; //@line 5533
 return $8 | 0; //@line 5533
}
function __ZN17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 364
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 367
 if (($6 | 0) < 0) {
  $$0 = -3001; //@line 370
  return $$0 | 0; //@line 371
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 373
 _wait_ms(1); //@line 374
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 28; //@line 377
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 379
  sp = STACKTOP; //@line 380
  return 0; //@line 381
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 383
 $$0 = $6; //@line 384
 return $$0 | 0; //@line 385
}
function __ZThn4_N17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 647
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 649
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 650
 _wait_ms(1); //@line 651
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 38; //@line 654
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 656
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 658
  sp = STACKTOP; //@line 659
  return 0; //@line 660
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 662
 HEAP8[$1 + 8 >> 0] = 0; //@line 664
 if (!$1) {
  return $3 | 0; //@line 667
 }
 __ZdlPv($1); //@line 669
 return $3 | 0; //@line 670
}
function __ZN17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 250
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 252
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 253
 _wait_ms(1); //@line 254
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 25; //@line 257
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 259
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 261
  sp = STACKTOP; //@line 262
  return 0; //@line 263
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 265
 HEAP8[$1 + 8 >> 0] = 0; //@line 267
 if (!$1) {
  return $3 | 0; //@line 270
 }
 __ZdlPv($1); //@line 272
 return $3 | 0; //@line 273
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 1661
 newDynamicTop = oldDynamicTop + increment | 0; //@line 1662
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 1666
  ___setErrNo(12); //@line 1667
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 1671
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 1675
   ___setErrNo(12); //@line 1676
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 1680
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 11242
 } else {
  $$056 = $2; //@line 11244
  $15 = $1; //@line 11244
  $8 = $0; //@line 11244
  while (1) {
   $14 = $$056 + -1 | 0; //@line 11252
   HEAP8[$14 >> 0] = HEAPU8[3729 + ($8 & 15) >> 0] | 0 | $3; //@line 11253
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 11254
   $15 = tempRet0; //@line 11255
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 11260
    break;
   } else {
    $$056 = $14; //@line 11263
   }
  }
 }
 return $$05$lcssa | 0; //@line 11267
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 4776
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 4778
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 4784
  $11 = ___fwritex($0, $4, $3) | 0; //@line 4785
  if ($phitmp) {
   $13 = $11; //@line 4787
  } else {
   ___unlockfile($3); //@line 4789
   $13 = $11; //@line 4790
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 4794
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 4798
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 4801
 }
 return $15 | 0; //@line 4803
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 14016
 $0 = ___cxa_get_globals_fast() | 0; //@line 14017
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 14020
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 14024
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 14036
    _emscripten_alloc_async_context(4, sp) | 0; //@line 14037
    __ZSt11__terminatePFvvE($16); //@line 14038
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 14043
 _emscripten_alloc_async_context(4, sp) | 0; //@line 14044
 __ZSt11__terminatePFvvE($17); //@line 14045
}
function __ZN9UDPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8374
 $1 = $0 + 52 | 0; //@line 8375
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 8378
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 8381
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 8391
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8392
 FUNCTION_TABLE_vi[$$pre & 255]($0 + 32 | 0); //@line 8393
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 8396
  sp = STACKTOP; //@line 8397
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8400
 return;
}
function __ZN9UDPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15427
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15429
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 15431
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 15438
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15439
 FUNCTION_TABLE_vi[$8 & 255]($2 + 16 | 0); //@line 15440
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 15443
  sp = STACKTOP; //@line 15444
  return;
 }
 ___async_unwind = 0; //@line 15447
 HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 15448
 sp = STACKTOP; //@line 15449
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 4893
 $3 = HEAP8[$1 >> 0] | 0; //@line 4895
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 4899
 $7 = HEAP32[$0 >> 2] | 0; //@line 4900
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 4905
  HEAP32[$0 + 4 >> 2] = 0; //@line 4907
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 4909
  HEAP32[$0 + 28 >> 2] = $14; //@line 4911
  HEAP32[$0 + 20 >> 2] = $14; //@line 4913
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4919
  $$0 = 0; //@line 4920
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 4923
  $$0 = -1; //@line 4924
 }
 return $$0 | 0; //@line 4926
}
function __ZN6SocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15162
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15164
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 15166
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 15173
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15174
 FUNCTION_TABLE_vi[$8 & 255]($2 + 16 | 0); //@line 15175
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 67; //@line 15178
  sp = STACKTOP; //@line 15179
  return;
 }
 ___async_unwind = 0; //@line 15182
 HEAP32[$ReallocAsyncCtx2 >> 2] = 67; //@line 15183
 sp = STACKTOP; //@line 15184
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 736
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 739
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 740
 _wait_ms(1); //@line 741
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 40; //@line 744
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 746
  sp = STACKTOP; //@line 747
  return 0; //@line 748
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 750
  return $6 | 0; //@line 751
 }
 return 0; //@line 753
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 9724
 $4 = HEAP32[$3 >> 2] | 0; //@line 9725
 $5 = $2 + 256 | 0; //@line 9726
 $6 = _memchr($4, 0, $5) | 0; //@line 9727
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 9732
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 9734
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 9735
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 9738
 $14 = $4 + $$027 | 0; //@line 9739
 HEAP32[$0 + 8 >> 2] = $14; //@line 9741
 HEAP32[$3 >> 2] = $14; //@line 9742
 return $$027$ | 0; //@line 9743
}
function __ZN17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 339
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 342
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 343
 _wait_ms(1); //@line 344
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 27; //@line 347
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 349
  sp = STACKTOP; //@line 350
  return 0; //@line 351
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 353
  return $6 | 0; //@line 354
 }
 return 0; //@line 356
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 11279
 } else {
  $$06 = $2; //@line 11281
  $11 = $1; //@line 11281
  $7 = $0; //@line 11281
  while (1) {
   $10 = $$06 + -1 | 0; //@line 11286
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 11287
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 11288
   $11 = tempRet0; //@line 11289
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 11294
    break;
   } else {
    $$06 = $10; //@line 11297
   }
  }
 }
 return $$0$lcssa | 0; //@line 11301
}
function _arg_n_727($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 6598
 STACKTOP = STACKTOP + 16 | 0; //@line 6599
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6599
 $2 = sp; //@line 6600
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 6602
 $$0 = $1; //@line 6603
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 6617
  $10 = HEAP32[$9 >> 2] | 0; //@line 6618
  HEAP32[$2 >> 2] = $9 + 4; //@line 6620
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 6623
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 6628
 return $10 | 0; //@line 6628
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_75($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14397
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14401
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 14403
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 14404
 FUNCTION_TABLE_vi[$5 & 255]($4); //@line 14405
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 76; //@line 14408
  sp = STACKTOP; //@line 14409
  return;
 }
 ___async_unwind = 0; //@line 14412
 HEAP32[$ReallocAsyncCtx >> 2] = 76; //@line 14413
 sp = STACKTOP; //@line 14414
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14901
 do {
  if (!$0) {
   $3 = 0; //@line 14905
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14907
   $2 = ___dynamic_cast($0, 104, 160, 0) | 0; //@line 14908
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 183; //@line 14911
    sp = STACKTOP; //@line 14912
    return 0; //@line 14913
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14915
    $3 = ($2 | 0) != 0 & 1; //@line 14918
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 14923
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 10923
 } else {
  $$04 = 0; //@line 10925
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 10928
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 10932
   $12 = $7 + 1 | 0; //@line 10933
   HEAP32[$0 >> 2] = $12; //@line 10934
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 10940
    break;
   } else {
    $$04 = $11; //@line 10943
   }
  }
 }
 return $$0$lcssa | 0; //@line 10947
}
function _main__async_cb_57($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13027
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13031
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13033
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 13034
 _free($4); //@line 13035
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 13036
 _puts(2932) | 0; //@line 13037
 if (!___async) {
  ___async_unwind = 0; //@line 13040
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 138; //@line 13042
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $6; //@line 13044
 sp = STACKTOP; //@line 13045
 return;
}
function _invoke_ticker__async_cb_85($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 601
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 607
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 608
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 609
 FUNCTION_TABLE_vi[$5 & 255]($6); //@line 610
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 122; //@line 613
  sp = STACKTOP; //@line 614
  return;
 }
 ___async_unwind = 0; //@line 617
 HEAP32[$ReallocAsyncCtx >> 2] = 122; //@line 618
 sp = STACKTOP; //@line 619
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 1174
 $y_sroa_0_0_extract_trunc = $b$0; //@line 1175
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 1176
 $1$1 = tempRet0; //@line 1177
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 1179
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 572
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 574
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 575
 _wait_ms(1); //@line 576
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 35; //@line 579
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 581
  sp = STACKTOP; //@line 582
  return 0; //@line 583
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 585
  return $2 | 0; //@line 586
 }
 return 0; //@line 588
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 1592
  src = src + num | 0; //@line 1593
  dest = dest + num | 0; //@line 1594
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 1596
   src = src - 1 | 0; //@line 1597
   num = num - 1 | 0; //@line 1598
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1599
  }
  dest = ret; //@line 1601
 } else {
  _memcpy(dest, src, num) | 0; //@line 1603
 }
 return dest | 0; //@line 1605
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 1159
 $2 = $b & 65535; //@line 1160
 $3 = Math_imul($2, $1) | 0; //@line 1161
 $6 = $a >>> 16; //@line 1162
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 1163
 $11 = $b >>> 16; //@line 1164
 $12 = Math_imul($11, $1) | 0; //@line 1165
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 1166
}
function __ZN6SocketC2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 404; //@line 6757
 HEAP32[$0 + 4 >> 2] = 0; //@line 6759
 HEAP32[$0 + 8 >> 2] = 0; //@line 6761
 HEAP32[$0 + 12 >> 2] = -1; //@line 6763
 $4 = $0 + 16 | 0; //@line 6764
 HEAP32[$4 >> 2] = 0; //@line 6765
 HEAP32[$4 + 4 >> 2] = 0; //@line 6765
 HEAP32[$4 + 8 >> 2] = 0; //@line 6765
 HEAP32[$4 + 12 >> 2] = 0; //@line 6765
 HEAP32[$4 + 16 >> 2] = 0; //@line 6765
 HEAP32[$4 + 20 >> 2] = 0; //@line 6765
 HEAP32[$4 + 24 >> 2] = 0; //@line 6765
 HEAP32[$4 + 28 >> 2] = 0; //@line 6765
 return;
}
function __ZN17EthernetInterface11get_netmaskEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 112
 $2 = _emscripten_asm_const_ii(2, 0) | 0; //@line 114
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 115
 _wait_ms(1); //@line 116
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 20; //@line 119
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 121
  sp = STACKTOP; //@line 122
  return 0; //@line 123
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 125
  return $2 | 0; //@line 126
 }
 return 0; //@line 128
}
function __ZN17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 91
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 93
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 94
 _wait_ms(1); //@line 95
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 19; //@line 98
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 100
  sp = STACKTOP; //@line 101
  return 0; //@line 102
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 104
  return $2 | 0; //@line 105
 }
 return 0; //@line 107
}
function _mbed_die__async_cb_54($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 12753
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12755
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12757
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 12758
 _wait_ms(150); //@line 12759
 if (!___async) {
  ___async_unwind = 0; //@line 12762
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 106; //@line 12764
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 12766
 sp = STACKTOP; //@line 12767
 return;
}
function __ZN17EthernetInterface15get_mac_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 70
 $2 = _emscripten_asm_const_ii(0, 0) | 0; //@line 72
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 73
 _wait_ms(1); //@line 74
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 18; //@line 77
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 79
  sp = STACKTOP; //@line 80
  return 0; //@line 81
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 83
  return $2 | 0; //@line 84
 }
 return 0; //@line 86
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 12383
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12385
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12387
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 12388
 _wait_ms(150); //@line 12389
 if (!___async) {
  ___async_unwind = 0; //@line 12392
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 105; //@line 12394
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 12396
 sp = STACKTOP; //@line 12397
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 3153
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 3155
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 3162
  } else {
   $$0 = $3; //@line 3164
  }
 }
 $8 = _malloc($$0) | 0; //@line 3167
 if (!$8) {
  return $8 | 0; //@line 3170
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 3177
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 3179
 return $8 | 0; //@line 3180
}
function ___fflush_unlocked__async_cb_55($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12839
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12841
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12843
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12845
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 12847
 HEAP32[$4 >> 2] = 0; //@line 12848
 HEAP32[$6 >> 2] = 0; //@line 12849
 HEAP32[$8 >> 2] = 0; //@line 12850
 HEAP32[$10 >> 2] = 0; //@line 12851
 HEAP32[___async_retval >> 2] = 0; //@line 12853
 return;
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9647
 STACKTOP = STACKTOP + 16 | 0; //@line 9648
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9648
 $1 = sp; //@line 9649
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 15]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 9660
  } else {
   $$0 = -1; //@line 9662
  }
 } else {
  $$0 = -1; //@line 9665
 }
 STACKTOP = sp; //@line 9667
 return $$0 | 0; //@line 9667
}
function __Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10380
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10381
 _puts(2510) | 0; //@line 10382
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 125; //@line 10385
  sp = STACKTOP; //@line 10386
  return 0; //@line 10387
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10389
  return 0; //@line 10390
 }
 return 0; //@line 10392
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12784
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12785
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 12786
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 150; //@line 12789
  sp = STACKTOP; //@line 12790
  return 0; //@line 12791
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12793
  return $3 | 0; //@line 12794
 }
 return 0; //@line 12796
}
function __Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10399
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10400
 _puts(2521) | 0; //@line 10401
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 10404
  sp = STACKTOP; //@line 10405
  return 0; //@line 10406
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10408
  return 0; //@line 10409
 }
 return 0; //@line 10411
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 142
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 143
 _puts(2041) | 0; //@line 144
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 21; //@line 147
  sp = STACKTOP; //@line 148
  return 0; //@line 149
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 151
  return 0; //@line 152
 }
 return 0; //@line 154
}
function __ZN13SocketAddressC2E10nsapi_addrt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP8[$0 >> 0] = 0; //@line 7228
 $3 = $0 + 40 | 0; //@line 7229
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2]; //@line 7230
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7230
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7230
 HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 7230
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 7230
 HEAP16[$0 + 60 >> 1] = $2; //@line 7232
 return;
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9628
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9628
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9629
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9630
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 9634
 HEAP32[tempDoublePtr >> 2] = $2; //@line 9635
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 9635
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function _emscripten_async_resume() {
 ___async = 0; //@line 1492
 ___async_unwind = 1; //@line 1493
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 1499
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 1503
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 1507
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 1509
 }
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4405
 STACKTOP = STACKTOP + 16 | 0; //@line 4406
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4406
 $vararg_buffer = sp; //@line 4407
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 4411
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 4413
 STACKTOP = sp; //@line 4414
 return $5 | 0; //@line 4414
}
function _main__async_cb_58($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 13051
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13053
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 13054
 _wait(4294967296.0); //@line 13055
 if (!___async) {
  ___async_unwind = 0; //@line 13058
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 139; //@line 13060
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 13062
 sp = STACKTOP; //@line 13063
 return;
}
function __ZN9UDPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8349
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8350
 __ZN9UDPSocketD2Ev($0); //@line 8351
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 8354
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8356
  sp = STACKTOP; //@line 8357
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8360
  __ZdlPv($0); //@line 8361
  return;
 }
}
function __ZN17EthernetInterface8set_dhcpEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 160
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 161
 _puts(1996) | 0; //@line 162
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 22; //@line 165
  sp = STACKTOP; //@line 166
  return 0; //@line 167
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 169
  return 0; //@line 170
 }
 return 0; //@line 172
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 1434
 STACKTOP = STACKTOP + 16 | 0; //@line 1435
 $rem = __stackBase__ | 0; //@line 1436
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 1437
 STACKTOP = __stackBase__; //@line 1438
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 1439
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 1204
 if ((ret | 0) < 8) return ret | 0; //@line 1205
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 1206
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 1207
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 1208
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 1209
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 1210
}
function __ZN13SocketAddress8set_addrE10nsapi_addr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP8[$0 >> 0] = 0; //@line 7240
 $2 = $0 + 40 | 0; //@line 7241
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2]; //@line 7242
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7242
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7242
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 7242
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 7242
 return;
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 13237
 STACKTOP = STACKTOP + 16 | 0; //@line 13238
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13238
 if (!(_pthread_once(6872, 3) | 0)) {
  $3 = _pthread_getspecific(HEAP32[1719] | 0) | 0; //@line 13244
  STACKTOP = sp; //@line 13245
  return $3 | 0; //@line 13245
 } else {
  _abort_message(5914, sp); //@line 13247
 }
 return 0; //@line 13250
}
function __ZThn4_N17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15055
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15057
 HEAP8[$2 + 8 >> 0] = 0; //@line 15059
 if (!$2) {
  $7 = ___async_retval; //@line 15062
  HEAP32[$7 >> 2] = $4; //@line 15063
  return;
 }
 __ZdlPv($2); //@line 15066
 $7 = ___async_retval; //@line 15067
 HEAP32[$7 >> 2] = $4; //@line 15068
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 13405
 }
 return;
}
function __ZL25default_terminate_handlerv__async_cb_77($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14604
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14606
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14608
 HEAP32[$2 >> 2] = 5775; //@line 14609
 HEAP32[$2 + 4 >> 2] = $4; //@line 14611
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 14613
 _abort_message(5639, $2); //@line 14614
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 5508
 STACKTOP = STACKTOP + 16 | 0; //@line 5509
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5509
 $2 = sp; //@line 5510
 HEAP32[$2 >> 2] = $varargs; //@line 5511
 $3 = _vsscanf($0, $1, $2) | 0; //@line 5512
 STACKTOP = sp; //@line 5513
 return $3 | 0; //@line 5513
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 12743
 $6 = HEAP32[$5 >> 2] | 0; //@line 12744
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 12745
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 12747
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 12749
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 12752
 return $2 | 0; //@line 12753
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15262
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15264
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15265
 _fputc(10, $2) | 0; //@line 15266
 if (!___async) {
  ___async_unwind = 0; //@line 15269
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 15271
 sp = STACKTOP; //@line 15272
 return;
}
function _wait($0) {
 $0 = +$0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10321
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10325
 _emscripten_sleep((~~($0 * 1.0e6) | 0) / 1e3 | 0 | 0); //@line 10326
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 123; //@line 10329
  sp = STACKTOP; //@line 10330
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10333
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14116
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 14127
  $$0 = 1; //@line 14128
 } else {
  $$0 = 0; //@line 14130
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 14134
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14538
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 14541
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 14546
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 14549
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 13999
 STACKTOP = STACKTOP + 16 | 0; //@line 14000
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14000
 _free($0); //@line 14002
 if (!(_pthread_setspecific(HEAP32[1719] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 14007
  return;
 } else {
  _abort_message(6013, sp); //@line 14009
 }
}
function __ZNK13SocketAddress8get_addrEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1 + 40 | 0; //@line 7885
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 7886
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 7886
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 7886
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 7886
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 7886
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 13481
 }
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10340
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10341
 _emscripten_sleep($0 | 0); //@line 10342
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 124; //@line 10345
  sp = STACKTOP; //@line 10346
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10349
  return;
 }
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 6483
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6485
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 6487
 $7 = $4 - $6 | 0; //@line 6488
 HEAP32[$0 + 108 >> 2] = $7; //@line 6490
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 6499
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 13545
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 13549
  }
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 13984
 STACKTOP = STACKTOP + 16 | 0; //@line 13985
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13985
 if (!(_pthread_key_create(6876, 168) | 0)) {
  STACKTOP = sp; //@line 13990
  return;
 } else {
  _abort_message(5963, sp); //@line 13992
 }
}
function _nsapi_dns_add_server($0) {
 $0 = $0 | 0;
 _memmove(476, 456, 80) | 0; //@line 8662
 HEAP32[114] = HEAP32[$0 >> 2]; //@line 8663
 HEAP32[115] = HEAP32[$0 + 4 >> 2]; //@line 8663
 HEAP32[116] = HEAP32[$0 + 8 >> 2]; //@line 8663
 HEAP32[117] = HEAP32[$0 + 12 >> 2]; //@line 8663
 HEAP32[118] = HEAP32[$0 + 16 >> 2]; //@line 8663
 return 0; //@line 8664
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 1468
 HEAP32[new_frame + 4 >> 2] = sp; //@line 1470
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 1472
 ___async_cur_frame = new_frame; //@line 1473
 return ___async_cur_frame + 8 | 0; //@line 1474
}
function __ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + -4 | 0; //@line 953
 $5 = HEAP32[$1 >> 2] | 0; //@line 954
 HEAP32[$4 + 60 + ($5 << 3) >> 2] = $2; //@line 956
 HEAP32[$4 + 60 + ($5 << 3) + 4 >> 2] = $3; //@line 958
 return;
}
function __ZN17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14058
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14060
 HEAP8[$2 + 8 >> 0] = 0; //@line 14062
 if ($2 | 0) {
  __ZdlPv($2); //@line 14065
 }
 HEAP32[___async_retval >> 2] = $4; //@line 14068
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 13293
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13297
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 13300
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 1457
  return low << bits; //@line 1458
 }
 tempRet0 = low << bits - 32; //@line 1460
 return 0; //@line 1461
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 1446
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 1447
 }
 tempRet0 = 0; //@line 1449
 return high >>> bits - 32 | 0; //@line 1450
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7127
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7127
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7127
 return;
}
function __ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 548
 HEAP32[$0 + 60 + ($4 << 3) >> 2] = $2; //@line 550
 HEAP32[$0 + 60 + ($4 << 3) + 4 >> 2] = $3; //@line 552
 return;
}
function _fflush__async_cb_14($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16102
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 16104
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16107
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 12977
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 12980
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 12983
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 14083
 } else {
  $$0 = -1; //@line 14085
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 14088
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 1722
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 5023
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 5029
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 5033
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 1764
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 1480
 stackRestore(___async_cur_frame | 0); //@line 1481
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 1482
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8470
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 8471
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 8473
 return;
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12364
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12364
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12366
 return $1 | 0; //@line 12367
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 10241
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 10247
 _emscripten_asm_const_iii(9, $0 | 0, $1 | 0) | 0; //@line 10248
 return;
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9618
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9618
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9620
 return $1 | 0; //@line 9621
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 4571
  $$0 = -1; //@line 4572
 } else {
  $$0 = $0; //@line 4574
 }
 return $$0 | 0; //@line 4576
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 1715
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 1197
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 1198
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 1199
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 1757
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 48
 ___cxa_begin_catch($0 | 0) | 0; //@line 49
 _emscripten_alloc_async_context(4, sp) | 0; //@line 50
 __ZSt9terminatev(); //@line 51
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 1148
 HEAP32[___async_retval >> 2] = 0; //@line 1150
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 14624
 HEAP32[___async_retval >> 2] = 0; //@line 14626
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 1708
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 1189
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 1191
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 1750
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_39($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12377
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 11424
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 11427
 }
 return $$0 | 0; //@line 11429
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_12($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15956
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_36($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 12087
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_2($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15001
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_72($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14341
 return;
}
function __ZN17EthernetInterfaceC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 200; //@line 966
 HEAP32[$0 + 4 >> 2] = 316; //@line 967
 _memset($0 + 60 | 0, 0, 800) | 0; //@line 969
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 1701
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_7($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 15333
 return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 1426
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 13548
 return;
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 4763
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 4767
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_11($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15895
 return;
}
function b22(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 1816
 return 0; //@line 1816
}
function b21(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 1813
 return 0; //@line 1813
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_78($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14670
 return;
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 6827
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 6832
 }
 return $4 | 0; //@line 6834
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 1487
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 1488
}
function __ZN12NetworkStack10getsockoptEPviiS0_Pj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN12NetworkStack10setsockoptEPviiPKvj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_3($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 15009
 return;
}
function __ZN9UDPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 8407
 HEAP32[$0 >> 2] = 440; //@line 8408
 HEAP32[$0 + 52 >> 2] = 0; //@line 8410
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14084
 __ZdlPv($0); //@line 14085
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 13767
 __ZdlPv($0); //@line 13768
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 5159
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 5161
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_73($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 14349
 return;
}
function __ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 13295
 __ZdlPv($0); //@line 13296
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14098
 return;
}
function b19(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 1810
 return 0; //@line 1810
}
function b18(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 1807
 return 0; //@line 1807
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 8460
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 10909
 }
 return;
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12885
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_56($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 12958
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 402
 return;
}
function __ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function b109(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 2062
}
function __ZN17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14944
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 15256
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 7](a1 | 0, a2 | 0) | 0; //@line 1694
}
function __ZN17EthernetInterface15get_mac_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12904
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 13492
}
function __ZN17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 15859
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_13($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 16010
 return;
}
function _sn_coap_builder_calc_needed_packet_data_size($0) {
 $0 = $0 | 0;
 return _sn_coap_builder_calc_needed_packet_data_size_2($0, 0) | 0; //@line 4596
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[1720] | 0; //@line 14857
 HEAP32[1720] = $0 + 0; //@line 14859
 return $0 | 0; //@line 14861
}
function __ZN12NetworkStack11setstackoptEiiPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN12NetworkStack11getstackoptEiiPvPj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN17EthernetInterface11get_netmaskEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14108
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[358] | 0; //@line 14074
 HEAP32[358] = $0 + 0; //@line 14076
 return $0 | 0; //@line 14078
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 3](a1 | 0, a2 | 0); //@line 1743
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b16(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(15); //@line 1804
 return 0; //@line 1804
}
function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(14); //@line 1801
 return 0; //@line 1801
}
function b14(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(13); //@line 1798
 return 0; //@line 1798
}
function b13(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12); //@line 1795
 return 0; //@line 1795
}
function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(11); //@line 1792
 return 0; //@line 1792
}
function __ZN6Socket11set_timeoutEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 12 >> 2] = ($1 | 0) > -1 ? $1 : -1; //@line 7219
 return;
}
function __Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 16018
 return;
}
function b11(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 1789
 return 0; //@line 1789
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 390
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 1514
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_10($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b107(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 2059
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6Socket5closeEv__async_cb_71($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14277
 return;
}
function __ZN17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 11372
}
function _fflush__async_cb_15($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16117
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15289
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15907
 return;
}
function _fputc__async_cb_26($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 8483
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14426
 return;
}
function __ZN17EthernetInterface8set_dhcpEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 14197
 return;
}
function __Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 8392
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 1687
}
function __ZN6Socket4openEP12NetworkStack__async_cb_83($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 376
 return;
}
function _ns_list_init_($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 6514
 HEAP32[$0 + 4 >> 2] = $0; //@line 6516
 return;
}
function __ZThn4_N17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN13SocketAddress8set_portEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP16[$0 + 60 >> 1] = $1; //@line 7251
 return;
}
function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 5542
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(6066, HEAP32[$0 + 4 >> 2] | 0); //@line 12894
}
function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 1786
 return 0; //@line 1786
}
function __ZN17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0); //@line 1736
}
function b105(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 2056
}
function b104(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 2053
}
function b103(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 2050
}
function _sn_coap_builder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _sn_coap_builder_2($0, $1, 0) | 0; //@line 1153
}
function __ZN9UDPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 12337
 return;
}
function __ZNK13SocketAddress14get_ip_versionEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0; //@line 8076
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 4681
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 12617
}
function __ZNK13SocketAddress8get_portEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 60 >> 1] | 0; //@line 7895
}
function _main__async_cb_64($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 13266
 return;
}
function _main__async_cb_60($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 1; //@line 13115
 return;
}
function __ZThn4_N17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0 + -4 | 0); //@line 566
 return;
}
function b7(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(7); //@line 1783
 return 0; //@line 1783
}
function b6(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 1780
 return 0; //@line 1780
}
function __ZN16NetworkInterface12set_blockingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -3002;
}
function __ZN17EthernetInterface9get_stackEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 191
}
function __Z18nsapi_create_stackP12NetworkStack($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 6751
}
function __Z11coap_malloct($0) {
 $0 = $0 | 0;
 return _malloc($0 & 65535) | 0; //@line 10365
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3](); //@line 1729
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 return;
}
function __ZNK16NetworkInterface21get_connection_statusEv($0) {
 $0 = $0 | 0;
 return -3002;
}
function __ZN17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 64
 return;
}
function __ZN17EthernetInterface11get_gatewayEv($0) {
 $0 = $0 | 0;
 return 0; //@line 134
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 4629
}
function __ZN17EthernetInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 184
}
function __GLOBAL__sub_I_main_cpp() {
 __ZN9UDPSocketC2Ev(6232); //@line 10356
 return;
}
function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 1777
 return 0; //@line 1777
}
function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 1774
 return 0; //@line 1774
}
function b2(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 1771
 return 0; //@line 1771
}
function b1(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 1768
 return 0; //@line 1768
}
function __ZN17EthernetInterface7connectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 178
}
function b101(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(3); //@line 2047
}
function b100(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 2044
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _abort_message__async_cb_6($0) {
 $0 = $0 | 0;
 _abort(); //@line 15279
}
function ___ofl_lock() {
 ___lock(6856); //@line 5166
 return 6864; //@line 5167
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN9UDPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 1; //@line 8369
}
function __Z9coap_freePv($0) {
 $0 = $0 | 0;
 _free($0); //@line 10371
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 1822
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 12538
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_913() {
 return _pthread_self() | 0; //@line 9642
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 12544
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function __ZN6SocketD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 6820
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 13121
 return;
}
function __ZThn4_N17EthernetInterfaceD1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_8($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function ___ofl_unlock() {
 ___unlock(6856); //@line 5172
 return;
}
function __ZN6SocketD2Ev__async_cb_5($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(255); //@line 2041
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(254); //@line 2038
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(253); //@line 2035
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(252); //@line 2032
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(251); //@line 2029
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(250); //@line 2026
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(249); //@line 2023
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(248); //@line 2020
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(247); //@line 2017
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(246); //@line 2014
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(245); //@line 2011
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(244); //@line 2008
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(243); //@line 2005
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(242); //@line 2002
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(241); //@line 1999
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(240); //@line 1996
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(239); //@line 1993
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(238); //@line 1990
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(237); //@line 1987
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(236); //@line 1984
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(235); //@line 1981
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(234); //@line 1978
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(233); //@line 1975
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(232); //@line 1972
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(231); //@line 1969
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(230); //@line 1966
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(229); //@line 1963
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(228); //@line 1960
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(227); //@line 1957
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(226); //@line 1954
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(225); //@line 1951
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(224); //@line 1948
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(223); //@line 1945
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(222); //@line 1942
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(221); //@line 1939
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(220); //@line 1936
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(219); //@line 1933
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(218); //@line 1930
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(217); //@line 1927
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(216); //@line 1924
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(215); //@line 1921
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(214); //@line 1918
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(213); //@line 1915
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(212); //@line 1912
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(211); //@line 1909
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(210); //@line 1906
}
function b52(p0) {
 p0 = p0 | 0;
 nullFunc_vi(209); //@line 1903
}
function b51(p0) {
 p0 = p0 | 0;
 nullFunc_vi(208); //@line 1900
}
function b50(p0) {
 p0 = p0 | 0;
 nullFunc_vi(207); //@line 1897
}
function b49(p0) {
 p0 = p0 | 0;
 nullFunc_vi(206); //@line 1894
}
function b48(p0) {
 p0 = p0 | 0;
 nullFunc_vi(205); //@line 1891
}
function b47(p0) {
 p0 = p0 | 0;
 nullFunc_vi(204); //@line 1888
}
function b46(p0) {
 p0 = p0 | 0;
 nullFunc_vi(203); //@line 1885
}
function b45(p0) {
 p0 = p0 | 0;
 nullFunc_vi(202); //@line 1882
}
function b44(p0) {
 p0 = p0 | 0;
 nullFunc_vi(201); //@line 1879
}
function b43(p0) {
 p0 = p0 | 0;
 nullFunc_vi(200); //@line 1876
}
function b42(p0) {
 p0 = p0 | 0;
 nullFunc_vi(199); //@line 1873
}
function b41(p0) {
 p0 = p0 | 0;
 nullFunc_vi(198); //@line 1870
}
function b40(p0) {
 p0 = p0 | 0;
 nullFunc_vi(197); //@line 1867
}
function b39(p0) {
 p0 = p0 | 0;
 nullFunc_vi(196); //@line 1864
}
function b38(p0) {
 p0 = p0 | 0;
 nullFunc_vi(195); //@line 1861
}
function b37(p0) {
 p0 = p0 | 0;
 nullFunc_vi(194); //@line 1858
}
function b36(p0) {
 p0 = p0 | 0;
 nullFunc_vi(193); //@line 1855
}
function b35(p0) {
 p0 = p0 | 0;
 nullFunc_vi(192); //@line 1852
}
function b34(p0) {
 p0 = p0 | 0;
 nullFunc_vi(191); //@line 1849
}
function b33(p0) {
 p0 = p0 | 0;
 nullFunc_vi(190); //@line 1846
}
function b32(p0) {
 p0 = p0 | 0;
 nullFunc_vi(189); //@line 1843
}
function b31(p0) {
 p0 = p0 | 0;
 nullFunc_vi(188); //@line 1840
}
function b30(p0) {
 p0 = p0 | 0;
 nullFunc_vi(187); //@line 1837
}
function b29(p0) {
 p0 = p0 | 0;
 nullFunc_vi(186); //@line 1834
}
function b28(p0) {
 p0 = p0 | 0;
 nullFunc_vi(185); //@line 1831
}
function b27(p0) {
 p0 = p0 | 0;
 nullFunc_vi(184); //@line 1828
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4587
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 4815
}
function b26(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 1825
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function _arm_random_seed_get() {
 return 0; //@line 10311
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function ___errno_location() {
 return 6852; //@line 4581
}
function __ZSt9terminatev__async_cb_1($0) {
 $0 = $0 | 0;
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _wait__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_self() {
 return 1024; //@line 4634
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b24() {
 nullFunc_v(0); //@line 1819
}
function _arm_random_module_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b1,__ZN17EthernetInterface15get_mac_addressEv,__ZN17EthernetInterface14get_ip_addressEv,__ZN17EthernetInterface11get_netmaskEv,__ZN17EthernetInterface11get_gatewayEv,__ZN17EthernetInterface7connectEv,__ZN17EthernetInterface10disconnectEv,__ZNK16NetworkInterface21get_connection_statusEv,__ZN17EthernetInterface9get_stackEv,__ZThn4_N17EthernetInterface14get_ip_addressEv,__ZN9UDPSocket9get_protoEv,___stdio_close,__Z11coap_malloct,b2,b3,b4];
var FUNCTION_TABLE_iii = [b6,__ZN17EthernetInterface8set_dhcpEb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress,__ZN16NetworkInterface12set_blockingEb,__ZN17EthernetInterface12socket_closeEPv,__ZN12NetworkStack14add_dns_serverERK13SocketAddress,__ZThn4_N17EthernetInterface12socket_closeEPv,b7];
var FUNCTION_TABLE_iiii = [b9,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZN17EthernetInterface13socket_listenEPvi,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZThn4_N17EthernetInterface13socket_listenEPvi,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv,_do_read];
var FUNCTION_TABLE_iiiii = [b11,__ZN17EthernetInterface11set_networkEPKcS1_S1_,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZN17EthernetInterface11socket_sendEPvPKvj,__ZN17EthernetInterface11socket_recvEPvS0_j,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j,__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv,b12,b13,b14,b15,b16];
var FUNCTION_TABLE_iiiiii = [b18,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,__ZN12NetworkStack11setstackoptEiiPKvj,__ZN12NetworkStack11getstackoptEiiPvPj,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,b19];
var FUNCTION_TABLE_iiiiiii = [b21,__ZN12NetworkStack10setsockoptEPviiPKvj,__ZN12NetworkStack10getsockoptEPviiS0_Pj,b22];
var FUNCTION_TABLE_v = [b24,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_vi = [b26,__ZN17EthernetInterfaceD2Ev,__ZN17EthernetInterfaceD0Ev,__ZThn4_N17EthernetInterfaceD1Ev,__ZThn4_N17EthernetInterfaceD0Ev,__ZN6SocketD2Ev,__ZN6SocketD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv,__ZN9UDPSocketD2Ev,__ZN9UDPSocketD0Ev,__ZN9UDPSocket5eventEv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN17EthernetInterface15get_mac_addressEv__async_cb,__ZN17EthernetInterface14get_ip_addressEv__async_cb,__ZN17EthernetInterface11get_netmaskEv__async_cb,__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb,__ZN17EthernetInterface8set_dhcpEb__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_13,__ZN17EthernetInterface12socket_closeEPv__async_cb,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb
,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_73,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_74,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_72,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_78,__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_56,__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_3,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_4,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_2,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_7,_sn_coap_parser__async_cb,_sn_coap_parser__async_cb_17,_sn_coap_parser__async_cb_18,_sn_coap_parser__async_cb_19,_sn_coap_parser__async_cb_25,_sn_coap_parser__async_cb_20,_sn_coap_parser__async_cb_24,_sn_coap_parser__async_cb_23,_sn_coap_parser__async_cb_22,_sn_coap_parser__async_cb_21,_sn_coap_parser_options_parse_multiple_options__async_cb
,_sn_coap_protocol_init__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_39,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_11,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_12,__ZN6SocketD2Ev__async_cb,__ZN6SocketD2Ev__async_cb_5,__ZN6Socket4openEP12NetworkStack__async_cb,__ZN6Socket4openEP12NetworkStack__async_cb_79,__ZN6Socket4openEP12NetworkStack__async_cb_80,__ZN6Socket4openEP12NetworkStack__async_cb_81,__ZN6Socket4openEP12NetworkStack__async_cb_82,__ZN4mbed8CallbackIFvvEE5thunkEPv,__ZN6Socket4openEP12NetworkStack__async_cb_83,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_75,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb,__ZN6Socket5closeEv__async_cb,__ZN6Socket5closeEv__async_cb_70,__ZN6Socket5closeEv__async_cb_71,__ZN9UDPSocketD2Ev__async_cb_9,__ZN9UDPSocketD2Ev__async_cb,__ZN9UDPSocketD2Ev__async_cb_8,__ZN9UDPSocketD0Ev__async_cb,__ZN9UDPSocket5eventEv__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_84,__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb
,__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_38,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_35,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_30,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_37,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_36,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_34,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_29,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_33,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_28,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_32,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_27,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_31,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb,__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_54,_mbed_die__async_cb_53,_mbed_die__async_cb_52,_mbed_die__async_cb_51,_mbed_die__async_cb_50,_mbed_die__async_cb_49,_mbed_die__async_cb_48,_mbed_die__async_cb_47,_mbed_die__async_cb_46,_mbed_die__async_cb_45,_mbed_die__async_cb_44,_mbed_die__async_cb_43,_mbed_die__async_cb_42,_mbed_die__async_cb_41
,_mbed_die__async_cb_40,_mbed_die__async_cb,_invoke_ticker__async_cb_85,_invoke_ticker__async_cb,_wait__async_cb,_wait_ms__async_cb,__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb,__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb,__Z17recv_coap_messagev__async_cb_67,__Z17recv_coap_messagev__async_cb_68,__Z17recv_coap_messagev__async_cb,_main__async_cb_60,_main__async_cb_59,_main__async_cb,_main__async_cb_62,__Z9coap_freePv,_main__async_cb_63,_main__async_cb_61,_main__async_cb_57,_main__async_cb_58,_main__async_cb_64,___overflow__async_cb,_fflush__async_cb_15,_fflush__async_cb_14,_fflush__async_cb_16,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_55,_vfprintf__async_cb,_vsnprintf__async_cb
,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_fputc__async_cb_26,_fputc__async_cb,_puts__async_cb,__Znwj__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_77,_abort_message__async_cb,_abort_message__async_cb_6,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_69,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_66,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_10,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_65,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_89,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_88,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_87,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_86,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_76,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb
,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51
,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81
,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98];
var FUNCTION_TABLE_vii = [b100,__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv,b101];
var FUNCTION_TABLE_viiii = [b103,__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b104,b105];
var FUNCTION_TABLE_viiiii = [b107,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b109,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=coap.js.map