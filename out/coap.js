// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { return window.MbedJSHal.network.get_mac_address(); },
 function($0) { return window.MbedJSHal.network.get_ip_address(); },
 function($0) { return window.MbedJSHal.network.get_netmask(); },
 function($0) { return window.MbedJSHal.network.socket_open($0); },
 function($0) { return window.MbedJSHal.network.socket_close($0); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_connect($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_send($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_recv($0, $1, $2); },
 function() { return Date.now(); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 12032;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "coap.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0"];
var debug_table_ii = ["0", "__ZN17EthernetInterface15get_mac_addressEv", "__ZN17EthernetInterface14get_ip_addressEv", "__ZN17EthernetInterface11get_netmaskEv", "__ZN17EthernetInterface11get_gatewayEv", "__ZN17EthernetInterface7connectEv", "__ZN17EthernetInterface10disconnectEv", "__ZNK16NetworkInterface21get_connection_statusEv", "__ZN16NetworkInterface12ethInterfaceEv", "__ZN16NetworkInterface13wifiInterfaceEv", "__ZN16NetworkInterface13meshInterfaceEv", "__ZN16NetworkInterface12cellularBaseEv", "__ZN16NetworkInterface13emacInterfaceEv", "__ZN17EthernetInterface9get_stackEv", "__ZThn4_N17EthernetInterface14get_ip_addressEv", "__ZN12NetworkStack19onboardNetworkStackEv", "__ZN9UDPSocket9get_protoEv", "___stdio_close", "__Z11coap_malloct", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16NetworkInterface26gethostbyname_async_cancelEi", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress", "__ZN17EthernetInterface8set_dhcpEb", "__ZN16NetworkInterface12set_blockingEb", "__ZN17EthernetInterface12socket_closeEPv", "__ZN12NetworkStack26gethostbyname_async_cancelEi", "__ZN12NetworkStack14add_dns_serverERK13SocketAddress", "__ZThn4_N17EthernetInterface12socket_closeEPv", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZN17EthernetInterface13socket_listenEPvi", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack14get_dns_serverEiP13SocketAddress", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface13socket_listenEPvi", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv", "_do_read", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZN17EthernetInterface11set_networkEPKcS1_S1_", "__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZN17EthernetInterface11socket_sendEPvPKvj", "__ZN17EthernetInterface11socket_recvEPvS0_j", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j", "__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "__ZN12NetworkStack11setstackoptEiiPKvj", "__ZN12NetworkStack11getstackoptEiiPvPj", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "0"];
var debug_table_iiiiiii = ["0", "__ZN12NetworkStack10setsockoptEPviiPKvj", "__ZN12NetworkStack10getsockoptEPviiS0_Pj", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "__ZL25default_terminate_handlerv", "__ZL29nsapi_dns_query_async_timeoutv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN17EthernetInterfaceD2Ev", "__ZN17EthernetInterfaceD0Ev", "__ZThn4_N17EthernetInterfaceD1Ev", "__ZThn4_N17EthernetInterfaceD0Ev", "_mbed_trace_default_print", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv", "__ZN6SocketD2Ev", "__ZN6SocketD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv", "__ZN9UDPSocketD2Ev", "__ZN9UDPSocketD0Ev", "__ZN9UDPSocket5eventEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN17EthernetInterface15get_mac_addressEv__async_cb", "__ZN17EthernetInterface14get_ip_addressEv__async_cb", "__ZN17EthernetInterface11get_netmaskEv__async_cb", "__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb", "__ZN17EthernetInterface8set_dhcpEb__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_181", "__ZN17EthernetInterface12socket_closeEPv__async_cb", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_104", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_105", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_103", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_109", "__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_182", "__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_107", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_108", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_106", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_96", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_sn_coap_parser__async_cb", "_sn_coap_parser__async_cb_23", "_sn_coap_parser__async_cb_24", "_sn_coap_parser__async_cb_25", "_sn_coap_parser__async_cb_31", "_sn_coap_parser__async_cb_26", "_sn_coap_parser__async_cb_30", "_sn_coap_parser__async_cb_29", "_sn_coap_parser__async_cb_28", "_sn_coap_parser__async_cb_27", "_sn_coap_parser_options_parse_multiple_options__async_cb", "_sn_coap_protocol_init__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_95", "_mbed_vtracef__async_cb_85", "_mbed_vtracef__async_cb_86", "_mbed_vtracef__async_cb_87", "_mbed_vtracef__async_cb_94", "_mbed_vtracef__async_cb_88", "_mbed_vtracef__async_cb_93", "_mbed_vtracef__async_cb_89", "_mbed_vtracef__async_cb_90", "_mbed_vtracef__async_cb_91", "_mbed_vtracef__async_cb_92", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_175", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_55", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_39", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_40", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_41", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_22", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_19", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_80", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_152", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_144", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_145", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_146", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_147", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_151", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_148", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_149", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_150", "__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_53", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_45", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_51", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_46", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_47", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_52", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_48", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_50", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_49", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_35", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_36", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_37", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_38", "__ZN6SocketD2Ev__async_cb", "__ZN6SocketD2Ev__async_cb_84", "__ZN6Socket4openEP12NetworkStack__async_cb", "__ZN6Socket4openEP12NetworkStack__async_cb_139", "__ZN6Socket4openEP12NetworkStack__async_cb_140", "__ZN6Socket4openEP12NetworkStack__async_cb_141", "__ZN6Socket4openEP12NetworkStack__async_cb_142", "__ZN4mbed8CallbackIFvvEE5thunkEPv", "__ZN6Socket4openEP12NetworkStack__async_cb_143", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_133", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb", "__ZN6Socket5closeEv__async_cb", "__ZN6Socket5closeEv__async_cb_183", "__ZN6Socket5closeEv__async_cb_184", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_64", "__ZN9UDPSocketD2Ev__async_cb_187", "__ZN9UDPSocketD2Ev__async_cb", "__ZN9UDPSocketD2Ev__async_cb_186", "__ZN9UDPSocketD0Ev__async_cb", "__ZN9UDPSocket5eventEv__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_174", "__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb", "__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_7", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_4", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_3", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_2", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_6", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_5", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_56", "__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_177", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_180", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_178", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_179", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_221", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_217", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_218", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_208", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_209", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_210", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_211", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_212", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_220", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_213", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_214", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_215", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_216", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_219", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_118", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_119", "__ZL29nsapi_dns_query_async_timeoutv__async_cb", "__ZL30nsapi_dns_query_async_responsePv", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_122", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_110", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_111", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_112", "__ZL26nsapi_dns_query_async_sendPv", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_121", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_113", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_114", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_115", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_120", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_116", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_117", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_131", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_127", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_128", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_130", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_129", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb", "__ZL28nsapi_dns_query_async_createPv", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_136", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_134", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_135", "__ZL28nsapi_dns_query_async_createPv__async_cb_163", "__ZL28nsapi_dns_query_async_createPv__async_cb_170", "__ZL28nsapi_dns_query_async_createPv__async_cb", "__ZL28nsapi_dns_query_async_createPv__async_cb_166", "__ZL28nsapi_dns_query_async_createPv__async_cb_168", "__ZL28nsapi_dns_query_async_createPv__async_cb_153", "__ZL28nsapi_dns_query_async_createPv__async_cb_154", "__ZL28nsapi_dns_query_async_createPv__async_cb_155", "__ZL28nsapi_dns_query_async_createPv__async_cb_156", "__ZL28nsapi_dns_query_async_createPv__async_cb_165", "__ZL28nsapi_dns_query_async_createPv__async_cb_167", "__ZL28nsapi_dns_query_async_createPv__async_cb_157", "__ZL28nsapi_dns_query_async_createPv__async_cb_158", "__ZL28nsapi_dns_query_async_createPv__async_cb_162", "__ZL28nsapi_dns_query_async_createPv__async_cb_159", "__ZL28nsapi_dns_query_async_createPv__async_cb_160", "__ZL37nsapi_dns_query_async_socket_callbackPv", "__ZL28nsapi_dns_query_async_createPv__async_cb_169", "__ZL28nsapi_dns_query_async_createPv__async_cb_161", "__ZL28nsapi_dns_query_async_createPv__async_cb_164", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_100", "__ZL28nsapi_dns_query_async_deletei__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_97", "__ZL28nsapi_dns_query_async_deletei__async_cb_98", "__ZL28nsapi_dns_query_async_deletei__async_cb_99", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_34", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_32", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_33", "__ZL26nsapi_dns_query_async_sendPv__async_cb", "__ZL26nsapi_dns_query_async_sendPv__async_cb_15", "__ZL26nsapi_dns_query_async_sendPv__async_cb_17", "__ZL26nsapi_dns_query_async_sendPv__async_cb_8", "__ZL26nsapi_dns_query_async_sendPv__async_cb_9", "__ZL26nsapi_dns_query_async_sendPv__async_cb_10", "__ZL26nsapi_dns_query_async_sendPv__async_cb_11", "__ZL26nsapi_dns_query_async_sendPv__async_cb_14", "__ZL26nsapi_dns_query_async_sendPv__async_cb_16", "__ZL26nsapi_dns_query_async_sendPv__async_cb_12", "__ZL26nsapi_dns_query_async_sendPv__async_cb_13", "__ZL26nsapi_dns_query_async_sendPv__async_cb_18", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_62", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_61", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_59", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_60", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_57", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_58", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_205", "__ZL30nsapi_dns_query_async_responsePv__async_cb_204", "__ZL30nsapi_dns_query_async_responsePv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_206", "__ZL30nsapi_dns_query_async_responsePv__async_cb_207", "__ZL30nsapi_dns_query_async_responsePv__async_cb_202", "__ZL30nsapi_dns_query_async_responsePv__async_cb_203", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_192", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_188", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_189", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_190", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_191", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb_137", "__Z28nsapi_dns_query_async_canceli__async_cb_138", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_79", "_mbed_die__async_cb_78", "_mbed_die__async_cb_77", "_mbed_die__async_cb_76", "_mbed_die__async_cb_75", "_mbed_die__async_cb_74", "_mbed_die__async_cb_73", "_mbed_die__async_cb_72", "_mbed_die__async_cb_71", "_mbed_die__async_cb_70", "_mbed_die__async_cb_69", "_mbed_die__async_cb_68", "_mbed_die__async_cb_67", "_mbed_die__async_cb_66", "_mbed_die__async_cb_65", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_102", "_mbed_error_vfprintf__async_cb_101", "_serial_putc__async_cb_63", "_serial_putc__async_cb", "_invoke_ticker__async_cb_54", "_invoke_ticker__async_cb", "_wait__async_cb", "_wait_ms__async_cb", "__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb", "__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb", "__Z17recv_coap_messagev__async_cb_82", "__Z17recv_coap_messagev__async_cb_83", "__Z17recv_coap_messagev__async_cb", "_main__async_cb_197", "_main__async_cb_196", "_main__async_cb", "_main__async_cb_199", "__Z9coap_freePv", "_main__async_cb_200", "_main__async_cb_198", "_main__async_cb_194", "_main__async_cb_195", "_main__async_cb_201", "_putc__async_cb_193", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_43", "_fflush__async_cb_42", "_fflush__async_cb_44", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_20", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_fputc__async_cb_21", "_fputc__async_cb", "_puts__async_cb", "__Znwj__async_cb", "__ZnwjRKSt9nothrow_t__async_cb", "__Znaj__async_cb", "__ZnajRKSt9nothrow_t__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_132", "_abort_message__async_cb", "_abort_message__async_cb_172", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_1", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_171", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_176", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_173", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_126", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_125", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_124", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_123", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_185", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE", "__ZN12NetworkStack20get_call_in_callbackEv", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv"];
var debug_table_viii = ["0"];
var debug_table_viiii = ["0", "__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _sn_coap_parser__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $1001 = 0, $1002 = 0, $1007 = 0, $1008 = 0, $1013 = 0, $1016 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1031 = 0, $1032 = 0, $1034 = 0, $104 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $106 = 0, $108 = 0, $110 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $133 = 0, $14 = 0, $147 = 0, $149 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $24 = 0, $241 = 0, $244 = 0, $258 = 0, $26 = 0, $263 = 0, $275 = 0, $278 = 0, $279 = 0, $28 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $36 = 0, $360 = 0, $361 = 0, $366 = 0, $369 = 0, $372 = 0, $373 = 0, $378 = 0, $38 = 0, $381 = 0, $385 = 0, $388 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $465 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $535 = 0, $538 = 0, $54 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $615 = 0, $616 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $690 = 0, $693 = 0, $694 = 0, $699 = 0, $70 = 0, $702 = 0, $704 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $859 = 0, $86 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $932 = 0, $935 = 0, $936 = 0, $94 = 0, $941 = 0, $944 = 0, $948 = 0, $951 = 0, $952 = 0, $957 = 0, $96 = 0, $960 = 0, $964 = 0, $967 = 0, $968 = 0, $973 = 0, $976 = 0, $98 = 0, $980 = 0, $981 = 0, $986 = 0, $987 = 0, $992 = 0, $995 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $378$looptemp = 0, $699$looptemp = 0, $854$looptemp = 0, $941$looptemp = 0, $957$looptemp = 0, $973$looptemp = 0, $992$looptemp = 0, $1013$looptemp = 0, $366$looptemp = 0;
 sp = STACKTOP; //@line 12408
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12410
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12414
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12416
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12418
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12420
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12422
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12424
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12426
 $20 = HEAP16[$0 + 40 >> 1] | 0; //@line 12428
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12430
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12432
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12434
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12436
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12438
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12440
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 12442
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12444
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 12446
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 12450
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 12452
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 12454
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 12456
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 12458
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 12460
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 12462
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 12464
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 12466
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 12468
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 12470
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 12472
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 12474
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 12476
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 12478
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 12480
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 12482
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 12484
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 12486
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 12488
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 12490
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 12492
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 12494
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 12496
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 12500
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 12502
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 12504
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 12506
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 12508
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 12510
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 12512
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 12514
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 12516
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 12518
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 12522
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 12524
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 12526
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 12528
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 12530
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 12532
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 12534
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 12536
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 12538
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12540
 if (!$AsyncRetVal) {
  _mbed_tracef(2, 3803, 3808, HEAP32[$0 + 180 >> 2] | 0); //@line 12543
  _mbed_tracef(2, 3803, 3916, $122); //@line 12544
  $$0 = 0; //@line 12545
  $1041 = ___async_retval; //@line 12546
  HEAP32[$1041 >> 2] = $$0; //@line 12547
  return;
 }
 dest = $AsyncRetVal; //@line 12550
 stop = dest + 44 | 0; //@line 12550
 do {
  HEAP32[dest >> 2] = 0; //@line 12550
  dest = dest + 4 | 0; //@line 12550
 } while ((dest | 0) < (stop | 0));
 $133 = $AsyncRetVal + 16 | 0; //@line 12551
 HEAP32[$133 >> 2] = -1; //@line 12552
 HEAP32[$18 >> 2] = HEAP8[$16 >> 0] & -64 & 255; //@line 12556
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP8[$16 >> 0] & 48; //@line 12561
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAPU8[$16 + 1 >> 0]; //@line 12566
 $147 = HEAP8[$16 + 3 >> 0] | 0; //@line 12569
 $149 = $AsyncRetVal + 20 | 0; //@line 12571
 HEAP16[$149 >> 1] = $147 & 255; //@line 12572
 HEAP16[$149 >> 1] = HEAPU8[$16 + 2 >> 0] << 8 | $147 & 255; //@line 12579
 $156 = $16 + 4 | 0; //@line 12580
 HEAP32[$38 >> 2] = $156; //@line 12581
 $158 = HEAP8[$16 >> 0] & 15; //@line 12583
 HEAP8[$AsyncRetVal >> 0] = $158; //@line 12584
 L6 : do {
  if (!($158 << 24 >> 24)) {
   $231 = $156; //@line 12588
   $232 = $20 & 65535; //@line 12589
   $233 = $16; //@line 12590
   $234 = $233 + $232 | 0; //@line 12591
   $236 = $AsyncRetVal + 40 | 0; //@line 12593
   $237 = $AsyncRetVal + 32 | 0; //@line 12594
   $238 = $AsyncRetVal + 22 | 0; //@line 12595
   $$0208$i = 0; //@line 12596
   $$sink275$i = $234 - $231 | 0; //@line 12596
   $1042 = $231; //@line 12596
   $241 = $156; //@line 12596
   L8 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 115; //@line 12601
     break;
    }
    $trunc277$i = HEAP8[$241 >> 0] | 0; //@line 12604
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 115; //@line 12607
     break;
    }
    $244 = $trunc277$i & 15; //@line 12611
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 12612
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 17; //@line 12617
      break L8;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$241 + 1 >> 0] | 0; //@line 12625
      $$sink214$i = 13; //@line 12625
      $$sink3$i = 1; //@line 12625
      label = 18; //@line 12626
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$241 + 1 >> 0] << 8) + 269 | 0; //@line 12638
      $$sink214$i = HEAPU8[$241 + 2 >> 0] | 0; //@line 12638
      $$sink3$i = 2; //@line 12638
      label = 18; //@line 12639
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 12643
      $1043 = $1042; //@line 12643
      $263 = $241; //@line 12643
     }
    }
    if ((label | 0) == 18) {
     label = 0; //@line 12647
     $258 = $241 + $$sink3$i | 0; //@line 12649
     HEAP32[$38 >> 2] = $258; //@line 12650
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 12652
     $1043 = $258; //@line 12652
     $263 = $258; //@line 12652
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 12655
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 22; //@line 12659
      break L8;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$263 + 1 >> 0] | 0; //@line 12667
      $$sink216$i = 13; //@line 12667
      $$sink8$i = 1; //@line 12667
      label = 23; //@line 12668
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$263 + 1 >> 0] << 8) + 269 | 0; //@line 12680
      $$sink216$i = HEAPU8[$263 + 2 >> 0] | 0; //@line 12680
      $$sink8$i = 2; //@line 12680
      label = 23; //@line 12681
      break;
     }
    default:
     {
      $$1202$in$i = $244; //@line 12685
      $278 = $1043; //@line 12685
      $293 = $263; //@line 12685
     }
    }
    if ((label | 0) == 23) {
     label = 0; //@line 12689
     $275 = $263 + $$sink8$i | 0; //@line 12691
     HEAP32[$38 >> 2] = $275; //@line 12692
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 12694
     $278 = $275; //@line 12694
     $293 = $275; //@line 12694
    }
    $$1202$i = $$1202$in$i & 65535; //@line 12696
    $279 = $234 - $278 & 65535; //@line 12698
    $trunc$i = $$0208$i & 65535; //@line 12699
    L24 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 70; //@line 12703
       break L8;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$236 >> 2] | 0)) {
        label = 26; //@line 12711
        break L8;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 41; //@line 12716
         break L8;
         break;
        }
       case 4:
        {
         label = 47; //@line 12721
         break L8;
         break;
        }
       case 3:
        {
         label = 50; //@line 12726
         break L8;
         break;
        }
       case 8:
        {
         label = 56; //@line 12731
         break L8;
         break;
        }
       case 20:
        {
         label = 67; //@line 12736
         break L8;
         break;
        }
       case 11:
        {
         label = 70; //@line 12741
         break L8;
         break;
        }
       case 15:
        {
         label = 79; //@line 12746
         break L8;
         break;
        }
       case 12:
        {
         label = 30; //@line 12751
         break L24;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 37; //@line 12758
          break L8;
         }
         $372 = $293 + 1 | 0; //@line 12761
         HEAP32[$38 >> 2] = $372; //@line 12762
         $373 = $$1202$in$i & 255; //@line 12763
         if (!($373 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 12766
         } else {
          $$045$i221$i = $373; //@line 12768
          $$06$i220$i = 0; //@line 12768
          $378 = $372; //@line 12768
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 12770
           $378$looptemp = $378;
           $378 = $378 + 1 | 0; //@line 12772
           HEAP32[$38 >> 2] = $378; //@line 12773
           $381 = $$06$i220$i << 8 | HEAPU8[$378$looptemp >> 0]; //@line 12776
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $381; //@line 12779
            break;
           } else {
            $$06$i220$i = $381; //@line 12782
           }
          }
         }
         HEAP32[(HEAP32[$236 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 12788
         break L24;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 63; //@line 12795
          break L8;
         }
         $690 = (HEAP32[$236 >> 2] | 0) + 28 | 0; //@line 12799
         if ((HEAP32[$690 >> 2] | 0) != -1) {
          label = 63; //@line 12803
          break L8;
         }
         $693 = $293 + 1 | 0; //@line 12806
         HEAP32[$38 >> 2] = $693; //@line 12807
         $694 = $$1202$in$i & 255; //@line 12808
         if (!($694 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 12811
         } else {
          $$045$i263$i = $694; //@line 12813
          $$06$i262$i = 0; //@line 12813
          $699 = $693; //@line 12813
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 12815
           $699$looptemp = $699;
           $699 = $699 + 1 | 0; //@line 12817
           HEAP32[$38 >> 2] = $699; //@line 12818
           $702 = $$06$i262$i << 8 | HEAPU8[$699$looptemp >> 0]; //@line 12821
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $702; //@line 12824
            break;
           } else {
            $$06$i262$i = $702; //@line 12827
           }
          }
         }
         HEAP32[$690 >> 2] = $$0$lcssa$i265$i; //@line 12831
         break L24;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 75; //@line 12838
          break L8;
         }
         $845 = (HEAP32[$236 >> 2] | 0) + 32 | 0; //@line 12842
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 75; //@line 12846
          break L8;
         }
         $848 = $293 + 1 | 0; //@line 12849
         HEAP32[$38 >> 2] = $848; //@line 12850
         $849 = $$1202$in$i & 255; //@line 12851
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 12854
         } else {
          $$045$i270$i = $849; //@line 12856
          $$06$i269$i = 0; //@line 12856
          $854 = $848; //@line 12856
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 12858
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 12860
           HEAP32[$38 >> 2] = $854; //@line 12861
           $857 = $$06$i269$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 12864
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $857; //@line 12867
            break;
           } else {
            $$06$i269$i = $857; //@line 12870
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i272$i; //@line 12874
         break L24;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 84; //@line 12881
          break L8;
         }
         $932 = (HEAP32[$236 >> 2] | 0) + 40 | 0; //@line 12885
         if ((HEAP32[$932 >> 2] | 0) != -1) {
          label = 84; //@line 12889
          break L8;
         }
         $935 = $293 + 1 | 0; //@line 12892
         HEAP32[$38 >> 2] = $935; //@line 12893
         $936 = $$1202$in$i & 255; //@line 12894
         if (!($936 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 12897
         } else {
          $$045$i256$i = $936; //@line 12899
          $$06$i255$i = 0; //@line 12899
          $941 = $935; //@line 12899
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 12901
           $941$looptemp = $941;
           $941 = $941 + 1 | 0; //@line 12903
           HEAP32[$38 >> 2] = $941; //@line 12904
           $944 = $$06$i255$i << 8 | HEAPU8[$941$looptemp >> 0]; //@line 12907
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $944; //@line 12910
            break;
           } else {
            $$06$i255$i = $944; //@line 12913
           }
          }
         }
         HEAP32[$932 >> 2] = $$0$lcssa$i258$i; //@line 12917
         break L24;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 90; //@line 12924
          break L8;
         }
         $948 = (HEAP32[$236 >> 2] | 0) + 36 | 0; //@line 12928
         if ((HEAP32[$948 >> 2] | 0) != -1) {
          label = 90; //@line 12932
          break L8;
         }
         $951 = $293 + 1 | 0; //@line 12935
         HEAP32[$38 >> 2] = $951; //@line 12936
         $952 = $$1202$in$i & 255; //@line 12937
         if (!($952 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 12940
         } else {
          $$045$i249$i = $952; //@line 12942
          $$06$i248$i = 0; //@line 12942
          $957 = $951; //@line 12942
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 12944
           $957$looptemp = $957;
           $957 = $957 + 1 | 0; //@line 12946
           HEAP32[$38 >> 2] = $957; //@line 12947
           $960 = $$06$i248$i << 8 | HEAPU8[$957$looptemp >> 0]; //@line 12950
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $960; //@line 12953
            break;
           } else {
            $$06$i248$i = $960; //@line 12956
           }
          }
         }
         HEAP32[$948 >> 2] = $$0$lcssa$i251$i; //@line 12960
         break L24;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 96; //@line 12967
          break L8;
         }
         $964 = (HEAP32[$236 >> 2] | 0) + 12 | 0; //@line 12971
         if ((HEAP32[$964 >> 2] | 0) != -1) {
          label = 96; //@line 12975
          break L8;
         }
         $967 = $293 + 1 | 0; //@line 12978
         HEAP32[$38 >> 2] = $967; //@line 12979
         $968 = $$1202$in$i & 255; //@line 12980
         if (!($968 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 12983
         } else {
          $$045$i242$i = $968; //@line 12985
          $$06$i241$i = 0; //@line 12985
          $973 = $967; //@line 12985
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 12987
           $973$looptemp = $973;
           $973 = $973 + 1 | 0; //@line 12989
           HEAP32[$38 >> 2] = $973; //@line 12990
           $976 = $$06$i241$i << 8 | HEAPU8[$973$looptemp >> 0]; //@line 12993
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $976; //@line 12996
            break;
           } else {
            $$06$i241$i = $976; //@line 12999
           }
          }
         }
         HEAP32[$964 >> 2] = $$0$lcssa$i244$i; //@line 13003
         break L24;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 102; //@line 13010
          break L8;
         }
         $980 = (HEAP32[$236 >> 2] | 0) + 1 | 0; //@line 13014
         $981 = HEAP8[$980 >> 0] | 0; //@line 13015
         if ($981 & 1) {
          label = 102; //@line 13019
          break L8;
         }
         HEAP8[$980 >> 0] = $981 | 1; //@line 13023
         $986 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 13025
         HEAP32[$38 >> 2] = $986; //@line 13026
         $987 = $$1202$in$i & 255; //@line 13027
         if (!($987 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 13030
         } else {
          $$045$i235$i = $987; //@line 13032
          $$06$i234$i = 0; //@line 13032
          $992 = $986; //@line 13032
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 13034
           $992$looptemp = $992;
           $992 = $992 + 1 | 0; //@line 13036
           HEAP32[$38 >> 2] = $992; //@line 13037
           $995 = $$06$i234$i << 8 | HEAPU8[$992$looptemp >> 0]; //@line 13040
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $995; //@line 13043
            break;
           } else {
            $$06$i234$i = $995; //@line 13046
           }
          }
         }
         HEAP32[(HEAP32[$236 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 13052
         break L24;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 108; //@line 13059
          break L8;
         }
         $1001 = (HEAP32[$236 >> 2] | 0) + 1 | 0; //@line 13063
         $1002 = HEAP8[$1001 >> 0] | 0; //@line 13064
         if ($1002 & 2) {
          label = 108; //@line 13068
          break L8;
         }
         HEAP8[$1001 >> 0] = $1002 | 2; //@line 13072
         $1007 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 13074
         HEAP32[$38 >> 2] = $1007; //@line 13075
         $1008 = $$1202$in$i & 255; //@line 13076
         if (!($1008 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 13079
         } else {
          $$045$i228$i = $1008; //@line 13081
          $$06$i227$i = 0; //@line 13081
          $1013 = $1007; //@line 13081
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 13083
           $1013$looptemp = $1013;
           $1013 = $1013 + 1 | 0; //@line 13085
           HEAP32[$38 >> 2] = $1013; //@line 13086
           $1016 = $$06$i227$i << 8 | HEAPU8[$1013$looptemp >> 0]; //@line 13089
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $1016; //@line 13092
            break;
           } else {
            $$06$i227$i = $1016; //@line 13095
           }
          }
         }
         HEAP32[(HEAP32[$236 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 13101
         break L24;
         break;
        }
       default:
        {
         label = 112; //@line 13106
         break L8;
        }
       }
       break;
      }
     case 12:
      {
       label = 30; //@line 13113
       break;
      }
     default:
      {
       label = 112; //@line 13117
       break L8;
      }
     }
    } while (0);
    if ((label | 0) == 30) {
     label = 0; //@line 13123
     if (($$1202$i & 65535) > 2) {
      label = 32; //@line 13126
      break;
     }
     if ((HEAP32[$133 >> 2] | 0) != -1) {
      label = 32; //@line 13132
      break;
     }
     $360 = $293 + 1 | 0; //@line 13135
     HEAP32[$38 >> 2] = $360; //@line 13136
     $361 = $$1202$in$i & 255; //@line 13137
     if (!($361 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 13140
     } else {
      $$045$i$i = $361; //@line 13142
      $$06$i$i = 0; //@line 13142
      $366 = $360; //@line 13142
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 13144
       $366$looptemp = $366;
       $366 = $366 + 1 | 0; //@line 13146
       HEAP32[$38 >> 2] = $366; //@line 13147
       $369 = $$06$i$i << 8 | HEAPU8[$366$looptemp >> 0]; //@line 13150
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $369; //@line 13153
        break;
       } else {
        $$06$i$i = $369; //@line 13156
       }
      }
     }
     HEAP32[$133 >> 2] = $$0$lcssa$i$i; //@line 13160
    }
    $1020 = HEAP32[$38 >> 2] | 0; //@line 13162
    $1021 = $1020 - $233 | 0; //@line 13163
    if (($1021 | 0) > ($232 | 0)) {
     break L6;
    } else {
     $$sink275$i = $232 - $1021 | 0; //@line 13170
     $1042 = $1020; //@line 13170
     $241 = $1020; //@line 13170
    }
   }
   switch (label | 0) {
   case 17:
    {
     _mbed_tracef(2, 3803, 4066, $78); //@line 13175
     break L6;
     break;
    }
   case 22:
    {
     _mbed_tracef(2, 3803, 4124, $30); //@line 13180
     break L6;
     break;
    }
   case 26:
    {
     $282 = HEAP32[$128 >> 2] | 0; //@line 13185
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 13186
     $283 = FUNCTION_TABLE_ii[$282 & 31](68) | 0; //@line 13187
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 13190
      $284 = $ReallocAsyncCtx3 + 4 | 0; //@line 13191
      HEAP32[$284 >> 2] = $2; //@line 13192
      $285 = $ReallocAsyncCtx3 + 8 | 0; //@line 13193
      HEAP32[$285 >> 2] = $237; //@line 13194
      $286 = $ReallocAsyncCtx3 + 12 | 0; //@line 13195
      HEAP32[$286 >> 2] = $6; //@line 13196
      $287 = $ReallocAsyncCtx3 + 16 | 0; //@line 13197
      HEAP32[$287 >> 2] = $8; //@line 13198
      $288 = $ReallocAsyncCtx3 + 20 | 0; //@line 13199
      HEAP32[$288 >> 2] = $133; //@line 13200
      $289 = $ReallocAsyncCtx3 + 24 | 0; //@line 13201
      HEAP32[$289 >> 2] = $10; //@line 13202
      $290 = $ReallocAsyncCtx3 + 28 | 0; //@line 13203
      HEAP32[$290 >> 2] = $12; //@line 13204
      $291 = $ReallocAsyncCtx3 + 32 | 0; //@line 13205
      HEAP32[$291 >> 2] = $14; //@line 13206
      $292 = $ReallocAsyncCtx3 + 36 | 0; //@line 13207
      HEAP32[$292 >> 2] = $293; //@line 13208
      $294 = $ReallocAsyncCtx3 + 40 | 0; //@line 13209
      HEAP32[$294 >> 2] = $22; //@line 13210
      $295 = $ReallocAsyncCtx3 + 44 | 0; //@line 13211
      HEAP32[$295 >> 2] = $24; //@line 13212
      $296 = $ReallocAsyncCtx3 + 48 | 0; //@line 13213
      HEAP32[$296 >> 2] = $238; //@line 13214
      $297 = $ReallocAsyncCtx3 + 52 | 0; //@line 13215
      HEAP32[$297 >> 2] = $26; //@line 13216
      $298 = $ReallocAsyncCtx3 + 56 | 0; //@line 13217
      HEAP32[$298 >> 2] = $28; //@line 13218
      $299 = $ReallocAsyncCtx3 + 60 | 0; //@line 13219
      HEAP32[$299 >> 2] = $30; //@line 13220
      $300 = $ReallocAsyncCtx3 + 64 | 0; //@line 13221
      HEAP32[$300 >> 2] = $32; //@line 13222
      $301 = $ReallocAsyncCtx3 + 68 | 0; //@line 13223
      HEAP32[$301 >> 2] = $34; //@line 13224
      $302 = $ReallocAsyncCtx3 + 72 | 0; //@line 13225
      HEAP32[$302 >> 2] = $36; //@line 13226
      $303 = $ReallocAsyncCtx3 + 76 | 0; //@line 13227
      HEAP32[$303 >> 2] = $38; //@line 13228
      $304 = $ReallocAsyncCtx3 + 80 | 0; //@line 13229
      HEAP32[$304 >> 2] = $AsyncRetVal; //@line 13230
      $305 = $ReallocAsyncCtx3 + 84 | 0; //@line 13231
      HEAP32[$305 >> 2] = $$1202$in$i; //@line 13232
      $306 = $ReallocAsyncCtx3 + 88 | 0; //@line 13233
      HEAP32[$306 >> 2] = $44; //@line 13234
      $307 = $ReallocAsyncCtx3 + 92 | 0; //@line 13235
      HEAP32[$307 >> 2] = $48; //@line 13236
      $308 = $ReallocAsyncCtx3 + 96 | 0; //@line 13237
      HEAP16[$308 >> 1] = $$1202$i; //@line 13238
      $309 = $ReallocAsyncCtx3 + 100 | 0; //@line 13239
      HEAP32[$309 >> 2] = $50; //@line 13240
      $310 = $ReallocAsyncCtx3 + 104 | 0; //@line 13241
      HEAP32[$310 >> 2] = $52; //@line 13242
      $311 = $ReallocAsyncCtx3 + 108 | 0; //@line 13243
      HEAP32[$311 >> 2] = $54; //@line 13244
      $312 = $ReallocAsyncCtx3 + 112 | 0; //@line 13245
      HEAP32[$312 >> 2] = $56; //@line 13246
      $313 = $ReallocAsyncCtx3 + 116 | 0; //@line 13247
      HEAP32[$313 >> 2] = $60; //@line 13248
      $314 = $ReallocAsyncCtx3 + 120 | 0; //@line 13249
      HEAP32[$314 >> 2] = $42; //@line 13250
      $315 = $ReallocAsyncCtx3 + 124 | 0; //@line 13251
      HEAP32[$315 >> 2] = $62; //@line 13252
      $316 = $ReallocAsyncCtx3 + 128 | 0; //@line 13253
      HEAP32[$316 >> 2] = $64; //@line 13254
      $317 = $ReallocAsyncCtx3 + 132 | 0; //@line 13255
      HEAP32[$317 >> 2] = $66; //@line 13256
      $318 = $ReallocAsyncCtx3 + 136 | 0; //@line 13257
      HEAP32[$318 >> 2] = $$0208$i; //@line 13258
      $319 = $ReallocAsyncCtx3 + 140 | 0; //@line 13259
      HEAP32[$319 >> 2] = $68; //@line 13260
      $320 = $ReallocAsyncCtx3 + 144 | 0; //@line 13261
      HEAP32[$320 >> 2] = $70; //@line 13262
      $321 = $ReallocAsyncCtx3 + 148 | 0; //@line 13263
      HEAP32[$321 >> 2] = $38; //@line 13264
      $322 = $ReallocAsyncCtx3 + 152 | 0; //@line 13265
      HEAP32[$322 >> 2] = $72; //@line 13266
      $323 = $ReallocAsyncCtx3 + 156 | 0; //@line 13267
      HEAP16[$323 >> 1] = $279; //@line 13268
      $324 = $ReallocAsyncCtx3 + 160 | 0; //@line 13269
      HEAP32[$324 >> 2] = $74; //@line 13270
      $325 = $ReallocAsyncCtx3 + 164 | 0; //@line 13271
      HEAP32[$325 >> 2] = $76; //@line 13272
      $326 = $ReallocAsyncCtx3 + 168 | 0; //@line 13273
      HEAP32[$326 >> 2] = $78; //@line 13274
      $327 = $ReallocAsyncCtx3 + 172 | 0; //@line 13275
      HEAP32[$327 >> 2] = $80; //@line 13276
      $328 = $ReallocAsyncCtx3 + 176 | 0; //@line 13277
      HEAP32[$328 >> 2] = $232; //@line 13278
      $329 = $ReallocAsyncCtx3 + 180 | 0; //@line 13279
      HEAP32[$329 >> 2] = $AsyncRetVal; //@line 13280
      $330 = $ReallocAsyncCtx3 + 184 | 0; //@line 13281
      HEAP32[$330 >> 2] = $82; //@line 13282
      $331 = $ReallocAsyncCtx3 + 188 | 0; //@line 13283
      HEAP32[$331 >> 2] = $84; //@line 13284
      $332 = $ReallocAsyncCtx3 + 192 | 0; //@line 13285
      HEAP32[$332 >> 2] = $86; //@line 13286
      $333 = $ReallocAsyncCtx3 + 196 | 0; //@line 13287
      HEAP32[$333 >> 2] = $88; //@line 13288
      $334 = $ReallocAsyncCtx3 + 200 | 0; //@line 13289
      HEAP32[$334 >> 2] = $233; //@line 13290
      $335 = $ReallocAsyncCtx3 + 204 | 0; //@line 13291
      HEAP32[$335 >> 2] = $94; //@line 13292
      $336 = $ReallocAsyncCtx3 + 208 | 0; //@line 13293
      HEAP32[$336 >> 2] = $96; //@line 13294
      $337 = $ReallocAsyncCtx3 + 212 | 0; //@line 13295
      HEAP32[$337 >> 2] = $98; //@line 13296
      $338 = $ReallocAsyncCtx3 + 216 | 0; //@line 13297
      HEAP32[$338 >> 2] = $234; //@line 13298
      $339 = $ReallocAsyncCtx3 + 220 | 0; //@line 13299
      HEAP32[$339 >> 2] = $100; //@line 13300
      $340 = $ReallocAsyncCtx3 + 224 | 0; //@line 13301
      HEAP32[$340 >> 2] = $102; //@line 13302
      $341 = $ReallocAsyncCtx3 + 228 | 0; //@line 13303
      HEAP32[$341 >> 2] = $104; //@line 13304
      $342 = $ReallocAsyncCtx3 + 232 | 0; //@line 13305
      HEAP32[$342 >> 2] = $106; //@line 13306
      $343 = $ReallocAsyncCtx3 + 236 | 0; //@line 13307
      HEAP32[$343 >> 2] = $108; //@line 13308
      $344 = $ReallocAsyncCtx3 + 240 | 0; //@line 13309
      HEAP32[$344 >> 2] = $110; //@line 13310
      $345 = $ReallocAsyncCtx3 + 244 | 0; //@line 13311
      HEAP32[$345 >> 2] = $114; //@line 13312
      $346 = $ReallocAsyncCtx3 + 248 | 0; //@line 13313
      HEAP32[$346 >> 2] = $116; //@line 13314
      $347 = $ReallocAsyncCtx3 + 252 | 0; //@line 13315
      HEAP32[$347 >> 2] = $118; //@line 13316
      $348 = $ReallocAsyncCtx3 + 256 | 0; //@line 13317
      HEAP32[$348 >> 2] = $120; //@line 13318
      $349 = $ReallocAsyncCtx3 + 260 | 0; //@line 13319
      HEAP32[$349 >> 2] = $124; //@line 13320
      $350 = $ReallocAsyncCtx3 + 264 | 0; //@line 13321
      HEAP32[$350 >> 2] = $126; //@line 13322
      $351 = $ReallocAsyncCtx3 + 268 | 0; //@line 13323
      HEAP32[$351 >> 2] = $236; //@line 13324
      $352 = $ReallocAsyncCtx3 + 272 | 0; //@line 13325
      HEAP16[$352 >> 1] = $trunc$i; //@line 13326
      $353 = $ReallocAsyncCtx3 + 276 | 0; //@line 13327
      HEAP32[$353 >> 2] = $128; //@line 13328
      $354 = $ReallocAsyncCtx3 + 280 | 0; //@line 13329
      HEAP32[$354 >> 2] = $236; //@line 13330
      $355 = $ReallocAsyncCtx3 + 284 | 0; //@line 13331
      HEAP32[$355 >> 2] = $130; //@line 13332
      sp = STACKTOP; //@line 13333
      return;
     }
     HEAP32[___async_retval >> 2] = $283; //@line 13337
     ___async_unwind = 0; //@line 13338
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 13339
     $284 = $ReallocAsyncCtx3 + 4 | 0; //@line 13340
     HEAP32[$284 >> 2] = $2; //@line 13341
     $285 = $ReallocAsyncCtx3 + 8 | 0; //@line 13342
     HEAP32[$285 >> 2] = $237; //@line 13343
     $286 = $ReallocAsyncCtx3 + 12 | 0; //@line 13344
     HEAP32[$286 >> 2] = $6; //@line 13345
     $287 = $ReallocAsyncCtx3 + 16 | 0; //@line 13346
     HEAP32[$287 >> 2] = $8; //@line 13347
     $288 = $ReallocAsyncCtx3 + 20 | 0; //@line 13348
     HEAP32[$288 >> 2] = $133; //@line 13349
     $289 = $ReallocAsyncCtx3 + 24 | 0; //@line 13350
     HEAP32[$289 >> 2] = $10; //@line 13351
     $290 = $ReallocAsyncCtx3 + 28 | 0; //@line 13352
     HEAP32[$290 >> 2] = $12; //@line 13353
     $291 = $ReallocAsyncCtx3 + 32 | 0; //@line 13354
     HEAP32[$291 >> 2] = $14; //@line 13355
     $292 = $ReallocAsyncCtx3 + 36 | 0; //@line 13356
     HEAP32[$292 >> 2] = $293; //@line 13357
     $294 = $ReallocAsyncCtx3 + 40 | 0; //@line 13358
     HEAP32[$294 >> 2] = $22; //@line 13359
     $295 = $ReallocAsyncCtx3 + 44 | 0; //@line 13360
     HEAP32[$295 >> 2] = $24; //@line 13361
     $296 = $ReallocAsyncCtx3 + 48 | 0; //@line 13362
     HEAP32[$296 >> 2] = $238; //@line 13363
     $297 = $ReallocAsyncCtx3 + 52 | 0; //@line 13364
     HEAP32[$297 >> 2] = $26; //@line 13365
     $298 = $ReallocAsyncCtx3 + 56 | 0; //@line 13366
     HEAP32[$298 >> 2] = $28; //@line 13367
     $299 = $ReallocAsyncCtx3 + 60 | 0; //@line 13368
     HEAP32[$299 >> 2] = $30; //@line 13369
     $300 = $ReallocAsyncCtx3 + 64 | 0; //@line 13370
     HEAP32[$300 >> 2] = $32; //@line 13371
     $301 = $ReallocAsyncCtx3 + 68 | 0; //@line 13372
     HEAP32[$301 >> 2] = $34; //@line 13373
     $302 = $ReallocAsyncCtx3 + 72 | 0; //@line 13374
     HEAP32[$302 >> 2] = $36; //@line 13375
     $303 = $ReallocAsyncCtx3 + 76 | 0; //@line 13376
     HEAP32[$303 >> 2] = $38; //@line 13377
     $304 = $ReallocAsyncCtx3 + 80 | 0; //@line 13378
     HEAP32[$304 >> 2] = $AsyncRetVal; //@line 13379
     $305 = $ReallocAsyncCtx3 + 84 | 0; //@line 13380
     HEAP32[$305 >> 2] = $$1202$in$i; //@line 13381
     $306 = $ReallocAsyncCtx3 + 88 | 0; //@line 13382
     HEAP32[$306 >> 2] = $44; //@line 13383
     $307 = $ReallocAsyncCtx3 + 92 | 0; //@line 13384
     HEAP32[$307 >> 2] = $48; //@line 13385
     $308 = $ReallocAsyncCtx3 + 96 | 0; //@line 13386
     HEAP16[$308 >> 1] = $$1202$i; //@line 13387
     $309 = $ReallocAsyncCtx3 + 100 | 0; //@line 13388
     HEAP32[$309 >> 2] = $50; //@line 13389
     $310 = $ReallocAsyncCtx3 + 104 | 0; //@line 13390
     HEAP32[$310 >> 2] = $52; //@line 13391
     $311 = $ReallocAsyncCtx3 + 108 | 0; //@line 13392
     HEAP32[$311 >> 2] = $54; //@line 13393
     $312 = $ReallocAsyncCtx3 + 112 | 0; //@line 13394
     HEAP32[$312 >> 2] = $56; //@line 13395
     $313 = $ReallocAsyncCtx3 + 116 | 0; //@line 13396
     HEAP32[$313 >> 2] = $60; //@line 13397
     $314 = $ReallocAsyncCtx3 + 120 | 0; //@line 13398
     HEAP32[$314 >> 2] = $42; //@line 13399
     $315 = $ReallocAsyncCtx3 + 124 | 0; //@line 13400
     HEAP32[$315 >> 2] = $62; //@line 13401
     $316 = $ReallocAsyncCtx3 + 128 | 0; //@line 13402
     HEAP32[$316 >> 2] = $64; //@line 13403
     $317 = $ReallocAsyncCtx3 + 132 | 0; //@line 13404
     HEAP32[$317 >> 2] = $66; //@line 13405
     $318 = $ReallocAsyncCtx3 + 136 | 0; //@line 13406
     HEAP32[$318 >> 2] = $$0208$i; //@line 13407
     $319 = $ReallocAsyncCtx3 + 140 | 0; //@line 13408
     HEAP32[$319 >> 2] = $68; //@line 13409
     $320 = $ReallocAsyncCtx3 + 144 | 0; //@line 13410
     HEAP32[$320 >> 2] = $70; //@line 13411
     $321 = $ReallocAsyncCtx3 + 148 | 0; //@line 13412
     HEAP32[$321 >> 2] = $38; //@line 13413
     $322 = $ReallocAsyncCtx3 + 152 | 0; //@line 13414
     HEAP32[$322 >> 2] = $72; //@line 13415
     $323 = $ReallocAsyncCtx3 + 156 | 0; //@line 13416
     HEAP16[$323 >> 1] = $279; //@line 13417
     $324 = $ReallocAsyncCtx3 + 160 | 0; //@line 13418
     HEAP32[$324 >> 2] = $74; //@line 13419
     $325 = $ReallocAsyncCtx3 + 164 | 0; //@line 13420
     HEAP32[$325 >> 2] = $76; //@line 13421
     $326 = $ReallocAsyncCtx3 + 168 | 0; //@line 13422
     HEAP32[$326 >> 2] = $78; //@line 13423
     $327 = $ReallocAsyncCtx3 + 172 | 0; //@line 13424
     HEAP32[$327 >> 2] = $80; //@line 13425
     $328 = $ReallocAsyncCtx3 + 176 | 0; //@line 13426
     HEAP32[$328 >> 2] = $232; //@line 13427
     $329 = $ReallocAsyncCtx3 + 180 | 0; //@line 13428
     HEAP32[$329 >> 2] = $AsyncRetVal; //@line 13429
     $330 = $ReallocAsyncCtx3 + 184 | 0; //@line 13430
     HEAP32[$330 >> 2] = $82; //@line 13431
     $331 = $ReallocAsyncCtx3 + 188 | 0; //@line 13432
     HEAP32[$331 >> 2] = $84; //@line 13433
     $332 = $ReallocAsyncCtx3 + 192 | 0; //@line 13434
     HEAP32[$332 >> 2] = $86; //@line 13435
     $333 = $ReallocAsyncCtx3 + 196 | 0; //@line 13436
     HEAP32[$333 >> 2] = $88; //@line 13437
     $334 = $ReallocAsyncCtx3 + 200 | 0; //@line 13438
     HEAP32[$334 >> 2] = $233; //@line 13439
     $335 = $ReallocAsyncCtx3 + 204 | 0; //@line 13440
     HEAP32[$335 >> 2] = $94; //@line 13441
     $336 = $ReallocAsyncCtx3 + 208 | 0; //@line 13442
     HEAP32[$336 >> 2] = $96; //@line 13443
     $337 = $ReallocAsyncCtx3 + 212 | 0; //@line 13444
     HEAP32[$337 >> 2] = $98; //@line 13445
     $338 = $ReallocAsyncCtx3 + 216 | 0; //@line 13446
     HEAP32[$338 >> 2] = $234; //@line 13447
     $339 = $ReallocAsyncCtx3 + 220 | 0; //@line 13448
     HEAP32[$339 >> 2] = $100; //@line 13449
     $340 = $ReallocAsyncCtx3 + 224 | 0; //@line 13450
     HEAP32[$340 >> 2] = $102; //@line 13451
     $341 = $ReallocAsyncCtx3 + 228 | 0; //@line 13452
     HEAP32[$341 >> 2] = $104; //@line 13453
     $342 = $ReallocAsyncCtx3 + 232 | 0; //@line 13454
     HEAP32[$342 >> 2] = $106; //@line 13455
     $343 = $ReallocAsyncCtx3 + 236 | 0; //@line 13456
     HEAP32[$343 >> 2] = $108; //@line 13457
     $344 = $ReallocAsyncCtx3 + 240 | 0; //@line 13458
     HEAP32[$344 >> 2] = $110; //@line 13459
     $345 = $ReallocAsyncCtx3 + 244 | 0; //@line 13460
     HEAP32[$345 >> 2] = $114; //@line 13461
     $346 = $ReallocAsyncCtx3 + 248 | 0; //@line 13462
     HEAP32[$346 >> 2] = $116; //@line 13463
     $347 = $ReallocAsyncCtx3 + 252 | 0; //@line 13464
     HEAP32[$347 >> 2] = $118; //@line 13465
     $348 = $ReallocAsyncCtx3 + 256 | 0; //@line 13466
     HEAP32[$348 >> 2] = $120; //@line 13467
     $349 = $ReallocAsyncCtx3 + 260 | 0; //@line 13468
     HEAP32[$349 >> 2] = $124; //@line 13469
     $350 = $ReallocAsyncCtx3 + 264 | 0; //@line 13470
     HEAP32[$350 >> 2] = $126; //@line 13471
     $351 = $ReallocAsyncCtx3 + 268 | 0; //@line 13472
     HEAP32[$351 >> 2] = $236; //@line 13473
     $352 = $ReallocAsyncCtx3 + 272 | 0; //@line 13474
     HEAP16[$352 >> 1] = $trunc$i; //@line 13475
     $353 = $ReallocAsyncCtx3 + 276 | 0; //@line 13476
     HEAP32[$353 >> 2] = $128; //@line 13477
     $354 = $ReallocAsyncCtx3 + 280 | 0; //@line 13478
     HEAP32[$354 >> 2] = $236; //@line 13479
     $355 = $ReallocAsyncCtx3 + 284 | 0; //@line 13480
     HEAP32[$355 >> 2] = $130; //@line 13481
     sp = STACKTOP; //@line 13482
     return;
    }
   case 32:
    {
     _mbed_tracef(2, 3803, 4238, $10); //@line 13487
     break L6;
     break;
    }
   case 37:
    {
     _mbed_tracef(2, 3803, 4307, $28); //@line 13492
     break L6;
     break;
    }
   case 41:
    {
     $385 = $$1202$in$i & 65535; //@line 13497
     if (($$1202$i + -1 & 65535) <= 1033) {
      $388 = HEAP32[$236 >> 2] | 0; //@line 13501
      if (!(HEAP32[$388 + 44 >> 2] | 0)) {
       HEAP16[$388 + 2 >> 1] = $$1202$i; //@line 13507
       $393 = $293 + 1 | 0; //@line 13508
       HEAP32[$38 >> 2] = $393; //@line 13509
       $394 = HEAP32[$128 >> 2] | 0; //@line 13510
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 13511
       $395 = FUNCTION_TABLE_ii[$394 & 31]($$1202$i) | 0; //@line 13512
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 13515
        $396 = $ReallocAsyncCtx4 + 4 | 0; //@line 13516
        HEAP32[$396 >> 2] = $2; //@line 13517
        $397 = $ReallocAsyncCtx4 + 8 | 0; //@line 13518
        HEAP32[$397 >> 2] = $237; //@line 13519
        $398 = $ReallocAsyncCtx4 + 12 | 0; //@line 13520
        HEAP32[$398 >> 2] = $6; //@line 13521
        $399 = $ReallocAsyncCtx4 + 16 | 0; //@line 13522
        HEAP32[$399 >> 2] = $8; //@line 13523
        $400 = $ReallocAsyncCtx4 + 20 | 0; //@line 13524
        HEAP32[$400 >> 2] = $133; //@line 13525
        $401 = $ReallocAsyncCtx4 + 24 | 0; //@line 13526
        HEAP32[$401 >> 2] = $10; //@line 13527
        $402 = $ReallocAsyncCtx4 + 28 | 0; //@line 13528
        HEAP32[$402 >> 2] = $12; //@line 13529
        $403 = $ReallocAsyncCtx4 + 32 | 0; //@line 13530
        HEAP32[$403 >> 2] = $14; //@line 13531
        $404 = $ReallocAsyncCtx4 + 36 | 0; //@line 13532
        HEAP32[$404 >> 2] = $22; //@line 13533
        $405 = $ReallocAsyncCtx4 + 40 | 0; //@line 13534
        HEAP32[$405 >> 2] = $24; //@line 13535
        $406 = $ReallocAsyncCtx4 + 44 | 0; //@line 13536
        HEAP32[$406 >> 2] = $238; //@line 13537
        $407 = $ReallocAsyncCtx4 + 48 | 0; //@line 13538
        HEAP32[$407 >> 2] = $26; //@line 13539
        $408 = $ReallocAsyncCtx4 + 52 | 0; //@line 13540
        HEAP32[$408 >> 2] = $28; //@line 13541
        $409 = $ReallocAsyncCtx4 + 56 | 0; //@line 13542
        HEAP32[$409 >> 2] = $30; //@line 13543
        $410 = $ReallocAsyncCtx4 + 60 | 0; //@line 13544
        HEAP32[$410 >> 2] = $32; //@line 13545
        $411 = $ReallocAsyncCtx4 + 64 | 0; //@line 13546
        HEAP32[$411 >> 2] = $34; //@line 13547
        $412 = $ReallocAsyncCtx4 + 68 | 0; //@line 13548
        HEAP32[$412 >> 2] = $385; //@line 13549
        $413 = $ReallocAsyncCtx4 + 72 | 0; //@line 13550
        HEAP32[$413 >> 2] = $38; //@line 13551
        $414 = $ReallocAsyncCtx4 + 76 | 0; //@line 13552
        HEAP32[$414 >> 2] = $36; //@line 13553
        $415 = $ReallocAsyncCtx4 + 80 | 0; //@line 13554
        HEAP32[$415 >> 2] = $AsyncRetVal; //@line 13555
        $416 = $ReallocAsyncCtx4 + 84 | 0; //@line 13556
        HEAP32[$416 >> 2] = $42; //@line 13557
        $417 = $ReallocAsyncCtx4 + 88 | 0; //@line 13558
        HEAP32[$417 >> 2] = $44; //@line 13559
        $418 = $ReallocAsyncCtx4 + 92 | 0; //@line 13560
        HEAP32[$418 >> 2] = $48; //@line 13561
        $419 = $ReallocAsyncCtx4 + 96 | 0; //@line 13562
        HEAP32[$419 >> 2] = $50; //@line 13563
        $420 = $ReallocAsyncCtx4 + 100 | 0; //@line 13564
        HEAP32[$420 >> 2] = $52; //@line 13565
        $421 = $ReallocAsyncCtx4 + 104 | 0; //@line 13566
        HEAP32[$421 >> 2] = $54; //@line 13567
        $422 = $ReallocAsyncCtx4 + 108 | 0; //@line 13568
        HEAP32[$422 >> 2] = $56; //@line 13569
        $423 = $ReallocAsyncCtx4 + 112 | 0; //@line 13570
        HEAP32[$423 >> 2] = $60; //@line 13571
        $424 = $ReallocAsyncCtx4 + 116 | 0; //@line 13572
        HEAP32[$424 >> 2] = $62; //@line 13573
        $425 = $ReallocAsyncCtx4 + 120 | 0; //@line 13574
        HEAP32[$425 >> 2] = $64; //@line 13575
        $426 = $ReallocAsyncCtx4 + 124 | 0; //@line 13576
        HEAP32[$426 >> 2] = $66; //@line 13577
        $427 = $ReallocAsyncCtx4 + 128 | 0; //@line 13578
        HEAP32[$427 >> 2] = $$0208$i; //@line 13579
        $428 = $ReallocAsyncCtx4 + 132 | 0; //@line 13580
        HEAP32[$428 >> 2] = $68; //@line 13581
        $429 = $ReallocAsyncCtx4 + 136 | 0; //@line 13582
        HEAP32[$429 >> 2] = $70; //@line 13583
        $430 = $ReallocAsyncCtx4 + 140 | 0; //@line 13584
        HEAP32[$430 >> 2] = $38; //@line 13585
        $431 = $ReallocAsyncCtx4 + 144 | 0; //@line 13586
        HEAP32[$431 >> 2] = $72; //@line 13587
        $432 = $ReallocAsyncCtx4 + 148 | 0; //@line 13588
        HEAP32[$432 >> 2] = $74; //@line 13589
        $433 = $ReallocAsyncCtx4 + 152 | 0; //@line 13590
        HEAP32[$433 >> 2] = $76; //@line 13591
        $434 = $ReallocAsyncCtx4 + 156 | 0; //@line 13592
        HEAP32[$434 >> 2] = $78; //@line 13593
        $435 = $ReallocAsyncCtx4 + 160 | 0; //@line 13594
        HEAP32[$435 >> 2] = $80; //@line 13595
        $436 = $ReallocAsyncCtx4 + 164 | 0; //@line 13596
        HEAP32[$436 >> 2] = $232; //@line 13597
        $437 = $ReallocAsyncCtx4 + 168 | 0; //@line 13598
        HEAP32[$437 >> 2] = $AsyncRetVal; //@line 13599
        $438 = $ReallocAsyncCtx4 + 172 | 0; //@line 13600
        HEAP32[$438 >> 2] = $82; //@line 13601
        $439 = $ReallocAsyncCtx4 + 176 | 0; //@line 13602
        HEAP32[$439 >> 2] = $84; //@line 13603
        $440 = $ReallocAsyncCtx4 + 180 | 0; //@line 13604
        HEAP32[$440 >> 2] = $86; //@line 13605
        $441 = $ReallocAsyncCtx4 + 184 | 0; //@line 13606
        HEAP32[$441 >> 2] = $88; //@line 13607
        $442 = $ReallocAsyncCtx4 + 188 | 0; //@line 13608
        HEAP32[$442 >> 2] = $233; //@line 13609
        $443 = $ReallocAsyncCtx4 + 192 | 0; //@line 13610
        HEAP32[$443 >> 2] = $94; //@line 13611
        $444 = $ReallocAsyncCtx4 + 196 | 0; //@line 13612
        HEAP32[$444 >> 2] = $96; //@line 13613
        $445 = $ReallocAsyncCtx4 + 200 | 0; //@line 13614
        HEAP32[$445 >> 2] = $98; //@line 13615
        $446 = $ReallocAsyncCtx4 + 204 | 0; //@line 13616
        HEAP32[$446 >> 2] = $234; //@line 13617
        $447 = $ReallocAsyncCtx4 + 208 | 0; //@line 13618
        HEAP32[$447 >> 2] = $100; //@line 13619
        $448 = $ReallocAsyncCtx4 + 212 | 0; //@line 13620
        HEAP32[$448 >> 2] = $102; //@line 13621
        $449 = $ReallocAsyncCtx4 + 216 | 0; //@line 13622
        HEAP32[$449 >> 2] = $393; //@line 13623
        $450 = $ReallocAsyncCtx4 + 220 | 0; //@line 13624
        HEAP32[$450 >> 2] = $104; //@line 13625
        $451 = $ReallocAsyncCtx4 + 224 | 0; //@line 13626
        HEAP32[$451 >> 2] = $106; //@line 13627
        $452 = $ReallocAsyncCtx4 + 228 | 0; //@line 13628
        HEAP32[$452 >> 2] = $108; //@line 13629
        $453 = $ReallocAsyncCtx4 + 232 | 0; //@line 13630
        HEAP32[$453 >> 2] = $110; //@line 13631
        $454 = $ReallocAsyncCtx4 + 236 | 0; //@line 13632
        HEAP32[$454 >> 2] = $114; //@line 13633
        $455 = $ReallocAsyncCtx4 + 240 | 0; //@line 13634
        HEAP32[$455 >> 2] = $116; //@line 13635
        $456 = $ReallocAsyncCtx4 + 244 | 0; //@line 13636
        HEAP32[$456 >> 2] = $118; //@line 13637
        $457 = $ReallocAsyncCtx4 + 248 | 0; //@line 13638
        HEAP32[$457 >> 2] = $120; //@line 13639
        $458 = $ReallocAsyncCtx4 + 252 | 0; //@line 13640
        HEAP32[$458 >> 2] = $124; //@line 13641
        $459 = $ReallocAsyncCtx4 + 256 | 0; //@line 13642
        HEAP32[$459 >> 2] = $126; //@line 13643
        $460 = $ReallocAsyncCtx4 + 260 | 0; //@line 13644
        HEAP32[$460 >> 2] = $236; //@line 13645
        $461 = $ReallocAsyncCtx4 + 264 | 0; //@line 13646
        HEAP32[$461 >> 2] = $128; //@line 13647
        $462 = $ReallocAsyncCtx4 + 268 | 0; //@line 13648
        HEAP32[$462 >> 2] = $236; //@line 13649
        $463 = $ReallocAsyncCtx4 + 272 | 0; //@line 13650
        HEAP32[$463 >> 2] = $130; //@line 13651
        sp = STACKTOP; //@line 13652
        return;
       }
       HEAP32[___async_retval >> 2] = $395; //@line 13656
       ___async_unwind = 0; //@line 13657
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 13658
       $396 = $ReallocAsyncCtx4 + 4 | 0; //@line 13659
       HEAP32[$396 >> 2] = $2; //@line 13660
       $397 = $ReallocAsyncCtx4 + 8 | 0; //@line 13661
       HEAP32[$397 >> 2] = $237; //@line 13662
       $398 = $ReallocAsyncCtx4 + 12 | 0; //@line 13663
       HEAP32[$398 >> 2] = $6; //@line 13664
       $399 = $ReallocAsyncCtx4 + 16 | 0; //@line 13665
       HEAP32[$399 >> 2] = $8; //@line 13666
       $400 = $ReallocAsyncCtx4 + 20 | 0; //@line 13667
       HEAP32[$400 >> 2] = $133; //@line 13668
       $401 = $ReallocAsyncCtx4 + 24 | 0; //@line 13669
       HEAP32[$401 >> 2] = $10; //@line 13670
       $402 = $ReallocAsyncCtx4 + 28 | 0; //@line 13671
       HEAP32[$402 >> 2] = $12; //@line 13672
       $403 = $ReallocAsyncCtx4 + 32 | 0; //@line 13673
       HEAP32[$403 >> 2] = $14; //@line 13674
       $404 = $ReallocAsyncCtx4 + 36 | 0; //@line 13675
       HEAP32[$404 >> 2] = $22; //@line 13676
       $405 = $ReallocAsyncCtx4 + 40 | 0; //@line 13677
       HEAP32[$405 >> 2] = $24; //@line 13678
       $406 = $ReallocAsyncCtx4 + 44 | 0; //@line 13679
       HEAP32[$406 >> 2] = $238; //@line 13680
       $407 = $ReallocAsyncCtx4 + 48 | 0; //@line 13681
       HEAP32[$407 >> 2] = $26; //@line 13682
       $408 = $ReallocAsyncCtx4 + 52 | 0; //@line 13683
       HEAP32[$408 >> 2] = $28; //@line 13684
       $409 = $ReallocAsyncCtx4 + 56 | 0; //@line 13685
       HEAP32[$409 >> 2] = $30; //@line 13686
       $410 = $ReallocAsyncCtx4 + 60 | 0; //@line 13687
       HEAP32[$410 >> 2] = $32; //@line 13688
       $411 = $ReallocAsyncCtx4 + 64 | 0; //@line 13689
       HEAP32[$411 >> 2] = $34; //@line 13690
       $412 = $ReallocAsyncCtx4 + 68 | 0; //@line 13691
       HEAP32[$412 >> 2] = $385; //@line 13692
       $413 = $ReallocAsyncCtx4 + 72 | 0; //@line 13693
       HEAP32[$413 >> 2] = $38; //@line 13694
       $414 = $ReallocAsyncCtx4 + 76 | 0; //@line 13695
       HEAP32[$414 >> 2] = $36; //@line 13696
       $415 = $ReallocAsyncCtx4 + 80 | 0; //@line 13697
       HEAP32[$415 >> 2] = $AsyncRetVal; //@line 13698
       $416 = $ReallocAsyncCtx4 + 84 | 0; //@line 13699
       HEAP32[$416 >> 2] = $42; //@line 13700
       $417 = $ReallocAsyncCtx4 + 88 | 0; //@line 13701
       HEAP32[$417 >> 2] = $44; //@line 13702
       $418 = $ReallocAsyncCtx4 + 92 | 0; //@line 13703
       HEAP32[$418 >> 2] = $48; //@line 13704
       $419 = $ReallocAsyncCtx4 + 96 | 0; //@line 13705
       HEAP32[$419 >> 2] = $50; //@line 13706
       $420 = $ReallocAsyncCtx4 + 100 | 0; //@line 13707
       HEAP32[$420 >> 2] = $52; //@line 13708
       $421 = $ReallocAsyncCtx4 + 104 | 0; //@line 13709
       HEAP32[$421 >> 2] = $54; //@line 13710
       $422 = $ReallocAsyncCtx4 + 108 | 0; //@line 13711
       HEAP32[$422 >> 2] = $56; //@line 13712
       $423 = $ReallocAsyncCtx4 + 112 | 0; //@line 13713
       HEAP32[$423 >> 2] = $60; //@line 13714
       $424 = $ReallocAsyncCtx4 + 116 | 0; //@line 13715
       HEAP32[$424 >> 2] = $62; //@line 13716
       $425 = $ReallocAsyncCtx4 + 120 | 0; //@line 13717
       HEAP32[$425 >> 2] = $64; //@line 13718
       $426 = $ReallocAsyncCtx4 + 124 | 0; //@line 13719
       HEAP32[$426 >> 2] = $66; //@line 13720
       $427 = $ReallocAsyncCtx4 + 128 | 0; //@line 13721
       HEAP32[$427 >> 2] = $$0208$i; //@line 13722
       $428 = $ReallocAsyncCtx4 + 132 | 0; //@line 13723
       HEAP32[$428 >> 2] = $68; //@line 13724
       $429 = $ReallocAsyncCtx4 + 136 | 0; //@line 13725
       HEAP32[$429 >> 2] = $70; //@line 13726
       $430 = $ReallocAsyncCtx4 + 140 | 0; //@line 13727
       HEAP32[$430 >> 2] = $38; //@line 13728
       $431 = $ReallocAsyncCtx4 + 144 | 0; //@line 13729
       HEAP32[$431 >> 2] = $72; //@line 13730
       $432 = $ReallocAsyncCtx4 + 148 | 0; //@line 13731
       HEAP32[$432 >> 2] = $74; //@line 13732
       $433 = $ReallocAsyncCtx4 + 152 | 0; //@line 13733
       HEAP32[$433 >> 2] = $76; //@line 13734
       $434 = $ReallocAsyncCtx4 + 156 | 0; //@line 13735
       HEAP32[$434 >> 2] = $78; //@line 13736
       $435 = $ReallocAsyncCtx4 + 160 | 0; //@line 13737
       HEAP32[$435 >> 2] = $80; //@line 13738
       $436 = $ReallocAsyncCtx4 + 164 | 0; //@line 13739
       HEAP32[$436 >> 2] = $232; //@line 13740
       $437 = $ReallocAsyncCtx4 + 168 | 0; //@line 13741
       HEAP32[$437 >> 2] = $AsyncRetVal; //@line 13742
       $438 = $ReallocAsyncCtx4 + 172 | 0; //@line 13743
       HEAP32[$438 >> 2] = $82; //@line 13744
       $439 = $ReallocAsyncCtx4 + 176 | 0; //@line 13745
       HEAP32[$439 >> 2] = $84; //@line 13746
       $440 = $ReallocAsyncCtx4 + 180 | 0; //@line 13747
       HEAP32[$440 >> 2] = $86; //@line 13748
       $441 = $ReallocAsyncCtx4 + 184 | 0; //@line 13749
       HEAP32[$441 >> 2] = $88; //@line 13750
       $442 = $ReallocAsyncCtx4 + 188 | 0; //@line 13751
       HEAP32[$442 >> 2] = $233; //@line 13752
       $443 = $ReallocAsyncCtx4 + 192 | 0; //@line 13753
       HEAP32[$443 >> 2] = $94; //@line 13754
       $444 = $ReallocAsyncCtx4 + 196 | 0; //@line 13755
       HEAP32[$444 >> 2] = $96; //@line 13756
       $445 = $ReallocAsyncCtx4 + 200 | 0; //@line 13757
       HEAP32[$445 >> 2] = $98; //@line 13758
       $446 = $ReallocAsyncCtx4 + 204 | 0; //@line 13759
       HEAP32[$446 >> 2] = $234; //@line 13760
       $447 = $ReallocAsyncCtx4 + 208 | 0; //@line 13761
       HEAP32[$447 >> 2] = $100; //@line 13762
       $448 = $ReallocAsyncCtx4 + 212 | 0; //@line 13763
       HEAP32[$448 >> 2] = $102; //@line 13764
       $449 = $ReallocAsyncCtx4 + 216 | 0; //@line 13765
       HEAP32[$449 >> 2] = $393; //@line 13766
       $450 = $ReallocAsyncCtx4 + 220 | 0; //@line 13767
       HEAP32[$450 >> 2] = $104; //@line 13768
       $451 = $ReallocAsyncCtx4 + 224 | 0; //@line 13769
       HEAP32[$451 >> 2] = $106; //@line 13770
       $452 = $ReallocAsyncCtx4 + 228 | 0; //@line 13771
       HEAP32[$452 >> 2] = $108; //@line 13772
       $453 = $ReallocAsyncCtx4 + 232 | 0; //@line 13773
       HEAP32[$453 >> 2] = $110; //@line 13774
       $454 = $ReallocAsyncCtx4 + 236 | 0; //@line 13775
       HEAP32[$454 >> 2] = $114; //@line 13776
       $455 = $ReallocAsyncCtx4 + 240 | 0; //@line 13777
       HEAP32[$455 >> 2] = $116; //@line 13778
       $456 = $ReallocAsyncCtx4 + 244 | 0; //@line 13779
       HEAP32[$456 >> 2] = $118; //@line 13780
       $457 = $ReallocAsyncCtx4 + 248 | 0; //@line 13781
       HEAP32[$457 >> 2] = $120; //@line 13782
       $458 = $ReallocAsyncCtx4 + 252 | 0; //@line 13783
       HEAP32[$458 >> 2] = $124; //@line 13784
       $459 = $ReallocAsyncCtx4 + 256 | 0; //@line 13785
       HEAP32[$459 >> 2] = $126; //@line 13786
       $460 = $ReallocAsyncCtx4 + 260 | 0; //@line 13787
       HEAP32[$460 >> 2] = $236; //@line 13788
       $461 = $ReallocAsyncCtx4 + 264 | 0; //@line 13789
       HEAP32[$461 >> 2] = $128; //@line 13790
       $462 = $ReallocAsyncCtx4 + 268 | 0; //@line 13791
       HEAP32[$462 >> 2] = $236; //@line 13792
       $463 = $ReallocAsyncCtx4 + 272 | 0; //@line 13793
       HEAP32[$463 >> 2] = $130; //@line 13794
       sp = STACKTOP; //@line 13795
       return;
      }
     }
     _mbed_tracef(2, 3803, 4369, $118); //@line 13799
     break L6;
     break;
    }
   case 47:
    {
     $465 = HEAP32[$236 >> 2] | 0; //@line 13804
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 13806
     $467 = _sn_coap_parser_options_parse_multiple_options($2, $38, $279, $465 + 48 | 0, $465, 4, $$1202$i) | 0; //@line 13807
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 13810
      $468 = $ReallocAsyncCtx10 + 4 | 0; //@line 13811
      HEAP32[$468 >> 2] = $2; //@line 13812
      $469 = $ReallocAsyncCtx10 + 8 | 0; //@line 13813
      HEAP32[$469 >> 2] = $237; //@line 13814
      $470 = $ReallocAsyncCtx10 + 12 | 0; //@line 13815
      HEAP32[$470 >> 2] = $6; //@line 13816
      $471 = $ReallocAsyncCtx10 + 16 | 0; //@line 13817
      HEAP32[$471 >> 2] = $8; //@line 13818
      $472 = $ReallocAsyncCtx10 + 20 | 0; //@line 13819
      HEAP32[$472 >> 2] = $133; //@line 13820
      $473 = $ReallocAsyncCtx10 + 24 | 0; //@line 13821
      HEAP32[$473 >> 2] = $10; //@line 13822
      $474 = $ReallocAsyncCtx10 + 28 | 0; //@line 13823
      HEAP32[$474 >> 2] = $12; //@line 13824
      $475 = $ReallocAsyncCtx10 + 32 | 0; //@line 13825
      HEAP32[$475 >> 2] = $14; //@line 13826
      $476 = $ReallocAsyncCtx10 + 36 | 0; //@line 13827
      HEAP32[$476 >> 2] = $22; //@line 13828
      $477 = $ReallocAsyncCtx10 + 40 | 0; //@line 13829
      HEAP32[$477 >> 2] = $24; //@line 13830
      $478 = $ReallocAsyncCtx10 + 44 | 0; //@line 13831
      HEAP32[$478 >> 2] = $238; //@line 13832
      $479 = $ReallocAsyncCtx10 + 48 | 0; //@line 13833
      HEAP32[$479 >> 2] = $26; //@line 13834
      $480 = $ReallocAsyncCtx10 + 52 | 0; //@line 13835
      HEAP32[$480 >> 2] = $28; //@line 13836
      $481 = $ReallocAsyncCtx10 + 56 | 0; //@line 13837
      HEAP32[$481 >> 2] = $30; //@line 13838
      $482 = $ReallocAsyncCtx10 + 60 | 0; //@line 13839
      HEAP32[$482 >> 2] = $32; //@line 13840
      $483 = $ReallocAsyncCtx10 + 64 | 0; //@line 13841
      HEAP32[$483 >> 2] = $34; //@line 13842
      $484 = $ReallocAsyncCtx10 + 68 | 0; //@line 13843
      HEAP32[$484 >> 2] = $36; //@line 13844
      $485 = $ReallocAsyncCtx10 + 72 | 0; //@line 13845
      HEAP32[$485 >> 2] = $38; //@line 13846
      $486 = $ReallocAsyncCtx10 + 76 | 0; //@line 13847
      HEAP32[$486 >> 2] = $AsyncRetVal; //@line 13848
      $487 = $ReallocAsyncCtx10 + 80 | 0; //@line 13849
      HEAP32[$487 >> 2] = $42; //@line 13850
      $488 = $ReallocAsyncCtx10 + 84 | 0; //@line 13851
      HEAP32[$488 >> 2] = $44; //@line 13852
      $489 = $ReallocAsyncCtx10 + 88 | 0; //@line 13853
      HEAP32[$489 >> 2] = $48; //@line 13854
      $490 = $ReallocAsyncCtx10 + 92 | 0; //@line 13855
      HEAP32[$490 >> 2] = $50; //@line 13856
      $491 = $ReallocAsyncCtx10 + 96 | 0; //@line 13857
      HEAP32[$491 >> 2] = $52; //@line 13858
      $492 = $ReallocAsyncCtx10 + 100 | 0; //@line 13859
      HEAP32[$492 >> 2] = $54; //@line 13860
      $493 = $ReallocAsyncCtx10 + 104 | 0; //@line 13861
      HEAP32[$493 >> 2] = $56; //@line 13862
      $494 = $ReallocAsyncCtx10 + 108 | 0; //@line 13863
      HEAP32[$494 >> 2] = $60; //@line 13864
      $495 = $ReallocAsyncCtx10 + 112 | 0; //@line 13865
      HEAP32[$495 >> 2] = $62; //@line 13866
      $496 = $ReallocAsyncCtx10 + 116 | 0; //@line 13867
      HEAP32[$496 >> 2] = $64; //@line 13868
      $497 = $ReallocAsyncCtx10 + 120 | 0; //@line 13869
      HEAP32[$497 >> 2] = $66; //@line 13870
      $498 = $ReallocAsyncCtx10 + 124 | 0; //@line 13871
      HEAP32[$498 >> 2] = $$0208$i; //@line 13872
      $499 = $ReallocAsyncCtx10 + 128 | 0; //@line 13873
      HEAP32[$499 >> 2] = $68; //@line 13874
      $500 = $ReallocAsyncCtx10 + 132 | 0; //@line 13875
      HEAP32[$500 >> 2] = $70; //@line 13876
      $501 = $ReallocAsyncCtx10 + 136 | 0; //@line 13877
      HEAP32[$501 >> 2] = $38; //@line 13878
      $502 = $ReallocAsyncCtx10 + 140 | 0; //@line 13879
      HEAP32[$502 >> 2] = $72; //@line 13880
      $503 = $ReallocAsyncCtx10 + 144 | 0; //@line 13881
      HEAP32[$503 >> 2] = $74; //@line 13882
      $504 = $ReallocAsyncCtx10 + 148 | 0; //@line 13883
      HEAP32[$504 >> 2] = $76; //@line 13884
      $505 = $ReallocAsyncCtx10 + 152 | 0; //@line 13885
      HEAP32[$505 >> 2] = $78; //@line 13886
      $506 = $ReallocAsyncCtx10 + 156 | 0; //@line 13887
      HEAP32[$506 >> 2] = $80; //@line 13888
      $507 = $ReallocAsyncCtx10 + 160 | 0; //@line 13889
      HEAP32[$507 >> 2] = $232; //@line 13890
      $508 = $ReallocAsyncCtx10 + 164 | 0; //@line 13891
      HEAP32[$508 >> 2] = $AsyncRetVal; //@line 13892
      $509 = $ReallocAsyncCtx10 + 168 | 0; //@line 13893
      HEAP32[$509 >> 2] = $82; //@line 13894
      $510 = $ReallocAsyncCtx10 + 172 | 0; //@line 13895
      HEAP32[$510 >> 2] = $84; //@line 13896
      $511 = $ReallocAsyncCtx10 + 176 | 0; //@line 13897
      HEAP32[$511 >> 2] = $86; //@line 13898
      $512 = $ReallocAsyncCtx10 + 180 | 0; //@line 13899
      HEAP32[$512 >> 2] = $88; //@line 13900
      $513 = $ReallocAsyncCtx10 + 184 | 0; //@line 13901
      HEAP32[$513 >> 2] = $233; //@line 13902
      $514 = $ReallocAsyncCtx10 + 188 | 0; //@line 13903
      HEAP32[$514 >> 2] = $94; //@line 13904
      $515 = $ReallocAsyncCtx10 + 192 | 0; //@line 13905
      HEAP32[$515 >> 2] = $96; //@line 13906
      $516 = $ReallocAsyncCtx10 + 196 | 0; //@line 13907
      HEAP32[$516 >> 2] = $98; //@line 13908
      $517 = $ReallocAsyncCtx10 + 200 | 0; //@line 13909
      HEAP32[$517 >> 2] = $234; //@line 13910
      $518 = $ReallocAsyncCtx10 + 204 | 0; //@line 13911
      HEAP32[$518 >> 2] = $100; //@line 13912
      $519 = $ReallocAsyncCtx10 + 208 | 0; //@line 13913
      HEAP32[$519 >> 2] = $102; //@line 13914
      $520 = $ReallocAsyncCtx10 + 212 | 0; //@line 13915
      HEAP32[$520 >> 2] = $104; //@line 13916
      $521 = $ReallocAsyncCtx10 + 216 | 0; //@line 13917
      HEAP32[$521 >> 2] = $106; //@line 13918
      $522 = $ReallocAsyncCtx10 + 220 | 0; //@line 13919
      HEAP32[$522 >> 2] = $108; //@line 13920
      $523 = $ReallocAsyncCtx10 + 224 | 0; //@line 13921
      HEAP32[$523 >> 2] = $110; //@line 13922
      $524 = $ReallocAsyncCtx10 + 228 | 0; //@line 13923
      HEAP32[$524 >> 2] = $114; //@line 13924
      $525 = $ReallocAsyncCtx10 + 232 | 0; //@line 13925
      HEAP32[$525 >> 2] = $116; //@line 13926
      $526 = $ReallocAsyncCtx10 + 236 | 0; //@line 13927
      HEAP32[$526 >> 2] = $118; //@line 13928
      $527 = $ReallocAsyncCtx10 + 240 | 0; //@line 13929
      HEAP32[$527 >> 2] = $120; //@line 13930
      $528 = $ReallocAsyncCtx10 + 244 | 0; //@line 13931
      HEAP32[$528 >> 2] = $124; //@line 13932
      $529 = $ReallocAsyncCtx10 + 248 | 0; //@line 13933
      HEAP32[$529 >> 2] = $126; //@line 13934
      $530 = $ReallocAsyncCtx10 + 252 | 0; //@line 13935
      HEAP32[$530 >> 2] = $236; //@line 13936
      $531 = $ReallocAsyncCtx10 + 256 | 0; //@line 13937
      HEAP32[$531 >> 2] = $128; //@line 13938
      $532 = $ReallocAsyncCtx10 + 260 | 0; //@line 13939
      HEAP32[$532 >> 2] = $236; //@line 13940
      $533 = $ReallocAsyncCtx10 + 264 | 0; //@line 13941
      HEAP32[$533 >> 2] = $130; //@line 13942
      sp = STACKTOP; //@line 13943
      return;
     }
     HEAP8[___async_retval >> 0] = $467; //@line 13947
     ___async_unwind = 0; //@line 13948
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 13949
     $468 = $ReallocAsyncCtx10 + 4 | 0; //@line 13950
     HEAP32[$468 >> 2] = $2; //@line 13951
     $469 = $ReallocAsyncCtx10 + 8 | 0; //@line 13952
     HEAP32[$469 >> 2] = $237; //@line 13953
     $470 = $ReallocAsyncCtx10 + 12 | 0; //@line 13954
     HEAP32[$470 >> 2] = $6; //@line 13955
     $471 = $ReallocAsyncCtx10 + 16 | 0; //@line 13956
     HEAP32[$471 >> 2] = $8; //@line 13957
     $472 = $ReallocAsyncCtx10 + 20 | 0; //@line 13958
     HEAP32[$472 >> 2] = $133; //@line 13959
     $473 = $ReallocAsyncCtx10 + 24 | 0; //@line 13960
     HEAP32[$473 >> 2] = $10; //@line 13961
     $474 = $ReallocAsyncCtx10 + 28 | 0; //@line 13962
     HEAP32[$474 >> 2] = $12; //@line 13963
     $475 = $ReallocAsyncCtx10 + 32 | 0; //@line 13964
     HEAP32[$475 >> 2] = $14; //@line 13965
     $476 = $ReallocAsyncCtx10 + 36 | 0; //@line 13966
     HEAP32[$476 >> 2] = $22; //@line 13967
     $477 = $ReallocAsyncCtx10 + 40 | 0; //@line 13968
     HEAP32[$477 >> 2] = $24; //@line 13969
     $478 = $ReallocAsyncCtx10 + 44 | 0; //@line 13970
     HEAP32[$478 >> 2] = $238; //@line 13971
     $479 = $ReallocAsyncCtx10 + 48 | 0; //@line 13972
     HEAP32[$479 >> 2] = $26; //@line 13973
     $480 = $ReallocAsyncCtx10 + 52 | 0; //@line 13974
     HEAP32[$480 >> 2] = $28; //@line 13975
     $481 = $ReallocAsyncCtx10 + 56 | 0; //@line 13976
     HEAP32[$481 >> 2] = $30; //@line 13977
     $482 = $ReallocAsyncCtx10 + 60 | 0; //@line 13978
     HEAP32[$482 >> 2] = $32; //@line 13979
     $483 = $ReallocAsyncCtx10 + 64 | 0; //@line 13980
     HEAP32[$483 >> 2] = $34; //@line 13981
     $484 = $ReallocAsyncCtx10 + 68 | 0; //@line 13982
     HEAP32[$484 >> 2] = $36; //@line 13983
     $485 = $ReallocAsyncCtx10 + 72 | 0; //@line 13984
     HEAP32[$485 >> 2] = $38; //@line 13985
     $486 = $ReallocAsyncCtx10 + 76 | 0; //@line 13986
     HEAP32[$486 >> 2] = $AsyncRetVal; //@line 13987
     $487 = $ReallocAsyncCtx10 + 80 | 0; //@line 13988
     HEAP32[$487 >> 2] = $42; //@line 13989
     $488 = $ReallocAsyncCtx10 + 84 | 0; //@line 13990
     HEAP32[$488 >> 2] = $44; //@line 13991
     $489 = $ReallocAsyncCtx10 + 88 | 0; //@line 13992
     HEAP32[$489 >> 2] = $48; //@line 13993
     $490 = $ReallocAsyncCtx10 + 92 | 0; //@line 13994
     HEAP32[$490 >> 2] = $50; //@line 13995
     $491 = $ReallocAsyncCtx10 + 96 | 0; //@line 13996
     HEAP32[$491 >> 2] = $52; //@line 13997
     $492 = $ReallocAsyncCtx10 + 100 | 0; //@line 13998
     HEAP32[$492 >> 2] = $54; //@line 13999
     $493 = $ReallocAsyncCtx10 + 104 | 0; //@line 14000
     HEAP32[$493 >> 2] = $56; //@line 14001
     $494 = $ReallocAsyncCtx10 + 108 | 0; //@line 14002
     HEAP32[$494 >> 2] = $60; //@line 14003
     $495 = $ReallocAsyncCtx10 + 112 | 0; //@line 14004
     HEAP32[$495 >> 2] = $62; //@line 14005
     $496 = $ReallocAsyncCtx10 + 116 | 0; //@line 14006
     HEAP32[$496 >> 2] = $64; //@line 14007
     $497 = $ReallocAsyncCtx10 + 120 | 0; //@line 14008
     HEAP32[$497 >> 2] = $66; //@line 14009
     $498 = $ReallocAsyncCtx10 + 124 | 0; //@line 14010
     HEAP32[$498 >> 2] = $$0208$i; //@line 14011
     $499 = $ReallocAsyncCtx10 + 128 | 0; //@line 14012
     HEAP32[$499 >> 2] = $68; //@line 14013
     $500 = $ReallocAsyncCtx10 + 132 | 0; //@line 14014
     HEAP32[$500 >> 2] = $70; //@line 14015
     $501 = $ReallocAsyncCtx10 + 136 | 0; //@line 14016
     HEAP32[$501 >> 2] = $38; //@line 14017
     $502 = $ReallocAsyncCtx10 + 140 | 0; //@line 14018
     HEAP32[$502 >> 2] = $72; //@line 14019
     $503 = $ReallocAsyncCtx10 + 144 | 0; //@line 14020
     HEAP32[$503 >> 2] = $74; //@line 14021
     $504 = $ReallocAsyncCtx10 + 148 | 0; //@line 14022
     HEAP32[$504 >> 2] = $76; //@line 14023
     $505 = $ReallocAsyncCtx10 + 152 | 0; //@line 14024
     HEAP32[$505 >> 2] = $78; //@line 14025
     $506 = $ReallocAsyncCtx10 + 156 | 0; //@line 14026
     HEAP32[$506 >> 2] = $80; //@line 14027
     $507 = $ReallocAsyncCtx10 + 160 | 0; //@line 14028
     HEAP32[$507 >> 2] = $232; //@line 14029
     $508 = $ReallocAsyncCtx10 + 164 | 0; //@line 14030
     HEAP32[$508 >> 2] = $AsyncRetVal; //@line 14031
     $509 = $ReallocAsyncCtx10 + 168 | 0; //@line 14032
     HEAP32[$509 >> 2] = $82; //@line 14033
     $510 = $ReallocAsyncCtx10 + 172 | 0; //@line 14034
     HEAP32[$510 >> 2] = $84; //@line 14035
     $511 = $ReallocAsyncCtx10 + 176 | 0; //@line 14036
     HEAP32[$511 >> 2] = $86; //@line 14037
     $512 = $ReallocAsyncCtx10 + 180 | 0; //@line 14038
     HEAP32[$512 >> 2] = $88; //@line 14039
     $513 = $ReallocAsyncCtx10 + 184 | 0; //@line 14040
     HEAP32[$513 >> 2] = $233; //@line 14041
     $514 = $ReallocAsyncCtx10 + 188 | 0; //@line 14042
     HEAP32[$514 >> 2] = $94; //@line 14043
     $515 = $ReallocAsyncCtx10 + 192 | 0; //@line 14044
     HEAP32[$515 >> 2] = $96; //@line 14045
     $516 = $ReallocAsyncCtx10 + 196 | 0; //@line 14046
     HEAP32[$516 >> 2] = $98; //@line 14047
     $517 = $ReallocAsyncCtx10 + 200 | 0; //@line 14048
     HEAP32[$517 >> 2] = $234; //@line 14049
     $518 = $ReallocAsyncCtx10 + 204 | 0; //@line 14050
     HEAP32[$518 >> 2] = $100; //@line 14051
     $519 = $ReallocAsyncCtx10 + 208 | 0; //@line 14052
     HEAP32[$519 >> 2] = $102; //@line 14053
     $520 = $ReallocAsyncCtx10 + 212 | 0; //@line 14054
     HEAP32[$520 >> 2] = $104; //@line 14055
     $521 = $ReallocAsyncCtx10 + 216 | 0; //@line 14056
     HEAP32[$521 >> 2] = $106; //@line 14057
     $522 = $ReallocAsyncCtx10 + 220 | 0; //@line 14058
     HEAP32[$522 >> 2] = $108; //@line 14059
     $523 = $ReallocAsyncCtx10 + 224 | 0; //@line 14060
     HEAP32[$523 >> 2] = $110; //@line 14061
     $524 = $ReallocAsyncCtx10 + 228 | 0; //@line 14062
     HEAP32[$524 >> 2] = $114; //@line 14063
     $525 = $ReallocAsyncCtx10 + 232 | 0; //@line 14064
     HEAP32[$525 >> 2] = $116; //@line 14065
     $526 = $ReallocAsyncCtx10 + 236 | 0; //@line 14066
     HEAP32[$526 >> 2] = $118; //@line 14067
     $527 = $ReallocAsyncCtx10 + 240 | 0; //@line 14068
     HEAP32[$527 >> 2] = $120; //@line 14069
     $528 = $ReallocAsyncCtx10 + 244 | 0; //@line 14070
     HEAP32[$528 >> 2] = $124; //@line 14071
     $529 = $ReallocAsyncCtx10 + 248 | 0; //@line 14072
     HEAP32[$529 >> 2] = $126; //@line 14073
     $530 = $ReallocAsyncCtx10 + 252 | 0; //@line 14074
     HEAP32[$530 >> 2] = $236; //@line 14075
     $531 = $ReallocAsyncCtx10 + 256 | 0; //@line 14076
     HEAP32[$531 >> 2] = $128; //@line 14077
     $532 = $ReallocAsyncCtx10 + 260 | 0; //@line 14078
     HEAP32[$532 >> 2] = $236; //@line 14079
     $533 = $ReallocAsyncCtx10 + 264 | 0; //@line 14080
     HEAP32[$533 >> 2] = $130; //@line 14081
     sp = STACKTOP; //@line 14082
     return;
    }
   case 50:
    {
     $535 = $$1202$in$i & 65535; //@line 14087
     if (($$1202$i + -1 & 65535) <= 254) {
      $538 = HEAP32[$236 >> 2] | 0; //@line 14091
      if (!(HEAP32[$538 + 52 >> 2] | 0)) {
       HEAP16[$538 + 4 >> 1] = $$1202$i; //@line 14097
       $543 = $293 + 1 | 0; //@line 14098
       HEAP32[$38 >> 2] = $543; //@line 14099
       $544 = HEAP32[$128 >> 2] | 0; //@line 14100
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 14101
       $545 = FUNCTION_TABLE_ii[$544 & 31]($$1202$i) | 0; //@line 14102
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 14105
        $546 = $ReallocAsyncCtx5 + 4 | 0; //@line 14106
        HEAP32[$546 >> 2] = $2; //@line 14107
        $547 = $ReallocAsyncCtx5 + 8 | 0; //@line 14108
        HEAP32[$547 >> 2] = $237; //@line 14109
        $548 = $ReallocAsyncCtx5 + 12 | 0; //@line 14110
        HEAP32[$548 >> 2] = $6; //@line 14111
        $549 = $ReallocAsyncCtx5 + 16 | 0; //@line 14112
        HEAP32[$549 >> 2] = $8; //@line 14113
        $550 = $ReallocAsyncCtx5 + 20 | 0; //@line 14114
        HEAP32[$550 >> 2] = $133; //@line 14115
        $551 = $ReallocAsyncCtx5 + 24 | 0; //@line 14116
        HEAP32[$551 >> 2] = $10; //@line 14117
        $552 = $ReallocAsyncCtx5 + 28 | 0; //@line 14118
        HEAP32[$552 >> 2] = $12; //@line 14119
        $553 = $ReallocAsyncCtx5 + 32 | 0; //@line 14120
        HEAP32[$553 >> 2] = $14; //@line 14121
        $554 = $ReallocAsyncCtx5 + 36 | 0; //@line 14122
        HEAP32[$554 >> 2] = $22; //@line 14123
        $555 = $ReallocAsyncCtx5 + 40 | 0; //@line 14124
        HEAP32[$555 >> 2] = $24; //@line 14125
        $556 = $ReallocAsyncCtx5 + 44 | 0; //@line 14126
        HEAP32[$556 >> 2] = $238; //@line 14127
        $557 = $ReallocAsyncCtx5 + 48 | 0; //@line 14128
        HEAP32[$557 >> 2] = $26; //@line 14129
        $558 = $ReallocAsyncCtx5 + 52 | 0; //@line 14130
        HEAP32[$558 >> 2] = $28; //@line 14131
        $559 = $ReallocAsyncCtx5 + 56 | 0; //@line 14132
        HEAP32[$559 >> 2] = $30; //@line 14133
        $560 = $ReallocAsyncCtx5 + 60 | 0; //@line 14134
        HEAP32[$560 >> 2] = $32; //@line 14135
        $561 = $ReallocAsyncCtx5 + 64 | 0; //@line 14136
        HEAP32[$561 >> 2] = $34; //@line 14137
        $562 = $ReallocAsyncCtx5 + 68 | 0; //@line 14138
        HEAP32[$562 >> 2] = $36; //@line 14139
        $563 = $ReallocAsyncCtx5 + 72 | 0; //@line 14140
        HEAP32[$563 >> 2] = $38; //@line 14141
        $564 = $ReallocAsyncCtx5 + 76 | 0; //@line 14142
        HEAP32[$564 >> 2] = $AsyncRetVal; //@line 14143
        $565 = $ReallocAsyncCtx5 + 80 | 0; //@line 14144
        HEAP32[$565 >> 2] = $42; //@line 14145
        $566 = $ReallocAsyncCtx5 + 84 | 0; //@line 14146
        HEAP32[$566 >> 2] = $44; //@line 14147
        $567 = $ReallocAsyncCtx5 + 88 | 0; //@line 14148
        HEAP32[$567 >> 2] = $48; //@line 14149
        $568 = $ReallocAsyncCtx5 + 92 | 0; //@line 14150
        HEAP32[$568 >> 2] = $50; //@line 14151
        $569 = $ReallocAsyncCtx5 + 96 | 0; //@line 14152
        HEAP32[$569 >> 2] = $52; //@line 14153
        $570 = $ReallocAsyncCtx5 + 100 | 0; //@line 14154
        HEAP32[$570 >> 2] = $54; //@line 14155
        $571 = $ReallocAsyncCtx5 + 104 | 0; //@line 14156
        HEAP32[$571 >> 2] = $56; //@line 14157
        $572 = $ReallocAsyncCtx5 + 108 | 0; //@line 14158
        HEAP32[$572 >> 2] = $60; //@line 14159
        $573 = $ReallocAsyncCtx5 + 112 | 0; //@line 14160
        HEAP32[$573 >> 2] = $62; //@line 14161
        $574 = $ReallocAsyncCtx5 + 116 | 0; //@line 14162
        HEAP32[$574 >> 2] = $64; //@line 14163
        $575 = $ReallocAsyncCtx5 + 120 | 0; //@line 14164
        HEAP32[$575 >> 2] = $66; //@line 14165
        $576 = $ReallocAsyncCtx5 + 124 | 0; //@line 14166
        HEAP32[$576 >> 2] = $$0208$i; //@line 14167
        $577 = $ReallocAsyncCtx5 + 128 | 0; //@line 14168
        HEAP32[$577 >> 2] = $68; //@line 14169
        $578 = $ReallocAsyncCtx5 + 132 | 0; //@line 14170
        HEAP32[$578 >> 2] = $70; //@line 14171
        $579 = $ReallocAsyncCtx5 + 136 | 0; //@line 14172
        HEAP32[$579 >> 2] = $38; //@line 14173
        $580 = $ReallocAsyncCtx5 + 140 | 0; //@line 14174
        HEAP32[$580 >> 2] = $72; //@line 14175
        $581 = $ReallocAsyncCtx5 + 144 | 0; //@line 14176
        HEAP32[$581 >> 2] = $74; //@line 14177
        $582 = $ReallocAsyncCtx5 + 148 | 0; //@line 14178
        HEAP32[$582 >> 2] = $76; //@line 14179
        $583 = $ReallocAsyncCtx5 + 152 | 0; //@line 14180
        HEAP32[$583 >> 2] = $78; //@line 14181
        $584 = $ReallocAsyncCtx5 + 156 | 0; //@line 14182
        HEAP32[$584 >> 2] = $80; //@line 14183
        $585 = $ReallocAsyncCtx5 + 160 | 0; //@line 14184
        HEAP32[$585 >> 2] = $232; //@line 14185
        $586 = $ReallocAsyncCtx5 + 164 | 0; //@line 14186
        HEAP32[$586 >> 2] = $AsyncRetVal; //@line 14187
        $587 = $ReallocAsyncCtx5 + 168 | 0; //@line 14188
        HEAP32[$587 >> 2] = $82; //@line 14189
        $588 = $ReallocAsyncCtx5 + 172 | 0; //@line 14190
        HEAP32[$588 >> 2] = $84; //@line 14191
        $589 = $ReallocAsyncCtx5 + 176 | 0; //@line 14192
        HEAP32[$589 >> 2] = $86; //@line 14193
        $590 = $ReallocAsyncCtx5 + 180 | 0; //@line 14194
        HEAP32[$590 >> 2] = $88; //@line 14195
        $591 = $ReallocAsyncCtx5 + 184 | 0; //@line 14196
        HEAP32[$591 >> 2] = $233; //@line 14197
        $592 = $ReallocAsyncCtx5 + 188 | 0; //@line 14198
        HEAP32[$592 >> 2] = $94; //@line 14199
        $593 = $ReallocAsyncCtx5 + 192 | 0; //@line 14200
        HEAP32[$593 >> 2] = $535; //@line 14201
        $594 = $ReallocAsyncCtx5 + 196 | 0; //@line 14202
        HEAP32[$594 >> 2] = $96; //@line 14203
        $595 = $ReallocAsyncCtx5 + 200 | 0; //@line 14204
        HEAP32[$595 >> 2] = $98; //@line 14205
        $596 = $ReallocAsyncCtx5 + 204 | 0; //@line 14206
        HEAP32[$596 >> 2] = $543; //@line 14207
        $597 = $ReallocAsyncCtx5 + 208 | 0; //@line 14208
        HEAP32[$597 >> 2] = $234; //@line 14209
        $598 = $ReallocAsyncCtx5 + 212 | 0; //@line 14210
        HEAP32[$598 >> 2] = $100; //@line 14211
        $599 = $ReallocAsyncCtx5 + 216 | 0; //@line 14212
        HEAP32[$599 >> 2] = $102; //@line 14213
        $600 = $ReallocAsyncCtx5 + 220 | 0; //@line 14214
        HEAP32[$600 >> 2] = $104; //@line 14215
        $601 = $ReallocAsyncCtx5 + 224 | 0; //@line 14216
        HEAP32[$601 >> 2] = $106; //@line 14217
        $602 = $ReallocAsyncCtx5 + 228 | 0; //@line 14218
        HEAP32[$602 >> 2] = $108; //@line 14219
        $603 = $ReallocAsyncCtx5 + 232 | 0; //@line 14220
        HEAP32[$603 >> 2] = $110; //@line 14221
        $604 = $ReallocAsyncCtx5 + 236 | 0; //@line 14222
        HEAP32[$604 >> 2] = $114; //@line 14223
        $605 = $ReallocAsyncCtx5 + 240 | 0; //@line 14224
        HEAP32[$605 >> 2] = $116; //@line 14225
        $606 = $ReallocAsyncCtx5 + 244 | 0; //@line 14226
        HEAP32[$606 >> 2] = $118; //@line 14227
        $607 = $ReallocAsyncCtx5 + 248 | 0; //@line 14228
        HEAP32[$607 >> 2] = $120; //@line 14229
        $608 = $ReallocAsyncCtx5 + 252 | 0; //@line 14230
        HEAP32[$608 >> 2] = $124; //@line 14231
        $609 = $ReallocAsyncCtx5 + 256 | 0; //@line 14232
        HEAP32[$609 >> 2] = $126; //@line 14233
        $610 = $ReallocAsyncCtx5 + 260 | 0; //@line 14234
        HEAP32[$610 >> 2] = $236; //@line 14235
        $611 = $ReallocAsyncCtx5 + 264 | 0; //@line 14236
        HEAP32[$611 >> 2] = $128; //@line 14237
        $612 = $ReallocAsyncCtx5 + 268 | 0; //@line 14238
        HEAP32[$612 >> 2] = $236; //@line 14239
        $613 = $ReallocAsyncCtx5 + 272 | 0; //@line 14240
        HEAP32[$613 >> 2] = $130; //@line 14241
        sp = STACKTOP; //@line 14242
        return;
       }
       HEAP32[___async_retval >> 2] = $545; //@line 14246
       ___async_unwind = 0; //@line 14247
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 14248
       $546 = $ReallocAsyncCtx5 + 4 | 0; //@line 14249
       HEAP32[$546 >> 2] = $2; //@line 14250
       $547 = $ReallocAsyncCtx5 + 8 | 0; //@line 14251
       HEAP32[$547 >> 2] = $237; //@line 14252
       $548 = $ReallocAsyncCtx5 + 12 | 0; //@line 14253
       HEAP32[$548 >> 2] = $6; //@line 14254
       $549 = $ReallocAsyncCtx5 + 16 | 0; //@line 14255
       HEAP32[$549 >> 2] = $8; //@line 14256
       $550 = $ReallocAsyncCtx5 + 20 | 0; //@line 14257
       HEAP32[$550 >> 2] = $133; //@line 14258
       $551 = $ReallocAsyncCtx5 + 24 | 0; //@line 14259
       HEAP32[$551 >> 2] = $10; //@line 14260
       $552 = $ReallocAsyncCtx5 + 28 | 0; //@line 14261
       HEAP32[$552 >> 2] = $12; //@line 14262
       $553 = $ReallocAsyncCtx5 + 32 | 0; //@line 14263
       HEAP32[$553 >> 2] = $14; //@line 14264
       $554 = $ReallocAsyncCtx5 + 36 | 0; //@line 14265
       HEAP32[$554 >> 2] = $22; //@line 14266
       $555 = $ReallocAsyncCtx5 + 40 | 0; //@line 14267
       HEAP32[$555 >> 2] = $24; //@line 14268
       $556 = $ReallocAsyncCtx5 + 44 | 0; //@line 14269
       HEAP32[$556 >> 2] = $238; //@line 14270
       $557 = $ReallocAsyncCtx5 + 48 | 0; //@line 14271
       HEAP32[$557 >> 2] = $26; //@line 14272
       $558 = $ReallocAsyncCtx5 + 52 | 0; //@line 14273
       HEAP32[$558 >> 2] = $28; //@line 14274
       $559 = $ReallocAsyncCtx5 + 56 | 0; //@line 14275
       HEAP32[$559 >> 2] = $30; //@line 14276
       $560 = $ReallocAsyncCtx5 + 60 | 0; //@line 14277
       HEAP32[$560 >> 2] = $32; //@line 14278
       $561 = $ReallocAsyncCtx5 + 64 | 0; //@line 14279
       HEAP32[$561 >> 2] = $34; //@line 14280
       $562 = $ReallocAsyncCtx5 + 68 | 0; //@line 14281
       HEAP32[$562 >> 2] = $36; //@line 14282
       $563 = $ReallocAsyncCtx5 + 72 | 0; //@line 14283
       HEAP32[$563 >> 2] = $38; //@line 14284
       $564 = $ReallocAsyncCtx5 + 76 | 0; //@line 14285
       HEAP32[$564 >> 2] = $AsyncRetVal; //@line 14286
       $565 = $ReallocAsyncCtx5 + 80 | 0; //@line 14287
       HEAP32[$565 >> 2] = $42; //@line 14288
       $566 = $ReallocAsyncCtx5 + 84 | 0; //@line 14289
       HEAP32[$566 >> 2] = $44; //@line 14290
       $567 = $ReallocAsyncCtx5 + 88 | 0; //@line 14291
       HEAP32[$567 >> 2] = $48; //@line 14292
       $568 = $ReallocAsyncCtx5 + 92 | 0; //@line 14293
       HEAP32[$568 >> 2] = $50; //@line 14294
       $569 = $ReallocAsyncCtx5 + 96 | 0; //@line 14295
       HEAP32[$569 >> 2] = $52; //@line 14296
       $570 = $ReallocAsyncCtx5 + 100 | 0; //@line 14297
       HEAP32[$570 >> 2] = $54; //@line 14298
       $571 = $ReallocAsyncCtx5 + 104 | 0; //@line 14299
       HEAP32[$571 >> 2] = $56; //@line 14300
       $572 = $ReallocAsyncCtx5 + 108 | 0; //@line 14301
       HEAP32[$572 >> 2] = $60; //@line 14302
       $573 = $ReallocAsyncCtx5 + 112 | 0; //@line 14303
       HEAP32[$573 >> 2] = $62; //@line 14304
       $574 = $ReallocAsyncCtx5 + 116 | 0; //@line 14305
       HEAP32[$574 >> 2] = $64; //@line 14306
       $575 = $ReallocAsyncCtx5 + 120 | 0; //@line 14307
       HEAP32[$575 >> 2] = $66; //@line 14308
       $576 = $ReallocAsyncCtx5 + 124 | 0; //@line 14309
       HEAP32[$576 >> 2] = $$0208$i; //@line 14310
       $577 = $ReallocAsyncCtx5 + 128 | 0; //@line 14311
       HEAP32[$577 >> 2] = $68; //@line 14312
       $578 = $ReallocAsyncCtx5 + 132 | 0; //@line 14313
       HEAP32[$578 >> 2] = $70; //@line 14314
       $579 = $ReallocAsyncCtx5 + 136 | 0; //@line 14315
       HEAP32[$579 >> 2] = $38; //@line 14316
       $580 = $ReallocAsyncCtx5 + 140 | 0; //@line 14317
       HEAP32[$580 >> 2] = $72; //@line 14318
       $581 = $ReallocAsyncCtx5 + 144 | 0; //@line 14319
       HEAP32[$581 >> 2] = $74; //@line 14320
       $582 = $ReallocAsyncCtx5 + 148 | 0; //@line 14321
       HEAP32[$582 >> 2] = $76; //@line 14322
       $583 = $ReallocAsyncCtx5 + 152 | 0; //@line 14323
       HEAP32[$583 >> 2] = $78; //@line 14324
       $584 = $ReallocAsyncCtx5 + 156 | 0; //@line 14325
       HEAP32[$584 >> 2] = $80; //@line 14326
       $585 = $ReallocAsyncCtx5 + 160 | 0; //@line 14327
       HEAP32[$585 >> 2] = $232; //@line 14328
       $586 = $ReallocAsyncCtx5 + 164 | 0; //@line 14329
       HEAP32[$586 >> 2] = $AsyncRetVal; //@line 14330
       $587 = $ReallocAsyncCtx5 + 168 | 0; //@line 14331
       HEAP32[$587 >> 2] = $82; //@line 14332
       $588 = $ReallocAsyncCtx5 + 172 | 0; //@line 14333
       HEAP32[$588 >> 2] = $84; //@line 14334
       $589 = $ReallocAsyncCtx5 + 176 | 0; //@line 14335
       HEAP32[$589 >> 2] = $86; //@line 14336
       $590 = $ReallocAsyncCtx5 + 180 | 0; //@line 14337
       HEAP32[$590 >> 2] = $88; //@line 14338
       $591 = $ReallocAsyncCtx5 + 184 | 0; //@line 14339
       HEAP32[$591 >> 2] = $233; //@line 14340
       $592 = $ReallocAsyncCtx5 + 188 | 0; //@line 14341
       HEAP32[$592 >> 2] = $94; //@line 14342
       $593 = $ReallocAsyncCtx5 + 192 | 0; //@line 14343
       HEAP32[$593 >> 2] = $535; //@line 14344
       $594 = $ReallocAsyncCtx5 + 196 | 0; //@line 14345
       HEAP32[$594 >> 2] = $96; //@line 14346
       $595 = $ReallocAsyncCtx5 + 200 | 0; //@line 14347
       HEAP32[$595 >> 2] = $98; //@line 14348
       $596 = $ReallocAsyncCtx5 + 204 | 0; //@line 14349
       HEAP32[$596 >> 2] = $543; //@line 14350
       $597 = $ReallocAsyncCtx5 + 208 | 0; //@line 14351
       HEAP32[$597 >> 2] = $234; //@line 14352
       $598 = $ReallocAsyncCtx5 + 212 | 0; //@line 14353
       HEAP32[$598 >> 2] = $100; //@line 14354
       $599 = $ReallocAsyncCtx5 + 216 | 0; //@line 14355
       HEAP32[$599 >> 2] = $102; //@line 14356
       $600 = $ReallocAsyncCtx5 + 220 | 0; //@line 14357
       HEAP32[$600 >> 2] = $104; //@line 14358
       $601 = $ReallocAsyncCtx5 + 224 | 0; //@line 14359
       HEAP32[$601 >> 2] = $106; //@line 14360
       $602 = $ReallocAsyncCtx5 + 228 | 0; //@line 14361
       HEAP32[$602 >> 2] = $108; //@line 14362
       $603 = $ReallocAsyncCtx5 + 232 | 0; //@line 14363
       HEAP32[$603 >> 2] = $110; //@line 14364
       $604 = $ReallocAsyncCtx5 + 236 | 0; //@line 14365
       HEAP32[$604 >> 2] = $114; //@line 14366
       $605 = $ReallocAsyncCtx5 + 240 | 0; //@line 14367
       HEAP32[$605 >> 2] = $116; //@line 14368
       $606 = $ReallocAsyncCtx5 + 244 | 0; //@line 14369
       HEAP32[$606 >> 2] = $118; //@line 14370
       $607 = $ReallocAsyncCtx5 + 248 | 0; //@line 14371
       HEAP32[$607 >> 2] = $120; //@line 14372
       $608 = $ReallocAsyncCtx5 + 252 | 0; //@line 14373
       HEAP32[$608 >> 2] = $124; //@line 14374
       $609 = $ReallocAsyncCtx5 + 256 | 0; //@line 14375
       HEAP32[$609 >> 2] = $126; //@line 14376
       $610 = $ReallocAsyncCtx5 + 260 | 0; //@line 14377
       HEAP32[$610 >> 2] = $236; //@line 14378
       $611 = $ReallocAsyncCtx5 + 264 | 0; //@line 14379
       HEAP32[$611 >> 2] = $128; //@line 14380
       $612 = $ReallocAsyncCtx5 + 268 | 0; //@line 14381
       HEAP32[$612 >> 2] = $236; //@line 14382
       $613 = $ReallocAsyncCtx5 + 272 | 0; //@line 14383
       HEAP32[$613 >> 2] = $130; //@line 14384
       sp = STACKTOP; //@line 14385
       return;
      }
     }
     _mbed_tracef(2, 3803, 4564, $114); //@line 14389
     break L6;
     break;
    }
   case 56:
    {
     $615 = HEAP32[$236 >> 2] | 0; //@line 14394
     $616 = $615 + 56 | 0; //@line 14395
     if (HEAP32[$616 >> 2] | 0) {
      _mbed_tracef(2, 3803, 4698, $94); //@line 14399
      break L6;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 14403
     $620 = _sn_coap_parser_options_parse_multiple_options($2, $38, $279, $616, $615 + 6 | 0, 8, $$1202$i) | 0; //@line 14404
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 14407
      $621 = $ReallocAsyncCtx9 + 4 | 0; //@line 14408
      HEAP32[$621 >> 2] = $2; //@line 14409
      $622 = $ReallocAsyncCtx9 + 8 | 0; //@line 14410
      HEAP32[$622 >> 2] = $237; //@line 14411
      $623 = $ReallocAsyncCtx9 + 12 | 0; //@line 14412
      HEAP32[$623 >> 2] = $6; //@line 14413
      $624 = $ReallocAsyncCtx9 + 16 | 0; //@line 14414
      HEAP32[$624 >> 2] = $8; //@line 14415
      $625 = $ReallocAsyncCtx9 + 20 | 0; //@line 14416
      HEAP32[$625 >> 2] = $133; //@line 14417
      $626 = $ReallocAsyncCtx9 + 24 | 0; //@line 14418
      HEAP32[$626 >> 2] = $10; //@line 14419
      $627 = $ReallocAsyncCtx9 + 28 | 0; //@line 14420
      HEAP32[$627 >> 2] = $12; //@line 14421
      $628 = $ReallocAsyncCtx9 + 32 | 0; //@line 14422
      HEAP32[$628 >> 2] = $14; //@line 14423
      $629 = $ReallocAsyncCtx9 + 36 | 0; //@line 14424
      HEAP32[$629 >> 2] = $22; //@line 14425
      $630 = $ReallocAsyncCtx9 + 40 | 0; //@line 14426
      HEAP32[$630 >> 2] = $24; //@line 14427
      $631 = $ReallocAsyncCtx9 + 44 | 0; //@line 14428
      HEAP32[$631 >> 2] = $238; //@line 14429
      $632 = $ReallocAsyncCtx9 + 48 | 0; //@line 14430
      HEAP32[$632 >> 2] = $26; //@line 14431
      $633 = $ReallocAsyncCtx9 + 52 | 0; //@line 14432
      HEAP32[$633 >> 2] = $28; //@line 14433
      $634 = $ReallocAsyncCtx9 + 56 | 0; //@line 14434
      HEAP32[$634 >> 2] = $30; //@line 14435
      $635 = $ReallocAsyncCtx9 + 60 | 0; //@line 14436
      HEAP32[$635 >> 2] = $32; //@line 14437
      $636 = $ReallocAsyncCtx9 + 64 | 0; //@line 14438
      HEAP32[$636 >> 2] = $34; //@line 14439
      $637 = $ReallocAsyncCtx9 + 68 | 0; //@line 14440
      HEAP32[$637 >> 2] = $36; //@line 14441
      $638 = $ReallocAsyncCtx9 + 72 | 0; //@line 14442
      HEAP32[$638 >> 2] = $38; //@line 14443
      $639 = $ReallocAsyncCtx9 + 76 | 0; //@line 14444
      HEAP32[$639 >> 2] = $AsyncRetVal; //@line 14445
      $640 = $ReallocAsyncCtx9 + 80 | 0; //@line 14446
      HEAP32[$640 >> 2] = $42; //@line 14447
      $641 = $ReallocAsyncCtx9 + 84 | 0; //@line 14448
      HEAP32[$641 >> 2] = $44; //@line 14449
      $642 = $ReallocAsyncCtx9 + 88 | 0; //@line 14450
      HEAP32[$642 >> 2] = $48; //@line 14451
      $643 = $ReallocAsyncCtx9 + 92 | 0; //@line 14452
      HEAP32[$643 >> 2] = $50; //@line 14453
      $644 = $ReallocAsyncCtx9 + 96 | 0; //@line 14454
      HEAP32[$644 >> 2] = $52; //@line 14455
      $645 = $ReallocAsyncCtx9 + 100 | 0; //@line 14456
      HEAP32[$645 >> 2] = $54; //@line 14457
      $646 = $ReallocAsyncCtx9 + 104 | 0; //@line 14458
      HEAP32[$646 >> 2] = $56; //@line 14459
      $647 = $ReallocAsyncCtx9 + 108 | 0; //@line 14460
      HEAP32[$647 >> 2] = $60; //@line 14461
      $648 = $ReallocAsyncCtx9 + 112 | 0; //@line 14462
      HEAP32[$648 >> 2] = $62; //@line 14463
      $649 = $ReallocAsyncCtx9 + 116 | 0; //@line 14464
      HEAP32[$649 >> 2] = $64; //@line 14465
      $650 = $ReallocAsyncCtx9 + 120 | 0; //@line 14466
      HEAP32[$650 >> 2] = $66; //@line 14467
      $651 = $ReallocAsyncCtx9 + 124 | 0; //@line 14468
      HEAP32[$651 >> 2] = $$0208$i; //@line 14469
      $652 = $ReallocAsyncCtx9 + 128 | 0; //@line 14470
      HEAP32[$652 >> 2] = $68; //@line 14471
      $653 = $ReallocAsyncCtx9 + 132 | 0; //@line 14472
      HEAP32[$653 >> 2] = $70; //@line 14473
      $654 = $ReallocAsyncCtx9 + 136 | 0; //@line 14474
      HEAP32[$654 >> 2] = $38; //@line 14475
      $655 = $ReallocAsyncCtx9 + 140 | 0; //@line 14476
      HEAP32[$655 >> 2] = $72; //@line 14477
      $656 = $ReallocAsyncCtx9 + 144 | 0; //@line 14478
      HEAP32[$656 >> 2] = $74; //@line 14479
      $657 = $ReallocAsyncCtx9 + 148 | 0; //@line 14480
      HEAP32[$657 >> 2] = $76; //@line 14481
      $658 = $ReallocAsyncCtx9 + 152 | 0; //@line 14482
      HEAP32[$658 >> 2] = $78; //@line 14483
      $659 = $ReallocAsyncCtx9 + 156 | 0; //@line 14484
      HEAP32[$659 >> 2] = $80; //@line 14485
      $660 = $ReallocAsyncCtx9 + 160 | 0; //@line 14486
      HEAP32[$660 >> 2] = $232; //@line 14487
      $661 = $ReallocAsyncCtx9 + 164 | 0; //@line 14488
      HEAP32[$661 >> 2] = $AsyncRetVal; //@line 14489
      $662 = $ReallocAsyncCtx9 + 168 | 0; //@line 14490
      HEAP32[$662 >> 2] = $82; //@line 14491
      $663 = $ReallocAsyncCtx9 + 172 | 0; //@line 14492
      HEAP32[$663 >> 2] = $84; //@line 14493
      $664 = $ReallocAsyncCtx9 + 176 | 0; //@line 14494
      HEAP32[$664 >> 2] = $86; //@line 14495
      $665 = $ReallocAsyncCtx9 + 180 | 0; //@line 14496
      HEAP32[$665 >> 2] = $88; //@line 14497
      $666 = $ReallocAsyncCtx9 + 184 | 0; //@line 14498
      HEAP32[$666 >> 2] = $233; //@line 14499
      $667 = $ReallocAsyncCtx9 + 188 | 0; //@line 14500
      HEAP32[$667 >> 2] = $94; //@line 14501
      $668 = $ReallocAsyncCtx9 + 192 | 0; //@line 14502
      HEAP32[$668 >> 2] = $96; //@line 14503
      $669 = $ReallocAsyncCtx9 + 196 | 0; //@line 14504
      HEAP32[$669 >> 2] = $98; //@line 14505
      $670 = $ReallocAsyncCtx9 + 200 | 0; //@line 14506
      HEAP32[$670 >> 2] = $234; //@line 14507
      $671 = $ReallocAsyncCtx9 + 204 | 0; //@line 14508
      HEAP32[$671 >> 2] = $100; //@line 14509
      $672 = $ReallocAsyncCtx9 + 208 | 0; //@line 14510
      HEAP32[$672 >> 2] = $102; //@line 14511
      $673 = $ReallocAsyncCtx9 + 212 | 0; //@line 14512
      HEAP32[$673 >> 2] = $104; //@line 14513
      $674 = $ReallocAsyncCtx9 + 216 | 0; //@line 14514
      HEAP32[$674 >> 2] = $106; //@line 14515
      $675 = $ReallocAsyncCtx9 + 220 | 0; //@line 14516
      HEAP32[$675 >> 2] = $108; //@line 14517
      $676 = $ReallocAsyncCtx9 + 224 | 0; //@line 14518
      HEAP32[$676 >> 2] = $110; //@line 14519
      $677 = $ReallocAsyncCtx9 + 228 | 0; //@line 14520
      HEAP32[$677 >> 2] = $114; //@line 14521
      $678 = $ReallocAsyncCtx9 + 232 | 0; //@line 14522
      HEAP32[$678 >> 2] = $116; //@line 14523
      $679 = $ReallocAsyncCtx9 + 236 | 0; //@line 14524
      HEAP32[$679 >> 2] = $118; //@line 14525
      $680 = $ReallocAsyncCtx9 + 240 | 0; //@line 14526
      HEAP32[$680 >> 2] = $120; //@line 14527
      $681 = $ReallocAsyncCtx9 + 244 | 0; //@line 14528
      HEAP32[$681 >> 2] = $124; //@line 14529
      $682 = $ReallocAsyncCtx9 + 248 | 0; //@line 14530
      HEAP32[$682 >> 2] = $126; //@line 14531
      $683 = $ReallocAsyncCtx9 + 252 | 0; //@line 14532
      HEAP32[$683 >> 2] = $236; //@line 14533
      $684 = $ReallocAsyncCtx9 + 256 | 0; //@line 14534
      HEAP32[$684 >> 2] = $128; //@line 14535
      $685 = $ReallocAsyncCtx9 + 260 | 0; //@line 14536
      HEAP32[$685 >> 2] = $236; //@line 14537
      $686 = $ReallocAsyncCtx9 + 264 | 0; //@line 14538
      HEAP32[$686 >> 2] = $130; //@line 14539
      sp = STACKTOP; //@line 14540
      return;
     }
     HEAP8[___async_retval >> 0] = $620; //@line 14544
     ___async_unwind = 0; //@line 14545
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 14546
     $621 = $ReallocAsyncCtx9 + 4 | 0; //@line 14547
     HEAP32[$621 >> 2] = $2; //@line 14548
     $622 = $ReallocAsyncCtx9 + 8 | 0; //@line 14549
     HEAP32[$622 >> 2] = $237; //@line 14550
     $623 = $ReallocAsyncCtx9 + 12 | 0; //@line 14551
     HEAP32[$623 >> 2] = $6; //@line 14552
     $624 = $ReallocAsyncCtx9 + 16 | 0; //@line 14553
     HEAP32[$624 >> 2] = $8; //@line 14554
     $625 = $ReallocAsyncCtx9 + 20 | 0; //@line 14555
     HEAP32[$625 >> 2] = $133; //@line 14556
     $626 = $ReallocAsyncCtx9 + 24 | 0; //@line 14557
     HEAP32[$626 >> 2] = $10; //@line 14558
     $627 = $ReallocAsyncCtx9 + 28 | 0; //@line 14559
     HEAP32[$627 >> 2] = $12; //@line 14560
     $628 = $ReallocAsyncCtx9 + 32 | 0; //@line 14561
     HEAP32[$628 >> 2] = $14; //@line 14562
     $629 = $ReallocAsyncCtx9 + 36 | 0; //@line 14563
     HEAP32[$629 >> 2] = $22; //@line 14564
     $630 = $ReallocAsyncCtx9 + 40 | 0; //@line 14565
     HEAP32[$630 >> 2] = $24; //@line 14566
     $631 = $ReallocAsyncCtx9 + 44 | 0; //@line 14567
     HEAP32[$631 >> 2] = $238; //@line 14568
     $632 = $ReallocAsyncCtx9 + 48 | 0; //@line 14569
     HEAP32[$632 >> 2] = $26; //@line 14570
     $633 = $ReallocAsyncCtx9 + 52 | 0; //@line 14571
     HEAP32[$633 >> 2] = $28; //@line 14572
     $634 = $ReallocAsyncCtx9 + 56 | 0; //@line 14573
     HEAP32[$634 >> 2] = $30; //@line 14574
     $635 = $ReallocAsyncCtx9 + 60 | 0; //@line 14575
     HEAP32[$635 >> 2] = $32; //@line 14576
     $636 = $ReallocAsyncCtx9 + 64 | 0; //@line 14577
     HEAP32[$636 >> 2] = $34; //@line 14578
     $637 = $ReallocAsyncCtx9 + 68 | 0; //@line 14579
     HEAP32[$637 >> 2] = $36; //@line 14580
     $638 = $ReallocAsyncCtx9 + 72 | 0; //@line 14581
     HEAP32[$638 >> 2] = $38; //@line 14582
     $639 = $ReallocAsyncCtx9 + 76 | 0; //@line 14583
     HEAP32[$639 >> 2] = $AsyncRetVal; //@line 14584
     $640 = $ReallocAsyncCtx9 + 80 | 0; //@line 14585
     HEAP32[$640 >> 2] = $42; //@line 14586
     $641 = $ReallocAsyncCtx9 + 84 | 0; //@line 14587
     HEAP32[$641 >> 2] = $44; //@line 14588
     $642 = $ReallocAsyncCtx9 + 88 | 0; //@line 14589
     HEAP32[$642 >> 2] = $48; //@line 14590
     $643 = $ReallocAsyncCtx9 + 92 | 0; //@line 14591
     HEAP32[$643 >> 2] = $50; //@line 14592
     $644 = $ReallocAsyncCtx9 + 96 | 0; //@line 14593
     HEAP32[$644 >> 2] = $52; //@line 14594
     $645 = $ReallocAsyncCtx9 + 100 | 0; //@line 14595
     HEAP32[$645 >> 2] = $54; //@line 14596
     $646 = $ReallocAsyncCtx9 + 104 | 0; //@line 14597
     HEAP32[$646 >> 2] = $56; //@line 14598
     $647 = $ReallocAsyncCtx9 + 108 | 0; //@line 14599
     HEAP32[$647 >> 2] = $60; //@line 14600
     $648 = $ReallocAsyncCtx9 + 112 | 0; //@line 14601
     HEAP32[$648 >> 2] = $62; //@line 14602
     $649 = $ReallocAsyncCtx9 + 116 | 0; //@line 14603
     HEAP32[$649 >> 2] = $64; //@line 14604
     $650 = $ReallocAsyncCtx9 + 120 | 0; //@line 14605
     HEAP32[$650 >> 2] = $66; //@line 14606
     $651 = $ReallocAsyncCtx9 + 124 | 0; //@line 14607
     HEAP32[$651 >> 2] = $$0208$i; //@line 14608
     $652 = $ReallocAsyncCtx9 + 128 | 0; //@line 14609
     HEAP32[$652 >> 2] = $68; //@line 14610
     $653 = $ReallocAsyncCtx9 + 132 | 0; //@line 14611
     HEAP32[$653 >> 2] = $70; //@line 14612
     $654 = $ReallocAsyncCtx9 + 136 | 0; //@line 14613
     HEAP32[$654 >> 2] = $38; //@line 14614
     $655 = $ReallocAsyncCtx9 + 140 | 0; //@line 14615
     HEAP32[$655 >> 2] = $72; //@line 14616
     $656 = $ReallocAsyncCtx9 + 144 | 0; //@line 14617
     HEAP32[$656 >> 2] = $74; //@line 14618
     $657 = $ReallocAsyncCtx9 + 148 | 0; //@line 14619
     HEAP32[$657 >> 2] = $76; //@line 14620
     $658 = $ReallocAsyncCtx9 + 152 | 0; //@line 14621
     HEAP32[$658 >> 2] = $78; //@line 14622
     $659 = $ReallocAsyncCtx9 + 156 | 0; //@line 14623
     HEAP32[$659 >> 2] = $80; //@line 14624
     $660 = $ReallocAsyncCtx9 + 160 | 0; //@line 14625
     HEAP32[$660 >> 2] = $232; //@line 14626
     $661 = $ReallocAsyncCtx9 + 164 | 0; //@line 14627
     HEAP32[$661 >> 2] = $AsyncRetVal; //@line 14628
     $662 = $ReallocAsyncCtx9 + 168 | 0; //@line 14629
     HEAP32[$662 >> 2] = $82; //@line 14630
     $663 = $ReallocAsyncCtx9 + 172 | 0; //@line 14631
     HEAP32[$663 >> 2] = $84; //@line 14632
     $664 = $ReallocAsyncCtx9 + 176 | 0; //@line 14633
     HEAP32[$664 >> 2] = $86; //@line 14634
     $665 = $ReallocAsyncCtx9 + 180 | 0; //@line 14635
     HEAP32[$665 >> 2] = $88; //@line 14636
     $666 = $ReallocAsyncCtx9 + 184 | 0; //@line 14637
     HEAP32[$666 >> 2] = $233; //@line 14638
     $667 = $ReallocAsyncCtx9 + 188 | 0; //@line 14639
     HEAP32[$667 >> 2] = $94; //@line 14640
     $668 = $ReallocAsyncCtx9 + 192 | 0; //@line 14641
     HEAP32[$668 >> 2] = $96; //@line 14642
     $669 = $ReallocAsyncCtx9 + 196 | 0; //@line 14643
     HEAP32[$669 >> 2] = $98; //@line 14644
     $670 = $ReallocAsyncCtx9 + 200 | 0; //@line 14645
     HEAP32[$670 >> 2] = $234; //@line 14646
     $671 = $ReallocAsyncCtx9 + 204 | 0; //@line 14647
     HEAP32[$671 >> 2] = $100; //@line 14648
     $672 = $ReallocAsyncCtx9 + 208 | 0; //@line 14649
     HEAP32[$672 >> 2] = $102; //@line 14650
     $673 = $ReallocAsyncCtx9 + 212 | 0; //@line 14651
     HEAP32[$673 >> 2] = $104; //@line 14652
     $674 = $ReallocAsyncCtx9 + 216 | 0; //@line 14653
     HEAP32[$674 >> 2] = $106; //@line 14654
     $675 = $ReallocAsyncCtx9 + 220 | 0; //@line 14655
     HEAP32[$675 >> 2] = $108; //@line 14656
     $676 = $ReallocAsyncCtx9 + 224 | 0; //@line 14657
     HEAP32[$676 >> 2] = $110; //@line 14658
     $677 = $ReallocAsyncCtx9 + 228 | 0; //@line 14659
     HEAP32[$677 >> 2] = $114; //@line 14660
     $678 = $ReallocAsyncCtx9 + 232 | 0; //@line 14661
     HEAP32[$678 >> 2] = $116; //@line 14662
     $679 = $ReallocAsyncCtx9 + 236 | 0; //@line 14663
     HEAP32[$679 >> 2] = $118; //@line 14664
     $680 = $ReallocAsyncCtx9 + 240 | 0; //@line 14665
     HEAP32[$680 >> 2] = $120; //@line 14666
     $681 = $ReallocAsyncCtx9 + 244 | 0; //@line 14667
     HEAP32[$681 >> 2] = $124; //@line 14668
     $682 = $ReallocAsyncCtx9 + 248 | 0; //@line 14669
     HEAP32[$682 >> 2] = $126; //@line 14670
     $683 = $ReallocAsyncCtx9 + 252 | 0; //@line 14671
     HEAP32[$683 >> 2] = $236; //@line 14672
     $684 = $ReallocAsyncCtx9 + 256 | 0; //@line 14673
     HEAP32[$684 >> 2] = $128; //@line 14674
     $685 = $ReallocAsyncCtx9 + 260 | 0; //@line 14675
     HEAP32[$685 >> 2] = $236; //@line 14676
     $686 = $ReallocAsyncCtx9 + 264 | 0; //@line 14677
     HEAP32[$686 >> 2] = $130; //@line 14678
     sp = STACKTOP; //@line 14679
     return;
    }
   case 63:
    {
     _mbed_tracef(2, 3803, 4831, $70); //@line 14684
     break L6;
     break;
    }
   case 67:
    {
     $704 = HEAP32[$236 >> 2] | 0; //@line 14689
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 14692
     $707 = _sn_coap_parser_options_parse_multiple_options($2, $38, $279, $704 + 60 | 0, $704 + 8 | 0, 20, $$1202$i) | 0; //@line 14693
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 14696
      $708 = $ReallocAsyncCtx8 + 4 | 0; //@line 14697
      HEAP32[$708 >> 2] = $2; //@line 14698
      $709 = $ReallocAsyncCtx8 + 8 | 0; //@line 14699
      HEAP32[$709 >> 2] = $237; //@line 14700
      $710 = $ReallocAsyncCtx8 + 12 | 0; //@line 14701
      HEAP32[$710 >> 2] = $6; //@line 14702
      $711 = $ReallocAsyncCtx8 + 16 | 0; //@line 14703
      HEAP32[$711 >> 2] = $8; //@line 14704
      $712 = $ReallocAsyncCtx8 + 20 | 0; //@line 14705
      HEAP32[$712 >> 2] = $133; //@line 14706
      $713 = $ReallocAsyncCtx8 + 24 | 0; //@line 14707
      HEAP32[$713 >> 2] = $10; //@line 14708
      $714 = $ReallocAsyncCtx8 + 28 | 0; //@line 14709
      HEAP32[$714 >> 2] = $12; //@line 14710
      $715 = $ReallocAsyncCtx8 + 32 | 0; //@line 14711
      HEAP32[$715 >> 2] = $14; //@line 14712
      $716 = $ReallocAsyncCtx8 + 36 | 0; //@line 14713
      HEAP32[$716 >> 2] = $22; //@line 14714
      $717 = $ReallocAsyncCtx8 + 40 | 0; //@line 14715
      HEAP32[$717 >> 2] = $24; //@line 14716
      $718 = $ReallocAsyncCtx8 + 44 | 0; //@line 14717
      HEAP32[$718 >> 2] = $238; //@line 14718
      $719 = $ReallocAsyncCtx8 + 48 | 0; //@line 14719
      HEAP32[$719 >> 2] = $26; //@line 14720
      $720 = $ReallocAsyncCtx8 + 52 | 0; //@line 14721
      HEAP32[$720 >> 2] = $28; //@line 14722
      $721 = $ReallocAsyncCtx8 + 56 | 0; //@line 14723
      HEAP32[$721 >> 2] = $30; //@line 14724
      $722 = $ReallocAsyncCtx8 + 60 | 0; //@line 14725
      HEAP32[$722 >> 2] = $32; //@line 14726
      $723 = $ReallocAsyncCtx8 + 64 | 0; //@line 14727
      HEAP32[$723 >> 2] = $34; //@line 14728
      $724 = $ReallocAsyncCtx8 + 68 | 0; //@line 14729
      HEAP32[$724 >> 2] = $36; //@line 14730
      $725 = $ReallocAsyncCtx8 + 72 | 0; //@line 14731
      HEAP32[$725 >> 2] = $38; //@line 14732
      $726 = $ReallocAsyncCtx8 + 76 | 0; //@line 14733
      HEAP32[$726 >> 2] = $AsyncRetVal; //@line 14734
      $727 = $ReallocAsyncCtx8 + 80 | 0; //@line 14735
      HEAP32[$727 >> 2] = $42; //@line 14736
      $728 = $ReallocAsyncCtx8 + 84 | 0; //@line 14737
      HEAP32[$728 >> 2] = $44; //@line 14738
      $729 = $ReallocAsyncCtx8 + 88 | 0; //@line 14739
      HEAP32[$729 >> 2] = $48; //@line 14740
      $730 = $ReallocAsyncCtx8 + 92 | 0; //@line 14741
      HEAP32[$730 >> 2] = $50; //@line 14742
      $731 = $ReallocAsyncCtx8 + 96 | 0; //@line 14743
      HEAP32[$731 >> 2] = $52; //@line 14744
      $732 = $ReallocAsyncCtx8 + 100 | 0; //@line 14745
      HEAP32[$732 >> 2] = $54; //@line 14746
      $733 = $ReallocAsyncCtx8 + 104 | 0; //@line 14747
      HEAP32[$733 >> 2] = $56; //@line 14748
      $734 = $ReallocAsyncCtx8 + 108 | 0; //@line 14749
      HEAP32[$734 >> 2] = $60; //@line 14750
      $735 = $ReallocAsyncCtx8 + 112 | 0; //@line 14751
      HEAP32[$735 >> 2] = $62; //@line 14752
      $736 = $ReallocAsyncCtx8 + 116 | 0; //@line 14753
      HEAP32[$736 >> 2] = $64; //@line 14754
      $737 = $ReallocAsyncCtx8 + 120 | 0; //@line 14755
      HEAP32[$737 >> 2] = $66; //@line 14756
      $738 = $ReallocAsyncCtx8 + 124 | 0; //@line 14757
      HEAP32[$738 >> 2] = $$0208$i; //@line 14758
      $739 = $ReallocAsyncCtx8 + 128 | 0; //@line 14759
      HEAP32[$739 >> 2] = $68; //@line 14760
      $740 = $ReallocAsyncCtx8 + 132 | 0; //@line 14761
      HEAP32[$740 >> 2] = $70; //@line 14762
      $741 = $ReallocAsyncCtx8 + 136 | 0; //@line 14763
      HEAP32[$741 >> 2] = $38; //@line 14764
      $742 = $ReallocAsyncCtx8 + 140 | 0; //@line 14765
      HEAP32[$742 >> 2] = $72; //@line 14766
      $743 = $ReallocAsyncCtx8 + 144 | 0; //@line 14767
      HEAP32[$743 >> 2] = $74; //@line 14768
      $744 = $ReallocAsyncCtx8 + 148 | 0; //@line 14769
      HEAP32[$744 >> 2] = $76; //@line 14770
      $745 = $ReallocAsyncCtx8 + 152 | 0; //@line 14771
      HEAP32[$745 >> 2] = $78; //@line 14772
      $746 = $ReallocAsyncCtx8 + 156 | 0; //@line 14773
      HEAP32[$746 >> 2] = $80; //@line 14774
      $747 = $ReallocAsyncCtx8 + 160 | 0; //@line 14775
      HEAP32[$747 >> 2] = $232; //@line 14776
      $748 = $ReallocAsyncCtx8 + 164 | 0; //@line 14777
      HEAP32[$748 >> 2] = $AsyncRetVal; //@line 14778
      $749 = $ReallocAsyncCtx8 + 168 | 0; //@line 14779
      HEAP32[$749 >> 2] = $82; //@line 14780
      $750 = $ReallocAsyncCtx8 + 172 | 0; //@line 14781
      HEAP32[$750 >> 2] = $84; //@line 14782
      $751 = $ReallocAsyncCtx8 + 176 | 0; //@line 14783
      HEAP32[$751 >> 2] = $86; //@line 14784
      $752 = $ReallocAsyncCtx8 + 180 | 0; //@line 14785
      HEAP32[$752 >> 2] = $88; //@line 14786
      $753 = $ReallocAsyncCtx8 + 184 | 0; //@line 14787
      HEAP32[$753 >> 2] = $233; //@line 14788
      $754 = $ReallocAsyncCtx8 + 188 | 0; //@line 14789
      HEAP32[$754 >> 2] = $94; //@line 14790
      $755 = $ReallocAsyncCtx8 + 192 | 0; //@line 14791
      HEAP32[$755 >> 2] = $96; //@line 14792
      $756 = $ReallocAsyncCtx8 + 196 | 0; //@line 14793
      HEAP32[$756 >> 2] = $98; //@line 14794
      $757 = $ReallocAsyncCtx8 + 200 | 0; //@line 14795
      HEAP32[$757 >> 2] = $234; //@line 14796
      $758 = $ReallocAsyncCtx8 + 204 | 0; //@line 14797
      HEAP32[$758 >> 2] = $100; //@line 14798
      $759 = $ReallocAsyncCtx8 + 208 | 0; //@line 14799
      HEAP32[$759 >> 2] = $102; //@line 14800
      $760 = $ReallocAsyncCtx8 + 212 | 0; //@line 14801
      HEAP32[$760 >> 2] = $104; //@line 14802
      $761 = $ReallocAsyncCtx8 + 216 | 0; //@line 14803
      HEAP32[$761 >> 2] = $106; //@line 14804
      $762 = $ReallocAsyncCtx8 + 220 | 0; //@line 14805
      HEAP32[$762 >> 2] = $108; //@line 14806
      $763 = $ReallocAsyncCtx8 + 224 | 0; //@line 14807
      HEAP32[$763 >> 2] = $110; //@line 14808
      $764 = $ReallocAsyncCtx8 + 228 | 0; //@line 14809
      HEAP32[$764 >> 2] = $114; //@line 14810
      $765 = $ReallocAsyncCtx8 + 232 | 0; //@line 14811
      HEAP32[$765 >> 2] = $116; //@line 14812
      $766 = $ReallocAsyncCtx8 + 236 | 0; //@line 14813
      HEAP32[$766 >> 2] = $118; //@line 14814
      $767 = $ReallocAsyncCtx8 + 240 | 0; //@line 14815
      HEAP32[$767 >> 2] = $120; //@line 14816
      $768 = $ReallocAsyncCtx8 + 244 | 0; //@line 14817
      HEAP32[$768 >> 2] = $124; //@line 14818
      $769 = $ReallocAsyncCtx8 + 248 | 0; //@line 14819
      HEAP32[$769 >> 2] = $126; //@line 14820
      $770 = $ReallocAsyncCtx8 + 252 | 0; //@line 14821
      HEAP32[$770 >> 2] = $236; //@line 14822
      $771 = $ReallocAsyncCtx8 + 256 | 0; //@line 14823
      HEAP32[$771 >> 2] = $128; //@line 14824
      $772 = $ReallocAsyncCtx8 + 260 | 0; //@line 14825
      HEAP32[$772 >> 2] = $236; //@line 14826
      $773 = $ReallocAsyncCtx8 + 264 | 0; //@line 14827
      HEAP32[$773 >> 2] = $130; //@line 14828
      sp = STACKTOP; //@line 14829
      return;
     }
     HEAP8[___async_retval >> 0] = $707; //@line 14833
     ___async_unwind = 0; //@line 14834
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 14835
     $708 = $ReallocAsyncCtx8 + 4 | 0; //@line 14836
     HEAP32[$708 >> 2] = $2; //@line 14837
     $709 = $ReallocAsyncCtx8 + 8 | 0; //@line 14838
     HEAP32[$709 >> 2] = $237; //@line 14839
     $710 = $ReallocAsyncCtx8 + 12 | 0; //@line 14840
     HEAP32[$710 >> 2] = $6; //@line 14841
     $711 = $ReallocAsyncCtx8 + 16 | 0; //@line 14842
     HEAP32[$711 >> 2] = $8; //@line 14843
     $712 = $ReallocAsyncCtx8 + 20 | 0; //@line 14844
     HEAP32[$712 >> 2] = $133; //@line 14845
     $713 = $ReallocAsyncCtx8 + 24 | 0; //@line 14846
     HEAP32[$713 >> 2] = $10; //@line 14847
     $714 = $ReallocAsyncCtx8 + 28 | 0; //@line 14848
     HEAP32[$714 >> 2] = $12; //@line 14849
     $715 = $ReallocAsyncCtx8 + 32 | 0; //@line 14850
     HEAP32[$715 >> 2] = $14; //@line 14851
     $716 = $ReallocAsyncCtx8 + 36 | 0; //@line 14852
     HEAP32[$716 >> 2] = $22; //@line 14853
     $717 = $ReallocAsyncCtx8 + 40 | 0; //@line 14854
     HEAP32[$717 >> 2] = $24; //@line 14855
     $718 = $ReallocAsyncCtx8 + 44 | 0; //@line 14856
     HEAP32[$718 >> 2] = $238; //@line 14857
     $719 = $ReallocAsyncCtx8 + 48 | 0; //@line 14858
     HEAP32[$719 >> 2] = $26; //@line 14859
     $720 = $ReallocAsyncCtx8 + 52 | 0; //@line 14860
     HEAP32[$720 >> 2] = $28; //@line 14861
     $721 = $ReallocAsyncCtx8 + 56 | 0; //@line 14862
     HEAP32[$721 >> 2] = $30; //@line 14863
     $722 = $ReallocAsyncCtx8 + 60 | 0; //@line 14864
     HEAP32[$722 >> 2] = $32; //@line 14865
     $723 = $ReallocAsyncCtx8 + 64 | 0; //@line 14866
     HEAP32[$723 >> 2] = $34; //@line 14867
     $724 = $ReallocAsyncCtx8 + 68 | 0; //@line 14868
     HEAP32[$724 >> 2] = $36; //@line 14869
     $725 = $ReallocAsyncCtx8 + 72 | 0; //@line 14870
     HEAP32[$725 >> 2] = $38; //@line 14871
     $726 = $ReallocAsyncCtx8 + 76 | 0; //@line 14872
     HEAP32[$726 >> 2] = $AsyncRetVal; //@line 14873
     $727 = $ReallocAsyncCtx8 + 80 | 0; //@line 14874
     HEAP32[$727 >> 2] = $42; //@line 14875
     $728 = $ReallocAsyncCtx8 + 84 | 0; //@line 14876
     HEAP32[$728 >> 2] = $44; //@line 14877
     $729 = $ReallocAsyncCtx8 + 88 | 0; //@line 14878
     HEAP32[$729 >> 2] = $48; //@line 14879
     $730 = $ReallocAsyncCtx8 + 92 | 0; //@line 14880
     HEAP32[$730 >> 2] = $50; //@line 14881
     $731 = $ReallocAsyncCtx8 + 96 | 0; //@line 14882
     HEAP32[$731 >> 2] = $52; //@line 14883
     $732 = $ReallocAsyncCtx8 + 100 | 0; //@line 14884
     HEAP32[$732 >> 2] = $54; //@line 14885
     $733 = $ReallocAsyncCtx8 + 104 | 0; //@line 14886
     HEAP32[$733 >> 2] = $56; //@line 14887
     $734 = $ReallocAsyncCtx8 + 108 | 0; //@line 14888
     HEAP32[$734 >> 2] = $60; //@line 14889
     $735 = $ReallocAsyncCtx8 + 112 | 0; //@line 14890
     HEAP32[$735 >> 2] = $62; //@line 14891
     $736 = $ReallocAsyncCtx8 + 116 | 0; //@line 14892
     HEAP32[$736 >> 2] = $64; //@line 14893
     $737 = $ReallocAsyncCtx8 + 120 | 0; //@line 14894
     HEAP32[$737 >> 2] = $66; //@line 14895
     $738 = $ReallocAsyncCtx8 + 124 | 0; //@line 14896
     HEAP32[$738 >> 2] = $$0208$i; //@line 14897
     $739 = $ReallocAsyncCtx8 + 128 | 0; //@line 14898
     HEAP32[$739 >> 2] = $68; //@line 14899
     $740 = $ReallocAsyncCtx8 + 132 | 0; //@line 14900
     HEAP32[$740 >> 2] = $70; //@line 14901
     $741 = $ReallocAsyncCtx8 + 136 | 0; //@line 14902
     HEAP32[$741 >> 2] = $38; //@line 14903
     $742 = $ReallocAsyncCtx8 + 140 | 0; //@line 14904
     HEAP32[$742 >> 2] = $72; //@line 14905
     $743 = $ReallocAsyncCtx8 + 144 | 0; //@line 14906
     HEAP32[$743 >> 2] = $74; //@line 14907
     $744 = $ReallocAsyncCtx8 + 148 | 0; //@line 14908
     HEAP32[$744 >> 2] = $76; //@line 14909
     $745 = $ReallocAsyncCtx8 + 152 | 0; //@line 14910
     HEAP32[$745 >> 2] = $78; //@line 14911
     $746 = $ReallocAsyncCtx8 + 156 | 0; //@line 14912
     HEAP32[$746 >> 2] = $80; //@line 14913
     $747 = $ReallocAsyncCtx8 + 160 | 0; //@line 14914
     HEAP32[$747 >> 2] = $232; //@line 14915
     $748 = $ReallocAsyncCtx8 + 164 | 0; //@line 14916
     HEAP32[$748 >> 2] = $AsyncRetVal; //@line 14917
     $749 = $ReallocAsyncCtx8 + 168 | 0; //@line 14918
     HEAP32[$749 >> 2] = $82; //@line 14919
     $750 = $ReallocAsyncCtx8 + 172 | 0; //@line 14920
     HEAP32[$750 >> 2] = $84; //@line 14921
     $751 = $ReallocAsyncCtx8 + 176 | 0; //@line 14922
     HEAP32[$751 >> 2] = $86; //@line 14923
     $752 = $ReallocAsyncCtx8 + 180 | 0; //@line 14924
     HEAP32[$752 >> 2] = $88; //@line 14925
     $753 = $ReallocAsyncCtx8 + 184 | 0; //@line 14926
     HEAP32[$753 >> 2] = $233; //@line 14927
     $754 = $ReallocAsyncCtx8 + 188 | 0; //@line 14928
     HEAP32[$754 >> 2] = $94; //@line 14929
     $755 = $ReallocAsyncCtx8 + 192 | 0; //@line 14930
     HEAP32[$755 >> 2] = $96; //@line 14931
     $756 = $ReallocAsyncCtx8 + 196 | 0; //@line 14932
     HEAP32[$756 >> 2] = $98; //@line 14933
     $757 = $ReallocAsyncCtx8 + 200 | 0; //@line 14934
     HEAP32[$757 >> 2] = $234; //@line 14935
     $758 = $ReallocAsyncCtx8 + 204 | 0; //@line 14936
     HEAP32[$758 >> 2] = $100; //@line 14937
     $759 = $ReallocAsyncCtx8 + 208 | 0; //@line 14938
     HEAP32[$759 >> 2] = $102; //@line 14939
     $760 = $ReallocAsyncCtx8 + 212 | 0; //@line 14940
     HEAP32[$760 >> 2] = $104; //@line 14941
     $761 = $ReallocAsyncCtx8 + 216 | 0; //@line 14942
     HEAP32[$761 >> 2] = $106; //@line 14943
     $762 = $ReallocAsyncCtx8 + 220 | 0; //@line 14944
     HEAP32[$762 >> 2] = $108; //@line 14945
     $763 = $ReallocAsyncCtx8 + 224 | 0; //@line 14946
     HEAP32[$763 >> 2] = $110; //@line 14947
     $764 = $ReallocAsyncCtx8 + 228 | 0; //@line 14948
     HEAP32[$764 >> 2] = $114; //@line 14949
     $765 = $ReallocAsyncCtx8 + 232 | 0; //@line 14950
     HEAP32[$765 >> 2] = $116; //@line 14951
     $766 = $ReallocAsyncCtx8 + 236 | 0; //@line 14952
     HEAP32[$766 >> 2] = $118; //@line 14953
     $767 = $ReallocAsyncCtx8 + 240 | 0; //@line 14954
     HEAP32[$767 >> 2] = $120; //@line 14955
     $768 = $ReallocAsyncCtx8 + 244 | 0; //@line 14956
     HEAP32[$768 >> 2] = $124; //@line 14957
     $769 = $ReallocAsyncCtx8 + 248 | 0; //@line 14958
     HEAP32[$769 >> 2] = $126; //@line 14959
     $770 = $ReallocAsyncCtx8 + 252 | 0; //@line 14960
     HEAP32[$770 >> 2] = $236; //@line 14961
     $771 = $ReallocAsyncCtx8 + 256 | 0; //@line 14962
     HEAP32[$771 >> 2] = $128; //@line 14963
     $772 = $ReallocAsyncCtx8 + 260 | 0; //@line 14964
     HEAP32[$772 >> 2] = $236; //@line 14965
     $773 = $ReallocAsyncCtx8 + 264 | 0; //@line 14966
     HEAP32[$773 >> 2] = $130; //@line 14967
     sp = STACKTOP; //@line 14968
     return;
    }
   case 70:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 14973
     $775 = _sn_coap_parser_options_parse_multiple_options($2, $38, $279, $237, $238, 11, $$1202$i) | 0; //@line 14974
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 14977
      $776 = $ReallocAsyncCtx7 + 4 | 0; //@line 14978
      HEAP32[$776 >> 2] = $2; //@line 14979
      $777 = $ReallocAsyncCtx7 + 8 | 0; //@line 14980
      HEAP32[$777 >> 2] = $237; //@line 14981
      $778 = $ReallocAsyncCtx7 + 12 | 0; //@line 14982
      HEAP32[$778 >> 2] = $6; //@line 14983
      $779 = $ReallocAsyncCtx7 + 16 | 0; //@line 14984
      HEAP32[$779 >> 2] = $8; //@line 14985
      $780 = $ReallocAsyncCtx7 + 20 | 0; //@line 14986
      HEAP32[$780 >> 2] = $133; //@line 14987
      $781 = $ReallocAsyncCtx7 + 24 | 0; //@line 14988
      HEAP32[$781 >> 2] = $10; //@line 14989
      $782 = $ReallocAsyncCtx7 + 28 | 0; //@line 14990
      HEAP32[$782 >> 2] = $12; //@line 14991
      $783 = $ReallocAsyncCtx7 + 32 | 0; //@line 14992
      HEAP32[$783 >> 2] = $14; //@line 14993
      $784 = $ReallocAsyncCtx7 + 36 | 0; //@line 14994
      HEAP32[$784 >> 2] = $22; //@line 14995
      $785 = $ReallocAsyncCtx7 + 40 | 0; //@line 14996
      HEAP32[$785 >> 2] = $24; //@line 14997
      $786 = $ReallocAsyncCtx7 + 44 | 0; //@line 14998
      HEAP32[$786 >> 2] = $238; //@line 14999
      $787 = $ReallocAsyncCtx7 + 48 | 0; //@line 15000
      HEAP32[$787 >> 2] = $26; //@line 15001
      $788 = $ReallocAsyncCtx7 + 52 | 0; //@line 15002
      HEAP32[$788 >> 2] = $28; //@line 15003
      $789 = $ReallocAsyncCtx7 + 56 | 0; //@line 15004
      HEAP32[$789 >> 2] = $30; //@line 15005
      $790 = $ReallocAsyncCtx7 + 60 | 0; //@line 15006
      HEAP32[$790 >> 2] = $32; //@line 15007
      $791 = $ReallocAsyncCtx7 + 64 | 0; //@line 15008
      HEAP32[$791 >> 2] = $34; //@line 15009
      $792 = $ReallocAsyncCtx7 + 68 | 0; //@line 15010
      HEAP32[$792 >> 2] = $36; //@line 15011
      $793 = $ReallocAsyncCtx7 + 72 | 0; //@line 15012
      HEAP32[$793 >> 2] = $38; //@line 15013
      $794 = $ReallocAsyncCtx7 + 76 | 0; //@line 15014
      HEAP32[$794 >> 2] = $AsyncRetVal; //@line 15015
      $795 = $ReallocAsyncCtx7 + 80 | 0; //@line 15016
      HEAP32[$795 >> 2] = $42; //@line 15017
      $796 = $ReallocAsyncCtx7 + 84 | 0; //@line 15018
      HEAP32[$796 >> 2] = $44; //@line 15019
      $797 = $ReallocAsyncCtx7 + 88 | 0; //@line 15020
      HEAP32[$797 >> 2] = $48; //@line 15021
      $798 = $ReallocAsyncCtx7 + 92 | 0; //@line 15022
      HEAP32[$798 >> 2] = $50; //@line 15023
      $799 = $ReallocAsyncCtx7 + 96 | 0; //@line 15024
      HEAP32[$799 >> 2] = $52; //@line 15025
      $800 = $ReallocAsyncCtx7 + 100 | 0; //@line 15026
      HEAP32[$800 >> 2] = $54; //@line 15027
      $801 = $ReallocAsyncCtx7 + 104 | 0; //@line 15028
      HEAP32[$801 >> 2] = $56; //@line 15029
      $802 = $ReallocAsyncCtx7 + 108 | 0; //@line 15030
      HEAP32[$802 >> 2] = $60; //@line 15031
      $803 = $ReallocAsyncCtx7 + 112 | 0; //@line 15032
      HEAP32[$803 >> 2] = $62; //@line 15033
      $804 = $ReallocAsyncCtx7 + 116 | 0; //@line 15034
      HEAP32[$804 >> 2] = $64; //@line 15035
      $805 = $ReallocAsyncCtx7 + 120 | 0; //@line 15036
      HEAP32[$805 >> 2] = $66; //@line 15037
      $806 = $ReallocAsyncCtx7 + 124 | 0; //@line 15038
      HEAP32[$806 >> 2] = $$0208$i; //@line 15039
      $807 = $ReallocAsyncCtx7 + 128 | 0; //@line 15040
      HEAP32[$807 >> 2] = $68; //@line 15041
      $808 = $ReallocAsyncCtx7 + 132 | 0; //@line 15042
      HEAP32[$808 >> 2] = $70; //@line 15043
      $809 = $ReallocAsyncCtx7 + 136 | 0; //@line 15044
      HEAP32[$809 >> 2] = $38; //@line 15045
      $810 = $ReallocAsyncCtx7 + 140 | 0; //@line 15046
      HEAP32[$810 >> 2] = $72; //@line 15047
      $811 = $ReallocAsyncCtx7 + 144 | 0; //@line 15048
      HEAP32[$811 >> 2] = $74; //@line 15049
      $812 = $ReallocAsyncCtx7 + 148 | 0; //@line 15050
      HEAP32[$812 >> 2] = $76; //@line 15051
      $813 = $ReallocAsyncCtx7 + 152 | 0; //@line 15052
      HEAP32[$813 >> 2] = $78; //@line 15053
      $814 = $ReallocAsyncCtx7 + 156 | 0; //@line 15054
      HEAP32[$814 >> 2] = $80; //@line 15055
      $815 = $ReallocAsyncCtx7 + 160 | 0; //@line 15056
      HEAP32[$815 >> 2] = $232; //@line 15057
      $816 = $ReallocAsyncCtx7 + 164 | 0; //@line 15058
      HEAP32[$816 >> 2] = $AsyncRetVal; //@line 15059
      $817 = $ReallocAsyncCtx7 + 168 | 0; //@line 15060
      HEAP32[$817 >> 2] = $82; //@line 15061
      $818 = $ReallocAsyncCtx7 + 172 | 0; //@line 15062
      HEAP32[$818 >> 2] = $84; //@line 15063
      $819 = $ReallocAsyncCtx7 + 176 | 0; //@line 15064
      HEAP32[$819 >> 2] = $86; //@line 15065
      $820 = $ReallocAsyncCtx7 + 180 | 0; //@line 15066
      HEAP32[$820 >> 2] = $88; //@line 15067
      $821 = $ReallocAsyncCtx7 + 184 | 0; //@line 15068
      HEAP32[$821 >> 2] = $233; //@line 15069
      $822 = $ReallocAsyncCtx7 + 188 | 0; //@line 15070
      HEAP32[$822 >> 2] = $94; //@line 15071
      $823 = $ReallocAsyncCtx7 + 192 | 0; //@line 15072
      HEAP32[$823 >> 2] = $96; //@line 15073
      $824 = $ReallocAsyncCtx7 + 196 | 0; //@line 15074
      HEAP32[$824 >> 2] = $98; //@line 15075
      $825 = $ReallocAsyncCtx7 + 200 | 0; //@line 15076
      HEAP32[$825 >> 2] = $234; //@line 15077
      $826 = $ReallocAsyncCtx7 + 204 | 0; //@line 15078
      HEAP32[$826 >> 2] = $100; //@line 15079
      $827 = $ReallocAsyncCtx7 + 208 | 0; //@line 15080
      HEAP32[$827 >> 2] = $102; //@line 15081
      $828 = $ReallocAsyncCtx7 + 212 | 0; //@line 15082
      HEAP32[$828 >> 2] = $104; //@line 15083
      $829 = $ReallocAsyncCtx7 + 216 | 0; //@line 15084
      HEAP32[$829 >> 2] = $106; //@line 15085
      $830 = $ReallocAsyncCtx7 + 220 | 0; //@line 15086
      HEAP32[$830 >> 2] = $108; //@line 15087
      $831 = $ReallocAsyncCtx7 + 224 | 0; //@line 15088
      HEAP32[$831 >> 2] = $110; //@line 15089
      $832 = $ReallocAsyncCtx7 + 228 | 0; //@line 15090
      HEAP32[$832 >> 2] = $114; //@line 15091
      $833 = $ReallocAsyncCtx7 + 232 | 0; //@line 15092
      HEAP32[$833 >> 2] = $116; //@line 15093
      $834 = $ReallocAsyncCtx7 + 236 | 0; //@line 15094
      HEAP32[$834 >> 2] = $118; //@line 15095
      $835 = $ReallocAsyncCtx7 + 240 | 0; //@line 15096
      HEAP32[$835 >> 2] = $120; //@line 15097
      $836 = $ReallocAsyncCtx7 + 244 | 0; //@line 15098
      HEAP32[$836 >> 2] = $124; //@line 15099
      $837 = $ReallocAsyncCtx7 + 248 | 0; //@line 15100
      HEAP32[$837 >> 2] = $126; //@line 15101
      $838 = $ReallocAsyncCtx7 + 252 | 0; //@line 15102
      HEAP32[$838 >> 2] = $236; //@line 15103
      $839 = $ReallocAsyncCtx7 + 256 | 0; //@line 15104
      HEAP32[$839 >> 2] = $128; //@line 15105
      $840 = $ReallocAsyncCtx7 + 260 | 0; //@line 15106
      HEAP32[$840 >> 2] = $236; //@line 15107
      $841 = $ReallocAsyncCtx7 + 264 | 0; //@line 15108
      HEAP32[$841 >> 2] = $130; //@line 15109
      sp = STACKTOP; //@line 15110
      return;
     }
     HEAP8[___async_retval >> 0] = $775; //@line 15114
     ___async_unwind = 0; //@line 15115
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 15116
     $776 = $ReallocAsyncCtx7 + 4 | 0; //@line 15117
     HEAP32[$776 >> 2] = $2; //@line 15118
     $777 = $ReallocAsyncCtx7 + 8 | 0; //@line 15119
     HEAP32[$777 >> 2] = $237; //@line 15120
     $778 = $ReallocAsyncCtx7 + 12 | 0; //@line 15121
     HEAP32[$778 >> 2] = $6; //@line 15122
     $779 = $ReallocAsyncCtx7 + 16 | 0; //@line 15123
     HEAP32[$779 >> 2] = $8; //@line 15124
     $780 = $ReallocAsyncCtx7 + 20 | 0; //@line 15125
     HEAP32[$780 >> 2] = $133; //@line 15126
     $781 = $ReallocAsyncCtx7 + 24 | 0; //@line 15127
     HEAP32[$781 >> 2] = $10; //@line 15128
     $782 = $ReallocAsyncCtx7 + 28 | 0; //@line 15129
     HEAP32[$782 >> 2] = $12; //@line 15130
     $783 = $ReallocAsyncCtx7 + 32 | 0; //@line 15131
     HEAP32[$783 >> 2] = $14; //@line 15132
     $784 = $ReallocAsyncCtx7 + 36 | 0; //@line 15133
     HEAP32[$784 >> 2] = $22; //@line 15134
     $785 = $ReallocAsyncCtx7 + 40 | 0; //@line 15135
     HEAP32[$785 >> 2] = $24; //@line 15136
     $786 = $ReallocAsyncCtx7 + 44 | 0; //@line 15137
     HEAP32[$786 >> 2] = $238; //@line 15138
     $787 = $ReallocAsyncCtx7 + 48 | 0; //@line 15139
     HEAP32[$787 >> 2] = $26; //@line 15140
     $788 = $ReallocAsyncCtx7 + 52 | 0; //@line 15141
     HEAP32[$788 >> 2] = $28; //@line 15142
     $789 = $ReallocAsyncCtx7 + 56 | 0; //@line 15143
     HEAP32[$789 >> 2] = $30; //@line 15144
     $790 = $ReallocAsyncCtx7 + 60 | 0; //@line 15145
     HEAP32[$790 >> 2] = $32; //@line 15146
     $791 = $ReallocAsyncCtx7 + 64 | 0; //@line 15147
     HEAP32[$791 >> 2] = $34; //@line 15148
     $792 = $ReallocAsyncCtx7 + 68 | 0; //@line 15149
     HEAP32[$792 >> 2] = $36; //@line 15150
     $793 = $ReallocAsyncCtx7 + 72 | 0; //@line 15151
     HEAP32[$793 >> 2] = $38; //@line 15152
     $794 = $ReallocAsyncCtx7 + 76 | 0; //@line 15153
     HEAP32[$794 >> 2] = $AsyncRetVal; //@line 15154
     $795 = $ReallocAsyncCtx7 + 80 | 0; //@line 15155
     HEAP32[$795 >> 2] = $42; //@line 15156
     $796 = $ReallocAsyncCtx7 + 84 | 0; //@line 15157
     HEAP32[$796 >> 2] = $44; //@line 15158
     $797 = $ReallocAsyncCtx7 + 88 | 0; //@line 15159
     HEAP32[$797 >> 2] = $48; //@line 15160
     $798 = $ReallocAsyncCtx7 + 92 | 0; //@line 15161
     HEAP32[$798 >> 2] = $50; //@line 15162
     $799 = $ReallocAsyncCtx7 + 96 | 0; //@line 15163
     HEAP32[$799 >> 2] = $52; //@line 15164
     $800 = $ReallocAsyncCtx7 + 100 | 0; //@line 15165
     HEAP32[$800 >> 2] = $54; //@line 15166
     $801 = $ReallocAsyncCtx7 + 104 | 0; //@line 15167
     HEAP32[$801 >> 2] = $56; //@line 15168
     $802 = $ReallocAsyncCtx7 + 108 | 0; //@line 15169
     HEAP32[$802 >> 2] = $60; //@line 15170
     $803 = $ReallocAsyncCtx7 + 112 | 0; //@line 15171
     HEAP32[$803 >> 2] = $62; //@line 15172
     $804 = $ReallocAsyncCtx7 + 116 | 0; //@line 15173
     HEAP32[$804 >> 2] = $64; //@line 15174
     $805 = $ReallocAsyncCtx7 + 120 | 0; //@line 15175
     HEAP32[$805 >> 2] = $66; //@line 15176
     $806 = $ReallocAsyncCtx7 + 124 | 0; //@line 15177
     HEAP32[$806 >> 2] = $$0208$i; //@line 15178
     $807 = $ReallocAsyncCtx7 + 128 | 0; //@line 15179
     HEAP32[$807 >> 2] = $68; //@line 15180
     $808 = $ReallocAsyncCtx7 + 132 | 0; //@line 15181
     HEAP32[$808 >> 2] = $70; //@line 15182
     $809 = $ReallocAsyncCtx7 + 136 | 0; //@line 15183
     HEAP32[$809 >> 2] = $38; //@line 15184
     $810 = $ReallocAsyncCtx7 + 140 | 0; //@line 15185
     HEAP32[$810 >> 2] = $72; //@line 15186
     $811 = $ReallocAsyncCtx7 + 144 | 0; //@line 15187
     HEAP32[$811 >> 2] = $74; //@line 15188
     $812 = $ReallocAsyncCtx7 + 148 | 0; //@line 15189
     HEAP32[$812 >> 2] = $76; //@line 15190
     $813 = $ReallocAsyncCtx7 + 152 | 0; //@line 15191
     HEAP32[$813 >> 2] = $78; //@line 15192
     $814 = $ReallocAsyncCtx7 + 156 | 0; //@line 15193
     HEAP32[$814 >> 2] = $80; //@line 15194
     $815 = $ReallocAsyncCtx7 + 160 | 0; //@line 15195
     HEAP32[$815 >> 2] = $232; //@line 15196
     $816 = $ReallocAsyncCtx7 + 164 | 0; //@line 15197
     HEAP32[$816 >> 2] = $AsyncRetVal; //@line 15198
     $817 = $ReallocAsyncCtx7 + 168 | 0; //@line 15199
     HEAP32[$817 >> 2] = $82; //@line 15200
     $818 = $ReallocAsyncCtx7 + 172 | 0; //@line 15201
     HEAP32[$818 >> 2] = $84; //@line 15202
     $819 = $ReallocAsyncCtx7 + 176 | 0; //@line 15203
     HEAP32[$819 >> 2] = $86; //@line 15204
     $820 = $ReallocAsyncCtx7 + 180 | 0; //@line 15205
     HEAP32[$820 >> 2] = $88; //@line 15206
     $821 = $ReallocAsyncCtx7 + 184 | 0; //@line 15207
     HEAP32[$821 >> 2] = $233; //@line 15208
     $822 = $ReallocAsyncCtx7 + 188 | 0; //@line 15209
     HEAP32[$822 >> 2] = $94; //@line 15210
     $823 = $ReallocAsyncCtx7 + 192 | 0; //@line 15211
     HEAP32[$823 >> 2] = $96; //@line 15212
     $824 = $ReallocAsyncCtx7 + 196 | 0; //@line 15213
     HEAP32[$824 >> 2] = $98; //@line 15214
     $825 = $ReallocAsyncCtx7 + 200 | 0; //@line 15215
     HEAP32[$825 >> 2] = $234; //@line 15216
     $826 = $ReallocAsyncCtx7 + 204 | 0; //@line 15217
     HEAP32[$826 >> 2] = $100; //@line 15218
     $827 = $ReallocAsyncCtx7 + 208 | 0; //@line 15219
     HEAP32[$827 >> 2] = $102; //@line 15220
     $828 = $ReallocAsyncCtx7 + 212 | 0; //@line 15221
     HEAP32[$828 >> 2] = $104; //@line 15222
     $829 = $ReallocAsyncCtx7 + 216 | 0; //@line 15223
     HEAP32[$829 >> 2] = $106; //@line 15224
     $830 = $ReallocAsyncCtx7 + 220 | 0; //@line 15225
     HEAP32[$830 >> 2] = $108; //@line 15226
     $831 = $ReallocAsyncCtx7 + 224 | 0; //@line 15227
     HEAP32[$831 >> 2] = $110; //@line 15228
     $832 = $ReallocAsyncCtx7 + 228 | 0; //@line 15229
     HEAP32[$832 >> 2] = $114; //@line 15230
     $833 = $ReallocAsyncCtx7 + 232 | 0; //@line 15231
     HEAP32[$833 >> 2] = $116; //@line 15232
     $834 = $ReallocAsyncCtx7 + 236 | 0; //@line 15233
     HEAP32[$834 >> 2] = $118; //@line 15234
     $835 = $ReallocAsyncCtx7 + 240 | 0; //@line 15235
     HEAP32[$835 >> 2] = $120; //@line 15236
     $836 = $ReallocAsyncCtx7 + 244 | 0; //@line 15237
     HEAP32[$836 >> 2] = $124; //@line 15238
     $837 = $ReallocAsyncCtx7 + 248 | 0; //@line 15239
     HEAP32[$837 >> 2] = $126; //@line 15240
     $838 = $ReallocAsyncCtx7 + 252 | 0; //@line 15241
     HEAP32[$838 >> 2] = $236; //@line 15242
     $839 = $ReallocAsyncCtx7 + 256 | 0; //@line 15243
     HEAP32[$839 >> 2] = $128; //@line 15244
     $840 = $ReallocAsyncCtx7 + 260 | 0; //@line 15245
     HEAP32[$840 >> 2] = $236; //@line 15246
     $841 = $ReallocAsyncCtx7 + 264 | 0; //@line 15247
     HEAP32[$841 >> 2] = $130; //@line 15248
     sp = STACKTOP; //@line 15249
     return;
    }
   case 75:
    {
     _mbed_tracef(2, 3803, 5026, $52); //@line 15254
     break L6;
     break;
    }
   case 79:
    {
     $859 = HEAP32[$236 >> 2] | 0; //@line 15259
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 15262
     $862 = _sn_coap_parser_options_parse_multiple_options($2, $38, $279, $859 + 64 | 0, $859 + 10 | 0, 15, $$1202$i) | 0; //@line 15263
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 15266
      $863 = $ReallocAsyncCtx6 + 4 | 0; //@line 15267
      HEAP32[$863 >> 2] = $2; //@line 15268
      $864 = $ReallocAsyncCtx6 + 8 | 0; //@line 15269
      HEAP32[$864 >> 2] = $237; //@line 15270
      $865 = $ReallocAsyncCtx6 + 12 | 0; //@line 15271
      HEAP32[$865 >> 2] = $6; //@line 15272
      $866 = $ReallocAsyncCtx6 + 16 | 0; //@line 15273
      HEAP32[$866 >> 2] = $8; //@line 15274
      $867 = $ReallocAsyncCtx6 + 20 | 0; //@line 15275
      HEAP32[$867 >> 2] = $133; //@line 15276
      $868 = $ReallocAsyncCtx6 + 24 | 0; //@line 15277
      HEAP32[$868 >> 2] = $10; //@line 15278
      $869 = $ReallocAsyncCtx6 + 28 | 0; //@line 15279
      HEAP32[$869 >> 2] = $12; //@line 15280
      $870 = $ReallocAsyncCtx6 + 32 | 0; //@line 15281
      HEAP32[$870 >> 2] = $14; //@line 15282
      $871 = $ReallocAsyncCtx6 + 36 | 0; //@line 15283
      HEAP32[$871 >> 2] = $22; //@line 15284
      $872 = $ReallocAsyncCtx6 + 40 | 0; //@line 15285
      HEAP32[$872 >> 2] = $24; //@line 15286
      $873 = $ReallocAsyncCtx6 + 44 | 0; //@line 15287
      HEAP32[$873 >> 2] = $238; //@line 15288
      $874 = $ReallocAsyncCtx6 + 48 | 0; //@line 15289
      HEAP32[$874 >> 2] = $26; //@line 15290
      $875 = $ReallocAsyncCtx6 + 52 | 0; //@line 15291
      HEAP32[$875 >> 2] = $28; //@line 15292
      $876 = $ReallocAsyncCtx6 + 56 | 0; //@line 15293
      HEAP32[$876 >> 2] = $30; //@line 15294
      $877 = $ReallocAsyncCtx6 + 60 | 0; //@line 15295
      HEAP32[$877 >> 2] = $32; //@line 15296
      $878 = $ReallocAsyncCtx6 + 64 | 0; //@line 15297
      HEAP32[$878 >> 2] = $34; //@line 15298
      $879 = $ReallocAsyncCtx6 + 68 | 0; //@line 15299
      HEAP32[$879 >> 2] = $36; //@line 15300
      $880 = $ReallocAsyncCtx6 + 72 | 0; //@line 15301
      HEAP32[$880 >> 2] = $38; //@line 15302
      $881 = $ReallocAsyncCtx6 + 76 | 0; //@line 15303
      HEAP32[$881 >> 2] = $AsyncRetVal; //@line 15304
      $882 = $ReallocAsyncCtx6 + 80 | 0; //@line 15305
      HEAP32[$882 >> 2] = $42; //@line 15306
      $883 = $ReallocAsyncCtx6 + 84 | 0; //@line 15307
      HEAP32[$883 >> 2] = $44; //@line 15308
      $884 = $ReallocAsyncCtx6 + 88 | 0; //@line 15309
      HEAP32[$884 >> 2] = $48; //@line 15310
      $885 = $ReallocAsyncCtx6 + 92 | 0; //@line 15311
      HEAP32[$885 >> 2] = $50; //@line 15312
      $886 = $ReallocAsyncCtx6 + 96 | 0; //@line 15313
      HEAP32[$886 >> 2] = $52; //@line 15314
      $887 = $ReallocAsyncCtx6 + 100 | 0; //@line 15315
      HEAP32[$887 >> 2] = $54; //@line 15316
      $888 = $ReallocAsyncCtx6 + 104 | 0; //@line 15317
      HEAP32[$888 >> 2] = $56; //@line 15318
      $889 = $ReallocAsyncCtx6 + 108 | 0; //@line 15319
      HEAP32[$889 >> 2] = $60; //@line 15320
      $890 = $ReallocAsyncCtx6 + 112 | 0; //@line 15321
      HEAP32[$890 >> 2] = $62; //@line 15322
      $891 = $ReallocAsyncCtx6 + 116 | 0; //@line 15323
      HEAP32[$891 >> 2] = $64; //@line 15324
      $892 = $ReallocAsyncCtx6 + 120 | 0; //@line 15325
      HEAP32[$892 >> 2] = $66; //@line 15326
      $893 = $ReallocAsyncCtx6 + 124 | 0; //@line 15327
      HEAP32[$893 >> 2] = $$0208$i; //@line 15328
      $894 = $ReallocAsyncCtx6 + 128 | 0; //@line 15329
      HEAP32[$894 >> 2] = $68; //@line 15330
      $895 = $ReallocAsyncCtx6 + 132 | 0; //@line 15331
      HEAP32[$895 >> 2] = $70; //@line 15332
      $896 = $ReallocAsyncCtx6 + 136 | 0; //@line 15333
      HEAP32[$896 >> 2] = $38; //@line 15334
      $897 = $ReallocAsyncCtx6 + 140 | 0; //@line 15335
      HEAP32[$897 >> 2] = $72; //@line 15336
      $898 = $ReallocAsyncCtx6 + 144 | 0; //@line 15337
      HEAP32[$898 >> 2] = $74; //@line 15338
      $899 = $ReallocAsyncCtx6 + 148 | 0; //@line 15339
      HEAP32[$899 >> 2] = $76; //@line 15340
      $900 = $ReallocAsyncCtx6 + 152 | 0; //@line 15341
      HEAP32[$900 >> 2] = $78; //@line 15342
      $901 = $ReallocAsyncCtx6 + 156 | 0; //@line 15343
      HEAP32[$901 >> 2] = $80; //@line 15344
      $902 = $ReallocAsyncCtx6 + 160 | 0; //@line 15345
      HEAP32[$902 >> 2] = $232; //@line 15346
      $903 = $ReallocAsyncCtx6 + 164 | 0; //@line 15347
      HEAP32[$903 >> 2] = $AsyncRetVal; //@line 15348
      $904 = $ReallocAsyncCtx6 + 168 | 0; //@line 15349
      HEAP32[$904 >> 2] = $82; //@line 15350
      $905 = $ReallocAsyncCtx6 + 172 | 0; //@line 15351
      HEAP32[$905 >> 2] = $84; //@line 15352
      $906 = $ReallocAsyncCtx6 + 176 | 0; //@line 15353
      HEAP32[$906 >> 2] = $86; //@line 15354
      $907 = $ReallocAsyncCtx6 + 180 | 0; //@line 15355
      HEAP32[$907 >> 2] = $88; //@line 15356
      $908 = $ReallocAsyncCtx6 + 184 | 0; //@line 15357
      HEAP32[$908 >> 2] = $233; //@line 15358
      $909 = $ReallocAsyncCtx6 + 188 | 0; //@line 15359
      HEAP32[$909 >> 2] = $94; //@line 15360
      $910 = $ReallocAsyncCtx6 + 192 | 0; //@line 15361
      HEAP32[$910 >> 2] = $96; //@line 15362
      $911 = $ReallocAsyncCtx6 + 196 | 0; //@line 15363
      HEAP32[$911 >> 2] = $98; //@line 15364
      $912 = $ReallocAsyncCtx6 + 200 | 0; //@line 15365
      HEAP32[$912 >> 2] = $234; //@line 15366
      $913 = $ReallocAsyncCtx6 + 204 | 0; //@line 15367
      HEAP32[$913 >> 2] = $100; //@line 15368
      $914 = $ReallocAsyncCtx6 + 208 | 0; //@line 15369
      HEAP32[$914 >> 2] = $102; //@line 15370
      $915 = $ReallocAsyncCtx6 + 212 | 0; //@line 15371
      HEAP32[$915 >> 2] = $104; //@line 15372
      $916 = $ReallocAsyncCtx6 + 216 | 0; //@line 15373
      HEAP32[$916 >> 2] = $106; //@line 15374
      $917 = $ReallocAsyncCtx6 + 220 | 0; //@line 15375
      HEAP32[$917 >> 2] = $108; //@line 15376
      $918 = $ReallocAsyncCtx6 + 224 | 0; //@line 15377
      HEAP32[$918 >> 2] = $110; //@line 15378
      $919 = $ReallocAsyncCtx6 + 228 | 0; //@line 15379
      HEAP32[$919 >> 2] = $114; //@line 15380
      $920 = $ReallocAsyncCtx6 + 232 | 0; //@line 15381
      HEAP32[$920 >> 2] = $116; //@line 15382
      $921 = $ReallocAsyncCtx6 + 236 | 0; //@line 15383
      HEAP32[$921 >> 2] = $118; //@line 15384
      $922 = $ReallocAsyncCtx6 + 240 | 0; //@line 15385
      HEAP32[$922 >> 2] = $120; //@line 15386
      $923 = $ReallocAsyncCtx6 + 244 | 0; //@line 15387
      HEAP32[$923 >> 2] = $124; //@line 15388
      $924 = $ReallocAsyncCtx6 + 248 | 0; //@line 15389
      HEAP32[$924 >> 2] = $126; //@line 15390
      $925 = $ReallocAsyncCtx6 + 252 | 0; //@line 15391
      HEAP32[$925 >> 2] = $236; //@line 15392
      $926 = $ReallocAsyncCtx6 + 256 | 0; //@line 15393
      HEAP32[$926 >> 2] = $128; //@line 15394
      $927 = $ReallocAsyncCtx6 + 260 | 0; //@line 15395
      HEAP32[$927 >> 2] = $236; //@line 15396
      $928 = $ReallocAsyncCtx6 + 264 | 0; //@line 15397
      HEAP32[$928 >> 2] = $130; //@line 15398
      sp = STACKTOP; //@line 15399
      return;
     }
     HEAP8[___async_retval >> 0] = $862; //@line 15403
     ___async_unwind = 0; //@line 15404
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 15405
     $863 = $ReallocAsyncCtx6 + 4 | 0; //@line 15406
     HEAP32[$863 >> 2] = $2; //@line 15407
     $864 = $ReallocAsyncCtx6 + 8 | 0; //@line 15408
     HEAP32[$864 >> 2] = $237; //@line 15409
     $865 = $ReallocAsyncCtx6 + 12 | 0; //@line 15410
     HEAP32[$865 >> 2] = $6; //@line 15411
     $866 = $ReallocAsyncCtx6 + 16 | 0; //@line 15412
     HEAP32[$866 >> 2] = $8; //@line 15413
     $867 = $ReallocAsyncCtx6 + 20 | 0; //@line 15414
     HEAP32[$867 >> 2] = $133; //@line 15415
     $868 = $ReallocAsyncCtx6 + 24 | 0; //@line 15416
     HEAP32[$868 >> 2] = $10; //@line 15417
     $869 = $ReallocAsyncCtx6 + 28 | 0; //@line 15418
     HEAP32[$869 >> 2] = $12; //@line 15419
     $870 = $ReallocAsyncCtx6 + 32 | 0; //@line 15420
     HEAP32[$870 >> 2] = $14; //@line 15421
     $871 = $ReallocAsyncCtx6 + 36 | 0; //@line 15422
     HEAP32[$871 >> 2] = $22; //@line 15423
     $872 = $ReallocAsyncCtx6 + 40 | 0; //@line 15424
     HEAP32[$872 >> 2] = $24; //@line 15425
     $873 = $ReallocAsyncCtx6 + 44 | 0; //@line 15426
     HEAP32[$873 >> 2] = $238; //@line 15427
     $874 = $ReallocAsyncCtx6 + 48 | 0; //@line 15428
     HEAP32[$874 >> 2] = $26; //@line 15429
     $875 = $ReallocAsyncCtx6 + 52 | 0; //@line 15430
     HEAP32[$875 >> 2] = $28; //@line 15431
     $876 = $ReallocAsyncCtx6 + 56 | 0; //@line 15432
     HEAP32[$876 >> 2] = $30; //@line 15433
     $877 = $ReallocAsyncCtx6 + 60 | 0; //@line 15434
     HEAP32[$877 >> 2] = $32; //@line 15435
     $878 = $ReallocAsyncCtx6 + 64 | 0; //@line 15436
     HEAP32[$878 >> 2] = $34; //@line 15437
     $879 = $ReallocAsyncCtx6 + 68 | 0; //@line 15438
     HEAP32[$879 >> 2] = $36; //@line 15439
     $880 = $ReallocAsyncCtx6 + 72 | 0; //@line 15440
     HEAP32[$880 >> 2] = $38; //@line 15441
     $881 = $ReallocAsyncCtx6 + 76 | 0; //@line 15442
     HEAP32[$881 >> 2] = $AsyncRetVal; //@line 15443
     $882 = $ReallocAsyncCtx6 + 80 | 0; //@line 15444
     HEAP32[$882 >> 2] = $42; //@line 15445
     $883 = $ReallocAsyncCtx6 + 84 | 0; //@line 15446
     HEAP32[$883 >> 2] = $44; //@line 15447
     $884 = $ReallocAsyncCtx6 + 88 | 0; //@line 15448
     HEAP32[$884 >> 2] = $48; //@line 15449
     $885 = $ReallocAsyncCtx6 + 92 | 0; //@line 15450
     HEAP32[$885 >> 2] = $50; //@line 15451
     $886 = $ReallocAsyncCtx6 + 96 | 0; //@line 15452
     HEAP32[$886 >> 2] = $52; //@line 15453
     $887 = $ReallocAsyncCtx6 + 100 | 0; //@line 15454
     HEAP32[$887 >> 2] = $54; //@line 15455
     $888 = $ReallocAsyncCtx6 + 104 | 0; //@line 15456
     HEAP32[$888 >> 2] = $56; //@line 15457
     $889 = $ReallocAsyncCtx6 + 108 | 0; //@line 15458
     HEAP32[$889 >> 2] = $60; //@line 15459
     $890 = $ReallocAsyncCtx6 + 112 | 0; //@line 15460
     HEAP32[$890 >> 2] = $62; //@line 15461
     $891 = $ReallocAsyncCtx6 + 116 | 0; //@line 15462
     HEAP32[$891 >> 2] = $64; //@line 15463
     $892 = $ReallocAsyncCtx6 + 120 | 0; //@line 15464
     HEAP32[$892 >> 2] = $66; //@line 15465
     $893 = $ReallocAsyncCtx6 + 124 | 0; //@line 15466
     HEAP32[$893 >> 2] = $$0208$i; //@line 15467
     $894 = $ReallocAsyncCtx6 + 128 | 0; //@line 15468
     HEAP32[$894 >> 2] = $68; //@line 15469
     $895 = $ReallocAsyncCtx6 + 132 | 0; //@line 15470
     HEAP32[$895 >> 2] = $70; //@line 15471
     $896 = $ReallocAsyncCtx6 + 136 | 0; //@line 15472
     HEAP32[$896 >> 2] = $38; //@line 15473
     $897 = $ReallocAsyncCtx6 + 140 | 0; //@line 15474
     HEAP32[$897 >> 2] = $72; //@line 15475
     $898 = $ReallocAsyncCtx6 + 144 | 0; //@line 15476
     HEAP32[$898 >> 2] = $74; //@line 15477
     $899 = $ReallocAsyncCtx6 + 148 | 0; //@line 15478
     HEAP32[$899 >> 2] = $76; //@line 15479
     $900 = $ReallocAsyncCtx6 + 152 | 0; //@line 15480
     HEAP32[$900 >> 2] = $78; //@line 15481
     $901 = $ReallocAsyncCtx6 + 156 | 0; //@line 15482
     HEAP32[$901 >> 2] = $80; //@line 15483
     $902 = $ReallocAsyncCtx6 + 160 | 0; //@line 15484
     HEAP32[$902 >> 2] = $232; //@line 15485
     $903 = $ReallocAsyncCtx6 + 164 | 0; //@line 15486
     HEAP32[$903 >> 2] = $AsyncRetVal; //@line 15487
     $904 = $ReallocAsyncCtx6 + 168 | 0; //@line 15488
     HEAP32[$904 >> 2] = $82; //@line 15489
     $905 = $ReallocAsyncCtx6 + 172 | 0; //@line 15490
     HEAP32[$905 >> 2] = $84; //@line 15491
     $906 = $ReallocAsyncCtx6 + 176 | 0; //@line 15492
     HEAP32[$906 >> 2] = $86; //@line 15493
     $907 = $ReallocAsyncCtx6 + 180 | 0; //@line 15494
     HEAP32[$907 >> 2] = $88; //@line 15495
     $908 = $ReallocAsyncCtx6 + 184 | 0; //@line 15496
     HEAP32[$908 >> 2] = $233; //@line 15497
     $909 = $ReallocAsyncCtx6 + 188 | 0; //@line 15498
     HEAP32[$909 >> 2] = $94; //@line 15499
     $910 = $ReallocAsyncCtx6 + 192 | 0; //@line 15500
     HEAP32[$910 >> 2] = $96; //@line 15501
     $911 = $ReallocAsyncCtx6 + 196 | 0; //@line 15502
     HEAP32[$911 >> 2] = $98; //@line 15503
     $912 = $ReallocAsyncCtx6 + 200 | 0; //@line 15504
     HEAP32[$912 >> 2] = $234; //@line 15505
     $913 = $ReallocAsyncCtx6 + 204 | 0; //@line 15506
     HEAP32[$913 >> 2] = $100; //@line 15507
     $914 = $ReallocAsyncCtx6 + 208 | 0; //@line 15508
     HEAP32[$914 >> 2] = $102; //@line 15509
     $915 = $ReallocAsyncCtx6 + 212 | 0; //@line 15510
     HEAP32[$915 >> 2] = $104; //@line 15511
     $916 = $ReallocAsyncCtx6 + 216 | 0; //@line 15512
     HEAP32[$916 >> 2] = $106; //@line 15513
     $917 = $ReallocAsyncCtx6 + 220 | 0; //@line 15514
     HEAP32[$917 >> 2] = $108; //@line 15515
     $918 = $ReallocAsyncCtx6 + 224 | 0; //@line 15516
     HEAP32[$918 >> 2] = $110; //@line 15517
     $919 = $ReallocAsyncCtx6 + 228 | 0; //@line 15518
     HEAP32[$919 >> 2] = $114; //@line 15519
     $920 = $ReallocAsyncCtx6 + 232 | 0; //@line 15520
     HEAP32[$920 >> 2] = $116; //@line 15521
     $921 = $ReallocAsyncCtx6 + 236 | 0; //@line 15522
     HEAP32[$921 >> 2] = $118; //@line 15523
     $922 = $ReallocAsyncCtx6 + 240 | 0; //@line 15524
     HEAP32[$922 >> 2] = $120; //@line 15525
     $923 = $ReallocAsyncCtx6 + 244 | 0; //@line 15526
     HEAP32[$923 >> 2] = $124; //@line 15527
     $924 = $ReallocAsyncCtx6 + 248 | 0; //@line 15528
     HEAP32[$924 >> 2] = $126; //@line 15529
     $925 = $ReallocAsyncCtx6 + 252 | 0; //@line 15530
     HEAP32[$925 >> 2] = $236; //@line 15531
     $926 = $ReallocAsyncCtx6 + 256 | 0; //@line 15532
     HEAP32[$926 >> 2] = $128; //@line 15533
     $927 = $ReallocAsyncCtx6 + 260 | 0; //@line 15534
     HEAP32[$927 >> 2] = $236; //@line 15535
     $928 = $ReallocAsyncCtx6 + 264 | 0; //@line 15536
     HEAP32[$928 >> 2] = $130; //@line 15537
     sp = STACKTOP; //@line 15538
     return;
    }
   case 84:
    {
     _mbed_tracef(2, 3803, 5152, $50); //@line 15543
     break L6;
     break;
    }
   case 90:
    {
     _mbed_tracef(2, 3803, 5213, $24); //@line 15548
     break L6;
     break;
    }
   case 96:
    {
     _mbed_tracef(2, 3803, 5274, $74); //@line 15553
     break L6;
     break;
    }
   case 102:
    {
     _mbed_tracef(2, 3803, 5335, $66); //@line 15558
     break L6;
     break;
    }
   case 108:
    {
     _mbed_tracef(2, 3803, 5395, $120); //@line 15563
     break L6;
     break;
    }
   case 112:
    {
     _mbed_tracef(2, 3803, 5455, $76); //@line 15568
     break L6;
     break;
    }
   case 115:
    {
     if (($241 - $233 | 0) >= ($232 | 0)) {
      $$0 = $AsyncRetVal; //@line 15577
      $1041 = ___async_retval; //@line 15578
      HEAP32[$1041 >> 2] = $$0; //@line 15579
      return;
     }
     if ((HEAP8[$241 >> 0] | 0) == -1) {
      $1031 = $241 + 1 | 0; //@line 15585
      HEAP32[$38 >> 2] = $1031; //@line 15586
      $1032 = $1031; //@line 15587
      $1034 = $233 - $1032 + $232 | 0; //@line 15589
      HEAP16[$AsyncRetVal + 24 >> 1] = $1034; //@line 15592
      if ($1034 & 65535 | 0) {
       HEAP32[$AsyncRetVal + 36 >> 2] = $1032; //@line 15597
       $$0 = $AsyncRetVal; //@line 15598
       $1041 = ___async_retval; //@line 15599
       HEAP32[$1041 >> 2] = $$0; //@line 15600
       return;
      }
     } else {
      _mbed_tracef(2, 3803, 5502, $54); //@line 15604
     }
     HEAP32[$AsyncRetVal + 4 >> 2] = 1; //@line 15607
     $$0 = $AsyncRetVal; //@line 15608
     $1041 = ___async_retval; //@line 15609
     HEAP32[$1041 >> 2] = $$0; //@line 15610
     return;
    }
   }
  } else {
   if (($158 & 255) <= 8) {
    $161 = $AsyncRetVal + 28 | 0; //@line 15618
    if (!(HEAP32[$161 >> 2] | 0)) {
     $164 = HEAP32[$128 >> 2] | 0; //@line 15622
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(256) | 0; //@line 15624
     $166 = FUNCTION_TABLE_ii[$164 & 31]($158 & 255) | 0; //@line 15625
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 60; //@line 15628
      $167 = $ReallocAsyncCtx2 + 4 | 0; //@line 15629
      HEAP32[$167 >> 2] = $2; //@line 15630
      $168 = $ReallocAsyncCtx2 + 8 | 0; //@line 15631
      HEAP32[$168 >> 2] = $6; //@line 15632
      $169 = $ReallocAsyncCtx2 + 12 | 0; //@line 15633
      HEAP32[$169 >> 2] = $8; //@line 15634
      $170 = $ReallocAsyncCtx2 + 16 | 0; //@line 15635
      HEAP32[$170 >> 2] = $133; //@line 15636
      $171 = $ReallocAsyncCtx2 + 20 | 0; //@line 15637
      HEAP32[$171 >> 2] = $10; //@line 15638
      $172 = $ReallocAsyncCtx2 + 24 | 0; //@line 15639
      HEAP32[$172 >> 2] = $12; //@line 15640
      $173 = $ReallocAsyncCtx2 + 28 | 0; //@line 15641
      HEAP32[$173 >> 2] = $14; //@line 15642
      $174 = $ReallocAsyncCtx2 + 32 | 0; //@line 15643
      HEAP32[$174 >> 2] = $16; //@line 15644
      $175 = $ReallocAsyncCtx2 + 36 | 0; //@line 15645
      HEAP16[$175 >> 1] = $20; //@line 15646
      $176 = $ReallocAsyncCtx2 + 40 | 0; //@line 15647
      HEAP32[$176 >> 2] = $22; //@line 15648
      $177 = $ReallocAsyncCtx2 + 44 | 0; //@line 15649
      HEAP32[$177 >> 2] = $24; //@line 15650
      $178 = $ReallocAsyncCtx2 + 48 | 0; //@line 15651
      HEAP32[$178 >> 2] = $26; //@line 15652
      $179 = $ReallocAsyncCtx2 + 52 | 0; //@line 15653
      HEAP32[$179 >> 2] = $28; //@line 15654
      $180 = $ReallocAsyncCtx2 + 56 | 0; //@line 15655
      HEAP32[$180 >> 2] = $30; //@line 15656
      $181 = $ReallocAsyncCtx2 + 60 | 0; //@line 15657
      HEAP32[$181 >> 2] = $161; //@line 15658
      $182 = $ReallocAsyncCtx2 + 64 | 0; //@line 15659
      HEAP32[$182 >> 2] = $32; //@line 15660
      $183 = $ReallocAsyncCtx2 + 68 | 0; //@line 15661
      HEAP32[$183 >> 2] = $34; //@line 15662
      $184 = $ReallocAsyncCtx2 + 72 | 0; //@line 15663
      HEAP32[$184 >> 2] = $36; //@line 15664
      $185 = $ReallocAsyncCtx2 + 76 | 0; //@line 15665
      HEAP32[$185 >> 2] = $38; //@line 15666
      $186 = $ReallocAsyncCtx2 + 80 | 0; //@line 15667
      HEAP32[$186 >> 2] = $AsyncRetVal; //@line 15668
      $187 = $ReallocAsyncCtx2 + 84 | 0; //@line 15669
      HEAP32[$187 >> 2] = $42; //@line 15670
      $188 = $ReallocAsyncCtx2 + 88 | 0; //@line 15671
      HEAP32[$188 >> 2] = $44; //@line 15672
      $189 = $ReallocAsyncCtx2 + 92 | 0; //@line 15673
      HEAP32[$189 >> 2] = $48; //@line 15674
      $190 = $ReallocAsyncCtx2 + 96 | 0; //@line 15675
      HEAP32[$190 >> 2] = $50; //@line 15676
      $191 = $ReallocAsyncCtx2 + 100 | 0; //@line 15677
      HEAP32[$191 >> 2] = $52; //@line 15678
      $192 = $ReallocAsyncCtx2 + 104 | 0; //@line 15679
      HEAP32[$192 >> 2] = $54; //@line 15680
      $193 = $ReallocAsyncCtx2 + 108 | 0; //@line 15681
      HEAP32[$193 >> 2] = $56; //@line 15682
      $194 = $ReallocAsyncCtx2 + 112 | 0; //@line 15683
      HEAP32[$194 >> 2] = $58; //@line 15684
      $195 = $ReallocAsyncCtx2 + 116 | 0; //@line 15685
      HEAP32[$195 >> 2] = $60; //@line 15686
      $196 = $ReallocAsyncCtx2 + 120 | 0; //@line 15687
      HEAP32[$196 >> 2] = $62; //@line 15688
      $197 = $ReallocAsyncCtx2 + 124 | 0; //@line 15689
      HEAP32[$197 >> 2] = $64; //@line 15690
      $198 = $ReallocAsyncCtx2 + 128 | 0; //@line 15691
      HEAP32[$198 >> 2] = $66; //@line 15692
      $199 = $ReallocAsyncCtx2 + 132 | 0; //@line 15693
      HEAP32[$199 >> 2] = $68; //@line 15694
      $200 = $ReallocAsyncCtx2 + 136 | 0; //@line 15695
      HEAP32[$200 >> 2] = $70; //@line 15696
      $201 = $ReallocAsyncCtx2 + 140 | 0; //@line 15697
      HEAP32[$201 >> 2] = $72; //@line 15698
      $202 = $ReallocAsyncCtx2 + 144 | 0; //@line 15699
      HEAP32[$202 >> 2] = $74; //@line 15700
      $203 = $ReallocAsyncCtx2 + 148 | 0; //@line 15701
      HEAP32[$203 >> 2] = $76; //@line 15702
      $204 = $ReallocAsyncCtx2 + 152 | 0; //@line 15703
      HEAP32[$204 >> 2] = $78; //@line 15704
      $205 = $ReallocAsyncCtx2 + 156 | 0; //@line 15705
      HEAP32[$205 >> 2] = $80; //@line 15706
      $206 = $ReallocAsyncCtx2 + 160 | 0; //@line 15707
      HEAP32[$206 >> 2] = $AsyncRetVal; //@line 15708
      $207 = $ReallocAsyncCtx2 + 164 | 0; //@line 15709
      HEAP32[$207 >> 2] = $82; //@line 15710
      $208 = $ReallocAsyncCtx2 + 168 | 0; //@line 15711
      HEAP32[$208 >> 2] = $84; //@line 15712
      $209 = $ReallocAsyncCtx2 + 172 | 0; //@line 15713
      HEAP32[$209 >> 2] = $86; //@line 15714
      $210 = $ReallocAsyncCtx2 + 176 | 0; //@line 15715
      HEAP32[$210 >> 2] = $88; //@line 15716
      $211 = $ReallocAsyncCtx2 + 180 | 0; //@line 15717
      HEAP32[$211 >> 2] = $92; //@line 15718
      $212 = $ReallocAsyncCtx2 + 184 | 0; //@line 15719
      HEAP32[$212 >> 2] = $94; //@line 15720
      $213 = $ReallocAsyncCtx2 + 188 | 0; //@line 15721
      HEAP32[$213 >> 2] = $96; //@line 15722
      $214 = $ReallocAsyncCtx2 + 192 | 0; //@line 15723
      HEAP32[$214 >> 2] = $98; //@line 15724
      $215 = $ReallocAsyncCtx2 + 196 | 0; //@line 15725
      HEAP32[$215 >> 2] = $156; //@line 15726
      $216 = $ReallocAsyncCtx2 + 200 | 0; //@line 15727
      HEAP32[$216 >> 2] = $100; //@line 15728
      $217 = $ReallocAsyncCtx2 + 204 | 0; //@line 15729
      HEAP32[$217 >> 2] = $102; //@line 15730
      $218 = $ReallocAsyncCtx2 + 208 | 0; //@line 15731
      HEAP32[$218 >> 2] = $104; //@line 15732
      $219 = $ReallocAsyncCtx2 + 212 | 0; //@line 15733
      HEAP32[$219 >> 2] = $106; //@line 15734
      $220 = $ReallocAsyncCtx2 + 216 | 0; //@line 15735
      HEAP32[$220 >> 2] = $108; //@line 15736
      $221 = $ReallocAsyncCtx2 + 220 | 0; //@line 15737
      HEAP32[$221 >> 2] = $110; //@line 15738
      $222 = $ReallocAsyncCtx2 + 224 | 0; //@line 15739
      HEAP32[$222 >> 2] = $114; //@line 15740
      $223 = $ReallocAsyncCtx2 + 228 | 0; //@line 15741
      HEAP32[$223 >> 2] = $116; //@line 15742
      $224 = $ReallocAsyncCtx2 + 232 | 0; //@line 15743
      HEAP32[$224 >> 2] = $118; //@line 15744
      $225 = $ReallocAsyncCtx2 + 236 | 0; //@line 15745
      HEAP32[$225 >> 2] = $120; //@line 15746
      $226 = $ReallocAsyncCtx2 + 240 | 0; //@line 15747
      HEAP32[$226 >> 2] = $124; //@line 15748
      $227 = $ReallocAsyncCtx2 + 244 | 0; //@line 15749
      HEAP32[$227 >> 2] = $126; //@line 15750
      $228 = $ReallocAsyncCtx2 + 248 | 0; //@line 15751
      HEAP32[$228 >> 2] = $128; //@line 15752
      $229 = $ReallocAsyncCtx2 + 252 | 0; //@line 15753
      HEAP32[$229 >> 2] = $130; //@line 15754
      sp = STACKTOP; //@line 15755
      return;
     }
     HEAP32[___async_retval >> 2] = $166; //@line 15759
     ___async_unwind = 0; //@line 15760
     HEAP32[$ReallocAsyncCtx2 >> 2] = 60; //@line 15761
     $167 = $ReallocAsyncCtx2 + 4 | 0; //@line 15762
     HEAP32[$167 >> 2] = $2; //@line 15763
     $168 = $ReallocAsyncCtx2 + 8 | 0; //@line 15764
     HEAP32[$168 >> 2] = $6; //@line 15765
     $169 = $ReallocAsyncCtx2 + 12 | 0; //@line 15766
     HEAP32[$169 >> 2] = $8; //@line 15767
     $170 = $ReallocAsyncCtx2 + 16 | 0; //@line 15768
     HEAP32[$170 >> 2] = $133; //@line 15769
     $171 = $ReallocAsyncCtx2 + 20 | 0; //@line 15770
     HEAP32[$171 >> 2] = $10; //@line 15771
     $172 = $ReallocAsyncCtx2 + 24 | 0; //@line 15772
     HEAP32[$172 >> 2] = $12; //@line 15773
     $173 = $ReallocAsyncCtx2 + 28 | 0; //@line 15774
     HEAP32[$173 >> 2] = $14; //@line 15775
     $174 = $ReallocAsyncCtx2 + 32 | 0; //@line 15776
     HEAP32[$174 >> 2] = $16; //@line 15777
     $175 = $ReallocAsyncCtx2 + 36 | 0; //@line 15778
     HEAP16[$175 >> 1] = $20; //@line 15779
     $176 = $ReallocAsyncCtx2 + 40 | 0; //@line 15780
     HEAP32[$176 >> 2] = $22; //@line 15781
     $177 = $ReallocAsyncCtx2 + 44 | 0; //@line 15782
     HEAP32[$177 >> 2] = $24; //@line 15783
     $178 = $ReallocAsyncCtx2 + 48 | 0; //@line 15784
     HEAP32[$178 >> 2] = $26; //@line 15785
     $179 = $ReallocAsyncCtx2 + 52 | 0; //@line 15786
     HEAP32[$179 >> 2] = $28; //@line 15787
     $180 = $ReallocAsyncCtx2 + 56 | 0; //@line 15788
     HEAP32[$180 >> 2] = $30; //@line 15789
     $181 = $ReallocAsyncCtx2 + 60 | 0; //@line 15790
     HEAP32[$181 >> 2] = $161; //@line 15791
     $182 = $ReallocAsyncCtx2 + 64 | 0; //@line 15792
     HEAP32[$182 >> 2] = $32; //@line 15793
     $183 = $ReallocAsyncCtx2 + 68 | 0; //@line 15794
     HEAP32[$183 >> 2] = $34; //@line 15795
     $184 = $ReallocAsyncCtx2 + 72 | 0; //@line 15796
     HEAP32[$184 >> 2] = $36; //@line 15797
     $185 = $ReallocAsyncCtx2 + 76 | 0; //@line 15798
     HEAP32[$185 >> 2] = $38; //@line 15799
     $186 = $ReallocAsyncCtx2 + 80 | 0; //@line 15800
     HEAP32[$186 >> 2] = $AsyncRetVal; //@line 15801
     $187 = $ReallocAsyncCtx2 + 84 | 0; //@line 15802
     HEAP32[$187 >> 2] = $42; //@line 15803
     $188 = $ReallocAsyncCtx2 + 88 | 0; //@line 15804
     HEAP32[$188 >> 2] = $44; //@line 15805
     $189 = $ReallocAsyncCtx2 + 92 | 0; //@line 15806
     HEAP32[$189 >> 2] = $48; //@line 15807
     $190 = $ReallocAsyncCtx2 + 96 | 0; //@line 15808
     HEAP32[$190 >> 2] = $50; //@line 15809
     $191 = $ReallocAsyncCtx2 + 100 | 0; //@line 15810
     HEAP32[$191 >> 2] = $52; //@line 15811
     $192 = $ReallocAsyncCtx2 + 104 | 0; //@line 15812
     HEAP32[$192 >> 2] = $54; //@line 15813
     $193 = $ReallocAsyncCtx2 + 108 | 0; //@line 15814
     HEAP32[$193 >> 2] = $56; //@line 15815
     $194 = $ReallocAsyncCtx2 + 112 | 0; //@line 15816
     HEAP32[$194 >> 2] = $58; //@line 15817
     $195 = $ReallocAsyncCtx2 + 116 | 0; //@line 15818
     HEAP32[$195 >> 2] = $60; //@line 15819
     $196 = $ReallocAsyncCtx2 + 120 | 0; //@line 15820
     HEAP32[$196 >> 2] = $62; //@line 15821
     $197 = $ReallocAsyncCtx2 + 124 | 0; //@line 15822
     HEAP32[$197 >> 2] = $64; //@line 15823
     $198 = $ReallocAsyncCtx2 + 128 | 0; //@line 15824
     HEAP32[$198 >> 2] = $66; //@line 15825
     $199 = $ReallocAsyncCtx2 + 132 | 0; //@line 15826
     HEAP32[$199 >> 2] = $68; //@line 15827
     $200 = $ReallocAsyncCtx2 + 136 | 0; //@line 15828
     HEAP32[$200 >> 2] = $70; //@line 15829
     $201 = $ReallocAsyncCtx2 + 140 | 0; //@line 15830
     HEAP32[$201 >> 2] = $72; //@line 15831
     $202 = $ReallocAsyncCtx2 + 144 | 0; //@line 15832
     HEAP32[$202 >> 2] = $74; //@line 15833
     $203 = $ReallocAsyncCtx2 + 148 | 0; //@line 15834
     HEAP32[$203 >> 2] = $76; //@line 15835
     $204 = $ReallocAsyncCtx2 + 152 | 0; //@line 15836
     HEAP32[$204 >> 2] = $78; //@line 15837
     $205 = $ReallocAsyncCtx2 + 156 | 0; //@line 15838
     HEAP32[$205 >> 2] = $80; //@line 15839
     $206 = $ReallocAsyncCtx2 + 160 | 0; //@line 15840
     HEAP32[$206 >> 2] = $AsyncRetVal; //@line 15841
     $207 = $ReallocAsyncCtx2 + 164 | 0; //@line 15842
     HEAP32[$207 >> 2] = $82; //@line 15843
     $208 = $ReallocAsyncCtx2 + 168 | 0; //@line 15844
     HEAP32[$208 >> 2] = $84; //@line 15845
     $209 = $ReallocAsyncCtx2 + 172 | 0; //@line 15846
     HEAP32[$209 >> 2] = $86; //@line 15847
     $210 = $ReallocAsyncCtx2 + 176 | 0; //@line 15848
     HEAP32[$210 >> 2] = $88; //@line 15849
     $211 = $ReallocAsyncCtx2 + 180 | 0; //@line 15850
     HEAP32[$211 >> 2] = $92; //@line 15851
     $212 = $ReallocAsyncCtx2 + 184 | 0; //@line 15852
     HEAP32[$212 >> 2] = $94; //@line 15853
     $213 = $ReallocAsyncCtx2 + 188 | 0; //@line 15854
     HEAP32[$213 >> 2] = $96; //@line 15855
     $214 = $ReallocAsyncCtx2 + 192 | 0; //@line 15856
     HEAP32[$214 >> 2] = $98; //@line 15857
     $215 = $ReallocAsyncCtx2 + 196 | 0; //@line 15858
     HEAP32[$215 >> 2] = $156; //@line 15859
     $216 = $ReallocAsyncCtx2 + 200 | 0; //@line 15860
     HEAP32[$216 >> 2] = $100; //@line 15861
     $217 = $ReallocAsyncCtx2 + 204 | 0; //@line 15862
     HEAP32[$217 >> 2] = $102; //@line 15863
     $218 = $ReallocAsyncCtx2 + 208 | 0; //@line 15864
     HEAP32[$218 >> 2] = $104; //@line 15865
     $219 = $ReallocAsyncCtx2 + 212 | 0; //@line 15866
     HEAP32[$219 >> 2] = $106; //@line 15867
     $220 = $ReallocAsyncCtx2 + 216 | 0; //@line 15868
     HEAP32[$220 >> 2] = $108; //@line 15869
     $221 = $ReallocAsyncCtx2 + 220 | 0; //@line 15870
     HEAP32[$221 >> 2] = $110; //@line 15871
     $222 = $ReallocAsyncCtx2 + 224 | 0; //@line 15872
     HEAP32[$222 >> 2] = $114; //@line 15873
     $223 = $ReallocAsyncCtx2 + 228 | 0; //@line 15874
     HEAP32[$223 >> 2] = $116; //@line 15875
     $224 = $ReallocAsyncCtx2 + 232 | 0; //@line 15876
     HEAP32[$224 >> 2] = $118; //@line 15877
     $225 = $ReallocAsyncCtx2 + 236 | 0; //@line 15878
     HEAP32[$225 >> 2] = $120; //@line 15879
     $226 = $ReallocAsyncCtx2 + 240 | 0; //@line 15880
     HEAP32[$226 >> 2] = $124; //@line 15881
     $227 = $ReallocAsyncCtx2 + 244 | 0; //@line 15882
     HEAP32[$227 >> 2] = $126; //@line 15883
     $228 = $ReallocAsyncCtx2 + 248 | 0; //@line 15884
     HEAP32[$228 >> 2] = $128; //@line 15885
     $229 = $ReallocAsyncCtx2 + 252 | 0; //@line 15886
     HEAP32[$229 >> 2] = $130; //@line 15887
     sp = STACKTOP; //@line 15888
     return;
    }
   }
   _mbed_tracef(2, 3803, 3961, $46); //@line 15892
  }
 } while (0);
 HEAP32[$AsyncRetVal + 4 >> 2] = 1; //@line 15896
 $$0 = $AsyncRetVal; //@line 15897
 $1041 = ___async_retval; //@line 15898
 HEAP32[$1041 >> 2] = $$0; //@line 15899
 return;
}
function _sn_coap_parser__async_cb_24($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$i$reg2mem$0 = 0, $$1202$i$reg2mem$1 = 0, $$1202$i$reg2mem$2 = 0, $$1202$in$i = 0, $$1202$in$i$reg2mem$0 = 0, $$1202$in$i$reg2mem$1 = 0, $$reg2mem$0 = 0, $$reg2mem$1 = 0, $$reg2mem62$0 = 0, $$reg2mem62$1 = 0, $$reg2mem62$2 = 0, $$reg2mem62$3 = 0, $$reg2mem73$0 = 0, $$reg2mem73$1 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $147 = 0, $150 = 0, $16 = 0, $164 = 0, $167 = 0, $169 = 0, $18 = 0, $181 = 0, $184 = 0, $185 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $264 = 0, $266 = 0, $272 = 0, $273 = 0, $278 = 0, $28 = 0, $281 = 0, $284 = 0, $285 = 0, $290 = 0, $293 = 0, $297 = 0, $30 = 0, $300 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $377 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $447 = 0, $450 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $527 = 0, $528 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $602 = 0, $605 = 0, $606 = 0, $611 = 0, $614 = 0, $616 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $757 = 0, $76 = 0, $760 = 0, $761 = 0, $766 = 0, $769 = 0, $771 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $844 = 0, $847 = 0, $848 = 0, $853 = 0, $856 = 0, $86 = 0, $860 = 0, $863 = 0, $864 = 0, $869 = 0, $872 = 0, $876 = 0, $879 = 0, $88 = 0, $880 = 0, $885 = 0, $888 = 0, $892 = 0, $893 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $907 = 0, $913 = 0, $914 = 0, $919 = 0, $92 = 0, $920 = 0, $925 = 0, $928 = 0, $932 = 0, $933 = 0, $94 = 0, $941 = 0, $942 = 0, $944 = 0, $951 = 0, $952 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc$i$reg2mem$0 = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $290$looptemp = 0, $611$looptemp = 0, $766$looptemp = 0, $853$looptemp = 0, $869$looptemp = 0, $885$looptemp = 0, $904$looptemp = 0, $925$looptemp = 0, $278$looptemp = 0;
 sp = STACKTOP; //@line 19183
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19185
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19187
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19189
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19191
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19193
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19195
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19197
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19199
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19201
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19203
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19205
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19207
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19209
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19211
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19213
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19215
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19217
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19219
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19221
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19223
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19225
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19227
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 19229
 $48 = HEAP16[$0 + 96 >> 1] | 0; //@line 19231
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 19233
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 19235
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 19237
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 19239
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 19241
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 19243
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 19245
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 19247
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 19249
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 19251
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 19253
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 19255
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 19257
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 19259
 $78 = HEAP16[$0 + 156 >> 1] | 0; //@line 19261
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 19263
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 19265
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 19267
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 19269
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 19271
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 19273
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 19275
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 19277
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 19279
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 19281
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 19283
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 19285
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 19287
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 19289
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 19291
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 19293
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 19295
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 19297
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 19299
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 19301
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 19303
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 19305
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 19307
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 19309
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 19311
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 19313
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 19315
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 19317
 $136 = HEAP16[$0 + 272 >> 1] | 0; //@line 19319
 $138 = HEAP32[$0 + 276 >> 2] | 0; //@line 19321
 $140 = HEAP32[$0 + 280 >> 2] | 0; //@line 19323
 $142 = HEAP32[$0 + 284 >> 2] | 0; //@line 19325
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19327
 HEAP32[$140 >> 2] = $AsyncRetVal; //@line 19328
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3803, 3852, $46); //@line 19332
   label = 22; //@line 19333
  } else {
   dest = $AsyncRetVal; //@line 19335
   stop = dest + 68 | 0; //@line 19335
   do {
    HEAP32[dest >> 2] = 0; //@line 19335
    dest = dest + 4 | 0; //@line 19335
   } while ((dest | 0) < (stop | 0));
   $264 = HEAP32[$134 >> 2] | 0; //@line 19336
   HEAP32[$264 + 16 >> 2] = 0; //@line 19338
   $266 = $264 + 28 | 0; //@line 19339
   HEAP32[$264 + 12 >> 2] = -1; //@line 19341
   HEAP32[$266 >> 2] = -1; //@line 19342
   HEAP32[$266 + 4 >> 2] = -1; //@line 19342
   HEAP32[$266 + 8 >> 2] = -1; //@line 19342
   HEAP32[$266 + 12 >> 2] = -1; //@line 19342
   if (!$264) {
    label = 22; //@line 19345
   } else {
    $$1202$i$reg2mem$0 = $48; //@line 19347
    $$1202$in$i$reg2mem$0 = $42; //@line 19347
    $$reg2mem$0 = $18; //@line 19347
    $$reg2mem62$0 = $68; //@line 19347
    $$reg2mem73$0 = $78; //@line 19347
    $trunc$i$reg2mem$0 = $136; //@line 19347
    L5 : while (1) {
     switch ($trunc$i$reg2mem$0 << 16 >> 16) {
     case 35:
      {
       label = 35; //@line 19351
       break L5;
       break;
      }
     case 4:
      {
       label = 41; //@line 19356
       break L5;
       break;
      }
     case 3:
      {
       label = 44; //@line 19361
       break L5;
       break;
      }
     case 8:
      {
       label = 50; //@line 19366
       break L5;
       break;
      }
     case 20:
      {
       label = 61; //@line 19371
       break L5;
       break;
      }
     case 11:
      {
       $$1202$i$reg2mem$2 = $$1202$i$reg2mem$0; //@line 19376
       $$reg2mem62$2 = $$reg2mem62$0; //@line 19376
       $$reg2mem73$1 = $$reg2mem73$0; //@line 19376
       label = 64; //@line 19377
       break L5;
       break;
      }
     case 15:
      {
       label = 73; //@line 19382
       break L5;
       break;
      }
     case 12:
      {
       $$1202$i$reg2mem$1 = $$1202$i$reg2mem$0; //@line 19387
       $$1202$in$i$reg2mem$1 = $$1202$in$i$reg2mem$0; //@line 19387
       $$reg2mem$1 = $$reg2mem$0; //@line 19387
       $$reg2mem62$1 = $$reg2mem62$0; //@line 19387
       label = 24; //@line 19388
       break;
      }
     case 14:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        label = 31; //@line 19394
        break L5;
       }
       $284 = $$reg2mem$0 + 1 | 0; //@line 19397
       HEAP32[$38 >> 2] = $284; //@line 19398
       $285 = $$1202$in$i$reg2mem$0 & 255; //@line 19399
       if (!($285 << 24 >> 24)) {
        $$0$lcssa$i223$i = 0; //@line 19402
       } else {
        $$045$i221$i = $285; //@line 19404
        $$06$i220$i = 0; //@line 19404
        $290 = $284; //@line 19404
        while (1) {
         $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 19406
         $290$looptemp = $290;
         $290 = $290 + 1 | 0; //@line 19408
         HEAP32[$38 >> 2] = $290; //@line 19409
         $293 = $$06$i220$i << 8 | HEAPU8[$290$looptemp >> 0]; //@line 19412
         if (!($$045$i221$i << 24 >> 24)) {
          $$0$lcssa$i223$i = $293; //@line 19415
          break;
         } else {
          $$06$i220$i = $293; //@line 19418
         }
        }
       }
       HEAP32[(HEAP32[$134 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 19424
       $$reg2mem62$3 = $$reg2mem62$0; //@line 19425
       break;
      }
     case 7:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        label = 57; //@line 19431
        break L5;
       }
       $602 = (HEAP32[$134 >> 2] | 0) + 28 | 0; //@line 19435
       if ((HEAP32[$602 >> 2] | 0) != -1) {
        label = 57; //@line 19439
        break L5;
       }
       $605 = $$reg2mem$0 + 1 | 0; //@line 19442
       HEAP32[$38 >> 2] = $605; //@line 19443
       $606 = $$1202$in$i$reg2mem$0 & 255; //@line 19444
       if (!($606 << 24 >> 24)) {
        $$0$lcssa$i265$i = 0; //@line 19447
       } else {
        $$045$i263$i = $606; //@line 19449
        $$06$i262$i = 0; //@line 19449
        $611 = $605; //@line 19449
        while (1) {
         $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 19451
         $611$looptemp = $611;
         $611 = $611 + 1 | 0; //@line 19453
         HEAP32[$38 >> 2] = $611; //@line 19454
         $614 = $$06$i262$i << 8 | HEAPU8[$611$looptemp >> 0]; //@line 19457
         if (!($$045$i263$i << 24 >> 24)) {
          $$0$lcssa$i265$i = $614; //@line 19460
          break;
         } else {
          $$06$i262$i = $614; //@line 19463
         }
        }
       }
       HEAP32[$602 >> 2] = $$0$lcssa$i265$i; //@line 19467
       $$reg2mem62$3 = $$reg2mem62$0; //@line 19468
       break;
      }
     case 6:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        label = 69; //@line 19474
        break L5;
       }
       $757 = (HEAP32[$134 >> 2] | 0) + 32 | 0; //@line 19478
       if ((HEAP32[$757 >> 2] | 0) != -1) {
        label = 69; //@line 19482
        break L5;
       }
       $760 = $$reg2mem$0 + 1 | 0; //@line 19485
       HEAP32[$38 >> 2] = $760; //@line 19486
       $761 = $$1202$in$i$reg2mem$0 & 255; //@line 19487
       if (!($761 << 24 >> 24)) {
        $$0$lcssa$i272$i = 0; //@line 19490
       } else {
        $$045$i270$i = $761; //@line 19492
        $$06$i269$i = 0; //@line 19492
        $766 = $760; //@line 19492
        while (1) {
         $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 19494
         $766$looptemp = $766;
         $766 = $766 + 1 | 0; //@line 19496
         HEAP32[$38 >> 2] = $766; //@line 19497
         $769 = $$06$i269$i << 8 | HEAPU8[$766$looptemp >> 0]; //@line 19500
         if (!($$045$i270$i << 24 >> 24)) {
          $$0$lcssa$i272$i = $769; //@line 19503
          break;
         } else {
          $$06$i269$i = $769; //@line 19506
         }
        }
       }
       HEAP32[$757 >> 2] = $$0$lcssa$i272$i; //@line 19510
       $$reg2mem62$3 = $$reg2mem62$0; //@line 19511
       break;
      }
     case 23:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 3) {
        label = 78; //@line 19517
        break L5;
       }
       $844 = (HEAP32[$134 >> 2] | 0) + 40 | 0; //@line 19521
       if ((HEAP32[$844 >> 2] | 0) != -1) {
        label = 78; //@line 19525
        break L5;
       }
       $847 = $$reg2mem$0 + 1 | 0; //@line 19528
       HEAP32[$38 >> 2] = $847; //@line 19529
       $848 = $$1202$in$i$reg2mem$0 & 255; //@line 19530
       if (!($848 << 24 >> 24)) {
        $$0$lcssa$i258$i = 0; //@line 19533
       } else {
        $$045$i256$i = $848; //@line 19535
        $$06$i255$i = 0; //@line 19535
        $853 = $847; //@line 19535
        while (1) {
         $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 19537
         $853$looptemp = $853;
         $853 = $853 + 1 | 0; //@line 19539
         HEAP32[$38 >> 2] = $853; //@line 19540
         $856 = $$06$i255$i << 8 | HEAPU8[$853$looptemp >> 0]; //@line 19543
         if (!($$045$i256$i << 24 >> 24)) {
          $$0$lcssa$i258$i = $856; //@line 19546
          break;
         } else {
          $$06$i255$i = $856; //@line 19549
         }
        }
       }
       HEAP32[$844 >> 2] = $$0$lcssa$i258$i; //@line 19553
       $$reg2mem62$3 = $$reg2mem62$0; //@line 19554
       break;
      }
     case 27:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 3) {
        label = 84; //@line 19560
        break L5;
       }
       $860 = (HEAP32[$134 >> 2] | 0) + 36 | 0; //@line 19564
       if ((HEAP32[$860 >> 2] | 0) != -1) {
        label = 84; //@line 19568
        break L5;
       }
       $863 = $$reg2mem$0 + 1 | 0; //@line 19571
       HEAP32[$38 >> 2] = $863; //@line 19572
       $864 = $$1202$in$i$reg2mem$0 & 255; //@line 19573
       if (!($864 << 24 >> 24)) {
        $$0$lcssa$i251$i = 0; //@line 19576
       } else {
        $$045$i249$i = $864; //@line 19578
        $$06$i248$i = 0; //@line 19578
        $869 = $863; //@line 19578
        while (1) {
         $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 19580
         $869$looptemp = $869;
         $869 = $869 + 1 | 0; //@line 19582
         HEAP32[$38 >> 2] = $869; //@line 19583
         $872 = $$06$i248$i << 8 | HEAPU8[$869$looptemp >> 0]; //@line 19586
         if (!($$045$i249$i << 24 >> 24)) {
          $$0$lcssa$i251$i = $872; //@line 19589
          break;
         } else {
          $$06$i248$i = $872; //@line 19592
         }
        }
       }
       HEAP32[$860 >> 2] = $$0$lcssa$i251$i; //@line 19596
       $$reg2mem62$3 = $$reg2mem62$0; //@line 19597
       break;
      }
     case 17:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        label = 90; //@line 19603
        break L5;
       }
       $876 = (HEAP32[$134 >> 2] | 0) + 12 | 0; //@line 19607
       if ((HEAP32[$876 >> 2] | 0) != -1) {
        label = 90; //@line 19611
        break L5;
       }
       $879 = $$reg2mem$0 + 1 | 0; //@line 19614
       HEAP32[$38 >> 2] = $879; //@line 19615
       $880 = $$1202$in$i$reg2mem$0 & 255; //@line 19616
       if (!($880 << 24 >> 24)) {
        $$0$lcssa$i244$i = 0; //@line 19619
       } else {
        $$045$i242$i = $880; //@line 19621
        $$06$i241$i = 0; //@line 19621
        $885 = $879; //@line 19621
        while (1) {
         $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 19623
         $885$looptemp = $885;
         $885 = $885 + 1 | 0; //@line 19625
         HEAP32[$38 >> 2] = $885; //@line 19626
         $888 = $$06$i241$i << 8 | HEAPU8[$885$looptemp >> 0]; //@line 19629
         if (!($$045$i242$i << 24 >> 24)) {
          $$0$lcssa$i244$i = $888; //@line 19632
          break;
         } else {
          $$06$i241$i = $888; //@line 19635
         }
        }
       }
       HEAP32[$876 >> 2] = $$0$lcssa$i244$i; //@line 19639
       $$reg2mem62$3 = $$reg2mem62$0; //@line 19640
       break;
      }
     case 60:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        label = 96; //@line 19646
        break L5;
       }
       $892 = (HEAP32[$134 >> 2] | 0) + 1 | 0; //@line 19650
       $893 = HEAP8[$892 >> 0] | 0; //@line 19651
       if ($893 & 1) {
        label = 96; //@line 19655
        break L5;
       }
       HEAP8[$892 >> 0] = $893 | 1; //@line 19659
       $898 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 19661
       HEAP32[$38 >> 2] = $898; //@line 19662
       $899 = $$1202$in$i$reg2mem$0 & 255; //@line 19663
       if (!($899 << 24 >> 24)) {
        $$0$lcssa$i237$i = 0; //@line 19666
       } else {
        $$045$i235$i = $899; //@line 19668
        $$06$i234$i = 0; //@line 19668
        $904 = $898; //@line 19668
        while (1) {
         $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 19670
         $904$looptemp = $904;
         $904 = $904 + 1 | 0; //@line 19672
         HEAP32[$38 >> 2] = $904; //@line 19673
         $907 = $$06$i234$i << 8 | HEAPU8[$904$looptemp >> 0]; //@line 19676
         if (!($$045$i235$i << 24 >> 24)) {
          $$0$lcssa$i237$i = $907; //@line 19679
          break;
         } else {
          $$06$i234$i = $907; //@line 19682
         }
        }
       }
       HEAP32[(HEAP32[$134 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 19688
       $$reg2mem62$3 = $$reg2mem62$0; //@line 19689
       break;
      }
     case 28:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        label = 102; //@line 19695
        break L5;
       }
       $913 = (HEAP32[$134 >> 2] | 0) + 1 | 0; //@line 19699
       $914 = HEAP8[$913 >> 0] | 0; //@line 19700
       if ($914 & 2) {
        label = 102; //@line 19704
        break L5;
       }
       HEAP8[$913 >> 0] = $914 | 2; //@line 19708
       $919 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 19710
       HEAP32[$38 >> 2] = $919; //@line 19711
       $920 = $$1202$in$i$reg2mem$0 & 255; //@line 19712
       if (!($920 << 24 >> 24)) {
        $$0$lcssa$i230$i = 0; //@line 19715
       } else {
        $$045$i228$i = $920; //@line 19717
        $$06$i227$i = 0; //@line 19717
        $925 = $919; //@line 19717
        while (1) {
         $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 19719
         $925$looptemp = $925;
         $925 = $925 + 1 | 0; //@line 19721
         HEAP32[$38 >> 2] = $925; //@line 19722
         $928 = $$06$i227$i << 8 | HEAPU8[$925$looptemp >> 0]; //@line 19725
         if (!($$045$i228$i << 24 >> 24)) {
          $$0$lcssa$i230$i = $928; //@line 19728
          break;
         } else {
          $$06$i227$i = $928; //@line 19731
         }
        }
       }
       HEAP32[(HEAP32[$134 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 19737
       $$reg2mem62$3 = $$reg2mem62$0; //@line 19738
       break;
      }
     default:
      {
       label = 106; //@line 19742
       break L5;
      }
     }
     L63 : while (1) {
      if ((label | 0) == 24) {
       label = 0; //@line 19748
       if (($$1202$i$reg2mem$1 & 65535) > 2) {
        label = 26; //@line 19751
        break L5;
       }
       if ((HEAP32[$10 >> 2] | 0) != -1) {
        label = 26; //@line 19757
        break L5;
       }
       $272 = $$reg2mem$1 + 1 | 0; //@line 19760
       HEAP32[$38 >> 2] = $272; //@line 19761
       $273 = $$1202$in$i$reg2mem$1 & 255; //@line 19762
       if (!($273 << 24 >> 24)) {
        $$0$lcssa$i$i = 0; //@line 19765
       } else {
        $$045$i$i = $273; //@line 19767
        $$06$i$i = 0; //@line 19767
        $278 = $272; //@line 19767
        while (1) {
         $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 19769
         $278$looptemp = $278;
         $278 = $278 + 1 | 0; //@line 19771
         HEAP32[$38 >> 2] = $278; //@line 19772
         $281 = $$06$i$i << 8 | HEAPU8[$278$looptemp >> 0]; //@line 19775
         if (!($$045$i$i << 24 >> 24)) {
          $$0$lcssa$i$i = $281; //@line 19778
          break;
         } else {
          $$06$i$i = $281; //@line 19781
         }
        }
       }
       HEAP32[$10 >> 2] = $$0$lcssa$i$i; //@line 19785
       $$reg2mem62$3 = $$reg2mem62$1; //@line 19786
      }
      $932 = HEAP32[$74 >> 2] | 0; //@line 19788
      $933 = $932 - $100 | 0; //@line 19789
      $147 = $932; //@line 19792
      if (($933 | 0) > ($88 | 0)) {
       break L2;
      }
      if (!(($88 - $933 & 65535) << 16 >> 16)) {
       label = 109; //@line 19799
       break L5;
      }
      $trunc277$i = HEAP8[$147 >> 0] | 0; //@line 19802
      if ($trunc277$i << 24 >> 24 == -1) {
       label = 109; //@line 19805
       break L5;
      }
      $150 = $trunc277$i & 15; //@line 19809
      $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 19810
      switch ($trunc276$i & 15) {
      case 15:
       {
        label = 7; //@line 19815
        break L5;
        break;
       }
      case 13:
       {
        $$sink$i = HEAPU8[$147 + 1 >> 0] | 0; //@line 19823
        $$sink214$i = 13; //@line 19823
        $$sink3$i = 1; //@line 19823
        label = 8; //@line 19824
        break;
       }
      case 14:
       {
        $$sink$i = (HEAPU8[$147 + 1 >> 0] << 8) + 269 | 0; //@line 19836
        $$sink214$i = HEAPU8[$147 + 2 >> 0] | 0; //@line 19836
        $$sink3$i = 2; //@line 19836
        label = 8; //@line 19837
        break;
       }
      default:
       {
        $$1$i = $trunc276$i & 255; //@line 19841
        $169 = $147; //@line 19841
        $952 = $932; //@line 19841
       }
      }
      if ((label | 0) == 8) {
       label = 0; //@line 19845
       $164 = $147 + $$sink3$i | 0; //@line 19847
       HEAP32[$38 >> 2] = $164; //@line 19848
       $$1$i = $$sink$i + $$sink214$i | 0; //@line 19850
       $169 = $164; //@line 19850
       $952 = $164; //@line 19850
      }
      $167 = $$1$i + ($$reg2mem62$3 & 255) | 0; //@line 19853
      switch ($trunc277$i & 15) {
      case 15:
       {
        label = 12; //@line 19857
        break L5;
        break;
       }
      case 13:
       {
        $$sink215$i = HEAPU8[$169 + 1 >> 0] | 0; //@line 19865
        $$sink216$i = 13; //@line 19865
        $$sink8$i = 1; //@line 19865
        label = 13; //@line 19866
        break;
       }
      case 14:
       {
        $$sink215$i = (HEAPU8[$169 + 1 >> 0] << 8) + 269 | 0; //@line 19878
        $$sink216$i = HEAPU8[$169 + 2 >> 0] | 0; //@line 19878
        $$sink8$i = 2; //@line 19878
        label = 13; //@line 19879
        break;
       }
      default:
       {
        $$1202$in$i = $150; //@line 19883
        $184 = $952; //@line 19883
        $199 = $169; //@line 19883
       }
      }
      if ((label | 0) == 13) {
       label = 0; //@line 19887
       $181 = $169 + $$sink8$i | 0; //@line 19889
       HEAP32[$38 >> 2] = $181; //@line 19890
       $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 19892
       $184 = $181; //@line 19892
       $199 = $181; //@line 19892
      }
      $$1202$i = $$1202$in$i & 65535; //@line 19894
      $185 = $108 - $184 & 65535; //@line 19896
      $trunc$i = $167 & 65535; //@line 19897
      switch ($trunc$i << 16 >> 16) {
      case 11:
       {
        $$1202$i$reg2mem$2 = $$1202$i; //@line 19900
        $$reg2mem62$2 = $167; //@line 19900
        $$reg2mem73$1 = $185; //@line 19900
        label = 64; //@line 19901
        break L5;
        break;
       }
      case 12:
       {
        $$1202$i$reg2mem$1 = $$1202$i; //@line 19906
        $$1202$in$i$reg2mem$1 = $$1202$in$i; //@line 19906
        $$reg2mem$1 = $199; //@line 19906
        $$reg2mem62$1 = $167; //@line 19906
        label = 24; //@line 19907
        break;
       }
      case 28:
      case 60:
      case 17:
      case 27:
      case 23:
      case 15:
      case 6:
      case 20:
      case 7:
      case 8:
      case 3:
      case 4:
      case 35:
      case 14:
       {
        break L63;
        break;
       }
      default:
       {
        label = 106; //@line 19915
        break L5;
       }
      }
     }
     if (!(HEAP32[$134 >> 2] | 0)) {
      label = 16; //@line 19923
      break;
     } else {
      $$1202$i$reg2mem$0 = $$1202$i; //@line 19926
      $$1202$in$i$reg2mem$0 = $$1202$in$i; //@line 19926
      $$reg2mem$0 = $199; //@line 19926
      $$reg2mem62$0 = $167; //@line 19926
      $$reg2mem73$0 = $185; //@line 19926
      $trunc$i$reg2mem$0 = $trunc$i; //@line 19926
     }
    }
    switch (label | 0) {
    case 7:
     {
      _mbed_tracef(2, 3803, 4066, $84); //@line 19931
      break L2;
      break;
     }
    case 12:
     {
      _mbed_tracef(2, 3803, 4124, $30); //@line 19936
      break L2;
      break;
     }
    case 16:
     {
      $188 = HEAP32[$138 >> 2] | 0; //@line 19941
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 19942
      $189 = FUNCTION_TABLE_ii[$188 & 31](68) | 0; //@line 19943
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 19946
       $190 = $ReallocAsyncCtx3 + 4 | 0; //@line 19947
       HEAP32[$190 >> 2] = $2; //@line 19948
       $191 = $ReallocAsyncCtx3 + 8 | 0; //@line 19949
       HEAP32[$191 >> 2] = $4; //@line 19950
       $192 = $ReallocAsyncCtx3 + 12 | 0; //@line 19951
       HEAP32[$192 >> 2] = $6; //@line 19952
       $193 = $ReallocAsyncCtx3 + 16 | 0; //@line 19953
       HEAP32[$193 >> 2] = $8; //@line 19954
       $194 = $ReallocAsyncCtx3 + 20 | 0; //@line 19955
       HEAP32[$194 >> 2] = $10; //@line 19956
       $195 = $ReallocAsyncCtx3 + 24 | 0; //@line 19957
       HEAP32[$195 >> 2] = $12; //@line 19958
       $196 = $ReallocAsyncCtx3 + 28 | 0; //@line 19959
       HEAP32[$196 >> 2] = $14; //@line 19960
       $197 = $ReallocAsyncCtx3 + 32 | 0; //@line 19961
       HEAP32[$197 >> 2] = $16; //@line 19962
       $198 = $ReallocAsyncCtx3 + 36 | 0; //@line 19963
       HEAP32[$198 >> 2] = $199; //@line 19964
       $200 = $ReallocAsyncCtx3 + 40 | 0; //@line 19965
       HEAP32[$200 >> 2] = $20; //@line 19966
       $201 = $ReallocAsyncCtx3 + 44 | 0; //@line 19967
       HEAP32[$201 >> 2] = $22; //@line 19968
       $202 = $ReallocAsyncCtx3 + 48 | 0; //@line 19969
       HEAP32[$202 >> 2] = $24; //@line 19970
       $203 = $ReallocAsyncCtx3 + 52 | 0; //@line 19971
       HEAP32[$203 >> 2] = $26; //@line 19972
       $204 = $ReallocAsyncCtx3 + 56 | 0; //@line 19973
       HEAP32[$204 >> 2] = $28; //@line 19974
       $205 = $ReallocAsyncCtx3 + 60 | 0; //@line 19975
       HEAP32[$205 >> 2] = $30; //@line 19976
       $206 = $ReallocAsyncCtx3 + 64 | 0; //@line 19977
       HEAP32[$206 >> 2] = $32; //@line 19978
       $207 = $ReallocAsyncCtx3 + 68 | 0; //@line 19979
       HEAP32[$207 >> 2] = $34; //@line 19980
       $208 = $ReallocAsyncCtx3 + 72 | 0; //@line 19981
       HEAP32[$208 >> 2] = $36; //@line 19982
       $209 = $ReallocAsyncCtx3 + 76 | 0; //@line 19983
       HEAP32[$209 >> 2] = $38; //@line 19984
       $210 = $ReallocAsyncCtx3 + 80 | 0; //@line 19985
       HEAP32[$210 >> 2] = $40; //@line 19986
       $211 = $ReallocAsyncCtx3 + 84 | 0; //@line 19987
       HEAP32[$211 >> 2] = $$1202$in$i; //@line 19988
       $212 = $ReallocAsyncCtx3 + 88 | 0; //@line 19989
       HEAP32[$212 >> 2] = $44; //@line 19990
       $213 = $ReallocAsyncCtx3 + 92 | 0; //@line 19991
       HEAP32[$213 >> 2] = $46; //@line 19992
       $214 = $ReallocAsyncCtx3 + 96 | 0; //@line 19993
       HEAP16[$214 >> 1] = $$1202$i; //@line 19994
       $215 = $ReallocAsyncCtx3 + 100 | 0; //@line 19995
       HEAP32[$215 >> 2] = $50; //@line 19996
       $216 = $ReallocAsyncCtx3 + 104 | 0; //@line 19997
       HEAP32[$216 >> 2] = $52; //@line 19998
       $217 = $ReallocAsyncCtx3 + 108 | 0; //@line 19999
       HEAP32[$217 >> 2] = $54; //@line 20000
       $218 = $ReallocAsyncCtx3 + 112 | 0; //@line 20001
       HEAP32[$218 >> 2] = $56; //@line 20002
       $219 = $ReallocAsyncCtx3 + 116 | 0; //@line 20003
       HEAP32[$219 >> 2] = $58; //@line 20004
       $220 = $ReallocAsyncCtx3 + 120 | 0; //@line 20005
       HEAP32[$220 >> 2] = $60; //@line 20006
       $221 = $ReallocAsyncCtx3 + 124 | 0; //@line 20007
       HEAP32[$221 >> 2] = $62; //@line 20008
       $222 = $ReallocAsyncCtx3 + 128 | 0; //@line 20009
       HEAP32[$222 >> 2] = $64; //@line 20010
       $223 = $ReallocAsyncCtx3 + 132 | 0; //@line 20011
       HEAP32[$223 >> 2] = $66; //@line 20012
       $224 = $ReallocAsyncCtx3 + 136 | 0; //@line 20013
       HEAP32[$224 >> 2] = $167; //@line 20014
       $225 = $ReallocAsyncCtx3 + 140 | 0; //@line 20015
       HEAP32[$225 >> 2] = $70; //@line 20016
       $226 = $ReallocAsyncCtx3 + 144 | 0; //@line 20017
       HEAP32[$226 >> 2] = $72; //@line 20018
       $227 = $ReallocAsyncCtx3 + 148 | 0; //@line 20019
       HEAP32[$227 >> 2] = $74; //@line 20020
       $228 = $ReallocAsyncCtx3 + 152 | 0; //@line 20021
       HEAP32[$228 >> 2] = $76; //@line 20022
       $229 = $ReallocAsyncCtx3 + 156 | 0; //@line 20023
       HEAP16[$229 >> 1] = $185; //@line 20024
       $230 = $ReallocAsyncCtx3 + 160 | 0; //@line 20025
       HEAP32[$230 >> 2] = $80; //@line 20026
       $231 = $ReallocAsyncCtx3 + 164 | 0; //@line 20027
       HEAP32[$231 >> 2] = $82; //@line 20028
       $232 = $ReallocAsyncCtx3 + 168 | 0; //@line 20029
       HEAP32[$232 >> 2] = $84; //@line 20030
       $233 = $ReallocAsyncCtx3 + 172 | 0; //@line 20031
       HEAP32[$233 >> 2] = $86; //@line 20032
       $234 = $ReallocAsyncCtx3 + 176 | 0; //@line 20033
       HEAP32[$234 >> 2] = $88; //@line 20034
       $235 = $ReallocAsyncCtx3 + 180 | 0; //@line 20035
       HEAP32[$235 >> 2] = $90; //@line 20036
       $236 = $ReallocAsyncCtx3 + 184 | 0; //@line 20037
       HEAP32[$236 >> 2] = $92; //@line 20038
       $237 = $ReallocAsyncCtx3 + 188 | 0; //@line 20039
       HEAP32[$237 >> 2] = $94; //@line 20040
       $238 = $ReallocAsyncCtx3 + 192 | 0; //@line 20041
       HEAP32[$238 >> 2] = $96; //@line 20042
       $239 = $ReallocAsyncCtx3 + 196 | 0; //@line 20043
       HEAP32[$239 >> 2] = $98; //@line 20044
       $240 = $ReallocAsyncCtx3 + 200 | 0; //@line 20045
       HEAP32[$240 >> 2] = $100; //@line 20046
       $241 = $ReallocAsyncCtx3 + 204 | 0; //@line 20047
       HEAP32[$241 >> 2] = $102; //@line 20048
       $242 = $ReallocAsyncCtx3 + 208 | 0; //@line 20049
       HEAP32[$242 >> 2] = $104; //@line 20050
       $243 = $ReallocAsyncCtx3 + 212 | 0; //@line 20051
       HEAP32[$243 >> 2] = $106; //@line 20052
       $244 = $ReallocAsyncCtx3 + 216 | 0; //@line 20053
       HEAP32[$244 >> 2] = $108; //@line 20054
       $245 = $ReallocAsyncCtx3 + 220 | 0; //@line 20055
       HEAP32[$245 >> 2] = $110; //@line 20056
       $246 = $ReallocAsyncCtx3 + 224 | 0; //@line 20057
       HEAP32[$246 >> 2] = $112; //@line 20058
       $247 = $ReallocAsyncCtx3 + 228 | 0; //@line 20059
       HEAP32[$247 >> 2] = $114; //@line 20060
       $248 = $ReallocAsyncCtx3 + 232 | 0; //@line 20061
       HEAP32[$248 >> 2] = $116; //@line 20062
       $249 = $ReallocAsyncCtx3 + 236 | 0; //@line 20063
       HEAP32[$249 >> 2] = $118; //@line 20064
       $250 = $ReallocAsyncCtx3 + 240 | 0; //@line 20065
       HEAP32[$250 >> 2] = $120; //@line 20066
       $251 = $ReallocAsyncCtx3 + 244 | 0; //@line 20067
       HEAP32[$251 >> 2] = $122; //@line 20068
       $252 = $ReallocAsyncCtx3 + 248 | 0; //@line 20069
       HEAP32[$252 >> 2] = $124; //@line 20070
       $253 = $ReallocAsyncCtx3 + 252 | 0; //@line 20071
       HEAP32[$253 >> 2] = $126; //@line 20072
       $254 = $ReallocAsyncCtx3 + 256 | 0; //@line 20073
       HEAP32[$254 >> 2] = $128; //@line 20074
       $255 = $ReallocAsyncCtx3 + 260 | 0; //@line 20075
       HEAP32[$255 >> 2] = $130; //@line 20076
       $256 = $ReallocAsyncCtx3 + 264 | 0; //@line 20077
       HEAP32[$256 >> 2] = $132; //@line 20078
       $257 = $ReallocAsyncCtx3 + 268 | 0; //@line 20079
       HEAP32[$257 >> 2] = $134; //@line 20080
       $258 = $ReallocAsyncCtx3 + 272 | 0; //@line 20081
       HEAP16[$258 >> 1] = $trunc$i; //@line 20082
       $259 = $ReallocAsyncCtx3 + 276 | 0; //@line 20083
       HEAP32[$259 >> 2] = $138; //@line 20084
       $260 = $ReallocAsyncCtx3 + 280 | 0; //@line 20085
       HEAP32[$260 >> 2] = $140; //@line 20086
       $261 = $ReallocAsyncCtx3 + 284 | 0; //@line 20087
       HEAP32[$261 >> 2] = $142; //@line 20088
       sp = STACKTOP; //@line 20089
       return;
      }
      HEAP32[___async_retval >> 2] = $189; //@line 20093
      ___async_unwind = 0; //@line 20094
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 20095
      $190 = $ReallocAsyncCtx3 + 4 | 0; //@line 20096
      HEAP32[$190 >> 2] = $2; //@line 20097
      $191 = $ReallocAsyncCtx3 + 8 | 0; //@line 20098
      HEAP32[$191 >> 2] = $4; //@line 20099
      $192 = $ReallocAsyncCtx3 + 12 | 0; //@line 20100
      HEAP32[$192 >> 2] = $6; //@line 20101
      $193 = $ReallocAsyncCtx3 + 16 | 0; //@line 20102
      HEAP32[$193 >> 2] = $8; //@line 20103
      $194 = $ReallocAsyncCtx3 + 20 | 0; //@line 20104
      HEAP32[$194 >> 2] = $10; //@line 20105
      $195 = $ReallocAsyncCtx3 + 24 | 0; //@line 20106
      HEAP32[$195 >> 2] = $12; //@line 20107
      $196 = $ReallocAsyncCtx3 + 28 | 0; //@line 20108
      HEAP32[$196 >> 2] = $14; //@line 20109
      $197 = $ReallocAsyncCtx3 + 32 | 0; //@line 20110
      HEAP32[$197 >> 2] = $16; //@line 20111
      $198 = $ReallocAsyncCtx3 + 36 | 0; //@line 20112
      HEAP32[$198 >> 2] = $199; //@line 20113
      $200 = $ReallocAsyncCtx3 + 40 | 0; //@line 20114
      HEAP32[$200 >> 2] = $20; //@line 20115
      $201 = $ReallocAsyncCtx3 + 44 | 0; //@line 20116
      HEAP32[$201 >> 2] = $22; //@line 20117
      $202 = $ReallocAsyncCtx3 + 48 | 0; //@line 20118
      HEAP32[$202 >> 2] = $24; //@line 20119
      $203 = $ReallocAsyncCtx3 + 52 | 0; //@line 20120
      HEAP32[$203 >> 2] = $26; //@line 20121
      $204 = $ReallocAsyncCtx3 + 56 | 0; //@line 20122
      HEAP32[$204 >> 2] = $28; //@line 20123
      $205 = $ReallocAsyncCtx3 + 60 | 0; //@line 20124
      HEAP32[$205 >> 2] = $30; //@line 20125
      $206 = $ReallocAsyncCtx3 + 64 | 0; //@line 20126
      HEAP32[$206 >> 2] = $32; //@line 20127
      $207 = $ReallocAsyncCtx3 + 68 | 0; //@line 20128
      HEAP32[$207 >> 2] = $34; //@line 20129
      $208 = $ReallocAsyncCtx3 + 72 | 0; //@line 20130
      HEAP32[$208 >> 2] = $36; //@line 20131
      $209 = $ReallocAsyncCtx3 + 76 | 0; //@line 20132
      HEAP32[$209 >> 2] = $38; //@line 20133
      $210 = $ReallocAsyncCtx3 + 80 | 0; //@line 20134
      HEAP32[$210 >> 2] = $40; //@line 20135
      $211 = $ReallocAsyncCtx3 + 84 | 0; //@line 20136
      HEAP32[$211 >> 2] = $$1202$in$i; //@line 20137
      $212 = $ReallocAsyncCtx3 + 88 | 0; //@line 20138
      HEAP32[$212 >> 2] = $44; //@line 20139
      $213 = $ReallocAsyncCtx3 + 92 | 0; //@line 20140
      HEAP32[$213 >> 2] = $46; //@line 20141
      $214 = $ReallocAsyncCtx3 + 96 | 0; //@line 20142
      HEAP16[$214 >> 1] = $$1202$i; //@line 20143
      $215 = $ReallocAsyncCtx3 + 100 | 0; //@line 20144
      HEAP32[$215 >> 2] = $50; //@line 20145
      $216 = $ReallocAsyncCtx3 + 104 | 0; //@line 20146
      HEAP32[$216 >> 2] = $52; //@line 20147
      $217 = $ReallocAsyncCtx3 + 108 | 0; //@line 20148
      HEAP32[$217 >> 2] = $54; //@line 20149
      $218 = $ReallocAsyncCtx3 + 112 | 0; //@line 20150
      HEAP32[$218 >> 2] = $56; //@line 20151
      $219 = $ReallocAsyncCtx3 + 116 | 0; //@line 20152
      HEAP32[$219 >> 2] = $58; //@line 20153
      $220 = $ReallocAsyncCtx3 + 120 | 0; //@line 20154
      HEAP32[$220 >> 2] = $60; //@line 20155
      $221 = $ReallocAsyncCtx3 + 124 | 0; //@line 20156
      HEAP32[$221 >> 2] = $62; //@line 20157
      $222 = $ReallocAsyncCtx3 + 128 | 0; //@line 20158
      HEAP32[$222 >> 2] = $64; //@line 20159
      $223 = $ReallocAsyncCtx3 + 132 | 0; //@line 20160
      HEAP32[$223 >> 2] = $66; //@line 20161
      $224 = $ReallocAsyncCtx3 + 136 | 0; //@line 20162
      HEAP32[$224 >> 2] = $167; //@line 20163
      $225 = $ReallocAsyncCtx3 + 140 | 0; //@line 20164
      HEAP32[$225 >> 2] = $70; //@line 20165
      $226 = $ReallocAsyncCtx3 + 144 | 0; //@line 20166
      HEAP32[$226 >> 2] = $72; //@line 20167
      $227 = $ReallocAsyncCtx3 + 148 | 0; //@line 20168
      HEAP32[$227 >> 2] = $74; //@line 20169
      $228 = $ReallocAsyncCtx3 + 152 | 0; //@line 20170
      HEAP32[$228 >> 2] = $76; //@line 20171
      $229 = $ReallocAsyncCtx3 + 156 | 0; //@line 20172
      HEAP16[$229 >> 1] = $185; //@line 20173
      $230 = $ReallocAsyncCtx3 + 160 | 0; //@line 20174
      HEAP32[$230 >> 2] = $80; //@line 20175
      $231 = $ReallocAsyncCtx3 + 164 | 0; //@line 20176
      HEAP32[$231 >> 2] = $82; //@line 20177
      $232 = $ReallocAsyncCtx3 + 168 | 0; //@line 20178
      HEAP32[$232 >> 2] = $84; //@line 20179
      $233 = $ReallocAsyncCtx3 + 172 | 0; //@line 20180
      HEAP32[$233 >> 2] = $86; //@line 20181
      $234 = $ReallocAsyncCtx3 + 176 | 0; //@line 20182
      HEAP32[$234 >> 2] = $88; //@line 20183
      $235 = $ReallocAsyncCtx3 + 180 | 0; //@line 20184
      HEAP32[$235 >> 2] = $90; //@line 20185
      $236 = $ReallocAsyncCtx3 + 184 | 0; //@line 20186
      HEAP32[$236 >> 2] = $92; //@line 20187
      $237 = $ReallocAsyncCtx3 + 188 | 0; //@line 20188
      HEAP32[$237 >> 2] = $94; //@line 20189
      $238 = $ReallocAsyncCtx3 + 192 | 0; //@line 20190
      HEAP32[$238 >> 2] = $96; //@line 20191
      $239 = $ReallocAsyncCtx3 + 196 | 0; //@line 20192
      HEAP32[$239 >> 2] = $98; //@line 20193
      $240 = $ReallocAsyncCtx3 + 200 | 0; //@line 20194
      HEAP32[$240 >> 2] = $100; //@line 20195
      $241 = $ReallocAsyncCtx3 + 204 | 0; //@line 20196
      HEAP32[$241 >> 2] = $102; //@line 20197
      $242 = $ReallocAsyncCtx3 + 208 | 0; //@line 20198
      HEAP32[$242 >> 2] = $104; //@line 20199
      $243 = $ReallocAsyncCtx3 + 212 | 0; //@line 20200
      HEAP32[$243 >> 2] = $106; //@line 20201
      $244 = $ReallocAsyncCtx3 + 216 | 0; //@line 20202
      HEAP32[$244 >> 2] = $108; //@line 20203
      $245 = $ReallocAsyncCtx3 + 220 | 0; //@line 20204
      HEAP32[$245 >> 2] = $110; //@line 20205
      $246 = $ReallocAsyncCtx3 + 224 | 0; //@line 20206
      HEAP32[$246 >> 2] = $112; //@line 20207
      $247 = $ReallocAsyncCtx3 + 228 | 0; //@line 20208
      HEAP32[$247 >> 2] = $114; //@line 20209
      $248 = $ReallocAsyncCtx3 + 232 | 0; //@line 20210
      HEAP32[$248 >> 2] = $116; //@line 20211
      $249 = $ReallocAsyncCtx3 + 236 | 0; //@line 20212
      HEAP32[$249 >> 2] = $118; //@line 20213
      $250 = $ReallocAsyncCtx3 + 240 | 0; //@line 20214
      HEAP32[$250 >> 2] = $120; //@line 20215
      $251 = $ReallocAsyncCtx3 + 244 | 0; //@line 20216
      HEAP32[$251 >> 2] = $122; //@line 20217
      $252 = $ReallocAsyncCtx3 + 248 | 0; //@line 20218
      HEAP32[$252 >> 2] = $124; //@line 20219
      $253 = $ReallocAsyncCtx3 + 252 | 0; //@line 20220
      HEAP32[$253 >> 2] = $126; //@line 20221
      $254 = $ReallocAsyncCtx3 + 256 | 0; //@line 20222
      HEAP32[$254 >> 2] = $128; //@line 20223
      $255 = $ReallocAsyncCtx3 + 260 | 0; //@line 20224
      HEAP32[$255 >> 2] = $130; //@line 20225
      $256 = $ReallocAsyncCtx3 + 264 | 0; //@line 20226
      HEAP32[$256 >> 2] = $132; //@line 20227
      $257 = $ReallocAsyncCtx3 + 268 | 0; //@line 20228
      HEAP32[$257 >> 2] = $134; //@line 20229
      $258 = $ReallocAsyncCtx3 + 272 | 0; //@line 20230
      HEAP16[$258 >> 1] = $trunc$i; //@line 20231
      $259 = $ReallocAsyncCtx3 + 276 | 0; //@line 20232
      HEAP32[$259 >> 2] = $138; //@line 20233
      $260 = $ReallocAsyncCtx3 + 280 | 0; //@line 20234
      HEAP32[$260 >> 2] = $140; //@line 20235
      $261 = $ReallocAsyncCtx3 + 284 | 0; //@line 20236
      HEAP32[$261 >> 2] = $142; //@line 20237
      sp = STACKTOP; //@line 20238
      return;
     }
    case 26:
     {
      _mbed_tracef(2, 3803, 4238, $12); //@line 20243
      break L2;
      break;
     }
    case 31:
     {
      _mbed_tracef(2, 3803, 4307, $28); //@line 20248
      break L2;
      break;
     }
    case 35:
     {
      $297 = $$1202$in$i$reg2mem$0 & 65535; //@line 20253
      if (($$1202$i$reg2mem$0 + -1 & 65535) <= 1033) {
       $300 = HEAP32[$134 >> 2] | 0; //@line 20257
       if (!(HEAP32[$300 + 44 >> 2] | 0)) {
        HEAP16[$300 + 2 >> 1] = $$1202$i$reg2mem$0; //@line 20263
        $305 = $$reg2mem$0 + 1 | 0; //@line 20264
        HEAP32[$38 >> 2] = $305; //@line 20265
        $306 = HEAP32[$138 >> 2] | 0; //@line 20266
        $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 20267
        $307 = FUNCTION_TABLE_ii[$306 & 31]($$1202$i$reg2mem$0) | 0; //@line 20268
        if (___async) {
         HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 20271
         $308 = $ReallocAsyncCtx4 + 4 | 0; //@line 20272
         HEAP32[$308 >> 2] = $2; //@line 20273
         $309 = $ReallocAsyncCtx4 + 8 | 0; //@line 20274
         HEAP32[$309 >> 2] = $4; //@line 20275
         $310 = $ReallocAsyncCtx4 + 12 | 0; //@line 20276
         HEAP32[$310 >> 2] = $6; //@line 20277
         $311 = $ReallocAsyncCtx4 + 16 | 0; //@line 20278
         HEAP32[$311 >> 2] = $8; //@line 20279
         $312 = $ReallocAsyncCtx4 + 20 | 0; //@line 20280
         HEAP32[$312 >> 2] = $10; //@line 20281
         $313 = $ReallocAsyncCtx4 + 24 | 0; //@line 20282
         HEAP32[$313 >> 2] = $12; //@line 20283
         $314 = $ReallocAsyncCtx4 + 28 | 0; //@line 20284
         HEAP32[$314 >> 2] = $14; //@line 20285
         $315 = $ReallocAsyncCtx4 + 32 | 0; //@line 20286
         HEAP32[$315 >> 2] = $16; //@line 20287
         $316 = $ReallocAsyncCtx4 + 36 | 0; //@line 20288
         HEAP32[$316 >> 2] = $20; //@line 20289
         $317 = $ReallocAsyncCtx4 + 40 | 0; //@line 20290
         HEAP32[$317 >> 2] = $22; //@line 20291
         $318 = $ReallocAsyncCtx4 + 44 | 0; //@line 20292
         HEAP32[$318 >> 2] = $24; //@line 20293
         $319 = $ReallocAsyncCtx4 + 48 | 0; //@line 20294
         HEAP32[$319 >> 2] = $26; //@line 20295
         $320 = $ReallocAsyncCtx4 + 52 | 0; //@line 20296
         HEAP32[$320 >> 2] = $28; //@line 20297
         $321 = $ReallocAsyncCtx4 + 56 | 0; //@line 20298
         HEAP32[$321 >> 2] = $30; //@line 20299
         $322 = $ReallocAsyncCtx4 + 60 | 0; //@line 20300
         HEAP32[$322 >> 2] = $32; //@line 20301
         $323 = $ReallocAsyncCtx4 + 64 | 0; //@line 20302
         HEAP32[$323 >> 2] = $34; //@line 20303
         $324 = $ReallocAsyncCtx4 + 68 | 0; //@line 20304
         HEAP32[$324 >> 2] = $297; //@line 20305
         $325 = $ReallocAsyncCtx4 + 72 | 0; //@line 20306
         HEAP32[$325 >> 2] = $38; //@line 20307
         $326 = $ReallocAsyncCtx4 + 76 | 0; //@line 20308
         HEAP32[$326 >> 2] = $36; //@line 20309
         $327 = $ReallocAsyncCtx4 + 80 | 0; //@line 20310
         HEAP32[$327 >> 2] = $40; //@line 20311
         $328 = $ReallocAsyncCtx4 + 84 | 0; //@line 20312
         HEAP32[$328 >> 2] = $60; //@line 20313
         $329 = $ReallocAsyncCtx4 + 88 | 0; //@line 20314
         HEAP32[$329 >> 2] = $44; //@line 20315
         $330 = $ReallocAsyncCtx4 + 92 | 0; //@line 20316
         HEAP32[$330 >> 2] = $46; //@line 20317
         $331 = $ReallocAsyncCtx4 + 96 | 0; //@line 20318
         HEAP32[$331 >> 2] = $50; //@line 20319
         $332 = $ReallocAsyncCtx4 + 100 | 0; //@line 20320
         HEAP32[$332 >> 2] = $52; //@line 20321
         $333 = $ReallocAsyncCtx4 + 104 | 0; //@line 20322
         HEAP32[$333 >> 2] = $54; //@line 20323
         $334 = $ReallocAsyncCtx4 + 108 | 0; //@line 20324
         HEAP32[$334 >> 2] = $56; //@line 20325
         $335 = $ReallocAsyncCtx4 + 112 | 0; //@line 20326
         HEAP32[$335 >> 2] = $58; //@line 20327
         $336 = $ReallocAsyncCtx4 + 116 | 0; //@line 20328
         HEAP32[$336 >> 2] = $62; //@line 20329
         $337 = $ReallocAsyncCtx4 + 120 | 0; //@line 20330
         HEAP32[$337 >> 2] = $64; //@line 20331
         $338 = $ReallocAsyncCtx4 + 124 | 0; //@line 20332
         HEAP32[$338 >> 2] = $66; //@line 20333
         $339 = $ReallocAsyncCtx4 + 128 | 0; //@line 20334
         HEAP32[$339 >> 2] = $$reg2mem62$0; //@line 20335
         $340 = $ReallocAsyncCtx4 + 132 | 0; //@line 20336
         HEAP32[$340 >> 2] = $70; //@line 20337
         $341 = $ReallocAsyncCtx4 + 136 | 0; //@line 20338
         HEAP32[$341 >> 2] = $72; //@line 20339
         $342 = $ReallocAsyncCtx4 + 140 | 0; //@line 20340
         HEAP32[$342 >> 2] = $74; //@line 20341
         $343 = $ReallocAsyncCtx4 + 144 | 0; //@line 20342
         HEAP32[$343 >> 2] = $76; //@line 20343
         $344 = $ReallocAsyncCtx4 + 148 | 0; //@line 20344
         HEAP32[$344 >> 2] = $80; //@line 20345
         $345 = $ReallocAsyncCtx4 + 152 | 0; //@line 20346
         HEAP32[$345 >> 2] = $82; //@line 20347
         $346 = $ReallocAsyncCtx4 + 156 | 0; //@line 20348
         HEAP32[$346 >> 2] = $84; //@line 20349
         $347 = $ReallocAsyncCtx4 + 160 | 0; //@line 20350
         HEAP32[$347 >> 2] = $86; //@line 20351
         $348 = $ReallocAsyncCtx4 + 164 | 0; //@line 20352
         HEAP32[$348 >> 2] = $88; //@line 20353
         $349 = $ReallocAsyncCtx4 + 168 | 0; //@line 20354
         HEAP32[$349 >> 2] = $90; //@line 20355
         $350 = $ReallocAsyncCtx4 + 172 | 0; //@line 20356
         HEAP32[$350 >> 2] = $92; //@line 20357
         $351 = $ReallocAsyncCtx4 + 176 | 0; //@line 20358
         HEAP32[$351 >> 2] = $94; //@line 20359
         $352 = $ReallocAsyncCtx4 + 180 | 0; //@line 20360
         HEAP32[$352 >> 2] = $96; //@line 20361
         $353 = $ReallocAsyncCtx4 + 184 | 0; //@line 20362
         HEAP32[$353 >> 2] = $98; //@line 20363
         $354 = $ReallocAsyncCtx4 + 188 | 0; //@line 20364
         HEAP32[$354 >> 2] = $100; //@line 20365
         $355 = $ReallocAsyncCtx4 + 192 | 0; //@line 20366
         HEAP32[$355 >> 2] = $102; //@line 20367
         $356 = $ReallocAsyncCtx4 + 196 | 0; //@line 20368
         HEAP32[$356 >> 2] = $104; //@line 20369
         $357 = $ReallocAsyncCtx4 + 200 | 0; //@line 20370
         HEAP32[$357 >> 2] = $106; //@line 20371
         $358 = $ReallocAsyncCtx4 + 204 | 0; //@line 20372
         HEAP32[$358 >> 2] = $108; //@line 20373
         $359 = $ReallocAsyncCtx4 + 208 | 0; //@line 20374
         HEAP32[$359 >> 2] = $110; //@line 20375
         $360 = $ReallocAsyncCtx4 + 212 | 0; //@line 20376
         HEAP32[$360 >> 2] = $112; //@line 20377
         $361 = $ReallocAsyncCtx4 + 216 | 0; //@line 20378
         HEAP32[$361 >> 2] = $305; //@line 20379
         $362 = $ReallocAsyncCtx4 + 220 | 0; //@line 20380
         HEAP32[$362 >> 2] = $114; //@line 20381
         $363 = $ReallocAsyncCtx4 + 224 | 0; //@line 20382
         HEAP32[$363 >> 2] = $116; //@line 20383
         $364 = $ReallocAsyncCtx4 + 228 | 0; //@line 20384
         HEAP32[$364 >> 2] = $118; //@line 20385
         $365 = $ReallocAsyncCtx4 + 232 | 0; //@line 20386
         HEAP32[$365 >> 2] = $120; //@line 20387
         $366 = $ReallocAsyncCtx4 + 236 | 0; //@line 20388
         HEAP32[$366 >> 2] = $122; //@line 20389
         $367 = $ReallocAsyncCtx4 + 240 | 0; //@line 20390
         HEAP32[$367 >> 2] = $124; //@line 20391
         $368 = $ReallocAsyncCtx4 + 244 | 0; //@line 20392
         HEAP32[$368 >> 2] = $126; //@line 20393
         $369 = $ReallocAsyncCtx4 + 248 | 0; //@line 20394
         HEAP32[$369 >> 2] = $128; //@line 20395
         $370 = $ReallocAsyncCtx4 + 252 | 0; //@line 20396
         HEAP32[$370 >> 2] = $130; //@line 20397
         $371 = $ReallocAsyncCtx4 + 256 | 0; //@line 20398
         HEAP32[$371 >> 2] = $132; //@line 20399
         $372 = $ReallocAsyncCtx4 + 260 | 0; //@line 20400
         HEAP32[$372 >> 2] = $134; //@line 20401
         $373 = $ReallocAsyncCtx4 + 264 | 0; //@line 20402
         HEAP32[$373 >> 2] = $138; //@line 20403
         $374 = $ReallocAsyncCtx4 + 268 | 0; //@line 20404
         HEAP32[$374 >> 2] = $140; //@line 20405
         $375 = $ReallocAsyncCtx4 + 272 | 0; //@line 20406
         HEAP32[$375 >> 2] = $142; //@line 20407
         sp = STACKTOP; //@line 20408
         return;
        }
        HEAP32[___async_retval >> 2] = $307; //@line 20412
        ___async_unwind = 0; //@line 20413
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 20414
        $308 = $ReallocAsyncCtx4 + 4 | 0; //@line 20415
        HEAP32[$308 >> 2] = $2; //@line 20416
        $309 = $ReallocAsyncCtx4 + 8 | 0; //@line 20417
        HEAP32[$309 >> 2] = $4; //@line 20418
        $310 = $ReallocAsyncCtx4 + 12 | 0; //@line 20419
        HEAP32[$310 >> 2] = $6; //@line 20420
        $311 = $ReallocAsyncCtx4 + 16 | 0; //@line 20421
        HEAP32[$311 >> 2] = $8; //@line 20422
        $312 = $ReallocAsyncCtx4 + 20 | 0; //@line 20423
        HEAP32[$312 >> 2] = $10; //@line 20424
        $313 = $ReallocAsyncCtx4 + 24 | 0; //@line 20425
        HEAP32[$313 >> 2] = $12; //@line 20426
        $314 = $ReallocAsyncCtx4 + 28 | 0; //@line 20427
        HEAP32[$314 >> 2] = $14; //@line 20428
        $315 = $ReallocAsyncCtx4 + 32 | 0; //@line 20429
        HEAP32[$315 >> 2] = $16; //@line 20430
        $316 = $ReallocAsyncCtx4 + 36 | 0; //@line 20431
        HEAP32[$316 >> 2] = $20; //@line 20432
        $317 = $ReallocAsyncCtx4 + 40 | 0; //@line 20433
        HEAP32[$317 >> 2] = $22; //@line 20434
        $318 = $ReallocAsyncCtx4 + 44 | 0; //@line 20435
        HEAP32[$318 >> 2] = $24; //@line 20436
        $319 = $ReallocAsyncCtx4 + 48 | 0; //@line 20437
        HEAP32[$319 >> 2] = $26; //@line 20438
        $320 = $ReallocAsyncCtx4 + 52 | 0; //@line 20439
        HEAP32[$320 >> 2] = $28; //@line 20440
        $321 = $ReallocAsyncCtx4 + 56 | 0; //@line 20441
        HEAP32[$321 >> 2] = $30; //@line 20442
        $322 = $ReallocAsyncCtx4 + 60 | 0; //@line 20443
        HEAP32[$322 >> 2] = $32; //@line 20444
        $323 = $ReallocAsyncCtx4 + 64 | 0; //@line 20445
        HEAP32[$323 >> 2] = $34; //@line 20446
        $324 = $ReallocAsyncCtx4 + 68 | 0; //@line 20447
        HEAP32[$324 >> 2] = $297; //@line 20448
        $325 = $ReallocAsyncCtx4 + 72 | 0; //@line 20449
        HEAP32[$325 >> 2] = $38; //@line 20450
        $326 = $ReallocAsyncCtx4 + 76 | 0; //@line 20451
        HEAP32[$326 >> 2] = $36; //@line 20452
        $327 = $ReallocAsyncCtx4 + 80 | 0; //@line 20453
        HEAP32[$327 >> 2] = $40; //@line 20454
        $328 = $ReallocAsyncCtx4 + 84 | 0; //@line 20455
        HEAP32[$328 >> 2] = $60; //@line 20456
        $329 = $ReallocAsyncCtx4 + 88 | 0; //@line 20457
        HEAP32[$329 >> 2] = $44; //@line 20458
        $330 = $ReallocAsyncCtx4 + 92 | 0; //@line 20459
        HEAP32[$330 >> 2] = $46; //@line 20460
        $331 = $ReallocAsyncCtx4 + 96 | 0; //@line 20461
        HEAP32[$331 >> 2] = $50; //@line 20462
        $332 = $ReallocAsyncCtx4 + 100 | 0; //@line 20463
        HEAP32[$332 >> 2] = $52; //@line 20464
        $333 = $ReallocAsyncCtx4 + 104 | 0; //@line 20465
        HEAP32[$333 >> 2] = $54; //@line 20466
        $334 = $ReallocAsyncCtx4 + 108 | 0; //@line 20467
        HEAP32[$334 >> 2] = $56; //@line 20468
        $335 = $ReallocAsyncCtx4 + 112 | 0; //@line 20469
        HEAP32[$335 >> 2] = $58; //@line 20470
        $336 = $ReallocAsyncCtx4 + 116 | 0; //@line 20471
        HEAP32[$336 >> 2] = $62; //@line 20472
        $337 = $ReallocAsyncCtx4 + 120 | 0; //@line 20473
        HEAP32[$337 >> 2] = $64; //@line 20474
        $338 = $ReallocAsyncCtx4 + 124 | 0; //@line 20475
        HEAP32[$338 >> 2] = $66; //@line 20476
        $339 = $ReallocAsyncCtx4 + 128 | 0; //@line 20477
        HEAP32[$339 >> 2] = $$reg2mem62$0; //@line 20478
        $340 = $ReallocAsyncCtx4 + 132 | 0; //@line 20479
        HEAP32[$340 >> 2] = $70; //@line 20480
        $341 = $ReallocAsyncCtx4 + 136 | 0; //@line 20481
        HEAP32[$341 >> 2] = $72; //@line 20482
        $342 = $ReallocAsyncCtx4 + 140 | 0; //@line 20483
        HEAP32[$342 >> 2] = $74; //@line 20484
        $343 = $ReallocAsyncCtx4 + 144 | 0; //@line 20485
        HEAP32[$343 >> 2] = $76; //@line 20486
        $344 = $ReallocAsyncCtx4 + 148 | 0; //@line 20487
        HEAP32[$344 >> 2] = $80; //@line 20488
        $345 = $ReallocAsyncCtx4 + 152 | 0; //@line 20489
        HEAP32[$345 >> 2] = $82; //@line 20490
        $346 = $ReallocAsyncCtx4 + 156 | 0; //@line 20491
        HEAP32[$346 >> 2] = $84; //@line 20492
        $347 = $ReallocAsyncCtx4 + 160 | 0; //@line 20493
        HEAP32[$347 >> 2] = $86; //@line 20494
        $348 = $ReallocAsyncCtx4 + 164 | 0; //@line 20495
        HEAP32[$348 >> 2] = $88; //@line 20496
        $349 = $ReallocAsyncCtx4 + 168 | 0; //@line 20497
        HEAP32[$349 >> 2] = $90; //@line 20498
        $350 = $ReallocAsyncCtx4 + 172 | 0; //@line 20499
        HEAP32[$350 >> 2] = $92; //@line 20500
        $351 = $ReallocAsyncCtx4 + 176 | 0; //@line 20501
        HEAP32[$351 >> 2] = $94; //@line 20502
        $352 = $ReallocAsyncCtx4 + 180 | 0; //@line 20503
        HEAP32[$352 >> 2] = $96; //@line 20504
        $353 = $ReallocAsyncCtx4 + 184 | 0; //@line 20505
        HEAP32[$353 >> 2] = $98; //@line 20506
        $354 = $ReallocAsyncCtx4 + 188 | 0; //@line 20507
        HEAP32[$354 >> 2] = $100; //@line 20508
        $355 = $ReallocAsyncCtx4 + 192 | 0; //@line 20509
        HEAP32[$355 >> 2] = $102; //@line 20510
        $356 = $ReallocAsyncCtx4 + 196 | 0; //@line 20511
        HEAP32[$356 >> 2] = $104; //@line 20512
        $357 = $ReallocAsyncCtx4 + 200 | 0; //@line 20513
        HEAP32[$357 >> 2] = $106; //@line 20514
        $358 = $ReallocAsyncCtx4 + 204 | 0; //@line 20515
        HEAP32[$358 >> 2] = $108; //@line 20516
        $359 = $ReallocAsyncCtx4 + 208 | 0; //@line 20517
        HEAP32[$359 >> 2] = $110; //@line 20518
        $360 = $ReallocAsyncCtx4 + 212 | 0; //@line 20519
        HEAP32[$360 >> 2] = $112; //@line 20520
        $361 = $ReallocAsyncCtx4 + 216 | 0; //@line 20521
        HEAP32[$361 >> 2] = $305; //@line 20522
        $362 = $ReallocAsyncCtx4 + 220 | 0; //@line 20523
        HEAP32[$362 >> 2] = $114; //@line 20524
        $363 = $ReallocAsyncCtx4 + 224 | 0; //@line 20525
        HEAP32[$363 >> 2] = $116; //@line 20526
        $364 = $ReallocAsyncCtx4 + 228 | 0; //@line 20527
        HEAP32[$364 >> 2] = $118; //@line 20528
        $365 = $ReallocAsyncCtx4 + 232 | 0; //@line 20529
        HEAP32[$365 >> 2] = $120; //@line 20530
        $366 = $ReallocAsyncCtx4 + 236 | 0; //@line 20531
        HEAP32[$366 >> 2] = $122; //@line 20532
        $367 = $ReallocAsyncCtx4 + 240 | 0; //@line 20533
        HEAP32[$367 >> 2] = $124; //@line 20534
        $368 = $ReallocAsyncCtx4 + 244 | 0; //@line 20535
        HEAP32[$368 >> 2] = $126; //@line 20536
        $369 = $ReallocAsyncCtx4 + 248 | 0; //@line 20537
        HEAP32[$369 >> 2] = $128; //@line 20538
        $370 = $ReallocAsyncCtx4 + 252 | 0; //@line 20539
        HEAP32[$370 >> 2] = $130; //@line 20540
        $371 = $ReallocAsyncCtx4 + 256 | 0; //@line 20541
        HEAP32[$371 >> 2] = $132; //@line 20542
        $372 = $ReallocAsyncCtx4 + 260 | 0; //@line 20543
        HEAP32[$372 >> 2] = $134; //@line 20544
        $373 = $ReallocAsyncCtx4 + 264 | 0; //@line 20545
        HEAP32[$373 >> 2] = $138; //@line 20546
        $374 = $ReallocAsyncCtx4 + 268 | 0; //@line 20547
        HEAP32[$374 >> 2] = $140; //@line 20548
        $375 = $ReallocAsyncCtx4 + 272 | 0; //@line 20549
        HEAP32[$375 >> 2] = $142; //@line 20550
        sp = STACKTOP; //@line 20551
        return;
       }
      }
      _mbed_tracef(2, 3803, 4369, $126); //@line 20555
      break L2;
      break;
     }
    case 41:
     {
      $377 = HEAP32[$134 >> 2] | 0; //@line 20560
      $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 20562
      $379 = _sn_coap_parser_options_parse_multiple_options($2, $38, $$reg2mem73$0, $377 + 48 | 0, $377, 4, $$1202$i$reg2mem$0) | 0; //@line 20563
      if (___async) {
       HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 20566
       $380 = $ReallocAsyncCtx10 + 4 | 0; //@line 20567
       HEAP32[$380 >> 2] = $2; //@line 20568
       $381 = $ReallocAsyncCtx10 + 8 | 0; //@line 20569
       HEAP32[$381 >> 2] = $4; //@line 20570
       $382 = $ReallocAsyncCtx10 + 12 | 0; //@line 20571
       HEAP32[$382 >> 2] = $6; //@line 20572
       $383 = $ReallocAsyncCtx10 + 16 | 0; //@line 20573
       HEAP32[$383 >> 2] = $8; //@line 20574
       $384 = $ReallocAsyncCtx10 + 20 | 0; //@line 20575
       HEAP32[$384 >> 2] = $10; //@line 20576
       $385 = $ReallocAsyncCtx10 + 24 | 0; //@line 20577
       HEAP32[$385 >> 2] = $12; //@line 20578
       $386 = $ReallocAsyncCtx10 + 28 | 0; //@line 20579
       HEAP32[$386 >> 2] = $14; //@line 20580
       $387 = $ReallocAsyncCtx10 + 32 | 0; //@line 20581
       HEAP32[$387 >> 2] = $16; //@line 20582
       $388 = $ReallocAsyncCtx10 + 36 | 0; //@line 20583
       HEAP32[$388 >> 2] = $20; //@line 20584
       $389 = $ReallocAsyncCtx10 + 40 | 0; //@line 20585
       HEAP32[$389 >> 2] = $22; //@line 20586
       $390 = $ReallocAsyncCtx10 + 44 | 0; //@line 20587
       HEAP32[$390 >> 2] = $24; //@line 20588
       $391 = $ReallocAsyncCtx10 + 48 | 0; //@line 20589
       HEAP32[$391 >> 2] = $26; //@line 20590
       $392 = $ReallocAsyncCtx10 + 52 | 0; //@line 20591
       HEAP32[$392 >> 2] = $28; //@line 20592
       $393 = $ReallocAsyncCtx10 + 56 | 0; //@line 20593
       HEAP32[$393 >> 2] = $30; //@line 20594
       $394 = $ReallocAsyncCtx10 + 60 | 0; //@line 20595
       HEAP32[$394 >> 2] = $32; //@line 20596
       $395 = $ReallocAsyncCtx10 + 64 | 0; //@line 20597
       HEAP32[$395 >> 2] = $34; //@line 20598
       $396 = $ReallocAsyncCtx10 + 68 | 0; //@line 20599
       HEAP32[$396 >> 2] = $36; //@line 20600
       $397 = $ReallocAsyncCtx10 + 72 | 0; //@line 20601
       HEAP32[$397 >> 2] = $38; //@line 20602
       $398 = $ReallocAsyncCtx10 + 76 | 0; //@line 20603
       HEAP32[$398 >> 2] = $40; //@line 20604
       $399 = $ReallocAsyncCtx10 + 80 | 0; //@line 20605
       HEAP32[$399 >> 2] = $60; //@line 20606
       $400 = $ReallocAsyncCtx10 + 84 | 0; //@line 20607
       HEAP32[$400 >> 2] = $44; //@line 20608
       $401 = $ReallocAsyncCtx10 + 88 | 0; //@line 20609
       HEAP32[$401 >> 2] = $46; //@line 20610
       $402 = $ReallocAsyncCtx10 + 92 | 0; //@line 20611
       HEAP32[$402 >> 2] = $50; //@line 20612
       $403 = $ReallocAsyncCtx10 + 96 | 0; //@line 20613
       HEAP32[$403 >> 2] = $52; //@line 20614
       $404 = $ReallocAsyncCtx10 + 100 | 0; //@line 20615
       HEAP32[$404 >> 2] = $54; //@line 20616
       $405 = $ReallocAsyncCtx10 + 104 | 0; //@line 20617
       HEAP32[$405 >> 2] = $56; //@line 20618
       $406 = $ReallocAsyncCtx10 + 108 | 0; //@line 20619
       HEAP32[$406 >> 2] = $58; //@line 20620
       $407 = $ReallocAsyncCtx10 + 112 | 0; //@line 20621
       HEAP32[$407 >> 2] = $62; //@line 20622
       $408 = $ReallocAsyncCtx10 + 116 | 0; //@line 20623
       HEAP32[$408 >> 2] = $64; //@line 20624
       $409 = $ReallocAsyncCtx10 + 120 | 0; //@line 20625
       HEAP32[$409 >> 2] = $66; //@line 20626
       $410 = $ReallocAsyncCtx10 + 124 | 0; //@line 20627
       HEAP32[$410 >> 2] = $$reg2mem62$0; //@line 20628
       $411 = $ReallocAsyncCtx10 + 128 | 0; //@line 20629
       HEAP32[$411 >> 2] = $70; //@line 20630
       $412 = $ReallocAsyncCtx10 + 132 | 0; //@line 20631
       HEAP32[$412 >> 2] = $72; //@line 20632
       $413 = $ReallocAsyncCtx10 + 136 | 0; //@line 20633
       HEAP32[$413 >> 2] = $74; //@line 20634
       $414 = $ReallocAsyncCtx10 + 140 | 0; //@line 20635
       HEAP32[$414 >> 2] = $76; //@line 20636
       $415 = $ReallocAsyncCtx10 + 144 | 0; //@line 20637
       HEAP32[$415 >> 2] = $80; //@line 20638
       $416 = $ReallocAsyncCtx10 + 148 | 0; //@line 20639
       HEAP32[$416 >> 2] = $82; //@line 20640
       $417 = $ReallocAsyncCtx10 + 152 | 0; //@line 20641
       HEAP32[$417 >> 2] = $84; //@line 20642
       $418 = $ReallocAsyncCtx10 + 156 | 0; //@line 20643
       HEAP32[$418 >> 2] = $86; //@line 20644
       $419 = $ReallocAsyncCtx10 + 160 | 0; //@line 20645
       HEAP32[$419 >> 2] = $88; //@line 20646
       $420 = $ReallocAsyncCtx10 + 164 | 0; //@line 20647
       HEAP32[$420 >> 2] = $90; //@line 20648
       $421 = $ReallocAsyncCtx10 + 168 | 0; //@line 20649
       HEAP32[$421 >> 2] = $92; //@line 20650
       $422 = $ReallocAsyncCtx10 + 172 | 0; //@line 20651
       HEAP32[$422 >> 2] = $94; //@line 20652
       $423 = $ReallocAsyncCtx10 + 176 | 0; //@line 20653
       HEAP32[$423 >> 2] = $96; //@line 20654
       $424 = $ReallocAsyncCtx10 + 180 | 0; //@line 20655
       HEAP32[$424 >> 2] = $98; //@line 20656
       $425 = $ReallocAsyncCtx10 + 184 | 0; //@line 20657
       HEAP32[$425 >> 2] = $100; //@line 20658
       $426 = $ReallocAsyncCtx10 + 188 | 0; //@line 20659
       HEAP32[$426 >> 2] = $102; //@line 20660
       $427 = $ReallocAsyncCtx10 + 192 | 0; //@line 20661
       HEAP32[$427 >> 2] = $104; //@line 20662
       $428 = $ReallocAsyncCtx10 + 196 | 0; //@line 20663
       HEAP32[$428 >> 2] = $106; //@line 20664
       $429 = $ReallocAsyncCtx10 + 200 | 0; //@line 20665
       HEAP32[$429 >> 2] = $108; //@line 20666
       $430 = $ReallocAsyncCtx10 + 204 | 0; //@line 20667
       HEAP32[$430 >> 2] = $110; //@line 20668
       $431 = $ReallocAsyncCtx10 + 208 | 0; //@line 20669
       HEAP32[$431 >> 2] = $112; //@line 20670
       $432 = $ReallocAsyncCtx10 + 212 | 0; //@line 20671
       HEAP32[$432 >> 2] = $114; //@line 20672
       $433 = $ReallocAsyncCtx10 + 216 | 0; //@line 20673
       HEAP32[$433 >> 2] = $116; //@line 20674
       $434 = $ReallocAsyncCtx10 + 220 | 0; //@line 20675
       HEAP32[$434 >> 2] = $118; //@line 20676
       $435 = $ReallocAsyncCtx10 + 224 | 0; //@line 20677
       HEAP32[$435 >> 2] = $120; //@line 20678
       $436 = $ReallocAsyncCtx10 + 228 | 0; //@line 20679
       HEAP32[$436 >> 2] = $122; //@line 20680
       $437 = $ReallocAsyncCtx10 + 232 | 0; //@line 20681
       HEAP32[$437 >> 2] = $124; //@line 20682
       $438 = $ReallocAsyncCtx10 + 236 | 0; //@line 20683
       HEAP32[$438 >> 2] = $126; //@line 20684
       $439 = $ReallocAsyncCtx10 + 240 | 0; //@line 20685
       HEAP32[$439 >> 2] = $128; //@line 20686
       $440 = $ReallocAsyncCtx10 + 244 | 0; //@line 20687
       HEAP32[$440 >> 2] = $130; //@line 20688
       $441 = $ReallocAsyncCtx10 + 248 | 0; //@line 20689
       HEAP32[$441 >> 2] = $132; //@line 20690
       $442 = $ReallocAsyncCtx10 + 252 | 0; //@line 20691
       HEAP32[$442 >> 2] = $134; //@line 20692
       $443 = $ReallocAsyncCtx10 + 256 | 0; //@line 20693
       HEAP32[$443 >> 2] = $138; //@line 20694
       $444 = $ReallocAsyncCtx10 + 260 | 0; //@line 20695
       HEAP32[$444 >> 2] = $140; //@line 20696
       $445 = $ReallocAsyncCtx10 + 264 | 0; //@line 20697
       HEAP32[$445 >> 2] = $142; //@line 20698
       sp = STACKTOP; //@line 20699
       return;
      }
      HEAP8[___async_retval >> 0] = $379; //@line 20703
      ___async_unwind = 0; //@line 20704
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 20705
      $380 = $ReallocAsyncCtx10 + 4 | 0; //@line 20706
      HEAP32[$380 >> 2] = $2; //@line 20707
      $381 = $ReallocAsyncCtx10 + 8 | 0; //@line 20708
      HEAP32[$381 >> 2] = $4; //@line 20709
      $382 = $ReallocAsyncCtx10 + 12 | 0; //@line 20710
      HEAP32[$382 >> 2] = $6; //@line 20711
      $383 = $ReallocAsyncCtx10 + 16 | 0; //@line 20712
      HEAP32[$383 >> 2] = $8; //@line 20713
      $384 = $ReallocAsyncCtx10 + 20 | 0; //@line 20714
      HEAP32[$384 >> 2] = $10; //@line 20715
      $385 = $ReallocAsyncCtx10 + 24 | 0; //@line 20716
      HEAP32[$385 >> 2] = $12; //@line 20717
      $386 = $ReallocAsyncCtx10 + 28 | 0; //@line 20718
      HEAP32[$386 >> 2] = $14; //@line 20719
      $387 = $ReallocAsyncCtx10 + 32 | 0; //@line 20720
      HEAP32[$387 >> 2] = $16; //@line 20721
      $388 = $ReallocAsyncCtx10 + 36 | 0; //@line 20722
      HEAP32[$388 >> 2] = $20; //@line 20723
      $389 = $ReallocAsyncCtx10 + 40 | 0; //@line 20724
      HEAP32[$389 >> 2] = $22; //@line 20725
      $390 = $ReallocAsyncCtx10 + 44 | 0; //@line 20726
      HEAP32[$390 >> 2] = $24; //@line 20727
      $391 = $ReallocAsyncCtx10 + 48 | 0; //@line 20728
      HEAP32[$391 >> 2] = $26; //@line 20729
      $392 = $ReallocAsyncCtx10 + 52 | 0; //@line 20730
      HEAP32[$392 >> 2] = $28; //@line 20731
      $393 = $ReallocAsyncCtx10 + 56 | 0; //@line 20732
      HEAP32[$393 >> 2] = $30; //@line 20733
      $394 = $ReallocAsyncCtx10 + 60 | 0; //@line 20734
      HEAP32[$394 >> 2] = $32; //@line 20735
      $395 = $ReallocAsyncCtx10 + 64 | 0; //@line 20736
      HEAP32[$395 >> 2] = $34; //@line 20737
      $396 = $ReallocAsyncCtx10 + 68 | 0; //@line 20738
      HEAP32[$396 >> 2] = $36; //@line 20739
      $397 = $ReallocAsyncCtx10 + 72 | 0; //@line 20740
      HEAP32[$397 >> 2] = $38; //@line 20741
      $398 = $ReallocAsyncCtx10 + 76 | 0; //@line 20742
      HEAP32[$398 >> 2] = $40; //@line 20743
      $399 = $ReallocAsyncCtx10 + 80 | 0; //@line 20744
      HEAP32[$399 >> 2] = $60; //@line 20745
      $400 = $ReallocAsyncCtx10 + 84 | 0; //@line 20746
      HEAP32[$400 >> 2] = $44; //@line 20747
      $401 = $ReallocAsyncCtx10 + 88 | 0; //@line 20748
      HEAP32[$401 >> 2] = $46; //@line 20749
      $402 = $ReallocAsyncCtx10 + 92 | 0; //@line 20750
      HEAP32[$402 >> 2] = $50; //@line 20751
      $403 = $ReallocAsyncCtx10 + 96 | 0; //@line 20752
      HEAP32[$403 >> 2] = $52; //@line 20753
      $404 = $ReallocAsyncCtx10 + 100 | 0; //@line 20754
      HEAP32[$404 >> 2] = $54; //@line 20755
      $405 = $ReallocAsyncCtx10 + 104 | 0; //@line 20756
      HEAP32[$405 >> 2] = $56; //@line 20757
      $406 = $ReallocAsyncCtx10 + 108 | 0; //@line 20758
      HEAP32[$406 >> 2] = $58; //@line 20759
      $407 = $ReallocAsyncCtx10 + 112 | 0; //@line 20760
      HEAP32[$407 >> 2] = $62; //@line 20761
      $408 = $ReallocAsyncCtx10 + 116 | 0; //@line 20762
      HEAP32[$408 >> 2] = $64; //@line 20763
      $409 = $ReallocAsyncCtx10 + 120 | 0; //@line 20764
      HEAP32[$409 >> 2] = $66; //@line 20765
      $410 = $ReallocAsyncCtx10 + 124 | 0; //@line 20766
      HEAP32[$410 >> 2] = $$reg2mem62$0; //@line 20767
      $411 = $ReallocAsyncCtx10 + 128 | 0; //@line 20768
      HEAP32[$411 >> 2] = $70; //@line 20769
      $412 = $ReallocAsyncCtx10 + 132 | 0; //@line 20770
      HEAP32[$412 >> 2] = $72; //@line 20771
      $413 = $ReallocAsyncCtx10 + 136 | 0; //@line 20772
      HEAP32[$413 >> 2] = $74; //@line 20773
      $414 = $ReallocAsyncCtx10 + 140 | 0; //@line 20774
      HEAP32[$414 >> 2] = $76; //@line 20775
      $415 = $ReallocAsyncCtx10 + 144 | 0; //@line 20776
      HEAP32[$415 >> 2] = $80; //@line 20777
      $416 = $ReallocAsyncCtx10 + 148 | 0; //@line 20778
      HEAP32[$416 >> 2] = $82; //@line 20779
      $417 = $ReallocAsyncCtx10 + 152 | 0; //@line 20780
      HEAP32[$417 >> 2] = $84; //@line 20781
      $418 = $ReallocAsyncCtx10 + 156 | 0; //@line 20782
      HEAP32[$418 >> 2] = $86; //@line 20783
      $419 = $ReallocAsyncCtx10 + 160 | 0; //@line 20784
      HEAP32[$419 >> 2] = $88; //@line 20785
      $420 = $ReallocAsyncCtx10 + 164 | 0; //@line 20786
      HEAP32[$420 >> 2] = $90; //@line 20787
      $421 = $ReallocAsyncCtx10 + 168 | 0; //@line 20788
      HEAP32[$421 >> 2] = $92; //@line 20789
      $422 = $ReallocAsyncCtx10 + 172 | 0; //@line 20790
      HEAP32[$422 >> 2] = $94; //@line 20791
      $423 = $ReallocAsyncCtx10 + 176 | 0; //@line 20792
      HEAP32[$423 >> 2] = $96; //@line 20793
      $424 = $ReallocAsyncCtx10 + 180 | 0; //@line 20794
      HEAP32[$424 >> 2] = $98; //@line 20795
      $425 = $ReallocAsyncCtx10 + 184 | 0; //@line 20796
      HEAP32[$425 >> 2] = $100; //@line 20797
      $426 = $ReallocAsyncCtx10 + 188 | 0; //@line 20798
      HEAP32[$426 >> 2] = $102; //@line 20799
      $427 = $ReallocAsyncCtx10 + 192 | 0; //@line 20800
      HEAP32[$427 >> 2] = $104; //@line 20801
      $428 = $ReallocAsyncCtx10 + 196 | 0; //@line 20802
      HEAP32[$428 >> 2] = $106; //@line 20803
      $429 = $ReallocAsyncCtx10 + 200 | 0; //@line 20804
      HEAP32[$429 >> 2] = $108; //@line 20805
      $430 = $ReallocAsyncCtx10 + 204 | 0; //@line 20806
      HEAP32[$430 >> 2] = $110; //@line 20807
      $431 = $ReallocAsyncCtx10 + 208 | 0; //@line 20808
      HEAP32[$431 >> 2] = $112; //@line 20809
      $432 = $ReallocAsyncCtx10 + 212 | 0; //@line 20810
      HEAP32[$432 >> 2] = $114; //@line 20811
      $433 = $ReallocAsyncCtx10 + 216 | 0; //@line 20812
      HEAP32[$433 >> 2] = $116; //@line 20813
      $434 = $ReallocAsyncCtx10 + 220 | 0; //@line 20814
      HEAP32[$434 >> 2] = $118; //@line 20815
      $435 = $ReallocAsyncCtx10 + 224 | 0; //@line 20816
      HEAP32[$435 >> 2] = $120; //@line 20817
      $436 = $ReallocAsyncCtx10 + 228 | 0; //@line 20818
      HEAP32[$436 >> 2] = $122; //@line 20819
      $437 = $ReallocAsyncCtx10 + 232 | 0; //@line 20820
      HEAP32[$437 >> 2] = $124; //@line 20821
      $438 = $ReallocAsyncCtx10 + 236 | 0; //@line 20822
      HEAP32[$438 >> 2] = $126; //@line 20823
      $439 = $ReallocAsyncCtx10 + 240 | 0; //@line 20824
      HEAP32[$439 >> 2] = $128; //@line 20825
      $440 = $ReallocAsyncCtx10 + 244 | 0; //@line 20826
      HEAP32[$440 >> 2] = $130; //@line 20827
      $441 = $ReallocAsyncCtx10 + 248 | 0; //@line 20828
      HEAP32[$441 >> 2] = $132; //@line 20829
      $442 = $ReallocAsyncCtx10 + 252 | 0; //@line 20830
      HEAP32[$442 >> 2] = $134; //@line 20831
      $443 = $ReallocAsyncCtx10 + 256 | 0; //@line 20832
      HEAP32[$443 >> 2] = $138; //@line 20833
      $444 = $ReallocAsyncCtx10 + 260 | 0; //@line 20834
      HEAP32[$444 >> 2] = $140; //@line 20835
      $445 = $ReallocAsyncCtx10 + 264 | 0; //@line 20836
      HEAP32[$445 >> 2] = $142; //@line 20837
      sp = STACKTOP; //@line 20838
      return;
     }
    case 44:
     {
      $447 = $$1202$in$i$reg2mem$0 & 65535; //@line 20843
      if (($$1202$i$reg2mem$0 + -1 & 65535) <= 254) {
       $450 = HEAP32[$134 >> 2] | 0; //@line 20847
       if (!(HEAP32[$450 + 52 >> 2] | 0)) {
        HEAP16[$450 + 4 >> 1] = $$1202$i$reg2mem$0; //@line 20853
        $455 = $$reg2mem$0 + 1 | 0; //@line 20854
        HEAP32[$38 >> 2] = $455; //@line 20855
        $456 = HEAP32[$138 >> 2] | 0; //@line 20856
        $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 20857
        $457 = FUNCTION_TABLE_ii[$456 & 31]($$1202$i$reg2mem$0) | 0; //@line 20858
        if (___async) {
         HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 20861
         $458 = $ReallocAsyncCtx5 + 4 | 0; //@line 20862
         HEAP32[$458 >> 2] = $2; //@line 20863
         $459 = $ReallocAsyncCtx5 + 8 | 0; //@line 20864
         HEAP32[$459 >> 2] = $4; //@line 20865
         $460 = $ReallocAsyncCtx5 + 12 | 0; //@line 20866
         HEAP32[$460 >> 2] = $6; //@line 20867
         $461 = $ReallocAsyncCtx5 + 16 | 0; //@line 20868
         HEAP32[$461 >> 2] = $8; //@line 20869
         $462 = $ReallocAsyncCtx5 + 20 | 0; //@line 20870
         HEAP32[$462 >> 2] = $10; //@line 20871
         $463 = $ReallocAsyncCtx5 + 24 | 0; //@line 20872
         HEAP32[$463 >> 2] = $12; //@line 20873
         $464 = $ReallocAsyncCtx5 + 28 | 0; //@line 20874
         HEAP32[$464 >> 2] = $14; //@line 20875
         $465 = $ReallocAsyncCtx5 + 32 | 0; //@line 20876
         HEAP32[$465 >> 2] = $16; //@line 20877
         $466 = $ReallocAsyncCtx5 + 36 | 0; //@line 20878
         HEAP32[$466 >> 2] = $20; //@line 20879
         $467 = $ReallocAsyncCtx5 + 40 | 0; //@line 20880
         HEAP32[$467 >> 2] = $22; //@line 20881
         $468 = $ReallocAsyncCtx5 + 44 | 0; //@line 20882
         HEAP32[$468 >> 2] = $24; //@line 20883
         $469 = $ReallocAsyncCtx5 + 48 | 0; //@line 20884
         HEAP32[$469 >> 2] = $26; //@line 20885
         $470 = $ReallocAsyncCtx5 + 52 | 0; //@line 20886
         HEAP32[$470 >> 2] = $28; //@line 20887
         $471 = $ReallocAsyncCtx5 + 56 | 0; //@line 20888
         HEAP32[$471 >> 2] = $30; //@line 20889
         $472 = $ReallocAsyncCtx5 + 60 | 0; //@line 20890
         HEAP32[$472 >> 2] = $32; //@line 20891
         $473 = $ReallocAsyncCtx5 + 64 | 0; //@line 20892
         HEAP32[$473 >> 2] = $34; //@line 20893
         $474 = $ReallocAsyncCtx5 + 68 | 0; //@line 20894
         HEAP32[$474 >> 2] = $36; //@line 20895
         $475 = $ReallocAsyncCtx5 + 72 | 0; //@line 20896
         HEAP32[$475 >> 2] = $38; //@line 20897
         $476 = $ReallocAsyncCtx5 + 76 | 0; //@line 20898
         HEAP32[$476 >> 2] = $40; //@line 20899
         $477 = $ReallocAsyncCtx5 + 80 | 0; //@line 20900
         HEAP32[$477 >> 2] = $60; //@line 20901
         $478 = $ReallocAsyncCtx5 + 84 | 0; //@line 20902
         HEAP32[$478 >> 2] = $44; //@line 20903
         $479 = $ReallocAsyncCtx5 + 88 | 0; //@line 20904
         HEAP32[$479 >> 2] = $46; //@line 20905
         $480 = $ReallocAsyncCtx5 + 92 | 0; //@line 20906
         HEAP32[$480 >> 2] = $50; //@line 20907
         $481 = $ReallocAsyncCtx5 + 96 | 0; //@line 20908
         HEAP32[$481 >> 2] = $52; //@line 20909
         $482 = $ReallocAsyncCtx5 + 100 | 0; //@line 20910
         HEAP32[$482 >> 2] = $54; //@line 20911
         $483 = $ReallocAsyncCtx5 + 104 | 0; //@line 20912
         HEAP32[$483 >> 2] = $56; //@line 20913
         $484 = $ReallocAsyncCtx5 + 108 | 0; //@line 20914
         HEAP32[$484 >> 2] = $58; //@line 20915
         $485 = $ReallocAsyncCtx5 + 112 | 0; //@line 20916
         HEAP32[$485 >> 2] = $62; //@line 20917
         $486 = $ReallocAsyncCtx5 + 116 | 0; //@line 20918
         HEAP32[$486 >> 2] = $64; //@line 20919
         $487 = $ReallocAsyncCtx5 + 120 | 0; //@line 20920
         HEAP32[$487 >> 2] = $66; //@line 20921
         $488 = $ReallocAsyncCtx5 + 124 | 0; //@line 20922
         HEAP32[$488 >> 2] = $$reg2mem62$0; //@line 20923
         $489 = $ReallocAsyncCtx5 + 128 | 0; //@line 20924
         HEAP32[$489 >> 2] = $70; //@line 20925
         $490 = $ReallocAsyncCtx5 + 132 | 0; //@line 20926
         HEAP32[$490 >> 2] = $72; //@line 20927
         $491 = $ReallocAsyncCtx5 + 136 | 0; //@line 20928
         HEAP32[$491 >> 2] = $74; //@line 20929
         $492 = $ReallocAsyncCtx5 + 140 | 0; //@line 20930
         HEAP32[$492 >> 2] = $76; //@line 20931
         $493 = $ReallocAsyncCtx5 + 144 | 0; //@line 20932
         HEAP32[$493 >> 2] = $80; //@line 20933
         $494 = $ReallocAsyncCtx5 + 148 | 0; //@line 20934
         HEAP32[$494 >> 2] = $82; //@line 20935
         $495 = $ReallocAsyncCtx5 + 152 | 0; //@line 20936
         HEAP32[$495 >> 2] = $84; //@line 20937
         $496 = $ReallocAsyncCtx5 + 156 | 0; //@line 20938
         HEAP32[$496 >> 2] = $86; //@line 20939
         $497 = $ReallocAsyncCtx5 + 160 | 0; //@line 20940
         HEAP32[$497 >> 2] = $88; //@line 20941
         $498 = $ReallocAsyncCtx5 + 164 | 0; //@line 20942
         HEAP32[$498 >> 2] = $90; //@line 20943
         $499 = $ReallocAsyncCtx5 + 168 | 0; //@line 20944
         HEAP32[$499 >> 2] = $92; //@line 20945
         $500 = $ReallocAsyncCtx5 + 172 | 0; //@line 20946
         HEAP32[$500 >> 2] = $94; //@line 20947
         $501 = $ReallocAsyncCtx5 + 176 | 0; //@line 20948
         HEAP32[$501 >> 2] = $96; //@line 20949
         $502 = $ReallocAsyncCtx5 + 180 | 0; //@line 20950
         HEAP32[$502 >> 2] = $98; //@line 20951
         $503 = $ReallocAsyncCtx5 + 184 | 0; //@line 20952
         HEAP32[$503 >> 2] = $100; //@line 20953
         $504 = $ReallocAsyncCtx5 + 188 | 0; //@line 20954
         HEAP32[$504 >> 2] = $102; //@line 20955
         $505 = $ReallocAsyncCtx5 + 192 | 0; //@line 20956
         HEAP32[$505 >> 2] = $447; //@line 20957
         $506 = $ReallocAsyncCtx5 + 196 | 0; //@line 20958
         HEAP32[$506 >> 2] = $104; //@line 20959
         $507 = $ReallocAsyncCtx5 + 200 | 0; //@line 20960
         HEAP32[$507 >> 2] = $106; //@line 20961
         $508 = $ReallocAsyncCtx5 + 204 | 0; //@line 20962
         HEAP32[$508 >> 2] = $455; //@line 20963
         $509 = $ReallocAsyncCtx5 + 208 | 0; //@line 20964
         HEAP32[$509 >> 2] = $108; //@line 20965
         $510 = $ReallocAsyncCtx5 + 212 | 0; //@line 20966
         HEAP32[$510 >> 2] = $110; //@line 20967
         $511 = $ReallocAsyncCtx5 + 216 | 0; //@line 20968
         HEAP32[$511 >> 2] = $112; //@line 20969
         $512 = $ReallocAsyncCtx5 + 220 | 0; //@line 20970
         HEAP32[$512 >> 2] = $114; //@line 20971
         $513 = $ReallocAsyncCtx5 + 224 | 0; //@line 20972
         HEAP32[$513 >> 2] = $116; //@line 20973
         $514 = $ReallocAsyncCtx5 + 228 | 0; //@line 20974
         HEAP32[$514 >> 2] = $118; //@line 20975
         $515 = $ReallocAsyncCtx5 + 232 | 0; //@line 20976
         HEAP32[$515 >> 2] = $120; //@line 20977
         $516 = $ReallocAsyncCtx5 + 236 | 0; //@line 20978
         HEAP32[$516 >> 2] = $122; //@line 20979
         $517 = $ReallocAsyncCtx5 + 240 | 0; //@line 20980
         HEAP32[$517 >> 2] = $124; //@line 20981
         $518 = $ReallocAsyncCtx5 + 244 | 0; //@line 20982
         HEAP32[$518 >> 2] = $126; //@line 20983
         $519 = $ReallocAsyncCtx5 + 248 | 0; //@line 20984
         HEAP32[$519 >> 2] = $128; //@line 20985
         $520 = $ReallocAsyncCtx5 + 252 | 0; //@line 20986
         HEAP32[$520 >> 2] = $130; //@line 20987
         $521 = $ReallocAsyncCtx5 + 256 | 0; //@line 20988
         HEAP32[$521 >> 2] = $132; //@line 20989
         $522 = $ReallocAsyncCtx5 + 260 | 0; //@line 20990
         HEAP32[$522 >> 2] = $134; //@line 20991
         $523 = $ReallocAsyncCtx5 + 264 | 0; //@line 20992
         HEAP32[$523 >> 2] = $138; //@line 20993
         $524 = $ReallocAsyncCtx5 + 268 | 0; //@line 20994
         HEAP32[$524 >> 2] = $140; //@line 20995
         $525 = $ReallocAsyncCtx5 + 272 | 0; //@line 20996
         HEAP32[$525 >> 2] = $142; //@line 20997
         sp = STACKTOP; //@line 20998
         return;
        }
        HEAP32[___async_retval >> 2] = $457; //@line 21002
        ___async_unwind = 0; //@line 21003
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 21004
        $458 = $ReallocAsyncCtx5 + 4 | 0; //@line 21005
        HEAP32[$458 >> 2] = $2; //@line 21006
        $459 = $ReallocAsyncCtx5 + 8 | 0; //@line 21007
        HEAP32[$459 >> 2] = $4; //@line 21008
        $460 = $ReallocAsyncCtx5 + 12 | 0; //@line 21009
        HEAP32[$460 >> 2] = $6; //@line 21010
        $461 = $ReallocAsyncCtx5 + 16 | 0; //@line 21011
        HEAP32[$461 >> 2] = $8; //@line 21012
        $462 = $ReallocAsyncCtx5 + 20 | 0; //@line 21013
        HEAP32[$462 >> 2] = $10; //@line 21014
        $463 = $ReallocAsyncCtx5 + 24 | 0; //@line 21015
        HEAP32[$463 >> 2] = $12; //@line 21016
        $464 = $ReallocAsyncCtx5 + 28 | 0; //@line 21017
        HEAP32[$464 >> 2] = $14; //@line 21018
        $465 = $ReallocAsyncCtx5 + 32 | 0; //@line 21019
        HEAP32[$465 >> 2] = $16; //@line 21020
        $466 = $ReallocAsyncCtx5 + 36 | 0; //@line 21021
        HEAP32[$466 >> 2] = $20; //@line 21022
        $467 = $ReallocAsyncCtx5 + 40 | 0; //@line 21023
        HEAP32[$467 >> 2] = $22; //@line 21024
        $468 = $ReallocAsyncCtx5 + 44 | 0; //@line 21025
        HEAP32[$468 >> 2] = $24; //@line 21026
        $469 = $ReallocAsyncCtx5 + 48 | 0; //@line 21027
        HEAP32[$469 >> 2] = $26; //@line 21028
        $470 = $ReallocAsyncCtx5 + 52 | 0; //@line 21029
        HEAP32[$470 >> 2] = $28; //@line 21030
        $471 = $ReallocAsyncCtx5 + 56 | 0; //@line 21031
        HEAP32[$471 >> 2] = $30; //@line 21032
        $472 = $ReallocAsyncCtx5 + 60 | 0; //@line 21033
        HEAP32[$472 >> 2] = $32; //@line 21034
        $473 = $ReallocAsyncCtx5 + 64 | 0; //@line 21035
        HEAP32[$473 >> 2] = $34; //@line 21036
        $474 = $ReallocAsyncCtx5 + 68 | 0; //@line 21037
        HEAP32[$474 >> 2] = $36; //@line 21038
        $475 = $ReallocAsyncCtx5 + 72 | 0; //@line 21039
        HEAP32[$475 >> 2] = $38; //@line 21040
        $476 = $ReallocAsyncCtx5 + 76 | 0; //@line 21041
        HEAP32[$476 >> 2] = $40; //@line 21042
        $477 = $ReallocAsyncCtx5 + 80 | 0; //@line 21043
        HEAP32[$477 >> 2] = $60; //@line 21044
        $478 = $ReallocAsyncCtx5 + 84 | 0; //@line 21045
        HEAP32[$478 >> 2] = $44; //@line 21046
        $479 = $ReallocAsyncCtx5 + 88 | 0; //@line 21047
        HEAP32[$479 >> 2] = $46; //@line 21048
        $480 = $ReallocAsyncCtx5 + 92 | 0; //@line 21049
        HEAP32[$480 >> 2] = $50; //@line 21050
        $481 = $ReallocAsyncCtx5 + 96 | 0; //@line 21051
        HEAP32[$481 >> 2] = $52; //@line 21052
        $482 = $ReallocAsyncCtx5 + 100 | 0; //@line 21053
        HEAP32[$482 >> 2] = $54; //@line 21054
        $483 = $ReallocAsyncCtx5 + 104 | 0; //@line 21055
        HEAP32[$483 >> 2] = $56; //@line 21056
        $484 = $ReallocAsyncCtx5 + 108 | 0; //@line 21057
        HEAP32[$484 >> 2] = $58; //@line 21058
        $485 = $ReallocAsyncCtx5 + 112 | 0; //@line 21059
        HEAP32[$485 >> 2] = $62; //@line 21060
        $486 = $ReallocAsyncCtx5 + 116 | 0; //@line 21061
        HEAP32[$486 >> 2] = $64; //@line 21062
        $487 = $ReallocAsyncCtx5 + 120 | 0; //@line 21063
        HEAP32[$487 >> 2] = $66; //@line 21064
        $488 = $ReallocAsyncCtx5 + 124 | 0; //@line 21065
        HEAP32[$488 >> 2] = $$reg2mem62$0; //@line 21066
        $489 = $ReallocAsyncCtx5 + 128 | 0; //@line 21067
        HEAP32[$489 >> 2] = $70; //@line 21068
        $490 = $ReallocAsyncCtx5 + 132 | 0; //@line 21069
        HEAP32[$490 >> 2] = $72; //@line 21070
        $491 = $ReallocAsyncCtx5 + 136 | 0; //@line 21071
        HEAP32[$491 >> 2] = $74; //@line 21072
        $492 = $ReallocAsyncCtx5 + 140 | 0; //@line 21073
        HEAP32[$492 >> 2] = $76; //@line 21074
        $493 = $ReallocAsyncCtx5 + 144 | 0; //@line 21075
        HEAP32[$493 >> 2] = $80; //@line 21076
        $494 = $ReallocAsyncCtx5 + 148 | 0; //@line 21077
        HEAP32[$494 >> 2] = $82; //@line 21078
        $495 = $ReallocAsyncCtx5 + 152 | 0; //@line 21079
        HEAP32[$495 >> 2] = $84; //@line 21080
        $496 = $ReallocAsyncCtx5 + 156 | 0; //@line 21081
        HEAP32[$496 >> 2] = $86; //@line 21082
        $497 = $ReallocAsyncCtx5 + 160 | 0; //@line 21083
        HEAP32[$497 >> 2] = $88; //@line 21084
        $498 = $ReallocAsyncCtx5 + 164 | 0; //@line 21085
        HEAP32[$498 >> 2] = $90; //@line 21086
        $499 = $ReallocAsyncCtx5 + 168 | 0; //@line 21087
        HEAP32[$499 >> 2] = $92; //@line 21088
        $500 = $ReallocAsyncCtx5 + 172 | 0; //@line 21089
        HEAP32[$500 >> 2] = $94; //@line 21090
        $501 = $ReallocAsyncCtx5 + 176 | 0; //@line 21091
        HEAP32[$501 >> 2] = $96; //@line 21092
        $502 = $ReallocAsyncCtx5 + 180 | 0; //@line 21093
        HEAP32[$502 >> 2] = $98; //@line 21094
        $503 = $ReallocAsyncCtx5 + 184 | 0; //@line 21095
        HEAP32[$503 >> 2] = $100; //@line 21096
        $504 = $ReallocAsyncCtx5 + 188 | 0; //@line 21097
        HEAP32[$504 >> 2] = $102; //@line 21098
        $505 = $ReallocAsyncCtx5 + 192 | 0; //@line 21099
        HEAP32[$505 >> 2] = $447; //@line 21100
        $506 = $ReallocAsyncCtx5 + 196 | 0; //@line 21101
        HEAP32[$506 >> 2] = $104; //@line 21102
        $507 = $ReallocAsyncCtx5 + 200 | 0; //@line 21103
        HEAP32[$507 >> 2] = $106; //@line 21104
        $508 = $ReallocAsyncCtx5 + 204 | 0; //@line 21105
        HEAP32[$508 >> 2] = $455; //@line 21106
        $509 = $ReallocAsyncCtx5 + 208 | 0; //@line 21107
        HEAP32[$509 >> 2] = $108; //@line 21108
        $510 = $ReallocAsyncCtx5 + 212 | 0; //@line 21109
        HEAP32[$510 >> 2] = $110; //@line 21110
        $511 = $ReallocAsyncCtx5 + 216 | 0; //@line 21111
        HEAP32[$511 >> 2] = $112; //@line 21112
        $512 = $ReallocAsyncCtx5 + 220 | 0; //@line 21113
        HEAP32[$512 >> 2] = $114; //@line 21114
        $513 = $ReallocAsyncCtx5 + 224 | 0; //@line 21115
        HEAP32[$513 >> 2] = $116; //@line 21116
        $514 = $ReallocAsyncCtx5 + 228 | 0; //@line 21117
        HEAP32[$514 >> 2] = $118; //@line 21118
        $515 = $ReallocAsyncCtx5 + 232 | 0; //@line 21119
        HEAP32[$515 >> 2] = $120; //@line 21120
        $516 = $ReallocAsyncCtx5 + 236 | 0; //@line 21121
        HEAP32[$516 >> 2] = $122; //@line 21122
        $517 = $ReallocAsyncCtx5 + 240 | 0; //@line 21123
        HEAP32[$517 >> 2] = $124; //@line 21124
        $518 = $ReallocAsyncCtx5 + 244 | 0; //@line 21125
        HEAP32[$518 >> 2] = $126; //@line 21126
        $519 = $ReallocAsyncCtx5 + 248 | 0; //@line 21127
        HEAP32[$519 >> 2] = $128; //@line 21128
        $520 = $ReallocAsyncCtx5 + 252 | 0; //@line 21129
        HEAP32[$520 >> 2] = $130; //@line 21130
        $521 = $ReallocAsyncCtx5 + 256 | 0; //@line 21131
        HEAP32[$521 >> 2] = $132; //@line 21132
        $522 = $ReallocAsyncCtx5 + 260 | 0; //@line 21133
        HEAP32[$522 >> 2] = $134; //@line 21134
        $523 = $ReallocAsyncCtx5 + 264 | 0; //@line 21135
        HEAP32[$523 >> 2] = $138; //@line 21136
        $524 = $ReallocAsyncCtx5 + 268 | 0; //@line 21137
        HEAP32[$524 >> 2] = $140; //@line 21138
        $525 = $ReallocAsyncCtx5 + 272 | 0; //@line 21139
        HEAP32[$525 >> 2] = $142; //@line 21140
        sp = STACKTOP; //@line 21141
        return;
       }
      }
      _mbed_tracef(2, 3803, 4564, $122); //@line 21145
      break L2;
      break;
     }
    case 50:
     {
      $527 = HEAP32[$134 >> 2] | 0; //@line 21150
      $528 = $527 + 56 | 0; //@line 21151
      if (HEAP32[$528 >> 2] | 0) {
       _mbed_tracef(2, 3803, 4698, $102); //@line 21155
       break L2;
      }
      $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 21159
      $532 = _sn_coap_parser_options_parse_multiple_options($2, $38, $$reg2mem73$0, $528, $527 + 6 | 0, 8, $$1202$i$reg2mem$0) | 0; //@line 21160
      if (___async) {
       HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 21163
       $533 = $ReallocAsyncCtx9 + 4 | 0; //@line 21164
       HEAP32[$533 >> 2] = $2; //@line 21165
       $534 = $ReallocAsyncCtx9 + 8 | 0; //@line 21166
       HEAP32[$534 >> 2] = $4; //@line 21167
       $535 = $ReallocAsyncCtx9 + 12 | 0; //@line 21168
       HEAP32[$535 >> 2] = $6; //@line 21169
       $536 = $ReallocAsyncCtx9 + 16 | 0; //@line 21170
       HEAP32[$536 >> 2] = $8; //@line 21171
       $537 = $ReallocAsyncCtx9 + 20 | 0; //@line 21172
       HEAP32[$537 >> 2] = $10; //@line 21173
       $538 = $ReallocAsyncCtx9 + 24 | 0; //@line 21174
       HEAP32[$538 >> 2] = $12; //@line 21175
       $539 = $ReallocAsyncCtx9 + 28 | 0; //@line 21176
       HEAP32[$539 >> 2] = $14; //@line 21177
       $540 = $ReallocAsyncCtx9 + 32 | 0; //@line 21178
       HEAP32[$540 >> 2] = $16; //@line 21179
       $541 = $ReallocAsyncCtx9 + 36 | 0; //@line 21180
       HEAP32[$541 >> 2] = $20; //@line 21181
       $542 = $ReallocAsyncCtx9 + 40 | 0; //@line 21182
       HEAP32[$542 >> 2] = $22; //@line 21183
       $543 = $ReallocAsyncCtx9 + 44 | 0; //@line 21184
       HEAP32[$543 >> 2] = $24; //@line 21185
       $544 = $ReallocAsyncCtx9 + 48 | 0; //@line 21186
       HEAP32[$544 >> 2] = $26; //@line 21187
       $545 = $ReallocAsyncCtx9 + 52 | 0; //@line 21188
       HEAP32[$545 >> 2] = $28; //@line 21189
       $546 = $ReallocAsyncCtx9 + 56 | 0; //@line 21190
       HEAP32[$546 >> 2] = $30; //@line 21191
       $547 = $ReallocAsyncCtx9 + 60 | 0; //@line 21192
       HEAP32[$547 >> 2] = $32; //@line 21193
       $548 = $ReallocAsyncCtx9 + 64 | 0; //@line 21194
       HEAP32[$548 >> 2] = $34; //@line 21195
       $549 = $ReallocAsyncCtx9 + 68 | 0; //@line 21196
       HEAP32[$549 >> 2] = $36; //@line 21197
       $550 = $ReallocAsyncCtx9 + 72 | 0; //@line 21198
       HEAP32[$550 >> 2] = $38; //@line 21199
       $551 = $ReallocAsyncCtx9 + 76 | 0; //@line 21200
       HEAP32[$551 >> 2] = $40; //@line 21201
       $552 = $ReallocAsyncCtx9 + 80 | 0; //@line 21202
       HEAP32[$552 >> 2] = $60; //@line 21203
       $553 = $ReallocAsyncCtx9 + 84 | 0; //@line 21204
       HEAP32[$553 >> 2] = $44; //@line 21205
       $554 = $ReallocAsyncCtx9 + 88 | 0; //@line 21206
       HEAP32[$554 >> 2] = $46; //@line 21207
       $555 = $ReallocAsyncCtx9 + 92 | 0; //@line 21208
       HEAP32[$555 >> 2] = $50; //@line 21209
       $556 = $ReallocAsyncCtx9 + 96 | 0; //@line 21210
       HEAP32[$556 >> 2] = $52; //@line 21211
       $557 = $ReallocAsyncCtx9 + 100 | 0; //@line 21212
       HEAP32[$557 >> 2] = $54; //@line 21213
       $558 = $ReallocAsyncCtx9 + 104 | 0; //@line 21214
       HEAP32[$558 >> 2] = $56; //@line 21215
       $559 = $ReallocAsyncCtx9 + 108 | 0; //@line 21216
       HEAP32[$559 >> 2] = $58; //@line 21217
       $560 = $ReallocAsyncCtx9 + 112 | 0; //@line 21218
       HEAP32[$560 >> 2] = $62; //@line 21219
       $561 = $ReallocAsyncCtx9 + 116 | 0; //@line 21220
       HEAP32[$561 >> 2] = $64; //@line 21221
       $562 = $ReallocAsyncCtx9 + 120 | 0; //@line 21222
       HEAP32[$562 >> 2] = $66; //@line 21223
       $563 = $ReallocAsyncCtx9 + 124 | 0; //@line 21224
       HEAP32[$563 >> 2] = $$reg2mem62$0; //@line 21225
       $564 = $ReallocAsyncCtx9 + 128 | 0; //@line 21226
       HEAP32[$564 >> 2] = $70; //@line 21227
       $565 = $ReallocAsyncCtx9 + 132 | 0; //@line 21228
       HEAP32[$565 >> 2] = $72; //@line 21229
       $566 = $ReallocAsyncCtx9 + 136 | 0; //@line 21230
       HEAP32[$566 >> 2] = $74; //@line 21231
       $567 = $ReallocAsyncCtx9 + 140 | 0; //@line 21232
       HEAP32[$567 >> 2] = $76; //@line 21233
       $568 = $ReallocAsyncCtx9 + 144 | 0; //@line 21234
       HEAP32[$568 >> 2] = $80; //@line 21235
       $569 = $ReallocAsyncCtx9 + 148 | 0; //@line 21236
       HEAP32[$569 >> 2] = $82; //@line 21237
       $570 = $ReallocAsyncCtx9 + 152 | 0; //@line 21238
       HEAP32[$570 >> 2] = $84; //@line 21239
       $571 = $ReallocAsyncCtx9 + 156 | 0; //@line 21240
       HEAP32[$571 >> 2] = $86; //@line 21241
       $572 = $ReallocAsyncCtx9 + 160 | 0; //@line 21242
       HEAP32[$572 >> 2] = $88; //@line 21243
       $573 = $ReallocAsyncCtx9 + 164 | 0; //@line 21244
       HEAP32[$573 >> 2] = $90; //@line 21245
       $574 = $ReallocAsyncCtx9 + 168 | 0; //@line 21246
       HEAP32[$574 >> 2] = $92; //@line 21247
       $575 = $ReallocAsyncCtx9 + 172 | 0; //@line 21248
       HEAP32[$575 >> 2] = $94; //@line 21249
       $576 = $ReallocAsyncCtx9 + 176 | 0; //@line 21250
       HEAP32[$576 >> 2] = $96; //@line 21251
       $577 = $ReallocAsyncCtx9 + 180 | 0; //@line 21252
       HEAP32[$577 >> 2] = $98; //@line 21253
       $578 = $ReallocAsyncCtx9 + 184 | 0; //@line 21254
       HEAP32[$578 >> 2] = $100; //@line 21255
       $579 = $ReallocAsyncCtx9 + 188 | 0; //@line 21256
       HEAP32[$579 >> 2] = $102; //@line 21257
       $580 = $ReallocAsyncCtx9 + 192 | 0; //@line 21258
       HEAP32[$580 >> 2] = $104; //@line 21259
       $581 = $ReallocAsyncCtx9 + 196 | 0; //@line 21260
       HEAP32[$581 >> 2] = $106; //@line 21261
       $582 = $ReallocAsyncCtx9 + 200 | 0; //@line 21262
       HEAP32[$582 >> 2] = $108; //@line 21263
       $583 = $ReallocAsyncCtx9 + 204 | 0; //@line 21264
       HEAP32[$583 >> 2] = $110; //@line 21265
       $584 = $ReallocAsyncCtx9 + 208 | 0; //@line 21266
       HEAP32[$584 >> 2] = $112; //@line 21267
       $585 = $ReallocAsyncCtx9 + 212 | 0; //@line 21268
       HEAP32[$585 >> 2] = $114; //@line 21269
       $586 = $ReallocAsyncCtx9 + 216 | 0; //@line 21270
       HEAP32[$586 >> 2] = $116; //@line 21271
       $587 = $ReallocAsyncCtx9 + 220 | 0; //@line 21272
       HEAP32[$587 >> 2] = $118; //@line 21273
       $588 = $ReallocAsyncCtx9 + 224 | 0; //@line 21274
       HEAP32[$588 >> 2] = $120; //@line 21275
       $589 = $ReallocAsyncCtx9 + 228 | 0; //@line 21276
       HEAP32[$589 >> 2] = $122; //@line 21277
       $590 = $ReallocAsyncCtx9 + 232 | 0; //@line 21278
       HEAP32[$590 >> 2] = $124; //@line 21279
       $591 = $ReallocAsyncCtx9 + 236 | 0; //@line 21280
       HEAP32[$591 >> 2] = $126; //@line 21281
       $592 = $ReallocAsyncCtx9 + 240 | 0; //@line 21282
       HEAP32[$592 >> 2] = $128; //@line 21283
       $593 = $ReallocAsyncCtx9 + 244 | 0; //@line 21284
       HEAP32[$593 >> 2] = $130; //@line 21285
       $594 = $ReallocAsyncCtx9 + 248 | 0; //@line 21286
       HEAP32[$594 >> 2] = $132; //@line 21287
       $595 = $ReallocAsyncCtx9 + 252 | 0; //@line 21288
       HEAP32[$595 >> 2] = $134; //@line 21289
       $596 = $ReallocAsyncCtx9 + 256 | 0; //@line 21290
       HEAP32[$596 >> 2] = $138; //@line 21291
       $597 = $ReallocAsyncCtx9 + 260 | 0; //@line 21292
       HEAP32[$597 >> 2] = $140; //@line 21293
       $598 = $ReallocAsyncCtx9 + 264 | 0; //@line 21294
       HEAP32[$598 >> 2] = $142; //@line 21295
       sp = STACKTOP; //@line 21296
       return;
      }
      HEAP8[___async_retval >> 0] = $532; //@line 21300
      ___async_unwind = 0; //@line 21301
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 21302
      $533 = $ReallocAsyncCtx9 + 4 | 0; //@line 21303
      HEAP32[$533 >> 2] = $2; //@line 21304
      $534 = $ReallocAsyncCtx9 + 8 | 0; //@line 21305
      HEAP32[$534 >> 2] = $4; //@line 21306
      $535 = $ReallocAsyncCtx9 + 12 | 0; //@line 21307
      HEAP32[$535 >> 2] = $6; //@line 21308
      $536 = $ReallocAsyncCtx9 + 16 | 0; //@line 21309
      HEAP32[$536 >> 2] = $8; //@line 21310
      $537 = $ReallocAsyncCtx9 + 20 | 0; //@line 21311
      HEAP32[$537 >> 2] = $10; //@line 21312
      $538 = $ReallocAsyncCtx9 + 24 | 0; //@line 21313
      HEAP32[$538 >> 2] = $12; //@line 21314
      $539 = $ReallocAsyncCtx9 + 28 | 0; //@line 21315
      HEAP32[$539 >> 2] = $14; //@line 21316
      $540 = $ReallocAsyncCtx9 + 32 | 0; //@line 21317
      HEAP32[$540 >> 2] = $16; //@line 21318
      $541 = $ReallocAsyncCtx9 + 36 | 0; //@line 21319
      HEAP32[$541 >> 2] = $20; //@line 21320
      $542 = $ReallocAsyncCtx9 + 40 | 0; //@line 21321
      HEAP32[$542 >> 2] = $22; //@line 21322
      $543 = $ReallocAsyncCtx9 + 44 | 0; //@line 21323
      HEAP32[$543 >> 2] = $24; //@line 21324
      $544 = $ReallocAsyncCtx9 + 48 | 0; //@line 21325
      HEAP32[$544 >> 2] = $26; //@line 21326
      $545 = $ReallocAsyncCtx9 + 52 | 0; //@line 21327
      HEAP32[$545 >> 2] = $28; //@line 21328
      $546 = $ReallocAsyncCtx9 + 56 | 0; //@line 21329
      HEAP32[$546 >> 2] = $30; //@line 21330
      $547 = $ReallocAsyncCtx9 + 60 | 0; //@line 21331
      HEAP32[$547 >> 2] = $32; //@line 21332
      $548 = $ReallocAsyncCtx9 + 64 | 0; //@line 21333
      HEAP32[$548 >> 2] = $34; //@line 21334
      $549 = $ReallocAsyncCtx9 + 68 | 0; //@line 21335
      HEAP32[$549 >> 2] = $36; //@line 21336
      $550 = $ReallocAsyncCtx9 + 72 | 0; //@line 21337
      HEAP32[$550 >> 2] = $38; //@line 21338
      $551 = $ReallocAsyncCtx9 + 76 | 0; //@line 21339
      HEAP32[$551 >> 2] = $40; //@line 21340
      $552 = $ReallocAsyncCtx9 + 80 | 0; //@line 21341
      HEAP32[$552 >> 2] = $60; //@line 21342
      $553 = $ReallocAsyncCtx9 + 84 | 0; //@line 21343
      HEAP32[$553 >> 2] = $44; //@line 21344
      $554 = $ReallocAsyncCtx9 + 88 | 0; //@line 21345
      HEAP32[$554 >> 2] = $46; //@line 21346
      $555 = $ReallocAsyncCtx9 + 92 | 0; //@line 21347
      HEAP32[$555 >> 2] = $50; //@line 21348
      $556 = $ReallocAsyncCtx9 + 96 | 0; //@line 21349
      HEAP32[$556 >> 2] = $52; //@line 21350
      $557 = $ReallocAsyncCtx9 + 100 | 0; //@line 21351
      HEAP32[$557 >> 2] = $54; //@line 21352
      $558 = $ReallocAsyncCtx9 + 104 | 0; //@line 21353
      HEAP32[$558 >> 2] = $56; //@line 21354
      $559 = $ReallocAsyncCtx9 + 108 | 0; //@line 21355
      HEAP32[$559 >> 2] = $58; //@line 21356
      $560 = $ReallocAsyncCtx9 + 112 | 0; //@line 21357
      HEAP32[$560 >> 2] = $62; //@line 21358
      $561 = $ReallocAsyncCtx9 + 116 | 0; //@line 21359
      HEAP32[$561 >> 2] = $64; //@line 21360
      $562 = $ReallocAsyncCtx9 + 120 | 0; //@line 21361
      HEAP32[$562 >> 2] = $66; //@line 21362
      $563 = $ReallocAsyncCtx9 + 124 | 0; //@line 21363
      HEAP32[$563 >> 2] = $$reg2mem62$0; //@line 21364
      $564 = $ReallocAsyncCtx9 + 128 | 0; //@line 21365
      HEAP32[$564 >> 2] = $70; //@line 21366
      $565 = $ReallocAsyncCtx9 + 132 | 0; //@line 21367
      HEAP32[$565 >> 2] = $72; //@line 21368
      $566 = $ReallocAsyncCtx9 + 136 | 0; //@line 21369
      HEAP32[$566 >> 2] = $74; //@line 21370
      $567 = $ReallocAsyncCtx9 + 140 | 0; //@line 21371
      HEAP32[$567 >> 2] = $76; //@line 21372
      $568 = $ReallocAsyncCtx9 + 144 | 0; //@line 21373
      HEAP32[$568 >> 2] = $80; //@line 21374
      $569 = $ReallocAsyncCtx9 + 148 | 0; //@line 21375
      HEAP32[$569 >> 2] = $82; //@line 21376
      $570 = $ReallocAsyncCtx9 + 152 | 0; //@line 21377
      HEAP32[$570 >> 2] = $84; //@line 21378
      $571 = $ReallocAsyncCtx9 + 156 | 0; //@line 21379
      HEAP32[$571 >> 2] = $86; //@line 21380
      $572 = $ReallocAsyncCtx9 + 160 | 0; //@line 21381
      HEAP32[$572 >> 2] = $88; //@line 21382
      $573 = $ReallocAsyncCtx9 + 164 | 0; //@line 21383
      HEAP32[$573 >> 2] = $90; //@line 21384
      $574 = $ReallocAsyncCtx9 + 168 | 0; //@line 21385
      HEAP32[$574 >> 2] = $92; //@line 21386
      $575 = $ReallocAsyncCtx9 + 172 | 0; //@line 21387
      HEAP32[$575 >> 2] = $94; //@line 21388
      $576 = $ReallocAsyncCtx9 + 176 | 0; //@line 21389
      HEAP32[$576 >> 2] = $96; //@line 21390
      $577 = $ReallocAsyncCtx9 + 180 | 0; //@line 21391
      HEAP32[$577 >> 2] = $98; //@line 21392
      $578 = $ReallocAsyncCtx9 + 184 | 0; //@line 21393
      HEAP32[$578 >> 2] = $100; //@line 21394
      $579 = $ReallocAsyncCtx9 + 188 | 0; //@line 21395
      HEAP32[$579 >> 2] = $102; //@line 21396
      $580 = $ReallocAsyncCtx9 + 192 | 0; //@line 21397
      HEAP32[$580 >> 2] = $104; //@line 21398
      $581 = $ReallocAsyncCtx9 + 196 | 0; //@line 21399
      HEAP32[$581 >> 2] = $106; //@line 21400
      $582 = $ReallocAsyncCtx9 + 200 | 0; //@line 21401
      HEAP32[$582 >> 2] = $108; //@line 21402
      $583 = $ReallocAsyncCtx9 + 204 | 0; //@line 21403
      HEAP32[$583 >> 2] = $110; //@line 21404
      $584 = $ReallocAsyncCtx9 + 208 | 0; //@line 21405
      HEAP32[$584 >> 2] = $112; //@line 21406
      $585 = $ReallocAsyncCtx9 + 212 | 0; //@line 21407
      HEAP32[$585 >> 2] = $114; //@line 21408
      $586 = $ReallocAsyncCtx9 + 216 | 0; //@line 21409
      HEAP32[$586 >> 2] = $116; //@line 21410
      $587 = $ReallocAsyncCtx9 + 220 | 0; //@line 21411
      HEAP32[$587 >> 2] = $118; //@line 21412
      $588 = $ReallocAsyncCtx9 + 224 | 0; //@line 21413
      HEAP32[$588 >> 2] = $120; //@line 21414
      $589 = $ReallocAsyncCtx9 + 228 | 0; //@line 21415
      HEAP32[$589 >> 2] = $122; //@line 21416
      $590 = $ReallocAsyncCtx9 + 232 | 0; //@line 21417
      HEAP32[$590 >> 2] = $124; //@line 21418
      $591 = $ReallocAsyncCtx9 + 236 | 0; //@line 21419
      HEAP32[$591 >> 2] = $126; //@line 21420
      $592 = $ReallocAsyncCtx9 + 240 | 0; //@line 21421
      HEAP32[$592 >> 2] = $128; //@line 21422
      $593 = $ReallocAsyncCtx9 + 244 | 0; //@line 21423
      HEAP32[$593 >> 2] = $130; //@line 21424
      $594 = $ReallocAsyncCtx9 + 248 | 0; //@line 21425
      HEAP32[$594 >> 2] = $132; //@line 21426
      $595 = $ReallocAsyncCtx9 + 252 | 0; //@line 21427
      HEAP32[$595 >> 2] = $134; //@line 21428
      $596 = $ReallocAsyncCtx9 + 256 | 0; //@line 21429
      HEAP32[$596 >> 2] = $138; //@line 21430
      $597 = $ReallocAsyncCtx9 + 260 | 0; //@line 21431
      HEAP32[$597 >> 2] = $140; //@line 21432
      $598 = $ReallocAsyncCtx9 + 264 | 0; //@line 21433
      HEAP32[$598 >> 2] = $142; //@line 21434
      sp = STACKTOP; //@line 21435
      return;
     }
    case 57:
     {
      _mbed_tracef(2, 3803, 4831, $72); //@line 21440
      break L2;
      break;
     }
    case 61:
     {
      $616 = HEAP32[$134 >> 2] | 0; //@line 21445
      $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 21448
      $619 = _sn_coap_parser_options_parse_multiple_options($2, $38, $$reg2mem73$0, $616 + 60 | 0, $616 + 8 | 0, 20, $$1202$i$reg2mem$0) | 0; //@line 21449
      if (___async) {
       HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 21452
       $620 = $ReallocAsyncCtx8 + 4 | 0; //@line 21453
       HEAP32[$620 >> 2] = $2; //@line 21454
       $621 = $ReallocAsyncCtx8 + 8 | 0; //@line 21455
       HEAP32[$621 >> 2] = $4; //@line 21456
       $622 = $ReallocAsyncCtx8 + 12 | 0; //@line 21457
       HEAP32[$622 >> 2] = $6; //@line 21458
       $623 = $ReallocAsyncCtx8 + 16 | 0; //@line 21459
       HEAP32[$623 >> 2] = $8; //@line 21460
       $624 = $ReallocAsyncCtx8 + 20 | 0; //@line 21461
       HEAP32[$624 >> 2] = $10; //@line 21462
       $625 = $ReallocAsyncCtx8 + 24 | 0; //@line 21463
       HEAP32[$625 >> 2] = $12; //@line 21464
       $626 = $ReallocAsyncCtx8 + 28 | 0; //@line 21465
       HEAP32[$626 >> 2] = $14; //@line 21466
       $627 = $ReallocAsyncCtx8 + 32 | 0; //@line 21467
       HEAP32[$627 >> 2] = $16; //@line 21468
       $628 = $ReallocAsyncCtx8 + 36 | 0; //@line 21469
       HEAP32[$628 >> 2] = $20; //@line 21470
       $629 = $ReallocAsyncCtx8 + 40 | 0; //@line 21471
       HEAP32[$629 >> 2] = $22; //@line 21472
       $630 = $ReallocAsyncCtx8 + 44 | 0; //@line 21473
       HEAP32[$630 >> 2] = $24; //@line 21474
       $631 = $ReallocAsyncCtx8 + 48 | 0; //@line 21475
       HEAP32[$631 >> 2] = $26; //@line 21476
       $632 = $ReallocAsyncCtx8 + 52 | 0; //@line 21477
       HEAP32[$632 >> 2] = $28; //@line 21478
       $633 = $ReallocAsyncCtx8 + 56 | 0; //@line 21479
       HEAP32[$633 >> 2] = $30; //@line 21480
       $634 = $ReallocAsyncCtx8 + 60 | 0; //@line 21481
       HEAP32[$634 >> 2] = $32; //@line 21482
       $635 = $ReallocAsyncCtx8 + 64 | 0; //@line 21483
       HEAP32[$635 >> 2] = $34; //@line 21484
       $636 = $ReallocAsyncCtx8 + 68 | 0; //@line 21485
       HEAP32[$636 >> 2] = $36; //@line 21486
       $637 = $ReallocAsyncCtx8 + 72 | 0; //@line 21487
       HEAP32[$637 >> 2] = $38; //@line 21488
       $638 = $ReallocAsyncCtx8 + 76 | 0; //@line 21489
       HEAP32[$638 >> 2] = $40; //@line 21490
       $639 = $ReallocAsyncCtx8 + 80 | 0; //@line 21491
       HEAP32[$639 >> 2] = $60; //@line 21492
       $640 = $ReallocAsyncCtx8 + 84 | 0; //@line 21493
       HEAP32[$640 >> 2] = $44; //@line 21494
       $641 = $ReallocAsyncCtx8 + 88 | 0; //@line 21495
       HEAP32[$641 >> 2] = $46; //@line 21496
       $642 = $ReallocAsyncCtx8 + 92 | 0; //@line 21497
       HEAP32[$642 >> 2] = $50; //@line 21498
       $643 = $ReallocAsyncCtx8 + 96 | 0; //@line 21499
       HEAP32[$643 >> 2] = $52; //@line 21500
       $644 = $ReallocAsyncCtx8 + 100 | 0; //@line 21501
       HEAP32[$644 >> 2] = $54; //@line 21502
       $645 = $ReallocAsyncCtx8 + 104 | 0; //@line 21503
       HEAP32[$645 >> 2] = $56; //@line 21504
       $646 = $ReallocAsyncCtx8 + 108 | 0; //@line 21505
       HEAP32[$646 >> 2] = $58; //@line 21506
       $647 = $ReallocAsyncCtx8 + 112 | 0; //@line 21507
       HEAP32[$647 >> 2] = $62; //@line 21508
       $648 = $ReallocAsyncCtx8 + 116 | 0; //@line 21509
       HEAP32[$648 >> 2] = $64; //@line 21510
       $649 = $ReallocAsyncCtx8 + 120 | 0; //@line 21511
       HEAP32[$649 >> 2] = $66; //@line 21512
       $650 = $ReallocAsyncCtx8 + 124 | 0; //@line 21513
       HEAP32[$650 >> 2] = $$reg2mem62$0; //@line 21514
       $651 = $ReallocAsyncCtx8 + 128 | 0; //@line 21515
       HEAP32[$651 >> 2] = $70; //@line 21516
       $652 = $ReallocAsyncCtx8 + 132 | 0; //@line 21517
       HEAP32[$652 >> 2] = $72; //@line 21518
       $653 = $ReallocAsyncCtx8 + 136 | 0; //@line 21519
       HEAP32[$653 >> 2] = $74; //@line 21520
       $654 = $ReallocAsyncCtx8 + 140 | 0; //@line 21521
       HEAP32[$654 >> 2] = $76; //@line 21522
       $655 = $ReallocAsyncCtx8 + 144 | 0; //@line 21523
       HEAP32[$655 >> 2] = $80; //@line 21524
       $656 = $ReallocAsyncCtx8 + 148 | 0; //@line 21525
       HEAP32[$656 >> 2] = $82; //@line 21526
       $657 = $ReallocAsyncCtx8 + 152 | 0; //@line 21527
       HEAP32[$657 >> 2] = $84; //@line 21528
       $658 = $ReallocAsyncCtx8 + 156 | 0; //@line 21529
       HEAP32[$658 >> 2] = $86; //@line 21530
       $659 = $ReallocAsyncCtx8 + 160 | 0; //@line 21531
       HEAP32[$659 >> 2] = $88; //@line 21532
       $660 = $ReallocAsyncCtx8 + 164 | 0; //@line 21533
       HEAP32[$660 >> 2] = $90; //@line 21534
       $661 = $ReallocAsyncCtx8 + 168 | 0; //@line 21535
       HEAP32[$661 >> 2] = $92; //@line 21536
       $662 = $ReallocAsyncCtx8 + 172 | 0; //@line 21537
       HEAP32[$662 >> 2] = $94; //@line 21538
       $663 = $ReallocAsyncCtx8 + 176 | 0; //@line 21539
       HEAP32[$663 >> 2] = $96; //@line 21540
       $664 = $ReallocAsyncCtx8 + 180 | 0; //@line 21541
       HEAP32[$664 >> 2] = $98; //@line 21542
       $665 = $ReallocAsyncCtx8 + 184 | 0; //@line 21543
       HEAP32[$665 >> 2] = $100; //@line 21544
       $666 = $ReallocAsyncCtx8 + 188 | 0; //@line 21545
       HEAP32[$666 >> 2] = $102; //@line 21546
       $667 = $ReallocAsyncCtx8 + 192 | 0; //@line 21547
       HEAP32[$667 >> 2] = $104; //@line 21548
       $668 = $ReallocAsyncCtx8 + 196 | 0; //@line 21549
       HEAP32[$668 >> 2] = $106; //@line 21550
       $669 = $ReallocAsyncCtx8 + 200 | 0; //@line 21551
       HEAP32[$669 >> 2] = $108; //@line 21552
       $670 = $ReallocAsyncCtx8 + 204 | 0; //@line 21553
       HEAP32[$670 >> 2] = $110; //@line 21554
       $671 = $ReallocAsyncCtx8 + 208 | 0; //@line 21555
       HEAP32[$671 >> 2] = $112; //@line 21556
       $672 = $ReallocAsyncCtx8 + 212 | 0; //@line 21557
       HEAP32[$672 >> 2] = $114; //@line 21558
       $673 = $ReallocAsyncCtx8 + 216 | 0; //@line 21559
       HEAP32[$673 >> 2] = $116; //@line 21560
       $674 = $ReallocAsyncCtx8 + 220 | 0; //@line 21561
       HEAP32[$674 >> 2] = $118; //@line 21562
       $675 = $ReallocAsyncCtx8 + 224 | 0; //@line 21563
       HEAP32[$675 >> 2] = $120; //@line 21564
       $676 = $ReallocAsyncCtx8 + 228 | 0; //@line 21565
       HEAP32[$676 >> 2] = $122; //@line 21566
       $677 = $ReallocAsyncCtx8 + 232 | 0; //@line 21567
       HEAP32[$677 >> 2] = $124; //@line 21568
       $678 = $ReallocAsyncCtx8 + 236 | 0; //@line 21569
       HEAP32[$678 >> 2] = $126; //@line 21570
       $679 = $ReallocAsyncCtx8 + 240 | 0; //@line 21571
       HEAP32[$679 >> 2] = $128; //@line 21572
       $680 = $ReallocAsyncCtx8 + 244 | 0; //@line 21573
       HEAP32[$680 >> 2] = $130; //@line 21574
       $681 = $ReallocAsyncCtx8 + 248 | 0; //@line 21575
       HEAP32[$681 >> 2] = $132; //@line 21576
       $682 = $ReallocAsyncCtx8 + 252 | 0; //@line 21577
       HEAP32[$682 >> 2] = $134; //@line 21578
       $683 = $ReallocAsyncCtx8 + 256 | 0; //@line 21579
       HEAP32[$683 >> 2] = $138; //@line 21580
       $684 = $ReallocAsyncCtx8 + 260 | 0; //@line 21581
       HEAP32[$684 >> 2] = $140; //@line 21582
       $685 = $ReallocAsyncCtx8 + 264 | 0; //@line 21583
       HEAP32[$685 >> 2] = $142; //@line 21584
       sp = STACKTOP; //@line 21585
       return;
      }
      HEAP8[___async_retval >> 0] = $619; //@line 21589
      ___async_unwind = 0; //@line 21590
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 21591
      $620 = $ReallocAsyncCtx8 + 4 | 0; //@line 21592
      HEAP32[$620 >> 2] = $2; //@line 21593
      $621 = $ReallocAsyncCtx8 + 8 | 0; //@line 21594
      HEAP32[$621 >> 2] = $4; //@line 21595
      $622 = $ReallocAsyncCtx8 + 12 | 0; //@line 21596
      HEAP32[$622 >> 2] = $6; //@line 21597
      $623 = $ReallocAsyncCtx8 + 16 | 0; //@line 21598
      HEAP32[$623 >> 2] = $8; //@line 21599
      $624 = $ReallocAsyncCtx8 + 20 | 0; //@line 21600
      HEAP32[$624 >> 2] = $10; //@line 21601
      $625 = $ReallocAsyncCtx8 + 24 | 0; //@line 21602
      HEAP32[$625 >> 2] = $12; //@line 21603
      $626 = $ReallocAsyncCtx8 + 28 | 0; //@line 21604
      HEAP32[$626 >> 2] = $14; //@line 21605
      $627 = $ReallocAsyncCtx8 + 32 | 0; //@line 21606
      HEAP32[$627 >> 2] = $16; //@line 21607
      $628 = $ReallocAsyncCtx8 + 36 | 0; //@line 21608
      HEAP32[$628 >> 2] = $20; //@line 21609
      $629 = $ReallocAsyncCtx8 + 40 | 0; //@line 21610
      HEAP32[$629 >> 2] = $22; //@line 21611
      $630 = $ReallocAsyncCtx8 + 44 | 0; //@line 21612
      HEAP32[$630 >> 2] = $24; //@line 21613
      $631 = $ReallocAsyncCtx8 + 48 | 0; //@line 21614
      HEAP32[$631 >> 2] = $26; //@line 21615
      $632 = $ReallocAsyncCtx8 + 52 | 0; //@line 21616
      HEAP32[$632 >> 2] = $28; //@line 21617
      $633 = $ReallocAsyncCtx8 + 56 | 0; //@line 21618
      HEAP32[$633 >> 2] = $30; //@line 21619
      $634 = $ReallocAsyncCtx8 + 60 | 0; //@line 21620
      HEAP32[$634 >> 2] = $32; //@line 21621
      $635 = $ReallocAsyncCtx8 + 64 | 0; //@line 21622
      HEAP32[$635 >> 2] = $34; //@line 21623
      $636 = $ReallocAsyncCtx8 + 68 | 0; //@line 21624
      HEAP32[$636 >> 2] = $36; //@line 21625
      $637 = $ReallocAsyncCtx8 + 72 | 0; //@line 21626
      HEAP32[$637 >> 2] = $38; //@line 21627
      $638 = $ReallocAsyncCtx8 + 76 | 0; //@line 21628
      HEAP32[$638 >> 2] = $40; //@line 21629
      $639 = $ReallocAsyncCtx8 + 80 | 0; //@line 21630
      HEAP32[$639 >> 2] = $60; //@line 21631
      $640 = $ReallocAsyncCtx8 + 84 | 0; //@line 21632
      HEAP32[$640 >> 2] = $44; //@line 21633
      $641 = $ReallocAsyncCtx8 + 88 | 0; //@line 21634
      HEAP32[$641 >> 2] = $46; //@line 21635
      $642 = $ReallocAsyncCtx8 + 92 | 0; //@line 21636
      HEAP32[$642 >> 2] = $50; //@line 21637
      $643 = $ReallocAsyncCtx8 + 96 | 0; //@line 21638
      HEAP32[$643 >> 2] = $52; //@line 21639
      $644 = $ReallocAsyncCtx8 + 100 | 0; //@line 21640
      HEAP32[$644 >> 2] = $54; //@line 21641
      $645 = $ReallocAsyncCtx8 + 104 | 0; //@line 21642
      HEAP32[$645 >> 2] = $56; //@line 21643
      $646 = $ReallocAsyncCtx8 + 108 | 0; //@line 21644
      HEAP32[$646 >> 2] = $58; //@line 21645
      $647 = $ReallocAsyncCtx8 + 112 | 0; //@line 21646
      HEAP32[$647 >> 2] = $62; //@line 21647
      $648 = $ReallocAsyncCtx8 + 116 | 0; //@line 21648
      HEAP32[$648 >> 2] = $64; //@line 21649
      $649 = $ReallocAsyncCtx8 + 120 | 0; //@line 21650
      HEAP32[$649 >> 2] = $66; //@line 21651
      $650 = $ReallocAsyncCtx8 + 124 | 0; //@line 21652
      HEAP32[$650 >> 2] = $$reg2mem62$0; //@line 21653
      $651 = $ReallocAsyncCtx8 + 128 | 0; //@line 21654
      HEAP32[$651 >> 2] = $70; //@line 21655
      $652 = $ReallocAsyncCtx8 + 132 | 0; //@line 21656
      HEAP32[$652 >> 2] = $72; //@line 21657
      $653 = $ReallocAsyncCtx8 + 136 | 0; //@line 21658
      HEAP32[$653 >> 2] = $74; //@line 21659
      $654 = $ReallocAsyncCtx8 + 140 | 0; //@line 21660
      HEAP32[$654 >> 2] = $76; //@line 21661
      $655 = $ReallocAsyncCtx8 + 144 | 0; //@line 21662
      HEAP32[$655 >> 2] = $80; //@line 21663
      $656 = $ReallocAsyncCtx8 + 148 | 0; //@line 21664
      HEAP32[$656 >> 2] = $82; //@line 21665
      $657 = $ReallocAsyncCtx8 + 152 | 0; //@line 21666
      HEAP32[$657 >> 2] = $84; //@line 21667
      $658 = $ReallocAsyncCtx8 + 156 | 0; //@line 21668
      HEAP32[$658 >> 2] = $86; //@line 21669
      $659 = $ReallocAsyncCtx8 + 160 | 0; //@line 21670
      HEAP32[$659 >> 2] = $88; //@line 21671
      $660 = $ReallocAsyncCtx8 + 164 | 0; //@line 21672
      HEAP32[$660 >> 2] = $90; //@line 21673
      $661 = $ReallocAsyncCtx8 + 168 | 0; //@line 21674
      HEAP32[$661 >> 2] = $92; //@line 21675
      $662 = $ReallocAsyncCtx8 + 172 | 0; //@line 21676
      HEAP32[$662 >> 2] = $94; //@line 21677
      $663 = $ReallocAsyncCtx8 + 176 | 0; //@line 21678
      HEAP32[$663 >> 2] = $96; //@line 21679
      $664 = $ReallocAsyncCtx8 + 180 | 0; //@line 21680
      HEAP32[$664 >> 2] = $98; //@line 21681
      $665 = $ReallocAsyncCtx8 + 184 | 0; //@line 21682
      HEAP32[$665 >> 2] = $100; //@line 21683
      $666 = $ReallocAsyncCtx8 + 188 | 0; //@line 21684
      HEAP32[$666 >> 2] = $102; //@line 21685
      $667 = $ReallocAsyncCtx8 + 192 | 0; //@line 21686
      HEAP32[$667 >> 2] = $104; //@line 21687
      $668 = $ReallocAsyncCtx8 + 196 | 0; //@line 21688
      HEAP32[$668 >> 2] = $106; //@line 21689
      $669 = $ReallocAsyncCtx8 + 200 | 0; //@line 21690
      HEAP32[$669 >> 2] = $108; //@line 21691
      $670 = $ReallocAsyncCtx8 + 204 | 0; //@line 21692
      HEAP32[$670 >> 2] = $110; //@line 21693
      $671 = $ReallocAsyncCtx8 + 208 | 0; //@line 21694
      HEAP32[$671 >> 2] = $112; //@line 21695
      $672 = $ReallocAsyncCtx8 + 212 | 0; //@line 21696
      HEAP32[$672 >> 2] = $114; //@line 21697
      $673 = $ReallocAsyncCtx8 + 216 | 0; //@line 21698
      HEAP32[$673 >> 2] = $116; //@line 21699
      $674 = $ReallocAsyncCtx8 + 220 | 0; //@line 21700
      HEAP32[$674 >> 2] = $118; //@line 21701
      $675 = $ReallocAsyncCtx8 + 224 | 0; //@line 21702
      HEAP32[$675 >> 2] = $120; //@line 21703
      $676 = $ReallocAsyncCtx8 + 228 | 0; //@line 21704
      HEAP32[$676 >> 2] = $122; //@line 21705
      $677 = $ReallocAsyncCtx8 + 232 | 0; //@line 21706
      HEAP32[$677 >> 2] = $124; //@line 21707
      $678 = $ReallocAsyncCtx8 + 236 | 0; //@line 21708
      HEAP32[$678 >> 2] = $126; //@line 21709
      $679 = $ReallocAsyncCtx8 + 240 | 0; //@line 21710
      HEAP32[$679 >> 2] = $128; //@line 21711
      $680 = $ReallocAsyncCtx8 + 244 | 0; //@line 21712
      HEAP32[$680 >> 2] = $130; //@line 21713
      $681 = $ReallocAsyncCtx8 + 248 | 0; //@line 21714
      HEAP32[$681 >> 2] = $132; //@line 21715
      $682 = $ReallocAsyncCtx8 + 252 | 0; //@line 21716
      HEAP32[$682 >> 2] = $134; //@line 21717
      $683 = $ReallocAsyncCtx8 + 256 | 0; //@line 21718
      HEAP32[$683 >> 2] = $138; //@line 21719
      $684 = $ReallocAsyncCtx8 + 260 | 0; //@line 21720
      HEAP32[$684 >> 2] = $140; //@line 21721
      $685 = $ReallocAsyncCtx8 + 264 | 0; //@line 21722
      HEAP32[$685 >> 2] = $142; //@line 21723
      sp = STACKTOP; //@line 21724
      return;
     }
    case 64:
     {
      $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 21729
      $687 = _sn_coap_parser_options_parse_multiple_options($2, $38, $$reg2mem73$1, $4, $24, 11, $$1202$i$reg2mem$2) | 0; //@line 21730
      if (___async) {
       HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 21733
       $688 = $ReallocAsyncCtx7 + 4 | 0; //@line 21734
       HEAP32[$688 >> 2] = $2; //@line 21735
       $689 = $ReallocAsyncCtx7 + 8 | 0; //@line 21736
       HEAP32[$689 >> 2] = $4; //@line 21737
       $690 = $ReallocAsyncCtx7 + 12 | 0; //@line 21738
       HEAP32[$690 >> 2] = $6; //@line 21739
       $691 = $ReallocAsyncCtx7 + 16 | 0; //@line 21740
       HEAP32[$691 >> 2] = $8; //@line 21741
       $692 = $ReallocAsyncCtx7 + 20 | 0; //@line 21742
       HEAP32[$692 >> 2] = $10; //@line 21743
       $693 = $ReallocAsyncCtx7 + 24 | 0; //@line 21744
       HEAP32[$693 >> 2] = $12; //@line 21745
       $694 = $ReallocAsyncCtx7 + 28 | 0; //@line 21746
       HEAP32[$694 >> 2] = $14; //@line 21747
       $695 = $ReallocAsyncCtx7 + 32 | 0; //@line 21748
       HEAP32[$695 >> 2] = $16; //@line 21749
       $696 = $ReallocAsyncCtx7 + 36 | 0; //@line 21750
       HEAP32[$696 >> 2] = $20; //@line 21751
       $697 = $ReallocAsyncCtx7 + 40 | 0; //@line 21752
       HEAP32[$697 >> 2] = $22; //@line 21753
       $698 = $ReallocAsyncCtx7 + 44 | 0; //@line 21754
       HEAP32[$698 >> 2] = $24; //@line 21755
       $699 = $ReallocAsyncCtx7 + 48 | 0; //@line 21756
       HEAP32[$699 >> 2] = $26; //@line 21757
       $700 = $ReallocAsyncCtx7 + 52 | 0; //@line 21758
       HEAP32[$700 >> 2] = $28; //@line 21759
       $701 = $ReallocAsyncCtx7 + 56 | 0; //@line 21760
       HEAP32[$701 >> 2] = $30; //@line 21761
       $702 = $ReallocAsyncCtx7 + 60 | 0; //@line 21762
       HEAP32[$702 >> 2] = $32; //@line 21763
       $703 = $ReallocAsyncCtx7 + 64 | 0; //@line 21764
       HEAP32[$703 >> 2] = $34; //@line 21765
       $704 = $ReallocAsyncCtx7 + 68 | 0; //@line 21766
       HEAP32[$704 >> 2] = $36; //@line 21767
       $705 = $ReallocAsyncCtx7 + 72 | 0; //@line 21768
       HEAP32[$705 >> 2] = $38; //@line 21769
       $706 = $ReallocAsyncCtx7 + 76 | 0; //@line 21770
       HEAP32[$706 >> 2] = $40; //@line 21771
       $707 = $ReallocAsyncCtx7 + 80 | 0; //@line 21772
       HEAP32[$707 >> 2] = $60; //@line 21773
       $708 = $ReallocAsyncCtx7 + 84 | 0; //@line 21774
       HEAP32[$708 >> 2] = $44; //@line 21775
       $709 = $ReallocAsyncCtx7 + 88 | 0; //@line 21776
       HEAP32[$709 >> 2] = $46; //@line 21777
       $710 = $ReallocAsyncCtx7 + 92 | 0; //@line 21778
       HEAP32[$710 >> 2] = $50; //@line 21779
       $711 = $ReallocAsyncCtx7 + 96 | 0; //@line 21780
       HEAP32[$711 >> 2] = $52; //@line 21781
       $712 = $ReallocAsyncCtx7 + 100 | 0; //@line 21782
       HEAP32[$712 >> 2] = $54; //@line 21783
       $713 = $ReallocAsyncCtx7 + 104 | 0; //@line 21784
       HEAP32[$713 >> 2] = $56; //@line 21785
       $714 = $ReallocAsyncCtx7 + 108 | 0; //@line 21786
       HEAP32[$714 >> 2] = $58; //@line 21787
       $715 = $ReallocAsyncCtx7 + 112 | 0; //@line 21788
       HEAP32[$715 >> 2] = $62; //@line 21789
       $716 = $ReallocAsyncCtx7 + 116 | 0; //@line 21790
       HEAP32[$716 >> 2] = $64; //@line 21791
       $717 = $ReallocAsyncCtx7 + 120 | 0; //@line 21792
       HEAP32[$717 >> 2] = $66; //@line 21793
       $718 = $ReallocAsyncCtx7 + 124 | 0; //@line 21794
       HEAP32[$718 >> 2] = $$reg2mem62$2; //@line 21795
       $719 = $ReallocAsyncCtx7 + 128 | 0; //@line 21796
       HEAP32[$719 >> 2] = $70; //@line 21797
       $720 = $ReallocAsyncCtx7 + 132 | 0; //@line 21798
       HEAP32[$720 >> 2] = $72; //@line 21799
       $721 = $ReallocAsyncCtx7 + 136 | 0; //@line 21800
       HEAP32[$721 >> 2] = $74; //@line 21801
       $722 = $ReallocAsyncCtx7 + 140 | 0; //@line 21802
       HEAP32[$722 >> 2] = $76; //@line 21803
       $723 = $ReallocAsyncCtx7 + 144 | 0; //@line 21804
       HEAP32[$723 >> 2] = $80; //@line 21805
       $724 = $ReallocAsyncCtx7 + 148 | 0; //@line 21806
       HEAP32[$724 >> 2] = $82; //@line 21807
       $725 = $ReallocAsyncCtx7 + 152 | 0; //@line 21808
       HEAP32[$725 >> 2] = $84; //@line 21809
       $726 = $ReallocAsyncCtx7 + 156 | 0; //@line 21810
       HEAP32[$726 >> 2] = $86; //@line 21811
       $727 = $ReallocAsyncCtx7 + 160 | 0; //@line 21812
       HEAP32[$727 >> 2] = $88; //@line 21813
       $728 = $ReallocAsyncCtx7 + 164 | 0; //@line 21814
       HEAP32[$728 >> 2] = $90; //@line 21815
       $729 = $ReallocAsyncCtx7 + 168 | 0; //@line 21816
       HEAP32[$729 >> 2] = $92; //@line 21817
       $730 = $ReallocAsyncCtx7 + 172 | 0; //@line 21818
       HEAP32[$730 >> 2] = $94; //@line 21819
       $731 = $ReallocAsyncCtx7 + 176 | 0; //@line 21820
       HEAP32[$731 >> 2] = $96; //@line 21821
       $732 = $ReallocAsyncCtx7 + 180 | 0; //@line 21822
       HEAP32[$732 >> 2] = $98; //@line 21823
       $733 = $ReallocAsyncCtx7 + 184 | 0; //@line 21824
       HEAP32[$733 >> 2] = $100; //@line 21825
       $734 = $ReallocAsyncCtx7 + 188 | 0; //@line 21826
       HEAP32[$734 >> 2] = $102; //@line 21827
       $735 = $ReallocAsyncCtx7 + 192 | 0; //@line 21828
       HEAP32[$735 >> 2] = $104; //@line 21829
       $736 = $ReallocAsyncCtx7 + 196 | 0; //@line 21830
       HEAP32[$736 >> 2] = $106; //@line 21831
       $737 = $ReallocAsyncCtx7 + 200 | 0; //@line 21832
       HEAP32[$737 >> 2] = $108; //@line 21833
       $738 = $ReallocAsyncCtx7 + 204 | 0; //@line 21834
       HEAP32[$738 >> 2] = $110; //@line 21835
       $739 = $ReallocAsyncCtx7 + 208 | 0; //@line 21836
       HEAP32[$739 >> 2] = $112; //@line 21837
       $740 = $ReallocAsyncCtx7 + 212 | 0; //@line 21838
       HEAP32[$740 >> 2] = $114; //@line 21839
       $741 = $ReallocAsyncCtx7 + 216 | 0; //@line 21840
       HEAP32[$741 >> 2] = $116; //@line 21841
       $742 = $ReallocAsyncCtx7 + 220 | 0; //@line 21842
       HEAP32[$742 >> 2] = $118; //@line 21843
       $743 = $ReallocAsyncCtx7 + 224 | 0; //@line 21844
       HEAP32[$743 >> 2] = $120; //@line 21845
       $744 = $ReallocAsyncCtx7 + 228 | 0; //@line 21846
       HEAP32[$744 >> 2] = $122; //@line 21847
       $745 = $ReallocAsyncCtx7 + 232 | 0; //@line 21848
       HEAP32[$745 >> 2] = $124; //@line 21849
       $746 = $ReallocAsyncCtx7 + 236 | 0; //@line 21850
       HEAP32[$746 >> 2] = $126; //@line 21851
       $747 = $ReallocAsyncCtx7 + 240 | 0; //@line 21852
       HEAP32[$747 >> 2] = $128; //@line 21853
       $748 = $ReallocAsyncCtx7 + 244 | 0; //@line 21854
       HEAP32[$748 >> 2] = $130; //@line 21855
       $749 = $ReallocAsyncCtx7 + 248 | 0; //@line 21856
       HEAP32[$749 >> 2] = $132; //@line 21857
       $750 = $ReallocAsyncCtx7 + 252 | 0; //@line 21858
       HEAP32[$750 >> 2] = $134; //@line 21859
       $751 = $ReallocAsyncCtx7 + 256 | 0; //@line 21860
       HEAP32[$751 >> 2] = $138; //@line 21861
       $752 = $ReallocAsyncCtx7 + 260 | 0; //@line 21862
       HEAP32[$752 >> 2] = $140; //@line 21863
       $753 = $ReallocAsyncCtx7 + 264 | 0; //@line 21864
       HEAP32[$753 >> 2] = $142; //@line 21865
       sp = STACKTOP; //@line 21866
       return;
      }
      HEAP8[___async_retval >> 0] = $687; //@line 21870
      ___async_unwind = 0; //@line 21871
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 21872
      $688 = $ReallocAsyncCtx7 + 4 | 0; //@line 21873
      HEAP32[$688 >> 2] = $2; //@line 21874
      $689 = $ReallocAsyncCtx7 + 8 | 0; //@line 21875
      HEAP32[$689 >> 2] = $4; //@line 21876
      $690 = $ReallocAsyncCtx7 + 12 | 0; //@line 21877
      HEAP32[$690 >> 2] = $6; //@line 21878
      $691 = $ReallocAsyncCtx7 + 16 | 0; //@line 21879
      HEAP32[$691 >> 2] = $8; //@line 21880
      $692 = $ReallocAsyncCtx7 + 20 | 0; //@line 21881
      HEAP32[$692 >> 2] = $10; //@line 21882
      $693 = $ReallocAsyncCtx7 + 24 | 0; //@line 21883
      HEAP32[$693 >> 2] = $12; //@line 21884
      $694 = $ReallocAsyncCtx7 + 28 | 0; //@line 21885
      HEAP32[$694 >> 2] = $14; //@line 21886
      $695 = $ReallocAsyncCtx7 + 32 | 0; //@line 21887
      HEAP32[$695 >> 2] = $16; //@line 21888
      $696 = $ReallocAsyncCtx7 + 36 | 0; //@line 21889
      HEAP32[$696 >> 2] = $20; //@line 21890
      $697 = $ReallocAsyncCtx7 + 40 | 0; //@line 21891
      HEAP32[$697 >> 2] = $22; //@line 21892
      $698 = $ReallocAsyncCtx7 + 44 | 0; //@line 21893
      HEAP32[$698 >> 2] = $24; //@line 21894
      $699 = $ReallocAsyncCtx7 + 48 | 0; //@line 21895
      HEAP32[$699 >> 2] = $26; //@line 21896
      $700 = $ReallocAsyncCtx7 + 52 | 0; //@line 21897
      HEAP32[$700 >> 2] = $28; //@line 21898
      $701 = $ReallocAsyncCtx7 + 56 | 0; //@line 21899
      HEAP32[$701 >> 2] = $30; //@line 21900
      $702 = $ReallocAsyncCtx7 + 60 | 0; //@line 21901
      HEAP32[$702 >> 2] = $32; //@line 21902
      $703 = $ReallocAsyncCtx7 + 64 | 0; //@line 21903
      HEAP32[$703 >> 2] = $34; //@line 21904
      $704 = $ReallocAsyncCtx7 + 68 | 0; //@line 21905
      HEAP32[$704 >> 2] = $36; //@line 21906
      $705 = $ReallocAsyncCtx7 + 72 | 0; //@line 21907
      HEAP32[$705 >> 2] = $38; //@line 21908
      $706 = $ReallocAsyncCtx7 + 76 | 0; //@line 21909
      HEAP32[$706 >> 2] = $40; //@line 21910
      $707 = $ReallocAsyncCtx7 + 80 | 0; //@line 21911
      HEAP32[$707 >> 2] = $60; //@line 21912
      $708 = $ReallocAsyncCtx7 + 84 | 0; //@line 21913
      HEAP32[$708 >> 2] = $44; //@line 21914
      $709 = $ReallocAsyncCtx7 + 88 | 0; //@line 21915
      HEAP32[$709 >> 2] = $46; //@line 21916
      $710 = $ReallocAsyncCtx7 + 92 | 0; //@line 21917
      HEAP32[$710 >> 2] = $50; //@line 21918
      $711 = $ReallocAsyncCtx7 + 96 | 0; //@line 21919
      HEAP32[$711 >> 2] = $52; //@line 21920
      $712 = $ReallocAsyncCtx7 + 100 | 0; //@line 21921
      HEAP32[$712 >> 2] = $54; //@line 21922
      $713 = $ReallocAsyncCtx7 + 104 | 0; //@line 21923
      HEAP32[$713 >> 2] = $56; //@line 21924
      $714 = $ReallocAsyncCtx7 + 108 | 0; //@line 21925
      HEAP32[$714 >> 2] = $58; //@line 21926
      $715 = $ReallocAsyncCtx7 + 112 | 0; //@line 21927
      HEAP32[$715 >> 2] = $62; //@line 21928
      $716 = $ReallocAsyncCtx7 + 116 | 0; //@line 21929
      HEAP32[$716 >> 2] = $64; //@line 21930
      $717 = $ReallocAsyncCtx7 + 120 | 0; //@line 21931
      HEAP32[$717 >> 2] = $66; //@line 21932
      $718 = $ReallocAsyncCtx7 + 124 | 0; //@line 21933
      HEAP32[$718 >> 2] = $$reg2mem62$2; //@line 21934
      $719 = $ReallocAsyncCtx7 + 128 | 0; //@line 21935
      HEAP32[$719 >> 2] = $70; //@line 21936
      $720 = $ReallocAsyncCtx7 + 132 | 0; //@line 21937
      HEAP32[$720 >> 2] = $72; //@line 21938
      $721 = $ReallocAsyncCtx7 + 136 | 0; //@line 21939
      HEAP32[$721 >> 2] = $74; //@line 21940
      $722 = $ReallocAsyncCtx7 + 140 | 0; //@line 21941
      HEAP32[$722 >> 2] = $76; //@line 21942
      $723 = $ReallocAsyncCtx7 + 144 | 0; //@line 21943
      HEAP32[$723 >> 2] = $80; //@line 21944
      $724 = $ReallocAsyncCtx7 + 148 | 0; //@line 21945
      HEAP32[$724 >> 2] = $82; //@line 21946
      $725 = $ReallocAsyncCtx7 + 152 | 0; //@line 21947
      HEAP32[$725 >> 2] = $84; //@line 21948
      $726 = $ReallocAsyncCtx7 + 156 | 0; //@line 21949
      HEAP32[$726 >> 2] = $86; //@line 21950
      $727 = $ReallocAsyncCtx7 + 160 | 0; //@line 21951
      HEAP32[$727 >> 2] = $88; //@line 21952
      $728 = $ReallocAsyncCtx7 + 164 | 0; //@line 21953
      HEAP32[$728 >> 2] = $90; //@line 21954
      $729 = $ReallocAsyncCtx7 + 168 | 0; //@line 21955
      HEAP32[$729 >> 2] = $92; //@line 21956
      $730 = $ReallocAsyncCtx7 + 172 | 0; //@line 21957
      HEAP32[$730 >> 2] = $94; //@line 21958
      $731 = $ReallocAsyncCtx7 + 176 | 0; //@line 21959
      HEAP32[$731 >> 2] = $96; //@line 21960
      $732 = $ReallocAsyncCtx7 + 180 | 0; //@line 21961
      HEAP32[$732 >> 2] = $98; //@line 21962
      $733 = $ReallocAsyncCtx7 + 184 | 0; //@line 21963
      HEAP32[$733 >> 2] = $100; //@line 21964
      $734 = $ReallocAsyncCtx7 + 188 | 0; //@line 21965
      HEAP32[$734 >> 2] = $102; //@line 21966
      $735 = $ReallocAsyncCtx7 + 192 | 0; //@line 21967
      HEAP32[$735 >> 2] = $104; //@line 21968
      $736 = $ReallocAsyncCtx7 + 196 | 0; //@line 21969
      HEAP32[$736 >> 2] = $106; //@line 21970
      $737 = $ReallocAsyncCtx7 + 200 | 0; //@line 21971
      HEAP32[$737 >> 2] = $108; //@line 21972
      $738 = $ReallocAsyncCtx7 + 204 | 0; //@line 21973
      HEAP32[$738 >> 2] = $110; //@line 21974
      $739 = $ReallocAsyncCtx7 + 208 | 0; //@line 21975
      HEAP32[$739 >> 2] = $112; //@line 21976
      $740 = $ReallocAsyncCtx7 + 212 | 0; //@line 21977
      HEAP32[$740 >> 2] = $114; //@line 21978
      $741 = $ReallocAsyncCtx7 + 216 | 0; //@line 21979
      HEAP32[$741 >> 2] = $116; //@line 21980
      $742 = $ReallocAsyncCtx7 + 220 | 0; //@line 21981
      HEAP32[$742 >> 2] = $118; //@line 21982
      $743 = $ReallocAsyncCtx7 + 224 | 0; //@line 21983
      HEAP32[$743 >> 2] = $120; //@line 21984
      $744 = $ReallocAsyncCtx7 + 228 | 0; //@line 21985
      HEAP32[$744 >> 2] = $122; //@line 21986
      $745 = $ReallocAsyncCtx7 + 232 | 0; //@line 21987
      HEAP32[$745 >> 2] = $124; //@line 21988
      $746 = $ReallocAsyncCtx7 + 236 | 0; //@line 21989
      HEAP32[$746 >> 2] = $126; //@line 21990
      $747 = $ReallocAsyncCtx7 + 240 | 0; //@line 21991
      HEAP32[$747 >> 2] = $128; //@line 21992
      $748 = $ReallocAsyncCtx7 + 244 | 0; //@line 21993
      HEAP32[$748 >> 2] = $130; //@line 21994
      $749 = $ReallocAsyncCtx7 + 248 | 0; //@line 21995
      HEAP32[$749 >> 2] = $132; //@line 21996
      $750 = $ReallocAsyncCtx7 + 252 | 0; //@line 21997
      HEAP32[$750 >> 2] = $134; //@line 21998
      $751 = $ReallocAsyncCtx7 + 256 | 0; //@line 21999
      HEAP32[$751 >> 2] = $138; //@line 22000
      $752 = $ReallocAsyncCtx7 + 260 | 0; //@line 22001
      HEAP32[$752 >> 2] = $140; //@line 22002
      $753 = $ReallocAsyncCtx7 + 264 | 0; //@line 22003
      HEAP32[$753 >> 2] = $142; //@line 22004
      sp = STACKTOP; //@line 22005
      return;
     }
    case 69:
     {
      _mbed_tracef(2, 3803, 5026, $52); //@line 22010
      break L2;
      break;
     }
    case 73:
     {
      $771 = HEAP32[$134 >> 2] | 0; //@line 22015
      $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 22018
      $774 = _sn_coap_parser_options_parse_multiple_options($2, $38, $$reg2mem73$0, $771 + 64 | 0, $771 + 10 | 0, 15, $$1202$i$reg2mem$0) | 0; //@line 22019
      if (___async) {
       HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 22022
       $775 = $ReallocAsyncCtx6 + 4 | 0; //@line 22023
       HEAP32[$775 >> 2] = $2; //@line 22024
       $776 = $ReallocAsyncCtx6 + 8 | 0; //@line 22025
       HEAP32[$776 >> 2] = $4; //@line 22026
       $777 = $ReallocAsyncCtx6 + 12 | 0; //@line 22027
       HEAP32[$777 >> 2] = $6; //@line 22028
       $778 = $ReallocAsyncCtx6 + 16 | 0; //@line 22029
       HEAP32[$778 >> 2] = $8; //@line 22030
       $779 = $ReallocAsyncCtx6 + 20 | 0; //@line 22031
       HEAP32[$779 >> 2] = $10; //@line 22032
       $780 = $ReallocAsyncCtx6 + 24 | 0; //@line 22033
       HEAP32[$780 >> 2] = $12; //@line 22034
       $781 = $ReallocAsyncCtx6 + 28 | 0; //@line 22035
       HEAP32[$781 >> 2] = $14; //@line 22036
       $782 = $ReallocAsyncCtx6 + 32 | 0; //@line 22037
       HEAP32[$782 >> 2] = $16; //@line 22038
       $783 = $ReallocAsyncCtx6 + 36 | 0; //@line 22039
       HEAP32[$783 >> 2] = $20; //@line 22040
       $784 = $ReallocAsyncCtx6 + 40 | 0; //@line 22041
       HEAP32[$784 >> 2] = $22; //@line 22042
       $785 = $ReallocAsyncCtx6 + 44 | 0; //@line 22043
       HEAP32[$785 >> 2] = $24; //@line 22044
       $786 = $ReallocAsyncCtx6 + 48 | 0; //@line 22045
       HEAP32[$786 >> 2] = $26; //@line 22046
       $787 = $ReallocAsyncCtx6 + 52 | 0; //@line 22047
       HEAP32[$787 >> 2] = $28; //@line 22048
       $788 = $ReallocAsyncCtx6 + 56 | 0; //@line 22049
       HEAP32[$788 >> 2] = $30; //@line 22050
       $789 = $ReallocAsyncCtx6 + 60 | 0; //@line 22051
       HEAP32[$789 >> 2] = $32; //@line 22052
       $790 = $ReallocAsyncCtx6 + 64 | 0; //@line 22053
       HEAP32[$790 >> 2] = $34; //@line 22054
       $791 = $ReallocAsyncCtx6 + 68 | 0; //@line 22055
       HEAP32[$791 >> 2] = $36; //@line 22056
       $792 = $ReallocAsyncCtx6 + 72 | 0; //@line 22057
       HEAP32[$792 >> 2] = $38; //@line 22058
       $793 = $ReallocAsyncCtx6 + 76 | 0; //@line 22059
       HEAP32[$793 >> 2] = $40; //@line 22060
       $794 = $ReallocAsyncCtx6 + 80 | 0; //@line 22061
       HEAP32[$794 >> 2] = $60; //@line 22062
       $795 = $ReallocAsyncCtx6 + 84 | 0; //@line 22063
       HEAP32[$795 >> 2] = $44; //@line 22064
       $796 = $ReallocAsyncCtx6 + 88 | 0; //@line 22065
       HEAP32[$796 >> 2] = $46; //@line 22066
       $797 = $ReallocAsyncCtx6 + 92 | 0; //@line 22067
       HEAP32[$797 >> 2] = $50; //@line 22068
       $798 = $ReallocAsyncCtx6 + 96 | 0; //@line 22069
       HEAP32[$798 >> 2] = $52; //@line 22070
       $799 = $ReallocAsyncCtx6 + 100 | 0; //@line 22071
       HEAP32[$799 >> 2] = $54; //@line 22072
       $800 = $ReallocAsyncCtx6 + 104 | 0; //@line 22073
       HEAP32[$800 >> 2] = $56; //@line 22074
       $801 = $ReallocAsyncCtx6 + 108 | 0; //@line 22075
       HEAP32[$801 >> 2] = $58; //@line 22076
       $802 = $ReallocAsyncCtx6 + 112 | 0; //@line 22077
       HEAP32[$802 >> 2] = $62; //@line 22078
       $803 = $ReallocAsyncCtx6 + 116 | 0; //@line 22079
       HEAP32[$803 >> 2] = $64; //@line 22080
       $804 = $ReallocAsyncCtx6 + 120 | 0; //@line 22081
       HEAP32[$804 >> 2] = $66; //@line 22082
       $805 = $ReallocAsyncCtx6 + 124 | 0; //@line 22083
       HEAP32[$805 >> 2] = $$reg2mem62$0; //@line 22084
       $806 = $ReallocAsyncCtx6 + 128 | 0; //@line 22085
       HEAP32[$806 >> 2] = $70; //@line 22086
       $807 = $ReallocAsyncCtx6 + 132 | 0; //@line 22087
       HEAP32[$807 >> 2] = $72; //@line 22088
       $808 = $ReallocAsyncCtx6 + 136 | 0; //@line 22089
       HEAP32[$808 >> 2] = $74; //@line 22090
       $809 = $ReallocAsyncCtx6 + 140 | 0; //@line 22091
       HEAP32[$809 >> 2] = $76; //@line 22092
       $810 = $ReallocAsyncCtx6 + 144 | 0; //@line 22093
       HEAP32[$810 >> 2] = $80; //@line 22094
       $811 = $ReallocAsyncCtx6 + 148 | 0; //@line 22095
       HEAP32[$811 >> 2] = $82; //@line 22096
       $812 = $ReallocAsyncCtx6 + 152 | 0; //@line 22097
       HEAP32[$812 >> 2] = $84; //@line 22098
       $813 = $ReallocAsyncCtx6 + 156 | 0; //@line 22099
       HEAP32[$813 >> 2] = $86; //@line 22100
       $814 = $ReallocAsyncCtx6 + 160 | 0; //@line 22101
       HEAP32[$814 >> 2] = $88; //@line 22102
       $815 = $ReallocAsyncCtx6 + 164 | 0; //@line 22103
       HEAP32[$815 >> 2] = $90; //@line 22104
       $816 = $ReallocAsyncCtx6 + 168 | 0; //@line 22105
       HEAP32[$816 >> 2] = $92; //@line 22106
       $817 = $ReallocAsyncCtx6 + 172 | 0; //@line 22107
       HEAP32[$817 >> 2] = $94; //@line 22108
       $818 = $ReallocAsyncCtx6 + 176 | 0; //@line 22109
       HEAP32[$818 >> 2] = $96; //@line 22110
       $819 = $ReallocAsyncCtx6 + 180 | 0; //@line 22111
       HEAP32[$819 >> 2] = $98; //@line 22112
       $820 = $ReallocAsyncCtx6 + 184 | 0; //@line 22113
       HEAP32[$820 >> 2] = $100; //@line 22114
       $821 = $ReallocAsyncCtx6 + 188 | 0; //@line 22115
       HEAP32[$821 >> 2] = $102; //@line 22116
       $822 = $ReallocAsyncCtx6 + 192 | 0; //@line 22117
       HEAP32[$822 >> 2] = $104; //@line 22118
       $823 = $ReallocAsyncCtx6 + 196 | 0; //@line 22119
       HEAP32[$823 >> 2] = $106; //@line 22120
       $824 = $ReallocAsyncCtx6 + 200 | 0; //@line 22121
       HEAP32[$824 >> 2] = $108; //@line 22122
       $825 = $ReallocAsyncCtx6 + 204 | 0; //@line 22123
       HEAP32[$825 >> 2] = $110; //@line 22124
       $826 = $ReallocAsyncCtx6 + 208 | 0; //@line 22125
       HEAP32[$826 >> 2] = $112; //@line 22126
       $827 = $ReallocAsyncCtx6 + 212 | 0; //@line 22127
       HEAP32[$827 >> 2] = $114; //@line 22128
       $828 = $ReallocAsyncCtx6 + 216 | 0; //@line 22129
       HEAP32[$828 >> 2] = $116; //@line 22130
       $829 = $ReallocAsyncCtx6 + 220 | 0; //@line 22131
       HEAP32[$829 >> 2] = $118; //@line 22132
       $830 = $ReallocAsyncCtx6 + 224 | 0; //@line 22133
       HEAP32[$830 >> 2] = $120; //@line 22134
       $831 = $ReallocAsyncCtx6 + 228 | 0; //@line 22135
       HEAP32[$831 >> 2] = $122; //@line 22136
       $832 = $ReallocAsyncCtx6 + 232 | 0; //@line 22137
       HEAP32[$832 >> 2] = $124; //@line 22138
       $833 = $ReallocAsyncCtx6 + 236 | 0; //@line 22139
       HEAP32[$833 >> 2] = $126; //@line 22140
       $834 = $ReallocAsyncCtx6 + 240 | 0; //@line 22141
       HEAP32[$834 >> 2] = $128; //@line 22142
       $835 = $ReallocAsyncCtx6 + 244 | 0; //@line 22143
       HEAP32[$835 >> 2] = $130; //@line 22144
       $836 = $ReallocAsyncCtx6 + 248 | 0; //@line 22145
       HEAP32[$836 >> 2] = $132; //@line 22146
       $837 = $ReallocAsyncCtx6 + 252 | 0; //@line 22147
       HEAP32[$837 >> 2] = $134; //@line 22148
       $838 = $ReallocAsyncCtx6 + 256 | 0; //@line 22149
       HEAP32[$838 >> 2] = $138; //@line 22150
       $839 = $ReallocAsyncCtx6 + 260 | 0; //@line 22151
       HEAP32[$839 >> 2] = $140; //@line 22152
       $840 = $ReallocAsyncCtx6 + 264 | 0; //@line 22153
       HEAP32[$840 >> 2] = $142; //@line 22154
       sp = STACKTOP; //@line 22155
       return;
      }
      HEAP8[___async_retval >> 0] = $774; //@line 22159
      ___async_unwind = 0; //@line 22160
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 22161
      $775 = $ReallocAsyncCtx6 + 4 | 0; //@line 22162
      HEAP32[$775 >> 2] = $2; //@line 22163
      $776 = $ReallocAsyncCtx6 + 8 | 0; //@line 22164
      HEAP32[$776 >> 2] = $4; //@line 22165
      $777 = $ReallocAsyncCtx6 + 12 | 0; //@line 22166
      HEAP32[$777 >> 2] = $6; //@line 22167
      $778 = $ReallocAsyncCtx6 + 16 | 0; //@line 22168
      HEAP32[$778 >> 2] = $8; //@line 22169
      $779 = $ReallocAsyncCtx6 + 20 | 0; //@line 22170
      HEAP32[$779 >> 2] = $10; //@line 22171
      $780 = $ReallocAsyncCtx6 + 24 | 0; //@line 22172
      HEAP32[$780 >> 2] = $12; //@line 22173
      $781 = $ReallocAsyncCtx6 + 28 | 0; //@line 22174
      HEAP32[$781 >> 2] = $14; //@line 22175
      $782 = $ReallocAsyncCtx6 + 32 | 0; //@line 22176
      HEAP32[$782 >> 2] = $16; //@line 22177
      $783 = $ReallocAsyncCtx6 + 36 | 0; //@line 22178
      HEAP32[$783 >> 2] = $20; //@line 22179
      $784 = $ReallocAsyncCtx6 + 40 | 0; //@line 22180
      HEAP32[$784 >> 2] = $22; //@line 22181
      $785 = $ReallocAsyncCtx6 + 44 | 0; //@line 22182
      HEAP32[$785 >> 2] = $24; //@line 22183
      $786 = $ReallocAsyncCtx6 + 48 | 0; //@line 22184
      HEAP32[$786 >> 2] = $26; //@line 22185
      $787 = $ReallocAsyncCtx6 + 52 | 0; //@line 22186
      HEAP32[$787 >> 2] = $28; //@line 22187
      $788 = $ReallocAsyncCtx6 + 56 | 0; //@line 22188
      HEAP32[$788 >> 2] = $30; //@line 22189
      $789 = $ReallocAsyncCtx6 + 60 | 0; //@line 22190
      HEAP32[$789 >> 2] = $32; //@line 22191
      $790 = $ReallocAsyncCtx6 + 64 | 0; //@line 22192
      HEAP32[$790 >> 2] = $34; //@line 22193
      $791 = $ReallocAsyncCtx6 + 68 | 0; //@line 22194
      HEAP32[$791 >> 2] = $36; //@line 22195
      $792 = $ReallocAsyncCtx6 + 72 | 0; //@line 22196
      HEAP32[$792 >> 2] = $38; //@line 22197
      $793 = $ReallocAsyncCtx6 + 76 | 0; //@line 22198
      HEAP32[$793 >> 2] = $40; //@line 22199
      $794 = $ReallocAsyncCtx6 + 80 | 0; //@line 22200
      HEAP32[$794 >> 2] = $60; //@line 22201
      $795 = $ReallocAsyncCtx6 + 84 | 0; //@line 22202
      HEAP32[$795 >> 2] = $44; //@line 22203
      $796 = $ReallocAsyncCtx6 + 88 | 0; //@line 22204
      HEAP32[$796 >> 2] = $46; //@line 22205
      $797 = $ReallocAsyncCtx6 + 92 | 0; //@line 22206
      HEAP32[$797 >> 2] = $50; //@line 22207
      $798 = $ReallocAsyncCtx6 + 96 | 0; //@line 22208
      HEAP32[$798 >> 2] = $52; //@line 22209
      $799 = $ReallocAsyncCtx6 + 100 | 0; //@line 22210
      HEAP32[$799 >> 2] = $54; //@line 22211
      $800 = $ReallocAsyncCtx6 + 104 | 0; //@line 22212
      HEAP32[$800 >> 2] = $56; //@line 22213
      $801 = $ReallocAsyncCtx6 + 108 | 0; //@line 22214
      HEAP32[$801 >> 2] = $58; //@line 22215
      $802 = $ReallocAsyncCtx6 + 112 | 0; //@line 22216
      HEAP32[$802 >> 2] = $62; //@line 22217
      $803 = $ReallocAsyncCtx6 + 116 | 0; //@line 22218
      HEAP32[$803 >> 2] = $64; //@line 22219
      $804 = $ReallocAsyncCtx6 + 120 | 0; //@line 22220
      HEAP32[$804 >> 2] = $66; //@line 22221
      $805 = $ReallocAsyncCtx6 + 124 | 0; //@line 22222
      HEAP32[$805 >> 2] = $$reg2mem62$0; //@line 22223
      $806 = $ReallocAsyncCtx6 + 128 | 0; //@line 22224
      HEAP32[$806 >> 2] = $70; //@line 22225
      $807 = $ReallocAsyncCtx6 + 132 | 0; //@line 22226
      HEAP32[$807 >> 2] = $72; //@line 22227
      $808 = $ReallocAsyncCtx6 + 136 | 0; //@line 22228
      HEAP32[$808 >> 2] = $74; //@line 22229
      $809 = $ReallocAsyncCtx6 + 140 | 0; //@line 22230
      HEAP32[$809 >> 2] = $76; //@line 22231
      $810 = $ReallocAsyncCtx6 + 144 | 0; //@line 22232
      HEAP32[$810 >> 2] = $80; //@line 22233
      $811 = $ReallocAsyncCtx6 + 148 | 0; //@line 22234
      HEAP32[$811 >> 2] = $82; //@line 22235
      $812 = $ReallocAsyncCtx6 + 152 | 0; //@line 22236
      HEAP32[$812 >> 2] = $84; //@line 22237
      $813 = $ReallocAsyncCtx6 + 156 | 0; //@line 22238
      HEAP32[$813 >> 2] = $86; //@line 22239
      $814 = $ReallocAsyncCtx6 + 160 | 0; //@line 22240
      HEAP32[$814 >> 2] = $88; //@line 22241
      $815 = $ReallocAsyncCtx6 + 164 | 0; //@line 22242
      HEAP32[$815 >> 2] = $90; //@line 22243
      $816 = $ReallocAsyncCtx6 + 168 | 0; //@line 22244
      HEAP32[$816 >> 2] = $92; //@line 22245
      $817 = $ReallocAsyncCtx6 + 172 | 0; //@line 22246
      HEAP32[$817 >> 2] = $94; //@line 22247
      $818 = $ReallocAsyncCtx6 + 176 | 0; //@line 22248
      HEAP32[$818 >> 2] = $96; //@line 22249
      $819 = $ReallocAsyncCtx6 + 180 | 0; //@line 22250
      HEAP32[$819 >> 2] = $98; //@line 22251
      $820 = $ReallocAsyncCtx6 + 184 | 0; //@line 22252
      HEAP32[$820 >> 2] = $100; //@line 22253
      $821 = $ReallocAsyncCtx6 + 188 | 0; //@line 22254
      HEAP32[$821 >> 2] = $102; //@line 22255
      $822 = $ReallocAsyncCtx6 + 192 | 0; //@line 22256
      HEAP32[$822 >> 2] = $104; //@line 22257
      $823 = $ReallocAsyncCtx6 + 196 | 0; //@line 22258
      HEAP32[$823 >> 2] = $106; //@line 22259
      $824 = $ReallocAsyncCtx6 + 200 | 0; //@line 22260
      HEAP32[$824 >> 2] = $108; //@line 22261
      $825 = $ReallocAsyncCtx6 + 204 | 0; //@line 22262
      HEAP32[$825 >> 2] = $110; //@line 22263
      $826 = $ReallocAsyncCtx6 + 208 | 0; //@line 22264
      HEAP32[$826 >> 2] = $112; //@line 22265
      $827 = $ReallocAsyncCtx6 + 212 | 0; //@line 22266
      HEAP32[$827 >> 2] = $114; //@line 22267
      $828 = $ReallocAsyncCtx6 + 216 | 0; //@line 22268
      HEAP32[$828 >> 2] = $116; //@line 22269
      $829 = $ReallocAsyncCtx6 + 220 | 0; //@line 22270
      HEAP32[$829 >> 2] = $118; //@line 22271
      $830 = $ReallocAsyncCtx6 + 224 | 0; //@line 22272
      HEAP32[$830 >> 2] = $120; //@line 22273
      $831 = $ReallocAsyncCtx6 + 228 | 0; //@line 22274
      HEAP32[$831 >> 2] = $122; //@line 22275
      $832 = $ReallocAsyncCtx6 + 232 | 0; //@line 22276
      HEAP32[$832 >> 2] = $124; //@line 22277
      $833 = $ReallocAsyncCtx6 + 236 | 0; //@line 22278
      HEAP32[$833 >> 2] = $126; //@line 22279
      $834 = $ReallocAsyncCtx6 + 240 | 0; //@line 22280
      HEAP32[$834 >> 2] = $128; //@line 22281
      $835 = $ReallocAsyncCtx6 + 244 | 0; //@line 22282
      HEAP32[$835 >> 2] = $130; //@line 22283
      $836 = $ReallocAsyncCtx6 + 248 | 0; //@line 22284
      HEAP32[$836 >> 2] = $132; //@line 22285
      $837 = $ReallocAsyncCtx6 + 252 | 0; //@line 22286
      HEAP32[$837 >> 2] = $134; //@line 22287
      $838 = $ReallocAsyncCtx6 + 256 | 0; //@line 22288
      HEAP32[$838 >> 2] = $138; //@line 22289
      $839 = $ReallocAsyncCtx6 + 260 | 0; //@line 22290
      HEAP32[$839 >> 2] = $140; //@line 22291
      $840 = $ReallocAsyncCtx6 + 264 | 0; //@line 22292
      HEAP32[$840 >> 2] = $142; //@line 22293
      sp = STACKTOP; //@line 22294
      return;
     }
    case 78:
     {
      _mbed_tracef(2, 3803, 5152, $50); //@line 22299
      break L2;
      break;
     }
    case 84:
     {
      _mbed_tracef(2, 3803, 5213, $22); //@line 22304
      break L2;
      break;
     }
    case 90:
     {
      _mbed_tracef(2, 3803, 5274, $80); //@line 22309
      break L2;
      break;
     }
    case 96:
     {
      _mbed_tracef(2, 3803, 5335, $66); //@line 22314
      break L2;
      break;
     }
    case 102:
     {
      _mbed_tracef(2, 3803, 5395, $128); //@line 22319
      break L2;
      break;
     }
    case 106:
     {
      _mbed_tracef(2, 3803, 5455, $82); //@line 22324
      break L2;
      break;
     }
    case 109:
     {
      if (($147 - $100 | 0) >= ($88 | 0)) {
       $951 = ___async_retval; //@line 22333
       HEAP32[$951 >> 2] = $40; //@line 22334
       return;
      }
      if ((HEAP8[$147 >> 0] | 0) == -1) {
       $941 = $147 + 1 | 0; //@line 22340
       HEAP32[$38 >> 2] = $941; //@line 22341
       $942 = $941; //@line 22342
       $944 = $100 - $942 + $88 | 0; //@line 22344
       HEAP16[$90 + 24 >> 1] = $944; //@line 22347
       if ($944 & 65535 | 0) {
        HEAP32[$90 + 36 >> 2] = $942; //@line 22352
        $951 = ___async_retval; //@line 22353
        HEAP32[$951 >> 2] = $40; //@line 22354
        return;
       }
      } else {
       _mbed_tracef(2, 3803, 5502, $54); //@line 22358
      }
      HEAP32[$90 + 4 >> 2] = 1; //@line 22361
      $951 = ___async_retval; //@line 22362
      HEAP32[$951 >> 2] = $40; //@line 22363
      return;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 22) {
  _mbed_tracef(2, 3803, 4179, $32); //@line 22372
 }
 HEAP32[$90 + 4 >> 2] = 1; //@line 22375
 $951 = ___async_retval; //@line 22376
 HEAP32[$951 >> 2] = $40; //@line 22377
 return;
}
function _sn_coap_parser__async_cb_23($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $144 = 0, $147 = 0, $16 = 0, $161 = 0, $166 = 0, $178 = 0, $18 = 0, $181 = 0, $182 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $263 = 0, $264 = 0, $269 = 0, $272 = 0, $275 = 0, $276 = 0, $28 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $368 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $438 = 0, $44 = 0, $441 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $519 = 0, $52 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $593 = 0, $596 = 0, $597 = 0, $6 = 0, $60 = 0, $602 = 0, $605 = 0, $607 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $748 = 0, $751 = 0, $752 = 0, $757 = 0, $76 = 0, $760 = 0, $762 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $835 = 0, $838 = 0, $839 = 0, $84 = 0, $844 = 0, $847 = 0, $851 = 0, $854 = 0, $855 = 0, $86 = 0, $860 = 0, $863 = 0, $867 = 0, $870 = 0, $871 = 0, $876 = 0, $879 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $890 = 0, $895 = 0, $898 = 0, $904 = 0, $905 = 0, $910 = 0, $911 = 0, $916 = 0, $919 = 0, $92 = 0, $923 = 0, $924 = 0, $934 = 0, $935 = 0, $937 = 0, $94 = 0, $944 = 0, $945 = 0, $946 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $281$looptemp = 0, $602$looptemp = 0, $757$looptemp = 0, $844$looptemp = 0, $860$looptemp = 0, $876$looptemp = 0, $895$looptemp = 0, $916$looptemp = 0, $269$looptemp = 0;
 sp = STACKTOP; //@line 15955
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15957
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15959
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15961
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15963
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15965
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15967
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15969
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15971
 $18 = HEAP16[$0 + 36 >> 1] | 0; //@line 15973
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15975
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15977
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15979
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15981
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15983
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15987
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 15989
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15991
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15993
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 15995
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 15997
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 15999
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16001
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16003
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16005
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 16007
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 16009
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 16011
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 16013
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 16015
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 16017
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 16019
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 16021
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 16023
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 16025
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 16027
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 16029
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 16031
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 16033
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 16035
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 16037
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 16039
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 16041
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 16043
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 16047
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 16049
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 16051
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 16053
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 16055
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 16057
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 16059
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 16061
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 16063
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 16065
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 16067
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 16069
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 16071
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 16073
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 16075
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 16077
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 16079
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 16081
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16083
 HEAP32[HEAP32[$0 + 60 >> 2] >> 2] = $AsyncRetVal; //@line 16084
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3803, 4009, $56); //@line 16088
  } else {
   _memcpy($AsyncRetVal | 0, $98 | 0, HEAPU8[$80 >> 0] | 0) | 0; //@line 16092
   $133 = $98 + (HEAPU8[$80 >> 0] | 0) | 0; //@line 16095
   HEAP32[$38 >> 2] = $133; //@line 16096
   $134 = $133; //@line 16097
   $135 = $18 & 65535; //@line 16098
   $136 = $16; //@line 16099
   $137 = $136 + $135 | 0; //@line 16100
   $139 = $80 + 40 | 0; //@line 16102
   $140 = $80 + 32 | 0; //@line 16103
   $141 = $80 + 22 | 0; //@line 16104
   $$0208$i = 0; //@line 16105
   $$sink275$i = $137 - $134 | 0; //@line 16105
   $144 = $133; //@line 16105
   $945 = $134; //@line 16105
   L6 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 109; //@line 16110
     break;
    }
    $trunc277$i = HEAP8[$144 >> 0] | 0; //@line 16113
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 109; //@line 16116
     break;
    }
    $147 = $trunc277$i & 15; //@line 16120
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 16121
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 11; //@line 16126
      break L6;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$144 + 1 >> 0] | 0; //@line 16134
      $$sink214$i = 13; //@line 16134
      $$sink3$i = 1; //@line 16134
      label = 12; //@line 16135
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$144 + 1 >> 0] << 8) + 269 | 0; //@line 16147
      $$sink214$i = HEAPU8[$144 + 2 >> 0] | 0; //@line 16147
      $$sink3$i = 2; //@line 16147
      label = 12; //@line 16148
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 16152
      $166 = $144; //@line 16152
      $946 = $945; //@line 16152
     }
    }
    if ((label | 0) == 12) {
     label = 0; //@line 16156
     $161 = $144 + $$sink3$i | 0; //@line 16158
     HEAP32[$38 >> 2] = $161; //@line 16159
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 16161
     $166 = $161; //@line 16161
     $946 = $161; //@line 16161
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 16164
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 16; //@line 16168
      break L6;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$166 + 1 >> 0] | 0; //@line 16176
      $$sink216$i = 13; //@line 16176
      $$sink8$i = 1; //@line 16176
      label = 17; //@line 16177
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$166 + 1 >> 0] << 8) + 269 | 0; //@line 16189
      $$sink216$i = HEAPU8[$166 + 2 >> 0] | 0; //@line 16189
      $$sink8$i = 2; //@line 16189
      label = 17; //@line 16190
      break;
     }
    default:
     {
      $$1202$in$i = $147; //@line 16194
      $181 = $946; //@line 16194
      $196 = $166; //@line 16194
     }
    }
    if ((label | 0) == 17) {
     label = 0; //@line 16198
     $178 = $166 + $$sink8$i | 0; //@line 16200
     HEAP32[$38 >> 2] = $178; //@line 16201
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 16203
     $181 = $178; //@line 16203
     $196 = $178; //@line 16203
    }
    $$1202$i = $$1202$in$i & 65535; //@line 16205
    $182 = $137 - $181 & 65535; //@line 16207
    $trunc$i = $$0208$i & 65535; //@line 16208
    L22 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 64; //@line 16212
       break L6;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$139 >> 2] | 0)) {
        label = 20; //@line 16220
        break L6;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 35; //@line 16225
         break L6;
         break;
        }
       case 4:
        {
         label = 41; //@line 16230
         break L6;
         break;
        }
       case 3:
        {
         label = 44; //@line 16235
         break L6;
         break;
        }
       case 8:
        {
         label = 50; //@line 16240
         break L6;
         break;
        }
       case 20:
        {
         label = 61; //@line 16245
         break L6;
         break;
        }
       case 11:
        {
         label = 64; //@line 16250
         break L6;
         break;
        }
       case 15:
        {
         label = 73; //@line 16255
         break L6;
         break;
        }
       case 12:
        {
         label = 24; //@line 16260
         break L22;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 31; //@line 16267
          break L6;
         }
         $275 = $196 + 1 | 0; //@line 16270
         HEAP32[$38 >> 2] = $275; //@line 16271
         $276 = $$1202$in$i & 255; //@line 16272
         if (!($276 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 16275
         } else {
          $$045$i221$i = $276; //@line 16277
          $$06$i220$i = 0; //@line 16277
          $281 = $275; //@line 16277
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 16279
           $281$looptemp = $281;
           $281 = $281 + 1 | 0; //@line 16281
           HEAP32[$38 >> 2] = $281; //@line 16282
           $284 = $$06$i220$i << 8 | HEAPU8[$281$looptemp >> 0]; //@line 16285
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $284; //@line 16288
            break;
           } else {
            $$06$i220$i = $284; //@line 16291
           }
          }
         }
         HEAP32[(HEAP32[$139 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 16297
         break L22;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 57; //@line 16304
          break L6;
         }
         $593 = (HEAP32[$139 >> 2] | 0) + 28 | 0; //@line 16308
         if ((HEAP32[$593 >> 2] | 0) != -1) {
          label = 57; //@line 16312
          break L6;
         }
         $596 = $196 + 1 | 0; //@line 16315
         HEAP32[$38 >> 2] = $596; //@line 16316
         $597 = $$1202$in$i & 255; //@line 16317
         if (!($597 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 16320
         } else {
          $$045$i263$i = $597; //@line 16322
          $$06$i262$i = 0; //@line 16322
          $602 = $596; //@line 16322
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 16324
           $602$looptemp = $602;
           $602 = $602 + 1 | 0; //@line 16326
           HEAP32[$38 >> 2] = $602; //@line 16327
           $605 = $$06$i262$i << 8 | HEAPU8[$602$looptemp >> 0]; //@line 16330
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $605; //@line 16333
            break;
           } else {
            $$06$i262$i = $605; //@line 16336
           }
          }
         }
         HEAP32[$593 >> 2] = $$0$lcssa$i265$i; //@line 16340
         break L22;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 69; //@line 16347
          break L6;
         }
         $748 = (HEAP32[$139 >> 2] | 0) + 32 | 0; //@line 16351
         if ((HEAP32[$748 >> 2] | 0) != -1) {
          label = 69; //@line 16355
          break L6;
         }
         $751 = $196 + 1 | 0; //@line 16358
         HEAP32[$38 >> 2] = $751; //@line 16359
         $752 = $$1202$in$i & 255; //@line 16360
         if (!($752 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 16363
         } else {
          $$045$i270$i = $752; //@line 16365
          $$06$i269$i = 0; //@line 16365
          $757 = $751; //@line 16365
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 16367
           $757$looptemp = $757;
           $757 = $757 + 1 | 0; //@line 16369
           HEAP32[$38 >> 2] = $757; //@line 16370
           $760 = $$06$i269$i << 8 | HEAPU8[$757$looptemp >> 0]; //@line 16373
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $760; //@line 16376
            break;
           } else {
            $$06$i269$i = $760; //@line 16379
           }
          }
         }
         HEAP32[$748 >> 2] = $$0$lcssa$i272$i; //@line 16383
         break L22;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 78; //@line 16390
          break L6;
         }
         $835 = (HEAP32[$139 >> 2] | 0) + 40 | 0; //@line 16394
         if ((HEAP32[$835 >> 2] | 0) != -1) {
          label = 78; //@line 16398
          break L6;
         }
         $838 = $196 + 1 | 0; //@line 16401
         HEAP32[$38 >> 2] = $838; //@line 16402
         $839 = $$1202$in$i & 255; //@line 16403
         if (!($839 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 16406
         } else {
          $$045$i256$i = $839; //@line 16408
          $$06$i255$i = 0; //@line 16408
          $844 = $838; //@line 16408
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 16410
           $844$looptemp = $844;
           $844 = $844 + 1 | 0; //@line 16412
           HEAP32[$38 >> 2] = $844; //@line 16413
           $847 = $$06$i255$i << 8 | HEAPU8[$844$looptemp >> 0]; //@line 16416
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $847; //@line 16419
            break;
           } else {
            $$06$i255$i = $847; //@line 16422
           }
          }
         }
         HEAP32[$835 >> 2] = $$0$lcssa$i258$i; //@line 16426
         break L22;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 84; //@line 16433
          break L6;
         }
         $851 = (HEAP32[$139 >> 2] | 0) + 36 | 0; //@line 16437
         if ((HEAP32[$851 >> 2] | 0) != -1) {
          label = 84; //@line 16441
          break L6;
         }
         $854 = $196 + 1 | 0; //@line 16444
         HEAP32[$38 >> 2] = $854; //@line 16445
         $855 = $$1202$in$i & 255; //@line 16446
         if (!($855 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 16449
         } else {
          $$045$i249$i = $855; //@line 16451
          $$06$i248$i = 0; //@line 16451
          $860 = $854; //@line 16451
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 16453
           $860$looptemp = $860;
           $860 = $860 + 1 | 0; //@line 16455
           HEAP32[$38 >> 2] = $860; //@line 16456
           $863 = $$06$i248$i << 8 | HEAPU8[$860$looptemp >> 0]; //@line 16459
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $863; //@line 16462
            break;
           } else {
            $$06$i248$i = $863; //@line 16465
           }
          }
         }
         HEAP32[$851 >> 2] = $$0$lcssa$i251$i; //@line 16469
         break L22;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 90; //@line 16476
          break L6;
         }
         $867 = (HEAP32[$139 >> 2] | 0) + 12 | 0; //@line 16480
         if ((HEAP32[$867 >> 2] | 0) != -1) {
          label = 90; //@line 16484
          break L6;
         }
         $870 = $196 + 1 | 0; //@line 16487
         HEAP32[$38 >> 2] = $870; //@line 16488
         $871 = $$1202$in$i & 255; //@line 16489
         if (!($871 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 16492
         } else {
          $$045$i242$i = $871; //@line 16494
          $$06$i241$i = 0; //@line 16494
          $876 = $870; //@line 16494
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 16496
           $876$looptemp = $876;
           $876 = $876 + 1 | 0; //@line 16498
           HEAP32[$38 >> 2] = $876; //@line 16499
           $879 = $$06$i241$i << 8 | HEAPU8[$876$looptemp >> 0]; //@line 16502
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $879; //@line 16505
            break;
           } else {
            $$06$i241$i = $879; //@line 16508
           }
          }
         }
         HEAP32[$867 >> 2] = $$0$lcssa$i244$i; //@line 16512
         break L22;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 96; //@line 16519
          break L6;
         }
         $883 = (HEAP32[$139 >> 2] | 0) + 1 | 0; //@line 16523
         $884 = HEAP8[$883 >> 0] | 0; //@line 16524
         if ($884 & 1) {
          label = 96; //@line 16528
          break L6;
         }
         HEAP8[$883 >> 0] = $884 | 1; //@line 16532
         $889 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 16534
         HEAP32[$38 >> 2] = $889; //@line 16535
         $890 = $$1202$in$i & 255; //@line 16536
         if (!($890 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 16539
         } else {
          $$045$i235$i = $890; //@line 16541
          $$06$i234$i = 0; //@line 16541
          $895 = $889; //@line 16541
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 16543
           $895$looptemp = $895;
           $895 = $895 + 1 | 0; //@line 16545
           HEAP32[$38 >> 2] = $895; //@line 16546
           $898 = $$06$i234$i << 8 | HEAPU8[$895$looptemp >> 0]; //@line 16549
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $898; //@line 16552
            break;
           } else {
            $$06$i234$i = $898; //@line 16555
           }
          }
         }
         HEAP32[(HEAP32[$139 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 16561
         break L22;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 102; //@line 16568
          break L6;
         }
         $904 = (HEAP32[$139 >> 2] | 0) + 1 | 0; //@line 16572
         $905 = HEAP8[$904 >> 0] | 0; //@line 16573
         if ($905 & 2) {
          label = 102; //@line 16577
          break L6;
         }
         HEAP8[$904 >> 0] = $905 | 2; //@line 16581
         $910 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 16583
         HEAP32[$38 >> 2] = $910; //@line 16584
         $911 = $$1202$in$i & 255; //@line 16585
         if (!($911 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 16588
         } else {
          $$045$i228$i = $911; //@line 16590
          $$06$i227$i = 0; //@line 16590
          $916 = $910; //@line 16590
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 16592
           $916$looptemp = $916;
           $916 = $916 + 1 | 0; //@line 16594
           HEAP32[$38 >> 2] = $916; //@line 16595
           $919 = $$06$i227$i << 8 | HEAPU8[$916$looptemp >> 0]; //@line 16598
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $919; //@line 16601
            break;
           } else {
            $$06$i227$i = $919; //@line 16604
           }
          }
         }
         HEAP32[(HEAP32[$139 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 16610
         break L22;
         break;
        }
       default:
        {
         label = 106; //@line 16615
         break L6;
        }
       }
       break;
      }
     case 12:
      {
       label = 24; //@line 16622
       break;
      }
     default:
      {
       label = 106; //@line 16626
       break L6;
      }
     }
    } while (0);
    if ((label | 0) == 24) {
     label = 0; //@line 16632
     if (($$1202$i & 65535) > 2) {
      label = 26; //@line 16635
      break;
     }
     if ((HEAP32[$8 >> 2] | 0) != -1) {
      label = 26; //@line 16641
      break;
     }
     $263 = $196 + 1 | 0; //@line 16644
     HEAP32[$38 >> 2] = $263; //@line 16645
     $264 = $$1202$in$i & 255; //@line 16646
     if (!($264 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 16649
     } else {
      $$045$i$i = $264; //@line 16651
      $$06$i$i = 0; //@line 16651
      $269 = $263; //@line 16651
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 16653
       $269$looptemp = $269;
       $269 = $269 + 1 | 0; //@line 16655
       HEAP32[$38 >> 2] = $269; //@line 16656
       $272 = $$06$i$i << 8 | HEAPU8[$269$looptemp >> 0]; //@line 16659
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $272; //@line 16662
        break;
       } else {
        $$06$i$i = $272; //@line 16665
       }
      }
     }
     HEAP32[$8 >> 2] = $$0$lcssa$i$i; //@line 16669
    }
    $923 = HEAP32[$38 >> 2] | 0; //@line 16671
    $924 = $923 - $136 | 0; //@line 16672
    if (($924 | 0) > ($135 | 0)) {
     break L2;
    } else {
     $$sink275$i = $135 - $924 | 0; //@line 16679
     $144 = $923; //@line 16679
     $945 = $923; //@line 16679
    }
   }
   switch (label | 0) {
   case 11:
    {
     _mbed_tracef(2, 3803, 4066, $76); //@line 16684
     break L2;
     break;
    }
   case 16:
    {
     _mbed_tracef(2, 3803, 4124, $28); //@line 16689
     break L2;
     break;
    }
   case 20:
    {
     $185 = HEAP32[$124 >> 2] | 0; //@line 16694
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 16695
     $186 = FUNCTION_TABLE_ii[$185 & 31](68) | 0; //@line 16696
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 16699
      $187 = $ReallocAsyncCtx3 + 4 | 0; //@line 16700
      HEAP32[$187 >> 2] = $2; //@line 16701
      $188 = $ReallocAsyncCtx3 + 8 | 0; //@line 16702
      HEAP32[$188 >> 2] = $140; //@line 16703
      $189 = $ReallocAsyncCtx3 + 12 | 0; //@line 16704
      HEAP32[$189 >> 2] = $4; //@line 16705
      $190 = $ReallocAsyncCtx3 + 16 | 0; //@line 16706
      HEAP32[$190 >> 2] = $6; //@line 16707
      $191 = $ReallocAsyncCtx3 + 20 | 0; //@line 16708
      HEAP32[$191 >> 2] = $8; //@line 16709
      $192 = $ReallocAsyncCtx3 + 24 | 0; //@line 16710
      HEAP32[$192 >> 2] = $10; //@line 16711
      $193 = $ReallocAsyncCtx3 + 28 | 0; //@line 16712
      HEAP32[$193 >> 2] = $12; //@line 16713
      $194 = $ReallocAsyncCtx3 + 32 | 0; //@line 16714
      HEAP32[$194 >> 2] = $14; //@line 16715
      $195 = $ReallocAsyncCtx3 + 36 | 0; //@line 16716
      HEAP32[$195 >> 2] = $196; //@line 16717
      $197 = $ReallocAsyncCtx3 + 40 | 0; //@line 16718
      HEAP32[$197 >> 2] = $20; //@line 16719
      $198 = $ReallocAsyncCtx3 + 44 | 0; //@line 16720
      HEAP32[$198 >> 2] = $22; //@line 16721
      $199 = $ReallocAsyncCtx3 + 48 | 0; //@line 16722
      HEAP32[$199 >> 2] = $141; //@line 16723
      $200 = $ReallocAsyncCtx3 + 52 | 0; //@line 16724
      HEAP32[$200 >> 2] = $24; //@line 16725
      $201 = $ReallocAsyncCtx3 + 56 | 0; //@line 16726
      HEAP32[$201 >> 2] = $26; //@line 16727
      $202 = $ReallocAsyncCtx3 + 60 | 0; //@line 16728
      HEAP32[$202 >> 2] = $28; //@line 16729
      $203 = $ReallocAsyncCtx3 + 64 | 0; //@line 16730
      HEAP32[$203 >> 2] = $32; //@line 16731
      $204 = $ReallocAsyncCtx3 + 68 | 0; //@line 16732
      HEAP32[$204 >> 2] = $34; //@line 16733
      $205 = $ReallocAsyncCtx3 + 72 | 0; //@line 16734
      HEAP32[$205 >> 2] = $36; //@line 16735
      $206 = $ReallocAsyncCtx3 + 76 | 0; //@line 16736
      HEAP32[$206 >> 2] = $38; //@line 16737
      $207 = $ReallocAsyncCtx3 + 80 | 0; //@line 16738
      HEAP32[$207 >> 2] = $40; //@line 16739
      $208 = $ReallocAsyncCtx3 + 84 | 0; //@line 16740
      HEAP32[$208 >> 2] = $$1202$in$i; //@line 16741
      $209 = $ReallocAsyncCtx3 + 88 | 0; //@line 16742
      HEAP32[$209 >> 2] = $44; //@line 16743
      $210 = $ReallocAsyncCtx3 + 92 | 0; //@line 16744
      HEAP32[$210 >> 2] = $46; //@line 16745
      $211 = $ReallocAsyncCtx3 + 96 | 0; //@line 16746
      HEAP16[$211 >> 1] = $$1202$i; //@line 16747
      $212 = $ReallocAsyncCtx3 + 100 | 0; //@line 16748
      HEAP32[$212 >> 2] = $48; //@line 16749
      $213 = $ReallocAsyncCtx3 + 104 | 0; //@line 16750
      HEAP32[$213 >> 2] = $50; //@line 16751
      $214 = $ReallocAsyncCtx3 + 108 | 0; //@line 16752
      HEAP32[$214 >> 2] = $52; //@line 16753
      $215 = $ReallocAsyncCtx3 + 112 | 0; //@line 16754
      HEAP32[$215 >> 2] = $54; //@line 16755
      $216 = $ReallocAsyncCtx3 + 116 | 0; //@line 16756
      HEAP32[$216 >> 2] = $58; //@line 16757
      $217 = $ReallocAsyncCtx3 + 120 | 0; //@line 16758
      HEAP32[$217 >> 2] = $42; //@line 16759
      $218 = $ReallocAsyncCtx3 + 124 | 0; //@line 16760
      HEAP32[$218 >> 2] = $60; //@line 16761
      $219 = $ReallocAsyncCtx3 + 128 | 0; //@line 16762
      HEAP32[$219 >> 2] = $62; //@line 16763
      $220 = $ReallocAsyncCtx3 + 132 | 0; //@line 16764
      HEAP32[$220 >> 2] = $64; //@line 16765
      $221 = $ReallocAsyncCtx3 + 136 | 0; //@line 16766
      HEAP32[$221 >> 2] = $$0208$i; //@line 16767
      $222 = $ReallocAsyncCtx3 + 140 | 0; //@line 16768
      HEAP32[$222 >> 2] = $66; //@line 16769
      $223 = $ReallocAsyncCtx3 + 144 | 0; //@line 16770
      HEAP32[$223 >> 2] = $68; //@line 16771
      $224 = $ReallocAsyncCtx3 + 148 | 0; //@line 16772
      HEAP32[$224 >> 2] = $38; //@line 16773
      $225 = $ReallocAsyncCtx3 + 152 | 0; //@line 16774
      HEAP32[$225 >> 2] = $70; //@line 16775
      $226 = $ReallocAsyncCtx3 + 156 | 0; //@line 16776
      HEAP16[$226 >> 1] = $182; //@line 16777
      $227 = $ReallocAsyncCtx3 + 160 | 0; //@line 16778
      HEAP32[$227 >> 2] = $72; //@line 16779
      $228 = $ReallocAsyncCtx3 + 164 | 0; //@line 16780
      HEAP32[$228 >> 2] = $74; //@line 16781
      $229 = $ReallocAsyncCtx3 + 168 | 0; //@line 16782
      HEAP32[$229 >> 2] = $76; //@line 16783
      $230 = $ReallocAsyncCtx3 + 172 | 0; //@line 16784
      HEAP32[$230 >> 2] = $78; //@line 16785
      $231 = $ReallocAsyncCtx3 + 176 | 0; //@line 16786
      HEAP32[$231 >> 2] = $135; //@line 16787
      $232 = $ReallocAsyncCtx3 + 180 | 0; //@line 16788
      HEAP32[$232 >> 2] = $80; //@line 16789
      $233 = $ReallocAsyncCtx3 + 184 | 0; //@line 16790
      HEAP32[$233 >> 2] = $82; //@line 16791
      $234 = $ReallocAsyncCtx3 + 188 | 0; //@line 16792
      HEAP32[$234 >> 2] = $84; //@line 16793
      $235 = $ReallocAsyncCtx3 + 192 | 0; //@line 16794
      HEAP32[$235 >> 2] = $86; //@line 16795
      $236 = $ReallocAsyncCtx3 + 196 | 0; //@line 16796
      HEAP32[$236 >> 2] = $88; //@line 16797
      $237 = $ReallocAsyncCtx3 + 200 | 0; //@line 16798
      HEAP32[$237 >> 2] = $136; //@line 16799
      $238 = $ReallocAsyncCtx3 + 204 | 0; //@line 16800
      HEAP32[$238 >> 2] = $92; //@line 16801
      $239 = $ReallocAsyncCtx3 + 208 | 0; //@line 16802
      HEAP32[$239 >> 2] = $94; //@line 16803
      $240 = $ReallocAsyncCtx3 + 212 | 0; //@line 16804
      HEAP32[$240 >> 2] = $96; //@line 16805
      $241 = $ReallocAsyncCtx3 + 216 | 0; //@line 16806
      HEAP32[$241 >> 2] = $137; //@line 16807
      $242 = $ReallocAsyncCtx3 + 220 | 0; //@line 16808
      HEAP32[$242 >> 2] = $100; //@line 16809
      $243 = $ReallocAsyncCtx3 + 224 | 0; //@line 16810
      HEAP32[$243 >> 2] = $102; //@line 16811
      $244 = $ReallocAsyncCtx3 + 228 | 0; //@line 16812
      HEAP32[$244 >> 2] = $104; //@line 16813
      $245 = $ReallocAsyncCtx3 + 232 | 0; //@line 16814
      HEAP32[$245 >> 2] = $106; //@line 16815
      $246 = $ReallocAsyncCtx3 + 236 | 0; //@line 16816
      HEAP32[$246 >> 2] = $108; //@line 16817
      $247 = $ReallocAsyncCtx3 + 240 | 0; //@line 16818
      HEAP32[$247 >> 2] = $110; //@line 16819
      $248 = $ReallocAsyncCtx3 + 244 | 0; //@line 16820
      HEAP32[$248 >> 2] = $112; //@line 16821
      $249 = $ReallocAsyncCtx3 + 248 | 0; //@line 16822
      HEAP32[$249 >> 2] = $114; //@line 16823
      $250 = $ReallocAsyncCtx3 + 252 | 0; //@line 16824
      HEAP32[$250 >> 2] = $116; //@line 16825
      $251 = $ReallocAsyncCtx3 + 256 | 0; //@line 16826
      HEAP32[$251 >> 2] = $118; //@line 16827
      $252 = $ReallocAsyncCtx3 + 260 | 0; //@line 16828
      HEAP32[$252 >> 2] = $120; //@line 16829
      $253 = $ReallocAsyncCtx3 + 264 | 0; //@line 16830
      HEAP32[$253 >> 2] = $122; //@line 16831
      $254 = $ReallocAsyncCtx3 + 268 | 0; //@line 16832
      HEAP32[$254 >> 2] = $139; //@line 16833
      $255 = $ReallocAsyncCtx3 + 272 | 0; //@line 16834
      HEAP16[$255 >> 1] = $trunc$i; //@line 16835
      $256 = $ReallocAsyncCtx3 + 276 | 0; //@line 16836
      HEAP32[$256 >> 2] = $124; //@line 16837
      $257 = $ReallocAsyncCtx3 + 280 | 0; //@line 16838
      HEAP32[$257 >> 2] = $139; //@line 16839
      $258 = $ReallocAsyncCtx3 + 284 | 0; //@line 16840
      HEAP32[$258 >> 2] = $126; //@line 16841
      sp = STACKTOP; //@line 16842
      return;
     }
     HEAP32[___async_retval >> 2] = $186; //@line 16846
     ___async_unwind = 0; //@line 16847
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 16848
     $187 = $ReallocAsyncCtx3 + 4 | 0; //@line 16849
     HEAP32[$187 >> 2] = $2; //@line 16850
     $188 = $ReallocAsyncCtx3 + 8 | 0; //@line 16851
     HEAP32[$188 >> 2] = $140; //@line 16852
     $189 = $ReallocAsyncCtx3 + 12 | 0; //@line 16853
     HEAP32[$189 >> 2] = $4; //@line 16854
     $190 = $ReallocAsyncCtx3 + 16 | 0; //@line 16855
     HEAP32[$190 >> 2] = $6; //@line 16856
     $191 = $ReallocAsyncCtx3 + 20 | 0; //@line 16857
     HEAP32[$191 >> 2] = $8; //@line 16858
     $192 = $ReallocAsyncCtx3 + 24 | 0; //@line 16859
     HEAP32[$192 >> 2] = $10; //@line 16860
     $193 = $ReallocAsyncCtx3 + 28 | 0; //@line 16861
     HEAP32[$193 >> 2] = $12; //@line 16862
     $194 = $ReallocAsyncCtx3 + 32 | 0; //@line 16863
     HEAP32[$194 >> 2] = $14; //@line 16864
     $195 = $ReallocAsyncCtx3 + 36 | 0; //@line 16865
     HEAP32[$195 >> 2] = $196; //@line 16866
     $197 = $ReallocAsyncCtx3 + 40 | 0; //@line 16867
     HEAP32[$197 >> 2] = $20; //@line 16868
     $198 = $ReallocAsyncCtx3 + 44 | 0; //@line 16869
     HEAP32[$198 >> 2] = $22; //@line 16870
     $199 = $ReallocAsyncCtx3 + 48 | 0; //@line 16871
     HEAP32[$199 >> 2] = $141; //@line 16872
     $200 = $ReallocAsyncCtx3 + 52 | 0; //@line 16873
     HEAP32[$200 >> 2] = $24; //@line 16874
     $201 = $ReallocAsyncCtx3 + 56 | 0; //@line 16875
     HEAP32[$201 >> 2] = $26; //@line 16876
     $202 = $ReallocAsyncCtx3 + 60 | 0; //@line 16877
     HEAP32[$202 >> 2] = $28; //@line 16878
     $203 = $ReallocAsyncCtx3 + 64 | 0; //@line 16879
     HEAP32[$203 >> 2] = $32; //@line 16880
     $204 = $ReallocAsyncCtx3 + 68 | 0; //@line 16881
     HEAP32[$204 >> 2] = $34; //@line 16882
     $205 = $ReallocAsyncCtx3 + 72 | 0; //@line 16883
     HEAP32[$205 >> 2] = $36; //@line 16884
     $206 = $ReallocAsyncCtx3 + 76 | 0; //@line 16885
     HEAP32[$206 >> 2] = $38; //@line 16886
     $207 = $ReallocAsyncCtx3 + 80 | 0; //@line 16887
     HEAP32[$207 >> 2] = $40; //@line 16888
     $208 = $ReallocAsyncCtx3 + 84 | 0; //@line 16889
     HEAP32[$208 >> 2] = $$1202$in$i; //@line 16890
     $209 = $ReallocAsyncCtx3 + 88 | 0; //@line 16891
     HEAP32[$209 >> 2] = $44; //@line 16892
     $210 = $ReallocAsyncCtx3 + 92 | 0; //@line 16893
     HEAP32[$210 >> 2] = $46; //@line 16894
     $211 = $ReallocAsyncCtx3 + 96 | 0; //@line 16895
     HEAP16[$211 >> 1] = $$1202$i; //@line 16896
     $212 = $ReallocAsyncCtx3 + 100 | 0; //@line 16897
     HEAP32[$212 >> 2] = $48; //@line 16898
     $213 = $ReallocAsyncCtx3 + 104 | 0; //@line 16899
     HEAP32[$213 >> 2] = $50; //@line 16900
     $214 = $ReallocAsyncCtx3 + 108 | 0; //@line 16901
     HEAP32[$214 >> 2] = $52; //@line 16902
     $215 = $ReallocAsyncCtx3 + 112 | 0; //@line 16903
     HEAP32[$215 >> 2] = $54; //@line 16904
     $216 = $ReallocAsyncCtx3 + 116 | 0; //@line 16905
     HEAP32[$216 >> 2] = $58; //@line 16906
     $217 = $ReallocAsyncCtx3 + 120 | 0; //@line 16907
     HEAP32[$217 >> 2] = $42; //@line 16908
     $218 = $ReallocAsyncCtx3 + 124 | 0; //@line 16909
     HEAP32[$218 >> 2] = $60; //@line 16910
     $219 = $ReallocAsyncCtx3 + 128 | 0; //@line 16911
     HEAP32[$219 >> 2] = $62; //@line 16912
     $220 = $ReallocAsyncCtx3 + 132 | 0; //@line 16913
     HEAP32[$220 >> 2] = $64; //@line 16914
     $221 = $ReallocAsyncCtx3 + 136 | 0; //@line 16915
     HEAP32[$221 >> 2] = $$0208$i; //@line 16916
     $222 = $ReallocAsyncCtx3 + 140 | 0; //@line 16917
     HEAP32[$222 >> 2] = $66; //@line 16918
     $223 = $ReallocAsyncCtx3 + 144 | 0; //@line 16919
     HEAP32[$223 >> 2] = $68; //@line 16920
     $224 = $ReallocAsyncCtx3 + 148 | 0; //@line 16921
     HEAP32[$224 >> 2] = $38; //@line 16922
     $225 = $ReallocAsyncCtx3 + 152 | 0; //@line 16923
     HEAP32[$225 >> 2] = $70; //@line 16924
     $226 = $ReallocAsyncCtx3 + 156 | 0; //@line 16925
     HEAP16[$226 >> 1] = $182; //@line 16926
     $227 = $ReallocAsyncCtx3 + 160 | 0; //@line 16927
     HEAP32[$227 >> 2] = $72; //@line 16928
     $228 = $ReallocAsyncCtx3 + 164 | 0; //@line 16929
     HEAP32[$228 >> 2] = $74; //@line 16930
     $229 = $ReallocAsyncCtx3 + 168 | 0; //@line 16931
     HEAP32[$229 >> 2] = $76; //@line 16932
     $230 = $ReallocAsyncCtx3 + 172 | 0; //@line 16933
     HEAP32[$230 >> 2] = $78; //@line 16934
     $231 = $ReallocAsyncCtx3 + 176 | 0; //@line 16935
     HEAP32[$231 >> 2] = $135; //@line 16936
     $232 = $ReallocAsyncCtx3 + 180 | 0; //@line 16937
     HEAP32[$232 >> 2] = $80; //@line 16938
     $233 = $ReallocAsyncCtx3 + 184 | 0; //@line 16939
     HEAP32[$233 >> 2] = $82; //@line 16940
     $234 = $ReallocAsyncCtx3 + 188 | 0; //@line 16941
     HEAP32[$234 >> 2] = $84; //@line 16942
     $235 = $ReallocAsyncCtx3 + 192 | 0; //@line 16943
     HEAP32[$235 >> 2] = $86; //@line 16944
     $236 = $ReallocAsyncCtx3 + 196 | 0; //@line 16945
     HEAP32[$236 >> 2] = $88; //@line 16946
     $237 = $ReallocAsyncCtx3 + 200 | 0; //@line 16947
     HEAP32[$237 >> 2] = $136; //@line 16948
     $238 = $ReallocAsyncCtx3 + 204 | 0; //@line 16949
     HEAP32[$238 >> 2] = $92; //@line 16950
     $239 = $ReallocAsyncCtx3 + 208 | 0; //@line 16951
     HEAP32[$239 >> 2] = $94; //@line 16952
     $240 = $ReallocAsyncCtx3 + 212 | 0; //@line 16953
     HEAP32[$240 >> 2] = $96; //@line 16954
     $241 = $ReallocAsyncCtx3 + 216 | 0; //@line 16955
     HEAP32[$241 >> 2] = $137; //@line 16956
     $242 = $ReallocAsyncCtx3 + 220 | 0; //@line 16957
     HEAP32[$242 >> 2] = $100; //@line 16958
     $243 = $ReallocAsyncCtx3 + 224 | 0; //@line 16959
     HEAP32[$243 >> 2] = $102; //@line 16960
     $244 = $ReallocAsyncCtx3 + 228 | 0; //@line 16961
     HEAP32[$244 >> 2] = $104; //@line 16962
     $245 = $ReallocAsyncCtx3 + 232 | 0; //@line 16963
     HEAP32[$245 >> 2] = $106; //@line 16964
     $246 = $ReallocAsyncCtx3 + 236 | 0; //@line 16965
     HEAP32[$246 >> 2] = $108; //@line 16966
     $247 = $ReallocAsyncCtx3 + 240 | 0; //@line 16967
     HEAP32[$247 >> 2] = $110; //@line 16968
     $248 = $ReallocAsyncCtx3 + 244 | 0; //@line 16969
     HEAP32[$248 >> 2] = $112; //@line 16970
     $249 = $ReallocAsyncCtx3 + 248 | 0; //@line 16971
     HEAP32[$249 >> 2] = $114; //@line 16972
     $250 = $ReallocAsyncCtx3 + 252 | 0; //@line 16973
     HEAP32[$250 >> 2] = $116; //@line 16974
     $251 = $ReallocAsyncCtx3 + 256 | 0; //@line 16975
     HEAP32[$251 >> 2] = $118; //@line 16976
     $252 = $ReallocAsyncCtx3 + 260 | 0; //@line 16977
     HEAP32[$252 >> 2] = $120; //@line 16978
     $253 = $ReallocAsyncCtx3 + 264 | 0; //@line 16979
     HEAP32[$253 >> 2] = $122; //@line 16980
     $254 = $ReallocAsyncCtx3 + 268 | 0; //@line 16981
     HEAP32[$254 >> 2] = $139; //@line 16982
     $255 = $ReallocAsyncCtx3 + 272 | 0; //@line 16983
     HEAP16[$255 >> 1] = $trunc$i; //@line 16984
     $256 = $ReallocAsyncCtx3 + 276 | 0; //@line 16985
     HEAP32[$256 >> 2] = $124; //@line 16986
     $257 = $ReallocAsyncCtx3 + 280 | 0; //@line 16987
     HEAP32[$257 >> 2] = $139; //@line 16988
     $258 = $ReallocAsyncCtx3 + 284 | 0; //@line 16989
     HEAP32[$258 >> 2] = $126; //@line 16990
     sp = STACKTOP; //@line 16991
     return;
    }
   case 26:
    {
     _mbed_tracef(2, 3803, 4238, $10); //@line 16996
     break L2;
     break;
    }
   case 31:
    {
     _mbed_tracef(2, 3803, 4307, $26); //@line 17001
     break L2;
     break;
    }
   case 35:
    {
     $288 = $$1202$in$i & 65535; //@line 17006
     if (($$1202$i + -1 & 65535) <= 1033) {
      $291 = HEAP32[$139 >> 2] | 0; //@line 17010
      if (!(HEAP32[$291 + 44 >> 2] | 0)) {
       HEAP16[$291 + 2 >> 1] = $$1202$i; //@line 17016
       $296 = $196 + 1 | 0; //@line 17017
       HEAP32[$38 >> 2] = $296; //@line 17018
       $297 = HEAP32[$124 >> 2] | 0; //@line 17019
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 17020
       $298 = FUNCTION_TABLE_ii[$297 & 31]($$1202$i) | 0; //@line 17021
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 17024
        $299 = $ReallocAsyncCtx4 + 4 | 0; //@line 17025
        HEAP32[$299 >> 2] = $2; //@line 17026
        $300 = $ReallocAsyncCtx4 + 8 | 0; //@line 17027
        HEAP32[$300 >> 2] = $140; //@line 17028
        $301 = $ReallocAsyncCtx4 + 12 | 0; //@line 17029
        HEAP32[$301 >> 2] = $4; //@line 17030
        $302 = $ReallocAsyncCtx4 + 16 | 0; //@line 17031
        HEAP32[$302 >> 2] = $6; //@line 17032
        $303 = $ReallocAsyncCtx4 + 20 | 0; //@line 17033
        HEAP32[$303 >> 2] = $8; //@line 17034
        $304 = $ReallocAsyncCtx4 + 24 | 0; //@line 17035
        HEAP32[$304 >> 2] = $10; //@line 17036
        $305 = $ReallocAsyncCtx4 + 28 | 0; //@line 17037
        HEAP32[$305 >> 2] = $12; //@line 17038
        $306 = $ReallocAsyncCtx4 + 32 | 0; //@line 17039
        HEAP32[$306 >> 2] = $14; //@line 17040
        $307 = $ReallocAsyncCtx4 + 36 | 0; //@line 17041
        HEAP32[$307 >> 2] = $20; //@line 17042
        $308 = $ReallocAsyncCtx4 + 40 | 0; //@line 17043
        HEAP32[$308 >> 2] = $22; //@line 17044
        $309 = $ReallocAsyncCtx4 + 44 | 0; //@line 17045
        HEAP32[$309 >> 2] = $141; //@line 17046
        $310 = $ReallocAsyncCtx4 + 48 | 0; //@line 17047
        HEAP32[$310 >> 2] = $24; //@line 17048
        $311 = $ReallocAsyncCtx4 + 52 | 0; //@line 17049
        HEAP32[$311 >> 2] = $26; //@line 17050
        $312 = $ReallocAsyncCtx4 + 56 | 0; //@line 17051
        HEAP32[$312 >> 2] = $28; //@line 17052
        $313 = $ReallocAsyncCtx4 + 60 | 0; //@line 17053
        HEAP32[$313 >> 2] = $32; //@line 17054
        $314 = $ReallocAsyncCtx4 + 64 | 0; //@line 17055
        HEAP32[$314 >> 2] = $34; //@line 17056
        $315 = $ReallocAsyncCtx4 + 68 | 0; //@line 17057
        HEAP32[$315 >> 2] = $288; //@line 17058
        $316 = $ReallocAsyncCtx4 + 72 | 0; //@line 17059
        HEAP32[$316 >> 2] = $38; //@line 17060
        $317 = $ReallocAsyncCtx4 + 76 | 0; //@line 17061
        HEAP32[$317 >> 2] = $36; //@line 17062
        $318 = $ReallocAsyncCtx4 + 80 | 0; //@line 17063
        HEAP32[$318 >> 2] = $40; //@line 17064
        $319 = $ReallocAsyncCtx4 + 84 | 0; //@line 17065
        HEAP32[$319 >> 2] = $42; //@line 17066
        $320 = $ReallocAsyncCtx4 + 88 | 0; //@line 17067
        HEAP32[$320 >> 2] = $44; //@line 17068
        $321 = $ReallocAsyncCtx4 + 92 | 0; //@line 17069
        HEAP32[$321 >> 2] = $46; //@line 17070
        $322 = $ReallocAsyncCtx4 + 96 | 0; //@line 17071
        HEAP32[$322 >> 2] = $48; //@line 17072
        $323 = $ReallocAsyncCtx4 + 100 | 0; //@line 17073
        HEAP32[$323 >> 2] = $50; //@line 17074
        $324 = $ReallocAsyncCtx4 + 104 | 0; //@line 17075
        HEAP32[$324 >> 2] = $52; //@line 17076
        $325 = $ReallocAsyncCtx4 + 108 | 0; //@line 17077
        HEAP32[$325 >> 2] = $54; //@line 17078
        $326 = $ReallocAsyncCtx4 + 112 | 0; //@line 17079
        HEAP32[$326 >> 2] = $58; //@line 17080
        $327 = $ReallocAsyncCtx4 + 116 | 0; //@line 17081
        HEAP32[$327 >> 2] = $60; //@line 17082
        $328 = $ReallocAsyncCtx4 + 120 | 0; //@line 17083
        HEAP32[$328 >> 2] = $62; //@line 17084
        $329 = $ReallocAsyncCtx4 + 124 | 0; //@line 17085
        HEAP32[$329 >> 2] = $64; //@line 17086
        $330 = $ReallocAsyncCtx4 + 128 | 0; //@line 17087
        HEAP32[$330 >> 2] = $$0208$i; //@line 17088
        $331 = $ReallocAsyncCtx4 + 132 | 0; //@line 17089
        HEAP32[$331 >> 2] = $66; //@line 17090
        $332 = $ReallocAsyncCtx4 + 136 | 0; //@line 17091
        HEAP32[$332 >> 2] = $68; //@line 17092
        $333 = $ReallocAsyncCtx4 + 140 | 0; //@line 17093
        HEAP32[$333 >> 2] = $38; //@line 17094
        $334 = $ReallocAsyncCtx4 + 144 | 0; //@line 17095
        HEAP32[$334 >> 2] = $70; //@line 17096
        $335 = $ReallocAsyncCtx4 + 148 | 0; //@line 17097
        HEAP32[$335 >> 2] = $72; //@line 17098
        $336 = $ReallocAsyncCtx4 + 152 | 0; //@line 17099
        HEAP32[$336 >> 2] = $74; //@line 17100
        $337 = $ReallocAsyncCtx4 + 156 | 0; //@line 17101
        HEAP32[$337 >> 2] = $76; //@line 17102
        $338 = $ReallocAsyncCtx4 + 160 | 0; //@line 17103
        HEAP32[$338 >> 2] = $78; //@line 17104
        $339 = $ReallocAsyncCtx4 + 164 | 0; //@line 17105
        HEAP32[$339 >> 2] = $135; //@line 17106
        $340 = $ReallocAsyncCtx4 + 168 | 0; //@line 17107
        HEAP32[$340 >> 2] = $80; //@line 17108
        $341 = $ReallocAsyncCtx4 + 172 | 0; //@line 17109
        HEAP32[$341 >> 2] = $82; //@line 17110
        $342 = $ReallocAsyncCtx4 + 176 | 0; //@line 17111
        HEAP32[$342 >> 2] = $84; //@line 17112
        $343 = $ReallocAsyncCtx4 + 180 | 0; //@line 17113
        HEAP32[$343 >> 2] = $86; //@line 17114
        $344 = $ReallocAsyncCtx4 + 184 | 0; //@line 17115
        HEAP32[$344 >> 2] = $88; //@line 17116
        $345 = $ReallocAsyncCtx4 + 188 | 0; //@line 17117
        HEAP32[$345 >> 2] = $136; //@line 17118
        $346 = $ReallocAsyncCtx4 + 192 | 0; //@line 17119
        HEAP32[$346 >> 2] = $92; //@line 17120
        $347 = $ReallocAsyncCtx4 + 196 | 0; //@line 17121
        HEAP32[$347 >> 2] = $94; //@line 17122
        $348 = $ReallocAsyncCtx4 + 200 | 0; //@line 17123
        HEAP32[$348 >> 2] = $96; //@line 17124
        $349 = $ReallocAsyncCtx4 + 204 | 0; //@line 17125
        HEAP32[$349 >> 2] = $137; //@line 17126
        $350 = $ReallocAsyncCtx4 + 208 | 0; //@line 17127
        HEAP32[$350 >> 2] = $100; //@line 17128
        $351 = $ReallocAsyncCtx4 + 212 | 0; //@line 17129
        HEAP32[$351 >> 2] = $102; //@line 17130
        $352 = $ReallocAsyncCtx4 + 216 | 0; //@line 17131
        HEAP32[$352 >> 2] = $296; //@line 17132
        $353 = $ReallocAsyncCtx4 + 220 | 0; //@line 17133
        HEAP32[$353 >> 2] = $104; //@line 17134
        $354 = $ReallocAsyncCtx4 + 224 | 0; //@line 17135
        HEAP32[$354 >> 2] = $106; //@line 17136
        $355 = $ReallocAsyncCtx4 + 228 | 0; //@line 17137
        HEAP32[$355 >> 2] = $108; //@line 17138
        $356 = $ReallocAsyncCtx4 + 232 | 0; //@line 17139
        HEAP32[$356 >> 2] = $110; //@line 17140
        $357 = $ReallocAsyncCtx4 + 236 | 0; //@line 17141
        HEAP32[$357 >> 2] = $112; //@line 17142
        $358 = $ReallocAsyncCtx4 + 240 | 0; //@line 17143
        HEAP32[$358 >> 2] = $114; //@line 17144
        $359 = $ReallocAsyncCtx4 + 244 | 0; //@line 17145
        HEAP32[$359 >> 2] = $116; //@line 17146
        $360 = $ReallocAsyncCtx4 + 248 | 0; //@line 17147
        HEAP32[$360 >> 2] = $118; //@line 17148
        $361 = $ReallocAsyncCtx4 + 252 | 0; //@line 17149
        HEAP32[$361 >> 2] = $120; //@line 17150
        $362 = $ReallocAsyncCtx4 + 256 | 0; //@line 17151
        HEAP32[$362 >> 2] = $122; //@line 17152
        $363 = $ReallocAsyncCtx4 + 260 | 0; //@line 17153
        HEAP32[$363 >> 2] = $139; //@line 17154
        $364 = $ReallocAsyncCtx4 + 264 | 0; //@line 17155
        HEAP32[$364 >> 2] = $124; //@line 17156
        $365 = $ReallocAsyncCtx4 + 268 | 0; //@line 17157
        HEAP32[$365 >> 2] = $139; //@line 17158
        $366 = $ReallocAsyncCtx4 + 272 | 0; //@line 17159
        HEAP32[$366 >> 2] = $126; //@line 17160
        sp = STACKTOP; //@line 17161
        return;
       }
       HEAP32[___async_retval >> 2] = $298; //@line 17165
       ___async_unwind = 0; //@line 17166
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 17167
       $299 = $ReallocAsyncCtx4 + 4 | 0; //@line 17168
       HEAP32[$299 >> 2] = $2; //@line 17169
       $300 = $ReallocAsyncCtx4 + 8 | 0; //@line 17170
       HEAP32[$300 >> 2] = $140; //@line 17171
       $301 = $ReallocAsyncCtx4 + 12 | 0; //@line 17172
       HEAP32[$301 >> 2] = $4; //@line 17173
       $302 = $ReallocAsyncCtx4 + 16 | 0; //@line 17174
       HEAP32[$302 >> 2] = $6; //@line 17175
       $303 = $ReallocAsyncCtx4 + 20 | 0; //@line 17176
       HEAP32[$303 >> 2] = $8; //@line 17177
       $304 = $ReallocAsyncCtx4 + 24 | 0; //@line 17178
       HEAP32[$304 >> 2] = $10; //@line 17179
       $305 = $ReallocAsyncCtx4 + 28 | 0; //@line 17180
       HEAP32[$305 >> 2] = $12; //@line 17181
       $306 = $ReallocAsyncCtx4 + 32 | 0; //@line 17182
       HEAP32[$306 >> 2] = $14; //@line 17183
       $307 = $ReallocAsyncCtx4 + 36 | 0; //@line 17184
       HEAP32[$307 >> 2] = $20; //@line 17185
       $308 = $ReallocAsyncCtx4 + 40 | 0; //@line 17186
       HEAP32[$308 >> 2] = $22; //@line 17187
       $309 = $ReallocAsyncCtx4 + 44 | 0; //@line 17188
       HEAP32[$309 >> 2] = $141; //@line 17189
       $310 = $ReallocAsyncCtx4 + 48 | 0; //@line 17190
       HEAP32[$310 >> 2] = $24; //@line 17191
       $311 = $ReallocAsyncCtx4 + 52 | 0; //@line 17192
       HEAP32[$311 >> 2] = $26; //@line 17193
       $312 = $ReallocAsyncCtx4 + 56 | 0; //@line 17194
       HEAP32[$312 >> 2] = $28; //@line 17195
       $313 = $ReallocAsyncCtx4 + 60 | 0; //@line 17196
       HEAP32[$313 >> 2] = $32; //@line 17197
       $314 = $ReallocAsyncCtx4 + 64 | 0; //@line 17198
       HEAP32[$314 >> 2] = $34; //@line 17199
       $315 = $ReallocAsyncCtx4 + 68 | 0; //@line 17200
       HEAP32[$315 >> 2] = $288; //@line 17201
       $316 = $ReallocAsyncCtx4 + 72 | 0; //@line 17202
       HEAP32[$316 >> 2] = $38; //@line 17203
       $317 = $ReallocAsyncCtx4 + 76 | 0; //@line 17204
       HEAP32[$317 >> 2] = $36; //@line 17205
       $318 = $ReallocAsyncCtx4 + 80 | 0; //@line 17206
       HEAP32[$318 >> 2] = $40; //@line 17207
       $319 = $ReallocAsyncCtx4 + 84 | 0; //@line 17208
       HEAP32[$319 >> 2] = $42; //@line 17209
       $320 = $ReallocAsyncCtx4 + 88 | 0; //@line 17210
       HEAP32[$320 >> 2] = $44; //@line 17211
       $321 = $ReallocAsyncCtx4 + 92 | 0; //@line 17212
       HEAP32[$321 >> 2] = $46; //@line 17213
       $322 = $ReallocAsyncCtx4 + 96 | 0; //@line 17214
       HEAP32[$322 >> 2] = $48; //@line 17215
       $323 = $ReallocAsyncCtx4 + 100 | 0; //@line 17216
       HEAP32[$323 >> 2] = $50; //@line 17217
       $324 = $ReallocAsyncCtx4 + 104 | 0; //@line 17218
       HEAP32[$324 >> 2] = $52; //@line 17219
       $325 = $ReallocAsyncCtx4 + 108 | 0; //@line 17220
       HEAP32[$325 >> 2] = $54; //@line 17221
       $326 = $ReallocAsyncCtx4 + 112 | 0; //@line 17222
       HEAP32[$326 >> 2] = $58; //@line 17223
       $327 = $ReallocAsyncCtx4 + 116 | 0; //@line 17224
       HEAP32[$327 >> 2] = $60; //@line 17225
       $328 = $ReallocAsyncCtx4 + 120 | 0; //@line 17226
       HEAP32[$328 >> 2] = $62; //@line 17227
       $329 = $ReallocAsyncCtx4 + 124 | 0; //@line 17228
       HEAP32[$329 >> 2] = $64; //@line 17229
       $330 = $ReallocAsyncCtx4 + 128 | 0; //@line 17230
       HEAP32[$330 >> 2] = $$0208$i; //@line 17231
       $331 = $ReallocAsyncCtx4 + 132 | 0; //@line 17232
       HEAP32[$331 >> 2] = $66; //@line 17233
       $332 = $ReallocAsyncCtx4 + 136 | 0; //@line 17234
       HEAP32[$332 >> 2] = $68; //@line 17235
       $333 = $ReallocAsyncCtx4 + 140 | 0; //@line 17236
       HEAP32[$333 >> 2] = $38; //@line 17237
       $334 = $ReallocAsyncCtx4 + 144 | 0; //@line 17238
       HEAP32[$334 >> 2] = $70; //@line 17239
       $335 = $ReallocAsyncCtx4 + 148 | 0; //@line 17240
       HEAP32[$335 >> 2] = $72; //@line 17241
       $336 = $ReallocAsyncCtx4 + 152 | 0; //@line 17242
       HEAP32[$336 >> 2] = $74; //@line 17243
       $337 = $ReallocAsyncCtx4 + 156 | 0; //@line 17244
       HEAP32[$337 >> 2] = $76; //@line 17245
       $338 = $ReallocAsyncCtx4 + 160 | 0; //@line 17246
       HEAP32[$338 >> 2] = $78; //@line 17247
       $339 = $ReallocAsyncCtx4 + 164 | 0; //@line 17248
       HEAP32[$339 >> 2] = $135; //@line 17249
       $340 = $ReallocAsyncCtx4 + 168 | 0; //@line 17250
       HEAP32[$340 >> 2] = $80; //@line 17251
       $341 = $ReallocAsyncCtx4 + 172 | 0; //@line 17252
       HEAP32[$341 >> 2] = $82; //@line 17253
       $342 = $ReallocAsyncCtx4 + 176 | 0; //@line 17254
       HEAP32[$342 >> 2] = $84; //@line 17255
       $343 = $ReallocAsyncCtx4 + 180 | 0; //@line 17256
       HEAP32[$343 >> 2] = $86; //@line 17257
       $344 = $ReallocAsyncCtx4 + 184 | 0; //@line 17258
       HEAP32[$344 >> 2] = $88; //@line 17259
       $345 = $ReallocAsyncCtx4 + 188 | 0; //@line 17260
       HEAP32[$345 >> 2] = $136; //@line 17261
       $346 = $ReallocAsyncCtx4 + 192 | 0; //@line 17262
       HEAP32[$346 >> 2] = $92; //@line 17263
       $347 = $ReallocAsyncCtx4 + 196 | 0; //@line 17264
       HEAP32[$347 >> 2] = $94; //@line 17265
       $348 = $ReallocAsyncCtx4 + 200 | 0; //@line 17266
       HEAP32[$348 >> 2] = $96; //@line 17267
       $349 = $ReallocAsyncCtx4 + 204 | 0; //@line 17268
       HEAP32[$349 >> 2] = $137; //@line 17269
       $350 = $ReallocAsyncCtx4 + 208 | 0; //@line 17270
       HEAP32[$350 >> 2] = $100; //@line 17271
       $351 = $ReallocAsyncCtx4 + 212 | 0; //@line 17272
       HEAP32[$351 >> 2] = $102; //@line 17273
       $352 = $ReallocAsyncCtx4 + 216 | 0; //@line 17274
       HEAP32[$352 >> 2] = $296; //@line 17275
       $353 = $ReallocAsyncCtx4 + 220 | 0; //@line 17276
       HEAP32[$353 >> 2] = $104; //@line 17277
       $354 = $ReallocAsyncCtx4 + 224 | 0; //@line 17278
       HEAP32[$354 >> 2] = $106; //@line 17279
       $355 = $ReallocAsyncCtx4 + 228 | 0; //@line 17280
       HEAP32[$355 >> 2] = $108; //@line 17281
       $356 = $ReallocAsyncCtx4 + 232 | 0; //@line 17282
       HEAP32[$356 >> 2] = $110; //@line 17283
       $357 = $ReallocAsyncCtx4 + 236 | 0; //@line 17284
       HEAP32[$357 >> 2] = $112; //@line 17285
       $358 = $ReallocAsyncCtx4 + 240 | 0; //@line 17286
       HEAP32[$358 >> 2] = $114; //@line 17287
       $359 = $ReallocAsyncCtx4 + 244 | 0; //@line 17288
       HEAP32[$359 >> 2] = $116; //@line 17289
       $360 = $ReallocAsyncCtx4 + 248 | 0; //@line 17290
       HEAP32[$360 >> 2] = $118; //@line 17291
       $361 = $ReallocAsyncCtx4 + 252 | 0; //@line 17292
       HEAP32[$361 >> 2] = $120; //@line 17293
       $362 = $ReallocAsyncCtx4 + 256 | 0; //@line 17294
       HEAP32[$362 >> 2] = $122; //@line 17295
       $363 = $ReallocAsyncCtx4 + 260 | 0; //@line 17296
       HEAP32[$363 >> 2] = $139; //@line 17297
       $364 = $ReallocAsyncCtx4 + 264 | 0; //@line 17298
       HEAP32[$364 >> 2] = $124; //@line 17299
       $365 = $ReallocAsyncCtx4 + 268 | 0; //@line 17300
       HEAP32[$365 >> 2] = $139; //@line 17301
       $366 = $ReallocAsyncCtx4 + 272 | 0; //@line 17302
       HEAP32[$366 >> 2] = $126; //@line 17303
       sp = STACKTOP; //@line 17304
       return;
      }
     }
     _mbed_tracef(2, 3803, 4369, $116); //@line 17308
     break L2;
     break;
    }
   case 41:
    {
     $368 = HEAP32[$139 >> 2] | 0; //@line 17313
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 17315
     $370 = _sn_coap_parser_options_parse_multiple_options($2, $38, $182, $368 + 48 | 0, $368, 4, $$1202$i) | 0; //@line 17316
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 17319
      $371 = $ReallocAsyncCtx10 + 4 | 0; //@line 17320
      HEAP32[$371 >> 2] = $2; //@line 17321
      $372 = $ReallocAsyncCtx10 + 8 | 0; //@line 17322
      HEAP32[$372 >> 2] = $140; //@line 17323
      $373 = $ReallocAsyncCtx10 + 12 | 0; //@line 17324
      HEAP32[$373 >> 2] = $4; //@line 17325
      $374 = $ReallocAsyncCtx10 + 16 | 0; //@line 17326
      HEAP32[$374 >> 2] = $6; //@line 17327
      $375 = $ReallocAsyncCtx10 + 20 | 0; //@line 17328
      HEAP32[$375 >> 2] = $8; //@line 17329
      $376 = $ReallocAsyncCtx10 + 24 | 0; //@line 17330
      HEAP32[$376 >> 2] = $10; //@line 17331
      $377 = $ReallocAsyncCtx10 + 28 | 0; //@line 17332
      HEAP32[$377 >> 2] = $12; //@line 17333
      $378 = $ReallocAsyncCtx10 + 32 | 0; //@line 17334
      HEAP32[$378 >> 2] = $14; //@line 17335
      $379 = $ReallocAsyncCtx10 + 36 | 0; //@line 17336
      HEAP32[$379 >> 2] = $20; //@line 17337
      $380 = $ReallocAsyncCtx10 + 40 | 0; //@line 17338
      HEAP32[$380 >> 2] = $22; //@line 17339
      $381 = $ReallocAsyncCtx10 + 44 | 0; //@line 17340
      HEAP32[$381 >> 2] = $141; //@line 17341
      $382 = $ReallocAsyncCtx10 + 48 | 0; //@line 17342
      HEAP32[$382 >> 2] = $24; //@line 17343
      $383 = $ReallocAsyncCtx10 + 52 | 0; //@line 17344
      HEAP32[$383 >> 2] = $26; //@line 17345
      $384 = $ReallocAsyncCtx10 + 56 | 0; //@line 17346
      HEAP32[$384 >> 2] = $28; //@line 17347
      $385 = $ReallocAsyncCtx10 + 60 | 0; //@line 17348
      HEAP32[$385 >> 2] = $32; //@line 17349
      $386 = $ReallocAsyncCtx10 + 64 | 0; //@line 17350
      HEAP32[$386 >> 2] = $34; //@line 17351
      $387 = $ReallocAsyncCtx10 + 68 | 0; //@line 17352
      HEAP32[$387 >> 2] = $36; //@line 17353
      $388 = $ReallocAsyncCtx10 + 72 | 0; //@line 17354
      HEAP32[$388 >> 2] = $38; //@line 17355
      $389 = $ReallocAsyncCtx10 + 76 | 0; //@line 17356
      HEAP32[$389 >> 2] = $40; //@line 17357
      $390 = $ReallocAsyncCtx10 + 80 | 0; //@line 17358
      HEAP32[$390 >> 2] = $42; //@line 17359
      $391 = $ReallocAsyncCtx10 + 84 | 0; //@line 17360
      HEAP32[$391 >> 2] = $44; //@line 17361
      $392 = $ReallocAsyncCtx10 + 88 | 0; //@line 17362
      HEAP32[$392 >> 2] = $46; //@line 17363
      $393 = $ReallocAsyncCtx10 + 92 | 0; //@line 17364
      HEAP32[$393 >> 2] = $48; //@line 17365
      $394 = $ReallocAsyncCtx10 + 96 | 0; //@line 17366
      HEAP32[$394 >> 2] = $50; //@line 17367
      $395 = $ReallocAsyncCtx10 + 100 | 0; //@line 17368
      HEAP32[$395 >> 2] = $52; //@line 17369
      $396 = $ReallocAsyncCtx10 + 104 | 0; //@line 17370
      HEAP32[$396 >> 2] = $54; //@line 17371
      $397 = $ReallocAsyncCtx10 + 108 | 0; //@line 17372
      HEAP32[$397 >> 2] = $58; //@line 17373
      $398 = $ReallocAsyncCtx10 + 112 | 0; //@line 17374
      HEAP32[$398 >> 2] = $60; //@line 17375
      $399 = $ReallocAsyncCtx10 + 116 | 0; //@line 17376
      HEAP32[$399 >> 2] = $62; //@line 17377
      $400 = $ReallocAsyncCtx10 + 120 | 0; //@line 17378
      HEAP32[$400 >> 2] = $64; //@line 17379
      $401 = $ReallocAsyncCtx10 + 124 | 0; //@line 17380
      HEAP32[$401 >> 2] = $$0208$i; //@line 17381
      $402 = $ReallocAsyncCtx10 + 128 | 0; //@line 17382
      HEAP32[$402 >> 2] = $66; //@line 17383
      $403 = $ReallocAsyncCtx10 + 132 | 0; //@line 17384
      HEAP32[$403 >> 2] = $68; //@line 17385
      $404 = $ReallocAsyncCtx10 + 136 | 0; //@line 17386
      HEAP32[$404 >> 2] = $38; //@line 17387
      $405 = $ReallocAsyncCtx10 + 140 | 0; //@line 17388
      HEAP32[$405 >> 2] = $70; //@line 17389
      $406 = $ReallocAsyncCtx10 + 144 | 0; //@line 17390
      HEAP32[$406 >> 2] = $72; //@line 17391
      $407 = $ReallocAsyncCtx10 + 148 | 0; //@line 17392
      HEAP32[$407 >> 2] = $74; //@line 17393
      $408 = $ReallocAsyncCtx10 + 152 | 0; //@line 17394
      HEAP32[$408 >> 2] = $76; //@line 17395
      $409 = $ReallocAsyncCtx10 + 156 | 0; //@line 17396
      HEAP32[$409 >> 2] = $78; //@line 17397
      $410 = $ReallocAsyncCtx10 + 160 | 0; //@line 17398
      HEAP32[$410 >> 2] = $135; //@line 17399
      $411 = $ReallocAsyncCtx10 + 164 | 0; //@line 17400
      HEAP32[$411 >> 2] = $80; //@line 17401
      $412 = $ReallocAsyncCtx10 + 168 | 0; //@line 17402
      HEAP32[$412 >> 2] = $82; //@line 17403
      $413 = $ReallocAsyncCtx10 + 172 | 0; //@line 17404
      HEAP32[$413 >> 2] = $84; //@line 17405
      $414 = $ReallocAsyncCtx10 + 176 | 0; //@line 17406
      HEAP32[$414 >> 2] = $86; //@line 17407
      $415 = $ReallocAsyncCtx10 + 180 | 0; //@line 17408
      HEAP32[$415 >> 2] = $88; //@line 17409
      $416 = $ReallocAsyncCtx10 + 184 | 0; //@line 17410
      HEAP32[$416 >> 2] = $136; //@line 17411
      $417 = $ReallocAsyncCtx10 + 188 | 0; //@line 17412
      HEAP32[$417 >> 2] = $92; //@line 17413
      $418 = $ReallocAsyncCtx10 + 192 | 0; //@line 17414
      HEAP32[$418 >> 2] = $94; //@line 17415
      $419 = $ReallocAsyncCtx10 + 196 | 0; //@line 17416
      HEAP32[$419 >> 2] = $96; //@line 17417
      $420 = $ReallocAsyncCtx10 + 200 | 0; //@line 17418
      HEAP32[$420 >> 2] = $137; //@line 17419
      $421 = $ReallocAsyncCtx10 + 204 | 0; //@line 17420
      HEAP32[$421 >> 2] = $100; //@line 17421
      $422 = $ReallocAsyncCtx10 + 208 | 0; //@line 17422
      HEAP32[$422 >> 2] = $102; //@line 17423
      $423 = $ReallocAsyncCtx10 + 212 | 0; //@line 17424
      HEAP32[$423 >> 2] = $104; //@line 17425
      $424 = $ReallocAsyncCtx10 + 216 | 0; //@line 17426
      HEAP32[$424 >> 2] = $106; //@line 17427
      $425 = $ReallocAsyncCtx10 + 220 | 0; //@line 17428
      HEAP32[$425 >> 2] = $108; //@line 17429
      $426 = $ReallocAsyncCtx10 + 224 | 0; //@line 17430
      HEAP32[$426 >> 2] = $110; //@line 17431
      $427 = $ReallocAsyncCtx10 + 228 | 0; //@line 17432
      HEAP32[$427 >> 2] = $112; //@line 17433
      $428 = $ReallocAsyncCtx10 + 232 | 0; //@line 17434
      HEAP32[$428 >> 2] = $114; //@line 17435
      $429 = $ReallocAsyncCtx10 + 236 | 0; //@line 17436
      HEAP32[$429 >> 2] = $116; //@line 17437
      $430 = $ReallocAsyncCtx10 + 240 | 0; //@line 17438
      HEAP32[$430 >> 2] = $118; //@line 17439
      $431 = $ReallocAsyncCtx10 + 244 | 0; //@line 17440
      HEAP32[$431 >> 2] = $120; //@line 17441
      $432 = $ReallocAsyncCtx10 + 248 | 0; //@line 17442
      HEAP32[$432 >> 2] = $122; //@line 17443
      $433 = $ReallocAsyncCtx10 + 252 | 0; //@line 17444
      HEAP32[$433 >> 2] = $139; //@line 17445
      $434 = $ReallocAsyncCtx10 + 256 | 0; //@line 17446
      HEAP32[$434 >> 2] = $124; //@line 17447
      $435 = $ReallocAsyncCtx10 + 260 | 0; //@line 17448
      HEAP32[$435 >> 2] = $139; //@line 17449
      $436 = $ReallocAsyncCtx10 + 264 | 0; //@line 17450
      HEAP32[$436 >> 2] = $126; //@line 17451
      sp = STACKTOP; //@line 17452
      return;
     }
     HEAP8[___async_retval >> 0] = $370; //@line 17456
     ___async_unwind = 0; //@line 17457
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 17458
     $371 = $ReallocAsyncCtx10 + 4 | 0; //@line 17459
     HEAP32[$371 >> 2] = $2; //@line 17460
     $372 = $ReallocAsyncCtx10 + 8 | 0; //@line 17461
     HEAP32[$372 >> 2] = $140; //@line 17462
     $373 = $ReallocAsyncCtx10 + 12 | 0; //@line 17463
     HEAP32[$373 >> 2] = $4; //@line 17464
     $374 = $ReallocAsyncCtx10 + 16 | 0; //@line 17465
     HEAP32[$374 >> 2] = $6; //@line 17466
     $375 = $ReallocAsyncCtx10 + 20 | 0; //@line 17467
     HEAP32[$375 >> 2] = $8; //@line 17468
     $376 = $ReallocAsyncCtx10 + 24 | 0; //@line 17469
     HEAP32[$376 >> 2] = $10; //@line 17470
     $377 = $ReallocAsyncCtx10 + 28 | 0; //@line 17471
     HEAP32[$377 >> 2] = $12; //@line 17472
     $378 = $ReallocAsyncCtx10 + 32 | 0; //@line 17473
     HEAP32[$378 >> 2] = $14; //@line 17474
     $379 = $ReallocAsyncCtx10 + 36 | 0; //@line 17475
     HEAP32[$379 >> 2] = $20; //@line 17476
     $380 = $ReallocAsyncCtx10 + 40 | 0; //@line 17477
     HEAP32[$380 >> 2] = $22; //@line 17478
     $381 = $ReallocAsyncCtx10 + 44 | 0; //@line 17479
     HEAP32[$381 >> 2] = $141; //@line 17480
     $382 = $ReallocAsyncCtx10 + 48 | 0; //@line 17481
     HEAP32[$382 >> 2] = $24; //@line 17482
     $383 = $ReallocAsyncCtx10 + 52 | 0; //@line 17483
     HEAP32[$383 >> 2] = $26; //@line 17484
     $384 = $ReallocAsyncCtx10 + 56 | 0; //@line 17485
     HEAP32[$384 >> 2] = $28; //@line 17486
     $385 = $ReallocAsyncCtx10 + 60 | 0; //@line 17487
     HEAP32[$385 >> 2] = $32; //@line 17488
     $386 = $ReallocAsyncCtx10 + 64 | 0; //@line 17489
     HEAP32[$386 >> 2] = $34; //@line 17490
     $387 = $ReallocAsyncCtx10 + 68 | 0; //@line 17491
     HEAP32[$387 >> 2] = $36; //@line 17492
     $388 = $ReallocAsyncCtx10 + 72 | 0; //@line 17493
     HEAP32[$388 >> 2] = $38; //@line 17494
     $389 = $ReallocAsyncCtx10 + 76 | 0; //@line 17495
     HEAP32[$389 >> 2] = $40; //@line 17496
     $390 = $ReallocAsyncCtx10 + 80 | 0; //@line 17497
     HEAP32[$390 >> 2] = $42; //@line 17498
     $391 = $ReallocAsyncCtx10 + 84 | 0; //@line 17499
     HEAP32[$391 >> 2] = $44; //@line 17500
     $392 = $ReallocAsyncCtx10 + 88 | 0; //@line 17501
     HEAP32[$392 >> 2] = $46; //@line 17502
     $393 = $ReallocAsyncCtx10 + 92 | 0; //@line 17503
     HEAP32[$393 >> 2] = $48; //@line 17504
     $394 = $ReallocAsyncCtx10 + 96 | 0; //@line 17505
     HEAP32[$394 >> 2] = $50; //@line 17506
     $395 = $ReallocAsyncCtx10 + 100 | 0; //@line 17507
     HEAP32[$395 >> 2] = $52; //@line 17508
     $396 = $ReallocAsyncCtx10 + 104 | 0; //@line 17509
     HEAP32[$396 >> 2] = $54; //@line 17510
     $397 = $ReallocAsyncCtx10 + 108 | 0; //@line 17511
     HEAP32[$397 >> 2] = $58; //@line 17512
     $398 = $ReallocAsyncCtx10 + 112 | 0; //@line 17513
     HEAP32[$398 >> 2] = $60; //@line 17514
     $399 = $ReallocAsyncCtx10 + 116 | 0; //@line 17515
     HEAP32[$399 >> 2] = $62; //@line 17516
     $400 = $ReallocAsyncCtx10 + 120 | 0; //@line 17517
     HEAP32[$400 >> 2] = $64; //@line 17518
     $401 = $ReallocAsyncCtx10 + 124 | 0; //@line 17519
     HEAP32[$401 >> 2] = $$0208$i; //@line 17520
     $402 = $ReallocAsyncCtx10 + 128 | 0; //@line 17521
     HEAP32[$402 >> 2] = $66; //@line 17522
     $403 = $ReallocAsyncCtx10 + 132 | 0; //@line 17523
     HEAP32[$403 >> 2] = $68; //@line 17524
     $404 = $ReallocAsyncCtx10 + 136 | 0; //@line 17525
     HEAP32[$404 >> 2] = $38; //@line 17526
     $405 = $ReallocAsyncCtx10 + 140 | 0; //@line 17527
     HEAP32[$405 >> 2] = $70; //@line 17528
     $406 = $ReallocAsyncCtx10 + 144 | 0; //@line 17529
     HEAP32[$406 >> 2] = $72; //@line 17530
     $407 = $ReallocAsyncCtx10 + 148 | 0; //@line 17531
     HEAP32[$407 >> 2] = $74; //@line 17532
     $408 = $ReallocAsyncCtx10 + 152 | 0; //@line 17533
     HEAP32[$408 >> 2] = $76; //@line 17534
     $409 = $ReallocAsyncCtx10 + 156 | 0; //@line 17535
     HEAP32[$409 >> 2] = $78; //@line 17536
     $410 = $ReallocAsyncCtx10 + 160 | 0; //@line 17537
     HEAP32[$410 >> 2] = $135; //@line 17538
     $411 = $ReallocAsyncCtx10 + 164 | 0; //@line 17539
     HEAP32[$411 >> 2] = $80; //@line 17540
     $412 = $ReallocAsyncCtx10 + 168 | 0; //@line 17541
     HEAP32[$412 >> 2] = $82; //@line 17542
     $413 = $ReallocAsyncCtx10 + 172 | 0; //@line 17543
     HEAP32[$413 >> 2] = $84; //@line 17544
     $414 = $ReallocAsyncCtx10 + 176 | 0; //@line 17545
     HEAP32[$414 >> 2] = $86; //@line 17546
     $415 = $ReallocAsyncCtx10 + 180 | 0; //@line 17547
     HEAP32[$415 >> 2] = $88; //@line 17548
     $416 = $ReallocAsyncCtx10 + 184 | 0; //@line 17549
     HEAP32[$416 >> 2] = $136; //@line 17550
     $417 = $ReallocAsyncCtx10 + 188 | 0; //@line 17551
     HEAP32[$417 >> 2] = $92; //@line 17552
     $418 = $ReallocAsyncCtx10 + 192 | 0; //@line 17553
     HEAP32[$418 >> 2] = $94; //@line 17554
     $419 = $ReallocAsyncCtx10 + 196 | 0; //@line 17555
     HEAP32[$419 >> 2] = $96; //@line 17556
     $420 = $ReallocAsyncCtx10 + 200 | 0; //@line 17557
     HEAP32[$420 >> 2] = $137; //@line 17558
     $421 = $ReallocAsyncCtx10 + 204 | 0; //@line 17559
     HEAP32[$421 >> 2] = $100; //@line 17560
     $422 = $ReallocAsyncCtx10 + 208 | 0; //@line 17561
     HEAP32[$422 >> 2] = $102; //@line 17562
     $423 = $ReallocAsyncCtx10 + 212 | 0; //@line 17563
     HEAP32[$423 >> 2] = $104; //@line 17564
     $424 = $ReallocAsyncCtx10 + 216 | 0; //@line 17565
     HEAP32[$424 >> 2] = $106; //@line 17566
     $425 = $ReallocAsyncCtx10 + 220 | 0; //@line 17567
     HEAP32[$425 >> 2] = $108; //@line 17568
     $426 = $ReallocAsyncCtx10 + 224 | 0; //@line 17569
     HEAP32[$426 >> 2] = $110; //@line 17570
     $427 = $ReallocAsyncCtx10 + 228 | 0; //@line 17571
     HEAP32[$427 >> 2] = $112; //@line 17572
     $428 = $ReallocAsyncCtx10 + 232 | 0; //@line 17573
     HEAP32[$428 >> 2] = $114; //@line 17574
     $429 = $ReallocAsyncCtx10 + 236 | 0; //@line 17575
     HEAP32[$429 >> 2] = $116; //@line 17576
     $430 = $ReallocAsyncCtx10 + 240 | 0; //@line 17577
     HEAP32[$430 >> 2] = $118; //@line 17578
     $431 = $ReallocAsyncCtx10 + 244 | 0; //@line 17579
     HEAP32[$431 >> 2] = $120; //@line 17580
     $432 = $ReallocAsyncCtx10 + 248 | 0; //@line 17581
     HEAP32[$432 >> 2] = $122; //@line 17582
     $433 = $ReallocAsyncCtx10 + 252 | 0; //@line 17583
     HEAP32[$433 >> 2] = $139; //@line 17584
     $434 = $ReallocAsyncCtx10 + 256 | 0; //@line 17585
     HEAP32[$434 >> 2] = $124; //@line 17586
     $435 = $ReallocAsyncCtx10 + 260 | 0; //@line 17587
     HEAP32[$435 >> 2] = $139; //@line 17588
     $436 = $ReallocAsyncCtx10 + 264 | 0; //@line 17589
     HEAP32[$436 >> 2] = $126; //@line 17590
     sp = STACKTOP; //@line 17591
     return;
    }
   case 44:
    {
     $438 = $$1202$in$i & 65535; //@line 17596
     if (($$1202$i + -1 & 65535) <= 254) {
      $441 = HEAP32[$139 >> 2] | 0; //@line 17600
      if (!(HEAP32[$441 + 52 >> 2] | 0)) {
       HEAP16[$441 + 4 >> 1] = $$1202$i; //@line 17606
       $446 = $196 + 1 | 0; //@line 17607
       HEAP32[$38 >> 2] = $446; //@line 17608
       $447 = HEAP32[$124 >> 2] | 0; //@line 17609
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 17610
       $448 = FUNCTION_TABLE_ii[$447 & 31]($$1202$i) | 0; //@line 17611
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 17614
        $449 = $ReallocAsyncCtx5 + 4 | 0; //@line 17615
        HEAP32[$449 >> 2] = $2; //@line 17616
        $450 = $ReallocAsyncCtx5 + 8 | 0; //@line 17617
        HEAP32[$450 >> 2] = $140; //@line 17618
        $451 = $ReallocAsyncCtx5 + 12 | 0; //@line 17619
        HEAP32[$451 >> 2] = $4; //@line 17620
        $452 = $ReallocAsyncCtx5 + 16 | 0; //@line 17621
        HEAP32[$452 >> 2] = $6; //@line 17622
        $453 = $ReallocAsyncCtx5 + 20 | 0; //@line 17623
        HEAP32[$453 >> 2] = $8; //@line 17624
        $454 = $ReallocAsyncCtx5 + 24 | 0; //@line 17625
        HEAP32[$454 >> 2] = $10; //@line 17626
        $455 = $ReallocAsyncCtx5 + 28 | 0; //@line 17627
        HEAP32[$455 >> 2] = $12; //@line 17628
        $456 = $ReallocAsyncCtx5 + 32 | 0; //@line 17629
        HEAP32[$456 >> 2] = $14; //@line 17630
        $457 = $ReallocAsyncCtx5 + 36 | 0; //@line 17631
        HEAP32[$457 >> 2] = $20; //@line 17632
        $458 = $ReallocAsyncCtx5 + 40 | 0; //@line 17633
        HEAP32[$458 >> 2] = $22; //@line 17634
        $459 = $ReallocAsyncCtx5 + 44 | 0; //@line 17635
        HEAP32[$459 >> 2] = $141; //@line 17636
        $460 = $ReallocAsyncCtx5 + 48 | 0; //@line 17637
        HEAP32[$460 >> 2] = $24; //@line 17638
        $461 = $ReallocAsyncCtx5 + 52 | 0; //@line 17639
        HEAP32[$461 >> 2] = $26; //@line 17640
        $462 = $ReallocAsyncCtx5 + 56 | 0; //@line 17641
        HEAP32[$462 >> 2] = $28; //@line 17642
        $463 = $ReallocAsyncCtx5 + 60 | 0; //@line 17643
        HEAP32[$463 >> 2] = $32; //@line 17644
        $464 = $ReallocAsyncCtx5 + 64 | 0; //@line 17645
        HEAP32[$464 >> 2] = $34; //@line 17646
        $465 = $ReallocAsyncCtx5 + 68 | 0; //@line 17647
        HEAP32[$465 >> 2] = $36; //@line 17648
        $466 = $ReallocAsyncCtx5 + 72 | 0; //@line 17649
        HEAP32[$466 >> 2] = $38; //@line 17650
        $467 = $ReallocAsyncCtx5 + 76 | 0; //@line 17651
        HEAP32[$467 >> 2] = $40; //@line 17652
        $468 = $ReallocAsyncCtx5 + 80 | 0; //@line 17653
        HEAP32[$468 >> 2] = $42; //@line 17654
        $469 = $ReallocAsyncCtx5 + 84 | 0; //@line 17655
        HEAP32[$469 >> 2] = $44; //@line 17656
        $470 = $ReallocAsyncCtx5 + 88 | 0; //@line 17657
        HEAP32[$470 >> 2] = $46; //@line 17658
        $471 = $ReallocAsyncCtx5 + 92 | 0; //@line 17659
        HEAP32[$471 >> 2] = $48; //@line 17660
        $472 = $ReallocAsyncCtx5 + 96 | 0; //@line 17661
        HEAP32[$472 >> 2] = $50; //@line 17662
        $473 = $ReallocAsyncCtx5 + 100 | 0; //@line 17663
        HEAP32[$473 >> 2] = $52; //@line 17664
        $474 = $ReallocAsyncCtx5 + 104 | 0; //@line 17665
        HEAP32[$474 >> 2] = $54; //@line 17666
        $475 = $ReallocAsyncCtx5 + 108 | 0; //@line 17667
        HEAP32[$475 >> 2] = $58; //@line 17668
        $476 = $ReallocAsyncCtx5 + 112 | 0; //@line 17669
        HEAP32[$476 >> 2] = $60; //@line 17670
        $477 = $ReallocAsyncCtx5 + 116 | 0; //@line 17671
        HEAP32[$477 >> 2] = $62; //@line 17672
        $478 = $ReallocAsyncCtx5 + 120 | 0; //@line 17673
        HEAP32[$478 >> 2] = $64; //@line 17674
        $479 = $ReallocAsyncCtx5 + 124 | 0; //@line 17675
        HEAP32[$479 >> 2] = $$0208$i; //@line 17676
        $480 = $ReallocAsyncCtx5 + 128 | 0; //@line 17677
        HEAP32[$480 >> 2] = $66; //@line 17678
        $481 = $ReallocAsyncCtx5 + 132 | 0; //@line 17679
        HEAP32[$481 >> 2] = $68; //@line 17680
        $482 = $ReallocAsyncCtx5 + 136 | 0; //@line 17681
        HEAP32[$482 >> 2] = $38; //@line 17682
        $483 = $ReallocAsyncCtx5 + 140 | 0; //@line 17683
        HEAP32[$483 >> 2] = $70; //@line 17684
        $484 = $ReallocAsyncCtx5 + 144 | 0; //@line 17685
        HEAP32[$484 >> 2] = $72; //@line 17686
        $485 = $ReallocAsyncCtx5 + 148 | 0; //@line 17687
        HEAP32[$485 >> 2] = $74; //@line 17688
        $486 = $ReallocAsyncCtx5 + 152 | 0; //@line 17689
        HEAP32[$486 >> 2] = $76; //@line 17690
        $487 = $ReallocAsyncCtx5 + 156 | 0; //@line 17691
        HEAP32[$487 >> 2] = $78; //@line 17692
        $488 = $ReallocAsyncCtx5 + 160 | 0; //@line 17693
        HEAP32[$488 >> 2] = $135; //@line 17694
        $489 = $ReallocAsyncCtx5 + 164 | 0; //@line 17695
        HEAP32[$489 >> 2] = $80; //@line 17696
        $490 = $ReallocAsyncCtx5 + 168 | 0; //@line 17697
        HEAP32[$490 >> 2] = $82; //@line 17698
        $491 = $ReallocAsyncCtx5 + 172 | 0; //@line 17699
        HEAP32[$491 >> 2] = $84; //@line 17700
        $492 = $ReallocAsyncCtx5 + 176 | 0; //@line 17701
        HEAP32[$492 >> 2] = $86; //@line 17702
        $493 = $ReallocAsyncCtx5 + 180 | 0; //@line 17703
        HEAP32[$493 >> 2] = $88; //@line 17704
        $494 = $ReallocAsyncCtx5 + 184 | 0; //@line 17705
        HEAP32[$494 >> 2] = $136; //@line 17706
        $495 = $ReallocAsyncCtx5 + 188 | 0; //@line 17707
        HEAP32[$495 >> 2] = $92; //@line 17708
        $496 = $ReallocAsyncCtx5 + 192 | 0; //@line 17709
        HEAP32[$496 >> 2] = $438; //@line 17710
        $497 = $ReallocAsyncCtx5 + 196 | 0; //@line 17711
        HEAP32[$497 >> 2] = $94; //@line 17712
        $498 = $ReallocAsyncCtx5 + 200 | 0; //@line 17713
        HEAP32[$498 >> 2] = $96; //@line 17714
        $499 = $ReallocAsyncCtx5 + 204 | 0; //@line 17715
        HEAP32[$499 >> 2] = $446; //@line 17716
        $500 = $ReallocAsyncCtx5 + 208 | 0; //@line 17717
        HEAP32[$500 >> 2] = $137; //@line 17718
        $501 = $ReallocAsyncCtx5 + 212 | 0; //@line 17719
        HEAP32[$501 >> 2] = $100; //@line 17720
        $502 = $ReallocAsyncCtx5 + 216 | 0; //@line 17721
        HEAP32[$502 >> 2] = $102; //@line 17722
        $503 = $ReallocAsyncCtx5 + 220 | 0; //@line 17723
        HEAP32[$503 >> 2] = $104; //@line 17724
        $504 = $ReallocAsyncCtx5 + 224 | 0; //@line 17725
        HEAP32[$504 >> 2] = $106; //@line 17726
        $505 = $ReallocAsyncCtx5 + 228 | 0; //@line 17727
        HEAP32[$505 >> 2] = $108; //@line 17728
        $506 = $ReallocAsyncCtx5 + 232 | 0; //@line 17729
        HEAP32[$506 >> 2] = $110; //@line 17730
        $507 = $ReallocAsyncCtx5 + 236 | 0; //@line 17731
        HEAP32[$507 >> 2] = $112; //@line 17732
        $508 = $ReallocAsyncCtx5 + 240 | 0; //@line 17733
        HEAP32[$508 >> 2] = $114; //@line 17734
        $509 = $ReallocAsyncCtx5 + 244 | 0; //@line 17735
        HEAP32[$509 >> 2] = $116; //@line 17736
        $510 = $ReallocAsyncCtx5 + 248 | 0; //@line 17737
        HEAP32[$510 >> 2] = $118; //@line 17738
        $511 = $ReallocAsyncCtx5 + 252 | 0; //@line 17739
        HEAP32[$511 >> 2] = $120; //@line 17740
        $512 = $ReallocAsyncCtx5 + 256 | 0; //@line 17741
        HEAP32[$512 >> 2] = $122; //@line 17742
        $513 = $ReallocAsyncCtx5 + 260 | 0; //@line 17743
        HEAP32[$513 >> 2] = $139; //@line 17744
        $514 = $ReallocAsyncCtx5 + 264 | 0; //@line 17745
        HEAP32[$514 >> 2] = $124; //@line 17746
        $515 = $ReallocAsyncCtx5 + 268 | 0; //@line 17747
        HEAP32[$515 >> 2] = $139; //@line 17748
        $516 = $ReallocAsyncCtx5 + 272 | 0; //@line 17749
        HEAP32[$516 >> 2] = $126; //@line 17750
        sp = STACKTOP; //@line 17751
        return;
       }
       HEAP32[___async_retval >> 2] = $448; //@line 17755
       ___async_unwind = 0; //@line 17756
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 17757
       $449 = $ReallocAsyncCtx5 + 4 | 0; //@line 17758
       HEAP32[$449 >> 2] = $2; //@line 17759
       $450 = $ReallocAsyncCtx5 + 8 | 0; //@line 17760
       HEAP32[$450 >> 2] = $140; //@line 17761
       $451 = $ReallocAsyncCtx5 + 12 | 0; //@line 17762
       HEAP32[$451 >> 2] = $4; //@line 17763
       $452 = $ReallocAsyncCtx5 + 16 | 0; //@line 17764
       HEAP32[$452 >> 2] = $6; //@line 17765
       $453 = $ReallocAsyncCtx5 + 20 | 0; //@line 17766
       HEAP32[$453 >> 2] = $8; //@line 17767
       $454 = $ReallocAsyncCtx5 + 24 | 0; //@line 17768
       HEAP32[$454 >> 2] = $10; //@line 17769
       $455 = $ReallocAsyncCtx5 + 28 | 0; //@line 17770
       HEAP32[$455 >> 2] = $12; //@line 17771
       $456 = $ReallocAsyncCtx5 + 32 | 0; //@line 17772
       HEAP32[$456 >> 2] = $14; //@line 17773
       $457 = $ReallocAsyncCtx5 + 36 | 0; //@line 17774
       HEAP32[$457 >> 2] = $20; //@line 17775
       $458 = $ReallocAsyncCtx5 + 40 | 0; //@line 17776
       HEAP32[$458 >> 2] = $22; //@line 17777
       $459 = $ReallocAsyncCtx5 + 44 | 0; //@line 17778
       HEAP32[$459 >> 2] = $141; //@line 17779
       $460 = $ReallocAsyncCtx5 + 48 | 0; //@line 17780
       HEAP32[$460 >> 2] = $24; //@line 17781
       $461 = $ReallocAsyncCtx5 + 52 | 0; //@line 17782
       HEAP32[$461 >> 2] = $26; //@line 17783
       $462 = $ReallocAsyncCtx5 + 56 | 0; //@line 17784
       HEAP32[$462 >> 2] = $28; //@line 17785
       $463 = $ReallocAsyncCtx5 + 60 | 0; //@line 17786
       HEAP32[$463 >> 2] = $32; //@line 17787
       $464 = $ReallocAsyncCtx5 + 64 | 0; //@line 17788
       HEAP32[$464 >> 2] = $34; //@line 17789
       $465 = $ReallocAsyncCtx5 + 68 | 0; //@line 17790
       HEAP32[$465 >> 2] = $36; //@line 17791
       $466 = $ReallocAsyncCtx5 + 72 | 0; //@line 17792
       HEAP32[$466 >> 2] = $38; //@line 17793
       $467 = $ReallocAsyncCtx5 + 76 | 0; //@line 17794
       HEAP32[$467 >> 2] = $40; //@line 17795
       $468 = $ReallocAsyncCtx5 + 80 | 0; //@line 17796
       HEAP32[$468 >> 2] = $42; //@line 17797
       $469 = $ReallocAsyncCtx5 + 84 | 0; //@line 17798
       HEAP32[$469 >> 2] = $44; //@line 17799
       $470 = $ReallocAsyncCtx5 + 88 | 0; //@line 17800
       HEAP32[$470 >> 2] = $46; //@line 17801
       $471 = $ReallocAsyncCtx5 + 92 | 0; //@line 17802
       HEAP32[$471 >> 2] = $48; //@line 17803
       $472 = $ReallocAsyncCtx5 + 96 | 0; //@line 17804
       HEAP32[$472 >> 2] = $50; //@line 17805
       $473 = $ReallocAsyncCtx5 + 100 | 0; //@line 17806
       HEAP32[$473 >> 2] = $52; //@line 17807
       $474 = $ReallocAsyncCtx5 + 104 | 0; //@line 17808
       HEAP32[$474 >> 2] = $54; //@line 17809
       $475 = $ReallocAsyncCtx5 + 108 | 0; //@line 17810
       HEAP32[$475 >> 2] = $58; //@line 17811
       $476 = $ReallocAsyncCtx5 + 112 | 0; //@line 17812
       HEAP32[$476 >> 2] = $60; //@line 17813
       $477 = $ReallocAsyncCtx5 + 116 | 0; //@line 17814
       HEAP32[$477 >> 2] = $62; //@line 17815
       $478 = $ReallocAsyncCtx5 + 120 | 0; //@line 17816
       HEAP32[$478 >> 2] = $64; //@line 17817
       $479 = $ReallocAsyncCtx5 + 124 | 0; //@line 17818
       HEAP32[$479 >> 2] = $$0208$i; //@line 17819
       $480 = $ReallocAsyncCtx5 + 128 | 0; //@line 17820
       HEAP32[$480 >> 2] = $66; //@line 17821
       $481 = $ReallocAsyncCtx5 + 132 | 0; //@line 17822
       HEAP32[$481 >> 2] = $68; //@line 17823
       $482 = $ReallocAsyncCtx5 + 136 | 0; //@line 17824
       HEAP32[$482 >> 2] = $38; //@line 17825
       $483 = $ReallocAsyncCtx5 + 140 | 0; //@line 17826
       HEAP32[$483 >> 2] = $70; //@line 17827
       $484 = $ReallocAsyncCtx5 + 144 | 0; //@line 17828
       HEAP32[$484 >> 2] = $72; //@line 17829
       $485 = $ReallocAsyncCtx5 + 148 | 0; //@line 17830
       HEAP32[$485 >> 2] = $74; //@line 17831
       $486 = $ReallocAsyncCtx5 + 152 | 0; //@line 17832
       HEAP32[$486 >> 2] = $76; //@line 17833
       $487 = $ReallocAsyncCtx5 + 156 | 0; //@line 17834
       HEAP32[$487 >> 2] = $78; //@line 17835
       $488 = $ReallocAsyncCtx5 + 160 | 0; //@line 17836
       HEAP32[$488 >> 2] = $135; //@line 17837
       $489 = $ReallocAsyncCtx5 + 164 | 0; //@line 17838
       HEAP32[$489 >> 2] = $80; //@line 17839
       $490 = $ReallocAsyncCtx5 + 168 | 0; //@line 17840
       HEAP32[$490 >> 2] = $82; //@line 17841
       $491 = $ReallocAsyncCtx5 + 172 | 0; //@line 17842
       HEAP32[$491 >> 2] = $84; //@line 17843
       $492 = $ReallocAsyncCtx5 + 176 | 0; //@line 17844
       HEAP32[$492 >> 2] = $86; //@line 17845
       $493 = $ReallocAsyncCtx5 + 180 | 0; //@line 17846
       HEAP32[$493 >> 2] = $88; //@line 17847
       $494 = $ReallocAsyncCtx5 + 184 | 0; //@line 17848
       HEAP32[$494 >> 2] = $136; //@line 17849
       $495 = $ReallocAsyncCtx5 + 188 | 0; //@line 17850
       HEAP32[$495 >> 2] = $92; //@line 17851
       $496 = $ReallocAsyncCtx5 + 192 | 0; //@line 17852
       HEAP32[$496 >> 2] = $438; //@line 17853
       $497 = $ReallocAsyncCtx5 + 196 | 0; //@line 17854
       HEAP32[$497 >> 2] = $94; //@line 17855
       $498 = $ReallocAsyncCtx5 + 200 | 0; //@line 17856
       HEAP32[$498 >> 2] = $96; //@line 17857
       $499 = $ReallocAsyncCtx5 + 204 | 0; //@line 17858
       HEAP32[$499 >> 2] = $446; //@line 17859
       $500 = $ReallocAsyncCtx5 + 208 | 0; //@line 17860
       HEAP32[$500 >> 2] = $137; //@line 17861
       $501 = $ReallocAsyncCtx5 + 212 | 0; //@line 17862
       HEAP32[$501 >> 2] = $100; //@line 17863
       $502 = $ReallocAsyncCtx5 + 216 | 0; //@line 17864
       HEAP32[$502 >> 2] = $102; //@line 17865
       $503 = $ReallocAsyncCtx5 + 220 | 0; //@line 17866
       HEAP32[$503 >> 2] = $104; //@line 17867
       $504 = $ReallocAsyncCtx5 + 224 | 0; //@line 17868
       HEAP32[$504 >> 2] = $106; //@line 17869
       $505 = $ReallocAsyncCtx5 + 228 | 0; //@line 17870
       HEAP32[$505 >> 2] = $108; //@line 17871
       $506 = $ReallocAsyncCtx5 + 232 | 0; //@line 17872
       HEAP32[$506 >> 2] = $110; //@line 17873
       $507 = $ReallocAsyncCtx5 + 236 | 0; //@line 17874
       HEAP32[$507 >> 2] = $112; //@line 17875
       $508 = $ReallocAsyncCtx5 + 240 | 0; //@line 17876
       HEAP32[$508 >> 2] = $114; //@line 17877
       $509 = $ReallocAsyncCtx5 + 244 | 0; //@line 17878
       HEAP32[$509 >> 2] = $116; //@line 17879
       $510 = $ReallocAsyncCtx5 + 248 | 0; //@line 17880
       HEAP32[$510 >> 2] = $118; //@line 17881
       $511 = $ReallocAsyncCtx5 + 252 | 0; //@line 17882
       HEAP32[$511 >> 2] = $120; //@line 17883
       $512 = $ReallocAsyncCtx5 + 256 | 0; //@line 17884
       HEAP32[$512 >> 2] = $122; //@line 17885
       $513 = $ReallocAsyncCtx5 + 260 | 0; //@line 17886
       HEAP32[$513 >> 2] = $139; //@line 17887
       $514 = $ReallocAsyncCtx5 + 264 | 0; //@line 17888
       HEAP32[$514 >> 2] = $124; //@line 17889
       $515 = $ReallocAsyncCtx5 + 268 | 0; //@line 17890
       HEAP32[$515 >> 2] = $139; //@line 17891
       $516 = $ReallocAsyncCtx5 + 272 | 0; //@line 17892
       HEAP32[$516 >> 2] = $126; //@line 17893
       sp = STACKTOP; //@line 17894
       return;
      }
     }
     _mbed_tracef(2, 3803, 4564, $112); //@line 17898
     break L2;
     break;
    }
   case 50:
    {
     $518 = HEAP32[$139 >> 2] | 0; //@line 17903
     $519 = $518 + 56 | 0; //@line 17904
     if (HEAP32[$519 >> 2] | 0) {
      _mbed_tracef(2, 3803, 4698, $92); //@line 17908
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 17912
     $523 = _sn_coap_parser_options_parse_multiple_options($2, $38, $182, $519, $518 + 6 | 0, 8, $$1202$i) | 0; //@line 17913
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 17916
      $524 = $ReallocAsyncCtx9 + 4 | 0; //@line 17917
      HEAP32[$524 >> 2] = $2; //@line 17918
      $525 = $ReallocAsyncCtx9 + 8 | 0; //@line 17919
      HEAP32[$525 >> 2] = $140; //@line 17920
      $526 = $ReallocAsyncCtx9 + 12 | 0; //@line 17921
      HEAP32[$526 >> 2] = $4; //@line 17922
      $527 = $ReallocAsyncCtx9 + 16 | 0; //@line 17923
      HEAP32[$527 >> 2] = $6; //@line 17924
      $528 = $ReallocAsyncCtx9 + 20 | 0; //@line 17925
      HEAP32[$528 >> 2] = $8; //@line 17926
      $529 = $ReallocAsyncCtx9 + 24 | 0; //@line 17927
      HEAP32[$529 >> 2] = $10; //@line 17928
      $530 = $ReallocAsyncCtx9 + 28 | 0; //@line 17929
      HEAP32[$530 >> 2] = $12; //@line 17930
      $531 = $ReallocAsyncCtx9 + 32 | 0; //@line 17931
      HEAP32[$531 >> 2] = $14; //@line 17932
      $532 = $ReallocAsyncCtx9 + 36 | 0; //@line 17933
      HEAP32[$532 >> 2] = $20; //@line 17934
      $533 = $ReallocAsyncCtx9 + 40 | 0; //@line 17935
      HEAP32[$533 >> 2] = $22; //@line 17936
      $534 = $ReallocAsyncCtx9 + 44 | 0; //@line 17937
      HEAP32[$534 >> 2] = $141; //@line 17938
      $535 = $ReallocAsyncCtx9 + 48 | 0; //@line 17939
      HEAP32[$535 >> 2] = $24; //@line 17940
      $536 = $ReallocAsyncCtx9 + 52 | 0; //@line 17941
      HEAP32[$536 >> 2] = $26; //@line 17942
      $537 = $ReallocAsyncCtx9 + 56 | 0; //@line 17943
      HEAP32[$537 >> 2] = $28; //@line 17944
      $538 = $ReallocAsyncCtx9 + 60 | 0; //@line 17945
      HEAP32[$538 >> 2] = $32; //@line 17946
      $539 = $ReallocAsyncCtx9 + 64 | 0; //@line 17947
      HEAP32[$539 >> 2] = $34; //@line 17948
      $540 = $ReallocAsyncCtx9 + 68 | 0; //@line 17949
      HEAP32[$540 >> 2] = $36; //@line 17950
      $541 = $ReallocAsyncCtx9 + 72 | 0; //@line 17951
      HEAP32[$541 >> 2] = $38; //@line 17952
      $542 = $ReallocAsyncCtx9 + 76 | 0; //@line 17953
      HEAP32[$542 >> 2] = $40; //@line 17954
      $543 = $ReallocAsyncCtx9 + 80 | 0; //@line 17955
      HEAP32[$543 >> 2] = $42; //@line 17956
      $544 = $ReallocAsyncCtx9 + 84 | 0; //@line 17957
      HEAP32[$544 >> 2] = $44; //@line 17958
      $545 = $ReallocAsyncCtx9 + 88 | 0; //@line 17959
      HEAP32[$545 >> 2] = $46; //@line 17960
      $546 = $ReallocAsyncCtx9 + 92 | 0; //@line 17961
      HEAP32[$546 >> 2] = $48; //@line 17962
      $547 = $ReallocAsyncCtx9 + 96 | 0; //@line 17963
      HEAP32[$547 >> 2] = $50; //@line 17964
      $548 = $ReallocAsyncCtx9 + 100 | 0; //@line 17965
      HEAP32[$548 >> 2] = $52; //@line 17966
      $549 = $ReallocAsyncCtx9 + 104 | 0; //@line 17967
      HEAP32[$549 >> 2] = $54; //@line 17968
      $550 = $ReallocAsyncCtx9 + 108 | 0; //@line 17969
      HEAP32[$550 >> 2] = $58; //@line 17970
      $551 = $ReallocAsyncCtx9 + 112 | 0; //@line 17971
      HEAP32[$551 >> 2] = $60; //@line 17972
      $552 = $ReallocAsyncCtx9 + 116 | 0; //@line 17973
      HEAP32[$552 >> 2] = $62; //@line 17974
      $553 = $ReallocAsyncCtx9 + 120 | 0; //@line 17975
      HEAP32[$553 >> 2] = $64; //@line 17976
      $554 = $ReallocAsyncCtx9 + 124 | 0; //@line 17977
      HEAP32[$554 >> 2] = $$0208$i; //@line 17978
      $555 = $ReallocAsyncCtx9 + 128 | 0; //@line 17979
      HEAP32[$555 >> 2] = $66; //@line 17980
      $556 = $ReallocAsyncCtx9 + 132 | 0; //@line 17981
      HEAP32[$556 >> 2] = $68; //@line 17982
      $557 = $ReallocAsyncCtx9 + 136 | 0; //@line 17983
      HEAP32[$557 >> 2] = $38; //@line 17984
      $558 = $ReallocAsyncCtx9 + 140 | 0; //@line 17985
      HEAP32[$558 >> 2] = $70; //@line 17986
      $559 = $ReallocAsyncCtx9 + 144 | 0; //@line 17987
      HEAP32[$559 >> 2] = $72; //@line 17988
      $560 = $ReallocAsyncCtx9 + 148 | 0; //@line 17989
      HEAP32[$560 >> 2] = $74; //@line 17990
      $561 = $ReallocAsyncCtx9 + 152 | 0; //@line 17991
      HEAP32[$561 >> 2] = $76; //@line 17992
      $562 = $ReallocAsyncCtx9 + 156 | 0; //@line 17993
      HEAP32[$562 >> 2] = $78; //@line 17994
      $563 = $ReallocAsyncCtx9 + 160 | 0; //@line 17995
      HEAP32[$563 >> 2] = $135; //@line 17996
      $564 = $ReallocAsyncCtx9 + 164 | 0; //@line 17997
      HEAP32[$564 >> 2] = $80; //@line 17998
      $565 = $ReallocAsyncCtx9 + 168 | 0; //@line 17999
      HEAP32[$565 >> 2] = $82; //@line 18000
      $566 = $ReallocAsyncCtx9 + 172 | 0; //@line 18001
      HEAP32[$566 >> 2] = $84; //@line 18002
      $567 = $ReallocAsyncCtx9 + 176 | 0; //@line 18003
      HEAP32[$567 >> 2] = $86; //@line 18004
      $568 = $ReallocAsyncCtx9 + 180 | 0; //@line 18005
      HEAP32[$568 >> 2] = $88; //@line 18006
      $569 = $ReallocAsyncCtx9 + 184 | 0; //@line 18007
      HEAP32[$569 >> 2] = $136; //@line 18008
      $570 = $ReallocAsyncCtx9 + 188 | 0; //@line 18009
      HEAP32[$570 >> 2] = $92; //@line 18010
      $571 = $ReallocAsyncCtx9 + 192 | 0; //@line 18011
      HEAP32[$571 >> 2] = $94; //@line 18012
      $572 = $ReallocAsyncCtx9 + 196 | 0; //@line 18013
      HEAP32[$572 >> 2] = $96; //@line 18014
      $573 = $ReallocAsyncCtx9 + 200 | 0; //@line 18015
      HEAP32[$573 >> 2] = $137; //@line 18016
      $574 = $ReallocAsyncCtx9 + 204 | 0; //@line 18017
      HEAP32[$574 >> 2] = $100; //@line 18018
      $575 = $ReallocAsyncCtx9 + 208 | 0; //@line 18019
      HEAP32[$575 >> 2] = $102; //@line 18020
      $576 = $ReallocAsyncCtx9 + 212 | 0; //@line 18021
      HEAP32[$576 >> 2] = $104; //@line 18022
      $577 = $ReallocAsyncCtx9 + 216 | 0; //@line 18023
      HEAP32[$577 >> 2] = $106; //@line 18024
      $578 = $ReallocAsyncCtx9 + 220 | 0; //@line 18025
      HEAP32[$578 >> 2] = $108; //@line 18026
      $579 = $ReallocAsyncCtx9 + 224 | 0; //@line 18027
      HEAP32[$579 >> 2] = $110; //@line 18028
      $580 = $ReallocAsyncCtx9 + 228 | 0; //@line 18029
      HEAP32[$580 >> 2] = $112; //@line 18030
      $581 = $ReallocAsyncCtx9 + 232 | 0; //@line 18031
      HEAP32[$581 >> 2] = $114; //@line 18032
      $582 = $ReallocAsyncCtx9 + 236 | 0; //@line 18033
      HEAP32[$582 >> 2] = $116; //@line 18034
      $583 = $ReallocAsyncCtx9 + 240 | 0; //@line 18035
      HEAP32[$583 >> 2] = $118; //@line 18036
      $584 = $ReallocAsyncCtx9 + 244 | 0; //@line 18037
      HEAP32[$584 >> 2] = $120; //@line 18038
      $585 = $ReallocAsyncCtx9 + 248 | 0; //@line 18039
      HEAP32[$585 >> 2] = $122; //@line 18040
      $586 = $ReallocAsyncCtx9 + 252 | 0; //@line 18041
      HEAP32[$586 >> 2] = $139; //@line 18042
      $587 = $ReallocAsyncCtx9 + 256 | 0; //@line 18043
      HEAP32[$587 >> 2] = $124; //@line 18044
      $588 = $ReallocAsyncCtx9 + 260 | 0; //@line 18045
      HEAP32[$588 >> 2] = $139; //@line 18046
      $589 = $ReallocAsyncCtx9 + 264 | 0; //@line 18047
      HEAP32[$589 >> 2] = $126; //@line 18048
      sp = STACKTOP; //@line 18049
      return;
     }
     HEAP8[___async_retval >> 0] = $523; //@line 18053
     ___async_unwind = 0; //@line 18054
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 18055
     $524 = $ReallocAsyncCtx9 + 4 | 0; //@line 18056
     HEAP32[$524 >> 2] = $2; //@line 18057
     $525 = $ReallocAsyncCtx9 + 8 | 0; //@line 18058
     HEAP32[$525 >> 2] = $140; //@line 18059
     $526 = $ReallocAsyncCtx9 + 12 | 0; //@line 18060
     HEAP32[$526 >> 2] = $4; //@line 18061
     $527 = $ReallocAsyncCtx9 + 16 | 0; //@line 18062
     HEAP32[$527 >> 2] = $6; //@line 18063
     $528 = $ReallocAsyncCtx9 + 20 | 0; //@line 18064
     HEAP32[$528 >> 2] = $8; //@line 18065
     $529 = $ReallocAsyncCtx9 + 24 | 0; //@line 18066
     HEAP32[$529 >> 2] = $10; //@line 18067
     $530 = $ReallocAsyncCtx9 + 28 | 0; //@line 18068
     HEAP32[$530 >> 2] = $12; //@line 18069
     $531 = $ReallocAsyncCtx9 + 32 | 0; //@line 18070
     HEAP32[$531 >> 2] = $14; //@line 18071
     $532 = $ReallocAsyncCtx9 + 36 | 0; //@line 18072
     HEAP32[$532 >> 2] = $20; //@line 18073
     $533 = $ReallocAsyncCtx9 + 40 | 0; //@line 18074
     HEAP32[$533 >> 2] = $22; //@line 18075
     $534 = $ReallocAsyncCtx9 + 44 | 0; //@line 18076
     HEAP32[$534 >> 2] = $141; //@line 18077
     $535 = $ReallocAsyncCtx9 + 48 | 0; //@line 18078
     HEAP32[$535 >> 2] = $24; //@line 18079
     $536 = $ReallocAsyncCtx9 + 52 | 0; //@line 18080
     HEAP32[$536 >> 2] = $26; //@line 18081
     $537 = $ReallocAsyncCtx9 + 56 | 0; //@line 18082
     HEAP32[$537 >> 2] = $28; //@line 18083
     $538 = $ReallocAsyncCtx9 + 60 | 0; //@line 18084
     HEAP32[$538 >> 2] = $32; //@line 18085
     $539 = $ReallocAsyncCtx9 + 64 | 0; //@line 18086
     HEAP32[$539 >> 2] = $34; //@line 18087
     $540 = $ReallocAsyncCtx9 + 68 | 0; //@line 18088
     HEAP32[$540 >> 2] = $36; //@line 18089
     $541 = $ReallocAsyncCtx9 + 72 | 0; //@line 18090
     HEAP32[$541 >> 2] = $38; //@line 18091
     $542 = $ReallocAsyncCtx9 + 76 | 0; //@line 18092
     HEAP32[$542 >> 2] = $40; //@line 18093
     $543 = $ReallocAsyncCtx9 + 80 | 0; //@line 18094
     HEAP32[$543 >> 2] = $42; //@line 18095
     $544 = $ReallocAsyncCtx9 + 84 | 0; //@line 18096
     HEAP32[$544 >> 2] = $44; //@line 18097
     $545 = $ReallocAsyncCtx9 + 88 | 0; //@line 18098
     HEAP32[$545 >> 2] = $46; //@line 18099
     $546 = $ReallocAsyncCtx9 + 92 | 0; //@line 18100
     HEAP32[$546 >> 2] = $48; //@line 18101
     $547 = $ReallocAsyncCtx9 + 96 | 0; //@line 18102
     HEAP32[$547 >> 2] = $50; //@line 18103
     $548 = $ReallocAsyncCtx9 + 100 | 0; //@line 18104
     HEAP32[$548 >> 2] = $52; //@line 18105
     $549 = $ReallocAsyncCtx9 + 104 | 0; //@line 18106
     HEAP32[$549 >> 2] = $54; //@line 18107
     $550 = $ReallocAsyncCtx9 + 108 | 0; //@line 18108
     HEAP32[$550 >> 2] = $58; //@line 18109
     $551 = $ReallocAsyncCtx9 + 112 | 0; //@line 18110
     HEAP32[$551 >> 2] = $60; //@line 18111
     $552 = $ReallocAsyncCtx9 + 116 | 0; //@line 18112
     HEAP32[$552 >> 2] = $62; //@line 18113
     $553 = $ReallocAsyncCtx9 + 120 | 0; //@line 18114
     HEAP32[$553 >> 2] = $64; //@line 18115
     $554 = $ReallocAsyncCtx9 + 124 | 0; //@line 18116
     HEAP32[$554 >> 2] = $$0208$i; //@line 18117
     $555 = $ReallocAsyncCtx9 + 128 | 0; //@line 18118
     HEAP32[$555 >> 2] = $66; //@line 18119
     $556 = $ReallocAsyncCtx9 + 132 | 0; //@line 18120
     HEAP32[$556 >> 2] = $68; //@line 18121
     $557 = $ReallocAsyncCtx9 + 136 | 0; //@line 18122
     HEAP32[$557 >> 2] = $38; //@line 18123
     $558 = $ReallocAsyncCtx9 + 140 | 0; //@line 18124
     HEAP32[$558 >> 2] = $70; //@line 18125
     $559 = $ReallocAsyncCtx9 + 144 | 0; //@line 18126
     HEAP32[$559 >> 2] = $72; //@line 18127
     $560 = $ReallocAsyncCtx9 + 148 | 0; //@line 18128
     HEAP32[$560 >> 2] = $74; //@line 18129
     $561 = $ReallocAsyncCtx9 + 152 | 0; //@line 18130
     HEAP32[$561 >> 2] = $76; //@line 18131
     $562 = $ReallocAsyncCtx9 + 156 | 0; //@line 18132
     HEAP32[$562 >> 2] = $78; //@line 18133
     $563 = $ReallocAsyncCtx9 + 160 | 0; //@line 18134
     HEAP32[$563 >> 2] = $135; //@line 18135
     $564 = $ReallocAsyncCtx9 + 164 | 0; //@line 18136
     HEAP32[$564 >> 2] = $80; //@line 18137
     $565 = $ReallocAsyncCtx9 + 168 | 0; //@line 18138
     HEAP32[$565 >> 2] = $82; //@line 18139
     $566 = $ReallocAsyncCtx9 + 172 | 0; //@line 18140
     HEAP32[$566 >> 2] = $84; //@line 18141
     $567 = $ReallocAsyncCtx9 + 176 | 0; //@line 18142
     HEAP32[$567 >> 2] = $86; //@line 18143
     $568 = $ReallocAsyncCtx9 + 180 | 0; //@line 18144
     HEAP32[$568 >> 2] = $88; //@line 18145
     $569 = $ReallocAsyncCtx9 + 184 | 0; //@line 18146
     HEAP32[$569 >> 2] = $136; //@line 18147
     $570 = $ReallocAsyncCtx9 + 188 | 0; //@line 18148
     HEAP32[$570 >> 2] = $92; //@line 18149
     $571 = $ReallocAsyncCtx9 + 192 | 0; //@line 18150
     HEAP32[$571 >> 2] = $94; //@line 18151
     $572 = $ReallocAsyncCtx9 + 196 | 0; //@line 18152
     HEAP32[$572 >> 2] = $96; //@line 18153
     $573 = $ReallocAsyncCtx9 + 200 | 0; //@line 18154
     HEAP32[$573 >> 2] = $137; //@line 18155
     $574 = $ReallocAsyncCtx9 + 204 | 0; //@line 18156
     HEAP32[$574 >> 2] = $100; //@line 18157
     $575 = $ReallocAsyncCtx9 + 208 | 0; //@line 18158
     HEAP32[$575 >> 2] = $102; //@line 18159
     $576 = $ReallocAsyncCtx9 + 212 | 0; //@line 18160
     HEAP32[$576 >> 2] = $104; //@line 18161
     $577 = $ReallocAsyncCtx9 + 216 | 0; //@line 18162
     HEAP32[$577 >> 2] = $106; //@line 18163
     $578 = $ReallocAsyncCtx9 + 220 | 0; //@line 18164
     HEAP32[$578 >> 2] = $108; //@line 18165
     $579 = $ReallocAsyncCtx9 + 224 | 0; //@line 18166
     HEAP32[$579 >> 2] = $110; //@line 18167
     $580 = $ReallocAsyncCtx9 + 228 | 0; //@line 18168
     HEAP32[$580 >> 2] = $112; //@line 18169
     $581 = $ReallocAsyncCtx9 + 232 | 0; //@line 18170
     HEAP32[$581 >> 2] = $114; //@line 18171
     $582 = $ReallocAsyncCtx9 + 236 | 0; //@line 18172
     HEAP32[$582 >> 2] = $116; //@line 18173
     $583 = $ReallocAsyncCtx9 + 240 | 0; //@line 18174
     HEAP32[$583 >> 2] = $118; //@line 18175
     $584 = $ReallocAsyncCtx9 + 244 | 0; //@line 18176
     HEAP32[$584 >> 2] = $120; //@line 18177
     $585 = $ReallocAsyncCtx9 + 248 | 0; //@line 18178
     HEAP32[$585 >> 2] = $122; //@line 18179
     $586 = $ReallocAsyncCtx9 + 252 | 0; //@line 18180
     HEAP32[$586 >> 2] = $139; //@line 18181
     $587 = $ReallocAsyncCtx9 + 256 | 0; //@line 18182
     HEAP32[$587 >> 2] = $124; //@line 18183
     $588 = $ReallocAsyncCtx9 + 260 | 0; //@line 18184
     HEAP32[$588 >> 2] = $139; //@line 18185
     $589 = $ReallocAsyncCtx9 + 264 | 0; //@line 18186
     HEAP32[$589 >> 2] = $126; //@line 18187
     sp = STACKTOP; //@line 18188
     return;
    }
   case 57:
    {
     _mbed_tracef(2, 3803, 4831, $68); //@line 18193
     break L2;
     break;
    }
   case 61:
    {
     $607 = HEAP32[$139 >> 2] | 0; //@line 18198
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 18201
     $610 = _sn_coap_parser_options_parse_multiple_options($2, $38, $182, $607 + 60 | 0, $607 + 8 | 0, 20, $$1202$i) | 0; //@line 18202
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 18205
      $611 = $ReallocAsyncCtx8 + 4 | 0; //@line 18206
      HEAP32[$611 >> 2] = $2; //@line 18207
      $612 = $ReallocAsyncCtx8 + 8 | 0; //@line 18208
      HEAP32[$612 >> 2] = $140; //@line 18209
      $613 = $ReallocAsyncCtx8 + 12 | 0; //@line 18210
      HEAP32[$613 >> 2] = $4; //@line 18211
      $614 = $ReallocAsyncCtx8 + 16 | 0; //@line 18212
      HEAP32[$614 >> 2] = $6; //@line 18213
      $615 = $ReallocAsyncCtx8 + 20 | 0; //@line 18214
      HEAP32[$615 >> 2] = $8; //@line 18215
      $616 = $ReallocAsyncCtx8 + 24 | 0; //@line 18216
      HEAP32[$616 >> 2] = $10; //@line 18217
      $617 = $ReallocAsyncCtx8 + 28 | 0; //@line 18218
      HEAP32[$617 >> 2] = $12; //@line 18219
      $618 = $ReallocAsyncCtx8 + 32 | 0; //@line 18220
      HEAP32[$618 >> 2] = $14; //@line 18221
      $619 = $ReallocAsyncCtx8 + 36 | 0; //@line 18222
      HEAP32[$619 >> 2] = $20; //@line 18223
      $620 = $ReallocAsyncCtx8 + 40 | 0; //@line 18224
      HEAP32[$620 >> 2] = $22; //@line 18225
      $621 = $ReallocAsyncCtx8 + 44 | 0; //@line 18226
      HEAP32[$621 >> 2] = $141; //@line 18227
      $622 = $ReallocAsyncCtx8 + 48 | 0; //@line 18228
      HEAP32[$622 >> 2] = $24; //@line 18229
      $623 = $ReallocAsyncCtx8 + 52 | 0; //@line 18230
      HEAP32[$623 >> 2] = $26; //@line 18231
      $624 = $ReallocAsyncCtx8 + 56 | 0; //@line 18232
      HEAP32[$624 >> 2] = $28; //@line 18233
      $625 = $ReallocAsyncCtx8 + 60 | 0; //@line 18234
      HEAP32[$625 >> 2] = $32; //@line 18235
      $626 = $ReallocAsyncCtx8 + 64 | 0; //@line 18236
      HEAP32[$626 >> 2] = $34; //@line 18237
      $627 = $ReallocAsyncCtx8 + 68 | 0; //@line 18238
      HEAP32[$627 >> 2] = $36; //@line 18239
      $628 = $ReallocAsyncCtx8 + 72 | 0; //@line 18240
      HEAP32[$628 >> 2] = $38; //@line 18241
      $629 = $ReallocAsyncCtx8 + 76 | 0; //@line 18242
      HEAP32[$629 >> 2] = $40; //@line 18243
      $630 = $ReallocAsyncCtx8 + 80 | 0; //@line 18244
      HEAP32[$630 >> 2] = $42; //@line 18245
      $631 = $ReallocAsyncCtx8 + 84 | 0; //@line 18246
      HEAP32[$631 >> 2] = $44; //@line 18247
      $632 = $ReallocAsyncCtx8 + 88 | 0; //@line 18248
      HEAP32[$632 >> 2] = $46; //@line 18249
      $633 = $ReallocAsyncCtx8 + 92 | 0; //@line 18250
      HEAP32[$633 >> 2] = $48; //@line 18251
      $634 = $ReallocAsyncCtx8 + 96 | 0; //@line 18252
      HEAP32[$634 >> 2] = $50; //@line 18253
      $635 = $ReallocAsyncCtx8 + 100 | 0; //@line 18254
      HEAP32[$635 >> 2] = $52; //@line 18255
      $636 = $ReallocAsyncCtx8 + 104 | 0; //@line 18256
      HEAP32[$636 >> 2] = $54; //@line 18257
      $637 = $ReallocAsyncCtx8 + 108 | 0; //@line 18258
      HEAP32[$637 >> 2] = $58; //@line 18259
      $638 = $ReallocAsyncCtx8 + 112 | 0; //@line 18260
      HEAP32[$638 >> 2] = $60; //@line 18261
      $639 = $ReallocAsyncCtx8 + 116 | 0; //@line 18262
      HEAP32[$639 >> 2] = $62; //@line 18263
      $640 = $ReallocAsyncCtx8 + 120 | 0; //@line 18264
      HEAP32[$640 >> 2] = $64; //@line 18265
      $641 = $ReallocAsyncCtx8 + 124 | 0; //@line 18266
      HEAP32[$641 >> 2] = $$0208$i; //@line 18267
      $642 = $ReallocAsyncCtx8 + 128 | 0; //@line 18268
      HEAP32[$642 >> 2] = $66; //@line 18269
      $643 = $ReallocAsyncCtx8 + 132 | 0; //@line 18270
      HEAP32[$643 >> 2] = $68; //@line 18271
      $644 = $ReallocAsyncCtx8 + 136 | 0; //@line 18272
      HEAP32[$644 >> 2] = $38; //@line 18273
      $645 = $ReallocAsyncCtx8 + 140 | 0; //@line 18274
      HEAP32[$645 >> 2] = $70; //@line 18275
      $646 = $ReallocAsyncCtx8 + 144 | 0; //@line 18276
      HEAP32[$646 >> 2] = $72; //@line 18277
      $647 = $ReallocAsyncCtx8 + 148 | 0; //@line 18278
      HEAP32[$647 >> 2] = $74; //@line 18279
      $648 = $ReallocAsyncCtx8 + 152 | 0; //@line 18280
      HEAP32[$648 >> 2] = $76; //@line 18281
      $649 = $ReallocAsyncCtx8 + 156 | 0; //@line 18282
      HEAP32[$649 >> 2] = $78; //@line 18283
      $650 = $ReallocAsyncCtx8 + 160 | 0; //@line 18284
      HEAP32[$650 >> 2] = $135; //@line 18285
      $651 = $ReallocAsyncCtx8 + 164 | 0; //@line 18286
      HEAP32[$651 >> 2] = $80; //@line 18287
      $652 = $ReallocAsyncCtx8 + 168 | 0; //@line 18288
      HEAP32[$652 >> 2] = $82; //@line 18289
      $653 = $ReallocAsyncCtx8 + 172 | 0; //@line 18290
      HEAP32[$653 >> 2] = $84; //@line 18291
      $654 = $ReallocAsyncCtx8 + 176 | 0; //@line 18292
      HEAP32[$654 >> 2] = $86; //@line 18293
      $655 = $ReallocAsyncCtx8 + 180 | 0; //@line 18294
      HEAP32[$655 >> 2] = $88; //@line 18295
      $656 = $ReallocAsyncCtx8 + 184 | 0; //@line 18296
      HEAP32[$656 >> 2] = $136; //@line 18297
      $657 = $ReallocAsyncCtx8 + 188 | 0; //@line 18298
      HEAP32[$657 >> 2] = $92; //@line 18299
      $658 = $ReallocAsyncCtx8 + 192 | 0; //@line 18300
      HEAP32[$658 >> 2] = $94; //@line 18301
      $659 = $ReallocAsyncCtx8 + 196 | 0; //@line 18302
      HEAP32[$659 >> 2] = $96; //@line 18303
      $660 = $ReallocAsyncCtx8 + 200 | 0; //@line 18304
      HEAP32[$660 >> 2] = $137; //@line 18305
      $661 = $ReallocAsyncCtx8 + 204 | 0; //@line 18306
      HEAP32[$661 >> 2] = $100; //@line 18307
      $662 = $ReallocAsyncCtx8 + 208 | 0; //@line 18308
      HEAP32[$662 >> 2] = $102; //@line 18309
      $663 = $ReallocAsyncCtx8 + 212 | 0; //@line 18310
      HEAP32[$663 >> 2] = $104; //@line 18311
      $664 = $ReallocAsyncCtx8 + 216 | 0; //@line 18312
      HEAP32[$664 >> 2] = $106; //@line 18313
      $665 = $ReallocAsyncCtx8 + 220 | 0; //@line 18314
      HEAP32[$665 >> 2] = $108; //@line 18315
      $666 = $ReallocAsyncCtx8 + 224 | 0; //@line 18316
      HEAP32[$666 >> 2] = $110; //@line 18317
      $667 = $ReallocAsyncCtx8 + 228 | 0; //@line 18318
      HEAP32[$667 >> 2] = $112; //@line 18319
      $668 = $ReallocAsyncCtx8 + 232 | 0; //@line 18320
      HEAP32[$668 >> 2] = $114; //@line 18321
      $669 = $ReallocAsyncCtx8 + 236 | 0; //@line 18322
      HEAP32[$669 >> 2] = $116; //@line 18323
      $670 = $ReallocAsyncCtx8 + 240 | 0; //@line 18324
      HEAP32[$670 >> 2] = $118; //@line 18325
      $671 = $ReallocAsyncCtx8 + 244 | 0; //@line 18326
      HEAP32[$671 >> 2] = $120; //@line 18327
      $672 = $ReallocAsyncCtx8 + 248 | 0; //@line 18328
      HEAP32[$672 >> 2] = $122; //@line 18329
      $673 = $ReallocAsyncCtx8 + 252 | 0; //@line 18330
      HEAP32[$673 >> 2] = $139; //@line 18331
      $674 = $ReallocAsyncCtx8 + 256 | 0; //@line 18332
      HEAP32[$674 >> 2] = $124; //@line 18333
      $675 = $ReallocAsyncCtx8 + 260 | 0; //@line 18334
      HEAP32[$675 >> 2] = $139; //@line 18335
      $676 = $ReallocAsyncCtx8 + 264 | 0; //@line 18336
      HEAP32[$676 >> 2] = $126; //@line 18337
      sp = STACKTOP; //@line 18338
      return;
     }
     HEAP8[___async_retval >> 0] = $610; //@line 18342
     ___async_unwind = 0; //@line 18343
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 18344
     $611 = $ReallocAsyncCtx8 + 4 | 0; //@line 18345
     HEAP32[$611 >> 2] = $2; //@line 18346
     $612 = $ReallocAsyncCtx8 + 8 | 0; //@line 18347
     HEAP32[$612 >> 2] = $140; //@line 18348
     $613 = $ReallocAsyncCtx8 + 12 | 0; //@line 18349
     HEAP32[$613 >> 2] = $4; //@line 18350
     $614 = $ReallocAsyncCtx8 + 16 | 0; //@line 18351
     HEAP32[$614 >> 2] = $6; //@line 18352
     $615 = $ReallocAsyncCtx8 + 20 | 0; //@line 18353
     HEAP32[$615 >> 2] = $8; //@line 18354
     $616 = $ReallocAsyncCtx8 + 24 | 0; //@line 18355
     HEAP32[$616 >> 2] = $10; //@line 18356
     $617 = $ReallocAsyncCtx8 + 28 | 0; //@line 18357
     HEAP32[$617 >> 2] = $12; //@line 18358
     $618 = $ReallocAsyncCtx8 + 32 | 0; //@line 18359
     HEAP32[$618 >> 2] = $14; //@line 18360
     $619 = $ReallocAsyncCtx8 + 36 | 0; //@line 18361
     HEAP32[$619 >> 2] = $20; //@line 18362
     $620 = $ReallocAsyncCtx8 + 40 | 0; //@line 18363
     HEAP32[$620 >> 2] = $22; //@line 18364
     $621 = $ReallocAsyncCtx8 + 44 | 0; //@line 18365
     HEAP32[$621 >> 2] = $141; //@line 18366
     $622 = $ReallocAsyncCtx8 + 48 | 0; //@line 18367
     HEAP32[$622 >> 2] = $24; //@line 18368
     $623 = $ReallocAsyncCtx8 + 52 | 0; //@line 18369
     HEAP32[$623 >> 2] = $26; //@line 18370
     $624 = $ReallocAsyncCtx8 + 56 | 0; //@line 18371
     HEAP32[$624 >> 2] = $28; //@line 18372
     $625 = $ReallocAsyncCtx8 + 60 | 0; //@line 18373
     HEAP32[$625 >> 2] = $32; //@line 18374
     $626 = $ReallocAsyncCtx8 + 64 | 0; //@line 18375
     HEAP32[$626 >> 2] = $34; //@line 18376
     $627 = $ReallocAsyncCtx8 + 68 | 0; //@line 18377
     HEAP32[$627 >> 2] = $36; //@line 18378
     $628 = $ReallocAsyncCtx8 + 72 | 0; //@line 18379
     HEAP32[$628 >> 2] = $38; //@line 18380
     $629 = $ReallocAsyncCtx8 + 76 | 0; //@line 18381
     HEAP32[$629 >> 2] = $40; //@line 18382
     $630 = $ReallocAsyncCtx8 + 80 | 0; //@line 18383
     HEAP32[$630 >> 2] = $42; //@line 18384
     $631 = $ReallocAsyncCtx8 + 84 | 0; //@line 18385
     HEAP32[$631 >> 2] = $44; //@line 18386
     $632 = $ReallocAsyncCtx8 + 88 | 0; //@line 18387
     HEAP32[$632 >> 2] = $46; //@line 18388
     $633 = $ReallocAsyncCtx8 + 92 | 0; //@line 18389
     HEAP32[$633 >> 2] = $48; //@line 18390
     $634 = $ReallocAsyncCtx8 + 96 | 0; //@line 18391
     HEAP32[$634 >> 2] = $50; //@line 18392
     $635 = $ReallocAsyncCtx8 + 100 | 0; //@line 18393
     HEAP32[$635 >> 2] = $52; //@line 18394
     $636 = $ReallocAsyncCtx8 + 104 | 0; //@line 18395
     HEAP32[$636 >> 2] = $54; //@line 18396
     $637 = $ReallocAsyncCtx8 + 108 | 0; //@line 18397
     HEAP32[$637 >> 2] = $58; //@line 18398
     $638 = $ReallocAsyncCtx8 + 112 | 0; //@line 18399
     HEAP32[$638 >> 2] = $60; //@line 18400
     $639 = $ReallocAsyncCtx8 + 116 | 0; //@line 18401
     HEAP32[$639 >> 2] = $62; //@line 18402
     $640 = $ReallocAsyncCtx8 + 120 | 0; //@line 18403
     HEAP32[$640 >> 2] = $64; //@line 18404
     $641 = $ReallocAsyncCtx8 + 124 | 0; //@line 18405
     HEAP32[$641 >> 2] = $$0208$i; //@line 18406
     $642 = $ReallocAsyncCtx8 + 128 | 0; //@line 18407
     HEAP32[$642 >> 2] = $66; //@line 18408
     $643 = $ReallocAsyncCtx8 + 132 | 0; //@line 18409
     HEAP32[$643 >> 2] = $68; //@line 18410
     $644 = $ReallocAsyncCtx8 + 136 | 0; //@line 18411
     HEAP32[$644 >> 2] = $38; //@line 18412
     $645 = $ReallocAsyncCtx8 + 140 | 0; //@line 18413
     HEAP32[$645 >> 2] = $70; //@line 18414
     $646 = $ReallocAsyncCtx8 + 144 | 0; //@line 18415
     HEAP32[$646 >> 2] = $72; //@line 18416
     $647 = $ReallocAsyncCtx8 + 148 | 0; //@line 18417
     HEAP32[$647 >> 2] = $74; //@line 18418
     $648 = $ReallocAsyncCtx8 + 152 | 0; //@line 18419
     HEAP32[$648 >> 2] = $76; //@line 18420
     $649 = $ReallocAsyncCtx8 + 156 | 0; //@line 18421
     HEAP32[$649 >> 2] = $78; //@line 18422
     $650 = $ReallocAsyncCtx8 + 160 | 0; //@line 18423
     HEAP32[$650 >> 2] = $135; //@line 18424
     $651 = $ReallocAsyncCtx8 + 164 | 0; //@line 18425
     HEAP32[$651 >> 2] = $80; //@line 18426
     $652 = $ReallocAsyncCtx8 + 168 | 0; //@line 18427
     HEAP32[$652 >> 2] = $82; //@line 18428
     $653 = $ReallocAsyncCtx8 + 172 | 0; //@line 18429
     HEAP32[$653 >> 2] = $84; //@line 18430
     $654 = $ReallocAsyncCtx8 + 176 | 0; //@line 18431
     HEAP32[$654 >> 2] = $86; //@line 18432
     $655 = $ReallocAsyncCtx8 + 180 | 0; //@line 18433
     HEAP32[$655 >> 2] = $88; //@line 18434
     $656 = $ReallocAsyncCtx8 + 184 | 0; //@line 18435
     HEAP32[$656 >> 2] = $136; //@line 18436
     $657 = $ReallocAsyncCtx8 + 188 | 0; //@line 18437
     HEAP32[$657 >> 2] = $92; //@line 18438
     $658 = $ReallocAsyncCtx8 + 192 | 0; //@line 18439
     HEAP32[$658 >> 2] = $94; //@line 18440
     $659 = $ReallocAsyncCtx8 + 196 | 0; //@line 18441
     HEAP32[$659 >> 2] = $96; //@line 18442
     $660 = $ReallocAsyncCtx8 + 200 | 0; //@line 18443
     HEAP32[$660 >> 2] = $137; //@line 18444
     $661 = $ReallocAsyncCtx8 + 204 | 0; //@line 18445
     HEAP32[$661 >> 2] = $100; //@line 18446
     $662 = $ReallocAsyncCtx8 + 208 | 0; //@line 18447
     HEAP32[$662 >> 2] = $102; //@line 18448
     $663 = $ReallocAsyncCtx8 + 212 | 0; //@line 18449
     HEAP32[$663 >> 2] = $104; //@line 18450
     $664 = $ReallocAsyncCtx8 + 216 | 0; //@line 18451
     HEAP32[$664 >> 2] = $106; //@line 18452
     $665 = $ReallocAsyncCtx8 + 220 | 0; //@line 18453
     HEAP32[$665 >> 2] = $108; //@line 18454
     $666 = $ReallocAsyncCtx8 + 224 | 0; //@line 18455
     HEAP32[$666 >> 2] = $110; //@line 18456
     $667 = $ReallocAsyncCtx8 + 228 | 0; //@line 18457
     HEAP32[$667 >> 2] = $112; //@line 18458
     $668 = $ReallocAsyncCtx8 + 232 | 0; //@line 18459
     HEAP32[$668 >> 2] = $114; //@line 18460
     $669 = $ReallocAsyncCtx8 + 236 | 0; //@line 18461
     HEAP32[$669 >> 2] = $116; //@line 18462
     $670 = $ReallocAsyncCtx8 + 240 | 0; //@line 18463
     HEAP32[$670 >> 2] = $118; //@line 18464
     $671 = $ReallocAsyncCtx8 + 244 | 0; //@line 18465
     HEAP32[$671 >> 2] = $120; //@line 18466
     $672 = $ReallocAsyncCtx8 + 248 | 0; //@line 18467
     HEAP32[$672 >> 2] = $122; //@line 18468
     $673 = $ReallocAsyncCtx8 + 252 | 0; //@line 18469
     HEAP32[$673 >> 2] = $139; //@line 18470
     $674 = $ReallocAsyncCtx8 + 256 | 0; //@line 18471
     HEAP32[$674 >> 2] = $124; //@line 18472
     $675 = $ReallocAsyncCtx8 + 260 | 0; //@line 18473
     HEAP32[$675 >> 2] = $139; //@line 18474
     $676 = $ReallocAsyncCtx8 + 264 | 0; //@line 18475
     HEAP32[$676 >> 2] = $126; //@line 18476
     sp = STACKTOP; //@line 18477
     return;
    }
   case 64:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 18482
     $678 = _sn_coap_parser_options_parse_multiple_options($2, $38, $182, $140, $141, 11, $$1202$i) | 0; //@line 18483
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 18486
      $679 = $ReallocAsyncCtx7 + 4 | 0; //@line 18487
      HEAP32[$679 >> 2] = $2; //@line 18488
      $680 = $ReallocAsyncCtx7 + 8 | 0; //@line 18489
      HEAP32[$680 >> 2] = $140; //@line 18490
      $681 = $ReallocAsyncCtx7 + 12 | 0; //@line 18491
      HEAP32[$681 >> 2] = $4; //@line 18492
      $682 = $ReallocAsyncCtx7 + 16 | 0; //@line 18493
      HEAP32[$682 >> 2] = $6; //@line 18494
      $683 = $ReallocAsyncCtx7 + 20 | 0; //@line 18495
      HEAP32[$683 >> 2] = $8; //@line 18496
      $684 = $ReallocAsyncCtx7 + 24 | 0; //@line 18497
      HEAP32[$684 >> 2] = $10; //@line 18498
      $685 = $ReallocAsyncCtx7 + 28 | 0; //@line 18499
      HEAP32[$685 >> 2] = $12; //@line 18500
      $686 = $ReallocAsyncCtx7 + 32 | 0; //@line 18501
      HEAP32[$686 >> 2] = $14; //@line 18502
      $687 = $ReallocAsyncCtx7 + 36 | 0; //@line 18503
      HEAP32[$687 >> 2] = $20; //@line 18504
      $688 = $ReallocAsyncCtx7 + 40 | 0; //@line 18505
      HEAP32[$688 >> 2] = $22; //@line 18506
      $689 = $ReallocAsyncCtx7 + 44 | 0; //@line 18507
      HEAP32[$689 >> 2] = $141; //@line 18508
      $690 = $ReallocAsyncCtx7 + 48 | 0; //@line 18509
      HEAP32[$690 >> 2] = $24; //@line 18510
      $691 = $ReallocAsyncCtx7 + 52 | 0; //@line 18511
      HEAP32[$691 >> 2] = $26; //@line 18512
      $692 = $ReallocAsyncCtx7 + 56 | 0; //@line 18513
      HEAP32[$692 >> 2] = $28; //@line 18514
      $693 = $ReallocAsyncCtx7 + 60 | 0; //@line 18515
      HEAP32[$693 >> 2] = $32; //@line 18516
      $694 = $ReallocAsyncCtx7 + 64 | 0; //@line 18517
      HEAP32[$694 >> 2] = $34; //@line 18518
      $695 = $ReallocAsyncCtx7 + 68 | 0; //@line 18519
      HEAP32[$695 >> 2] = $36; //@line 18520
      $696 = $ReallocAsyncCtx7 + 72 | 0; //@line 18521
      HEAP32[$696 >> 2] = $38; //@line 18522
      $697 = $ReallocAsyncCtx7 + 76 | 0; //@line 18523
      HEAP32[$697 >> 2] = $40; //@line 18524
      $698 = $ReallocAsyncCtx7 + 80 | 0; //@line 18525
      HEAP32[$698 >> 2] = $42; //@line 18526
      $699 = $ReallocAsyncCtx7 + 84 | 0; //@line 18527
      HEAP32[$699 >> 2] = $44; //@line 18528
      $700 = $ReallocAsyncCtx7 + 88 | 0; //@line 18529
      HEAP32[$700 >> 2] = $46; //@line 18530
      $701 = $ReallocAsyncCtx7 + 92 | 0; //@line 18531
      HEAP32[$701 >> 2] = $48; //@line 18532
      $702 = $ReallocAsyncCtx7 + 96 | 0; //@line 18533
      HEAP32[$702 >> 2] = $50; //@line 18534
      $703 = $ReallocAsyncCtx7 + 100 | 0; //@line 18535
      HEAP32[$703 >> 2] = $52; //@line 18536
      $704 = $ReallocAsyncCtx7 + 104 | 0; //@line 18537
      HEAP32[$704 >> 2] = $54; //@line 18538
      $705 = $ReallocAsyncCtx7 + 108 | 0; //@line 18539
      HEAP32[$705 >> 2] = $58; //@line 18540
      $706 = $ReallocAsyncCtx7 + 112 | 0; //@line 18541
      HEAP32[$706 >> 2] = $60; //@line 18542
      $707 = $ReallocAsyncCtx7 + 116 | 0; //@line 18543
      HEAP32[$707 >> 2] = $62; //@line 18544
      $708 = $ReallocAsyncCtx7 + 120 | 0; //@line 18545
      HEAP32[$708 >> 2] = $64; //@line 18546
      $709 = $ReallocAsyncCtx7 + 124 | 0; //@line 18547
      HEAP32[$709 >> 2] = $$0208$i; //@line 18548
      $710 = $ReallocAsyncCtx7 + 128 | 0; //@line 18549
      HEAP32[$710 >> 2] = $66; //@line 18550
      $711 = $ReallocAsyncCtx7 + 132 | 0; //@line 18551
      HEAP32[$711 >> 2] = $68; //@line 18552
      $712 = $ReallocAsyncCtx7 + 136 | 0; //@line 18553
      HEAP32[$712 >> 2] = $38; //@line 18554
      $713 = $ReallocAsyncCtx7 + 140 | 0; //@line 18555
      HEAP32[$713 >> 2] = $70; //@line 18556
      $714 = $ReallocAsyncCtx7 + 144 | 0; //@line 18557
      HEAP32[$714 >> 2] = $72; //@line 18558
      $715 = $ReallocAsyncCtx7 + 148 | 0; //@line 18559
      HEAP32[$715 >> 2] = $74; //@line 18560
      $716 = $ReallocAsyncCtx7 + 152 | 0; //@line 18561
      HEAP32[$716 >> 2] = $76; //@line 18562
      $717 = $ReallocAsyncCtx7 + 156 | 0; //@line 18563
      HEAP32[$717 >> 2] = $78; //@line 18564
      $718 = $ReallocAsyncCtx7 + 160 | 0; //@line 18565
      HEAP32[$718 >> 2] = $135; //@line 18566
      $719 = $ReallocAsyncCtx7 + 164 | 0; //@line 18567
      HEAP32[$719 >> 2] = $80; //@line 18568
      $720 = $ReallocAsyncCtx7 + 168 | 0; //@line 18569
      HEAP32[$720 >> 2] = $82; //@line 18570
      $721 = $ReallocAsyncCtx7 + 172 | 0; //@line 18571
      HEAP32[$721 >> 2] = $84; //@line 18572
      $722 = $ReallocAsyncCtx7 + 176 | 0; //@line 18573
      HEAP32[$722 >> 2] = $86; //@line 18574
      $723 = $ReallocAsyncCtx7 + 180 | 0; //@line 18575
      HEAP32[$723 >> 2] = $88; //@line 18576
      $724 = $ReallocAsyncCtx7 + 184 | 0; //@line 18577
      HEAP32[$724 >> 2] = $136; //@line 18578
      $725 = $ReallocAsyncCtx7 + 188 | 0; //@line 18579
      HEAP32[$725 >> 2] = $92; //@line 18580
      $726 = $ReallocAsyncCtx7 + 192 | 0; //@line 18581
      HEAP32[$726 >> 2] = $94; //@line 18582
      $727 = $ReallocAsyncCtx7 + 196 | 0; //@line 18583
      HEAP32[$727 >> 2] = $96; //@line 18584
      $728 = $ReallocAsyncCtx7 + 200 | 0; //@line 18585
      HEAP32[$728 >> 2] = $137; //@line 18586
      $729 = $ReallocAsyncCtx7 + 204 | 0; //@line 18587
      HEAP32[$729 >> 2] = $100; //@line 18588
      $730 = $ReallocAsyncCtx7 + 208 | 0; //@line 18589
      HEAP32[$730 >> 2] = $102; //@line 18590
      $731 = $ReallocAsyncCtx7 + 212 | 0; //@line 18591
      HEAP32[$731 >> 2] = $104; //@line 18592
      $732 = $ReallocAsyncCtx7 + 216 | 0; //@line 18593
      HEAP32[$732 >> 2] = $106; //@line 18594
      $733 = $ReallocAsyncCtx7 + 220 | 0; //@line 18595
      HEAP32[$733 >> 2] = $108; //@line 18596
      $734 = $ReallocAsyncCtx7 + 224 | 0; //@line 18597
      HEAP32[$734 >> 2] = $110; //@line 18598
      $735 = $ReallocAsyncCtx7 + 228 | 0; //@line 18599
      HEAP32[$735 >> 2] = $112; //@line 18600
      $736 = $ReallocAsyncCtx7 + 232 | 0; //@line 18601
      HEAP32[$736 >> 2] = $114; //@line 18602
      $737 = $ReallocAsyncCtx7 + 236 | 0; //@line 18603
      HEAP32[$737 >> 2] = $116; //@line 18604
      $738 = $ReallocAsyncCtx7 + 240 | 0; //@line 18605
      HEAP32[$738 >> 2] = $118; //@line 18606
      $739 = $ReallocAsyncCtx7 + 244 | 0; //@line 18607
      HEAP32[$739 >> 2] = $120; //@line 18608
      $740 = $ReallocAsyncCtx7 + 248 | 0; //@line 18609
      HEAP32[$740 >> 2] = $122; //@line 18610
      $741 = $ReallocAsyncCtx7 + 252 | 0; //@line 18611
      HEAP32[$741 >> 2] = $139; //@line 18612
      $742 = $ReallocAsyncCtx7 + 256 | 0; //@line 18613
      HEAP32[$742 >> 2] = $124; //@line 18614
      $743 = $ReallocAsyncCtx7 + 260 | 0; //@line 18615
      HEAP32[$743 >> 2] = $139; //@line 18616
      $744 = $ReallocAsyncCtx7 + 264 | 0; //@line 18617
      HEAP32[$744 >> 2] = $126; //@line 18618
      sp = STACKTOP; //@line 18619
      return;
     }
     HEAP8[___async_retval >> 0] = $678; //@line 18623
     ___async_unwind = 0; //@line 18624
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 18625
     $679 = $ReallocAsyncCtx7 + 4 | 0; //@line 18626
     HEAP32[$679 >> 2] = $2; //@line 18627
     $680 = $ReallocAsyncCtx7 + 8 | 0; //@line 18628
     HEAP32[$680 >> 2] = $140; //@line 18629
     $681 = $ReallocAsyncCtx7 + 12 | 0; //@line 18630
     HEAP32[$681 >> 2] = $4; //@line 18631
     $682 = $ReallocAsyncCtx7 + 16 | 0; //@line 18632
     HEAP32[$682 >> 2] = $6; //@line 18633
     $683 = $ReallocAsyncCtx7 + 20 | 0; //@line 18634
     HEAP32[$683 >> 2] = $8; //@line 18635
     $684 = $ReallocAsyncCtx7 + 24 | 0; //@line 18636
     HEAP32[$684 >> 2] = $10; //@line 18637
     $685 = $ReallocAsyncCtx7 + 28 | 0; //@line 18638
     HEAP32[$685 >> 2] = $12; //@line 18639
     $686 = $ReallocAsyncCtx7 + 32 | 0; //@line 18640
     HEAP32[$686 >> 2] = $14; //@line 18641
     $687 = $ReallocAsyncCtx7 + 36 | 0; //@line 18642
     HEAP32[$687 >> 2] = $20; //@line 18643
     $688 = $ReallocAsyncCtx7 + 40 | 0; //@line 18644
     HEAP32[$688 >> 2] = $22; //@line 18645
     $689 = $ReallocAsyncCtx7 + 44 | 0; //@line 18646
     HEAP32[$689 >> 2] = $141; //@line 18647
     $690 = $ReallocAsyncCtx7 + 48 | 0; //@line 18648
     HEAP32[$690 >> 2] = $24; //@line 18649
     $691 = $ReallocAsyncCtx7 + 52 | 0; //@line 18650
     HEAP32[$691 >> 2] = $26; //@line 18651
     $692 = $ReallocAsyncCtx7 + 56 | 0; //@line 18652
     HEAP32[$692 >> 2] = $28; //@line 18653
     $693 = $ReallocAsyncCtx7 + 60 | 0; //@line 18654
     HEAP32[$693 >> 2] = $32; //@line 18655
     $694 = $ReallocAsyncCtx7 + 64 | 0; //@line 18656
     HEAP32[$694 >> 2] = $34; //@line 18657
     $695 = $ReallocAsyncCtx7 + 68 | 0; //@line 18658
     HEAP32[$695 >> 2] = $36; //@line 18659
     $696 = $ReallocAsyncCtx7 + 72 | 0; //@line 18660
     HEAP32[$696 >> 2] = $38; //@line 18661
     $697 = $ReallocAsyncCtx7 + 76 | 0; //@line 18662
     HEAP32[$697 >> 2] = $40; //@line 18663
     $698 = $ReallocAsyncCtx7 + 80 | 0; //@line 18664
     HEAP32[$698 >> 2] = $42; //@line 18665
     $699 = $ReallocAsyncCtx7 + 84 | 0; //@line 18666
     HEAP32[$699 >> 2] = $44; //@line 18667
     $700 = $ReallocAsyncCtx7 + 88 | 0; //@line 18668
     HEAP32[$700 >> 2] = $46; //@line 18669
     $701 = $ReallocAsyncCtx7 + 92 | 0; //@line 18670
     HEAP32[$701 >> 2] = $48; //@line 18671
     $702 = $ReallocAsyncCtx7 + 96 | 0; //@line 18672
     HEAP32[$702 >> 2] = $50; //@line 18673
     $703 = $ReallocAsyncCtx7 + 100 | 0; //@line 18674
     HEAP32[$703 >> 2] = $52; //@line 18675
     $704 = $ReallocAsyncCtx7 + 104 | 0; //@line 18676
     HEAP32[$704 >> 2] = $54; //@line 18677
     $705 = $ReallocAsyncCtx7 + 108 | 0; //@line 18678
     HEAP32[$705 >> 2] = $58; //@line 18679
     $706 = $ReallocAsyncCtx7 + 112 | 0; //@line 18680
     HEAP32[$706 >> 2] = $60; //@line 18681
     $707 = $ReallocAsyncCtx7 + 116 | 0; //@line 18682
     HEAP32[$707 >> 2] = $62; //@line 18683
     $708 = $ReallocAsyncCtx7 + 120 | 0; //@line 18684
     HEAP32[$708 >> 2] = $64; //@line 18685
     $709 = $ReallocAsyncCtx7 + 124 | 0; //@line 18686
     HEAP32[$709 >> 2] = $$0208$i; //@line 18687
     $710 = $ReallocAsyncCtx7 + 128 | 0; //@line 18688
     HEAP32[$710 >> 2] = $66; //@line 18689
     $711 = $ReallocAsyncCtx7 + 132 | 0; //@line 18690
     HEAP32[$711 >> 2] = $68; //@line 18691
     $712 = $ReallocAsyncCtx7 + 136 | 0; //@line 18692
     HEAP32[$712 >> 2] = $38; //@line 18693
     $713 = $ReallocAsyncCtx7 + 140 | 0; //@line 18694
     HEAP32[$713 >> 2] = $70; //@line 18695
     $714 = $ReallocAsyncCtx7 + 144 | 0; //@line 18696
     HEAP32[$714 >> 2] = $72; //@line 18697
     $715 = $ReallocAsyncCtx7 + 148 | 0; //@line 18698
     HEAP32[$715 >> 2] = $74; //@line 18699
     $716 = $ReallocAsyncCtx7 + 152 | 0; //@line 18700
     HEAP32[$716 >> 2] = $76; //@line 18701
     $717 = $ReallocAsyncCtx7 + 156 | 0; //@line 18702
     HEAP32[$717 >> 2] = $78; //@line 18703
     $718 = $ReallocAsyncCtx7 + 160 | 0; //@line 18704
     HEAP32[$718 >> 2] = $135; //@line 18705
     $719 = $ReallocAsyncCtx7 + 164 | 0; //@line 18706
     HEAP32[$719 >> 2] = $80; //@line 18707
     $720 = $ReallocAsyncCtx7 + 168 | 0; //@line 18708
     HEAP32[$720 >> 2] = $82; //@line 18709
     $721 = $ReallocAsyncCtx7 + 172 | 0; //@line 18710
     HEAP32[$721 >> 2] = $84; //@line 18711
     $722 = $ReallocAsyncCtx7 + 176 | 0; //@line 18712
     HEAP32[$722 >> 2] = $86; //@line 18713
     $723 = $ReallocAsyncCtx7 + 180 | 0; //@line 18714
     HEAP32[$723 >> 2] = $88; //@line 18715
     $724 = $ReallocAsyncCtx7 + 184 | 0; //@line 18716
     HEAP32[$724 >> 2] = $136; //@line 18717
     $725 = $ReallocAsyncCtx7 + 188 | 0; //@line 18718
     HEAP32[$725 >> 2] = $92; //@line 18719
     $726 = $ReallocAsyncCtx7 + 192 | 0; //@line 18720
     HEAP32[$726 >> 2] = $94; //@line 18721
     $727 = $ReallocAsyncCtx7 + 196 | 0; //@line 18722
     HEAP32[$727 >> 2] = $96; //@line 18723
     $728 = $ReallocAsyncCtx7 + 200 | 0; //@line 18724
     HEAP32[$728 >> 2] = $137; //@line 18725
     $729 = $ReallocAsyncCtx7 + 204 | 0; //@line 18726
     HEAP32[$729 >> 2] = $100; //@line 18727
     $730 = $ReallocAsyncCtx7 + 208 | 0; //@line 18728
     HEAP32[$730 >> 2] = $102; //@line 18729
     $731 = $ReallocAsyncCtx7 + 212 | 0; //@line 18730
     HEAP32[$731 >> 2] = $104; //@line 18731
     $732 = $ReallocAsyncCtx7 + 216 | 0; //@line 18732
     HEAP32[$732 >> 2] = $106; //@line 18733
     $733 = $ReallocAsyncCtx7 + 220 | 0; //@line 18734
     HEAP32[$733 >> 2] = $108; //@line 18735
     $734 = $ReallocAsyncCtx7 + 224 | 0; //@line 18736
     HEAP32[$734 >> 2] = $110; //@line 18737
     $735 = $ReallocAsyncCtx7 + 228 | 0; //@line 18738
     HEAP32[$735 >> 2] = $112; //@line 18739
     $736 = $ReallocAsyncCtx7 + 232 | 0; //@line 18740
     HEAP32[$736 >> 2] = $114; //@line 18741
     $737 = $ReallocAsyncCtx7 + 236 | 0; //@line 18742
     HEAP32[$737 >> 2] = $116; //@line 18743
     $738 = $ReallocAsyncCtx7 + 240 | 0; //@line 18744
     HEAP32[$738 >> 2] = $118; //@line 18745
     $739 = $ReallocAsyncCtx7 + 244 | 0; //@line 18746
     HEAP32[$739 >> 2] = $120; //@line 18747
     $740 = $ReallocAsyncCtx7 + 248 | 0; //@line 18748
     HEAP32[$740 >> 2] = $122; //@line 18749
     $741 = $ReallocAsyncCtx7 + 252 | 0; //@line 18750
     HEAP32[$741 >> 2] = $139; //@line 18751
     $742 = $ReallocAsyncCtx7 + 256 | 0; //@line 18752
     HEAP32[$742 >> 2] = $124; //@line 18753
     $743 = $ReallocAsyncCtx7 + 260 | 0; //@line 18754
     HEAP32[$743 >> 2] = $139; //@line 18755
     $744 = $ReallocAsyncCtx7 + 264 | 0; //@line 18756
     HEAP32[$744 >> 2] = $126; //@line 18757
     sp = STACKTOP; //@line 18758
     return;
    }
   case 69:
    {
     _mbed_tracef(2, 3803, 5026, $50); //@line 18763
     break L2;
     break;
    }
   case 73:
    {
     $762 = HEAP32[$139 >> 2] | 0; //@line 18768
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 18771
     $765 = _sn_coap_parser_options_parse_multiple_options($2, $38, $182, $762 + 64 | 0, $762 + 10 | 0, 15, $$1202$i) | 0; //@line 18772
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 18775
      $766 = $ReallocAsyncCtx6 + 4 | 0; //@line 18776
      HEAP32[$766 >> 2] = $2; //@line 18777
      $767 = $ReallocAsyncCtx6 + 8 | 0; //@line 18778
      HEAP32[$767 >> 2] = $140; //@line 18779
      $768 = $ReallocAsyncCtx6 + 12 | 0; //@line 18780
      HEAP32[$768 >> 2] = $4; //@line 18781
      $769 = $ReallocAsyncCtx6 + 16 | 0; //@line 18782
      HEAP32[$769 >> 2] = $6; //@line 18783
      $770 = $ReallocAsyncCtx6 + 20 | 0; //@line 18784
      HEAP32[$770 >> 2] = $8; //@line 18785
      $771 = $ReallocAsyncCtx6 + 24 | 0; //@line 18786
      HEAP32[$771 >> 2] = $10; //@line 18787
      $772 = $ReallocAsyncCtx6 + 28 | 0; //@line 18788
      HEAP32[$772 >> 2] = $12; //@line 18789
      $773 = $ReallocAsyncCtx6 + 32 | 0; //@line 18790
      HEAP32[$773 >> 2] = $14; //@line 18791
      $774 = $ReallocAsyncCtx6 + 36 | 0; //@line 18792
      HEAP32[$774 >> 2] = $20; //@line 18793
      $775 = $ReallocAsyncCtx6 + 40 | 0; //@line 18794
      HEAP32[$775 >> 2] = $22; //@line 18795
      $776 = $ReallocAsyncCtx6 + 44 | 0; //@line 18796
      HEAP32[$776 >> 2] = $141; //@line 18797
      $777 = $ReallocAsyncCtx6 + 48 | 0; //@line 18798
      HEAP32[$777 >> 2] = $24; //@line 18799
      $778 = $ReallocAsyncCtx6 + 52 | 0; //@line 18800
      HEAP32[$778 >> 2] = $26; //@line 18801
      $779 = $ReallocAsyncCtx6 + 56 | 0; //@line 18802
      HEAP32[$779 >> 2] = $28; //@line 18803
      $780 = $ReallocAsyncCtx6 + 60 | 0; //@line 18804
      HEAP32[$780 >> 2] = $32; //@line 18805
      $781 = $ReallocAsyncCtx6 + 64 | 0; //@line 18806
      HEAP32[$781 >> 2] = $34; //@line 18807
      $782 = $ReallocAsyncCtx6 + 68 | 0; //@line 18808
      HEAP32[$782 >> 2] = $36; //@line 18809
      $783 = $ReallocAsyncCtx6 + 72 | 0; //@line 18810
      HEAP32[$783 >> 2] = $38; //@line 18811
      $784 = $ReallocAsyncCtx6 + 76 | 0; //@line 18812
      HEAP32[$784 >> 2] = $40; //@line 18813
      $785 = $ReallocAsyncCtx6 + 80 | 0; //@line 18814
      HEAP32[$785 >> 2] = $42; //@line 18815
      $786 = $ReallocAsyncCtx6 + 84 | 0; //@line 18816
      HEAP32[$786 >> 2] = $44; //@line 18817
      $787 = $ReallocAsyncCtx6 + 88 | 0; //@line 18818
      HEAP32[$787 >> 2] = $46; //@line 18819
      $788 = $ReallocAsyncCtx6 + 92 | 0; //@line 18820
      HEAP32[$788 >> 2] = $48; //@line 18821
      $789 = $ReallocAsyncCtx6 + 96 | 0; //@line 18822
      HEAP32[$789 >> 2] = $50; //@line 18823
      $790 = $ReallocAsyncCtx6 + 100 | 0; //@line 18824
      HEAP32[$790 >> 2] = $52; //@line 18825
      $791 = $ReallocAsyncCtx6 + 104 | 0; //@line 18826
      HEAP32[$791 >> 2] = $54; //@line 18827
      $792 = $ReallocAsyncCtx6 + 108 | 0; //@line 18828
      HEAP32[$792 >> 2] = $58; //@line 18829
      $793 = $ReallocAsyncCtx6 + 112 | 0; //@line 18830
      HEAP32[$793 >> 2] = $60; //@line 18831
      $794 = $ReallocAsyncCtx6 + 116 | 0; //@line 18832
      HEAP32[$794 >> 2] = $62; //@line 18833
      $795 = $ReallocAsyncCtx6 + 120 | 0; //@line 18834
      HEAP32[$795 >> 2] = $64; //@line 18835
      $796 = $ReallocAsyncCtx6 + 124 | 0; //@line 18836
      HEAP32[$796 >> 2] = $$0208$i; //@line 18837
      $797 = $ReallocAsyncCtx6 + 128 | 0; //@line 18838
      HEAP32[$797 >> 2] = $66; //@line 18839
      $798 = $ReallocAsyncCtx6 + 132 | 0; //@line 18840
      HEAP32[$798 >> 2] = $68; //@line 18841
      $799 = $ReallocAsyncCtx6 + 136 | 0; //@line 18842
      HEAP32[$799 >> 2] = $38; //@line 18843
      $800 = $ReallocAsyncCtx6 + 140 | 0; //@line 18844
      HEAP32[$800 >> 2] = $70; //@line 18845
      $801 = $ReallocAsyncCtx6 + 144 | 0; //@line 18846
      HEAP32[$801 >> 2] = $72; //@line 18847
      $802 = $ReallocAsyncCtx6 + 148 | 0; //@line 18848
      HEAP32[$802 >> 2] = $74; //@line 18849
      $803 = $ReallocAsyncCtx6 + 152 | 0; //@line 18850
      HEAP32[$803 >> 2] = $76; //@line 18851
      $804 = $ReallocAsyncCtx6 + 156 | 0; //@line 18852
      HEAP32[$804 >> 2] = $78; //@line 18853
      $805 = $ReallocAsyncCtx6 + 160 | 0; //@line 18854
      HEAP32[$805 >> 2] = $135; //@line 18855
      $806 = $ReallocAsyncCtx6 + 164 | 0; //@line 18856
      HEAP32[$806 >> 2] = $80; //@line 18857
      $807 = $ReallocAsyncCtx6 + 168 | 0; //@line 18858
      HEAP32[$807 >> 2] = $82; //@line 18859
      $808 = $ReallocAsyncCtx6 + 172 | 0; //@line 18860
      HEAP32[$808 >> 2] = $84; //@line 18861
      $809 = $ReallocAsyncCtx6 + 176 | 0; //@line 18862
      HEAP32[$809 >> 2] = $86; //@line 18863
      $810 = $ReallocAsyncCtx6 + 180 | 0; //@line 18864
      HEAP32[$810 >> 2] = $88; //@line 18865
      $811 = $ReallocAsyncCtx6 + 184 | 0; //@line 18866
      HEAP32[$811 >> 2] = $136; //@line 18867
      $812 = $ReallocAsyncCtx6 + 188 | 0; //@line 18868
      HEAP32[$812 >> 2] = $92; //@line 18869
      $813 = $ReallocAsyncCtx6 + 192 | 0; //@line 18870
      HEAP32[$813 >> 2] = $94; //@line 18871
      $814 = $ReallocAsyncCtx6 + 196 | 0; //@line 18872
      HEAP32[$814 >> 2] = $96; //@line 18873
      $815 = $ReallocAsyncCtx6 + 200 | 0; //@line 18874
      HEAP32[$815 >> 2] = $137; //@line 18875
      $816 = $ReallocAsyncCtx6 + 204 | 0; //@line 18876
      HEAP32[$816 >> 2] = $100; //@line 18877
      $817 = $ReallocAsyncCtx6 + 208 | 0; //@line 18878
      HEAP32[$817 >> 2] = $102; //@line 18879
      $818 = $ReallocAsyncCtx6 + 212 | 0; //@line 18880
      HEAP32[$818 >> 2] = $104; //@line 18881
      $819 = $ReallocAsyncCtx6 + 216 | 0; //@line 18882
      HEAP32[$819 >> 2] = $106; //@line 18883
      $820 = $ReallocAsyncCtx6 + 220 | 0; //@line 18884
      HEAP32[$820 >> 2] = $108; //@line 18885
      $821 = $ReallocAsyncCtx6 + 224 | 0; //@line 18886
      HEAP32[$821 >> 2] = $110; //@line 18887
      $822 = $ReallocAsyncCtx6 + 228 | 0; //@line 18888
      HEAP32[$822 >> 2] = $112; //@line 18889
      $823 = $ReallocAsyncCtx6 + 232 | 0; //@line 18890
      HEAP32[$823 >> 2] = $114; //@line 18891
      $824 = $ReallocAsyncCtx6 + 236 | 0; //@line 18892
      HEAP32[$824 >> 2] = $116; //@line 18893
      $825 = $ReallocAsyncCtx6 + 240 | 0; //@line 18894
      HEAP32[$825 >> 2] = $118; //@line 18895
      $826 = $ReallocAsyncCtx6 + 244 | 0; //@line 18896
      HEAP32[$826 >> 2] = $120; //@line 18897
      $827 = $ReallocAsyncCtx6 + 248 | 0; //@line 18898
      HEAP32[$827 >> 2] = $122; //@line 18899
      $828 = $ReallocAsyncCtx6 + 252 | 0; //@line 18900
      HEAP32[$828 >> 2] = $139; //@line 18901
      $829 = $ReallocAsyncCtx6 + 256 | 0; //@line 18902
      HEAP32[$829 >> 2] = $124; //@line 18903
      $830 = $ReallocAsyncCtx6 + 260 | 0; //@line 18904
      HEAP32[$830 >> 2] = $139; //@line 18905
      $831 = $ReallocAsyncCtx6 + 264 | 0; //@line 18906
      HEAP32[$831 >> 2] = $126; //@line 18907
      sp = STACKTOP; //@line 18908
      return;
     }
     HEAP8[___async_retval >> 0] = $765; //@line 18912
     ___async_unwind = 0; //@line 18913
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 18914
     $766 = $ReallocAsyncCtx6 + 4 | 0; //@line 18915
     HEAP32[$766 >> 2] = $2; //@line 18916
     $767 = $ReallocAsyncCtx6 + 8 | 0; //@line 18917
     HEAP32[$767 >> 2] = $140; //@line 18918
     $768 = $ReallocAsyncCtx6 + 12 | 0; //@line 18919
     HEAP32[$768 >> 2] = $4; //@line 18920
     $769 = $ReallocAsyncCtx6 + 16 | 0; //@line 18921
     HEAP32[$769 >> 2] = $6; //@line 18922
     $770 = $ReallocAsyncCtx6 + 20 | 0; //@line 18923
     HEAP32[$770 >> 2] = $8; //@line 18924
     $771 = $ReallocAsyncCtx6 + 24 | 0; //@line 18925
     HEAP32[$771 >> 2] = $10; //@line 18926
     $772 = $ReallocAsyncCtx6 + 28 | 0; //@line 18927
     HEAP32[$772 >> 2] = $12; //@line 18928
     $773 = $ReallocAsyncCtx6 + 32 | 0; //@line 18929
     HEAP32[$773 >> 2] = $14; //@line 18930
     $774 = $ReallocAsyncCtx6 + 36 | 0; //@line 18931
     HEAP32[$774 >> 2] = $20; //@line 18932
     $775 = $ReallocAsyncCtx6 + 40 | 0; //@line 18933
     HEAP32[$775 >> 2] = $22; //@line 18934
     $776 = $ReallocAsyncCtx6 + 44 | 0; //@line 18935
     HEAP32[$776 >> 2] = $141; //@line 18936
     $777 = $ReallocAsyncCtx6 + 48 | 0; //@line 18937
     HEAP32[$777 >> 2] = $24; //@line 18938
     $778 = $ReallocAsyncCtx6 + 52 | 0; //@line 18939
     HEAP32[$778 >> 2] = $26; //@line 18940
     $779 = $ReallocAsyncCtx6 + 56 | 0; //@line 18941
     HEAP32[$779 >> 2] = $28; //@line 18942
     $780 = $ReallocAsyncCtx6 + 60 | 0; //@line 18943
     HEAP32[$780 >> 2] = $32; //@line 18944
     $781 = $ReallocAsyncCtx6 + 64 | 0; //@line 18945
     HEAP32[$781 >> 2] = $34; //@line 18946
     $782 = $ReallocAsyncCtx6 + 68 | 0; //@line 18947
     HEAP32[$782 >> 2] = $36; //@line 18948
     $783 = $ReallocAsyncCtx6 + 72 | 0; //@line 18949
     HEAP32[$783 >> 2] = $38; //@line 18950
     $784 = $ReallocAsyncCtx6 + 76 | 0; //@line 18951
     HEAP32[$784 >> 2] = $40; //@line 18952
     $785 = $ReallocAsyncCtx6 + 80 | 0; //@line 18953
     HEAP32[$785 >> 2] = $42; //@line 18954
     $786 = $ReallocAsyncCtx6 + 84 | 0; //@line 18955
     HEAP32[$786 >> 2] = $44; //@line 18956
     $787 = $ReallocAsyncCtx6 + 88 | 0; //@line 18957
     HEAP32[$787 >> 2] = $46; //@line 18958
     $788 = $ReallocAsyncCtx6 + 92 | 0; //@line 18959
     HEAP32[$788 >> 2] = $48; //@line 18960
     $789 = $ReallocAsyncCtx6 + 96 | 0; //@line 18961
     HEAP32[$789 >> 2] = $50; //@line 18962
     $790 = $ReallocAsyncCtx6 + 100 | 0; //@line 18963
     HEAP32[$790 >> 2] = $52; //@line 18964
     $791 = $ReallocAsyncCtx6 + 104 | 0; //@line 18965
     HEAP32[$791 >> 2] = $54; //@line 18966
     $792 = $ReallocAsyncCtx6 + 108 | 0; //@line 18967
     HEAP32[$792 >> 2] = $58; //@line 18968
     $793 = $ReallocAsyncCtx6 + 112 | 0; //@line 18969
     HEAP32[$793 >> 2] = $60; //@line 18970
     $794 = $ReallocAsyncCtx6 + 116 | 0; //@line 18971
     HEAP32[$794 >> 2] = $62; //@line 18972
     $795 = $ReallocAsyncCtx6 + 120 | 0; //@line 18973
     HEAP32[$795 >> 2] = $64; //@line 18974
     $796 = $ReallocAsyncCtx6 + 124 | 0; //@line 18975
     HEAP32[$796 >> 2] = $$0208$i; //@line 18976
     $797 = $ReallocAsyncCtx6 + 128 | 0; //@line 18977
     HEAP32[$797 >> 2] = $66; //@line 18978
     $798 = $ReallocAsyncCtx6 + 132 | 0; //@line 18979
     HEAP32[$798 >> 2] = $68; //@line 18980
     $799 = $ReallocAsyncCtx6 + 136 | 0; //@line 18981
     HEAP32[$799 >> 2] = $38; //@line 18982
     $800 = $ReallocAsyncCtx6 + 140 | 0; //@line 18983
     HEAP32[$800 >> 2] = $70; //@line 18984
     $801 = $ReallocAsyncCtx6 + 144 | 0; //@line 18985
     HEAP32[$801 >> 2] = $72; //@line 18986
     $802 = $ReallocAsyncCtx6 + 148 | 0; //@line 18987
     HEAP32[$802 >> 2] = $74; //@line 18988
     $803 = $ReallocAsyncCtx6 + 152 | 0; //@line 18989
     HEAP32[$803 >> 2] = $76; //@line 18990
     $804 = $ReallocAsyncCtx6 + 156 | 0; //@line 18991
     HEAP32[$804 >> 2] = $78; //@line 18992
     $805 = $ReallocAsyncCtx6 + 160 | 0; //@line 18993
     HEAP32[$805 >> 2] = $135; //@line 18994
     $806 = $ReallocAsyncCtx6 + 164 | 0; //@line 18995
     HEAP32[$806 >> 2] = $80; //@line 18996
     $807 = $ReallocAsyncCtx6 + 168 | 0; //@line 18997
     HEAP32[$807 >> 2] = $82; //@line 18998
     $808 = $ReallocAsyncCtx6 + 172 | 0; //@line 18999
     HEAP32[$808 >> 2] = $84; //@line 19000
     $809 = $ReallocAsyncCtx6 + 176 | 0; //@line 19001
     HEAP32[$809 >> 2] = $86; //@line 19002
     $810 = $ReallocAsyncCtx6 + 180 | 0; //@line 19003
     HEAP32[$810 >> 2] = $88; //@line 19004
     $811 = $ReallocAsyncCtx6 + 184 | 0; //@line 19005
     HEAP32[$811 >> 2] = $136; //@line 19006
     $812 = $ReallocAsyncCtx6 + 188 | 0; //@line 19007
     HEAP32[$812 >> 2] = $92; //@line 19008
     $813 = $ReallocAsyncCtx6 + 192 | 0; //@line 19009
     HEAP32[$813 >> 2] = $94; //@line 19010
     $814 = $ReallocAsyncCtx6 + 196 | 0; //@line 19011
     HEAP32[$814 >> 2] = $96; //@line 19012
     $815 = $ReallocAsyncCtx6 + 200 | 0; //@line 19013
     HEAP32[$815 >> 2] = $137; //@line 19014
     $816 = $ReallocAsyncCtx6 + 204 | 0; //@line 19015
     HEAP32[$816 >> 2] = $100; //@line 19016
     $817 = $ReallocAsyncCtx6 + 208 | 0; //@line 19017
     HEAP32[$817 >> 2] = $102; //@line 19018
     $818 = $ReallocAsyncCtx6 + 212 | 0; //@line 19019
     HEAP32[$818 >> 2] = $104; //@line 19020
     $819 = $ReallocAsyncCtx6 + 216 | 0; //@line 19021
     HEAP32[$819 >> 2] = $106; //@line 19022
     $820 = $ReallocAsyncCtx6 + 220 | 0; //@line 19023
     HEAP32[$820 >> 2] = $108; //@line 19024
     $821 = $ReallocAsyncCtx6 + 224 | 0; //@line 19025
     HEAP32[$821 >> 2] = $110; //@line 19026
     $822 = $ReallocAsyncCtx6 + 228 | 0; //@line 19027
     HEAP32[$822 >> 2] = $112; //@line 19028
     $823 = $ReallocAsyncCtx6 + 232 | 0; //@line 19029
     HEAP32[$823 >> 2] = $114; //@line 19030
     $824 = $ReallocAsyncCtx6 + 236 | 0; //@line 19031
     HEAP32[$824 >> 2] = $116; //@line 19032
     $825 = $ReallocAsyncCtx6 + 240 | 0; //@line 19033
     HEAP32[$825 >> 2] = $118; //@line 19034
     $826 = $ReallocAsyncCtx6 + 244 | 0; //@line 19035
     HEAP32[$826 >> 2] = $120; //@line 19036
     $827 = $ReallocAsyncCtx6 + 248 | 0; //@line 19037
     HEAP32[$827 >> 2] = $122; //@line 19038
     $828 = $ReallocAsyncCtx6 + 252 | 0; //@line 19039
     HEAP32[$828 >> 2] = $139; //@line 19040
     $829 = $ReallocAsyncCtx6 + 256 | 0; //@line 19041
     HEAP32[$829 >> 2] = $124; //@line 19042
     $830 = $ReallocAsyncCtx6 + 260 | 0; //@line 19043
     HEAP32[$830 >> 2] = $139; //@line 19044
     $831 = $ReallocAsyncCtx6 + 264 | 0; //@line 19045
     HEAP32[$831 >> 2] = $126; //@line 19046
     sp = STACKTOP; //@line 19047
     return;
    }
   case 78:
    {
     _mbed_tracef(2, 3803, 5152, $48); //@line 19052
     break L2;
     break;
    }
   case 84:
    {
     _mbed_tracef(2, 3803, 5213, $22); //@line 19057
     break L2;
     break;
    }
   case 90:
    {
     _mbed_tracef(2, 3803, 5274, $72); //@line 19062
     break L2;
     break;
    }
   case 96:
    {
     _mbed_tracef(2, 3803, 5335, $64); //@line 19067
     break L2;
     break;
    }
   case 102:
    {
     _mbed_tracef(2, 3803, 5395, $118); //@line 19072
     break L2;
     break;
    }
   case 106:
    {
     _mbed_tracef(2, 3803, 5455, $74); //@line 19077
     break L2;
     break;
    }
   case 109:
    {
     if (($144 - $136 | 0) >= ($135 | 0)) {
      $944 = ___async_retval; //@line 19086
      HEAP32[$944 >> 2] = $40; //@line 19087
      return;
     }
     if ((HEAP8[$144 >> 0] | 0) == -1) {
      $934 = $144 + 1 | 0; //@line 19093
      HEAP32[$38 >> 2] = $934; //@line 19094
      $935 = $934; //@line 19095
      $937 = $136 - $935 + $135 | 0; //@line 19097
      HEAP16[$80 + 24 >> 1] = $937; //@line 19100
      if ($937 & 65535 | 0) {
       HEAP32[$80 + 36 >> 2] = $935; //@line 19105
       $944 = ___async_retval; //@line 19106
       HEAP32[$944 >> 2] = $40; //@line 19107
       return;
      }
     } else {
      _mbed_tracef(2, 3803, 5502, $52); //@line 19111
     }
     HEAP32[$80 + 4 >> 2] = 1; //@line 19114
     $944 = ___async_retval; //@line 19115
     HEAP32[$944 >> 2] = $40; //@line 19116
     return;
    }
   }
  }
 } while (0);
 HEAP32[$80 + 4 >> 2] = 1; //@line 19124
 $944 = ___async_retval; //@line 19125
 HEAP32[$944 >> 2] = $40; //@line 19126
 return;
}
function _sn_coap_parser__async_cb_25($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem23$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $260 = 0, $261 = 0, $266 = 0, $269 = 0, $272 = 0, $273 = 0, $278 = 0, $28 = 0, $281 = 0, $285 = 0, $288 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $369 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $439 = 0, $44 = 0, $442 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $519 = 0, $52 = 0, $520 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $594 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $603 = 0, $606 = 0, $608 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $749 = 0, $752 = 0, $753 = 0, $758 = 0, $76 = 0, $761 = 0, $763 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $845 = 0, $848 = 0, $852 = 0, $855 = 0, $856 = 0, $86 = 0, $861 = 0, $864 = 0, $868 = 0, $871 = 0, $872 = 0, $877 = 0, $88 = 0, $880 = 0, $884 = 0, $885 = 0, $890 = 0, $891 = 0, $896 = 0, $899 = 0, $90 = 0, $905 = 0, $906 = 0, $911 = 0, $912 = 0, $917 = 0, $92 = 0, $920 = 0, $924 = 0, $925 = 0, $933 = 0, $934 = 0, $936 = 0, $94 = 0, $943 = 0, $944 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $278$looptemp = 0, $603$looptemp = 0, $758$looptemp = 0, $845$looptemp = 0, $861$looptemp = 0, $877$looptemp = 0, $896$looptemp = 0, $917$looptemp = 0, $266$looptemp = 0;
 sp = STACKTOP; //@line 22433
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22435
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22437
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22439
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22441
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22443
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22445
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22447
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22449
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22451
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22453
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22455
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22457
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22459
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22461
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22463
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22465
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22467
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22469
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22471
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 22473
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 22475
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 22477
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 22479
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 22481
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 22483
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 22485
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 22487
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 22489
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 22491
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 22493
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 22495
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 22497
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 22499
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 22501
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 22503
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 22505
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 22507
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 22509
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 22511
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 22513
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 22515
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 22517
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 22519
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 22521
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 22523
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 22525
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 22527
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 22529
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 22531
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 22533
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 22535
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 22537
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 22539
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 22541
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 22543
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 22545
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 22547
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 22549
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 22551
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 22553
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 22555
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 22557
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 22559
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 22561
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 22563
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 22565
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 22567
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 22569
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22571
 HEAP32[(HEAP32[$130 >> 2] | 0) + 44 >> 2] = $AsyncRetVal; //@line 22574
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3803, 4433, $6); //@line 22578
  } else {
   _memcpy($AsyncRetVal | 0, $108 | 0, $34 | 0) | 0; //@line 22580
   HEAP32[$36 >> 2] = $108 + $34; //@line 22582
   $$reg2mem23$0 = $64; //@line 22583
   L5 : while (1) {
    $924 = HEAP32[$70 >> 2] | 0; //@line 22585
    $925 = $924 - $94 | 0; //@line 22586
    $141 = $924; //@line 22589
    if (($925 | 0) > ($82 | 0)) {
     break L2;
    }
    if (!(($82 - $925 & 65535) << 16 >> 16)) {
     label = 108; //@line 22596
     break;
    }
    $trunc277$i = HEAP8[$141 >> 0] | 0; //@line 22599
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 108; //@line 22602
     break;
    }
    $144 = $trunc277$i & 15; //@line 22606
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 22607
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 22612
      break L5;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$141 + 1 >> 0] | 0; //@line 22620
      $$sink214$i = 13; //@line 22620
      $$sink3$i = 1; //@line 22620
      label = 8; //@line 22621
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$141 + 1 >> 0] << 8) + 269 | 0; //@line 22633
      $$sink214$i = HEAPU8[$141 + 2 >> 0] | 0; //@line 22633
      $$sink3$i = 2; //@line 22633
      label = 8; //@line 22634
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 22638
      $163 = $141; //@line 22638
      $944 = $924; //@line 22638
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 22642
     $158 = $141 + $$sink3$i | 0; //@line 22644
     HEAP32[$36 >> 2] = $158; //@line 22645
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 22647
     $163 = $158; //@line 22647
     $944 = $158; //@line 22647
    }
    $161 = $$1$i + ($$reg2mem23$0 & 255) | 0; //@line 22650
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 22654
      break L5;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$163 + 1 >> 0] | 0; //@line 22662
      $$sink216$i = 13; //@line 22662
      $$sink8$i = 1; //@line 22662
      label = 13; //@line 22663
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$163 + 1 >> 0] << 8) + 269 | 0; //@line 22675
      $$sink216$i = HEAPU8[$163 + 2 >> 0] | 0; //@line 22675
      $$sink8$i = 2; //@line 22675
      label = 13; //@line 22676
      break;
     }
    default:
     {
      $$1202$in$i = $144; //@line 22680
      $178 = $944; //@line 22680
      $193 = $163; //@line 22680
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 22684
     $175 = $163 + $$sink8$i | 0; //@line 22686
     HEAP32[$36 >> 2] = $175; //@line 22687
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 22689
     $178 = $175; //@line 22689
     $193 = $175; //@line 22689
    }
    $$1202$i = $$1202$in$i & 65535; //@line 22691
    $179 = $102 - $178 & 65535; //@line 22693
    $trunc$i = $161 & 65535; //@line 22694
    L22 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 63; //@line 22698
       break L5;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$130 >> 2] | 0)) {
        label = 16; //@line 22706
        break L5;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 22711
         break L5;
         break;
        }
       case 4:
        {
         label = 40; //@line 22716
         break L5;
         break;
        }
       case 3:
        {
         label = 43; //@line 22721
         break L5;
         break;
        }
       case 8:
        {
         label = 49; //@line 22726
         break L5;
         break;
        }
       case 20:
        {
         label = 60; //@line 22731
         break L5;
         break;
        }
       case 11:
        {
         label = 63; //@line 22736
         break L5;
         break;
        }
       case 15:
        {
         label = 72; //@line 22741
         break L5;
         break;
        }
       case 12:
        {
         break L22;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 22752
          break L5;
         }
         $272 = $193 + 1 | 0; //@line 22755
         HEAP32[$36 >> 2] = $272; //@line 22756
         $273 = $$1202$in$i & 255; //@line 22757
         if (!($273 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 22760
         } else {
          $$045$i221$i = $273; //@line 22762
          $$06$i220$i = 0; //@line 22762
          $278 = $272; //@line 22762
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 22764
           $278$looptemp = $278;
           $278 = $278 + 1 | 0; //@line 22766
           HEAP32[$36 >> 2] = $278; //@line 22767
           $281 = $$06$i220$i << 8 | HEAPU8[$278$looptemp >> 0]; //@line 22770
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $281; //@line 22773
            break;
           } else {
            $$06$i220$i = $281; //@line 22776
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 22782
         $$reg2mem23$0 = $161; //@line 22783
         continue L5;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 56; //@line 22790
          break L5;
         }
         $594 = (HEAP32[$130 >> 2] | 0) + 28 | 0; //@line 22794
         if ((HEAP32[$594 >> 2] | 0) != -1) {
          label = 56; //@line 22798
          break L5;
         }
         $597 = $193 + 1 | 0; //@line 22801
         HEAP32[$36 >> 2] = $597; //@line 22802
         $598 = $$1202$in$i & 255; //@line 22803
         if (!($598 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 22806
         } else {
          $$045$i263$i = $598; //@line 22808
          $$06$i262$i = 0; //@line 22808
          $603 = $597; //@line 22808
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 22810
           $603$looptemp = $603;
           $603 = $603 + 1 | 0; //@line 22812
           HEAP32[$36 >> 2] = $603; //@line 22813
           $606 = $$06$i262$i << 8 | HEAPU8[$603$looptemp >> 0]; //@line 22816
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $606; //@line 22819
            break;
           } else {
            $$06$i262$i = $606; //@line 22822
           }
          }
         }
         HEAP32[$594 >> 2] = $$0$lcssa$i265$i; //@line 22826
         $$reg2mem23$0 = $161; //@line 22827
         continue L5;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 68; //@line 22834
          break L5;
         }
         $749 = (HEAP32[$130 >> 2] | 0) + 32 | 0; //@line 22838
         if ((HEAP32[$749 >> 2] | 0) != -1) {
          label = 68; //@line 22842
          break L5;
         }
         $752 = $193 + 1 | 0; //@line 22845
         HEAP32[$36 >> 2] = $752; //@line 22846
         $753 = $$1202$in$i & 255; //@line 22847
         if (!($753 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 22850
         } else {
          $$045$i270$i = $753; //@line 22852
          $$06$i269$i = 0; //@line 22852
          $758 = $752; //@line 22852
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 22854
           $758$looptemp = $758;
           $758 = $758 + 1 | 0; //@line 22856
           HEAP32[$36 >> 2] = $758; //@line 22857
           $761 = $$06$i269$i << 8 | HEAPU8[$758$looptemp >> 0]; //@line 22860
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $761; //@line 22863
            break;
           } else {
            $$06$i269$i = $761; //@line 22866
           }
          }
         }
         HEAP32[$749 >> 2] = $$0$lcssa$i272$i; //@line 22870
         $$reg2mem23$0 = $161; //@line 22871
         continue L5;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 77; //@line 22878
          break L5;
         }
         $836 = (HEAP32[$130 >> 2] | 0) + 40 | 0; //@line 22882
         if ((HEAP32[$836 >> 2] | 0) != -1) {
          label = 77; //@line 22886
          break L5;
         }
         $839 = $193 + 1 | 0; //@line 22889
         HEAP32[$36 >> 2] = $839; //@line 22890
         $840 = $$1202$in$i & 255; //@line 22891
         if (!($840 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 22894
         } else {
          $$045$i256$i = $840; //@line 22896
          $$06$i255$i = 0; //@line 22896
          $845 = $839; //@line 22896
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 22898
           $845$looptemp = $845;
           $845 = $845 + 1 | 0; //@line 22900
           HEAP32[$36 >> 2] = $845; //@line 22901
           $848 = $$06$i255$i << 8 | HEAPU8[$845$looptemp >> 0]; //@line 22904
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $848; //@line 22907
            break;
           } else {
            $$06$i255$i = $848; //@line 22910
           }
          }
         }
         HEAP32[$836 >> 2] = $$0$lcssa$i258$i; //@line 22914
         $$reg2mem23$0 = $161; //@line 22915
         continue L5;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 83; //@line 22922
          break L5;
         }
         $852 = (HEAP32[$130 >> 2] | 0) + 36 | 0; //@line 22926
         if ((HEAP32[$852 >> 2] | 0) != -1) {
          label = 83; //@line 22930
          break L5;
         }
         $855 = $193 + 1 | 0; //@line 22933
         HEAP32[$36 >> 2] = $855; //@line 22934
         $856 = $$1202$in$i & 255; //@line 22935
         if (!($856 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 22938
         } else {
          $$045$i249$i = $856; //@line 22940
          $$06$i248$i = 0; //@line 22940
          $861 = $855; //@line 22940
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 22942
           $861$looptemp = $861;
           $861 = $861 + 1 | 0; //@line 22944
           HEAP32[$36 >> 2] = $861; //@line 22945
           $864 = $$06$i248$i << 8 | HEAPU8[$861$looptemp >> 0]; //@line 22948
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $864; //@line 22951
            break;
           } else {
            $$06$i248$i = $864; //@line 22954
           }
          }
         }
         HEAP32[$852 >> 2] = $$0$lcssa$i251$i; //@line 22958
         $$reg2mem23$0 = $161; //@line 22959
         continue L5;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 89; //@line 22966
          break L5;
         }
         $868 = (HEAP32[$130 >> 2] | 0) + 12 | 0; //@line 22970
         if ((HEAP32[$868 >> 2] | 0) != -1) {
          label = 89; //@line 22974
          break L5;
         }
         $871 = $193 + 1 | 0; //@line 22977
         HEAP32[$36 >> 2] = $871; //@line 22978
         $872 = $$1202$in$i & 255; //@line 22979
         if (!($872 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 22982
         } else {
          $$045$i242$i = $872; //@line 22984
          $$06$i241$i = 0; //@line 22984
          $877 = $871; //@line 22984
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 22986
           $877$looptemp = $877;
           $877 = $877 + 1 | 0; //@line 22988
           HEAP32[$36 >> 2] = $877; //@line 22989
           $880 = $$06$i241$i << 8 | HEAPU8[$877$looptemp >> 0]; //@line 22992
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $880; //@line 22995
            break;
           } else {
            $$06$i241$i = $880; //@line 22998
           }
          }
         }
         HEAP32[$868 >> 2] = $$0$lcssa$i244$i; //@line 23002
         $$reg2mem23$0 = $161; //@line 23003
         continue L5;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 95; //@line 23010
          break L5;
         }
         $884 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 23014
         $885 = HEAP8[$884 >> 0] | 0; //@line 23015
         if ($885 & 1) {
          label = 95; //@line 23019
          break L5;
         }
         HEAP8[$884 >> 0] = $885 | 1; //@line 23023
         $890 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 23025
         HEAP32[$36 >> 2] = $890; //@line 23026
         $891 = $$1202$in$i & 255; //@line 23027
         if (!($891 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 23030
         } else {
          $$045$i235$i = $891; //@line 23032
          $$06$i234$i = 0; //@line 23032
          $896 = $890; //@line 23032
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 23034
           $896$looptemp = $896;
           $896 = $896 + 1 | 0; //@line 23036
           HEAP32[$36 >> 2] = $896; //@line 23037
           $899 = $$06$i234$i << 8 | HEAPU8[$896$looptemp >> 0]; //@line 23040
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $899; //@line 23043
            break;
           } else {
            $$06$i234$i = $899; //@line 23046
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 23052
         $$reg2mem23$0 = $161; //@line 23053
         continue L5;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 101; //@line 23060
          break L5;
         }
         $905 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 23064
         $906 = HEAP8[$905 >> 0] | 0; //@line 23065
         if ($906 & 2) {
          label = 101; //@line 23069
          break L5;
         }
         HEAP8[$905 >> 0] = $906 | 2; //@line 23073
         $911 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 23075
         HEAP32[$36 >> 2] = $911; //@line 23076
         $912 = $$1202$in$i & 255; //@line 23077
         if (!($912 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 23080
         } else {
          $$045$i228$i = $912; //@line 23082
          $$06$i227$i = 0; //@line 23082
          $917 = $911; //@line 23082
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 23084
           $917$looptemp = $917;
           $917 = $917 + 1 | 0; //@line 23086
           HEAP32[$36 >> 2] = $917; //@line 23087
           $920 = $$06$i227$i << 8 | HEAPU8[$917$looptemp >> 0]; //@line 23090
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $920; //@line 23093
            break;
           } else {
            $$06$i227$i = $920; //@line 23096
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 23102
         $$reg2mem23$0 = $161; //@line 23103
         continue L5;
         break;
        }
       default:
        {
         label = 105; //@line 23108
         break L5;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 105; //@line 23118
       break L5;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 23125
     break;
    }
    if ((HEAP32[$10 >> 2] | 0) != -1) {
     label = 22; //@line 23131
     break;
    }
    $260 = $193 + 1 | 0; //@line 23134
    HEAP32[$36 >> 2] = $260; //@line 23135
    $261 = $$1202$in$i & 255; //@line 23136
    if (!($261 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 23139
    } else {
     $$045$i$i = $261; //@line 23141
     $$06$i$i = 0; //@line 23141
     $266 = $260; //@line 23141
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 23143
      $266$looptemp = $266;
      $266 = $266 + 1 | 0; //@line 23145
      HEAP32[$36 >> 2] = $266; //@line 23146
      $269 = $$06$i$i << 8 | HEAPU8[$266$looptemp >> 0]; //@line 23149
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $269; //@line 23152
       break;
      } else {
       $$06$i$i = $269; //@line 23155
      }
     }
    }
    HEAP32[$10 >> 2] = $$0$lcssa$i$i; //@line 23159
    $$reg2mem23$0 = $161; //@line 23160
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3803, 4066, $78); //@line 23164
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3803, 4124, $28); //@line 23169
     break L2;
     break;
    }
   case 16:
    {
     $182 = HEAP32[$132 >> 2] | 0; //@line 23174
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 23175
     $183 = FUNCTION_TABLE_ii[$182 & 31](68) | 0; //@line 23176
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 23179
      $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 23180
      HEAP32[$184 >> 2] = $2; //@line 23181
      $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 23182
      HEAP32[$185 >> 2] = $4; //@line 23183
      $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 23184
      HEAP32[$186 >> 2] = $6; //@line 23185
      $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 23186
      HEAP32[$187 >> 2] = $8; //@line 23187
      $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 23188
      HEAP32[$188 >> 2] = $10; //@line 23189
      $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 23190
      HEAP32[$189 >> 2] = $12; //@line 23191
      $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 23192
      HEAP32[$190 >> 2] = $14; //@line 23193
      $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 23194
      HEAP32[$191 >> 2] = $16; //@line 23195
      $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 23196
      HEAP32[$192 >> 2] = $193; //@line 23197
      $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 23198
      HEAP32[$194 >> 2] = $18; //@line 23199
      $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 23200
      HEAP32[$195 >> 2] = $20; //@line 23201
      $196 = $ReallocAsyncCtx3 + 48 | 0; //@line 23202
      HEAP32[$196 >> 2] = $22; //@line 23203
      $197 = $ReallocAsyncCtx3 + 52 | 0; //@line 23204
      HEAP32[$197 >> 2] = $24; //@line 23205
      $198 = $ReallocAsyncCtx3 + 56 | 0; //@line 23206
      HEAP32[$198 >> 2] = $26; //@line 23207
      $199 = $ReallocAsyncCtx3 + 60 | 0; //@line 23208
      HEAP32[$199 >> 2] = $28; //@line 23209
      $200 = $ReallocAsyncCtx3 + 64 | 0; //@line 23210
      HEAP32[$200 >> 2] = $30; //@line 23211
      $201 = $ReallocAsyncCtx3 + 68 | 0; //@line 23212
      HEAP32[$201 >> 2] = $32; //@line 23213
      $202 = $ReallocAsyncCtx3 + 72 | 0; //@line 23214
      HEAP32[$202 >> 2] = $38; //@line 23215
      $203 = $ReallocAsyncCtx3 + 76 | 0; //@line 23216
      HEAP32[$203 >> 2] = $36; //@line 23217
      $204 = $ReallocAsyncCtx3 + 80 | 0; //@line 23218
      HEAP32[$204 >> 2] = $40; //@line 23219
      $205 = $ReallocAsyncCtx3 + 84 | 0; //@line 23220
      HEAP32[$205 >> 2] = $$1202$in$i; //@line 23221
      $206 = $ReallocAsyncCtx3 + 88 | 0; //@line 23222
      HEAP32[$206 >> 2] = $44; //@line 23223
      $207 = $ReallocAsyncCtx3 + 92 | 0; //@line 23224
      HEAP32[$207 >> 2] = $46; //@line 23225
      $208 = $ReallocAsyncCtx3 + 96 | 0; //@line 23226
      HEAP16[$208 >> 1] = $$1202$i; //@line 23227
      $209 = $ReallocAsyncCtx3 + 100 | 0; //@line 23228
      HEAP32[$209 >> 2] = $48; //@line 23229
      $210 = $ReallocAsyncCtx3 + 104 | 0; //@line 23230
      HEAP32[$210 >> 2] = $50; //@line 23231
      $211 = $ReallocAsyncCtx3 + 108 | 0; //@line 23232
      HEAP32[$211 >> 2] = $52; //@line 23233
      $212 = $ReallocAsyncCtx3 + 112 | 0; //@line 23234
      HEAP32[$212 >> 2] = $54; //@line 23235
      $213 = $ReallocAsyncCtx3 + 116 | 0; //@line 23236
      HEAP32[$213 >> 2] = $56; //@line 23237
      $214 = $ReallocAsyncCtx3 + 120 | 0; //@line 23238
      HEAP32[$214 >> 2] = $42; //@line 23239
      $215 = $ReallocAsyncCtx3 + 124 | 0; //@line 23240
      HEAP32[$215 >> 2] = $58; //@line 23241
      $216 = $ReallocAsyncCtx3 + 128 | 0; //@line 23242
      HEAP32[$216 >> 2] = $60; //@line 23243
      $217 = $ReallocAsyncCtx3 + 132 | 0; //@line 23244
      HEAP32[$217 >> 2] = $62; //@line 23245
      $218 = $ReallocAsyncCtx3 + 136 | 0; //@line 23246
      HEAP32[$218 >> 2] = $161; //@line 23247
      $219 = $ReallocAsyncCtx3 + 140 | 0; //@line 23248
      HEAP32[$219 >> 2] = $66; //@line 23249
      $220 = $ReallocAsyncCtx3 + 144 | 0; //@line 23250
      HEAP32[$220 >> 2] = $68; //@line 23251
      $221 = $ReallocAsyncCtx3 + 148 | 0; //@line 23252
      HEAP32[$221 >> 2] = $70; //@line 23253
      $222 = $ReallocAsyncCtx3 + 152 | 0; //@line 23254
      HEAP32[$222 >> 2] = $72; //@line 23255
      $223 = $ReallocAsyncCtx3 + 156 | 0; //@line 23256
      HEAP16[$223 >> 1] = $179; //@line 23257
      $224 = $ReallocAsyncCtx3 + 160 | 0; //@line 23258
      HEAP32[$224 >> 2] = $74; //@line 23259
      $225 = $ReallocAsyncCtx3 + 164 | 0; //@line 23260
      HEAP32[$225 >> 2] = $76; //@line 23261
      $226 = $ReallocAsyncCtx3 + 168 | 0; //@line 23262
      HEAP32[$226 >> 2] = $78; //@line 23263
      $227 = $ReallocAsyncCtx3 + 172 | 0; //@line 23264
      HEAP32[$227 >> 2] = $80; //@line 23265
      $228 = $ReallocAsyncCtx3 + 176 | 0; //@line 23266
      HEAP32[$228 >> 2] = $82; //@line 23267
      $229 = $ReallocAsyncCtx3 + 180 | 0; //@line 23268
      HEAP32[$229 >> 2] = $84; //@line 23269
      $230 = $ReallocAsyncCtx3 + 184 | 0; //@line 23270
      HEAP32[$230 >> 2] = $86; //@line 23271
      $231 = $ReallocAsyncCtx3 + 188 | 0; //@line 23272
      HEAP32[$231 >> 2] = $88; //@line 23273
      $232 = $ReallocAsyncCtx3 + 192 | 0; //@line 23274
      HEAP32[$232 >> 2] = $90; //@line 23275
      $233 = $ReallocAsyncCtx3 + 196 | 0; //@line 23276
      HEAP32[$233 >> 2] = $92; //@line 23277
      $234 = $ReallocAsyncCtx3 + 200 | 0; //@line 23278
      HEAP32[$234 >> 2] = $94; //@line 23279
      $235 = $ReallocAsyncCtx3 + 204 | 0; //@line 23280
      HEAP32[$235 >> 2] = $96; //@line 23281
      $236 = $ReallocAsyncCtx3 + 208 | 0; //@line 23282
      HEAP32[$236 >> 2] = $98; //@line 23283
      $237 = $ReallocAsyncCtx3 + 212 | 0; //@line 23284
      HEAP32[$237 >> 2] = $100; //@line 23285
      $238 = $ReallocAsyncCtx3 + 216 | 0; //@line 23286
      HEAP32[$238 >> 2] = $102; //@line 23287
      $239 = $ReallocAsyncCtx3 + 220 | 0; //@line 23288
      HEAP32[$239 >> 2] = $104; //@line 23289
      $240 = $ReallocAsyncCtx3 + 224 | 0; //@line 23290
      HEAP32[$240 >> 2] = $106; //@line 23291
      $241 = $ReallocAsyncCtx3 + 228 | 0; //@line 23292
      HEAP32[$241 >> 2] = $110; //@line 23293
      $242 = $ReallocAsyncCtx3 + 232 | 0; //@line 23294
      HEAP32[$242 >> 2] = $112; //@line 23295
      $243 = $ReallocAsyncCtx3 + 236 | 0; //@line 23296
      HEAP32[$243 >> 2] = $114; //@line 23297
      $244 = $ReallocAsyncCtx3 + 240 | 0; //@line 23298
      HEAP32[$244 >> 2] = $116; //@line 23299
      $245 = $ReallocAsyncCtx3 + 244 | 0; //@line 23300
      HEAP32[$245 >> 2] = $118; //@line 23301
      $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 23302
      HEAP32[$246 >> 2] = $120; //@line 23303
      $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 23304
      HEAP32[$247 >> 2] = $122; //@line 23305
      $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 23306
      HEAP32[$248 >> 2] = $124; //@line 23307
      $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 23308
      HEAP32[$249 >> 2] = $126; //@line 23309
      $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 23310
      HEAP32[$250 >> 2] = $128; //@line 23311
      $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 23312
      HEAP32[$251 >> 2] = $130; //@line 23313
      $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 23314
      HEAP16[$252 >> 1] = $trunc$i; //@line 23315
      $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 23316
      HEAP32[$253 >> 2] = $132; //@line 23317
      $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 23318
      HEAP32[$254 >> 2] = $134; //@line 23319
      $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 23320
      HEAP32[$255 >> 2] = $136; //@line 23321
      sp = STACKTOP; //@line 23322
      return;
     }
     HEAP32[___async_retval >> 2] = $183; //@line 23326
     ___async_unwind = 0; //@line 23327
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 23328
     $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 23329
     HEAP32[$184 >> 2] = $2; //@line 23330
     $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 23331
     HEAP32[$185 >> 2] = $4; //@line 23332
     $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 23333
     HEAP32[$186 >> 2] = $6; //@line 23334
     $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 23335
     HEAP32[$187 >> 2] = $8; //@line 23336
     $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 23337
     HEAP32[$188 >> 2] = $10; //@line 23338
     $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 23339
     HEAP32[$189 >> 2] = $12; //@line 23340
     $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 23341
     HEAP32[$190 >> 2] = $14; //@line 23342
     $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 23343
     HEAP32[$191 >> 2] = $16; //@line 23344
     $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 23345
     HEAP32[$192 >> 2] = $193; //@line 23346
     $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 23347
     HEAP32[$194 >> 2] = $18; //@line 23348
     $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 23349
     HEAP32[$195 >> 2] = $20; //@line 23350
     $196 = $ReallocAsyncCtx3 + 48 | 0; //@line 23351
     HEAP32[$196 >> 2] = $22; //@line 23352
     $197 = $ReallocAsyncCtx3 + 52 | 0; //@line 23353
     HEAP32[$197 >> 2] = $24; //@line 23354
     $198 = $ReallocAsyncCtx3 + 56 | 0; //@line 23355
     HEAP32[$198 >> 2] = $26; //@line 23356
     $199 = $ReallocAsyncCtx3 + 60 | 0; //@line 23357
     HEAP32[$199 >> 2] = $28; //@line 23358
     $200 = $ReallocAsyncCtx3 + 64 | 0; //@line 23359
     HEAP32[$200 >> 2] = $30; //@line 23360
     $201 = $ReallocAsyncCtx3 + 68 | 0; //@line 23361
     HEAP32[$201 >> 2] = $32; //@line 23362
     $202 = $ReallocAsyncCtx3 + 72 | 0; //@line 23363
     HEAP32[$202 >> 2] = $38; //@line 23364
     $203 = $ReallocAsyncCtx3 + 76 | 0; //@line 23365
     HEAP32[$203 >> 2] = $36; //@line 23366
     $204 = $ReallocAsyncCtx3 + 80 | 0; //@line 23367
     HEAP32[$204 >> 2] = $40; //@line 23368
     $205 = $ReallocAsyncCtx3 + 84 | 0; //@line 23369
     HEAP32[$205 >> 2] = $$1202$in$i; //@line 23370
     $206 = $ReallocAsyncCtx3 + 88 | 0; //@line 23371
     HEAP32[$206 >> 2] = $44; //@line 23372
     $207 = $ReallocAsyncCtx3 + 92 | 0; //@line 23373
     HEAP32[$207 >> 2] = $46; //@line 23374
     $208 = $ReallocAsyncCtx3 + 96 | 0; //@line 23375
     HEAP16[$208 >> 1] = $$1202$i; //@line 23376
     $209 = $ReallocAsyncCtx3 + 100 | 0; //@line 23377
     HEAP32[$209 >> 2] = $48; //@line 23378
     $210 = $ReallocAsyncCtx3 + 104 | 0; //@line 23379
     HEAP32[$210 >> 2] = $50; //@line 23380
     $211 = $ReallocAsyncCtx3 + 108 | 0; //@line 23381
     HEAP32[$211 >> 2] = $52; //@line 23382
     $212 = $ReallocAsyncCtx3 + 112 | 0; //@line 23383
     HEAP32[$212 >> 2] = $54; //@line 23384
     $213 = $ReallocAsyncCtx3 + 116 | 0; //@line 23385
     HEAP32[$213 >> 2] = $56; //@line 23386
     $214 = $ReallocAsyncCtx3 + 120 | 0; //@line 23387
     HEAP32[$214 >> 2] = $42; //@line 23388
     $215 = $ReallocAsyncCtx3 + 124 | 0; //@line 23389
     HEAP32[$215 >> 2] = $58; //@line 23390
     $216 = $ReallocAsyncCtx3 + 128 | 0; //@line 23391
     HEAP32[$216 >> 2] = $60; //@line 23392
     $217 = $ReallocAsyncCtx3 + 132 | 0; //@line 23393
     HEAP32[$217 >> 2] = $62; //@line 23394
     $218 = $ReallocAsyncCtx3 + 136 | 0; //@line 23395
     HEAP32[$218 >> 2] = $161; //@line 23396
     $219 = $ReallocAsyncCtx3 + 140 | 0; //@line 23397
     HEAP32[$219 >> 2] = $66; //@line 23398
     $220 = $ReallocAsyncCtx3 + 144 | 0; //@line 23399
     HEAP32[$220 >> 2] = $68; //@line 23400
     $221 = $ReallocAsyncCtx3 + 148 | 0; //@line 23401
     HEAP32[$221 >> 2] = $70; //@line 23402
     $222 = $ReallocAsyncCtx3 + 152 | 0; //@line 23403
     HEAP32[$222 >> 2] = $72; //@line 23404
     $223 = $ReallocAsyncCtx3 + 156 | 0; //@line 23405
     HEAP16[$223 >> 1] = $179; //@line 23406
     $224 = $ReallocAsyncCtx3 + 160 | 0; //@line 23407
     HEAP32[$224 >> 2] = $74; //@line 23408
     $225 = $ReallocAsyncCtx3 + 164 | 0; //@line 23409
     HEAP32[$225 >> 2] = $76; //@line 23410
     $226 = $ReallocAsyncCtx3 + 168 | 0; //@line 23411
     HEAP32[$226 >> 2] = $78; //@line 23412
     $227 = $ReallocAsyncCtx3 + 172 | 0; //@line 23413
     HEAP32[$227 >> 2] = $80; //@line 23414
     $228 = $ReallocAsyncCtx3 + 176 | 0; //@line 23415
     HEAP32[$228 >> 2] = $82; //@line 23416
     $229 = $ReallocAsyncCtx3 + 180 | 0; //@line 23417
     HEAP32[$229 >> 2] = $84; //@line 23418
     $230 = $ReallocAsyncCtx3 + 184 | 0; //@line 23419
     HEAP32[$230 >> 2] = $86; //@line 23420
     $231 = $ReallocAsyncCtx3 + 188 | 0; //@line 23421
     HEAP32[$231 >> 2] = $88; //@line 23422
     $232 = $ReallocAsyncCtx3 + 192 | 0; //@line 23423
     HEAP32[$232 >> 2] = $90; //@line 23424
     $233 = $ReallocAsyncCtx3 + 196 | 0; //@line 23425
     HEAP32[$233 >> 2] = $92; //@line 23426
     $234 = $ReallocAsyncCtx3 + 200 | 0; //@line 23427
     HEAP32[$234 >> 2] = $94; //@line 23428
     $235 = $ReallocAsyncCtx3 + 204 | 0; //@line 23429
     HEAP32[$235 >> 2] = $96; //@line 23430
     $236 = $ReallocAsyncCtx3 + 208 | 0; //@line 23431
     HEAP32[$236 >> 2] = $98; //@line 23432
     $237 = $ReallocAsyncCtx3 + 212 | 0; //@line 23433
     HEAP32[$237 >> 2] = $100; //@line 23434
     $238 = $ReallocAsyncCtx3 + 216 | 0; //@line 23435
     HEAP32[$238 >> 2] = $102; //@line 23436
     $239 = $ReallocAsyncCtx3 + 220 | 0; //@line 23437
     HEAP32[$239 >> 2] = $104; //@line 23438
     $240 = $ReallocAsyncCtx3 + 224 | 0; //@line 23439
     HEAP32[$240 >> 2] = $106; //@line 23440
     $241 = $ReallocAsyncCtx3 + 228 | 0; //@line 23441
     HEAP32[$241 >> 2] = $110; //@line 23442
     $242 = $ReallocAsyncCtx3 + 232 | 0; //@line 23443
     HEAP32[$242 >> 2] = $112; //@line 23444
     $243 = $ReallocAsyncCtx3 + 236 | 0; //@line 23445
     HEAP32[$243 >> 2] = $114; //@line 23446
     $244 = $ReallocAsyncCtx3 + 240 | 0; //@line 23447
     HEAP32[$244 >> 2] = $116; //@line 23448
     $245 = $ReallocAsyncCtx3 + 244 | 0; //@line 23449
     HEAP32[$245 >> 2] = $118; //@line 23450
     $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 23451
     HEAP32[$246 >> 2] = $120; //@line 23452
     $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 23453
     HEAP32[$247 >> 2] = $122; //@line 23454
     $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 23455
     HEAP32[$248 >> 2] = $124; //@line 23456
     $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 23457
     HEAP32[$249 >> 2] = $126; //@line 23458
     $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 23459
     HEAP32[$250 >> 2] = $128; //@line 23460
     $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 23461
     HEAP32[$251 >> 2] = $130; //@line 23462
     $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 23463
     HEAP16[$252 >> 1] = $trunc$i; //@line 23464
     $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 23465
     HEAP32[$253 >> 2] = $132; //@line 23466
     $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 23467
     HEAP32[$254 >> 2] = $134; //@line 23468
     $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 23469
     HEAP32[$255 >> 2] = $136; //@line 23470
     sp = STACKTOP; //@line 23471
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3803, 4238, $12); //@line 23476
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3803, 4307, $26); //@line 23481
     break L2;
     break;
    }
   case 31:
    {
     $285 = $$1202$in$i & 65535; //@line 23486
     if (($$1202$i + -1 & 65535) <= 1033) {
      $288 = HEAP32[$130 >> 2] | 0; //@line 23490
      if (!(HEAP32[$288 + 44 >> 2] | 0)) {
       HEAP16[$288 + 2 >> 1] = $$1202$i; //@line 23496
       $293 = $193 + 1 | 0; //@line 23497
       HEAP32[$36 >> 2] = $293; //@line 23498
       $294 = HEAP32[$132 >> 2] | 0; //@line 23499
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 23500
       $295 = FUNCTION_TABLE_ii[$294 & 31]($$1202$i) | 0; //@line 23501
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 23504
        $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 23505
        HEAP32[$296 >> 2] = $2; //@line 23506
        $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 23507
        HEAP32[$297 >> 2] = $4; //@line 23508
        $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 23509
        HEAP32[$298 >> 2] = $6; //@line 23510
        $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 23511
        HEAP32[$299 >> 2] = $8; //@line 23512
        $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 23513
        HEAP32[$300 >> 2] = $10; //@line 23514
        $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 23515
        HEAP32[$301 >> 2] = $12; //@line 23516
        $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 23517
        HEAP32[$302 >> 2] = $14; //@line 23518
        $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 23519
        HEAP32[$303 >> 2] = $16; //@line 23520
        $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 23521
        HEAP32[$304 >> 2] = $18; //@line 23522
        $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 23523
        HEAP32[$305 >> 2] = $20; //@line 23524
        $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 23525
        HEAP32[$306 >> 2] = $22; //@line 23526
        $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 23527
        HEAP32[$307 >> 2] = $24; //@line 23528
        $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 23529
        HEAP32[$308 >> 2] = $26; //@line 23530
        $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 23531
        HEAP32[$309 >> 2] = $28; //@line 23532
        $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 23533
        HEAP32[$310 >> 2] = $30; //@line 23534
        $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 23535
        HEAP32[$311 >> 2] = $32; //@line 23536
        $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 23537
        HEAP32[$312 >> 2] = $285; //@line 23538
        $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 23539
        HEAP32[$313 >> 2] = $36; //@line 23540
        $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 23541
        HEAP32[$314 >> 2] = $38; //@line 23542
        $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 23543
        HEAP32[$315 >> 2] = $40; //@line 23544
        $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 23545
        HEAP32[$316 >> 2] = $42; //@line 23546
        $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 23547
        HEAP32[$317 >> 2] = $44; //@line 23548
        $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 23549
        HEAP32[$318 >> 2] = $46; //@line 23550
        $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 23551
        HEAP32[$319 >> 2] = $48; //@line 23552
        $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 23553
        HEAP32[$320 >> 2] = $50; //@line 23554
        $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 23555
        HEAP32[$321 >> 2] = $52; //@line 23556
        $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 23557
        HEAP32[$322 >> 2] = $54; //@line 23558
        $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 23559
        HEAP32[$323 >> 2] = $56; //@line 23560
        $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 23561
        HEAP32[$324 >> 2] = $58; //@line 23562
        $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 23563
        HEAP32[$325 >> 2] = $60; //@line 23564
        $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 23565
        HEAP32[$326 >> 2] = $62; //@line 23566
        $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 23567
        HEAP32[$327 >> 2] = $161; //@line 23568
        $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 23569
        HEAP32[$328 >> 2] = $66; //@line 23570
        $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 23571
        HEAP32[$329 >> 2] = $68; //@line 23572
        $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 23573
        HEAP32[$330 >> 2] = $70; //@line 23574
        $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 23575
        HEAP32[$331 >> 2] = $72; //@line 23576
        $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 23577
        HEAP32[$332 >> 2] = $74; //@line 23578
        $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 23579
        HEAP32[$333 >> 2] = $76; //@line 23580
        $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 23581
        HEAP32[$334 >> 2] = $78; //@line 23582
        $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 23583
        HEAP32[$335 >> 2] = $80; //@line 23584
        $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 23585
        HEAP32[$336 >> 2] = $82; //@line 23586
        $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 23587
        HEAP32[$337 >> 2] = $84; //@line 23588
        $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 23589
        HEAP32[$338 >> 2] = $86; //@line 23590
        $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 23591
        HEAP32[$339 >> 2] = $88; //@line 23592
        $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 23593
        HEAP32[$340 >> 2] = $90; //@line 23594
        $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 23595
        HEAP32[$341 >> 2] = $92; //@line 23596
        $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 23597
        HEAP32[$342 >> 2] = $94; //@line 23598
        $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 23599
        HEAP32[$343 >> 2] = $96; //@line 23600
        $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 23601
        HEAP32[$344 >> 2] = $98; //@line 23602
        $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 23603
        HEAP32[$345 >> 2] = $100; //@line 23604
        $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 23605
        HEAP32[$346 >> 2] = $102; //@line 23606
        $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 23607
        HEAP32[$347 >> 2] = $104; //@line 23608
        $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 23609
        HEAP32[$348 >> 2] = $106; //@line 23610
        $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 23611
        HEAP32[$349 >> 2] = $293; //@line 23612
        $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 23613
        HEAP32[$350 >> 2] = $110; //@line 23614
        $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 23615
        HEAP32[$351 >> 2] = $112; //@line 23616
        $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 23617
        HEAP32[$352 >> 2] = $114; //@line 23618
        $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 23619
        HEAP32[$353 >> 2] = $116; //@line 23620
        $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 23621
        HEAP32[$354 >> 2] = $118; //@line 23622
        $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 23623
        HEAP32[$355 >> 2] = $120; //@line 23624
        $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 23625
        HEAP32[$356 >> 2] = $122; //@line 23626
        $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 23627
        HEAP32[$357 >> 2] = $124; //@line 23628
        $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 23629
        HEAP32[$358 >> 2] = $126; //@line 23630
        $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 23631
        HEAP32[$359 >> 2] = $128; //@line 23632
        $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 23633
        HEAP32[$360 >> 2] = $130; //@line 23634
        $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 23635
        HEAP32[$361 >> 2] = $132; //@line 23636
        $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 23637
        HEAP32[$362 >> 2] = $134; //@line 23638
        $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 23639
        HEAP32[$363 >> 2] = $136; //@line 23640
        sp = STACKTOP; //@line 23641
        return;
       }
       HEAP32[___async_retval >> 2] = $295; //@line 23645
       ___async_unwind = 0; //@line 23646
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 23647
       $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 23648
       HEAP32[$296 >> 2] = $2; //@line 23649
       $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 23650
       HEAP32[$297 >> 2] = $4; //@line 23651
       $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 23652
       HEAP32[$298 >> 2] = $6; //@line 23653
       $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 23654
       HEAP32[$299 >> 2] = $8; //@line 23655
       $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 23656
       HEAP32[$300 >> 2] = $10; //@line 23657
       $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 23658
       HEAP32[$301 >> 2] = $12; //@line 23659
       $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 23660
       HEAP32[$302 >> 2] = $14; //@line 23661
       $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 23662
       HEAP32[$303 >> 2] = $16; //@line 23663
       $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 23664
       HEAP32[$304 >> 2] = $18; //@line 23665
       $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 23666
       HEAP32[$305 >> 2] = $20; //@line 23667
       $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 23668
       HEAP32[$306 >> 2] = $22; //@line 23669
       $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 23670
       HEAP32[$307 >> 2] = $24; //@line 23671
       $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 23672
       HEAP32[$308 >> 2] = $26; //@line 23673
       $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 23674
       HEAP32[$309 >> 2] = $28; //@line 23675
       $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 23676
       HEAP32[$310 >> 2] = $30; //@line 23677
       $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 23678
       HEAP32[$311 >> 2] = $32; //@line 23679
       $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 23680
       HEAP32[$312 >> 2] = $285; //@line 23681
       $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 23682
       HEAP32[$313 >> 2] = $36; //@line 23683
       $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 23684
       HEAP32[$314 >> 2] = $38; //@line 23685
       $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 23686
       HEAP32[$315 >> 2] = $40; //@line 23687
       $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 23688
       HEAP32[$316 >> 2] = $42; //@line 23689
       $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 23690
       HEAP32[$317 >> 2] = $44; //@line 23691
       $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 23692
       HEAP32[$318 >> 2] = $46; //@line 23693
       $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 23694
       HEAP32[$319 >> 2] = $48; //@line 23695
       $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 23696
       HEAP32[$320 >> 2] = $50; //@line 23697
       $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 23698
       HEAP32[$321 >> 2] = $52; //@line 23699
       $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 23700
       HEAP32[$322 >> 2] = $54; //@line 23701
       $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 23702
       HEAP32[$323 >> 2] = $56; //@line 23703
       $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 23704
       HEAP32[$324 >> 2] = $58; //@line 23705
       $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 23706
       HEAP32[$325 >> 2] = $60; //@line 23707
       $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 23708
       HEAP32[$326 >> 2] = $62; //@line 23709
       $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 23710
       HEAP32[$327 >> 2] = $161; //@line 23711
       $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 23712
       HEAP32[$328 >> 2] = $66; //@line 23713
       $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 23714
       HEAP32[$329 >> 2] = $68; //@line 23715
       $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 23716
       HEAP32[$330 >> 2] = $70; //@line 23717
       $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 23718
       HEAP32[$331 >> 2] = $72; //@line 23719
       $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 23720
       HEAP32[$332 >> 2] = $74; //@line 23721
       $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 23722
       HEAP32[$333 >> 2] = $76; //@line 23723
       $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 23724
       HEAP32[$334 >> 2] = $78; //@line 23725
       $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 23726
       HEAP32[$335 >> 2] = $80; //@line 23727
       $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 23728
       HEAP32[$336 >> 2] = $82; //@line 23729
       $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 23730
       HEAP32[$337 >> 2] = $84; //@line 23731
       $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 23732
       HEAP32[$338 >> 2] = $86; //@line 23733
       $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 23734
       HEAP32[$339 >> 2] = $88; //@line 23735
       $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 23736
       HEAP32[$340 >> 2] = $90; //@line 23737
       $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 23738
       HEAP32[$341 >> 2] = $92; //@line 23739
       $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 23740
       HEAP32[$342 >> 2] = $94; //@line 23741
       $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 23742
       HEAP32[$343 >> 2] = $96; //@line 23743
       $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 23744
       HEAP32[$344 >> 2] = $98; //@line 23745
       $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 23746
       HEAP32[$345 >> 2] = $100; //@line 23747
       $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 23748
       HEAP32[$346 >> 2] = $102; //@line 23749
       $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 23750
       HEAP32[$347 >> 2] = $104; //@line 23751
       $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 23752
       HEAP32[$348 >> 2] = $106; //@line 23753
       $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 23754
       HEAP32[$349 >> 2] = $293; //@line 23755
       $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 23756
       HEAP32[$350 >> 2] = $110; //@line 23757
       $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 23758
       HEAP32[$351 >> 2] = $112; //@line 23759
       $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 23760
       HEAP32[$352 >> 2] = $114; //@line 23761
       $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 23762
       HEAP32[$353 >> 2] = $116; //@line 23763
       $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 23764
       HEAP32[$354 >> 2] = $118; //@line 23765
       $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 23766
       HEAP32[$355 >> 2] = $120; //@line 23767
       $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 23768
       HEAP32[$356 >> 2] = $122; //@line 23769
       $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 23770
       HEAP32[$357 >> 2] = $124; //@line 23771
       $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 23772
       HEAP32[$358 >> 2] = $126; //@line 23773
       $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 23774
       HEAP32[$359 >> 2] = $128; //@line 23775
       $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 23776
       HEAP32[$360 >> 2] = $130; //@line 23777
       $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 23778
       HEAP32[$361 >> 2] = $132; //@line 23779
       $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 23780
       HEAP32[$362 >> 2] = $134; //@line 23781
       $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 23782
       HEAP32[$363 >> 2] = $136; //@line 23783
       sp = STACKTOP; //@line 23784
       return;
      }
     }
     _mbed_tracef(2, 3803, 4369, $122); //@line 23788
     break L2;
     break;
    }
   case 40:
    {
     $369 = HEAP32[$130 >> 2] | 0; //@line 23793
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 23795
     $371 = _sn_coap_parser_options_parse_multiple_options($2, $36, $179, $369 + 48 | 0, $369, 4, $$1202$i) | 0; //@line 23796
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 23799
      $372 = $ReallocAsyncCtx10 + 4 | 0; //@line 23800
      HEAP32[$372 >> 2] = $2; //@line 23801
      $373 = $ReallocAsyncCtx10 + 8 | 0; //@line 23802
      HEAP32[$373 >> 2] = $4; //@line 23803
      $374 = $ReallocAsyncCtx10 + 12 | 0; //@line 23804
      HEAP32[$374 >> 2] = $6; //@line 23805
      $375 = $ReallocAsyncCtx10 + 16 | 0; //@line 23806
      HEAP32[$375 >> 2] = $8; //@line 23807
      $376 = $ReallocAsyncCtx10 + 20 | 0; //@line 23808
      HEAP32[$376 >> 2] = $10; //@line 23809
      $377 = $ReallocAsyncCtx10 + 24 | 0; //@line 23810
      HEAP32[$377 >> 2] = $12; //@line 23811
      $378 = $ReallocAsyncCtx10 + 28 | 0; //@line 23812
      HEAP32[$378 >> 2] = $14; //@line 23813
      $379 = $ReallocAsyncCtx10 + 32 | 0; //@line 23814
      HEAP32[$379 >> 2] = $16; //@line 23815
      $380 = $ReallocAsyncCtx10 + 36 | 0; //@line 23816
      HEAP32[$380 >> 2] = $18; //@line 23817
      $381 = $ReallocAsyncCtx10 + 40 | 0; //@line 23818
      HEAP32[$381 >> 2] = $20; //@line 23819
      $382 = $ReallocAsyncCtx10 + 44 | 0; //@line 23820
      HEAP32[$382 >> 2] = $22; //@line 23821
      $383 = $ReallocAsyncCtx10 + 48 | 0; //@line 23822
      HEAP32[$383 >> 2] = $24; //@line 23823
      $384 = $ReallocAsyncCtx10 + 52 | 0; //@line 23824
      HEAP32[$384 >> 2] = $26; //@line 23825
      $385 = $ReallocAsyncCtx10 + 56 | 0; //@line 23826
      HEAP32[$385 >> 2] = $28; //@line 23827
      $386 = $ReallocAsyncCtx10 + 60 | 0; //@line 23828
      HEAP32[$386 >> 2] = $30; //@line 23829
      $387 = $ReallocAsyncCtx10 + 64 | 0; //@line 23830
      HEAP32[$387 >> 2] = $32; //@line 23831
      $388 = $ReallocAsyncCtx10 + 68 | 0; //@line 23832
      HEAP32[$388 >> 2] = $38; //@line 23833
      $389 = $ReallocAsyncCtx10 + 72 | 0; //@line 23834
      HEAP32[$389 >> 2] = $36; //@line 23835
      $390 = $ReallocAsyncCtx10 + 76 | 0; //@line 23836
      HEAP32[$390 >> 2] = $40; //@line 23837
      $391 = $ReallocAsyncCtx10 + 80 | 0; //@line 23838
      HEAP32[$391 >> 2] = $42; //@line 23839
      $392 = $ReallocAsyncCtx10 + 84 | 0; //@line 23840
      HEAP32[$392 >> 2] = $44; //@line 23841
      $393 = $ReallocAsyncCtx10 + 88 | 0; //@line 23842
      HEAP32[$393 >> 2] = $46; //@line 23843
      $394 = $ReallocAsyncCtx10 + 92 | 0; //@line 23844
      HEAP32[$394 >> 2] = $48; //@line 23845
      $395 = $ReallocAsyncCtx10 + 96 | 0; //@line 23846
      HEAP32[$395 >> 2] = $50; //@line 23847
      $396 = $ReallocAsyncCtx10 + 100 | 0; //@line 23848
      HEAP32[$396 >> 2] = $52; //@line 23849
      $397 = $ReallocAsyncCtx10 + 104 | 0; //@line 23850
      HEAP32[$397 >> 2] = $54; //@line 23851
      $398 = $ReallocAsyncCtx10 + 108 | 0; //@line 23852
      HEAP32[$398 >> 2] = $56; //@line 23853
      $399 = $ReallocAsyncCtx10 + 112 | 0; //@line 23854
      HEAP32[$399 >> 2] = $58; //@line 23855
      $400 = $ReallocAsyncCtx10 + 116 | 0; //@line 23856
      HEAP32[$400 >> 2] = $60; //@line 23857
      $401 = $ReallocAsyncCtx10 + 120 | 0; //@line 23858
      HEAP32[$401 >> 2] = $62; //@line 23859
      $402 = $ReallocAsyncCtx10 + 124 | 0; //@line 23860
      HEAP32[$402 >> 2] = $161; //@line 23861
      $403 = $ReallocAsyncCtx10 + 128 | 0; //@line 23862
      HEAP32[$403 >> 2] = $66; //@line 23863
      $404 = $ReallocAsyncCtx10 + 132 | 0; //@line 23864
      HEAP32[$404 >> 2] = $68; //@line 23865
      $405 = $ReallocAsyncCtx10 + 136 | 0; //@line 23866
      HEAP32[$405 >> 2] = $70; //@line 23867
      $406 = $ReallocAsyncCtx10 + 140 | 0; //@line 23868
      HEAP32[$406 >> 2] = $72; //@line 23869
      $407 = $ReallocAsyncCtx10 + 144 | 0; //@line 23870
      HEAP32[$407 >> 2] = $74; //@line 23871
      $408 = $ReallocAsyncCtx10 + 148 | 0; //@line 23872
      HEAP32[$408 >> 2] = $76; //@line 23873
      $409 = $ReallocAsyncCtx10 + 152 | 0; //@line 23874
      HEAP32[$409 >> 2] = $78; //@line 23875
      $410 = $ReallocAsyncCtx10 + 156 | 0; //@line 23876
      HEAP32[$410 >> 2] = $80; //@line 23877
      $411 = $ReallocAsyncCtx10 + 160 | 0; //@line 23878
      HEAP32[$411 >> 2] = $82; //@line 23879
      $412 = $ReallocAsyncCtx10 + 164 | 0; //@line 23880
      HEAP32[$412 >> 2] = $84; //@line 23881
      $413 = $ReallocAsyncCtx10 + 168 | 0; //@line 23882
      HEAP32[$413 >> 2] = $86; //@line 23883
      $414 = $ReallocAsyncCtx10 + 172 | 0; //@line 23884
      HEAP32[$414 >> 2] = $88; //@line 23885
      $415 = $ReallocAsyncCtx10 + 176 | 0; //@line 23886
      HEAP32[$415 >> 2] = $90; //@line 23887
      $416 = $ReallocAsyncCtx10 + 180 | 0; //@line 23888
      HEAP32[$416 >> 2] = $92; //@line 23889
      $417 = $ReallocAsyncCtx10 + 184 | 0; //@line 23890
      HEAP32[$417 >> 2] = $94; //@line 23891
      $418 = $ReallocAsyncCtx10 + 188 | 0; //@line 23892
      HEAP32[$418 >> 2] = $96; //@line 23893
      $419 = $ReallocAsyncCtx10 + 192 | 0; //@line 23894
      HEAP32[$419 >> 2] = $98; //@line 23895
      $420 = $ReallocAsyncCtx10 + 196 | 0; //@line 23896
      HEAP32[$420 >> 2] = $100; //@line 23897
      $421 = $ReallocAsyncCtx10 + 200 | 0; //@line 23898
      HEAP32[$421 >> 2] = $102; //@line 23899
      $422 = $ReallocAsyncCtx10 + 204 | 0; //@line 23900
      HEAP32[$422 >> 2] = $104; //@line 23901
      $423 = $ReallocAsyncCtx10 + 208 | 0; //@line 23902
      HEAP32[$423 >> 2] = $106; //@line 23903
      $424 = $ReallocAsyncCtx10 + 212 | 0; //@line 23904
      HEAP32[$424 >> 2] = $110; //@line 23905
      $425 = $ReallocAsyncCtx10 + 216 | 0; //@line 23906
      HEAP32[$425 >> 2] = $112; //@line 23907
      $426 = $ReallocAsyncCtx10 + 220 | 0; //@line 23908
      HEAP32[$426 >> 2] = $114; //@line 23909
      $427 = $ReallocAsyncCtx10 + 224 | 0; //@line 23910
      HEAP32[$427 >> 2] = $116; //@line 23911
      $428 = $ReallocAsyncCtx10 + 228 | 0; //@line 23912
      HEAP32[$428 >> 2] = $118; //@line 23913
      $429 = $ReallocAsyncCtx10 + 232 | 0; //@line 23914
      HEAP32[$429 >> 2] = $120; //@line 23915
      $430 = $ReallocAsyncCtx10 + 236 | 0; //@line 23916
      HEAP32[$430 >> 2] = $122; //@line 23917
      $431 = $ReallocAsyncCtx10 + 240 | 0; //@line 23918
      HEAP32[$431 >> 2] = $124; //@line 23919
      $432 = $ReallocAsyncCtx10 + 244 | 0; //@line 23920
      HEAP32[$432 >> 2] = $126; //@line 23921
      $433 = $ReallocAsyncCtx10 + 248 | 0; //@line 23922
      HEAP32[$433 >> 2] = $128; //@line 23923
      $434 = $ReallocAsyncCtx10 + 252 | 0; //@line 23924
      HEAP32[$434 >> 2] = $130; //@line 23925
      $435 = $ReallocAsyncCtx10 + 256 | 0; //@line 23926
      HEAP32[$435 >> 2] = $132; //@line 23927
      $436 = $ReallocAsyncCtx10 + 260 | 0; //@line 23928
      HEAP32[$436 >> 2] = $134; //@line 23929
      $437 = $ReallocAsyncCtx10 + 264 | 0; //@line 23930
      HEAP32[$437 >> 2] = $136; //@line 23931
      sp = STACKTOP; //@line 23932
      return;
     }
     HEAP8[___async_retval >> 0] = $371; //@line 23936
     ___async_unwind = 0; //@line 23937
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 23938
     $372 = $ReallocAsyncCtx10 + 4 | 0; //@line 23939
     HEAP32[$372 >> 2] = $2; //@line 23940
     $373 = $ReallocAsyncCtx10 + 8 | 0; //@line 23941
     HEAP32[$373 >> 2] = $4; //@line 23942
     $374 = $ReallocAsyncCtx10 + 12 | 0; //@line 23943
     HEAP32[$374 >> 2] = $6; //@line 23944
     $375 = $ReallocAsyncCtx10 + 16 | 0; //@line 23945
     HEAP32[$375 >> 2] = $8; //@line 23946
     $376 = $ReallocAsyncCtx10 + 20 | 0; //@line 23947
     HEAP32[$376 >> 2] = $10; //@line 23948
     $377 = $ReallocAsyncCtx10 + 24 | 0; //@line 23949
     HEAP32[$377 >> 2] = $12; //@line 23950
     $378 = $ReallocAsyncCtx10 + 28 | 0; //@line 23951
     HEAP32[$378 >> 2] = $14; //@line 23952
     $379 = $ReallocAsyncCtx10 + 32 | 0; //@line 23953
     HEAP32[$379 >> 2] = $16; //@line 23954
     $380 = $ReallocAsyncCtx10 + 36 | 0; //@line 23955
     HEAP32[$380 >> 2] = $18; //@line 23956
     $381 = $ReallocAsyncCtx10 + 40 | 0; //@line 23957
     HEAP32[$381 >> 2] = $20; //@line 23958
     $382 = $ReallocAsyncCtx10 + 44 | 0; //@line 23959
     HEAP32[$382 >> 2] = $22; //@line 23960
     $383 = $ReallocAsyncCtx10 + 48 | 0; //@line 23961
     HEAP32[$383 >> 2] = $24; //@line 23962
     $384 = $ReallocAsyncCtx10 + 52 | 0; //@line 23963
     HEAP32[$384 >> 2] = $26; //@line 23964
     $385 = $ReallocAsyncCtx10 + 56 | 0; //@line 23965
     HEAP32[$385 >> 2] = $28; //@line 23966
     $386 = $ReallocAsyncCtx10 + 60 | 0; //@line 23967
     HEAP32[$386 >> 2] = $30; //@line 23968
     $387 = $ReallocAsyncCtx10 + 64 | 0; //@line 23969
     HEAP32[$387 >> 2] = $32; //@line 23970
     $388 = $ReallocAsyncCtx10 + 68 | 0; //@line 23971
     HEAP32[$388 >> 2] = $38; //@line 23972
     $389 = $ReallocAsyncCtx10 + 72 | 0; //@line 23973
     HEAP32[$389 >> 2] = $36; //@line 23974
     $390 = $ReallocAsyncCtx10 + 76 | 0; //@line 23975
     HEAP32[$390 >> 2] = $40; //@line 23976
     $391 = $ReallocAsyncCtx10 + 80 | 0; //@line 23977
     HEAP32[$391 >> 2] = $42; //@line 23978
     $392 = $ReallocAsyncCtx10 + 84 | 0; //@line 23979
     HEAP32[$392 >> 2] = $44; //@line 23980
     $393 = $ReallocAsyncCtx10 + 88 | 0; //@line 23981
     HEAP32[$393 >> 2] = $46; //@line 23982
     $394 = $ReallocAsyncCtx10 + 92 | 0; //@line 23983
     HEAP32[$394 >> 2] = $48; //@line 23984
     $395 = $ReallocAsyncCtx10 + 96 | 0; //@line 23985
     HEAP32[$395 >> 2] = $50; //@line 23986
     $396 = $ReallocAsyncCtx10 + 100 | 0; //@line 23987
     HEAP32[$396 >> 2] = $52; //@line 23988
     $397 = $ReallocAsyncCtx10 + 104 | 0; //@line 23989
     HEAP32[$397 >> 2] = $54; //@line 23990
     $398 = $ReallocAsyncCtx10 + 108 | 0; //@line 23991
     HEAP32[$398 >> 2] = $56; //@line 23992
     $399 = $ReallocAsyncCtx10 + 112 | 0; //@line 23993
     HEAP32[$399 >> 2] = $58; //@line 23994
     $400 = $ReallocAsyncCtx10 + 116 | 0; //@line 23995
     HEAP32[$400 >> 2] = $60; //@line 23996
     $401 = $ReallocAsyncCtx10 + 120 | 0; //@line 23997
     HEAP32[$401 >> 2] = $62; //@line 23998
     $402 = $ReallocAsyncCtx10 + 124 | 0; //@line 23999
     HEAP32[$402 >> 2] = $161; //@line 24000
     $403 = $ReallocAsyncCtx10 + 128 | 0; //@line 24001
     HEAP32[$403 >> 2] = $66; //@line 24002
     $404 = $ReallocAsyncCtx10 + 132 | 0; //@line 24003
     HEAP32[$404 >> 2] = $68; //@line 24004
     $405 = $ReallocAsyncCtx10 + 136 | 0; //@line 24005
     HEAP32[$405 >> 2] = $70; //@line 24006
     $406 = $ReallocAsyncCtx10 + 140 | 0; //@line 24007
     HEAP32[$406 >> 2] = $72; //@line 24008
     $407 = $ReallocAsyncCtx10 + 144 | 0; //@line 24009
     HEAP32[$407 >> 2] = $74; //@line 24010
     $408 = $ReallocAsyncCtx10 + 148 | 0; //@line 24011
     HEAP32[$408 >> 2] = $76; //@line 24012
     $409 = $ReallocAsyncCtx10 + 152 | 0; //@line 24013
     HEAP32[$409 >> 2] = $78; //@line 24014
     $410 = $ReallocAsyncCtx10 + 156 | 0; //@line 24015
     HEAP32[$410 >> 2] = $80; //@line 24016
     $411 = $ReallocAsyncCtx10 + 160 | 0; //@line 24017
     HEAP32[$411 >> 2] = $82; //@line 24018
     $412 = $ReallocAsyncCtx10 + 164 | 0; //@line 24019
     HEAP32[$412 >> 2] = $84; //@line 24020
     $413 = $ReallocAsyncCtx10 + 168 | 0; //@line 24021
     HEAP32[$413 >> 2] = $86; //@line 24022
     $414 = $ReallocAsyncCtx10 + 172 | 0; //@line 24023
     HEAP32[$414 >> 2] = $88; //@line 24024
     $415 = $ReallocAsyncCtx10 + 176 | 0; //@line 24025
     HEAP32[$415 >> 2] = $90; //@line 24026
     $416 = $ReallocAsyncCtx10 + 180 | 0; //@line 24027
     HEAP32[$416 >> 2] = $92; //@line 24028
     $417 = $ReallocAsyncCtx10 + 184 | 0; //@line 24029
     HEAP32[$417 >> 2] = $94; //@line 24030
     $418 = $ReallocAsyncCtx10 + 188 | 0; //@line 24031
     HEAP32[$418 >> 2] = $96; //@line 24032
     $419 = $ReallocAsyncCtx10 + 192 | 0; //@line 24033
     HEAP32[$419 >> 2] = $98; //@line 24034
     $420 = $ReallocAsyncCtx10 + 196 | 0; //@line 24035
     HEAP32[$420 >> 2] = $100; //@line 24036
     $421 = $ReallocAsyncCtx10 + 200 | 0; //@line 24037
     HEAP32[$421 >> 2] = $102; //@line 24038
     $422 = $ReallocAsyncCtx10 + 204 | 0; //@line 24039
     HEAP32[$422 >> 2] = $104; //@line 24040
     $423 = $ReallocAsyncCtx10 + 208 | 0; //@line 24041
     HEAP32[$423 >> 2] = $106; //@line 24042
     $424 = $ReallocAsyncCtx10 + 212 | 0; //@line 24043
     HEAP32[$424 >> 2] = $110; //@line 24044
     $425 = $ReallocAsyncCtx10 + 216 | 0; //@line 24045
     HEAP32[$425 >> 2] = $112; //@line 24046
     $426 = $ReallocAsyncCtx10 + 220 | 0; //@line 24047
     HEAP32[$426 >> 2] = $114; //@line 24048
     $427 = $ReallocAsyncCtx10 + 224 | 0; //@line 24049
     HEAP32[$427 >> 2] = $116; //@line 24050
     $428 = $ReallocAsyncCtx10 + 228 | 0; //@line 24051
     HEAP32[$428 >> 2] = $118; //@line 24052
     $429 = $ReallocAsyncCtx10 + 232 | 0; //@line 24053
     HEAP32[$429 >> 2] = $120; //@line 24054
     $430 = $ReallocAsyncCtx10 + 236 | 0; //@line 24055
     HEAP32[$430 >> 2] = $122; //@line 24056
     $431 = $ReallocAsyncCtx10 + 240 | 0; //@line 24057
     HEAP32[$431 >> 2] = $124; //@line 24058
     $432 = $ReallocAsyncCtx10 + 244 | 0; //@line 24059
     HEAP32[$432 >> 2] = $126; //@line 24060
     $433 = $ReallocAsyncCtx10 + 248 | 0; //@line 24061
     HEAP32[$433 >> 2] = $128; //@line 24062
     $434 = $ReallocAsyncCtx10 + 252 | 0; //@line 24063
     HEAP32[$434 >> 2] = $130; //@line 24064
     $435 = $ReallocAsyncCtx10 + 256 | 0; //@line 24065
     HEAP32[$435 >> 2] = $132; //@line 24066
     $436 = $ReallocAsyncCtx10 + 260 | 0; //@line 24067
     HEAP32[$436 >> 2] = $134; //@line 24068
     $437 = $ReallocAsyncCtx10 + 264 | 0; //@line 24069
     HEAP32[$437 >> 2] = $136; //@line 24070
     sp = STACKTOP; //@line 24071
     return;
    }
   case 43:
    {
     $439 = $$1202$in$i & 65535; //@line 24076
     if (($$1202$i + -1 & 65535) <= 254) {
      $442 = HEAP32[$130 >> 2] | 0; //@line 24080
      if (!(HEAP32[$442 + 52 >> 2] | 0)) {
       HEAP16[$442 + 4 >> 1] = $$1202$i; //@line 24086
       $447 = $193 + 1 | 0; //@line 24087
       HEAP32[$36 >> 2] = $447; //@line 24088
       $448 = HEAP32[$132 >> 2] | 0; //@line 24089
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 24090
       $449 = FUNCTION_TABLE_ii[$448 & 31]($$1202$i) | 0; //@line 24091
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 24094
        $450 = $ReallocAsyncCtx5 + 4 | 0; //@line 24095
        HEAP32[$450 >> 2] = $2; //@line 24096
        $451 = $ReallocAsyncCtx5 + 8 | 0; //@line 24097
        HEAP32[$451 >> 2] = $4; //@line 24098
        $452 = $ReallocAsyncCtx5 + 12 | 0; //@line 24099
        HEAP32[$452 >> 2] = $6; //@line 24100
        $453 = $ReallocAsyncCtx5 + 16 | 0; //@line 24101
        HEAP32[$453 >> 2] = $8; //@line 24102
        $454 = $ReallocAsyncCtx5 + 20 | 0; //@line 24103
        HEAP32[$454 >> 2] = $10; //@line 24104
        $455 = $ReallocAsyncCtx5 + 24 | 0; //@line 24105
        HEAP32[$455 >> 2] = $12; //@line 24106
        $456 = $ReallocAsyncCtx5 + 28 | 0; //@line 24107
        HEAP32[$456 >> 2] = $14; //@line 24108
        $457 = $ReallocAsyncCtx5 + 32 | 0; //@line 24109
        HEAP32[$457 >> 2] = $16; //@line 24110
        $458 = $ReallocAsyncCtx5 + 36 | 0; //@line 24111
        HEAP32[$458 >> 2] = $18; //@line 24112
        $459 = $ReallocAsyncCtx5 + 40 | 0; //@line 24113
        HEAP32[$459 >> 2] = $20; //@line 24114
        $460 = $ReallocAsyncCtx5 + 44 | 0; //@line 24115
        HEAP32[$460 >> 2] = $22; //@line 24116
        $461 = $ReallocAsyncCtx5 + 48 | 0; //@line 24117
        HEAP32[$461 >> 2] = $24; //@line 24118
        $462 = $ReallocAsyncCtx5 + 52 | 0; //@line 24119
        HEAP32[$462 >> 2] = $26; //@line 24120
        $463 = $ReallocAsyncCtx5 + 56 | 0; //@line 24121
        HEAP32[$463 >> 2] = $28; //@line 24122
        $464 = $ReallocAsyncCtx5 + 60 | 0; //@line 24123
        HEAP32[$464 >> 2] = $30; //@line 24124
        $465 = $ReallocAsyncCtx5 + 64 | 0; //@line 24125
        HEAP32[$465 >> 2] = $32; //@line 24126
        $466 = $ReallocAsyncCtx5 + 68 | 0; //@line 24127
        HEAP32[$466 >> 2] = $38; //@line 24128
        $467 = $ReallocAsyncCtx5 + 72 | 0; //@line 24129
        HEAP32[$467 >> 2] = $36; //@line 24130
        $468 = $ReallocAsyncCtx5 + 76 | 0; //@line 24131
        HEAP32[$468 >> 2] = $40; //@line 24132
        $469 = $ReallocAsyncCtx5 + 80 | 0; //@line 24133
        HEAP32[$469 >> 2] = $42; //@line 24134
        $470 = $ReallocAsyncCtx5 + 84 | 0; //@line 24135
        HEAP32[$470 >> 2] = $44; //@line 24136
        $471 = $ReallocAsyncCtx5 + 88 | 0; //@line 24137
        HEAP32[$471 >> 2] = $46; //@line 24138
        $472 = $ReallocAsyncCtx5 + 92 | 0; //@line 24139
        HEAP32[$472 >> 2] = $48; //@line 24140
        $473 = $ReallocAsyncCtx5 + 96 | 0; //@line 24141
        HEAP32[$473 >> 2] = $50; //@line 24142
        $474 = $ReallocAsyncCtx5 + 100 | 0; //@line 24143
        HEAP32[$474 >> 2] = $52; //@line 24144
        $475 = $ReallocAsyncCtx5 + 104 | 0; //@line 24145
        HEAP32[$475 >> 2] = $54; //@line 24146
        $476 = $ReallocAsyncCtx5 + 108 | 0; //@line 24147
        HEAP32[$476 >> 2] = $56; //@line 24148
        $477 = $ReallocAsyncCtx5 + 112 | 0; //@line 24149
        HEAP32[$477 >> 2] = $58; //@line 24150
        $478 = $ReallocAsyncCtx5 + 116 | 0; //@line 24151
        HEAP32[$478 >> 2] = $60; //@line 24152
        $479 = $ReallocAsyncCtx5 + 120 | 0; //@line 24153
        HEAP32[$479 >> 2] = $62; //@line 24154
        $480 = $ReallocAsyncCtx5 + 124 | 0; //@line 24155
        HEAP32[$480 >> 2] = $161; //@line 24156
        $481 = $ReallocAsyncCtx5 + 128 | 0; //@line 24157
        HEAP32[$481 >> 2] = $66; //@line 24158
        $482 = $ReallocAsyncCtx5 + 132 | 0; //@line 24159
        HEAP32[$482 >> 2] = $68; //@line 24160
        $483 = $ReallocAsyncCtx5 + 136 | 0; //@line 24161
        HEAP32[$483 >> 2] = $70; //@line 24162
        $484 = $ReallocAsyncCtx5 + 140 | 0; //@line 24163
        HEAP32[$484 >> 2] = $72; //@line 24164
        $485 = $ReallocAsyncCtx5 + 144 | 0; //@line 24165
        HEAP32[$485 >> 2] = $74; //@line 24166
        $486 = $ReallocAsyncCtx5 + 148 | 0; //@line 24167
        HEAP32[$486 >> 2] = $76; //@line 24168
        $487 = $ReallocAsyncCtx5 + 152 | 0; //@line 24169
        HEAP32[$487 >> 2] = $78; //@line 24170
        $488 = $ReallocAsyncCtx5 + 156 | 0; //@line 24171
        HEAP32[$488 >> 2] = $80; //@line 24172
        $489 = $ReallocAsyncCtx5 + 160 | 0; //@line 24173
        HEAP32[$489 >> 2] = $82; //@line 24174
        $490 = $ReallocAsyncCtx5 + 164 | 0; //@line 24175
        HEAP32[$490 >> 2] = $84; //@line 24176
        $491 = $ReallocAsyncCtx5 + 168 | 0; //@line 24177
        HEAP32[$491 >> 2] = $86; //@line 24178
        $492 = $ReallocAsyncCtx5 + 172 | 0; //@line 24179
        HEAP32[$492 >> 2] = $88; //@line 24180
        $493 = $ReallocAsyncCtx5 + 176 | 0; //@line 24181
        HEAP32[$493 >> 2] = $90; //@line 24182
        $494 = $ReallocAsyncCtx5 + 180 | 0; //@line 24183
        HEAP32[$494 >> 2] = $92; //@line 24184
        $495 = $ReallocAsyncCtx5 + 184 | 0; //@line 24185
        HEAP32[$495 >> 2] = $94; //@line 24186
        $496 = $ReallocAsyncCtx5 + 188 | 0; //@line 24187
        HEAP32[$496 >> 2] = $96; //@line 24188
        $497 = $ReallocAsyncCtx5 + 192 | 0; //@line 24189
        HEAP32[$497 >> 2] = $439; //@line 24190
        $498 = $ReallocAsyncCtx5 + 196 | 0; //@line 24191
        HEAP32[$498 >> 2] = $98; //@line 24192
        $499 = $ReallocAsyncCtx5 + 200 | 0; //@line 24193
        HEAP32[$499 >> 2] = $100; //@line 24194
        $500 = $ReallocAsyncCtx5 + 204 | 0; //@line 24195
        HEAP32[$500 >> 2] = $447; //@line 24196
        $501 = $ReallocAsyncCtx5 + 208 | 0; //@line 24197
        HEAP32[$501 >> 2] = $102; //@line 24198
        $502 = $ReallocAsyncCtx5 + 212 | 0; //@line 24199
        HEAP32[$502 >> 2] = $104; //@line 24200
        $503 = $ReallocAsyncCtx5 + 216 | 0; //@line 24201
        HEAP32[$503 >> 2] = $106; //@line 24202
        $504 = $ReallocAsyncCtx5 + 220 | 0; //@line 24203
        HEAP32[$504 >> 2] = $110; //@line 24204
        $505 = $ReallocAsyncCtx5 + 224 | 0; //@line 24205
        HEAP32[$505 >> 2] = $112; //@line 24206
        $506 = $ReallocAsyncCtx5 + 228 | 0; //@line 24207
        HEAP32[$506 >> 2] = $114; //@line 24208
        $507 = $ReallocAsyncCtx5 + 232 | 0; //@line 24209
        HEAP32[$507 >> 2] = $116; //@line 24210
        $508 = $ReallocAsyncCtx5 + 236 | 0; //@line 24211
        HEAP32[$508 >> 2] = $118; //@line 24212
        $509 = $ReallocAsyncCtx5 + 240 | 0; //@line 24213
        HEAP32[$509 >> 2] = $120; //@line 24214
        $510 = $ReallocAsyncCtx5 + 244 | 0; //@line 24215
        HEAP32[$510 >> 2] = $122; //@line 24216
        $511 = $ReallocAsyncCtx5 + 248 | 0; //@line 24217
        HEAP32[$511 >> 2] = $124; //@line 24218
        $512 = $ReallocAsyncCtx5 + 252 | 0; //@line 24219
        HEAP32[$512 >> 2] = $126; //@line 24220
        $513 = $ReallocAsyncCtx5 + 256 | 0; //@line 24221
        HEAP32[$513 >> 2] = $128; //@line 24222
        $514 = $ReallocAsyncCtx5 + 260 | 0; //@line 24223
        HEAP32[$514 >> 2] = $130; //@line 24224
        $515 = $ReallocAsyncCtx5 + 264 | 0; //@line 24225
        HEAP32[$515 >> 2] = $132; //@line 24226
        $516 = $ReallocAsyncCtx5 + 268 | 0; //@line 24227
        HEAP32[$516 >> 2] = $134; //@line 24228
        $517 = $ReallocAsyncCtx5 + 272 | 0; //@line 24229
        HEAP32[$517 >> 2] = $136; //@line 24230
        sp = STACKTOP; //@line 24231
        return;
       }
       HEAP32[___async_retval >> 2] = $449; //@line 24235
       ___async_unwind = 0; //@line 24236
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 24237
       $450 = $ReallocAsyncCtx5 + 4 | 0; //@line 24238
       HEAP32[$450 >> 2] = $2; //@line 24239
       $451 = $ReallocAsyncCtx5 + 8 | 0; //@line 24240
       HEAP32[$451 >> 2] = $4; //@line 24241
       $452 = $ReallocAsyncCtx5 + 12 | 0; //@line 24242
       HEAP32[$452 >> 2] = $6; //@line 24243
       $453 = $ReallocAsyncCtx5 + 16 | 0; //@line 24244
       HEAP32[$453 >> 2] = $8; //@line 24245
       $454 = $ReallocAsyncCtx5 + 20 | 0; //@line 24246
       HEAP32[$454 >> 2] = $10; //@line 24247
       $455 = $ReallocAsyncCtx5 + 24 | 0; //@line 24248
       HEAP32[$455 >> 2] = $12; //@line 24249
       $456 = $ReallocAsyncCtx5 + 28 | 0; //@line 24250
       HEAP32[$456 >> 2] = $14; //@line 24251
       $457 = $ReallocAsyncCtx5 + 32 | 0; //@line 24252
       HEAP32[$457 >> 2] = $16; //@line 24253
       $458 = $ReallocAsyncCtx5 + 36 | 0; //@line 24254
       HEAP32[$458 >> 2] = $18; //@line 24255
       $459 = $ReallocAsyncCtx5 + 40 | 0; //@line 24256
       HEAP32[$459 >> 2] = $20; //@line 24257
       $460 = $ReallocAsyncCtx5 + 44 | 0; //@line 24258
       HEAP32[$460 >> 2] = $22; //@line 24259
       $461 = $ReallocAsyncCtx5 + 48 | 0; //@line 24260
       HEAP32[$461 >> 2] = $24; //@line 24261
       $462 = $ReallocAsyncCtx5 + 52 | 0; //@line 24262
       HEAP32[$462 >> 2] = $26; //@line 24263
       $463 = $ReallocAsyncCtx5 + 56 | 0; //@line 24264
       HEAP32[$463 >> 2] = $28; //@line 24265
       $464 = $ReallocAsyncCtx5 + 60 | 0; //@line 24266
       HEAP32[$464 >> 2] = $30; //@line 24267
       $465 = $ReallocAsyncCtx5 + 64 | 0; //@line 24268
       HEAP32[$465 >> 2] = $32; //@line 24269
       $466 = $ReallocAsyncCtx5 + 68 | 0; //@line 24270
       HEAP32[$466 >> 2] = $38; //@line 24271
       $467 = $ReallocAsyncCtx5 + 72 | 0; //@line 24272
       HEAP32[$467 >> 2] = $36; //@line 24273
       $468 = $ReallocAsyncCtx5 + 76 | 0; //@line 24274
       HEAP32[$468 >> 2] = $40; //@line 24275
       $469 = $ReallocAsyncCtx5 + 80 | 0; //@line 24276
       HEAP32[$469 >> 2] = $42; //@line 24277
       $470 = $ReallocAsyncCtx5 + 84 | 0; //@line 24278
       HEAP32[$470 >> 2] = $44; //@line 24279
       $471 = $ReallocAsyncCtx5 + 88 | 0; //@line 24280
       HEAP32[$471 >> 2] = $46; //@line 24281
       $472 = $ReallocAsyncCtx5 + 92 | 0; //@line 24282
       HEAP32[$472 >> 2] = $48; //@line 24283
       $473 = $ReallocAsyncCtx5 + 96 | 0; //@line 24284
       HEAP32[$473 >> 2] = $50; //@line 24285
       $474 = $ReallocAsyncCtx5 + 100 | 0; //@line 24286
       HEAP32[$474 >> 2] = $52; //@line 24287
       $475 = $ReallocAsyncCtx5 + 104 | 0; //@line 24288
       HEAP32[$475 >> 2] = $54; //@line 24289
       $476 = $ReallocAsyncCtx5 + 108 | 0; //@line 24290
       HEAP32[$476 >> 2] = $56; //@line 24291
       $477 = $ReallocAsyncCtx5 + 112 | 0; //@line 24292
       HEAP32[$477 >> 2] = $58; //@line 24293
       $478 = $ReallocAsyncCtx5 + 116 | 0; //@line 24294
       HEAP32[$478 >> 2] = $60; //@line 24295
       $479 = $ReallocAsyncCtx5 + 120 | 0; //@line 24296
       HEAP32[$479 >> 2] = $62; //@line 24297
       $480 = $ReallocAsyncCtx5 + 124 | 0; //@line 24298
       HEAP32[$480 >> 2] = $161; //@line 24299
       $481 = $ReallocAsyncCtx5 + 128 | 0; //@line 24300
       HEAP32[$481 >> 2] = $66; //@line 24301
       $482 = $ReallocAsyncCtx5 + 132 | 0; //@line 24302
       HEAP32[$482 >> 2] = $68; //@line 24303
       $483 = $ReallocAsyncCtx5 + 136 | 0; //@line 24304
       HEAP32[$483 >> 2] = $70; //@line 24305
       $484 = $ReallocAsyncCtx5 + 140 | 0; //@line 24306
       HEAP32[$484 >> 2] = $72; //@line 24307
       $485 = $ReallocAsyncCtx5 + 144 | 0; //@line 24308
       HEAP32[$485 >> 2] = $74; //@line 24309
       $486 = $ReallocAsyncCtx5 + 148 | 0; //@line 24310
       HEAP32[$486 >> 2] = $76; //@line 24311
       $487 = $ReallocAsyncCtx5 + 152 | 0; //@line 24312
       HEAP32[$487 >> 2] = $78; //@line 24313
       $488 = $ReallocAsyncCtx5 + 156 | 0; //@line 24314
       HEAP32[$488 >> 2] = $80; //@line 24315
       $489 = $ReallocAsyncCtx5 + 160 | 0; //@line 24316
       HEAP32[$489 >> 2] = $82; //@line 24317
       $490 = $ReallocAsyncCtx5 + 164 | 0; //@line 24318
       HEAP32[$490 >> 2] = $84; //@line 24319
       $491 = $ReallocAsyncCtx5 + 168 | 0; //@line 24320
       HEAP32[$491 >> 2] = $86; //@line 24321
       $492 = $ReallocAsyncCtx5 + 172 | 0; //@line 24322
       HEAP32[$492 >> 2] = $88; //@line 24323
       $493 = $ReallocAsyncCtx5 + 176 | 0; //@line 24324
       HEAP32[$493 >> 2] = $90; //@line 24325
       $494 = $ReallocAsyncCtx5 + 180 | 0; //@line 24326
       HEAP32[$494 >> 2] = $92; //@line 24327
       $495 = $ReallocAsyncCtx5 + 184 | 0; //@line 24328
       HEAP32[$495 >> 2] = $94; //@line 24329
       $496 = $ReallocAsyncCtx5 + 188 | 0; //@line 24330
       HEAP32[$496 >> 2] = $96; //@line 24331
       $497 = $ReallocAsyncCtx5 + 192 | 0; //@line 24332
       HEAP32[$497 >> 2] = $439; //@line 24333
       $498 = $ReallocAsyncCtx5 + 196 | 0; //@line 24334
       HEAP32[$498 >> 2] = $98; //@line 24335
       $499 = $ReallocAsyncCtx5 + 200 | 0; //@line 24336
       HEAP32[$499 >> 2] = $100; //@line 24337
       $500 = $ReallocAsyncCtx5 + 204 | 0; //@line 24338
       HEAP32[$500 >> 2] = $447; //@line 24339
       $501 = $ReallocAsyncCtx5 + 208 | 0; //@line 24340
       HEAP32[$501 >> 2] = $102; //@line 24341
       $502 = $ReallocAsyncCtx5 + 212 | 0; //@line 24342
       HEAP32[$502 >> 2] = $104; //@line 24343
       $503 = $ReallocAsyncCtx5 + 216 | 0; //@line 24344
       HEAP32[$503 >> 2] = $106; //@line 24345
       $504 = $ReallocAsyncCtx5 + 220 | 0; //@line 24346
       HEAP32[$504 >> 2] = $110; //@line 24347
       $505 = $ReallocAsyncCtx5 + 224 | 0; //@line 24348
       HEAP32[$505 >> 2] = $112; //@line 24349
       $506 = $ReallocAsyncCtx5 + 228 | 0; //@line 24350
       HEAP32[$506 >> 2] = $114; //@line 24351
       $507 = $ReallocAsyncCtx5 + 232 | 0; //@line 24352
       HEAP32[$507 >> 2] = $116; //@line 24353
       $508 = $ReallocAsyncCtx5 + 236 | 0; //@line 24354
       HEAP32[$508 >> 2] = $118; //@line 24355
       $509 = $ReallocAsyncCtx5 + 240 | 0; //@line 24356
       HEAP32[$509 >> 2] = $120; //@line 24357
       $510 = $ReallocAsyncCtx5 + 244 | 0; //@line 24358
       HEAP32[$510 >> 2] = $122; //@line 24359
       $511 = $ReallocAsyncCtx5 + 248 | 0; //@line 24360
       HEAP32[$511 >> 2] = $124; //@line 24361
       $512 = $ReallocAsyncCtx5 + 252 | 0; //@line 24362
       HEAP32[$512 >> 2] = $126; //@line 24363
       $513 = $ReallocAsyncCtx5 + 256 | 0; //@line 24364
       HEAP32[$513 >> 2] = $128; //@line 24365
       $514 = $ReallocAsyncCtx5 + 260 | 0; //@line 24366
       HEAP32[$514 >> 2] = $130; //@line 24367
       $515 = $ReallocAsyncCtx5 + 264 | 0; //@line 24368
       HEAP32[$515 >> 2] = $132; //@line 24369
       $516 = $ReallocAsyncCtx5 + 268 | 0; //@line 24370
       HEAP32[$516 >> 2] = $134; //@line 24371
       $517 = $ReallocAsyncCtx5 + 272 | 0; //@line 24372
       HEAP32[$517 >> 2] = $136; //@line 24373
       sp = STACKTOP; //@line 24374
       return;
      }
     }
     _mbed_tracef(2, 3803, 4564, $118); //@line 24378
     break L2;
     break;
    }
   case 49:
    {
     $519 = HEAP32[$130 >> 2] | 0; //@line 24383
     $520 = $519 + 56 | 0; //@line 24384
     if (HEAP32[$520 >> 2] | 0) {
      _mbed_tracef(2, 3803, 4698, $96); //@line 24388
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 24392
     $524 = _sn_coap_parser_options_parse_multiple_options($2, $36, $179, $520, $519 + 6 | 0, 8, $$1202$i) | 0; //@line 24393
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 24396
      $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 24397
      HEAP32[$525 >> 2] = $2; //@line 24398
      $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 24399
      HEAP32[$526 >> 2] = $4; //@line 24400
      $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 24401
      HEAP32[$527 >> 2] = $6; //@line 24402
      $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 24403
      HEAP32[$528 >> 2] = $8; //@line 24404
      $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 24405
      HEAP32[$529 >> 2] = $10; //@line 24406
      $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 24407
      HEAP32[$530 >> 2] = $12; //@line 24408
      $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 24409
      HEAP32[$531 >> 2] = $14; //@line 24410
      $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 24411
      HEAP32[$532 >> 2] = $16; //@line 24412
      $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 24413
      HEAP32[$533 >> 2] = $18; //@line 24414
      $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 24415
      HEAP32[$534 >> 2] = $20; //@line 24416
      $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 24417
      HEAP32[$535 >> 2] = $22; //@line 24418
      $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 24419
      HEAP32[$536 >> 2] = $24; //@line 24420
      $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 24421
      HEAP32[$537 >> 2] = $26; //@line 24422
      $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 24423
      HEAP32[$538 >> 2] = $28; //@line 24424
      $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 24425
      HEAP32[$539 >> 2] = $30; //@line 24426
      $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 24427
      HEAP32[$540 >> 2] = $32; //@line 24428
      $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 24429
      HEAP32[$541 >> 2] = $38; //@line 24430
      $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 24431
      HEAP32[$542 >> 2] = $36; //@line 24432
      $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 24433
      HEAP32[$543 >> 2] = $40; //@line 24434
      $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 24435
      HEAP32[$544 >> 2] = $42; //@line 24436
      $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 24437
      HEAP32[$545 >> 2] = $44; //@line 24438
      $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 24439
      HEAP32[$546 >> 2] = $46; //@line 24440
      $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 24441
      HEAP32[$547 >> 2] = $48; //@line 24442
      $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 24443
      HEAP32[$548 >> 2] = $50; //@line 24444
      $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 24445
      HEAP32[$549 >> 2] = $52; //@line 24446
      $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 24447
      HEAP32[$550 >> 2] = $54; //@line 24448
      $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 24449
      HEAP32[$551 >> 2] = $56; //@line 24450
      $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 24451
      HEAP32[$552 >> 2] = $58; //@line 24452
      $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 24453
      HEAP32[$553 >> 2] = $60; //@line 24454
      $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 24455
      HEAP32[$554 >> 2] = $62; //@line 24456
      $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 24457
      HEAP32[$555 >> 2] = $161; //@line 24458
      $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 24459
      HEAP32[$556 >> 2] = $66; //@line 24460
      $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 24461
      HEAP32[$557 >> 2] = $68; //@line 24462
      $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 24463
      HEAP32[$558 >> 2] = $70; //@line 24464
      $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 24465
      HEAP32[$559 >> 2] = $72; //@line 24466
      $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 24467
      HEAP32[$560 >> 2] = $74; //@line 24468
      $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 24469
      HEAP32[$561 >> 2] = $76; //@line 24470
      $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 24471
      HEAP32[$562 >> 2] = $78; //@line 24472
      $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 24473
      HEAP32[$563 >> 2] = $80; //@line 24474
      $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 24475
      HEAP32[$564 >> 2] = $82; //@line 24476
      $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 24477
      HEAP32[$565 >> 2] = $84; //@line 24478
      $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 24479
      HEAP32[$566 >> 2] = $86; //@line 24480
      $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 24481
      HEAP32[$567 >> 2] = $88; //@line 24482
      $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 24483
      HEAP32[$568 >> 2] = $90; //@line 24484
      $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 24485
      HEAP32[$569 >> 2] = $92; //@line 24486
      $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 24487
      HEAP32[$570 >> 2] = $94; //@line 24488
      $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 24489
      HEAP32[$571 >> 2] = $96; //@line 24490
      $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 24491
      HEAP32[$572 >> 2] = $98; //@line 24492
      $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 24493
      HEAP32[$573 >> 2] = $100; //@line 24494
      $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 24495
      HEAP32[$574 >> 2] = $102; //@line 24496
      $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 24497
      HEAP32[$575 >> 2] = $104; //@line 24498
      $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 24499
      HEAP32[$576 >> 2] = $106; //@line 24500
      $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 24501
      HEAP32[$577 >> 2] = $110; //@line 24502
      $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 24503
      HEAP32[$578 >> 2] = $112; //@line 24504
      $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 24505
      HEAP32[$579 >> 2] = $114; //@line 24506
      $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 24507
      HEAP32[$580 >> 2] = $116; //@line 24508
      $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 24509
      HEAP32[$581 >> 2] = $118; //@line 24510
      $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 24511
      HEAP32[$582 >> 2] = $120; //@line 24512
      $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 24513
      HEAP32[$583 >> 2] = $122; //@line 24514
      $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 24515
      HEAP32[$584 >> 2] = $124; //@line 24516
      $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 24517
      HEAP32[$585 >> 2] = $126; //@line 24518
      $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 24519
      HEAP32[$586 >> 2] = $128; //@line 24520
      $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 24521
      HEAP32[$587 >> 2] = $130; //@line 24522
      $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 24523
      HEAP32[$588 >> 2] = $132; //@line 24524
      $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 24525
      HEAP32[$589 >> 2] = $134; //@line 24526
      $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 24527
      HEAP32[$590 >> 2] = $136; //@line 24528
      sp = STACKTOP; //@line 24529
      return;
     }
     HEAP8[___async_retval >> 0] = $524; //@line 24533
     ___async_unwind = 0; //@line 24534
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 24535
     $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 24536
     HEAP32[$525 >> 2] = $2; //@line 24537
     $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 24538
     HEAP32[$526 >> 2] = $4; //@line 24539
     $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 24540
     HEAP32[$527 >> 2] = $6; //@line 24541
     $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 24542
     HEAP32[$528 >> 2] = $8; //@line 24543
     $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 24544
     HEAP32[$529 >> 2] = $10; //@line 24545
     $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 24546
     HEAP32[$530 >> 2] = $12; //@line 24547
     $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 24548
     HEAP32[$531 >> 2] = $14; //@line 24549
     $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 24550
     HEAP32[$532 >> 2] = $16; //@line 24551
     $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 24552
     HEAP32[$533 >> 2] = $18; //@line 24553
     $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 24554
     HEAP32[$534 >> 2] = $20; //@line 24555
     $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 24556
     HEAP32[$535 >> 2] = $22; //@line 24557
     $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 24558
     HEAP32[$536 >> 2] = $24; //@line 24559
     $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 24560
     HEAP32[$537 >> 2] = $26; //@line 24561
     $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 24562
     HEAP32[$538 >> 2] = $28; //@line 24563
     $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 24564
     HEAP32[$539 >> 2] = $30; //@line 24565
     $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 24566
     HEAP32[$540 >> 2] = $32; //@line 24567
     $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 24568
     HEAP32[$541 >> 2] = $38; //@line 24569
     $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 24570
     HEAP32[$542 >> 2] = $36; //@line 24571
     $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 24572
     HEAP32[$543 >> 2] = $40; //@line 24573
     $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 24574
     HEAP32[$544 >> 2] = $42; //@line 24575
     $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 24576
     HEAP32[$545 >> 2] = $44; //@line 24577
     $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 24578
     HEAP32[$546 >> 2] = $46; //@line 24579
     $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 24580
     HEAP32[$547 >> 2] = $48; //@line 24581
     $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 24582
     HEAP32[$548 >> 2] = $50; //@line 24583
     $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 24584
     HEAP32[$549 >> 2] = $52; //@line 24585
     $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 24586
     HEAP32[$550 >> 2] = $54; //@line 24587
     $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 24588
     HEAP32[$551 >> 2] = $56; //@line 24589
     $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 24590
     HEAP32[$552 >> 2] = $58; //@line 24591
     $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 24592
     HEAP32[$553 >> 2] = $60; //@line 24593
     $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 24594
     HEAP32[$554 >> 2] = $62; //@line 24595
     $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 24596
     HEAP32[$555 >> 2] = $161; //@line 24597
     $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 24598
     HEAP32[$556 >> 2] = $66; //@line 24599
     $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 24600
     HEAP32[$557 >> 2] = $68; //@line 24601
     $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 24602
     HEAP32[$558 >> 2] = $70; //@line 24603
     $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 24604
     HEAP32[$559 >> 2] = $72; //@line 24605
     $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 24606
     HEAP32[$560 >> 2] = $74; //@line 24607
     $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 24608
     HEAP32[$561 >> 2] = $76; //@line 24609
     $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 24610
     HEAP32[$562 >> 2] = $78; //@line 24611
     $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 24612
     HEAP32[$563 >> 2] = $80; //@line 24613
     $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 24614
     HEAP32[$564 >> 2] = $82; //@line 24615
     $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 24616
     HEAP32[$565 >> 2] = $84; //@line 24617
     $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 24618
     HEAP32[$566 >> 2] = $86; //@line 24619
     $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 24620
     HEAP32[$567 >> 2] = $88; //@line 24621
     $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 24622
     HEAP32[$568 >> 2] = $90; //@line 24623
     $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 24624
     HEAP32[$569 >> 2] = $92; //@line 24625
     $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 24626
     HEAP32[$570 >> 2] = $94; //@line 24627
     $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 24628
     HEAP32[$571 >> 2] = $96; //@line 24629
     $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 24630
     HEAP32[$572 >> 2] = $98; //@line 24631
     $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 24632
     HEAP32[$573 >> 2] = $100; //@line 24633
     $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 24634
     HEAP32[$574 >> 2] = $102; //@line 24635
     $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 24636
     HEAP32[$575 >> 2] = $104; //@line 24637
     $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 24638
     HEAP32[$576 >> 2] = $106; //@line 24639
     $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 24640
     HEAP32[$577 >> 2] = $110; //@line 24641
     $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 24642
     HEAP32[$578 >> 2] = $112; //@line 24643
     $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 24644
     HEAP32[$579 >> 2] = $114; //@line 24645
     $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 24646
     HEAP32[$580 >> 2] = $116; //@line 24647
     $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 24648
     HEAP32[$581 >> 2] = $118; //@line 24649
     $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 24650
     HEAP32[$582 >> 2] = $120; //@line 24651
     $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 24652
     HEAP32[$583 >> 2] = $122; //@line 24653
     $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 24654
     HEAP32[$584 >> 2] = $124; //@line 24655
     $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 24656
     HEAP32[$585 >> 2] = $126; //@line 24657
     $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 24658
     HEAP32[$586 >> 2] = $128; //@line 24659
     $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 24660
     HEAP32[$587 >> 2] = $130; //@line 24661
     $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 24662
     HEAP32[$588 >> 2] = $132; //@line 24663
     $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 24664
     HEAP32[$589 >> 2] = $134; //@line 24665
     $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 24666
     HEAP32[$590 >> 2] = $136; //@line 24667
     sp = STACKTOP; //@line 24668
     return;
    }
   case 56:
    {
     _mbed_tracef(2, 3803, 4831, $68); //@line 24673
     break L2;
     break;
    }
   case 60:
    {
     $608 = HEAP32[$130 >> 2] | 0; //@line 24678
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 24681
     $611 = _sn_coap_parser_options_parse_multiple_options($2, $36, $179, $608 + 60 | 0, $608 + 8 | 0, 20, $$1202$i) | 0; //@line 24682
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 24685
      $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 24686
      HEAP32[$612 >> 2] = $2; //@line 24687
      $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 24688
      HEAP32[$613 >> 2] = $4; //@line 24689
      $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 24690
      HEAP32[$614 >> 2] = $6; //@line 24691
      $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 24692
      HEAP32[$615 >> 2] = $8; //@line 24693
      $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 24694
      HEAP32[$616 >> 2] = $10; //@line 24695
      $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 24696
      HEAP32[$617 >> 2] = $12; //@line 24697
      $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 24698
      HEAP32[$618 >> 2] = $14; //@line 24699
      $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 24700
      HEAP32[$619 >> 2] = $16; //@line 24701
      $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 24702
      HEAP32[$620 >> 2] = $18; //@line 24703
      $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 24704
      HEAP32[$621 >> 2] = $20; //@line 24705
      $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 24706
      HEAP32[$622 >> 2] = $22; //@line 24707
      $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 24708
      HEAP32[$623 >> 2] = $24; //@line 24709
      $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 24710
      HEAP32[$624 >> 2] = $26; //@line 24711
      $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 24712
      HEAP32[$625 >> 2] = $28; //@line 24713
      $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 24714
      HEAP32[$626 >> 2] = $30; //@line 24715
      $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 24716
      HEAP32[$627 >> 2] = $32; //@line 24717
      $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 24718
      HEAP32[$628 >> 2] = $38; //@line 24719
      $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 24720
      HEAP32[$629 >> 2] = $36; //@line 24721
      $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 24722
      HEAP32[$630 >> 2] = $40; //@line 24723
      $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 24724
      HEAP32[$631 >> 2] = $42; //@line 24725
      $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 24726
      HEAP32[$632 >> 2] = $44; //@line 24727
      $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 24728
      HEAP32[$633 >> 2] = $46; //@line 24729
      $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 24730
      HEAP32[$634 >> 2] = $48; //@line 24731
      $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 24732
      HEAP32[$635 >> 2] = $50; //@line 24733
      $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 24734
      HEAP32[$636 >> 2] = $52; //@line 24735
      $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 24736
      HEAP32[$637 >> 2] = $54; //@line 24737
      $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 24738
      HEAP32[$638 >> 2] = $56; //@line 24739
      $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 24740
      HEAP32[$639 >> 2] = $58; //@line 24741
      $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 24742
      HEAP32[$640 >> 2] = $60; //@line 24743
      $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 24744
      HEAP32[$641 >> 2] = $62; //@line 24745
      $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 24746
      HEAP32[$642 >> 2] = $161; //@line 24747
      $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 24748
      HEAP32[$643 >> 2] = $66; //@line 24749
      $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 24750
      HEAP32[$644 >> 2] = $68; //@line 24751
      $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 24752
      HEAP32[$645 >> 2] = $70; //@line 24753
      $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 24754
      HEAP32[$646 >> 2] = $72; //@line 24755
      $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 24756
      HEAP32[$647 >> 2] = $74; //@line 24757
      $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 24758
      HEAP32[$648 >> 2] = $76; //@line 24759
      $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 24760
      HEAP32[$649 >> 2] = $78; //@line 24761
      $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 24762
      HEAP32[$650 >> 2] = $80; //@line 24763
      $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 24764
      HEAP32[$651 >> 2] = $82; //@line 24765
      $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 24766
      HEAP32[$652 >> 2] = $84; //@line 24767
      $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 24768
      HEAP32[$653 >> 2] = $86; //@line 24769
      $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 24770
      HEAP32[$654 >> 2] = $88; //@line 24771
      $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 24772
      HEAP32[$655 >> 2] = $90; //@line 24773
      $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 24774
      HEAP32[$656 >> 2] = $92; //@line 24775
      $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 24776
      HEAP32[$657 >> 2] = $94; //@line 24777
      $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 24778
      HEAP32[$658 >> 2] = $96; //@line 24779
      $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 24780
      HEAP32[$659 >> 2] = $98; //@line 24781
      $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 24782
      HEAP32[$660 >> 2] = $100; //@line 24783
      $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 24784
      HEAP32[$661 >> 2] = $102; //@line 24785
      $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 24786
      HEAP32[$662 >> 2] = $104; //@line 24787
      $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 24788
      HEAP32[$663 >> 2] = $106; //@line 24789
      $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 24790
      HEAP32[$664 >> 2] = $110; //@line 24791
      $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 24792
      HEAP32[$665 >> 2] = $112; //@line 24793
      $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 24794
      HEAP32[$666 >> 2] = $114; //@line 24795
      $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 24796
      HEAP32[$667 >> 2] = $116; //@line 24797
      $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 24798
      HEAP32[$668 >> 2] = $118; //@line 24799
      $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 24800
      HEAP32[$669 >> 2] = $120; //@line 24801
      $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 24802
      HEAP32[$670 >> 2] = $122; //@line 24803
      $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 24804
      HEAP32[$671 >> 2] = $124; //@line 24805
      $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 24806
      HEAP32[$672 >> 2] = $126; //@line 24807
      $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 24808
      HEAP32[$673 >> 2] = $128; //@line 24809
      $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 24810
      HEAP32[$674 >> 2] = $130; //@line 24811
      $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 24812
      HEAP32[$675 >> 2] = $132; //@line 24813
      $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 24814
      HEAP32[$676 >> 2] = $134; //@line 24815
      $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 24816
      HEAP32[$677 >> 2] = $136; //@line 24817
      sp = STACKTOP; //@line 24818
      return;
     }
     HEAP8[___async_retval >> 0] = $611; //@line 24822
     ___async_unwind = 0; //@line 24823
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 24824
     $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 24825
     HEAP32[$612 >> 2] = $2; //@line 24826
     $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 24827
     HEAP32[$613 >> 2] = $4; //@line 24828
     $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 24829
     HEAP32[$614 >> 2] = $6; //@line 24830
     $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 24831
     HEAP32[$615 >> 2] = $8; //@line 24832
     $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 24833
     HEAP32[$616 >> 2] = $10; //@line 24834
     $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 24835
     HEAP32[$617 >> 2] = $12; //@line 24836
     $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 24837
     HEAP32[$618 >> 2] = $14; //@line 24838
     $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 24839
     HEAP32[$619 >> 2] = $16; //@line 24840
     $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 24841
     HEAP32[$620 >> 2] = $18; //@line 24842
     $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 24843
     HEAP32[$621 >> 2] = $20; //@line 24844
     $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 24845
     HEAP32[$622 >> 2] = $22; //@line 24846
     $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 24847
     HEAP32[$623 >> 2] = $24; //@line 24848
     $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 24849
     HEAP32[$624 >> 2] = $26; //@line 24850
     $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 24851
     HEAP32[$625 >> 2] = $28; //@line 24852
     $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 24853
     HEAP32[$626 >> 2] = $30; //@line 24854
     $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 24855
     HEAP32[$627 >> 2] = $32; //@line 24856
     $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 24857
     HEAP32[$628 >> 2] = $38; //@line 24858
     $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 24859
     HEAP32[$629 >> 2] = $36; //@line 24860
     $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 24861
     HEAP32[$630 >> 2] = $40; //@line 24862
     $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 24863
     HEAP32[$631 >> 2] = $42; //@line 24864
     $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 24865
     HEAP32[$632 >> 2] = $44; //@line 24866
     $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 24867
     HEAP32[$633 >> 2] = $46; //@line 24868
     $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 24869
     HEAP32[$634 >> 2] = $48; //@line 24870
     $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 24871
     HEAP32[$635 >> 2] = $50; //@line 24872
     $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 24873
     HEAP32[$636 >> 2] = $52; //@line 24874
     $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 24875
     HEAP32[$637 >> 2] = $54; //@line 24876
     $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 24877
     HEAP32[$638 >> 2] = $56; //@line 24878
     $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 24879
     HEAP32[$639 >> 2] = $58; //@line 24880
     $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 24881
     HEAP32[$640 >> 2] = $60; //@line 24882
     $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 24883
     HEAP32[$641 >> 2] = $62; //@line 24884
     $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 24885
     HEAP32[$642 >> 2] = $161; //@line 24886
     $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 24887
     HEAP32[$643 >> 2] = $66; //@line 24888
     $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 24889
     HEAP32[$644 >> 2] = $68; //@line 24890
     $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 24891
     HEAP32[$645 >> 2] = $70; //@line 24892
     $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 24893
     HEAP32[$646 >> 2] = $72; //@line 24894
     $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 24895
     HEAP32[$647 >> 2] = $74; //@line 24896
     $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 24897
     HEAP32[$648 >> 2] = $76; //@line 24898
     $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 24899
     HEAP32[$649 >> 2] = $78; //@line 24900
     $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 24901
     HEAP32[$650 >> 2] = $80; //@line 24902
     $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 24903
     HEAP32[$651 >> 2] = $82; //@line 24904
     $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 24905
     HEAP32[$652 >> 2] = $84; //@line 24906
     $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 24907
     HEAP32[$653 >> 2] = $86; //@line 24908
     $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 24909
     HEAP32[$654 >> 2] = $88; //@line 24910
     $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 24911
     HEAP32[$655 >> 2] = $90; //@line 24912
     $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 24913
     HEAP32[$656 >> 2] = $92; //@line 24914
     $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 24915
     HEAP32[$657 >> 2] = $94; //@line 24916
     $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 24917
     HEAP32[$658 >> 2] = $96; //@line 24918
     $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 24919
     HEAP32[$659 >> 2] = $98; //@line 24920
     $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 24921
     HEAP32[$660 >> 2] = $100; //@line 24922
     $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 24923
     HEAP32[$661 >> 2] = $102; //@line 24924
     $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 24925
     HEAP32[$662 >> 2] = $104; //@line 24926
     $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 24927
     HEAP32[$663 >> 2] = $106; //@line 24928
     $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 24929
     HEAP32[$664 >> 2] = $110; //@line 24930
     $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 24931
     HEAP32[$665 >> 2] = $112; //@line 24932
     $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 24933
     HEAP32[$666 >> 2] = $114; //@line 24934
     $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 24935
     HEAP32[$667 >> 2] = $116; //@line 24936
     $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 24937
     HEAP32[$668 >> 2] = $118; //@line 24938
     $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 24939
     HEAP32[$669 >> 2] = $120; //@line 24940
     $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 24941
     HEAP32[$670 >> 2] = $122; //@line 24942
     $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 24943
     HEAP32[$671 >> 2] = $124; //@line 24944
     $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 24945
     HEAP32[$672 >> 2] = $126; //@line 24946
     $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 24947
     HEAP32[$673 >> 2] = $128; //@line 24948
     $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 24949
     HEAP32[$674 >> 2] = $130; //@line 24950
     $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 24951
     HEAP32[$675 >> 2] = $132; //@line 24952
     $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 24953
     HEAP32[$676 >> 2] = $134; //@line 24954
     $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 24955
     HEAP32[$677 >> 2] = $136; //@line 24956
     sp = STACKTOP; //@line 24957
     return;
    }
   case 63:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 24962
     $679 = _sn_coap_parser_options_parse_multiple_options($2, $36, $179, $4, $22, 11, $$1202$i) | 0; //@line 24963
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 24966
      $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 24967
      HEAP32[$680 >> 2] = $2; //@line 24968
      $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 24969
      HEAP32[$681 >> 2] = $4; //@line 24970
      $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 24971
      HEAP32[$682 >> 2] = $6; //@line 24972
      $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 24973
      HEAP32[$683 >> 2] = $8; //@line 24974
      $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 24975
      HEAP32[$684 >> 2] = $10; //@line 24976
      $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 24977
      HEAP32[$685 >> 2] = $12; //@line 24978
      $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 24979
      HEAP32[$686 >> 2] = $14; //@line 24980
      $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 24981
      HEAP32[$687 >> 2] = $16; //@line 24982
      $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 24983
      HEAP32[$688 >> 2] = $18; //@line 24984
      $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 24985
      HEAP32[$689 >> 2] = $20; //@line 24986
      $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 24987
      HEAP32[$690 >> 2] = $22; //@line 24988
      $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 24989
      HEAP32[$691 >> 2] = $24; //@line 24990
      $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 24991
      HEAP32[$692 >> 2] = $26; //@line 24992
      $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 24993
      HEAP32[$693 >> 2] = $28; //@line 24994
      $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 24995
      HEAP32[$694 >> 2] = $30; //@line 24996
      $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 24997
      HEAP32[$695 >> 2] = $32; //@line 24998
      $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 24999
      HEAP32[$696 >> 2] = $38; //@line 25000
      $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 25001
      HEAP32[$697 >> 2] = $36; //@line 25002
      $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 25003
      HEAP32[$698 >> 2] = $40; //@line 25004
      $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 25005
      HEAP32[$699 >> 2] = $42; //@line 25006
      $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 25007
      HEAP32[$700 >> 2] = $44; //@line 25008
      $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 25009
      HEAP32[$701 >> 2] = $46; //@line 25010
      $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 25011
      HEAP32[$702 >> 2] = $48; //@line 25012
      $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 25013
      HEAP32[$703 >> 2] = $50; //@line 25014
      $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 25015
      HEAP32[$704 >> 2] = $52; //@line 25016
      $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 25017
      HEAP32[$705 >> 2] = $54; //@line 25018
      $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 25019
      HEAP32[$706 >> 2] = $56; //@line 25020
      $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 25021
      HEAP32[$707 >> 2] = $58; //@line 25022
      $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 25023
      HEAP32[$708 >> 2] = $60; //@line 25024
      $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 25025
      HEAP32[$709 >> 2] = $62; //@line 25026
      $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 25027
      HEAP32[$710 >> 2] = $161; //@line 25028
      $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 25029
      HEAP32[$711 >> 2] = $66; //@line 25030
      $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 25031
      HEAP32[$712 >> 2] = $68; //@line 25032
      $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 25033
      HEAP32[$713 >> 2] = $70; //@line 25034
      $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 25035
      HEAP32[$714 >> 2] = $72; //@line 25036
      $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 25037
      HEAP32[$715 >> 2] = $74; //@line 25038
      $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 25039
      HEAP32[$716 >> 2] = $76; //@line 25040
      $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 25041
      HEAP32[$717 >> 2] = $78; //@line 25042
      $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 25043
      HEAP32[$718 >> 2] = $80; //@line 25044
      $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 25045
      HEAP32[$719 >> 2] = $82; //@line 25046
      $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 25047
      HEAP32[$720 >> 2] = $84; //@line 25048
      $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 25049
      HEAP32[$721 >> 2] = $86; //@line 25050
      $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 25051
      HEAP32[$722 >> 2] = $88; //@line 25052
      $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 25053
      HEAP32[$723 >> 2] = $90; //@line 25054
      $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 25055
      HEAP32[$724 >> 2] = $92; //@line 25056
      $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 25057
      HEAP32[$725 >> 2] = $94; //@line 25058
      $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 25059
      HEAP32[$726 >> 2] = $96; //@line 25060
      $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 25061
      HEAP32[$727 >> 2] = $98; //@line 25062
      $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 25063
      HEAP32[$728 >> 2] = $100; //@line 25064
      $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 25065
      HEAP32[$729 >> 2] = $102; //@line 25066
      $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 25067
      HEAP32[$730 >> 2] = $104; //@line 25068
      $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 25069
      HEAP32[$731 >> 2] = $106; //@line 25070
      $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 25071
      HEAP32[$732 >> 2] = $110; //@line 25072
      $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 25073
      HEAP32[$733 >> 2] = $112; //@line 25074
      $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 25075
      HEAP32[$734 >> 2] = $114; //@line 25076
      $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 25077
      HEAP32[$735 >> 2] = $116; //@line 25078
      $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 25079
      HEAP32[$736 >> 2] = $118; //@line 25080
      $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 25081
      HEAP32[$737 >> 2] = $120; //@line 25082
      $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 25083
      HEAP32[$738 >> 2] = $122; //@line 25084
      $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 25085
      HEAP32[$739 >> 2] = $124; //@line 25086
      $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 25087
      HEAP32[$740 >> 2] = $126; //@line 25088
      $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 25089
      HEAP32[$741 >> 2] = $128; //@line 25090
      $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 25091
      HEAP32[$742 >> 2] = $130; //@line 25092
      $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 25093
      HEAP32[$743 >> 2] = $132; //@line 25094
      $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 25095
      HEAP32[$744 >> 2] = $134; //@line 25096
      $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 25097
      HEAP32[$745 >> 2] = $136; //@line 25098
      sp = STACKTOP; //@line 25099
      return;
     }
     HEAP8[___async_retval >> 0] = $679; //@line 25103
     ___async_unwind = 0; //@line 25104
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 25105
     $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 25106
     HEAP32[$680 >> 2] = $2; //@line 25107
     $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 25108
     HEAP32[$681 >> 2] = $4; //@line 25109
     $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 25110
     HEAP32[$682 >> 2] = $6; //@line 25111
     $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 25112
     HEAP32[$683 >> 2] = $8; //@line 25113
     $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 25114
     HEAP32[$684 >> 2] = $10; //@line 25115
     $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 25116
     HEAP32[$685 >> 2] = $12; //@line 25117
     $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 25118
     HEAP32[$686 >> 2] = $14; //@line 25119
     $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 25120
     HEAP32[$687 >> 2] = $16; //@line 25121
     $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 25122
     HEAP32[$688 >> 2] = $18; //@line 25123
     $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 25124
     HEAP32[$689 >> 2] = $20; //@line 25125
     $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 25126
     HEAP32[$690 >> 2] = $22; //@line 25127
     $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 25128
     HEAP32[$691 >> 2] = $24; //@line 25129
     $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 25130
     HEAP32[$692 >> 2] = $26; //@line 25131
     $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 25132
     HEAP32[$693 >> 2] = $28; //@line 25133
     $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 25134
     HEAP32[$694 >> 2] = $30; //@line 25135
     $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 25136
     HEAP32[$695 >> 2] = $32; //@line 25137
     $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 25138
     HEAP32[$696 >> 2] = $38; //@line 25139
     $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 25140
     HEAP32[$697 >> 2] = $36; //@line 25141
     $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 25142
     HEAP32[$698 >> 2] = $40; //@line 25143
     $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 25144
     HEAP32[$699 >> 2] = $42; //@line 25145
     $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 25146
     HEAP32[$700 >> 2] = $44; //@line 25147
     $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 25148
     HEAP32[$701 >> 2] = $46; //@line 25149
     $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 25150
     HEAP32[$702 >> 2] = $48; //@line 25151
     $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 25152
     HEAP32[$703 >> 2] = $50; //@line 25153
     $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 25154
     HEAP32[$704 >> 2] = $52; //@line 25155
     $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 25156
     HEAP32[$705 >> 2] = $54; //@line 25157
     $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 25158
     HEAP32[$706 >> 2] = $56; //@line 25159
     $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 25160
     HEAP32[$707 >> 2] = $58; //@line 25161
     $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 25162
     HEAP32[$708 >> 2] = $60; //@line 25163
     $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 25164
     HEAP32[$709 >> 2] = $62; //@line 25165
     $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 25166
     HEAP32[$710 >> 2] = $161; //@line 25167
     $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 25168
     HEAP32[$711 >> 2] = $66; //@line 25169
     $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 25170
     HEAP32[$712 >> 2] = $68; //@line 25171
     $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 25172
     HEAP32[$713 >> 2] = $70; //@line 25173
     $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 25174
     HEAP32[$714 >> 2] = $72; //@line 25175
     $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 25176
     HEAP32[$715 >> 2] = $74; //@line 25177
     $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 25178
     HEAP32[$716 >> 2] = $76; //@line 25179
     $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 25180
     HEAP32[$717 >> 2] = $78; //@line 25181
     $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 25182
     HEAP32[$718 >> 2] = $80; //@line 25183
     $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 25184
     HEAP32[$719 >> 2] = $82; //@line 25185
     $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 25186
     HEAP32[$720 >> 2] = $84; //@line 25187
     $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 25188
     HEAP32[$721 >> 2] = $86; //@line 25189
     $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 25190
     HEAP32[$722 >> 2] = $88; //@line 25191
     $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 25192
     HEAP32[$723 >> 2] = $90; //@line 25193
     $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 25194
     HEAP32[$724 >> 2] = $92; //@line 25195
     $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 25196
     HEAP32[$725 >> 2] = $94; //@line 25197
     $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 25198
     HEAP32[$726 >> 2] = $96; //@line 25199
     $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 25200
     HEAP32[$727 >> 2] = $98; //@line 25201
     $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 25202
     HEAP32[$728 >> 2] = $100; //@line 25203
     $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 25204
     HEAP32[$729 >> 2] = $102; //@line 25205
     $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 25206
     HEAP32[$730 >> 2] = $104; //@line 25207
     $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 25208
     HEAP32[$731 >> 2] = $106; //@line 25209
     $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 25210
     HEAP32[$732 >> 2] = $110; //@line 25211
     $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 25212
     HEAP32[$733 >> 2] = $112; //@line 25213
     $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 25214
     HEAP32[$734 >> 2] = $114; //@line 25215
     $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 25216
     HEAP32[$735 >> 2] = $116; //@line 25217
     $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 25218
     HEAP32[$736 >> 2] = $118; //@line 25219
     $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 25220
     HEAP32[$737 >> 2] = $120; //@line 25221
     $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 25222
     HEAP32[$738 >> 2] = $122; //@line 25223
     $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 25224
     HEAP32[$739 >> 2] = $124; //@line 25225
     $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 25226
     HEAP32[$740 >> 2] = $126; //@line 25227
     $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 25228
     HEAP32[$741 >> 2] = $128; //@line 25229
     $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 25230
     HEAP32[$742 >> 2] = $130; //@line 25231
     $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 25232
     HEAP32[$743 >> 2] = $132; //@line 25233
     $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 25234
     HEAP32[$744 >> 2] = $134; //@line 25235
     $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 25236
     HEAP32[$745 >> 2] = $136; //@line 25237
     sp = STACKTOP; //@line 25238
     return;
    }
   case 68:
    {
     _mbed_tracef(2, 3803, 5026, $50); //@line 25243
     break L2;
     break;
    }
   case 72:
    {
     $763 = HEAP32[$130 >> 2] | 0; //@line 25248
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 25251
     $766 = _sn_coap_parser_options_parse_multiple_options($2, $36, $179, $763 + 64 | 0, $763 + 10 | 0, 15, $$1202$i) | 0; //@line 25252
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 25255
      $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 25256
      HEAP32[$767 >> 2] = $2; //@line 25257
      $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 25258
      HEAP32[$768 >> 2] = $4; //@line 25259
      $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 25260
      HEAP32[$769 >> 2] = $6; //@line 25261
      $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 25262
      HEAP32[$770 >> 2] = $8; //@line 25263
      $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 25264
      HEAP32[$771 >> 2] = $10; //@line 25265
      $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 25266
      HEAP32[$772 >> 2] = $12; //@line 25267
      $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 25268
      HEAP32[$773 >> 2] = $14; //@line 25269
      $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 25270
      HEAP32[$774 >> 2] = $16; //@line 25271
      $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 25272
      HEAP32[$775 >> 2] = $18; //@line 25273
      $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 25274
      HEAP32[$776 >> 2] = $20; //@line 25275
      $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 25276
      HEAP32[$777 >> 2] = $22; //@line 25277
      $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 25278
      HEAP32[$778 >> 2] = $24; //@line 25279
      $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 25280
      HEAP32[$779 >> 2] = $26; //@line 25281
      $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 25282
      HEAP32[$780 >> 2] = $28; //@line 25283
      $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 25284
      HEAP32[$781 >> 2] = $30; //@line 25285
      $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 25286
      HEAP32[$782 >> 2] = $32; //@line 25287
      $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 25288
      HEAP32[$783 >> 2] = $38; //@line 25289
      $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 25290
      HEAP32[$784 >> 2] = $36; //@line 25291
      $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 25292
      HEAP32[$785 >> 2] = $40; //@line 25293
      $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 25294
      HEAP32[$786 >> 2] = $42; //@line 25295
      $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 25296
      HEAP32[$787 >> 2] = $44; //@line 25297
      $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 25298
      HEAP32[$788 >> 2] = $46; //@line 25299
      $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 25300
      HEAP32[$789 >> 2] = $48; //@line 25301
      $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 25302
      HEAP32[$790 >> 2] = $50; //@line 25303
      $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 25304
      HEAP32[$791 >> 2] = $52; //@line 25305
      $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 25306
      HEAP32[$792 >> 2] = $54; //@line 25307
      $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 25308
      HEAP32[$793 >> 2] = $56; //@line 25309
      $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 25310
      HEAP32[$794 >> 2] = $58; //@line 25311
      $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 25312
      HEAP32[$795 >> 2] = $60; //@line 25313
      $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 25314
      HEAP32[$796 >> 2] = $62; //@line 25315
      $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 25316
      HEAP32[$797 >> 2] = $161; //@line 25317
      $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 25318
      HEAP32[$798 >> 2] = $66; //@line 25319
      $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 25320
      HEAP32[$799 >> 2] = $68; //@line 25321
      $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 25322
      HEAP32[$800 >> 2] = $70; //@line 25323
      $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 25324
      HEAP32[$801 >> 2] = $72; //@line 25325
      $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 25326
      HEAP32[$802 >> 2] = $74; //@line 25327
      $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 25328
      HEAP32[$803 >> 2] = $76; //@line 25329
      $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 25330
      HEAP32[$804 >> 2] = $78; //@line 25331
      $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 25332
      HEAP32[$805 >> 2] = $80; //@line 25333
      $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 25334
      HEAP32[$806 >> 2] = $82; //@line 25335
      $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 25336
      HEAP32[$807 >> 2] = $84; //@line 25337
      $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 25338
      HEAP32[$808 >> 2] = $86; //@line 25339
      $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 25340
      HEAP32[$809 >> 2] = $88; //@line 25341
      $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 25342
      HEAP32[$810 >> 2] = $90; //@line 25343
      $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 25344
      HEAP32[$811 >> 2] = $92; //@line 25345
      $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 25346
      HEAP32[$812 >> 2] = $94; //@line 25347
      $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 25348
      HEAP32[$813 >> 2] = $96; //@line 25349
      $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 25350
      HEAP32[$814 >> 2] = $98; //@line 25351
      $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 25352
      HEAP32[$815 >> 2] = $100; //@line 25353
      $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 25354
      HEAP32[$816 >> 2] = $102; //@line 25355
      $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 25356
      HEAP32[$817 >> 2] = $104; //@line 25357
      $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 25358
      HEAP32[$818 >> 2] = $106; //@line 25359
      $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 25360
      HEAP32[$819 >> 2] = $110; //@line 25361
      $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 25362
      HEAP32[$820 >> 2] = $112; //@line 25363
      $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 25364
      HEAP32[$821 >> 2] = $114; //@line 25365
      $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 25366
      HEAP32[$822 >> 2] = $116; //@line 25367
      $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 25368
      HEAP32[$823 >> 2] = $118; //@line 25369
      $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 25370
      HEAP32[$824 >> 2] = $120; //@line 25371
      $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 25372
      HEAP32[$825 >> 2] = $122; //@line 25373
      $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 25374
      HEAP32[$826 >> 2] = $124; //@line 25375
      $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 25376
      HEAP32[$827 >> 2] = $126; //@line 25377
      $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 25378
      HEAP32[$828 >> 2] = $128; //@line 25379
      $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 25380
      HEAP32[$829 >> 2] = $130; //@line 25381
      $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 25382
      HEAP32[$830 >> 2] = $132; //@line 25383
      $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 25384
      HEAP32[$831 >> 2] = $134; //@line 25385
      $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 25386
      HEAP32[$832 >> 2] = $136; //@line 25387
      sp = STACKTOP; //@line 25388
      return;
     }
     HEAP8[___async_retval >> 0] = $766; //@line 25392
     ___async_unwind = 0; //@line 25393
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 25394
     $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 25395
     HEAP32[$767 >> 2] = $2; //@line 25396
     $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 25397
     HEAP32[$768 >> 2] = $4; //@line 25398
     $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 25399
     HEAP32[$769 >> 2] = $6; //@line 25400
     $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 25401
     HEAP32[$770 >> 2] = $8; //@line 25402
     $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 25403
     HEAP32[$771 >> 2] = $10; //@line 25404
     $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 25405
     HEAP32[$772 >> 2] = $12; //@line 25406
     $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 25407
     HEAP32[$773 >> 2] = $14; //@line 25408
     $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 25409
     HEAP32[$774 >> 2] = $16; //@line 25410
     $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 25411
     HEAP32[$775 >> 2] = $18; //@line 25412
     $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 25413
     HEAP32[$776 >> 2] = $20; //@line 25414
     $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 25415
     HEAP32[$777 >> 2] = $22; //@line 25416
     $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 25417
     HEAP32[$778 >> 2] = $24; //@line 25418
     $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 25419
     HEAP32[$779 >> 2] = $26; //@line 25420
     $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 25421
     HEAP32[$780 >> 2] = $28; //@line 25422
     $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 25423
     HEAP32[$781 >> 2] = $30; //@line 25424
     $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 25425
     HEAP32[$782 >> 2] = $32; //@line 25426
     $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 25427
     HEAP32[$783 >> 2] = $38; //@line 25428
     $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 25429
     HEAP32[$784 >> 2] = $36; //@line 25430
     $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 25431
     HEAP32[$785 >> 2] = $40; //@line 25432
     $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 25433
     HEAP32[$786 >> 2] = $42; //@line 25434
     $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 25435
     HEAP32[$787 >> 2] = $44; //@line 25436
     $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 25437
     HEAP32[$788 >> 2] = $46; //@line 25438
     $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 25439
     HEAP32[$789 >> 2] = $48; //@line 25440
     $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 25441
     HEAP32[$790 >> 2] = $50; //@line 25442
     $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 25443
     HEAP32[$791 >> 2] = $52; //@line 25444
     $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 25445
     HEAP32[$792 >> 2] = $54; //@line 25446
     $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 25447
     HEAP32[$793 >> 2] = $56; //@line 25448
     $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 25449
     HEAP32[$794 >> 2] = $58; //@line 25450
     $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 25451
     HEAP32[$795 >> 2] = $60; //@line 25452
     $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 25453
     HEAP32[$796 >> 2] = $62; //@line 25454
     $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 25455
     HEAP32[$797 >> 2] = $161; //@line 25456
     $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 25457
     HEAP32[$798 >> 2] = $66; //@line 25458
     $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 25459
     HEAP32[$799 >> 2] = $68; //@line 25460
     $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 25461
     HEAP32[$800 >> 2] = $70; //@line 25462
     $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 25463
     HEAP32[$801 >> 2] = $72; //@line 25464
     $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 25465
     HEAP32[$802 >> 2] = $74; //@line 25466
     $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 25467
     HEAP32[$803 >> 2] = $76; //@line 25468
     $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 25469
     HEAP32[$804 >> 2] = $78; //@line 25470
     $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 25471
     HEAP32[$805 >> 2] = $80; //@line 25472
     $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 25473
     HEAP32[$806 >> 2] = $82; //@line 25474
     $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 25475
     HEAP32[$807 >> 2] = $84; //@line 25476
     $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 25477
     HEAP32[$808 >> 2] = $86; //@line 25478
     $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 25479
     HEAP32[$809 >> 2] = $88; //@line 25480
     $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 25481
     HEAP32[$810 >> 2] = $90; //@line 25482
     $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 25483
     HEAP32[$811 >> 2] = $92; //@line 25484
     $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 25485
     HEAP32[$812 >> 2] = $94; //@line 25486
     $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 25487
     HEAP32[$813 >> 2] = $96; //@line 25488
     $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 25489
     HEAP32[$814 >> 2] = $98; //@line 25490
     $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 25491
     HEAP32[$815 >> 2] = $100; //@line 25492
     $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 25493
     HEAP32[$816 >> 2] = $102; //@line 25494
     $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 25495
     HEAP32[$817 >> 2] = $104; //@line 25496
     $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 25497
     HEAP32[$818 >> 2] = $106; //@line 25498
     $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 25499
     HEAP32[$819 >> 2] = $110; //@line 25500
     $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 25501
     HEAP32[$820 >> 2] = $112; //@line 25502
     $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 25503
     HEAP32[$821 >> 2] = $114; //@line 25504
     $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 25505
     HEAP32[$822 >> 2] = $116; //@line 25506
     $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 25507
     HEAP32[$823 >> 2] = $118; //@line 25508
     $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 25509
     HEAP32[$824 >> 2] = $120; //@line 25510
     $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 25511
     HEAP32[$825 >> 2] = $122; //@line 25512
     $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 25513
     HEAP32[$826 >> 2] = $124; //@line 25514
     $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 25515
     HEAP32[$827 >> 2] = $126; //@line 25516
     $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 25517
     HEAP32[$828 >> 2] = $128; //@line 25518
     $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 25519
     HEAP32[$829 >> 2] = $130; //@line 25520
     $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 25521
     HEAP32[$830 >> 2] = $132; //@line 25522
     $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 25523
     HEAP32[$831 >> 2] = $134; //@line 25524
     $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 25525
     HEAP32[$832 >> 2] = $136; //@line 25526
     sp = STACKTOP; //@line 25527
     return;
    }
   case 77:
    {
     _mbed_tracef(2, 3803, 5152, $48); //@line 25532
     break L2;
     break;
    }
   case 83:
    {
     _mbed_tracef(2, 3803, 5213, $20); //@line 25537
     break L2;
     break;
    }
   case 89:
    {
     _mbed_tracef(2, 3803, 5274, $74); //@line 25542
     break L2;
     break;
    }
   case 95:
    {
     _mbed_tracef(2, 3803, 5335, $62); //@line 25547
     break L2;
     break;
    }
   case 101:
    {
     _mbed_tracef(2, 3803, 5395, $124); //@line 25552
     break L2;
     break;
    }
   case 105:
    {
     _mbed_tracef(2, 3803, 5455, $76); //@line 25557
     break L2;
     break;
    }
   case 108:
    {
     if (($141 - $94 | 0) >= ($82 | 0)) {
      $943 = ___async_retval; //@line 25566
      HEAP32[$943 >> 2] = $40; //@line 25567
      return;
     }
     if ((HEAP8[$141 >> 0] | 0) == -1) {
      $933 = $141 + 1 | 0; //@line 25573
      HEAP32[$36 >> 2] = $933; //@line 25574
      $934 = $933; //@line 25575
      $936 = $94 - $934 + $82 | 0; //@line 25577
      HEAP16[$84 + 24 >> 1] = $936; //@line 25580
      if ($936 & 65535 | 0) {
       HEAP32[$84 + 36 >> 2] = $934; //@line 25585
       $943 = ___async_retval; //@line 25586
       HEAP32[$943 >> 2] = $40; //@line 25587
       return;
      }
     } else {
      _mbed_tracef(2, 3803, 5502, $52); //@line 25591
     }
     HEAP32[$84 + 4 >> 2] = 1; //@line 25594
     $943 = ___async_retval; //@line 25595
     HEAP32[$943 >> 2] = $40; //@line 25596
     return;
    }
   }
  }
 } while (0);
 HEAP32[$84 + 4 >> 2] = 1; //@line 25604
 $943 = ___async_retval; //@line 25605
 HEAP32[$943 >> 2] = $40; //@line 25606
 return;
}
function _sn_coap_parser__async_cb_26($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $260 = 0, $261 = 0, $266 = 0, $269 = 0, $272 = 0, $273 = 0, $278 = 0, $28 = 0, $281 = 0, $285 = 0, $288 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $365 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $435 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $519 = 0, $52 = 0, $520 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $594 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $603 = 0, $606 = 0, $608 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $749 = 0, $752 = 0, $753 = 0, $758 = 0, $76 = 0, $761 = 0, $763 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $845 = 0, $848 = 0, $852 = 0, $855 = 0, $856 = 0, $86 = 0, $861 = 0, $864 = 0, $868 = 0, $871 = 0, $872 = 0, $877 = 0, $88 = 0, $880 = 0, $884 = 0, $885 = 0, $890 = 0, $891 = 0, $896 = 0, $899 = 0, $90 = 0, $905 = 0, $906 = 0, $911 = 0, $912 = 0, $917 = 0, $92 = 0, $920 = 0, $924 = 0, $925 = 0, $933 = 0, $934 = 0, $936 = 0, $94 = 0, $943 = 0, $944 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $278$looptemp = 0, $603$looptemp = 0, $758$looptemp = 0, $845$looptemp = 0, $861$looptemp = 0, $877$looptemp = 0, $896$looptemp = 0, $917$looptemp = 0, $266$looptemp = 0;
 sp = STACKTOP; //@line 25662
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25664
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25666
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25668
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25670
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25672
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25674
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25676
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25678
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25680
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25682
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25684
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25686
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25688
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25690
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25692
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25694
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25696
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 25698
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 25700
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 25702
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 25704
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 25706
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 25708
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 25710
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 25712
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 25714
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 25716
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 25718
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 25720
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 25722
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 25724
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 25726
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 25728
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 25730
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 25732
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 25734
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 25736
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 25738
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 25740
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 25742
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 25744
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 25746
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 25748
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 25750
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 25752
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 25754
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 25756
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 25758
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 25760
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 25762
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 25764
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 25766
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 25768
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 25770
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 25772
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 25774
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 25776
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 25778
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 25780
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 25782
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 25784
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 25786
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 25788
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 25790
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 25792
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 25794
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 25796
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 25798
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25800
 HEAP32[(HEAP32[$130 >> 2] | 0) + 52 >> 2] = $AsyncRetVal; //@line 25803
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3803, 4627, $8); //@line 25807
  } else {
   _memcpy($AsyncRetVal | 0, $102 | 0, $96 | 0) | 0; //@line 25809
   HEAP32[$36 >> 2] = $102 + $96; //@line 25811
   $$reg2mem$0 = $62; //@line 25812
   L5 : while (1) {
    $924 = HEAP32[$68 >> 2] | 0; //@line 25814
    $925 = $924 - $92 | 0; //@line 25815
    $141 = $924; //@line 25818
    if (($925 | 0) > ($80 | 0)) {
     break L2;
    }
    if (!(($80 - $925 & 65535) << 16 >> 16)) {
     label = 108; //@line 25825
     break;
    }
    $trunc277$i = HEAP8[$141 >> 0] | 0; //@line 25828
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 108; //@line 25831
     break;
    }
    $144 = $trunc277$i & 15; //@line 25835
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 25836
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 25841
      break L5;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$141 + 1 >> 0] | 0; //@line 25849
      $$sink214$i = 13; //@line 25849
      $$sink3$i = 1; //@line 25849
      label = 8; //@line 25850
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$141 + 1 >> 0] << 8) + 269 | 0; //@line 25862
      $$sink214$i = HEAPU8[$141 + 2 >> 0] | 0; //@line 25862
      $$sink3$i = 2; //@line 25862
      label = 8; //@line 25863
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 25867
      $163 = $141; //@line 25867
      $944 = $924; //@line 25867
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 25871
     $158 = $141 + $$sink3$i | 0; //@line 25873
     HEAP32[$36 >> 2] = $158; //@line 25874
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 25876
     $163 = $158; //@line 25876
     $944 = $158; //@line 25876
    }
    $161 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 25879
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 25883
      break L5;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$163 + 1 >> 0] | 0; //@line 25891
      $$sink216$i = 13; //@line 25891
      $$sink8$i = 1; //@line 25891
      label = 13; //@line 25892
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$163 + 1 >> 0] << 8) + 269 | 0; //@line 25904
      $$sink216$i = HEAPU8[$163 + 2 >> 0] | 0; //@line 25904
      $$sink8$i = 2; //@line 25904
      label = 13; //@line 25905
      break;
     }
    default:
     {
      $$1202$in$i = $144; //@line 25909
      $178 = $944; //@line 25909
      $193 = $163; //@line 25909
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 25913
     $175 = $163 + $$sink8$i | 0; //@line 25915
     HEAP32[$36 >> 2] = $175; //@line 25916
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 25918
     $178 = $175; //@line 25918
     $193 = $175; //@line 25918
    }
    $$1202$i = $$1202$in$i & 65535; //@line 25920
    $179 = $104 - $178 & 65535; //@line 25922
    $trunc$i = $161 & 65535; //@line 25923
    L22 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 63; //@line 25927
       break L5;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$130 >> 2] | 0)) {
        label = 16; //@line 25935
        break L5;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 25940
         break L5;
         break;
        }
       case 4:
        {
         label = 37; //@line 25945
         break L5;
         break;
        }
       case 3:
        {
         label = 40; //@line 25950
         break L5;
         break;
        }
       case 8:
        {
         label = 49; //@line 25955
         break L5;
         break;
        }
       case 20:
        {
         label = 60; //@line 25960
         break L5;
         break;
        }
       case 11:
        {
         label = 63; //@line 25965
         break L5;
         break;
        }
       case 15:
        {
         label = 72; //@line 25970
         break L5;
         break;
        }
       case 12:
        {
         break L22;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 25981
          break L5;
         }
         $272 = $193 + 1 | 0; //@line 25984
         HEAP32[$36 >> 2] = $272; //@line 25985
         $273 = $$1202$in$i & 255; //@line 25986
         if (!($273 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 25989
         } else {
          $$045$i221$i = $273; //@line 25991
          $$06$i220$i = 0; //@line 25991
          $278 = $272; //@line 25991
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 25993
           $278$looptemp = $278;
           $278 = $278 + 1 | 0; //@line 25995
           HEAP32[$36 >> 2] = $278; //@line 25996
           $281 = $$06$i220$i << 8 | HEAPU8[$278$looptemp >> 0]; //@line 25999
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $281; //@line 26002
            break;
           } else {
            $$06$i220$i = $281; //@line 26005
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 26011
         $$reg2mem$0 = $161; //@line 26012
         continue L5;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 56; //@line 26019
          break L5;
         }
         $594 = (HEAP32[$130 >> 2] | 0) + 28 | 0; //@line 26023
         if ((HEAP32[$594 >> 2] | 0) != -1) {
          label = 56; //@line 26027
          break L5;
         }
         $597 = $193 + 1 | 0; //@line 26030
         HEAP32[$36 >> 2] = $597; //@line 26031
         $598 = $$1202$in$i & 255; //@line 26032
         if (!($598 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 26035
         } else {
          $$045$i263$i = $598; //@line 26037
          $$06$i262$i = 0; //@line 26037
          $603 = $597; //@line 26037
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 26039
           $603$looptemp = $603;
           $603 = $603 + 1 | 0; //@line 26041
           HEAP32[$36 >> 2] = $603; //@line 26042
           $606 = $$06$i262$i << 8 | HEAPU8[$603$looptemp >> 0]; //@line 26045
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $606; //@line 26048
            break;
           } else {
            $$06$i262$i = $606; //@line 26051
           }
          }
         }
         HEAP32[$594 >> 2] = $$0$lcssa$i265$i; //@line 26055
         $$reg2mem$0 = $161; //@line 26056
         continue L5;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 68; //@line 26063
          break L5;
         }
         $749 = (HEAP32[$130 >> 2] | 0) + 32 | 0; //@line 26067
         if ((HEAP32[$749 >> 2] | 0) != -1) {
          label = 68; //@line 26071
          break L5;
         }
         $752 = $193 + 1 | 0; //@line 26074
         HEAP32[$36 >> 2] = $752; //@line 26075
         $753 = $$1202$in$i & 255; //@line 26076
         if (!($753 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 26079
         } else {
          $$045$i270$i = $753; //@line 26081
          $$06$i269$i = 0; //@line 26081
          $758 = $752; //@line 26081
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 26083
           $758$looptemp = $758;
           $758 = $758 + 1 | 0; //@line 26085
           HEAP32[$36 >> 2] = $758; //@line 26086
           $761 = $$06$i269$i << 8 | HEAPU8[$758$looptemp >> 0]; //@line 26089
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $761; //@line 26092
            break;
           } else {
            $$06$i269$i = $761; //@line 26095
           }
          }
         }
         HEAP32[$749 >> 2] = $$0$lcssa$i272$i; //@line 26099
         $$reg2mem$0 = $161; //@line 26100
         continue L5;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 77; //@line 26107
          break L5;
         }
         $836 = (HEAP32[$130 >> 2] | 0) + 40 | 0; //@line 26111
         if ((HEAP32[$836 >> 2] | 0) != -1) {
          label = 77; //@line 26115
          break L5;
         }
         $839 = $193 + 1 | 0; //@line 26118
         HEAP32[$36 >> 2] = $839; //@line 26119
         $840 = $$1202$in$i & 255; //@line 26120
         if (!($840 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 26123
         } else {
          $$045$i256$i = $840; //@line 26125
          $$06$i255$i = 0; //@line 26125
          $845 = $839; //@line 26125
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 26127
           $845$looptemp = $845;
           $845 = $845 + 1 | 0; //@line 26129
           HEAP32[$36 >> 2] = $845; //@line 26130
           $848 = $$06$i255$i << 8 | HEAPU8[$845$looptemp >> 0]; //@line 26133
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $848; //@line 26136
            break;
           } else {
            $$06$i255$i = $848; //@line 26139
           }
          }
         }
         HEAP32[$836 >> 2] = $$0$lcssa$i258$i; //@line 26143
         $$reg2mem$0 = $161; //@line 26144
         continue L5;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 83; //@line 26151
          break L5;
         }
         $852 = (HEAP32[$130 >> 2] | 0) + 36 | 0; //@line 26155
         if ((HEAP32[$852 >> 2] | 0) != -1) {
          label = 83; //@line 26159
          break L5;
         }
         $855 = $193 + 1 | 0; //@line 26162
         HEAP32[$36 >> 2] = $855; //@line 26163
         $856 = $$1202$in$i & 255; //@line 26164
         if (!($856 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 26167
         } else {
          $$045$i249$i = $856; //@line 26169
          $$06$i248$i = 0; //@line 26169
          $861 = $855; //@line 26169
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 26171
           $861$looptemp = $861;
           $861 = $861 + 1 | 0; //@line 26173
           HEAP32[$36 >> 2] = $861; //@line 26174
           $864 = $$06$i248$i << 8 | HEAPU8[$861$looptemp >> 0]; //@line 26177
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $864; //@line 26180
            break;
           } else {
            $$06$i248$i = $864; //@line 26183
           }
          }
         }
         HEAP32[$852 >> 2] = $$0$lcssa$i251$i; //@line 26187
         $$reg2mem$0 = $161; //@line 26188
         continue L5;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 89; //@line 26195
          break L5;
         }
         $868 = (HEAP32[$130 >> 2] | 0) + 12 | 0; //@line 26199
         if ((HEAP32[$868 >> 2] | 0) != -1) {
          label = 89; //@line 26203
          break L5;
         }
         $871 = $193 + 1 | 0; //@line 26206
         HEAP32[$36 >> 2] = $871; //@line 26207
         $872 = $$1202$in$i & 255; //@line 26208
         if (!($872 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 26211
         } else {
          $$045$i242$i = $872; //@line 26213
          $$06$i241$i = 0; //@line 26213
          $877 = $871; //@line 26213
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 26215
           $877$looptemp = $877;
           $877 = $877 + 1 | 0; //@line 26217
           HEAP32[$36 >> 2] = $877; //@line 26218
           $880 = $$06$i241$i << 8 | HEAPU8[$877$looptemp >> 0]; //@line 26221
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $880; //@line 26224
            break;
           } else {
            $$06$i241$i = $880; //@line 26227
           }
          }
         }
         HEAP32[$868 >> 2] = $$0$lcssa$i244$i; //@line 26231
         $$reg2mem$0 = $161; //@line 26232
         continue L5;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 95; //@line 26239
          break L5;
         }
         $884 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 26243
         $885 = HEAP8[$884 >> 0] | 0; //@line 26244
         if ($885 & 1) {
          label = 95; //@line 26248
          break L5;
         }
         HEAP8[$884 >> 0] = $885 | 1; //@line 26252
         $890 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 26254
         HEAP32[$36 >> 2] = $890; //@line 26255
         $891 = $$1202$in$i & 255; //@line 26256
         if (!($891 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 26259
         } else {
          $$045$i235$i = $891; //@line 26261
          $$06$i234$i = 0; //@line 26261
          $896 = $890; //@line 26261
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 26263
           $896$looptemp = $896;
           $896 = $896 + 1 | 0; //@line 26265
           HEAP32[$36 >> 2] = $896; //@line 26266
           $899 = $$06$i234$i << 8 | HEAPU8[$896$looptemp >> 0]; //@line 26269
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $899; //@line 26272
            break;
           } else {
            $$06$i234$i = $899; //@line 26275
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 26281
         $$reg2mem$0 = $161; //@line 26282
         continue L5;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 101; //@line 26289
          break L5;
         }
         $905 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 26293
         $906 = HEAP8[$905 >> 0] | 0; //@line 26294
         if ($906 & 2) {
          label = 101; //@line 26298
          break L5;
         }
         HEAP8[$905 >> 0] = $906 | 2; //@line 26302
         $911 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 26304
         HEAP32[$36 >> 2] = $911; //@line 26305
         $912 = $$1202$in$i & 255; //@line 26306
         if (!($912 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 26309
         } else {
          $$045$i228$i = $912; //@line 26311
          $$06$i227$i = 0; //@line 26311
          $917 = $911; //@line 26311
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 26313
           $917$looptemp = $917;
           $917 = $917 + 1 | 0; //@line 26315
           HEAP32[$36 >> 2] = $917; //@line 26316
           $920 = $$06$i227$i << 8 | HEAPU8[$917$looptemp >> 0]; //@line 26319
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $920; //@line 26322
            break;
           } else {
            $$06$i227$i = $920; //@line 26325
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 26331
         $$reg2mem$0 = $161; //@line 26332
         continue L5;
         break;
        }
       default:
        {
         label = 105; //@line 26337
         break L5;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 105; //@line 26347
       break L5;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 26354
     break;
    }
    if ((HEAP32[$10 >> 2] | 0) != -1) {
     label = 22; //@line 26360
     break;
    }
    $260 = $193 + 1 | 0; //@line 26363
    HEAP32[$36 >> 2] = $260; //@line 26364
    $261 = $$1202$in$i & 255; //@line 26365
    if (!($261 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 26368
    } else {
     $$045$i$i = $261; //@line 26370
     $$06$i$i = 0; //@line 26370
     $266 = $260; //@line 26370
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 26372
      $266$looptemp = $266;
      $266 = $266 + 1 | 0; //@line 26374
      HEAP32[$36 >> 2] = $266; //@line 26375
      $269 = $$06$i$i << 8 | HEAPU8[$266$looptemp >> 0]; //@line 26378
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $269; //@line 26381
       break;
      } else {
       $$06$i$i = $269; //@line 26384
      }
     }
    }
    HEAP32[$10 >> 2] = $$0$lcssa$i$i; //@line 26388
    $$reg2mem$0 = $161; //@line 26389
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3803, 4066, $76); //@line 26393
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3803, 4124, $28); //@line 26398
     break L2;
     break;
    }
   case 16:
    {
     $182 = HEAP32[$132 >> 2] | 0; //@line 26403
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 26404
     $183 = FUNCTION_TABLE_ii[$182 & 31](68) | 0; //@line 26405
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 26408
      $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 26409
      HEAP32[$184 >> 2] = $2; //@line 26410
      $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 26411
      HEAP32[$185 >> 2] = $4; //@line 26412
      $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 26413
      HEAP32[$186 >> 2] = $6; //@line 26414
      $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 26415
      HEAP32[$187 >> 2] = $8; //@line 26416
      $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 26417
      HEAP32[$188 >> 2] = $10; //@line 26418
      $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 26419
      HEAP32[$189 >> 2] = $12; //@line 26420
      $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 26421
      HEAP32[$190 >> 2] = $14; //@line 26422
      $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 26423
      HEAP32[$191 >> 2] = $16; //@line 26424
      $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 26425
      HEAP32[$192 >> 2] = $193; //@line 26426
      $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 26427
      HEAP32[$194 >> 2] = $18; //@line 26428
      $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 26429
      HEAP32[$195 >> 2] = $20; //@line 26430
      $196 = $ReallocAsyncCtx3 + 48 | 0; //@line 26431
      HEAP32[$196 >> 2] = $22; //@line 26432
      $197 = $ReallocAsyncCtx3 + 52 | 0; //@line 26433
      HEAP32[$197 >> 2] = $24; //@line 26434
      $198 = $ReallocAsyncCtx3 + 56 | 0; //@line 26435
      HEAP32[$198 >> 2] = $26; //@line 26436
      $199 = $ReallocAsyncCtx3 + 60 | 0; //@line 26437
      HEAP32[$199 >> 2] = $28; //@line 26438
      $200 = $ReallocAsyncCtx3 + 64 | 0; //@line 26439
      HEAP32[$200 >> 2] = $30; //@line 26440
      $201 = $ReallocAsyncCtx3 + 68 | 0; //@line 26441
      HEAP32[$201 >> 2] = $32; //@line 26442
      $202 = $ReallocAsyncCtx3 + 72 | 0; //@line 26443
      HEAP32[$202 >> 2] = $34; //@line 26444
      $203 = $ReallocAsyncCtx3 + 76 | 0; //@line 26445
      HEAP32[$203 >> 2] = $36; //@line 26446
      $204 = $ReallocAsyncCtx3 + 80 | 0; //@line 26447
      HEAP32[$204 >> 2] = $38; //@line 26448
      $205 = $ReallocAsyncCtx3 + 84 | 0; //@line 26449
      HEAP32[$205 >> 2] = $$1202$in$i; //@line 26450
      $206 = $ReallocAsyncCtx3 + 88 | 0; //@line 26451
      HEAP32[$206 >> 2] = $42; //@line 26452
      $207 = $ReallocAsyncCtx3 + 92 | 0; //@line 26453
      HEAP32[$207 >> 2] = $44; //@line 26454
      $208 = $ReallocAsyncCtx3 + 96 | 0; //@line 26455
      HEAP16[$208 >> 1] = $$1202$i; //@line 26456
      $209 = $ReallocAsyncCtx3 + 100 | 0; //@line 26457
      HEAP32[$209 >> 2] = $46; //@line 26458
      $210 = $ReallocAsyncCtx3 + 104 | 0; //@line 26459
      HEAP32[$210 >> 2] = $48; //@line 26460
      $211 = $ReallocAsyncCtx3 + 108 | 0; //@line 26461
      HEAP32[$211 >> 2] = $50; //@line 26462
      $212 = $ReallocAsyncCtx3 + 112 | 0; //@line 26463
      HEAP32[$212 >> 2] = $52; //@line 26464
      $213 = $ReallocAsyncCtx3 + 116 | 0; //@line 26465
      HEAP32[$213 >> 2] = $54; //@line 26466
      $214 = $ReallocAsyncCtx3 + 120 | 0; //@line 26467
      HEAP32[$214 >> 2] = $40; //@line 26468
      $215 = $ReallocAsyncCtx3 + 124 | 0; //@line 26469
      HEAP32[$215 >> 2] = $56; //@line 26470
      $216 = $ReallocAsyncCtx3 + 128 | 0; //@line 26471
      HEAP32[$216 >> 2] = $58; //@line 26472
      $217 = $ReallocAsyncCtx3 + 132 | 0; //@line 26473
      HEAP32[$217 >> 2] = $60; //@line 26474
      $218 = $ReallocAsyncCtx3 + 136 | 0; //@line 26475
      HEAP32[$218 >> 2] = $161; //@line 26476
      $219 = $ReallocAsyncCtx3 + 140 | 0; //@line 26477
      HEAP32[$219 >> 2] = $64; //@line 26478
      $220 = $ReallocAsyncCtx3 + 144 | 0; //@line 26479
      HEAP32[$220 >> 2] = $66; //@line 26480
      $221 = $ReallocAsyncCtx3 + 148 | 0; //@line 26481
      HEAP32[$221 >> 2] = $68; //@line 26482
      $222 = $ReallocAsyncCtx3 + 152 | 0; //@line 26483
      HEAP32[$222 >> 2] = $70; //@line 26484
      $223 = $ReallocAsyncCtx3 + 156 | 0; //@line 26485
      HEAP16[$223 >> 1] = $179; //@line 26486
      $224 = $ReallocAsyncCtx3 + 160 | 0; //@line 26487
      HEAP32[$224 >> 2] = $72; //@line 26488
      $225 = $ReallocAsyncCtx3 + 164 | 0; //@line 26489
      HEAP32[$225 >> 2] = $74; //@line 26490
      $226 = $ReallocAsyncCtx3 + 168 | 0; //@line 26491
      HEAP32[$226 >> 2] = $76; //@line 26492
      $227 = $ReallocAsyncCtx3 + 172 | 0; //@line 26493
      HEAP32[$227 >> 2] = $78; //@line 26494
      $228 = $ReallocAsyncCtx3 + 176 | 0; //@line 26495
      HEAP32[$228 >> 2] = $80; //@line 26496
      $229 = $ReallocAsyncCtx3 + 180 | 0; //@line 26497
      HEAP32[$229 >> 2] = $82; //@line 26498
      $230 = $ReallocAsyncCtx3 + 184 | 0; //@line 26499
      HEAP32[$230 >> 2] = $84; //@line 26500
      $231 = $ReallocAsyncCtx3 + 188 | 0; //@line 26501
      HEAP32[$231 >> 2] = $86; //@line 26502
      $232 = $ReallocAsyncCtx3 + 192 | 0; //@line 26503
      HEAP32[$232 >> 2] = $88; //@line 26504
      $233 = $ReallocAsyncCtx3 + 196 | 0; //@line 26505
      HEAP32[$233 >> 2] = $90; //@line 26506
      $234 = $ReallocAsyncCtx3 + 200 | 0; //@line 26507
      HEAP32[$234 >> 2] = $92; //@line 26508
      $235 = $ReallocAsyncCtx3 + 204 | 0; //@line 26509
      HEAP32[$235 >> 2] = $94; //@line 26510
      $236 = $ReallocAsyncCtx3 + 208 | 0; //@line 26511
      HEAP32[$236 >> 2] = $98; //@line 26512
      $237 = $ReallocAsyncCtx3 + 212 | 0; //@line 26513
      HEAP32[$237 >> 2] = $100; //@line 26514
      $238 = $ReallocAsyncCtx3 + 216 | 0; //@line 26515
      HEAP32[$238 >> 2] = $104; //@line 26516
      $239 = $ReallocAsyncCtx3 + 220 | 0; //@line 26517
      HEAP32[$239 >> 2] = $106; //@line 26518
      $240 = $ReallocAsyncCtx3 + 224 | 0; //@line 26519
      HEAP32[$240 >> 2] = $108; //@line 26520
      $241 = $ReallocAsyncCtx3 + 228 | 0; //@line 26521
      HEAP32[$241 >> 2] = $110; //@line 26522
      $242 = $ReallocAsyncCtx3 + 232 | 0; //@line 26523
      HEAP32[$242 >> 2] = $112; //@line 26524
      $243 = $ReallocAsyncCtx3 + 236 | 0; //@line 26525
      HEAP32[$243 >> 2] = $114; //@line 26526
      $244 = $ReallocAsyncCtx3 + 240 | 0; //@line 26527
      HEAP32[$244 >> 2] = $116; //@line 26528
      $245 = $ReallocAsyncCtx3 + 244 | 0; //@line 26529
      HEAP32[$245 >> 2] = $118; //@line 26530
      $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 26531
      HEAP32[$246 >> 2] = $120; //@line 26532
      $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 26533
      HEAP32[$247 >> 2] = $122; //@line 26534
      $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 26535
      HEAP32[$248 >> 2] = $124; //@line 26536
      $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 26537
      HEAP32[$249 >> 2] = $126; //@line 26538
      $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 26539
      HEAP32[$250 >> 2] = $128; //@line 26540
      $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 26541
      HEAP32[$251 >> 2] = $130; //@line 26542
      $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 26543
      HEAP16[$252 >> 1] = $trunc$i; //@line 26544
      $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 26545
      HEAP32[$253 >> 2] = $132; //@line 26546
      $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 26547
      HEAP32[$254 >> 2] = $134; //@line 26548
      $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 26549
      HEAP32[$255 >> 2] = $136; //@line 26550
      sp = STACKTOP; //@line 26551
      return;
     }
     HEAP32[___async_retval >> 2] = $183; //@line 26555
     ___async_unwind = 0; //@line 26556
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 26557
     $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 26558
     HEAP32[$184 >> 2] = $2; //@line 26559
     $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 26560
     HEAP32[$185 >> 2] = $4; //@line 26561
     $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 26562
     HEAP32[$186 >> 2] = $6; //@line 26563
     $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 26564
     HEAP32[$187 >> 2] = $8; //@line 26565
     $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 26566
     HEAP32[$188 >> 2] = $10; //@line 26567
     $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 26568
     HEAP32[$189 >> 2] = $12; //@line 26569
     $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 26570
     HEAP32[$190 >> 2] = $14; //@line 26571
     $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 26572
     HEAP32[$191 >> 2] = $16; //@line 26573
     $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 26574
     HEAP32[$192 >> 2] = $193; //@line 26575
     $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 26576
     HEAP32[$194 >> 2] = $18; //@line 26577
     $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 26578
     HEAP32[$195 >> 2] = $20; //@line 26579
     $196 = $ReallocAsyncCtx3 + 48 | 0; //@line 26580
     HEAP32[$196 >> 2] = $22; //@line 26581
     $197 = $ReallocAsyncCtx3 + 52 | 0; //@line 26582
     HEAP32[$197 >> 2] = $24; //@line 26583
     $198 = $ReallocAsyncCtx3 + 56 | 0; //@line 26584
     HEAP32[$198 >> 2] = $26; //@line 26585
     $199 = $ReallocAsyncCtx3 + 60 | 0; //@line 26586
     HEAP32[$199 >> 2] = $28; //@line 26587
     $200 = $ReallocAsyncCtx3 + 64 | 0; //@line 26588
     HEAP32[$200 >> 2] = $30; //@line 26589
     $201 = $ReallocAsyncCtx3 + 68 | 0; //@line 26590
     HEAP32[$201 >> 2] = $32; //@line 26591
     $202 = $ReallocAsyncCtx3 + 72 | 0; //@line 26592
     HEAP32[$202 >> 2] = $34; //@line 26593
     $203 = $ReallocAsyncCtx3 + 76 | 0; //@line 26594
     HEAP32[$203 >> 2] = $36; //@line 26595
     $204 = $ReallocAsyncCtx3 + 80 | 0; //@line 26596
     HEAP32[$204 >> 2] = $38; //@line 26597
     $205 = $ReallocAsyncCtx3 + 84 | 0; //@line 26598
     HEAP32[$205 >> 2] = $$1202$in$i; //@line 26599
     $206 = $ReallocAsyncCtx3 + 88 | 0; //@line 26600
     HEAP32[$206 >> 2] = $42; //@line 26601
     $207 = $ReallocAsyncCtx3 + 92 | 0; //@line 26602
     HEAP32[$207 >> 2] = $44; //@line 26603
     $208 = $ReallocAsyncCtx3 + 96 | 0; //@line 26604
     HEAP16[$208 >> 1] = $$1202$i; //@line 26605
     $209 = $ReallocAsyncCtx3 + 100 | 0; //@line 26606
     HEAP32[$209 >> 2] = $46; //@line 26607
     $210 = $ReallocAsyncCtx3 + 104 | 0; //@line 26608
     HEAP32[$210 >> 2] = $48; //@line 26609
     $211 = $ReallocAsyncCtx3 + 108 | 0; //@line 26610
     HEAP32[$211 >> 2] = $50; //@line 26611
     $212 = $ReallocAsyncCtx3 + 112 | 0; //@line 26612
     HEAP32[$212 >> 2] = $52; //@line 26613
     $213 = $ReallocAsyncCtx3 + 116 | 0; //@line 26614
     HEAP32[$213 >> 2] = $54; //@line 26615
     $214 = $ReallocAsyncCtx3 + 120 | 0; //@line 26616
     HEAP32[$214 >> 2] = $40; //@line 26617
     $215 = $ReallocAsyncCtx3 + 124 | 0; //@line 26618
     HEAP32[$215 >> 2] = $56; //@line 26619
     $216 = $ReallocAsyncCtx3 + 128 | 0; //@line 26620
     HEAP32[$216 >> 2] = $58; //@line 26621
     $217 = $ReallocAsyncCtx3 + 132 | 0; //@line 26622
     HEAP32[$217 >> 2] = $60; //@line 26623
     $218 = $ReallocAsyncCtx3 + 136 | 0; //@line 26624
     HEAP32[$218 >> 2] = $161; //@line 26625
     $219 = $ReallocAsyncCtx3 + 140 | 0; //@line 26626
     HEAP32[$219 >> 2] = $64; //@line 26627
     $220 = $ReallocAsyncCtx3 + 144 | 0; //@line 26628
     HEAP32[$220 >> 2] = $66; //@line 26629
     $221 = $ReallocAsyncCtx3 + 148 | 0; //@line 26630
     HEAP32[$221 >> 2] = $68; //@line 26631
     $222 = $ReallocAsyncCtx3 + 152 | 0; //@line 26632
     HEAP32[$222 >> 2] = $70; //@line 26633
     $223 = $ReallocAsyncCtx3 + 156 | 0; //@line 26634
     HEAP16[$223 >> 1] = $179; //@line 26635
     $224 = $ReallocAsyncCtx3 + 160 | 0; //@line 26636
     HEAP32[$224 >> 2] = $72; //@line 26637
     $225 = $ReallocAsyncCtx3 + 164 | 0; //@line 26638
     HEAP32[$225 >> 2] = $74; //@line 26639
     $226 = $ReallocAsyncCtx3 + 168 | 0; //@line 26640
     HEAP32[$226 >> 2] = $76; //@line 26641
     $227 = $ReallocAsyncCtx3 + 172 | 0; //@line 26642
     HEAP32[$227 >> 2] = $78; //@line 26643
     $228 = $ReallocAsyncCtx3 + 176 | 0; //@line 26644
     HEAP32[$228 >> 2] = $80; //@line 26645
     $229 = $ReallocAsyncCtx3 + 180 | 0; //@line 26646
     HEAP32[$229 >> 2] = $82; //@line 26647
     $230 = $ReallocAsyncCtx3 + 184 | 0; //@line 26648
     HEAP32[$230 >> 2] = $84; //@line 26649
     $231 = $ReallocAsyncCtx3 + 188 | 0; //@line 26650
     HEAP32[$231 >> 2] = $86; //@line 26651
     $232 = $ReallocAsyncCtx3 + 192 | 0; //@line 26652
     HEAP32[$232 >> 2] = $88; //@line 26653
     $233 = $ReallocAsyncCtx3 + 196 | 0; //@line 26654
     HEAP32[$233 >> 2] = $90; //@line 26655
     $234 = $ReallocAsyncCtx3 + 200 | 0; //@line 26656
     HEAP32[$234 >> 2] = $92; //@line 26657
     $235 = $ReallocAsyncCtx3 + 204 | 0; //@line 26658
     HEAP32[$235 >> 2] = $94; //@line 26659
     $236 = $ReallocAsyncCtx3 + 208 | 0; //@line 26660
     HEAP32[$236 >> 2] = $98; //@line 26661
     $237 = $ReallocAsyncCtx3 + 212 | 0; //@line 26662
     HEAP32[$237 >> 2] = $100; //@line 26663
     $238 = $ReallocAsyncCtx3 + 216 | 0; //@line 26664
     HEAP32[$238 >> 2] = $104; //@line 26665
     $239 = $ReallocAsyncCtx3 + 220 | 0; //@line 26666
     HEAP32[$239 >> 2] = $106; //@line 26667
     $240 = $ReallocAsyncCtx3 + 224 | 0; //@line 26668
     HEAP32[$240 >> 2] = $108; //@line 26669
     $241 = $ReallocAsyncCtx3 + 228 | 0; //@line 26670
     HEAP32[$241 >> 2] = $110; //@line 26671
     $242 = $ReallocAsyncCtx3 + 232 | 0; //@line 26672
     HEAP32[$242 >> 2] = $112; //@line 26673
     $243 = $ReallocAsyncCtx3 + 236 | 0; //@line 26674
     HEAP32[$243 >> 2] = $114; //@line 26675
     $244 = $ReallocAsyncCtx3 + 240 | 0; //@line 26676
     HEAP32[$244 >> 2] = $116; //@line 26677
     $245 = $ReallocAsyncCtx3 + 244 | 0; //@line 26678
     HEAP32[$245 >> 2] = $118; //@line 26679
     $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 26680
     HEAP32[$246 >> 2] = $120; //@line 26681
     $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 26682
     HEAP32[$247 >> 2] = $122; //@line 26683
     $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 26684
     HEAP32[$248 >> 2] = $124; //@line 26685
     $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 26686
     HEAP32[$249 >> 2] = $126; //@line 26687
     $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 26688
     HEAP32[$250 >> 2] = $128; //@line 26689
     $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 26690
     HEAP32[$251 >> 2] = $130; //@line 26691
     $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 26692
     HEAP16[$252 >> 1] = $trunc$i; //@line 26693
     $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 26694
     HEAP32[$253 >> 2] = $132; //@line 26695
     $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 26696
     HEAP32[$254 >> 2] = $134; //@line 26697
     $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 26698
     HEAP32[$255 >> 2] = $136; //@line 26699
     sp = STACKTOP; //@line 26700
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3803, 4238, $12); //@line 26705
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3803, 4307, $26); //@line 26710
     break L2;
     break;
    }
   case 31:
    {
     $285 = $$1202$in$i & 65535; //@line 26715
     if (($$1202$i + -1 & 65535) <= 1033) {
      $288 = HEAP32[$130 >> 2] | 0; //@line 26719
      if (!(HEAP32[$288 + 44 >> 2] | 0)) {
       HEAP16[$288 + 2 >> 1] = $$1202$i; //@line 26725
       $293 = $193 + 1 | 0; //@line 26726
       HEAP32[$36 >> 2] = $293; //@line 26727
       $294 = HEAP32[$132 >> 2] | 0; //@line 26728
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 26729
       $295 = FUNCTION_TABLE_ii[$294 & 31]($$1202$i) | 0; //@line 26730
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 26733
        $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 26734
        HEAP32[$296 >> 2] = $2; //@line 26735
        $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 26736
        HEAP32[$297 >> 2] = $4; //@line 26737
        $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 26738
        HEAP32[$298 >> 2] = $6; //@line 26739
        $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 26740
        HEAP32[$299 >> 2] = $8; //@line 26741
        $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 26742
        HEAP32[$300 >> 2] = $10; //@line 26743
        $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 26744
        HEAP32[$301 >> 2] = $12; //@line 26745
        $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 26746
        HEAP32[$302 >> 2] = $14; //@line 26747
        $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 26748
        HEAP32[$303 >> 2] = $16; //@line 26749
        $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 26750
        HEAP32[$304 >> 2] = $18; //@line 26751
        $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 26752
        HEAP32[$305 >> 2] = $20; //@line 26753
        $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 26754
        HEAP32[$306 >> 2] = $22; //@line 26755
        $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 26756
        HEAP32[$307 >> 2] = $24; //@line 26757
        $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 26758
        HEAP32[$308 >> 2] = $26; //@line 26759
        $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 26760
        HEAP32[$309 >> 2] = $28; //@line 26761
        $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 26762
        HEAP32[$310 >> 2] = $30; //@line 26763
        $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 26764
        HEAP32[$311 >> 2] = $32; //@line 26765
        $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 26766
        HEAP32[$312 >> 2] = $285; //@line 26767
        $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 26768
        HEAP32[$313 >> 2] = $36; //@line 26769
        $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 26770
        HEAP32[$314 >> 2] = $34; //@line 26771
        $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 26772
        HEAP32[$315 >> 2] = $38; //@line 26773
        $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 26774
        HEAP32[$316 >> 2] = $40; //@line 26775
        $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 26776
        HEAP32[$317 >> 2] = $42; //@line 26777
        $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 26778
        HEAP32[$318 >> 2] = $44; //@line 26779
        $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 26780
        HEAP32[$319 >> 2] = $46; //@line 26781
        $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 26782
        HEAP32[$320 >> 2] = $48; //@line 26783
        $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 26784
        HEAP32[$321 >> 2] = $50; //@line 26785
        $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 26786
        HEAP32[$322 >> 2] = $52; //@line 26787
        $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 26788
        HEAP32[$323 >> 2] = $54; //@line 26789
        $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 26790
        HEAP32[$324 >> 2] = $56; //@line 26791
        $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 26792
        HEAP32[$325 >> 2] = $58; //@line 26793
        $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 26794
        HEAP32[$326 >> 2] = $60; //@line 26795
        $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 26796
        HEAP32[$327 >> 2] = $161; //@line 26797
        $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 26798
        HEAP32[$328 >> 2] = $64; //@line 26799
        $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 26800
        HEAP32[$329 >> 2] = $66; //@line 26801
        $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 26802
        HEAP32[$330 >> 2] = $68; //@line 26803
        $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 26804
        HEAP32[$331 >> 2] = $70; //@line 26805
        $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 26806
        HEAP32[$332 >> 2] = $72; //@line 26807
        $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 26808
        HEAP32[$333 >> 2] = $74; //@line 26809
        $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 26810
        HEAP32[$334 >> 2] = $76; //@line 26811
        $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 26812
        HEAP32[$335 >> 2] = $78; //@line 26813
        $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 26814
        HEAP32[$336 >> 2] = $80; //@line 26815
        $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 26816
        HEAP32[$337 >> 2] = $82; //@line 26817
        $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 26818
        HEAP32[$338 >> 2] = $84; //@line 26819
        $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 26820
        HEAP32[$339 >> 2] = $86; //@line 26821
        $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 26822
        HEAP32[$340 >> 2] = $88; //@line 26823
        $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 26824
        HEAP32[$341 >> 2] = $90; //@line 26825
        $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 26826
        HEAP32[$342 >> 2] = $92; //@line 26827
        $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 26828
        HEAP32[$343 >> 2] = $94; //@line 26829
        $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 26830
        HEAP32[$344 >> 2] = $98; //@line 26831
        $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 26832
        HEAP32[$345 >> 2] = $100; //@line 26833
        $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 26834
        HEAP32[$346 >> 2] = $104; //@line 26835
        $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 26836
        HEAP32[$347 >> 2] = $106; //@line 26837
        $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 26838
        HEAP32[$348 >> 2] = $108; //@line 26839
        $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 26840
        HEAP32[$349 >> 2] = $293; //@line 26841
        $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 26842
        HEAP32[$350 >> 2] = $110; //@line 26843
        $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 26844
        HEAP32[$351 >> 2] = $112; //@line 26845
        $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 26846
        HEAP32[$352 >> 2] = $114; //@line 26847
        $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 26848
        HEAP32[$353 >> 2] = $116; //@line 26849
        $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 26850
        HEAP32[$354 >> 2] = $118; //@line 26851
        $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 26852
        HEAP32[$355 >> 2] = $120; //@line 26853
        $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 26854
        HEAP32[$356 >> 2] = $122; //@line 26855
        $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 26856
        HEAP32[$357 >> 2] = $124; //@line 26857
        $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 26858
        HEAP32[$358 >> 2] = $126; //@line 26859
        $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 26860
        HEAP32[$359 >> 2] = $128; //@line 26861
        $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 26862
        HEAP32[$360 >> 2] = $130; //@line 26863
        $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 26864
        HEAP32[$361 >> 2] = $132; //@line 26865
        $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 26866
        HEAP32[$362 >> 2] = $134; //@line 26867
        $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 26868
        HEAP32[$363 >> 2] = $136; //@line 26869
        sp = STACKTOP; //@line 26870
        return;
       }
       HEAP32[___async_retval >> 2] = $295; //@line 26874
       ___async_unwind = 0; //@line 26875
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 26876
       $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 26877
       HEAP32[$296 >> 2] = $2; //@line 26878
       $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 26879
       HEAP32[$297 >> 2] = $4; //@line 26880
       $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 26881
       HEAP32[$298 >> 2] = $6; //@line 26882
       $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 26883
       HEAP32[$299 >> 2] = $8; //@line 26884
       $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 26885
       HEAP32[$300 >> 2] = $10; //@line 26886
       $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 26887
       HEAP32[$301 >> 2] = $12; //@line 26888
       $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 26889
       HEAP32[$302 >> 2] = $14; //@line 26890
       $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 26891
       HEAP32[$303 >> 2] = $16; //@line 26892
       $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 26893
       HEAP32[$304 >> 2] = $18; //@line 26894
       $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 26895
       HEAP32[$305 >> 2] = $20; //@line 26896
       $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 26897
       HEAP32[$306 >> 2] = $22; //@line 26898
       $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 26899
       HEAP32[$307 >> 2] = $24; //@line 26900
       $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 26901
       HEAP32[$308 >> 2] = $26; //@line 26902
       $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 26903
       HEAP32[$309 >> 2] = $28; //@line 26904
       $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 26905
       HEAP32[$310 >> 2] = $30; //@line 26906
       $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 26907
       HEAP32[$311 >> 2] = $32; //@line 26908
       $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 26909
       HEAP32[$312 >> 2] = $285; //@line 26910
       $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 26911
       HEAP32[$313 >> 2] = $36; //@line 26912
       $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 26913
       HEAP32[$314 >> 2] = $34; //@line 26914
       $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 26915
       HEAP32[$315 >> 2] = $38; //@line 26916
       $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 26917
       HEAP32[$316 >> 2] = $40; //@line 26918
       $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 26919
       HEAP32[$317 >> 2] = $42; //@line 26920
       $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 26921
       HEAP32[$318 >> 2] = $44; //@line 26922
       $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 26923
       HEAP32[$319 >> 2] = $46; //@line 26924
       $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 26925
       HEAP32[$320 >> 2] = $48; //@line 26926
       $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 26927
       HEAP32[$321 >> 2] = $50; //@line 26928
       $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 26929
       HEAP32[$322 >> 2] = $52; //@line 26930
       $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 26931
       HEAP32[$323 >> 2] = $54; //@line 26932
       $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 26933
       HEAP32[$324 >> 2] = $56; //@line 26934
       $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 26935
       HEAP32[$325 >> 2] = $58; //@line 26936
       $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 26937
       HEAP32[$326 >> 2] = $60; //@line 26938
       $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 26939
       HEAP32[$327 >> 2] = $161; //@line 26940
       $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 26941
       HEAP32[$328 >> 2] = $64; //@line 26942
       $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 26943
       HEAP32[$329 >> 2] = $66; //@line 26944
       $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 26945
       HEAP32[$330 >> 2] = $68; //@line 26946
       $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 26947
       HEAP32[$331 >> 2] = $70; //@line 26948
       $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 26949
       HEAP32[$332 >> 2] = $72; //@line 26950
       $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 26951
       HEAP32[$333 >> 2] = $74; //@line 26952
       $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 26953
       HEAP32[$334 >> 2] = $76; //@line 26954
       $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 26955
       HEAP32[$335 >> 2] = $78; //@line 26956
       $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 26957
       HEAP32[$336 >> 2] = $80; //@line 26958
       $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 26959
       HEAP32[$337 >> 2] = $82; //@line 26960
       $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 26961
       HEAP32[$338 >> 2] = $84; //@line 26962
       $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 26963
       HEAP32[$339 >> 2] = $86; //@line 26964
       $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 26965
       HEAP32[$340 >> 2] = $88; //@line 26966
       $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 26967
       HEAP32[$341 >> 2] = $90; //@line 26968
       $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 26969
       HEAP32[$342 >> 2] = $92; //@line 26970
       $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 26971
       HEAP32[$343 >> 2] = $94; //@line 26972
       $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 26973
       HEAP32[$344 >> 2] = $98; //@line 26974
       $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 26975
       HEAP32[$345 >> 2] = $100; //@line 26976
       $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 26977
       HEAP32[$346 >> 2] = $104; //@line 26978
       $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 26979
       HEAP32[$347 >> 2] = $106; //@line 26980
       $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 26981
       HEAP32[$348 >> 2] = $108; //@line 26982
       $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 26983
       HEAP32[$349 >> 2] = $293; //@line 26984
       $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 26985
       HEAP32[$350 >> 2] = $110; //@line 26986
       $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 26987
       HEAP32[$351 >> 2] = $112; //@line 26988
       $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 26989
       HEAP32[$352 >> 2] = $114; //@line 26990
       $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 26991
       HEAP32[$353 >> 2] = $116; //@line 26992
       $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 26993
       HEAP32[$354 >> 2] = $118; //@line 26994
       $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 26995
       HEAP32[$355 >> 2] = $120; //@line 26996
       $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 26997
       HEAP32[$356 >> 2] = $122; //@line 26998
       $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 26999
       HEAP32[$357 >> 2] = $124; //@line 27000
       $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 27001
       HEAP32[$358 >> 2] = $126; //@line 27002
       $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 27003
       HEAP32[$359 >> 2] = $128; //@line 27004
       $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 27005
       HEAP32[$360 >> 2] = $130; //@line 27006
       $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 27007
       HEAP32[$361 >> 2] = $132; //@line 27008
       $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 27009
       HEAP32[$362 >> 2] = $134; //@line 27010
       $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 27011
       HEAP32[$363 >> 2] = $136; //@line 27012
       sp = STACKTOP; //@line 27013
       return;
      }
     }
     _mbed_tracef(2, 3803, 4369, $122); //@line 27017
     break L2;
     break;
    }
   case 37:
    {
     $365 = HEAP32[$130 >> 2] | 0; //@line 27022
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 27024
     $367 = _sn_coap_parser_options_parse_multiple_options($2, $36, $179, $365 + 48 | 0, $365, 4, $$1202$i) | 0; //@line 27025
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 27028
      $368 = $ReallocAsyncCtx10 + 4 | 0; //@line 27029
      HEAP32[$368 >> 2] = $2; //@line 27030
      $369 = $ReallocAsyncCtx10 + 8 | 0; //@line 27031
      HEAP32[$369 >> 2] = $4; //@line 27032
      $370 = $ReallocAsyncCtx10 + 12 | 0; //@line 27033
      HEAP32[$370 >> 2] = $6; //@line 27034
      $371 = $ReallocAsyncCtx10 + 16 | 0; //@line 27035
      HEAP32[$371 >> 2] = $8; //@line 27036
      $372 = $ReallocAsyncCtx10 + 20 | 0; //@line 27037
      HEAP32[$372 >> 2] = $10; //@line 27038
      $373 = $ReallocAsyncCtx10 + 24 | 0; //@line 27039
      HEAP32[$373 >> 2] = $12; //@line 27040
      $374 = $ReallocAsyncCtx10 + 28 | 0; //@line 27041
      HEAP32[$374 >> 2] = $14; //@line 27042
      $375 = $ReallocAsyncCtx10 + 32 | 0; //@line 27043
      HEAP32[$375 >> 2] = $16; //@line 27044
      $376 = $ReallocAsyncCtx10 + 36 | 0; //@line 27045
      HEAP32[$376 >> 2] = $18; //@line 27046
      $377 = $ReallocAsyncCtx10 + 40 | 0; //@line 27047
      HEAP32[$377 >> 2] = $20; //@line 27048
      $378 = $ReallocAsyncCtx10 + 44 | 0; //@line 27049
      HEAP32[$378 >> 2] = $22; //@line 27050
      $379 = $ReallocAsyncCtx10 + 48 | 0; //@line 27051
      HEAP32[$379 >> 2] = $24; //@line 27052
      $380 = $ReallocAsyncCtx10 + 52 | 0; //@line 27053
      HEAP32[$380 >> 2] = $26; //@line 27054
      $381 = $ReallocAsyncCtx10 + 56 | 0; //@line 27055
      HEAP32[$381 >> 2] = $28; //@line 27056
      $382 = $ReallocAsyncCtx10 + 60 | 0; //@line 27057
      HEAP32[$382 >> 2] = $30; //@line 27058
      $383 = $ReallocAsyncCtx10 + 64 | 0; //@line 27059
      HEAP32[$383 >> 2] = $32; //@line 27060
      $384 = $ReallocAsyncCtx10 + 68 | 0; //@line 27061
      HEAP32[$384 >> 2] = $34; //@line 27062
      $385 = $ReallocAsyncCtx10 + 72 | 0; //@line 27063
      HEAP32[$385 >> 2] = $36; //@line 27064
      $386 = $ReallocAsyncCtx10 + 76 | 0; //@line 27065
      HEAP32[$386 >> 2] = $38; //@line 27066
      $387 = $ReallocAsyncCtx10 + 80 | 0; //@line 27067
      HEAP32[$387 >> 2] = $40; //@line 27068
      $388 = $ReallocAsyncCtx10 + 84 | 0; //@line 27069
      HEAP32[$388 >> 2] = $42; //@line 27070
      $389 = $ReallocAsyncCtx10 + 88 | 0; //@line 27071
      HEAP32[$389 >> 2] = $44; //@line 27072
      $390 = $ReallocAsyncCtx10 + 92 | 0; //@line 27073
      HEAP32[$390 >> 2] = $46; //@line 27074
      $391 = $ReallocAsyncCtx10 + 96 | 0; //@line 27075
      HEAP32[$391 >> 2] = $48; //@line 27076
      $392 = $ReallocAsyncCtx10 + 100 | 0; //@line 27077
      HEAP32[$392 >> 2] = $50; //@line 27078
      $393 = $ReallocAsyncCtx10 + 104 | 0; //@line 27079
      HEAP32[$393 >> 2] = $52; //@line 27080
      $394 = $ReallocAsyncCtx10 + 108 | 0; //@line 27081
      HEAP32[$394 >> 2] = $54; //@line 27082
      $395 = $ReallocAsyncCtx10 + 112 | 0; //@line 27083
      HEAP32[$395 >> 2] = $56; //@line 27084
      $396 = $ReallocAsyncCtx10 + 116 | 0; //@line 27085
      HEAP32[$396 >> 2] = $58; //@line 27086
      $397 = $ReallocAsyncCtx10 + 120 | 0; //@line 27087
      HEAP32[$397 >> 2] = $60; //@line 27088
      $398 = $ReallocAsyncCtx10 + 124 | 0; //@line 27089
      HEAP32[$398 >> 2] = $161; //@line 27090
      $399 = $ReallocAsyncCtx10 + 128 | 0; //@line 27091
      HEAP32[$399 >> 2] = $64; //@line 27092
      $400 = $ReallocAsyncCtx10 + 132 | 0; //@line 27093
      HEAP32[$400 >> 2] = $66; //@line 27094
      $401 = $ReallocAsyncCtx10 + 136 | 0; //@line 27095
      HEAP32[$401 >> 2] = $68; //@line 27096
      $402 = $ReallocAsyncCtx10 + 140 | 0; //@line 27097
      HEAP32[$402 >> 2] = $70; //@line 27098
      $403 = $ReallocAsyncCtx10 + 144 | 0; //@line 27099
      HEAP32[$403 >> 2] = $72; //@line 27100
      $404 = $ReallocAsyncCtx10 + 148 | 0; //@line 27101
      HEAP32[$404 >> 2] = $74; //@line 27102
      $405 = $ReallocAsyncCtx10 + 152 | 0; //@line 27103
      HEAP32[$405 >> 2] = $76; //@line 27104
      $406 = $ReallocAsyncCtx10 + 156 | 0; //@line 27105
      HEAP32[$406 >> 2] = $78; //@line 27106
      $407 = $ReallocAsyncCtx10 + 160 | 0; //@line 27107
      HEAP32[$407 >> 2] = $80; //@line 27108
      $408 = $ReallocAsyncCtx10 + 164 | 0; //@line 27109
      HEAP32[$408 >> 2] = $82; //@line 27110
      $409 = $ReallocAsyncCtx10 + 168 | 0; //@line 27111
      HEAP32[$409 >> 2] = $84; //@line 27112
      $410 = $ReallocAsyncCtx10 + 172 | 0; //@line 27113
      HEAP32[$410 >> 2] = $86; //@line 27114
      $411 = $ReallocAsyncCtx10 + 176 | 0; //@line 27115
      HEAP32[$411 >> 2] = $88; //@line 27116
      $412 = $ReallocAsyncCtx10 + 180 | 0; //@line 27117
      HEAP32[$412 >> 2] = $90; //@line 27118
      $413 = $ReallocAsyncCtx10 + 184 | 0; //@line 27119
      HEAP32[$413 >> 2] = $92; //@line 27120
      $414 = $ReallocAsyncCtx10 + 188 | 0; //@line 27121
      HEAP32[$414 >> 2] = $94; //@line 27122
      $415 = $ReallocAsyncCtx10 + 192 | 0; //@line 27123
      HEAP32[$415 >> 2] = $98; //@line 27124
      $416 = $ReallocAsyncCtx10 + 196 | 0; //@line 27125
      HEAP32[$416 >> 2] = $100; //@line 27126
      $417 = $ReallocAsyncCtx10 + 200 | 0; //@line 27127
      HEAP32[$417 >> 2] = $104; //@line 27128
      $418 = $ReallocAsyncCtx10 + 204 | 0; //@line 27129
      HEAP32[$418 >> 2] = $106; //@line 27130
      $419 = $ReallocAsyncCtx10 + 208 | 0; //@line 27131
      HEAP32[$419 >> 2] = $108; //@line 27132
      $420 = $ReallocAsyncCtx10 + 212 | 0; //@line 27133
      HEAP32[$420 >> 2] = $110; //@line 27134
      $421 = $ReallocAsyncCtx10 + 216 | 0; //@line 27135
      HEAP32[$421 >> 2] = $112; //@line 27136
      $422 = $ReallocAsyncCtx10 + 220 | 0; //@line 27137
      HEAP32[$422 >> 2] = $114; //@line 27138
      $423 = $ReallocAsyncCtx10 + 224 | 0; //@line 27139
      HEAP32[$423 >> 2] = $116; //@line 27140
      $424 = $ReallocAsyncCtx10 + 228 | 0; //@line 27141
      HEAP32[$424 >> 2] = $118; //@line 27142
      $425 = $ReallocAsyncCtx10 + 232 | 0; //@line 27143
      HEAP32[$425 >> 2] = $120; //@line 27144
      $426 = $ReallocAsyncCtx10 + 236 | 0; //@line 27145
      HEAP32[$426 >> 2] = $122; //@line 27146
      $427 = $ReallocAsyncCtx10 + 240 | 0; //@line 27147
      HEAP32[$427 >> 2] = $124; //@line 27148
      $428 = $ReallocAsyncCtx10 + 244 | 0; //@line 27149
      HEAP32[$428 >> 2] = $126; //@line 27150
      $429 = $ReallocAsyncCtx10 + 248 | 0; //@line 27151
      HEAP32[$429 >> 2] = $128; //@line 27152
      $430 = $ReallocAsyncCtx10 + 252 | 0; //@line 27153
      HEAP32[$430 >> 2] = $130; //@line 27154
      $431 = $ReallocAsyncCtx10 + 256 | 0; //@line 27155
      HEAP32[$431 >> 2] = $132; //@line 27156
      $432 = $ReallocAsyncCtx10 + 260 | 0; //@line 27157
      HEAP32[$432 >> 2] = $134; //@line 27158
      $433 = $ReallocAsyncCtx10 + 264 | 0; //@line 27159
      HEAP32[$433 >> 2] = $136; //@line 27160
      sp = STACKTOP; //@line 27161
      return;
     }
     HEAP8[___async_retval >> 0] = $367; //@line 27165
     ___async_unwind = 0; //@line 27166
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 27167
     $368 = $ReallocAsyncCtx10 + 4 | 0; //@line 27168
     HEAP32[$368 >> 2] = $2; //@line 27169
     $369 = $ReallocAsyncCtx10 + 8 | 0; //@line 27170
     HEAP32[$369 >> 2] = $4; //@line 27171
     $370 = $ReallocAsyncCtx10 + 12 | 0; //@line 27172
     HEAP32[$370 >> 2] = $6; //@line 27173
     $371 = $ReallocAsyncCtx10 + 16 | 0; //@line 27174
     HEAP32[$371 >> 2] = $8; //@line 27175
     $372 = $ReallocAsyncCtx10 + 20 | 0; //@line 27176
     HEAP32[$372 >> 2] = $10; //@line 27177
     $373 = $ReallocAsyncCtx10 + 24 | 0; //@line 27178
     HEAP32[$373 >> 2] = $12; //@line 27179
     $374 = $ReallocAsyncCtx10 + 28 | 0; //@line 27180
     HEAP32[$374 >> 2] = $14; //@line 27181
     $375 = $ReallocAsyncCtx10 + 32 | 0; //@line 27182
     HEAP32[$375 >> 2] = $16; //@line 27183
     $376 = $ReallocAsyncCtx10 + 36 | 0; //@line 27184
     HEAP32[$376 >> 2] = $18; //@line 27185
     $377 = $ReallocAsyncCtx10 + 40 | 0; //@line 27186
     HEAP32[$377 >> 2] = $20; //@line 27187
     $378 = $ReallocAsyncCtx10 + 44 | 0; //@line 27188
     HEAP32[$378 >> 2] = $22; //@line 27189
     $379 = $ReallocAsyncCtx10 + 48 | 0; //@line 27190
     HEAP32[$379 >> 2] = $24; //@line 27191
     $380 = $ReallocAsyncCtx10 + 52 | 0; //@line 27192
     HEAP32[$380 >> 2] = $26; //@line 27193
     $381 = $ReallocAsyncCtx10 + 56 | 0; //@line 27194
     HEAP32[$381 >> 2] = $28; //@line 27195
     $382 = $ReallocAsyncCtx10 + 60 | 0; //@line 27196
     HEAP32[$382 >> 2] = $30; //@line 27197
     $383 = $ReallocAsyncCtx10 + 64 | 0; //@line 27198
     HEAP32[$383 >> 2] = $32; //@line 27199
     $384 = $ReallocAsyncCtx10 + 68 | 0; //@line 27200
     HEAP32[$384 >> 2] = $34; //@line 27201
     $385 = $ReallocAsyncCtx10 + 72 | 0; //@line 27202
     HEAP32[$385 >> 2] = $36; //@line 27203
     $386 = $ReallocAsyncCtx10 + 76 | 0; //@line 27204
     HEAP32[$386 >> 2] = $38; //@line 27205
     $387 = $ReallocAsyncCtx10 + 80 | 0; //@line 27206
     HEAP32[$387 >> 2] = $40; //@line 27207
     $388 = $ReallocAsyncCtx10 + 84 | 0; //@line 27208
     HEAP32[$388 >> 2] = $42; //@line 27209
     $389 = $ReallocAsyncCtx10 + 88 | 0; //@line 27210
     HEAP32[$389 >> 2] = $44; //@line 27211
     $390 = $ReallocAsyncCtx10 + 92 | 0; //@line 27212
     HEAP32[$390 >> 2] = $46; //@line 27213
     $391 = $ReallocAsyncCtx10 + 96 | 0; //@line 27214
     HEAP32[$391 >> 2] = $48; //@line 27215
     $392 = $ReallocAsyncCtx10 + 100 | 0; //@line 27216
     HEAP32[$392 >> 2] = $50; //@line 27217
     $393 = $ReallocAsyncCtx10 + 104 | 0; //@line 27218
     HEAP32[$393 >> 2] = $52; //@line 27219
     $394 = $ReallocAsyncCtx10 + 108 | 0; //@line 27220
     HEAP32[$394 >> 2] = $54; //@line 27221
     $395 = $ReallocAsyncCtx10 + 112 | 0; //@line 27222
     HEAP32[$395 >> 2] = $56; //@line 27223
     $396 = $ReallocAsyncCtx10 + 116 | 0; //@line 27224
     HEAP32[$396 >> 2] = $58; //@line 27225
     $397 = $ReallocAsyncCtx10 + 120 | 0; //@line 27226
     HEAP32[$397 >> 2] = $60; //@line 27227
     $398 = $ReallocAsyncCtx10 + 124 | 0; //@line 27228
     HEAP32[$398 >> 2] = $161; //@line 27229
     $399 = $ReallocAsyncCtx10 + 128 | 0; //@line 27230
     HEAP32[$399 >> 2] = $64; //@line 27231
     $400 = $ReallocAsyncCtx10 + 132 | 0; //@line 27232
     HEAP32[$400 >> 2] = $66; //@line 27233
     $401 = $ReallocAsyncCtx10 + 136 | 0; //@line 27234
     HEAP32[$401 >> 2] = $68; //@line 27235
     $402 = $ReallocAsyncCtx10 + 140 | 0; //@line 27236
     HEAP32[$402 >> 2] = $70; //@line 27237
     $403 = $ReallocAsyncCtx10 + 144 | 0; //@line 27238
     HEAP32[$403 >> 2] = $72; //@line 27239
     $404 = $ReallocAsyncCtx10 + 148 | 0; //@line 27240
     HEAP32[$404 >> 2] = $74; //@line 27241
     $405 = $ReallocAsyncCtx10 + 152 | 0; //@line 27242
     HEAP32[$405 >> 2] = $76; //@line 27243
     $406 = $ReallocAsyncCtx10 + 156 | 0; //@line 27244
     HEAP32[$406 >> 2] = $78; //@line 27245
     $407 = $ReallocAsyncCtx10 + 160 | 0; //@line 27246
     HEAP32[$407 >> 2] = $80; //@line 27247
     $408 = $ReallocAsyncCtx10 + 164 | 0; //@line 27248
     HEAP32[$408 >> 2] = $82; //@line 27249
     $409 = $ReallocAsyncCtx10 + 168 | 0; //@line 27250
     HEAP32[$409 >> 2] = $84; //@line 27251
     $410 = $ReallocAsyncCtx10 + 172 | 0; //@line 27252
     HEAP32[$410 >> 2] = $86; //@line 27253
     $411 = $ReallocAsyncCtx10 + 176 | 0; //@line 27254
     HEAP32[$411 >> 2] = $88; //@line 27255
     $412 = $ReallocAsyncCtx10 + 180 | 0; //@line 27256
     HEAP32[$412 >> 2] = $90; //@line 27257
     $413 = $ReallocAsyncCtx10 + 184 | 0; //@line 27258
     HEAP32[$413 >> 2] = $92; //@line 27259
     $414 = $ReallocAsyncCtx10 + 188 | 0; //@line 27260
     HEAP32[$414 >> 2] = $94; //@line 27261
     $415 = $ReallocAsyncCtx10 + 192 | 0; //@line 27262
     HEAP32[$415 >> 2] = $98; //@line 27263
     $416 = $ReallocAsyncCtx10 + 196 | 0; //@line 27264
     HEAP32[$416 >> 2] = $100; //@line 27265
     $417 = $ReallocAsyncCtx10 + 200 | 0; //@line 27266
     HEAP32[$417 >> 2] = $104; //@line 27267
     $418 = $ReallocAsyncCtx10 + 204 | 0; //@line 27268
     HEAP32[$418 >> 2] = $106; //@line 27269
     $419 = $ReallocAsyncCtx10 + 208 | 0; //@line 27270
     HEAP32[$419 >> 2] = $108; //@line 27271
     $420 = $ReallocAsyncCtx10 + 212 | 0; //@line 27272
     HEAP32[$420 >> 2] = $110; //@line 27273
     $421 = $ReallocAsyncCtx10 + 216 | 0; //@line 27274
     HEAP32[$421 >> 2] = $112; //@line 27275
     $422 = $ReallocAsyncCtx10 + 220 | 0; //@line 27276
     HEAP32[$422 >> 2] = $114; //@line 27277
     $423 = $ReallocAsyncCtx10 + 224 | 0; //@line 27278
     HEAP32[$423 >> 2] = $116; //@line 27279
     $424 = $ReallocAsyncCtx10 + 228 | 0; //@line 27280
     HEAP32[$424 >> 2] = $118; //@line 27281
     $425 = $ReallocAsyncCtx10 + 232 | 0; //@line 27282
     HEAP32[$425 >> 2] = $120; //@line 27283
     $426 = $ReallocAsyncCtx10 + 236 | 0; //@line 27284
     HEAP32[$426 >> 2] = $122; //@line 27285
     $427 = $ReallocAsyncCtx10 + 240 | 0; //@line 27286
     HEAP32[$427 >> 2] = $124; //@line 27287
     $428 = $ReallocAsyncCtx10 + 244 | 0; //@line 27288
     HEAP32[$428 >> 2] = $126; //@line 27289
     $429 = $ReallocAsyncCtx10 + 248 | 0; //@line 27290
     HEAP32[$429 >> 2] = $128; //@line 27291
     $430 = $ReallocAsyncCtx10 + 252 | 0; //@line 27292
     HEAP32[$430 >> 2] = $130; //@line 27293
     $431 = $ReallocAsyncCtx10 + 256 | 0; //@line 27294
     HEAP32[$431 >> 2] = $132; //@line 27295
     $432 = $ReallocAsyncCtx10 + 260 | 0; //@line 27296
     HEAP32[$432 >> 2] = $134; //@line 27297
     $433 = $ReallocAsyncCtx10 + 264 | 0; //@line 27298
     HEAP32[$433 >> 2] = $136; //@line 27299
     sp = STACKTOP; //@line 27300
     return;
    }
   case 40:
    {
     $435 = $$1202$in$i & 65535; //@line 27305
     if (($$1202$i + -1 & 65535) <= 254) {
      $438 = HEAP32[$130 >> 2] | 0; //@line 27309
      if (!(HEAP32[$438 + 52 >> 2] | 0)) {
       HEAP16[$438 + 4 >> 1] = $$1202$i; //@line 27315
       $443 = $193 + 1 | 0; //@line 27316
       HEAP32[$36 >> 2] = $443; //@line 27317
       $444 = HEAP32[$132 >> 2] | 0; //@line 27318
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 27319
       $445 = FUNCTION_TABLE_ii[$444 & 31]($$1202$i) | 0; //@line 27320
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 27323
        $446 = $ReallocAsyncCtx5 + 4 | 0; //@line 27324
        HEAP32[$446 >> 2] = $2; //@line 27325
        $447 = $ReallocAsyncCtx5 + 8 | 0; //@line 27326
        HEAP32[$447 >> 2] = $4; //@line 27327
        $448 = $ReallocAsyncCtx5 + 12 | 0; //@line 27328
        HEAP32[$448 >> 2] = $6; //@line 27329
        $449 = $ReallocAsyncCtx5 + 16 | 0; //@line 27330
        HEAP32[$449 >> 2] = $8; //@line 27331
        $450 = $ReallocAsyncCtx5 + 20 | 0; //@line 27332
        HEAP32[$450 >> 2] = $10; //@line 27333
        $451 = $ReallocAsyncCtx5 + 24 | 0; //@line 27334
        HEAP32[$451 >> 2] = $12; //@line 27335
        $452 = $ReallocAsyncCtx5 + 28 | 0; //@line 27336
        HEAP32[$452 >> 2] = $14; //@line 27337
        $453 = $ReallocAsyncCtx5 + 32 | 0; //@line 27338
        HEAP32[$453 >> 2] = $16; //@line 27339
        $454 = $ReallocAsyncCtx5 + 36 | 0; //@line 27340
        HEAP32[$454 >> 2] = $18; //@line 27341
        $455 = $ReallocAsyncCtx5 + 40 | 0; //@line 27342
        HEAP32[$455 >> 2] = $20; //@line 27343
        $456 = $ReallocAsyncCtx5 + 44 | 0; //@line 27344
        HEAP32[$456 >> 2] = $22; //@line 27345
        $457 = $ReallocAsyncCtx5 + 48 | 0; //@line 27346
        HEAP32[$457 >> 2] = $24; //@line 27347
        $458 = $ReallocAsyncCtx5 + 52 | 0; //@line 27348
        HEAP32[$458 >> 2] = $26; //@line 27349
        $459 = $ReallocAsyncCtx5 + 56 | 0; //@line 27350
        HEAP32[$459 >> 2] = $28; //@line 27351
        $460 = $ReallocAsyncCtx5 + 60 | 0; //@line 27352
        HEAP32[$460 >> 2] = $30; //@line 27353
        $461 = $ReallocAsyncCtx5 + 64 | 0; //@line 27354
        HEAP32[$461 >> 2] = $32; //@line 27355
        $462 = $ReallocAsyncCtx5 + 68 | 0; //@line 27356
        HEAP32[$462 >> 2] = $34; //@line 27357
        $463 = $ReallocAsyncCtx5 + 72 | 0; //@line 27358
        HEAP32[$463 >> 2] = $36; //@line 27359
        $464 = $ReallocAsyncCtx5 + 76 | 0; //@line 27360
        HEAP32[$464 >> 2] = $38; //@line 27361
        $465 = $ReallocAsyncCtx5 + 80 | 0; //@line 27362
        HEAP32[$465 >> 2] = $40; //@line 27363
        $466 = $ReallocAsyncCtx5 + 84 | 0; //@line 27364
        HEAP32[$466 >> 2] = $42; //@line 27365
        $467 = $ReallocAsyncCtx5 + 88 | 0; //@line 27366
        HEAP32[$467 >> 2] = $44; //@line 27367
        $468 = $ReallocAsyncCtx5 + 92 | 0; //@line 27368
        HEAP32[$468 >> 2] = $46; //@line 27369
        $469 = $ReallocAsyncCtx5 + 96 | 0; //@line 27370
        HEAP32[$469 >> 2] = $48; //@line 27371
        $470 = $ReallocAsyncCtx5 + 100 | 0; //@line 27372
        HEAP32[$470 >> 2] = $50; //@line 27373
        $471 = $ReallocAsyncCtx5 + 104 | 0; //@line 27374
        HEAP32[$471 >> 2] = $52; //@line 27375
        $472 = $ReallocAsyncCtx5 + 108 | 0; //@line 27376
        HEAP32[$472 >> 2] = $54; //@line 27377
        $473 = $ReallocAsyncCtx5 + 112 | 0; //@line 27378
        HEAP32[$473 >> 2] = $56; //@line 27379
        $474 = $ReallocAsyncCtx5 + 116 | 0; //@line 27380
        HEAP32[$474 >> 2] = $58; //@line 27381
        $475 = $ReallocAsyncCtx5 + 120 | 0; //@line 27382
        HEAP32[$475 >> 2] = $60; //@line 27383
        $476 = $ReallocAsyncCtx5 + 124 | 0; //@line 27384
        HEAP32[$476 >> 2] = $161; //@line 27385
        $477 = $ReallocAsyncCtx5 + 128 | 0; //@line 27386
        HEAP32[$477 >> 2] = $64; //@line 27387
        $478 = $ReallocAsyncCtx5 + 132 | 0; //@line 27388
        HEAP32[$478 >> 2] = $66; //@line 27389
        $479 = $ReallocAsyncCtx5 + 136 | 0; //@line 27390
        HEAP32[$479 >> 2] = $68; //@line 27391
        $480 = $ReallocAsyncCtx5 + 140 | 0; //@line 27392
        HEAP32[$480 >> 2] = $70; //@line 27393
        $481 = $ReallocAsyncCtx5 + 144 | 0; //@line 27394
        HEAP32[$481 >> 2] = $72; //@line 27395
        $482 = $ReallocAsyncCtx5 + 148 | 0; //@line 27396
        HEAP32[$482 >> 2] = $74; //@line 27397
        $483 = $ReallocAsyncCtx5 + 152 | 0; //@line 27398
        HEAP32[$483 >> 2] = $76; //@line 27399
        $484 = $ReallocAsyncCtx5 + 156 | 0; //@line 27400
        HEAP32[$484 >> 2] = $78; //@line 27401
        $485 = $ReallocAsyncCtx5 + 160 | 0; //@line 27402
        HEAP32[$485 >> 2] = $80; //@line 27403
        $486 = $ReallocAsyncCtx5 + 164 | 0; //@line 27404
        HEAP32[$486 >> 2] = $82; //@line 27405
        $487 = $ReallocAsyncCtx5 + 168 | 0; //@line 27406
        HEAP32[$487 >> 2] = $84; //@line 27407
        $488 = $ReallocAsyncCtx5 + 172 | 0; //@line 27408
        HEAP32[$488 >> 2] = $86; //@line 27409
        $489 = $ReallocAsyncCtx5 + 176 | 0; //@line 27410
        HEAP32[$489 >> 2] = $88; //@line 27411
        $490 = $ReallocAsyncCtx5 + 180 | 0; //@line 27412
        HEAP32[$490 >> 2] = $90; //@line 27413
        $491 = $ReallocAsyncCtx5 + 184 | 0; //@line 27414
        HEAP32[$491 >> 2] = $92; //@line 27415
        $492 = $ReallocAsyncCtx5 + 188 | 0; //@line 27416
        HEAP32[$492 >> 2] = $94; //@line 27417
        $493 = $ReallocAsyncCtx5 + 192 | 0; //@line 27418
        HEAP32[$493 >> 2] = $435; //@line 27419
        $494 = $ReallocAsyncCtx5 + 196 | 0; //@line 27420
        HEAP32[$494 >> 2] = $98; //@line 27421
        $495 = $ReallocAsyncCtx5 + 200 | 0; //@line 27422
        HEAP32[$495 >> 2] = $100; //@line 27423
        $496 = $ReallocAsyncCtx5 + 204 | 0; //@line 27424
        HEAP32[$496 >> 2] = $443; //@line 27425
        $497 = $ReallocAsyncCtx5 + 208 | 0; //@line 27426
        HEAP32[$497 >> 2] = $104; //@line 27427
        $498 = $ReallocAsyncCtx5 + 212 | 0; //@line 27428
        HEAP32[$498 >> 2] = $106; //@line 27429
        $499 = $ReallocAsyncCtx5 + 216 | 0; //@line 27430
        HEAP32[$499 >> 2] = $108; //@line 27431
        $500 = $ReallocAsyncCtx5 + 220 | 0; //@line 27432
        HEAP32[$500 >> 2] = $110; //@line 27433
        $501 = $ReallocAsyncCtx5 + 224 | 0; //@line 27434
        HEAP32[$501 >> 2] = $112; //@line 27435
        $502 = $ReallocAsyncCtx5 + 228 | 0; //@line 27436
        HEAP32[$502 >> 2] = $114; //@line 27437
        $503 = $ReallocAsyncCtx5 + 232 | 0; //@line 27438
        HEAP32[$503 >> 2] = $116; //@line 27439
        $504 = $ReallocAsyncCtx5 + 236 | 0; //@line 27440
        HEAP32[$504 >> 2] = $118; //@line 27441
        $505 = $ReallocAsyncCtx5 + 240 | 0; //@line 27442
        HEAP32[$505 >> 2] = $120; //@line 27443
        $506 = $ReallocAsyncCtx5 + 244 | 0; //@line 27444
        HEAP32[$506 >> 2] = $122; //@line 27445
        $507 = $ReallocAsyncCtx5 + 248 | 0; //@line 27446
        HEAP32[$507 >> 2] = $124; //@line 27447
        $508 = $ReallocAsyncCtx5 + 252 | 0; //@line 27448
        HEAP32[$508 >> 2] = $126; //@line 27449
        $509 = $ReallocAsyncCtx5 + 256 | 0; //@line 27450
        HEAP32[$509 >> 2] = $128; //@line 27451
        $510 = $ReallocAsyncCtx5 + 260 | 0; //@line 27452
        HEAP32[$510 >> 2] = $130; //@line 27453
        $511 = $ReallocAsyncCtx5 + 264 | 0; //@line 27454
        HEAP32[$511 >> 2] = $132; //@line 27455
        $512 = $ReallocAsyncCtx5 + 268 | 0; //@line 27456
        HEAP32[$512 >> 2] = $134; //@line 27457
        $513 = $ReallocAsyncCtx5 + 272 | 0; //@line 27458
        HEAP32[$513 >> 2] = $136; //@line 27459
        sp = STACKTOP; //@line 27460
        return;
       }
       HEAP32[___async_retval >> 2] = $445; //@line 27464
       ___async_unwind = 0; //@line 27465
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 27466
       $446 = $ReallocAsyncCtx5 + 4 | 0; //@line 27467
       HEAP32[$446 >> 2] = $2; //@line 27468
       $447 = $ReallocAsyncCtx5 + 8 | 0; //@line 27469
       HEAP32[$447 >> 2] = $4; //@line 27470
       $448 = $ReallocAsyncCtx5 + 12 | 0; //@line 27471
       HEAP32[$448 >> 2] = $6; //@line 27472
       $449 = $ReallocAsyncCtx5 + 16 | 0; //@line 27473
       HEAP32[$449 >> 2] = $8; //@line 27474
       $450 = $ReallocAsyncCtx5 + 20 | 0; //@line 27475
       HEAP32[$450 >> 2] = $10; //@line 27476
       $451 = $ReallocAsyncCtx5 + 24 | 0; //@line 27477
       HEAP32[$451 >> 2] = $12; //@line 27478
       $452 = $ReallocAsyncCtx5 + 28 | 0; //@line 27479
       HEAP32[$452 >> 2] = $14; //@line 27480
       $453 = $ReallocAsyncCtx5 + 32 | 0; //@line 27481
       HEAP32[$453 >> 2] = $16; //@line 27482
       $454 = $ReallocAsyncCtx5 + 36 | 0; //@line 27483
       HEAP32[$454 >> 2] = $18; //@line 27484
       $455 = $ReallocAsyncCtx5 + 40 | 0; //@line 27485
       HEAP32[$455 >> 2] = $20; //@line 27486
       $456 = $ReallocAsyncCtx5 + 44 | 0; //@line 27487
       HEAP32[$456 >> 2] = $22; //@line 27488
       $457 = $ReallocAsyncCtx5 + 48 | 0; //@line 27489
       HEAP32[$457 >> 2] = $24; //@line 27490
       $458 = $ReallocAsyncCtx5 + 52 | 0; //@line 27491
       HEAP32[$458 >> 2] = $26; //@line 27492
       $459 = $ReallocAsyncCtx5 + 56 | 0; //@line 27493
       HEAP32[$459 >> 2] = $28; //@line 27494
       $460 = $ReallocAsyncCtx5 + 60 | 0; //@line 27495
       HEAP32[$460 >> 2] = $30; //@line 27496
       $461 = $ReallocAsyncCtx5 + 64 | 0; //@line 27497
       HEAP32[$461 >> 2] = $32; //@line 27498
       $462 = $ReallocAsyncCtx5 + 68 | 0; //@line 27499
       HEAP32[$462 >> 2] = $34; //@line 27500
       $463 = $ReallocAsyncCtx5 + 72 | 0; //@line 27501
       HEAP32[$463 >> 2] = $36; //@line 27502
       $464 = $ReallocAsyncCtx5 + 76 | 0; //@line 27503
       HEAP32[$464 >> 2] = $38; //@line 27504
       $465 = $ReallocAsyncCtx5 + 80 | 0; //@line 27505
       HEAP32[$465 >> 2] = $40; //@line 27506
       $466 = $ReallocAsyncCtx5 + 84 | 0; //@line 27507
       HEAP32[$466 >> 2] = $42; //@line 27508
       $467 = $ReallocAsyncCtx5 + 88 | 0; //@line 27509
       HEAP32[$467 >> 2] = $44; //@line 27510
       $468 = $ReallocAsyncCtx5 + 92 | 0; //@line 27511
       HEAP32[$468 >> 2] = $46; //@line 27512
       $469 = $ReallocAsyncCtx5 + 96 | 0; //@line 27513
       HEAP32[$469 >> 2] = $48; //@line 27514
       $470 = $ReallocAsyncCtx5 + 100 | 0; //@line 27515
       HEAP32[$470 >> 2] = $50; //@line 27516
       $471 = $ReallocAsyncCtx5 + 104 | 0; //@line 27517
       HEAP32[$471 >> 2] = $52; //@line 27518
       $472 = $ReallocAsyncCtx5 + 108 | 0; //@line 27519
       HEAP32[$472 >> 2] = $54; //@line 27520
       $473 = $ReallocAsyncCtx5 + 112 | 0; //@line 27521
       HEAP32[$473 >> 2] = $56; //@line 27522
       $474 = $ReallocAsyncCtx5 + 116 | 0; //@line 27523
       HEAP32[$474 >> 2] = $58; //@line 27524
       $475 = $ReallocAsyncCtx5 + 120 | 0; //@line 27525
       HEAP32[$475 >> 2] = $60; //@line 27526
       $476 = $ReallocAsyncCtx5 + 124 | 0; //@line 27527
       HEAP32[$476 >> 2] = $161; //@line 27528
       $477 = $ReallocAsyncCtx5 + 128 | 0; //@line 27529
       HEAP32[$477 >> 2] = $64; //@line 27530
       $478 = $ReallocAsyncCtx5 + 132 | 0; //@line 27531
       HEAP32[$478 >> 2] = $66; //@line 27532
       $479 = $ReallocAsyncCtx5 + 136 | 0; //@line 27533
       HEAP32[$479 >> 2] = $68; //@line 27534
       $480 = $ReallocAsyncCtx5 + 140 | 0; //@line 27535
       HEAP32[$480 >> 2] = $70; //@line 27536
       $481 = $ReallocAsyncCtx5 + 144 | 0; //@line 27537
       HEAP32[$481 >> 2] = $72; //@line 27538
       $482 = $ReallocAsyncCtx5 + 148 | 0; //@line 27539
       HEAP32[$482 >> 2] = $74; //@line 27540
       $483 = $ReallocAsyncCtx5 + 152 | 0; //@line 27541
       HEAP32[$483 >> 2] = $76; //@line 27542
       $484 = $ReallocAsyncCtx5 + 156 | 0; //@line 27543
       HEAP32[$484 >> 2] = $78; //@line 27544
       $485 = $ReallocAsyncCtx5 + 160 | 0; //@line 27545
       HEAP32[$485 >> 2] = $80; //@line 27546
       $486 = $ReallocAsyncCtx5 + 164 | 0; //@line 27547
       HEAP32[$486 >> 2] = $82; //@line 27548
       $487 = $ReallocAsyncCtx5 + 168 | 0; //@line 27549
       HEAP32[$487 >> 2] = $84; //@line 27550
       $488 = $ReallocAsyncCtx5 + 172 | 0; //@line 27551
       HEAP32[$488 >> 2] = $86; //@line 27552
       $489 = $ReallocAsyncCtx5 + 176 | 0; //@line 27553
       HEAP32[$489 >> 2] = $88; //@line 27554
       $490 = $ReallocAsyncCtx5 + 180 | 0; //@line 27555
       HEAP32[$490 >> 2] = $90; //@line 27556
       $491 = $ReallocAsyncCtx5 + 184 | 0; //@line 27557
       HEAP32[$491 >> 2] = $92; //@line 27558
       $492 = $ReallocAsyncCtx5 + 188 | 0; //@line 27559
       HEAP32[$492 >> 2] = $94; //@line 27560
       $493 = $ReallocAsyncCtx5 + 192 | 0; //@line 27561
       HEAP32[$493 >> 2] = $435; //@line 27562
       $494 = $ReallocAsyncCtx5 + 196 | 0; //@line 27563
       HEAP32[$494 >> 2] = $98; //@line 27564
       $495 = $ReallocAsyncCtx5 + 200 | 0; //@line 27565
       HEAP32[$495 >> 2] = $100; //@line 27566
       $496 = $ReallocAsyncCtx5 + 204 | 0; //@line 27567
       HEAP32[$496 >> 2] = $443; //@line 27568
       $497 = $ReallocAsyncCtx5 + 208 | 0; //@line 27569
       HEAP32[$497 >> 2] = $104; //@line 27570
       $498 = $ReallocAsyncCtx5 + 212 | 0; //@line 27571
       HEAP32[$498 >> 2] = $106; //@line 27572
       $499 = $ReallocAsyncCtx5 + 216 | 0; //@line 27573
       HEAP32[$499 >> 2] = $108; //@line 27574
       $500 = $ReallocAsyncCtx5 + 220 | 0; //@line 27575
       HEAP32[$500 >> 2] = $110; //@line 27576
       $501 = $ReallocAsyncCtx5 + 224 | 0; //@line 27577
       HEAP32[$501 >> 2] = $112; //@line 27578
       $502 = $ReallocAsyncCtx5 + 228 | 0; //@line 27579
       HEAP32[$502 >> 2] = $114; //@line 27580
       $503 = $ReallocAsyncCtx5 + 232 | 0; //@line 27581
       HEAP32[$503 >> 2] = $116; //@line 27582
       $504 = $ReallocAsyncCtx5 + 236 | 0; //@line 27583
       HEAP32[$504 >> 2] = $118; //@line 27584
       $505 = $ReallocAsyncCtx5 + 240 | 0; //@line 27585
       HEAP32[$505 >> 2] = $120; //@line 27586
       $506 = $ReallocAsyncCtx5 + 244 | 0; //@line 27587
       HEAP32[$506 >> 2] = $122; //@line 27588
       $507 = $ReallocAsyncCtx5 + 248 | 0; //@line 27589
       HEAP32[$507 >> 2] = $124; //@line 27590
       $508 = $ReallocAsyncCtx5 + 252 | 0; //@line 27591
       HEAP32[$508 >> 2] = $126; //@line 27592
       $509 = $ReallocAsyncCtx5 + 256 | 0; //@line 27593
       HEAP32[$509 >> 2] = $128; //@line 27594
       $510 = $ReallocAsyncCtx5 + 260 | 0; //@line 27595
       HEAP32[$510 >> 2] = $130; //@line 27596
       $511 = $ReallocAsyncCtx5 + 264 | 0; //@line 27597
       HEAP32[$511 >> 2] = $132; //@line 27598
       $512 = $ReallocAsyncCtx5 + 268 | 0; //@line 27599
       HEAP32[$512 >> 2] = $134; //@line 27600
       $513 = $ReallocAsyncCtx5 + 272 | 0; //@line 27601
       HEAP32[$513 >> 2] = $136; //@line 27602
       sp = STACKTOP; //@line 27603
       return;
      }
     }
     _mbed_tracef(2, 3803, 4564, $118); //@line 27607
     break L2;
     break;
    }
   case 49:
    {
     $519 = HEAP32[$130 >> 2] | 0; //@line 27612
     $520 = $519 + 56 | 0; //@line 27613
     if (HEAP32[$520 >> 2] | 0) {
      _mbed_tracef(2, 3803, 4698, $94); //@line 27617
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 27621
     $524 = _sn_coap_parser_options_parse_multiple_options($2, $36, $179, $520, $519 + 6 | 0, 8, $$1202$i) | 0; //@line 27622
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 27625
      $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 27626
      HEAP32[$525 >> 2] = $2; //@line 27627
      $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 27628
      HEAP32[$526 >> 2] = $4; //@line 27629
      $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 27630
      HEAP32[$527 >> 2] = $6; //@line 27631
      $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 27632
      HEAP32[$528 >> 2] = $8; //@line 27633
      $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 27634
      HEAP32[$529 >> 2] = $10; //@line 27635
      $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 27636
      HEAP32[$530 >> 2] = $12; //@line 27637
      $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 27638
      HEAP32[$531 >> 2] = $14; //@line 27639
      $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 27640
      HEAP32[$532 >> 2] = $16; //@line 27641
      $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 27642
      HEAP32[$533 >> 2] = $18; //@line 27643
      $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 27644
      HEAP32[$534 >> 2] = $20; //@line 27645
      $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 27646
      HEAP32[$535 >> 2] = $22; //@line 27647
      $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 27648
      HEAP32[$536 >> 2] = $24; //@line 27649
      $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 27650
      HEAP32[$537 >> 2] = $26; //@line 27651
      $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 27652
      HEAP32[$538 >> 2] = $28; //@line 27653
      $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 27654
      HEAP32[$539 >> 2] = $30; //@line 27655
      $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 27656
      HEAP32[$540 >> 2] = $32; //@line 27657
      $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 27658
      HEAP32[$541 >> 2] = $34; //@line 27659
      $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 27660
      HEAP32[$542 >> 2] = $36; //@line 27661
      $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 27662
      HEAP32[$543 >> 2] = $38; //@line 27663
      $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 27664
      HEAP32[$544 >> 2] = $40; //@line 27665
      $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 27666
      HEAP32[$545 >> 2] = $42; //@line 27667
      $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 27668
      HEAP32[$546 >> 2] = $44; //@line 27669
      $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 27670
      HEAP32[$547 >> 2] = $46; //@line 27671
      $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 27672
      HEAP32[$548 >> 2] = $48; //@line 27673
      $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 27674
      HEAP32[$549 >> 2] = $50; //@line 27675
      $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 27676
      HEAP32[$550 >> 2] = $52; //@line 27677
      $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 27678
      HEAP32[$551 >> 2] = $54; //@line 27679
      $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 27680
      HEAP32[$552 >> 2] = $56; //@line 27681
      $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 27682
      HEAP32[$553 >> 2] = $58; //@line 27683
      $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 27684
      HEAP32[$554 >> 2] = $60; //@line 27685
      $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 27686
      HEAP32[$555 >> 2] = $161; //@line 27687
      $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 27688
      HEAP32[$556 >> 2] = $64; //@line 27689
      $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 27690
      HEAP32[$557 >> 2] = $66; //@line 27691
      $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 27692
      HEAP32[$558 >> 2] = $68; //@line 27693
      $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 27694
      HEAP32[$559 >> 2] = $70; //@line 27695
      $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 27696
      HEAP32[$560 >> 2] = $72; //@line 27697
      $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 27698
      HEAP32[$561 >> 2] = $74; //@line 27699
      $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 27700
      HEAP32[$562 >> 2] = $76; //@line 27701
      $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 27702
      HEAP32[$563 >> 2] = $78; //@line 27703
      $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 27704
      HEAP32[$564 >> 2] = $80; //@line 27705
      $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 27706
      HEAP32[$565 >> 2] = $82; //@line 27707
      $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 27708
      HEAP32[$566 >> 2] = $84; //@line 27709
      $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 27710
      HEAP32[$567 >> 2] = $86; //@line 27711
      $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 27712
      HEAP32[$568 >> 2] = $88; //@line 27713
      $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 27714
      HEAP32[$569 >> 2] = $90; //@line 27715
      $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 27716
      HEAP32[$570 >> 2] = $92; //@line 27717
      $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 27718
      HEAP32[$571 >> 2] = $94; //@line 27719
      $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 27720
      HEAP32[$572 >> 2] = $98; //@line 27721
      $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 27722
      HEAP32[$573 >> 2] = $100; //@line 27723
      $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 27724
      HEAP32[$574 >> 2] = $104; //@line 27725
      $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 27726
      HEAP32[$575 >> 2] = $106; //@line 27727
      $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 27728
      HEAP32[$576 >> 2] = $108; //@line 27729
      $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 27730
      HEAP32[$577 >> 2] = $110; //@line 27731
      $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 27732
      HEAP32[$578 >> 2] = $112; //@line 27733
      $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 27734
      HEAP32[$579 >> 2] = $114; //@line 27735
      $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 27736
      HEAP32[$580 >> 2] = $116; //@line 27737
      $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 27738
      HEAP32[$581 >> 2] = $118; //@line 27739
      $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 27740
      HEAP32[$582 >> 2] = $120; //@line 27741
      $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 27742
      HEAP32[$583 >> 2] = $122; //@line 27743
      $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 27744
      HEAP32[$584 >> 2] = $124; //@line 27745
      $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 27746
      HEAP32[$585 >> 2] = $126; //@line 27747
      $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 27748
      HEAP32[$586 >> 2] = $128; //@line 27749
      $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 27750
      HEAP32[$587 >> 2] = $130; //@line 27751
      $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 27752
      HEAP32[$588 >> 2] = $132; //@line 27753
      $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 27754
      HEAP32[$589 >> 2] = $134; //@line 27755
      $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 27756
      HEAP32[$590 >> 2] = $136; //@line 27757
      sp = STACKTOP; //@line 27758
      return;
     }
     HEAP8[___async_retval >> 0] = $524; //@line 27762
     ___async_unwind = 0; //@line 27763
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 27764
     $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 27765
     HEAP32[$525 >> 2] = $2; //@line 27766
     $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 27767
     HEAP32[$526 >> 2] = $4; //@line 27768
     $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 27769
     HEAP32[$527 >> 2] = $6; //@line 27770
     $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 27771
     HEAP32[$528 >> 2] = $8; //@line 27772
     $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 27773
     HEAP32[$529 >> 2] = $10; //@line 27774
     $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 27775
     HEAP32[$530 >> 2] = $12; //@line 27776
     $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 27777
     HEAP32[$531 >> 2] = $14; //@line 27778
     $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 27779
     HEAP32[$532 >> 2] = $16; //@line 27780
     $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 27781
     HEAP32[$533 >> 2] = $18; //@line 27782
     $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 27783
     HEAP32[$534 >> 2] = $20; //@line 27784
     $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 27785
     HEAP32[$535 >> 2] = $22; //@line 27786
     $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 27787
     HEAP32[$536 >> 2] = $24; //@line 27788
     $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 27789
     HEAP32[$537 >> 2] = $26; //@line 27790
     $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 27791
     HEAP32[$538 >> 2] = $28; //@line 27792
     $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 27793
     HEAP32[$539 >> 2] = $30; //@line 27794
     $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 27795
     HEAP32[$540 >> 2] = $32; //@line 27796
     $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 27797
     HEAP32[$541 >> 2] = $34; //@line 27798
     $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 27799
     HEAP32[$542 >> 2] = $36; //@line 27800
     $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 27801
     HEAP32[$543 >> 2] = $38; //@line 27802
     $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 27803
     HEAP32[$544 >> 2] = $40; //@line 27804
     $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 27805
     HEAP32[$545 >> 2] = $42; //@line 27806
     $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 27807
     HEAP32[$546 >> 2] = $44; //@line 27808
     $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 27809
     HEAP32[$547 >> 2] = $46; //@line 27810
     $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 27811
     HEAP32[$548 >> 2] = $48; //@line 27812
     $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 27813
     HEAP32[$549 >> 2] = $50; //@line 27814
     $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 27815
     HEAP32[$550 >> 2] = $52; //@line 27816
     $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 27817
     HEAP32[$551 >> 2] = $54; //@line 27818
     $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 27819
     HEAP32[$552 >> 2] = $56; //@line 27820
     $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 27821
     HEAP32[$553 >> 2] = $58; //@line 27822
     $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 27823
     HEAP32[$554 >> 2] = $60; //@line 27824
     $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 27825
     HEAP32[$555 >> 2] = $161; //@line 27826
     $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 27827
     HEAP32[$556 >> 2] = $64; //@line 27828
     $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 27829
     HEAP32[$557 >> 2] = $66; //@line 27830
     $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 27831
     HEAP32[$558 >> 2] = $68; //@line 27832
     $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 27833
     HEAP32[$559 >> 2] = $70; //@line 27834
     $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 27835
     HEAP32[$560 >> 2] = $72; //@line 27836
     $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 27837
     HEAP32[$561 >> 2] = $74; //@line 27838
     $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 27839
     HEAP32[$562 >> 2] = $76; //@line 27840
     $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 27841
     HEAP32[$563 >> 2] = $78; //@line 27842
     $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 27843
     HEAP32[$564 >> 2] = $80; //@line 27844
     $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 27845
     HEAP32[$565 >> 2] = $82; //@line 27846
     $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 27847
     HEAP32[$566 >> 2] = $84; //@line 27848
     $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 27849
     HEAP32[$567 >> 2] = $86; //@line 27850
     $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 27851
     HEAP32[$568 >> 2] = $88; //@line 27852
     $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 27853
     HEAP32[$569 >> 2] = $90; //@line 27854
     $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 27855
     HEAP32[$570 >> 2] = $92; //@line 27856
     $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 27857
     HEAP32[$571 >> 2] = $94; //@line 27858
     $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 27859
     HEAP32[$572 >> 2] = $98; //@line 27860
     $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 27861
     HEAP32[$573 >> 2] = $100; //@line 27862
     $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 27863
     HEAP32[$574 >> 2] = $104; //@line 27864
     $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 27865
     HEAP32[$575 >> 2] = $106; //@line 27866
     $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 27867
     HEAP32[$576 >> 2] = $108; //@line 27868
     $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 27869
     HEAP32[$577 >> 2] = $110; //@line 27870
     $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 27871
     HEAP32[$578 >> 2] = $112; //@line 27872
     $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 27873
     HEAP32[$579 >> 2] = $114; //@line 27874
     $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 27875
     HEAP32[$580 >> 2] = $116; //@line 27876
     $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 27877
     HEAP32[$581 >> 2] = $118; //@line 27878
     $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 27879
     HEAP32[$582 >> 2] = $120; //@line 27880
     $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 27881
     HEAP32[$583 >> 2] = $122; //@line 27882
     $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 27883
     HEAP32[$584 >> 2] = $124; //@line 27884
     $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 27885
     HEAP32[$585 >> 2] = $126; //@line 27886
     $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 27887
     HEAP32[$586 >> 2] = $128; //@line 27888
     $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 27889
     HEAP32[$587 >> 2] = $130; //@line 27890
     $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 27891
     HEAP32[$588 >> 2] = $132; //@line 27892
     $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 27893
     HEAP32[$589 >> 2] = $134; //@line 27894
     $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 27895
     HEAP32[$590 >> 2] = $136; //@line 27896
     sp = STACKTOP; //@line 27897
     return;
    }
   case 56:
    {
     _mbed_tracef(2, 3803, 4831, $66); //@line 27902
     break L2;
     break;
    }
   case 60:
    {
     $608 = HEAP32[$130 >> 2] | 0; //@line 27907
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 27910
     $611 = _sn_coap_parser_options_parse_multiple_options($2, $36, $179, $608 + 60 | 0, $608 + 8 | 0, 20, $$1202$i) | 0; //@line 27911
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 27914
      $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 27915
      HEAP32[$612 >> 2] = $2; //@line 27916
      $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 27917
      HEAP32[$613 >> 2] = $4; //@line 27918
      $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 27919
      HEAP32[$614 >> 2] = $6; //@line 27920
      $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 27921
      HEAP32[$615 >> 2] = $8; //@line 27922
      $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 27923
      HEAP32[$616 >> 2] = $10; //@line 27924
      $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 27925
      HEAP32[$617 >> 2] = $12; //@line 27926
      $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 27927
      HEAP32[$618 >> 2] = $14; //@line 27928
      $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 27929
      HEAP32[$619 >> 2] = $16; //@line 27930
      $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 27931
      HEAP32[$620 >> 2] = $18; //@line 27932
      $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 27933
      HEAP32[$621 >> 2] = $20; //@line 27934
      $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 27935
      HEAP32[$622 >> 2] = $22; //@line 27936
      $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 27937
      HEAP32[$623 >> 2] = $24; //@line 27938
      $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 27939
      HEAP32[$624 >> 2] = $26; //@line 27940
      $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 27941
      HEAP32[$625 >> 2] = $28; //@line 27942
      $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 27943
      HEAP32[$626 >> 2] = $30; //@line 27944
      $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 27945
      HEAP32[$627 >> 2] = $32; //@line 27946
      $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 27947
      HEAP32[$628 >> 2] = $34; //@line 27948
      $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 27949
      HEAP32[$629 >> 2] = $36; //@line 27950
      $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 27951
      HEAP32[$630 >> 2] = $38; //@line 27952
      $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 27953
      HEAP32[$631 >> 2] = $40; //@line 27954
      $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 27955
      HEAP32[$632 >> 2] = $42; //@line 27956
      $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 27957
      HEAP32[$633 >> 2] = $44; //@line 27958
      $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 27959
      HEAP32[$634 >> 2] = $46; //@line 27960
      $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 27961
      HEAP32[$635 >> 2] = $48; //@line 27962
      $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 27963
      HEAP32[$636 >> 2] = $50; //@line 27964
      $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 27965
      HEAP32[$637 >> 2] = $52; //@line 27966
      $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 27967
      HEAP32[$638 >> 2] = $54; //@line 27968
      $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 27969
      HEAP32[$639 >> 2] = $56; //@line 27970
      $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 27971
      HEAP32[$640 >> 2] = $58; //@line 27972
      $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 27973
      HEAP32[$641 >> 2] = $60; //@line 27974
      $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 27975
      HEAP32[$642 >> 2] = $161; //@line 27976
      $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 27977
      HEAP32[$643 >> 2] = $64; //@line 27978
      $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 27979
      HEAP32[$644 >> 2] = $66; //@line 27980
      $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 27981
      HEAP32[$645 >> 2] = $68; //@line 27982
      $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 27983
      HEAP32[$646 >> 2] = $70; //@line 27984
      $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 27985
      HEAP32[$647 >> 2] = $72; //@line 27986
      $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 27987
      HEAP32[$648 >> 2] = $74; //@line 27988
      $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 27989
      HEAP32[$649 >> 2] = $76; //@line 27990
      $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 27991
      HEAP32[$650 >> 2] = $78; //@line 27992
      $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 27993
      HEAP32[$651 >> 2] = $80; //@line 27994
      $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 27995
      HEAP32[$652 >> 2] = $82; //@line 27996
      $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 27997
      HEAP32[$653 >> 2] = $84; //@line 27998
      $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 27999
      HEAP32[$654 >> 2] = $86; //@line 28000
      $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 28001
      HEAP32[$655 >> 2] = $88; //@line 28002
      $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 28003
      HEAP32[$656 >> 2] = $90; //@line 28004
      $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 28005
      HEAP32[$657 >> 2] = $92; //@line 28006
      $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 28007
      HEAP32[$658 >> 2] = $94; //@line 28008
      $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 28009
      HEAP32[$659 >> 2] = $98; //@line 28010
      $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 28011
      HEAP32[$660 >> 2] = $100; //@line 28012
      $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 28013
      HEAP32[$661 >> 2] = $104; //@line 28014
      $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 28015
      HEAP32[$662 >> 2] = $106; //@line 28016
      $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 28017
      HEAP32[$663 >> 2] = $108; //@line 28018
      $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 28019
      HEAP32[$664 >> 2] = $110; //@line 28020
      $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 28021
      HEAP32[$665 >> 2] = $112; //@line 28022
      $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 28023
      HEAP32[$666 >> 2] = $114; //@line 28024
      $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 28025
      HEAP32[$667 >> 2] = $116; //@line 28026
      $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 28027
      HEAP32[$668 >> 2] = $118; //@line 28028
      $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 28029
      HEAP32[$669 >> 2] = $120; //@line 28030
      $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 28031
      HEAP32[$670 >> 2] = $122; //@line 28032
      $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 28033
      HEAP32[$671 >> 2] = $124; //@line 28034
      $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 28035
      HEAP32[$672 >> 2] = $126; //@line 28036
      $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 28037
      HEAP32[$673 >> 2] = $128; //@line 28038
      $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 28039
      HEAP32[$674 >> 2] = $130; //@line 28040
      $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 28041
      HEAP32[$675 >> 2] = $132; //@line 28042
      $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 28043
      HEAP32[$676 >> 2] = $134; //@line 28044
      $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 28045
      HEAP32[$677 >> 2] = $136; //@line 28046
      sp = STACKTOP; //@line 28047
      return;
     }
     HEAP8[___async_retval >> 0] = $611; //@line 28051
     ___async_unwind = 0; //@line 28052
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 28053
     $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 28054
     HEAP32[$612 >> 2] = $2; //@line 28055
     $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 28056
     HEAP32[$613 >> 2] = $4; //@line 28057
     $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 28058
     HEAP32[$614 >> 2] = $6; //@line 28059
     $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 28060
     HEAP32[$615 >> 2] = $8; //@line 28061
     $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 28062
     HEAP32[$616 >> 2] = $10; //@line 28063
     $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 28064
     HEAP32[$617 >> 2] = $12; //@line 28065
     $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 28066
     HEAP32[$618 >> 2] = $14; //@line 28067
     $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 28068
     HEAP32[$619 >> 2] = $16; //@line 28069
     $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 28070
     HEAP32[$620 >> 2] = $18; //@line 28071
     $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 28072
     HEAP32[$621 >> 2] = $20; //@line 28073
     $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 28074
     HEAP32[$622 >> 2] = $22; //@line 28075
     $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 28076
     HEAP32[$623 >> 2] = $24; //@line 28077
     $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 28078
     HEAP32[$624 >> 2] = $26; //@line 28079
     $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 28080
     HEAP32[$625 >> 2] = $28; //@line 28081
     $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 28082
     HEAP32[$626 >> 2] = $30; //@line 28083
     $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 28084
     HEAP32[$627 >> 2] = $32; //@line 28085
     $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 28086
     HEAP32[$628 >> 2] = $34; //@line 28087
     $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 28088
     HEAP32[$629 >> 2] = $36; //@line 28089
     $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 28090
     HEAP32[$630 >> 2] = $38; //@line 28091
     $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 28092
     HEAP32[$631 >> 2] = $40; //@line 28093
     $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 28094
     HEAP32[$632 >> 2] = $42; //@line 28095
     $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 28096
     HEAP32[$633 >> 2] = $44; //@line 28097
     $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 28098
     HEAP32[$634 >> 2] = $46; //@line 28099
     $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 28100
     HEAP32[$635 >> 2] = $48; //@line 28101
     $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 28102
     HEAP32[$636 >> 2] = $50; //@line 28103
     $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 28104
     HEAP32[$637 >> 2] = $52; //@line 28105
     $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 28106
     HEAP32[$638 >> 2] = $54; //@line 28107
     $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 28108
     HEAP32[$639 >> 2] = $56; //@line 28109
     $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 28110
     HEAP32[$640 >> 2] = $58; //@line 28111
     $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 28112
     HEAP32[$641 >> 2] = $60; //@line 28113
     $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 28114
     HEAP32[$642 >> 2] = $161; //@line 28115
     $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 28116
     HEAP32[$643 >> 2] = $64; //@line 28117
     $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 28118
     HEAP32[$644 >> 2] = $66; //@line 28119
     $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 28120
     HEAP32[$645 >> 2] = $68; //@line 28121
     $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 28122
     HEAP32[$646 >> 2] = $70; //@line 28123
     $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 28124
     HEAP32[$647 >> 2] = $72; //@line 28125
     $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 28126
     HEAP32[$648 >> 2] = $74; //@line 28127
     $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 28128
     HEAP32[$649 >> 2] = $76; //@line 28129
     $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 28130
     HEAP32[$650 >> 2] = $78; //@line 28131
     $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 28132
     HEAP32[$651 >> 2] = $80; //@line 28133
     $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 28134
     HEAP32[$652 >> 2] = $82; //@line 28135
     $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 28136
     HEAP32[$653 >> 2] = $84; //@line 28137
     $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 28138
     HEAP32[$654 >> 2] = $86; //@line 28139
     $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 28140
     HEAP32[$655 >> 2] = $88; //@line 28141
     $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 28142
     HEAP32[$656 >> 2] = $90; //@line 28143
     $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 28144
     HEAP32[$657 >> 2] = $92; //@line 28145
     $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 28146
     HEAP32[$658 >> 2] = $94; //@line 28147
     $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 28148
     HEAP32[$659 >> 2] = $98; //@line 28149
     $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 28150
     HEAP32[$660 >> 2] = $100; //@line 28151
     $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 28152
     HEAP32[$661 >> 2] = $104; //@line 28153
     $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 28154
     HEAP32[$662 >> 2] = $106; //@line 28155
     $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 28156
     HEAP32[$663 >> 2] = $108; //@line 28157
     $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 28158
     HEAP32[$664 >> 2] = $110; //@line 28159
     $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 28160
     HEAP32[$665 >> 2] = $112; //@line 28161
     $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 28162
     HEAP32[$666 >> 2] = $114; //@line 28163
     $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 28164
     HEAP32[$667 >> 2] = $116; //@line 28165
     $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 28166
     HEAP32[$668 >> 2] = $118; //@line 28167
     $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 28168
     HEAP32[$669 >> 2] = $120; //@line 28169
     $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 28170
     HEAP32[$670 >> 2] = $122; //@line 28171
     $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 28172
     HEAP32[$671 >> 2] = $124; //@line 28173
     $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 28174
     HEAP32[$672 >> 2] = $126; //@line 28175
     $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 28176
     HEAP32[$673 >> 2] = $128; //@line 28177
     $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 28178
     HEAP32[$674 >> 2] = $130; //@line 28179
     $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 28180
     HEAP32[$675 >> 2] = $132; //@line 28181
     $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 28182
     HEAP32[$676 >> 2] = $134; //@line 28183
     $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 28184
     HEAP32[$677 >> 2] = $136; //@line 28185
     sp = STACKTOP; //@line 28186
     return;
    }
   case 63:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 28191
     $679 = _sn_coap_parser_options_parse_multiple_options($2, $36, $179, $4, $22, 11, $$1202$i) | 0; //@line 28192
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 28195
      $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 28196
      HEAP32[$680 >> 2] = $2; //@line 28197
      $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 28198
      HEAP32[$681 >> 2] = $4; //@line 28199
      $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 28200
      HEAP32[$682 >> 2] = $6; //@line 28201
      $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 28202
      HEAP32[$683 >> 2] = $8; //@line 28203
      $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 28204
      HEAP32[$684 >> 2] = $10; //@line 28205
      $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 28206
      HEAP32[$685 >> 2] = $12; //@line 28207
      $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 28208
      HEAP32[$686 >> 2] = $14; //@line 28209
      $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 28210
      HEAP32[$687 >> 2] = $16; //@line 28211
      $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 28212
      HEAP32[$688 >> 2] = $18; //@line 28213
      $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 28214
      HEAP32[$689 >> 2] = $20; //@line 28215
      $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 28216
      HEAP32[$690 >> 2] = $22; //@line 28217
      $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 28218
      HEAP32[$691 >> 2] = $24; //@line 28219
      $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 28220
      HEAP32[$692 >> 2] = $26; //@line 28221
      $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 28222
      HEAP32[$693 >> 2] = $28; //@line 28223
      $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 28224
      HEAP32[$694 >> 2] = $30; //@line 28225
      $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 28226
      HEAP32[$695 >> 2] = $32; //@line 28227
      $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 28228
      HEAP32[$696 >> 2] = $34; //@line 28229
      $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 28230
      HEAP32[$697 >> 2] = $36; //@line 28231
      $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 28232
      HEAP32[$698 >> 2] = $38; //@line 28233
      $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 28234
      HEAP32[$699 >> 2] = $40; //@line 28235
      $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 28236
      HEAP32[$700 >> 2] = $42; //@line 28237
      $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 28238
      HEAP32[$701 >> 2] = $44; //@line 28239
      $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 28240
      HEAP32[$702 >> 2] = $46; //@line 28241
      $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 28242
      HEAP32[$703 >> 2] = $48; //@line 28243
      $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 28244
      HEAP32[$704 >> 2] = $50; //@line 28245
      $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 28246
      HEAP32[$705 >> 2] = $52; //@line 28247
      $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 28248
      HEAP32[$706 >> 2] = $54; //@line 28249
      $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 28250
      HEAP32[$707 >> 2] = $56; //@line 28251
      $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 28252
      HEAP32[$708 >> 2] = $58; //@line 28253
      $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 28254
      HEAP32[$709 >> 2] = $60; //@line 28255
      $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 28256
      HEAP32[$710 >> 2] = $161; //@line 28257
      $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 28258
      HEAP32[$711 >> 2] = $64; //@line 28259
      $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 28260
      HEAP32[$712 >> 2] = $66; //@line 28261
      $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 28262
      HEAP32[$713 >> 2] = $68; //@line 28263
      $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 28264
      HEAP32[$714 >> 2] = $70; //@line 28265
      $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 28266
      HEAP32[$715 >> 2] = $72; //@line 28267
      $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 28268
      HEAP32[$716 >> 2] = $74; //@line 28269
      $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 28270
      HEAP32[$717 >> 2] = $76; //@line 28271
      $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 28272
      HEAP32[$718 >> 2] = $78; //@line 28273
      $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 28274
      HEAP32[$719 >> 2] = $80; //@line 28275
      $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 28276
      HEAP32[$720 >> 2] = $82; //@line 28277
      $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 28278
      HEAP32[$721 >> 2] = $84; //@line 28279
      $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 28280
      HEAP32[$722 >> 2] = $86; //@line 28281
      $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 28282
      HEAP32[$723 >> 2] = $88; //@line 28283
      $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 28284
      HEAP32[$724 >> 2] = $90; //@line 28285
      $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 28286
      HEAP32[$725 >> 2] = $92; //@line 28287
      $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 28288
      HEAP32[$726 >> 2] = $94; //@line 28289
      $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 28290
      HEAP32[$727 >> 2] = $98; //@line 28291
      $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 28292
      HEAP32[$728 >> 2] = $100; //@line 28293
      $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 28294
      HEAP32[$729 >> 2] = $104; //@line 28295
      $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 28296
      HEAP32[$730 >> 2] = $106; //@line 28297
      $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 28298
      HEAP32[$731 >> 2] = $108; //@line 28299
      $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 28300
      HEAP32[$732 >> 2] = $110; //@line 28301
      $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 28302
      HEAP32[$733 >> 2] = $112; //@line 28303
      $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 28304
      HEAP32[$734 >> 2] = $114; //@line 28305
      $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 28306
      HEAP32[$735 >> 2] = $116; //@line 28307
      $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 28308
      HEAP32[$736 >> 2] = $118; //@line 28309
      $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 28310
      HEAP32[$737 >> 2] = $120; //@line 28311
      $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 28312
      HEAP32[$738 >> 2] = $122; //@line 28313
      $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 28314
      HEAP32[$739 >> 2] = $124; //@line 28315
      $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 28316
      HEAP32[$740 >> 2] = $126; //@line 28317
      $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 28318
      HEAP32[$741 >> 2] = $128; //@line 28319
      $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 28320
      HEAP32[$742 >> 2] = $130; //@line 28321
      $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 28322
      HEAP32[$743 >> 2] = $132; //@line 28323
      $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 28324
      HEAP32[$744 >> 2] = $134; //@line 28325
      $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 28326
      HEAP32[$745 >> 2] = $136; //@line 28327
      sp = STACKTOP; //@line 28328
      return;
     }
     HEAP8[___async_retval >> 0] = $679; //@line 28332
     ___async_unwind = 0; //@line 28333
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 28334
     $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 28335
     HEAP32[$680 >> 2] = $2; //@line 28336
     $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 28337
     HEAP32[$681 >> 2] = $4; //@line 28338
     $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 28339
     HEAP32[$682 >> 2] = $6; //@line 28340
     $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 28341
     HEAP32[$683 >> 2] = $8; //@line 28342
     $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 28343
     HEAP32[$684 >> 2] = $10; //@line 28344
     $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 28345
     HEAP32[$685 >> 2] = $12; //@line 28346
     $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 28347
     HEAP32[$686 >> 2] = $14; //@line 28348
     $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 28349
     HEAP32[$687 >> 2] = $16; //@line 28350
     $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 28351
     HEAP32[$688 >> 2] = $18; //@line 28352
     $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 28353
     HEAP32[$689 >> 2] = $20; //@line 28354
     $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 28355
     HEAP32[$690 >> 2] = $22; //@line 28356
     $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 28357
     HEAP32[$691 >> 2] = $24; //@line 28358
     $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 28359
     HEAP32[$692 >> 2] = $26; //@line 28360
     $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 28361
     HEAP32[$693 >> 2] = $28; //@line 28362
     $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 28363
     HEAP32[$694 >> 2] = $30; //@line 28364
     $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 28365
     HEAP32[$695 >> 2] = $32; //@line 28366
     $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 28367
     HEAP32[$696 >> 2] = $34; //@line 28368
     $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 28369
     HEAP32[$697 >> 2] = $36; //@line 28370
     $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 28371
     HEAP32[$698 >> 2] = $38; //@line 28372
     $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 28373
     HEAP32[$699 >> 2] = $40; //@line 28374
     $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 28375
     HEAP32[$700 >> 2] = $42; //@line 28376
     $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 28377
     HEAP32[$701 >> 2] = $44; //@line 28378
     $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 28379
     HEAP32[$702 >> 2] = $46; //@line 28380
     $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 28381
     HEAP32[$703 >> 2] = $48; //@line 28382
     $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 28383
     HEAP32[$704 >> 2] = $50; //@line 28384
     $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 28385
     HEAP32[$705 >> 2] = $52; //@line 28386
     $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 28387
     HEAP32[$706 >> 2] = $54; //@line 28388
     $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 28389
     HEAP32[$707 >> 2] = $56; //@line 28390
     $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 28391
     HEAP32[$708 >> 2] = $58; //@line 28392
     $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 28393
     HEAP32[$709 >> 2] = $60; //@line 28394
     $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 28395
     HEAP32[$710 >> 2] = $161; //@line 28396
     $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 28397
     HEAP32[$711 >> 2] = $64; //@line 28398
     $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 28399
     HEAP32[$712 >> 2] = $66; //@line 28400
     $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 28401
     HEAP32[$713 >> 2] = $68; //@line 28402
     $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 28403
     HEAP32[$714 >> 2] = $70; //@line 28404
     $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 28405
     HEAP32[$715 >> 2] = $72; //@line 28406
     $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 28407
     HEAP32[$716 >> 2] = $74; //@line 28408
     $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 28409
     HEAP32[$717 >> 2] = $76; //@line 28410
     $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 28411
     HEAP32[$718 >> 2] = $78; //@line 28412
     $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 28413
     HEAP32[$719 >> 2] = $80; //@line 28414
     $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 28415
     HEAP32[$720 >> 2] = $82; //@line 28416
     $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 28417
     HEAP32[$721 >> 2] = $84; //@line 28418
     $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 28419
     HEAP32[$722 >> 2] = $86; //@line 28420
     $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 28421
     HEAP32[$723 >> 2] = $88; //@line 28422
     $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 28423
     HEAP32[$724 >> 2] = $90; //@line 28424
     $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 28425
     HEAP32[$725 >> 2] = $92; //@line 28426
     $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 28427
     HEAP32[$726 >> 2] = $94; //@line 28428
     $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 28429
     HEAP32[$727 >> 2] = $98; //@line 28430
     $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 28431
     HEAP32[$728 >> 2] = $100; //@line 28432
     $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 28433
     HEAP32[$729 >> 2] = $104; //@line 28434
     $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 28435
     HEAP32[$730 >> 2] = $106; //@line 28436
     $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 28437
     HEAP32[$731 >> 2] = $108; //@line 28438
     $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 28439
     HEAP32[$732 >> 2] = $110; //@line 28440
     $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 28441
     HEAP32[$733 >> 2] = $112; //@line 28442
     $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 28443
     HEAP32[$734 >> 2] = $114; //@line 28444
     $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 28445
     HEAP32[$735 >> 2] = $116; //@line 28446
     $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 28447
     HEAP32[$736 >> 2] = $118; //@line 28448
     $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 28449
     HEAP32[$737 >> 2] = $120; //@line 28450
     $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 28451
     HEAP32[$738 >> 2] = $122; //@line 28452
     $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 28453
     HEAP32[$739 >> 2] = $124; //@line 28454
     $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 28455
     HEAP32[$740 >> 2] = $126; //@line 28456
     $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 28457
     HEAP32[$741 >> 2] = $128; //@line 28458
     $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 28459
     HEAP32[$742 >> 2] = $130; //@line 28460
     $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 28461
     HEAP32[$743 >> 2] = $132; //@line 28462
     $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 28463
     HEAP32[$744 >> 2] = $134; //@line 28464
     $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 28465
     HEAP32[$745 >> 2] = $136; //@line 28466
     sp = STACKTOP; //@line 28467
     return;
    }
   case 68:
    {
     _mbed_tracef(2, 3803, 5026, $48); //@line 28472
     break L2;
     break;
    }
   case 72:
    {
     $763 = HEAP32[$130 >> 2] | 0; //@line 28477
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 28480
     $766 = _sn_coap_parser_options_parse_multiple_options($2, $36, $179, $763 + 64 | 0, $763 + 10 | 0, 15, $$1202$i) | 0; //@line 28481
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 28484
      $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 28485
      HEAP32[$767 >> 2] = $2; //@line 28486
      $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 28487
      HEAP32[$768 >> 2] = $4; //@line 28488
      $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 28489
      HEAP32[$769 >> 2] = $6; //@line 28490
      $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 28491
      HEAP32[$770 >> 2] = $8; //@line 28492
      $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 28493
      HEAP32[$771 >> 2] = $10; //@line 28494
      $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 28495
      HEAP32[$772 >> 2] = $12; //@line 28496
      $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 28497
      HEAP32[$773 >> 2] = $14; //@line 28498
      $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 28499
      HEAP32[$774 >> 2] = $16; //@line 28500
      $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 28501
      HEAP32[$775 >> 2] = $18; //@line 28502
      $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 28503
      HEAP32[$776 >> 2] = $20; //@line 28504
      $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 28505
      HEAP32[$777 >> 2] = $22; //@line 28506
      $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 28507
      HEAP32[$778 >> 2] = $24; //@line 28508
      $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 28509
      HEAP32[$779 >> 2] = $26; //@line 28510
      $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 28511
      HEAP32[$780 >> 2] = $28; //@line 28512
      $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 28513
      HEAP32[$781 >> 2] = $30; //@line 28514
      $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 28515
      HEAP32[$782 >> 2] = $32; //@line 28516
      $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 28517
      HEAP32[$783 >> 2] = $34; //@line 28518
      $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 28519
      HEAP32[$784 >> 2] = $36; //@line 28520
      $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 28521
      HEAP32[$785 >> 2] = $38; //@line 28522
      $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 28523
      HEAP32[$786 >> 2] = $40; //@line 28524
      $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 28525
      HEAP32[$787 >> 2] = $42; //@line 28526
      $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 28527
      HEAP32[$788 >> 2] = $44; //@line 28528
      $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 28529
      HEAP32[$789 >> 2] = $46; //@line 28530
      $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 28531
      HEAP32[$790 >> 2] = $48; //@line 28532
      $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 28533
      HEAP32[$791 >> 2] = $50; //@line 28534
      $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 28535
      HEAP32[$792 >> 2] = $52; //@line 28536
      $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 28537
      HEAP32[$793 >> 2] = $54; //@line 28538
      $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 28539
      HEAP32[$794 >> 2] = $56; //@line 28540
      $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 28541
      HEAP32[$795 >> 2] = $58; //@line 28542
      $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 28543
      HEAP32[$796 >> 2] = $60; //@line 28544
      $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 28545
      HEAP32[$797 >> 2] = $161; //@line 28546
      $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 28547
      HEAP32[$798 >> 2] = $64; //@line 28548
      $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 28549
      HEAP32[$799 >> 2] = $66; //@line 28550
      $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 28551
      HEAP32[$800 >> 2] = $68; //@line 28552
      $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 28553
      HEAP32[$801 >> 2] = $70; //@line 28554
      $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 28555
      HEAP32[$802 >> 2] = $72; //@line 28556
      $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 28557
      HEAP32[$803 >> 2] = $74; //@line 28558
      $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 28559
      HEAP32[$804 >> 2] = $76; //@line 28560
      $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 28561
      HEAP32[$805 >> 2] = $78; //@line 28562
      $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 28563
      HEAP32[$806 >> 2] = $80; //@line 28564
      $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 28565
      HEAP32[$807 >> 2] = $82; //@line 28566
      $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 28567
      HEAP32[$808 >> 2] = $84; //@line 28568
      $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 28569
      HEAP32[$809 >> 2] = $86; //@line 28570
      $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 28571
      HEAP32[$810 >> 2] = $88; //@line 28572
      $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 28573
      HEAP32[$811 >> 2] = $90; //@line 28574
      $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 28575
      HEAP32[$812 >> 2] = $92; //@line 28576
      $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 28577
      HEAP32[$813 >> 2] = $94; //@line 28578
      $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 28579
      HEAP32[$814 >> 2] = $98; //@line 28580
      $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 28581
      HEAP32[$815 >> 2] = $100; //@line 28582
      $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 28583
      HEAP32[$816 >> 2] = $104; //@line 28584
      $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 28585
      HEAP32[$817 >> 2] = $106; //@line 28586
      $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 28587
      HEAP32[$818 >> 2] = $108; //@line 28588
      $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 28589
      HEAP32[$819 >> 2] = $110; //@line 28590
      $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 28591
      HEAP32[$820 >> 2] = $112; //@line 28592
      $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 28593
      HEAP32[$821 >> 2] = $114; //@line 28594
      $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 28595
      HEAP32[$822 >> 2] = $116; //@line 28596
      $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 28597
      HEAP32[$823 >> 2] = $118; //@line 28598
      $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 28599
      HEAP32[$824 >> 2] = $120; //@line 28600
      $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 28601
      HEAP32[$825 >> 2] = $122; //@line 28602
      $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 28603
      HEAP32[$826 >> 2] = $124; //@line 28604
      $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 28605
      HEAP32[$827 >> 2] = $126; //@line 28606
      $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 28607
      HEAP32[$828 >> 2] = $128; //@line 28608
      $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 28609
      HEAP32[$829 >> 2] = $130; //@line 28610
      $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 28611
      HEAP32[$830 >> 2] = $132; //@line 28612
      $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 28613
      HEAP32[$831 >> 2] = $134; //@line 28614
      $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 28615
      HEAP32[$832 >> 2] = $136; //@line 28616
      sp = STACKTOP; //@line 28617
      return;
     }
     HEAP8[___async_retval >> 0] = $766; //@line 28621
     ___async_unwind = 0; //@line 28622
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 28623
     $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 28624
     HEAP32[$767 >> 2] = $2; //@line 28625
     $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 28626
     HEAP32[$768 >> 2] = $4; //@line 28627
     $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 28628
     HEAP32[$769 >> 2] = $6; //@line 28629
     $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 28630
     HEAP32[$770 >> 2] = $8; //@line 28631
     $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 28632
     HEAP32[$771 >> 2] = $10; //@line 28633
     $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 28634
     HEAP32[$772 >> 2] = $12; //@line 28635
     $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 28636
     HEAP32[$773 >> 2] = $14; //@line 28637
     $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 28638
     HEAP32[$774 >> 2] = $16; //@line 28639
     $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 28640
     HEAP32[$775 >> 2] = $18; //@line 28641
     $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 28642
     HEAP32[$776 >> 2] = $20; //@line 28643
     $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 28644
     HEAP32[$777 >> 2] = $22; //@line 28645
     $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 28646
     HEAP32[$778 >> 2] = $24; //@line 28647
     $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 28648
     HEAP32[$779 >> 2] = $26; //@line 28649
     $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 28650
     HEAP32[$780 >> 2] = $28; //@line 28651
     $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 28652
     HEAP32[$781 >> 2] = $30; //@line 28653
     $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 28654
     HEAP32[$782 >> 2] = $32; //@line 28655
     $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 28656
     HEAP32[$783 >> 2] = $34; //@line 28657
     $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 28658
     HEAP32[$784 >> 2] = $36; //@line 28659
     $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 28660
     HEAP32[$785 >> 2] = $38; //@line 28661
     $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 28662
     HEAP32[$786 >> 2] = $40; //@line 28663
     $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 28664
     HEAP32[$787 >> 2] = $42; //@line 28665
     $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 28666
     HEAP32[$788 >> 2] = $44; //@line 28667
     $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 28668
     HEAP32[$789 >> 2] = $46; //@line 28669
     $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 28670
     HEAP32[$790 >> 2] = $48; //@line 28671
     $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 28672
     HEAP32[$791 >> 2] = $50; //@line 28673
     $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 28674
     HEAP32[$792 >> 2] = $52; //@line 28675
     $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 28676
     HEAP32[$793 >> 2] = $54; //@line 28677
     $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 28678
     HEAP32[$794 >> 2] = $56; //@line 28679
     $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 28680
     HEAP32[$795 >> 2] = $58; //@line 28681
     $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 28682
     HEAP32[$796 >> 2] = $60; //@line 28683
     $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 28684
     HEAP32[$797 >> 2] = $161; //@line 28685
     $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 28686
     HEAP32[$798 >> 2] = $64; //@line 28687
     $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 28688
     HEAP32[$799 >> 2] = $66; //@line 28689
     $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 28690
     HEAP32[$800 >> 2] = $68; //@line 28691
     $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 28692
     HEAP32[$801 >> 2] = $70; //@line 28693
     $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 28694
     HEAP32[$802 >> 2] = $72; //@line 28695
     $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 28696
     HEAP32[$803 >> 2] = $74; //@line 28697
     $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 28698
     HEAP32[$804 >> 2] = $76; //@line 28699
     $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 28700
     HEAP32[$805 >> 2] = $78; //@line 28701
     $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 28702
     HEAP32[$806 >> 2] = $80; //@line 28703
     $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 28704
     HEAP32[$807 >> 2] = $82; //@line 28705
     $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 28706
     HEAP32[$808 >> 2] = $84; //@line 28707
     $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 28708
     HEAP32[$809 >> 2] = $86; //@line 28709
     $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 28710
     HEAP32[$810 >> 2] = $88; //@line 28711
     $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 28712
     HEAP32[$811 >> 2] = $90; //@line 28713
     $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 28714
     HEAP32[$812 >> 2] = $92; //@line 28715
     $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 28716
     HEAP32[$813 >> 2] = $94; //@line 28717
     $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 28718
     HEAP32[$814 >> 2] = $98; //@line 28719
     $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 28720
     HEAP32[$815 >> 2] = $100; //@line 28721
     $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 28722
     HEAP32[$816 >> 2] = $104; //@line 28723
     $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 28724
     HEAP32[$817 >> 2] = $106; //@line 28725
     $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 28726
     HEAP32[$818 >> 2] = $108; //@line 28727
     $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 28728
     HEAP32[$819 >> 2] = $110; //@line 28729
     $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 28730
     HEAP32[$820 >> 2] = $112; //@line 28731
     $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 28732
     HEAP32[$821 >> 2] = $114; //@line 28733
     $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 28734
     HEAP32[$822 >> 2] = $116; //@line 28735
     $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 28736
     HEAP32[$823 >> 2] = $118; //@line 28737
     $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 28738
     HEAP32[$824 >> 2] = $120; //@line 28739
     $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 28740
     HEAP32[$825 >> 2] = $122; //@line 28741
     $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 28742
     HEAP32[$826 >> 2] = $124; //@line 28743
     $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 28744
     HEAP32[$827 >> 2] = $126; //@line 28745
     $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 28746
     HEAP32[$828 >> 2] = $128; //@line 28747
     $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 28748
     HEAP32[$829 >> 2] = $130; //@line 28749
     $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 28750
     HEAP32[$830 >> 2] = $132; //@line 28751
     $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 28752
     HEAP32[$831 >> 2] = $134; //@line 28753
     $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 28754
     HEAP32[$832 >> 2] = $136; //@line 28755
     sp = STACKTOP; //@line 28756
     return;
    }
   case 77:
    {
     _mbed_tracef(2, 3803, 5152, $46); //@line 28761
     break L2;
     break;
    }
   case 83:
    {
     _mbed_tracef(2, 3803, 5213, $20); //@line 28766
     break L2;
     break;
    }
   case 89:
    {
     _mbed_tracef(2, 3803, 5274, $72); //@line 28771
     break L2;
     break;
    }
   case 95:
    {
     _mbed_tracef(2, 3803, 5335, $60); //@line 28776
     break L2;
     break;
    }
   case 101:
    {
     _mbed_tracef(2, 3803, 5395, $124); //@line 28781
     break L2;
     break;
    }
   case 105:
    {
     _mbed_tracef(2, 3803, 5455, $74); //@line 28786
     break L2;
     break;
    }
   case 108:
    {
     if (($141 - $92 | 0) >= ($80 | 0)) {
      $943 = ___async_retval; //@line 28795
      HEAP32[$943 >> 2] = $38; //@line 28796
      return;
     }
     if ((HEAP8[$141 >> 0] | 0) == -1) {
      $933 = $141 + 1 | 0; //@line 28802
      HEAP32[$36 >> 2] = $933; //@line 28803
      $934 = $933; //@line 28804
      $936 = $92 - $934 + $80 | 0; //@line 28806
      HEAP16[$82 + 24 >> 1] = $936; //@line 28809
      if ($936 & 65535 | 0) {
       HEAP32[$82 + 36 >> 2] = $934; //@line 28814
       $943 = ___async_retval; //@line 28815
       HEAP32[$943 >> 2] = $38; //@line 28816
       return;
      }
     } else {
      _mbed_tracef(2, 3803, 5502, $50); //@line 28820
     }
     HEAP32[$82 + 4 >> 2] = 1; //@line 28823
     $943 = ___async_retval; //@line 28824
     HEAP32[$943 >> 2] = $38; //@line 28825
     return;
    }
   }
  }
 } while (0);
 HEAP32[$82 + 4 >> 2] = 1; //@line 28833
 $943 = ___async_retval; //@line 28834
 HEAP32[$943 >> 2] = $38; //@line 28835
 return;
}
function _sn_coap_parser__async_cb_28($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $586 = 0, $589 = 0, $590 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $595$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 32108
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32110
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32112
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32114
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32116
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32118
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32120
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32122
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32124
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32126
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32128
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32130
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32132
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 32134
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 32136
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 32138
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 32140
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 32142
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 32144
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 32146
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 32148
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 32150
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 32152
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 32154
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 32156
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 32158
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 32160
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 32162
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 32164
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 32166
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 32168
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 32172
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 32174
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 32176
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 32178
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 32180
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 32182
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 32184
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 32186
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 32188
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 32190
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 32192
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 32194
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 32196
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 32198
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 32200
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 32202
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 32204
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 32206
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 32208
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 32210
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 32212
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 32214
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 32216
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 32218
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 32220
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 32222
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 32224
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 32226
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 32228
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 32230
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 32232
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 32234
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 32236
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 32238
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 32240
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 124 >> 2] | 0; //@line 32246
   L3 : while (1) {
    $917 = HEAP32[$68 >> 2] | 0; //@line 32248
    $918 = $917 - $92 | 0; //@line 32249
    $137 = $917; //@line 32252
    if (($918 | 0) > ($80 | 0)) {
     break L2;
    }
    if (!(($80 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 32259
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 32262
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 32265
     break;
    }
    $140 = $trunc277$i & 15; //@line 32269
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 32270
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 32275
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 32283
      $$sink214$i = 13; //@line 32283
      $$sink3$i = 1; //@line 32283
      label = 8; //@line 32284
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 32296
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 32296
      $$sink3$i = 2; //@line 32296
      label = 8; //@line 32297
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 32301
      $159 = $137; //@line 32301
      $937 = $917; //@line 32301
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 32305
     $154 = $137 + $$sink3$i | 0; //@line 32307
     HEAP32[$36 >> 2] = $154; //@line 32308
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 32310
     $159 = $154; //@line 32310
     $937 = $154; //@line 32310
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 32313
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 32317
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 32325
      $$sink216$i = 13; //@line 32325
      $$sink8$i = 1; //@line 32325
      label = 13; //@line 32326
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 32338
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 32338
      $$sink8$i = 2; //@line 32338
      label = 13; //@line 32339
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 32343
      $174 = $937; //@line 32343
      $189 = $159; //@line 32343
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 32347
     $171 = $159 + $$sink8$i | 0; //@line 32349
     HEAP32[$36 >> 2] = $171; //@line 32350
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 32352
     $174 = $171; //@line 32352
     $189 = $171; //@line 32352
    }
    $$1202$i = $$1202$in$i & 65535; //@line 32354
    $175 = $100 - $174 & 65535; //@line 32356
    $trunc$i = $157 & 65535; //@line 32357
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 60; //@line 32361
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$126 >> 2] | 0)) {
        label = 16; //@line 32369
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 32374
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 32379
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 32384
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 32389
         break L3;
         break;
        }
       case 20:
        {
         label = 57; //@line 32394
         break L3;
         break;
        }
       case 11:
        {
         label = 60; //@line 32399
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 32404
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 32415
          break L3;
         }
         $268 = $189 + 1 | 0; //@line 32418
         HEAP32[$36 >> 2] = $268; //@line 32419
         $269 = $$1202$in$i & 255; //@line 32420
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 32423
         } else {
          $$045$i221$i = $269; //@line 32425
          $$06$i220$i = 0; //@line 32425
          $274 = $268; //@line 32425
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 32427
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 32429
           HEAP32[$36 >> 2] = $274; //@line 32430
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 32433
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 32436
            break;
           } else {
            $$06$i220$i = $277; //@line 32439
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 32445
         $$reg2mem$0 = $157; //@line 32446
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 53; //@line 32453
          break L3;
         }
         $586 = (HEAP32[$126 >> 2] | 0) + 28 | 0; //@line 32457
         if ((HEAP32[$586 >> 2] | 0) != -1) {
          label = 53; //@line 32461
          break L3;
         }
         $589 = $189 + 1 | 0; //@line 32464
         HEAP32[$36 >> 2] = $589; //@line 32465
         $590 = $$1202$in$i & 255; //@line 32466
         if (!($590 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 32469
         } else {
          $$045$i263$i = $590; //@line 32471
          $$06$i262$i = 0; //@line 32471
          $595 = $589; //@line 32471
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 32473
           $595$looptemp = $595;
           $595 = $595 + 1 | 0; //@line 32475
           HEAP32[$36 >> 2] = $595; //@line 32476
           $598 = $$06$i262$i << 8 | HEAPU8[$595$looptemp >> 0]; //@line 32479
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $598; //@line 32482
            break;
           } else {
            $$06$i262$i = $598; //@line 32485
           }
          }
         }
         HEAP32[$586 >> 2] = $$0$lcssa$i265$i; //@line 32489
         $$reg2mem$0 = $157; //@line 32490
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 32497
          break L3;
         }
         $742 = (HEAP32[$126 >> 2] | 0) + 32 | 0; //@line 32501
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 32505
          break L3;
         }
         $745 = $189 + 1 | 0; //@line 32508
         HEAP32[$36 >> 2] = $745; //@line 32509
         $746 = $$1202$in$i & 255; //@line 32510
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 32513
         } else {
          $$045$i270$i = $746; //@line 32515
          $$06$i269$i = 0; //@line 32515
          $751 = $745; //@line 32515
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 32517
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 32519
           HEAP32[$36 >> 2] = $751; //@line 32520
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 32523
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 32526
            break;
           } else {
            $$06$i269$i = $754; //@line 32529
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 32533
         $$reg2mem$0 = $157; //@line 32534
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 32541
          break L3;
         }
         $829 = (HEAP32[$126 >> 2] | 0) + 40 | 0; //@line 32545
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 32549
          break L3;
         }
         $832 = $189 + 1 | 0; //@line 32552
         HEAP32[$36 >> 2] = $832; //@line 32553
         $833 = $$1202$in$i & 255; //@line 32554
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 32557
         } else {
          $$045$i256$i = $833; //@line 32559
          $$06$i255$i = 0; //@line 32559
          $838 = $832; //@line 32559
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 32561
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 32563
           HEAP32[$36 >> 2] = $838; //@line 32564
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 32567
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 32570
            break;
           } else {
            $$06$i255$i = $841; //@line 32573
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 32577
         $$reg2mem$0 = $157; //@line 32578
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 32585
          break L3;
         }
         $845 = (HEAP32[$126 >> 2] | 0) + 36 | 0; //@line 32589
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 32593
          break L3;
         }
         $848 = $189 + 1 | 0; //@line 32596
         HEAP32[$36 >> 2] = $848; //@line 32597
         $849 = $$1202$in$i & 255; //@line 32598
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 32601
         } else {
          $$045$i249$i = $849; //@line 32603
          $$06$i248$i = 0; //@line 32603
          $854 = $848; //@line 32603
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 32605
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 32607
           HEAP32[$36 >> 2] = $854; //@line 32608
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 32611
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 32614
            break;
           } else {
            $$06$i248$i = $857; //@line 32617
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 32621
         $$reg2mem$0 = $157; //@line 32622
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 32629
          break L3;
         }
         $861 = (HEAP32[$126 >> 2] | 0) + 12 | 0; //@line 32633
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 32637
          break L3;
         }
         $864 = $189 + 1 | 0; //@line 32640
         HEAP32[$36 >> 2] = $864; //@line 32641
         $865 = $$1202$in$i & 255; //@line 32642
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 32645
         } else {
          $$045$i242$i = $865; //@line 32647
          $$06$i241$i = 0; //@line 32647
          $870 = $864; //@line 32647
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 32649
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 32651
           HEAP32[$36 >> 2] = $870; //@line 32652
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 32655
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 32658
            break;
           } else {
            $$06$i241$i = $873; //@line 32661
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 32665
         $$reg2mem$0 = $157; //@line 32666
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 32673
          break L3;
         }
         $877 = (HEAP32[$126 >> 2] | 0) + 1 | 0; //@line 32677
         $878 = HEAP8[$877 >> 0] | 0; //@line 32678
         if ($878 & 1) {
          label = 94; //@line 32682
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 32686
         $883 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 32688
         HEAP32[$36 >> 2] = $883; //@line 32689
         $884 = $$1202$in$i & 255; //@line 32690
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 32693
         } else {
          $$045$i235$i = $884; //@line 32695
          $$06$i234$i = 0; //@line 32695
          $889 = $883; //@line 32695
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 32697
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 32699
           HEAP32[$36 >> 2] = $889; //@line 32700
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 32703
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 32706
            break;
           } else {
            $$06$i234$i = $892; //@line 32709
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 32715
         $$reg2mem$0 = $157; //@line 32716
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 32723
          break L3;
         }
         $898 = (HEAP32[$126 >> 2] | 0) + 1 | 0; //@line 32727
         $899 = HEAP8[$898 >> 0] | 0; //@line 32728
         if ($899 & 2) {
          label = 100; //@line 32732
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 32736
         $904 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 32738
         HEAP32[$36 >> 2] = $904; //@line 32739
         $905 = $$1202$in$i & 255; //@line 32740
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 32743
         } else {
          $$045$i228$i = $905; //@line 32745
          $$06$i227$i = 0; //@line 32745
          $910 = $904; //@line 32745
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 32747
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 32749
           HEAP32[$36 >> 2] = $910; //@line 32750
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 32753
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 32756
            break;
           } else {
            $$06$i227$i = $913; //@line 32759
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 32765
         $$reg2mem$0 = $157; //@line 32766
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 32771
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 32781
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 32788
     break;
    }
    if ((HEAP32[$10 >> 2] | 0) != -1) {
     label = 22; //@line 32794
     break;
    }
    $256 = $189 + 1 | 0; //@line 32797
    HEAP32[$36 >> 2] = $256; //@line 32798
    $257 = $$1202$in$i & 255; //@line 32799
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 32802
    } else {
     $$045$i$i = $257; //@line 32804
     $$06$i$i = 0; //@line 32804
     $262 = $256; //@line 32804
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 32806
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 32808
      HEAP32[$36 >> 2] = $262; //@line 32809
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 32812
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 32815
       break;
      } else {
       $$06$i$i = $265; //@line 32818
      }
     }
    }
    HEAP32[$10 >> 2] = $$0$lcssa$i$i; //@line 32822
    $$reg2mem$0 = $157; //@line 32823
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3803, 4066, $76); //@line 32827
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3803, 4124, $28); //@line 32832
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$128 >> 2] | 0; //@line 32837
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 32838
     $179 = FUNCTION_TABLE_ii[$178 & 31](68) | 0; //@line 32839
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 32842
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 32843
      HEAP32[$180 >> 2] = $2; //@line 32844
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 32845
      HEAP32[$181 >> 2] = $4; //@line 32846
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 32847
      HEAP32[$182 >> 2] = $6; //@line 32848
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 32849
      HEAP32[$183 >> 2] = $8; //@line 32850
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 32851
      HEAP32[$184 >> 2] = $10; //@line 32852
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 32853
      HEAP32[$185 >> 2] = $12; //@line 32854
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 32855
      HEAP32[$186 >> 2] = $14; //@line 32856
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 32857
      HEAP32[$187 >> 2] = $16; //@line 32858
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 32859
      HEAP32[$188 >> 2] = $189; //@line 32860
      $190 = $ReallocAsyncCtx3 + 40 | 0; //@line 32861
      HEAP32[$190 >> 2] = $18; //@line 32862
      $191 = $ReallocAsyncCtx3 + 44 | 0; //@line 32863
      HEAP32[$191 >> 2] = $20; //@line 32864
      $192 = $ReallocAsyncCtx3 + 48 | 0; //@line 32865
      HEAP32[$192 >> 2] = $22; //@line 32866
      $193 = $ReallocAsyncCtx3 + 52 | 0; //@line 32867
      HEAP32[$193 >> 2] = $24; //@line 32868
      $194 = $ReallocAsyncCtx3 + 56 | 0; //@line 32869
      HEAP32[$194 >> 2] = $26; //@line 32870
      $195 = $ReallocAsyncCtx3 + 60 | 0; //@line 32871
      HEAP32[$195 >> 2] = $28; //@line 32872
      $196 = $ReallocAsyncCtx3 + 64 | 0; //@line 32873
      HEAP32[$196 >> 2] = $30; //@line 32874
      $197 = $ReallocAsyncCtx3 + 68 | 0; //@line 32875
      HEAP32[$197 >> 2] = $32; //@line 32876
      $198 = $ReallocAsyncCtx3 + 72 | 0; //@line 32877
      HEAP32[$198 >> 2] = $34; //@line 32878
      $199 = $ReallocAsyncCtx3 + 76 | 0; //@line 32879
      HEAP32[$199 >> 2] = $36; //@line 32880
      $200 = $ReallocAsyncCtx3 + 80 | 0; //@line 32881
      HEAP32[$200 >> 2] = $38; //@line 32882
      $201 = $ReallocAsyncCtx3 + 84 | 0; //@line 32883
      HEAP32[$201 >> 2] = $$1202$in$i; //@line 32884
      $202 = $ReallocAsyncCtx3 + 88 | 0; //@line 32885
      HEAP32[$202 >> 2] = $42; //@line 32886
      $203 = $ReallocAsyncCtx3 + 92 | 0; //@line 32887
      HEAP32[$203 >> 2] = $44; //@line 32888
      $204 = $ReallocAsyncCtx3 + 96 | 0; //@line 32889
      HEAP16[$204 >> 1] = $$1202$i; //@line 32890
      $205 = $ReallocAsyncCtx3 + 100 | 0; //@line 32891
      HEAP32[$205 >> 2] = $46; //@line 32892
      $206 = $ReallocAsyncCtx3 + 104 | 0; //@line 32893
      HEAP32[$206 >> 2] = $48; //@line 32894
      $207 = $ReallocAsyncCtx3 + 108 | 0; //@line 32895
      HEAP32[$207 >> 2] = $50; //@line 32896
      $208 = $ReallocAsyncCtx3 + 112 | 0; //@line 32897
      HEAP32[$208 >> 2] = $52; //@line 32898
      $209 = $ReallocAsyncCtx3 + 116 | 0; //@line 32899
      HEAP32[$209 >> 2] = $54; //@line 32900
      $210 = $ReallocAsyncCtx3 + 120 | 0; //@line 32901
      HEAP32[$210 >> 2] = $40; //@line 32902
      $211 = $ReallocAsyncCtx3 + 124 | 0; //@line 32903
      HEAP32[$211 >> 2] = $56; //@line 32904
      $212 = $ReallocAsyncCtx3 + 128 | 0; //@line 32905
      HEAP32[$212 >> 2] = $58; //@line 32906
      $213 = $ReallocAsyncCtx3 + 132 | 0; //@line 32907
      HEAP32[$213 >> 2] = $60; //@line 32908
      $214 = $ReallocAsyncCtx3 + 136 | 0; //@line 32909
      HEAP32[$214 >> 2] = $157; //@line 32910
      $215 = $ReallocAsyncCtx3 + 140 | 0; //@line 32911
      HEAP32[$215 >> 2] = $64; //@line 32912
      $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 32913
      HEAP32[$216 >> 2] = $66; //@line 32914
      $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 32915
      HEAP32[$217 >> 2] = $68; //@line 32916
      $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 32917
      HEAP32[$218 >> 2] = $70; //@line 32918
      $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 32919
      HEAP16[$219 >> 1] = $175; //@line 32920
      $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 32921
      HEAP32[$220 >> 2] = $72; //@line 32922
      $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 32923
      HEAP32[$221 >> 2] = $74; //@line 32924
      $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 32925
      HEAP32[$222 >> 2] = $76; //@line 32926
      $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 32927
      HEAP32[$223 >> 2] = $78; //@line 32928
      $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 32929
      HEAP32[$224 >> 2] = $80; //@line 32930
      $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 32931
      HEAP32[$225 >> 2] = $82; //@line 32932
      $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 32933
      HEAP32[$226 >> 2] = $84; //@line 32934
      $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 32935
      HEAP32[$227 >> 2] = $86; //@line 32936
      $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 32937
      HEAP32[$228 >> 2] = $88; //@line 32938
      $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 32939
      HEAP32[$229 >> 2] = $90; //@line 32940
      $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 32941
      HEAP32[$230 >> 2] = $92; //@line 32942
      $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 32943
      HEAP32[$231 >> 2] = $94; //@line 32944
      $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 32945
      HEAP32[$232 >> 2] = $96; //@line 32946
      $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 32947
      HEAP32[$233 >> 2] = $98; //@line 32948
      $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 32949
      HEAP32[$234 >> 2] = $100; //@line 32950
      $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 32951
      HEAP32[$235 >> 2] = $102; //@line 32952
      $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 32953
      HEAP32[$236 >> 2] = $104; //@line 32954
      $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 32955
      HEAP32[$237 >> 2] = $106; //@line 32956
      $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 32957
      HEAP32[$238 >> 2] = $108; //@line 32958
      $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 32959
      HEAP32[$239 >> 2] = $110; //@line 32960
      $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 32961
      HEAP32[$240 >> 2] = $112; //@line 32962
      $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 32963
      HEAP32[$241 >> 2] = $114; //@line 32964
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 32965
      HEAP32[$242 >> 2] = $116; //@line 32966
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 32967
      HEAP32[$243 >> 2] = $118; //@line 32968
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 32969
      HEAP32[$244 >> 2] = $120; //@line 32970
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 32971
      HEAP32[$245 >> 2] = $122; //@line 32972
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 32973
      HEAP32[$246 >> 2] = $124; //@line 32974
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 32975
      HEAP32[$247 >> 2] = $126; //@line 32976
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 32977
      HEAP16[$248 >> 1] = $trunc$i; //@line 32978
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 32979
      HEAP32[$249 >> 2] = $128; //@line 32980
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 32981
      HEAP32[$250 >> 2] = $130; //@line 32982
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 32983
      HEAP32[$251 >> 2] = $132; //@line 32984
      sp = STACKTOP; //@line 32985
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 32989
     ___async_unwind = 0; //@line 32990
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 32991
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 32992
     HEAP32[$180 >> 2] = $2; //@line 32993
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 32994
     HEAP32[$181 >> 2] = $4; //@line 32995
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 32996
     HEAP32[$182 >> 2] = $6; //@line 32997
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 32998
     HEAP32[$183 >> 2] = $8; //@line 32999
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 33000
     HEAP32[$184 >> 2] = $10; //@line 33001
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 33002
     HEAP32[$185 >> 2] = $12; //@line 33003
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 33004
     HEAP32[$186 >> 2] = $14; //@line 33005
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 33006
     HEAP32[$187 >> 2] = $16; //@line 33007
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 33008
     HEAP32[$188 >> 2] = $189; //@line 33009
     $190 = $ReallocAsyncCtx3 + 40 | 0; //@line 33010
     HEAP32[$190 >> 2] = $18; //@line 33011
     $191 = $ReallocAsyncCtx3 + 44 | 0; //@line 33012
     HEAP32[$191 >> 2] = $20; //@line 33013
     $192 = $ReallocAsyncCtx3 + 48 | 0; //@line 33014
     HEAP32[$192 >> 2] = $22; //@line 33015
     $193 = $ReallocAsyncCtx3 + 52 | 0; //@line 33016
     HEAP32[$193 >> 2] = $24; //@line 33017
     $194 = $ReallocAsyncCtx3 + 56 | 0; //@line 33018
     HEAP32[$194 >> 2] = $26; //@line 33019
     $195 = $ReallocAsyncCtx3 + 60 | 0; //@line 33020
     HEAP32[$195 >> 2] = $28; //@line 33021
     $196 = $ReallocAsyncCtx3 + 64 | 0; //@line 33022
     HEAP32[$196 >> 2] = $30; //@line 33023
     $197 = $ReallocAsyncCtx3 + 68 | 0; //@line 33024
     HEAP32[$197 >> 2] = $32; //@line 33025
     $198 = $ReallocAsyncCtx3 + 72 | 0; //@line 33026
     HEAP32[$198 >> 2] = $34; //@line 33027
     $199 = $ReallocAsyncCtx3 + 76 | 0; //@line 33028
     HEAP32[$199 >> 2] = $36; //@line 33029
     $200 = $ReallocAsyncCtx3 + 80 | 0; //@line 33030
     HEAP32[$200 >> 2] = $38; //@line 33031
     $201 = $ReallocAsyncCtx3 + 84 | 0; //@line 33032
     HEAP32[$201 >> 2] = $$1202$in$i; //@line 33033
     $202 = $ReallocAsyncCtx3 + 88 | 0; //@line 33034
     HEAP32[$202 >> 2] = $42; //@line 33035
     $203 = $ReallocAsyncCtx3 + 92 | 0; //@line 33036
     HEAP32[$203 >> 2] = $44; //@line 33037
     $204 = $ReallocAsyncCtx3 + 96 | 0; //@line 33038
     HEAP16[$204 >> 1] = $$1202$i; //@line 33039
     $205 = $ReallocAsyncCtx3 + 100 | 0; //@line 33040
     HEAP32[$205 >> 2] = $46; //@line 33041
     $206 = $ReallocAsyncCtx3 + 104 | 0; //@line 33042
     HEAP32[$206 >> 2] = $48; //@line 33043
     $207 = $ReallocAsyncCtx3 + 108 | 0; //@line 33044
     HEAP32[$207 >> 2] = $50; //@line 33045
     $208 = $ReallocAsyncCtx3 + 112 | 0; //@line 33046
     HEAP32[$208 >> 2] = $52; //@line 33047
     $209 = $ReallocAsyncCtx3 + 116 | 0; //@line 33048
     HEAP32[$209 >> 2] = $54; //@line 33049
     $210 = $ReallocAsyncCtx3 + 120 | 0; //@line 33050
     HEAP32[$210 >> 2] = $40; //@line 33051
     $211 = $ReallocAsyncCtx3 + 124 | 0; //@line 33052
     HEAP32[$211 >> 2] = $56; //@line 33053
     $212 = $ReallocAsyncCtx3 + 128 | 0; //@line 33054
     HEAP32[$212 >> 2] = $58; //@line 33055
     $213 = $ReallocAsyncCtx3 + 132 | 0; //@line 33056
     HEAP32[$213 >> 2] = $60; //@line 33057
     $214 = $ReallocAsyncCtx3 + 136 | 0; //@line 33058
     HEAP32[$214 >> 2] = $157; //@line 33059
     $215 = $ReallocAsyncCtx3 + 140 | 0; //@line 33060
     HEAP32[$215 >> 2] = $64; //@line 33061
     $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 33062
     HEAP32[$216 >> 2] = $66; //@line 33063
     $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 33064
     HEAP32[$217 >> 2] = $68; //@line 33065
     $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 33066
     HEAP32[$218 >> 2] = $70; //@line 33067
     $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 33068
     HEAP16[$219 >> 1] = $175; //@line 33069
     $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 33070
     HEAP32[$220 >> 2] = $72; //@line 33071
     $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 33072
     HEAP32[$221 >> 2] = $74; //@line 33073
     $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 33074
     HEAP32[$222 >> 2] = $76; //@line 33075
     $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 33076
     HEAP32[$223 >> 2] = $78; //@line 33077
     $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 33078
     HEAP32[$224 >> 2] = $80; //@line 33079
     $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 33080
     HEAP32[$225 >> 2] = $82; //@line 33081
     $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 33082
     HEAP32[$226 >> 2] = $84; //@line 33083
     $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 33084
     HEAP32[$227 >> 2] = $86; //@line 33085
     $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 33086
     HEAP32[$228 >> 2] = $88; //@line 33087
     $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 33088
     HEAP32[$229 >> 2] = $90; //@line 33089
     $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 33090
     HEAP32[$230 >> 2] = $92; //@line 33091
     $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 33092
     HEAP32[$231 >> 2] = $94; //@line 33093
     $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 33094
     HEAP32[$232 >> 2] = $96; //@line 33095
     $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 33096
     HEAP32[$233 >> 2] = $98; //@line 33097
     $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 33098
     HEAP32[$234 >> 2] = $100; //@line 33099
     $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 33100
     HEAP32[$235 >> 2] = $102; //@line 33101
     $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 33102
     HEAP32[$236 >> 2] = $104; //@line 33103
     $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 33104
     HEAP32[$237 >> 2] = $106; //@line 33105
     $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 33106
     HEAP32[$238 >> 2] = $108; //@line 33107
     $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 33108
     HEAP32[$239 >> 2] = $110; //@line 33109
     $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 33110
     HEAP32[$240 >> 2] = $112; //@line 33111
     $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 33112
     HEAP32[$241 >> 2] = $114; //@line 33113
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 33114
     HEAP32[$242 >> 2] = $116; //@line 33115
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 33116
     HEAP32[$243 >> 2] = $118; //@line 33117
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 33118
     HEAP32[$244 >> 2] = $120; //@line 33119
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 33120
     HEAP32[$245 >> 2] = $122; //@line 33121
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 33122
     HEAP32[$246 >> 2] = $124; //@line 33123
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 33124
     HEAP32[$247 >> 2] = $126; //@line 33125
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 33126
     HEAP16[$248 >> 1] = $trunc$i; //@line 33127
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 33128
     HEAP32[$249 >> 2] = $128; //@line 33129
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 33130
     HEAP32[$250 >> 2] = $130; //@line 33131
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 33132
     HEAP32[$251 >> 2] = $132; //@line 33133
     sp = STACKTOP; //@line 33134
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3803, 4238, $12); //@line 33139
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3803, 4307, $26); //@line 33144
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 33149
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$126 >> 2] | 0; //@line 33153
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 33159
       $289 = $189 + 1 | 0; //@line 33160
       HEAP32[$36 >> 2] = $289; //@line 33161
       $290 = HEAP32[$128 >> 2] | 0; //@line 33162
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 33163
       $291 = FUNCTION_TABLE_ii[$290 & 31]($$1202$i) | 0; //@line 33164
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 33167
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 33168
        HEAP32[$292 >> 2] = $2; //@line 33169
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 33170
        HEAP32[$293 >> 2] = $4; //@line 33171
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 33172
        HEAP32[$294 >> 2] = $6; //@line 33173
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 33174
        HEAP32[$295 >> 2] = $8; //@line 33175
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 33176
        HEAP32[$296 >> 2] = $10; //@line 33177
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 33178
        HEAP32[$297 >> 2] = $12; //@line 33179
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 33180
        HEAP32[$298 >> 2] = $14; //@line 33181
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 33182
        HEAP32[$299 >> 2] = $16; //@line 33183
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 33184
        HEAP32[$300 >> 2] = $18; //@line 33185
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 33186
        HEAP32[$301 >> 2] = $20; //@line 33187
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 33188
        HEAP32[$302 >> 2] = $22; //@line 33189
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 33190
        HEAP32[$303 >> 2] = $24; //@line 33191
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 33192
        HEAP32[$304 >> 2] = $26; //@line 33193
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 33194
        HEAP32[$305 >> 2] = $28; //@line 33195
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 33196
        HEAP32[$306 >> 2] = $30; //@line 33197
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 33198
        HEAP32[$307 >> 2] = $32; //@line 33199
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 33200
        HEAP32[$308 >> 2] = $281; //@line 33201
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 33202
        HEAP32[$309 >> 2] = $36; //@line 33203
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 33204
        HEAP32[$310 >> 2] = $34; //@line 33205
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 33206
        HEAP32[$311 >> 2] = $38; //@line 33207
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 33208
        HEAP32[$312 >> 2] = $40; //@line 33209
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 33210
        HEAP32[$313 >> 2] = $42; //@line 33211
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 33212
        HEAP32[$314 >> 2] = $44; //@line 33213
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 33214
        HEAP32[$315 >> 2] = $46; //@line 33215
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 33216
        HEAP32[$316 >> 2] = $48; //@line 33217
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 33218
        HEAP32[$317 >> 2] = $50; //@line 33219
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 33220
        HEAP32[$318 >> 2] = $52; //@line 33221
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 33222
        HEAP32[$319 >> 2] = $54; //@line 33223
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 33224
        HEAP32[$320 >> 2] = $56; //@line 33225
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 33226
        HEAP32[$321 >> 2] = $58; //@line 33227
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 33228
        HEAP32[$322 >> 2] = $60; //@line 33229
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 33230
        HEAP32[$323 >> 2] = $157; //@line 33231
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 33232
        HEAP32[$324 >> 2] = $64; //@line 33233
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 33234
        HEAP32[$325 >> 2] = $66; //@line 33235
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 33236
        HEAP32[$326 >> 2] = $68; //@line 33237
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 33238
        HEAP32[$327 >> 2] = $70; //@line 33239
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 33240
        HEAP32[$328 >> 2] = $72; //@line 33241
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 33242
        HEAP32[$329 >> 2] = $74; //@line 33243
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 33244
        HEAP32[$330 >> 2] = $76; //@line 33245
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 33246
        HEAP32[$331 >> 2] = $78; //@line 33247
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 33248
        HEAP32[$332 >> 2] = $80; //@line 33249
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 33250
        HEAP32[$333 >> 2] = $82; //@line 33251
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 33252
        HEAP32[$334 >> 2] = $84; //@line 33253
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 33254
        HEAP32[$335 >> 2] = $86; //@line 33255
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 33256
        HEAP32[$336 >> 2] = $88; //@line 33257
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 33258
        HEAP32[$337 >> 2] = $90; //@line 33259
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 33260
        HEAP32[$338 >> 2] = $92; //@line 33261
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 33262
        HEAP32[$339 >> 2] = $94; //@line 33263
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 33264
        HEAP32[$340 >> 2] = $96; //@line 33265
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 33266
        HEAP32[$341 >> 2] = $98; //@line 33267
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 33268
        HEAP32[$342 >> 2] = $100; //@line 33269
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 33270
        HEAP32[$343 >> 2] = $102; //@line 33271
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 33272
        HEAP32[$344 >> 2] = $104; //@line 33273
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 33274
        HEAP32[$345 >> 2] = $289; //@line 33275
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 33276
        HEAP32[$346 >> 2] = $106; //@line 33277
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 33278
        HEAP32[$347 >> 2] = $108; //@line 33279
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 33280
        HEAP32[$348 >> 2] = $110; //@line 33281
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 33282
        HEAP32[$349 >> 2] = $112; //@line 33283
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 33284
        HEAP32[$350 >> 2] = $114; //@line 33285
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 33286
        HEAP32[$351 >> 2] = $116; //@line 33287
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 33288
        HEAP32[$352 >> 2] = $118; //@line 33289
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 33290
        HEAP32[$353 >> 2] = $120; //@line 33291
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 33292
        HEAP32[$354 >> 2] = $122; //@line 33293
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 33294
        HEAP32[$355 >> 2] = $124; //@line 33295
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 33296
        HEAP32[$356 >> 2] = $126; //@line 33297
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 33298
        HEAP32[$357 >> 2] = $128; //@line 33299
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 33300
        HEAP32[$358 >> 2] = $130; //@line 33301
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 33302
        HEAP32[$359 >> 2] = $132; //@line 33303
        sp = STACKTOP; //@line 33304
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 33308
       ___async_unwind = 0; //@line 33309
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 33310
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 33311
       HEAP32[$292 >> 2] = $2; //@line 33312
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 33313
       HEAP32[$293 >> 2] = $4; //@line 33314
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 33315
       HEAP32[$294 >> 2] = $6; //@line 33316
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 33317
       HEAP32[$295 >> 2] = $8; //@line 33318
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 33319
       HEAP32[$296 >> 2] = $10; //@line 33320
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 33321
       HEAP32[$297 >> 2] = $12; //@line 33322
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 33323
       HEAP32[$298 >> 2] = $14; //@line 33324
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 33325
       HEAP32[$299 >> 2] = $16; //@line 33326
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 33327
       HEAP32[$300 >> 2] = $18; //@line 33328
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 33329
       HEAP32[$301 >> 2] = $20; //@line 33330
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 33331
       HEAP32[$302 >> 2] = $22; //@line 33332
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 33333
       HEAP32[$303 >> 2] = $24; //@line 33334
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 33335
       HEAP32[$304 >> 2] = $26; //@line 33336
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 33337
       HEAP32[$305 >> 2] = $28; //@line 33338
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 33339
       HEAP32[$306 >> 2] = $30; //@line 33340
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 33341
       HEAP32[$307 >> 2] = $32; //@line 33342
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 33343
       HEAP32[$308 >> 2] = $281; //@line 33344
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 33345
       HEAP32[$309 >> 2] = $36; //@line 33346
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 33347
       HEAP32[$310 >> 2] = $34; //@line 33348
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 33349
       HEAP32[$311 >> 2] = $38; //@line 33350
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 33351
       HEAP32[$312 >> 2] = $40; //@line 33352
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 33353
       HEAP32[$313 >> 2] = $42; //@line 33354
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 33355
       HEAP32[$314 >> 2] = $44; //@line 33356
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 33357
       HEAP32[$315 >> 2] = $46; //@line 33358
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 33359
       HEAP32[$316 >> 2] = $48; //@line 33360
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 33361
       HEAP32[$317 >> 2] = $50; //@line 33362
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 33363
       HEAP32[$318 >> 2] = $52; //@line 33364
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 33365
       HEAP32[$319 >> 2] = $54; //@line 33366
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 33367
       HEAP32[$320 >> 2] = $56; //@line 33368
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 33369
       HEAP32[$321 >> 2] = $58; //@line 33370
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 33371
       HEAP32[$322 >> 2] = $60; //@line 33372
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 33373
       HEAP32[$323 >> 2] = $157; //@line 33374
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 33375
       HEAP32[$324 >> 2] = $64; //@line 33376
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 33377
       HEAP32[$325 >> 2] = $66; //@line 33378
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 33379
       HEAP32[$326 >> 2] = $68; //@line 33380
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 33381
       HEAP32[$327 >> 2] = $70; //@line 33382
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 33383
       HEAP32[$328 >> 2] = $72; //@line 33384
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 33385
       HEAP32[$329 >> 2] = $74; //@line 33386
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 33387
       HEAP32[$330 >> 2] = $76; //@line 33388
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 33389
       HEAP32[$331 >> 2] = $78; //@line 33390
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 33391
       HEAP32[$332 >> 2] = $80; //@line 33392
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 33393
       HEAP32[$333 >> 2] = $82; //@line 33394
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 33395
       HEAP32[$334 >> 2] = $84; //@line 33396
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 33397
       HEAP32[$335 >> 2] = $86; //@line 33398
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 33399
       HEAP32[$336 >> 2] = $88; //@line 33400
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 33401
       HEAP32[$337 >> 2] = $90; //@line 33402
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 33403
       HEAP32[$338 >> 2] = $92; //@line 33404
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 33405
       HEAP32[$339 >> 2] = $94; //@line 33406
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 33407
       HEAP32[$340 >> 2] = $96; //@line 33408
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 33409
       HEAP32[$341 >> 2] = $98; //@line 33410
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 33411
       HEAP32[$342 >> 2] = $100; //@line 33412
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 33413
       HEAP32[$343 >> 2] = $102; //@line 33414
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 33415
       HEAP32[$344 >> 2] = $104; //@line 33416
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 33417
       HEAP32[$345 >> 2] = $289; //@line 33418
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 33419
       HEAP32[$346 >> 2] = $106; //@line 33420
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 33421
       HEAP32[$347 >> 2] = $108; //@line 33422
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 33423
       HEAP32[$348 >> 2] = $110; //@line 33424
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 33425
       HEAP32[$349 >> 2] = $112; //@line 33426
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 33427
       HEAP32[$350 >> 2] = $114; //@line 33428
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 33429
       HEAP32[$351 >> 2] = $116; //@line 33430
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 33431
       HEAP32[$352 >> 2] = $118; //@line 33432
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 33433
       HEAP32[$353 >> 2] = $120; //@line 33434
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 33435
       HEAP32[$354 >> 2] = $122; //@line 33436
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 33437
       HEAP32[$355 >> 2] = $124; //@line 33438
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 33439
       HEAP32[$356 >> 2] = $126; //@line 33440
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 33441
       HEAP32[$357 >> 2] = $128; //@line 33442
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 33443
       HEAP32[$358 >> 2] = $130; //@line 33444
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 33445
       HEAP32[$359 >> 2] = $132; //@line 33446
       sp = STACKTOP; //@line 33447
       return;
      }
     }
     _mbed_tracef(2, 3803, 4369, $118); //@line 33451
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$126 >> 2] | 0; //@line 33456
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 33458
     $363 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 33459
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 33462
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 33463
      HEAP32[$364 >> 2] = $2; //@line 33464
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 33465
      HEAP32[$365 >> 2] = $4; //@line 33466
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 33467
      HEAP32[$366 >> 2] = $6; //@line 33468
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 33469
      HEAP32[$367 >> 2] = $8; //@line 33470
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 33471
      HEAP32[$368 >> 2] = $10; //@line 33472
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 33473
      HEAP32[$369 >> 2] = $12; //@line 33474
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 33475
      HEAP32[$370 >> 2] = $14; //@line 33476
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 33477
      HEAP32[$371 >> 2] = $16; //@line 33478
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 33479
      HEAP32[$372 >> 2] = $18; //@line 33480
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 33481
      HEAP32[$373 >> 2] = $20; //@line 33482
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 33483
      HEAP32[$374 >> 2] = $22; //@line 33484
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 33485
      HEAP32[$375 >> 2] = $24; //@line 33486
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 33487
      HEAP32[$376 >> 2] = $26; //@line 33488
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 33489
      HEAP32[$377 >> 2] = $28; //@line 33490
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 33491
      HEAP32[$378 >> 2] = $30; //@line 33492
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 33493
      HEAP32[$379 >> 2] = $32; //@line 33494
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 33495
      HEAP32[$380 >> 2] = $34; //@line 33496
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 33497
      HEAP32[$381 >> 2] = $36; //@line 33498
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 33499
      HEAP32[$382 >> 2] = $38; //@line 33500
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 33501
      HEAP32[$383 >> 2] = $40; //@line 33502
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 33503
      HEAP32[$384 >> 2] = $42; //@line 33504
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 33505
      HEAP32[$385 >> 2] = $44; //@line 33506
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 33507
      HEAP32[$386 >> 2] = $46; //@line 33508
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 33509
      HEAP32[$387 >> 2] = $48; //@line 33510
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 33511
      HEAP32[$388 >> 2] = $50; //@line 33512
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 33513
      HEAP32[$389 >> 2] = $52; //@line 33514
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 33515
      HEAP32[$390 >> 2] = $54; //@line 33516
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 33517
      HEAP32[$391 >> 2] = $56; //@line 33518
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 33519
      HEAP32[$392 >> 2] = $58; //@line 33520
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 33521
      HEAP32[$393 >> 2] = $60; //@line 33522
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 33523
      HEAP32[$394 >> 2] = $157; //@line 33524
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 33525
      HEAP32[$395 >> 2] = $64; //@line 33526
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 33527
      HEAP32[$396 >> 2] = $66; //@line 33528
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 33529
      HEAP32[$397 >> 2] = $68; //@line 33530
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 33531
      HEAP32[$398 >> 2] = $70; //@line 33532
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 33533
      HEAP32[$399 >> 2] = $72; //@line 33534
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 33535
      HEAP32[$400 >> 2] = $74; //@line 33536
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 33537
      HEAP32[$401 >> 2] = $76; //@line 33538
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 33539
      HEAP32[$402 >> 2] = $78; //@line 33540
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 33541
      HEAP32[$403 >> 2] = $80; //@line 33542
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 33543
      HEAP32[$404 >> 2] = $82; //@line 33544
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 33545
      HEAP32[$405 >> 2] = $84; //@line 33546
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 33547
      HEAP32[$406 >> 2] = $86; //@line 33548
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 33549
      HEAP32[$407 >> 2] = $88; //@line 33550
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 33551
      HEAP32[$408 >> 2] = $90; //@line 33552
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 33553
      HEAP32[$409 >> 2] = $92; //@line 33554
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 33555
      HEAP32[$410 >> 2] = $94; //@line 33556
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 33557
      HEAP32[$411 >> 2] = $96; //@line 33558
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 33559
      HEAP32[$412 >> 2] = $98; //@line 33560
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 33561
      HEAP32[$413 >> 2] = $100; //@line 33562
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 33563
      HEAP32[$414 >> 2] = $102; //@line 33564
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 33565
      HEAP32[$415 >> 2] = $104; //@line 33566
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 33567
      HEAP32[$416 >> 2] = $106; //@line 33568
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 33569
      HEAP32[$417 >> 2] = $108; //@line 33570
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 33571
      HEAP32[$418 >> 2] = $110; //@line 33572
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 33573
      HEAP32[$419 >> 2] = $112; //@line 33574
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 33575
      HEAP32[$420 >> 2] = $114; //@line 33576
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 33577
      HEAP32[$421 >> 2] = $116; //@line 33578
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 33579
      HEAP32[$422 >> 2] = $118; //@line 33580
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 33581
      HEAP32[$423 >> 2] = $120; //@line 33582
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 33583
      HEAP32[$424 >> 2] = $122; //@line 33584
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 33585
      HEAP32[$425 >> 2] = $124; //@line 33586
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 33587
      HEAP32[$426 >> 2] = $126; //@line 33588
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 33589
      HEAP32[$427 >> 2] = $128; //@line 33590
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 33591
      HEAP32[$428 >> 2] = $130; //@line 33592
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 33593
      HEAP32[$429 >> 2] = $132; //@line 33594
      sp = STACKTOP; //@line 33595
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 33599
     ___async_unwind = 0; //@line 33600
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 33601
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 33602
     HEAP32[$364 >> 2] = $2; //@line 33603
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 33604
     HEAP32[$365 >> 2] = $4; //@line 33605
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 33606
     HEAP32[$366 >> 2] = $6; //@line 33607
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 33608
     HEAP32[$367 >> 2] = $8; //@line 33609
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 33610
     HEAP32[$368 >> 2] = $10; //@line 33611
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 33612
     HEAP32[$369 >> 2] = $12; //@line 33613
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 33614
     HEAP32[$370 >> 2] = $14; //@line 33615
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 33616
     HEAP32[$371 >> 2] = $16; //@line 33617
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 33618
     HEAP32[$372 >> 2] = $18; //@line 33619
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 33620
     HEAP32[$373 >> 2] = $20; //@line 33621
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 33622
     HEAP32[$374 >> 2] = $22; //@line 33623
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 33624
     HEAP32[$375 >> 2] = $24; //@line 33625
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 33626
     HEAP32[$376 >> 2] = $26; //@line 33627
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 33628
     HEAP32[$377 >> 2] = $28; //@line 33629
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 33630
     HEAP32[$378 >> 2] = $30; //@line 33631
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 33632
     HEAP32[$379 >> 2] = $32; //@line 33633
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 33634
     HEAP32[$380 >> 2] = $34; //@line 33635
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 33636
     HEAP32[$381 >> 2] = $36; //@line 33637
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 33638
     HEAP32[$382 >> 2] = $38; //@line 33639
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 33640
     HEAP32[$383 >> 2] = $40; //@line 33641
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 33642
     HEAP32[$384 >> 2] = $42; //@line 33643
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 33644
     HEAP32[$385 >> 2] = $44; //@line 33645
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 33646
     HEAP32[$386 >> 2] = $46; //@line 33647
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 33648
     HEAP32[$387 >> 2] = $48; //@line 33649
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 33650
     HEAP32[$388 >> 2] = $50; //@line 33651
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 33652
     HEAP32[$389 >> 2] = $52; //@line 33653
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 33654
     HEAP32[$390 >> 2] = $54; //@line 33655
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 33656
     HEAP32[$391 >> 2] = $56; //@line 33657
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 33658
     HEAP32[$392 >> 2] = $58; //@line 33659
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 33660
     HEAP32[$393 >> 2] = $60; //@line 33661
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 33662
     HEAP32[$394 >> 2] = $157; //@line 33663
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 33664
     HEAP32[$395 >> 2] = $64; //@line 33665
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 33666
     HEAP32[$396 >> 2] = $66; //@line 33667
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 33668
     HEAP32[$397 >> 2] = $68; //@line 33669
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 33670
     HEAP32[$398 >> 2] = $70; //@line 33671
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 33672
     HEAP32[$399 >> 2] = $72; //@line 33673
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 33674
     HEAP32[$400 >> 2] = $74; //@line 33675
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 33676
     HEAP32[$401 >> 2] = $76; //@line 33677
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 33678
     HEAP32[$402 >> 2] = $78; //@line 33679
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 33680
     HEAP32[$403 >> 2] = $80; //@line 33681
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 33682
     HEAP32[$404 >> 2] = $82; //@line 33683
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 33684
     HEAP32[$405 >> 2] = $84; //@line 33685
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 33686
     HEAP32[$406 >> 2] = $86; //@line 33687
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 33688
     HEAP32[$407 >> 2] = $88; //@line 33689
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 33690
     HEAP32[$408 >> 2] = $90; //@line 33691
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 33692
     HEAP32[$409 >> 2] = $92; //@line 33693
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 33694
     HEAP32[$410 >> 2] = $94; //@line 33695
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 33696
     HEAP32[$411 >> 2] = $96; //@line 33697
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 33698
     HEAP32[$412 >> 2] = $98; //@line 33699
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 33700
     HEAP32[$413 >> 2] = $100; //@line 33701
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 33702
     HEAP32[$414 >> 2] = $102; //@line 33703
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 33704
     HEAP32[$415 >> 2] = $104; //@line 33705
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 33706
     HEAP32[$416 >> 2] = $106; //@line 33707
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 33708
     HEAP32[$417 >> 2] = $108; //@line 33709
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 33710
     HEAP32[$418 >> 2] = $110; //@line 33711
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 33712
     HEAP32[$419 >> 2] = $112; //@line 33713
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 33714
     HEAP32[$420 >> 2] = $114; //@line 33715
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 33716
     HEAP32[$421 >> 2] = $116; //@line 33717
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 33718
     HEAP32[$422 >> 2] = $118; //@line 33719
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 33720
     HEAP32[$423 >> 2] = $120; //@line 33721
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 33722
     HEAP32[$424 >> 2] = $122; //@line 33723
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 33724
     HEAP32[$425 >> 2] = $124; //@line 33725
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 33726
     HEAP32[$426 >> 2] = $126; //@line 33727
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 33728
     HEAP32[$427 >> 2] = $128; //@line 33729
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 33730
     HEAP32[$428 >> 2] = $130; //@line 33731
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 33732
     HEAP32[$429 >> 2] = $132; //@line 33733
     sp = STACKTOP; //@line 33734
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 33739
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$126 >> 2] | 0; //@line 33743
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 33749
       $439 = $189 + 1 | 0; //@line 33750
       HEAP32[$36 >> 2] = $439; //@line 33751
       $440 = HEAP32[$128 >> 2] | 0; //@line 33752
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 33753
       $441 = FUNCTION_TABLE_ii[$440 & 31]($$1202$i) | 0; //@line 33754
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 33757
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 33758
        HEAP32[$442 >> 2] = $2; //@line 33759
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 33760
        HEAP32[$443 >> 2] = $4; //@line 33761
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 33762
        HEAP32[$444 >> 2] = $6; //@line 33763
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 33764
        HEAP32[$445 >> 2] = $8; //@line 33765
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 33766
        HEAP32[$446 >> 2] = $10; //@line 33767
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 33768
        HEAP32[$447 >> 2] = $12; //@line 33769
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 33770
        HEAP32[$448 >> 2] = $14; //@line 33771
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 33772
        HEAP32[$449 >> 2] = $16; //@line 33773
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 33774
        HEAP32[$450 >> 2] = $18; //@line 33775
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 33776
        HEAP32[$451 >> 2] = $20; //@line 33777
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 33778
        HEAP32[$452 >> 2] = $22; //@line 33779
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 33780
        HEAP32[$453 >> 2] = $24; //@line 33781
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 33782
        HEAP32[$454 >> 2] = $26; //@line 33783
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 33784
        HEAP32[$455 >> 2] = $28; //@line 33785
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 33786
        HEAP32[$456 >> 2] = $30; //@line 33787
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 33788
        HEAP32[$457 >> 2] = $32; //@line 33789
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 33790
        HEAP32[$458 >> 2] = $34; //@line 33791
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 33792
        HEAP32[$459 >> 2] = $36; //@line 33793
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 33794
        HEAP32[$460 >> 2] = $38; //@line 33795
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 33796
        HEAP32[$461 >> 2] = $40; //@line 33797
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 33798
        HEAP32[$462 >> 2] = $42; //@line 33799
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 33800
        HEAP32[$463 >> 2] = $44; //@line 33801
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 33802
        HEAP32[$464 >> 2] = $46; //@line 33803
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 33804
        HEAP32[$465 >> 2] = $48; //@line 33805
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 33806
        HEAP32[$466 >> 2] = $50; //@line 33807
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 33808
        HEAP32[$467 >> 2] = $52; //@line 33809
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 33810
        HEAP32[$468 >> 2] = $54; //@line 33811
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 33812
        HEAP32[$469 >> 2] = $56; //@line 33813
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 33814
        HEAP32[$470 >> 2] = $58; //@line 33815
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 33816
        HEAP32[$471 >> 2] = $60; //@line 33817
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 33818
        HEAP32[$472 >> 2] = $157; //@line 33819
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 33820
        HEAP32[$473 >> 2] = $64; //@line 33821
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 33822
        HEAP32[$474 >> 2] = $66; //@line 33823
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 33824
        HEAP32[$475 >> 2] = $68; //@line 33825
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 33826
        HEAP32[$476 >> 2] = $70; //@line 33827
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 33828
        HEAP32[$477 >> 2] = $72; //@line 33829
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 33830
        HEAP32[$478 >> 2] = $74; //@line 33831
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 33832
        HEAP32[$479 >> 2] = $76; //@line 33833
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 33834
        HEAP32[$480 >> 2] = $78; //@line 33835
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 33836
        HEAP32[$481 >> 2] = $80; //@line 33837
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 33838
        HEAP32[$482 >> 2] = $82; //@line 33839
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 33840
        HEAP32[$483 >> 2] = $84; //@line 33841
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 33842
        HEAP32[$484 >> 2] = $86; //@line 33843
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 33844
        HEAP32[$485 >> 2] = $88; //@line 33845
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 33846
        HEAP32[$486 >> 2] = $90; //@line 33847
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 33848
        HEAP32[$487 >> 2] = $92; //@line 33849
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 33850
        HEAP32[$488 >> 2] = $94; //@line 33851
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 33852
        HEAP32[$489 >> 2] = $431; //@line 33853
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 33854
        HEAP32[$490 >> 2] = $96; //@line 33855
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 33856
        HEAP32[$491 >> 2] = $98; //@line 33857
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 33858
        HEAP32[$492 >> 2] = $439; //@line 33859
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 33860
        HEAP32[$493 >> 2] = $100; //@line 33861
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 33862
        HEAP32[$494 >> 2] = $102; //@line 33863
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 33864
        HEAP32[$495 >> 2] = $104; //@line 33865
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 33866
        HEAP32[$496 >> 2] = $106; //@line 33867
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 33868
        HEAP32[$497 >> 2] = $108; //@line 33869
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 33870
        HEAP32[$498 >> 2] = $110; //@line 33871
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 33872
        HEAP32[$499 >> 2] = $112; //@line 33873
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 33874
        HEAP32[$500 >> 2] = $114; //@line 33875
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 33876
        HEAP32[$501 >> 2] = $116; //@line 33877
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 33878
        HEAP32[$502 >> 2] = $118; //@line 33879
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 33880
        HEAP32[$503 >> 2] = $120; //@line 33881
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 33882
        HEAP32[$504 >> 2] = $122; //@line 33883
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 33884
        HEAP32[$505 >> 2] = $124; //@line 33885
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 33886
        HEAP32[$506 >> 2] = $126; //@line 33887
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 33888
        HEAP32[$507 >> 2] = $128; //@line 33889
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 33890
        HEAP32[$508 >> 2] = $130; //@line 33891
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 33892
        HEAP32[$509 >> 2] = $132; //@line 33893
        sp = STACKTOP; //@line 33894
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 33898
       ___async_unwind = 0; //@line 33899
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 33900
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 33901
       HEAP32[$442 >> 2] = $2; //@line 33902
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 33903
       HEAP32[$443 >> 2] = $4; //@line 33904
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 33905
       HEAP32[$444 >> 2] = $6; //@line 33906
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 33907
       HEAP32[$445 >> 2] = $8; //@line 33908
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 33909
       HEAP32[$446 >> 2] = $10; //@line 33910
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 33911
       HEAP32[$447 >> 2] = $12; //@line 33912
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 33913
       HEAP32[$448 >> 2] = $14; //@line 33914
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 33915
       HEAP32[$449 >> 2] = $16; //@line 33916
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 33917
       HEAP32[$450 >> 2] = $18; //@line 33918
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 33919
       HEAP32[$451 >> 2] = $20; //@line 33920
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 33921
       HEAP32[$452 >> 2] = $22; //@line 33922
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 33923
       HEAP32[$453 >> 2] = $24; //@line 33924
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 33925
       HEAP32[$454 >> 2] = $26; //@line 33926
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 33927
       HEAP32[$455 >> 2] = $28; //@line 33928
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 33929
       HEAP32[$456 >> 2] = $30; //@line 33930
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 33931
       HEAP32[$457 >> 2] = $32; //@line 33932
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 33933
       HEAP32[$458 >> 2] = $34; //@line 33934
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 33935
       HEAP32[$459 >> 2] = $36; //@line 33936
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 33937
       HEAP32[$460 >> 2] = $38; //@line 33938
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 33939
       HEAP32[$461 >> 2] = $40; //@line 33940
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 33941
       HEAP32[$462 >> 2] = $42; //@line 33942
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 33943
       HEAP32[$463 >> 2] = $44; //@line 33944
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 33945
       HEAP32[$464 >> 2] = $46; //@line 33946
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 33947
       HEAP32[$465 >> 2] = $48; //@line 33948
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 33949
       HEAP32[$466 >> 2] = $50; //@line 33950
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 33951
       HEAP32[$467 >> 2] = $52; //@line 33952
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 33953
       HEAP32[$468 >> 2] = $54; //@line 33954
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 33955
       HEAP32[$469 >> 2] = $56; //@line 33956
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 33957
       HEAP32[$470 >> 2] = $58; //@line 33958
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 33959
       HEAP32[$471 >> 2] = $60; //@line 33960
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 33961
       HEAP32[$472 >> 2] = $157; //@line 33962
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 33963
       HEAP32[$473 >> 2] = $64; //@line 33964
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 33965
       HEAP32[$474 >> 2] = $66; //@line 33966
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 33967
       HEAP32[$475 >> 2] = $68; //@line 33968
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 33969
       HEAP32[$476 >> 2] = $70; //@line 33970
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 33971
       HEAP32[$477 >> 2] = $72; //@line 33972
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 33973
       HEAP32[$478 >> 2] = $74; //@line 33974
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 33975
       HEAP32[$479 >> 2] = $76; //@line 33976
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 33977
       HEAP32[$480 >> 2] = $78; //@line 33978
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 33979
       HEAP32[$481 >> 2] = $80; //@line 33980
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 33981
       HEAP32[$482 >> 2] = $82; //@line 33982
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 33983
       HEAP32[$483 >> 2] = $84; //@line 33984
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 33985
       HEAP32[$484 >> 2] = $86; //@line 33986
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 33987
       HEAP32[$485 >> 2] = $88; //@line 33988
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 33989
       HEAP32[$486 >> 2] = $90; //@line 33990
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 33991
       HEAP32[$487 >> 2] = $92; //@line 33992
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 33993
       HEAP32[$488 >> 2] = $94; //@line 33994
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 33995
       HEAP32[$489 >> 2] = $431; //@line 33996
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 33997
       HEAP32[$490 >> 2] = $96; //@line 33998
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 33999
       HEAP32[$491 >> 2] = $98; //@line 34000
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 34001
       HEAP32[$492 >> 2] = $439; //@line 34002
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 34003
       HEAP32[$493 >> 2] = $100; //@line 34004
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 34005
       HEAP32[$494 >> 2] = $102; //@line 34006
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 34007
       HEAP32[$495 >> 2] = $104; //@line 34008
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 34009
       HEAP32[$496 >> 2] = $106; //@line 34010
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 34011
       HEAP32[$497 >> 2] = $108; //@line 34012
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 34013
       HEAP32[$498 >> 2] = $110; //@line 34014
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 34015
       HEAP32[$499 >> 2] = $112; //@line 34016
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 34017
       HEAP32[$500 >> 2] = $114; //@line 34018
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 34019
       HEAP32[$501 >> 2] = $116; //@line 34020
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 34021
       HEAP32[$502 >> 2] = $118; //@line 34022
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 34023
       HEAP32[$503 >> 2] = $120; //@line 34024
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 34025
       HEAP32[$504 >> 2] = $122; //@line 34026
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 34027
       HEAP32[$505 >> 2] = $124; //@line 34028
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 34029
       HEAP32[$506 >> 2] = $126; //@line 34030
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 34031
       HEAP32[$507 >> 2] = $128; //@line 34032
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 34033
       HEAP32[$508 >> 2] = $130; //@line 34034
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 34035
       HEAP32[$509 >> 2] = $132; //@line 34036
       sp = STACKTOP; //@line 34037
       return;
      }
     }
     _mbed_tracef(2, 3803, 4564, $114); //@line 34041
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$126 >> 2] | 0; //@line 34046
     $512 = $511 + 56 | 0; //@line 34047
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3803, 4698, $94); //@line 34051
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 34055
     $516 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 34056
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 34059
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 34060
      HEAP32[$517 >> 2] = $2; //@line 34061
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 34062
      HEAP32[$518 >> 2] = $4; //@line 34063
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 34064
      HEAP32[$519 >> 2] = $6; //@line 34065
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 34066
      HEAP32[$520 >> 2] = $8; //@line 34067
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 34068
      HEAP32[$521 >> 2] = $10; //@line 34069
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 34070
      HEAP32[$522 >> 2] = $12; //@line 34071
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 34072
      HEAP32[$523 >> 2] = $14; //@line 34073
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 34074
      HEAP32[$524 >> 2] = $16; //@line 34075
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 34076
      HEAP32[$525 >> 2] = $18; //@line 34077
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 34078
      HEAP32[$526 >> 2] = $20; //@line 34079
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 34080
      HEAP32[$527 >> 2] = $22; //@line 34081
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 34082
      HEAP32[$528 >> 2] = $24; //@line 34083
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 34084
      HEAP32[$529 >> 2] = $26; //@line 34085
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 34086
      HEAP32[$530 >> 2] = $28; //@line 34087
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 34088
      HEAP32[$531 >> 2] = $30; //@line 34089
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 34090
      HEAP32[$532 >> 2] = $32; //@line 34091
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 34092
      HEAP32[$533 >> 2] = $34; //@line 34093
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 34094
      HEAP32[$534 >> 2] = $36; //@line 34095
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 34096
      HEAP32[$535 >> 2] = $38; //@line 34097
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 34098
      HEAP32[$536 >> 2] = $40; //@line 34099
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 34100
      HEAP32[$537 >> 2] = $42; //@line 34101
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 34102
      HEAP32[$538 >> 2] = $44; //@line 34103
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 34104
      HEAP32[$539 >> 2] = $46; //@line 34105
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 34106
      HEAP32[$540 >> 2] = $48; //@line 34107
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 34108
      HEAP32[$541 >> 2] = $50; //@line 34109
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 34110
      HEAP32[$542 >> 2] = $52; //@line 34111
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 34112
      HEAP32[$543 >> 2] = $54; //@line 34113
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 34114
      HEAP32[$544 >> 2] = $56; //@line 34115
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 34116
      HEAP32[$545 >> 2] = $58; //@line 34117
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 34118
      HEAP32[$546 >> 2] = $60; //@line 34119
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 34120
      HEAP32[$547 >> 2] = $157; //@line 34121
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 34122
      HEAP32[$548 >> 2] = $64; //@line 34123
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 34124
      HEAP32[$549 >> 2] = $66; //@line 34125
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 34126
      HEAP32[$550 >> 2] = $68; //@line 34127
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 34128
      HEAP32[$551 >> 2] = $70; //@line 34129
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 34130
      HEAP32[$552 >> 2] = $72; //@line 34131
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 34132
      HEAP32[$553 >> 2] = $74; //@line 34133
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 34134
      HEAP32[$554 >> 2] = $76; //@line 34135
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 34136
      HEAP32[$555 >> 2] = $78; //@line 34137
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 34138
      HEAP32[$556 >> 2] = $80; //@line 34139
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 34140
      HEAP32[$557 >> 2] = $82; //@line 34141
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 34142
      HEAP32[$558 >> 2] = $84; //@line 34143
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 34144
      HEAP32[$559 >> 2] = $86; //@line 34145
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 34146
      HEAP32[$560 >> 2] = $88; //@line 34147
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 34148
      HEAP32[$561 >> 2] = $90; //@line 34149
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 34150
      HEAP32[$562 >> 2] = $92; //@line 34151
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 34152
      HEAP32[$563 >> 2] = $94; //@line 34153
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 34154
      HEAP32[$564 >> 2] = $96; //@line 34155
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 34156
      HEAP32[$565 >> 2] = $98; //@line 34157
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 34158
      HEAP32[$566 >> 2] = $100; //@line 34159
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 34160
      HEAP32[$567 >> 2] = $102; //@line 34161
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 34162
      HEAP32[$568 >> 2] = $104; //@line 34163
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 34164
      HEAP32[$569 >> 2] = $106; //@line 34165
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 34166
      HEAP32[$570 >> 2] = $108; //@line 34167
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 34168
      HEAP32[$571 >> 2] = $110; //@line 34169
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 34170
      HEAP32[$572 >> 2] = $112; //@line 34171
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 34172
      HEAP32[$573 >> 2] = $114; //@line 34173
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 34174
      HEAP32[$574 >> 2] = $116; //@line 34175
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 34176
      HEAP32[$575 >> 2] = $118; //@line 34177
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 34178
      HEAP32[$576 >> 2] = $120; //@line 34179
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 34180
      HEAP32[$577 >> 2] = $122; //@line 34181
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 34182
      HEAP32[$578 >> 2] = $124; //@line 34183
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 34184
      HEAP32[$579 >> 2] = $126; //@line 34185
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 34186
      HEAP32[$580 >> 2] = $128; //@line 34187
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 34188
      HEAP32[$581 >> 2] = $130; //@line 34189
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 34190
      HEAP32[$582 >> 2] = $132; //@line 34191
      sp = STACKTOP; //@line 34192
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 34196
     ___async_unwind = 0; //@line 34197
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 34198
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 34199
     HEAP32[$517 >> 2] = $2; //@line 34200
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 34201
     HEAP32[$518 >> 2] = $4; //@line 34202
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 34203
     HEAP32[$519 >> 2] = $6; //@line 34204
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 34205
     HEAP32[$520 >> 2] = $8; //@line 34206
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 34207
     HEAP32[$521 >> 2] = $10; //@line 34208
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 34209
     HEAP32[$522 >> 2] = $12; //@line 34210
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 34211
     HEAP32[$523 >> 2] = $14; //@line 34212
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 34213
     HEAP32[$524 >> 2] = $16; //@line 34214
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 34215
     HEAP32[$525 >> 2] = $18; //@line 34216
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 34217
     HEAP32[$526 >> 2] = $20; //@line 34218
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 34219
     HEAP32[$527 >> 2] = $22; //@line 34220
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 34221
     HEAP32[$528 >> 2] = $24; //@line 34222
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 34223
     HEAP32[$529 >> 2] = $26; //@line 34224
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 34225
     HEAP32[$530 >> 2] = $28; //@line 34226
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 34227
     HEAP32[$531 >> 2] = $30; //@line 34228
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 34229
     HEAP32[$532 >> 2] = $32; //@line 34230
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 34231
     HEAP32[$533 >> 2] = $34; //@line 34232
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 34233
     HEAP32[$534 >> 2] = $36; //@line 34234
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 34235
     HEAP32[$535 >> 2] = $38; //@line 34236
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 34237
     HEAP32[$536 >> 2] = $40; //@line 34238
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 34239
     HEAP32[$537 >> 2] = $42; //@line 34240
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 34241
     HEAP32[$538 >> 2] = $44; //@line 34242
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 34243
     HEAP32[$539 >> 2] = $46; //@line 34244
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 34245
     HEAP32[$540 >> 2] = $48; //@line 34246
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 34247
     HEAP32[$541 >> 2] = $50; //@line 34248
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 34249
     HEAP32[$542 >> 2] = $52; //@line 34250
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 34251
     HEAP32[$543 >> 2] = $54; //@line 34252
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 34253
     HEAP32[$544 >> 2] = $56; //@line 34254
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 34255
     HEAP32[$545 >> 2] = $58; //@line 34256
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 34257
     HEAP32[$546 >> 2] = $60; //@line 34258
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 34259
     HEAP32[$547 >> 2] = $157; //@line 34260
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 34261
     HEAP32[$548 >> 2] = $64; //@line 34262
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 34263
     HEAP32[$549 >> 2] = $66; //@line 34264
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 34265
     HEAP32[$550 >> 2] = $68; //@line 34266
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 34267
     HEAP32[$551 >> 2] = $70; //@line 34268
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 34269
     HEAP32[$552 >> 2] = $72; //@line 34270
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 34271
     HEAP32[$553 >> 2] = $74; //@line 34272
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 34273
     HEAP32[$554 >> 2] = $76; //@line 34274
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 34275
     HEAP32[$555 >> 2] = $78; //@line 34276
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 34277
     HEAP32[$556 >> 2] = $80; //@line 34278
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 34279
     HEAP32[$557 >> 2] = $82; //@line 34280
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 34281
     HEAP32[$558 >> 2] = $84; //@line 34282
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 34283
     HEAP32[$559 >> 2] = $86; //@line 34284
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 34285
     HEAP32[$560 >> 2] = $88; //@line 34286
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 34287
     HEAP32[$561 >> 2] = $90; //@line 34288
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 34289
     HEAP32[$562 >> 2] = $92; //@line 34290
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 34291
     HEAP32[$563 >> 2] = $94; //@line 34292
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 34293
     HEAP32[$564 >> 2] = $96; //@line 34294
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 34295
     HEAP32[$565 >> 2] = $98; //@line 34296
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 34297
     HEAP32[$566 >> 2] = $100; //@line 34298
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 34299
     HEAP32[$567 >> 2] = $102; //@line 34300
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 34301
     HEAP32[$568 >> 2] = $104; //@line 34302
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 34303
     HEAP32[$569 >> 2] = $106; //@line 34304
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 34305
     HEAP32[$570 >> 2] = $108; //@line 34306
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 34307
     HEAP32[$571 >> 2] = $110; //@line 34308
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 34309
     HEAP32[$572 >> 2] = $112; //@line 34310
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 34311
     HEAP32[$573 >> 2] = $114; //@line 34312
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 34313
     HEAP32[$574 >> 2] = $116; //@line 34314
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 34315
     HEAP32[$575 >> 2] = $118; //@line 34316
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 34317
     HEAP32[$576 >> 2] = $120; //@line 34318
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 34319
     HEAP32[$577 >> 2] = $122; //@line 34320
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 34321
     HEAP32[$578 >> 2] = $124; //@line 34322
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 34323
     HEAP32[$579 >> 2] = $126; //@line 34324
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 34325
     HEAP32[$580 >> 2] = $128; //@line 34326
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 34327
     HEAP32[$581 >> 2] = $130; //@line 34328
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 34329
     HEAP32[$582 >> 2] = $132; //@line 34330
     sp = STACKTOP; //@line 34331
     return;
    }
   case 53:
    {
     _mbed_tracef(2, 3803, 4831, $66); //@line 34336
     break L2;
     break;
    }
   case 57:
    {
     $600 = HEAP32[$126 >> 2] | 0; //@line 34341
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 34344
     $603 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $600 + 60 | 0, $600 + 8 | 0, 20, $$1202$i) | 0; //@line 34345
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 34348
      $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 34349
      HEAP32[$604 >> 2] = $2; //@line 34350
      $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 34351
      HEAP32[$605 >> 2] = $4; //@line 34352
      $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 34353
      HEAP32[$606 >> 2] = $6; //@line 34354
      $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 34355
      HEAP32[$607 >> 2] = $8; //@line 34356
      $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 34357
      HEAP32[$608 >> 2] = $10; //@line 34358
      $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 34359
      HEAP32[$609 >> 2] = $12; //@line 34360
      $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 34361
      HEAP32[$610 >> 2] = $14; //@line 34362
      $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 34363
      HEAP32[$611 >> 2] = $16; //@line 34364
      $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 34365
      HEAP32[$612 >> 2] = $18; //@line 34366
      $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 34367
      HEAP32[$613 >> 2] = $20; //@line 34368
      $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 34369
      HEAP32[$614 >> 2] = $22; //@line 34370
      $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 34371
      HEAP32[$615 >> 2] = $24; //@line 34372
      $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 34373
      HEAP32[$616 >> 2] = $26; //@line 34374
      $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 34375
      HEAP32[$617 >> 2] = $28; //@line 34376
      $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 34377
      HEAP32[$618 >> 2] = $30; //@line 34378
      $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 34379
      HEAP32[$619 >> 2] = $32; //@line 34380
      $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 34381
      HEAP32[$620 >> 2] = $34; //@line 34382
      $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 34383
      HEAP32[$621 >> 2] = $36; //@line 34384
      $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 34385
      HEAP32[$622 >> 2] = $38; //@line 34386
      $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 34387
      HEAP32[$623 >> 2] = $40; //@line 34388
      $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 34389
      HEAP32[$624 >> 2] = $42; //@line 34390
      $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 34391
      HEAP32[$625 >> 2] = $44; //@line 34392
      $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 34393
      HEAP32[$626 >> 2] = $46; //@line 34394
      $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 34395
      HEAP32[$627 >> 2] = $48; //@line 34396
      $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 34397
      HEAP32[$628 >> 2] = $50; //@line 34398
      $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 34399
      HEAP32[$629 >> 2] = $52; //@line 34400
      $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 34401
      HEAP32[$630 >> 2] = $54; //@line 34402
      $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 34403
      HEAP32[$631 >> 2] = $56; //@line 34404
      $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 34405
      HEAP32[$632 >> 2] = $58; //@line 34406
      $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 34407
      HEAP32[$633 >> 2] = $60; //@line 34408
      $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 34409
      HEAP32[$634 >> 2] = $157; //@line 34410
      $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 34411
      HEAP32[$635 >> 2] = $64; //@line 34412
      $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 34413
      HEAP32[$636 >> 2] = $66; //@line 34414
      $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 34415
      HEAP32[$637 >> 2] = $68; //@line 34416
      $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 34417
      HEAP32[$638 >> 2] = $70; //@line 34418
      $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 34419
      HEAP32[$639 >> 2] = $72; //@line 34420
      $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 34421
      HEAP32[$640 >> 2] = $74; //@line 34422
      $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 34423
      HEAP32[$641 >> 2] = $76; //@line 34424
      $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 34425
      HEAP32[$642 >> 2] = $78; //@line 34426
      $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 34427
      HEAP32[$643 >> 2] = $80; //@line 34428
      $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 34429
      HEAP32[$644 >> 2] = $82; //@line 34430
      $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 34431
      HEAP32[$645 >> 2] = $84; //@line 34432
      $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 34433
      HEAP32[$646 >> 2] = $86; //@line 34434
      $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 34435
      HEAP32[$647 >> 2] = $88; //@line 34436
      $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 34437
      HEAP32[$648 >> 2] = $90; //@line 34438
      $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 34439
      HEAP32[$649 >> 2] = $92; //@line 34440
      $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 34441
      HEAP32[$650 >> 2] = $94; //@line 34442
      $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 34443
      HEAP32[$651 >> 2] = $96; //@line 34444
      $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 34445
      HEAP32[$652 >> 2] = $98; //@line 34446
      $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 34447
      HEAP32[$653 >> 2] = $100; //@line 34448
      $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 34449
      HEAP32[$654 >> 2] = $102; //@line 34450
      $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 34451
      HEAP32[$655 >> 2] = $104; //@line 34452
      $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 34453
      HEAP32[$656 >> 2] = $106; //@line 34454
      $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 34455
      HEAP32[$657 >> 2] = $108; //@line 34456
      $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 34457
      HEAP32[$658 >> 2] = $110; //@line 34458
      $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 34459
      HEAP32[$659 >> 2] = $112; //@line 34460
      $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 34461
      HEAP32[$660 >> 2] = $114; //@line 34462
      $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 34463
      HEAP32[$661 >> 2] = $116; //@line 34464
      $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 34465
      HEAP32[$662 >> 2] = $118; //@line 34466
      $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 34467
      HEAP32[$663 >> 2] = $120; //@line 34468
      $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 34469
      HEAP32[$664 >> 2] = $122; //@line 34470
      $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 34471
      HEAP32[$665 >> 2] = $124; //@line 34472
      $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 34473
      HEAP32[$666 >> 2] = $126; //@line 34474
      $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 34475
      HEAP32[$667 >> 2] = $128; //@line 34476
      $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 34477
      HEAP32[$668 >> 2] = $130; //@line 34478
      $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 34479
      HEAP32[$669 >> 2] = $132; //@line 34480
      sp = STACKTOP; //@line 34481
      return;
     }
     HEAP8[___async_retval >> 0] = $603; //@line 34485
     ___async_unwind = 0; //@line 34486
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 34487
     $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 34488
     HEAP32[$604 >> 2] = $2; //@line 34489
     $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 34490
     HEAP32[$605 >> 2] = $4; //@line 34491
     $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 34492
     HEAP32[$606 >> 2] = $6; //@line 34493
     $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 34494
     HEAP32[$607 >> 2] = $8; //@line 34495
     $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 34496
     HEAP32[$608 >> 2] = $10; //@line 34497
     $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 34498
     HEAP32[$609 >> 2] = $12; //@line 34499
     $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 34500
     HEAP32[$610 >> 2] = $14; //@line 34501
     $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 34502
     HEAP32[$611 >> 2] = $16; //@line 34503
     $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 34504
     HEAP32[$612 >> 2] = $18; //@line 34505
     $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 34506
     HEAP32[$613 >> 2] = $20; //@line 34507
     $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 34508
     HEAP32[$614 >> 2] = $22; //@line 34509
     $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 34510
     HEAP32[$615 >> 2] = $24; //@line 34511
     $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 34512
     HEAP32[$616 >> 2] = $26; //@line 34513
     $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 34514
     HEAP32[$617 >> 2] = $28; //@line 34515
     $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 34516
     HEAP32[$618 >> 2] = $30; //@line 34517
     $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 34518
     HEAP32[$619 >> 2] = $32; //@line 34519
     $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 34520
     HEAP32[$620 >> 2] = $34; //@line 34521
     $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 34522
     HEAP32[$621 >> 2] = $36; //@line 34523
     $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 34524
     HEAP32[$622 >> 2] = $38; //@line 34525
     $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 34526
     HEAP32[$623 >> 2] = $40; //@line 34527
     $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 34528
     HEAP32[$624 >> 2] = $42; //@line 34529
     $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 34530
     HEAP32[$625 >> 2] = $44; //@line 34531
     $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 34532
     HEAP32[$626 >> 2] = $46; //@line 34533
     $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 34534
     HEAP32[$627 >> 2] = $48; //@line 34535
     $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 34536
     HEAP32[$628 >> 2] = $50; //@line 34537
     $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 34538
     HEAP32[$629 >> 2] = $52; //@line 34539
     $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 34540
     HEAP32[$630 >> 2] = $54; //@line 34541
     $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 34542
     HEAP32[$631 >> 2] = $56; //@line 34543
     $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 34544
     HEAP32[$632 >> 2] = $58; //@line 34545
     $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 34546
     HEAP32[$633 >> 2] = $60; //@line 34547
     $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 34548
     HEAP32[$634 >> 2] = $157; //@line 34549
     $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 34550
     HEAP32[$635 >> 2] = $64; //@line 34551
     $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 34552
     HEAP32[$636 >> 2] = $66; //@line 34553
     $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 34554
     HEAP32[$637 >> 2] = $68; //@line 34555
     $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 34556
     HEAP32[$638 >> 2] = $70; //@line 34557
     $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 34558
     HEAP32[$639 >> 2] = $72; //@line 34559
     $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 34560
     HEAP32[$640 >> 2] = $74; //@line 34561
     $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 34562
     HEAP32[$641 >> 2] = $76; //@line 34563
     $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 34564
     HEAP32[$642 >> 2] = $78; //@line 34565
     $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 34566
     HEAP32[$643 >> 2] = $80; //@line 34567
     $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 34568
     HEAP32[$644 >> 2] = $82; //@line 34569
     $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 34570
     HEAP32[$645 >> 2] = $84; //@line 34571
     $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 34572
     HEAP32[$646 >> 2] = $86; //@line 34573
     $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 34574
     HEAP32[$647 >> 2] = $88; //@line 34575
     $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 34576
     HEAP32[$648 >> 2] = $90; //@line 34577
     $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 34578
     HEAP32[$649 >> 2] = $92; //@line 34579
     $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 34580
     HEAP32[$650 >> 2] = $94; //@line 34581
     $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 34582
     HEAP32[$651 >> 2] = $96; //@line 34583
     $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 34584
     HEAP32[$652 >> 2] = $98; //@line 34585
     $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 34586
     HEAP32[$653 >> 2] = $100; //@line 34587
     $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 34588
     HEAP32[$654 >> 2] = $102; //@line 34589
     $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 34590
     HEAP32[$655 >> 2] = $104; //@line 34591
     $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 34592
     HEAP32[$656 >> 2] = $106; //@line 34593
     $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 34594
     HEAP32[$657 >> 2] = $108; //@line 34595
     $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 34596
     HEAP32[$658 >> 2] = $110; //@line 34597
     $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 34598
     HEAP32[$659 >> 2] = $112; //@line 34599
     $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 34600
     HEAP32[$660 >> 2] = $114; //@line 34601
     $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 34602
     HEAP32[$661 >> 2] = $116; //@line 34603
     $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 34604
     HEAP32[$662 >> 2] = $118; //@line 34605
     $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 34606
     HEAP32[$663 >> 2] = $120; //@line 34607
     $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 34608
     HEAP32[$664 >> 2] = $122; //@line 34609
     $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 34610
     HEAP32[$665 >> 2] = $124; //@line 34611
     $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 34612
     HEAP32[$666 >> 2] = $126; //@line 34613
     $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 34614
     HEAP32[$667 >> 2] = $128; //@line 34615
     $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 34616
     HEAP32[$668 >> 2] = $130; //@line 34617
     $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 34618
     HEAP32[$669 >> 2] = $132; //@line 34619
     sp = STACKTOP; //@line 34620
     return;
    }
   case 60:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 34625
     $671 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $4, $22, 11, $$1202$i) | 0; //@line 34626
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 34629
      $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 34630
      HEAP32[$672 >> 2] = $2; //@line 34631
      $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 34632
      HEAP32[$673 >> 2] = $4; //@line 34633
      $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 34634
      HEAP32[$674 >> 2] = $6; //@line 34635
      $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 34636
      HEAP32[$675 >> 2] = $8; //@line 34637
      $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 34638
      HEAP32[$676 >> 2] = $10; //@line 34639
      $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 34640
      HEAP32[$677 >> 2] = $12; //@line 34641
      $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 34642
      HEAP32[$678 >> 2] = $14; //@line 34643
      $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 34644
      HEAP32[$679 >> 2] = $16; //@line 34645
      $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 34646
      HEAP32[$680 >> 2] = $18; //@line 34647
      $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 34648
      HEAP32[$681 >> 2] = $20; //@line 34649
      $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 34650
      HEAP32[$682 >> 2] = $22; //@line 34651
      $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 34652
      HEAP32[$683 >> 2] = $24; //@line 34653
      $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 34654
      HEAP32[$684 >> 2] = $26; //@line 34655
      $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 34656
      HEAP32[$685 >> 2] = $28; //@line 34657
      $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 34658
      HEAP32[$686 >> 2] = $30; //@line 34659
      $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 34660
      HEAP32[$687 >> 2] = $32; //@line 34661
      $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 34662
      HEAP32[$688 >> 2] = $34; //@line 34663
      $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 34664
      HEAP32[$689 >> 2] = $36; //@line 34665
      $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 34666
      HEAP32[$690 >> 2] = $38; //@line 34667
      $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 34668
      HEAP32[$691 >> 2] = $40; //@line 34669
      $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 34670
      HEAP32[$692 >> 2] = $42; //@line 34671
      $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 34672
      HEAP32[$693 >> 2] = $44; //@line 34673
      $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 34674
      HEAP32[$694 >> 2] = $46; //@line 34675
      $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 34676
      HEAP32[$695 >> 2] = $48; //@line 34677
      $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 34678
      HEAP32[$696 >> 2] = $50; //@line 34679
      $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 34680
      HEAP32[$697 >> 2] = $52; //@line 34681
      $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 34682
      HEAP32[$698 >> 2] = $54; //@line 34683
      $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 34684
      HEAP32[$699 >> 2] = $56; //@line 34685
      $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 34686
      HEAP32[$700 >> 2] = $58; //@line 34687
      $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 34688
      HEAP32[$701 >> 2] = $60; //@line 34689
      $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 34690
      HEAP32[$702 >> 2] = $157; //@line 34691
      $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 34692
      HEAP32[$703 >> 2] = $64; //@line 34693
      $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 34694
      HEAP32[$704 >> 2] = $66; //@line 34695
      $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 34696
      HEAP32[$705 >> 2] = $68; //@line 34697
      $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 34698
      HEAP32[$706 >> 2] = $70; //@line 34699
      $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 34700
      HEAP32[$707 >> 2] = $72; //@line 34701
      $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 34702
      HEAP32[$708 >> 2] = $74; //@line 34703
      $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 34704
      HEAP32[$709 >> 2] = $76; //@line 34705
      $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 34706
      HEAP32[$710 >> 2] = $78; //@line 34707
      $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 34708
      HEAP32[$711 >> 2] = $80; //@line 34709
      $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 34710
      HEAP32[$712 >> 2] = $82; //@line 34711
      $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 34712
      HEAP32[$713 >> 2] = $84; //@line 34713
      $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 34714
      HEAP32[$714 >> 2] = $86; //@line 34715
      $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 34716
      HEAP32[$715 >> 2] = $88; //@line 34717
      $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 34718
      HEAP32[$716 >> 2] = $90; //@line 34719
      $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 34720
      HEAP32[$717 >> 2] = $92; //@line 34721
      $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 34722
      HEAP32[$718 >> 2] = $94; //@line 34723
      $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 34724
      HEAP32[$719 >> 2] = $96; //@line 34725
      $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 34726
      HEAP32[$720 >> 2] = $98; //@line 34727
      $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 34728
      HEAP32[$721 >> 2] = $100; //@line 34729
      $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 34730
      HEAP32[$722 >> 2] = $102; //@line 34731
      $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 34732
      HEAP32[$723 >> 2] = $104; //@line 34733
      $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 34734
      HEAP32[$724 >> 2] = $106; //@line 34735
      $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 34736
      HEAP32[$725 >> 2] = $108; //@line 34737
      $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 34738
      HEAP32[$726 >> 2] = $110; //@line 34739
      $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 34740
      HEAP32[$727 >> 2] = $112; //@line 34741
      $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 34742
      HEAP32[$728 >> 2] = $114; //@line 34743
      $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 34744
      HEAP32[$729 >> 2] = $116; //@line 34745
      $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 34746
      HEAP32[$730 >> 2] = $118; //@line 34747
      $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 34748
      HEAP32[$731 >> 2] = $120; //@line 34749
      $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 34750
      HEAP32[$732 >> 2] = $122; //@line 34751
      $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 34752
      HEAP32[$733 >> 2] = $124; //@line 34753
      $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 34754
      HEAP32[$734 >> 2] = $126; //@line 34755
      $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 34756
      HEAP32[$735 >> 2] = $128; //@line 34757
      $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 34758
      HEAP32[$736 >> 2] = $130; //@line 34759
      $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 34760
      HEAP32[$737 >> 2] = $132; //@line 34761
      sp = STACKTOP; //@line 34762
      return;
     }
     HEAP8[___async_retval >> 0] = $671; //@line 34766
     ___async_unwind = 0; //@line 34767
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 34768
     $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 34769
     HEAP32[$672 >> 2] = $2; //@line 34770
     $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 34771
     HEAP32[$673 >> 2] = $4; //@line 34772
     $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 34773
     HEAP32[$674 >> 2] = $6; //@line 34774
     $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 34775
     HEAP32[$675 >> 2] = $8; //@line 34776
     $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 34777
     HEAP32[$676 >> 2] = $10; //@line 34778
     $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 34779
     HEAP32[$677 >> 2] = $12; //@line 34780
     $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 34781
     HEAP32[$678 >> 2] = $14; //@line 34782
     $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 34783
     HEAP32[$679 >> 2] = $16; //@line 34784
     $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 34785
     HEAP32[$680 >> 2] = $18; //@line 34786
     $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 34787
     HEAP32[$681 >> 2] = $20; //@line 34788
     $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 34789
     HEAP32[$682 >> 2] = $22; //@line 34790
     $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 34791
     HEAP32[$683 >> 2] = $24; //@line 34792
     $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 34793
     HEAP32[$684 >> 2] = $26; //@line 34794
     $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 34795
     HEAP32[$685 >> 2] = $28; //@line 34796
     $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 34797
     HEAP32[$686 >> 2] = $30; //@line 34798
     $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 34799
     HEAP32[$687 >> 2] = $32; //@line 34800
     $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 34801
     HEAP32[$688 >> 2] = $34; //@line 34802
     $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 34803
     HEAP32[$689 >> 2] = $36; //@line 34804
     $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 34805
     HEAP32[$690 >> 2] = $38; //@line 34806
     $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 34807
     HEAP32[$691 >> 2] = $40; //@line 34808
     $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 34809
     HEAP32[$692 >> 2] = $42; //@line 34810
     $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 34811
     HEAP32[$693 >> 2] = $44; //@line 34812
     $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 34813
     HEAP32[$694 >> 2] = $46; //@line 34814
     $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 34815
     HEAP32[$695 >> 2] = $48; //@line 34816
     $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 34817
     HEAP32[$696 >> 2] = $50; //@line 34818
     $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 34819
     HEAP32[$697 >> 2] = $52; //@line 34820
     $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 34821
     HEAP32[$698 >> 2] = $54; //@line 34822
     $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 34823
     HEAP32[$699 >> 2] = $56; //@line 34824
     $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 34825
     HEAP32[$700 >> 2] = $58; //@line 34826
     $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 34827
     HEAP32[$701 >> 2] = $60; //@line 34828
     $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 34829
     HEAP32[$702 >> 2] = $157; //@line 34830
     $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 34831
     HEAP32[$703 >> 2] = $64; //@line 34832
     $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 34833
     HEAP32[$704 >> 2] = $66; //@line 34834
     $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 34835
     HEAP32[$705 >> 2] = $68; //@line 34836
     $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 34837
     HEAP32[$706 >> 2] = $70; //@line 34838
     $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 34839
     HEAP32[$707 >> 2] = $72; //@line 34840
     $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 34841
     HEAP32[$708 >> 2] = $74; //@line 34842
     $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 34843
     HEAP32[$709 >> 2] = $76; //@line 34844
     $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 34845
     HEAP32[$710 >> 2] = $78; //@line 34846
     $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 34847
     HEAP32[$711 >> 2] = $80; //@line 34848
     $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 34849
     HEAP32[$712 >> 2] = $82; //@line 34850
     $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 34851
     HEAP32[$713 >> 2] = $84; //@line 34852
     $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 34853
     HEAP32[$714 >> 2] = $86; //@line 34854
     $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 34855
     HEAP32[$715 >> 2] = $88; //@line 34856
     $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 34857
     HEAP32[$716 >> 2] = $90; //@line 34858
     $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 34859
     HEAP32[$717 >> 2] = $92; //@line 34860
     $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 34861
     HEAP32[$718 >> 2] = $94; //@line 34862
     $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 34863
     HEAP32[$719 >> 2] = $96; //@line 34864
     $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 34865
     HEAP32[$720 >> 2] = $98; //@line 34866
     $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 34867
     HEAP32[$721 >> 2] = $100; //@line 34868
     $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 34869
     HEAP32[$722 >> 2] = $102; //@line 34870
     $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 34871
     HEAP32[$723 >> 2] = $104; //@line 34872
     $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 34873
     HEAP32[$724 >> 2] = $106; //@line 34874
     $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 34875
     HEAP32[$725 >> 2] = $108; //@line 34876
     $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 34877
     HEAP32[$726 >> 2] = $110; //@line 34878
     $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 34879
     HEAP32[$727 >> 2] = $112; //@line 34880
     $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 34881
     HEAP32[$728 >> 2] = $114; //@line 34882
     $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 34883
     HEAP32[$729 >> 2] = $116; //@line 34884
     $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 34885
     HEAP32[$730 >> 2] = $118; //@line 34886
     $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 34887
     HEAP32[$731 >> 2] = $120; //@line 34888
     $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 34889
     HEAP32[$732 >> 2] = $122; //@line 34890
     $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 34891
     HEAP32[$733 >> 2] = $124; //@line 34892
     $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 34893
     HEAP32[$734 >> 2] = $126; //@line 34894
     $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 34895
     HEAP32[$735 >> 2] = $128; //@line 34896
     $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 34897
     HEAP32[$736 >> 2] = $130; //@line 34898
     $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 34899
     HEAP32[$737 >> 2] = $132; //@line 34900
     sp = STACKTOP; //@line 34901
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3803, 5026, $48); //@line 34906
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$126 >> 2] | 0; //@line 34911
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 34914
     $759 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 34915
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 34918
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 34919
      HEAP32[$760 >> 2] = $2; //@line 34920
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 34921
      HEAP32[$761 >> 2] = $4; //@line 34922
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 34923
      HEAP32[$762 >> 2] = $6; //@line 34924
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 34925
      HEAP32[$763 >> 2] = $8; //@line 34926
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 34927
      HEAP32[$764 >> 2] = $10; //@line 34928
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 34929
      HEAP32[$765 >> 2] = $12; //@line 34930
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 34931
      HEAP32[$766 >> 2] = $14; //@line 34932
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 34933
      HEAP32[$767 >> 2] = $16; //@line 34934
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 34935
      HEAP32[$768 >> 2] = $18; //@line 34936
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 34937
      HEAP32[$769 >> 2] = $20; //@line 34938
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 34939
      HEAP32[$770 >> 2] = $22; //@line 34940
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 34941
      HEAP32[$771 >> 2] = $24; //@line 34942
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 34943
      HEAP32[$772 >> 2] = $26; //@line 34944
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 34945
      HEAP32[$773 >> 2] = $28; //@line 34946
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 34947
      HEAP32[$774 >> 2] = $30; //@line 34948
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 34949
      HEAP32[$775 >> 2] = $32; //@line 34950
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 34951
      HEAP32[$776 >> 2] = $34; //@line 34952
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 34953
      HEAP32[$777 >> 2] = $36; //@line 34954
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 34955
      HEAP32[$778 >> 2] = $38; //@line 34956
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 34957
      HEAP32[$779 >> 2] = $40; //@line 34958
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 34959
      HEAP32[$780 >> 2] = $42; //@line 34960
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 34961
      HEAP32[$781 >> 2] = $44; //@line 34962
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 34963
      HEAP32[$782 >> 2] = $46; //@line 34964
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 34965
      HEAP32[$783 >> 2] = $48; //@line 34966
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 34967
      HEAP32[$784 >> 2] = $50; //@line 34968
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 34969
      HEAP32[$785 >> 2] = $52; //@line 34970
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 34971
      HEAP32[$786 >> 2] = $54; //@line 34972
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 34973
      HEAP32[$787 >> 2] = $56; //@line 34974
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 34975
      HEAP32[$788 >> 2] = $58; //@line 34976
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 34977
      HEAP32[$789 >> 2] = $60; //@line 34978
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 34979
      HEAP32[$790 >> 2] = $157; //@line 34980
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 34981
      HEAP32[$791 >> 2] = $64; //@line 34982
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 34983
      HEAP32[$792 >> 2] = $66; //@line 34984
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 34985
      HEAP32[$793 >> 2] = $68; //@line 34986
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 34987
      HEAP32[$794 >> 2] = $70; //@line 34988
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 34989
      HEAP32[$795 >> 2] = $72; //@line 34990
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 34991
      HEAP32[$796 >> 2] = $74; //@line 34992
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 34993
      HEAP32[$797 >> 2] = $76; //@line 34994
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 34995
      HEAP32[$798 >> 2] = $78; //@line 34996
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 34997
      HEAP32[$799 >> 2] = $80; //@line 34998
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 34999
      HEAP32[$800 >> 2] = $82; //@line 35000
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 35001
      HEAP32[$801 >> 2] = $84; //@line 35002
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 35003
      HEAP32[$802 >> 2] = $86; //@line 35004
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 35005
      HEAP32[$803 >> 2] = $88; //@line 35006
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 35007
      HEAP32[$804 >> 2] = $90; //@line 35008
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 35009
      HEAP32[$805 >> 2] = $92; //@line 35010
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 35011
      HEAP32[$806 >> 2] = $94; //@line 35012
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 35013
      HEAP32[$807 >> 2] = $96; //@line 35014
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 35015
      HEAP32[$808 >> 2] = $98; //@line 35016
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 35017
      HEAP32[$809 >> 2] = $100; //@line 35018
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 35019
      HEAP32[$810 >> 2] = $102; //@line 35020
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 35021
      HEAP32[$811 >> 2] = $104; //@line 35022
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 35023
      HEAP32[$812 >> 2] = $106; //@line 35024
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 35025
      HEAP32[$813 >> 2] = $108; //@line 35026
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 35027
      HEAP32[$814 >> 2] = $110; //@line 35028
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 35029
      HEAP32[$815 >> 2] = $112; //@line 35030
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 35031
      HEAP32[$816 >> 2] = $114; //@line 35032
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 35033
      HEAP32[$817 >> 2] = $116; //@line 35034
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 35035
      HEAP32[$818 >> 2] = $118; //@line 35036
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 35037
      HEAP32[$819 >> 2] = $120; //@line 35038
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 35039
      HEAP32[$820 >> 2] = $122; //@line 35040
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 35041
      HEAP32[$821 >> 2] = $124; //@line 35042
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 35043
      HEAP32[$822 >> 2] = $126; //@line 35044
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 35045
      HEAP32[$823 >> 2] = $128; //@line 35046
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 35047
      HEAP32[$824 >> 2] = $130; //@line 35048
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 35049
      HEAP32[$825 >> 2] = $132; //@line 35050
      sp = STACKTOP; //@line 35051
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 35055
     ___async_unwind = 0; //@line 35056
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 35057
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 35058
     HEAP32[$760 >> 2] = $2; //@line 35059
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 35060
     HEAP32[$761 >> 2] = $4; //@line 35061
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 35062
     HEAP32[$762 >> 2] = $6; //@line 35063
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 35064
     HEAP32[$763 >> 2] = $8; //@line 35065
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 35066
     HEAP32[$764 >> 2] = $10; //@line 35067
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 35068
     HEAP32[$765 >> 2] = $12; //@line 35069
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 35070
     HEAP32[$766 >> 2] = $14; //@line 35071
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 35072
     HEAP32[$767 >> 2] = $16; //@line 35073
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 35074
     HEAP32[$768 >> 2] = $18; //@line 35075
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 35076
     HEAP32[$769 >> 2] = $20; //@line 35077
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 35078
     HEAP32[$770 >> 2] = $22; //@line 35079
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 35080
     HEAP32[$771 >> 2] = $24; //@line 35081
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 35082
     HEAP32[$772 >> 2] = $26; //@line 35083
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 35084
     HEAP32[$773 >> 2] = $28; //@line 35085
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 35086
     HEAP32[$774 >> 2] = $30; //@line 35087
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 35088
     HEAP32[$775 >> 2] = $32; //@line 35089
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 35090
     HEAP32[$776 >> 2] = $34; //@line 35091
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 35092
     HEAP32[$777 >> 2] = $36; //@line 35093
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 35094
     HEAP32[$778 >> 2] = $38; //@line 35095
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 35096
     HEAP32[$779 >> 2] = $40; //@line 35097
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 35098
     HEAP32[$780 >> 2] = $42; //@line 35099
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 35100
     HEAP32[$781 >> 2] = $44; //@line 35101
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 35102
     HEAP32[$782 >> 2] = $46; //@line 35103
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 35104
     HEAP32[$783 >> 2] = $48; //@line 35105
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 35106
     HEAP32[$784 >> 2] = $50; //@line 35107
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 35108
     HEAP32[$785 >> 2] = $52; //@line 35109
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 35110
     HEAP32[$786 >> 2] = $54; //@line 35111
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 35112
     HEAP32[$787 >> 2] = $56; //@line 35113
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 35114
     HEAP32[$788 >> 2] = $58; //@line 35115
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 35116
     HEAP32[$789 >> 2] = $60; //@line 35117
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 35118
     HEAP32[$790 >> 2] = $157; //@line 35119
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 35120
     HEAP32[$791 >> 2] = $64; //@line 35121
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 35122
     HEAP32[$792 >> 2] = $66; //@line 35123
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 35124
     HEAP32[$793 >> 2] = $68; //@line 35125
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 35126
     HEAP32[$794 >> 2] = $70; //@line 35127
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 35128
     HEAP32[$795 >> 2] = $72; //@line 35129
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 35130
     HEAP32[$796 >> 2] = $74; //@line 35131
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 35132
     HEAP32[$797 >> 2] = $76; //@line 35133
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 35134
     HEAP32[$798 >> 2] = $78; //@line 35135
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 35136
     HEAP32[$799 >> 2] = $80; //@line 35137
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 35138
     HEAP32[$800 >> 2] = $82; //@line 35139
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 35140
     HEAP32[$801 >> 2] = $84; //@line 35141
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 35142
     HEAP32[$802 >> 2] = $86; //@line 35143
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 35144
     HEAP32[$803 >> 2] = $88; //@line 35145
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 35146
     HEAP32[$804 >> 2] = $90; //@line 35147
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 35148
     HEAP32[$805 >> 2] = $92; //@line 35149
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 35150
     HEAP32[$806 >> 2] = $94; //@line 35151
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 35152
     HEAP32[$807 >> 2] = $96; //@line 35153
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 35154
     HEAP32[$808 >> 2] = $98; //@line 35155
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 35156
     HEAP32[$809 >> 2] = $100; //@line 35157
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 35158
     HEAP32[$810 >> 2] = $102; //@line 35159
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 35160
     HEAP32[$811 >> 2] = $104; //@line 35161
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 35162
     HEAP32[$812 >> 2] = $106; //@line 35163
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 35164
     HEAP32[$813 >> 2] = $108; //@line 35165
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 35166
     HEAP32[$814 >> 2] = $110; //@line 35167
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 35168
     HEAP32[$815 >> 2] = $112; //@line 35169
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 35170
     HEAP32[$816 >> 2] = $114; //@line 35171
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 35172
     HEAP32[$817 >> 2] = $116; //@line 35173
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 35174
     HEAP32[$818 >> 2] = $118; //@line 35175
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 35176
     HEAP32[$819 >> 2] = $120; //@line 35177
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 35178
     HEAP32[$820 >> 2] = $122; //@line 35179
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 35180
     HEAP32[$821 >> 2] = $124; //@line 35181
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 35182
     HEAP32[$822 >> 2] = $126; //@line 35183
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 35184
     HEAP32[$823 >> 2] = $128; //@line 35185
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 35186
     HEAP32[$824 >> 2] = $130; //@line 35187
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 35188
     HEAP32[$825 >> 2] = $132; //@line 35189
     sp = STACKTOP; //@line 35190
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3803, 5152, $46); //@line 35195
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3803, 5213, $20); //@line 35200
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3803, 5274, $72); //@line 35205
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3803, 5335, $60); //@line 35210
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3803, 5395, $120); //@line 35215
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3803, 5455, $74); //@line 35220
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $92 | 0) >= ($80 | 0)) {
      $936 = ___async_retval; //@line 35229
      HEAP32[$936 >> 2] = $38; //@line 35230
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 35236
      HEAP32[$36 >> 2] = $926; //@line 35237
      $927 = $926; //@line 35238
      $929 = $92 - $927 + $80 | 0; //@line 35240
      HEAP16[$82 + 24 >> 1] = $929; //@line 35243
      if ($929 & 65535 | 0) {
       HEAP32[$82 + 36 >> 2] = $927; //@line 35248
       $936 = ___async_retval; //@line 35249
       HEAP32[$936 >> 2] = $38; //@line 35250
       return;
      }
     } else {
      _mbed_tracef(2, 3803, 5502, $50); //@line 35254
     }
     HEAP32[$82 + 4 >> 2] = 1; //@line 35257
     $936 = ___async_retval; //@line 35258
     HEAP32[$936 >> 2] = $38; //@line 35259
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3803, 4963, $124); //@line 35265
  }
 } while (0);
 HEAP32[$82 + 4 >> 2] = 1; //@line 35269
 $936 = ___async_retval; //@line 35270
 HEAP32[$936 >> 2] = $38; //@line 35271
 return;
}
function _sn_coap_parser__async_cb_27($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $586 = 0, $589 = 0, $590 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $74 = 0, $741 = 0, $744 = 0, $745 = 0, $750 = 0, $753 = 0, $755 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $595$looptemp = 0, $750$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 28890
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28892
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28894
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28896
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28898
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28900
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28902
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28904
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28906
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28908
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28910
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28912
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28914
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28916
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28918
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28920
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28922
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28924
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 28926
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 28928
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 28930
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 28932
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 28934
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 28936
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 28938
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 28940
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 28942
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 28944
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 28946
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 28948
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 28950
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 28954
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 28956
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 28958
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 28960
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 28962
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 28964
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 28966
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 28968
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 28970
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 28972
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 28974
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 28976
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 28978
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 28980
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 28982
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 28984
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 28986
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 28988
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 28990
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 28992
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 28994
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 28996
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 28998
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 29000
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 29002
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 29004
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 29006
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 29008
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 29010
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 29012
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 29014
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 29016
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 29018
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 29020
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 29022
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 124 >> 2] | 0; //@line 29028
   L3 : while (1) {
    $917 = HEAP32[$68 >> 2] | 0; //@line 29030
    $918 = $917 - $92 | 0; //@line 29031
    $137 = $917; //@line 29034
    if (($918 | 0) > ($80 | 0)) {
     break L2;
    }
    if (!(($80 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 29041
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 29044
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 29047
     break;
    }
    $140 = $trunc277$i & 15; //@line 29051
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 29052
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 29057
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 29065
      $$sink214$i = 13; //@line 29065
      $$sink3$i = 1; //@line 29065
      label = 8; //@line 29066
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 29078
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 29078
      $$sink3$i = 2; //@line 29078
      label = 8; //@line 29079
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 29083
      $159 = $137; //@line 29083
      $937 = $917; //@line 29083
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 29087
     $154 = $137 + $$sink3$i | 0; //@line 29089
     HEAP32[$36 >> 2] = $154; //@line 29090
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 29092
     $159 = $154; //@line 29092
     $937 = $154; //@line 29092
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 29095
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 29099
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 29107
      $$sink216$i = 13; //@line 29107
      $$sink8$i = 1; //@line 29107
      label = 13; //@line 29108
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 29120
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 29120
      $$sink8$i = 2; //@line 29120
      label = 13; //@line 29121
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 29125
      $174 = $937; //@line 29125
      $189 = $159; //@line 29125
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 29129
     $171 = $159 + $$sink8$i | 0; //@line 29131
     HEAP32[$36 >> 2] = $171; //@line 29132
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 29134
     $174 = $171; //@line 29134
     $189 = $171; //@line 29134
    }
    $$1202$i = $$1202$in$i & 65535; //@line 29136
    $175 = $100 - $174 & 65535; //@line 29138
    $trunc$i = $157 & 65535; //@line 29139
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 60; //@line 29143
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$126 >> 2] | 0)) {
        label = 16; //@line 29151
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 29156
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 29161
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 29166
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 29171
         break L3;
         break;
        }
       case 20:
        {
         label = 57; //@line 29176
         break L3;
         break;
        }
       case 11:
        {
         label = 60; //@line 29181
         break L3;
         break;
        }
       case 15:
        {
         label = 69; //@line 29186
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 29197
          break L3;
         }
         $268 = $189 + 1 | 0; //@line 29200
         HEAP32[$36 >> 2] = $268; //@line 29201
         $269 = $$1202$in$i & 255; //@line 29202
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 29205
         } else {
          $$045$i221$i = $269; //@line 29207
          $$06$i220$i = 0; //@line 29207
          $274 = $268; //@line 29207
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 29209
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 29211
           HEAP32[$36 >> 2] = $274; //@line 29212
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 29215
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 29218
            break;
           } else {
            $$06$i220$i = $277; //@line 29221
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 29227
         $$reg2mem$0 = $157; //@line 29228
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 53; //@line 29235
          break L3;
         }
         $586 = (HEAP32[$126 >> 2] | 0) + 28 | 0; //@line 29239
         if ((HEAP32[$586 >> 2] | 0) != -1) {
          label = 53; //@line 29243
          break L3;
         }
         $589 = $189 + 1 | 0; //@line 29246
         HEAP32[$36 >> 2] = $589; //@line 29247
         $590 = $$1202$in$i & 255; //@line 29248
         if (!($590 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 29251
         } else {
          $$045$i263$i = $590; //@line 29253
          $$06$i262$i = 0; //@line 29253
          $595 = $589; //@line 29253
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 29255
           $595$looptemp = $595;
           $595 = $595 + 1 | 0; //@line 29257
           HEAP32[$36 >> 2] = $595; //@line 29258
           $598 = $$06$i262$i << 8 | HEAPU8[$595$looptemp >> 0]; //@line 29261
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $598; //@line 29264
            break;
           } else {
            $$06$i262$i = $598; //@line 29267
           }
          }
         }
         HEAP32[$586 >> 2] = $$0$lcssa$i265$i; //@line 29271
         $$reg2mem$0 = $157; //@line 29272
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 65; //@line 29279
          break L3;
         }
         $741 = (HEAP32[$126 >> 2] | 0) + 32 | 0; //@line 29283
         if ((HEAP32[$741 >> 2] | 0) != -1) {
          label = 65; //@line 29287
          break L3;
         }
         $744 = $189 + 1 | 0; //@line 29290
         HEAP32[$36 >> 2] = $744; //@line 29291
         $745 = $$1202$in$i & 255; //@line 29292
         if (!($745 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 29295
         } else {
          $$045$i270$i = $745; //@line 29297
          $$06$i269$i = 0; //@line 29297
          $750 = $744; //@line 29297
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 29299
           $750$looptemp = $750;
           $750 = $750 + 1 | 0; //@line 29301
           HEAP32[$36 >> 2] = $750; //@line 29302
           $753 = $$06$i269$i << 8 | HEAPU8[$750$looptemp >> 0]; //@line 29305
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $753; //@line 29308
            break;
           } else {
            $$06$i269$i = $753; //@line 29311
           }
          }
         }
         HEAP32[$741 >> 2] = $$0$lcssa$i272$i; //@line 29315
         $$reg2mem$0 = $157; //@line 29316
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 29323
          break L3;
         }
         $829 = (HEAP32[$126 >> 2] | 0) + 40 | 0; //@line 29327
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 29331
          break L3;
         }
         $832 = $189 + 1 | 0; //@line 29334
         HEAP32[$36 >> 2] = $832; //@line 29335
         $833 = $$1202$in$i & 255; //@line 29336
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 29339
         } else {
          $$045$i256$i = $833; //@line 29341
          $$06$i255$i = 0; //@line 29341
          $838 = $832; //@line 29341
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 29343
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 29345
           HEAP32[$36 >> 2] = $838; //@line 29346
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 29349
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 29352
            break;
           } else {
            $$06$i255$i = $841; //@line 29355
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 29359
         $$reg2mem$0 = $157; //@line 29360
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 29367
          break L3;
         }
         $845 = (HEAP32[$126 >> 2] | 0) + 36 | 0; //@line 29371
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 29375
          break L3;
         }
         $848 = $189 + 1 | 0; //@line 29378
         HEAP32[$36 >> 2] = $848; //@line 29379
         $849 = $$1202$in$i & 255; //@line 29380
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 29383
         } else {
          $$045$i249$i = $849; //@line 29385
          $$06$i248$i = 0; //@line 29385
          $854 = $848; //@line 29385
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 29387
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 29389
           HEAP32[$36 >> 2] = $854; //@line 29390
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 29393
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 29396
            break;
           } else {
            $$06$i248$i = $857; //@line 29399
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 29403
         $$reg2mem$0 = $157; //@line 29404
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 29411
          break L3;
         }
         $861 = (HEAP32[$126 >> 2] | 0) + 12 | 0; //@line 29415
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 29419
          break L3;
         }
         $864 = $189 + 1 | 0; //@line 29422
         HEAP32[$36 >> 2] = $864; //@line 29423
         $865 = $$1202$in$i & 255; //@line 29424
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 29427
         } else {
          $$045$i242$i = $865; //@line 29429
          $$06$i241$i = 0; //@line 29429
          $870 = $864; //@line 29429
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 29431
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 29433
           HEAP32[$36 >> 2] = $870; //@line 29434
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 29437
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 29440
            break;
           } else {
            $$06$i241$i = $873; //@line 29443
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 29447
         $$reg2mem$0 = $157; //@line 29448
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 29455
          break L3;
         }
         $877 = (HEAP32[$126 >> 2] | 0) + 1 | 0; //@line 29459
         $878 = HEAP8[$877 >> 0] | 0; //@line 29460
         if ($878 & 1) {
          label = 94; //@line 29464
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 29468
         $883 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 29470
         HEAP32[$36 >> 2] = $883; //@line 29471
         $884 = $$1202$in$i & 255; //@line 29472
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 29475
         } else {
          $$045$i235$i = $884; //@line 29477
          $$06$i234$i = 0; //@line 29477
          $889 = $883; //@line 29477
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 29479
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 29481
           HEAP32[$36 >> 2] = $889; //@line 29482
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 29485
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 29488
            break;
           } else {
            $$06$i234$i = $892; //@line 29491
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 29497
         $$reg2mem$0 = $157; //@line 29498
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 29505
          break L3;
         }
         $898 = (HEAP32[$126 >> 2] | 0) + 1 | 0; //@line 29509
         $899 = HEAP8[$898 >> 0] | 0; //@line 29510
         if ($899 & 2) {
          label = 100; //@line 29514
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 29518
         $904 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 29520
         HEAP32[$36 >> 2] = $904; //@line 29521
         $905 = $$1202$in$i & 255; //@line 29522
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 29525
         } else {
          $$045$i228$i = $905; //@line 29527
          $$06$i227$i = 0; //@line 29527
          $910 = $904; //@line 29527
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 29529
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 29531
           HEAP32[$36 >> 2] = $910; //@line 29532
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 29535
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 29538
            break;
           } else {
            $$06$i227$i = $913; //@line 29541
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 29547
         $$reg2mem$0 = $157; //@line 29548
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 29553
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 29563
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 29570
     break;
    }
    if ((HEAP32[$10 >> 2] | 0) != -1) {
     label = 22; //@line 29576
     break;
    }
    $256 = $189 + 1 | 0; //@line 29579
    HEAP32[$36 >> 2] = $256; //@line 29580
    $257 = $$1202$in$i & 255; //@line 29581
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 29584
    } else {
     $$045$i$i = $257; //@line 29586
     $$06$i$i = 0; //@line 29586
     $262 = $256; //@line 29586
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 29588
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 29590
      HEAP32[$36 >> 2] = $262; //@line 29591
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 29594
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 29597
       break;
      } else {
       $$06$i$i = $265; //@line 29600
      }
     }
    }
    HEAP32[$10 >> 2] = $$0$lcssa$i$i; //@line 29604
    $$reg2mem$0 = $157; //@line 29605
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3803, 4066, $76); //@line 29609
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3803, 4124, $28); //@line 29614
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$128 >> 2] | 0; //@line 29619
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 29620
     $179 = FUNCTION_TABLE_ii[$178 & 31](68) | 0; //@line 29621
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 29624
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 29625
      HEAP32[$180 >> 2] = $2; //@line 29626
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 29627
      HEAP32[$181 >> 2] = $4; //@line 29628
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 29629
      HEAP32[$182 >> 2] = $6; //@line 29630
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 29631
      HEAP32[$183 >> 2] = $8; //@line 29632
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 29633
      HEAP32[$184 >> 2] = $10; //@line 29634
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 29635
      HEAP32[$185 >> 2] = $12; //@line 29636
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 29637
      HEAP32[$186 >> 2] = $14; //@line 29638
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 29639
      HEAP32[$187 >> 2] = $16; //@line 29640
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 29641
      HEAP32[$188 >> 2] = $189; //@line 29642
      $190 = $ReallocAsyncCtx3 + 40 | 0; //@line 29643
      HEAP32[$190 >> 2] = $18; //@line 29644
      $191 = $ReallocAsyncCtx3 + 44 | 0; //@line 29645
      HEAP32[$191 >> 2] = $20; //@line 29646
      $192 = $ReallocAsyncCtx3 + 48 | 0; //@line 29647
      HEAP32[$192 >> 2] = $22; //@line 29648
      $193 = $ReallocAsyncCtx3 + 52 | 0; //@line 29649
      HEAP32[$193 >> 2] = $24; //@line 29650
      $194 = $ReallocAsyncCtx3 + 56 | 0; //@line 29651
      HEAP32[$194 >> 2] = $26; //@line 29652
      $195 = $ReallocAsyncCtx3 + 60 | 0; //@line 29653
      HEAP32[$195 >> 2] = $28; //@line 29654
      $196 = $ReallocAsyncCtx3 + 64 | 0; //@line 29655
      HEAP32[$196 >> 2] = $30; //@line 29656
      $197 = $ReallocAsyncCtx3 + 68 | 0; //@line 29657
      HEAP32[$197 >> 2] = $32; //@line 29658
      $198 = $ReallocAsyncCtx3 + 72 | 0; //@line 29659
      HEAP32[$198 >> 2] = $34; //@line 29660
      $199 = $ReallocAsyncCtx3 + 76 | 0; //@line 29661
      HEAP32[$199 >> 2] = $36; //@line 29662
      $200 = $ReallocAsyncCtx3 + 80 | 0; //@line 29663
      HEAP32[$200 >> 2] = $38; //@line 29664
      $201 = $ReallocAsyncCtx3 + 84 | 0; //@line 29665
      HEAP32[$201 >> 2] = $$1202$in$i; //@line 29666
      $202 = $ReallocAsyncCtx3 + 88 | 0; //@line 29667
      HEAP32[$202 >> 2] = $42; //@line 29668
      $203 = $ReallocAsyncCtx3 + 92 | 0; //@line 29669
      HEAP32[$203 >> 2] = $44; //@line 29670
      $204 = $ReallocAsyncCtx3 + 96 | 0; //@line 29671
      HEAP16[$204 >> 1] = $$1202$i; //@line 29672
      $205 = $ReallocAsyncCtx3 + 100 | 0; //@line 29673
      HEAP32[$205 >> 2] = $46; //@line 29674
      $206 = $ReallocAsyncCtx3 + 104 | 0; //@line 29675
      HEAP32[$206 >> 2] = $48; //@line 29676
      $207 = $ReallocAsyncCtx3 + 108 | 0; //@line 29677
      HEAP32[$207 >> 2] = $50; //@line 29678
      $208 = $ReallocAsyncCtx3 + 112 | 0; //@line 29679
      HEAP32[$208 >> 2] = $52; //@line 29680
      $209 = $ReallocAsyncCtx3 + 116 | 0; //@line 29681
      HEAP32[$209 >> 2] = $54; //@line 29682
      $210 = $ReallocAsyncCtx3 + 120 | 0; //@line 29683
      HEAP32[$210 >> 2] = $40; //@line 29684
      $211 = $ReallocAsyncCtx3 + 124 | 0; //@line 29685
      HEAP32[$211 >> 2] = $56; //@line 29686
      $212 = $ReallocAsyncCtx3 + 128 | 0; //@line 29687
      HEAP32[$212 >> 2] = $58; //@line 29688
      $213 = $ReallocAsyncCtx3 + 132 | 0; //@line 29689
      HEAP32[$213 >> 2] = $60; //@line 29690
      $214 = $ReallocAsyncCtx3 + 136 | 0; //@line 29691
      HEAP32[$214 >> 2] = $157; //@line 29692
      $215 = $ReallocAsyncCtx3 + 140 | 0; //@line 29693
      HEAP32[$215 >> 2] = $64; //@line 29694
      $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 29695
      HEAP32[$216 >> 2] = $66; //@line 29696
      $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 29697
      HEAP32[$217 >> 2] = $68; //@line 29698
      $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 29699
      HEAP32[$218 >> 2] = $70; //@line 29700
      $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 29701
      HEAP16[$219 >> 1] = $175; //@line 29702
      $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 29703
      HEAP32[$220 >> 2] = $72; //@line 29704
      $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 29705
      HEAP32[$221 >> 2] = $74; //@line 29706
      $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 29707
      HEAP32[$222 >> 2] = $76; //@line 29708
      $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 29709
      HEAP32[$223 >> 2] = $78; //@line 29710
      $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 29711
      HEAP32[$224 >> 2] = $80; //@line 29712
      $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 29713
      HEAP32[$225 >> 2] = $82; //@line 29714
      $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 29715
      HEAP32[$226 >> 2] = $84; //@line 29716
      $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 29717
      HEAP32[$227 >> 2] = $86; //@line 29718
      $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 29719
      HEAP32[$228 >> 2] = $88; //@line 29720
      $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 29721
      HEAP32[$229 >> 2] = $90; //@line 29722
      $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 29723
      HEAP32[$230 >> 2] = $92; //@line 29724
      $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 29725
      HEAP32[$231 >> 2] = $94; //@line 29726
      $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 29727
      HEAP32[$232 >> 2] = $96; //@line 29728
      $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 29729
      HEAP32[$233 >> 2] = $98; //@line 29730
      $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 29731
      HEAP32[$234 >> 2] = $100; //@line 29732
      $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 29733
      HEAP32[$235 >> 2] = $102; //@line 29734
      $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 29735
      HEAP32[$236 >> 2] = $104; //@line 29736
      $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 29737
      HEAP32[$237 >> 2] = $106; //@line 29738
      $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 29739
      HEAP32[$238 >> 2] = $108; //@line 29740
      $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 29741
      HEAP32[$239 >> 2] = $110; //@line 29742
      $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 29743
      HEAP32[$240 >> 2] = $112; //@line 29744
      $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 29745
      HEAP32[$241 >> 2] = $114; //@line 29746
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 29747
      HEAP32[$242 >> 2] = $116; //@line 29748
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 29749
      HEAP32[$243 >> 2] = $118; //@line 29750
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 29751
      HEAP32[$244 >> 2] = $120; //@line 29752
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 29753
      HEAP32[$245 >> 2] = $122; //@line 29754
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 29755
      HEAP32[$246 >> 2] = $124; //@line 29756
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 29757
      HEAP32[$247 >> 2] = $126; //@line 29758
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 29759
      HEAP16[$248 >> 1] = $trunc$i; //@line 29760
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 29761
      HEAP32[$249 >> 2] = $128; //@line 29762
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 29763
      HEAP32[$250 >> 2] = $130; //@line 29764
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 29765
      HEAP32[$251 >> 2] = $132; //@line 29766
      sp = STACKTOP; //@line 29767
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 29771
     ___async_unwind = 0; //@line 29772
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 29773
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 29774
     HEAP32[$180 >> 2] = $2; //@line 29775
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 29776
     HEAP32[$181 >> 2] = $4; //@line 29777
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 29778
     HEAP32[$182 >> 2] = $6; //@line 29779
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 29780
     HEAP32[$183 >> 2] = $8; //@line 29781
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 29782
     HEAP32[$184 >> 2] = $10; //@line 29783
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 29784
     HEAP32[$185 >> 2] = $12; //@line 29785
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 29786
     HEAP32[$186 >> 2] = $14; //@line 29787
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 29788
     HEAP32[$187 >> 2] = $16; //@line 29789
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 29790
     HEAP32[$188 >> 2] = $189; //@line 29791
     $190 = $ReallocAsyncCtx3 + 40 | 0; //@line 29792
     HEAP32[$190 >> 2] = $18; //@line 29793
     $191 = $ReallocAsyncCtx3 + 44 | 0; //@line 29794
     HEAP32[$191 >> 2] = $20; //@line 29795
     $192 = $ReallocAsyncCtx3 + 48 | 0; //@line 29796
     HEAP32[$192 >> 2] = $22; //@line 29797
     $193 = $ReallocAsyncCtx3 + 52 | 0; //@line 29798
     HEAP32[$193 >> 2] = $24; //@line 29799
     $194 = $ReallocAsyncCtx3 + 56 | 0; //@line 29800
     HEAP32[$194 >> 2] = $26; //@line 29801
     $195 = $ReallocAsyncCtx3 + 60 | 0; //@line 29802
     HEAP32[$195 >> 2] = $28; //@line 29803
     $196 = $ReallocAsyncCtx3 + 64 | 0; //@line 29804
     HEAP32[$196 >> 2] = $30; //@line 29805
     $197 = $ReallocAsyncCtx3 + 68 | 0; //@line 29806
     HEAP32[$197 >> 2] = $32; //@line 29807
     $198 = $ReallocAsyncCtx3 + 72 | 0; //@line 29808
     HEAP32[$198 >> 2] = $34; //@line 29809
     $199 = $ReallocAsyncCtx3 + 76 | 0; //@line 29810
     HEAP32[$199 >> 2] = $36; //@line 29811
     $200 = $ReallocAsyncCtx3 + 80 | 0; //@line 29812
     HEAP32[$200 >> 2] = $38; //@line 29813
     $201 = $ReallocAsyncCtx3 + 84 | 0; //@line 29814
     HEAP32[$201 >> 2] = $$1202$in$i; //@line 29815
     $202 = $ReallocAsyncCtx3 + 88 | 0; //@line 29816
     HEAP32[$202 >> 2] = $42; //@line 29817
     $203 = $ReallocAsyncCtx3 + 92 | 0; //@line 29818
     HEAP32[$203 >> 2] = $44; //@line 29819
     $204 = $ReallocAsyncCtx3 + 96 | 0; //@line 29820
     HEAP16[$204 >> 1] = $$1202$i; //@line 29821
     $205 = $ReallocAsyncCtx3 + 100 | 0; //@line 29822
     HEAP32[$205 >> 2] = $46; //@line 29823
     $206 = $ReallocAsyncCtx3 + 104 | 0; //@line 29824
     HEAP32[$206 >> 2] = $48; //@line 29825
     $207 = $ReallocAsyncCtx3 + 108 | 0; //@line 29826
     HEAP32[$207 >> 2] = $50; //@line 29827
     $208 = $ReallocAsyncCtx3 + 112 | 0; //@line 29828
     HEAP32[$208 >> 2] = $52; //@line 29829
     $209 = $ReallocAsyncCtx3 + 116 | 0; //@line 29830
     HEAP32[$209 >> 2] = $54; //@line 29831
     $210 = $ReallocAsyncCtx3 + 120 | 0; //@line 29832
     HEAP32[$210 >> 2] = $40; //@line 29833
     $211 = $ReallocAsyncCtx3 + 124 | 0; //@line 29834
     HEAP32[$211 >> 2] = $56; //@line 29835
     $212 = $ReallocAsyncCtx3 + 128 | 0; //@line 29836
     HEAP32[$212 >> 2] = $58; //@line 29837
     $213 = $ReallocAsyncCtx3 + 132 | 0; //@line 29838
     HEAP32[$213 >> 2] = $60; //@line 29839
     $214 = $ReallocAsyncCtx3 + 136 | 0; //@line 29840
     HEAP32[$214 >> 2] = $157; //@line 29841
     $215 = $ReallocAsyncCtx3 + 140 | 0; //@line 29842
     HEAP32[$215 >> 2] = $64; //@line 29843
     $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 29844
     HEAP32[$216 >> 2] = $66; //@line 29845
     $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 29846
     HEAP32[$217 >> 2] = $68; //@line 29847
     $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 29848
     HEAP32[$218 >> 2] = $70; //@line 29849
     $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 29850
     HEAP16[$219 >> 1] = $175; //@line 29851
     $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 29852
     HEAP32[$220 >> 2] = $72; //@line 29853
     $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 29854
     HEAP32[$221 >> 2] = $74; //@line 29855
     $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 29856
     HEAP32[$222 >> 2] = $76; //@line 29857
     $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 29858
     HEAP32[$223 >> 2] = $78; //@line 29859
     $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 29860
     HEAP32[$224 >> 2] = $80; //@line 29861
     $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 29862
     HEAP32[$225 >> 2] = $82; //@line 29863
     $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 29864
     HEAP32[$226 >> 2] = $84; //@line 29865
     $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 29866
     HEAP32[$227 >> 2] = $86; //@line 29867
     $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 29868
     HEAP32[$228 >> 2] = $88; //@line 29869
     $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 29870
     HEAP32[$229 >> 2] = $90; //@line 29871
     $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 29872
     HEAP32[$230 >> 2] = $92; //@line 29873
     $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 29874
     HEAP32[$231 >> 2] = $94; //@line 29875
     $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 29876
     HEAP32[$232 >> 2] = $96; //@line 29877
     $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 29878
     HEAP32[$233 >> 2] = $98; //@line 29879
     $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 29880
     HEAP32[$234 >> 2] = $100; //@line 29881
     $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 29882
     HEAP32[$235 >> 2] = $102; //@line 29883
     $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 29884
     HEAP32[$236 >> 2] = $104; //@line 29885
     $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 29886
     HEAP32[$237 >> 2] = $106; //@line 29887
     $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 29888
     HEAP32[$238 >> 2] = $108; //@line 29889
     $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 29890
     HEAP32[$239 >> 2] = $110; //@line 29891
     $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 29892
     HEAP32[$240 >> 2] = $112; //@line 29893
     $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 29894
     HEAP32[$241 >> 2] = $114; //@line 29895
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 29896
     HEAP32[$242 >> 2] = $116; //@line 29897
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 29898
     HEAP32[$243 >> 2] = $118; //@line 29899
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 29900
     HEAP32[$244 >> 2] = $120; //@line 29901
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 29902
     HEAP32[$245 >> 2] = $122; //@line 29903
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 29904
     HEAP32[$246 >> 2] = $124; //@line 29905
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 29906
     HEAP32[$247 >> 2] = $126; //@line 29907
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 29908
     HEAP16[$248 >> 1] = $trunc$i; //@line 29909
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 29910
     HEAP32[$249 >> 2] = $128; //@line 29911
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 29912
     HEAP32[$250 >> 2] = $130; //@line 29913
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 29914
     HEAP32[$251 >> 2] = $132; //@line 29915
     sp = STACKTOP; //@line 29916
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3803, 4238, $12); //@line 29921
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3803, 4307, $26); //@line 29926
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 29931
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$126 >> 2] | 0; //@line 29935
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 29941
       $289 = $189 + 1 | 0; //@line 29942
       HEAP32[$36 >> 2] = $289; //@line 29943
       $290 = HEAP32[$128 >> 2] | 0; //@line 29944
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 29945
       $291 = FUNCTION_TABLE_ii[$290 & 31]($$1202$i) | 0; //@line 29946
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 29949
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 29950
        HEAP32[$292 >> 2] = $2; //@line 29951
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 29952
        HEAP32[$293 >> 2] = $4; //@line 29953
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 29954
        HEAP32[$294 >> 2] = $6; //@line 29955
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 29956
        HEAP32[$295 >> 2] = $8; //@line 29957
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 29958
        HEAP32[$296 >> 2] = $10; //@line 29959
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 29960
        HEAP32[$297 >> 2] = $12; //@line 29961
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 29962
        HEAP32[$298 >> 2] = $14; //@line 29963
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 29964
        HEAP32[$299 >> 2] = $16; //@line 29965
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 29966
        HEAP32[$300 >> 2] = $18; //@line 29967
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 29968
        HEAP32[$301 >> 2] = $20; //@line 29969
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 29970
        HEAP32[$302 >> 2] = $22; //@line 29971
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 29972
        HEAP32[$303 >> 2] = $24; //@line 29973
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 29974
        HEAP32[$304 >> 2] = $26; //@line 29975
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 29976
        HEAP32[$305 >> 2] = $28; //@line 29977
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 29978
        HEAP32[$306 >> 2] = $30; //@line 29979
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 29980
        HEAP32[$307 >> 2] = $32; //@line 29981
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 29982
        HEAP32[$308 >> 2] = $281; //@line 29983
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 29984
        HEAP32[$309 >> 2] = $36; //@line 29985
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 29986
        HEAP32[$310 >> 2] = $34; //@line 29987
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 29988
        HEAP32[$311 >> 2] = $38; //@line 29989
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 29990
        HEAP32[$312 >> 2] = $40; //@line 29991
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 29992
        HEAP32[$313 >> 2] = $42; //@line 29993
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 29994
        HEAP32[$314 >> 2] = $44; //@line 29995
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 29996
        HEAP32[$315 >> 2] = $46; //@line 29997
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 29998
        HEAP32[$316 >> 2] = $48; //@line 29999
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 30000
        HEAP32[$317 >> 2] = $50; //@line 30001
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 30002
        HEAP32[$318 >> 2] = $52; //@line 30003
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 30004
        HEAP32[$319 >> 2] = $54; //@line 30005
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 30006
        HEAP32[$320 >> 2] = $56; //@line 30007
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 30008
        HEAP32[$321 >> 2] = $58; //@line 30009
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 30010
        HEAP32[$322 >> 2] = $60; //@line 30011
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 30012
        HEAP32[$323 >> 2] = $157; //@line 30013
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 30014
        HEAP32[$324 >> 2] = $64; //@line 30015
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 30016
        HEAP32[$325 >> 2] = $66; //@line 30017
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 30018
        HEAP32[$326 >> 2] = $68; //@line 30019
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 30020
        HEAP32[$327 >> 2] = $70; //@line 30021
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 30022
        HEAP32[$328 >> 2] = $72; //@line 30023
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 30024
        HEAP32[$329 >> 2] = $74; //@line 30025
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 30026
        HEAP32[$330 >> 2] = $76; //@line 30027
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 30028
        HEAP32[$331 >> 2] = $78; //@line 30029
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 30030
        HEAP32[$332 >> 2] = $80; //@line 30031
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 30032
        HEAP32[$333 >> 2] = $82; //@line 30033
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 30034
        HEAP32[$334 >> 2] = $84; //@line 30035
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 30036
        HEAP32[$335 >> 2] = $86; //@line 30037
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 30038
        HEAP32[$336 >> 2] = $88; //@line 30039
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 30040
        HEAP32[$337 >> 2] = $90; //@line 30041
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 30042
        HEAP32[$338 >> 2] = $92; //@line 30043
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 30044
        HEAP32[$339 >> 2] = $94; //@line 30045
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 30046
        HEAP32[$340 >> 2] = $96; //@line 30047
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 30048
        HEAP32[$341 >> 2] = $98; //@line 30049
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 30050
        HEAP32[$342 >> 2] = $100; //@line 30051
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 30052
        HEAP32[$343 >> 2] = $102; //@line 30053
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 30054
        HEAP32[$344 >> 2] = $104; //@line 30055
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 30056
        HEAP32[$345 >> 2] = $289; //@line 30057
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 30058
        HEAP32[$346 >> 2] = $106; //@line 30059
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 30060
        HEAP32[$347 >> 2] = $108; //@line 30061
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 30062
        HEAP32[$348 >> 2] = $110; //@line 30063
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 30064
        HEAP32[$349 >> 2] = $112; //@line 30065
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 30066
        HEAP32[$350 >> 2] = $114; //@line 30067
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 30068
        HEAP32[$351 >> 2] = $116; //@line 30069
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 30070
        HEAP32[$352 >> 2] = $118; //@line 30071
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 30072
        HEAP32[$353 >> 2] = $120; //@line 30073
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 30074
        HEAP32[$354 >> 2] = $122; //@line 30075
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 30076
        HEAP32[$355 >> 2] = $124; //@line 30077
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 30078
        HEAP32[$356 >> 2] = $126; //@line 30079
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 30080
        HEAP32[$357 >> 2] = $128; //@line 30081
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 30082
        HEAP32[$358 >> 2] = $130; //@line 30083
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 30084
        HEAP32[$359 >> 2] = $132; //@line 30085
        sp = STACKTOP; //@line 30086
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 30090
       ___async_unwind = 0; //@line 30091
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 30092
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 30093
       HEAP32[$292 >> 2] = $2; //@line 30094
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 30095
       HEAP32[$293 >> 2] = $4; //@line 30096
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 30097
       HEAP32[$294 >> 2] = $6; //@line 30098
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 30099
       HEAP32[$295 >> 2] = $8; //@line 30100
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 30101
       HEAP32[$296 >> 2] = $10; //@line 30102
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 30103
       HEAP32[$297 >> 2] = $12; //@line 30104
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 30105
       HEAP32[$298 >> 2] = $14; //@line 30106
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 30107
       HEAP32[$299 >> 2] = $16; //@line 30108
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 30109
       HEAP32[$300 >> 2] = $18; //@line 30110
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 30111
       HEAP32[$301 >> 2] = $20; //@line 30112
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 30113
       HEAP32[$302 >> 2] = $22; //@line 30114
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 30115
       HEAP32[$303 >> 2] = $24; //@line 30116
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 30117
       HEAP32[$304 >> 2] = $26; //@line 30118
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 30119
       HEAP32[$305 >> 2] = $28; //@line 30120
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 30121
       HEAP32[$306 >> 2] = $30; //@line 30122
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 30123
       HEAP32[$307 >> 2] = $32; //@line 30124
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 30125
       HEAP32[$308 >> 2] = $281; //@line 30126
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 30127
       HEAP32[$309 >> 2] = $36; //@line 30128
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 30129
       HEAP32[$310 >> 2] = $34; //@line 30130
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 30131
       HEAP32[$311 >> 2] = $38; //@line 30132
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 30133
       HEAP32[$312 >> 2] = $40; //@line 30134
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 30135
       HEAP32[$313 >> 2] = $42; //@line 30136
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 30137
       HEAP32[$314 >> 2] = $44; //@line 30138
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 30139
       HEAP32[$315 >> 2] = $46; //@line 30140
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 30141
       HEAP32[$316 >> 2] = $48; //@line 30142
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 30143
       HEAP32[$317 >> 2] = $50; //@line 30144
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 30145
       HEAP32[$318 >> 2] = $52; //@line 30146
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 30147
       HEAP32[$319 >> 2] = $54; //@line 30148
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 30149
       HEAP32[$320 >> 2] = $56; //@line 30150
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 30151
       HEAP32[$321 >> 2] = $58; //@line 30152
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 30153
       HEAP32[$322 >> 2] = $60; //@line 30154
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 30155
       HEAP32[$323 >> 2] = $157; //@line 30156
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 30157
       HEAP32[$324 >> 2] = $64; //@line 30158
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 30159
       HEAP32[$325 >> 2] = $66; //@line 30160
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 30161
       HEAP32[$326 >> 2] = $68; //@line 30162
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 30163
       HEAP32[$327 >> 2] = $70; //@line 30164
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 30165
       HEAP32[$328 >> 2] = $72; //@line 30166
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 30167
       HEAP32[$329 >> 2] = $74; //@line 30168
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 30169
       HEAP32[$330 >> 2] = $76; //@line 30170
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 30171
       HEAP32[$331 >> 2] = $78; //@line 30172
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 30173
       HEAP32[$332 >> 2] = $80; //@line 30174
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 30175
       HEAP32[$333 >> 2] = $82; //@line 30176
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 30177
       HEAP32[$334 >> 2] = $84; //@line 30178
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 30179
       HEAP32[$335 >> 2] = $86; //@line 30180
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 30181
       HEAP32[$336 >> 2] = $88; //@line 30182
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 30183
       HEAP32[$337 >> 2] = $90; //@line 30184
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 30185
       HEAP32[$338 >> 2] = $92; //@line 30186
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 30187
       HEAP32[$339 >> 2] = $94; //@line 30188
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 30189
       HEAP32[$340 >> 2] = $96; //@line 30190
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 30191
       HEAP32[$341 >> 2] = $98; //@line 30192
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 30193
       HEAP32[$342 >> 2] = $100; //@line 30194
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 30195
       HEAP32[$343 >> 2] = $102; //@line 30196
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 30197
       HEAP32[$344 >> 2] = $104; //@line 30198
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 30199
       HEAP32[$345 >> 2] = $289; //@line 30200
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 30201
       HEAP32[$346 >> 2] = $106; //@line 30202
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 30203
       HEAP32[$347 >> 2] = $108; //@line 30204
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 30205
       HEAP32[$348 >> 2] = $110; //@line 30206
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 30207
       HEAP32[$349 >> 2] = $112; //@line 30208
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 30209
       HEAP32[$350 >> 2] = $114; //@line 30210
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 30211
       HEAP32[$351 >> 2] = $116; //@line 30212
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 30213
       HEAP32[$352 >> 2] = $118; //@line 30214
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 30215
       HEAP32[$353 >> 2] = $120; //@line 30216
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 30217
       HEAP32[$354 >> 2] = $122; //@line 30218
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 30219
       HEAP32[$355 >> 2] = $124; //@line 30220
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 30221
       HEAP32[$356 >> 2] = $126; //@line 30222
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 30223
       HEAP32[$357 >> 2] = $128; //@line 30224
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 30225
       HEAP32[$358 >> 2] = $130; //@line 30226
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 30227
       HEAP32[$359 >> 2] = $132; //@line 30228
       sp = STACKTOP; //@line 30229
       return;
      }
     }
     _mbed_tracef(2, 3803, 4369, $118); //@line 30233
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$126 >> 2] | 0; //@line 30238
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 30240
     $363 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 30241
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 30244
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 30245
      HEAP32[$364 >> 2] = $2; //@line 30246
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 30247
      HEAP32[$365 >> 2] = $4; //@line 30248
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 30249
      HEAP32[$366 >> 2] = $6; //@line 30250
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 30251
      HEAP32[$367 >> 2] = $8; //@line 30252
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 30253
      HEAP32[$368 >> 2] = $10; //@line 30254
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 30255
      HEAP32[$369 >> 2] = $12; //@line 30256
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 30257
      HEAP32[$370 >> 2] = $14; //@line 30258
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 30259
      HEAP32[$371 >> 2] = $16; //@line 30260
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 30261
      HEAP32[$372 >> 2] = $18; //@line 30262
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 30263
      HEAP32[$373 >> 2] = $20; //@line 30264
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 30265
      HEAP32[$374 >> 2] = $22; //@line 30266
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 30267
      HEAP32[$375 >> 2] = $24; //@line 30268
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 30269
      HEAP32[$376 >> 2] = $26; //@line 30270
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 30271
      HEAP32[$377 >> 2] = $28; //@line 30272
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 30273
      HEAP32[$378 >> 2] = $30; //@line 30274
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 30275
      HEAP32[$379 >> 2] = $32; //@line 30276
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 30277
      HEAP32[$380 >> 2] = $34; //@line 30278
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 30279
      HEAP32[$381 >> 2] = $36; //@line 30280
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 30281
      HEAP32[$382 >> 2] = $38; //@line 30282
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 30283
      HEAP32[$383 >> 2] = $40; //@line 30284
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 30285
      HEAP32[$384 >> 2] = $42; //@line 30286
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 30287
      HEAP32[$385 >> 2] = $44; //@line 30288
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 30289
      HEAP32[$386 >> 2] = $46; //@line 30290
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 30291
      HEAP32[$387 >> 2] = $48; //@line 30292
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 30293
      HEAP32[$388 >> 2] = $50; //@line 30294
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 30295
      HEAP32[$389 >> 2] = $52; //@line 30296
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 30297
      HEAP32[$390 >> 2] = $54; //@line 30298
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 30299
      HEAP32[$391 >> 2] = $56; //@line 30300
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 30301
      HEAP32[$392 >> 2] = $58; //@line 30302
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 30303
      HEAP32[$393 >> 2] = $60; //@line 30304
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 30305
      HEAP32[$394 >> 2] = $157; //@line 30306
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 30307
      HEAP32[$395 >> 2] = $64; //@line 30308
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 30309
      HEAP32[$396 >> 2] = $66; //@line 30310
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 30311
      HEAP32[$397 >> 2] = $68; //@line 30312
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 30313
      HEAP32[$398 >> 2] = $70; //@line 30314
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 30315
      HEAP32[$399 >> 2] = $72; //@line 30316
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 30317
      HEAP32[$400 >> 2] = $74; //@line 30318
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 30319
      HEAP32[$401 >> 2] = $76; //@line 30320
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 30321
      HEAP32[$402 >> 2] = $78; //@line 30322
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 30323
      HEAP32[$403 >> 2] = $80; //@line 30324
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 30325
      HEAP32[$404 >> 2] = $82; //@line 30326
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 30327
      HEAP32[$405 >> 2] = $84; //@line 30328
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 30329
      HEAP32[$406 >> 2] = $86; //@line 30330
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 30331
      HEAP32[$407 >> 2] = $88; //@line 30332
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 30333
      HEAP32[$408 >> 2] = $90; //@line 30334
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 30335
      HEAP32[$409 >> 2] = $92; //@line 30336
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 30337
      HEAP32[$410 >> 2] = $94; //@line 30338
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 30339
      HEAP32[$411 >> 2] = $96; //@line 30340
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 30341
      HEAP32[$412 >> 2] = $98; //@line 30342
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 30343
      HEAP32[$413 >> 2] = $100; //@line 30344
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 30345
      HEAP32[$414 >> 2] = $102; //@line 30346
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 30347
      HEAP32[$415 >> 2] = $104; //@line 30348
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 30349
      HEAP32[$416 >> 2] = $106; //@line 30350
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 30351
      HEAP32[$417 >> 2] = $108; //@line 30352
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 30353
      HEAP32[$418 >> 2] = $110; //@line 30354
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 30355
      HEAP32[$419 >> 2] = $112; //@line 30356
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 30357
      HEAP32[$420 >> 2] = $114; //@line 30358
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 30359
      HEAP32[$421 >> 2] = $116; //@line 30360
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 30361
      HEAP32[$422 >> 2] = $118; //@line 30362
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 30363
      HEAP32[$423 >> 2] = $120; //@line 30364
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 30365
      HEAP32[$424 >> 2] = $122; //@line 30366
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 30367
      HEAP32[$425 >> 2] = $124; //@line 30368
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 30369
      HEAP32[$426 >> 2] = $126; //@line 30370
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 30371
      HEAP32[$427 >> 2] = $128; //@line 30372
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 30373
      HEAP32[$428 >> 2] = $130; //@line 30374
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 30375
      HEAP32[$429 >> 2] = $132; //@line 30376
      sp = STACKTOP; //@line 30377
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 30381
     ___async_unwind = 0; //@line 30382
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 30383
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 30384
     HEAP32[$364 >> 2] = $2; //@line 30385
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 30386
     HEAP32[$365 >> 2] = $4; //@line 30387
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 30388
     HEAP32[$366 >> 2] = $6; //@line 30389
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 30390
     HEAP32[$367 >> 2] = $8; //@line 30391
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 30392
     HEAP32[$368 >> 2] = $10; //@line 30393
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 30394
     HEAP32[$369 >> 2] = $12; //@line 30395
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 30396
     HEAP32[$370 >> 2] = $14; //@line 30397
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 30398
     HEAP32[$371 >> 2] = $16; //@line 30399
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 30400
     HEAP32[$372 >> 2] = $18; //@line 30401
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 30402
     HEAP32[$373 >> 2] = $20; //@line 30403
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 30404
     HEAP32[$374 >> 2] = $22; //@line 30405
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 30406
     HEAP32[$375 >> 2] = $24; //@line 30407
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 30408
     HEAP32[$376 >> 2] = $26; //@line 30409
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 30410
     HEAP32[$377 >> 2] = $28; //@line 30411
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 30412
     HEAP32[$378 >> 2] = $30; //@line 30413
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 30414
     HEAP32[$379 >> 2] = $32; //@line 30415
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 30416
     HEAP32[$380 >> 2] = $34; //@line 30417
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 30418
     HEAP32[$381 >> 2] = $36; //@line 30419
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 30420
     HEAP32[$382 >> 2] = $38; //@line 30421
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 30422
     HEAP32[$383 >> 2] = $40; //@line 30423
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 30424
     HEAP32[$384 >> 2] = $42; //@line 30425
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 30426
     HEAP32[$385 >> 2] = $44; //@line 30427
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 30428
     HEAP32[$386 >> 2] = $46; //@line 30429
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 30430
     HEAP32[$387 >> 2] = $48; //@line 30431
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 30432
     HEAP32[$388 >> 2] = $50; //@line 30433
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 30434
     HEAP32[$389 >> 2] = $52; //@line 30435
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 30436
     HEAP32[$390 >> 2] = $54; //@line 30437
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 30438
     HEAP32[$391 >> 2] = $56; //@line 30439
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 30440
     HEAP32[$392 >> 2] = $58; //@line 30441
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 30442
     HEAP32[$393 >> 2] = $60; //@line 30443
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 30444
     HEAP32[$394 >> 2] = $157; //@line 30445
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 30446
     HEAP32[$395 >> 2] = $64; //@line 30447
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 30448
     HEAP32[$396 >> 2] = $66; //@line 30449
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 30450
     HEAP32[$397 >> 2] = $68; //@line 30451
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 30452
     HEAP32[$398 >> 2] = $70; //@line 30453
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 30454
     HEAP32[$399 >> 2] = $72; //@line 30455
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 30456
     HEAP32[$400 >> 2] = $74; //@line 30457
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 30458
     HEAP32[$401 >> 2] = $76; //@line 30459
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 30460
     HEAP32[$402 >> 2] = $78; //@line 30461
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 30462
     HEAP32[$403 >> 2] = $80; //@line 30463
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 30464
     HEAP32[$404 >> 2] = $82; //@line 30465
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 30466
     HEAP32[$405 >> 2] = $84; //@line 30467
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 30468
     HEAP32[$406 >> 2] = $86; //@line 30469
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 30470
     HEAP32[$407 >> 2] = $88; //@line 30471
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 30472
     HEAP32[$408 >> 2] = $90; //@line 30473
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 30474
     HEAP32[$409 >> 2] = $92; //@line 30475
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 30476
     HEAP32[$410 >> 2] = $94; //@line 30477
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 30478
     HEAP32[$411 >> 2] = $96; //@line 30479
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 30480
     HEAP32[$412 >> 2] = $98; //@line 30481
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 30482
     HEAP32[$413 >> 2] = $100; //@line 30483
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 30484
     HEAP32[$414 >> 2] = $102; //@line 30485
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 30486
     HEAP32[$415 >> 2] = $104; //@line 30487
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 30488
     HEAP32[$416 >> 2] = $106; //@line 30489
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 30490
     HEAP32[$417 >> 2] = $108; //@line 30491
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 30492
     HEAP32[$418 >> 2] = $110; //@line 30493
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 30494
     HEAP32[$419 >> 2] = $112; //@line 30495
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 30496
     HEAP32[$420 >> 2] = $114; //@line 30497
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 30498
     HEAP32[$421 >> 2] = $116; //@line 30499
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 30500
     HEAP32[$422 >> 2] = $118; //@line 30501
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 30502
     HEAP32[$423 >> 2] = $120; //@line 30503
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 30504
     HEAP32[$424 >> 2] = $122; //@line 30505
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 30506
     HEAP32[$425 >> 2] = $124; //@line 30507
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 30508
     HEAP32[$426 >> 2] = $126; //@line 30509
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 30510
     HEAP32[$427 >> 2] = $128; //@line 30511
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 30512
     HEAP32[$428 >> 2] = $130; //@line 30513
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 30514
     HEAP32[$429 >> 2] = $132; //@line 30515
     sp = STACKTOP; //@line 30516
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 30521
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$126 >> 2] | 0; //@line 30525
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 30531
       $439 = $189 + 1 | 0; //@line 30532
       HEAP32[$36 >> 2] = $439; //@line 30533
       $440 = HEAP32[$128 >> 2] | 0; //@line 30534
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 30535
       $441 = FUNCTION_TABLE_ii[$440 & 31]($$1202$i) | 0; //@line 30536
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 30539
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 30540
        HEAP32[$442 >> 2] = $2; //@line 30541
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 30542
        HEAP32[$443 >> 2] = $4; //@line 30543
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 30544
        HEAP32[$444 >> 2] = $6; //@line 30545
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 30546
        HEAP32[$445 >> 2] = $8; //@line 30547
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 30548
        HEAP32[$446 >> 2] = $10; //@line 30549
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 30550
        HEAP32[$447 >> 2] = $12; //@line 30551
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 30552
        HEAP32[$448 >> 2] = $14; //@line 30553
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 30554
        HEAP32[$449 >> 2] = $16; //@line 30555
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 30556
        HEAP32[$450 >> 2] = $18; //@line 30557
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 30558
        HEAP32[$451 >> 2] = $20; //@line 30559
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 30560
        HEAP32[$452 >> 2] = $22; //@line 30561
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 30562
        HEAP32[$453 >> 2] = $24; //@line 30563
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 30564
        HEAP32[$454 >> 2] = $26; //@line 30565
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 30566
        HEAP32[$455 >> 2] = $28; //@line 30567
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 30568
        HEAP32[$456 >> 2] = $30; //@line 30569
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 30570
        HEAP32[$457 >> 2] = $32; //@line 30571
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 30572
        HEAP32[$458 >> 2] = $34; //@line 30573
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 30574
        HEAP32[$459 >> 2] = $36; //@line 30575
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 30576
        HEAP32[$460 >> 2] = $38; //@line 30577
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 30578
        HEAP32[$461 >> 2] = $40; //@line 30579
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 30580
        HEAP32[$462 >> 2] = $42; //@line 30581
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 30582
        HEAP32[$463 >> 2] = $44; //@line 30583
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 30584
        HEAP32[$464 >> 2] = $46; //@line 30585
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 30586
        HEAP32[$465 >> 2] = $48; //@line 30587
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 30588
        HEAP32[$466 >> 2] = $50; //@line 30589
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 30590
        HEAP32[$467 >> 2] = $52; //@line 30591
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 30592
        HEAP32[$468 >> 2] = $54; //@line 30593
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 30594
        HEAP32[$469 >> 2] = $56; //@line 30595
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 30596
        HEAP32[$470 >> 2] = $58; //@line 30597
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 30598
        HEAP32[$471 >> 2] = $60; //@line 30599
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 30600
        HEAP32[$472 >> 2] = $157; //@line 30601
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 30602
        HEAP32[$473 >> 2] = $64; //@line 30603
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 30604
        HEAP32[$474 >> 2] = $66; //@line 30605
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 30606
        HEAP32[$475 >> 2] = $68; //@line 30607
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 30608
        HEAP32[$476 >> 2] = $70; //@line 30609
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 30610
        HEAP32[$477 >> 2] = $72; //@line 30611
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 30612
        HEAP32[$478 >> 2] = $74; //@line 30613
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 30614
        HEAP32[$479 >> 2] = $76; //@line 30615
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 30616
        HEAP32[$480 >> 2] = $78; //@line 30617
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 30618
        HEAP32[$481 >> 2] = $80; //@line 30619
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 30620
        HEAP32[$482 >> 2] = $82; //@line 30621
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 30622
        HEAP32[$483 >> 2] = $84; //@line 30623
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 30624
        HEAP32[$484 >> 2] = $86; //@line 30625
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 30626
        HEAP32[$485 >> 2] = $88; //@line 30627
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 30628
        HEAP32[$486 >> 2] = $90; //@line 30629
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 30630
        HEAP32[$487 >> 2] = $92; //@line 30631
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 30632
        HEAP32[$488 >> 2] = $94; //@line 30633
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 30634
        HEAP32[$489 >> 2] = $431; //@line 30635
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 30636
        HEAP32[$490 >> 2] = $96; //@line 30637
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 30638
        HEAP32[$491 >> 2] = $98; //@line 30639
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 30640
        HEAP32[$492 >> 2] = $439; //@line 30641
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 30642
        HEAP32[$493 >> 2] = $100; //@line 30643
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 30644
        HEAP32[$494 >> 2] = $102; //@line 30645
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 30646
        HEAP32[$495 >> 2] = $104; //@line 30647
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 30648
        HEAP32[$496 >> 2] = $106; //@line 30649
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 30650
        HEAP32[$497 >> 2] = $108; //@line 30651
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 30652
        HEAP32[$498 >> 2] = $110; //@line 30653
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 30654
        HEAP32[$499 >> 2] = $112; //@line 30655
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 30656
        HEAP32[$500 >> 2] = $114; //@line 30657
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 30658
        HEAP32[$501 >> 2] = $116; //@line 30659
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 30660
        HEAP32[$502 >> 2] = $118; //@line 30661
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 30662
        HEAP32[$503 >> 2] = $120; //@line 30663
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 30664
        HEAP32[$504 >> 2] = $122; //@line 30665
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 30666
        HEAP32[$505 >> 2] = $124; //@line 30667
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 30668
        HEAP32[$506 >> 2] = $126; //@line 30669
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 30670
        HEAP32[$507 >> 2] = $128; //@line 30671
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 30672
        HEAP32[$508 >> 2] = $130; //@line 30673
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 30674
        HEAP32[$509 >> 2] = $132; //@line 30675
        sp = STACKTOP; //@line 30676
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 30680
       ___async_unwind = 0; //@line 30681
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 30682
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 30683
       HEAP32[$442 >> 2] = $2; //@line 30684
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 30685
       HEAP32[$443 >> 2] = $4; //@line 30686
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 30687
       HEAP32[$444 >> 2] = $6; //@line 30688
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 30689
       HEAP32[$445 >> 2] = $8; //@line 30690
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 30691
       HEAP32[$446 >> 2] = $10; //@line 30692
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 30693
       HEAP32[$447 >> 2] = $12; //@line 30694
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 30695
       HEAP32[$448 >> 2] = $14; //@line 30696
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 30697
       HEAP32[$449 >> 2] = $16; //@line 30698
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 30699
       HEAP32[$450 >> 2] = $18; //@line 30700
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 30701
       HEAP32[$451 >> 2] = $20; //@line 30702
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 30703
       HEAP32[$452 >> 2] = $22; //@line 30704
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 30705
       HEAP32[$453 >> 2] = $24; //@line 30706
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 30707
       HEAP32[$454 >> 2] = $26; //@line 30708
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 30709
       HEAP32[$455 >> 2] = $28; //@line 30710
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 30711
       HEAP32[$456 >> 2] = $30; //@line 30712
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 30713
       HEAP32[$457 >> 2] = $32; //@line 30714
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 30715
       HEAP32[$458 >> 2] = $34; //@line 30716
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 30717
       HEAP32[$459 >> 2] = $36; //@line 30718
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 30719
       HEAP32[$460 >> 2] = $38; //@line 30720
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 30721
       HEAP32[$461 >> 2] = $40; //@line 30722
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 30723
       HEAP32[$462 >> 2] = $42; //@line 30724
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 30725
       HEAP32[$463 >> 2] = $44; //@line 30726
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 30727
       HEAP32[$464 >> 2] = $46; //@line 30728
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 30729
       HEAP32[$465 >> 2] = $48; //@line 30730
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 30731
       HEAP32[$466 >> 2] = $50; //@line 30732
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 30733
       HEAP32[$467 >> 2] = $52; //@line 30734
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 30735
       HEAP32[$468 >> 2] = $54; //@line 30736
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 30737
       HEAP32[$469 >> 2] = $56; //@line 30738
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 30739
       HEAP32[$470 >> 2] = $58; //@line 30740
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 30741
       HEAP32[$471 >> 2] = $60; //@line 30742
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 30743
       HEAP32[$472 >> 2] = $157; //@line 30744
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 30745
       HEAP32[$473 >> 2] = $64; //@line 30746
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 30747
       HEAP32[$474 >> 2] = $66; //@line 30748
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 30749
       HEAP32[$475 >> 2] = $68; //@line 30750
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 30751
       HEAP32[$476 >> 2] = $70; //@line 30752
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 30753
       HEAP32[$477 >> 2] = $72; //@line 30754
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 30755
       HEAP32[$478 >> 2] = $74; //@line 30756
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 30757
       HEAP32[$479 >> 2] = $76; //@line 30758
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 30759
       HEAP32[$480 >> 2] = $78; //@line 30760
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 30761
       HEAP32[$481 >> 2] = $80; //@line 30762
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 30763
       HEAP32[$482 >> 2] = $82; //@line 30764
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 30765
       HEAP32[$483 >> 2] = $84; //@line 30766
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 30767
       HEAP32[$484 >> 2] = $86; //@line 30768
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 30769
       HEAP32[$485 >> 2] = $88; //@line 30770
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 30771
       HEAP32[$486 >> 2] = $90; //@line 30772
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 30773
       HEAP32[$487 >> 2] = $92; //@line 30774
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 30775
       HEAP32[$488 >> 2] = $94; //@line 30776
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 30777
       HEAP32[$489 >> 2] = $431; //@line 30778
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 30779
       HEAP32[$490 >> 2] = $96; //@line 30780
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 30781
       HEAP32[$491 >> 2] = $98; //@line 30782
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 30783
       HEAP32[$492 >> 2] = $439; //@line 30784
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 30785
       HEAP32[$493 >> 2] = $100; //@line 30786
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 30787
       HEAP32[$494 >> 2] = $102; //@line 30788
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 30789
       HEAP32[$495 >> 2] = $104; //@line 30790
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 30791
       HEAP32[$496 >> 2] = $106; //@line 30792
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 30793
       HEAP32[$497 >> 2] = $108; //@line 30794
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 30795
       HEAP32[$498 >> 2] = $110; //@line 30796
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 30797
       HEAP32[$499 >> 2] = $112; //@line 30798
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 30799
       HEAP32[$500 >> 2] = $114; //@line 30800
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 30801
       HEAP32[$501 >> 2] = $116; //@line 30802
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 30803
       HEAP32[$502 >> 2] = $118; //@line 30804
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 30805
       HEAP32[$503 >> 2] = $120; //@line 30806
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 30807
       HEAP32[$504 >> 2] = $122; //@line 30808
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 30809
       HEAP32[$505 >> 2] = $124; //@line 30810
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 30811
       HEAP32[$506 >> 2] = $126; //@line 30812
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 30813
       HEAP32[$507 >> 2] = $128; //@line 30814
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 30815
       HEAP32[$508 >> 2] = $130; //@line 30816
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 30817
       HEAP32[$509 >> 2] = $132; //@line 30818
       sp = STACKTOP; //@line 30819
       return;
      }
     }
     _mbed_tracef(2, 3803, 4564, $114); //@line 30823
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$126 >> 2] | 0; //@line 30828
     $512 = $511 + 56 | 0; //@line 30829
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3803, 4698, $94); //@line 30833
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 30837
     $516 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 30838
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 30841
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 30842
      HEAP32[$517 >> 2] = $2; //@line 30843
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 30844
      HEAP32[$518 >> 2] = $4; //@line 30845
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 30846
      HEAP32[$519 >> 2] = $6; //@line 30847
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 30848
      HEAP32[$520 >> 2] = $8; //@line 30849
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 30850
      HEAP32[$521 >> 2] = $10; //@line 30851
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 30852
      HEAP32[$522 >> 2] = $12; //@line 30853
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 30854
      HEAP32[$523 >> 2] = $14; //@line 30855
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 30856
      HEAP32[$524 >> 2] = $16; //@line 30857
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 30858
      HEAP32[$525 >> 2] = $18; //@line 30859
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 30860
      HEAP32[$526 >> 2] = $20; //@line 30861
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 30862
      HEAP32[$527 >> 2] = $22; //@line 30863
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 30864
      HEAP32[$528 >> 2] = $24; //@line 30865
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 30866
      HEAP32[$529 >> 2] = $26; //@line 30867
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 30868
      HEAP32[$530 >> 2] = $28; //@line 30869
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 30870
      HEAP32[$531 >> 2] = $30; //@line 30871
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 30872
      HEAP32[$532 >> 2] = $32; //@line 30873
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 30874
      HEAP32[$533 >> 2] = $34; //@line 30875
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 30876
      HEAP32[$534 >> 2] = $36; //@line 30877
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 30878
      HEAP32[$535 >> 2] = $38; //@line 30879
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 30880
      HEAP32[$536 >> 2] = $40; //@line 30881
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 30882
      HEAP32[$537 >> 2] = $42; //@line 30883
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 30884
      HEAP32[$538 >> 2] = $44; //@line 30885
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 30886
      HEAP32[$539 >> 2] = $46; //@line 30887
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 30888
      HEAP32[$540 >> 2] = $48; //@line 30889
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 30890
      HEAP32[$541 >> 2] = $50; //@line 30891
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 30892
      HEAP32[$542 >> 2] = $52; //@line 30893
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 30894
      HEAP32[$543 >> 2] = $54; //@line 30895
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 30896
      HEAP32[$544 >> 2] = $56; //@line 30897
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 30898
      HEAP32[$545 >> 2] = $58; //@line 30899
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 30900
      HEAP32[$546 >> 2] = $60; //@line 30901
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 30902
      HEAP32[$547 >> 2] = $157; //@line 30903
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 30904
      HEAP32[$548 >> 2] = $64; //@line 30905
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 30906
      HEAP32[$549 >> 2] = $66; //@line 30907
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 30908
      HEAP32[$550 >> 2] = $68; //@line 30909
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 30910
      HEAP32[$551 >> 2] = $70; //@line 30911
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 30912
      HEAP32[$552 >> 2] = $72; //@line 30913
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 30914
      HEAP32[$553 >> 2] = $74; //@line 30915
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 30916
      HEAP32[$554 >> 2] = $76; //@line 30917
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 30918
      HEAP32[$555 >> 2] = $78; //@line 30919
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 30920
      HEAP32[$556 >> 2] = $80; //@line 30921
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 30922
      HEAP32[$557 >> 2] = $82; //@line 30923
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 30924
      HEAP32[$558 >> 2] = $84; //@line 30925
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 30926
      HEAP32[$559 >> 2] = $86; //@line 30927
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 30928
      HEAP32[$560 >> 2] = $88; //@line 30929
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 30930
      HEAP32[$561 >> 2] = $90; //@line 30931
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 30932
      HEAP32[$562 >> 2] = $92; //@line 30933
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 30934
      HEAP32[$563 >> 2] = $94; //@line 30935
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 30936
      HEAP32[$564 >> 2] = $96; //@line 30937
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 30938
      HEAP32[$565 >> 2] = $98; //@line 30939
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 30940
      HEAP32[$566 >> 2] = $100; //@line 30941
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 30942
      HEAP32[$567 >> 2] = $102; //@line 30943
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 30944
      HEAP32[$568 >> 2] = $104; //@line 30945
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 30946
      HEAP32[$569 >> 2] = $106; //@line 30947
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 30948
      HEAP32[$570 >> 2] = $108; //@line 30949
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 30950
      HEAP32[$571 >> 2] = $110; //@line 30951
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 30952
      HEAP32[$572 >> 2] = $112; //@line 30953
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 30954
      HEAP32[$573 >> 2] = $114; //@line 30955
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 30956
      HEAP32[$574 >> 2] = $116; //@line 30957
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 30958
      HEAP32[$575 >> 2] = $118; //@line 30959
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 30960
      HEAP32[$576 >> 2] = $120; //@line 30961
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 30962
      HEAP32[$577 >> 2] = $122; //@line 30963
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 30964
      HEAP32[$578 >> 2] = $124; //@line 30965
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 30966
      HEAP32[$579 >> 2] = $126; //@line 30967
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 30968
      HEAP32[$580 >> 2] = $128; //@line 30969
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 30970
      HEAP32[$581 >> 2] = $130; //@line 30971
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 30972
      HEAP32[$582 >> 2] = $132; //@line 30973
      sp = STACKTOP; //@line 30974
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 30978
     ___async_unwind = 0; //@line 30979
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 30980
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 30981
     HEAP32[$517 >> 2] = $2; //@line 30982
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 30983
     HEAP32[$518 >> 2] = $4; //@line 30984
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 30985
     HEAP32[$519 >> 2] = $6; //@line 30986
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 30987
     HEAP32[$520 >> 2] = $8; //@line 30988
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 30989
     HEAP32[$521 >> 2] = $10; //@line 30990
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 30991
     HEAP32[$522 >> 2] = $12; //@line 30992
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 30993
     HEAP32[$523 >> 2] = $14; //@line 30994
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 30995
     HEAP32[$524 >> 2] = $16; //@line 30996
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 30997
     HEAP32[$525 >> 2] = $18; //@line 30998
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 30999
     HEAP32[$526 >> 2] = $20; //@line 31000
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 31001
     HEAP32[$527 >> 2] = $22; //@line 31002
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 31003
     HEAP32[$528 >> 2] = $24; //@line 31004
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 31005
     HEAP32[$529 >> 2] = $26; //@line 31006
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 31007
     HEAP32[$530 >> 2] = $28; //@line 31008
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 31009
     HEAP32[$531 >> 2] = $30; //@line 31010
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 31011
     HEAP32[$532 >> 2] = $32; //@line 31012
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 31013
     HEAP32[$533 >> 2] = $34; //@line 31014
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 31015
     HEAP32[$534 >> 2] = $36; //@line 31016
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 31017
     HEAP32[$535 >> 2] = $38; //@line 31018
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 31019
     HEAP32[$536 >> 2] = $40; //@line 31020
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 31021
     HEAP32[$537 >> 2] = $42; //@line 31022
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 31023
     HEAP32[$538 >> 2] = $44; //@line 31024
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 31025
     HEAP32[$539 >> 2] = $46; //@line 31026
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 31027
     HEAP32[$540 >> 2] = $48; //@line 31028
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 31029
     HEAP32[$541 >> 2] = $50; //@line 31030
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 31031
     HEAP32[$542 >> 2] = $52; //@line 31032
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 31033
     HEAP32[$543 >> 2] = $54; //@line 31034
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 31035
     HEAP32[$544 >> 2] = $56; //@line 31036
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 31037
     HEAP32[$545 >> 2] = $58; //@line 31038
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 31039
     HEAP32[$546 >> 2] = $60; //@line 31040
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 31041
     HEAP32[$547 >> 2] = $157; //@line 31042
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 31043
     HEAP32[$548 >> 2] = $64; //@line 31044
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 31045
     HEAP32[$549 >> 2] = $66; //@line 31046
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 31047
     HEAP32[$550 >> 2] = $68; //@line 31048
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 31049
     HEAP32[$551 >> 2] = $70; //@line 31050
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 31051
     HEAP32[$552 >> 2] = $72; //@line 31052
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 31053
     HEAP32[$553 >> 2] = $74; //@line 31054
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 31055
     HEAP32[$554 >> 2] = $76; //@line 31056
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 31057
     HEAP32[$555 >> 2] = $78; //@line 31058
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 31059
     HEAP32[$556 >> 2] = $80; //@line 31060
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 31061
     HEAP32[$557 >> 2] = $82; //@line 31062
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 31063
     HEAP32[$558 >> 2] = $84; //@line 31064
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 31065
     HEAP32[$559 >> 2] = $86; //@line 31066
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 31067
     HEAP32[$560 >> 2] = $88; //@line 31068
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 31069
     HEAP32[$561 >> 2] = $90; //@line 31070
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 31071
     HEAP32[$562 >> 2] = $92; //@line 31072
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 31073
     HEAP32[$563 >> 2] = $94; //@line 31074
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 31075
     HEAP32[$564 >> 2] = $96; //@line 31076
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 31077
     HEAP32[$565 >> 2] = $98; //@line 31078
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 31079
     HEAP32[$566 >> 2] = $100; //@line 31080
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 31081
     HEAP32[$567 >> 2] = $102; //@line 31082
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 31083
     HEAP32[$568 >> 2] = $104; //@line 31084
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 31085
     HEAP32[$569 >> 2] = $106; //@line 31086
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 31087
     HEAP32[$570 >> 2] = $108; //@line 31088
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 31089
     HEAP32[$571 >> 2] = $110; //@line 31090
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 31091
     HEAP32[$572 >> 2] = $112; //@line 31092
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 31093
     HEAP32[$573 >> 2] = $114; //@line 31094
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 31095
     HEAP32[$574 >> 2] = $116; //@line 31096
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 31097
     HEAP32[$575 >> 2] = $118; //@line 31098
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 31099
     HEAP32[$576 >> 2] = $120; //@line 31100
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 31101
     HEAP32[$577 >> 2] = $122; //@line 31102
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 31103
     HEAP32[$578 >> 2] = $124; //@line 31104
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 31105
     HEAP32[$579 >> 2] = $126; //@line 31106
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 31107
     HEAP32[$580 >> 2] = $128; //@line 31108
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 31109
     HEAP32[$581 >> 2] = $130; //@line 31110
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 31111
     HEAP32[$582 >> 2] = $132; //@line 31112
     sp = STACKTOP; //@line 31113
     return;
    }
   case 53:
    {
     _mbed_tracef(2, 3803, 4831, $66); //@line 31118
     break L2;
     break;
    }
   case 57:
    {
     $600 = HEAP32[$126 >> 2] | 0; //@line 31123
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 31126
     $603 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $600 + 60 | 0, $600 + 8 | 0, 20, $$1202$i) | 0; //@line 31127
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 31130
      $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 31131
      HEAP32[$604 >> 2] = $2; //@line 31132
      $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 31133
      HEAP32[$605 >> 2] = $4; //@line 31134
      $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 31135
      HEAP32[$606 >> 2] = $6; //@line 31136
      $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 31137
      HEAP32[$607 >> 2] = $8; //@line 31138
      $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 31139
      HEAP32[$608 >> 2] = $10; //@line 31140
      $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 31141
      HEAP32[$609 >> 2] = $12; //@line 31142
      $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 31143
      HEAP32[$610 >> 2] = $14; //@line 31144
      $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 31145
      HEAP32[$611 >> 2] = $16; //@line 31146
      $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 31147
      HEAP32[$612 >> 2] = $18; //@line 31148
      $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 31149
      HEAP32[$613 >> 2] = $20; //@line 31150
      $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 31151
      HEAP32[$614 >> 2] = $22; //@line 31152
      $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 31153
      HEAP32[$615 >> 2] = $24; //@line 31154
      $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 31155
      HEAP32[$616 >> 2] = $26; //@line 31156
      $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 31157
      HEAP32[$617 >> 2] = $28; //@line 31158
      $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 31159
      HEAP32[$618 >> 2] = $30; //@line 31160
      $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 31161
      HEAP32[$619 >> 2] = $32; //@line 31162
      $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 31163
      HEAP32[$620 >> 2] = $34; //@line 31164
      $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 31165
      HEAP32[$621 >> 2] = $36; //@line 31166
      $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 31167
      HEAP32[$622 >> 2] = $38; //@line 31168
      $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 31169
      HEAP32[$623 >> 2] = $40; //@line 31170
      $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 31171
      HEAP32[$624 >> 2] = $42; //@line 31172
      $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 31173
      HEAP32[$625 >> 2] = $44; //@line 31174
      $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 31175
      HEAP32[$626 >> 2] = $46; //@line 31176
      $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 31177
      HEAP32[$627 >> 2] = $48; //@line 31178
      $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 31179
      HEAP32[$628 >> 2] = $50; //@line 31180
      $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 31181
      HEAP32[$629 >> 2] = $52; //@line 31182
      $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 31183
      HEAP32[$630 >> 2] = $54; //@line 31184
      $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 31185
      HEAP32[$631 >> 2] = $56; //@line 31186
      $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 31187
      HEAP32[$632 >> 2] = $58; //@line 31188
      $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 31189
      HEAP32[$633 >> 2] = $60; //@line 31190
      $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 31191
      HEAP32[$634 >> 2] = $157; //@line 31192
      $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 31193
      HEAP32[$635 >> 2] = $64; //@line 31194
      $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 31195
      HEAP32[$636 >> 2] = $66; //@line 31196
      $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 31197
      HEAP32[$637 >> 2] = $68; //@line 31198
      $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 31199
      HEAP32[$638 >> 2] = $70; //@line 31200
      $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 31201
      HEAP32[$639 >> 2] = $72; //@line 31202
      $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 31203
      HEAP32[$640 >> 2] = $74; //@line 31204
      $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 31205
      HEAP32[$641 >> 2] = $76; //@line 31206
      $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 31207
      HEAP32[$642 >> 2] = $78; //@line 31208
      $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 31209
      HEAP32[$643 >> 2] = $80; //@line 31210
      $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 31211
      HEAP32[$644 >> 2] = $82; //@line 31212
      $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 31213
      HEAP32[$645 >> 2] = $84; //@line 31214
      $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 31215
      HEAP32[$646 >> 2] = $86; //@line 31216
      $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 31217
      HEAP32[$647 >> 2] = $88; //@line 31218
      $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 31219
      HEAP32[$648 >> 2] = $90; //@line 31220
      $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 31221
      HEAP32[$649 >> 2] = $92; //@line 31222
      $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 31223
      HEAP32[$650 >> 2] = $94; //@line 31224
      $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 31225
      HEAP32[$651 >> 2] = $96; //@line 31226
      $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 31227
      HEAP32[$652 >> 2] = $98; //@line 31228
      $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 31229
      HEAP32[$653 >> 2] = $100; //@line 31230
      $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 31231
      HEAP32[$654 >> 2] = $102; //@line 31232
      $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 31233
      HEAP32[$655 >> 2] = $104; //@line 31234
      $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 31235
      HEAP32[$656 >> 2] = $106; //@line 31236
      $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 31237
      HEAP32[$657 >> 2] = $108; //@line 31238
      $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 31239
      HEAP32[$658 >> 2] = $110; //@line 31240
      $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 31241
      HEAP32[$659 >> 2] = $112; //@line 31242
      $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 31243
      HEAP32[$660 >> 2] = $114; //@line 31244
      $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 31245
      HEAP32[$661 >> 2] = $116; //@line 31246
      $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 31247
      HEAP32[$662 >> 2] = $118; //@line 31248
      $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 31249
      HEAP32[$663 >> 2] = $120; //@line 31250
      $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 31251
      HEAP32[$664 >> 2] = $122; //@line 31252
      $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 31253
      HEAP32[$665 >> 2] = $124; //@line 31254
      $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 31255
      HEAP32[$666 >> 2] = $126; //@line 31256
      $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 31257
      HEAP32[$667 >> 2] = $128; //@line 31258
      $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 31259
      HEAP32[$668 >> 2] = $130; //@line 31260
      $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 31261
      HEAP32[$669 >> 2] = $132; //@line 31262
      sp = STACKTOP; //@line 31263
      return;
     }
     HEAP8[___async_retval >> 0] = $603; //@line 31267
     ___async_unwind = 0; //@line 31268
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 31269
     $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 31270
     HEAP32[$604 >> 2] = $2; //@line 31271
     $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 31272
     HEAP32[$605 >> 2] = $4; //@line 31273
     $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 31274
     HEAP32[$606 >> 2] = $6; //@line 31275
     $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 31276
     HEAP32[$607 >> 2] = $8; //@line 31277
     $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 31278
     HEAP32[$608 >> 2] = $10; //@line 31279
     $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 31280
     HEAP32[$609 >> 2] = $12; //@line 31281
     $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 31282
     HEAP32[$610 >> 2] = $14; //@line 31283
     $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 31284
     HEAP32[$611 >> 2] = $16; //@line 31285
     $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 31286
     HEAP32[$612 >> 2] = $18; //@line 31287
     $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 31288
     HEAP32[$613 >> 2] = $20; //@line 31289
     $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 31290
     HEAP32[$614 >> 2] = $22; //@line 31291
     $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 31292
     HEAP32[$615 >> 2] = $24; //@line 31293
     $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 31294
     HEAP32[$616 >> 2] = $26; //@line 31295
     $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 31296
     HEAP32[$617 >> 2] = $28; //@line 31297
     $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 31298
     HEAP32[$618 >> 2] = $30; //@line 31299
     $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 31300
     HEAP32[$619 >> 2] = $32; //@line 31301
     $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 31302
     HEAP32[$620 >> 2] = $34; //@line 31303
     $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 31304
     HEAP32[$621 >> 2] = $36; //@line 31305
     $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 31306
     HEAP32[$622 >> 2] = $38; //@line 31307
     $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 31308
     HEAP32[$623 >> 2] = $40; //@line 31309
     $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 31310
     HEAP32[$624 >> 2] = $42; //@line 31311
     $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 31312
     HEAP32[$625 >> 2] = $44; //@line 31313
     $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 31314
     HEAP32[$626 >> 2] = $46; //@line 31315
     $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 31316
     HEAP32[$627 >> 2] = $48; //@line 31317
     $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 31318
     HEAP32[$628 >> 2] = $50; //@line 31319
     $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 31320
     HEAP32[$629 >> 2] = $52; //@line 31321
     $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 31322
     HEAP32[$630 >> 2] = $54; //@line 31323
     $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 31324
     HEAP32[$631 >> 2] = $56; //@line 31325
     $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 31326
     HEAP32[$632 >> 2] = $58; //@line 31327
     $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 31328
     HEAP32[$633 >> 2] = $60; //@line 31329
     $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 31330
     HEAP32[$634 >> 2] = $157; //@line 31331
     $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 31332
     HEAP32[$635 >> 2] = $64; //@line 31333
     $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 31334
     HEAP32[$636 >> 2] = $66; //@line 31335
     $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 31336
     HEAP32[$637 >> 2] = $68; //@line 31337
     $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 31338
     HEAP32[$638 >> 2] = $70; //@line 31339
     $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 31340
     HEAP32[$639 >> 2] = $72; //@line 31341
     $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 31342
     HEAP32[$640 >> 2] = $74; //@line 31343
     $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 31344
     HEAP32[$641 >> 2] = $76; //@line 31345
     $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 31346
     HEAP32[$642 >> 2] = $78; //@line 31347
     $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 31348
     HEAP32[$643 >> 2] = $80; //@line 31349
     $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 31350
     HEAP32[$644 >> 2] = $82; //@line 31351
     $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 31352
     HEAP32[$645 >> 2] = $84; //@line 31353
     $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 31354
     HEAP32[$646 >> 2] = $86; //@line 31355
     $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 31356
     HEAP32[$647 >> 2] = $88; //@line 31357
     $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 31358
     HEAP32[$648 >> 2] = $90; //@line 31359
     $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 31360
     HEAP32[$649 >> 2] = $92; //@line 31361
     $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 31362
     HEAP32[$650 >> 2] = $94; //@line 31363
     $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 31364
     HEAP32[$651 >> 2] = $96; //@line 31365
     $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 31366
     HEAP32[$652 >> 2] = $98; //@line 31367
     $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 31368
     HEAP32[$653 >> 2] = $100; //@line 31369
     $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 31370
     HEAP32[$654 >> 2] = $102; //@line 31371
     $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 31372
     HEAP32[$655 >> 2] = $104; //@line 31373
     $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 31374
     HEAP32[$656 >> 2] = $106; //@line 31375
     $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 31376
     HEAP32[$657 >> 2] = $108; //@line 31377
     $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 31378
     HEAP32[$658 >> 2] = $110; //@line 31379
     $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 31380
     HEAP32[$659 >> 2] = $112; //@line 31381
     $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 31382
     HEAP32[$660 >> 2] = $114; //@line 31383
     $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 31384
     HEAP32[$661 >> 2] = $116; //@line 31385
     $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 31386
     HEAP32[$662 >> 2] = $118; //@line 31387
     $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 31388
     HEAP32[$663 >> 2] = $120; //@line 31389
     $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 31390
     HEAP32[$664 >> 2] = $122; //@line 31391
     $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 31392
     HEAP32[$665 >> 2] = $124; //@line 31393
     $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 31394
     HEAP32[$666 >> 2] = $126; //@line 31395
     $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 31396
     HEAP32[$667 >> 2] = $128; //@line 31397
     $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 31398
     HEAP32[$668 >> 2] = $130; //@line 31399
     $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 31400
     HEAP32[$669 >> 2] = $132; //@line 31401
     sp = STACKTOP; //@line 31402
     return;
    }
   case 60:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 31407
     $671 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $4, $22, 11, $$1202$i) | 0; //@line 31408
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 31411
      $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 31412
      HEAP32[$672 >> 2] = $2; //@line 31413
      $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 31414
      HEAP32[$673 >> 2] = $4; //@line 31415
      $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 31416
      HEAP32[$674 >> 2] = $6; //@line 31417
      $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 31418
      HEAP32[$675 >> 2] = $8; //@line 31419
      $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 31420
      HEAP32[$676 >> 2] = $10; //@line 31421
      $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 31422
      HEAP32[$677 >> 2] = $12; //@line 31423
      $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 31424
      HEAP32[$678 >> 2] = $14; //@line 31425
      $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 31426
      HEAP32[$679 >> 2] = $16; //@line 31427
      $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 31428
      HEAP32[$680 >> 2] = $18; //@line 31429
      $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 31430
      HEAP32[$681 >> 2] = $20; //@line 31431
      $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 31432
      HEAP32[$682 >> 2] = $22; //@line 31433
      $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 31434
      HEAP32[$683 >> 2] = $24; //@line 31435
      $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 31436
      HEAP32[$684 >> 2] = $26; //@line 31437
      $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 31438
      HEAP32[$685 >> 2] = $28; //@line 31439
      $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 31440
      HEAP32[$686 >> 2] = $30; //@line 31441
      $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 31442
      HEAP32[$687 >> 2] = $32; //@line 31443
      $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 31444
      HEAP32[$688 >> 2] = $34; //@line 31445
      $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 31446
      HEAP32[$689 >> 2] = $36; //@line 31447
      $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 31448
      HEAP32[$690 >> 2] = $38; //@line 31449
      $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 31450
      HEAP32[$691 >> 2] = $40; //@line 31451
      $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 31452
      HEAP32[$692 >> 2] = $42; //@line 31453
      $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 31454
      HEAP32[$693 >> 2] = $44; //@line 31455
      $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 31456
      HEAP32[$694 >> 2] = $46; //@line 31457
      $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 31458
      HEAP32[$695 >> 2] = $48; //@line 31459
      $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 31460
      HEAP32[$696 >> 2] = $50; //@line 31461
      $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 31462
      HEAP32[$697 >> 2] = $52; //@line 31463
      $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 31464
      HEAP32[$698 >> 2] = $54; //@line 31465
      $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 31466
      HEAP32[$699 >> 2] = $56; //@line 31467
      $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 31468
      HEAP32[$700 >> 2] = $58; //@line 31469
      $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 31470
      HEAP32[$701 >> 2] = $60; //@line 31471
      $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 31472
      HEAP32[$702 >> 2] = $157; //@line 31473
      $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 31474
      HEAP32[$703 >> 2] = $64; //@line 31475
      $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 31476
      HEAP32[$704 >> 2] = $66; //@line 31477
      $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 31478
      HEAP32[$705 >> 2] = $68; //@line 31479
      $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 31480
      HEAP32[$706 >> 2] = $70; //@line 31481
      $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 31482
      HEAP32[$707 >> 2] = $72; //@line 31483
      $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 31484
      HEAP32[$708 >> 2] = $74; //@line 31485
      $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 31486
      HEAP32[$709 >> 2] = $76; //@line 31487
      $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 31488
      HEAP32[$710 >> 2] = $78; //@line 31489
      $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 31490
      HEAP32[$711 >> 2] = $80; //@line 31491
      $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 31492
      HEAP32[$712 >> 2] = $82; //@line 31493
      $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 31494
      HEAP32[$713 >> 2] = $84; //@line 31495
      $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 31496
      HEAP32[$714 >> 2] = $86; //@line 31497
      $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 31498
      HEAP32[$715 >> 2] = $88; //@line 31499
      $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 31500
      HEAP32[$716 >> 2] = $90; //@line 31501
      $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 31502
      HEAP32[$717 >> 2] = $92; //@line 31503
      $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 31504
      HEAP32[$718 >> 2] = $94; //@line 31505
      $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 31506
      HEAP32[$719 >> 2] = $96; //@line 31507
      $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 31508
      HEAP32[$720 >> 2] = $98; //@line 31509
      $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 31510
      HEAP32[$721 >> 2] = $100; //@line 31511
      $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 31512
      HEAP32[$722 >> 2] = $102; //@line 31513
      $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 31514
      HEAP32[$723 >> 2] = $104; //@line 31515
      $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 31516
      HEAP32[$724 >> 2] = $106; //@line 31517
      $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 31518
      HEAP32[$725 >> 2] = $108; //@line 31519
      $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 31520
      HEAP32[$726 >> 2] = $110; //@line 31521
      $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 31522
      HEAP32[$727 >> 2] = $112; //@line 31523
      $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 31524
      HEAP32[$728 >> 2] = $114; //@line 31525
      $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 31526
      HEAP32[$729 >> 2] = $116; //@line 31527
      $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 31528
      HEAP32[$730 >> 2] = $118; //@line 31529
      $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 31530
      HEAP32[$731 >> 2] = $120; //@line 31531
      $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 31532
      HEAP32[$732 >> 2] = $122; //@line 31533
      $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 31534
      HEAP32[$733 >> 2] = $124; //@line 31535
      $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 31536
      HEAP32[$734 >> 2] = $126; //@line 31537
      $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 31538
      HEAP32[$735 >> 2] = $128; //@line 31539
      $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 31540
      HEAP32[$736 >> 2] = $130; //@line 31541
      $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 31542
      HEAP32[$737 >> 2] = $132; //@line 31543
      sp = STACKTOP; //@line 31544
      return;
     }
     HEAP8[___async_retval >> 0] = $671; //@line 31548
     ___async_unwind = 0; //@line 31549
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 31550
     $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 31551
     HEAP32[$672 >> 2] = $2; //@line 31552
     $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 31553
     HEAP32[$673 >> 2] = $4; //@line 31554
     $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 31555
     HEAP32[$674 >> 2] = $6; //@line 31556
     $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 31557
     HEAP32[$675 >> 2] = $8; //@line 31558
     $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 31559
     HEAP32[$676 >> 2] = $10; //@line 31560
     $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 31561
     HEAP32[$677 >> 2] = $12; //@line 31562
     $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 31563
     HEAP32[$678 >> 2] = $14; //@line 31564
     $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 31565
     HEAP32[$679 >> 2] = $16; //@line 31566
     $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 31567
     HEAP32[$680 >> 2] = $18; //@line 31568
     $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 31569
     HEAP32[$681 >> 2] = $20; //@line 31570
     $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 31571
     HEAP32[$682 >> 2] = $22; //@line 31572
     $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 31573
     HEAP32[$683 >> 2] = $24; //@line 31574
     $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 31575
     HEAP32[$684 >> 2] = $26; //@line 31576
     $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 31577
     HEAP32[$685 >> 2] = $28; //@line 31578
     $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 31579
     HEAP32[$686 >> 2] = $30; //@line 31580
     $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 31581
     HEAP32[$687 >> 2] = $32; //@line 31582
     $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 31583
     HEAP32[$688 >> 2] = $34; //@line 31584
     $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 31585
     HEAP32[$689 >> 2] = $36; //@line 31586
     $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 31587
     HEAP32[$690 >> 2] = $38; //@line 31588
     $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 31589
     HEAP32[$691 >> 2] = $40; //@line 31590
     $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 31591
     HEAP32[$692 >> 2] = $42; //@line 31592
     $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 31593
     HEAP32[$693 >> 2] = $44; //@line 31594
     $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 31595
     HEAP32[$694 >> 2] = $46; //@line 31596
     $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 31597
     HEAP32[$695 >> 2] = $48; //@line 31598
     $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 31599
     HEAP32[$696 >> 2] = $50; //@line 31600
     $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 31601
     HEAP32[$697 >> 2] = $52; //@line 31602
     $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 31603
     HEAP32[$698 >> 2] = $54; //@line 31604
     $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 31605
     HEAP32[$699 >> 2] = $56; //@line 31606
     $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 31607
     HEAP32[$700 >> 2] = $58; //@line 31608
     $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 31609
     HEAP32[$701 >> 2] = $60; //@line 31610
     $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 31611
     HEAP32[$702 >> 2] = $157; //@line 31612
     $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 31613
     HEAP32[$703 >> 2] = $64; //@line 31614
     $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 31615
     HEAP32[$704 >> 2] = $66; //@line 31616
     $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 31617
     HEAP32[$705 >> 2] = $68; //@line 31618
     $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 31619
     HEAP32[$706 >> 2] = $70; //@line 31620
     $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 31621
     HEAP32[$707 >> 2] = $72; //@line 31622
     $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 31623
     HEAP32[$708 >> 2] = $74; //@line 31624
     $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 31625
     HEAP32[$709 >> 2] = $76; //@line 31626
     $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 31627
     HEAP32[$710 >> 2] = $78; //@line 31628
     $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 31629
     HEAP32[$711 >> 2] = $80; //@line 31630
     $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 31631
     HEAP32[$712 >> 2] = $82; //@line 31632
     $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 31633
     HEAP32[$713 >> 2] = $84; //@line 31634
     $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 31635
     HEAP32[$714 >> 2] = $86; //@line 31636
     $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 31637
     HEAP32[$715 >> 2] = $88; //@line 31638
     $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 31639
     HEAP32[$716 >> 2] = $90; //@line 31640
     $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 31641
     HEAP32[$717 >> 2] = $92; //@line 31642
     $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 31643
     HEAP32[$718 >> 2] = $94; //@line 31644
     $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 31645
     HEAP32[$719 >> 2] = $96; //@line 31646
     $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 31647
     HEAP32[$720 >> 2] = $98; //@line 31648
     $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 31649
     HEAP32[$721 >> 2] = $100; //@line 31650
     $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 31651
     HEAP32[$722 >> 2] = $102; //@line 31652
     $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 31653
     HEAP32[$723 >> 2] = $104; //@line 31654
     $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 31655
     HEAP32[$724 >> 2] = $106; //@line 31656
     $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 31657
     HEAP32[$725 >> 2] = $108; //@line 31658
     $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 31659
     HEAP32[$726 >> 2] = $110; //@line 31660
     $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 31661
     HEAP32[$727 >> 2] = $112; //@line 31662
     $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 31663
     HEAP32[$728 >> 2] = $114; //@line 31664
     $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 31665
     HEAP32[$729 >> 2] = $116; //@line 31666
     $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 31667
     HEAP32[$730 >> 2] = $118; //@line 31668
     $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 31669
     HEAP32[$731 >> 2] = $120; //@line 31670
     $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 31671
     HEAP32[$732 >> 2] = $122; //@line 31672
     $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 31673
     HEAP32[$733 >> 2] = $124; //@line 31674
     $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 31675
     HEAP32[$734 >> 2] = $126; //@line 31676
     $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 31677
     HEAP32[$735 >> 2] = $128; //@line 31678
     $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 31679
     HEAP32[$736 >> 2] = $130; //@line 31680
     $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 31681
     HEAP32[$737 >> 2] = $132; //@line 31682
     sp = STACKTOP; //@line 31683
     return;
    }
   case 65:
    {
     _mbed_tracef(2, 3803, 5026, $48); //@line 31688
     break L2;
     break;
    }
   case 69:
    {
     $755 = HEAP32[$126 >> 2] | 0; //@line 31693
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 31696
     $758 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $755 + 64 | 0, $755 + 10 | 0, 15, $$1202$i) | 0; //@line 31697
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 31700
      $759 = $ReallocAsyncCtx6 + 4 | 0; //@line 31701
      HEAP32[$759 >> 2] = $2; //@line 31702
      $760 = $ReallocAsyncCtx6 + 8 | 0; //@line 31703
      HEAP32[$760 >> 2] = $4; //@line 31704
      $761 = $ReallocAsyncCtx6 + 12 | 0; //@line 31705
      HEAP32[$761 >> 2] = $6; //@line 31706
      $762 = $ReallocAsyncCtx6 + 16 | 0; //@line 31707
      HEAP32[$762 >> 2] = $8; //@line 31708
      $763 = $ReallocAsyncCtx6 + 20 | 0; //@line 31709
      HEAP32[$763 >> 2] = $10; //@line 31710
      $764 = $ReallocAsyncCtx6 + 24 | 0; //@line 31711
      HEAP32[$764 >> 2] = $12; //@line 31712
      $765 = $ReallocAsyncCtx6 + 28 | 0; //@line 31713
      HEAP32[$765 >> 2] = $14; //@line 31714
      $766 = $ReallocAsyncCtx6 + 32 | 0; //@line 31715
      HEAP32[$766 >> 2] = $16; //@line 31716
      $767 = $ReallocAsyncCtx6 + 36 | 0; //@line 31717
      HEAP32[$767 >> 2] = $18; //@line 31718
      $768 = $ReallocAsyncCtx6 + 40 | 0; //@line 31719
      HEAP32[$768 >> 2] = $20; //@line 31720
      $769 = $ReallocAsyncCtx6 + 44 | 0; //@line 31721
      HEAP32[$769 >> 2] = $22; //@line 31722
      $770 = $ReallocAsyncCtx6 + 48 | 0; //@line 31723
      HEAP32[$770 >> 2] = $24; //@line 31724
      $771 = $ReallocAsyncCtx6 + 52 | 0; //@line 31725
      HEAP32[$771 >> 2] = $26; //@line 31726
      $772 = $ReallocAsyncCtx6 + 56 | 0; //@line 31727
      HEAP32[$772 >> 2] = $28; //@line 31728
      $773 = $ReallocAsyncCtx6 + 60 | 0; //@line 31729
      HEAP32[$773 >> 2] = $30; //@line 31730
      $774 = $ReallocAsyncCtx6 + 64 | 0; //@line 31731
      HEAP32[$774 >> 2] = $32; //@line 31732
      $775 = $ReallocAsyncCtx6 + 68 | 0; //@line 31733
      HEAP32[$775 >> 2] = $34; //@line 31734
      $776 = $ReallocAsyncCtx6 + 72 | 0; //@line 31735
      HEAP32[$776 >> 2] = $36; //@line 31736
      $777 = $ReallocAsyncCtx6 + 76 | 0; //@line 31737
      HEAP32[$777 >> 2] = $38; //@line 31738
      $778 = $ReallocAsyncCtx6 + 80 | 0; //@line 31739
      HEAP32[$778 >> 2] = $40; //@line 31740
      $779 = $ReallocAsyncCtx6 + 84 | 0; //@line 31741
      HEAP32[$779 >> 2] = $42; //@line 31742
      $780 = $ReallocAsyncCtx6 + 88 | 0; //@line 31743
      HEAP32[$780 >> 2] = $44; //@line 31744
      $781 = $ReallocAsyncCtx6 + 92 | 0; //@line 31745
      HEAP32[$781 >> 2] = $46; //@line 31746
      $782 = $ReallocAsyncCtx6 + 96 | 0; //@line 31747
      HEAP32[$782 >> 2] = $48; //@line 31748
      $783 = $ReallocAsyncCtx6 + 100 | 0; //@line 31749
      HEAP32[$783 >> 2] = $50; //@line 31750
      $784 = $ReallocAsyncCtx6 + 104 | 0; //@line 31751
      HEAP32[$784 >> 2] = $52; //@line 31752
      $785 = $ReallocAsyncCtx6 + 108 | 0; //@line 31753
      HEAP32[$785 >> 2] = $54; //@line 31754
      $786 = $ReallocAsyncCtx6 + 112 | 0; //@line 31755
      HEAP32[$786 >> 2] = $56; //@line 31756
      $787 = $ReallocAsyncCtx6 + 116 | 0; //@line 31757
      HEAP32[$787 >> 2] = $58; //@line 31758
      $788 = $ReallocAsyncCtx6 + 120 | 0; //@line 31759
      HEAP32[$788 >> 2] = $60; //@line 31760
      $789 = $ReallocAsyncCtx6 + 124 | 0; //@line 31761
      HEAP32[$789 >> 2] = $157; //@line 31762
      $790 = $ReallocAsyncCtx6 + 128 | 0; //@line 31763
      HEAP32[$790 >> 2] = $64; //@line 31764
      $791 = $ReallocAsyncCtx6 + 132 | 0; //@line 31765
      HEAP32[$791 >> 2] = $66; //@line 31766
      $792 = $ReallocAsyncCtx6 + 136 | 0; //@line 31767
      HEAP32[$792 >> 2] = $68; //@line 31768
      $793 = $ReallocAsyncCtx6 + 140 | 0; //@line 31769
      HEAP32[$793 >> 2] = $70; //@line 31770
      $794 = $ReallocAsyncCtx6 + 144 | 0; //@line 31771
      HEAP32[$794 >> 2] = $72; //@line 31772
      $795 = $ReallocAsyncCtx6 + 148 | 0; //@line 31773
      HEAP32[$795 >> 2] = $74; //@line 31774
      $796 = $ReallocAsyncCtx6 + 152 | 0; //@line 31775
      HEAP32[$796 >> 2] = $76; //@line 31776
      $797 = $ReallocAsyncCtx6 + 156 | 0; //@line 31777
      HEAP32[$797 >> 2] = $78; //@line 31778
      $798 = $ReallocAsyncCtx6 + 160 | 0; //@line 31779
      HEAP32[$798 >> 2] = $80; //@line 31780
      $799 = $ReallocAsyncCtx6 + 164 | 0; //@line 31781
      HEAP32[$799 >> 2] = $82; //@line 31782
      $800 = $ReallocAsyncCtx6 + 168 | 0; //@line 31783
      HEAP32[$800 >> 2] = $84; //@line 31784
      $801 = $ReallocAsyncCtx6 + 172 | 0; //@line 31785
      HEAP32[$801 >> 2] = $86; //@line 31786
      $802 = $ReallocAsyncCtx6 + 176 | 0; //@line 31787
      HEAP32[$802 >> 2] = $88; //@line 31788
      $803 = $ReallocAsyncCtx6 + 180 | 0; //@line 31789
      HEAP32[$803 >> 2] = $90; //@line 31790
      $804 = $ReallocAsyncCtx6 + 184 | 0; //@line 31791
      HEAP32[$804 >> 2] = $92; //@line 31792
      $805 = $ReallocAsyncCtx6 + 188 | 0; //@line 31793
      HEAP32[$805 >> 2] = $94; //@line 31794
      $806 = $ReallocAsyncCtx6 + 192 | 0; //@line 31795
      HEAP32[$806 >> 2] = $96; //@line 31796
      $807 = $ReallocAsyncCtx6 + 196 | 0; //@line 31797
      HEAP32[$807 >> 2] = $98; //@line 31798
      $808 = $ReallocAsyncCtx6 + 200 | 0; //@line 31799
      HEAP32[$808 >> 2] = $100; //@line 31800
      $809 = $ReallocAsyncCtx6 + 204 | 0; //@line 31801
      HEAP32[$809 >> 2] = $102; //@line 31802
      $810 = $ReallocAsyncCtx6 + 208 | 0; //@line 31803
      HEAP32[$810 >> 2] = $104; //@line 31804
      $811 = $ReallocAsyncCtx6 + 212 | 0; //@line 31805
      HEAP32[$811 >> 2] = $106; //@line 31806
      $812 = $ReallocAsyncCtx6 + 216 | 0; //@line 31807
      HEAP32[$812 >> 2] = $108; //@line 31808
      $813 = $ReallocAsyncCtx6 + 220 | 0; //@line 31809
      HEAP32[$813 >> 2] = $110; //@line 31810
      $814 = $ReallocAsyncCtx6 + 224 | 0; //@line 31811
      HEAP32[$814 >> 2] = $112; //@line 31812
      $815 = $ReallocAsyncCtx6 + 228 | 0; //@line 31813
      HEAP32[$815 >> 2] = $114; //@line 31814
      $816 = $ReallocAsyncCtx6 + 232 | 0; //@line 31815
      HEAP32[$816 >> 2] = $116; //@line 31816
      $817 = $ReallocAsyncCtx6 + 236 | 0; //@line 31817
      HEAP32[$817 >> 2] = $118; //@line 31818
      $818 = $ReallocAsyncCtx6 + 240 | 0; //@line 31819
      HEAP32[$818 >> 2] = $120; //@line 31820
      $819 = $ReallocAsyncCtx6 + 244 | 0; //@line 31821
      HEAP32[$819 >> 2] = $122; //@line 31822
      $820 = $ReallocAsyncCtx6 + 248 | 0; //@line 31823
      HEAP32[$820 >> 2] = $124; //@line 31824
      $821 = $ReallocAsyncCtx6 + 252 | 0; //@line 31825
      HEAP32[$821 >> 2] = $126; //@line 31826
      $822 = $ReallocAsyncCtx6 + 256 | 0; //@line 31827
      HEAP32[$822 >> 2] = $128; //@line 31828
      $823 = $ReallocAsyncCtx6 + 260 | 0; //@line 31829
      HEAP32[$823 >> 2] = $130; //@line 31830
      $824 = $ReallocAsyncCtx6 + 264 | 0; //@line 31831
      HEAP32[$824 >> 2] = $132; //@line 31832
      sp = STACKTOP; //@line 31833
      return;
     }
     HEAP8[___async_retval >> 0] = $758; //@line 31837
     ___async_unwind = 0; //@line 31838
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 31839
     $759 = $ReallocAsyncCtx6 + 4 | 0; //@line 31840
     HEAP32[$759 >> 2] = $2; //@line 31841
     $760 = $ReallocAsyncCtx6 + 8 | 0; //@line 31842
     HEAP32[$760 >> 2] = $4; //@line 31843
     $761 = $ReallocAsyncCtx6 + 12 | 0; //@line 31844
     HEAP32[$761 >> 2] = $6; //@line 31845
     $762 = $ReallocAsyncCtx6 + 16 | 0; //@line 31846
     HEAP32[$762 >> 2] = $8; //@line 31847
     $763 = $ReallocAsyncCtx6 + 20 | 0; //@line 31848
     HEAP32[$763 >> 2] = $10; //@line 31849
     $764 = $ReallocAsyncCtx6 + 24 | 0; //@line 31850
     HEAP32[$764 >> 2] = $12; //@line 31851
     $765 = $ReallocAsyncCtx6 + 28 | 0; //@line 31852
     HEAP32[$765 >> 2] = $14; //@line 31853
     $766 = $ReallocAsyncCtx6 + 32 | 0; //@line 31854
     HEAP32[$766 >> 2] = $16; //@line 31855
     $767 = $ReallocAsyncCtx6 + 36 | 0; //@line 31856
     HEAP32[$767 >> 2] = $18; //@line 31857
     $768 = $ReallocAsyncCtx6 + 40 | 0; //@line 31858
     HEAP32[$768 >> 2] = $20; //@line 31859
     $769 = $ReallocAsyncCtx6 + 44 | 0; //@line 31860
     HEAP32[$769 >> 2] = $22; //@line 31861
     $770 = $ReallocAsyncCtx6 + 48 | 0; //@line 31862
     HEAP32[$770 >> 2] = $24; //@line 31863
     $771 = $ReallocAsyncCtx6 + 52 | 0; //@line 31864
     HEAP32[$771 >> 2] = $26; //@line 31865
     $772 = $ReallocAsyncCtx6 + 56 | 0; //@line 31866
     HEAP32[$772 >> 2] = $28; //@line 31867
     $773 = $ReallocAsyncCtx6 + 60 | 0; //@line 31868
     HEAP32[$773 >> 2] = $30; //@line 31869
     $774 = $ReallocAsyncCtx6 + 64 | 0; //@line 31870
     HEAP32[$774 >> 2] = $32; //@line 31871
     $775 = $ReallocAsyncCtx6 + 68 | 0; //@line 31872
     HEAP32[$775 >> 2] = $34; //@line 31873
     $776 = $ReallocAsyncCtx6 + 72 | 0; //@line 31874
     HEAP32[$776 >> 2] = $36; //@line 31875
     $777 = $ReallocAsyncCtx6 + 76 | 0; //@line 31876
     HEAP32[$777 >> 2] = $38; //@line 31877
     $778 = $ReallocAsyncCtx6 + 80 | 0; //@line 31878
     HEAP32[$778 >> 2] = $40; //@line 31879
     $779 = $ReallocAsyncCtx6 + 84 | 0; //@line 31880
     HEAP32[$779 >> 2] = $42; //@line 31881
     $780 = $ReallocAsyncCtx6 + 88 | 0; //@line 31882
     HEAP32[$780 >> 2] = $44; //@line 31883
     $781 = $ReallocAsyncCtx6 + 92 | 0; //@line 31884
     HEAP32[$781 >> 2] = $46; //@line 31885
     $782 = $ReallocAsyncCtx6 + 96 | 0; //@line 31886
     HEAP32[$782 >> 2] = $48; //@line 31887
     $783 = $ReallocAsyncCtx6 + 100 | 0; //@line 31888
     HEAP32[$783 >> 2] = $50; //@line 31889
     $784 = $ReallocAsyncCtx6 + 104 | 0; //@line 31890
     HEAP32[$784 >> 2] = $52; //@line 31891
     $785 = $ReallocAsyncCtx6 + 108 | 0; //@line 31892
     HEAP32[$785 >> 2] = $54; //@line 31893
     $786 = $ReallocAsyncCtx6 + 112 | 0; //@line 31894
     HEAP32[$786 >> 2] = $56; //@line 31895
     $787 = $ReallocAsyncCtx6 + 116 | 0; //@line 31896
     HEAP32[$787 >> 2] = $58; //@line 31897
     $788 = $ReallocAsyncCtx6 + 120 | 0; //@line 31898
     HEAP32[$788 >> 2] = $60; //@line 31899
     $789 = $ReallocAsyncCtx6 + 124 | 0; //@line 31900
     HEAP32[$789 >> 2] = $157; //@line 31901
     $790 = $ReallocAsyncCtx6 + 128 | 0; //@line 31902
     HEAP32[$790 >> 2] = $64; //@line 31903
     $791 = $ReallocAsyncCtx6 + 132 | 0; //@line 31904
     HEAP32[$791 >> 2] = $66; //@line 31905
     $792 = $ReallocAsyncCtx6 + 136 | 0; //@line 31906
     HEAP32[$792 >> 2] = $68; //@line 31907
     $793 = $ReallocAsyncCtx6 + 140 | 0; //@line 31908
     HEAP32[$793 >> 2] = $70; //@line 31909
     $794 = $ReallocAsyncCtx6 + 144 | 0; //@line 31910
     HEAP32[$794 >> 2] = $72; //@line 31911
     $795 = $ReallocAsyncCtx6 + 148 | 0; //@line 31912
     HEAP32[$795 >> 2] = $74; //@line 31913
     $796 = $ReallocAsyncCtx6 + 152 | 0; //@line 31914
     HEAP32[$796 >> 2] = $76; //@line 31915
     $797 = $ReallocAsyncCtx6 + 156 | 0; //@line 31916
     HEAP32[$797 >> 2] = $78; //@line 31917
     $798 = $ReallocAsyncCtx6 + 160 | 0; //@line 31918
     HEAP32[$798 >> 2] = $80; //@line 31919
     $799 = $ReallocAsyncCtx6 + 164 | 0; //@line 31920
     HEAP32[$799 >> 2] = $82; //@line 31921
     $800 = $ReallocAsyncCtx6 + 168 | 0; //@line 31922
     HEAP32[$800 >> 2] = $84; //@line 31923
     $801 = $ReallocAsyncCtx6 + 172 | 0; //@line 31924
     HEAP32[$801 >> 2] = $86; //@line 31925
     $802 = $ReallocAsyncCtx6 + 176 | 0; //@line 31926
     HEAP32[$802 >> 2] = $88; //@line 31927
     $803 = $ReallocAsyncCtx6 + 180 | 0; //@line 31928
     HEAP32[$803 >> 2] = $90; //@line 31929
     $804 = $ReallocAsyncCtx6 + 184 | 0; //@line 31930
     HEAP32[$804 >> 2] = $92; //@line 31931
     $805 = $ReallocAsyncCtx6 + 188 | 0; //@line 31932
     HEAP32[$805 >> 2] = $94; //@line 31933
     $806 = $ReallocAsyncCtx6 + 192 | 0; //@line 31934
     HEAP32[$806 >> 2] = $96; //@line 31935
     $807 = $ReallocAsyncCtx6 + 196 | 0; //@line 31936
     HEAP32[$807 >> 2] = $98; //@line 31937
     $808 = $ReallocAsyncCtx6 + 200 | 0; //@line 31938
     HEAP32[$808 >> 2] = $100; //@line 31939
     $809 = $ReallocAsyncCtx6 + 204 | 0; //@line 31940
     HEAP32[$809 >> 2] = $102; //@line 31941
     $810 = $ReallocAsyncCtx6 + 208 | 0; //@line 31942
     HEAP32[$810 >> 2] = $104; //@line 31943
     $811 = $ReallocAsyncCtx6 + 212 | 0; //@line 31944
     HEAP32[$811 >> 2] = $106; //@line 31945
     $812 = $ReallocAsyncCtx6 + 216 | 0; //@line 31946
     HEAP32[$812 >> 2] = $108; //@line 31947
     $813 = $ReallocAsyncCtx6 + 220 | 0; //@line 31948
     HEAP32[$813 >> 2] = $110; //@line 31949
     $814 = $ReallocAsyncCtx6 + 224 | 0; //@line 31950
     HEAP32[$814 >> 2] = $112; //@line 31951
     $815 = $ReallocAsyncCtx6 + 228 | 0; //@line 31952
     HEAP32[$815 >> 2] = $114; //@line 31953
     $816 = $ReallocAsyncCtx6 + 232 | 0; //@line 31954
     HEAP32[$816 >> 2] = $116; //@line 31955
     $817 = $ReallocAsyncCtx6 + 236 | 0; //@line 31956
     HEAP32[$817 >> 2] = $118; //@line 31957
     $818 = $ReallocAsyncCtx6 + 240 | 0; //@line 31958
     HEAP32[$818 >> 2] = $120; //@line 31959
     $819 = $ReallocAsyncCtx6 + 244 | 0; //@line 31960
     HEAP32[$819 >> 2] = $122; //@line 31961
     $820 = $ReallocAsyncCtx6 + 248 | 0; //@line 31962
     HEAP32[$820 >> 2] = $124; //@line 31963
     $821 = $ReallocAsyncCtx6 + 252 | 0; //@line 31964
     HEAP32[$821 >> 2] = $126; //@line 31965
     $822 = $ReallocAsyncCtx6 + 256 | 0; //@line 31966
     HEAP32[$822 >> 2] = $128; //@line 31967
     $823 = $ReallocAsyncCtx6 + 260 | 0; //@line 31968
     HEAP32[$823 >> 2] = $130; //@line 31969
     $824 = $ReallocAsyncCtx6 + 264 | 0; //@line 31970
     HEAP32[$824 >> 2] = $132; //@line 31971
     sp = STACKTOP; //@line 31972
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3803, 5152, $46); //@line 31977
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3803, 5213, $20); //@line 31982
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3803, 5274, $72); //@line 31987
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3803, 5335, $60); //@line 31992
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3803, 5395, $120); //@line 31997
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3803, 5455, $74); //@line 32002
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $92 | 0) >= ($80 | 0)) {
      $936 = ___async_retval; //@line 32011
      HEAP32[$936 >> 2] = $38; //@line 32012
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 32018
      HEAP32[$36 >> 2] = $926; //@line 32019
      $927 = $926; //@line 32020
      $929 = $92 - $927 + $80 | 0; //@line 32022
      HEAP16[$82 + 24 >> 1] = $929; //@line 32025
      if ($929 & 65535 | 0) {
       HEAP32[$82 + 36 >> 2] = $927; //@line 32030
       $936 = ___async_retval; //@line 32031
       HEAP32[$936 >> 2] = $38; //@line 32032
       return;
      }
     } else {
      _mbed_tracef(2, 3803, 5502, $50); //@line 32036
     }
     HEAP32[$82 + 4 >> 2] = 1; //@line 32039
     $936 = ___async_retval; //@line 32040
     HEAP32[$936 >> 2] = $38; //@line 32041
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3803, 5088, $132); //@line 32047
  }
 } while (0);
 HEAP32[$82 + 4 >> 2] = 1; //@line 32051
 $936 = ___async_retval; //@line 32052
 HEAP32[$936 >> 2] = $38; //@line 32053
 return;
}
function _sn_coap_parser__async_cb_30($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $587 = 0, $590 = 0, $591 = 0, $596 = 0, $599 = 0, $6 = 0, $60 = 0, $601 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $596$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 3270
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3272
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3274
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3276
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3278
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3280
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3282
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3284
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3286
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3288
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3290
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3292
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3294
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3296
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 3298
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 3300
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 3302
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 3304
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 3306
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 3308
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 3310
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 3312
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 3314
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 3316
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 3318
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 3320
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 3322
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 3324
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 3326
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 3328
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 3330
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 3334
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 3336
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 3338
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 3340
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 3342
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 3344
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 3346
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 3348
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 3350
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 3352
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 3354
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 3356
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 3358
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 3360
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 3362
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 3364
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 3366
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 3368
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 3370
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 3372
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 3374
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 3376
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 3378
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 3380
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 3382
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 3384
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 3386
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 3388
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 3390
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 3392
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 3394
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 3396
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 3398
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 3400
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 3402
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 124 >> 2] | 0; //@line 3408
   L3 : while (1) {
    $917 = HEAP32[$68 >> 2] | 0; //@line 3410
    $918 = $917 - $92 | 0; //@line 3411
    $137 = $917; //@line 3414
    if (($918 | 0) > ($80 | 0)) {
     break L2;
    }
    if (!(($80 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 3421
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 3424
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 3427
     break;
    }
    $140 = $trunc277$i & 15; //@line 3431
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 3432
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 3437
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 3445
      $$sink214$i = 13; //@line 3445
      $$sink3$i = 1; //@line 3445
      label = 8; //@line 3446
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 3458
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 3458
      $$sink3$i = 2; //@line 3458
      label = 8; //@line 3459
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 3463
      $159 = $137; //@line 3463
      $937 = $917; //@line 3463
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 3467
     $154 = $137 + $$sink3$i | 0; //@line 3469
     HEAP32[$36 >> 2] = $154; //@line 3470
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 3472
     $159 = $154; //@line 3472
     $937 = $154; //@line 3472
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 3475
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 3479
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 3487
      $$sink216$i = 13; //@line 3487
      $$sink8$i = 1; //@line 3487
      label = 13; //@line 3488
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 3500
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 3500
      $$sink8$i = 2; //@line 3500
      label = 13; //@line 3501
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 3505
      $174 = $937; //@line 3505
      $189 = $159; //@line 3505
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 3509
     $171 = $159 + $$sink8$i | 0; //@line 3511
     HEAP32[$36 >> 2] = $171; //@line 3512
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 3514
     $174 = $171; //@line 3514
     $189 = $171; //@line 3514
    }
    $$1202$i = $$1202$in$i & 65535; //@line 3516
    $175 = $100 - $174 & 65535; //@line 3518
    $trunc$i = $157 & 65535; //@line 3519
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 62; //@line 3523
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$126 >> 2] | 0)) {
        label = 16; //@line 3531
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 3536
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 3541
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 3546
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 3551
         break L3;
         break;
        }
       case 20:
        {
         label = 59; //@line 3556
         break L3;
         break;
        }
       case 11:
        {
         label = 62; //@line 3561
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 3566
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 3577
          break L3;
         }
         $268 = $189 + 1 | 0; //@line 3580
         HEAP32[$36 >> 2] = $268; //@line 3581
         $269 = $$1202$in$i & 255; //@line 3582
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 3585
         } else {
          $$045$i221$i = $269; //@line 3587
          $$06$i220$i = 0; //@line 3587
          $274 = $268; //@line 3587
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 3589
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 3591
           HEAP32[$36 >> 2] = $274; //@line 3592
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 3595
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 3598
            break;
           } else {
            $$06$i220$i = $277; //@line 3601
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 3607
         $$reg2mem$0 = $157; //@line 3608
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 55; //@line 3615
          break L3;
         }
         $587 = (HEAP32[$126 >> 2] | 0) + 28 | 0; //@line 3619
         if ((HEAP32[$587 >> 2] | 0) != -1) {
          label = 55; //@line 3623
          break L3;
         }
         $590 = $189 + 1 | 0; //@line 3626
         HEAP32[$36 >> 2] = $590; //@line 3627
         $591 = $$1202$in$i & 255; //@line 3628
         if (!($591 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 3631
         } else {
          $$045$i263$i = $591; //@line 3633
          $$06$i262$i = 0; //@line 3633
          $596 = $590; //@line 3633
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 3635
           $596$looptemp = $596;
           $596 = $596 + 1 | 0; //@line 3637
           HEAP32[$36 >> 2] = $596; //@line 3638
           $599 = $$06$i262$i << 8 | HEAPU8[$596$looptemp >> 0]; //@line 3641
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $599; //@line 3644
            break;
           } else {
            $$06$i262$i = $599; //@line 3647
           }
          }
         }
         HEAP32[$587 >> 2] = $$0$lcssa$i265$i; //@line 3651
         $$reg2mem$0 = $157; //@line 3652
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 3659
          break L3;
         }
         $742 = (HEAP32[$126 >> 2] | 0) + 32 | 0; //@line 3663
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 3667
          break L3;
         }
         $745 = $189 + 1 | 0; //@line 3670
         HEAP32[$36 >> 2] = $745; //@line 3671
         $746 = $$1202$in$i & 255; //@line 3672
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 3675
         } else {
          $$045$i270$i = $746; //@line 3677
          $$06$i269$i = 0; //@line 3677
          $751 = $745; //@line 3677
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 3679
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 3681
           HEAP32[$36 >> 2] = $751; //@line 3682
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 3685
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 3688
            break;
           } else {
            $$06$i269$i = $754; //@line 3691
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 3695
         $$reg2mem$0 = $157; //@line 3696
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 3703
          break L3;
         }
         $829 = (HEAP32[$126 >> 2] | 0) + 40 | 0; //@line 3707
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 3711
          break L3;
         }
         $832 = $189 + 1 | 0; //@line 3714
         HEAP32[$36 >> 2] = $832; //@line 3715
         $833 = $$1202$in$i & 255; //@line 3716
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 3719
         } else {
          $$045$i256$i = $833; //@line 3721
          $$06$i255$i = 0; //@line 3721
          $838 = $832; //@line 3721
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 3723
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 3725
           HEAP32[$36 >> 2] = $838; //@line 3726
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 3729
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 3732
            break;
           } else {
            $$06$i255$i = $841; //@line 3735
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 3739
         $$reg2mem$0 = $157; //@line 3740
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 3747
          break L3;
         }
         $845 = (HEAP32[$126 >> 2] | 0) + 36 | 0; //@line 3751
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 3755
          break L3;
         }
         $848 = $189 + 1 | 0; //@line 3758
         HEAP32[$36 >> 2] = $848; //@line 3759
         $849 = $$1202$in$i & 255; //@line 3760
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 3763
         } else {
          $$045$i249$i = $849; //@line 3765
          $$06$i248$i = 0; //@line 3765
          $854 = $848; //@line 3765
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 3767
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 3769
           HEAP32[$36 >> 2] = $854; //@line 3770
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 3773
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 3776
            break;
           } else {
            $$06$i248$i = $857; //@line 3779
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 3783
         $$reg2mem$0 = $157; //@line 3784
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 3791
          break L3;
         }
         $861 = (HEAP32[$126 >> 2] | 0) + 12 | 0; //@line 3795
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 3799
          break L3;
         }
         $864 = $189 + 1 | 0; //@line 3802
         HEAP32[$36 >> 2] = $864; //@line 3803
         $865 = $$1202$in$i & 255; //@line 3804
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 3807
         } else {
          $$045$i242$i = $865; //@line 3809
          $$06$i241$i = 0; //@line 3809
          $870 = $864; //@line 3809
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 3811
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 3813
           HEAP32[$36 >> 2] = $870; //@line 3814
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 3817
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 3820
            break;
           } else {
            $$06$i241$i = $873; //@line 3823
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 3827
         $$reg2mem$0 = $157; //@line 3828
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 3835
          break L3;
         }
         $877 = (HEAP32[$126 >> 2] | 0) + 1 | 0; //@line 3839
         $878 = HEAP8[$877 >> 0] | 0; //@line 3840
         if ($878 & 1) {
          label = 94; //@line 3844
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 3848
         $883 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 3850
         HEAP32[$36 >> 2] = $883; //@line 3851
         $884 = $$1202$in$i & 255; //@line 3852
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 3855
         } else {
          $$045$i235$i = $884; //@line 3857
          $$06$i234$i = 0; //@line 3857
          $889 = $883; //@line 3857
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 3859
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 3861
           HEAP32[$36 >> 2] = $889; //@line 3862
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 3865
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 3868
            break;
           } else {
            $$06$i234$i = $892; //@line 3871
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 3877
         $$reg2mem$0 = $157; //@line 3878
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 3885
          break L3;
         }
         $898 = (HEAP32[$126 >> 2] | 0) + 1 | 0; //@line 3889
         $899 = HEAP8[$898 >> 0] | 0; //@line 3890
         if ($899 & 2) {
          label = 100; //@line 3894
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 3898
         $904 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 3900
         HEAP32[$36 >> 2] = $904; //@line 3901
         $905 = $$1202$in$i & 255; //@line 3902
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 3905
         } else {
          $$045$i228$i = $905; //@line 3907
          $$06$i227$i = 0; //@line 3907
          $910 = $904; //@line 3907
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 3909
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 3911
           HEAP32[$36 >> 2] = $910; //@line 3912
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 3915
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 3918
            break;
           } else {
            $$06$i227$i = $913; //@line 3921
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 3927
         $$reg2mem$0 = $157; //@line 3928
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 3933
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 3943
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 3950
     break;
    }
    if ((HEAP32[$10 >> 2] | 0) != -1) {
     label = 22; //@line 3956
     break;
    }
    $256 = $189 + 1 | 0; //@line 3959
    HEAP32[$36 >> 2] = $256; //@line 3960
    $257 = $$1202$in$i & 255; //@line 3961
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 3964
    } else {
     $$045$i$i = $257; //@line 3966
     $$06$i$i = 0; //@line 3966
     $262 = $256; //@line 3966
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 3968
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 3970
      HEAP32[$36 >> 2] = $262; //@line 3971
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 3974
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 3977
       break;
      } else {
       $$06$i$i = $265; //@line 3980
      }
     }
    }
    HEAP32[$10 >> 2] = $$0$lcssa$i$i; //@line 3984
    $$reg2mem$0 = $157; //@line 3985
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3803, 4066, $76); //@line 3989
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3803, 4124, $28); //@line 3994
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$128 >> 2] | 0; //@line 3999
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 4000
     $179 = FUNCTION_TABLE_ii[$178 & 31](68) | 0; //@line 4001
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 4004
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 4005
      HEAP32[$180 >> 2] = $2; //@line 4006
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 4007
      HEAP32[$181 >> 2] = $4; //@line 4008
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 4009
      HEAP32[$182 >> 2] = $6; //@line 4010
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 4011
      HEAP32[$183 >> 2] = $8; //@line 4012
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 4013
      HEAP32[$184 >> 2] = $10; //@line 4014
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 4015
      HEAP32[$185 >> 2] = $12; //@line 4016
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 4017
      HEAP32[$186 >> 2] = $14; //@line 4018
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 4019
      HEAP32[$187 >> 2] = $16; //@line 4020
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 4021
      HEAP32[$188 >> 2] = $189; //@line 4022
      $190 = $ReallocAsyncCtx3 + 40 | 0; //@line 4023
      HEAP32[$190 >> 2] = $18; //@line 4024
      $191 = $ReallocAsyncCtx3 + 44 | 0; //@line 4025
      HEAP32[$191 >> 2] = $20; //@line 4026
      $192 = $ReallocAsyncCtx3 + 48 | 0; //@line 4027
      HEAP32[$192 >> 2] = $22; //@line 4028
      $193 = $ReallocAsyncCtx3 + 52 | 0; //@line 4029
      HEAP32[$193 >> 2] = $24; //@line 4030
      $194 = $ReallocAsyncCtx3 + 56 | 0; //@line 4031
      HEAP32[$194 >> 2] = $26; //@line 4032
      $195 = $ReallocAsyncCtx3 + 60 | 0; //@line 4033
      HEAP32[$195 >> 2] = $28; //@line 4034
      $196 = $ReallocAsyncCtx3 + 64 | 0; //@line 4035
      HEAP32[$196 >> 2] = $30; //@line 4036
      $197 = $ReallocAsyncCtx3 + 68 | 0; //@line 4037
      HEAP32[$197 >> 2] = $32; //@line 4038
      $198 = $ReallocAsyncCtx3 + 72 | 0; //@line 4039
      HEAP32[$198 >> 2] = $34; //@line 4040
      $199 = $ReallocAsyncCtx3 + 76 | 0; //@line 4041
      HEAP32[$199 >> 2] = $36; //@line 4042
      $200 = $ReallocAsyncCtx3 + 80 | 0; //@line 4043
      HEAP32[$200 >> 2] = $38; //@line 4044
      $201 = $ReallocAsyncCtx3 + 84 | 0; //@line 4045
      HEAP32[$201 >> 2] = $$1202$in$i; //@line 4046
      $202 = $ReallocAsyncCtx3 + 88 | 0; //@line 4047
      HEAP32[$202 >> 2] = $42; //@line 4048
      $203 = $ReallocAsyncCtx3 + 92 | 0; //@line 4049
      HEAP32[$203 >> 2] = $44; //@line 4050
      $204 = $ReallocAsyncCtx3 + 96 | 0; //@line 4051
      HEAP16[$204 >> 1] = $$1202$i; //@line 4052
      $205 = $ReallocAsyncCtx3 + 100 | 0; //@line 4053
      HEAP32[$205 >> 2] = $46; //@line 4054
      $206 = $ReallocAsyncCtx3 + 104 | 0; //@line 4055
      HEAP32[$206 >> 2] = $48; //@line 4056
      $207 = $ReallocAsyncCtx3 + 108 | 0; //@line 4057
      HEAP32[$207 >> 2] = $50; //@line 4058
      $208 = $ReallocAsyncCtx3 + 112 | 0; //@line 4059
      HEAP32[$208 >> 2] = $52; //@line 4060
      $209 = $ReallocAsyncCtx3 + 116 | 0; //@line 4061
      HEAP32[$209 >> 2] = $54; //@line 4062
      $210 = $ReallocAsyncCtx3 + 120 | 0; //@line 4063
      HEAP32[$210 >> 2] = $40; //@line 4064
      $211 = $ReallocAsyncCtx3 + 124 | 0; //@line 4065
      HEAP32[$211 >> 2] = $56; //@line 4066
      $212 = $ReallocAsyncCtx3 + 128 | 0; //@line 4067
      HEAP32[$212 >> 2] = $58; //@line 4068
      $213 = $ReallocAsyncCtx3 + 132 | 0; //@line 4069
      HEAP32[$213 >> 2] = $60; //@line 4070
      $214 = $ReallocAsyncCtx3 + 136 | 0; //@line 4071
      HEAP32[$214 >> 2] = $157; //@line 4072
      $215 = $ReallocAsyncCtx3 + 140 | 0; //@line 4073
      HEAP32[$215 >> 2] = $64; //@line 4074
      $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 4075
      HEAP32[$216 >> 2] = $66; //@line 4076
      $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 4077
      HEAP32[$217 >> 2] = $68; //@line 4078
      $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 4079
      HEAP32[$218 >> 2] = $70; //@line 4080
      $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 4081
      HEAP16[$219 >> 1] = $175; //@line 4082
      $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 4083
      HEAP32[$220 >> 2] = $72; //@line 4084
      $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 4085
      HEAP32[$221 >> 2] = $74; //@line 4086
      $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 4087
      HEAP32[$222 >> 2] = $76; //@line 4088
      $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 4089
      HEAP32[$223 >> 2] = $78; //@line 4090
      $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 4091
      HEAP32[$224 >> 2] = $80; //@line 4092
      $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 4093
      HEAP32[$225 >> 2] = $82; //@line 4094
      $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 4095
      HEAP32[$226 >> 2] = $84; //@line 4096
      $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 4097
      HEAP32[$227 >> 2] = $86; //@line 4098
      $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 4099
      HEAP32[$228 >> 2] = $88; //@line 4100
      $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 4101
      HEAP32[$229 >> 2] = $90; //@line 4102
      $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 4103
      HEAP32[$230 >> 2] = $92; //@line 4104
      $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 4105
      HEAP32[$231 >> 2] = $94; //@line 4106
      $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 4107
      HEAP32[$232 >> 2] = $96; //@line 4108
      $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 4109
      HEAP32[$233 >> 2] = $98; //@line 4110
      $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 4111
      HEAP32[$234 >> 2] = $100; //@line 4112
      $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 4113
      HEAP32[$235 >> 2] = $102; //@line 4114
      $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 4115
      HEAP32[$236 >> 2] = $104; //@line 4116
      $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 4117
      HEAP32[$237 >> 2] = $106; //@line 4118
      $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 4119
      HEAP32[$238 >> 2] = $108; //@line 4120
      $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 4121
      HEAP32[$239 >> 2] = $110; //@line 4122
      $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 4123
      HEAP32[$240 >> 2] = $112; //@line 4124
      $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 4125
      HEAP32[$241 >> 2] = $114; //@line 4126
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 4127
      HEAP32[$242 >> 2] = $116; //@line 4128
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 4129
      HEAP32[$243 >> 2] = $118; //@line 4130
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 4131
      HEAP32[$244 >> 2] = $120; //@line 4132
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 4133
      HEAP32[$245 >> 2] = $122; //@line 4134
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 4135
      HEAP32[$246 >> 2] = $124; //@line 4136
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 4137
      HEAP32[$247 >> 2] = $126; //@line 4138
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 4139
      HEAP16[$248 >> 1] = $trunc$i; //@line 4140
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 4141
      HEAP32[$249 >> 2] = $128; //@line 4142
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 4143
      HEAP32[$250 >> 2] = $130; //@line 4144
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 4145
      HEAP32[$251 >> 2] = $132; //@line 4146
      sp = STACKTOP; //@line 4147
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 4151
     ___async_unwind = 0; //@line 4152
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 4153
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 4154
     HEAP32[$180 >> 2] = $2; //@line 4155
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 4156
     HEAP32[$181 >> 2] = $4; //@line 4157
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 4158
     HEAP32[$182 >> 2] = $6; //@line 4159
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 4160
     HEAP32[$183 >> 2] = $8; //@line 4161
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 4162
     HEAP32[$184 >> 2] = $10; //@line 4163
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 4164
     HEAP32[$185 >> 2] = $12; //@line 4165
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 4166
     HEAP32[$186 >> 2] = $14; //@line 4167
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 4168
     HEAP32[$187 >> 2] = $16; //@line 4169
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 4170
     HEAP32[$188 >> 2] = $189; //@line 4171
     $190 = $ReallocAsyncCtx3 + 40 | 0; //@line 4172
     HEAP32[$190 >> 2] = $18; //@line 4173
     $191 = $ReallocAsyncCtx3 + 44 | 0; //@line 4174
     HEAP32[$191 >> 2] = $20; //@line 4175
     $192 = $ReallocAsyncCtx3 + 48 | 0; //@line 4176
     HEAP32[$192 >> 2] = $22; //@line 4177
     $193 = $ReallocAsyncCtx3 + 52 | 0; //@line 4178
     HEAP32[$193 >> 2] = $24; //@line 4179
     $194 = $ReallocAsyncCtx3 + 56 | 0; //@line 4180
     HEAP32[$194 >> 2] = $26; //@line 4181
     $195 = $ReallocAsyncCtx3 + 60 | 0; //@line 4182
     HEAP32[$195 >> 2] = $28; //@line 4183
     $196 = $ReallocAsyncCtx3 + 64 | 0; //@line 4184
     HEAP32[$196 >> 2] = $30; //@line 4185
     $197 = $ReallocAsyncCtx3 + 68 | 0; //@line 4186
     HEAP32[$197 >> 2] = $32; //@line 4187
     $198 = $ReallocAsyncCtx3 + 72 | 0; //@line 4188
     HEAP32[$198 >> 2] = $34; //@line 4189
     $199 = $ReallocAsyncCtx3 + 76 | 0; //@line 4190
     HEAP32[$199 >> 2] = $36; //@line 4191
     $200 = $ReallocAsyncCtx3 + 80 | 0; //@line 4192
     HEAP32[$200 >> 2] = $38; //@line 4193
     $201 = $ReallocAsyncCtx3 + 84 | 0; //@line 4194
     HEAP32[$201 >> 2] = $$1202$in$i; //@line 4195
     $202 = $ReallocAsyncCtx3 + 88 | 0; //@line 4196
     HEAP32[$202 >> 2] = $42; //@line 4197
     $203 = $ReallocAsyncCtx3 + 92 | 0; //@line 4198
     HEAP32[$203 >> 2] = $44; //@line 4199
     $204 = $ReallocAsyncCtx3 + 96 | 0; //@line 4200
     HEAP16[$204 >> 1] = $$1202$i; //@line 4201
     $205 = $ReallocAsyncCtx3 + 100 | 0; //@line 4202
     HEAP32[$205 >> 2] = $46; //@line 4203
     $206 = $ReallocAsyncCtx3 + 104 | 0; //@line 4204
     HEAP32[$206 >> 2] = $48; //@line 4205
     $207 = $ReallocAsyncCtx3 + 108 | 0; //@line 4206
     HEAP32[$207 >> 2] = $50; //@line 4207
     $208 = $ReallocAsyncCtx3 + 112 | 0; //@line 4208
     HEAP32[$208 >> 2] = $52; //@line 4209
     $209 = $ReallocAsyncCtx3 + 116 | 0; //@line 4210
     HEAP32[$209 >> 2] = $54; //@line 4211
     $210 = $ReallocAsyncCtx3 + 120 | 0; //@line 4212
     HEAP32[$210 >> 2] = $40; //@line 4213
     $211 = $ReallocAsyncCtx3 + 124 | 0; //@line 4214
     HEAP32[$211 >> 2] = $56; //@line 4215
     $212 = $ReallocAsyncCtx3 + 128 | 0; //@line 4216
     HEAP32[$212 >> 2] = $58; //@line 4217
     $213 = $ReallocAsyncCtx3 + 132 | 0; //@line 4218
     HEAP32[$213 >> 2] = $60; //@line 4219
     $214 = $ReallocAsyncCtx3 + 136 | 0; //@line 4220
     HEAP32[$214 >> 2] = $157; //@line 4221
     $215 = $ReallocAsyncCtx3 + 140 | 0; //@line 4222
     HEAP32[$215 >> 2] = $64; //@line 4223
     $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 4224
     HEAP32[$216 >> 2] = $66; //@line 4225
     $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 4226
     HEAP32[$217 >> 2] = $68; //@line 4227
     $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 4228
     HEAP32[$218 >> 2] = $70; //@line 4229
     $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 4230
     HEAP16[$219 >> 1] = $175; //@line 4231
     $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 4232
     HEAP32[$220 >> 2] = $72; //@line 4233
     $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 4234
     HEAP32[$221 >> 2] = $74; //@line 4235
     $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 4236
     HEAP32[$222 >> 2] = $76; //@line 4237
     $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 4238
     HEAP32[$223 >> 2] = $78; //@line 4239
     $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 4240
     HEAP32[$224 >> 2] = $80; //@line 4241
     $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 4242
     HEAP32[$225 >> 2] = $82; //@line 4243
     $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 4244
     HEAP32[$226 >> 2] = $84; //@line 4245
     $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 4246
     HEAP32[$227 >> 2] = $86; //@line 4247
     $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 4248
     HEAP32[$228 >> 2] = $88; //@line 4249
     $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 4250
     HEAP32[$229 >> 2] = $90; //@line 4251
     $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 4252
     HEAP32[$230 >> 2] = $92; //@line 4253
     $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 4254
     HEAP32[$231 >> 2] = $94; //@line 4255
     $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 4256
     HEAP32[$232 >> 2] = $96; //@line 4257
     $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 4258
     HEAP32[$233 >> 2] = $98; //@line 4259
     $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 4260
     HEAP32[$234 >> 2] = $100; //@line 4261
     $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 4262
     HEAP32[$235 >> 2] = $102; //@line 4263
     $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 4264
     HEAP32[$236 >> 2] = $104; //@line 4265
     $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 4266
     HEAP32[$237 >> 2] = $106; //@line 4267
     $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 4268
     HEAP32[$238 >> 2] = $108; //@line 4269
     $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 4270
     HEAP32[$239 >> 2] = $110; //@line 4271
     $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 4272
     HEAP32[$240 >> 2] = $112; //@line 4273
     $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 4274
     HEAP32[$241 >> 2] = $114; //@line 4275
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 4276
     HEAP32[$242 >> 2] = $116; //@line 4277
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 4278
     HEAP32[$243 >> 2] = $118; //@line 4279
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 4280
     HEAP32[$244 >> 2] = $120; //@line 4281
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 4282
     HEAP32[$245 >> 2] = $122; //@line 4283
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 4284
     HEAP32[$246 >> 2] = $124; //@line 4285
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 4286
     HEAP32[$247 >> 2] = $126; //@line 4287
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 4288
     HEAP16[$248 >> 1] = $trunc$i; //@line 4289
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 4290
     HEAP32[$249 >> 2] = $128; //@line 4291
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 4292
     HEAP32[$250 >> 2] = $130; //@line 4293
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 4294
     HEAP32[$251 >> 2] = $132; //@line 4295
     sp = STACKTOP; //@line 4296
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3803, 4238, $12); //@line 4301
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3803, 4307, $26); //@line 4306
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 4311
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$126 >> 2] | 0; //@line 4315
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 4321
       $289 = $189 + 1 | 0; //@line 4322
       HEAP32[$36 >> 2] = $289; //@line 4323
       $290 = HEAP32[$128 >> 2] | 0; //@line 4324
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 4325
       $291 = FUNCTION_TABLE_ii[$290 & 31]($$1202$i) | 0; //@line 4326
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 4329
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 4330
        HEAP32[$292 >> 2] = $2; //@line 4331
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 4332
        HEAP32[$293 >> 2] = $4; //@line 4333
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 4334
        HEAP32[$294 >> 2] = $6; //@line 4335
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 4336
        HEAP32[$295 >> 2] = $8; //@line 4337
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 4338
        HEAP32[$296 >> 2] = $10; //@line 4339
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 4340
        HEAP32[$297 >> 2] = $12; //@line 4341
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 4342
        HEAP32[$298 >> 2] = $14; //@line 4343
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 4344
        HEAP32[$299 >> 2] = $16; //@line 4345
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 4346
        HEAP32[$300 >> 2] = $18; //@line 4347
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 4348
        HEAP32[$301 >> 2] = $20; //@line 4349
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 4350
        HEAP32[$302 >> 2] = $22; //@line 4351
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 4352
        HEAP32[$303 >> 2] = $24; //@line 4353
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 4354
        HEAP32[$304 >> 2] = $26; //@line 4355
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 4356
        HEAP32[$305 >> 2] = $28; //@line 4357
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 4358
        HEAP32[$306 >> 2] = $30; //@line 4359
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 4360
        HEAP32[$307 >> 2] = $32; //@line 4361
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 4362
        HEAP32[$308 >> 2] = $281; //@line 4363
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 4364
        HEAP32[$309 >> 2] = $36; //@line 4365
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 4366
        HEAP32[$310 >> 2] = $34; //@line 4367
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 4368
        HEAP32[$311 >> 2] = $38; //@line 4369
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 4370
        HEAP32[$312 >> 2] = $40; //@line 4371
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 4372
        HEAP32[$313 >> 2] = $42; //@line 4373
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 4374
        HEAP32[$314 >> 2] = $44; //@line 4375
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 4376
        HEAP32[$315 >> 2] = $46; //@line 4377
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 4378
        HEAP32[$316 >> 2] = $48; //@line 4379
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 4380
        HEAP32[$317 >> 2] = $50; //@line 4381
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 4382
        HEAP32[$318 >> 2] = $52; //@line 4383
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 4384
        HEAP32[$319 >> 2] = $54; //@line 4385
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 4386
        HEAP32[$320 >> 2] = $56; //@line 4387
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 4388
        HEAP32[$321 >> 2] = $58; //@line 4389
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 4390
        HEAP32[$322 >> 2] = $60; //@line 4391
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 4392
        HEAP32[$323 >> 2] = $157; //@line 4393
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 4394
        HEAP32[$324 >> 2] = $64; //@line 4395
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 4396
        HEAP32[$325 >> 2] = $66; //@line 4397
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 4398
        HEAP32[$326 >> 2] = $68; //@line 4399
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 4400
        HEAP32[$327 >> 2] = $70; //@line 4401
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 4402
        HEAP32[$328 >> 2] = $72; //@line 4403
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 4404
        HEAP32[$329 >> 2] = $74; //@line 4405
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 4406
        HEAP32[$330 >> 2] = $76; //@line 4407
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 4408
        HEAP32[$331 >> 2] = $78; //@line 4409
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 4410
        HEAP32[$332 >> 2] = $80; //@line 4411
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 4412
        HEAP32[$333 >> 2] = $82; //@line 4413
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 4414
        HEAP32[$334 >> 2] = $84; //@line 4415
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 4416
        HEAP32[$335 >> 2] = $86; //@line 4417
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 4418
        HEAP32[$336 >> 2] = $88; //@line 4419
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 4420
        HEAP32[$337 >> 2] = $90; //@line 4421
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 4422
        HEAP32[$338 >> 2] = $92; //@line 4423
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 4424
        HEAP32[$339 >> 2] = $94; //@line 4425
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 4426
        HEAP32[$340 >> 2] = $96; //@line 4427
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 4428
        HEAP32[$341 >> 2] = $98; //@line 4429
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 4430
        HEAP32[$342 >> 2] = $100; //@line 4431
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 4432
        HEAP32[$343 >> 2] = $102; //@line 4433
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 4434
        HEAP32[$344 >> 2] = $104; //@line 4435
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 4436
        HEAP32[$345 >> 2] = $289; //@line 4437
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 4438
        HEAP32[$346 >> 2] = $106; //@line 4439
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 4440
        HEAP32[$347 >> 2] = $108; //@line 4441
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 4442
        HEAP32[$348 >> 2] = $110; //@line 4443
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 4444
        HEAP32[$349 >> 2] = $112; //@line 4445
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 4446
        HEAP32[$350 >> 2] = $114; //@line 4447
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 4448
        HEAP32[$351 >> 2] = $116; //@line 4449
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 4450
        HEAP32[$352 >> 2] = $118; //@line 4451
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 4452
        HEAP32[$353 >> 2] = $120; //@line 4453
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 4454
        HEAP32[$354 >> 2] = $122; //@line 4455
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 4456
        HEAP32[$355 >> 2] = $124; //@line 4457
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 4458
        HEAP32[$356 >> 2] = $126; //@line 4459
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 4460
        HEAP32[$357 >> 2] = $128; //@line 4461
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 4462
        HEAP32[$358 >> 2] = $130; //@line 4463
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 4464
        HEAP32[$359 >> 2] = $132; //@line 4465
        sp = STACKTOP; //@line 4466
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 4470
       ___async_unwind = 0; //@line 4471
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 4472
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 4473
       HEAP32[$292 >> 2] = $2; //@line 4474
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 4475
       HEAP32[$293 >> 2] = $4; //@line 4476
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 4477
       HEAP32[$294 >> 2] = $6; //@line 4478
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 4479
       HEAP32[$295 >> 2] = $8; //@line 4480
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 4481
       HEAP32[$296 >> 2] = $10; //@line 4482
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 4483
       HEAP32[$297 >> 2] = $12; //@line 4484
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 4485
       HEAP32[$298 >> 2] = $14; //@line 4486
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 4487
       HEAP32[$299 >> 2] = $16; //@line 4488
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 4489
       HEAP32[$300 >> 2] = $18; //@line 4490
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 4491
       HEAP32[$301 >> 2] = $20; //@line 4492
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 4493
       HEAP32[$302 >> 2] = $22; //@line 4494
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 4495
       HEAP32[$303 >> 2] = $24; //@line 4496
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 4497
       HEAP32[$304 >> 2] = $26; //@line 4498
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 4499
       HEAP32[$305 >> 2] = $28; //@line 4500
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 4501
       HEAP32[$306 >> 2] = $30; //@line 4502
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 4503
       HEAP32[$307 >> 2] = $32; //@line 4504
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 4505
       HEAP32[$308 >> 2] = $281; //@line 4506
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 4507
       HEAP32[$309 >> 2] = $36; //@line 4508
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 4509
       HEAP32[$310 >> 2] = $34; //@line 4510
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 4511
       HEAP32[$311 >> 2] = $38; //@line 4512
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 4513
       HEAP32[$312 >> 2] = $40; //@line 4514
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 4515
       HEAP32[$313 >> 2] = $42; //@line 4516
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 4517
       HEAP32[$314 >> 2] = $44; //@line 4518
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 4519
       HEAP32[$315 >> 2] = $46; //@line 4520
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 4521
       HEAP32[$316 >> 2] = $48; //@line 4522
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 4523
       HEAP32[$317 >> 2] = $50; //@line 4524
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 4525
       HEAP32[$318 >> 2] = $52; //@line 4526
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 4527
       HEAP32[$319 >> 2] = $54; //@line 4528
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 4529
       HEAP32[$320 >> 2] = $56; //@line 4530
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 4531
       HEAP32[$321 >> 2] = $58; //@line 4532
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 4533
       HEAP32[$322 >> 2] = $60; //@line 4534
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 4535
       HEAP32[$323 >> 2] = $157; //@line 4536
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 4537
       HEAP32[$324 >> 2] = $64; //@line 4538
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 4539
       HEAP32[$325 >> 2] = $66; //@line 4540
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 4541
       HEAP32[$326 >> 2] = $68; //@line 4542
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 4543
       HEAP32[$327 >> 2] = $70; //@line 4544
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 4545
       HEAP32[$328 >> 2] = $72; //@line 4546
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 4547
       HEAP32[$329 >> 2] = $74; //@line 4548
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 4549
       HEAP32[$330 >> 2] = $76; //@line 4550
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 4551
       HEAP32[$331 >> 2] = $78; //@line 4552
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 4553
       HEAP32[$332 >> 2] = $80; //@line 4554
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 4555
       HEAP32[$333 >> 2] = $82; //@line 4556
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 4557
       HEAP32[$334 >> 2] = $84; //@line 4558
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 4559
       HEAP32[$335 >> 2] = $86; //@line 4560
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 4561
       HEAP32[$336 >> 2] = $88; //@line 4562
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 4563
       HEAP32[$337 >> 2] = $90; //@line 4564
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 4565
       HEAP32[$338 >> 2] = $92; //@line 4566
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 4567
       HEAP32[$339 >> 2] = $94; //@line 4568
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 4569
       HEAP32[$340 >> 2] = $96; //@line 4570
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 4571
       HEAP32[$341 >> 2] = $98; //@line 4572
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 4573
       HEAP32[$342 >> 2] = $100; //@line 4574
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 4575
       HEAP32[$343 >> 2] = $102; //@line 4576
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 4577
       HEAP32[$344 >> 2] = $104; //@line 4578
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 4579
       HEAP32[$345 >> 2] = $289; //@line 4580
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 4581
       HEAP32[$346 >> 2] = $106; //@line 4582
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 4583
       HEAP32[$347 >> 2] = $108; //@line 4584
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 4585
       HEAP32[$348 >> 2] = $110; //@line 4586
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 4587
       HEAP32[$349 >> 2] = $112; //@line 4588
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 4589
       HEAP32[$350 >> 2] = $114; //@line 4590
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 4591
       HEAP32[$351 >> 2] = $116; //@line 4592
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 4593
       HEAP32[$352 >> 2] = $118; //@line 4594
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 4595
       HEAP32[$353 >> 2] = $120; //@line 4596
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 4597
       HEAP32[$354 >> 2] = $122; //@line 4598
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 4599
       HEAP32[$355 >> 2] = $124; //@line 4600
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 4601
       HEAP32[$356 >> 2] = $126; //@line 4602
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 4603
       HEAP32[$357 >> 2] = $128; //@line 4604
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 4605
       HEAP32[$358 >> 2] = $130; //@line 4606
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 4607
       HEAP32[$359 >> 2] = $132; //@line 4608
       sp = STACKTOP; //@line 4609
       return;
      }
     }
     _mbed_tracef(2, 3803, 4369, $118); //@line 4613
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$126 >> 2] | 0; //@line 4618
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 4620
     $363 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 4621
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 4624
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 4625
      HEAP32[$364 >> 2] = $2; //@line 4626
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 4627
      HEAP32[$365 >> 2] = $4; //@line 4628
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 4629
      HEAP32[$366 >> 2] = $6; //@line 4630
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 4631
      HEAP32[$367 >> 2] = $8; //@line 4632
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 4633
      HEAP32[$368 >> 2] = $10; //@line 4634
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 4635
      HEAP32[$369 >> 2] = $12; //@line 4636
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 4637
      HEAP32[$370 >> 2] = $14; //@line 4638
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 4639
      HEAP32[$371 >> 2] = $16; //@line 4640
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 4641
      HEAP32[$372 >> 2] = $18; //@line 4642
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 4643
      HEAP32[$373 >> 2] = $20; //@line 4644
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 4645
      HEAP32[$374 >> 2] = $22; //@line 4646
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 4647
      HEAP32[$375 >> 2] = $24; //@line 4648
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 4649
      HEAP32[$376 >> 2] = $26; //@line 4650
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 4651
      HEAP32[$377 >> 2] = $28; //@line 4652
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 4653
      HEAP32[$378 >> 2] = $30; //@line 4654
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 4655
      HEAP32[$379 >> 2] = $32; //@line 4656
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 4657
      HEAP32[$380 >> 2] = $34; //@line 4658
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 4659
      HEAP32[$381 >> 2] = $36; //@line 4660
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 4661
      HEAP32[$382 >> 2] = $38; //@line 4662
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 4663
      HEAP32[$383 >> 2] = $40; //@line 4664
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 4665
      HEAP32[$384 >> 2] = $42; //@line 4666
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 4667
      HEAP32[$385 >> 2] = $44; //@line 4668
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 4669
      HEAP32[$386 >> 2] = $46; //@line 4670
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 4671
      HEAP32[$387 >> 2] = $48; //@line 4672
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 4673
      HEAP32[$388 >> 2] = $50; //@line 4674
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 4675
      HEAP32[$389 >> 2] = $52; //@line 4676
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 4677
      HEAP32[$390 >> 2] = $54; //@line 4678
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 4679
      HEAP32[$391 >> 2] = $56; //@line 4680
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 4681
      HEAP32[$392 >> 2] = $58; //@line 4682
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 4683
      HEAP32[$393 >> 2] = $60; //@line 4684
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 4685
      HEAP32[$394 >> 2] = $157; //@line 4686
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 4687
      HEAP32[$395 >> 2] = $64; //@line 4688
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 4689
      HEAP32[$396 >> 2] = $66; //@line 4690
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 4691
      HEAP32[$397 >> 2] = $68; //@line 4692
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 4693
      HEAP32[$398 >> 2] = $70; //@line 4694
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 4695
      HEAP32[$399 >> 2] = $72; //@line 4696
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 4697
      HEAP32[$400 >> 2] = $74; //@line 4698
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 4699
      HEAP32[$401 >> 2] = $76; //@line 4700
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 4701
      HEAP32[$402 >> 2] = $78; //@line 4702
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 4703
      HEAP32[$403 >> 2] = $80; //@line 4704
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 4705
      HEAP32[$404 >> 2] = $82; //@line 4706
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 4707
      HEAP32[$405 >> 2] = $84; //@line 4708
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 4709
      HEAP32[$406 >> 2] = $86; //@line 4710
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 4711
      HEAP32[$407 >> 2] = $88; //@line 4712
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 4713
      HEAP32[$408 >> 2] = $90; //@line 4714
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 4715
      HEAP32[$409 >> 2] = $92; //@line 4716
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 4717
      HEAP32[$410 >> 2] = $94; //@line 4718
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 4719
      HEAP32[$411 >> 2] = $96; //@line 4720
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 4721
      HEAP32[$412 >> 2] = $98; //@line 4722
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 4723
      HEAP32[$413 >> 2] = $100; //@line 4724
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 4725
      HEAP32[$414 >> 2] = $102; //@line 4726
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 4727
      HEAP32[$415 >> 2] = $104; //@line 4728
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 4729
      HEAP32[$416 >> 2] = $106; //@line 4730
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 4731
      HEAP32[$417 >> 2] = $108; //@line 4732
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 4733
      HEAP32[$418 >> 2] = $110; //@line 4734
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 4735
      HEAP32[$419 >> 2] = $112; //@line 4736
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 4737
      HEAP32[$420 >> 2] = $114; //@line 4738
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 4739
      HEAP32[$421 >> 2] = $116; //@line 4740
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 4741
      HEAP32[$422 >> 2] = $118; //@line 4742
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 4743
      HEAP32[$423 >> 2] = $120; //@line 4744
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 4745
      HEAP32[$424 >> 2] = $122; //@line 4746
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 4747
      HEAP32[$425 >> 2] = $124; //@line 4748
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 4749
      HEAP32[$426 >> 2] = $126; //@line 4750
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 4751
      HEAP32[$427 >> 2] = $128; //@line 4752
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 4753
      HEAP32[$428 >> 2] = $130; //@line 4754
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 4755
      HEAP32[$429 >> 2] = $132; //@line 4756
      sp = STACKTOP; //@line 4757
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 4761
     ___async_unwind = 0; //@line 4762
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 4763
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 4764
     HEAP32[$364 >> 2] = $2; //@line 4765
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 4766
     HEAP32[$365 >> 2] = $4; //@line 4767
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 4768
     HEAP32[$366 >> 2] = $6; //@line 4769
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 4770
     HEAP32[$367 >> 2] = $8; //@line 4771
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 4772
     HEAP32[$368 >> 2] = $10; //@line 4773
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 4774
     HEAP32[$369 >> 2] = $12; //@line 4775
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 4776
     HEAP32[$370 >> 2] = $14; //@line 4777
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 4778
     HEAP32[$371 >> 2] = $16; //@line 4779
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 4780
     HEAP32[$372 >> 2] = $18; //@line 4781
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 4782
     HEAP32[$373 >> 2] = $20; //@line 4783
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 4784
     HEAP32[$374 >> 2] = $22; //@line 4785
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 4786
     HEAP32[$375 >> 2] = $24; //@line 4787
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 4788
     HEAP32[$376 >> 2] = $26; //@line 4789
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 4790
     HEAP32[$377 >> 2] = $28; //@line 4791
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 4792
     HEAP32[$378 >> 2] = $30; //@line 4793
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 4794
     HEAP32[$379 >> 2] = $32; //@line 4795
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 4796
     HEAP32[$380 >> 2] = $34; //@line 4797
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 4798
     HEAP32[$381 >> 2] = $36; //@line 4799
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 4800
     HEAP32[$382 >> 2] = $38; //@line 4801
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 4802
     HEAP32[$383 >> 2] = $40; //@line 4803
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 4804
     HEAP32[$384 >> 2] = $42; //@line 4805
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 4806
     HEAP32[$385 >> 2] = $44; //@line 4807
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 4808
     HEAP32[$386 >> 2] = $46; //@line 4809
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 4810
     HEAP32[$387 >> 2] = $48; //@line 4811
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 4812
     HEAP32[$388 >> 2] = $50; //@line 4813
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 4814
     HEAP32[$389 >> 2] = $52; //@line 4815
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 4816
     HEAP32[$390 >> 2] = $54; //@line 4817
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 4818
     HEAP32[$391 >> 2] = $56; //@line 4819
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 4820
     HEAP32[$392 >> 2] = $58; //@line 4821
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 4822
     HEAP32[$393 >> 2] = $60; //@line 4823
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 4824
     HEAP32[$394 >> 2] = $157; //@line 4825
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 4826
     HEAP32[$395 >> 2] = $64; //@line 4827
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 4828
     HEAP32[$396 >> 2] = $66; //@line 4829
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 4830
     HEAP32[$397 >> 2] = $68; //@line 4831
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 4832
     HEAP32[$398 >> 2] = $70; //@line 4833
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 4834
     HEAP32[$399 >> 2] = $72; //@line 4835
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 4836
     HEAP32[$400 >> 2] = $74; //@line 4837
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 4838
     HEAP32[$401 >> 2] = $76; //@line 4839
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 4840
     HEAP32[$402 >> 2] = $78; //@line 4841
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 4842
     HEAP32[$403 >> 2] = $80; //@line 4843
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 4844
     HEAP32[$404 >> 2] = $82; //@line 4845
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 4846
     HEAP32[$405 >> 2] = $84; //@line 4847
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 4848
     HEAP32[$406 >> 2] = $86; //@line 4849
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 4850
     HEAP32[$407 >> 2] = $88; //@line 4851
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 4852
     HEAP32[$408 >> 2] = $90; //@line 4853
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 4854
     HEAP32[$409 >> 2] = $92; //@line 4855
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 4856
     HEAP32[$410 >> 2] = $94; //@line 4857
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 4858
     HEAP32[$411 >> 2] = $96; //@line 4859
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 4860
     HEAP32[$412 >> 2] = $98; //@line 4861
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 4862
     HEAP32[$413 >> 2] = $100; //@line 4863
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 4864
     HEAP32[$414 >> 2] = $102; //@line 4865
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 4866
     HEAP32[$415 >> 2] = $104; //@line 4867
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 4868
     HEAP32[$416 >> 2] = $106; //@line 4869
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 4870
     HEAP32[$417 >> 2] = $108; //@line 4871
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 4872
     HEAP32[$418 >> 2] = $110; //@line 4873
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 4874
     HEAP32[$419 >> 2] = $112; //@line 4875
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 4876
     HEAP32[$420 >> 2] = $114; //@line 4877
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 4878
     HEAP32[$421 >> 2] = $116; //@line 4879
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 4880
     HEAP32[$422 >> 2] = $118; //@line 4881
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 4882
     HEAP32[$423 >> 2] = $120; //@line 4883
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 4884
     HEAP32[$424 >> 2] = $122; //@line 4885
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 4886
     HEAP32[$425 >> 2] = $124; //@line 4887
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 4888
     HEAP32[$426 >> 2] = $126; //@line 4889
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 4890
     HEAP32[$427 >> 2] = $128; //@line 4891
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 4892
     HEAP32[$428 >> 2] = $130; //@line 4893
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 4894
     HEAP32[$429 >> 2] = $132; //@line 4895
     sp = STACKTOP; //@line 4896
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 4901
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$126 >> 2] | 0; //@line 4905
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 4911
       $439 = $189 + 1 | 0; //@line 4912
       HEAP32[$36 >> 2] = $439; //@line 4913
       $440 = HEAP32[$128 >> 2] | 0; //@line 4914
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 4915
       $441 = FUNCTION_TABLE_ii[$440 & 31]($$1202$i) | 0; //@line 4916
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 4919
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 4920
        HEAP32[$442 >> 2] = $2; //@line 4921
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 4922
        HEAP32[$443 >> 2] = $4; //@line 4923
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 4924
        HEAP32[$444 >> 2] = $6; //@line 4925
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 4926
        HEAP32[$445 >> 2] = $8; //@line 4927
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 4928
        HEAP32[$446 >> 2] = $10; //@line 4929
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 4930
        HEAP32[$447 >> 2] = $12; //@line 4931
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 4932
        HEAP32[$448 >> 2] = $14; //@line 4933
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 4934
        HEAP32[$449 >> 2] = $16; //@line 4935
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 4936
        HEAP32[$450 >> 2] = $18; //@line 4937
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 4938
        HEAP32[$451 >> 2] = $20; //@line 4939
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 4940
        HEAP32[$452 >> 2] = $22; //@line 4941
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 4942
        HEAP32[$453 >> 2] = $24; //@line 4943
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 4944
        HEAP32[$454 >> 2] = $26; //@line 4945
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 4946
        HEAP32[$455 >> 2] = $28; //@line 4947
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 4948
        HEAP32[$456 >> 2] = $30; //@line 4949
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 4950
        HEAP32[$457 >> 2] = $32; //@line 4951
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 4952
        HEAP32[$458 >> 2] = $34; //@line 4953
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 4954
        HEAP32[$459 >> 2] = $36; //@line 4955
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 4956
        HEAP32[$460 >> 2] = $38; //@line 4957
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 4958
        HEAP32[$461 >> 2] = $40; //@line 4959
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 4960
        HEAP32[$462 >> 2] = $42; //@line 4961
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 4962
        HEAP32[$463 >> 2] = $44; //@line 4963
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 4964
        HEAP32[$464 >> 2] = $46; //@line 4965
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 4966
        HEAP32[$465 >> 2] = $48; //@line 4967
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 4968
        HEAP32[$466 >> 2] = $50; //@line 4969
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 4970
        HEAP32[$467 >> 2] = $52; //@line 4971
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 4972
        HEAP32[$468 >> 2] = $54; //@line 4973
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 4974
        HEAP32[$469 >> 2] = $56; //@line 4975
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 4976
        HEAP32[$470 >> 2] = $58; //@line 4977
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 4978
        HEAP32[$471 >> 2] = $60; //@line 4979
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 4980
        HEAP32[$472 >> 2] = $157; //@line 4981
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 4982
        HEAP32[$473 >> 2] = $64; //@line 4983
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 4984
        HEAP32[$474 >> 2] = $66; //@line 4985
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 4986
        HEAP32[$475 >> 2] = $68; //@line 4987
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 4988
        HEAP32[$476 >> 2] = $70; //@line 4989
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 4990
        HEAP32[$477 >> 2] = $72; //@line 4991
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 4992
        HEAP32[$478 >> 2] = $74; //@line 4993
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 4994
        HEAP32[$479 >> 2] = $76; //@line 4995
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 4996
        HEAP32[$480 >> 2] = $78; //@line 4997
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 4998
        HEAP32[$481 >> 2] = $80; //@line 4999
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 5000
        HEAP32[$482 >> 2] = $82; //@line 5001
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 5002
        HEAP32[$483 >> 2] = $84; //@line 5003
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 5004
        HEAP32[$484 >> 2] = $86; //@line 5005
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 5006
        HEAP32[$485 >> 2] = $88; //@line 5007
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 5008
        HEAP32[$486 >> 2] = $90; //@line 5009
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 5010
        HEAP32[$487 >> 2] = $92; //@line 5011
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 5012
        HEAP32[$488 >> 2] = $94; //@line 5013
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 5014
        HEAP32[$489 >> 2] = $431; //@line 5015
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 5016
        HEAP32[$490 >> 2] = $96; //@line 5017
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 5018
        HEAP32[$491 >> 2] = $98; //@line 5019
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 5020
        HEAP32[$492 >> 2] = $439; //@line 5021
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 5022
        HEAP32[$493 >> 2] = $100; //@line 5023
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 5024
        HEAP32[$494 >> 2] = $102; //@line 5025
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 5026
        HEAP32[$495 >> 2] = $104; //@line 5027
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 5028
        HEAP32[$496 >> 2] = $106; //@line 5029
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 5030
        HEAP32[$497 >> 2] = $108; //@line 5031
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 5032
        HEAP32[$498 >> 2] = $110; //@line 5033
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 5034
        HEAP32[$499 >> 2] = $112; //@line 5035
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 5036
        HEAP32[$500 >> 2] = $114; //@line 5037
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 5038
        HEAP32[$501 >> 2] = $116; //@line 5039
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 5040
        HEAP32[$502 >> 2] = $118; //@line 5041
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 5042
        HEAP32[$503 >> 2] = $120; //@line 5043
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 5044
        HEAP32[$504 >> 2] = $122; //@line 5045
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 5046
        HEAP32[$505 >> 2] = $124; //@line 5047
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 5048
        HEAP32[$506 >> 2] = $126; //@line 5049
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 5050
        HEAP32[$507 >> 2] = $128; //@line 5051
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 5052
        HEAP32[$508 >> 2] = $130; //@line 5053
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 5054
        HEAP32[$509 >> 2] = $132; //@line 5055
        sp = STACKTOP; //@line 5056
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 5060
       ___async_unwind = 0; //@line 5061
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 5062
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 5063
       HEAP32[$442 >> 2] = $2; //@line 5064
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 5065
       HEAP32[$443 >> 2] = $4; //@line 5066
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 5067
       HEAP32[$444 >> 2] = $6; //@line 5068
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 5069
       HEAP32[$445 >> 2] = $8; //@line 5070
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 5071
       HEAP32[$446 >> 2] = $10; //@line 5072
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 5073
       HEAP32[$447 >> 2] = $12; //@line 5074
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 5075
       HEAP32[$448 >> 2] = $14; //@line 5076
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 5077
       HEAP32[$449 >> 2] = $16; //@line 5078
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 5079
       HEAP32[$450 >> 2] = $18; //@line 5080
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 5081
       HEAP32[$451 >> 2] = $20; //@line 5082
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 5083
       HEAP32[$452 >> 2] = $22; //@line 5084
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 5085
       HEAP32[$453 >> 2] = $24; //@line 5086
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 5087
       HEAP32[$454 >> 2] = $26; //@line 5088
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 5089
       HEAP32[$455 >> 2] = $28; //@line 5090
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 5091
       HEAP32[$456 >> 2] = $30; //@line 5092
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 5093
       HEAP32[$457 >> 2] = $32; //@line 5094
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 5095
       HEAP32[$458 >> 2] = $34; //@line 5096
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 5097
       HEAP32[$459 >> 2] = $36; //@line 5098
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 5099
       HEAP32[$460 >> 2] = $38; //@line 5100
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 5101
       HEAP32[$461 >> 2] = $40; //@line 5102
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 5103
       HEAP32[$462 >> 2] = $42; //@line 5104
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 5105
       HEAP32[$463 >> 2] = $44; //@line 5106
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 5107
       HEAP32[$464 >> 2] = $46; //@line 5108
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 5109
       HEAP32[$465 >> 2] = $48; //@line 5110
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 5111
       HEAP32[$466 >> 2] = $50; //@line 5112
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 5113
       HEAP32[$467 >> 2] = $52; //@line 5114
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 5115
       HEAP32[$468 >> 2] = $54; //@line 5116
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 5117
       HEAP32[$469 >> 2] = $56; //@line 5118
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 5119
       HEAP32[$470 >> 2] = $58; //@line 5120
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 5121
       HEAP32[$471 >> 2] = $60; //@line 5122
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 5123
       HEAP32[$472 >> 2] = $157; //@line 5124
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 5125
       HEAP32[$473 >> 2] = $64; //@line 5126
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 5127
       HEAP32[$474 >> 2] = $66; //@line 5128
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 5129
       HEAP32[$475 >> 2] = $68; //@line 5130
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 5131
       HEAP32[$476 >> 2] = $70; //@line 5132
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 5133
       HEAP32[$477 >> 2] = $72; //@line 5134
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 5135
       HEAP32[$478 >> 2] = $74; //@line 5136
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 5137
       HEAP32[$479 >> 2] = $76; //@line 5138
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 5139
       HEAP32[$480 >> 2] = $78; //@line 5140
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 5141
       HEAP32[$481 >> 2] = $80; //@line 5142
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 5143
       HEAP32[$482 >> 2] = $82; //@line 5144
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 5145
       HEAP32[$483 >> 2] = $84; //@line 5146
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 5147
       HEAP32[$484 >> 2] = $86; //@line 5148
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 5149
       HEAP32[$485 >> 2] = $88; //@line 5150
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 5151
       HEAP32[$486 >> 2] = $90; //@line 5152
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 5153
       HEAP32[$487 >> 2] = $92; //@line 5154
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 5155
       HEAP32[$488 >> 2] = $94; //@line 5156
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 5157
       HEAP32[$489 >> 2] = $431; //@line 5158
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 5159
       HEAP32[$490 >> 2] = $96; //@line 5160
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 5161
       HEAP32[$491 >> 2] = $98; //@line 5162
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 5163
       HEAP32[$492 >> 2] = $439; //@line 5164
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 5165
       HEAP32[$493 >> 2] = $100; //@line 5166
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 5167
       HEAP32[$494 >> 2] = $102; //@line 5168
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 5169
       HEAP32[$495 >> 2] = $104; //@line 5170
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 5171
       HEAP32[$496 >> 2] = $106; //@line 5172
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 5173
       HEAP32[$497 >> 2] = $108; //@line 5174
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 5175
       HEAP32[$498 >> 2] = $110; //@line 5176
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 5177
       HEAP32[$499 >> 2] = $112; //@line 5178
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 5179
       HEAP32[$500 >> 2] = $114; //@line 5180
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 5181
       HEAP32[$501 >> 2] = $116; //@line 5182
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 5183
       HEAP32[$502 >> 2] = $118; //@line 5184
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 5185
       HEAP32[$503 >> 2] = $120; //@line 5186
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 5187
       HEAP32[$504 >> 2] = $122; //@line 5188
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 5189
       HEAP32[$505 >> 2] = $124; //@line 5190
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 5191
       HEAP32[$506 >> 2] = $126; //@line 5192
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 5193
       HEAP32[$507 >> 2] = $128; //@line 5194
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 5195
       HEAP32[$508 >> 2] = $130; //@line 5196
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 5197
       HEAP32[$509 >> 2] = $132; //@line 5198
       sp = STACKTOP; //@line 5199
       return;
      }
     }
     _mbed_tracef(2, 3803, 4564, $114); //@line 5203
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$126 >> 2] | 0; //@line 5208
     $512 = $511 + 56 | 0; //@line 5209
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3803, 4698, $94); //@line 5213
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 5217
     $516 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 5218
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 5221
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 5222
      HEAP32[$517 >> 2] = $2; //@line 5223
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 5224
      HEAP32[$518 >> 2] = $4; //@line 5225
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 5226
      HEAP32[$519 >> 2] = $6; //@line 5227
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 5228
      HEAP32[$520 >> 2] = $8; //@line 5229
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 5230
      HEAP32[$521 >> 2] = $10; //@line 5231
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 5232
      HEAP32[$522 >> 2] = $12; //@line 5233
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 5234
      HEAP32[$523 >> 2] = $14; //@line 5235
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 5236
      HEAP32[$524 >> 2] = $16; //@line 5237
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 5238
      HEAP32[$525 >> 2] = $18; //@line 5239
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 5240
      HEAP32[$526 >> 2] = $20; //@line 5241
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 5242
      HEAP32[$527 >> 2] = $22; //@line 5243
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 5244
      HEAP32[$528 >> 2] = $24; //@line 5245
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 5246
      HEAP32[$529 >> 2] = $26; //@line 5247
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 5248
      HEAP32[$530 >> 2] = $28; //@line 5249
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 5250
      HEAP32[$531 >> 2] = $30; //@line 5251
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 5252
      HEAP32[$532 >> 2] = $32; //@line 5253
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 5254
      HEAP32[$533 >> 2] = $34; //@line 5255
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 5256
      HEAP32[$534 >> 2] = $36; //@line 5257
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 5258
      HEAP32[$535 >> 2] = $38; //@line 5259
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 5260
      HEAP32[$536 >> 2] = $40; //@line 5261
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 5262
      HEAP32[$537 >> 2] = $42; //@line 5263
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 5264
      HEAP32[$538 >> 2] = $44; //@line 5265
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 5266
      HEAP32[$539 >> 2] = $46; //@line 5267
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 5268
      HEAP32[$540 >> 2] = $48; //@line 5269
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 5270
      HEAP32[$541 >> 2] = $50; //@line 5271
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 5272
      HEAP32[$542 >> 2] = $52; //@line 5273
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 5274
      HEAP32[$543 >> 2] = $54; //@line 5275
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 5276
      HEAP32[$544 >> 2] = $56; //@line 5277
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 5278
      HEAP32[$545 >> 2] = $58; //@line 5279
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 5280
      HEAP32[$546 >> 2] = $60; //@line 5281
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 5282
      HEAP32[$547 >> 2] = $157; //@line 5283
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 5284
      HEAP32[$548 >> 2] = $64; //@line 5285
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 5286
      HEAP32[$549 >> 2] = $66; //@line 5287
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 5288
      HEAP32[$550 >> 2] = $68; //@line 5289
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 5290
      HEAP32[$551 >> 2] = $70; //@line 5291
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 5292
      HEAP32[$552 >> 2] = $72; //@line 5293
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 5294
      HEAP32[$553 >> 2] = $74; //@line 5295
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 5296
      HEAP32[$554 >> 2] = $76; //@line 5297
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 5298
      HEAP32[$555 >> 2] = $78; //@line 5299
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 5300
      HEAP32[$556 >> 2] = $80; //@line 5301
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 5302
      HEAP32[$557 >> 2] = $82; //@line 5303
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 5304
      HEAP32[$558 >> 2] = $84; //@line 5305
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 5306
      HEAP32[$559 >> 2] = $86; //@line 5307
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 5308
      HEAP32[$560 >> 2] = $88; //@line 5309
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 5310
      HEAP32[$561 >> 2] = $90; //@line 5311
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 5312
      HEAP32[$562 >> 2] = $92; //@line 5313
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 5314
      HEAP32[$563 >> 2] = $94; //@line 5315
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 5316
      HEAP32[$564 >> 2] = $96; //@line 5317
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 5318
      HEAP32[$565 >> 2] = $98; //@line 5319
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 5320
      HEAP32[$566 >> 2] = $100; //@line 5321
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 5322
      HEAP32[$567 >> 2] = $102; //@line 5323
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 5324
      HEAP32[$568 >> 2] = $104; //@line 5325
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 5326
      HEAP32[$569 >> 2] = $106; //@line 5327
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 5328
      HEAP32[$570 >> 2] = $108; //@line 5329
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 5330
      HEAP32[$571 >> 2] = $110; //@line 5331
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 5332
      HEAP32[$572 >> 2] = $112; //@line 5333
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 5334
      HEAP32[$573 >> 2] = $114; //@line 5335
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 5336
      HEAP32[$574 >> 2] = $116; //@line 5337
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 5338
      HEAP32[$575 >> 2] = $118; //@line 5339
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 5340
      HEAP32[$576 >> 2] = $120; //@line 5341
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 5342
      HEAP32[$577 >> 2] = $122; //@line 5343
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 5344
      HEAP32[$578 >> 2] = $124; //@line 5345
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 5346
      HEAP32[$579 >> 2] = $126; //@line 5347
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 5348
      HEAP32[$580 >> 2] = $128; //@line 5349
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 5350
      HEAP32[$581 >> 2] = $130; //@line 5351
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 5352
      HEAP32[$582 >> 2] = $132; //@line 5353
      sp = STACKTOP; //@line 5354
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 5358
     ___async_unwind = 0; //@line 5359
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 5360
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 5361
     HEAP32[$517 >> 2] = $2; //@line 5362
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 5363
     HEAP32[$518 >> 2] = $4; //@line 5364
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 5365
     HEAP32[$519 >> 2] = $6; //@line 5366
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 5367
     HEAP32[$520 >> 2] = $8; //@line 5368
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 5369
     HEAP32[$521 >> 2] = $10; //@line 5370
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 5371
     HEAP32[$522 >> 2] = $12; //@line 5372
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 5373
     HEAP32[$523 >> 2] = $14; //@line 5374
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 5375
     HEAP32[$524 >> 2] = $16; //@line 5376
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 5377
     HEAP32[$525 >> 2] = $18; //@line 5378
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 5379
     HEAP32[$526 >> 2] = $20; //@line 5380
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 5381
     HEAP32[$527 >> 2] = $22; //@line 5382
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 5383
     HEAP32[$528 >> 2] = $24; //@line 5384
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 5385
     HEAP32[$529 >> 2] = $26; //@line 5386
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 5387
     HEAP32[$530 >> 2] = $28; //@line 5388
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 5389
     HEAP32[$531 >> 2] = $30; //@line 5390
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 5391
     HEAP32[$532 >> 2] = $32; //@line 5392
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 5393
     HEAP32[$533 >> 2] = $34; //@line 5394
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 5395
     HEAP32[$534 >> 2] = $36; //@line 5396
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 5397
     HEAP32[$535 >> 2] = $38; //@line 5398
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 5399
     HEAP32[$536 >> 2] = $40; //@line 5400
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 5401
     HEAP32[$537 >> 2] = $42; //@line 5402
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 5403
     HEAP32[$538 >> 2] = $44; //@line 5404
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 5405
     HEAP32[$539 >> 2] = $46; //@line 5406
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 5407
     HEAP32[$540 >> 2] = $48; //@line 5408
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 5409
     HEAP32[$541 >> 2] = $50; //@line 5410
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 5411
     HEAP32[$542 >> 2] = $52; //@line 5412
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 5413
     HEAP32[$543 >> 2] = $54; //@line 5414
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 5415
     HEAP32[$544 >> 2] = $56; //@line 5416
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 5417
     HEAP32[$545 >> 2] = $58; //@line 5418
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 5419
     HEAP32[$546 >> 2] = $60; //@line 5420
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 5421
     HEAP32[$547 >> 2] = $157; //@line 5422
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 5423
     HEAP32[$548 >> 2] = $64; //@line 5424
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 5425
     HEAP32[$549 >> 2] = $66; //@line 5426
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 5427
     HEAP32[$550 >> 2] = $68; //@line 5428
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 5429
     HEAP32[$551 >> 2] = $70; //@line 5430
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 5431
     HEAP32[$552 >> 2] = $72; //@line 5432
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 5433
     HEAP32[$553 >> 2] = $74; //@line 5434
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 5435
     HEAP32[$554 >> 2] = $76; //@line 5436
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 5437
     HEAP32[$555 >> 2] = $78; //@line 5438
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 5439
     HEAP32[$556 >> 2] = $80; //@line 5440
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 5441
     HEAP32[$557 >> 2] = $82; //@line 5442
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 5443
     HEAP32[$558 >> 2] = $84; //@line 5444
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 5445
     HEAP32[$559 >> 2] = $86; //@line 5446
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 5447
     HEAP32[$560 >> 2] = $88; //@line 5448
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 5449
     HEAP32[$561 >> 2] = $90; //@line 5450
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 5451
     HEAP32[$562 >> 2] = $92; //@line 5452
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 5453
     HEAP32[$563 >> 2] = $94; //@line 5454
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 5455
     HEAP32[$564 >> 2] = $96; //@line 5456
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 5457
     HEAP32[$565 >> 2] = $98; //@line 5458
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 5459
     HEAP32[$566 >> 2] = $100; //@line 5460
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 5461
     HEAP32[$567 >> 2] = $102; //@line 5462
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 5463
     HEAP32[$568 >> 2] = $104; //@line 5464
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 5465
     HEAP32[$569 >> 2] = $106; //@line 5466
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 5467
     HEAP32[$570 >> 2] = $108; //@line 5468
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 5469
     HEAP32[$571 >> 2] = $110; //@line 5470
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 5471
     HEAP32[$572 >> 2] = $112; //@line 5472
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 5473
     HEAP32[$573 >> 2] = $114; //@line 5474
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 5475
     HEAP32[$574 >> 2] = $116; //@line 5476
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 5477
     HEAP32[$575 >> 2] = $118; //@line 5478
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 5479
     HEAP32[$576 >> 2] = $120; //@line 5480
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 5481
     HEAP32[$577 >> 2] = $122; //@line 5482
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 5483
     HEAP32[$578 >> 2] = $124; //@line 5484
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 5485
     HEAP32[$579 >> 2] = $126; //@line 5486
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 5487
     HEAP32[$580 >> 2] = $128; //@line 5488
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 5489
     HEAP32[$581 >> 2] = $130; //@line 5490
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 5491
     HEAP32[$582 >> 2] = $132; //@line 5492
     sp = STACKTOP; //@line 5493
     return;
    }
   case 55:
    {
     _mbed_tracef(2, 3803, 4831, $66); //@line 5498
     break L2;
     break;
    }
   case 59:
    {
     $601 = HEAP32[$126 >> 2] | 0; //@line 5503
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 5506
     $604 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $601 + 60 | 0, $601 + 8 | 0, 20, $$1202$i) | 0; //@line 5507
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 5510
      $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 5511
      HEAP32[$605 >> 2] = $2; //@line 5512
      $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 5513
      HEAP32[$606 >> 2] = $4; //@line 5514
      $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 5515
      HEAP32[$607 >> 2] = $6; //@line 5516
      $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 5517
      HEAP32[$608 >> 2] = $8; //@line 5518
      $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 5519
      HEAP32[$609 >> 2] = $10; //@line 5520
      $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 5521
      HEAP32[$610 >> 2] = $12; //@line 5522
      $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 5523
      HEAP32[$611 >> 2] = $14; //@line 5524
      $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 5525
      HEAP32[$612 >> 2] = $16; //@line 5526
      $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 5527
      HEAP32[$613 >> 2] = $18; //@line 5528
      $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 5529
      HEAP32[$614 >> 2] = $20; //@line 5530
      $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 5531
      HEAP32[$615 >> 2] = $22; //@line 5532
      $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 5533
      HEAP32[$616 >> 2] = $24; //@line 5534
      $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 5535
      HEAP32[$617 >> 2] = $26; //@line 5536
      $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 5537
      HEAP32[$618 >> 2] = $28; //@line 5538
      $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 5539
      HEAP32[$619 >> 2] = $30; //@line 5540
      $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 5541
      HEAP32[$620 >> 2] = $32; //@line 5542
      $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 5543
      HEAP32[$621 >> 2] = $34; //@line 5544
      $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 5545
      HEAP32[$622 >> 2] = $36; //@line 5546
      $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 5547
      HEAP32[$623 >> 2] = $38; //@line 5548
      $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 5549
      HEAP32[$624 >> 2] = $40; //@line 5550
      $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 5551
      HEAP32[$625 >> 2] = $42; //@line 5552
      $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 5553
      HEAP32[$626 >> 2] = $44; //@line 5554
      $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 5555
      HEAP32[$627 >> 2] = $46; //@line 5556
      $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 5557
      HEAP32[$628 >> 2] = $48; //@line 5558
      $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 5559
      HEAP32[$629 >> 2] = $50; //@line 5560
      $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 5561
      HEAP32[$630 >> 2] = $52; //@line 5562
      $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 5563
      HEAP32[$631 >> 2] = $54; //@line 5564
      $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 5565
      HEAP32[$632 >> 2] = $56; //@line 5566
      $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 5567
      HEAP32[$633 >> 2] = $58; //@line 5568
      $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 5569
      HEAP32[$634 >> 2] = $60; //@line 5570
      $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 5571
      HEAP32[$635 >> 2] = $157; //@line 5572
      $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 5573
      HEAP32[$636 >> 2] = $64; //@line 5574
      $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 5575
      HEAP32[$637 >> 2] = $66; //@line 5576
      $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 5577
      HEAP32[$638 >> 2] = $68; //@line 5578
      $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 5579
      HEAP32[$639 >> 2] = $70; //@line 5580
      $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 5581
      HEAP32[$640 >> 2] = $72; //@line 5582
      $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 5583
      HEAP32[$641 >> 2] = $74; //@line 5584
      $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 5585
      HEAP32[$642 >> 2] = $76; //@line 5586
      $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 5587
      HEAP32[$643 >> 2] = $78; //@line 5588
      $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 5589
      HEAP32[$644 >> 2] = $80; //@line 5590
      $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 5591
      HEAP32[$645 >> 2] = $82; //@line 5592
      $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 5593
      HEAP32[$646 >> 2] = $84; //@line 5594
      $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 5595
      HEAP32[$647 >> 2] = $86; //@line 5596
      $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 5597
      HEAP32[$648 >> 2] = $88; //@line 5598
      $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 5599
      HEAP32[$649 >> 2] = $90; //@line 5600
      $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 5601
      HEAP32[$650 >> 2] = $92; //@line 5602
      $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 5603
      HEAP32[$651 >> 2] = $94; //@line 5604
      $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 5605
      HEAP32[$652 >> 2] = $96; //@line 5606
      $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 5607
      HEAP32[$653 >> 2] = $98; //@line 5608
      $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 5609
      HEAP32[$654 >> 2] = $100; //@line 5610
      $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 5611
      HEAP32[$655 >> 2] = $102; //@line 5612
      $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 5613
      HEAP32[$656 >> 2] = $104; //@line 5614
      $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 5615
      HEAP32[$657 >> 2] = $106; //@line 5616
      $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 5617
      HEAP32[$658 >> 2] = $108; //@line 5618
      $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 5619
      HEAP32[$659 >> 2] = $110; //@line 5620
      $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 5621
      HEAP32[$660 >> 2] = $112; //@line 5622
      $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 5623
      HEAP32[$661 >> 2] = $114; //@line 5624
      $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 5625
      HEAP32[$662 >> 2] = $116; //@line 5626
      $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 5627
      HEAP32[$663 >> 2] = $118; //@line 5628
      $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 5629
      HEAP32[$664 >> 2] = $120; //@line 5630
      $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 5631
      HEAP32[$665 >> 2] = $122; //@line 5632
      $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 5633
      HEAP32[$666 >> 2] = $124; //@line 5634
      $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 5635
      HEAP32[$667 >> 2] = $126; //@line 5636
      $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 5637
      HEAP32[$668 >> 2] = $128; //@line 5638
      $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 5639
      HEAP32[$669 >> 2] = $130; //@line 5640
      $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 5641
      HEAP32[$670 >> 2] = $132; //@line 5642
      sp = STACKTOP; //@line 5643
      return;
     }
     HEAP8[___async_retval >> 0] = $604; //@line 5647
     ___async_unwind = 0; //@line 5648
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 5649
     $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 5650
     HEAP32[$605 >> 2] = $2; //@line 5651
     $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 5652
     HEAP32[$606 >> 2] = $4; //@line 5653
     $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 5654
     HEAP32[$607 >> 2] = $6; //@line 5655
     $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 5656
     HEAP32[$608 >> 2] = $8; //@line 5657
     $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 5658
     HEAP32[$609 >> 2] = $10; //@line 5659
     $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 5660
     HEAP32[$610 >> 2] = $12; //@line 5661
     $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 5662
     HEAP32[$611 >> 2] = $14; //@line 5663
     $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 5664
     HEAP32[$612 >> 2] = $16; //@line 5665
     $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 5666
     HEAP32[$613 >> 2] = $18; //@line 5667
     $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 5668
     HEAP32[$614 >> 2] = $20; //@line 5669
     $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 5670
     HEAP32[$615 >> 2] = $22; //@line 5671
     $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 5672
     HEAP32[$616 >> 2] = $24; //@line 5673
     $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 5674
     HEAP32[$617 >> 2] = $26; //@line 5675
     $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 5676
     HEAP32[$618 >> 2] = $28; //@line 5677
     $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 5678
     HEAP32[$619 >> 2] = $30; //@line 5679
     $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 5680
     HEAP32[$620 >> 2] = $32; //@line 5681
     $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 5682
     HEAP32[$621 >> 2] = $34; //@line 5683
     $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 5684
     HEAP32[$622 >> 2] = $36; //@line 5685
     $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 5686
     HEAP32[$623 >> 2] = $38; //@line 5687
     $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 5688
     HEAP32[$624 >> 2] = $40; //@line 5689
     $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 5690
     HEAP32[$625 >> 2] = $42; //@line 5691
     $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 5692
     HEAP32[$626 >> 2] = $44; //@line 5693
     $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 5694
     HEAP32[$627 >> 2] = $46; //@line 5695
     $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 5696
     HEAP32[$628 >> 2] = $48; //@line 5697
     $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 5698
     HEAP32[$629 >> 2] = $50; //@line 5699
     $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 5700
     HEAP32[$630 >> 2] = $52; //@line 5701
     $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 5702
     HEAP32[$631 >> 2] = $54; //@line 5703
     $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 5704
     HEAP32[$632 >> 2] = $56; //@line 5705
     $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 5706
     HEAP32[$633 >> 2] = $58; //@line 5707
     $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 5708
     HEAP32[$634 >> 2] = $60; //@line 5709
     $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 5710
     HEAP32[$635 >> 2] = $157; //@line 5711
     $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 5712
     HEAP32[$636 >> 2] = $64; //@line 5713
     $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 5714
     HEAP32[$637 >> 2] = $66; //@line 5715
     $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 5716
     HEAP32[$638 >> 2] = $68; //@line 5717
     $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 5718
     HEAP32[$639 >> 2] = $70; //@line 5719
     $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 5720
     HEAP32[$640 >> 2] = $72; //@line 5721
     $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 5722
     HEAP32[$641 >> 2] = $74; //@line 5723
     $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 5724
     HEAP32[$642 >> 2] = $76; //@line 5725
     $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 5726
     HEAP32[$643 >> 2] = $78; //@line 5727
     $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 5728
     HEAP32[$644 >> 2] = $80; //@line 5729
     $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 5730
     HEAP32[$645 >> 2] = $82; //@line 5731
     $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 5732
     HEAP32[$646 >> 2] = $84; //@line 5733
     $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 5734
     HEAP32[$647 >> 2] = $86; //@line 5735
     $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 5736
     HEAP32[$648 >> 2] = $88; //@line 5737
     $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 5738
     HEAP32[$649 >> 2] = $90; //@line 5739
     $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 5740
     HEAP32[$650 >> 2] = $92; //@line 5741
     $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 5742
     HEAP32[$651 >> 2] = $94; //@line 5743
     $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 5744
     HEAP32[$652 >> 2] = $96; //@line 5745
     $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 5746
     HEAP32[$653 >> 2] = $98; //@line 5747
     $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 5748
     HEAP32[$654 >> 2] = $100; //@line 5749
     $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 5750
     HEAP32[$655 >> 2] = $102; //@line 5751
     $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 5752
     HEAP32[$656 >> 2] = $104; //@line 5753
     $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 5754
     HEAP32[$657 >> 2] = $106; //@line 5755
     $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 5756
     HEAP32[$658 >> 2] = $108; //@line 5757
     $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 5758
     HEAP32[$659 >> 2] = $110; //@line 5759
     $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 5760
     HEAP32[$660 >> 2] = $112; //@line 5761
     $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 5762
     HEAP32[$661 >> 2] = $114; //@line 5763
     $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 5764
     HEAP32[$662 >> 2] = $116; //@line 5765
     $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 5766
     HEAP32[$663 >> 2] = $118; //@line 5767
     $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 5768
     HEAP32[$664 >> 2] = $120; //@line 5769
     $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 5770
     HEAP32[$665 >> 2] = $122; //@line 5771
     $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 5772
     HEAP32[$666 >> 2] = $124; //@line 5773
     $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 5774
     HEAP32[$667 >> 2] = $126; //@line 5775
     $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 5776
     HEAP32[$668 >> 2] = $128; //@line 5777
     $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 5778
     HEAP32[$669 >> 2] = $130; //@line 5779
     $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 5780
     HEAP32[$670 >> 2] = $132; //@line 5781
     sp = STACKTOP; //@line 5782
     return;
    }
   case 62:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 5787
     $672 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $4, $22, 11, $$1202$i) | 0; //@line 5788
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 5791
      $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 5792
      HEAP32[$673 >> 2] = $2; //@line 5793
      $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 5794
      HEAP32[$674 >> 2] = $4; //@line 5795
      $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 5796
      HEAP32[$675 >> 2] = $6; //@line 5797
      $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 5798
      HEAP32[$676 >> 2] = $8; //@line 5799
      $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 5800
      HEAP32[$677 >> 2] = $10; //@line 5801
      $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 5802
      HEAP32[$678 >> 2] = $12; //@line 5803
      $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 5804
      HEAP32[$679 >> 2] = $14; //@line 5805
      $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 5806
      HEAP32[$680 >> 2] = $16; //@line 5807
      $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 5808
      HEAP32[$681 >> 2] = $18; //@line 5809
      $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 5810
      HEAP32[$682 >> 2] = $20; //@line 5811
      $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 5812
      HEAP32[$683 >> 2] = $22; //@line 5813
      $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 5814
      HEAP32[$684 >> 2] = $24; //@line 5815
      $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 5816
      HEAP32[$685 >> 2] = $26; //@line 5817
      $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 5818
      HEAP32[$686 >> 2] = $28; //@line 5819
      $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 5820
      HEAP32[$687 >> 2] = $30; //@line 5821
      $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 5822
      HEAP32[$688 >> 2] = $32; //@line 5823
      $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 5824
      HEAP32[$689 >> 2] = $34; //@line 5825
      $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 5826
      HEAP32[$690 >> 2] = $36; //@line 5827
      $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 5828
      HEAP32[$691 >> 2] = $38; //@line 5829
      $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 5830
      HEAP32[$692 >> 2] = $40; //@line 5831
      $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 5832
      HEAP32[$693 >> 2] = $42; //@line 5833
      $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 5834
      HEAP32[$694 >> 2] = $44; //@line 5835
      $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 5836
      HEAP32[$695 >> 2] = $46; //@line 5837
      $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 5838
      HEAP32[$696 >> 2] = $48; //@line 5839
      $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 5840
      HEAP32[$697 >> 2] = $50; //@line 5841
      $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 5842
      HEAP32[$698 >> 2] = $52; //@line 5843
      $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 5844
      HEAP32[$699 >> 2] = $54; //@line 5845
      $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 5846
      HEAP32[$700 >> 2] = $56; //@line 5847
      $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 5848
      HEAP32[$701 >> 2] = $58; //@line 5849
      $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 5850
      HEAP32[$702 >> 2] = $60; //@line 5851
      $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 5852
      HEAP32[$703 >> 2] = $157; //@line 5853
      $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 5854
      HEAP32[$704 >> 2] = $64; //@line 5855
      $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 5856
      HEAP32[$705 >> 2] = $66; //@line 5857
      $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 5858
      HEAP32[$706 >> 2] = $68; //@line 5859
      $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 5860
      HEAP32[$707 >> 2] = $70; //@line 5861
      $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 5862
      HEAP32[$708 >> 2] = $72; //@line 5863
      $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 5864
      HEAP32[$709 >> 2] = $74; //@line 5865
      $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 5866
      HEAP32[$710 >> 2] = $76; //@line 5867
      $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 5868
      HEAP32[$711 >> 2] = $78; //@line 5869
      $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 5870
      HEAP32[$712 >> 2] = $80; //@line 5871
      $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 5872
      HEAP32[$713 >> 2] = $82; //@line 5873
      $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 5874
      HEAP32[$714 >> 2] = $84; //@line 5875
      $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 5876
      HEAP32[$715 >> 2] = $86; //@line 5877
      $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 5878
      HEAP32[$716 >> 2] = $88; //@line 5879
      $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 5880
      HEAP32[$717 >> 2] = $90; //@line 5881
      $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 5882
      HEAP32[$718 >> 2] = $92; //@line 5883
      $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 5884
      HEAP32[$719 >> 2] = $94; //@line 5885
      $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 5886
      HEAP32[$720 >> 2] = $96; //@line 5887
      $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 5888
      HEAP32[$721 >> 2] = $98; //@line 5889
      $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 5890
      HEAP32[$722 >> 2] = $100; //@line 5891
      $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 5892
      HEAP32[$723 >> 2] = $102; //@line 5893
      $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 5894
      HEAP32[$724 >> 2] = $104; //@line 5895
      $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 5896
      HEAP32[$725 >> 2] = $106; //@line 5897
      $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 5898
      HEAP32[$726 >> 2] = $108; //@line 5899
      $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 5900
      HEAP32[$727 >> 2] = $110; //@line 5901
      $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 5902
      HEAP32[$728 >> 2] = $112; //@line 5903
      $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 5904
      HEAP32[$729 >> 2] = $114; //@line 5905
      $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 5906
      HEAP32[$730 >> 2] = $116; //@line 5907
      $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 5908
      HEAP32[$731 >> 2] = $118; //@line 5909
      $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 5910
      HEAP32[$732 >> 2] = $120; //@line 5911
      $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 5912
      HEAP32[$733 >> 2] = $122; //@line 5913
      $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 5914
      HEAP32[$734 >> 2] = $124; //@line 5915
      $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 5916
      HEAP32[$735 >> 2] = $126; //@line 5917
      $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 5918
      HEAP32[$736 >> 2] = $128; //@line 5919
      $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 5920
      HEAP32[$737 >> 2] = $130; //@line 5921
      $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 5922
      HEAP32[$738 >> 2] = $132; //@line 5923
      sp = STACKTOP; //@line 5924
      return;
     }
     HEAP8[___async_retval >> 0] = $672; //@line 5928
     ___async_unwind = 0; //@line 5929
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 5930
     $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 5931
     HEAP32[$673 >> 2] = $2; //@line 5932
     $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 5933
     HEAP32[$674 >> 2] = $4; //@line 5934
     $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 5935
     HEAP32[$675 >> 2] = $6; //@line 5936
     $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 5937
     HEAP32[$676 >> 2] = $8; //@line 5938
     $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 5939
     HEAP32[$677 >> 2] = $10; //@line 5940
     $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 5941
     HEAP32[$678 >> 2] = $12; //@line 5942
     $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 5943
     HEAP32[$679 >> 2] = $14; //@line 5944
     $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 5945
     HEAP32[$680 >> 2] = $16; //@line 5946
     $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 5947
     HEAP32[$681 >> 2] = $18; //@line 5948
     $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 5949
     HEAP32[$682 >> 2] = $20; //@line 5950
     $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 5951
     HEAP32[$683 >> 2] = $22; //@line 5952
     $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 5953
     HEAP32[$684 >> 2] = $24; //@line 5954
     $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 5955
     HEAP32[$685 >> 2] = $26; //@line 5956
     $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 5957
     HEAP32[$686 >> 2] = $28; //@line 5958
     $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 5959
     HEAP32[$687 >> 2] = $30; //@line 5960
     $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 5961
     HEAP32[$688 >> 2] = $32; //@line 5962
     $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 5963
     HEAP32[$689 >> 2] = $34; //@line 5964
     $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 5965
     HEAP32[$690 >> 2] = $36; //@line 5966
     $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 5967
     HEAP32[$691 >> 2] = $38; //@line 5968
     $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 5969
     HEAP32[$692 >> 2] = $40; //@line 5970
     $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 5971
     HEAP32[$693 >> 2] = $42; //@line 5972
     $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 5973
     HEAP32[$694 >> 2] = $44; //@line 5974
     $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 5975
     HEAP32[$695 >> 2] = $46; //@line 5976
     $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 5977
     HEAP32[$696 >> 2] = $48; //@line 5978
     $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 5979
     HEAP32[$697 >> 2] = $50; //@line 5980
     $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 5981
     HEAP32[$698 >> 2] = $52; //@line 5982
     $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 5983
     HEAP32[$699 >> 2] = $54; //@line 5984
     $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 5985
     HEAP32[$700 >> 2] = $56; //@line 5986
     $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 5987
     HEAP32[$701 >> 2] = $58; //@line 5988
     $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 5989
     HEAP32[$702 >> 2] = $60; //@line 5990
     $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 5991
     HEAP32[$703 >> 2] = $157; //@line 5992
     $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 5993
     HEAP32[$704 >> 2] = $64; //@line 5994
     $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 5995
     HEAP32[$705 >> 2] = $66; //@line 5996
     $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 5997
     HEAP32[$706 >> 2] = $68; //@line 5998
     $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 5999
     HEAP32[$707 >> 2] = $70; //@line 6000
     $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 6001
     HEAP32[$708 >> 2] = $72; //@line 6002
     $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 6003
     HEAP32[$709 >> 2] = $74; //@line 6004
     $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 6005
     HEAP32[$710 >> 2] = $76; //@line 6006
     $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 6007
     HEAP32[$711 >> 2] = $78; //@line 6008
     $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 6009
     HEAP32[$712 >> 2] = $80; //@line 6010
     $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 6011
     HEAP32[$713 >> 2] = $82; //@line 6012
     $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 6013
     HEAP32[$714 >> 2] = $84; //@line 6014
     $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 6015
     HEAP32[$715 >> 2] = $86; //@line 6016
     $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 6017
     HEAP32[$716 >> 2] = $88; //@line 6018
     $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 6019
     HEAP32[$717 >> 2] = $90; //@line 6020
     $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 6021
     HEAP32[$718 >> 2] = $92; //@line 6022
     $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 6023
     HEAP32[$719 >> 2] = $94; //@line 6024
     $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 6025
     HEAP32[$720 >> 2] = $96; //@line 6026
     $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 6027
     HEAP32[$721 >> 2] = $98; //@line 6028
     $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 6029
     HEAP32[$722 >> 2] = $100; //@line 6030
     $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 6031
     HEAP32[$723 >> 2] = $102; //@line 6032
     $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 6033
     HEAP32[$724 >> 2] = $104; //@line 6034
     $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 6035
     HEAP32[$725 >> 2] = $106; //@line 6036
     $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 6037
     HEAP32[$726 >> 2] = $108; //@line 6038
     $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 6039
     HEAP32[$727 >> 2] = $110; //@line 6040
     $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 6041
     HEAP32[$728 >> 2] = $112; //@line 6042
     $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 6043
     HEAP32[$729 >> 2] = $114; //@line 6044
     $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 6045
     HEAP32[$730 >> 2] = $116; //@line 6046
     $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 6047
     HEAP32[$731 >> 2] = $118; //@line 6048
     $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 6049
     HEAP32[$732 >> 2] = $120; //@line 6050
     $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 6051
     HEAP32[$733 >> 2] = $122; //@line 6052
     $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 6053
     HEAP32[$734 >> 2] = $124; //@line 6054
     $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 6055
     HEAP32[$735 >> 2] = $126; //@line 6056
     $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 6057
     HEAP32[$736 >> 2] = $128; //@line 6058
     $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 6059
     HEAP32[$737 >> 2] = $130; //@line 6060
     $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 6061
     HEAP32[$738 >> 2] = $132; //@line 6062
     sp = STACKTOP; //@line 6063
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3803, 5026, $48); //@line 6068
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$126 >> 2] | 0; //@line 6073
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 6076
     $759 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 6077
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 6080
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 6081
      HEAP32[$760 >> 2] = $2; //@line 6082
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 6083
      HEAP32[$761 >> 2] = $4; //@line 6084
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 6085
      HEAP32[$762 >> 2] = $6; //@line 6086
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 6087
      HEAP32[$763 >> 2] = $8; //@line 6088
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 6089
      HEAP32[$764 >> 2] = $10; //@line 6090
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 6091
      HEAP32[$765 >> 2] = $12; //@line 6092
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 6093
      HEAP32[$766 >> 2] = $14; //@line 6094
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 6095
      HEAP32[$767 >> 2] = $16; //@line 6096
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 6097
      HEAP32[$768 >> 2] = $18; //@line 6098
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 6099
      HEAP32[$769 >> 2] = $20; //@line 6100
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 6101
      HEAP32[$770 >> 2] = $22; //@line 6102
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 6103
      HEAP32[$771 >> 2] = $24; //@line 6104
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 6105
      HEAP32[$772 >> 2] = $26; //@line 6106
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 6107
      HEAP32[$773 >> 2] = $28; //@line 6108
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 6109
      HEAP32[$774 >> 2] = $30; //@line 6110
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 6111
      HEAP32[$775 >> 2] = $32; //@line 6112
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 6113
      HEAP32[$776 >> 2] = $34; //@line 6114
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 6115
      HEAP32[$777 >> 2] = $36; //@line 6116
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 6117
      HEAP32[$778 >> 2] = $38; //@line 6118
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 6119
      HEAP32[$779 >> 2] = $40; //@line 6120
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 6121
      HEAP32[$780 >> 2] = $42; //@line 6122
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 6123
      HEAP32[$781 >> 2] = $44; //@line 6124
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 6125
      HEAP32[$782 >> 2] = $46; //@line 6126
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 6127
      HEAP32[$783 >> 2] = $48; //@line 6128
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 6129
      HEAP32[$784 >> 2] = $50; //@line 6130
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 6131
      HEAP32[$785 >> 2] = $52; //@line 6132
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 6133
      HEAP32[$786 >> 2] = $54; //@line 6134
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 6135
      HEAP32[$787 >> 2] = $56; //@line 6136
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 6137
      HEAP32[$788 >> 2] = $58; //@line 6138
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 6139
      HEAP32[$789 >> 2] = $60; //@line 6140
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 6141
      HEAP32[$790 >> 2] = $157; //@line 6142
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 6143
      HEAP32[$791 >> 2] = $64; //@line 6144
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 6145
      HEAP32[$792 >> 2] = $66; //@line 6146
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 6147
      HEAP32[$793 >> 2] = $68; //@line 6148
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 6149
      HEAP32[$794 >> 2] = $70; //@line 6150
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 6151
      HEAP32[$795 >> 2] = $72; //@line 6152
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 6153
      HEAP32[$796 >> 2] = $74; //@line 6154
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 6155
      HEAP32[$797 >> 2] = $76; //@line 6156
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 6157
      HEAP32[$798 >> 2] = $78; //@line 6158
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 6159
      HEAP32[$799 >> 2] = $80; //@line 6160
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 6161
      HEAP32[$800 >> 2] = $82; //@line 6162
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 6163
      HEAP32[$801 >> 2] = $84; //@line 6164
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 6165
      HEAP32[$802 >> 2] = $86; //@line 6166
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 6167
      HEAP32[$803 >> 2] = $88; //@line 6168
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 6169
      HEAP32[$804 >> 2] = $90; //@line 6170
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 6171
      HEAP32[$805 >> 2] = $92; //@line 6172
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 6173
      HEAP32[$806 >> 2] = $94; //@line 6174
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 6175
      HEAP32[$807 >> 2] = $96; //@line 6176
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 6177
      HEAP32[$808 >> 2] = $98; //@line 6178
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 6179
      HEAP32[$809 >> 2] = $100; //@line 6180
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 6181
      HEAP32[$810 >> 2] = $102; //@line 6182
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 6183
      HEAP32[$811 >> 2] = $104; //@line 6184
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 6185
      HEAP32[$812 >> 2] = $106; //@line 6186
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 6187
      HEAP32[$813 >> 2] = $108; //@line 6188
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 6189
      HEAP32[$814 >> 2] = $110; //@line 6190
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 6191
      HEAP32[$815 >> 2] = $112; //@line 6192
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 6193
      HEAP32[$816 >> 2] = $114; //@line 6194
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 6195
      HEAP32[$817 >> 2] = $116; //@line 6196
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 6197
      HEAP32[$818 >> 2] = $118; //@line 6198
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 6199
      HEAP32[$819 >> 2] = $120; //@line 6200
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 6201
      HEAP32[$820 >> 2] = $122; //@line 6202
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 6203
      HEAP32[$821 >> 2] = $124; //@line 6204
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 6205
      HEAP32[$822 >> 2] = $126; //@line 6206
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 6207
      HEAP32[$823 >> 2] = $128; //@line 6208
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 6209
      HEAP32[$824 >> 2] = $130; //@line 6210
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 6211
      HEAP32[$825 >> 2] = $132; //@line 6212
      sp = STACKTOP; //@line 6213
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 6217
     ___async_unwind = 0; //@line 6218
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 6219
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 6220
     HEAP32[$760 >> 2] = $2; //@line 6221
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 6222
     HEAP32[$761 >> 2] = $4; //@line 6223
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 6224
     HEAP32[$762 >> 2] = $6; //@line 6225
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 6226
     HEAP32[$763 >> 2] = $8; //@line 6227
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 6228
     HEAP32[$764 >> 2] = $10; //@line 6229
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 6230
     HEAP32[$765 >> 2] = $12; //@line 6231
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 6232
     HEAP32[$766 >> 2] = $14; //@line 6233
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 6234
     HEAP32[$767 >> 2] = $16; //@line 6235
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 6236
     HEAP32[$768 >> 2] = $18; //@line 6237
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 6238
     HEAP32[$769 >> 2] = $20; //@line 6239
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 6240
     HEAP32[$770 >> 2] = $22; //@line 6241
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 6242
     HEAP32[$771 >> 2] = $24; //@line 6243
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 6244
     HEAP32[$772 >> 2] = $26; //@line 6245
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 6246
     HEAP32[$773 >> 2] = $28; //@line 6247
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 6248
     HEAP32[$774 >> 2] = $30; //@line 6249
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 6250
     HEAP32[$775 >> 2] = $32; //@line 6251
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 6252
     HEAP32[$776 >> 2] = $34; //@line 6253
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 6254
     HEAP32[$777 >> 2] = $36; //@line 6255
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 6256
     HEAP32[$778 >> 2] = $38; //@line 6257
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 6258
     HEAP32[$779 >> 2] = $40; //@line 6259
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 6260
     HEAP32[$780 >> 2] = $42; //@line 6261
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 6262
     HEAP32[$781 >> 2] = $44; //@line 6263
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 6264
     HEAP32[$782 >> 2] = $46; //@line 6265
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 6266
     HEAP32[$783 >> 2] = $48; //@line 6267
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 6268
     HEAP32[$784 >> 2] = $50; //@line 6269
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 6270
     HEAP32[$785 >> 2] = $52; //@line 6271
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 6272
     HEAP32[$786 >> 2] = $54; //@line 6273
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 6274
     HEAP32[$787 >> 2] = $56; //@line 6275
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 6276
     HEAP32[$788 >> 2] = $58; //@line 6277
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 6278
     HEAP32[$789 >> 2] = $60; //@line 6279
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 6280
     HEAP32[$790 >> 2] = $157; //@line 6281
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 6282
     HEAP32[$791 >> 2] = $64; //@line 6283
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 6284
     HEAP32[$792 >> 2] = $66; //@line 6285
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 6286
     HEAP32[$793 >> 2] = $68; //@line 6287
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 6288
     HEAP32[$794 >> 2] = $70; //@line 6289
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 6290
     HEAP32[$795 >> 2] = $72; //@line 6291
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 6292
     HEAP32[$796 >> 2] = $74; //@line 6293
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 6294
     HEAP32[$797 >> 2] = $76; //@line 6295
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 6296
     HEAP32[$798 >> 2] = $78; //@line 6297
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 6298
     HEAP32[$799 >> 2] = $80; //@line 6299
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 6300
     HEAP32[$800 >> 2] = $82; //@line 6301
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 6302
     HEAP32[$801 >> 2] = $84; //@line 6303
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 6304
     HEAP32[$802 >> 2] = $86; //@line 6305
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 6306
     HEAP32[$803 >> 2] = $88; //@line 6307
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 6308
     HEAP32[$804 >> 2] = $90; //@line 6309
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 6310
     HEAP32[$805 >> 2] = $92; //@line 6311
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 6312
     HEAP32[$806 >> 2] = $94; //@line 6313
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 6314
     HEAP32[$807 >> 2] = $96; //@line 6315
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 6316
     HEAP32[$808 >> 2] = $98; //@line 6317
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 6318
     HEAP32[$809 >> 2] = $100; //@line 6319
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 6320
     HEAP32[$810 >> 2] = $102; //@line 6321
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 6322
     HEAP32[$811 >> 2] = $104; //@line 6323
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 6324
     HEAP32[$812 >> 2] = $106; //@line 6325
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 6326
     HEAP32[$813 >> 2] = $108; //@line 6327
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 6328
     HEAP32[$814 >> 2] = $110; //@line 6329
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 6330
     HEAP32[$815 >> 2] = $112; //@line 6331
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 6332
     HEAP32[$816 >> 2] = $114; //@line 6333
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 6334
     HEAP32[$817 >> 2] = $116; //@line 6335
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 6336
     HEAP32[$818 >> 2] = $118; //@line 6337
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 6338
     HEAP32[$819 >> 2] = $120; //@line 6339
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 6340
     HEAP32[$820 >> 2] = $122; //@line 6341
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 6342
     HEAP32[$821 >> 2] = $124; //@line 6343
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 6344
     HEAP32[$822 >> 2] = $126; //@line 6345
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 6346
     HEAP32[$823 >> 2] = $128; //@line 6347
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 6348
     HEAP32[$824 >> 2] = $130; //@line 6349
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 6350
     HEAP32[$825 >> 2] = $132; //@line 6351
     sp = STACKTOP; //@line 6352
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3803, 5152, $46); //@line 6357
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3803, 5213, $20); //@line 6362
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3803, 5274, $72); //@line 6367
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3803, 5335, $60); //@line 6372
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3803, 5395, $120); //@line 6377
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3803, 5455, $74); //@line 6382
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $92 | 0) >= ($80 | 0)) {
      $936 = ___async_retval; //@line 6391
      HEAP32[$936 >> 2] = $38; //@line 6392
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 6398
      HEAP32[$36 >> 2] = $926; //@line 6399
      $927 = $926; //@line 6400
      $929 = $92 - $927 + $80 | 0; //@line 6402
      HEAP16[$82 + 24 >> 1] = $929; //@line 6405
      if ($929 & 65535 | 0) {
       HEAP32[$82 + 36 >> 2] = $927; //@line 6410
       $936 = ___async_retval; //@line 6411
       HEAP32[$936 >> 2] = $38; //@line 6412
       return;
      }
     } else {
      _mbed_tracef(2, 3803, 5502, $50); //@line 6416
     }
     HEAP32[$82 + 4 >> 2] = 1; //@line 6419
     $936 = ___async_retval; //@line 6420
     HEAP32[$936 >> 2] = $38; //@line 6421
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3803, 4763, $122); //@line 6427
  }
 } while (0);
 HEAP32[$82 + 4 >> 2] = 1; //@line 6431
 $936 = ___async_retval; //@line 6432
 HEAP32[$936 >> 2] = $38; //@line 6433
 return;
}
function _sn_coap_parser__async_cb_31($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $432 = 0, $435 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $512 = 0, $513 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $587 = 0, $590 = 0, $591 = 0, $596 = 0, $599 = 0, $6 = 0, $60 = 0, $601 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $596$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 6488
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6490
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6492
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6494
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6496
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6498
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6500
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6502
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6504
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6506
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6508
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6510
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6512
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6514
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6516
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6518
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6520
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6522
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6524
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6526
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6528
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 6530
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 6532
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 6534
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 6536
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 6538
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 6540
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 6542
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 6544
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 6546
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 6548
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 6552
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 6554
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 6556
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 6558
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 6560
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 6562
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 6564
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 6566
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 6568
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 6570
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 6572
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 6574
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 6576
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 6578
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 6580
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 6582
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 6584
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 6586
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 6588
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 6590
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 6592
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 6594
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 6596
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 6598
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 6600
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 6602
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 6604
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 6606
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 6608
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 6610
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 6612
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 6614
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 6616
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 6618
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 6620
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 124 >> 2] | 0; //@line 6626
   L3 : while (1) {
    $917 = HEAP32[$68 >> 2] | 0; //@line 6628
    $918 = $917 - $92 | 0; //@line 6629
    $137 = $917; //@line 6632
    if (($918 | 0) > ($80 | 0)) {
     break L2;
    }
    if (!(($80 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 6639
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 6642
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 6645
     break;
    }
    $140 = $trunc277$i & 15; //@line 6649
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 6650
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 6655
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 6663
      $$sink214$i = 13; //@line 6663
      $$sink3$i = 1; //@line 6663
      label = 8; //@line 6664
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 6676
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 6676
      $$sink3$i = 2; //@line 6676
      label = 8; //@line 6677
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 6681
      $159 = $137; //@line 6681
      $937 = $917; //@line 6681
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 6685
     $154 = $137 + $$sink3$i | 0; //@line 6687
     HEAP32[$36 >> 2] = $154; //@line 6688
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 6690
     $159 = $154; //@line 6690
     $937 = $154; //@line 6690
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 6693
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 6697
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 6705
      $$sink216$i = 13; //@line 6705
      $$sink8$i = 1; //@line 6705
      label = 13; //@line 6706
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 6718
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 6718
      $$sink8$i = 2; //@line 6718
      label = 13; //@line 6719
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 6723
      $174 = $937; //@line 6723
      $189 = $159; //@line 6723
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 6727
     $171 = $159 + $$sink8$i | 0; //@line 6729
     HEAP32[$36 >> 2] = $171; //@line 6730
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 6732
     $174 = $171; //@line 6732
     $189 = $171; //@line 6732
    }
    $$1202$i = $$1202$in$i & 65535; //@line 6734
    $175 = $100 - $174 & 65535; //@line 6736
    $trunc$i = $157 & 65535; //@line 6737
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 62; //@line 6741
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$126 >> 2] | 0)) {
        label = 16; //@line 6749
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 6754
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 6759
         break L3;
         break;
        }
       case 3:
        {
         label = 42; //@line 6764
         break L3;
         break;
        }
       case 8:
        {
         label = 48; //@line 6769
         break L3;
         break;
        }
       case 20:
        {
         label = 59; //@line 6774
         break L3;
         break;
        }
       case 11:
        {
         label = 62; //@line 6779
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 6784
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 6795
          break L3;
         }
         $268 = $189 + 1 | 0; //@line 6798
         HEAP32[$36 >> 2] = $268; //@line 6799
         $269 = $$1202$in$i & 255; //@line 6800
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 6803
         } else {
          $$045$i221$i = $269; //@line 6805
          $$06$i220$i = 0; //@line 6805
          $274 = $268; //@line 6805
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 6807
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 6809
           HEAP32[$36 >> 2] = $274; //@line 6810
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 6813
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 6816
            break;
           } else {
            $$06$i220$i = $277; //@line 6819
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 6825
         $$reg2mem$0 = $157; //@line 6826
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 55; //@line 6833
          break L3;
         }
         $587 = (HEAP32[$126 >> 2] | 0) + 28 | 0; //@line 6837
         if ((HEAP32[$587 >> 2] | 0) != -1) {
          label = 55; //@line 6841
          break L3;
         }
         $590 = $189 + 1 | 0; //@line 6844
         HEAP32[$36 >> 2] = $590; //@line 6845
         $591 = $$1202$in$i & 255; //@line 6846
         if (!($591 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 6849
         } else {
          $$045$i263$i = $591; //@line 6851
          $$06$i262$i = 0; //@line 6851
          $596 = $590; //@line 6851
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 6853
           $596$looptemp = $596;
           $596 = $596 + 1 | 0; //@line 6855
           HEAP32[$36 >> 2] = $596; //@line 6856
           $599 = $$06$i262$i << 8 | HEAPU8[$596$looptemp >> 0]; //@line 6859
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $599; //@line 6862
            break;
           } else {
            $$06$i262$i = $599; //@line 6865
           }
          }
         }
         HEAP32[$587 >> 2] = $$0$lcssa$i265$i; //@line 6869
         $$reg2mem$0 = $157; //@line 6870
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 6877
          break L3;
         }
         $742 = (HEAP32[$126 >> 2] | 0) + 32 | 0; //@line 6881
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 6885
          break L3;
         }
         $745 = $189 + 1 | 0; //@line 6888
         HEAP32[$36 >> 2] = $745; //@line 6889
         $746 = $$1202$in$i & 255; //@line 6890
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 6893
         } else {
          $$045$i270$i = $746; //@line 6895
          $$06$i269$i = 0; //@line 6895
          $751 = $745; //@line 6895
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 6897
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 6899
           HEAP32[$36 >> 2] = $751; //@line 6900
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 6903
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 6906
            break;
           } else {
            $$06$i269$i = $754; //@line 6909
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 6913
         $$reg2mem$0 = $157; //@line 6914
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 6921
          break L3;
         }
         $829 = (HEAP32[$126 >> 2] | 0) + 40 | 0; //@line 6925
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 6929
          break L3;
         }
         $832 = $189 + 1 | 0; //@line 6932
         HEAP32[$36 >> 2] = $832; //@line 6933
         $833 = $$1202$in$i & 255; //@line 6934
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 6937
         } else {
          $$045$i256$i = $833; //@line 6939
          $$06$i255$i = 0; //@line 6939
          $838 = $832; //@line 6939
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 6941
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 6943
           HEAP32[$36 >> 2] = $838; //@line 6944
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 6947
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 6950
            break;
           } else {
            $$06$i255$i = $841; //@line 6953
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 6957
         $$reg2mem$0 = $157; //@line 6958
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 6965
          break L3;
         }
         $845 = (HEAP32[$126 >> 2] | 0) + 36 | 0; //@line 6969
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 6973
          break L3;
         }
         $848 = $189 + 1 | 0; //@line 6976
         HEAP32[$36 >> 2] = $848; //@line 6977
         $849 = $$1202$in$i & 255; //@line 6978
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 6981
         } else {
          $$045$i249$i = $849; //@line 6983
          $$06$i248$i = 0; //@line 6983
          $854 = $848; //@line 6983
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 6985
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 6987
           HEAP32[$36 >> 2] = $854; //@line 6988
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 6991
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 6994
            break;
           } else {
            $$06$i248$i = $857; //@line 6997
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 7001
         $$reg2mem$0 = $157; //@line 7002
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 7009
          break L3;
         }
         $861 = (HEAP32[$126 >> 2] | 0) + 12 | 0; //@line 7013
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 7017
          break L3;
         }
         $864 = $189 + 1 | 0; //@line 7020
         HEAP32[$36 >> 2] = $864; //@line 7021
         $865 = $$1202$in$i & 255; //@line 7022
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 7025
         } else {
          $$045$i242$i = $865; //@line 7027
          $$06$i241$i = 0; //@line 7027
          $870 = $864; //@line 7027
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 7029
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 7031
           HEAP32[$36 >> 2] = $870; //@line 7032
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 7035
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 7038
            break;
           } else {
            $$06$i241$i = $873; //@line 7041
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 7045
         $$reg2mem$0 = $157; //@line 7046
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 7053
          break L3;
         }
         $877 = (HEAP32[$126 >> 2] | 0) + 1 | 0; //@line 7057
         $878 = HEAP8[$877 >> 0] | 0; //@line 7058
         if ($878 & 1) {
          label = 94; //@line 7062
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 7066
         $883 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 7068
         HEAP32[$36 >> 2] = $883; //@line 7069
         $884 = $$1202$in$i & 255; //@line 7070
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 7073
         } else {
          $$045$i235$i = $884; //@line 7075
          $$06$i234$i = 0; //@line 7075
          $889 = $883; //@line 7075
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 7077
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 7079
           HEAP32[$36 >> 2] = $889; //@line 7080
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 7083
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 7086
            break;
           } else {
            $$06$i234$i = $892; //@line 7089
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 7095
         $$reg2mem$0 = $157; //@line 7096
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 7103
          break L3;
         }
         $898 = (HEAP32[$126 >> 2] | 0) + 1 | 0; //@line 7107
         $899 = HEAP8[$898 >> 0] | 0; //@line 7108
         if ($899 & 2) {
          label = 100; //@line 7112
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 7116
         $904 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 7118
         HEAP32[$36 >> 2] = $904; //@line 7119
         $905 = $$1202$in$i & 255; //@line 7120
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 7123
         } else {
          $$045$i228$i = $905; //@line 7125
          $$06$i227$i = 0; //@line 7125
          $910 = $904; //@line 7125
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 7127
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 7129
           HEAP32[$36 >> 2] = $910; //@line 7130
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 7133
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 7136
            break;
           } else {
            $$06$i227$i = $913; //@line 7139
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 7145
         $$reg2mem$0 = $157; //@line 7146
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 7151
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 7161
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 7168
     break;
    }
    if ((HEAP32[$10 >> 2] | 0) != -1) {
     label = 22; //@line 7174
     break;
    }
    $256 = $189 + 1 | 0; //@line 7177
    HEAP32[$36 >> 2] = $256; //@line 7178
    $257 = $$1202$in$i & 255; //@line 7179
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 7182
    } else {
     $$045$i$i = $257; //@line 7184
     $$06$i$i = 0; //@line 7184
     $262 = $256; //@line 7184
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 7186
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 7188
      HEAP32[$36 >> 2] = $262; //@line 7189
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 7192
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 7195
       break;
      } else {
       $$06$i$i = $265; //@line 7198
      }
     }
    }
    HEAP32[$10 >> 2] = $$0$lcssa$i$i; //@line 7202
    $$reg2mem$0 = $157; //@line 7203
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3803, 4066, $76); //@line 7207
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3803, 4124, $28); //@line 7212
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$128 >> 2] | 0; //@line 7217
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 7218
     $179 = FUNCTION_TABLE_ii[$178 & 31](68) | 0; //@line 7219
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 7222
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 7223
      HEAP32[$180 >> 2] = $2; //@line 7224
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 7225
      HEAP32[$181 >> 2] = $4; //@line 7226
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 7227
      HEAP32[$182 >> 2] = $6; //@line 7228
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 7229
      HEAP32[$183 >> 2] = $8; //@line 7230
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 7231
      HEAP32[$184 >> 2] = $10; //@line 7232
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 7233
      HEAP32[$185 >> 2] = $12; //@line 7234
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 7235
      HEAP32[$186 >> 2] = $14; //@line 7236
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 7237
      HEAP32[$187 >> 2] = $16; //@line 7238
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 7239
      HEAP32[$188 >> 2] = $189; //@line 7240
      $190 = $ReallocAsyncCtx3 + 40 | 0; //@line 7241
      HEAP32[$190 >> 2] = $18; //@line 7242
      $191 = $ReallocAsyncCtx3 + 44 | 0; //@line 7243
      HEAP32[$191 >> 2] = $20; //@line 7244
      $192 = $ReallocAsyncCtx3 + 48 | 0; //@line 7245
      HEAP32[$192 >> 2] = $22; //@line 7246
      $193 = $ReallocAsyncCtx3 + 52 | 0; //@line 7247
      HEAP32[$193 >> 2] = $24; //@line 7248
      $194 = $ReallocAsyncCtx3 + 56 | 0; //@line 7249
      HEAP32[$194 >> 2] = $26; //@line 7250
      $195 = $ReallocAsyncCtx3 + 60 | 0; //@line 7251
      HEAP32[$195 >> 2] = $28; //@line 7252
      $196 = $ReallocAsyncCtx3 + 64 | 0; //@line 7253
      HEAP32[$196 >> 2] = $30; //@line 7254
      $197 = $ReallocAsyncCtx3 + 68 | 0; //@line 7255
      HEAP32[$197 >> 2] = $32; //@line 7256
      $198 = $ReallocAsyncCtx3 + 72 | 0; //@line 7257
      HEAP32[$198 >> 2] = $34; //@line 7258
      $199 = $ReallocAsyncCtx3 + 76 | 0; //@line 7259
      HEAP32[$199 >> 2] = $36; //@line 7260
      $200 = $ReallocAsyncCtx3 + 80 | 0; //@line 7261
      HEAP32[$200 >> 2] = $38; //@line 7262
      $201 = $ReallocAsyncCtx3 + 84 | 0; //@line 7263
      HEAP32[$201 >> 2] = $$1202$in$i; //@line 7264
      $202 = $ReallocAsyncCtx3 + 88 | 0; //@line 7265
      HEAP32[$202 >> 2] = $42; //@line 7266
      $203 = $ReallocAsyncCtx3 + 92 | 0; //@line 7267
      HEAP32[$203 >> 2] = $44; //@line 7268
      $204 = $ReallocAsyncCtx3 + 96 | 0; //@line 7269
      HEAP16[$204 >> 1] = $$1202$i; //@line 7270
      $205 = $ReallocAsyncCtx3 + 100 | 0; //@line 7271
      HEAP32[$205 >> 2] = $46; //@line 7272
      $206 = $ReallocAsyncCtx3 + 104 | 0; //@line 7273
      HEAP32[$206 >> 2] = $48; //@line 7274
      $207 = $ReallocAsyncCtx3 + 108 | 0; //@line 7275
      HEAP32[$207 >> 2] = $50; //@line 7276
      $208 = $ReallocAsyncCtx3 + 112 | 0; //@line 7277
      HEAP32[$208 >> 2] = $52; //@line 7278
      $209 = $ReallocAsyncCtx3 + 116 | 0; //@line 7279
      HEAP32[$209 >> 2] = $54; //@line 7280
      $210 = $ReallocAsyncCtx3 + 120 | 0; //@line 7281
      HEAP32[$210 >> 2] = $40; //@line 7282
      $211 = $ReallocAsyncCtx3 + 124 | 0; //@line 7283
      HEAP32[$211 >> 2] = $56; //@line 7284
      $212 = $ReallocAsyncCtx3 + 128 | 0; //@line 7285
      HEAP32[$212 >> 2] = $58; //@line 7286
      $213 = $ReallocAsyncCtx3 + 132 | 0; //@line 7287
      HEAP32[$213 >> 2] = $60; //@line 7288
      $214 = $ReallocAsyncCtx3 + 136 | 0; //@line 7289
      HEAP32[$214 >> 2] = $157; //@line 7290
      $215 = $ReallocAsyncCtx3 + 140 | 0; //@line 7291
      HEAP32[$215 >> 2] = $64; //@line 7292
      $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 7293
      HEAP32[$216 >> 2] = $66; //@line 7294
      $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 7295
      HEAP32[$217 >> 2] = $68; //@line 7296
      $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 7297
      HEAP32[$218 >> 2] = $70; //@line 7298
      $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 7299
      HEAP16[$219 >> 1] = $175; //@line 7300
      $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 7301
      HEAP32[$220 >> 2] = $72; //@line 7302
      $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 7303
      HEAP32[$221 >> 2] = $74; //@line 7304
      $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 7305
      HEAP32[$222 >> 2] = $76; //@line 7306
      $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 7307
      HEAP32[$223 >> 2] = $78; //@line 7308
      $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 7309
      HEAP32[$224 >> 2] = $80; //@line 7310
      $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 7311
      HEAP32[$225 >> 2] = $82; //@line 7312
      $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 7313
      HEAP32[$226 >> 2] = $84; //@line 7314
      $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 7315
      HEAP32[$227 >> 2] = $86; //@line 7316
      $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 7317
      HEAP32[$228 >> 2] = $88; //@line 7318
      $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 7319
      HEAP32[$229 >> 2] = $90; //@line 7320
      $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 7321
      HEAP32[$230 >> 2] = $92; //@line 7322
      $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 7323
      HEAP32[$231 >> 2] = $94; //@line 7324
      $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 7325
      HEAP32[$232 >> 2] = $96; //@line 7326
      $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 7327
      HEAP32[$233 >> 2] = $98; //@line 7328
      $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 7329
      HEAP32[$234 >> 2] = $100; //@line 7330
      $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 7331
      HEAP32[$235 >> 2] = $102; //@line 7332
      $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 7333
      HEAP32[$236 >> 2] = $104; //@line 7334
      $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 7335
      HEAP32[$237 >> 2] = $106; //@line 7336
      $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 7337
      HEAP32[$238 >> 2] = $108; //@line 7338
      $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 7339
      HEAP32[$239 >> 2] = $110; //@line 7340
      $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 7341
      HEAP32[$240 >> 2] = $112; //@line 7342
      $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 7343
      HEAP32[$241 >> 2] = $114; //@line 7344
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 7345
      HEAP32[$242 >> 2] = $116; //@line 7346
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 7347
      HEAP32[$243 >> 2] = $118; //@line 7348
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 7349
      HEAP32[$244 >> 2] = $120; //@line 7350
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 7351
      HEAP32[$245 >> 2] = $122; //@line 7352
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 7353
      HEAP32[$246 >> 2] = $124; //@line 7354
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 7355
      HEAP32[$247 >> 2] = $126; //@line 7356
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 7357
      HEAP16[$248 >> 1] = $trunc$i; //@line 7358
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 7359
      HEAP32[$249 >> 2] = $128; //@line 7360
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 7361
      HEAP32[$250 >> 2] = $130; //@line 7362
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 7363
      HEAP32[$251 >> 2] = $132; //@line 7364
      sp = STACKTOP; //@line 7365
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 7369
     ___async_unwind = 0; //@line 7370
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 7371
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 7372
     HEAP32[$180 >> 2] = $2; //@line 7373
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 7374
     HEAP32[$181 >> 2] = $4; //@line 7375
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 7376
     HEAP32[$182 >> 2] = $6; //@line 7377
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 7378
     HEAP32[$183 >> 2] = $8; //@line 7379
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 7380
     HEAP32[$184 >> 2] = $10; //@line 7381
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 7382
     HEAP32[$185 >> 2] = $12; //@line 7383
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 7384
     HEAP32[$186 >> 2] = $14; //@line 7385
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 7386
     HEAP32[$187 >> 2] = $16; //@line 7387
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 7388
     HEAP32[$188 >> 2] = $189; //@line 7389
     $190 = $ReallocAsyncCtx3 + 40 | 0; //@line 7390
     HEAP32[$190 >> 2] = $18; //@line 7391
     $191 = $ReallocAsyncCtx3 + 44 | 0; //@line 7392
     HEAP32[$191 >> 2] = $20; //@line 7393
     $192 = $ReallocAsyncCtx3 + 48 | 0; //@line 7394
     HEAP32[$192 >> 2] = $22; //@line 7395
     $193 = $ReallocAsyncCtx3 + 52 | 0; //@line 7396
     HEAP32[$193 >> 2] = $24; //@line 7397
     $194 = $ReallocAsyncCtx3 + 56 | 0; //@line 7398
     HEAP32[$194 >> 2] = $26; //@line 7399
     $195 = $ReallocAsyncCtx3 + 60 | 0; //@line 7400
     HEAP32[$195 >> 2] = $28; //@line 7401
     $196 = $ReallocAsyncCtx3 + 64 | 0; //@line 7402
     HEAP32[$196 >> 2] = $30; //@line 7403
     $197 = $ReallocAsyncCtx3 + 68 | 0; //@line 7404
     HEAP32[$197 >> 2] = $32; //@line 7405
     $198 = $ReallocAsyncCtx3 + 72 | 0; //@line 7406
     HEAP32[$198 >> 2] = $34; //@line 7407
     $199 = $ReallocAsyncCtx3 + 76 | 0; //@line 7408
     HEAP32[$199 >> 2] = $36; //@line 7409
     $200 = $ReallocAsyncCtx3 + 80 | 0; //@line 7410
     HEAP32[$200 >> 2] = $38; //@line 7411
     $201 = $ReallocAsyncCtx3 + 84 | 0; //@line 7412
     HEAP32[$201 >> 2] = $$1202$in$i; //@line 7413
     $202 = $ReallocAsyncCtx3 + 88 | 0; //@line 7414
     HEAP32[$202 >> 2] = $42; //@line 7415
     $203 = $ReallocAsyncCtx3 + 92 | 0; //@line 7416
     HEAP32[$203 >> 2] = $44; //@line 7417
     $204 = $ReallocAsyncCtx3 + 96 | 0; //@line 7418
     HEAP16[$204 >> 1] = $$1202$i; //@line 7419
     $205 = $ReallocAsyncCtx3 + 100 | 0; //@line 7420
     HEAP32[$205 >> 2] = $46; //@line 7421
     $206 = $ReallocAsyncCtx3 + 104 | 0; //@line 7422
     HEAP32[$206 >> 2] = $48; //@line 7423
     $207 = $ReallocAsyncCtx3 + 108 | 0; //@line 7424
     HEAP32[$207 >> 2] = $50; //@line 7425
     $208 = $ReallocAsyncCtx3 + 112 | 0; //@line 7426
     HEAP32[$208 >> 2] = $52; //@line 7427
     $209 = $ReallocAsyncCtx3 + 116 | 0; //@line 7428
     HEAP32[$209 >> 2] = $54; //@line 7429
     $210 = $ReallocAsyncCtx3 + 120 | 0; //@line 7430
     HEAP32[$210 >> 2] = $40; //@line 7431
     $211 = $ReallocAsyncCtx3 + 124 | 0; //@line 7432
     HEAP32[$211 >> 2] = $56; //@line 7433
     $212 = $ReallocAsyncCtx3 + 128 | 0; //@line 7434
     HEAP32[$212 >> 2] = $58; //@line 7435
     $213 = $ReallocAsyncCtx3 + 132 | 0; //@line 7436
     HEAP32[$213 >> 2] = $60; //@line 7437
     $214 = $ReallocAsyncCtx3 + 136 | 0; //@line 7438
     HEAP32[$214 >> 2] = $157; //@line 7439
     $215 = $ReallocAsyncCtx3 + 140 | 0; //@line 7440
     HEAP32[$215 >> 2] = $64; //@line 7441
     $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 7442
     HEAP32[$216 >> 2] = $66; //@line 7443
     $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 7444
     HEAP32[$217 >> 2] = $68; //@line 7445
     $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 7446
     HEAP32[$218 >> 2] = $70; //@line 7447
     $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 7448
     HEAP16[$219 >> 1] = $175; //@line 7449
     $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 7450
     HEAP32[$220 >> 2] = $72; //@line 7451
     $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 7452
     HEAP32[$221 >> 2] = $74; //@line 7453
     $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 7454
     HEAP32[$222 >> 2] = $76; //@line 7455
     $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 7456
     HEAP32[$223 >> 2] = $78; //@line 7457
     $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 7458
     HEAP32[$224 >> 2] = $80; //@line 7459
     $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 7460
     HEAP32[$225 >> 2] = $82; //@line 7461
     $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 7462
     HEAP32[$226 >> 2] = $84; //@line 7463
     $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 7464
     HEAP32[$227 >> 2] = $86; //@line 7465
     $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 7466
     HEAP32[$228 >> 2] = $88; //@line 7467
     $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 7468
     HEAP32[$229 >> 2] = $90; //@line 7469
     $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 7470
     HEAP32[$230 >> 2] = $92; //@line 7471
     $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 7472
     HEAP32[$231 >> 2] = $94; //@line 7473
     $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 7474
     HEAP32[$232 >> 2] = $96; //@line 7475
     $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 7476
     HEAP32[$233 >> 2] = $98; //@line 7477
     $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 7478
     HEAP32[$234 >> 2] = $100; //@line 7479
     $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 7480
     HEAP32[$235 >> 2] = $102; //@line 7481
     $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 7482
     HEAP32[$236 >> 2] = $104; //@line 7483
     $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 7484
     HEAP32[$237 >> 2] = $106; //@line 7485
     $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 7486
     HEAP32[$238 >> 2] = $108; //@line 7487
     $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 7488
     HEAP32[$239 >> 2] = $110; //@line 7489
     $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 7490
     HEAP32[$240 >> 2] = $112; //@line 7491
     $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 7492
     HEAP32[$241 >> 2] = $114; //@line 7493
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 7494
     HEAP32[$242 >> 2] = $116; //@line 7495
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 7496
     HEAP32[$243 >> 2] = $118; //@line 7497
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 7498
     HEAP32[$244 >> 2] = $120; //@line 7499
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 7500
     HEAP32[$245 >> 2] = $122; //@line 7501
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 7502
     HEAP32[$246 >> 2] = $124; //@line 7503
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 7504
     HEAP32[$247 >> 2] = $126; //@line 7505
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 7506
     HEAP16[$248 >> 1] = $trunc$i; //@line 7507
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 7508
     HEAP32[$249 >> 2] = $128; //@line 7509
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 7510
     HEAP32[$250 >> 2] = $130; //@line 7511
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 7512
     HEAP32[$251 >> 2] = $132; //@line 7513
     sp = STACKTOP; //@line 7514
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3803, 4238, $12); //@line 7519
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3803, 4307, $26); //@line 7524
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 7529
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$126 >> 2] | 0; //@line 7533
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 7539
       $289 = $189 + 1 | 0; //@line 7540
       HEAP32[$36 >> 2] = $289; //@line 7541
       $290 = HEAP32[$128 >> 2] | 0; //@line 7542
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 7543
       $291 = FUNCTION_TABLE_ii[$290 & 31]($$1202$i) | 0; //@line 7544
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 7547
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 7548
        HEAP32[$292 >> 2] = $2; //@line 7549
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 7550
        HEAP32[$293 >> 2] = $4; //@line 7551
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 7552
        HEAP32[$294 >> 2] = $6; //@line 7553
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 7554
        HEAP32[$295 >> 2] = $8; //@line 7555
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 7556
        HEAP32[$296 >> 2] = $10; //@line 7557
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 7558
        HEAP32[$297 >> 2] = $12; //@line 7559
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 7560
        HEAP32[$298 >> 2] = $14; //@line 7561
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 7562
        HEAP32[$299 >> 2] = $16; //@line 7563
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 7564
        HEAP32[$300 >> 2] = $18; //@line 7565
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 7566
        HEAP32[$301 >> 2] = $20; //@line 7567
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 7568
        HEAP32[$302 >> 2] = $22; //@line 7569
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 7570
        HEAP32[$303 >> 2] = $24; //@line 7571
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 7572
        HEAP32[$304 >> 2] = $26; //@line 7573
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 7574
        HEAP32[$305 >> 2] = $28; //@line 7575
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 7576
        HEAP32[$306 >> 2] = $30; //@line 7577
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 7578
        HEAP32[$307 >> 2] = $32; //@line 7579
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 7580
        HEAP32[$308 >> 2] = $281; //@line 7581
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 7582
        HEAP32[$309 >> 2] = $36; //@line 7583
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 7584
        HEAP32[$310 >> 2] = $34; //@line 7585
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 7586
        HEAP32[$311 >> 2] = $38; //@line 7587
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 7588
        HEAP32[$312 >> 2] = $40; //@line 7589
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 7590
        HEAP32[$313 >> 2] = $42; //@line 7591
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 7592
        HEAP32[$314 >> 2] = $44; //@line 7593
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 7594
        HEAP32[$315 >> 2] = $46; //@line 7595
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 7596
        HEAP32[$316 >> 2] = $48; //@line 7597
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 7598
        HEAP32[$317 >> 2] = $50; //@line 7599
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 7600
        HEAP32[$318 >> 2] = $52; //@line 7601
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 7602
        HEAP32[$319 >> 2] = $54; //@line 7603
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 7604
        HEAP32[$320 >> 2] = $56; //@line 7605
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 7606
        HEAP32[$321 >> 2] = $58; //@line 7607
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 7608
        HEAP32[$322 >> 2] = $60; //@line 7609
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 7610
        HEAP32[$323 >> 2] = $157; //@line 7611
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 7612
        HEAP32[$324 >> 2] = $64; //@line 7613
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 7614
        HEAP32[$325 >> 2] = $66; //@line 7615
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 7616
        HEAP32[$326 >> 2] = $68; //@line 7617
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 7618
        HEAP32[$327 >> 2] = $70; //@line 7619
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 7620
        HEAP32[$328 >> 2] = $72; //@line 7621
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 7622
        HEAP32[$329 >> 2] = $74; //@line 7623
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 7624
        HEAP32[$330 >> 2] = $76; //@line 7625
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 7626
        HEAP32[$331 >> 2] = $78; //@line 7627
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 7628
        HEAP32[$332 >> 2] = $80; //@line 7629
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 7630
        HEAP32[$333 >> 2] = $82; //@line 7631
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 7632
        HEAP32[$334 >> 2] = $84; //@line 7633
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 7634
        HEAP32[$335 >> 2] = $86; //@line 7635
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 7636
        HEAP32[$336 >> 2] = $88; //@line 7637
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 7638
        HEAP32[$337 >> 2] = $90; //@line 7639
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 7640
        HEAP32[$338 >> 2] = $92; //@line 7641
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 7642
        HEAP32[$339 >> 2] = $94; //@line 7643
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 7644
        HEAP32[$340 >> 2] = $96; //@line 7645
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 7646
        HEAP32[$341 >> 2] = $98; //@line 7647
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 7648
        HEAP32[$342 >> 2] = $100; //@line 7649
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 7650
        HEAP32[$343 >> 2] = $102; //@line 7651
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 7652
        HEAP32[$344 >> 2] = $104; //@line 7653
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 7654
        HEAP32[$345 >> 2] = $289; //@line 7655
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 7656
        HEAP32[$346 >> 2] = $106; //@line 7657
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 7658
        HEAP32[$347 >> 2] = $108; //@line 7659
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 7660
        HEAP32[$348 >> 2] = $110; //@line 7661
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 7662
        HEAP32[$349 >> 2] = $112; //@line 7663
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 7664
        HEAP32[$350 >> 2] = $114; //@line 7665
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 7666
        HEAP32[$351 >> 2] = $116; //@line 7667
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 7668
        HEAP32[$352 >> 2] = $118; //@line 7669
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 7670
        HEAP32[$353 >> 2] = $120; //@line 7671
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 7672
        HEAP32[$354 >> 2] = $122; //@line 7673
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 7674
        HEAP32[$355 >> 2] = $124; //@line 7675
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 7676
        HEAP32[$356 >> 2] = $126; //@line 7677
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 7678
        HEAP32[$357 >> 2] = $128; //@line 7679
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 7680
        HEAP32[$358 >> 2] = $130; //@line 7681
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 7682
        HEAP32[$359 >> 2] = $132; //@line 7683
        sp = STACKTOP; //@line 7684
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 7688
       ___async_unwind = 0; //@line 7689
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 7690
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 7691
       HEAP32[$292 >> 2] = $2; //@line 7692
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 7693
       HEAP32[$293 >> 2] = $4; //@line 7694
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 7695
       HEAP32[$294 >> 2] = $6; //@line 7696
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 7697
       HEAP32[$295 >> 2] = $8; //@line 7698
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 7699
       HEAP32[$296 >> 2] = $10; //@line 7700
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 7701
       HEAP32[$297 >> 2] = $12; //@line 7702
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 7703
       HEAP32[$298 >> 2] = $14; //@line 7704
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 7705
       HEAP32[$299 >> 2] = $16; //@line 7706
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 7707
       HEAP32[$300 >> 2] = $18; //@line 7708
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 7709
       HEAP32[$301 >> 2] = $20; //@line 7710
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 7711
       HEAP32[$302 >> 2] = $22; //@line 7712
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 7713
       HEAP32[$303 >> 2] = $24; //@line 7714
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 7715
       HEAP32[$304 >> 2] = $26; //@line 7716
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 7717
       HEAP32[$305 >> 2] = $28; //@line 7718
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 7719
       HEAP32[$306 >> 2] = $30; //@line 7720
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 7721
       HEAP32[$307 >> 2] = $32; //@line 7722
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 7723
       HEAP32[$308 >> 2] = $281; //@line 7724
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 7725
       HEAP32[$309 >> 2] = $36; //@line 7726
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 7727
       HEAP32[$310 >> 2] = $34; //@line 7728
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 7729
       HEAP32[$311 >> 2] = $38; //@line 7730
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 7731
       HEAP32[$312 >> 2] = $40; //@line 7732
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 7733
       HEAP32[$313 >> 2] = $42; //@line 7734
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 7735
       HEAP32[$314 >> 2] = $44; //@line 7736
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 7737
       HEAP32[$315 >> 2] = $46; //@line 7738
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 7739
       HEAP32[$316 >> 2] = $48; //@line 7740
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 7741
       HEAP32[$317 >> 2] = $50; //@line 7742
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 7743
       HEAP32[$318 >> 2] = $52; //@line 7744
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 7745
       HEAP32[$319 >> 2] = $54; //@line 7746
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 7747
       HEAP32[$320 >> 2] = $56; //@line 7748
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 7749
       HEAP32[$321 >> 2] = $58; //@line 7750
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 7751
       HEAP32[$322 >> 2] = $60; //@line 7752
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 7753
       HEAP32[$323 >> 2] = $157; //@line 7754
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 7755
       HEAP32[$324 >> 2] = $64; //@line 7756
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 7757
       HEAP32[$325 >> 2] = $66; //@line 7758
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 7759
       HEAP32[$326 >> 2] = $68; //@line 7760
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 7761
       HEAP32[$327 >> 2] = $70; //@line 7762
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 7763
       HEAP32[$328 >> 2] = $72; //@line 7764
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 7765
       HEAP32[$329 >> 2] = $74; //@line 7766
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 7767
       HEAP32[$330 >> 2] = $76; //@line 7768
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 7769
       HEAP32[$331 >> 2] = $78; //@line 7770
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 7771
       HEAP32[$332 >> 2] = $80; //@line 7772
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 7773
       HEAP32[$333 >> 2] = $82; //@line 7774
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 7775
       HEAP32[$334 >> 2] = $84; //@line 7776
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 7777
       HEAP32[$335 >> 2] = $86; //@line 7778
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 7779
       HEAP32[$336 >> 2] = $88; //@line 7780
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 7781
       HEAP32[$337 >> 2] = $90; //@line 7782
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 7783
       HEAP32[$338 >> 2] = $92; //@line 7784
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 7785
       HEAP32[$339 >> 2] = $94; //@line 7786
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 7787
       HEAP32[$340 >> 2] = $96; //@line 7788
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 7789
       HEAP32[$341 >> 2] = $98; //@line 7790
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 7791
       HEAP32[$342 >> 2] = $100; //@line 7792
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 7793
       HEAP32[$343 >> 2] = $102; //@line 7794
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 7795
       HEAP32[$344 >> 2] = $104; //@line 7796
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 7797
       HEAP32[$345 >> 2] = $289; //@line 7798
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 7799
       HEAP32[$346 >> 2] = $106; //@line 7800
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 7801
       HEAP32[$347 >> 2] = $108; //@line 7802
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 7803
       HEAP32[$348 >> 2] = $110; //@line 7804
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 7805
       HEAP32[$349 >> 2] = $112; //@line 7806
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 7807
       HEAP32[$350 >> 2] = $114; //@line 7808
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 7809
       HEAP32[$351 >> 2] = $116; //@line 7810
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 7811
       HEAP32[$352 >> 2] = $118; //@line 7812
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 7813
       HEAP32[$353 >> 2] = $120; //@line 7814
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 7815
       HEAP32[$354 >> 2] = $122; //@line 7816
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 7817
       HEAP32[$355 >> 2] = $124; //@line 7818
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 7819
       HEAP32[$356 >> 2] = $126; //@line 7820
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 7821
       HEAP32[$357 >> 2] = $128; //@line 7822
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 7823
       HEAP32[$358 >> 2] = $130; //@line 7824
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 7825
       HEAP32[$359 >> 2] = $132; //@line 7826
       sp = STACKTOP; //@line 7827
       return;
      }
     }
     _mbed_tracef(2, 3803, 4369, $118); //@line 7831
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$126 >> 2] | 0; //@line 7836
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 7838
     $363 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 7839
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 7842
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 7843
      HEAP32[$364 >> 2] = $2; //@line 7844
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 7845
      HEAP32[$365 >> 2] = $4; //@line 7846
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 7847
      HEAP32[$366 >> 2] = $6; //@line 7848
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 7849
      HEAP32[$367 >> 2] = $8; //@line 7850
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 7851
      HEAP32[$368 >> 2] = $10; //@line 7852
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 7853
      HEAP32[$369 >> 2] = $12; //@line 7854
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 7855
      HEAP32[$370 >> 2] = $14; //@line 7856
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 7857
      HEAP32[$371 >> 2] = $16; //@line 7858
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 7859
      HEAP32[$372 >> 2] = $18; //@line 7860
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 7861
      HEAP32[$373 >> 2] = $20; //@line 7862
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 7863
      HEAP32[$374 >> 2] = $22; //@line 7864
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 7865
      HEAP32[$375 >> 2] = $24; //@line 7866
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 7867
      HEAP32[$376 >> 2] = $26; //@line 7868
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 7869
      HEAP32[$377 >> 2] = $28; //@line 7870
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 7871
      HEAP32[$378 >> 2] = $30; //@line 7872
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 7873
      HEAP32[$379 >> 2] = $32; //@line 7874
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 7875
      HEAP32[$380 >> 2] = $34; //@line 7876
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 7877
      HEAP32[$381 >> 2] = $36; //@line 7878
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 7879
      HEAP32[$382 >> 2] = $38; //@line 7880
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 7881
      HEAP32[$383 >> 2] = $40; //@line 7882
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 7883
      HEAP32[$384 >> 2] = $42; //@line 7884
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 7885
      HEAP32[$385 >> 2] = $44; //@line 7886
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 7887
      HEAP32[$386 >> 2] = $46; //@line 7888
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 7889
      HEAP32[$387 >> 2] = $48; //@line 7890
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 7891
      HEAP32[$388 >> 2] = $50; //@line 7892
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 7893
      HEAP32[$389 >> 2] = $52; //@line 7894
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 7895
      HEAP32[$390 >> 2] = $54; //@line 7896
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 7897
      HEAP32[$391 >> 2] = $56; //@line 7898
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 7899
      HEAP32[$392 >> 2] = $58; //@line 7900
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 7901
      HEAP32[$393 >> 2] = $60; //@line 7902
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 7903
      HEAP32[$394 >> 2] = $157; //@line 7904
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 7905
      HEAP32[$395 >> 2] = $64; //@line 7906
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 7907
      HEAP32[$396 >> 2] = $66; //@line 7908
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 7909
      HEAP32[$397 >> 2] = $68; //@line 7910
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 7911
      HEAP32[$398 >> 2] = $70; //@line 7912
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 7913
      HEAP32[$399 >> 2] = $72; //@line 7914
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 7915
      HEAP32[$400 >> 2] = $74; //@line 7916
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 7917
      HEAP32[$401 >> 2] = $76; //@line 7918
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 7919
      HEAP32[$402 >> 2] = $78; //@line 7920
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 7921
      HEAP32[$403 >> 2] = $80; //@line 7922
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 7923
      HEAP32[$404 >> 2] = $82; //@line 7924
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 7925
      HEAP32[$405 >> 2] = $84; //@line 7926
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 7927
      HEAP32[$406 >> 2] = $86; //@line 7928
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 7929
      HEAP32[$407 >> 2] = $88; //@line 7930
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 7931
      HEAP32[$408 >> 2] = $90; //@line 7932
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 7933
      HEAP32[$409 >> 2] = $92; //@line 7934
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 7935
      HEAP32[$410 >> 2] = $94; //@line 7936
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 7937
      HEAP32[$411 >> 2] = $96; //@line 7938
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 7939
      HEAP32[$412 >> 2] = $98; //@line 7940
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 7941
      HEAP32[$413 >> 2] = $100; //@line 7942
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 7943
      HEAP32[$414 >> 2] = $102; //@line 7944
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 7945
      HEAP32[$415 >> 2] = $104; //@line 7946
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 7947
      HEAP32[$416 >> 2] = $106; //@line 7948
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 7949
      HEAP32[$417 >> 2] = $108; //@line 7950
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 7951
      HEAP32[$418 >> 2] = $110; //@line 7952
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 7953
      HEAP32[$419 >> 2] = $112; //@line 7954
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 7955
      HEAP32[$420 >> 2] = $114; //@line 7956
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 7957
      HEAP32[$421 >> 2] = $116; //@line 7958
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 7959
      HEAP32[$422 >> 2] = $118; //@line 7960
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 7961
      HEAP32[$423 >> 2] = $120; //@line 7962
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 7963
      HEAP32[$424 >> 2] = $122; //@line 7964
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 7965
      HEAP32[$425 >> 2] = $124; //@line 7966
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 7967
      HEAP32[$426 >> 2] = $126; //@line 7968
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 7969
      HEAP32[$427 >> 2] = $128; //@line 7970
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 7971
      HEAP32[$428 >> 2] = $130; //@line 7972
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 7973
      HEAP32[$429 >> 2] = $132; //@line 7974
      sp = STACKTOP; //@line 7975
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 7979
     ___async_unwind = 0; //@line 7980
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 7981
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 7982
     HEAP32[$364 >> 2] = $2; //@line 7983
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 7984
     HEAP32[$365 >> 2] = $4; //@line 7985
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 7986
     HEAP32[$366 >> 2] = $6; //@line 7987
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 7988
     HEAP32[$367 >> 2] = $8; //@line 7989
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 7990
     HEAP32[$368 >> 2] = $10; //@line 7991
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 7992
     HEAP32[$369 >> 2] = $12; //@line 7993
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 7994
     HEAP32[$370 >> 2] = $14; //@line 7995
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 7996
     HEAP32[$371 >> 2] = $16; //@line 7997
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 7998
     HEAP32[$372 >> 2] = $18; //@line 7999
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 8000
     HEAP32[$373 >> 2] = $20; //@line 8001
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 8002
     HEAP32[$374 >> 2] = $22; //@line 8003
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 8004
     HEAP32[$375 >> 2] = $24; //@line 8005
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 8006
     HEAP32[$376 >> 2] = $26; //@line 8007
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 8008
     HEAP32[$377 >> 2] = $28; //@line 8009
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 8010
     HEAP32[$378 >> 2] = $30; //@line 8011
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 8012
     HEAP32[$379 >> 2] = $32; //@line 8013
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 8014
     HEAP32[$380 >> 2] = $34; //@line 8015
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 8016
     HEAP32[$381 >> 2] = $36; //@line 8017
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 8018
     HEAP32[$382 >> 2] = $38; //@line 8019
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 8020
     HEAP32[$383 >> 2] = $40; //@line 8021
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 8022
     HEAP32[$384 >> 2] = $42; //@line 8023
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 8024
     HEAP32[$385 >> 2] = $44; //@line 8025
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 8026
     HEAP32[$386 >> 2] = $46; //@line 8027
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 8028
     HEAP32[$387 >> 2] = $48; //@line 8029
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 8030
     HEAP32[$388 >> 2] = $50; //@line 8031
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 8032
     HEAP32[$389 >> 2] = $52; //@line 8033
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 8034
     HEAP32[$390 >> 2] = $54; //@line 8035
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 8036
     HEAP32[$391 >> 2] = $56; //@line 8037
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 8038
     HEAP32[$392 >> 2] = $58; //@line 8039
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 8040
     HEAP32[$393 >> 2] = $60; //@line 8041
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 8042
     HEAP32[$394 >> 2] = $157; //@line 8043
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 8044
     HEAP32[$395 >> 2] = $64; //@line 8045
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 8046
     HEAP32[$396 >> 2] = $66; //@line 8047
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 8048
     HEAP32[$397 >> 2] = $68; //@line 8049
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 8050
     HEAP32[$398 >> 2] = $70; //@line 8051
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 8052
     HEAP32[$399 >> 2] = $72; //@line 8053
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 8054
     HEAP32[$400 >> 2] = $74; //@line 8055
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 8056
     HEAP32[$401 >> 2] = $76; //@line 8057
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 8058
     HEAP32[$402 >> 2] = $78; //@line 8059
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 8060
     HEAP32[$403 >> 2] = $80; //@line 8061
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 8062
     HEAP32[$404 >> 2] = $82; //@line 8063
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 8064
     HEAP32[$405 >> 2] = $84; //@line 8065
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 8066
     HEAP32[$406 >> 2] = $86; //@line 8067
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 8068
     HEAP32[$407 >> 2] = $88; //@line 8069
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 8070
     HEAP32[$408 >> 2] = $90; //@line 8071
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 8072
     HEAP32[$409 >> 2] = $92; //@line 8073
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 8074
     HEAP32[$410 >> 2] = $94; //@line 8075
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 8076
     HEAP32[$411 >> 2] = $96; //@line 8077
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 8078
     HEAP32[$412 >> 2] = $98; //@line 8079
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 8080
     HEAP32[$413 >> 2] = $100; //@line 8081
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 8082
     HEAP32[$414 >> 2] = $102; //@line 8083
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 8084
     HEAP32[$415 >> 2] = $104; //@line 8085
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 8086
     HEAP32[$416 >> 2] = $106; //@line 8087
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 8088
     HEAP32[$417 >> 2] = $108; //@line 8089
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 8090
     HEAP32[$418 >> 2] = $110; //@line 8091
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 8092
     HEAP32[$419 >> 2] = $112; //@line 8093
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 8094
     HEAP32[$420 >> 2] = $114; //@line 8095
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 8096
     HEAP32[$421 >> 2] = $116; //@line 8097
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 8098
     HEAP32[$422 >> 2] = $118; //@line 8099
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 8100
     HEAP32[$423 >> 2] = $120; //@line 8101
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 8102
     HEAP32[$424 >> 2] = $122; //@line 8103
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 8104
     HEAP32[$425 >> 2] = $124; //@line 8105
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 8106
     HEAP32[$426 >> 2] = $126; //@line 8107
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 8108
     HEAP32[$427 >> 2] = $128; //@line 8109
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 8110
     HEAP32[$428 >> 2] = $130; //@line 8111
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 8112
     HEAP32[$429 >> 2] = $132; //@line 8113
     sp = STACKTOP; //@line 8114
     return;
    }
   case 42:
    {
     $432 = $$1202$in$i & 65535; //@line 8119
     if (($$1202$i + -1 & 65535) <= 254) {
      $435 = HEAP32[$126 >> 2] | 0; //@line 8123
      if (!(HEAP32[$435 + 52 >> 2] | 0)) {
       HEAP16[$435 + 4 >> 1] = $$1202$i; //@line 8129
       $440 = $189 + 1 | 0; //@line 8130
       HEAP32[$36 >> 2] = $440; //@line 8131
       $441 = HEAP32[$128 >> 2] | 0; //@line 8132
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 8133
       $442 = FUNCTION_TABLE_ii[$441 & 31]($$1202$i) | 0; //@line 8134
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 8137
        $443 = $ReallocAsyncCtx5 + 4 | 0; //@line 8138
        HEAP32[$443 >> 2] = $2; //@line 8139
        $444 = $ReallocAsyncCtx5 + 8 | 0; //@line 8140
        HEAP32[$444 >> 2] = $4; //@line 8141
        $445 = $ReallocAsyncCtx5 + 12 | 0; //@line 8142
        HEAP32[$445 >> 2] = $6; //@line 8143
        $446 = $ReallocAsyncCtx5 + 16 | 0; //@line 8144
        HEAP32[$446 >> 2] = $8; //@line 8145
        $447 = $ReallocAsyncCtx5 + 20 | 0; //@line 8146
        HEAP32[$447 >> 2] = $10; //@line 8147
        $448 = $ReallocAsyncCtx5 + 24 | 0; //@line 8148
        HEAP32[$448 >> 2] = $12; //@line 8149
        $449 = $ReallocAsyncCtx5 + 28 | 0; //@line 8150
        HEAP32[$449 >> 2] = $14; //@line 8151
        $450 = $ReallocAsyncCtx5 + 32 | 0; //@line 8152
        HEAP32[$450 >> 2] = $16; //@line 8153
        $451 = $ReallocAsyncCtx5 + 36 | 0; //@line 8154
        HEAP32[$451 >> 2] = $18; //@line 8155
        $452 = $ReallocAsyncCtx5 + 40 | 0; //@line 8156
        HEAP32[$452 >> 2] = $20; //@line 8157
        $453 = $ReallocAsyncCtx5 + 44 | 0; //@line 8158
        HEAP32[$453 >> 2] = $22; //@line 8159
        $454 = $ReallocAsyncCtx5 + 48 | 0; //@line 8160
        HEAP32[$454 >> 2] = $24; //@line 8161
        $455 = $ReallocAsyncCtx5 + 52 | 0; //@line 8162
        HEAP32[$455 >> 2] = $26; //@line 8163
        $456 = $ReallocAsyncCtx5 + 56 | 0; //@line 8164
        HEAP32[$456 >> 2] = $28; //@line 8165
        $457 = $ReallocAsyncCtx5 + 60 | 0; //@line 8166
        HEAP32[$457 >> 2] = $30; //@line 8167
        $458 = $ReallocAsyncCtx5 + 64 | 0; //@line 8168
        HEAP32[$458 >> 2] = $32; //@line 8169
        $459 = $ReallocAsyncCtx5 + 68 | 0; //@line 8170
        HEAP32[$459 >> 2] = $34; //@line 8171
        $460 = $ReallocAsyncCtx5 + 72 | 0; //@line 8172
        HEAP32[$460 >> 2] = $36; //@line 8173
        $461 = $ReallocAsyncCtx5 + 76 | 0; //@line 8174
        HEAP32[$461 >> 2] = $38; //@line 8175
        $462 = $ReallocAsyncCtx5 + 80 | 0; //@line 8176
        HEAP32[$462 >> 2] = $40; //@line 8177
        $463 = $ReallocAsyncCtx5 + 84 | 0; //@line 8178
        HEAP32[$463 >> 2] = $42; //@line 8179
        $464 = $ReallocAsyncCtx5 + 88 | 0; //@line 8180
        HEAP32[$464 >> 2] = $44; //@line 8181
        $465 = $ReallocAsyncCtx5 + 92 | 0; //@line 8182
        HEAP32[$465 >> 2] = $46; //@line 8183
        $466 = $ReallocAsyncCtx5 + 96 | 0; //@line 8184
        HEAP32[$466 >> 2] = $48; //@line 8185
        $467 = $ReallocAsyncCtx5 + 100 | 0; //@line 8186
        HEAP32[$467 >> 2] = $50; //@line 8187
        $468 = $ReallocAsyncCtx5 + 104 | 0; //@line 8188
        HEAP32[$468 >> 2] = $52; //@line 8189
        $469 = $ReallocAsyncCtx5 + 108 | 0; //@line 8190
        HEAP32[$469 >> 2] = $54; //@line 8191
        $470 = $ReallocAsyncCtx5 + 112 | 0; //@line 8192
        HEAP32[$470 >> 2] = $56; //@line 8193
        $471 = $ReallocAsyncCtx5 + 116 | 0; //@line 8194
        HEAP32[$471 >> 2] = $58; //@line 8195
        $472 = $ReallocAsyncCtx5 + 120 | 0; //@line 8196
        HEAP32[$472 >> 2] = $60; //@line 8197
        $473 = $ReallocAsyncCtx5 + 124 | 0; //@line 8198
        HEAP32[$473 >> 2] = $157; //@line 8199
        $474 = $ReallocAsyncCtx5 + 128 | 0; //@line 8200
        HEAP32[$474 >> 2] = $64; //@line 8201
        $475 = $ReallocAsyncCtx5 + 132 | 0; //@line 8202
        HEAP32[$475 >> 2] = $66; //@line 8203
        $476 = $ReallocAsyncCtx5 + 136 | 0; //@line 8204
        HEAP32[$476 >> 2] = $68; //@line 8205
        $477 = $ReallocAsyncCtx5 + 140 | 0; //@line 8206
        HEAP32[$477 >> 2] = $70; //@line 8207
        $478 = $ReallocAsyncCtx5 + 144 | 0; //@line 8208
        HEAP32[$478 >> 2] = $72; //@line 8209
        $479 = $ReallocAsyncCtx5 + 148 | 0; //@line 8210
        HEAP32[$479 >> 2] = $74; //@line 8211
        $480 = $ReallocAsyncCtx5 + 152 | 0; //@line 8212
        HEAP32[$480 >> 2] = $76; //@line 8213
        $481 = $ReallocAsyncCtx5 + 156 | 0; //@line 8214
        HEAP32[$481 >> 2] = $78; //@line 8215
        $482 = $ReallocAsyncCtx5 + 160 | 0; //@line 8216
        HEAP32[$482 >> 2] = $80; //@line 8217
        $483 = $ReallocAsyncCtx5 + 164 | 0; //@line 8218
        HEAP32[$483 >> 2] = $82; //@line 8219
        $484 = $ReallocAsyncCtx5 + 168 | 0; //@line 8220
        HEAP32[$484 >> 2] = $84; //@line 8221
        $485 = $ReallocAsyncCtx5 + 172 | 0; //@line 8222
        HEAP32[$485 >> 2] = $86; //@line 8223
        $486 = $ReallocAsyncCtx5 + 176 | 0; //@line 8224
        HEAP32[$486 >> 2] = $88; //@line 8225
        $487 = $ReallocAsyncCtx5 + 180 | 0; //@line 8226
        HEAP32[$487 >> 2] = $90; //@line 8227
        $488 = $ReallocAsyncCtx5 + 184 | 0; //@line 8228
        HEAP32[$488 >> 2] = $92; //@line 8229
        $489 = $ReallocAsyncCtx5 + 188 | 0; //@line 8230
        HEAP32[$489 >> 2] = $94; //@line 8231
        $490 = $ReallocAsyncCtx5 + 192 | 0; //@line 8232
        HEAP32[$490 >> 2] = $432; //@line 8233
        $491 = $ReallocAsyncCtx5 + 196 | 0; //@line 8234
        HEAP32[$491 >> 2] = $96; //@line 8235
        $492 = $ReallocAsyncCtx5 + 200 | 0; //@line 8236
        HEAP32[$492 >> 2] = $98; //@line 8237
        $493 = $ReallocAsyncCtx5 + 204 | 0; //@line 8238
        HEAP32[$493 >> 2] = $440; //@line 8239
        $494 = $ReallocAsyncCtx5 + 208 | 0; //@line 8240
        HEAP32[$494 >> 2] = $100; //@line 8241
        $495 = $ReallocAsyncCtx5 + 212 | 0; //@line 8242
        HEAP32[$495 >> 2] = $102; //@line 8243
        $496 = $ReallocAsyncCtx5 + 216 | 0; //@line 8244
        HEAP32[$496 >> 2] = $104; //@line 8245
        $497 = $ReallocAsyncCtx5 + 220 | 0; //@line 8246
        HEAP32[$497 >> 2] = $106; //@line 8247
        $498 = $ReallocAsyncCtx5 + 224 | 0; //@line 8248
        HEAP32[$498 >> 2] = $108; //@line 8249
        $499 = $ReallocAsyncCtx5 + 228 | 0; //@line 8250
        HEAP32[$499 >> 2] = $110; //@line 8251
        $500 = $ReallocAsyncCtx5 + 232 | 0; //@line 8252
        HEAP32[$500 >> 2] = $112; //@line 8253
        $501 = $ReallocAsyncCtx5 + 236 | 0; //@line 8254
        HEAP32[$501 >> 2] = $114; //@line 8255
        $502 = $ReallocAsyncCtx5 + 240 | 0; //@line 8256
        HEAP32[$502 >> 2] = $116; //@line 8257
        $503 = $ReallocAsyncCtx5 + 244 | 0; //@line 8258
        HEAP32[$503 >> 2] = $118; //@line 8259
        $504 = $ReallocAsyncCtx5 + 248 | 0; //@line 8260
        HEAP32[$504 >> 2] = $120; //@line 8261
        $505 = $ReallocAsyncCtx5 + 252 | 0; //@line 8262
        HEAP32[$505 >> 2] = $122; //@line 8263
        $506 = $ReallocAsyncCtx5 + 256 | 0; //@line 8264
        HEAP32[$506 >> 2] = $124; //@line 8265
        $507 = $ReallocAsyncCtx5 + 260 | 0; //@line 8266
        HEAP32[$507 >> 2] = $126; //@line 8267
        $508 = $ReallocAsyncCtx5 + 264 | 0; //@line 8268
        HEAP32[$508 >> 2] = $128; //@line 8269
        $509 = $ReallocAsyncCtx5 + 268 | 0; //@line 8270
        HEAP32[$509 >> 2] = $130; //@line 8271
        $510 = $ReallocAsyncCtx5 + 272 | 0; //@line 8272
        HEAP32[$510 >> 2] = $132; //@line 8273
        sp = STACKTOP; //@line 8274
        return;
       }
       HEAP32[___async_retval >> 2] = $442; //@line 8278
       ___async_unwind = 0; //@line 8279
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 8280
       $443 = $ReallocAsyncCtx5 + 4 | 0; //@line 8281
       HEAP32[$443 >> 2] = $2; //@line 8282
       $444 = $ReallocAsyncCtx5 + 8 | 0; //@line 8283
       HEAP32[$444 >> 2] = $4; //@line 8284
       $445 = $ReallocAsyncCtx5 + 12 | 0; //@line 8285
       HEAP32[$445 >> 2] = $6; //@line 8286
       $446 = $ReallocAsyncCtx5 + 16 | 0; //@line 8287
       HEAP32[$446 >> 2] = $8; //@line 8288
       $447 = $ReallocAsyncCtx5 + 20 | 0; //@line 8289
       HEAP32[$447 >> 2] = $10; //@line 8290
       $448 = $ReallocAsyncCtx5 + 24 | 0; //@line 8291
       HEAP32[$448 >> 2] = $12; //@line 8292
       $449 = $ReallocAsyncCtx5 + 28 | 0; //@line 8293
       HEAP32[$449 >> 2] = $14; //@line 8294
       $450 = $ReallocAsyncCtx5 + 32 | 0; //@line 8295
       HEAP32[$450 >> 2] = $16; //@line 8296
       $451 = $ReallocAsyncCtx5 + 36 | 0; //@line 8297
       HEAP32[$451 >> 2] = $18; //@line 8298
       $452 = $ReallocAsyncCtx5 + 40 | 0; //@line 8299
       HEAP32[$452 >> 2] = $20; //@line 8300
       $453 = $ReallocAsyncCtx5 + 44 | 0; //@line 8301
       HEAP32[$453 >> 2] = $22; //@line 8302
       $454 = $ReallocAsyncCtx5 + 48 | 0; //@line 8303
       HEAP32[$454 >> 2] = $24; //@line 8304
       $455 = $ReallocAsyncCtx5 + 52 | 0; //@line 8305
       HEAP32[$455 >> 2] = $26; //@line 8306
       $456 = $ReallocAsyncCtx5 + 56 | 0; //@line 8307
       HEAP32[$456 >> 2] = $28; //@line 8308
       $457 = $ReallocAsyncCtx5 + 60 | 0; //@line 8309
       HEAP32[$457 >> 2] = $30; //@line 8310
       $458 = $ReallocAsyncCtx5 + 64 | 0; //@line 8311
       HEAP32[$458 >> 2] = $32; //@line 8312
       $459 = $ReallocAsyncCtx5 + 68 | 0; //@line 8313
       HEAP32[$459 >> 2] = $34; //@line 8314
       $460 = $ReallocAsyncCtx5 + 72 | 0; //@line 8315
       HEAP32[$460 >> 2] = $36; //@line 8316
       $461 = $ReallocAsyncCtx5 + 76 | 0; //@line 8317
       HEAP32[$461 >> 2] = $38; //@line 8318
       $462 = $ReallocAsyncCtx5 + 80 | 0; //@line 8319
       HEAP32[$462 >> 2] = $40; //@line 8320
       $463 = $ReallocAsyncCtx5 + 84 | 0; //@line 8321
       HEAP32[$463 >> 2] = $42; //@line 8322
       $464 = $ReallocAsyncCtx5 + 88 | 0; //@line 8323
       HEAP32[$464 >> 2] = $44; //@line 8324
       $465 = $ReallocAsyncCtx5 + 92 | 0; //@line 8325
       HEAP32[$465 >> 2] = $46; //@line 8326
       $466 = $ReallocAsyncCtx5 + 96 | 0; //@line 8327
       HEAP32[$466 >> 2] = $48; //@line 8328
       $467 = $ReallocAsyncCtx5 + 100 | 0; //@line 8329
       HEAP32[$467 >> 2] = $50; //@line 8330
       $468 = $ReallocAsyncCtx5 + 104 | 0; //@line 8331
       HEAP32[$468 >> 2] = $52; //@line 8332
       $469 = $ReallocAsyncCtx5 + 108 | 0; //@line 8333
       HEAP32[$469 >> 2] = $54; //@line 8334
       $470 = $ReallocAsyncCtx5 + 112 | 0; //@line 8335
       HEAP32[$470 >> 2] = $56; //@line 8336
       $471 = $ReallocAsyncCtx5 + 116 | 0; //@line 8337
       HEAP32[$471 >> 2] = $58; //@line 8338
       $472 = $ReallocAsyncCtx5 + 120 | 0; //@line 8339
       HEAP32[$472 >> 2] = $60; //@line 8340
       $473 = $ReallocAsyncCtx5 + 124 | 0; //@line 8341
       HEAP32[$473 >> 2] = $157; //@line 8342
       $474 = $ReallocAsyncCtx5 + 128 | 0; //@line 8343
       HEAP32[$474 >> 2] = $64; //@line 8344
       $475 = $ReallocAsyncCtx5 + 132 | 0; //@line 8345
       HEAP32[$475 >> 2] = $66; //@line 8346
       $476 = $ReallocAsyncCtx5 + 136 | 0; //@line 8347
       HEAP32[$476 >> 2] = $68; //@line 8348
       $477 = $ReallocAsyncCtx5 + 140 | 0; //@line 8349
       HEAP32[$477 >> 2] = $70; //@line 8350
       $478 = $ReallocAsyncCtx5 + 144 | 0; //@line 8351
       HEAP32[$478 >> 2] = $72; //@line 8352
       $479 = $ReallocAsyncCtx5 + 148 | 0; //@line 8353
       HEAP32[$479 >> 2] = $74; //@line 8354
       $480 = $ReallocAsyncCtx5 + 152 | 0; //@line 8355
       HEAP32[$480 >> 2] = $76; //@line 8356
       $481 = $ReallocAsyncCtx5 + 156 | 0; //@line 8357
       HEAP32[$481 >> 2] = $78; //@line 8358
       $482 = $ReallocAsyncCtx5 + 160 | 0; //@line 8359
       HEAP32[$482 >> 2] = $80; //@line 8360
       $483 = $ReallocAsyncCtx5 + 164 | 0; //@line 8361
       HEAP32[$483 >> 2] = $82; //@line 8362
       $484 = $ReallocAsyncCtx5 + 168 | 0; //@line 8363
       HEAP32[$484 >> 2] = $84; //@line 8364
       $485 = $ReallocAsyncCtx5 + 172 | 0; //@line 8365
       HEAP32[$485 >> 2] = $86; //@line 8366
       $486 = $ReallocAsyncCtx5 + 176 | 0; //@line 8367
       HEAP32[$486 >> 2] = $88; //@line 8368
       $487 = $ReallocAsyncCtx5 + 180 | 0; //@line 8369
       HEAP32[$487 >> 2] = $90; //@line 8370
       $488 = $ReallocAsyncCtx5 + 184 | 0; //@line 8371
       HEAP32[$488 >> 2] = $92; //@line 8372
       $489 = $ReallocAsyncCtx5 + 188 | 0; //@line 8373
       HEAP32[$489 >> 2] = $94; //@line 8374
       $490 = $ReallocAsyncCtx5 + 192 | 0; //@line 8375
       HEAP32[$490 >> 2] = $432; //@line 8376
       $491 = $ReallocAsyncCtx5 + 196 | 0; //@line 8377
       HEAP32[$491 >> 2] = $96; //@line 8378
       $492 = $ReallocAsyncCtx5 + 200 | 0; //@line 8379
       HEAP32[$492 >> 2] = $98; //@line 8380
       $493 = $ReallocAsyncCtx5 + 204 | 0; //@line 8381
       HEAP32[$493 >> 2] = $440; //@line 8382
       $494 = $ReallocAsyncCtx5 + 208 | 0; //@line 8383
       HEAP32[$494 >> 2] = $100; //@line 8384
       $495 = $ReallocAsyncCtx5 + 212 | 0; //@line 8385
       HEAP32[$495 >> 2] = $102; //@line 8386
       $496 = $ReallocAsyncCtx5 + 216 | 0; //@line 8387
       HEAP32[$496 >> 2] = $104; //@line 8388
       $497 = $ReallocAsyncCtx5 + 220 | 0; //@line 8389
       HEAP32[$497 >> 2] = $106; //@line 8390
       $498 = $ReallocAsyncCtx5 + 224 | 0; //@line 8391
       HEAP32[$498 >> 2] = $108; //@line 8392
       $499 = $ReallocAsyncCtx5 + 228 | 0; //@line 8393
       HEAP32[$499 >> 2] = $110; //@line 8394
       $500 = $ReallocAsyncCtx5 + 232 | 0; //@line 8395
       HEAP32[$500 >> 2] = $112; //@line 8396
       $501 = $ReallocAsyncCtx5 + 236 | 0; //@line 8397
       HEAP32[$501 >> 2] = $114; //@line 8398
       $502 = $ReallocAsyncCtx5 + 240 | 0; //@line 8399
       HEAP32[$502 >> 2] = $116; //@line 8400
       $503 = $ReallocAsyncCtx5 + 244 | 0; //@line 8401
       HEAP32[$503 >> 2] = $118; //@line 8402
       $504 = $ReallocAsyncCtx5 + 248 | 0; //@line 8403
       HEAP32[$504 >> 2] = $120; //@line 8404
       $505 = $ReallocAsyncCtx5 + 252 | 0; //@line 8405
       HEAP32[$505 >> 2] = $122; //@line 8406
       $506 = $ReallocAsyncCtx5 + 256 | 0; //@line 8407
       HEAP32[$506 >> 2] = $124; //@line 8408
       $507 = $ReallocAsyncCtx5 + 260 | 0; //@line 8409
       HEAP32[$507 >> 2] = $126; //@line 8410
       $508 = $ReallocAsyncCtx5 + 264 | 0; //@line 8411
       HEAP32[$508 >> 2] = $128; //@line 8412
       $509 = $ReallocAsyncCtx5 + 268 | 0; //@line 8413
       HEAP32[$509 >> 2] = $130; //@line 8414
       $510 = $ReallocAsyncCtx5 + 272 | 0; //@line 8415
       HEAP32[$510 >> 2] = $132; //@line 8416
       sp = STACKTOP; //@line 8417
       return;
      }
     }
     _mbed_tracef(2, 3803, 4564, $114); //@line 8421
     break L2;
     break;
    }
   case 48:
    {
     $512 = HEAP32[$126 >> 2] | 0; //@line 8426
     $513 = $512 + 56 | 0; //@line 8427
     if (HEAP32[$513 >> 2] | 0) {
      _mbed_tracef(2, 3803, 4698, $94); //@line 8431
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 8435
     $517 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $513, $512 + 6 | 0, 8, $$1202$i) | 0; //@line 8436
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 8439
      $518 = $ReallocAsyncCtx9 + 4 | 0; //@line 8440
      HEAP32[$518 >> 2] = $2; //@line 8441
      $519 = $ReallocAsyncCtx9 + 8 | 0; //@line 8442
      HEAP32[$519 >> 2] = $4; //@line 8443
      $520 = $ReallocAsyncCtx9 + 12 | 0; //@line 8444
      HEAP32[$520 >> 2] = $6; //@line 8445
      $521 = $ReallocAsyncCtx9 + 16 | 0; //@line 8446
      HEAP32[$521 >> 2] = $8; //@line 8447
      $522 = $ReallocAsyncCtx9 + 20 | 0; //@line 8448
      HEAP32[$522 >> 2] = $10; //@line 8449
      $523 = $ReallocAsyncCtx9 + 24 | 0; //@line 8450
      HEAP32[$523 >> 2] = $12; //@line 8451
      $524 = $ReallocAsyncCtx9 + 28 | 0; //@line 8452
      HEAP32[$524 >> 2] = $14; //@line 8453
      $525 = $ReallocAsyncCtx9 + 32 | 0; //@line 8454
      HEAP32[$525 >> 2] = $16; //@line 8455
      $526 = $ReallocAsyncCtx9 + 36 | 0; //@line 8456
      HEAP32[$526 >> 2] = $18; //@line 8457
      $527 = $ReallocAsyncCtx9 + 40 | 0; //@line 8458
      HEAP32[$527 >> 2] = $20; //@line 8459
      $528 = $ReallocAsyncCtx9 + 44 | 0; //@line 8460
      HEAP32[$528 >> 2] = $22; //@line 8461
      $529 = $ReallocAsyncCtx9 + 48 | 0; //@line 8462
      HEAP32[$529 >> 2] = $24; //@line 8463
      $530 = $ReallocAsyncCtx9 + 52 | 0; //@line 8464
      HEAP32[$530 >> 2] = $26; //@line 8465
      $531 = $ReallocAsyncCtx9 + 56 | 0; //@line 8466
      HEAP32[$531 >> 2] = $28; //@line 8467
      $532 = $ReallocAsyncCtx9 + 60 | 0; //@line 8468
      HEAP32[$532 >> 2] = $30; //@line 8469
      $533 = $ReallocAsyncCtx9 + 64 | 0; //@line 8470
      HEAP32[$533 >> 2] = $32; //@line 8471
      $534 = $ReallocAsyncCtx9 + 68 | 0; //@line 8472
      HEAP32[$534 >> 2] = $34; //@line 8473
      $535 = $ReallocAsyncCtx9 + 72 | 0; //@line 8474
      HEAP32[$535 >> 2] = $36; //@line 8475
      $536 = $ReallocAsyncCtx9 + 76 | 0; //@line 8476
      HEAP32[$536 >> 2] = $38; //@line 8477
      $537 = $ReallocAsyncCtx9 + 80 | 0; //@line 8478
      HEAP32[$537 >> 2] = $40; //@line 8479
      $538 = $ReallocAsyncCtx9 + 84 | 0; //@line 8480
      HEAP32[$538 >> 2] = $42; //@line 8481
      $539 = $ReallocAsyncCtx9 + 88 | 0; //@line 8482
      HEAP32[$539 >> 2] = $44; //@line 8483
      $540 = $ReallocAsyncCtx9 + 92 | 0; //@line 8484
      HEAP32[$540 >> 2] = $46; //@line 8485
      $541 = $ReallocAsyncCtx9 + 96 | 0; //@line 8486
      HEAP32[$541 >> 2] = $48; //@line 8487
      $542 = $ReallocAsyncCtx9 + 100 | 0; //@line 8488
      HEAP32[$542 >> 2] = $50; //@line 8489
      $543 = $ReallocAsyncCtx9 + 104 | 0; //@line 8490
      HEAP32[$543 >> 2] = $52; //@line 8491
      $544 = $ReallocAsyncCtx9 + 108 | 0; //@line 8492
      HEAP32[$544 >> 2] = $54; //@line 8493
      $545 = $ReallocAsyncCtx9 + 112 | 0; //@line 8494
      HEAP32[$545 >> 2] = $56; //@line 8495
      $546 = $ReallocAsyncCtx9 + 116 | 0; //@line 8496
      HEAP32[$546 >> 2] = $58; //@line 8497
      $547 = $ReallocAsyncCtx9 + 120 | 0; //@line 8498
      HEAP32[$547 >> 2] = $60; //@line 8499
      $548 = $ReallocAsyncCtx9 + 124 | 0; //@line 8500
      HEAP32[$548 >> 2] = $157; //@line 8501
      $549 = $ReallocAsyncCtx9 + 128 | 0; //@line 8502
      HEAP32[$549 >> 2] = $64; //@line 8503
      $550 = $ReallocAsyncCtx9 + 132 | 0; //@line 8504
      HEAP32[$550 >> 2] = $66; //@line 8505
      $551 = $ReallocAsyncCtx9 + 136 | 0; //@line 8506
      HEAP32[$551 >> 2] = $68; //@line 8507
      $552 = $ReallocAsyncCtx9 + 140 | 0; //@line 8508
      HEAP32[$552 >> 2] = $70; //@line 8509
      $553 = $ReallocAsyncCtx9 + 144 | 0; //@line 8510
      HEAP32[$553 >> 2] = $72; //@line 8511
      $554 = $ReallocAsyncCtx9 + 148 | 0; //@line 8512
      HEAP32[$554 >> 2] = $74; //@line 8513
      $555 = $ReallocAsyncCtx9 + 152 | 0; //@line 8514
      HEAP32[$555 >> 2] = $76; //@line 8515
      $556 = $ReallocAsyncCtx9 + 156 | 0; //@line 8516
      HEAP32[$556 >> 2] = $78; //@line 8517
      $557 = $ReallocAsyncCtx9 + 160 | 0; //@line 8518
      HEAP32[$557 >> 2] = $80; //@line 8519
      $558 = $ReallocAsyncCtx9 + 164 | 0; //@line 8520
      HEAP32[$558 >> 2] = $82; //@line 8521
      $559 = $ReallocAsyncCtx9 + 168 | 0; //@line 8522
      HEAP32[$559 >> 2] = $84; //@line 8523
      $560 = $ReallocAsyncCtx9 + 172 | 0; //@line 8524
      HEAP32[$560 >> 2] = $86; //@line 8525
      $561 = $ReallocAsyncCtx9 + 176 | 0; //@line 8526
      HEAP32[$561 >> 2] = $88; //@line 8527
      $562 = $ReallocAsyncCtx9 + 180 | 0; //@line 8528
      HEAP32[$562 >> 2] = $90; //@line 8529
      $563 = $ReallocAsyncCtx9 + 184 | 0; //@line 8530
      HEAP32[$563 >> 2] = $92; //@line 8531
      $564 = $ReallocAsyncCtx9 + 188 | 0; //@line 8532
      HEAP32[$564 >> 2] = $94; //@line 8533
      $565 = $ReallocAsyncCtx9 + 192 | 0; //@line 8534
      HEAP32[$565 >> 2] = $96; //@line 8535
      $566 = $ReallocAsyncCtx9 + 196 | 0; //@line 8536
      HEAP32[$566 >> 2] = $98; //@line 8537
      $567 = $ReallocAsyncCtx9 + 200 | 0; //@line 8538
      HEAP32[$567 >> 2] = $100; //@line 8539
      $568 = $ReallocAsyncCtx9 + 204 | 0; //@line 8540
      HEAP32[$568 >> 2] = $102; //@line 8541
      $569 = $ReallocAsyncCtx9 + 208 | 0; //@line 8542
      HEAP32[$569 >> 2] = $104; //@line 8543
      $570 = $ReallocAsyncCtx9 + 212 | 0; //@line 8544
      HEAP32[$570 >> 2] = $106; //@line 8545
      $571 = $ReallocAsyncCtx9 + 216 | 0; //@line 8546
      HEAP32[$571 >> 2] = $108; //@line 8547
      $572 = $ReallocAsyncCtx9 + 220 | 0; //@line 8548
      HEAP32[$572 >> 2] = $110; //@line 8549
      $573 = $ReallocAsyncCtx9 + 224 | 0; //@line 8550
      HEAP32[$573 >> 2] = $112; //@line 8551
      $574 = $ReallocAsyncCtx9 + 228 | 0; //@line 8552
      HEAP32[$574 >> 2] = $114; //@line 8553
      $575 = $ReallocAsyncCtx9 + 232 | 0; //@line 8554
      HEAP32[$575 >> 2] = $116; //@line 8555
      $576 = $ReallocAsyncCtx9 + 236 | 0; //@line 8556
      HEAP32[$576 >> 2] = $118; //@line 8557
      $577 = $ReallocAsyncCtx9 + 240 | 0; //@line 8558
      HEAP32[$577 >> 2] = $120; //@line 8559
      $578 = $ReallocAsyncCtx9 + 244 | 0; //@line 8560
      HEAP32[$578 >> 2] = $122; //@line 8561
      $579 = $ReallocAsyncCtx9 + 248 | 0; //@line 8562
      HEAP32[$579 >> 2] = $124; //@line 8563
      $580 = $ReallocAsyncCtx9 + 252 | 0; //@line 8564
      HEAP32[$580 >> 2] = $126; //@line 8565
      $581 = $ReallocAsyncCtx9 + 256 | 0; //@line 8566
      HEAP32[$581 >> 2] = $128; //@line 8567
      $582 = $ReallocAsyncCtx9 + 260 | 0; //@line 8568
      HEAP32[$582 >> 2] = $130; //@line 8569
      $583 = $ReallocAsyncCtx9 + 264 | 0; //@line 8570
      HEAP32[$583 >> 2] = $132; //@line 8571
      sp = STACKTOP; //@line 8572
      return;
     }
     HEAP8[___async_retval >> 0] = $517; //@line 8576
     ___async_unwind = 0; //@line 8577
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 8578
     $518 = $ReallocAsyncCtx9 + 4 | 0; //@line 8579
     HEAP32[$518 >> 2] = $2; //@line 8580
     $519 = $ReallocAsyncCtx9 + 8 | 0; //@line 8581
     HEAP32[$519 >> 2] = $4; //@line 8582
     $520 = $ReallocAsyncCtx9 + 12 | 0; //@line 8583
     HEAP32[$520 >> 2] = $6; //@line 8584
     $521 = $ReallocAsyncCtx9 + 16 | 0; //@line 8585
     HEAP32[$521 >> 2] = $8; //@line 8586
     $522 = $ReallocAsyncCtx9 + 20 | 0; //@line 8587
     HEAP32[$522 >> 2] = $10; //@line 8588
     $523 = $ReallocAsyncCtx9 + 24 | 0; //@line 8589
     HEAP32[$523 >> 2] = $12; //@line 8590
     $524 = $ReallocAsyncCtx9 + 28 | 0; //@line 8591
     HEAP32[$524 >> 2] = $14; //@line 8592
     $525 = $ReallocAsyncCtx9 + 32 | 0; //@line 8593
     HEAP32[$525 >> 2] = $16; //@line 8594
     $526 = $ReallocAsyncCtx9 + 36 | 0; //@line 8595
     HEAP32[$526 >> 2] = $18; //@line 8596
     $527 = $ReallocAsyncCtx9 + 40 | 0; //@line 8597
     HEAP32[$527 >> 2] = $20; //@line 8598
     $528 = $ReallocAsyncCtx9 + 44 | 0; //@line 8599
     HEAP32[$528 >> 2] = $22; //@line 8600
     $529 = $ReallocAsyncCtx9 + 48 | 0; //@line 8601
     HEAP32[$529 >> 2] = $24; //@line 8602
     $530 = $ReallocAsyncCtx9 + 52 | 0; //@line 8603
     HEAP32[$530 >> 2] = $26; //@line 8604
     $531 = $ReallocAsyncCtx9 + 56 | 0; //@line 8605
     HEAP32[$531 >> 2] = $28; //@line 8606
     $532 = $ReallocAsyncCtx9 + 60 | 0; //@line 8607
     HEAP32[$532 >> 2] = $30; //@line 8608
     $533 = $ReallocAsyncCtx9 + 64 | 0; //@line 8609
     HEAP32[$533 >> 2] = $32; //@line 8610
     $534 = $ReallocAsyncCtx9 + 68 | 0; //@line 8611
     HEAP32[$534 >> 2] = $34; //@line 8612
     $535 = $ReallocAsyncCtx9 + 72 | 0; //@line 8613
     HEAP32[$535 >> 2] = $36; //@line 8614
     $536 = $ReallocAsyncCtx9 + 76 | 0; //@line 8615
     HEAP32[$536 >> 2] = $38; //@line 8616
     $537 = $ReallocAsyncCtx9 + 80 | 0; //@line 8617
     HEAP32[$537 >> 2] = $40; //@line 8618
     $538 = $ReallocAsyncCtx9 + 84 | 0; //@line 8619
     HEAP32[$538 >> 2] = $42; //@line 8620
     $539 = $ReallocAsyncCtx9 + 88 | 0; //@line 8621
     HEAP32[$539 >> 2] = $44; //@line 8622
     $540 = $ReallocAsyncCtx9 + 92 | 0; //@line 8623
     HEAP32[$540 >> 2] = $46; //@line 8624
     $541 = $ReallocAsyncCtx9 + 96 | 0; //@line 8625
     HEAP32[$541 >> 2] = $48; //@line 8626
     $542 = $ReallocAsyncCtx9 + 100 | 0; //@line 8627
     HEAP32[$542 >> 2] = $50; //@line 8628
     $543 = $ReallocAsyncCtx9 + 104 | 0; //@line 8629
     HEAP32[$543 >> 2] = $52; //@line 8630
     $544 = $ReallocAsyncCtx9 + 108 | 0; //@line 8631
     HEAP32[$544 >> 2] = $54; //@line 8632
     $545 = $ReallocAsyncCtx9 + 112 | 0; //@line 8633
     HEAP32[$545 >> 2] = $56; //@line 8634
     $546 = $ReallocAsyncCtx9 + 116 | 0; //@line 8635
     HEAP32[$546 >> 2] = $58; //@line 8636
     $547 = $ReallocAsyncCtx9 + 120 | 0; //@line 8637
     HEAP32[$547 >> 2] = $60; //@line 8638
     $548 = $ReallocAsyncCtx9 + 124 | 0; //@line 8639
     HEAP32[$548 >> 2] = $157; //@line 8640
     $549 = $ReallocAsyncCtx9 + 128 | 0; //@line 8641
     HEAP32[$549 >> 2] = $64; //@line 8642
     $550 = $ReallocAsyncCtx9 + 132 | 0; //@line 8643
     HEAP32[$550 >> 2] = $66; //@line 8644
     $551 = $ReallocAsyncCtx9 + 136 | 0; //@line 8645
     HEAP32[$551 >> 2] = $68; //@line 8646
     $552 = $ReallocAsyncCtx9 + 140 | 0; //@line 8647
     HEAP32[$552 >> 2] = $70; //@line 8648
     $553 = $ReallocAsyncCtx9 + 144 | 0; //@line 8649
     HEAP32[$553 >> 2] = $72; //@line 8650
     $554 = $ReallocAsyncCtx9 + 148 | 0; //@line 8651
     HEAP32[$554 >> 2] = $74; //@line 8652
     $555 = $ReallocAsyncCtx9 + 152 | 0; //@line 8653
     HEAP32[$555 >> 2] = $76; //@line 8654
     $556 = $ReallocAsyncCtx9 + 156 | 0; //@line 8655
     HEAP32[$556 >> 2] = $78; //@line 8656
     $557 = $ReallocAsyncCtx9 + 160 | 0; //@line 8657
     HEAP32[$557 >> 2] = $80; //@line 8658
     $558 = $ReallocAsyncCtx9 + 164 | 0; //@line 8659
     HEAP32[$558 >> 2] = $82; //@line 8660
     $559 = $ReallocAsyncCtx9 + 168 | 0; //@line 8661
     HEAP32[$559 >> 2] = $84; //@line 8662
     $560 = $ReallocAsyncCtx9 + 172 | 0; //@line 8663
     HEAP32[$560 >> 2] = $86; //@line 8664
     $561 = $ReallocAsyncCtx9 + 176 | 0; //@line 8665
     HEAP32[$561 >> 2] = $88; //@line 8666
     $562 = $ReallocAsyncCtx9 + 180 | 0; //@line 8667
     HEAP32[$562 >> 2] = $90; //@line 8668
     $563 = $ReallocAsyncCtx9 + 184 | 0; //@line 8669
     HEAP32[$563 >> 2] = $92; //@line 8670
     $564 = $ReallocAsyncCtx9 + 188 | 0; //@line 8671
     HEAP32[$564 >> 2] = $94; //@line 8672
     $565 = $ReallocAsyncCtx9 + 192 | 0; //@line 8673
     HEAP32[$565 >> 2] = $96; //@line 8674
     $566 = $ReallocAsyncCtx9 + 196 | 0; //@line 8675
     HEAP32[$566 >> 2] = $98; //@line 8676
     $567 = $ReallocAsyncCtx9 + 200 | 0; //@line 8677
     HEAP32[$567 >> 2] = $100; //@line 8678
     $568 = $ReallocAsyncCtx9 + 204 | 0; //@line 8679
     HEAP32[$568 >> 2] = $102; //@line 8680
     $569 = $ReallocAsyncCtx9 + 208 | 0; //@line 8681
     HEAP32[$569 >> 2] = $104; //@line 8682
     $570 = $ReallocAsyncCtx9 + 212 | 0; //@line 8683
     HEAP32[$570 >> 2] = $106; //@line 8684
     $571 = $ReallocAsyncCtx9 + 216 | 0; //@line 8685
     HEAP32[$571 >> 2] = $108; //@line 8686
     $572 = $ReallocAsyncCtx9 + 220 | 0; //@line 8687
     HEAP32[$572 >> 2] = $110; //@line 8688
     $573 = $ReallocAsyncCtx9 + 224 | 0; //@line 8689
     HEAP32[$573 >> 2] = $112; //@line 8690
     $574 = $ReallocAsyncCtx9 + 228 | 0; //@line 8691
     HEAP32[$574 >> 2] = $114; //@line 8692
     $575 = $ReallocAsyncCtx9 + 232 | 0; //@line 8693
     HEAP32[$575 >> 2] = $116; //@line 8694
     $576 = $ReallocAsyncCtx9 + 236 | 0; //@line 8695
     HEAP32[$576 >> 2] = $118; //@line 8696
     $577 = $ReallocAsyncCtx9 + 240 | 0; //@line 8697
     HEAP32[$577 >> 2] = $120; //@line 8698
     $578 = $ReallocAsyncCtx9 + 244 | 0; //@line 8699
     HEAP32[$578 >> 2] = $122; //@line 8700
     $579 = $ReallocAsyncCtx9 + 248 | 0; //@line 8701
     HEAP32[$579 >> 2] = $124; //@line 8702
     $580 = $ReallocAsyncCtx9 + 252 | 0; //@line 8703
     HEAP32[$580 >> 2] = $126; //@line 8704
     $581 = $ReallocAsyncCtx9 + 256 | 0; //@line 8705
     HEAP32[$581 >> 2] = $128; //@line 8706
     $582 = $ReallocAsyncCtx9 + 260 | 0; //@line 8707
     HEAP32[$582 >> 2] = $130; //@line 8708
     $583 = $ReallocAsyncCtx9 + 264 | 0; //@line 8709
     HEAP32[$583 >> 2] = $132; //@line 8710
     sp = STACKTOP; //@line 8711
     return;
    }
   case 55:
    {
     _mbed_tracef(2, 3803, 4831, $66); //@line 8716
     break L2;
     break;
    }
   case 59:
    {
     $601 = HEAP32[$126 >> 2] | 0; //@line 8721
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 8724
     $604 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $601 + 60 | 0, $601 + 8 | 0, 20, $$1202$i) | 0; //@line 8725
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 8728
      $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 8729
      HEAP32[$605 >> 2] = $2; //@line 8730
      $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 8731
      HEAP32[$606 >> 2] = $4; //@line 8732
      $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 8733
      HEAP32[$607 >> 2] = $6; //@line 8734
      $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 8735
      HEAP32[$608 >> 2] = $8; //@line 8736
      $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 8737
      HEAP32[$609 >> 2] = $10; //@line 8738
      $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 8739
      HEAP32[$610 >> 2] = $12; //@line 8740
      $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 8741
      HEAP32[$611 >> 2] = $14; //@line 8742
      $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 8743
      HEAP32[$612 >> 2] = $16; //@line 8744
      $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 8745
      HEAP32[$613 >> 2] = $18; //@line 8746
      $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 8747
      HEAP32[$614 >> 2] = $20; //@line 8748
      $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 8749
      HEAP32[$615 >> 2] = $22; //@line 8750
      $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 8751
      HEAP32[$616 >> 2] = $24; //@line 8752
      $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 8753
      HEAP32[$617 >> 2] = $26; //@line 8754
      $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 8755
      HEAP32[$618 >> 2] = $28; //@line 8756
      $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 8757
      HEAP32[$619 >> 2] = $30; //@line 8758
      $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 8759
      HEAP32[$620 >> 2] = $32; //@line 8760
      $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 8761
      HEAP32[$621 >> 2] = $34; //@line 8762
      $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 8763
      HEAP32[$622 >> 2] = $36; //@line 8764
      $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 8765
      HEAP32[$623 >> 2] = $38; //@line 8766
      $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 8767
      HEAP32[$624 >> 2] = $40; //@line 8768
      $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 8769
      HEAP32[$625 >> 2] = $42; //@line 8770
      $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 8771
      HEAP32[$626 >> 2] = $44; //@line 8772
      $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 8773
      HEAP32[$627 >> 2] = $46; //@line 8774
      $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 8775
      HEAP32[$628 >> 2] = $48; //@line 8776
      $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 8777
      HEAP32[$629 >> 2] = $50; //@line 8778
      $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 8779
      HEAP32[$630 >> 2] = $52; //@line 8780
      $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 8781
      HEAP32[$631 >> 2] = $54; //@line 8782
      $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 8783
      HEAP32[$632 >> 2] = $56; //@line 8784
      $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 8785
      HEAP32[$633 >> 2] = $58; //@line 8786
      $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 8787
      HEAP32[$634 >> 2] = $60; //@line 8788
      $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 8789
      HEAP32[$635 >> 2] = $157; //@line 8790
      $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 8791
      HEAP32[$636 >> 2] = $64; //@line 8792
      $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 8793
      HEAP32[$637 >> 2] = $66; //@line 8794
      $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 8795
      HEAP32[$638 >> 2] = $68; //@line 8796
      $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 8797
      HEAP32[$639 >> 2] = $70; //@line 8798
      $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 8799
      HEAP32[$640 >> 2] = $72; //@line 8800
      $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 8801
      HEAP32[$641 >> 2] = $74; //@line 8802
      $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 8803
      HEAP32[$642 >> 2] = $76; //@line 8804
      $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 8805
      HEAP32[$643 >> 2] = $78; //@line 8806
      $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 8807
      HEAP32[$644 >> 2] = $80; //@line 8808
      $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 8809
      HEAP32[$645 >> 2] = $82; //@line 8810
      $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 8811
      HEAP32[$646 >> 2] = $84; //@line 8812
      $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 8813
      HEAP32[$647 >> 2] = $86; //@line 8814
      $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 8815
      HEAP32[$648 >> 2] = $88; //@line 8816
      $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 8817
      HEAP32[$649 >> 2] = $90; //@line 8818
      $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 8819
      HEAP32[$650 >> 2] = $92; //@line 8820
      $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 8821
      HEAP32[$651 >> 2] = $94; //@line 8822
      $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 8823
      HEAP32[$652 >> 2] = $96; //@line 8824
      $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 8825
      HEAP32[$653 >> 2] = $98; //@line 8826
      $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 8827
      HEAP32[$654 >> 2] = $100; //@line 8828
      $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 8829
      HEAP32[$655 >> 2] = $102; //@line 8830
      $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 8831
      HEAP32[$656 >> 2] = $104; //@line 8832
      $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 8833
      HEAP32[$657 >> 2] = $106; //@line 8834
      $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 8835
      HEAP32[$658 >> 2] = $108; //@line 8836
      $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 8837
      HEAP32[$659 >> 2] = $110; //@line 8838
      $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 8839
      HEAP32[$660 >> 2] = $112; //@line 8840
      $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 8841
      HEAP32[$661 >> 2] = $114; //@line 8842
      $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 8843
      HEAP32[$662 >> 2] = $116; //@line 8844
      $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 8845
      HEAP32[$663 >> 2] = $118; //@line 8846
      $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 8847
      HEAP32[$664 >> 2] = $120; //@line 8848
      $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 8849
      HEAP32[$665 >> 2] = $122; //@line 8850
      $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 8851
      HEAP32[$666 >> 2] = $124; //@line 8852
      $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 8853
      HEAP32[$667 >> 2] = $126; //@line 8854
      $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 8855
      HEAP32[$668 >> 2] = $128; //@line 8856
      $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 8857
      HEAP32[$669 >> 2] = $130; //@line 8858
      $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 8859
      HEAP32[$670 >> 2] = $132; //@line 8860
      sp = STACKTOP; //@line 8861
      return;
     }
     HEAP8[___async_retval >> 0] = $604; //@line 8865
     ___async_unwind = 0; //@line 8866
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 8867
     $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 8868
     HEAP32[$605 >> 2] = $2; //@line 8869
     $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 8870
     HEAP32[$606 >> 2] = $4; //@line 8871
     $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 8872
     HEAP32[$607 >> 2] = $6; //@line 8873
     $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 8874
     HEAP32[$608 >> 2] = $8; //@line 8875
     $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 8876
     HEAP32[$609 >> 2] = $10; //@line 8877
     $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 8878
     HEAP32[$610 >> 2] = $12; //@line 8879
     $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 8880
     HEAP32[$611 >> 2] = $14; //@line 8881
     $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 8882
     HEAP32[$612 >> 2] = $16; //@line 8883
     $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 8884
     HEAP32[$613 >> 2] = $18; //@line 8885
     $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 8886
     HEAP32[$614 >> 2] = $20; //@line 8887
     $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 8888
     HEAP32[$615 >> 2] = $22; //@line 8889
     $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 8890
     HEAP32[$616 >> 2] = $24; //@line 8891
     $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 8892
     HEAP32[$617 >> 2] = $26; //@line 8893
     $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 8894
     HEAP32[$618 >> 2] = $28; //@line 8895
     $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 8896
     HEAP32[$619 >> 2] = $30; //@line 8897
     $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 8898
     HEAP32[$620 >> 2] = $32; //@line 8899
     $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 8900
     HEAP32[$621 >> 2] = $34; //@line 8901
     $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 8902
     HEAP32[$622 >> 2] = $36; //@line 8903
     $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 8904
     HEAP32[$623 >> 2] = $38; //@line 8905
     $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 8906
     HEAP32[$624 >> 2] = $40; //@line 8907
     $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 8908
     HEAP32[$625 >> 2] = $42; //@line 8909
     $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 8910
     HEAP32[$626 >> 2] = $44; //@line 8911
     $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 8912
     HEAP32[$627 >> 2] = $46; //@line 8913
     $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 8914
     HEAP32[$628 >> 2] = $48; //@line 8915
     $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 8916
     HEAP32[$629 >> 2] = $50; //@line 8917
     $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 8918
     HEAP32[$630 >> 2] = $52; //@line 8919
     $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 8920
     HEAP32[$631 >> 2] = $54; //@line 8921
     $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 8922
     HEAP32[$632 >> 2] = $56; //@line 8923
     $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 8924
     HEAP32[$633 >> 2] = $58; //@line 8925
     $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 8926
     HEAP32[$634 >> 2] = $60; //@line 8927
     $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 8928
     HEAP32[$635 >> 2] = $157; //@line 8929
     $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 8930
     HEAP32[$636 >> 2] = $64; //@line 8931
     $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 8932
     HEAP32[$637 >> 2] = $66; //@line 8933
     $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 8934
     HEAP32[$638 >> 2] = $68; //@line 8935
     $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 8936
     HEAP32[$639 >> 2] = $70; //@line 8937
     $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 8938
     HEAP32[$640 >> 2] = $72; //@line 8939
     $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 8940
     HEAP32[$641 >> 2] = $74; //@line 8941
     $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 8942
     HEAP32[$642 >> 2] = $76; //@line 8943
     $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 8944
     HEAP32[$643 >> 2] = $78; //@line 8945
     $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 8946
     HEAP32[$644 >> 2] = $80; //@line 8947
     $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 8948
     HEAP32[$645 >> 2] = $82; //@line 8949
     $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 8950
     HEAP32[$646 >> 2] = $84; //@line 8951
     $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 8952
     HEAP32[$647 >> 2] = $86; //@line 8953
     $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 8954
     HEAP32[$648 >> 2] = $88; //@line 8955
     $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 8956
     HEAP32[$649 >> 2] = $90; //@line 8957
     $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 8958
     HEAP32[$650 >> 2] = $92; //@line 8959
     $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 8960
     HEAP32[$651 >> 2] = $94; //@line 8961
     $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 8962
     HEAP32[$652 >> 2] = $96; //@line 8963
     $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 8964
     HEAP32[$653 >> 2] = $98; //@line 8965
     $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 8966
     HEAP32[$654 >> 2] = $100; //@line 8967
     $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 8968
     HEAP32[$655 >> 2] = $102; //@line 8969
     $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 8970
     HEAP32[$656 >> 2] = $104; //@line 8971
     $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 8972
     HEAP32[$657 >> 2] = $106; //@line 8973
     $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 8974
     HEAP32[$658 >> 2] = $108; //@line 8975
     $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 8976
     HEAP32[$659 >> 2] = $110; //@line 8977
     $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 8978
     HEAP32[$660 >> 2] = $112; //@line 8979
     $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 8980
     HEAP32[$661 >> 2] = $114; //@line 8981
     $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 8982
     HEAP32[$662 >> 2] = $116; //@line 8983
     $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 8984
     HEAP32[$663 >> 2] = $118; //@line 8985
     $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 8986
     HEAP32[$664 >> 2] = $120; //@line 8987
     $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 8988
     HEAP32[$665 >> 2] = $122; //@line 8989
     $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 8990
     HEAP32[$666 >> 2] = $124; //@line 8991
     $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 8992
     HEAP32[$667 >> 2] = $126; //@line 8993
     $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 8994
     HEAP32[$668 >> 2] = $128; //@line 8995
     $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 8996
     HEAP32[$669 >> 2] = $130; //@line 8997
     $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 8998
     HEAP32[$670 >> 2] = $132; //@line 8999
     sp = STACKTOP; //@line 9000
     return;
    }
   case 62:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 9005
     $672 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $4, $22, 11, $$1202$i) | 0; //@line 9006
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 9009
      $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 9010
      HEAP32[$673 >> 2] = $2; //@line 9011
      $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 9012
      HEAP32[$674 >> 2] = $4; //@line 9013
      $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 9014
      HEAP32[$675 >> 2] = $6; //@line 9015
      $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 9016
      HEAP32[$676 >> 2] = $8; //@line 9017
      $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 9018
      HEAP32[$677 >> 2] = $10; //@line 9019
      $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 9020
      HEAP32[$678 >> 2] = $12; //@line 9021
      $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 9022
      HEAP32[$679 >> 2] = $14; //@line 9023
      $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 9024
      HEAP32[$680 >> 2] = $16; //@line 9025
      $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 9026
      HEAP32[$681 >> 2] = $18; //@line 9027
      $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 9028
      HEAP32[$682 >> 2] = $20; //@line 9029
      $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 9030
      HEAP32[$683 >> 2] = $22; //@line 9031
      $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 9032
      HEAP32[$684 >> 2] = $24; //@line 9033
      $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 9034
      HEAP32[$685 >> 2] = $26; //@line 9035
      $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 9036
      HEAP32[$686 >> 2] = $28; //@line 9037
      $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 9038
      HEAP32[$687 >> 2] = $30; //@line 9039
      $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 9040
      HEAP32[$688 >> 2] = $32; //@line 9041
      $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 9042
      HEAP32[$689 >> 2] = $34; //@line 9043
      $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 9044
      HEAP32[$690 >> 2] = $36; //@line 9045
      $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 9046
      HEAP32[$691 >> 2] = $38; //@line 9047
      $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 9048
      HEAP32[$692 >> 2] = $40; //@line 9049
      $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 9050
      HEAP32[$693 >> 2] = $42; //@line 9051
      $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 9052
      HEAP32[$694 >> 2] = $44; //@line 9053
      $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 9054
      HEAP32[$695 >> 2] = $46; //@line 9055
      $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 9056
      HEAP32[$696 >> 2] = $48; //@line 9057
      $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 9058
      HEAP32[$697 >> 2] = $50; //@line 9059
      $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 9060
      HEAP32[$698 >> 2] = $52; //@line 9061
      $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 9062
      HEAP32[$699 >> 2] = $54; //@line 9063
      $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 9064
      HEAP32[$700 >> 2] = $56; //@line 9065
      $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 9066
      HEAP32[$701 >> 2] = $58; //@line 9067
      $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 9068
      HEAP32[$702 >> 2] = $60; //@line 9069
      $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 9070
      HEAP32[$703 >> 2] = $157; //@line 9071
      $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 9072
      HEAP32[$704 >> 2] = $64; //@line 9073
      $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 9074
      HEAP32[$705 >> 2] = $66; //@line 9075
      $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 9076
      HEAP32[$706 >> 2] = $68; //@line 9077
      $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 9078
      HEAP32[$707 >> 2] = $70; //@line 9079
      $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 9080
      HEAP32[$708 >> 2] = $72; //@line 9081
      $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 9082
      HEAP32[$709 >> 2] = $74; //@line 9083
      $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 9084
      HEAP32[$710 >> 2] = $76; //@line 9085
      $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 9086
      HEAP32[$711 >> 2] = $78; //@line 9087
      $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 9088
      HEAP32[$712 >> 2] = $80; //@line 9089
      $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 9090
      HEAP32[$713 >> 2] = $82; //@line 9091
      $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 9092
      HEAP32[$714 >> 2] = $84; //@line 9093
      $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 9094
      HEAP32[$715 >> 2] = $86; //@line 9095
      $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 9096
      HEAP32[$716 >> 2] = $88; //@line 9097
      $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 9098
      HEAP32[$717 >> 2] = $90; //@line 9099
      $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 9100
      HEAP32[$718 >> 2] = $92; //@line 9101
      $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 9102
      HEAP32[$719 >> 2] = $94; //@line 9103
      $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 9104
      HEAP32[$720 >> 2] = $96; //@line 9105
      $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 9106
      HEAP32[$721 >> 2] = $98; //@line 9107
      $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 9108
      HEAP32[$722 >> 2] = $100; //@line 9109
      $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 9110
      HEAP32[$723 >> 2] = $102; //@line 9111
      $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 9112
      HEAP32[$724 >> 2] = $104; //@line 9113
      $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 9114
      HEAP32[$725 >> 2] = $106; //@line 9115
      $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 9116
      HEAP32[$726 >> 2] = $108; //@line 9117
      $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 9118
      HEAP32[$727 >> 2] = $110; //@line 9119
      $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 9120
      HEAP32[$728 >> 2] = $112; //@line 9121
      $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 9122
      HEAP32[$729 >> 2] = $114; //@line 9123
      $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 9124
      HEAP32[$730 >> 2] = $116; //@line 9125
      $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 9126
      HEAP32[$731 >> 2] = $118; //@line 9127
      $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 9128
      HEAP32[$732 >> 2] = $120; //@line 9129
      $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 9130
      HEAP32[$733 >> 2] = $122; //@line 9131
      $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 9132
      HEAP32[$734 >> 2] = $124; //@line 9133
      $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 9134
      HEAP32[$735 >> 2] = $126; //@line 9135
      $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 9136
      HEAP32[$736 >> 2] = $128; //@line 9137
      $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 9138
      HEAP32[$737 >> 2] = $130; //@line 9139
      $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 9140
      HEAP32[$738 >> 2] = $132; //@line 9141
      sp = STACKTOP; //@line 9142
      return;
     }
     HEAP8[___async_retval >> 0] = $672; //@line 9146
     ___async_unwind = 0; //@line 9147
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 9148
     $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 9149
     HEAP32[$673 >> 2] = $2; //@line 9150
     $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 9151
     HEAP32[$674 >> 2] = $4; //@line 9152
     $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 9153
     HEAP32[$675 >> 2] = $6; //@line 9154
     $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 9155
     HEAP32[$676 >> 2] = $8; //@line 9156
     $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 9157
     HEAP32[$677 >> 2] = $10; //@line 9158
     $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 9159
     HEAP32[$678 >> 2] = $12; //@line 9160
     $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 9161
     HEAP32[$679 >> 2] = $14; //@line 9162
     $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 9163
     HEAP32[$680 >> 2] = $16; //@line 9164
     $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 9165
     HEAP32[$681 >> 2] = $18; //@line 9166
     $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 9167
     HEAP32[$682 >> 2] = $20; //@line 9168
     $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 9169
     HEAP32[$683 >> 2] = $22; //@line 9170
     $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 9171
     HEAP32[$684 >> 2] = $24; //@line 9172
     $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 9173
     HEAP32[$685 >> 2] = $26; //@line 9174
     $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 9175
     HEAP32[$686 >> 2] = $28; //@line 9176
     $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 9177
     HEAP32[$687 >> 2] = $30; //@line 9178
     $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 9179
     HEAP32[$688 >> 2] = $32; //@line 9180
     $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 9181
     HEAP32[$689 >> 2] = $34; //@line 9182
     $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 9183
     HEAP32[$690 >> 2] = $36; //@line 9184
     $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 9185
     HEAP32[$691 >> 2] = $38; //@line 9186
     $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 9187
     HEAP32[$692 >> 2] = $40; //@line 9188
     $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 9189
     HEAP32[$693 >> 2] = $42; //@line 9190
     $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 9191
     HEAP32[$694 >> 2] = $44; //@line 9192
     $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 9193
     HEAP32[$695 >> 2] = $46; //@line 9194
     $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 9195
     HEAP32[$696 >> 2] = $48; //@line 9196
     $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 9197
     HEAP32[$697 >> 2] = $50; //@line 9198
     $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 9199
     HEAP32[$698 >> 2] = $52; //@line 9200
     $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 9201
     HEAP32[$699 >> 2] = $54; //@line 9202
     $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 9203
     HEAP32[$700 >> 2] = $56; //@line 9204
     $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 9205
     HEAP32[$701 >> 2] = $58; //@line 9206
     $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 9207
     HEAP32[$702 >> 2] = $60; //@line 9208
     $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 9209
     HEAP32[$703 >> 2] = $157; //@line 9210
     $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 9211
     HEAP32[$704 >> 2] = $64; //@line 9212
     $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 9213
     HEAP32[$705 >> 2] = $66; //@line 9214
     $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 9215
     HEAP32[$706 >> 2] = $68; //@line 9216
     $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 9217
     HEAP32[$707 >> 2] = $70; //@line 9218
     $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 9219
     HEAP32[$708 >> 2] = $72; //@line 9220
     $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 9221
     HEAP32[$709 >> 2] = $74; //@line 9222
     $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 9223
     HEAP32[$710 >> 2] = $76; //@line 9224
     $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 9225
     HEAP32[$711 >> 2] = $78; //@line 9226
     $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 9227
     HEAP32[$712 >> 2] = $80; //@line 9228
     $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 9229
     HEAP32[$713 >> 2] = $82; //@line 9230
     $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 9231
     HEAP32[$714 >> 2] = $84; //@line 9232
     $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 9233
     HEAP32[$715 >> 2] = $86; //@line 9234
     $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 9235
     HEAP32[$716 >> 2] = $88; //@line 9236
     $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 9237
     HEAP32[$717 >> 2] = $90; //@line 9238
     $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 9239
     HEAP32[$718 >> 2] = $92; //@line 9240
     $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 9241
     HEAP32[$719 >> 2] = $94; //@line 9242
     $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 9243
     HEAP32[$720 >> 2] = $96; //@line 9244
     $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 9245
     HEAP32[$721 >> 2] = $98; //@line 9246
     $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 9247
     HEAP32[$722 >> 2] = $100; //@line 9248
     $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 9249
     HEAP32[$723 >> 2] = $102; //@line 9250
     $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 9251
     HEAP32[$724 >> 2] = $104; //@line 9252
     $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 9253
     HEAP32[$725 >> 2] = $106; //@line 9254
     $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 9255
     HEAP32[$726 >> 2] = $108; //@line 9256
     $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 9257
     HEAP32[$727 >> 2] = $110; //@line 9258
     $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 9259
     HEAP32[$728 >> 2] = $112; //@line 9260
     $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 9261
     HEAP32[$729 >> 2] = $114; //@line 9262
     $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 9263
     HEAP32[$730 >> 2] = $116; //@line 9264
     $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 9265
     HEAP32[$731 >> 2] = $118; //@line 9266
     $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 9267
     HEAP32[$732 >> 2] = $120; //@line 9268
     $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 9269
     HEAP32[$733 >> 2] = $122; //@line 9270
     $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 9271
     HEAP32[$734 >> 2] = $124; //@line 9272
     $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 9273
     HEAP32[$735 >> 2] = $126; //@line 9274
     $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 9275
     HEAP32[$736 >> 2] = $128; //@line 9276
     $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 9277
     HEAP32[$737 >> 2] = $130; //@line 9278
     $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 9279
     HEAP32[$738 >> 2] = $132; //@line 9280
     sp = STACKTOP; //@line 9281
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3803, 5026, $48); //@line 9286
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$126 >> 2] | 0; //@line 9291
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 9294
     $759 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 9295
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 9298
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 9299
      HEAP32[$760 >> 2] = $2; //@line 9300
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 9301
      HEAP32[$761 >> 2] = $4; //@line 9302
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 9303
      HEAP32[$762 >> 2] = $6; //@line 9304
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 9305
      HEAP32[$763 >> 2] = $8; //@line 9306
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 9307
      HEAP32[$764 >> 2] = $10; //@line 9308
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 9309
      HEAP32[$765 >> 2] = $12; //@line 9310
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 9311
      HEAP32[$766 >> 2] = $14; //@line 9312
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 9313
      HEAP32[$767 >> 2] = $16; //@line 9314
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 9315
      HEAP32[$768 >> 2] = $18; //@line 9316
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 9317
      HEAP32[$769 >> 2] = $20; //@line 9318
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 9319
      HEAP32[$770 >> 2] = $22; //@line 9320
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 9321
      HEAP32[$771 >> 2] = $24; //@line 9322
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 9323
      HEAP32[$772 >> 2] = $26; //@line 9324
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 9325
      HEAP32[$773 >> 2] = $28; //@line 9326
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 9327
      HEAP32[$774 >> 2] = $30; //@line 9328
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 9329
      HEAP32[$775 >> 2] = $32; //@line 9330
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 9331
      HEAP32[$776 >> 2] = $34; //@line 9332
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 9333
      HEAP32[$777 >> 2] = $36; //@line 9334
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 9335
      HEAP32[$778 >> 2] = $38; //@line 9336
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 9337
      HEAP32[$779 >> 2] = $40; //@line 9338
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 9339
      HEAP32[$780 >> 2] = $42; //@line 9340
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 9341
      HEAP32[$781 >> 2] = $44; //@line 9342
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 9343
      HEAP32[$782 >> 2] = $46; //@line 9344
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 9345
      HEAP32[$783 >> 2] = $48; //@line 9346
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 9347
      HEAP32[$784 >> 2] = $50; //@line 9348
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 9349
      HEAP32[$785 >> 2] = $52; //@line 9350
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 9351
      HEAP32[$786 >> 2] = $54; //@line 9352
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 9353
      HEAP32[$787 >> 2] = $56; //@line 9354
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 9355
      HEAP32[$788 >> 2] = $58; //@line 9356
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 9357
      HEAP32[$789 >> 2] = $60; //@line 9358
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 9359
      HEAP32[$790 >> 2] = $157; //@line 9360
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 9361
      HEAP32[$791 >> 2] = $64; //@line 9362
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 9363
      HEAP32[$792 >> 2] = $66; //@line 9364
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 9365
      HEAP32[$793 >> 2] = $68; //@line 9366
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 9367
      HEAP32[$794 >> 2] = $70; //@line 9368
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 9369
      HEAP32[$795 >> 2] = $72; //@line 9370
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 9371
      HEAP32[$796 >> 2] = $74; //@line 9372
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 9373
      HEAP32[$797 >> 2] = $76; //@line 9374
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 9375
      HEAP32[$798 >> 2] = $78; //@line 9376
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 9377
      HEAP32[$799 >> 2] = $80; //@line 9378
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 9379
      HEAP32[$800 >> 2] = $82; //@line 9380
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 9381
      HEAP32[$801 >> 2] = $84; //@line 9382
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 9383
      HEAP32[$802 >> 2] = $86; //@line 9384
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 9385
      HEAP32[$803 >> 2] = $88; //@line 9386
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 9387
      HEAP32[$804 >> 2] = $90; //@line 9388
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 9389
      HEAP32[$805 >> 2] = $92; //@line 9390
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 9391
      HEAP32[$806 >> 2] = $94; //@line 9392
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 9393
      HEAP32[$807 >> 2] = $96; //@line 9394
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 9395
      HEAP32[$808 >> 2] = $98; //@line 9396
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 9397
      HEAP32[$809 >> 2] = $100; //@line 9398
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 9399
      HEAP32[$810 >> 2] = $102; //@line 9400
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 9401
      HEAP32[$811 >> 2] = $104; //@line 9402
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 9403
      HEAP32[$812 >> 2] = $106; //@line 9404
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 9405
      HEAP32[$813 >> 2] = $108; //@line 9406
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 9407
      HEAP32[$814 >> 2] = $110; //@line 9408
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 9409
      HEAP32[$815 >> 2] = $112; //@line 9410
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 9411
      HEAP32[$816 >> 2] = $114; //@line 9412
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 9413
      HEAP32[$817 >> 2] = $116; //@line 9414
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 9415
      HEAP32[$818 >> 2] = $118; //@line 9416
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 9417
      HEAP32[$819 >> 2] = $120; //@line 9418
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 9419
      HEAP32[$820 >> 2] = $122; //@line 9420
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 9421
      HEAP32[$821 >> 2] = $124; //@line 9422
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 9423
      HEAP32[$822 >> 2] = $126; //@line 9424
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 9425
      HEAP32[$823 >> 2] = $128; //@line 9426
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 9427
      HEAP32[$824 >> 2] = $130; //@line 9428
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 9429
      HEAP32[$825 >> 2] = $132; //@line 9430
      sp = STACKTOP; //@line 9431
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 9435
     ___async_unwind = 0; //@line 9436
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 9437
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 9438
     HEAP32[$760 >> 2] = $2; //@line 9439
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 9440
     HEAP32[$761 >> 2] = $4; //@line 9441
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 9442
     HEAP32[$762 >> 2] = $6; //@line 9443
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 9444
     HEAP32[$763 >> 2] = $8; //@line 9445
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 9446
     HEAP32[$764 >> 2] = $10; //@line 9447
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 9448
     HEAP32[$765 >> 2] = $12; //@line 9449
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 9450
     HEAP32[$766 >> 2] = $14; //@line 9451
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 9452
     HEAP32[$767 >> 2] = $16; //@line 9453
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 9454
     HEAP32[$768 >> 2] = $18; //@line 9455
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 9456
     HEAP32[$769 >> 2] = $20; //@line 9457
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 9458
     HEAP32[$770 >> 2] = $22; //@line 9459
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 9460
     HEAP32[$771 >> 2] = $24; //@line 9461
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 9462
     HEAP32[$772 >> 2] = $26; //@line 9463
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 9464
     HEAP32[$773 >> 2] = $28; //@line 9465
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 9466
     HEAP32[$774 >> 2] = $30; //@line 9467
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 9468
     HEAP32[$775 >> 2] = $32; //@line 9469
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 9470
     HEAP32[$776 >> 2] = $34; //@line 9471
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 9472
     HEAP32[$777 >> 2] = $36; //@line 9473
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 9474
     HEAP32[$778 >> 2] = $38; //@line 9475
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 9476
     HEAP32[$779 >> 2] = $40; //@line 9477
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 9478
     HEAP32[$780 >> 2] = $42; //@line 9479
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 9480
     HEAP32[$781 >> 2] = $44; //@line 9481
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 9482
     HEAP32[$782 >> 2] = $46; //@line 9483
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 9484
     HEAP32[$783 >> 2] = $48; //@line 9485
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 9486
     HEAP32[$784 >> 2] = $50; //@line 9487
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 9488
     HEAP32[$785 >> 2] = $52; //@line 9489
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 9490
     HEAP32[$786 >> 2] = $54; //@line 9491
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 9492
     HEAP32[$787 >> 2] = $56; //@line 9493
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 9494
     HEAP32[$788 >> 2] = $58; //@line 9495
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 9496
     HEAP32[$789 >> 2] = $60; //@line 9497
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 9498
     HEAP32[$790 >> 2] = $157; //@line 9499
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 9500
     HEAP32[$791 >> 2] = $64; //@line 9501
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 9502
     HEAP32[$792 >> 2] = $66; //@line 9503
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 9504
     HEAP32[$793 >> 2] = $68; //@line 9505
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 9506
     HEAP32[$794 >> 2] = $70; //@line 9507
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 9508
     HEAP32[$795 >> 2] = $72; //@line 9509
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 9510
     HEAP32[$796 >> 2] = $74; //@line 9511
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 9512
     HEAP32[$797 >> 2] = $76; //@line 9513
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 9514
     HEAP32[$798 >> 2] = $78; //@line 9515
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 9516
     HEAP32[$799 >> 2] = $80; //@line 9517
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 9518
     HEAP32[$800 >> 2] = $82; //@line 9519
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 9520
     HEAP32[$801 >> 2] = $84; //@line 9521
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 9522
     HEAP32[$802 >> 2] = $86; //@line 9523
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 9524
     HEAP32[$803 >> 2] = $88; //@line 9525
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 9526
     HEAP32[$804 >> 2] = $90; //@line 9527
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 9528
     HEAP32[$805 >> 2] = $92; //@line 9529
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 9530
     HEAP32[$806 >> 2] = $94; //@line 9531
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 9532
     HEAP32[$807 >> 2] = $96; //@line 9533
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 9534
     HEAP32[$808 >> 2] = $98; //@line 9535
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 9536
     HEAP32[$809 >> 2] = $100; //@line 9537
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 9538
     HEAP32[$810 >> 2] = $102; //@line 9539
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 9540
     HEAP32[$811 >> 2] = $104; //@line 9541
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 9542
     HEAP32[$812 >> 2] = $106; //@line 9543
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 9544
     HEAP32[$813 >> 2] = $108; //@line 9545
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 9546
     HEAP32[$814 >> 2] = $110; //@line 9547
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 9548
     HEAP32[$815 >> 2] = $112; //@line 9549
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 9550
     HEAP32[$816 >> 2] = $114; //@line 9551
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 9552
     HEAP32[$817 >> 2] = $116; //@line 9553
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 9554
     HEAP32[$818 >> 2] = $118; //@line 9555
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 9556
     HEAP32[$819 >> 2] = $120; //@line 9557
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 9558
     HEAP32[$820 >> 2] = $122; //@line 9559
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 9560
     HEAP32[$821 >> 2] = $124; //@line 9561
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 9562
     HEAP32[$822 >> 2] = $126; //@line 9563
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 9564
     HEAP32[$823 >> 2] = $128; //@line 9565
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 9566
     HEAP32[$824 >> 2] = $130; //@line 9567
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 9568
     HEAP32[$825 >> 2] = $132; //@line 9569
     sp = STACKTOP; //@line 9570
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3803, 5152, $46); //@line 9575
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3803, 5213, $20); //@line 9580
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3803, 5274, $72); //@line 9585
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3803, 5335, $60); //@line 9590
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3803, 5395, $120); //@line 9595
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3803, 5455, $74); //@line 9600
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $92 | 0) >= ($80 | 0)) {
      $936 = ___async_retval; //@line 9609
      HEAP32[$936 >> 2] = $38; //@line 9610
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 9616
      HEAP32[$36 >> 2] = $926; //@line 9617
      $927 = $926; //@line 9618
      $929 = $92 - $927 + $80 | 0; //@line 9620
      HEAP16[$82 + 24 >> 1] = $929; //@line 9623
      if ($929 & 65535 | 0) {
       HEAP32[$82 + 36 >> 2] = $927; //@line 9628
       $936 = ___async_retval; //@line 9629
       HEAP32[$936 >> 2] = $38; //@line 9630
       return;
      }
     } else {
      _mbed_tracef(2, 3803, 5502, $50); //@line 9634
     }
     HEAP32[$82 + 4 >> 2] = 1; //@line 9637
     $936 = ___async_retval; //@line 9638
     HEAP32[$936 >> 2] = $38; //@line 9639
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3803, 4505, $96); //@line 9645
  }
 } while (0);
 HEAP32[$82 + 4 >> 2] = 1; //@line 9649
 $936 = ___async_retval; //@line 9650
 HEAP32[$936 >> 2] = $38; //@line 9651
 return;
}
function _sn_coap_parser__async_cb_29($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $586 = 0, $589 = 0, $590 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $595$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 52
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 54
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 56
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 58
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 60
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 62
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 64
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 66
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 68
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 70
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 72
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 74
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 76
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 78
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 80
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 82
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 84
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 86
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 88
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 90
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 92
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 94
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 96
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 98
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 100
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 102
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 104
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 106
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 108
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 110
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 112
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 116
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 118
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 120
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 122
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 124
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 126
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 128
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 130
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 132
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 134
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 136
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 138
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 140
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 142
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 144
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 146
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 148
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 150
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 152
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 154
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 156
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 158
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 160
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 162
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 164
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 166
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 168
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 170
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 172
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 174
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 176
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 178
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 180
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 182
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 184
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 124 >> 2] | 0; //@line 190
   L3 : while (1) {
    $917 = HEAP32[$68 >> 2] | 0; //@line 192
    $918 = $917 - $92 | 0; //@line 193
    $137 = $917; //@line 196
    if (($918 | 0) > ($80 | 0)) {
     break L2;
    }
    if (!(($80 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 203
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 206
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 209
     break;
    }
    $140 = $trunc277$i & 15; //@line 213
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 214
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 219
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 227
      $$sink214$i = 13; //@line 227
      $$sink3$i = 1; //@line 227
      label = 8; //@line 228
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 240
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 240
      $$sink3$i = 2; //@line 240
      label = 8; //@line 241
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 245
      $159 = $137; //@line 245
      $937 = $917; //@line 245
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 249
     $154 = $137 + $$sink3$i | 0; //@line 251
     HEAP32[$36 >> 2] = $154; //@line 252
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 254
     $159 = $154; //@line 254
     $937 = $154; //@line 254
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 257
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 261
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 269
      $$sink216$i = 13; //@line 269
      $$sink8$i = 1; //@line 269
      label = 13; //@line 270
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 282
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 282
      $$sink8$i = 2; //@line 282
      label = 13; //@line 283
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 287
      $174 = $937; //@line 287
      $189 = $159; //@line 287
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 291
     $171 = $159 + $$sink8$i | 0; //@line 293
     HEAP32[$36 >> 2] = $171; //@line 294
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 296
     $174 = $171; //@line 296
     $189 = $171; //@line 296
    }
    $$1202$i = $$1202$in$i & 65535; //@line 298
    $175 = $100 - $174 & 65535; //@line 300
    $trunc$i = $157 & 65535; //@line 301
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 62; //@line 305
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$126 >> 2] | 0)) {
        label = 16; //@line 313
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 318
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 323
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 328
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 333
         break L3;
         break;
        }
       case 20:
        {
         label = 57; //@line 338
         break L3;
         break;
        }
       case 11:
        {
         label = 62; //@line 343
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 348
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 359
          break L3;
         }
         $268 = $189 + 1 | 0; //@line 362
         HEAP32[$36 >> 2] = $268; //@line 363
         $269 = $$1202$in$i & 255; //@line 364
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 367
         } else {
          $$045$i221$i = $269; //@line 369
          $$06$i220$i = 0; //@line 369
          $274 = $268; //@line 369
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 371
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 373
           HEAP32[$36 >> 2] = $274; //@line 374
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 377
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 380
            break;
           } else {
            $$06$i220$i = $277; //@line 383
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 389
         $$reg2mem$0 = $157; //@line 390
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 53; //@line 397
          break L3;
         }
         $586 = (HEAP32[$126 >> 2] | 0) + 28 | 0; //@line 401
         if ((HEAP32[$586 >> 2] | 0) != -1) {
          label = 53; //@line 405
          break L3;
         }
         $589 = $189 + 1 | 0; //@line 408
         HEAP32[$36 >> 2] = $589; //@line 409
         $590 = $$1202$in$i & 255; //@line 410
         if (!($590 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 413
         } else {
          $$045$i263$i = $590; //@line 415
          $$06$i262$i = 0; //@line 415
          $595 = $589; //@line 415
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 417
           $595$looptemp = $595;
           $595 = $595 + 1 | 0; //@line 419
           HEAP32[$36 >> 2] = $595; //@line 420
           $598 = $$06$i262$i << 8 | HEAPU8[$595$looptemp >> 0]; //@line 423
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $598; //@line 426
            break;
           } else {
            $$06$i262$i = $598; //@line 429
           }
          }
         }
         HEAP32[$586 >> 2] = $$0$lcssa$i265$i; //@line 433
         $$reg2mem$0 = $157; //@line 434
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 441
          break L3;
         }
         $742 = (HEAP32[$126 >> 2] | 0) + 32 | 0; //@line 445
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 449
          break L3;
         }
         $745 = $189 + 1 | 0; //@line 452
         HEAP32[$36 >> 2] = $745; //@line 453
         $746 = $$1202$in$i & 255; //@line 454
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 457
         } else {
          $$045$i270$i = $746; //@line 459
          $$06$i269$i = 0; //@line 459
          $751 = $745; //@line 459
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 461
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 463
           HEAP32[$36 >> 2] = $751; //@line 464
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 467
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 470
            break;
           } else {
            $$06$i269$i = $754; //@line 473
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 477
         $$reg2mem$0 = $157; //@line 478
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 485
          break L3;
         }
         $829 = (HEAP32[$126 >> 2] | 0) + 40 | 0; //@line 489
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 493
          break L3;
         }
         $832 = $189 + 1 | 0; //@line 496
         HEAP32[$36 >> 2] = $832; //@line 497
         $833 = $$1202$in$i & 255; //@line 498
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 501
         } else {
          $$045$i256$i = $833; //@line 503
          $$06$i255$i = 0; //@line 503
          $838 = $832; //@line 503
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 505
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 507
           HEAP32[$36 >> 2] = $838; //@line 508
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 511
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 514
            break;
           } else {
            $$06$i255$i = $841; //@line 517
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 521
         $$reg2mem$0 = $157; //@line 522
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 529
          break L3;
         }
         $845 = (HEAP32[$126 >> 2] | 0) + 36 | 0; //@line 533
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 537
          break L3;
         }
         $848 = $189 + 1 | 0; //@line 540
         HEAP32[$36 >> 2] = $848; //@line 541
         $849 = $$1202$in$i & 255; //@line 542
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 545
         } else {
          $$045$i249$i = $849; //@line 547
          $$06$i248$i = 0; //@line 547
          $854 = $848; //@line 547
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 549
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 551
           HEAP32[$36 >> 2] = $854; //@line 552
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 555
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 558
            break;
           } else {
            $$06$i248$i = $857; //@line 561
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 565
         $$reg2mem$0 = $157; //@line 566
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 573
          break L3;
         }
         $861 = (HEAP32[$126 >> 2] | 0) + 12 | 0; //@line 577
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 581
          break L3;
         }
         $864 = $189 + 1 | 0; //@line 584
         HEAP32[$36 >> 2] = $864; //@line 585
         $865 = $$1202$in$i & 255; //@line 586
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 589
         } else {
          $$045$i242$i = $865; //@line 591
          $$06$i241$i = 0; //@line 591
          $870 = $864; //@line 591
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 593
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 595
           HEAP32[$36 >> 2] = $870; //@line 596
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 599
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 602
            break;
           } else {
            $$06$i241$i = $873; //@line 605
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 609
         $$reg2mem$0 = $157; //@line 610
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 617
          break L3;
         }
         $877 = (HEAP32[$126 >> 2] | 0) + 1 | 0; //@line 621
         $878 = HEAP8[$877 >> 0] | 0; //@line 622
         if ($878 & 1) {
          label = 94; //@line 626
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 630
         $883 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 632
         HEAP32[$36 >> 2] = $883; //@line 633
         $884 = $$1202$in$i & 255; //@line 634
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 637
         } else {
          $$045$i235$i = $884; //@line 639
          $$06$i234$i = 0; //@line 639
          $889 = $883; //@line 639
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 641
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 643
           HEAP32[$36 >> 2] = $889; //@line 644
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 647
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 650
            break;
           } else {
            $$06$i234$i = $892; //@line 653
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 659
         $$reg2mem$0 = $157; //@line 660
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 667
          break L3;
         }
         $898 = (HEAP32[$126 >> 2] | 0) + 1 | 0; //@line 671
         $899 = HEAP8[$898 >> 0] | 0; //@line 672
         if ($899 & 2) {
          label = 100; //@line 676
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 680
         $904 = (HEAP32[$36 >> 2] | 0) + 1 | 0; //@line 682
         HEAP32[$36 >> 2] = $904; //@line 683
         $905 = $$1202$in$i & 255; //@line 684
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 687
         } else {
          $$045$i228$i = $905; //@line 689
          $$06$i227$i = 0; //@line 689
          $910 = $904; //@line 689
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 691
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 693
           HEAP32[$36 >> 2] = $910; //@line 694
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 697
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 700
            break;
           } else {
            $$06$i227$i = $913; //@line 703
           }
          }
         }
         HEAP32[(HEAP32[$126 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 709
         $$reg2mem$0 = $157; //@line 710
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 715
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 725
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 732
     break;
    }
    if ((HEAP32[$10 >> 2] | 0) != -1) {
     label = 22; //@line 738
     break;
    }
    $256 = $189 + 1 | 0; //@line 741
    HEAP32[$36 >> 2] = $256; //@line 742
    $257 = $$1202$in$i & 255; //@line 743
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 746
    } else {
     $$045$i$i = $257; //@line 748
     $$06$i$i = 0; //@line 748
     $262 = $256; //@line 748
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 750
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 752
      HEAP32[$36 >> 2] = $262; //@line 753
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 756
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 759
       break;
      } else {
       $$06$i$i = $265; //@line 762
      }
     }
    }
    HEAP32[$10 >> 2] = $$0$lcssa$i$i; //@line 766
    $$reg2mem$0 = $157; //@line 767
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3803, 4066, $76); //@line 771
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3803, 4124, $28); //@line 776
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$128 >> 2] | 0; //@line 781
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 782
     $179 = FUNCTION_TABLE_ii[$178 & 31](68) | 0; //@line 783
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 786
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 787
      HEAP32[$180 >> 2] = $2; //@line 788
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 789
      HEAP32[$181 >> 2] = $4; //@line 790
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 791
      HEAP32[$182 >> 2] = $6; //@line 792
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 793
      HEAP32[$183 >> 2] = $8; //@line 794
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 795
      HEAP32[$184 >> 2] = $10; //@line 796
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 797
      HEAP32[$185 >> 2] = $12; //@line 798
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 799
      HEAP32[$186 >> 2] = $14; //@line 800
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 801
      HEAP32[$187 >> 2] = $16; //@line 802
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 803
      HEAP32[$188 >> 2] = $189; //@line 804
      $190 = $ReallocAsyncCtx3 + 40 | 0; //@line 805
      HEAP32[$190 >> 2] = $18; //@line 806
      $191 = $ReallocAsyncCtx3 + 44 | 0; //@line 807
      HEAP32[$191 >> 2] = $20; //@line 808
      $192 = $ReallocAsyncCtx3 + 48 | 0; //@line 809
      HEAP32[$192 >> 2] = $22; //@line 810
      $193 = $ReallocAsyncCtx3 + 52 | 0; //@line 811
      HEAP32[$193 >> 2] = $24; //@line 812
      $194 = $ReallocAsyncCtx3 + 56 | 0; //@line 813
      HEAP32[$194 >> 2] = $26; //@line 814
      $195 = $ReallocAsyncCtx3 + 60 | 0; //@line 815
      HEAP32[$195 >> 2] = $28; //@line 816
      $196 = $ReallocAsyncCtx3 + 64 | 0; //@line 817
      HEAP32[$196 >> 2] = $30; //@line 818
      $197 = $ReallocAsyncCtx3 + 68 | 0; //@line 819
      HEAP32[$197 >> 2] = $32; //@line 820
      $198 = $ReallocAsyncCtx3 + 72 | 0; //@line 821
      HEAP32[$198 >> 2] = $34; //@line 822
      $199 = $ReallocAsyncCtx3 + 76 | 0; //@line 823
      HEAP32[$199 >> 2] = $36; //@line 824
      $200 = $ReallocAsyncCtx3 + 80 | 0; //@line 825
      HEAP32[$200 >> 2] = $38; //@line 826
      $201 = $ReallocAsyncCtx3 + 84 | 0; //@line 827
      HEAP32[$201 >> 2] = $$1202$in$i; //@line 828
      $202 = $ReallocAsyncCtx3 + 88 | 0; //@line 829
      HEAP32[$202 >> 2] = $42; //@line 830
      $203 = $ReallocAsyncCtx3 + 92 | 0; //@line 831
      HEAP32[$203 >> 2] = $44; //@line 832
      $204 = $ReallocAsyncCtx3 + 96 | 0; //@line 833
      HEAP16[$204 >> 1] = $$1202$i; //@line 834
      $205 = $ReallocAsyncCtx3 + 100 | 0; //@line 835
      HEAP32[$205 >> 2] = $46; //@line 836
      $206 = $ReallocAsyncCtx3 + 104 | 0; //@line 837
      HEAP32[$206 >> 2] = $48; //@line 838
      $207 = $ReallocAsyncCtx3 + 108 | 0; //@line 839
      HEAP32[$207 >> 2] = $50; //@line 840
      $208 = $ReallocAsyncCtx3 + 112 | 0; //@line 841
      HEAP32[$208 >> 2] = $52; //@line 842
      $209 = $ReallocAsyncCtx3 + 116 | 0; //@line 843
      HEAP32[$209 >> 2] = $54; //@line 844
      $210 = $ReallocAsyncCtx3 + 120 | 0; //@line 845
      HEAP32[$210 >> 2] = $40; //@line 846
      $211 = $ReallocAsyncCtx3 + 124 | 0; //@line 847
      HEAP32[$211 >> 2] = $56; //@line 848
      $212 = $ReallocAsyncCtx3 + 128 | 0; //@line 849
      HEAP32[$212 >> 2] = $58; //@line 850
      $213 = $ReallocAsyncCtx3 + 132 | 0; //@line 851
      HEAP32[$213 >> 2] = $60; //@line 852
      $214 = $ReallocAsyncCtx3 + 136 | 0; //@line 853
      HEAP32[$214 >> 2] = $157; //@line 854
      $215 = $ReallocAsyncCtx3 + 140 | 0; //@line 855
      HEAP32[$215 >> 2] = $64; //@line 856
      $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 857
      HEAP32[$216 >> 2] = $66; //@line 858
      $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 859
      HEAP32[$217 >> 2] = $68; //@line 860
      $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 861
      HEAP32[$218 >> 2] = $70; //@line 862
      $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 863
      HEAP16[$219 >> 1] = $175; //@line 864
      $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 865
      HEAP32[$220 >> 2] = $72; //@line 866
      $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 867
      HEAP32[$221 >> 2] = $74; //@line 868
      $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 869
      HEAP32[$222 >> 2] = $76; //@line 870
      $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 871
      HEAP32[$223 >> 2] = $78; //@line 872
      $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 873
      HEAP32[$224 >> 2] = $80; //@line 874
      $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 875
      HEAP32[$225 >> 2] = $82; //@line 876
      $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 877
      HEAP32[$226 >> 2] = $84; //@line 878
      $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 879
      HEAP32[$227 >> 2] = $86; //@line 880
      $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 881
      HEAP32[$228 >> 2] = $88; //@line 882
      $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 883
      HEAP32[$229 >> 2] = $90; //@line 884
      $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 885
      HEAP32[$230 >> 2] = $92; //@line 886
      $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 887
      HEAP32[$231 >> 2] = $94; //@line 888
      $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 889
      HEAP32[$232 >> 2] = $96; //@line 890
      $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 891
      HEAP32[$233 >> 2] = $98; //@line 892
      $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 893
      HEAP32[$234 >> 2] = $100; //@line 894
      $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 895
      HEAP32[$235 >> 2] = $102; //@line 896
      $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 897
      HEAP32[$236 >> 2] = $104; //@line 898
      $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 899
      HEAP32[$237 >> 2] = $106; //@line 900
      $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 901
      HEAP32[$238 >> 2] = $108; //@line 902
      $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 903
      HEAP32[$239 >> 2] = $110; //@line 904
      $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 905
      HEAP32[$240 >> 2] = $112; //@line 906
      $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 907
      HEAP32[$241 >> 2] = $114; //@line 908
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 909
      HEAP32[$242 >> 2] = $116; //@line 910
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 911
      HEAP32[$243 >> 2] = $118; //@line 912
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 913
      HEAP32[$244 >> 2] = $120; //@line 914
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 915
      HEAP32[$245 >> 2] = $122; //@line 916
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 917
      HEAP32[$246 >> 2] = $124; //@line 918
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 919
      HEAP32[$247 >> 2] = $126; //@line 920
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 921
      HEAP16[$248 >> 1] = $trunc$i; //@line 922
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 923
      HEAP32[$249 >> 2] = $128; //@line 924
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 925
      HEAP32[$250 >> 2] = $130; //@line 926
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 927
      HEAP32[$251 >> 2] = $132; //@line 928
      sp = STACKTOP; //@line 929
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 933
     ___async_unwind = 0; //@line 934
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 935
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 936
     HEAP32[$180 >> 2] = $2; //@line 937
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 938
     HEAP32[$181 >> 2] = $4; //@line 939
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 940
     HEAP32[$182 >> 2] = $6; //@line 941
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 942
     HEAP32[$183 >> 2] = $8; //@line 943
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 944
     HEAP32[$184 >> 2] = $10; //@line 945
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 946
     HEAP32[$185 >> 2] = $12; //@line 947
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 948
     HEAP32[$186 >> 2] = $14; //@line 949
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 950
     HEAP32[$187 >> 2] = $16; //@line 951
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 952
     HEAP32[$188 >> 2] = $189; //@line 953
     $190 = $ReallocAsyncCtx3 + 40 | 0; //@line 954
     HEAP32[$190 >> 2] = $18; //@line 955
     $191 = $ReallocAsyncCtx3 + 44 | 0; //@line 956
     HEAP32[$191 >> 2] = $20; //@line 957
     $192 = $ReallocAsyncCtx3 + 48 | 0; //@line 958
     HEAP32[$192 >> 2] = $22; //@line 959
     $193 = $ReallocAsyncCtx3 + 52 | 0; //@line 960
     HEAP32[$193 >> 2] = $24; //@line 961
     $194 = $ReallocAsyncCtx3 + 56 | 0; //@line 962
     HEAP32[$194 >> 2] = $26; //@line 963
     $195 = $ReallocAsyncCtx3 + 60 | 0; //@line 964
     HEAP32[$195 >> 2] = $28; //@line 965
     $196 = $ReallocAsyncCtx3 + 64 | 0; //@line 966
     HEAP32[$196 >> 2] = $30; //@line 967
     $197 = $ReallocAsyncCtx3 + 68 | 0; //@line 968
     HEAP32[$197 >> 2] = $32; //@line 969
     $198 = $ReallocAsyncCtx3 + 72 | 0; //@line 970
     HEAP32[$198 >> 2] = $34; //@line 971
     $199 = $ReallocAsyncCtx3 + 76 | 0; //@line 972
     HEAP32[$199 >> 2] = $36; //@line 973
     $200 = $ReallocAsyncCtx3 + 80 | 0; //@line 974
     HEAP32[$200 >> 2] = $38; //@line 975
     $201 = $ReallocAsyncCtx3 + 84 | 0; //@line 976
     HEAP32[$201 >> 2] = $$1202$in$i; //@line 977
     $202 = $ReallocAsyncCtx3 + 88 | 0; //@line 978
     HEAP32[$202 >> 2] = $42; //@line 979
     $203 = $ReallocAsyncCtx3 + 92 | 0; //@line 980
     HEAP32[$203 >> 2] = $44; //@line 981
     $204 = $ReallocAsyncCtx3 + 96 | 0; //@line 982
     HEAP16[$204 >> 1] = $$1202$i; //@line 983
     $205 = $ReallocAsyncCtx3 + 100 | 0; //@line 984
     HEAP32[$205 >> 2] = $46; //@line 985
     $206 = $ReallocAsyncCtx3 + 104 | 0; //@line 986
     HEAP32[$206 >> 2] = $48; //@line 987
     $207 = $ReallocAsyncCtx3 + 108 | 0; //@line 988
     HEAP32[$207 >> 2] = $50; //@line 989
     $208 = $ReallocAsyncCtx3 + 112 | 0; //@line 990
     HEAP32[$208 >> 2] = $52; //@line 991
     $209 = $ReallocAsyncCtx3 + 116 | 0; //@line 992
     HEAP32[$209 >> 2] = $54; //@line 993
     $210 = $ReallocAsyncCtx3 + 120 | 0; //@line 994
     HEAP32[$210 >> 2] = $40; //@line 995
     $211 = $ReallocAsyncCtx3 + 124 | 0; //@line 996
     HEAP32[$211 >> 2] = $56; //@line 997
     $212 = $ReallocAsyncCtx3 + 128 | 0; //@line 998
     HEAP32[$212 >> 2] = $58; //@line 999
     $213 = $ReallocAsyncCtx3 + 132 | 0; //@line 1000
     HEAP32[$213 >> 2] = $60; //@line 1001
     $214 = $ReallocAsyncCtx3 + 136 | 0; //@line 1002
     HEAP32[$214 >> 2] = $157; //@line 1003
     $215 = $ReallocAsyncCtx3 + 140 | 0; //@line 1004
     HEAP32[$215 >> 2] = $64; //@line 1005
     $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 1006
     HEAP32[$216 >> 2] = $66; //@line 1007
     $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 1008
     HEAP32[$217 >> 2] = $68; //@line 1009
     $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 1010
     HEAP32[$218 >> 2] = $70; //@line 1011
     $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 1012
     HEAP16[$219 >> 1] = $175; //@line 1013
     $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 1014
     HEAP32[$220 >> 2] = $72; //@line 1015
     $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 1016
     HEAP32[$221 >> 2] = $74; //@line 1017
     $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 1018
     HEAP32[$222 >> 2] = $76; //@line 1019
     $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 1020
     HEAP32[$223 >> 2] = $78; //@line 1021
     $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 1022
     HEAP32[$224 >> 2] = $80; //@line 1023
     $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 1024
     HEAP32[$225 >> 2] = $82; //@line 1025
     $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 1026
     HEAP32[$226 >> 2] = $84; //@line 1027
     $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 1028
     HEAP32[$227 >> 2] = $86; //@line 1029
     $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 1030
     HEAP32[$228 >> 2] = $88; //@line 1031
     $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 1032
     HEAP32[$229 >> 2] = $90; //@line 1033
     $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 1034
     HEAP32[$230 >> 2] = $92; //@line 1035
     $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 1036
     HEAP32[$231 >> 2] = $94; //@line 1037
     $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 1038
     HEAP32[$232 >> 2] = $96; //@line 1039
     $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 1040
     HEAP32[$233 >> 2] = $98; //@line 1041
     $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 1042
     HEAP32[$234 >> 2] = $100; //@line 1043
     $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 1044
     HEAP32[$235 >> 2] = $102; //@line 1045
     $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 1046
     HEAP32[$236 >> 2] = $104; //@line 1047
     $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 1048
     HEAP32[$237 >> 2] = $106; //@line 1049
     $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 1050
     HEAP32[$238 >> 2] = $108; //@line 1051
     $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 1052
     HEAP32[$239 >> 2] = $110; //@line 1053
     $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 1054
     HEAP32[$240 >> 2] = $112; //@line 1055
     $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 1056
     HEAP32[$241 >> 2] = $114; //@line 1057
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 1058
     HEAP32[$242 >> 2] = $116; //@line 1059
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 1060
     HEAP32[$243 >> 2] = $118; //@line 1061
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 1062
     HEAP32[$244 >> 2] = $120; //@line 1063
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 1064
     HEAP32[$245 >> 2] = $122; //@line 1065
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 1066
     HEAP32[$246 >> 2] = $124; //@line 1067
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 1068
     HEAP32[$247 >> 2] = $126; //@line 1069
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 1070
     HEAP16[$248 >> 1] = $trunc$i; //@line 1071
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 1072
     HEAP32[$249 >> 2] = $128; //@line 1073
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 1074
     HEAP32[$250 >> 2] = $130; //@line 1075
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 1076
     HEAP32[$251 >> 2] = $132; //@line 1077
     sp = STACKTOP; //@line 1078
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3803, 4238, $12); //@line 1083
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3803, 4307, $26); //@line 1088
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 1093
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$126 >> 2] | 0; //@line 1097
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 1103
       $289 = $189 + 1 | 0; //@line 1104
       HEAP32[$36 >> 2] = $289; //@line 1105
       $290 = HEAP32[$128 >> 2] | 0; //@line 1106
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 1107
       $291 = FUNCTION_TABLE_ii[$290 & 31]($$1202$i) | 0; //@line 1108
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 1111
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 1112
        HEAP32[$292 >> 2] = $2; //@line 1113
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 1114
        HEAP32[$293 >> 2] = $4; //@line 1115
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 1116
        HEAP32[$294 >> 2] = $6; //@line 1117
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 1118
        HEAP32[$295 >> 2] = $8; //@line 1119
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 1120
        HEAP32[$296 >> 2] = $10; //@line 1121
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 1122
        HEAP32[$297 >> 2] = $12; //@line 1123
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 1124
        HEAP32[$298 >> 2] = $14; //@line 1125
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 1126
        HEAP32[$299 >> 2] = $16; //@line 1127
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 1128
        HEAP32[$300 >> 2] = $18; //@line 1129
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 1130
        HEAP32[$301 >> 2] = $20; //@line 1131
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 1132
        HEAP32[$302 >> 2] = $22; //@line 1133
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 1134
        HEAP32[$303 >> 2] = $24; //@line 1135
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 1136
        HEAP32[$304 >> 2] = $26; //@line 1137
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 1138
        HEAP32[$305 >> 2] = $28; //@line 1139
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 1140
        HEAP32[$306 >> 2] = $30; //@line 1141
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 1142
        HEAP32[$307 >> 2] = $32; //@line 1143
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 1144
        HEAP32[$308 >> 2] = $281; //@line 1145
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 1146
        HEAP32[$309 >> 2] = $36; //@line 1147
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 1148
        HEAP32[$310 >> 2] = $34; //@line 1149
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 1150
        HEAP32[$311 >> 2] = $38; //@line 1151
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 1152
        HEAP32[$312 >> 2] = $40; //@line 1153
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 1154
        HEAP32[$313 >> 2] = $42; //@line 1155
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 1156
        HEAP32[$314 >> 2] = $44; //@line 1157
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 1158
        HEAP32[$315 >> 2] = $46; //@line 1159
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 1160
        HEAP32[$316 >> 2] = $48; //@line 1161
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 1162
        HEAP32[$317 >> 2] = $50; //@line 1163
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 1164
        HEAP32[$318 >> 2] = $52; //@line 1165
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 1166
        HEAP32[$319 >> 2] = $54; //@line 1167
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 1168
        HEAP32[$320 >> 2] = $56; //@line 1169
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 1170
        HEAP32[$321 >> 2] = $58; //@line 1171
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 1172
        HEAP32[$322 >> 2] = $60; //@line 1173
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 1174
        HEAP32[$323 >> 2] = $157; //@line 1175
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 1176
        HEAP32[$324 >> 2] = $64; //@line 1177
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 1178
        HEAP32[$325 >> 2] = $66; //@line 1179
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 1180
        HEAP32[$326 >> 2] = $68; //@line 1181
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 1182
        HEAP32[$327 >> 2] = $70; //@line 1183
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 1184
        HEAP32[$328 >> 2] = $72; //@line 1185
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 1186
        HEAP32[$329 >> 2] = $74; //@line 1187
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 1188
        HEAP32[$330 >> 2] = $76; //@line 1189
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 1190
        HEAP32[$331 >> 2] = $78; //@line 1191
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 1192
        HEAP32[$332 >> 2] = $80; //@line 1193
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 1194
        HEAP32[$333 >> 2] = $82; //@line 1195
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 1196
        HEAP32[$334 >> 2] = $84; //@line 1197
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 1198
        HEAP32[$335 >> 2] = $86; //@line 1199
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 1200
        HEAP32[$336 >> 2] = $88; //@line 1201
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 1202
        HEAP32[$337 >> 2] = $90; //@line 1203
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 1204
        HEAP32[$338 >> 2] = $92; //@line 1205
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 1206
        HEAP32[$339 >> 2] = $94; //@line 1207
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 1208
        HEAP32[$340 >> 2] = $96; //@line 1209
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 1210
        HEAP32[$341 >> 2] = $98; //@line 1211
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 1212
        HEAP32[$342 >> 2] = $100; //@line 1213
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 1214
        HEAP32[$343 >> 2] = $102; //@line 1215
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 1216
        HEAP32[$344 >> 2] = $104; //@line 1217
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 1218
        HEAP32[$345 >> 2] = $289; //@line 1219
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 1220
        HEAP32[$346 >> 2] = $106; //@line 1221
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 1222
        HEAP32[$347 >> 2] = $108; //@line 1223
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 1224
        HEAP32[$348 >> 2] = $110; //@line 1225
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 1226
        HEAP32[$349 >> 2] = $112; //@line 1227
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 1228
        HEAP32[$350 >> 2] = $114; //@line 1229
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 1230
        HEAP32[$351 >> 2] = $116; //@line 1231
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 1232
        HEAP32[$352 >> 2] = $118; //@line 1233
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 1234
        HEAP32[$353 >> 2] = $120; //@line 1235
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 1236
        HEAP32[$354 >> 2] = $122; //@line 1237
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 1238
        HEAP32[$355 >> 2] = $124; //@line 1239
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 1240
        HEAP32[$356 >> 2] = $126; //@line 1241
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 1242
        HEAP32[$357 >> 2] = $128; //@line 1243
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 1244
        HEAP32[$358 >> 2] = $130; //@line 1245
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 1246
        HEAP32[$359 >> 2] = $132; //@line 1247
        sp = STACKTOP; //@line 1248
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 1252
       ___async_unwind = 0; //@line 1253
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 1254
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 1255
       HEAP32[$292 >> 2] = $2; //@line 1256
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 1257
       HEAP32[$293 >> 2] = $4; //@line 1258
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 1259
       HEAP32[$294 >> 2] = $6; //@line 1260
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 1261
       HEAP32[$295 >> 2] = $8; //@line 1262
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 1263
       HEAP32[$296 >> 2] = $10; //@line 1264
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 1265
       HEAP32[$297 >> 2] = $12; //@line 1266
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 1267
       HEAP32[$298 >> 2] = $14; //@line 1268
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 1269
       HEAP32[$299 >> 2] = $16; //@line 1270
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 1271
       HEAP32[$300 >> 2] = $18; //@line 1272
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 1273
       HEAP32[$301 >> 2] = $20; //@line 1274
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 1275
       HEAP32[$302 >> 2] = $22; //@line 1276
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 1277
       HEAP32[$303 >> 2] = $24; //@line 1278
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 1279
       HEAP32[$304 >> 2] = $26; //@line 1280
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 1281
       HEAP32[$305 >> 2] = $28; //@line 1282
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 1283
       HEAP32[$306 >> 2] = $30; //@line 1284
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 1285
       HEAP32[$307 >> 2] = $32; //@line 1286
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 1287
       HEAP32[$308 >> 2] = $281; //@line 1288
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 1289
       HEAP32[$309 >> 2] = $36; //@line 1290
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 1291
       HEAP32[$310 >> 2] = $34; //@line 1292
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 1293
       HEAP32[$311 >> 2] = $38; //@line 1294
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 1295
       HEAP32[$312 >> 2] = $40; //@line 1296
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 1297
       HEAP32[$313 >> 2] = $42; //@line 1298
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 1299
       HEAP32[$314 >> 2] = $44; //@line 1300
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 1301
       HEAP32[$315 >> 2] = $46; //@line 1302
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 1303
       HEAP32[$316 >> 2] = $48; //@line 1304
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 1305
       HEAP32[$317 >> 2] = $50; //@line 1306
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 1307
       HEAP32[$318 >> 2] = $52; //@line 1308
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 1309
       HEAP32[$319 >> 2] = $54; //@line 1310
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 1311
       HEAP32[$320 >> 2] = $56; //@line 1312
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 1313
       HEAP32[$321 >> 2] = $58; //@line 1314
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 1315
       HEAP32[$322 >> 2] = $60; //@line 1316
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 1317
       HEAP32[$323 >> 2] = $157; //@line 1318
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 1319
       HEAP32[$324 >> 2] = $64; //@line 1320
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 1321
       HEAP32[$325 >> 2] = $66; //@line 1322
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 1323
       HEAP32[$326 >> 2] = $68; //@line 1324
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 1325
       HEAP32[$327 >> 2] = $70; //@line 1326
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 1327
       HEAP32[$328 >> 2] = $72; //@line 1328
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 1329
       HEAP32[$329 >> 2] = $74; //@line 1330
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 1331
       HEAP32[$330 >> 2] = $76; //@line 1332
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 1333
       HEAP32[$331 >> 2] = $78; //@line 1334
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 1335
       HEAP32[$332 >> 2] = $80; //@line 1336
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 1337
       HEAP32[$333 >> 2] = $82; //@line 1338
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 1339
       HEAP32[$334 >> 2] = $84; //@line 1340
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 1341
       HEAP32[$335 >> 2] = $86; //@line 1342
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 1343
       HEAP32[$336 >> 2] = $88; //@line 1344
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 1345
       HEAP32[$337 >> 2] = $90; //@line 1346
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 1347
       HEAP32[$338 >> 2] = $92; //@line 1348
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 1349
       HEAP32[$339 >> 2] = $94; //@line 1350
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 1351
       HEAP32[$340 >> 2] = $96; //@line 1352
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 1353
       HEAP32[$341 >> 2] = $98; //@line 1354
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 1355
       HEAP32[$342 >> 2] = $100; //@line 1356
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 1357
       HEAP32[$343 >> 2] = $102; //@line 1358
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 1359
       HEAP32[$344 >> 2] = $104; //@line 1360
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 1361
       HEAP32[$345 >> 2] = $289; //@line 1362
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 1363
       HEAP32[$346 >> 2] = $106; //@line 1364
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 1365
       HEAP32[$347 >> 2] = $108; //@line 1366
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 1367
       HEAP32[$348 >> 2] = $110; //@line 1368
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 1369
       HEAP32[$349 >> 2] = $112; //@line 1370
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 1371
       HEAP32[$350 >> 2] = $114; //@line 1372
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 1373
       HEAP32[$351 >> 2] = $116; //@line 1374
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 1375
       HEAP32[$352 >> 2] = $118; //@line 1376
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 1377
       HEAP32[$353 >> 2] = $120; //@line 1378
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 1379
       HEAP32[$354 >> 2] = $122; //@line 1380
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 1381
       HEAP32[$355 >> 2] = $124; //@line 1382
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 1383
       HEAP32[$356 >> 2] = $126; //@line 1384
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 1385
       HEAP32[$357 >> 2] = $128; //@line 1386
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 1387
       HEAP32[$358 >> 2] = $130; //@line 1388
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 1389
       HEAP32[$359 >> 2] = $132; //@line 1390
       sp = STACKTOP; //@line 1391
       return;
      }
     }
     _mbed_tracef(2, 3803, 4369, $118); //@line 1395
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$126 >> 2] | 0; //@line 1400
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 1402
     $363 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 1403
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 1406
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 1407
      HEAP32[$364 >> 2] = $2; //@line 1408
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 1409
      HEAP32[$365 >> 2] = $4; //@line 1410
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 1411
      HEAP32[$366 >> 2] = $6; //@line 1412
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 1413
      HEAP32[$367 >> 2] = $8; //@line 1414
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 1415
      HEAP32[$368 >> 2] = $10; //@line 1416
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 1417
      HEAP32[$369 >> 2] = $12; //@line 1418
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 1419
      HEAP32[$370 >> 2] = $14; //@line 1420
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 1421
      HEAP32[$371 >> 2] = $16; //@line 1422
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 1423
      HEAP32[$372 >> 2] = $18; //@line 1424
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 1425
      HEAP32[$373 >> 2] = $20; //@line 1426
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 1427
      HEAP32[$374 >> 2] = $22; //@line 1428
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 1429
      HEAP32[$375 >> 2] = $24; //@line 1430
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 1431
      HEAP32[$376 >> 2] = $26; //@line 1432
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 1433
      HEAP32[$377 >> 2] = $28; //@line 1434
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 1435
      HEAP32[$378 >> 2] = $30; //@line 1436
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 1437
      HEAP32[$379 >> 2] = $32; //@line 1438
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 1439
      HEAP32[$380 >> 2] = $34; //@line 1440
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 1441
      HEAP32[$381 >> 2] = $36; //@line 1442
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 1443
      HEAP32[$382 >> 2] = $38; //@line 1444
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 1445
      HEAP32[$383 >> 2] = $40; //@line 1446
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 1447
      HEAP32[$384 >> 2] = $42; //@line 1448
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 1449
      HEAP32[$385 >> 2] = $44; //@line 1450
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 1451
      HEAP32[$386 >> 2] = $46; //@line 1452
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 1453
      HEAP32[$387 >> 2] = $48; //@line 1454
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 1455
      HEAP32[$388 >> 2] = $50; //@line 1456
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 1457
      HEAP32[$389 >> 2] = $52; //@line 1458
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 1459
      HEAP32[$390 >> 2] = $54; //@line 1460
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 1461
      HEAP32[$391 >> 2] = $56; //@line 1462
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 1463
      HEAP32[$392 >> 2] = $58; //@line 1464
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 1465
      HEAP32[$393 >> 2] = $60; //@line 1466
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 1467
      HEAP32[$394 >> 2] = $157; //@line 1468
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 1469
      HEAP32[$395 >> 2] = $64; //@line 1470
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 1471
      HEAP32[$396 >> 2] = $66; //@line 1472
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 1473
      HEAP32[$397 >> 2] = $68; //@line 1474
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 1475
      HEAP32[$398 >> 2] = $70; //@line 1476
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 1477
      HEAP32[$399 >> 2] = $72; //@line 1478
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 1479
      HEAP32[$400 >> 2] = $74; //@line 1480
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 1481
      HEAP32[$401 >> 2] = $76; //@line 1482
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 1483
      HEAP32[$402 >> 2] = $78; //@line 1484
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 1485
      HEAP32[$403 >> 2] = $80; //@line 1486
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 1487
      HEAP32[$404 >> 2] = $82; //@line 1488
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 1489
      HEAP32[$405 >> 2] = $84; //@line 1490
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 1491
      HEAP32[$406 >> 2] = $86; //@line 1492
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 1493
      HEAP32[$407 >> 2] = $88; //@line 1494
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 1495
      HEAP32[$408 >> 2] = $90; //@line 1496
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 1497
      HEAP32[$409 >> 2] = $92; //@line 1498
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 1499
      HEAP32[$410 >> 2] = $94; //@line 1500
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 1501
      HEAP32[$411 >> 2] = $96; //@line 1502
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 1503
      HEAP32[$412 >> 2] = $98; //@line 1504
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 1505
      HEAP32[$413 >> 2] = $100; //@line 1506
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 1507
      HEAP32[$414 >> 2] = $102; //@line 1508
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 1509
      HEAP32[$415 >> 2] = $104; //@line 1510
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 1511
      HEAP32[$416 >> 2] = $106; //@line 1512
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 1513
      HEAP32[$417 >> 2] = $108; //@line 1514
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 1515
      HEAP32[$418 >> 2] = $110; //@line 1516
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 1517
      HEAP32[$419 >> 2] = $112; //@line 1518
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 1519
      HEAP32[$420 >> 2] = $114; //@line 1520
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 1521
      HEAP32[$421 >> 2] = $116; //@line 1522
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 1523
      HEAP32[$422 >> 2] = $118; //@line 1524
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 1525
      HEAP32[$423 >> 2] = $120; //@line 1526
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 1527
      HEAP32[$424 >> 2] = $122; //@line 1528
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 1529
      HEAP32[$425 >> 2] = $124; //@line 1530
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 1531
      HEAP32[$426 >> 2] = $126; //@line 1532
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 1533
      HEAP32[$427 >> 2] = $128; //@line 1534
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 1535
      HEAP32[$428 >> 2] = $130; //@line 1536
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 1537
      HEAP32[$429 >> 2] = $132; //@line 1538
      sp = STACKTOP; //@line 1539
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 1543
     ___async_unwind = 0; //@line 1544
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 1545
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 1546
     HEAP32[$364 >> 2] = $2; //@line 1547
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 1548
     HEAP32[$365 >> 2] = $4; //@line 1549
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 1550
     HEAP32[$366 >> 2] = $6; //@line 1551
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 1552
     HEAP32[$367 >> 2] = $8; //@line 1553
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 1554
     HEAP32[$368 >> 2] = $10; //@line 1555
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 1556
     HEAP32[$369 >> 2] = $12; //@line 1557
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 1558
     HEAP32[$370 >> 2] = $14; //@line 1559
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 1560
     HEAP32[$371 >> 2] = $16; //@line 1561
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 1562
     HEAP32[$372 >> 2] = $18; //@line 1563
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 1564
     HEAP32[$373 >> 2] = $20; //@line 1565
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 1566
     HEAP32[$374 >> 2] = $22; //@line 1567
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 1568
     HEAP32[$375 >> 2] = $24; //@line 1569
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 1570
     HEAP32[$376 >> 2] = $26; //@line 1571
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 1572
     HEAP32[$377 >> 2] = $28; //@line 1573
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 1574
     HEAP32[$378 >> 2] = $30; //@line 1575
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 1576
     HEAP32[$379 >> 2] = $32; //@line 1577
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 1578
     HEAP32[$380 >> 2] = $34; //@line 1579
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 1580
     HEAP32[$381 >> 2] = $36; //@line 1581
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 1582
     HEAP32[$382 >> 2] = $38; //@line 1583
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 1584
     HEAP32[$383 >> 2] = $40; //@line 1585
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 1586
     HEAP32[$384 >> 2] = $42; //@line 1587
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 1588
     HEAP32[$385 >> 2] = $44; //@line 1589
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 1590
     HEAP32[$386 >> 2] = $46; //@line 1591
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 1592
     HEAP32[$387 >> 2] = $48; //@line 1593
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 1594
     HEAP32[$388 >> 2] = $50; //@line 1595
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 1596
     HEAP32[$389 >> 2] = $52; //@line 1597
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 1598
     HEAP32[$390 >> 2] = $54; //@line 1599
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 1600
     HEAP32[$391 >> 2] = $56; //@line 1601
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 1602
     HEAP32[$392 >> 2] = $58; //@line 1603
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 1604
     HEAP32[$393 >> 2] = $60; //@line 1605
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 1606
     HEAP32[$394 >> 2] = $157; //@line 1607
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 1608
     HEAP32[$395 >> 2] = $64; //@line 1609
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 1610
     HEAP32[$396 >> 2] = $66; //@line 1611
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 1612
     HEAP32[$397 >> 2] = $68; //@line 1613
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 1614
     HEAP32[$398 >> 2] = $70; //@line 1615
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 1616
     HEAP32[$399 >> 2] = $72; //@line 1617
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 1618
     HEAP32[$400 >> 2] = $74; //@line 1619
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 1620
     HEAP32[$401 >> 2] = $76; //@line 1621
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 1622
     HEAP32[$402 >> 2] = $78; //@line 1623
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 1624
     HEAP32[$403 >> 2] = $80; //@line 1625
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 1626
     HEAP32[$404 >> 2] = $82; //@line 1627
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 1628
     HEAP32[$405 >> 2] = $84; //@line 1629
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 1630
     HEAP32[$406 >> 2] = $86; //@line 1631
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 1632
     HEAP32[$407 >> 2] = $88; //@line 1633
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 1634
     HEAP32[$408 >> 2] = $90; //@line 1635
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 1636
     HEAP32[$409 >> 2] = $92; //@line 1637
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 1638
     HEAP32[$410 >> 2] = $94; //@line 1639
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 1640
     HEAP32[$411 >> 2] = $96; //@line 1641
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 1642
     HEAP32[$412 >> 2] = $98; //@line 1643
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 1644
     HEAP32[$413 >> 2] = $100; //@line 1645
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 1646
     HEAP32[$414 >> 2] = $102; //@line 1647
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 1648
     HEAP32[$415 >> 2] = $104; //@line 1649
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 1650
     HEAP32[$416 >> 2] = $106; //@line 1651
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 1652
     HEAP32[$417 >> 2] = $108; //@line 1653
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 1654
     HEAP32[$418 >> 2] = $110; //@line 1655
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 1656
     HEAP32[$419 >> 2] = $112; //@line 1657
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 1658
     HEAP32[$420 >> 2] = $114; //@line 1659
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 1660
     HEAP32[$421 >> 2] = $116; //@line 1661
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 1662
     HEAP32[$422 >> 2] = $118; //@line 1663
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 1664
     HEAP32[$423 >> 2] = $120; //@line 1665
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 1666
     HEAP32[$424 >> 2] = $122; //@line 1667
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 1668
     HEAP32[$425 >> 2] = $124; //@line 1669
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 1670
     HEAP32[$426 >> 2] = $126; //@line 1671
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 1672
     HEAP32[$427 >> 2] = $128; //@line 1673
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 1674
     HEAP32[$428 >> 2] = $130; //@line 1675
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 1676
     HEAP32[$429 >> 2] = $132; //@line 1677
     sp = STACKTOP; //@line 1678
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 1683
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$126 >> 2] | 0; //@line 1687
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 1693
       $439 = $189 + 1 | 0; //@line 1694
       HEAP32[$36 >> 2] = $439; //@line 1695
       $440 = HEAP32[$128 >> 2] | 0; //@line 1696
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 1697
       $441 = FUNCTION_TABLE_ii[$440 & 31]($$1202$i) | 0; //@line 1698
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 1701
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 1702
        HEAP32[$442 >> 2] = $2; //@line 1703
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 1704
        HEAP32[$443 >> 2] = $4; //@line 1705
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 1706
        HEAP32[$444 >> 2] = $6; //@line 1707
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 1708
        HEAP32[$445 >> 2] = $8; //@line 1709
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 1710
        HEAP32[$446 >> 2] = $10; //@line 1711
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 1712
        HEAP32[$447 >> 2] = $12; //@line 1713
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 1714
        HEAP32[$448 >> 2] = $14; //@line 1715
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 1716
        HEAP32[$449 >> 2] = $16; //@line 1717
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 1718
        HEAP32[$450 >> 2] = $18; //@line 1719
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 1720
        HEAP32[$451 >> 2] = $20; //@line 1721
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 1722
        HEAP32[$452 >> 2] = $22; //@line 1723
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 1724
        HEAP32[$453 >> 2] = $24; //@line 1725
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 1726
        HEAP32[$454 >> 2] = $26; //@line 1727
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 1728
        HEAP32[$455 >> 2] = $28; //@line 1729
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 1730
        HEAP32[$456 >> 2] = $30; //@line 1731
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 1732
        HEAP32[$457 >> 2] = $32; //@line 1733
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 1734
        HEAP32[$458 >> 2] = $34; //@line 1735
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 1736
        HEAP32[$459 >> 2] = $36; //@line 1737
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 1738
        HEAP32[$460 >> 2] = $38; //@line 1739
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 1740
        HEAP32[$461 >> 2] = $40; //@line 1741
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 1742
        HEAP32[$462 >> 2] = $42; //@line 1743
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 1744
        HEAP32[$463 >> 2] = $44; //@line 1745
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 1746
        HEAP32[$464 >> 2] = $46; //@line 1747
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 1748
        HEAP32[$465 >> 2] = $48; //@line 1749
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 1750
        HEAP32[$466 >> 2] = $50; //@line 1751
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 1752
        HEAP32[$467 >> 2] = $52; //@line 1753
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 1754
        HEAP32[$468 >> 2] = $54; //@line 1755
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 1756
        HEAP32[$469 >> 2] = $56; //@line 1757
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 1758
        HEAP32[$470 >> 2] = $58; //@line 1759
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 1760
        HEAP32[$471 >> 2] = $60; //@line 1761
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 1762
        HEAP32[$472 >> 2] = $157; //@line 1763
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 1764
        HEAP32[$473 >> 2] = $64; //@line 1765
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 1766
        HEAP32[$474 >> 2] = $66; //@line 1767
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 1768
        HEAP32[$475 >> 2] = $68; //@line 1769
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 1770
        HEAP32[$476 >> 2] = $70; //@line 1771
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 1772
        HEAP32[$477 >> 2] = $72; //@line 1773
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 1774
        HEAP32[$478 >> 2] = $74; //@line 1775
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 1776
        HEAP32[$479 >> 2] = $76; //@line 1777
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 1778
        HEAP32[$480 >> 2] = $78; //@line 1779
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 1780
        HEAP32[$481 >> 2] = $80; //@line 1781
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 1782
        HEAP32[$482 >> 2] = $82; //@line 1783
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 1784
        HEAP32[$483 >> 2] = $84; //@line 1785
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 1786
        HEAP32[$484 >> 2] = $86; //@line 1787
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 1788
        HEAP32[$485 >> 2] = $88; //@line 1789
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 1790
        HEAP32[$486 >> 2] = $90; //@line 1791
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 1792
        HEAP32[$487 >> 2] = $92; //@line 1793
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 1794
        HEAP32[$488 >> 2] = $94; //@line 1795
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 1796
        HEAP32[$489 >> 2] = $431; //@line 1797
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 1798
        HEAP32[$490 >> 2] = $96; //@line 1799
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 1800
        HEAP32[$491 >> 2] = $98; //@line 1801
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 1802
        HEAP32[$492 >> 2] = $439; //@line 1803
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 1804
        HEAP32[$493 >> 2] = $100; //@line 1805
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 1806
        HEAP32[$494 >> 2] = $102; //@line 1807
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 1808
        HEAP32[$495 >> 2] = $104; //@line 1809
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 1810
        HEAP32[$496 >> 2] = $106; //@line 1811
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 1812
        HEAP32[$497 >> 2] = $108; //@line 1813
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 1814
        HEAP32[$498 >> 2] = $110; //@line 1815
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 1816
        HEAP32[$499 >> 2] = $112; //@line 1817
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 1818
        HEAP32[$500 >> 2] = $114; //@line 1819
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 1820
        HEAP32[$501 >> 2] = $116; //@line 1821
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 1822
        HEAP32[$502 >> 2] = $118; //@line 1823
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 1824
        HEAP32[$503 >> 2] = $120; //@line 1825
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 1826
        HEAP32[$504 >> 2] = $122; //@line 1827
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 1828
        HEAP32[$505 >> 2] = $124; //@line 1829
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 1830
        HEAP32[$506 >> 2] = $126; //@line 1831
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 1832
        HEAP32[$507 >> 2] = $128; //@line 1833
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 1834
        HEAP32[$508 >> 2] = $130; //@line 1835
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 1836
        HEAP32[$509 >> 2] = $132; //@line 1837
        sp = STACKTOP; //@line 1838
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 1842
       ___async_unwind = 0; //@line 1843
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 1844
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 1845
       HEAP32[$442 >> 2] = $2; //@line 1846
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 1847
       HEAP32[$443 >> 2] = $4; //@line 1848
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 1849
       HEAP32[$444 >> 2] = $6; //@line 1850
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 1851
       HEAP32[$445 >> 2] = $8; //@line 1852
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 1853
       HEAP32[$446 >> 2] = $10; //@line 1854
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 1855
       HEAP32[$447 >> 2] = $12; //@line 1856
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 1857
       HEAP32[$448 >> 2] = $14; //@line 1858
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 1859
       HEAP32[$449 >> 2] = $16; //@line 1860
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 1861
       HEAP32[$450 >> 2] = $18; //@line 1862
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 1863
       HEAP32[$451 >> 2] = $20; //@line 1864
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 1865
       HEAP32[$452 >> 2] = $22; //@line 1866
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 1867
       HEAP32[$453 >> 2] = $24; //@line 1868
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 1869
       HEAP32[$454 >> 2] = $26; //@line 1870
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 1871
       HEAP32[$455 >> 2] = $28; //@line 1872
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 1873
       HEAP32[$456 >> 2] = $30; //@line 1874
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 1875
       HEAP32[$457 >> 2] = $32; //@line 1876
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 1877
       HEAP32[$458 >> 2] = $34; //@line 1878
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 1879
       HEAP32[$459 >> 2] = $36; //@line 1880
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 1881
       HEAP32[$460 >> 2] = $38; //@line 1882
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 1883
       HEAP32[$461 >> 2] = $40; //@line 1884
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 1885
       HEAP32[$462 >> 2] = $42; //@line 1886
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 1887
       HEAP32[$463 >> 2] = $44; //@line 1888
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 1889
       HEAP32[$464 >> 2] = $46; //@line 1890
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 1891
       HEAP32[$465 >> 2] = $48; //@line 1892
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 1893
       HEAP32[$466 >> 2] = $50; //@line 1894
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 1895
       HEAP32[$467 >> 2] = $52; //@line 1896
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 1897
       HEAP32[$468 >> 2] = $54; //@line 1898
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 1899
       HEAP32[$469 >> 2] = $56; //@line 1900
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 1901
       HEAP32[$470 >> 2] = $58; //@line 1902
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 1903
       HEAP32[$471 >> 2] = $60; //@line 1904
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 1905
       HEAP32[$472 >> 2] = $157; //@line 1906
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 1907
       HEAP32[$473 >> 2] = $64; //@line 1908
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 1909
       HEAP32[$474 >> 2] = $66; //@line 1910
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 1911
       HEAP32[$475 >> 2] = $68; //@line 1912
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 1913
       HEAP32[$476 >> 2] = $70; //@line 1914
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 1915
       HEAP32[$477 >> 2] = $72; //@line 1916
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 1917
       HEAP32[$478 >> 2] = $74; //@line 1918
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 1919
       HEAP32[$479 >> 2] = $76; //@line 1920
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 1921
       HEAP32[$480 >> 2] = $78; //@line 1922
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 1923
       HEAP32[$481 >> 2] = $80; //@line 1924
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 1925
       HEAP32[$482 >> 2] = $82; //@line 1926
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 1927
       HEAP32[$483 >> 2] = $84; //@line 1928
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 1929
       HEAP32[$484 >> 2] = $86; //@line 1930
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 1931
       HEAP32[$485 >> 2] = $88; //@line 1932
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 1933
       HEAP32[$486 >> 2] = $90; //@line 1934
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 1935
       HEAP32[$487 >> 2] = $92; //@line 1936
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 1937
       HEAP32[$488 >> 2] = $94; //@line 1938
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 1939
       HEAP32[$489 >> 2] = $431; //@line 1940
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 1941
       HEAP32[$490 >> 2] = $96; //@line 1942
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 1943
       HEAP32[$491 >> 2] = $98; //@line 1944
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 1945
       HEAP32[$492 >> 2] = $439; //@line 1946
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 1947
       HEAP32[$493 >> 2] = $100; //@line 1948
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 1949
       HEAP32[$494 >> 2] = $102; //@line 1950
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 1951
       HEAP32[$495 >> 2] = $104; //@line 1952
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 1953
       HEAP32[$496 >> 2] = $106; //@line 1954
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 1955
       HEAP32[$497 >> 2] = $108; //@line 1956
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 1957
       HEAP32[$498 >> 2] = $110; //@line 1958
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 1959
       HEAP32[$499 >> 2] = $112; //@line 1960
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 1961
       HEAP32[$500 >> 2] = $114; //@line 1962
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 1963
       HEAP32[$501 >> 2] = $116; //@line 1964
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 1965
       HEAP32[$502 >> 2] = $118; //@line 1966
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 1967
       HEAP32[$503 >> 2] = $120; //@line 1968
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 1969
       HEAP32[$504 >> 2] = $122; //@line 1970
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 1971
       HEAP32[$505 >> 2] = $124; //@line 1972
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 1973
       HEAP32[$506 >> 2] = $126; //@line 1974
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 1975
       HEAP32[$507 >> 2] = $128; //@line 1976
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 1977
       HEAP32[$508 >> 2] = $130; //@line 1978
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 1979
       HEAP32[$509 >> 2] = $132; //@line 1980
       sp = STACKTOP; //@line 1981
       return;
      }
     }
     _mbed_tracef(2, 3803, 4564, $114); //@line 1985
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$126 >> 2] | 0; //@line 1990
     $512 = $511 + 56 | 0; //@line 1991
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3803, 4698, $94); //@line 1995
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 1999
     $516 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 2000
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 2003
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 2004
      HEAP32[$517 >> 2] = $2; //@line 2005
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 2006
      HEAP32[$518 >> 2] = $4; //@line 2007
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 2008
      HEAP32[$519 >> 2] = $6; //@line 2009
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 2010
      HEAP32[$520 >> 2] = $8; //@line 2011
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 2012
      HEAP32[$521 >> 2] = $10; //@line 2013
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 2014
      HEAP32[$522 >> 2] = $12; //@line 2015
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 2016
      HEAP32[$523 >> 2] = $14; //@line 2017
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 2018
      HEAP32[$524 >> 2] = $16; //@line 2019
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 2020
      HEAP32[$525 >> 2] = $18; //@line 2021
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 2022
      HEAP32[$526 >> 2] = $20; //@line 2023
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 2024
      HEAP32[$527 >> 2] = $22; //@line 2025
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 2026
      HEAP32[$528 >> 2] = $24; //@line 2027
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 2028
      HEAP32[$529 >> 2] = $26; //@line 2029
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 2030
      HEAP32[$530 >> 2] = $28; //@line 2031
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 2032
      HEAP32[$531 >> 2] = $30; //@line 2033
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 2034
      HEAP32[$532 >> 2] = $32; //@line 2035
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 2036
      HEAP32[$533 >> 2] = $34; //@line 2037
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 2038
      HEAP32[$534 >> 2] = $36; //@line 2039
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 2040
      HEAP32[$535 >> 2] = $38; //@line 2041
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 2042
      HEAP32[$536 >> 2] = $40; //@line 2043
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 2044
      HEAP32[$537 >> 2] = $42; //@line 2045
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 2046
      HEAP32[$538 >> 2] = $44; //@line 2047
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 2048
      HEAP32[$539 >> 2] = $46; //@line 2049
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 2050
      HEAP32[$540 >> 2] = $48; //@line 2051
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 2052
      HEAP32[$541 >> 2] = $50; //@line 2053
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 2054
      HEAP32[$542 >> 2] = $52; //@line 2055
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 2056
      HEAP32[$543 >> 2] = $54; //@line 2057
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 2058
      HEAP32[$544 >> 2] = $56; //@line 2059
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 2060
      HEAP32[$545 >> 2] = $58; //@line 2061
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 2062
      HEAP32[$546 >> 2] = $60; //@line 2063
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 2064
      HEAP32[$547 >> 2] = $157; //@line 2065
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 2066
      HEAP32[$548 >> 2] = $64; //@line 2067
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 2068
      HEAP32[$549 >> 2] = $66; //@line 2069
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 2070
      HEAP32[$550 >> 2] = $68; //@line 2071
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 2072
      HEAP32[$551 >> 2] = $70; //@line 2073
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 2074
      HEAP32[$552 >> 2] = $72; //@line 2075
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 2076
      HEAP32[$553 >> 2] = $74; //@line 2077
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 2078
      HEAP32[$554 >> 2] = $76; //@line 2079
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 2080
      HEAP32[$555 >> 2] = $78; //@line 2081
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 2082
      HEAP32[$556 >> 2] = $80; //@line 2083
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 2084
      HEAP32[$557 >> 2] = $82; //@line 2085
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 2086
      HEAP32[$558 >> 2] = $84; //@line 2087
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 2088
      HEAP32[$559 >> 2] = $86; //@line 2089
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 2090
      HEAP32[$560 >> 2] = $88; //@line 2091
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 2092
      HEAP32[$561 >> 2] = $90; //@line 2093
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 2094
      HEAP32[$562 >> 2] = $92; //@line 2095
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 2096
      HEAP32[$563 >> 2] = $94; //@line 2097
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 2098
      HEAP32[$564 >> 2] = $96; //@line 2099
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 2100
      HEAP32[$565 >> 2] = $98; //@line 2101
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 2102
      HEAP32[$566 >> 2] = $100; //@line 2103
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 2104
      HEAP32[$567 >> 2] = $102; //@line 2105
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 2106
      HEAP32[$568 >> 2] = $104; //@line 2107
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 2108
      HEAP32[$569 >> 2] = $106; //@line 2109
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 2110
      HEAP32[$570 >> 2] = $108; //@line 2111
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 2112
      HEAP32[$571 >> 2] = $110; //@line 2113
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 2114
      HEAP32[$572 >> 2] = $112; //@line 2115
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 2116
      HEAP32[$573 >> 2] = $114; //@line 2117
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 2118
      HEAP32[$574 >> 2] = $116; //@line 2119
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 2120
      HEAP32[$575 >> 2] = $118; //@line 2121
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 2122
      HEAP32[$576 >> 2] = $120; //@line 2123
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 2124
      HEAP32[$577 >> 2] = $122; //@line 2125
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 2126
      HEAP32[$578 >> 2] = $124; //@line 2127
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 2128
      HEAP32[$579 >> 2] = $126; //@line 2129
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 2130
      HEAP32[$580 >> 2] = $128; //@line 2131
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 2132
      HEAP32[$581 >> 2] = $130; //@line 2133
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 2134
      HEAP32[$582 >> 2] = $132; //@line 2135
      sp = STACKTOP; //@line 2136
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 2140
     ___async_unwind = 0; //@line 2141
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 2142
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 2143
     HEAP32[$517 >> 2] = $2; //@line 2144
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 2145
     HEAP32[$518 >> 2] = $4; //@line 2146
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 2147
     HEAP32[$519 >> 2] = $6; //@line 2148
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 2149
     HEAP32[$520 >> 2] = $8; //@line 2150
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 2151
     HEAP32[$521 >> 2] = $10; //@line 2152
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 2153
     HEAP32[$522 >> 2] = $12; //@line 2154
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 2155
     HEAP32[$523 >> 2] = $14; //@line 2156
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 2157
     HEAP32[$524 >> 2] = $16; //@line 2158
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 2159
     HEAP32[$525 >> 2] = $18; //@line 2160
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 2161
     HEAP32[$526 >> 2] = $20; //@line 2162
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 2163
     HEAP32[$527 >> 2] = $22; //@line 2164
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 2165
     HEAP32[$528 >> 2] = $24; //@line 2166
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 2167
     HEAP32[$529 >> 2] = $26; //@line 2168
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 2169
     HEAP32[$530 >> 2] = $28; //@line 2170
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 2171
     HEAP32[$531 >> 2] = $30; //@line 2172
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 2173
     HEAP32[$532 >> 2] = $32; //@line 2174
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 2175
     HEAP32[$533 >> 2] = $34; //@line 2176
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 2177
     HEAP32[$534 >> 2] = $36; //@line 2178
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 2179
     HEAP32[$535 >> 2] = $38; //@line 2180
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 2181
     HEAP32[$536 >> 2] = $40; //@line 2182
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 2183
     HEAP32[$537 >> 2] = $42; //@line 2184
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 2185
     HEAP32[$538 >> 2] = $44; //@line 2186
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 2187
     HEAP32[$539 >> 2] = $46; //@line 2188
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 2189
     HEAP32[$540 >> 2] = $48; //@line 2190
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 2191
     HEAP32[$541 >> 2] = $50; //@line 2192
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 2193
     HEAP32[$542 >> 2] = $52; //@line 2194
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 2195
     HEAP32[$543 >> 2] = $54; //@line 2196
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 2197
     HEAP32[$544 >> 2] = $56; //@line 2198
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 2199
     HEAP32[$545 >> 2] = $58; //@line 2200
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 2201
     HEAP32[$546 >> 2] = $60; //@line 2202
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 2203
     HEAP32[$547 >> 2] = $157; //@line 2204
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 2205
     HEAP32[$548 >> 2] = $64; //@line 2206
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 2207
     HEAP32[$549 >> 2] = $66; //@line 2208
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 2209
     HEAP32[$550 >> 2] = $68; //@line 2210
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 2211
     HEAP32[$551 >> 2] = $70; //@line 2212
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 2213
     HEAP32[$552 >> 2] = $72; //@line 2214
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 2215
     HEAP32[$553 >> 2] = $74; //@line 2216
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 2217
     HEAP32[$554 >> 2] = $76; //@line 2218
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 2219
     HEAP32[$555 >> 2] = $78; //@line 2220
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 2221
     HEAP32[$556 >> 2] = $80; //@line 2222
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 2223
     HEAP32[$557 >> 2] = $82; //@line 2224
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 2225
     HEAP32[$558 >> 2] = $84; //@line 2226
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 2227
     HEAP32[$559 >> 2] = $86; //@line 2228
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 2229
     HEAP32[$560 >> 2] = $88; //@line 2230
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 2231
     HEAP32[$561 >> 2] = $90; //@line 2232
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 2233
     HEAP32[$562 >> 2] = $92; //@line 2234
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 2235
     HEAP32[$563 >> 2] = $94; //@line 2236
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 2237
     HEAP32[$564 >> 2] = $96; //@line 2238
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 2239
     HEAP32[$565 >> 2] = $98; //@line 2240
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 2241
     HEAP32[$566 >> 2] = $100; //@line 2242
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 2243
     HEAP32[$567 >> 2] = $102; //@line 2244
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 2245
     HEAP32[$568 >> 2] = $104; //@line 2246
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 2247
     HEAP32[$569 >> 2] = $106; //@line 2248
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 2249
     HEAP32[$570 >> 2] = $108; //@line 2250
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 2251
     HEAP32[$571 >> 2] = $110; //@line 2252
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 2253
     HEAP32[$572 >> 2] = $112; //@line 2254
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 2255
     HEAP32[$573 >> 2] = $114; //@line 2256
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 2257
     HEAP32[$574 >> 2] = $116; //@line 2258
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 2259
     HEAP32[$575 >> 2] = $118; //@line 2260
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 2261
     HEAP32[$576 >> 2] = $120; //@line 2262
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 2263
     HEAP32[$577 >> 2] = $122; //@line 2264
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 2265
     HEAP32[$578 >> 2] = $124; //@line 2266
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 2267
     HEAP32[$579 >> 2] = $126; //@line 2268
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 2269
     HEAP32[$580 >> 2] = $128; //@line 2270
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 2271
     HEAP32[$581 >> 2] = $130; //@line 2272
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 2273
     HEAP32[$582 >> 2] = $132; //@line 2274
     sp = STACKTOP; //@line 2275
     return;
    }
   case 53:
    {
     _mbed_tracef(2, 3803, 4831, $66); //@line 2280
     break L2;
     break;
    }
   case 57:
    {
     $600 = HEAP32[$126 >> 2] | 0; //@line 2285
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 2288
     $603 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $600 + 60 | 0, $600 + 8 | 0, 20, $$1202$i) | 0; //@line 2289
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 2292
      $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 2293
      HEAP32[$604 >> 2] = $2; //@line 2294
      $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 2295
      HEAP32[$605 >> 2] = $4; //@line 2296
      $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 2297
      HEAP32[$606 >> 2] = $6; //@line 2298
      $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 2299
      HEAP32[$607 >> 2] = $8; //@line 2300
      $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 2301
      HEAP32[$608 >> 2] = $10; //@line 2302
      $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 2303
      HEAP32[$609 >> 2] = $12; //@line 2304
      $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 2305
      HEAP32[$610 >> 2] = $14; //@line 2306
      $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 2307
      HEAP32[$611 >> 2] = $16; //@line 2308
      $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 2309
      HEAP32[$612 >> 2] = $18; //@line 2310
      $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 2311
      HEAP32[$613 >> 2] = $20; //@line 2312
      $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 2313
      HEAP32[$614 >> 2] = $22; //@line 2314
      $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 2315
      HEAP32[$615 >> 2] = $24; //@line 2316
      $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 2317
      HEAP32[$616 >> 2] = $26; //@line 2318
      $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 2319
      HEAP32[$617 >> 2] = $28; //@line 2320
      $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 2321
      HEAP32[$618 >> 2] = $30; //@line 2322
      $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 2323
      HEAP32[$619 >> 2] = $32; //@line 2324
      $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 2325
      HEAP32[$620 >> 2] = $34; //@line 2326
      $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 2327
      HEAP32[$621 >> 2] = $36; //@line 2328
      $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 2329
      HEAP32[$622 >> 2] = $38; //@line 2330
      $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 2331
      HEAP32[$623 >> 2] = $40; //@line 2332
      $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 2333
      HEAP32[$624 >> 2] = $42; //@line 2334
      $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 2335
      HEAP32[$625 >> 2] = $44; //@line 2336
      $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 2337
      HEAP32[$626 >> 2] = $46; //@line 2338
      $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 2339
      HEAP32[$627 >> 2] = $48; //@line 2340
      $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 2341
      HEAP32[$628 >> 2] = $50; //@line 2342
      $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 2343
      HEAP32[$629 >> 2] = $52; //@line 2344
      $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 2345
      HEAP32[$630 >> 2] = $54; //@line 2346
      $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 2347
      HEAP32[$631 >> 2] = $56; //@line 2348
      $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 2349
      HEAP32[$632 >> 2] = $58; //@line 2350
      $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 2351
      HEAP32[$633 >> 2] = $60; //@line 2352
      $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 2353
      HEAP32[$634 >> 2] = $157; //@line 2354
      $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 2355
      HEAP32[$635 >> 2] = $64; //@line 2356
      $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 2357
      HEAP32[$636 >> 2] = $66; //@line 2358
      $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 2359
      HEAP32[$637 >> 2] = $68; //@line 2360
      $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 2361
      HEAP32[$638 >> 2] = $70; //@line 2362
      $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 2363
      HEAP32[$639 >> 2] = $72; //@line 2364
      $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 2365
      HEAP32[$640 >> 2] = $74; //@line 2366
      $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 2367
      HEAP32[$641 >> 2] = $76; //@line 2368
      $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 2369
      HEAP32[$642 >> 2] = $78; //@line 2370
      $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 2371
      HEAP32[$643 >> 2] = $80; //@line 2372
      $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 2373
      HEAP32[$644 >> 2] = $82; //@line 2374
      $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 2375
      HEAP32[$645 >> 2] = $84; //@line 2376
      $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 2377
      HEAP32[$646 >> 2] = $86; //@line 2378
      $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 2379
      HEAP32[$647 >> 2] = $88; //@line 2380
      $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 2381
      HEAP32[$648 >> 2] = $90; //@line 2382
      $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 2383
      HEAP32[$649 >> 2] = $92; //@line 2384
      $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 2385
      HEAP32[$650 >> 2] = $94; //@line 2386
      $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 2387
      HEAP32[$651 >> 2] = $96; //@line 2388
      $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 2389
      HEAP32[$652 >> 2] = $98; //@line 2390
      $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 2391
      HEAP32[$653 >> 2] = $100; //@line 2392
      $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 2393
      HEAP32[$654 >> 2] = $102; //@line 2394
      $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 2395
      HEAP32[$655 >> 2] = $104; //@line 2396
      $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 2397
      HEAP32[$656 >> 2] = $106; //@line 2398
      $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 2399
      HEAP32[$657 >> 2] = $108; //@line 2400
      $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 2401
      HEAP32[$658 >> 2] = $110; //@line 2402
      $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 2403
      HEAP32[$659 >> 2] = $112; //@line 2404
      $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 2405
      HEAP32[$660 >> 2] = $114; //@line 2406
      $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 2407
      HEAP32[$661 >> 2] = $116; //@line 2408
      $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 2409
      HEAP32[$662 >> 2] = $118; //@line 2410
      $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 2411
      HEAP32[$663 >> 2] = $120; //@line 2412
      $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 2413
      HEAP32[$664 >> 2] = $122; //@line 2414
      $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 2415
      HEAP32[$665 >> 2] = $124; //@line 2416
      $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 2417
      HEAP32[$666 >> 2] = $126; //@line 2418
      $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 2419
      HEAP32[$667 >> 2] = $128; //@line 2420
      $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 2421
      HEAP32[$668 >> 2] = $130; //@line 2422
      $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 2423
      HEAP32[$669 >> 2] = $132; //@line 2424
      sp = STACKTOP; //@line 2425
      return;
     }
     HEAP8[___async_retval >> 0] = $603; //@line 2429
     ___async_unwind = 0; //@line 2430
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 2431
     $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 2432
     HEAP32[$604 >> 2] = $2; //@line 2433
     $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 2434
     HEAP32[$605 >> 2] = $4; //@line 2435
     $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 2436
     HEAP32[$606 >> 2] = $6; //@line 2437
     $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 2438
     HEAP32[$607 >> 2] = $8; //@line 2439
     $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 2440
     HEAP32[$608 >> 2] = $10; //@line 2441
     $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 2442
     HEAP32[$609 >> 2] = $12; //@line 2443
     $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 2444
     HEAP32[$610 >> 2] = $14; //@line 2445
     $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 2446
     HEAP32[$611 >> 2] = $16; //@line 2447
     $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 2448
     HEAP32[$612 >> 2] = $18; //@line 2449
     $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 2450
     HEAP32[$613 >> 2] = $20; //@line 2451
     $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 2452
     HEAP32[$614 >> 2] = $22; //@line 2453
     $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 2454
     HEAP32[$615 >> 2] = $24; //@line 2455
     $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 2456
     HEAP32[$616 >> 2] = $26; //@line 2457
     $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 2458
     HEAP32[$617 >> 2] = $28; //@line 2459
     $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 2460
     HEAP32[$618 >> 2] = $30; //@line 2461
     $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 2462
     HEAP32[$619 >> 2] = $32; //@line 2463
     $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 2464
     HEAP32[$620 >> 2] = $34; //@line 2465
     $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 2466
     HEAP32[$621 >> 2] = $36; //@line 2467
     $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 2468
     HEAP32[$622 >> 2] = $38; //@line 2469
     $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 2470
     HEAP32[$623 >> 2] = $40; //@line 2471
     $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 2472
     HEAP32[$624 >> 2] = $42; //@line 2473
     $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 2474
     HEAP32[$625 >> 2] = $44; //@line 2475
     $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 2476
     HEAP32[$626 >> 2] = $46; //@line 2477
     $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 2478
     HEAP32[$627 >> 2] = $48; //@line 2479
     $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 2480
     HEAP32[$628 >> 2] = $50; //@line 2481
     $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 2482
     HEAP32[$629 >> 2] = $52; //@line 2483
     $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 2484
     HEAP32[$630 >> 2] = $54; //@line 2485
     $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 2486
     HEAP32[$631 >> 2] = $56; //@line 2487
     $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 2488
     HEAP32[$632 >> 2] = $58; //@line 2489
     $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 2490
     HEAP32[$633 >> 2] = $60; //@line 2491
     $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 2492
     HEAP32[$634 >> 2] = $157; //@line 2493
     $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 2494
     HEAP32[$635 >> 2] = $64; //@line 2495
     $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 2496
     HEAP32[$636 >> 2] = $66; //@line 2497
     $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 2498
     HEAP32[$637 >> 2] = $68; //@line 2499
     $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 2500
     HEAP32[$638 >> 2] = $70; //@line 2501
     $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 2502
     HEAP32[$639 >> 2] = $72; //@line 2503
     $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 2504
     HEAP32[$640 >> 2] = $74; //@line 2505
     $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 2506
     HEAP32[$641 >> 2] = $76; //@line 2507
     $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 2508
     HEAP32[$642 >> 2] = $78; //@line 2509
     $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 2510
     HEAP32[$643 >> 2] = $80; //@line 2511
     $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 2512
     HEAP32[$644 >> 2] = $82; //@line 2513
     $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 2514
     HEAP32[$645 >> 2] = $84; //@line 2515
     $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 2516
     HEAP32[$646 >> 2] = $86; //@line 2517
     $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 2518
     HEAP32[$647 >> 2] = $88; //@line 2519
     $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 2520
     HEAP32[$648 >> 2] = $90; //@line 2521
     $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 2522
     HEAP32[$649 >> 2] = $92; //@line 2523
     $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 2524
     HEAP32[$650 >> 2] = $94; //@line 2525
     $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 2526
     HEAP32[$651 >> 2] = $96; //@line 2527
     $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 2528
     HEAP32[$652 >> 2] = $98; //@line 2529
     $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 2530
     HEAP32[$653 >> 2] = $100; //@line 2531
     $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 2532
     HEAP32[$654 >> 2] = $102; //@line 2533
     $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 2534
     HEAP32[$655 >> 2] = $104; //@line 2535
     $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 2536
     HEAP32[$656 >> 2] = $106; //@line 2537
     $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 2538
     HEAP32[$657 >> 2] = $108; //@line 2539
     $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 2540
     HEAP32[$658 >> 2] = $110; //@line 2541
     $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 2542
     HEAP32[$659 >> 2] = $112; //@line 2543
     $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 2544
     HEAP32[$660 >> 2] = $114; //@line 2545
     $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 2546
     HEAP32[$661 >> 2] = $116; //@line 2547
     $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 2548
     HEAP32[$662 >> 2] = $118; //@line 2549
     $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 2550
     HEAP32[$663 >> 2] = $120; //@line 2551
     $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 2552
     HEAP32[$664 >> 2] = $122; //@line 2553
     $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 2554
     HEAP32[$665 >> 2] = $124; //@line 2555
     $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 2556
     HEAP32[$666 >> 2] = $126; //@line 2557
     $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 2558
     HEAP32[$667 >> 2] = $128; //@line 2559
     $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 2560
     HEAP32[$668 >> 2] = $130; //@line 2561
     $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 2562
     HEAP32[$669 >> 2] = $132; //@line 2563
     sp = STACKTOP; //@line 2564
     return;
    }
   case 62:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 2569
     $672 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $4, $22, 11, $$1202$i) | 0; //@line 2570
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 2573
      $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 2574
      HEAP32[$673 >> 2] = $2; //@line 2575
      $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 2576
      HEAP32[$674 >> 2] = $4; //@line 2577
      $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 2578
      HEAP32[$675 >> 2] = $6; //@line 2579
      $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 2580
      HEAP32[$676 >> 2] = $8; //@line 2581
      $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 2582
      HEAP32[$677 >> 2] = $10; //@line 2583
      $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 2584
      HEAP32[$678 >> 2] = $12; //@line 2585
      $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 2586
      HEAP32[$679 >> 2] = $14; //@line 2587
      $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 2588
      HEAP32[$680 >> 2] = $16; //@line 2589
      $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 2590
      HEAP32[$681 >> 2] = $18; //@line 2591
      $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 2592
      HEAP32[$682 >> 2] = $20; //@line 2593
      $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 2594
      HEAP32[$683 >> 2] = $22; //@line 2595
      $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 2596
      HEAP32[$684 >> 2] = $24; //@line 2597
      $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 2598
      HEAP32[$685 >> 2] = $26; //@line 2599
      $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 2600
      HEAP32[$686 >> 2] = $28; //@line 2601
      $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 2602
      HEAP32[$687 >> 2] = $30; //@line 2603
      $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 2604
      HEAP32[$688 >> 2] = $32; //@line 2605
      $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 2606
      HEAP32[$689 >> 2] = $34; //@line 2607
      $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 2608
      HEAP32[$690 >> 2] = $36; //@line 2609
      $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 2610
      HEAP32[$691 >> 2] = $38; //@line 2611
      $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 2612
      HEAP32[$692 >> 2] = $40; //@line 2613
      $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 2614
      HEAP32[$693 >> 2] = $42; //@line 2615
      $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 2616
      HEAP32[$694 >> 2] = $44; //@line 2617
      $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 2618
      HEAP32[$695 >> 2] = $46; //@line 2619
      $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 2620
      HEAP32[$696 >> 2] = $48; //@line 2621
      $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 2622
      HEAP32[$697 >> 2] = $50; //@line 2623
      $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 2624
      HEAP32[$698 >> 2] = $52; //@line 2625
      $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 2626
      HEAP32[$699 >> 2] = $54; //@line 2627
      $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 2628
      HEAP32[$700 >> 2] = $56; //@line 2629
      $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 2630
      HEAP32[$701 >> 2] = $58; //@line 2631
      $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 2632
      HEAP32[$702 >> 2] = $60; //@line 2633
      $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 2634
      HEAP32[$703 >> 2] = $157; //@line 2635
      $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 2636
      HEAP32[$704 >> 2] = $64; //@line 2637
      $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 2638
      HEAP32[$705 >> 2] = $66; //@line 2639
      $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 2640
      HEAP32[$706 >> 2] = $68; //@line 2641
      $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 2642
      HEAP32[$707 >> 2] = $70; //@line 2643
      $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 2644
      HEAP32[$708 >> 2] = $72; //@line 2645
      $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 2646
      HEAP32[$709 >> 2] = $74; //@line 2647
      $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 2648
      HEAP32[$710 >> 2] = $76; //@line 2649
      $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 2650
      HEAP32[$711 >> 2] = $78; //@line 2651
      $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 2652
      HEAP32[$712 >> 2] = $80; //@line 2653
      $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 2654
      HEAP32[$713 >> 2] = $82; //@line 2655
      $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 2656
      HEAP32[$714 >> 2] = $84; //@line 2657
      $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 2658
      HEAP32[$715 >> 2] = $86; //@line 2659
      $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 2660
      HEAP32[$716 >> 2] = $88; //@line 2661
      $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 2662
      HEAP32[$717 >> 2] = $90; //@line 2663
      $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 2664
      HEAP32[$718 >> 2] = $92; //@line 2665
      $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 2666
      HEAP32[$719 >> 2] = $94; //@line 2667
      $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 2668
      HEAP32[$720 >> 2] = $96; //@line 2669
      $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 2670
      HEAP32[$721 >> 2] = $98; //@line 2671
      $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 2672
      HEAP32[$722 >> 2] = $100; //@line 2673
      $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 2674
      HEAP32[$723 >> 2] = $102; //@line 2675
      $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 2676
      HEAP32[$724 >> 2] = $104; //@line 2677
      $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 2678
      HEAP32[$725 >> 2] = $106; //@line 2679
      $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 2680
      HEAP32[$726 >> 2] = $108; //@line 2681
      $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 2682
      HEAP32[$727 >> 2] = $110; //@line 2683
      $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 2684
      HEAP32[$728 >> 2] = $112; //@line 2685
      $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 2686
      HEAP32[$729 >> 2] = $114; //@line 2687
      $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 2688
      HEAP32[$730 >> 2] = $116; //@line 2689
      $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 2690
      HEAP32[$731 >> 2] = $118; //@line 2691
      $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 2692
      HEAP32[$732 >> 2] = $120; //@line 2693
      $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 2694
      HEAP32[$733 >> 2] = $122; //@line 2695
      $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 2696
      HEAP32[$734 >> 2] = $124; //@line 2697
      $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 2698
      HEAP32[$735 >> 2] = $126; //@line 2699
      $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 2700
      HEAP32[$736 >> 2] = $128; //@line 2701
      $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 2702
      HEAP32[$737 >> 2] = $130; //@line 2703
      $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 2704
      HEAP32[$738 >> 2] = $132; //@line 2705
      sp = STACKTOP; //@line 2706
      return;
     }
     HEAP8[___async_retval >> 0] = $672; //@line 2710
     ___async_unwind = 0; //@line 2711
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 2712
     $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 2713
     HEAP32[$673 >> 2] = $2; //@line 2714
     $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 2715
     HEAP32[$674 >> 2] = $4; //@line 2716
     $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 2717
     HEAP32[$675 >> 2] = $6; //@line 2718
     $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 2719
     HEAP32[$676 >> 2] = $8; //@line 2720
     $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 2721
     HEAP32[$677 >> 2] = $10; //@line 2722
     $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 2723
     HEAP32[$678 >> 2] = $12; //@line 2724
     $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 2725
     HEAP32[$679 >> 2] = $14; //@line 2726
     $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 2727
     HEAP32[$680 >> 2] = $16; //@line 2728
     $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 2729
     HEAP32[$681 >> 2] = $18; //@line 2730
     $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 2731
     HEAP32[$682 >> 2] = $20; //@line 2732
     $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 2733
     HEAP32[$683 >> 2] = $22; //@line 2734
     $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 2735
     HEAP32[$684 >> 2] = $24; //@line 2736
     $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 2737
     HEAP32[$685 >> 2] = $26; //@line 2738
     $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 2739
     HEAP32[$686 >> 2] = $28; //@line 2740
     $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 2741
     HEAP32[$687 >> 2] = $30; //@line 2742
     $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 2743
     HEAP32[$688 >> 2] = $32; //@line 2744
     $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 2745
     HEAP32[$689 >> 2] = $34; //@line 2746
     $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 2747
     HEAP32[$690 >> 2] = $36; //@line 2748
     $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 2749
     HEAP32[$691 >> 2] = $38; //@line 2750
     $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 2751
     HEAP32[$692 >> 2] = $40; //@line 2752
     $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 2753
     HEAP32[$693 >> 2] = $42; //@line 2754
     $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 2755
     HEAP32[$694 >> 2] = $44; //@line 2756
     $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 2757
     HEAP32[$695 >> 2] = $46; //@line 2758
     $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 2759
     HEAP32[$696 >> 2] = $48; //@line 2760
     $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 2761
     HEAP32[$697 >> 2] = $50; //@line 2762
     $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 2763
     HEAP32[$698 >> 2] = $52; //@line 2764
     $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 2765
     HEAP32[$699 >> 2] = $54; //@line 2766
     $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 2767
     HEAP32[$700 >> 2] = $56; //@line 2768
     $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 2769
     HEAP32[$701 >> 2] = $58; //@line 2770
     $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 2771
     HEAP32[$702 >> 2] = $60; //@line 2772
     $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 2773
     HEAP32[$703 >> 2] = $157; //@line 2774
     $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 2775
     HEAP32[$704 >> 2] = $64; //@line 2776
     $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 2777
     HEAP32[$705 >> 2] = $66; //@line 2778
     $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 2779
     HEAP32[$706 >> 2] = $68; //@line 2780
     $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 2781
     HEAP32[$707 >> 2] = $70; //@line 2782
     $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 2783
     HEAP32[$708 >> 2] = $72; //@line 2784
     $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 2785
     HEAP32[$709 >> 2] = $74; //@line 2786
     $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 2787
     HEAP32[$710 >> 2] = $76; //@line 2788
     $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 2789
     HEAP32[$711 >> 2] = $78; //@line 2790
     $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 2791
     HEAP32[$712 >> 2] = $80; //@line 2792
     $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 2793
     HEAP32[$713 >> 2] = $82; //@line 2794
     $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 2795
     HEAP32[$714 >> 2] = $84; //@line 2796
     $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 2797
     HEAP32[$715 >> 2] = $86; //@line 2798
     $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 2799
     HEAP32[$716 >> 2] = $88; //@line 2800
     $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 2801
     HEAP32[$717 >> 2] = $90; //@line 2802
     $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 2803
     HEAP32[$718 >> 2] = $92; //@line 2804
     $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 2805
     HEAP32[$719 >> 2] = $94; //@line 2806
     $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 2807
     HEAP32[$720 >> 2] = $96; //@line 2808
     $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 2809
     HEAP32[$721 >> 2] = $98; //@line 2810
     $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 2811
     HEAP32[$722 >> 2] = $100; //@line 2812
     $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 2813
     HEAP32[$723 >> 2] = $102; //@line 2814
     $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 2815
     HEAP32[$724 >> 2] = $104; //@line 2816
     $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 2817
     HEAP32[$725 >> 2] = $106; //@line 2818
     $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 2819
     HEAP32[$726 >> 2] = $108; //@line 2820
     $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 2821
     HEAP32[$727 >> 2] = $110; //@line 2822
     $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 2823
     HEAP32[$728 >> 2] = $112; //@line 2824
     $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 2825
     HEAP32[$729 >> 2] = $114; //@line 2826
     $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 2827
     HEAP32[$730 >> 2] = $116; //@line 2828
     $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 2829
     HEAP32[$731 >> 2] = $118; //@line 2830
     $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 2831
     HEAP32[$732 >> 2] = $120; //@line 2832
     $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 2833
     HEAP32[$733 >> 2] = $122; //@line 2834
     $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 2835
     HEAP32[$734 >> 2] = $124; //@line 2836
     $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 2837
     HEAP32[$735 >> 2] = $126; //@line 2838
     $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 2839
     HEAP32[$736 >> 2] = $128; //@line 2840
     $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 2841
     HEAP32[$737 >> 2] = $130; //@line 2842
     $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 2843
     HEAP32[$738 >> 2] = $132; //@line 2844
     sp = STACKTOP; //@line 2845
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3803, 5026, $48); //@line 2850
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$126 >> 2] | 0; //@line 2855
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 2858
     $759 = _sn_coap_parser_options_parse_multiple_options($2, $36, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 2859
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 2862
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 2863
      HEAP32[$760 >> 2] = $2; //@line 2864
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 2865
      HEAP32[$761 >> 2] = $4; //@line 2866
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 2867
      HEAP32[$762 >> 2] = $6; //@line 2868
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 2869
      HEAP32[$763 >> 2] = $8; //@line 2870
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 2871
      HEAP32[$764 >> 2] = $10; //@line 2872
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 2873
      HEAP32[$765 >> 2] = $12; //@line 2874
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 2875
      HEAP32[$766 >> 2] = $14; //@line 2876
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 2877
      HEAP32[$767 >> 2] = $16; //@line 2878
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 2879
      HEAP32[$768 >> 2] = $18; //@line 2880
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 2881
      HEAP32[$769 >> 2] = $20; //@line 2882
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 2883
      HEAP32[$770 >> 2] = $22; //@line 2884
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 2885
      HEAP32[$771 >> 2] = $24; //@line 2886
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 2887
      HEAP32[$772 >> 2] = $26; //@line 2888
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 2889
      HEAP32[$773 >> 2] = $28; //@line 2890
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 2891
      HEAP32[$774 >> 2] = $30; //@line 2892
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 2893
      HEAP32[$775 >> 2] = $32; //@line 2894
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 2895
      HEAP32[$776 >> 2] = $34; //@line 2896
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 2897
      HEAP32[$777 >> 2] = $36; //@line 2898
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 2899
      HEAP32[$778 >> 2] = $38; //@line 2900
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 2901
      HEAP32[$779 >> 2] = $40; //@line 2902
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 2903
      HEAP32[$780 >> 2] = $42; //@line 2904
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 2905
      HEAP32[$781 >> 2] = $44; //@line 2906
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 2907
      HEAP32[$782 >> 2] = $46; //@line 2908
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 2909
      HEAP32[$783 >> 2] = $48; //@line 2910
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 2911
      HEAP32[$784 >> 2] = $50; //@line 2912
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 2913
      HEAP32[$785 >> 2] = $52; //@line 2914
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 2915
      HEAP32[$786 >> 2] = $54; //@line 2916
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 2917
      HEAP32[$787 >> 2] = $56; //@line 2918
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 2919
      HEAP32[$788 >> 2] = $58; //@line 2920
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 2921
      HEAP32[$789 >> 2] = $60; //@line 2922
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 2923
      HEAP32[$790 >> 2] = $157; //@line 2924
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 2925
      HEAP32[$791 >> 2] = $64; //@line 2926
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 2927
      HEAP32[$792 >> 2] = $66; //@line 2928
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 2929
      HEAP32[$793 >> 2] = $68; //@line 2930
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 2931
      HEAP32[$794 >> 2] = $70; //@line 2932
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 2933
      HEAP32[$795 >> 2] = $72; //@line 2934
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 2935
      HEAP32[$796 >> 2] = $74; //@line 2936
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 2937
      HEAP32[$797 >> 2] = $76; //@line 2938
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 2939
      HEAP32[$798 >> 2] = $78; //@line 2940
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 2941
      HEAP32[$799 >> 2] = $80; //@line 2942
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 2943
      HEAP32[$800 >> 2] = $82; //@line 2944
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 2945
      HEAP32[$801 >> 2] = $84; //@line 2946
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 2947
      HEAP32[$802 >> 2] = $86; //@line 2948
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 2949
      HEAP32[$803 >> 2] = $88; //@line 2950
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 2951
      HEAP32[$804 >> 2] = $90; //@line 2952
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 2953
      HEAP32[$805 >> 2] = $92; //@line 2954
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 2955
      HEAP32[$806 >> 2] = $94; //@line 2956
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 2957
      HEAP32[$807 >> 2] = $96; //@line 2958
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 2959
      HEAP32[$808 >> 2] = $98; //@line 2960
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 2961
      HEAP32[$809 >> 2] = $100; //@line 2962
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 2963
      HEAP32[$810 >> 2] = $102; //@line 2964
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 2965
      HEAP32[$811 >> 2] = $104; //@line 2966
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 2967
      HEAP32[$812 >> 2] = $106; //@line 2968
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 2969
      HEAP32[$813 >> 2] = $108; //@line 2970
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 2971
      HEAP32[$814 >> 2] = $110; //@line 2972
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 2973
      HEAP32[$815 >> 2] = $112; //@line 2974
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 2975
      HEAP32[$816 >> 2] = $114; //@line 2976
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 2977
      HEAP32[$817 >> 2] = $116; //@line 2978
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 2979
      HEAP32[$818 >> 2] = $118; //@line 2980
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 2981
      HEAP32[$819 >> 2] = $120; //@line 2982
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 2983
      HEAP32[$820 >> 2] = $122; //@line 2984
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 2985
      HEAP32[$821 >> 2] = $124; //@line 2986
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 2987
      HEAP32[$822 >> 2] = $126; //@line 2988
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 2989
      HEAP32[$823 >> 2] = $128; //@line 2990
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 2991
      HEAP32[$824 >> 2] = $130; //@line 2992
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 2993
      HEAP32[$825 >> 2] = $132; //@line 2994
      sp = STACKTOP; //@line 2995
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 2999
     ___async_unwind = 0; //@line 3000
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 3001
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 3002
     HEAP32[$760 >> 2] = $2; //@line 3003
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 3004
     HEAP32[$761 >> 2] = $4; //@line 3005
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 3006
     HEAP32[$762 >> 2] = $6; //@line 3007
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 3008
     HEAP32[$763 >> 2] = $8; //@line 3009
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 3010
     HEAP32[$764 >> 2] = $10; //@line 3011
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 3012
     HEAP32[$765 >> 2] = $12; //@line 3013
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 3014
     HEAP32[$766 >> 2] = $14; //@line 3015
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 3016
     HEAP32[$767 >> 2] = $16; //@line 3017
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 3018
     HEAP32[$768 >> 2] = $18; //@line 3019
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 3020
     HEAP32[$769 >> 2] = $20; //@line 3021
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 3022
     HEAP32[$770 >> 2] = $22; //@line 3023
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 3024
     HEAP32[$771 >> 2] = $24; //@line 3025
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 3026
     HEAP32[$772 >> 2] = $26; //@line 3027
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 3028
     HEAP32[$773 >> 2] = $28; //@line 3029
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 3030
     HEAP32[$774 >> 2] = $30; //@line 3031
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 3032
     HEAP32[$775 >> 2] = $32; //@line 3033
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 3034
     HEAP32[$776 >> 2] = $34; //@line 3035
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 3036
     HEAP32[$777 >> 2] = $36; //@line 3037
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 3038
     HEAP32[$778 >> 2] = $38; //@line 3039
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 3040
     HEAP32[$779 >> 2] = $40; //@line 3041
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 3042
     HEAP32[$780 >> 2] = $42; //@line 3043
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 3044
     HEAP32[$781 >> 2] = $44; //@line 3045
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 3046
     HEAP32[$782 >> 2] = $46; //@line 3047
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 3048
     HEAP32[$783 >> 2] = $48; //@line 3049
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 3050
     HEAP32[$784 >> 2] = $50; //@line 3051
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 3052
     HEAP32[$785 >> 2] = $52; //@line 3053
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 3054
     HEAP32[$786 >> 2] = $54; //@line 3055
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 3056
     HEAP32[$787 >> 2] = $56; //@line 3057
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 3058
     HEAP32[$788 >> 2] = $58; //@line 3059
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 3060
     HEAP32[$789 >> 2] = $60; //@line 3061
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 3062
     HEAP32[$790 >> 2] = $157; //@line 3063
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 3064
     HEAP32[$791 >> 2] = $64; //@line 3065
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 3066
     HEAP32[$792 >> 2] = $66; //@line 3067
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 3068
     HEAP32[$793 >> 2] = $68; //@line 3069
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 3070
     HEAP32[$794 >> 2] = $70; //@line 3071
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 3072
     HEAP32[$795 >> 2] = $72; //@line 3073
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 3074
     HEAP32[$796 >> 2] = $74; //@line 3075
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 3076
     HEAP32[$797 >> 2] = $76; //@line 3077
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 3078
     HEAP32[$798 >> 2] = $78; //@line 3079
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 3080
     HEAP32[$799 >> 2] = $80; //@line 3081
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 3082
     HEAP32[$800 >> 2] = $82; //@line 3083
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 3084
     HEAP32[$801 >> 2] = $84; //@line 3085
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 3086
     HEAP32[$802 >> 2] = $86; //@line 3087
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 3088
     HEAP32[$803 >> 2] = $88; //@line 3089
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 3090
     HEAP32[$804 >> 2] = $90; //@line 3091
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 3092
     HEAP32[$805 >> 2] = $92; //@line 3093
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 3094
     HEAP32[$806 >> 2] = $94; //@line 3095
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 3096
     HEAP32[$807 >> 2] = $96; //@line 3097
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 3098
     HEAP32[$808 >> 2] = $98; //@line 3099
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 3100
     HEAP32[$809 >> 2] = $100; //@line 3101
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 3102
     HEAP32[$810 >> 2] = $102; //@line 3103
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 3104
     HEAP32[$811 >> 2] = $104; //@line 3105
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 3106
     HEAP32[$812 >> 2] = $106; //@line 3107
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 3108
     HEAP32[$813 >> 2] = $108; //@line 3109
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 3110
     HEAP32[$814 >> 2] = $110; //@line 3111
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 3112
     HEAP32[$815 >> 2] = $112; //@line 3113
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 3114
     HEAP32[$816 >> 2] = $114; //@line 3115
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 3116
     HEAP32[$817 >> 2] = $116; //@line 3117
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 3118
     HEAP32[$818 >> 2] = $118; //@line 3119
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 3120
     HEAP32[$819 >> 2] = $120; //@line 3121
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 3122
     HEAP32[$820 >> 2] = $122; //@line 3123
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 3124
     HEAP32[$821 >> 2] = $124; //@line 3125
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 3126
     HEAP32[$822 >> 2] = $126; //@line 3127
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 3128
     HEAP32[$823 >> 2] = $128; //@line 3129
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 3130
     HEAP32[$824 >> 2] = $130; //@line 3131
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 3132
     HEAP32[$825 >> 2] = $132; //@line 3133
     sp = STACKTOP; //@line 3134
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3803, 5152, $46); //@line 3139
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3803, 5213, $20); //@line 3144
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3803, 5274, $72); //@line 3149
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3803, 5335, $60); //@line 3154
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3803, 5395, $120); //@line 3159
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3803, 5455, $74); //@line 3164
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $92 | 0) >= ($80 | 0)) {
      $936 = ___async_retval; //@line 3173
      HEAP32[$936 >> 2] = $38; //@line 3174
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 3180
      HEAP32[$36 >> 2] = $926; //@line 3181
      $927 = $926; //@line 3182
      $929 = $92 - $927 + $80 | 0; //@line 3184
      HEAP16[$82 + 24 >> 1] = $929; //@line 3187
      if ($929 & 65535 | 0) {
       HEAP32[$82 + 36 >> 2] = $927; //@line 3192
       $936 = ___async_retval; //@line 3193
       HEAP32[$936 >> 2] = $38; //@line 3194
       return;
      }
     } else {
      _mbed_tracef(2, 3803, 5502, $50); //@line 3198
     }
     HEAP32[$82 + 4 >> 2] = 1; //@line 3201
     $936 = ___async_retval; //@line 3202
     HEAP32[$936 >> 2] = $38; //@line 3203
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3803, 4894, $90); //@line 3209
  }
 } while (0);
 HEAP32[$82 + 4 >> 2] = 1; //@line 3213
 $936 = ___async_retval; //@line 3214
 HEAP32[$936 >> 2] = $38; //@line 3215
 return;
}
function _sn_coap_parser($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$in = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $1000 = 0, $1001 = 0, $101 = 0, $104 = 0, $107 = 0, $109 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $189 = 0, $192 = 0, $206 = 0, $211 = 0, $223 = 0, $226 = 0, $227 = 0, $230 = 0, $231 = 0, $241 = 0, $305 = 0, $307 = 0, $313 = 0, $314 = 0, $319 = 0, $322 = 0, $325 = 0, $326 = 0, $331 = 0, $334 = 0, $338 = 0, $341 = 0, $346 = 0, $347 = 0, $348 = 0, $4 = 0, $421 = 0, $423 = 0, $491 = 0, $494 = 0, $499 = 0, $500 = 0, $501 = 0, $574 = 0, $575 = 0, $579 = 0, $649 = 0, $652 = 0, $653 = 0, $658 = 0, $661 = 0, $663 = 0, $666 = 0, $734 = 0, $76 = 0, $8 = 0, $804 = 0, $807 = 0, $808 = 0, $813 = 0, $816 = 0, $818 = 0, $821 = 0, $891 = 0, $894 = 0, $895 = 0, $9 = 0, $90 = 0, $900 = 0, $903 = 0, $907 = 0, $910 = 0, $911 = 0, $916 = 0, $919 = 0, $92 = 0, $923 = 0, $926 = 0, $927 = 0, $932 = 0, $935 = 0, $939 = 0, $940 = 0, $945 = 0, $946 = 0, $951 = 0, $954 = 0, $960 = 0, $961 = 0, $966 = 0, $967 = 0, $972 = 0, $975 = 0, $979 = 0, $980 = 0, $99 = 0, $990 = 0, $991 = 0, $993 = 0, $AsyncCtx = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx67 = 0, $AsyncCtx71 = 0, $AsyncCtx75 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, stop = 0, $331$looptemp = 0, $658$looptemp = 0, $813$looptemp = 0, $900$looptemp = 0, $916$looptemp = 0, $932$looptemp = 0, $951$looptemp = 0, $972$looptemp = 0, $319$looptemp = 0;
 sp = STACKTOP; //@line 5406
 STACKTOP = STACKTOP + 240 | 0; //@line 5407
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240); //@line 5407
 $vararg_buffer55 = sp + 224 | 0; //@line 5408
 $vararg_buffer53 = sp + 216 | 0; //@line 5409
 $vararg_buffer51 = sp + 208 | 0; //@line 5410
 $vararg_buffer49 = sp + 200 | 0; //@line 5411
 $vararg_buffer47 = sp + 192 | 0; //@line 5412
 $vararg_buffer45 = sp + 184 | 0; //@line 5413
 $vararg_buffer43 = sp + 176 | 0; //@line 5414
 $vararg_buffer41 = sp + 168 | 0; //@line 5415
 $vararg_buffer39 = sp + 160 | 0; //@line 5416
 $vararg_buffer37 = sp + 152 | 0; //@line 5417
 $vararg_buffer35 = sp + 144 | 0; //@line 5418
 $vararg_buffer33 = sp + 136 | 0; //@line 5419
 $vararg_buffer31 = sp + 128 | 0; //@line 5420
 $vararg_buffer29 = sp + 120 | 0; //@line 5421
 $vararg_buffer27 = sp + 112 | 0; //@line 5422
 $vararg_buffer25 = sp + 104 | 0; //@line 5423
 $vararg_buffer23 = sp + 96 | 0; //@line 5424
 $vararg_buffer21 = sp + 88 | 0; //@line 5425
 $vararg_buffer19 = sp + 80 | 0; //@line 5426
 $vararg_buffer17 = sp + 72 | 0; //@line 5427
 $vararg_buffer15 = sp + 64 | 0; //@line 5428
 $vararg_buffer13 = sp + 56 | 0; //@line 5429
 $vararg_buffer11 = sp + 48 | 0; //@line 5430
 $vararg_buffer9 = sp + 40 | 0; //@line 5431
 $vararg_buffer7 = sp + 32 | 0; //@line 5432
 $vararg_buffer5 = sp + 24 | 0; //@line 5433
 $vararg_buffer3 = sp + 16 | 0; //@line 5434
 $vararg_buffer1 = sp + 8 | 0; //@line 5435
 $vararg_buffer = sp; //@line 5436
 $4 = sp + 228 | 0; //@line 5437
 HEAP32[$4 >> 2] = $2; //@line 5438
 if (!$2) {
  $$0 = 0; //@line 5441
  STACKTOP = sp; //@line 5442
  return $$0 | 0; //@line 5442
 }
 if (($0 | 0) == 0 | ($1 & 65535) < 4) {
  $$0 = 0; //@line 5448
  STACKTOP = sp; //@line 5449
  return $$0 | 0; //@line 5449
 }
 $8 = HEAP32[$0 >> 2] | 0; //@line 5451
 $AsyncCtx = _emscripten_alloc_async_context(264, sp) | 0; //@line 5452
 $9 = FUNCTION_TABLE_ii[$8 & 31](44) | 0; //@line 5453
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 5456
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5458
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 5460
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer21; //@line 5462
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer27; //@line 5464
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer15; //@line 5466
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer55; //@line 5468
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer21; //@line 5470
  HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 5472
  HEAP32[$AsyncCtx + 36 >> 2] = $3; //@line 5474
  HEAP16[$AsyncCtx + 40 >> 1] = $1; //@line 5476
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer11; //@line 5478
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer45; //@line 5480
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer39; //@line 5482
  HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer17; //@line 5484
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer9; //@line 5486
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer13; //@line 5488
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer45; //@line 5490
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer15; //@line 5492
  HEAP32[$AsyncCtx + 76 >> 2] = $4; //@line 5494
  HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer3; //@line 5496
  HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer37; //@line 5498
  HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer13; //@line 5500
  HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer3; //@line 5502
  HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer11; //@line 5504
  HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer43; //@line 5506
  HEAP32[$AsyncCtx + 104 >> 2] = $vararg_buffer39; //@line 5508
  HEAP32[$AsyncCtx + 108 >> 2] = $vararg_buffer55; //@line 5510
  HEAP32[$AsyncCtx + 112 >> 2] = $vararg_buffer49; //@line 5512
  HEAP32[$AsyncCtx + 116 >> 2] = $vararg_buffer5; //@line 5514
  HEAP32[$AsyncCtx + 120 >> 2] = $vararg_buffer43; //@line 5516
  HEAP32[$AsyncCtx + 124 >> 2] = $vararg_buffer33; //@line 5518
  HEAP32[$AsyncCtx + 128 >> 2] = $vararg_buffer27; //@line 5520
  HEAP32[$AsyncCtx + 132 >> 2] = $vararg_buffer49; //@line 5522
  HEAP32[$AsyncCtx + 136 >> 2] = $4; //@line 5524
  HEAP32[$AsyncCtx + 140 >> 2] = $vararg_buffer33; //@line 5526
  HEAP32[$AsyncCtx + 144 >> 2] = $vararg_buffer41; //@line 5528
  HEAP32[$AsyncCtx + 148 >> 2] = $vararg_buffer47; //@line 5530
  HEAP32[$AsyncCtx + 152 >> 2] = $vararg_buffer53; //@line 5532
  HEAP32[$AsyncCtx + 156 >> 2] = $vararg_buffer7; //@line 5534
  HEAP32[$AsyncCtx + 160 >> 2] = $vararg_buffer35; //@line 5536
  HEAP32[$AsyncCtx + 164 >> 2] = $vararg_buffer47; //@line 5538
  HEAP32[$AsyncCtx + 168 >> 2] = $vararg_buffer17; //@line 5540
  HEAP32[$AsyncCtx + 172 >> 2] = $vararg_buffer7; //@line 5542
  HEAP32[$AsyncCtx + 176 >> 2] = $vararg_buffer35; //@line 5544
  HEAP32[$AsyncCtx + 180 >> 2] = $vararg_buffer; //@line 5546
  HEAP32[$AsyncCtx + 184 >> 2] = $vararg_buffer5; //@line 5548
  HEAP32[$AsyncCtx + 188 >> 2] = $vararg_buffer29; //@line 5550
  HEAP32[$AsyncCtx + 192 >> 2] = $vararg_buffer23; //@line 5552
  HEAP32[$AsyncCtx + 196 >> 2] = $vararg_buffer29; //@line 5554
  HEAP32[$AsyncCtx + 200 >> 2] = $vararg_buffer9; //@line 5556
  HEAP32[$AsyncCtx + 204 >> 2] = $vararg_buffer53; //@line 5558
  HEAP32[$AsyncCtx + 208 >> 2] = $vararg_buffer23; //@line 5560
  HEAP32[$AsyncCtx + 212 >> 2] = $vararg_buffer19; //@line 5562
  HEAP32[$AsyncCtx + 216 >> 2] = $vararg_buffer25; //@line 5564
  HEAP32[$AsyncCtx + 220 >> 2] = $vararg_buffer51; //@line 5566
  HEAP32[$AsyncCtx + 224 >> 2] = $vararg_buffer1; //@line 5568
  HEAP32[$AsyncCtx + 228 >> 2] = $vararg_buffer25; //@line 5570
  HEAP32[$AsyncCtx + 232 >> 2] = $vararg_buffer31; //@line 5572
  HEAP32[$AsyncCtx + 236 >> 2] = $vararg_buffer19; //@line 5574
  HEAP32[$AsyncCtx + 240 >> 2] = $vararg_buffer51; //@line 5576
  HEAP32[$AsyncCtx + 244 >> 2] = $vararg_buffer1; //@line 5578
  HEAP32[$AsyncCtx + 248 >> 2] = $vararg_buffer31; //@line 5580
  HEAP32[$AsyncCtx + 252 >> 2] = $vararg_buffer37; //@line 5582
  HEAP32[$AsyncCtx + 256 >> 2] = $0; //@line 5584
  HEAP32[$AsyncCtx + 260 >> 2] = $vararg_buffer41; //@line 5586
  sp = STACKTOP; //@line 5587
  STACKTOP = sp; //@line 5588
  return 0; //@line 5588
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5590
 if (!$9) {
  _mbed_tracef(2, 3803, 3808, $vararg_buffer); //@line 5593
  _mbed_tracef(2, 3803, 3916, $vararg_buffer1); //@line 5594
  $$0 = 0; //@line 5595
  STACKTOP = sp; //@line 5596
  return $$0 | 0; //@line 5596
 }
 dest = $9; //@line 5598
 stop = dest + 44 | 0; //@line 5598
 do {
  HEAP32[dest >> 2] = 0; //@line 5598
  dest = dest + 4 | 0; //@line 5598
 } while ((dest | 0) < (stop | 0));
 $76 = $9 + 16 | 0; //@line 5599
 HEAP32[$76 >> 2] = -1; //@line 5600
 HEAP32[$3 >> 2] = HEAP8[$2 >> 0] & -64 & 255; //@line 5604
 HEAP32[$9 + 12 >> 2] = HEAP8[$2 >> 0] & 48; //@line 5609
 HEAP32[$9 + 8 >> 2] = HEAPU8[$2 + 1 >> 0]; //@line 5614
 $90 = HEAP8[$2 + 3 >> 0] | 0; //@line 5617
 $92 = $9 + 20 | 0; //@line 5619
 HEAP16[$92 >> 1] = $90 & 255; //@line 5620
 HEAP16[$92 >> 1] = HEAPU8[$2 + 2 >> 0] << 8 | $90 & 255; //@line 5627
 $99 = $2 + 4 | 0; //@line 5628
 HEAP32[$4 >> 2] = $99; //@line 5629
 $101 = HEAP8[$2 >> 0] & 15; //@line 5631
 HEAP8[$9 >> 0] = $101; //@line 5632
 do {
  if (!($101 << 24 >> 24)) {
   $$in = $99; //@line 5636
   label = 16; //@line 5637
  } else {
   if (($101 & 255) <= 8) {
    $104 = $9 + 28 | 0; //@line 5641
    if (!(HEAP32[$104 >> 2] | 0)) {
     $107 = HEAP32[$0 >> 2] | 0; //@line 5645
     $AsyncCtx59 = _emscripten_alloc_async_context(256, sp) | 0; //@line 5647
     $109 = FUNCTION_TABLE_ii[$107 & 31]($101 & 255) | 0; //@line 5648
     if (___async) {
      HEAP32[$AsyncCtx59 >> 2] = 60; //@line 5651
      HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 5653
      HEAP32[$AsyncCtx59 + 8 >> 2] = $vararg_buffer21; //@line 5655
      HEAP32[$AsyncCtx59 + 12 >> 2] = $vararg_buffer27; //@line 5657
      HEAP32[$AsyncCtx59 + 16 >> 2] = $76; //@line 5659
      HEAP32[$AsyncCtx59 + 20 >> 2] = $vararg_buffer15; //@line 5661
      HEAP32[$AsyncCtx59 + 24 >> 2] = $vararg_buffer55; //@line 5663
      HEAP32[$AsyncCtx59 + 28 >> 2] = $vararg_buffer21; //@line 5665
      HEAP32[$AsyncCtx59 + 32 >> 2] = $2; //@line 5667
      HEAP16[$AsyncCtx59 + 36 >> 1] = $1; //@line 5669
      HEAP32[$AsyncCtx59 + 40 >> 2] = $vararg_buffer11; //@line 5671
      HEAP32[$AsyncCtx59 + 44 >> 2] = $vararg_buffer45; //@line 5673
      HEAP32[$AsyncCtx59 + 48 >> 2] = $vararg_buffer39; //@line 5675
      HEAP32[$AsyncCtx59 + 52 >> 2] = $vararg_buffer17; //@line 5677
      HEAP32[$AsyncCtx59 + 56 >> 2] = $vararg_buffer9; //@line 5679
      HEAP32[$AsyncCtx59 + 60 >> 2] = $104; //@line 5681
      HEAP32[$AsyncCtx59 + 64 >> 2] = $vararg_buffer13; //@line 5683
      HEAP32[$AsyncCtx59 + 68 >> 2] = $vararg_buffer45; //@line 5685
      HEAP32[$AsyncCtx59 + 72 >> 2] = $vararg_buffer15; //@line 5687
      HEAP32[$AsyncCtx59 + 76 >> 2] = $4; //@line 5689
      HEAP32[$AsyncCtx59 + 80 >> 2] = $9; //@line 5691
      HEAP32[$AsyncCtx59 + 84 >> 2] = $vararg_buffer37; //@line 5693
      HEAP32[$AsyncCtx59 + 88 >> 2] = $vararg_buffer13; //@line 5695
      HEAP32[$AsyncCtx59 + 92 >> 2] = $vararg_buffer11; //@line 5697
      HEAP32[$AsyncCtx59 + 96 >> 2] = $vararg_buffer43; //@line 5699
      HEAP32[$AsyncCtx59 + 100 >> 2] = $vararg_buffer39; //@line 5701
      HEAP32[$AsyncCtx59 + 104 >> 2] = $vararg_buffer55; //@line 5703
      HEAP32[$AsyncCtx59 + 108 >> 2] = $vararg_buffer49; //@line 5705
      HEAP32[$AsyncCtx59 + 112 >> 2] = $vararg_buffer5; //@line 5707
      HEAP32[$AsyncCtx59 + 116 >> 2] = $vararg_buffer43; //@line 5709
      HEAP32[$AsyncCtx59 + 120 >> 2] = $vararg_buffer33; //@line 5711
      HEAP32[$AsyncCtx59 + 124 >> 2] = $vararg_buffer27; //@line 5713
      HEAP32[$AsyncCtx59 + 128 >> 2] = $vararg_buffer49; //@line 5715
      HEAP32[$AsyncCtx59 + 132 >> 2] = $4; //@line 5717
      HEAP32[$AsyncCtx59 + 136 >> 2] = $vararg_buffer33; //@line 5719
      HEAP32[$AsyncCtx59 + 140 >> 2] = $vararg_buffer41; //@line 5721
      HEAP32[$AsyncCtx59 + 144 >> 2] = $vararg_buffer47; //@line 5723
      HEAP32[$AsyncCtx59 + 148 >> 2] = $vararg_buffer53; //@line 5725
      HEAP32[$AsyncCtx59 + 152 >> 2] = $vararg_buffer7; //@line 5727
      HEAP32[$AsyncCtx59 + 156 >> 2] = $vararg_buffer35; //@line 5729
      HEAP32[$AsyncCtx59 + 160 >> 2] = $9; //@line 5731
      HEAP32[$AsyncCtx59 + 164 >> 2] = $vararg_buffer47; //@line 5733
      HEAP32[$AsyncCtx59 + 168 >> 2] = $vararg_buffer17; //@line 5735
      HEAP32[$AsyncCtx59 + 172 >> 2] = $vararg_buffer7; //@line 5737
      HEAP32[$AsyncCtx59 + 176 >> 2] = $vararg_buffer35; //@line 5739
      HEAP32[$AsyncCtx59 + 180 >> 2] = $vararg_buffer5; //@line 5741
      HEAP32[$AsyncCtx59 + 184 >> 2] = $vararg_buffer29; //@line 5743
      HEAP32[$AsyncCtx59 + 188 >> 2] = $vararg_buffer23; //@line 5745
      HEAP32[$AsyncCtx59 + 192 >> 2] = $vararg_buffer29; //@line 5747
      HEAP32[$AsyncCtx59 + 196 >> 2] = $99; //@line 5749
      HEAP32[$AsyncCtx59 + 200 >> 2] = $vararg_buffer9; //@line 5751
      HEAP32[$AsyncCtx59 + 204 >> 2] = $vararg_buffer53; //@line 5753
      HEAP32[$AsyncCtx59 + 208 >> 2] = $vararg_buffer23; //@line 5755
      HEAP32[$AsyncCtx59 + 212 >> 2] = $vararg_buffer19; //@line 5757
      HEAP32[$AsyncCtx59 + 216 >> 2] = $vararg_buffer25; //@line 5759
      HEAP32[$AsyncCtx59 + 220 >> 2] = $vararg_buffer51; //@line 5761
      HEAP32[$AsyncCtx59 + 224 >> 2] = $vararg_buffer25; //@line 5763
      HEAP32[$AsyncCtx59 + 228 >> 2] = $vararg_buffer31; //@line 5765
      HEAP32[$AsyncCtx59 + 232 >> 2] = $vararg_buffer19; //@line 5767
      HEAP32[$AsyncCtx59 + 236 >> 2] = $vararg_buffer51; //@line 5769
      HEAP32[$AsyncCtx59 + 240 >> 2] = $vararg_buffer31; //@line 5771
      HEAP32[$AsyncCtx59 + 244 >> 2] = $vararg_buffer37; //@line 5773
      HEAP32[$AsyncCtx59 + 248 >> 2] = $0; //@line 5775
      HEAP32[$AsyncCtx59 + 252 >> 2] = $vararg_buffer41; //@line 5777
      sp = STACKTOP; //@line 5778
      STACKTOP = sp; //@line 5779
      return 0; //@line 5779
     }
     _emscripten_free_async_context($AsyncCtx59 | 0); //@line 5781
     HEAP32[$104 >> 2] = $109; //@line 5782
     if (!$109) {
      _mbed_tracef(2, 3803, 4009, $vararg_buffer5); //@line 5785
      break;
     } else {
      _memcpy($109 | 0, $99 | 0, HEAPU8[$9 >> 0] | 0) | 0; //@line 5790
      $178 = $99 + (HEAPU8[$9 >> 0] | 0) | 0; //@line 5793
      HEAP32[$4 >> 2] = $178; //@line 5794
      $$in = $178; //@line 5795
      label = 16; //@line 5796
      break;
     }
    }
   }
   _mbed_tracef(2, 3803, 3961, $vararg_buffer3); //@line 5801
  }
 } while (0);
 L26 : do {
  if ((label | 0) == 16) {
   $179 = $$in; //@line 5806
   $180 = $1 & 65535; //@line 5807
   $181 = $2; //@line 5808
   $182 = $181 + $180 | 0; //@line 5809
   $184 = $9 + 40 | 0; //@line 5811
   $185 = $9 + 32 | 0; //@line 5812
   $186 = $9 + 22 | 0; //@line 5813
   $$0208$i = 0; //@line 5814
   $$sink275$i = $182 - $179 | 0; //@line 5814
   $1000 = $179; //@line 5814
   $189 = $$in; //@line 5814
   L28 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 132; //@line 5819
     break;
    }
    $trunc277$i = HEAP8[$189 >> 0] | 0; //@line 5822
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 132; //@line 5825
     break;
    }
    $192 = $trunc277$i & 15; //@line 5829
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 5830
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 22; //@line 5835
      break L28;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$189 + 1 >> 0] | 0; //@line 5843
      $$sink214$i = 13; //@line 5843
      $$sink3$i = 1; //@line 5843
      label = 23; //@line 5844
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$189 + 1 >> 0] << 8) + 269 | 0; //@line 5856
      $$sink214$i = HEAPU8[$189 + 2 >> 0] | 0; //@line 5856
      $$sink3$i = 2; //@line 5856
      label = 23; //@line 5857
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 5861
      $1001 = $1000; //@line 5861
      $211 = $189; //@line 5861
     }
    }
    if ((label | 0) == 23) {
     label = 0; //@line 5865
     $206 = $189 + $$sink3$i | 0; //@line 5867
     HEAP32[$4 >> 2] = $206; //@line 5868
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 5870
     $1001 = $206; //@line 5870
     $211 = $206; //@line 5870
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 5873
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 27; //@line 5877
      break L28;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$211 + 1 >> 0] | 0; //@line 5885
      $$sink216$i = 13; //@line 5885
      $$sink8$i = 1; //@line 5885
      label = 28; //@line 5886
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$211 + 1 >> 0] << 8) + 269 | 0; //@line 5898
      $$sink216$i = HEAPU8[$211 + 2 >> 0] | 0; //@line 5898
      $$sink8$i = 2; //@line 5898
      label = 28; //@line 5899
      break;
     }
    default:
     {
      $$1202$in$i = $192; //@line 5903
      $226 = $1001; //@line 5903
      $241 = $211; //@line 5903
     }
    }
    if ((label | 0) == 28) {
     label = 0; //@line 5907
     $223 = $211 + $$sink8$i | 0; //@line 5909
     HEAP32[$4 >> 2] = $223; //@line 5910
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 5912
     $226 = $223; //@line 5912
     $241 = $223; //@line 5912
    }
    $$1202$i = $$1202$in$i & 65535; //@line 5914
    $227 = $182 - $226 & 65535; //@line 5916
    $trunc$i = $$0208$i & 65535; //@line 5917
    L44 : do {
     switch ($trunc$i << 16 >> 16) {
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$184 >> 2] | 0)) {
        $230 = HEAP32[$0 >> 2] | 0; //@line 5924
        $AsyncCtx63 = _emscripten_alloc_async_context(288, sp) | 0; //@line 5925
        $231 = FUNCTION_TABLE_ii[$230 & 31](68) | 0; //@line 5926
        if (___async) {
         label = 32; //@line 5929
         break L28;
        }
        _emscripten_free_async_context($AsyncCtx63 | 0); //@line 5932
        HEAP32[$184 >> 2] = $231; //@line 5933
        if (!$231) {
         label = 34; //@line 5936
         break L28;
        }
        dest = $231; //@line 5939
        stop = dest + 68 | 0; //@line 5939
        do {
         HEAP32[dest >> 2] = 0; //@line 5939
         dest = dest + 4 | 0; //@line 5939
        } while ((dest | 0) < (stop | 0));
        $305 = HEAP32[$184 >> 2] | 0; //@line 5940
        HEAP32[$305 + 16 >> 2] = 0; //@line 5942
        $307 = $305 + 28 | 0; //@line 5943
        HEAP32[$305 + 12 >> 2] = -1; //@line 5945
        HEAP32[$307 >> 2] = -1; //@line 5946
        HEAP32[$307 + 4 >> 2] = -1; //@line 5946
        HEAP32[$307 + 8 >> 2] = -1; //@line 5946
        HEAP32[$307 + 12 >> 2] = -1; //@line 5946
        if (!$305) {
         break L28;
        }
       }
       do {
        switch ($trunc$i << 16 >> 16) {
        case 12:
         {
          label = 38; //@line 5955
          break L44;
          break;
         }
        case 11:
         {
          label = 85; //@line 5960
          break L44;
          break;
         }
        case 14:
         {
          if (($$1202$i & 65535) > 4) {
           label = 45; //@line 5967
           break L28;
          }
          $325 = $241 + 1 | 0; //@line 5970
          HEAP32[$4 >> 2] = $325; //@line 5971
          $326 = $$1202$in$i & 255; //@line 5972
          if (!($326 << 24 >> 24)) {
           $$0$lcssa$i223$i = 0; //@line 5975
          } else {
           $$045$i221$i = $326; //@line 5977
           $$06$i220$i = 0; //@line 5977
           $331 = $325; //@line 5977
           while (1) {
            $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 5979
            $331$looptemp = $331;
            $331 = $331 + 1 | 0; //@line 5981
            HEAP32[$4 >> 2] = $331; //@line 5982
            $334 = $$06$i220$i << 8 | HEAPU8[$331$looptemp >> 0]; //@line 5985
            if (!($$045$i221$i << 24 >> 24)) {
             $$0$lcssa$i223$i = $334; //@line 5988
             break;
            } else {
             $$06$i220$i = $334; //@line 5991
            }
           }
          }
          HEAP32[(HEAP32[$184 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 5997
          break L44;
          break;
         }
        case 35:
         {
          $338 = $$1202$in$i & 65535; //@line 6002
          if (($$1202$i + -1 & 65535) > 1033) {
           label = 51; //@line 6006
           break L28;
          }
          $341 = HEAP32[$184 >> 2] | 0; //@line 6009
          if (HEAP32[$341 + 44 >> 2] | 0) {
           label = 51; //@line 6014
           break L28;
          }
          HEAP16[$341 + 2 >> 1] = $$1202$i; //@line 6018
          $346 = $241 + 1 | 0; //@line 6019
          HEAP32[$4 >> 2] = $346; //@line 6020
          $347 = HEAP32[$0 >> 2] | 0; //@line 6021
          $AsyncCtx67 = _emscripten_alloc_async_context(276, sp) | 0; //@line 6022
          $348 = FUNCTION_TABLE_ii[$347 & 31]($$1202$i) | 0; //@line 6023
          if (___async) {
           label = 53; //@line 6026
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx67 | 0); //@line 6029
          HEAP32[(HEAP32[$184 >> 2] | 0) + 44 >> 2] = $348; //@line 6032
          if (!$348) {
           label = 55; //@line 6035
           break L28;
          }
          _memcpy($348 | 0, $346 | 0, $338 | 0) | 0; //@line 6038
          HEAP32[$4 >> 2] = $346 + $338; //@line 6040
          break L44;
          break;
         }
        case 4:
         {
          $421 = HEAP32[$184 >> 2] | 0; //@line 6045
          $AsyncCtx91 = _emscripten_alloc_async_context(268, sp) | 0; //@line 6047
          $423 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $421 + 48 | 0, $421, 4, $$1202$i) | 0; //@line 6048
          if (___async) {
           label = 58; //@line 6051
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx91 | 0); //@line 6054
          if ($423 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 60; //@line 6059
           break L28;
          }
          break;
         }
        case 3:
         {
          $491 = $$1202$in$i & 65535; //@line 6065
          if (($$1202$i + -1 & 65535) > 254) {
           label = 63; //@line 6069
           break L28;
          }
          $494 = HEAP32[$184 >> 2] | 0; //@line 6072
          if (HEAP32[$494 + 52 >> 2] | 0) {
           label = 63; //@line 6077
           break L28;
          }
          HEAP16[$494 + 4 >> 1] = $$1202$i; //@line 6081
          $499 = $241 + 1 | 0; //@line 6082
          HEAP32[$4 >> 2] = $499; //@line 6083
          $500 = HEAP32[$0 >> 2] | 0; //@line 6084
          $AsyncCtx71 = _emscripten_alloc_async_context(276, sp) | 0; //@line 6085
          $501 = FUNCTION_TABLE_ii[$500 & 31]($$1202$i) | 0; //@line 6086
          if (___async) {
           label = 65; //@line 6089
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx71 | 0); //@line 6092
          HEAP32[(HEAP32[$184 >> 2] | 0) + 52 >> 2] = $501; //@line 6095
          if (!$501) {
           label = 67; //@line 6098
           break L28;
          }
          _memcpy($501 | 0, $499 | 0, $491 | 0) | 0; //@line 6101
          HEAP32[$4 >> 2] = $499 + $491; //@line 6103
          break L44;
          break;
         }
        case 8:
         {
          $574 = HEAP32[$184 >> 2] | 0; //@line 6108
          $575 = $574 + 56 | 0; //@line 6109
          if (HEAP32[$575 >> 2] | 0) {
           label = 70; //@line 6113
           break L28;
          }
          $AsyncCtx87 = _emscripten_alloc_async_context(268, sp) | 0; //@line 6117
          $579 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $575, $574 + 6 | 0, 8, $$1202$i) | 0; //@line 6118
          if (___async) {
           label = 72; //@line 6121
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx87 | 0); //@line 6124
          if ($579 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 74; //@line 6129
           break L28;
          }
          break;
         }
        case 7:
         {
          if (($$1202$i & 65535) > 2) {
           label = 77; //@line 6137
           break L28;
          }
          $649 = (HEAP32[$184 >> 2] | 0) + 28 | 0; //@line 6141
          if ((HEAP32[$649 >> 2] | 0) != -1) {
           label = 77; //@line 6145
           break L28;
          }
          $652 = $241 + 1 | 0; //@line 6148
          HEAP32[$4 >> 2] = $652; //@line 6149
          $653 = $$1202$in$i & 255; //@line 6150
          if (!($653 << 24 >> 24)) {
           $$0$lcssa$i265$i = 0; //@line 6153
          } else {
           $$045$i263$i = $653; //@line 6155
           $$06$i262$i = 0; //@line 6155
           $658 = $652; //@line 6155
           while (1) {
            $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 6157
            $658$looptemp = $658;
            $658 = $658 + 1 | 0; //@line 6159
            HEAP32[$4 >> 2] = $658; //@line 6160
            $661 = $$06$i262$i << 8 | HEAPU8[$658$looptemp >> 0]; //@line 6163
            if (!($$045$i263$i << 24 >> 24)) {
             $$0$lcssa$i265$i = $661; //@line 6166
             break;
            } else {
             $$06$i262$i = $661; //@line 6169
            }
           }
          }
          HEAP32[$649 >> 2] = $$0$lcssa$i265$i; //@line 6173
          break L44;
          break;
         }
        case 20:
         {
          $663 = HEAP32[$184 >> 2] | 0; //@line 6178
          $AsyncCtx83 = _emscripten_alloc_async_context(268, sp) | 0; //@line 6181
          $666 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $663 + 60 | 0, $663 + 8 | 0, 20, $$1202$i) | 0; //@line 6182
          if (___async) {
           label = 82; //@line 6185
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx83 | 0); //@line 6188
          if ($666 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 84; //@line 6193
           break L28;
          }
          break;
         }
        case 6:
         {
          if (($$1202$i & 65535) > 2) {
           label = 91; //@line 6201
           break L28;
          }
          $804 = (HEAP32[$184 >> 2] | 0) + 32 | 0; //@line 6205
          if ((HEAP32[$804 >> 2] | 0) != -1) {
           label = 91; //@line 6209
           break L28;
          }
          $807 = $241 + 1 | 0; //@line 6212
          HEAP32[$4 >> 2] = $807; //@line 6213
          $808 = $$1202$in$i & 255; //@line 6214
          if (!($808 << 24 >> 24)) {
           $$0$lcssa$i272$i = 0; //@line 6217
          } else {
           $$045$i270$i = $808; //@line 6219
           $$06$i269$i = 0; //@line 6219
           $813 = $807; //@line 6219
           while (1) {
            $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 6221
            $813$looptemp = $813;
            $813 = $813 + 1 | 0; //@line 6223
            HEAP32[$4 >> 2] = $813; //@line 6224
            $816 = $$06$i269$i << 8 | HEAPU8[$813$looptemp >> 0]; //@line 6227
            if (!($$045$i270$i << 24 >> 24)) {
             $$0$lcssa$i272$i = $816; //@line 6230
             break;
            } else {
             $$06$i269$i = $816; //@line 6233
            }
           }
          }
          HEAP32[$804 >> 2] = $$0$lcssa$i272$i; //@line 6237
          break L44;
          break;
         }
        case 15:
         {
          $818 = HEAP32[$184 >> 2] | 0; //@line 6242
          $AsyncCtx75 = _emscripten_alloc_async_context(268, sp) | 0; //@line 6245
          $821 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $818 + 64 | 0, $818 + 10 | 0, 15, $$1202$i) | 0; //@line 6246
          if (___async) {
           label = 96; //@line 6249
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx75 | 0); //@line 6252
          if ($821 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 98; //@line 6257
           break L28;
          }
          break;
         }
        case 23:
         {
          if (($$1202$i & 65535) > 3) {
           label = 101; //@line 6265
           break L28;
          }
          $891 = (HEAP32[$184 >> 2] | 0) + 40 | 0; //@line 6269
          if ((HEAP32[$891 >> 2] | 0) != -1) {
           label = 101; //@line 6273
           break L28;
          }
          $894 = $241 + 1 | 0; //@line 6276
          HEAP32[$4 >> 2] = $894; //@line 6277
          $895 = $$1202$in$i & 255; //@line 6278
          if (!($895 << 24 >> 24)) {
           $$0$lcssa$i258$i = 0; //@line 6281
          } else {
           $$045$i256$i = $895; //@line 6283
           $$06$i255$i = 0; //@line 6283
           $900 = $894; //@line 6283
           while (1) {
            $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 6285
            $900$looptemp = $900;
            $900 = $900 + 1 | 0; //@line 6287
            HEAP32[$4 >> 2] = $900; //@line 6288
            $903 = $$06$i255$i << 8 | HEAPU8[$900$looptemp >> 0]; //@line 6291
            if (!($$045$i256$i << 24 >> 24)) {
             $$0$lcssa$i258$i = $903; //@line 6294
             break;
            } else {
             $$06$i255$i = $903; //@line 6297
            }
           }
          }
          HEAP32[$891 >> 2] = $$0$lcssa$i258$i; //@line 6301
          break L44;
          break;
         }
        case 27:
         {
          if (($$1202$i & 65535) > 3) {
           label = 107; //@line 6308
           break L28;
          }
          $907 = (HEAP32[$184 >> 2] | 0) + 36 | 0; //@line 6312
          if ((HEAP32[$907 >> 2] | 0) != -1) {
           label = 107; //@line 6316
           break L28;
          }
          $910 = $241 + 1 | 0; //@line 6319
          HEAP32[$4 >> 2] = $910; //@line 6320
          $911 = $$1202$in$i & 255; //@line 6321
          if (!($911 << 24 >> 24)) {
           $$0$lcssa$i251$i = 0; //@line 6324
          } else {
           $$045$i249$i = $911; //@line 6326
           $$06$i248$i = 0; //@line 6326
           $916 = $910; //@line 6326
           while (1) {
            $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 6328
            $916$looptemp = $916;
            $916 = $916 + 1 | 0; //@line 6330
            HEAP32[$4 >> 2] = $916; //@line 6331
            $919 = $$06$i248$i << 8 | HEAPU8[$916$looptemp >> 0]; //@line 6334
            if (!($$045$i249$i << 24 >> 24)) {
             $$0$lcssa$i251$i = $919; //@line 6337
             break;
            } else {
             $$06$i248$i = $919; //@line 6340
            }
           }
          }
          HEAP32[$907 >> 2] = $$0$lcssa$i251$i; //@line 6344
          break L44;
          break;
         }
        case 17:
         {
          if (($$1202$i & 65535) > 2) {
           label = 113; //@line 6351
           break L28;
          }
          $923 = (HEAP32[$184 >> 2] | 0) + 12 | 0; //@line 6355
          if ((HEAP32[$923 >> 2] | 0) != -1) {
           label = 113; //@line 6359
           break L28;
          }
          $926 = $241 + 1 | 0; //@line 6362
          HEAP32[$4 >> 2] = $926; //@line 6363
          $927 = $$1202$in$i & 255; //@line 6364
          if (!($927 << 24 >> 24)) {
           $$0$lcssa$i244$i = 0; //@line 6367
          } else {
           $$045$i242$i = $927; //@line 6369
           $$06$i241$i = 0; //@line 6369
           $932 = $926; //@line 6369
           while (1) {
            $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 6371
            $932$looptemp = $932;
            $932 = $932 + 1 | 0; //@line 6373
            HEAP32[$4 >> 2] = $932; //@line 6374
            $935 = $$06$i241$i << 8 | HEAPU8[$932$looptemp >> 0]; //@line 6377
            if (!($$045$i242$i << 24 >> 24)) {
             $$0$lcssa$i244$i = $935; //@line 6380
             break;
            } else {
             $$06$i241$i = $935; //@line 6383
            }
           }
          }
          HEAP32[$923 >> 2] = $$0$lcssa$i244$i; //@line 6387
          break L44;
          break;
         }
        case 60:
         {
          if (($$1202$i & 65535) > 4) {
           label = 119; //@line 6394
           break L28;
          }
          $939 = (HEAP32[$184 >> 2] | 0) + 1 | 0; //@line 6398
          $940 = HEAP8[$939 >> 0] | 0; //@line 6399
          if ($940 & 1) {
           label = 119; //@line 6403
           break L28;
          }
          HEAP8[$939 >> 0] = $940 | 1; //@line 6407
          $945 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 6409
          HEAP32[$4 >> 2] = $945; //@line 6410
          $946 = $$1202$in$i & 255; //@line 6411
          if (!($946 << 24 >> 24)) {
           $$0$lcssa$i237$i = 0; //@line 6414
          } else {
           $$045$i235$i = $946; //@line 6416
           $$06$i234$i = 0; //@line 6416
           $951 = $945; //@line 6416
           while (1) {
            $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 6418
            $951$looptemp = $951;
            $951 = $951 + 1 | 0; //@line 6420
            HEAP32[$4 >> 2] = $951; //@line 6421
            $954 = $$06$i234$i << 8 | HEAPU8[$951$looptemp >> 0]; //@line 6424
            if (!($$045$i235$i << 24 >> 24)) {
             $$0$lcssa$i237$i = $954; //@line 6427
             break;
            } else {
             $$06$i234$i = $954; //@line 6430
            }
           }
          }
          HEAP32[(HEAP32[$184 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 6436
          break L44;
          break;
         }
        case 28:
         {
          if (($$1202$i & 65535) > 4) {
           label = 125; //@line 6443
           break L28;
          }
          $960 = (HEAP32[$184 >> 2] | 0) + 1 | 0; //@line 6447
          $961 = HEAP8[$960 >> 0] | 0; //@line 6448
          if ($961 & 2) {
           label = 125; //@line 6452
           break L28;
          }
          HEAP8[$960 >> 0] = $961 | 2; //@line 6456
          $966 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 6458
          HEAP32[$4 >> 2] = $966; //@line 6459
          $967 = $$1202$in$i & 255; //@line 6460
          if (!($967 << 24 >> 24)) {
           $$0$lcssa$i230$i = 0; //@line 6463
          } else {
           $$045$i228$i = $967; //@line 6465
           $$06$i227$i = 0; //@line 6465
           $972 = $966; //@line 6465
           while (1) {
            $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 6467
            $972$looptemp = $972;
            $972 = $972 + 1 | 0; //@line 6469
            HEAP32[$4 >> 2] = $972; //@line 6470
            $975 = $$06$i227$i << 8 | HEAPU8[$972$looptemp >> 0]; //@line 6473
            if (!($$045$i228$i << 24 >> 24)) {
             $$0$lcssa$i230$i = $975; //@line 6476
             break;
            } else {
             $$06$i227$i = $975; //@line 6479
            }
           }
          }
          HEAP32[(HEAP32[$184 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 6485
          break L44;
          break;
         }
        default:
         {
          label = 129; //@line 6490
          break L28;
         }
        }
       } while (0);
       break;
      }
     case 12:
      {
       label = 38; //@line 6498
       break;
      }
     case 11:
      {
       label = 85; //@line 6502
       break;
      }
     default:
      {
       label = 129; //@line 6506
       break L28;
      }
     }
    } while (0);
    if ((label | 0) == 38) {
     label = 0; //@line 6512
     if (($$1202$i & 65535) > 2) {
      label = 40; //@line 6515
      break;
     }
     if ((HEAP32[$76 >> 2] | 0) != -1) {
      label = 40; //@line 6521
      break;
     }
     $313 = $241 + 1 | 0; //@line 6524
     HEAP32[$4 >> 2] = $313; //@line 6525
     $314 = $$1202$in$i & 255; //@line 6526
     if (!($314 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 6529
     } else {
      $$045$i$i = $314; //@line 6531
      $$06$i$i = 0; //@line 6531
      $319 = $313; //@line 6531
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 6533
       $319$looptemp = $319;
       $319 = $319 + 1 | 0; //@line 6535
       HEAP32[$4 >> 2] = $319; //@line 6536
       $322 = $$06$i$i << 8 | HEAPU8[$319$looptemp >> 0]; //@line 6539
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $322; //@line 6542
        break;
       } else {
        $$06$i$i = $322; //@line 6545
       }
      }
     }
     HEAP32[$76 >> 2] = $$0$lcssa$i$i; //@line 6549
    } else if ((label | 0) == 85) {
     label = 0; //@line 6552
     $AsyncCtx79 = _emscripten_alloc_async_context(268, sp) | 0; //@line 6553
     $734 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $185, $186, 11, $$1202$i) | 0; //@line 6554
     if (___async) {
      label = 86; //@line 6557
      break;
     }
     _emscripten_free_async_context($AsyncCtx79 | 0); //@line 6560
     if ($734 << 24 >> 24 <= -1) {
      label = 88; //@line 6563
      break;
     }
    }
    $979 = HEAP32[$4 >> 2] | 0; //@line 6567
    $980 = $979 - $181 | 0; //@line 6568
    if (($980 | 0) > ($180 | 0)) {
     break L26;
    } else {
     $$sink275$i = $180 - $980 | 0; //@line 6575
     $1000 = $979; //@line 6575
     $189 = $979; //@line 6575
    }
   }
   switch (label | 0) {
   case 22:
    {
     _mbed_tracef(2, 3803, 4066, $vararg_buffer7); //@line 6580
     break L26;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3803, 4124, $vararg_buffer9); //@line 6585
     break L26;
     break;
    }
   case 32:
    {
     HEAP32[$AsyncCtx63 >> 2] = 61; //@line 6590
     HEAP32[$AsyncCtx63 + 4 >> 2] = $0; //@line 6592
     HEAP32[$AsyncCtx63 + 8 >> 2] = $185; //@line 6594
     HEAP32[$AsyncCtx63 + 12 >> 2] = $vararg_buffer21; //@line 6596
     HEAP32[$AsyncCtx63 + 16 >> 2] = $vararg_buffer27; //@line 6598
     HEAP32[$AsyncCtx63 + 20 >> 2] = $76; //@line 6600
     HEAP32[$AsyncCtx63 + 24 >> 2] = $vararg_buffer15; //@line 6602
     HEAP32[$AsyncCtx63 + 28 >> 2] = $vararg_buffer55; //@line 6604
     HEAP32[$AsyncCtx63 + 32 >> 2] = $vararg_buffer21; //@line 6606
     HEAP32[$AsyncCtx63 + 36 >> 2] = $241; //@line 6608
     HEAP32[$AsyncCtx63 + 40 >> 2] = $vararg_buffer11; //@line 6610
     HEAP32[$AsyncCtx63 + 44 >> 2] = $vararg_buffer45; //@line 6612
     HEAP32[$AsyncCtx63 + 48 >> 2] = $186; //@line 6614
     HEAP32[$AsyncCtx63 + 52 >> 2] = $vararg_buffer39; //@line 6616
     HEAP32[$AsyncCtx63 + 56 >> 2] = $vararg_buffer17; //@line 6618
     HEAP32[$AsyncCtx63 + 60 >> 2] = $vararg_buffer9; //@line 6620
     HEAP32[$AsyncCtx63 + 64 >> 2] = $vararg_buffer13; //@line 6622
     HEAP32[$AsyncCtx63 + 68 >> 2] = $vararg_buffer45; //@line 6624
     HEAP32[$AsyncCtx63 + 72 >> 2] = $vararg_buffer15; //@line 6626
     HEAP32[$AsyncCtx63 + 76 >> 2] = $4; //@line 6628
     HEAP32[$AsyncCtx63 + 80 >> 2] = $9; //@line 6630
     HEAP32[$AsyncCtx63 + 84 >> 2] = $$1202$in$i; //@line 6632
     HEAP32[$AsyncCtx63 + 88 >> 2] = $vararg_buffer13; //@line 6634
     HEAP32[$AsyncCtx63 + 92 >> 2] = $vararg_buffer11; //@line 6636
     HEAP16[$AsyncCtx63 + 96 >> 1] = $$1202$i; //@line 6638
     HEAP32[$AsyncCtx63 + 100 >> 2] = $vararg_buffer43; //@line 6640
     HEAP32[$AsyncCtx63 + 104 >> 2] = $vararg_buffer39; //@line 6642
     HEAP32[$AsyncCtx63 + 108 >> 2] = $vararg_buffer55; //@line 6644
     HEAP32[$AsyncCtx63 + 112 >> 2] = $vararg_buffer49; //@line 6646
     HEAP32[$AsyncCtx63 + 116 >> 2] = $vararg_buffer43; //@line 6648
     HEAP32[$AsyncCtx63 + 120 >> 2] = $vararg_buffer37; //@line 6650
     HEAP32[$AsyncCtx63 + 124 >> 2] = $vararg_buffer33; //@line 6652
     HEAP32[$AsyncCtx63 + 128 >> 2] = $vararg_buffer27; //@line 6654
     HEAP32[$AsyncCtx63 + 132 >> 2] = $vararg_buffer49; //@line 6656
     HEAP32[$AsyncCtx63 + 136 >> 2] = $$0208$i; //@line 6658
     HEAP32[$AsyncCtx63 + 140 >> 2] = $4; //@line 6660
     HEAP32[$AsyncCtx63 + 144 >> 2] = $vararg_buffer33; //@line 6662
     HEAP32[$AsyncCtx63 + 148 >> 2] = $4; //@line 6664
     HEAP32[$AsyncCtx63 + 152 >> 2] = $vararg_buffer41; //@line 6666
     HEAP16[$AsyncCtx63 + 156 >> 1] = $227; //@line 6668
     HEAP32[$AsyncCtx63 + 160 >> 2] = $vararg_buffer47; //@line 6670
     HEAP32[$AsyncCtx63 + 164 >> 2] = $vararg_buffer53; //@line 6672
     HEAP32[$AsyncCtx63 + 168 >> 2] = $vararg_buffer7; //@line 6674
     HEAP32[$AsyncCtx63 + 172 >> 2] = $vararg_buffer35; //@line 6676
     HEAP32[$AsyncCtx63 + 176 >> 2] = $180; //@line 6678
     HEAP32[$AsyncCtx63 + 180 >> 2] = $9; //@line 6680
     HEAP32[$AsyncCtx63 + 184 >> 2] = $vararg_buffer47; //@line 6682
     HEAP32[$AsyncCtx63 + 188 >> 2] = $vararg_buffer17; //@line 6684
     HEAP32[$AsyncCtx63 + 192 >> 2] = $vararg_buffer7; //@line 6686
     HEAP32[$AsyncCtx63 + 196 >> 2] = $vararg_buffer35; //@line 6688
     HEAP32[$AsyncCtx63 + 200 >> 2] = $181; //@line 6690
     HEAP32[$AsyncCtx63 + 204 >> 2] = $vararg_buffer29; //@line 6692
     HEAP32[$AsyncCtx63 + 208 >> 2] = $vararg_buffer23; //@line 6694
     HEAP32[$AsyncCtx63 + 212 >> 2] = $vararg_buffer29; //@line 6696
     HEAP32[$AsyncCtx63 + 216 >> 2] = $182; //@line 6698
     HEAP32[$AsyncCtx63 + 220 >> 2] = $vararg_buffer9; //@line 6700
     HEAP32[$AsyncCtx63 + 224 >> 2] = $vararg_buffer53; //@line 6702
     HEAP32[$AsyncCtx63 + 228 >> 2] = $vararg_buffer23; //@line 6704
     HEAP32[$AsyncCtx63 + 232 >> 2] = $vararg_buffer19; //@line 6706
     HEAP32[$AsyncCtx63 + 236 >> 2] = $vararg_buffer25; //@line 6708
     HEAP32[$AsyncCtx63 + 240 >> 2] = $vararg_buffer51; //@line 6710
     HEAP32[$AsyncCtx63 + 244 >> 2] = $vararg_buffer25; //@line 6712
     HEAP32[$AsyncCtx63 + 248 >> 2] = $vararg_buffer31; //@line 6714
     HEAP32[$AsyncCtx63 + 252 >> 2] = $vararg_buffer19; //@line 6716
     HEAP32[$AsyncCtx63 + 256 >> 2] = $vararg_buffer51; //@line 6718
     HEAP32[$AsyncCtx63 + 260 >> 2] = $vararg_buffer31; //@line 6720
     HEAP32[$AsyncCtx63 + 264 >> 2] = $vararg_buffer37; //@line 6722
     HEAP32[$AsyncCtx63 + 268 >> 2] = $184; //@line 6724
     HEAP16[$AsyncCtx63 + 272 >> 1] = $trunc$i; //@line 6726
     HEAP32[$AsyncCtx63 + 276 >> 2] = $0; //@line 6728
     HEAP32[$AsyncCtx63 + 280 >> 2] = $184; //@line 6730
     HEAP32[$AsyncCtx63 + 284 >> 2] = $vararg_buffer41; //@line 6732
     sp = STACKTOP; //@line 6733
     STACKTOP = sp; //@line 6734
     return 0; //@line 6734
    }
   case 34:
    {
     _mbed_tracef(2, 3803, 3852, $vararg_buffer11); //@line 6738
     break;
    }
   case 40:
    {
     _mbed_tracef(2, 3803, 4238, $vararg_buffer15); //@line 6742
     break L26;
     break;
    }
   case 45:
    {
     _mbed_tracef(2, 3803, 4307, $vararg_buffer17); //@line 6747
     break L26;
     break;
    }
   case 51:
    {
     _mbed_tracef(2, 3803, 4369, $vararg_buffer19); //@line 6752
     break L26;
     break;
    }
   case 53:
    {
     HEAP32[$AsyncCtx67 >> 2] = 62; //@line 6757
     HEAP32[$AsyncCtx67 + 4 >> 2] = $0; //@line 6759
     HEAP32[$AsyncCtx67 + 8 >> 2] = $185; //@line 6761
     HEAP32[$AsyncCtx67 + 12 >> 2] = $vararg_buffer21; //@line 6763
     HEAP32[$AsyncCtx67 + 16 >> 2] = $vararg_buffer27; //@line 6765
     HEAP32[$AsyncCtx67 + 20 >> 2] = $76; //@line 6767
     HEAP32[$AsyncCtx67 + 24 >> 2] = $vararg_buffer15; //@line 6769
     HEAP32[$AsyncCtx67 + 28 >> 2] = $vararg_buffer55; //@line 6771
     HEAP32[$AsyncCtx67 + 32 >> 2] = $vararg_buffer21; //@line 6773
     HEAP32[$AsyncCtx67 + 36 >> 2] = $vararg_buffer11; //@line 6775
     HEAP32[$AsyncCtx67 + 40 >> 2] = $vararg_buffer45; //@line 6777
     HEAP32[$AsyncCtx67 + 44 >> 2] = $186; //@line 6779
     HEAP32[$AsyncCtx67 + 48 >> 2] = $vararg_buffer39; //@line 6781
     HEAP32[$AsyncCtx67 + 52 >> 2] = $vararg_buffer17; //@line 6783
     HEAP32[$AsyncCtx67 + 56 >> 2] = $vararg_buffer9; //@line 6785
     HEAP32[$AsyncCtx67 + 60 >> 2] = $vararg_buffer13; //@line 6787
     HEAP32[$AsyncCtx67 + 64 >> 2] = $vararg_buffer45; //@line 6789
     HEAP32[$AsyncCtx67 + 68 >> 2] = $338; //@line 6791
     HEAP32[$AsyncCtx67 + 72 >> 2] = $4; //@line 6793
     HEAP32[$AsyncCtx67 + 76 >> 2] = $vararg_buffer15; //@line 6795
     HEAP32[$AsyncCtx67 + 80 >> 2] = $9; //@line 6797
     HEAP32[$AsyncCtx67 + 84 >> 2] = $vararg_buffer37; //@line 6799
     HEAP32[$AsyncCtx67 + 88 >> 2] = $vararg_buffer13; //@line 6801
     HEAP32[$AsyncCtx67 + 92 >> 2] = $vararg_buffer11; //@line 6803
     HEAP32[$AsyncCtx67 + 96 >> 2] = $vararg_buffer43; //@line 6805
     HEAP32[$AsyncCtx67 + 100 >> 2] = $vararg_buffer39; //@line 6807
     HEAP32[$AsyncCtx67 + 104 >> 2] = $vararg_buffer55; //@line 6809
     HEAP32[$AsyncCtx67 + 108 >> 2] = $vararg_buffer49; //@line 6811
     HEAP32[$AsyncCtx67 + 112 >> 2] = $vararg_buffer43; //@line 6813
     HEAP32[$AsyncCtx67 + 116 >> 2] = $vararg_buffer33; //@line 6815
     HEAP32[$AsyncCtx67 + 120 >> 2] = $vararg_buffer27; //@line 6817
     HEAP32[$AsyncCtx67 + 124 >> 2] = $vararg_buffer49; //@line 6819
     HEAP32[$AsyncCtx67 + 128 >> 2] = $$0208$i; //@line 6821
     HEAP32[$AsyncCtx67 + 132 >> 2] = $4; //@line 6823
     HEAP32[$AsyncCtx67 + 136 >> 2] = $vararg_buffer33; //@line 6825
     HEAP32[$AsyncCtx67 + 140 >> 2] = $4; //@line 6827
     HEAP32[$AsyncCtx67 + 144 >> 2] = $vararg_buffer41; //@line 6829
     HEAP32[$AsyncCtx67 + 148 >> 2] = $vararg_buffer47; //@line 6831
     HEAP32[$AsyncCtx67 + 152 >> 2] = $vararg_buffer53; //@line 6833
     HEAP32[$AsyncCtx67 + 156 >> 2] = $vararg_buffer7; //@line 6835
     HEAP32[$AsyncCtx67 + 160 >> 2] = $vararg_buffer35; //@line 6837
     HEAP32[$AsyncCtx67 + 164 >> 2] = $180; //@line 6839
     HEAP32[$AsyncCtx67 + 168 >> 2] = $9; //@line 6841
     HEAP32[$AsyncCtx67 + 172 >> 2] = $vararg_buffer47; //@line 6843
     HEAP32[$AsyncCtx67 + 176 >> 2] = $vararg_buffer17; //@line 6845
     HEAP32[$AsyncCtx67 + 180 >> 2] = $vararg_buffer7; //@line 6847
     HEAP32[$AsyncCtx67 + 184 >> 2] = $vararg_buffer35; //@line 6849
     HEAP32[$AsyncCtx67 + 188 >> 2] = $181; //@line 6851
     HEAP32[$AsyncCtx67 + 192 >> 2] = $vararg_buffer29; //@line 6853
     HEAP32[$AsyncCtx67 + 196 >> 2] = $vararg_buffer23; //@line 6855
     HEAP32[$AsyncCtx67 + 200 >> 2] = $vararg_buffer29; //@line 6857
     HEAP32[$AsyncCtx67 + 204 >> 2] = $182; //@line 6859
     HEAP32[$AsyncCtx67 + 208 >> 2] = $vararg_buffer9; //@line 6861
     HEAP32[$AsyncCtx67 + 212 >> 2] = $vararg_buffer53; //@line 6863
     HEAP32[$AsyncCtx67 + 216 >> 2] = $346; //@line 6865
     HEAP32[$AsyncCtx67 + 220 >> 2] = $vararg_buffer23; //@line 6867
     HEAP32[$AsyncCtx67 + 224 >> 2] = $vararg_buffer19; //@line 6869
     HEAP32[$AsyncCtx67 + 228 >> 2] = $vararg_buffer25; //@line 6871
     HEAP32[$AsyncCtx67 + 232 >> 2] = $vararg_buffer51; //@line 6873
     HEAP32[$AsyncCtx67 + 236 >> 2] = $vararg_buffer25; //@line 6875
     HEAP32[$AsyncCtx67 + 240 >> 2] = $vararg_buffer31; //@line 6877
     HEAP32[$AsyncCtx67 + 244 >> 2] = $vararg_buffer19; //@line 6879
     HEAP32[$AsyncCtx67 + 248 >> 2] = $vararg_buffer51; //@line 6881
     HEAP32[$AsyncCtx67 + 252 >> 2] = $vararg_buffer31; //@line 6883
     HEAP32[$AsyncCtx67 + 256 >> 2] = $vararg_buffer37; //@line 6885
     HEAP32[$AsyncCtx67 + 260 >> 2] = $184; //@line 6887
     HEAP32[$AsyncCtx67 + 264 >> 2] = $0; //@line 6889
     HEAP32[$AsyncCtx67 + 268 >> 2] = $184; //@line 6891
     HEAP32[$AsyncCtx67 + 272 >> 2] = $vararg_buffer41; //@line 6893
     sp = STACKTOP; //@line 6894
     STACKTOP = sp; //@line 6895
     return 0; //@line 6895
    }
   case 55:
    {
     _mbed_tracef(2, 3803, 4433, $vararg_buffer21); //@line 6899
     break L26;
     break;
    }
   case 58:
    {
     HEAP32[$AsyncCtx91 >> 2] = 63; //@line 6904
     HEAP32[$AsyncCtx91 + 4 >> 2] = $0; //@line 6906
     HEAP32[$AsyncCtx91 + 8 >> 2] = $185; //@line 6908
     HEAP32[$AsyncCtx91 + 12 >> 2] = $vararg_buffer21; //@line 6910
     HEAP32[$AsyncCtx91 + 16 >> 2] = $vararg_buffer27; //@line 6912
     HEAP32[$AsyncCtx91 + 20 >> 2] = $76; //@line 6914
     HEAP32[$AsyncCtx91 + 24 >> 2] = $vararg_buffer15; //@line 6916
     HEAP32[$AsyncCtx91 + 28 >> 2] = $vararg_buffer55; //@line 6918
     HEAP32[$AsyncCtx91 + 32 >> 2] = $vararg_buffer21; //@line 6920
     HEAP32[$AsyncCtx91 + 36 >> 2] = $vararg_buffer11; //@line 6922
     HEAP32[$AsyncCtx91 + 40 >> 2] = $vararg_buffer45; //@line 6924
     HEAP32[$AsyncCtx91 + 44 >> 2] = $186; //@line 6926
     HEAP32[$AsyncCtx91 + 48 >> 2] = $vararg_buffer39; //@line 6928
     HEAP32[$AsyncCtx91 + 52 >> 2] = $vararg_buffer17; //@line 6930
     HEAP32[$AsyncCtx91 + 56 >> 2] = $vararg_buffer9; //@line 6932
     HEAP32[$AsyncCtx91 + 60 >> 2] = $vararg_buffer13; //@line 6934
     HEAP32[$AsyncCtx91 + 64 >> 2] = $vararg_buffer45; //@line 6936
     HEAP32[$AsyncCtx91 + 68 >> 2] = $vararg_buffer15; //@line 6938
     HEAP32[$AsyncCtx91 + 72 >> 2] = $4; //@line 6940
     HEAP32[$AsyncCtx91 + 76 >> 2] = $9; //@line 6942
     HEAP32[$AsyncCtx91 + 80 >> 2] = $vararg_buffer37; //@line 6944
     HEAP32[$AsyncCtx91 + 84 >> 2] = $vararg_buffer13; //@line 6946
     HEAP32[$AsyncCtx91 + 88 >> 2] = $vararg_buffer11; //@line 6948
     HEAP32[$AsyncCtx91 + 92 >> 2] = $vararg_buffer43; //@line 6950
     HEAP32[$AsyncCtx91 + 96 >> 2] = $vararg_buffer39; //@line 6952
     HEAP32[$AsyncCtx91 + 100 >> 2] = $vararg_buffer55; //@line 6954
     HEAP32[$AsyncCtx91 + 104 >> 2] = $vararg_buffer49; //@line 6956
     HEAP32[$AsyncCtx91 + 108 >> 2] = $vararg_buffer43; //@line 6958
     HEAP32[$AsyncCtx91 + 112 >> 2] = $vararg_buffer33; //@line 6960
     HEAP32[$AsyncCtx91 + 116 >> 2] = $vararg_buffer27; //@line 6962
     HEAP32[$AsyncCtx91 + 120 >> 2] = $vararg_buffer49; //@line 6964
     HEAP32[$AsyncCtx91 + 124 >> 2] = $$0208$i; //@line 6966
     HEAP32[$AsyncCtx91 + 128 >> 2] = $4; //@line 6968
     HEAP32[$AsyncCtx91 + 132 >> 2] = $vararg_buffer33; //@line 6970
     HEAP32[$AsyncCtx91 + 136 >> 2] = $4; //@line 6972
     HEAP32[$AsyncCtx91 + 140 >> 2] = $vararg_buffer41; //@line 6974
     HEAP32[$AsyncCtx91 + 144 >> 2] = $vararg_buffer47; //@line 6976
     HEAP32[$AsyncCtx91 + 148 >> 2] = $vararg_buffer53; //@line 6978
     HEAP32[$AsyncCtx91 + 152 >> 2] = $vararg_buffer7; //@line 6980
     HEAP32[$AsyncCtx91 + 156 >> 2] = $vararg_buffer35; //@line 6982
     HEAP32[$AsyncCtx91 + 160 >> 2] = $180; //@line 6984
     HEAP32[$AsyncCtx91 + 164 >> 2] = $9; //@line 6986
     HEAP32[$AsyncCtx91 + 168 >> 2] = $vararg_buffer47; //@line 6988
     HEAP32[$AsyncCtx91 + 172 >> 2] = $vararg_buffer17; //@line 6990
     HEAP32[$AsyncCtx91 + 176 >> 2] = $vararg_buffer7; //@line 6992
     HEAP32[$AsyncCtx91 + 180 >> 2] = $vararg_buffer35; //@line 6994
     HEAP32[$AsyncCtx91 + 184 >> 2] = $181; //@line 6996
     HEAP32[$AsyncCtx91 + 188 >> 2] = $vararg_buffer29; //@line 6998
     HEAP32[$AsyncCtx91 + 192 >> 2] = $vararg_buffer23; //@line 7000
     HEAP32[$AsyncCtx91 + 196 >> 2] = $vararg_buffer29; //@line 7002
     HEAP32[$AsyncCtx91 + 200 >> 2] = $182; //@line 7004
     HEAP32[$AsyncCtx91 + 204 >> 2] = $vararg_buffer9; //@line 7006
     HEAP32[$AsyncCtx91 + 208 >> 2] = $vararg_buffer53; //@line 7008
     HEAP32[$AsyncCtx91 + 212 >> 2] = $vararg_buffer23; //@line 7010
     HEAP32[$AsyncCtx91 + 216 >> 2] = $vararg_buffer19; //@line 7012
     HEAP32[$AsyncCtx91 + 220 >> 2] = $vararg_buffer25; //@line 7014
     HEAP32[$AsyncCtx91 + 224 >> 2] = $vararg_buffer51; //@line 7016
     HEAP32[$AsyncCtx91 + 228 >> 2] = $vararg_buffer25; //@line 7018
     HEAP32[$AsyncCtx91 + 232 >> 2] = $vararg_buffer31; //@line 7020
     HEAP32[$AsyncCtx91 + 236 >> 2] = $vararg_buffer19; //@line 7022
     HEAP32[$AsyncCtx91 + 240 >> 2] = $vararg_buffer51; //@line 7024
     HEAP32[$AsyncCtx91 + 244 >> 2] = $vararg_buffer31; //@line 7026
     HEAP32[$AsyncCtx91 + 248 >> 2] = $vararg_buffer37; //@line 7028
     HEAP32[$AsyncCtx91 + 252 >> 2] = $184; //@line 7030
     HEAP32[$AsyncCtx91 + 256 >> 2] = $0; //@line 7032
     HEAP32[$AsyncCtx91 + 260 >> 2] = $184; //@line 7034
     HEAP32[$AsyncCtx91 + 264 >> 2] = $vararg_buffer41; //@line 7036
     sp = STACKTOP; //@line 7037
     STACKTOP = sp; //@line 7038
     return 0; //@line 7038
    }
   case 60:
    {
     _mbed_tracef(2, 3803, 4505, $vararg_buffer23); //@line 7042
     break L26;
     break;
    }
   case 63:
    {
     _mbed_tracef(2, 3803, 4564, $vararg_buffer25); //@line 7047
     break L26;
     break;
    }
   case 65:
    {
     HEAP32[$AsyncCtx71 >> 2] = 64; //@line 7052
     HEAP32[$AsyncCtx71 + 4 >> 2] = $0; //@line 7054
     HEAP32[$AsyncCtx71 + 8 >> 2] = $185; //@line 7056
     HEAP32[$AsyncCtx71 + 12 >> 2] = $vararg_buffer21; //@line 7058
     HEAP32[$AsyncCtx71 + 16 >> 2] = $vararg_buffer27; //@line 7060
     HEAP32[$AsyncCtx71 + 20 >> 2] = $76; //@line 7062
     HEAP32[$AsyncCtx71 + 24 >> 2] = $vararg_buffer15; //@line 7064
     HEAP32[$AsyncCtx71 + 28 >> 2] = $vararg_buffer55; //@line 7066
     HEAP32[$AsyncCtx71 + 32 >> 2] = $vararg_buffer21; //@line 7068
     HEAP32[$AsyncCtx71 + 36 >> 2] = $vararg_buffer11; //@line 7070
     HEAP32[$AsyncCtx71 + 40 >> 2] = $vararg_buffer45; //@line 7072
     HEAP32[$AsyncCtx71 + 44 >> 2] = $186; //@line 7074
     HEAP32[$AsyncCtx71 + 48 >> 2] = $vararg_buffer39; //@line 7076
     HEAP32[$AsyncCtx71 + 52 >> 2] = $vararg_buffer17; //@line 7078
     HEAP32[$AsyncCtx71 + 56 >> 2] = $vararg_buffer9; //@line 7080
     HEAP32[$AsyncCtx71 + 60 >> 2] = $vararg_buffer13; //@line 7082
     HEAP32[$AsyncCtx71 + 64 >> 2] = $vararg_buffer45; //@line 7084
     HEAP32[$AsyncCtx71 + 68 >> 2] = $vararg_buffer15; //@line 7086
     HEAP32[$AsyncCtx71 + 72 >> 2] = $4; //@line 7088
     HEAP32[$AsyncCtx71 + 76 >> 2] = $9; //@line 7090
     HEAP32[$AsyncCtx71 + 80 >> 2] = $vararg_buffer37; //@line 7092
     HEAP32[$AsyncCtx71 + 84 >> 2] = $vararg_buffer13; //@line 7094
     HEAP32[$AsyncCtx71 + 88 >> 2] = $vararg_buffer11; //@line 7096
     HEAP32[$AsyncCtx71 + 92 >> 2] = $vararg_buffer43; //@line 7098
     HEAP32[$AsyncCtx71 + 96 >> 2] = $vararg_buffer39; //@line 7100
     HEAP32[$AsyncCtx71 + 100 >> 2] = $vararg_buffer55; //@line 7102
     HEAP32[$AsyncCtx71 + 104 >> 2] = $vararg_buffer49; //@line 7104
     HEAP32[$AsyncCtx71 + 108 >> 2] = $vararg_buffer43; //@line 7106
     HEAP32[$AsyncCtx71 + 112 >> 2] = $vararg_buffer33; //@line 7108
     HEAP32[$AsyncCtx71 + 116 >> 2] = $vararg_buffer27; //@line 7110
     HEAP32[$AsyncCtx71 + 120 >> 2] = $vararg_buffer49; //@line 7112
     HEAP32[$AsyncCtx71 + 124 >> 2] = $$0208$i; //@line 7114
     HEAP32[$AsyncCtx71 + 128 >> 2] = $4; //@line 7116
     HEAP32[$AsyncCtx71 + 132 >> 2] = $vararg_buffer33; //@line 7118
     HEAP32[$AsyncCtx71 + 136 >> 2] = $4; //@line 7120
     HEAP32[$AsyncCtx71 + 140 >> 2] = $vararg_buffer41; //@line 7122
     HEAP32[$AsyncCtx71 + 144 >> 2] = $vararg_buffer47; //@line 7124
     HEAP32[$AsyncCtx71 + 148 >> 2] = $vararg_buffer53; //@line 7126
     HEAP32[$AsyncCtx71 + 152 >> 2] = $vararg_buffer7; //@line 7128
     HEAP32[$AsyncCtx71 + 156 >> 2] = $vararg_buffer35; //@line 7130
     HEAP32[$AsyncCtx71 + 160 >> 2] = $180; //@line 7132
     HEAP32[$AsyncCtx71 + 164 >> 2] = $9; //@line 7134
     HEAP32[$AsyncCtx71 + 168 >> 2] = $vararg_buffer47; //@line 7136
     HEAP32[$AsyncCtx71 + 172 >> 2] = $vararg_buffer17; //@line 7138
     HEAP32[$AsyncCtx71 + 176 >> 2] = $vararg_buffer7; //@line 7140
     HEAP32[$AsyncCtx71 + 180 >> 2] = $vararg_buffer35; //@line 7142
     HEAP32[$AsyncCtx71 + 184 >> 2] = $181; //@line 7144
     HEAP32[$AsyncCtx71 + 188 >> 2] = $vararg_buffer29; //@line 7146
     HEAP32[$AsyncCtx71 + 192 >> 2] = $491; //@line 7148
     HEAP32[$AsyncCtx71 + 196 >> 2] = $vararg_buffer23; //@line 7150
     HEAP32[$AsyncCtx71 + 200 >> 2] = $vararg_buffer29; //@line 7152
     HEAP32[$AsyncCtx71 + 204 >> 2] = $499; //@line 7154
     HEAP32[$AsyncCtx71 + 208 >> 2] = $182; //@line 7156
     HEAP32[$AsyncCtx71 + 212 >> 2] = $vararg_buffer9; //@line 7158
     HEAP32[$AsyncCtx71 + 216 >> 2] = $vararg_buffer53; //@line 7160
     HEAP32[$AsyncCtx71 + 220 >> 2] = $vararg_buffer23; //@line 7162
     HEAP32[$AsyncCtx71 + 224 >> 2] = $vararg_buffer19; //@line 7164
     HEAP32[$AsyncCtx71 + 228 >> 2] = $vararg_buffer25; //@line 7166
     HEAP32[$AsyncCtx71 + 232 >> 2] = $vararg_buffer51; //@line 7168
     HEAP32[$AsyncCtx71 + 236 >> 2] = $vararg_buffer25; //@line 7170
     HEAP32[$AsyncCtx71 + 240 >> 2] = $vararg_buffer31; //@line 7172
     HEAP32[$AsyncCtx71 + 244 >> 2] = $vararg_buffer19; //@line 7174
     HEAP32[$AsyncCtx71 + 248 >> 2] = $vararg_buffer51; //@line 7176
     HEAP32[$AsyncCtx71 + 252 >> 2] = $vararg_buffer31; //@line 7178
     HEAP32[$AsyncCtx71 + 256 >> 2] = $vararg_buffer37; //@line 7180
     HEAP32[$AsyncCtx71 + 260 >> 2] = $184; //@line 7182
     HEAP32[$AsyncCtx71 + 264 >> 2] = $0; //@line 7184
     HEAP32[$AsyncCtx71 + 268 >> 2] = $184; //@line 7186
     HEAP32[$AsyncCtx71 + 272 >> 2] = $vararg_buffer41; //@line 7188
     sp = STACKTOP; //@line 7189
     STACKTOP = sp; //@line 7190
     return 0; //@line 7190
    }
   case 67:
    {
     _mbed_tracef(2, 3803, 4627, $vararg_buffer27); //@line 7194
     break L26;
     break;
    }
   case 70:
    {
     _mbed_tracef(2, 3803, 4698, $vararg_buffer29); //@line 7199
     break L26;
     break;
    }
   case 72:
    {
     HEAP32[$AsyncCtx87 >> 2] = 65; //@line 7204
     HEAP32[$AsyncCtx87 + 4 >> 2] = $0; //@line 7206
     HEAP32[$AsyncCtx87 + 8 >> 2] = $185; //@line 7208
     HEAP32[$AsyncCtx87 + 12 >> 2] = $vararg_buffer21; //@line 7210
     HEAP32[$AsyncCtx87 + 16 >> 2] = $vararg_buffer27; //@line 7212
     HEAP32[$AsyncCtx87 + 20 >> 2] = $76; //@line 7214
     HEAP32[$AsyncCtx87 + 24 >> 2] = $vararg_buffer15; //@line 7216
     HEAP32[$AsyncCtx87 + 28 >> 2] = $vararg_buffer55; //@line 7218
     HEAP32[$AsyncCtx87 + 32 >> 2] = $vararg_buffer21; //@line 7220
     HEAP32[$AsyncCtx87 + 36 >> 2] = $vararg_buffer11; //@line 7222
     HEAP32[$AsyncCtx87 + 40 >> 2] = $vararg_buffer45; //@line 7224
     HEAP32[$AsyncCtx87 + 44 >> 2] = $186; //@line 7226
     HEAP32[$AsyncCtx87 + 48 >> 2] = $vararg_buffer39; //@line 7228
     HEAP32[$AsyncCtx87 + 52 >> 2] = $vararg_buffer17; //@line 7230
     HEAP32[$AsyncCtx87 + 56 >> 2] = $vararg_buffer9; //@line 7232
     HEAP32[$AsyncCtx87 + 60 >> 2] = $vararg_buffer13; //@line 7234
     HEAP32[$AsyncCtx87 + 64 >> 2] = $vararg_buffer45; //@line 7236
     HEAP32[$AsyncCtx87 + 68 >> 2] = $vararg_buffer15; //@line 7238
     HEAP32[$AsyncCtx87 + 72 >> 2] = $4; //@line 7240
     HEAP32[$AsyncCtx87 + 76 >> 2] = $9; //@line 7242
     HEAP32[$AsyncCtx87 + 80 >> 2] = $vararg_buffer37; //@line 7244
     HEAP32[$AsyncCtx87 + 84 >> 2] = $vararg_buffer13; //@line 7246
     HEAP32[$AsyncCtx87 + 88 >> 2] = $vararg_buffer11; //@line 7248
     HEAP32[$AsyncCtx87 + 92 >> 2] = $vararg_buffer43; //@line 7250
     HEAP32[$AsyncCtx87 + 96 >> 2] = $vararg_buffer39; //@line 7252
     HEAP32[$AsyncCtx87 + 100 >> 2] = $vararg_buffer55; //@line 7254
     HEAP32[$AsyncCtx87 + 104 >> 2] = $vararg_buffer49; //@line 7256
     HEAP32[$AsyncCtx87 + 108 >> 2] = $vararg_buffer43; //@line 7258
     HEAP32[$AsyncCtx87 + 112 >> 2] = $vararg_buffer33; //@line 7260
     HEAP32[$AsyncCtx87 + 116 >> 2] = $vararg_buffer27; //@line 7262
     HEAP32[$AsyncCtx87 + 120 >> 2] = $vararg_buffer49; //@line 7264
     HEAP32[$AsyncCtx87 + 124 >> 2] = $$0208$i; //@line 7266
     HEAP32[$AsyncCtx87 + 128 >> 2] = $4; //@line 7268
     HEAP32[$AsyncCtx87 + 132 >> 2] = $vararg_buffer33; //@line 7270
     HEAP32[$AsyncCtx87 + 136 >> 2] = $4; //@line 7272
     HEAP32[$AsyncCtx87 + 140 >> 2] = $vararg_buffer41; //@line 7274
     HEAP32[$AsyncCtx87 + 144 >> 2] = $vararg_buffer47; //@line 7276
     HEAP32[$AsyncCtx87 + 148 >> 2] = $vararg_buffer53; //@line 7278
     HEAP32[$AsyncCtx87 + 152 >> 2] = $vararg_buffer7; //@line 7280
     HEAP32[$AsyncCtx87 + 156 >> 2] = $vararg_buffer35; //@line 7282
     HEAP32[$AsyncCtx87 + 160 >> 2] = $180; //@line 7284
     HEAP32[$AsyncCtx87 + 164 >> 2] = $9; //@line 7286
     HEAP32[$AsyncCtx87 + 168 >> 2] = $vararg_buffer47; //@line 7288
     HEAP32[$AsyncCtx87 + 172 >> 2] = $vararg_buffer17; //@line 7290
     HEAP32[$AsyncCtx87 + 176 >> 2] = $vararg_buffer7; //@line 7292
     HEAP32[$AsyncCtx87 + 180 >> 2] = $vararg_buffer35; //@line 7294
     HEAP32[$AsyncCtx87 + 184 >> 2] = $181; //@line 7296
     HEAP32[$AsyncCtx87 + 188 >> 2] = $vararg_buffer29; //@line 7298
     HEAP32[$AsyncCtx87 + 192 >> 2] = $vararg_buffer23; //@line 7300
     HEAP32[$AsyncCtx87 + 196 >> 2] = $vararg_buffer29; //@line 7302
     HEAP32[$AsyncCtx87 + 200 >> 2] = $182; //@line 7304
     HEAP32[$AsyncCtx87 + 204 >> 2] = $vararg_buffer9; //@line 7306
     HEAP32[$AsyncCtx87 + 208 >> 2] = $vararg_buffer53; //@line 7308
     HEAP32[$AsyncCtx87 + 212 >> 2] = $vararg_buffer23; //@line 7310
     HEAP32[$AsyncCtx87 + 216 >> 2] = $vararg_buffer19; //@line 7312
     HEAP32[$AsyncCtx87 + 220 >> 2] = $vararg_buffer25; //@line 7314
     HEAP32[$AsyncCtx87 + 224 >> 2] = $vararg_buffer51; //@line 7316
     HEAP32[$AsyncCtx87 + 228 >> 2] = $vararg_buffer25; //@line 7318
     HEAP32[$AsyncCtx87 + 232 >> 2] = $vararg_buffer31; //@line 7320
     HEAP32[$AsyncCtx87 + 236 >> 2] = $vararg_buffer19; //@line 7322
     HEAP32[$AsyncCtx87 + 240 >> 2] = $vararg_buffer51; //@line 7324
     HEAP32[$AsyncCtx87 + 244 >> 2] = $vararg_buffer31; //@line 7326
     HEAP32[$AsyncCtx87 + 248 >> 2] = $vararg_buffer37; //@line 7328
     HEAP32[$AsyncCtx87 + 252 >> 2] = $184; //@line 7330
     HEAP32[$AsyncCtx87 + 256 >> 2] = $0; //@line 7332
     HEAP32[$AsyncCtx87 + 260 >> 2] = $184; //@line 7334
     HEAP32[$AsyncCtx87 + 264 >> 2] = $vararg_buffer41; //@line 7336
     sp = STACKTOP; //@line 7337
     STACKTOP = sp; //@line 7338
     return 0; //@line 7338
    }
   case 74:
    {
     _mbed_tracef(2, 3803, 4763, $vararg_buffer31); //@line 7342
     break L26;
     break;
    }
   case 77:
    {
     _mbed_tracef(2, 3803, 4831, $vararg_buffer33); //@line 7347
     break L26;
     break;
    }
   case 82:
    {
     HEAP32[$AsyncCtx83 >> 2] = 66; //@line 7352
     HEAP32[$AsyncCtx83 + 4 >> 2] = $0; //@line 7354
     HEAP32[$AsyncCtx83 + 8 >> 2] = $185; //@line 7356
     HEAP32[$AsyncCtx83 + 12 >> 2] = $vararg_buffer21; //@line 7358
     HEAP32[$AsyncCtx83 + 16 >> 2] = $vararg_buffer27; //@line 7360
     HEAP32[$AsyncCtx83 + 20 >> 2] = $76; //@line 7362
     HEAP32[$AsyncCtx83 + 24 >> 2] = $vararg_buffer15; //@line 7364
     HEAP32[$AsyncCtx83 + 28 >> 2] = $vararg_buffer55; //@line 7366
     HEAP32[$AsyncCtx83 + 32 >> 2] = $vararg_buffer21; //@line 7368
     HEAP32[$AsyncCtx83 + 36 >> 2] = $vararg_buffer11; //@line 7370
     HEAP32[$AsyncCtx83 + 40 >> 2] = $vararg_buffer45; //@line 7372
     HEAP32[$AsyncCtx83 + 44 >> 2] = $186; //@line 7374
     HEAP32[$AsyncCtx83 + 48 >> 2] = $vararg_buffer39; //@line 7376
     HEAP32[$AsyncCtx83 + 52 >> 2] = $vararg_buffer17; //@line 7378
     HEAP32[$AsyncCtx83 + 56 >> 2] = $vararg_buffer9; //@line 7380
     HEAP32[$AsyncCtx83 + 60 >> 2] = $vararg_buffer13; //@line 7382
     HEAP32[$AsyncCtx83 + 64 >> 2] = $vararg_buffer45; //@line 7384
     HEAP32[$AsyncCtx83 + 68 >> 2] = $vararg_buffer15; //@line 7386
     HEAP32[$AsyncCtx83 + 72 >> 2] = $4; //@line 7388
     HEAP32[$AsyncCtx83 + 76 >> 2] = $9; //@line 7390
     HEAP32[$AsyncCtx83 + 80 >> 2] = $vararg_buffer37; //@line 7392
     HEAP32[$AsyncCtx83 + 84 >> 2] = $vararg_buffer13; //@line 7394
     HEAP32[$AsyncCtx83 + 88 >> 2] = $vararg_buffer11; //@line 7396
     HEAP32[$AsyncCtx83 + 92 >> 2] = $vararg_buffer43; //@line 7398
     HEAP32[$AsyncCtx83 + 96 >> 2] = $vararg_buffer39; //@line 7400
     HEAP32[$AsyncCtx83 + 100 >> 2] = $vararg_buffer55; //@line 7402
     HEAP32[$AsyncCtx83 + 104 >> 2] = $vararg_buffer49; //@line 7404
     HEAP32[$AsyncCtx83 + 108 >> 2] = $vararg_buffer43; //@line 7406
     HEAP32[$AsyncCtx83 + 112 >> 2] = $vararg_buffer33; //@line 7408
     HEAP32[$AsyncCtx83 + 116 >> 2] = $vararg_buffer27; //@line 7410
     HEAP32[$AsyncCtx83 + 120 >> 2] = $vararg_buffer49; //@line 7412
     HEAP32[$AsyncCtx83 + 124 >> 2] = $$0208$i; //@line 7414
     HEAP32[$AsyncCtx83 + 128 >> 2] = $4; //@line 7416
     HEAP32[$AsyncCtx83 + 132 >> 2] = $vararg_buffer33; //@line 7418
     HEAP32[$AsyncCtx83 + 136 >> 2] = $4; //@line 7420
     HEAP32[$AsyncCtx83 + 140 >> 2] = $vararg_buffer41; //@line 7422
     HEAP32[$AsyncCtx83 + 144 >> 2] = $vararg_buffer47; //@line 7424
     HEAP32[$AsyncCtx83 + 148 >> 2] = $vararg_buffer53; //@line 7426
     HEAP32[$AsyncCtx83 + 152 >> 2] = $vararg_buffer7; //@line 7428
     HEAP32[$AsyncCtx83 + 156 >> 2] = $vararg_buffer35; //@line 7430
     HEAP32[$AsyncCtx83 + 160 >> 2] = $180; //@line 7432
     HEAP32[$AsyncCtx83 + 164 >> 2] = $9; //@line 7434
     HEAP32[$AsyncCtx83 + 168 >> 2] = $vararg_buffer47; //@line 7436
     HEAP32[$AsyncCtx83 + 172 >> 2] = $vararg_buffer17; //@line 7438
     HEAP32[$AsyncCtx83 + 176 >> 2] = $vararg_buffer7; //@line 7440
     HEAP32[$AsyncCtx83 + 180 >> 2] = $vararg_buffer35; //@line 7442
     HEAP32[$AsyncCtx83 + 184 >> 2] = $181; //@line 7444
     HEAP32[$AsyncCtx83 + 188 >> 2] = $vararg_buffer29; //@line 7446
     HEAP32[$AsyncCtx83 + 192 >> 2] = $vararg_buffer23; //@line 7448
     HEAP32[$AsyncCtx83 + 196 >> 2] = $vararg_buffer29; //@line 7450
     HEAP32[$AsyncCtx83 + 200 >> 2] = $182; //@line 7452
     HEAP32[$AsyncCtx83 + 204 >> 2] = $vararg_buffer9; //@line 7454
     HEAP32[$AsyncCtx83 + 208 >> 2] = $vararg_buffer53; //@line 7456
     HEAP32[$AsyncCtx83 + 212 >> 2] = $vararg_buffer23; //@line 7458
     HEAP32[$AsyncCtx83 + 216 >> 2] = $vararg_buffer19; //@line 7460
     HEAP32[$AsyncCtx83 + 220 >> 2] = $vararg_buffer25; //@line 7462
     HEAP32[$AsyncCtx83 + 224 >> 2] = $vararg_buffer51; //@line 7464
     HEAP32[$AsyncCtx83 + 228 >> 2] = $vararg_buffer25; //@line 7466
     HEAP32[$AsyncCtx83 + 232 >> 2] = $vararg_buffer31; //@line 7468
     HEAP32[$AsyncCtx83 + 236 >> 2] = $vararg_buffer19; //@line 7470
     HEAP32[$AsyncCtx83 + 240 >> 2] = $vararg_buffer51; //@line 7472
     HEAP32[$AsyncCtx83 + 244 >> 2] = $vararg_buffer31; //@line 7474
     HEAP32[$AsyncCtx83 + 248 >> 2] = $vararg_buffer37; //@line 7476
     HEAP32[$AsyncCtx83 + 252 >> 2] = $184; //@line 7478
     HEAP32[$AsyncCtx83 + 256 >> 2] = $0; //@line 7480
     HEAP32[$AsyncCtx83 + 260 >> 2] = $184; //@line 7482
     HEAP32[$AsyncCtx83 + 264 >> 2] = $vararg_buffer41; //@line 7484
     sp = STACKTOP; //@line 7485
     STACKTOP = sp; //@line 7486
     return 0; //@line 7486
    }
   case 84:
    {
     _mbed_tracef(2, 3803, 4894, $vararg_buffer35); //@line 7490
     break L26;
     break;
    }
   case 86:
    {
     HEAP32[$AsyncCtx79 >> 2] = 67; //@line 7495
     HEAP32[$AsyncCtx79 + 4 >> 2] = $0; //@line 7497
     HEAP32[$AsyncCtx79 + 8 >> 2] = $185; //@line 7499
     HEAP32[$AsyncCtx79 + 12 >> 2] = $vararg_buffer21; //@line 7501
     HEAP32[$AsyncCtx79 + 16 >> 2] = $vararg_buffer27; //@line 7503
     HEAP32[$AsyncCtx79 + 20 >> 2] = $76; //@line 7505
     HEAP32[$AsyncCtx79 + 24 >> 2] = $vararg_buffer15; //@line 7507
     HEAP32[$AsyncCtx79 + 28 >> 2] = $vararg_buffer55; //@line 7509
     HEAP32[$AsyncCtx79 + 32 >> 2] = $vararg_buffer21; //@line 7511
     HEAP32[$AsyncCtx79 + 36 >> 2] = $vararg_buffer11; //@line 7513
     HEAP32[$AsyncCtx79 + 40 >> 2] = $vararg_buffer45; //@line 7515
     HEAP32[$AsyncCtx79 + 44 >> 2] = $186; //@line 7517
     HEAP32[$AsyncCtx79 + 48 >> 2] = $vararg_buffer39; //@line 7519
     HEAP32[$AsyncCtx79 + 52 >> 2] = $vararg_buffer17; //@line 7521
     HEAP32[$AsyncCtx79 + 56 >> 2] = $vararg_buffer9; //@line 7523
     HEAP32[$AsyncCtx79 + 60 >> 2] = $vararg_buffer13; //@line 7525
     HEAP32[$AsyncCtx79 + 64 >> 2] = $vararg_buffer45; //@line 7527
     HEAP32[$AsyncCtx79 + 68 >> 2] = $vararg_buffer15; //@line 7529
     HEAP32[$AsyncCtx79 + 72 >> 2] = $4; //@line 7531
     HEAP32[$AsyncCtx79 + 76 >> 2] = $9; //@line 7533
     HEAP32[$AsyncCtx79 + 80 >> 2] = $vararg_buffer37; //@line 7535
     HEAP32[$AsyncCtx79 + 84 >> 2] = $vararg_buffer13; //@line 7537
     HEAP32[$AsyncCtx79 + 88 >> 2] = $vararg_buffer11; //@line 7539
     HEAP32[$AsyncCtx79 + 92 >> 2] = $vararg_buffer43; //@line 7541
     HEAP32[$AsyncCtx79 + 96 >> 2] = $vararg_buffer39; //@line 7543
     HEAP32[$AsyncCtx79 + 100 >> 2] = $vararg_buffer55; //@line 7545
     HEAP32[$AsyncCtx79 + 104 >> 2] = $vararg_buffer49; //@line 7547
     HEAP32[$AsyncCtx79 + 108 >> 2] = $vararg_buffer43; //@line 7549
     HEAP32[$AsyncCtx79 + 112 >> 2] = $vararg_buffer33; //@line 7551
     HEAP32[$AsyncCtx79 + 116 >> 2] = $vararg_buffer27; //@line 7553
     HEAP32[$AsyncCtx79 + 120 >> 2] = $vararg_buffer49; //@line 7555
     HEAP32[$AsyncCtx79 + 124 >> 2] = $$0208$i; //@line 7557
     HEAP32[$AsyncCtx79 + 128 >> 2] = $4; //@line 7559
     HEAP32[$AsyncCtx79 + 132 >> 2] = $vararg_buffer33; //@line 7561
     HEAP32[$AsyncCtx79 + 136 >> 2] = $4; //@line 7563
     HEAP32[$AsyncCtx79 + 140 >> 2] = $vararg_buffer41; //@line 7565
     HEAP32[$AsyncCtx79 + 144 >> 2] = $vararg_buffer47; //@line 7567
     HEAP32[$AsyncCtx79 + 148 >> 2] = $vararg_buffer53; //@line 7569
     HEAP32[$AsyncCtx79 + 152 >> 2] = $vararg_buffer7; //@line 7571
     HEAP32[$AsyncCtx79 + 156 >> 2] = $vararg_buffer35; //@line 7573
     HEAP32[$AsyncCtx79 + 160 >> 2] = $180; //@line 7575
     HEAP32[$AsyncCtx79 + 164 >> 2] = $9; //@line 7577
     HEAP32[$AsyncCtx79 + 168 >> 2] = $vararg_buffer47; //@line 7579
     HEAP32[$AsyncCtx79 + 172 >> 2] = $vararg_buffer17; //@line 7581
     HEAP32[$AsyncCtx79 + 176 >> 2] = $vararg_buffer7; //@line 7583
     HEAP32[$AsyncCtx79 + 180 >> 2] = $vararg_buffer35; //@line 7585
     HEAP32[$AsyncCtx79 + 184 >> 2] = $181; //@line 7587
     HEAP32[$AsyncCtx79 + 188 >> 2] = $vararg_buffer29; //@line 7589
     HEAP32[$AsyncCtx79 + 192 >> 2] = $vararg_buffer23; //@line 7591
     HEAP32[$AsyncCtx79 + 196 >> 2] = $vararg_buffer29; //@line 7593
     HEAP32[$AsyncCtx79 + 200 >> 2] = $182; //@line 7595
     HEAP32[$AsyncCtx79 + 204 >> 2] = $vararg_buffer9; //@line 7597
     HEAP32[$AsyncCtx79 + 208 >> 2] = $vararg_buffer53; //@line 7599
     HEAP32[$AsyncCtx79 + 212 >> 2] = $vararg_buffer23; //@line 7601
     HEAP32[$AsyncCtx79 + 216 >> 2] = $vararg_buffer19; //@line 7603
     HEAP32[$AsyncCtx79 + 220 >> 2] = $vararg_buffer25; //@line 7605
     HEAP32[$AsyncCtx79 + 224 >> 2] = $vararg_buffer51; //@line 7607
     HEAP32[$AsyncCtx79 + 228 >> 2] = $vararg_buffer25; //@line 7609
     HEAP32[$AsyncCtx79 + 232 >> 2] = $vararg_buffer31; //@line 7611
     HEAP32[$AsyncCtx79 + 236 >> 2] = $vararg_buffer19; //@line 7613
     HEAP32[$AsyncCtx79 + 240 >> 2] = $vararg_buffer51; //@line 7615
     HEAP32[$AsyncCtx79 + 244 >> 2] = $vararg_buffer31; //@line 7617
     HEAP32[$AsyncCtx79 + 248 >> 2] = $vararg_buffer37; //@line 7619
     HEAP32[$AsyncCtx79 + 252 >> 2] = $184; //@line 7621
     HEAP32[$AsyncCtx79 + 256 >> 2] = $0; //@line 7623
     HEAP32[$AsyncCtx79 + 260 >> 2] = $184; //@line 7625
     HEAP32[$AsyncCtx79 + 264 >> 2] = $vararg_buffer41; //@line 7627
     sp = STACKTOP; //@line 7628
     STACKTOP = sp; //@line 7629
     return 0; //@line 7629
    }
   case 88:
    {
     _mbed_tracef(2, 3803, 4963, $vararg_buffer37); //@line 7633
     break L26;
     break;
    }
   case 91:
    {
     _mbed_tracef(2, 3803, 5026, $vararg_buffer39); //@line 7638
     break L26;
     break;
    }
   case 96:
    {
     HEAP32[$AsyncCtx75 >> 2] = 68; //@line 7643
     HEAP32[$AsyncCtx75 + 4 >> 2] = $0; //@line 7645
     HEAP32[$AsyncCtx75 + 8 >> 2] = $185; //@line 7647
     HEAP32[$AsyncCtx75 + 12 >> 2] = $vararg_buffer21; //@line 7649
     HEAP32[$AsyncCtx75 + 16 >> 2] = $vararg_buffer27; //@line 7651
     HEAP32[$AsyncCtx75 + 20 >> 2] = $76; //@line 7653
     HEAP32[$AsyncCtx75 + 24 >> 2] = $vararg_buffer15; //@line 7655
     HEAP32[$AsyncCtx75 + 28 >> 2] = $vararg_buffer55; //@line 7657
     HEAP32[$AsyncCtx75 + 32 >> 2] = $vararg_buffer21; //@line 7659
     HEAP32[$AsyncCtx75 + 36 >> 2] = $vararg_buffer11; //@line 7661
     HEAP32[$AsyncCtx75 + 40 >> 2] = $vararg_buffer45; //@line 7663
     HEAP32[$AsyncCtx75 + 44 >> 2] = $186; //@line 7665
     HEAP32[$AsyncCtx75 + 48 >> 2] = $vararg_buffer39; //@line 7667
     HEAP32[$AsyncCtx75 + 52 >> 2] = $vararg_buffer17; //@line 7669
     HEAP32[$AsyncCtx75 + 56 >> 2] = $vararg_buffer9; //@line 7671
     HEAP32[$AsyncCtx75 + 60 >> 2] = $vararg_buffer13; //@line 7673
     HEAP32[$AsyncCtx75 + 64 >> 2] = $vararg_buffer45; //@line 7675
     HEAP32[$AsyncCtx75 + 68 >> 2] = $vararg_buffer15; //@line 7677
     HEAP32[$AsyncCtx75 + 72 >> 2] = $4; //@line 7679
     HEAP32[$AsyncCtx75 + 76 >> 2] = $9; //@line 7681
     HEAP32[$AsyncCtx75 + 80 >> 2] = $vararg_buffer37; //@line 7683
     HEAP32[$AsyncCtx75 + 84 >> 2] = $vararg_buffer13; //@line 7685
     HEAP32[$AsyncCtx75 + 88 >> 2] = $vararg_buffer11; //@line 7687
     HEAP32[$AsyncCtx75 + 92 >> 2] = $vararg_buffer43; //@line 7689
     HEAP32[$AsyncCtx75 + 96 >> 2] = $vararg_buffer39; //@line 7691
     HEAP32[$AsyncCtx75 + 100 >> 2] = $vararg_buffer55; //@line 7693
     HEAP32[$AsyncCtx75 + 104 >> 2] = $vararg_buffer49; //@line 7695
     HEAP32[$AsyncCtx75 + 108 >> 2] = $vararg_buffer43; //@line 7697
     HEAP32[$AsyncCtx75 + 112 >> 2] = $vararg_buffer33; //@line 7699
     HEAP32[$AsyncCtx75 + 116 >> 2] = $vararg_buffer27; //@line 7701
     HEAP32[$AsyncCtx75 + 120 >> 2] = $vararg_buffer49; //@line 7703
     HEAP32[$AsyncCtx75 + 124 >> 2] = $$0208$i; //@line 7705
     HEAP32[$AsyncCtx75 + 128 >> 2] = $4; //@line 7707
     HEAP32[$AsyncCtx75 + 132 >> 2] = $vararg_buffer33; //@line 7709
     HEAP32[$AsyncCtx75 + 136 >> 2] = $4; //@line 7711
     HEAP32[$AsyncCtx75 + 140 >> 2] = $vararg_buffer41; //@line 7713
     HEAP32[$AsyncCtx75 + 144 >> 2] = $vararg_buffer47; //@line 7715
     HEAP32[$AsyncCtx75 + 148 >> 2] = $vararg_buffer53; //@line 7717
     HEAP32[$AsyncCtx75 + 152 >> 2] = $vararg_buffer7; //@line 7719
     HEAP32[$AsyncCtx75 + 156 >> 2] = $vararg_buffer35; //@line 7721
     HEAP32[$AsyncCtx75 + 160 >> 2] = $180; //@line 7723
     HEAP32[$AsyncCtx75 + 164 >> 2] = $9; //@line 7725
     HEAP32[$AsyncCtx75 + 168 >> 2] = $vararg_buffer47; //@line 7727
     HEAP32[$AsyncCtx75 + 172 >> 2] = $vararg_buffer17; //@line 7729
     HEAP32[$AsyncCtx75 + 176 >> 2] = $vararg_buffer7; //@line 7731
     HEAP32[$AsyncCtx75 + 180 >> 2] = $vararg_buffer35; //@line 7733
     HEAP32[$AsyncCtx75 + 184 >> 2] = $181; //@line 7735
     HEAP32[$AsyncCtx75 + 188 >> 2] = $vararg_buffer29; //@line 7737
     HEAP32[$AsyncCtx75 + 192 >> 2] = $vararg_buffer23; //@line 7739
     HEAP32[$AsyncCtx75 + 196 >> 2] = $vararg_buffer29; //@line 7741
     HEAP32[$AsyncCtx75 + 200 >> 2] = $182; //@line 7743
     HEAP32[$AsyncCtx75 + 204 >> 2] = $vararg_buffer9; //@line 7745
     HEAP32[$AsyncCtx75 + 208 >> 2] = $vararg_buffer53; //@line 7747
     HEAP32[$AsyncCtx75 + 212 >> 2] = $vararg_buffer23; //@line 7749
     HEAP32[$AsyncCtx75 + 216 >> 2] = $vararg_buffer19; //@line 7751
     HEAP32[$AsyncCtx75 + 220 >> 2] = $vararg_buffer25; //@line 7753
     HEAP32[$AsyncCtx75 + 224 >> 2] = $vararg_buffer51; //@line 7755
     HEAP32[$AsyncCtx75 + 228 >> 2] = $vararg_buffer25; //@line 7757
     HEAP32[$AsyncCtx75 + 232 >> 2] = $vararg_buffer31; //@line 7759
     HEAP32[$AsyncCtx75 + 236 >> 2] = $vararg_buffer19; //@line 7761
     HEAP32[$AsyncCtx75 + 240 >> 2] = $vararg_buffer51; //@line 7763
     HEAP32[$AsyncCtx75 + 244 >> 2] = $vararg_buffer31; //@line 7765
     HEAP32[$AsyncCtx75 + 248 >> 2] = $vararg_buffer37; //@line 7767
     HEAP32[$AsyncCtx75 + 252 >> 2] = $184; //@line 7769
     HEAP32[$AsyncCtx75 + 256 >> 2] = $0; //@line 7771
     HEAP32[$AsyncCtx75 + 260 >> 2] = $184; //@line 7773
     HEAP32[$AsyncCtx75 + 264 >> 2] = $vararg_buffer41; //@line 7775
     sp = STACKTOP; //@line 7776
     STACKTOP = sp; //@line 7777
     return 0; //@line 7777
    }
   case 98:
    {
     _mbed_tracef(2, 3803, 5088, $vararg_buffer41); //@line 7781
     break L26;
     break;
    }
   case 101:
    {
     _mbed_tracef(2, 3803, 5152, $vararg_buffer43); //@line 7786
     break L26;
     break;
    }
   case 107:
    {
     _mbed_tracef(2, 3803, 5213, $vararg_buffer45); //@line 7791
     break L26;
     break;
    }
   case 113:
    {
     _mbed_tracef(2, 3803, 5274, $vararg_buffer47); //@line 7796
     break L26;
     break;
    }
   case 119:
    {
     _mbed_tracef(2, 3803, 5335, $vararg_buffer49); //@line 7801
     break L26;
     break;
    }
   case 125:
    {
     _mbed_tracef(2, 3803, 5395, $vararg_buffer51); //@line 7806
     break L26;
     break;
    }
   case 129:
    {
     _mbed_tracef(2, 3803, 5455, $vararg_buffer53); //@line 7811
     break L26;
     break;
    }
   case 132:
    {
     if (($189 - $181 | 0) >= ($180 | 0)) {
      $$0 = $9; //@line 7820
      STACKTOP = sp; //@line 7821
      return $$0 | 0; //@line 7821
     }
     if ((HEAP8[$189 >> 0] | 0) == -1) {
      $990 = $189 + 1 | 0; //@line 7826
      HEAP32[$4 >> 2] = $990; //@line 7827
      $991 = $990; //@line 7828
      $993 = $181 - $991 + $180 | 0; //@line 7830
      HEAP16[$9 + 24 >> 1] = $993; //@line 7833
      if ($993 & 65535 | 0) {
       HEAP32[$9 + 36 >> 2] = $991; //@line 7838
       $$0 = $9; //@line 7839
       STACKTOP = sp; //@line 7840
       return $$0 | 0; //@line 7840
      }
     } else {
      _mbed_tracef(2, 3803, 5502, $vararg_buffer55); //@line 7843
     }
     HEAP32[$9 + 4 >> 2] = 1; //@line 7846
     $$0 = $9; //@line 7847
     STACKTOP = sp; //@line 7848
     return $$0 | 0; //@line 7848
    }
   }
   _mbed_tracef(2, 3803, 4179, $vararg_buffer13); //@line 7852
  }
 } while (0);
 HEAP32[$9 + 4 >> 2] = 1; //@line 7856
 $$0 = $9; //@line 7857
 STACKTOP = sp; //@line 7858
 return $$0 | 0; //@line 7858
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 20332
 STACKTOP = STACKTOP + 16 | 0; //@line 20333
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20333
 $1 = sp; //@line 20334
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 20341
   $7 = $6 >>> 3; //@line 20342
   $8 = HEAP32[2532] | 0; //@line 20343
   $9 = $8 >>> $7; //@line 20344
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 20350
    $16 = 10168 + ($14 << 1 << 2) | 0; //@line 20352
    $17 = $16 + 8 | 0; //@line 20353
    $18 = HEAP32[$17 >> 2] | 0; //@line 20354
    $19 = $18 + 8 | 0; //@line 20355
    $20 = HEAP32[$19 >> 2] | 0; //@line 20356
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[2532] = $8 & ~(1 << $14); //@line 20363
     } else {
      if ((HEAP32[2536] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 20368
      }
      $27 = $20 + 12 | 0; //@line 20371
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 20375
       HEAP32[$17 >> 2] = $20; //@line 20376
       break;
      } else {
       _abort(); //@line 20379
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 20384
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 20387
    $34 = $18 + $30 + 4 | 0; //@line 20389
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 20392
    $$0 = $19; //@line 20393
    STACKTOP = sp; //@line 20394
    return $$0 | 0; //@line 20394
   }
   $37 = HEAP32[2534] | 0; //@line 20396
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 20402
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 20405
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 20408
     $49 = $47 >>> 12 & 16; //@line 20410
     $50 = $47 >>> $49; //@line 20411
     $52 = $50 >>> 5 & 8; //@line 20413
     $54 = $50 >>> $52; //@line 20415
     $56 = $54 >>> 2 & 4; //@line 20417
     $58 = $54 >>> $56; //@line 20419
     $60 = $58 >>> 1 & 2; //@line 20421
     $62 = $58 >>> $60; //@line 20423
     $64 = $62 >>> 1 & 1; //@line 20425
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 20428
     $69 = 10168 + ($67 << 1 << 2) | 0; //@line 20430
     $70 = $69 + 8 | 0; //@line 20431
     $71 = HEAP32[$70 >> 2] | 0; //@line 20432
     $72 = $71 + 8 | 0; //@line 20433
     $73 = HEAP32[$72 >> 2] | 0; //@line 20434
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 20440
       HEAP32[2532] = $77; //@line 20441
       $98 = $77; //@line 20442
      } else {
       if ((HEAP32[2536] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 20447
       }
       $80 = $73 + 12 | 0; //@line 20450
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 20454
        HEAP32[$70 >> 2] = $73; //@line 20455
        $98 = $8; //@line 20456
        break;
       } else {
        _abort(); //@line 20459
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 20464
     $84 = $83 - $6 | 0; //@line 20465
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 20468
     $87 = $71 + $6 | 0; //@line 20469
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 20472
     HEAP32[$71 + $83 >> 2] = $84; //@line 20474
     if ($37 | 0) {
      $92 = HEAP32[2537] | 0; //@line 20477
      $93 = $37 >>> 3; //@line 20478
      $95 = 10168 + ($93 << 1 << 2) | 0; //@line 20480
      $96 = 1 << $93; //@line 20481
      if (!($98 & $96)) {
       HEAP32[2532] = $98 | $96; //@line 20486
       $$0199 = $95; //@line 20488
       $$pre$phiZ2D = $95 + 8 | 0; //@line 20488
      } else {
       $101 = $95 + 8 | 0; //@line 20490
       $102 = HEAP32[$101 >> 2] | 0; //@line 20491
       if ((HEAP32[2536] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 20495
       } else {
        $$0199 = $102; //@line 20498
        $$pre$phiZ2D = $101; //@line 20498
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 20501
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 20503
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 20505
      HEAP32[$92 + 12 >> 2] = $95; //@line 20507
     }
     HEAP32[2534] = $84; //@line 20509
     HEAP32[2537] = $87; //@line 20510
     $$0 = $72; //@line 20511
     STACKTOP = sp; //@line 20512
     return $$0 | 0; //@line 20512
    }
    $108 = HEAP32[2533] | 0; //@line 20514
    if (!$108) {
     $$0197 = $6; //@line 20517
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 20521
     $114 = $112 >>> 12 & 16; //@line 20523
     $115 = $112 >>> $114; //@line 20524
     $117 = $115 >>> 5 & 8; //@line 20526
     $119 = $115 >>> $117; //@line 20528
     $121 = $119 >>> 2 & 4; //@line 20530
     $123 = $119 >>> $121; //@line 20532
     $125 = $123 >>> 1 & 2; //@line 20534
     $127 = $123 >>> $125; //@line 20536
     $129 = $127 >>> 1 & 1; //@line 20538
     $134 = HEAP32[10432 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 20543
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 20547
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 20553
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 20556
      $$0193$lcssa$i = $138; //@line 20556
     } else {
      $$01926$i = $134; //@line 20558
      $$01935$i = $138; //@line 20558
      $146 = $143; //@line 20558
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 20563
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 20564
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 20565
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 20566
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 20572
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 20575
        $$0193$lcssa$i = $$$0193$i; //@line 20575
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 20578
        $$01935$i = $$$0193$i; //@line 20578
       }
      }
     }
     $157 = HEAP32[2536] | 0; //@line 20582
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 20585
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 20588
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 20591
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 20595
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 20597
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 20601
       $176 = HEAP32[$175 >> 2] | 0; //@line 20602
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 20605
        $179 = HEAP32[$178 >> 2] | 0; //@line 20606
        if (!$179) {
         $$3$i = 0; //@line 20609
         break;
        } else {
         $$1196$i = $179; //@line 20612
         $$1198$i = $178; //@line 20612
        }
       } else {
        $$1196$i = $176; //@line 20615
        $$1198$i = $175; //@line 20615
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 20618
        $182 = HEAP32[$181 >> 2] | 0; //@line 20619
        if ($182 | 0) {
         $$1196$i = $182; //@line 20622
         $$1198$i = $181; //@line 20622
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 20625
        $185 = HEAP32[$184 >> 2] | 0; //@line 20626
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 20631
         $$1198$i = $184; //@line 20631
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 20636
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 20639
        $$3$i = $$1196$i; //@line 20640
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 20645
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 20648
       }
       $169 = $167 + 12 | 0; //@line 20651
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 20655
       }
       $172 = $164 + 8 | 0; //@line 20658
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 20662
        HEAP32[$172 >> 2] = $167; //@line 20663
        $$3$i = $164; //@line 20664
        break;
       } else {
        _abort(); //@line 20667
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 20676
       $191 = 10432 + ($190 << 2) | 0; //@line 20677
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 20682
         if (!$$3$i) {
          HEAP32[2533] = $108 & ~(1 << $190); //@line 20688
          break L73;
         }
        } else {
         if ((HEAP32[2536] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 20695
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 20703
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[2536] | 0; //@line 20713
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 20716
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 20720
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 20722
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 20728
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 20732
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 20734
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 20740
       if ($214 | 0) {
        if ((HEAP32[2536] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 20746
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 20750
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 20752
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 20760
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 20763
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 20765
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 20768
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 20772
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 20775
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 20777
      if ($37 | 0) {
       $234 = HEAP32[2537] | 0; //@line 20780
       $235 = $37 >>> 3; //@line 20781
       $237 = 10168 + ($235 << 1 << 2) | 0; //@line 20783
       $238 = 1 << $235; //@line 20784
       if (!($8 & $238)) {
        HEAP32[2532] = $8 | $238; //@line 20789
        $$0189$i = $237; //@line 20791
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 20791
       } else {
        $242 = $237 + 8 | 0; //@line 20793
        $243 = HEAP32[$242 >> 2] | 0; //@line 20794
        if ((HEAP32[2536] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 20798
        } else {
         $$0189$i = $243; //@line 20801
         $$pre$phi$iZ2D = $242; //@line 20801
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 20804
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 20806
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 20808
       HEAP32[$234 + 12 >> 2] = $237; //@line 20810
      }
      HEAP32[2534] = $$0193$lcssa$i; //@line 20812
      HEAP32[2537] = $159; //@line 20813
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 20816
     STACKTOP = sp; //@line 20817
     return $$0 | 0; //@line 20817
    }
   } else {
    $$0197 = $6; //@line 20820
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 20825
   } else {
    $251 = $0 + 11 | 0; //@line 20827
    $252 = $251 & -8; //@line 20828
    $253 = HEAP32[2533] | 0; //@line 20829
    if (!$253) {
     $$0197 = $252; //@line 20832
    } else {
     $255 = 0 - $252 | 0; //@line 20834
     $256 = $251 >>> 8; //@line 20835
     if (!$256) {
      $$0358$i = 0; //@line 20838
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 20842
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 20846
       $262 = $256 << $261; //@line 20847
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 20850
       $267 = $262 << $265; //@line 20852
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 20855
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 20860
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 20866
      }
     }
     $282 = HEAP32[10432 + ($$0358$i << 2) >> 2] | 0; //@line 20870
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 20874
       $$3$i203 = 0; //@line 20874
       $$3350$i = $255; //@line 20874
       label = 81; //@line 20875
      } else {
       $$0342$i = 0; //@line 20882
       $$0347$i = $255; //@line 20882
       $$0353$i = $282; //@line 20882
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 20882
       $$0362$i = 0; //@line 20882
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 20887
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 20892
          $$435113$i = 0; //@line 20892
          $$435712$i = $$0353$i; //@line 20892
          label = 85; //@line 20893
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 20896
          $$1348$i = $292; //@line 20896
         }
        } else {
         $$1343$i = $$0342$i; //@line 20899
         $$1348$i = $$0347$i; //@line 20899
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 20902
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 20905
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 20909
        $302 = ($$0353$i | 0) == 0; //@line 20910
        if ($302) {
         $$2355$i = $$1363$i; //@line 20915
         $$3$i203 = $$1343$i; //@line 20915
         $$3350$i = $$1348$i; //@line 20915
         label = 81; //@line 20916
         break;
        } else {
         $$0342$i = $$1343$i; //@line 20919
         $$0347$i = $$1348$i; //@line 20919
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 20919
         $$0362$i = $$1363$i; //@line 20919
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 20929
       $309 = $253 & ($306 | 0 - $306); //@line 20932
       if (!$309) {
        $$0197 = $252; //@line 20935
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 20940
       $315 = $313 >>> 12 & 16; //@line 20942
       $316 = $313 >>> $315; //@line 20943
       $318 = $316 >>> 5 & 8; //@line 20945
       $320 = $316 >>> $318; //@line 20947
       $322 = $320 >>> 2 & 4; //@line 20949
       $324 = $320 >>> $322; //@line 20951
       $326 = $324 >>> 1 & 2; //@line 20953
       $328 = $324 >>> $326; //@line 20955
       $330 = $328 >>> 1 & 1; //@line 20957
       $$4$ph$i = 0; //@line 20963
       $$4357$ph$i = HEAP32[10432 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 20963
      } else {
       $$4$ph$i = $$3$i203; //@line 20965
       $$4357$ph$i = $$2355$i; //@line 20965
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 20969
       $$4351$lcssa$i = $$3350$i; //@line 20969
      } else {
       $$414$i = $$4$ph$i; //@line 20971
       $$435113$i = $$3350$i; //@line 20971
       $$435712$i = $$4357$ph$i; //@line 20971
       label = 85; //@line 20972
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 20977
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 20981
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 20982
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 20983
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 20984
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 20990
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 20993
        $$4351$lcssa$i = $$$4351$i; //@line 20993
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 20996
        $$435113$i = $$$4351$i; //@line 20996
        label = 85; //@line 20997
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 21003
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[2534] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[2536] | 0; //@line 21009
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 21012
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 21015
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 21018
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 21022
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 21024
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 21028
         $371 = HEAP32[$370 >> 2] | 0; //@line 21029
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 21032
          $374 = HEAP32[$373 >> 2] | 0; //@line 21033
          if (!$374) {
           $$3372$i = 0; //@line 21036
           break;
          } else {
           $$1370$i = $374; //@line 21039
           $$1374$i = $373; //@line 21039
          }
         } else {
          $$1370$i = $371; //@line 21042
          $$1374$i = $370; //@line 21042
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 21045
          $377 = HEAP32[$376 >> 2] | 0; //@line 21046
          if ($377 | 0) {
           $$1370$i = $377; //@line 21049
           $$1374$i = $376; //@line 21049
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 21052
          $380 = HEAP32[$379 >> 2] | 0; //@line 21053
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 21058
           $$1374$i = $379; //@line 21058
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 21063
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 21066
          $$3372$i = $$1370$i; //@line 21067
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 21072
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 21075
         }
         $364 = $362 + 12 | 0; //@line 21078
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 21082
         }
         $367 = $359 + 8 | 0; //@line 21085
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 21089
          HEAP32[$367 >> 2] = $362; //@line 21090
          $$3372$i = $359; //@line 21091
          break;
         } else {
          _abort(); //@line 21094
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 21102
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 21105
         $386 = 10432 + ($385 << 2) | 0; //@line 21106
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 21111
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 21116
            HEAP32[2533] = $391; //@line 21117
            $475 = $391; //@line 21118
            break L164;
           }
          } else {
           if ((HEAP32[2536] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 21125
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 21133
            if (!$$3372$i) {
             $475 = $253; //@line 21136
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[2536] | 0; //@line 21144
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 21147
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 21151
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 21153
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 21159
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 21163
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 21165
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 21171
         if (!$409) {
          $475 = $253; //@line 21174
         } else {
          if ((HEAP32[2536] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 21179
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 21183
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 21185
           $475 = $253; //@line 21186
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 21195
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 21198
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 21200
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 21203
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 21207
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 21210
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 21212
         $428 = $$4351$lcssa$i >>> 3; //@line 21213
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 10168 + ($428 << 1 << 2) | 0; //@line 21217
          $432 = HEAP32[2532] | 0; //@line 21218
          $433 = 1 << $428; //@line 21219
          if (!($432 & $433)) {
           HEAP32[2532] = $432 | $433; //@line 21224
           $$0368$i = $431; //@line 21226
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 21226
          } else {
           $437 = $431 + 8 | 0; //@line 21228
           $438 = HEAP32[$437 >> 2] | 0; //@line 21229
           if ((HEAP32[2536] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 21233
           } else {
            $$0368$i = $438; //@line 21236
            $$pre$phi$i211Z2D = $437; //@line 21236
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 21239
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 21241
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 21243
          HEAP32[$354 + 12 >> 2] = $431; //@line 21245
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 21248
         if (!$444) {
          $$0361$i = 0; //@line 21251
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 21255
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 21259
           $450 = $444 << $449; //@line 21260
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 21263
           $455 = $450 << $453; //@line 21265
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 21268
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 21273
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 21279
          }
         }
         $469 = 10432 + ($$0361$i << 2) | 0; //@line 21282
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 21284
         $471 = $354 + 16 | 0; //@line 21285
         HEAP32[$471 + 4 >> 2] = 0; //@line 21287
         HEAP32[$471 >> 2] = 0; //@line 21288
         $473 = 1 << $$0361$i; //@line 21289
         if (!($475 & $473)) {
          HEAP32[2533] = $475 | $473; //@line 21294
          HEAP32[$469 >> 2] = $354; //@line 21295
          HEAP32[$354 + 24 >> 2] = $469; //@line 21297
          HEAP32[$354 + 12 >> 2] = $354; //@line 21299
          HEAP32[$354 + 8 >> 2] = $354; //@line 21301
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 21310
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 21310
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 21317
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 21321
          $494 = HEAP32[$492 >> 2] | 0; //@line 21323
          if (!$494) {
           label = 136; //@line 21326
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 21329
           $$0345$i = $494; //@line 21329
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[2536] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 21336
          } else {
           HEAP32[$492 >> 2] = $354; //@line 21339
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 21341
           HEAP32[$354 + 12 >> 2] = $354; //@line 21343
           HEAP32[$354 + 8 >> 2] = $354; //@line 21345
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 21350
          $502 = HEAP32[$501 >> 2] | 0; //@line 21351
          $503 = HEAP32[2536] | 0; //@line 21352
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 21358
           HEAP32[$501 >> 2] = $354; //@line 21359
           HEAP32[$354 + 8 >> 2] = $502; //@line 21361
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 21363
           HEAP32[$354 + 24 >> 2] = 0; //@line 21365
           break;
          } else {
           _abort(); //@line 21368
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 21375
       STACKTOP = sp; //@line 21376
       return $$0 | 0; //@line 21376
      } else {
       $$0197 = $252; //@line 21378
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[2534] | 0; //@line 21385
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 21388
  $515 = HEAP32[2537] | 0; //@line 21389
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 21392
   HEAP32[2537] = $517; //@line 21393
   HEAP32[2534] = $514; //@line 21394
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 21397
   HEAP32[$515 + $512 >> 2] = $514; //@line 21399
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 21402
  } else {
   HEAP32[2534] = 0; //@line 21404
   HEAP32[2537] = 0; //@line 21405
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 21408
   $526 = $515 + $512 + 4 | 0; //@line 21410
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 21413
  }
  $$0 = $515 + 8 | 0; //@line 21416
  STACKTOP = sp; //@line 21417
  return $$0 | 0; //@line 21417
 }
 $530 = HEAP32[2535] | 0; //@line 21419
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 21422
  HEAP32[2535] = $532; //@line 21423
  $533 = HEAP32[2538] | 0; //@line 21424
  $534 = $533 + $$0197 | 0; //@line 21425
  HEAP32[2538] = $534; //@line 21426
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 21429
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 21432
  $$0 = $533 + 8 | 0; //@line 21434
  STACKTOP = sp; //@line 21435
  return $$0 | 0; //@line 21435
 }
 if (!(HEAP32[2650] | 0)) {
  HEAP32[2652] = 4096; //@line 21440
  HEAP32[2651] = 4096; //@line 21441
  HEAP32[2653] = -1; //@line 21442
  HEAP32[2654] = -1; //@line 21443
  HEAP32[2655] = 0; //@line 21444
  HEAP32[2643] = 0; //@line 21445
  HEAP32[2650] = $1 & -16 ^ 1431655768; //@line 21449
  $548 = 4096; //@line 21450
 } else {
  $548 = HEAP32[2652] | 0; //@line 21453
 }
 $545 = $$0197 + 48 | 0; //@line 21455
 $546 = $$0197 + 47 | 0; //@line 21456
 $547 = $548 + $546 | 0; //@line 21457
 $549 = 0 - $548 | 0; //@line 21458
 $550 = $547 & $549; //@line 21459
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 21462
  STACKTOP = sp; //@line 21463
  return $$0 | 0; //@line 21463
 }
 $552 = HEAP32[2642] | 0; //@line 21465
 if ($552 | 0) {
  $554 = HEAP32[2640] | 0; //@line 21468
  $555 = $554 + $550 | 0; //@line 21469
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 21474
   STACKTOP = sp; //@line 21475
   return $$0 | 0; //@line 21475
  }
 }
 L244 : do {
  if (!(HEAP32[2643] & 4)) {
   $561 = HEAP32[2538] | 0; //@line 21483
   L246 : do {
    if (!$561) {
     label = 163; //@line 21487
    } else {
     $$0$i$i = 10576; //@line 21489
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 21491
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 21494
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 21503
      if (!$570) {
       label = 163; //@line 21506
       break L246;
      } else {
       $$0$i$i = $570; //@line 21509
      }
     }
     $595 = $547 - $530 & $549; //@line 21513
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 21516
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 21524
       } else {
        $$723947$i = $595; //@line 21526
        $$748$i = $597; //@line 21526
        label = 180; //@line 21527
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 21531
       $$2253$ph$i = $595; //@line 21531
       label = 171; //@line 21532
      }
     } else {
      $$2234243136$i = 0; //@line 21535
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 21541
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 21544
     } else {
      $574 = $572; //@line 21546
      $575 = HEAP32[2651] | 0; //@line 21547
      $576 = $575 + -1 | 0; //@line 21548
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 21556
      $584 = HEAP32[2640] | 0; //@line 21557
      $585 = $$$i + $584 | 0; //@line 21558
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[2642] | 0; //@line 21563
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 21570
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 21574
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 21577
        $$748$i = $572; //@line 21577
        label = 180; //@line 21578
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 21581
        $$2253$ph$i = $$$i; //@line 21581
        label = 171; //@line 21582
       }
      } else {
       $$2234243136$i = 0; //@line 21585
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 21592
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 21601
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 21604
       $$748$i = $$2247$ph$i; //@line 21604
       label = 180; //@line 21605
       break L244;
      }
     }
     $607 = HEAP32[2652] | 0; //@line 21609
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 21613
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 21616
      $$748$i = $$2247$ph$i; //@line 21616
      label = 180; //@line 21617
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 21623
      $$2234243136$i = 0; //@line 21624
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 21628
      $$748$i = $$2247$ph$i; //@line 21628
      label = 180; //@line 21629
      break L244;
     }
    }
   } while (0);
   HEAP32[2643] = HEAP32[2643] | 4; //@line 21636
   $$4236$i = $$2234243136$i; //@line 21637
   label = 178; //@line 21638
  } else {
   $$4236$i = 0; //@line 21640
   label = 178; //@line 21641
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 21647
   $621 = _sbrk(0) | 0; //@line 21648
   $627 = $621 - $620 | 0; //@line 21656
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 21658
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 21666
    $$748$i = $620; //@line 21666
    label = 180; //@line 21667
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[2640] | 0) + $$723947$i | 0; //@line 21673
  HEAP32[2640] = $633; //@line 21674
  if ($633 >>> 0 > (HEAP32[2641] | 0) >>> 0) {
   HEAP32[2641] = $633; //@line 21678
  }
  $636 = HEAP32[2538] | 0; //@line 21680
  do {
   if (!$636) {
    $638 = HEAP32[2536] | 0; //@line 21684
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[2536] = $$748$i; //@line 21689
    }
    HEAP32[2644] = $$748$i; //@line 21691
    HEAP32[2645] = $$723947$i; //@line 21692
    HEAP32[2647] = 0; //@line 21693
    HEAP32[2541] = HEAP32[2650]; //@line 21695
    HEAP32[2540] = -1; //@line 21696
    HEAP32[2545] = 10168; //@line 21697
    HEAP32[2544] = 10168; //@line 21698
    HEAP32[2547] = 10176; //@line 21699
    HEAP32[2546] = 10176; //@line 21700
    HEAP32[2549] = 10184; //@line 21701
    HEAP32[2548] = 10184; //@line 21702
    HEAP32[2551] = 10192; //@line 21703
    HEAP32[2550] = 10192; //@line 21704
    HEAP32[2553] = 10200; //@line 21705
    HEAP32[2552] = 10200; //@line 21706
    HEAP32[2555] = 10208; //@line 21707
    HEAP32[2554] = 10208; //@line 21708
    HEAP32[2557] = 10216; //@line 21709
    HEAP32[2556] = 10216; //@line 21710
    HEAP32[2559] = 10224; //@line 21711
    HEAP32[2558] = 10224; //@line 21712
    HEAP32[2561] = 10232; //@line 21713
    HEAP32[2560] = 10232; //@line 21714
    HEAP32[2563] = 10240; //@line 21715
    HEAP32[2562] = 10240; //@line 21716
    HEAP32[2565] = 10248; //@line 21717
    HEAP32[2564] = 10248; //@line 21718
    HEAP32[2567] = 10256; //@line 21719
    HEAP32[2566] = 10256; //@line 21720
    HEAP32[2569] = 10264; //@line 21721
    HEAP32[2568] = 10264; //@line 21722
    HEAP32[2571] = 10272; //@line 21723
    HEAP32[2570] = 10272; //@line 21724
    HEAP32[2573] = 10280; //@line 21725
    HEAP32[2572] = 10280; //@line 21726
    HEAP32[2575] = 10288; //@line 21727
    HEAP32[2574] = 10288; //@line 21728
    HEAP32[2577] = 10296; //@line 21729
    HEAP32[2576] = 10296; //@line 21730
    HEAP32[2579] = 10304; //@line 21731
    HEAP32[2578] = 10304; //@line 21732
    HEAP32[2581] = 10312; //@line 21733
    HEAP32[2580] = 10312; //@line 21734
    HEAP32[2583] = 10320; //@line 21735
    HEAP32[2582] = 10320; //@line 21736
    HEAP32[2585] = 10328; //@line 21737
    HEAP32[2584] = 10328; //@line 21738
    HEAP32[2587] = 10336; //@line 21739
    HEAP32[2586] = 10336; //@line 21740
    HEAP32[2589] = 10344; //@line 21741
    HEAP32[2588] = 10344; //@line 21742
    HEAP32[2591] = 10352; //@line 21743
    HEAP32[2590] = 10352; //@line 21744
    HEAP32[2593] = 10360; //@line 21745
    HEAP32[2592] = 10360; //@line 21746
    HEAP32[2595] = 10368; //@line 21747
    HEAP32[2594] = 10368; //@line 21748
    HEAP32[2597] = 10376; //@line 21749
    HEAP32[2596] = 10376; //@line 21750
    HEAP32[2599] = 10384; //@line 21751
    HEAP32[2598] = 10384; //@line 21752
    HEAP32[2601] = 10392; //@line 21753
    HEAP32[2600] = 10392; //@line 21754
    HEAP32[2603] = 10400; //@line 21755
    HEAP32[2602] = 10400; //@line 21756
    HEAP32[2605] = 10408; //@line 21757
    HEAP32[2604] = 10408; //@line 21758
    HEAP32[2607] = 10416; //@line 21759
    HEAP32[2606] = 10416; //@line 21760
    $642 = $$723947$i + -40 | 0; //@line 21761
    $644 = $$748$i + 8 | 0; //@line 21763
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 21768
    $650 = $$748$i + $649 | 0; //@line 21769
    $651 = $642 - $649 | 0; //@line 21770
    HEAP32[2538] = $650; //@line 21771
    HEAP32[2535] = $651; //@line 21772
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 21775
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 21778
    HEAP32[2539] = HEAP32[2654]; //@line 21780
   } else {
    $$024367$i = 10576; //@line 21782
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 21784
     $658 = $$024367$i + 4 | 0; //@line 21785
     $659 = HEAP32[$658 >> 2] | 0; //@line 21786
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 21790
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 21794
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 21799
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 21813
       $673 = (HEAP32[2535] | 0) + $$723947$i | 0; //@line 21815
       $675 = $636 + 8 | 0; //@line 21817
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 21822
       $681 = $636 + $680 | 0; //@line 21823
       $682 = $673 - $680 | 0; //@line 21824
       HEAP32[2538] = $681; //@line 21825
       HEAP32[2535] = $682; //@line 21826
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 21829
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 21832
       HEAP32[2539] = HEAP32[2654]; //@line 21834
       break;
      }
     }
    }
    $688 = HEAP32[2536] | 0; //@line 21839
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[2536] = $$748$i; //@line 21842
     $753 = $$748$i; //@line 21843
    } else {
     $753 = $688; //@line 21845
    }
    $690 = $$748$i + $$723947$i | 0; //@line 21847
    $$124466$i = 10576; //@line 21848
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 21853
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 21857
     if (!$694) {
      $$0$i$i$i = 10576; //@line 21860
      break;
     } else {
      $$124466$i = $694; //@line 21863
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 21872
      $700 = $$124466$i + 4 | 0; //@line 21873
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 21876
      $704 = $$748$i + 8 | 0; //@line 21878
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 21884
      $712 = $690 + 8 | 0; //@line 21886
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 21892
      $722 = $710 + $$0197 | 0; //@line 21896
      $723 = $718 - $710 - $$0197 | 0; //@line 21897
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 21900
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[2535] | 0) + $723 | 0; //@line 21905
        HEAP32[2535] = $728; //@line 21906
        HEAP32[2538] = $722; //@line 21907
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 21910
       } else {
        if ((HEAP32[2537] | 0) == ($718 | 0)) {
         $734 = (HEAP32[2534] | 0) + $723 | 0; //@line 21916
         HEAP32[2534] = $734; //@line 21917
         HEAP32[2537] = $722; //@line 21918
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 21921
         HEAP32[$722 + $734 >> 2] = $734; //@line 21923
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 21927
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 21931
         $743 = $739 >>> 3; //@line 21932
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 21937
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 21939
           $750 = 10168 + ($743 << 1 << 2) | 0; //@line 21941
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 21947
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 21956
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[2532] = HEAP32[2532] & ~(1 << $743); //@line 21966
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 21973
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 21977
             }
             $764 = $748 + 8 | 0; //@line 21980
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 21984
              break;
             }
             _abort(); //@line 21987
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 21992
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 21993
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 21996
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 21998
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 22002
             $783 = $782 + 4 | 0; //@line 22003
             $784 = HEAP32[$783 >> 2] | 0; //@line 22004
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 22007
              if (!$786) {
               $$3$i$i = 0; //@line 22010
               break;
              } else {
               $$1291$i$i = $786; //@line 22013
               $$1293$i$i = $782; //@line 22013
              }
             } else {
              $$1291$i$i = $784; //@line 22016
              $$1293$i$i = $783; //@line 22016
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 22019
              $789 = HEAP32[$788 >> 2] | 0; //@line 22020
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 22023
               $$1293$i$i = $788; //@line 22023
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 22026
              $792 = HEAP32[$791 >> 2] | 0; //@line 22027
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 22032
               $$1293$i$i = $791; //@line 22032
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 22037
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 22040
              $$3$i$i = $$1291$i$i; //@line 22041
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 22046
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 22049
             }
             $776 = $774 + 12 | 0; //@line 22052
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 22056
             }
             $779 = $771 + 8 | 0; //@line 22059
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 22063
              HEAP32[$779 >> 2] = $774; //@line 22064
              $$3$i$i = $771; //@line 22065
              break;
             } else {
              _abort(); //@line 22068
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 22078
           $798 = 10432 + ($797 << 2) | 0; //@line 22079
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 22084
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[2533] = HEAP32[2533] & ~(1 << $797); //@line 22093
             break L311;
            } else {
             if ((HEAP32[2536] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 22099
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 22107
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[2536] | 0; //@line 22117
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 22120
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 22124
           $815 = $718 + 16 | 0; //@line 22125
           $816 = HEAP32[$815 >> 2] | 0; //@line 22126
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 22132
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 22136
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 22138
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 22144
           if (!$822) {
            break;
           }
           if ((HEAP32[2536] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 22152
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 22156
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 22158
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 22165
         $$0287$i$i = $742 + $723 | 0; //@line 22165
        } else {
         $$0$i17$i = $718; //@line 22167
         $$0287$i$i = $723; //@line 22167
        }
        $830 = $$0$i17$i + 4 | 0; //@line 22169
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 22172
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 22175
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 22177
        $836 = $$0287$i$i >>> 3; //@line 22178
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 10168 + ($836 << 1 << 2) | 0; //@line 22182
         $840 = HEAP32[2532] | 0; //@line 22183
         $841 = 1 << $836; //@line 22184
         do {
          if (!($840 & $841)) {
           HEAP32[2532] = $840 | $841; //@line 22190
           $$0295$i$i = $839; //@line 22192
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 22192
          } else {
           $845 = $839 + 8 | 0; //@line 22194
           $846 = HEAP32[$845 >> 2] | 0; //@line 22195
           if ((HEAP32[2536] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 22199
            $$pre$phi$i19$iZ2D = $845; //@line 22199
            break;
           }
           _abort(); //@line 22202
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 22206
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 22208
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 22210
         HEAP32[$722 + 12 >> 2] = $839; //@line 22212
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 22215
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 22219
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 22223
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 22228
          $858 = $852 << $857; //@line 22229
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 22232
          $863 = $858 << $861; //@line 22234
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 22237
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 22242
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 22248
         }
        } while (0);
        $877 = 10432 + ($$0296$i$i << 2) | 0; //@line 22251
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 22253
        $879 = $722 + 16 | 0; //@line 22254
        HEAP32[$879 + 4 >> 2] = 0; //@line 22256
        HEAP32[$879 >> 2] = 0; //@line 22257
        $881 = HEAP32[2533] | 0; //@line 22258
        $882 = 1 << $$0296$i$i; //@line 22259
        if (!($881 & $882)) {
         HEAP32[2533] = $881 | $882; //@line 22264
         HEAP32[$877 >> 2] = $722; //@line 22265
         HEAP32[$722 + 24 >> 2] = $877; //@line 22267
         HEAP32[$722 + 12 >> 2] = $722; //@line 22269
         HEAP32[$722 + 8 >> 2] = $722; //@line 22271
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 22280
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 22280
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 22287
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 22291
         $902 = HEAP32[$900 >> 2] | 0; //@line 22293
         if (!$902) {
          label = 260; //@line 22296
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 22299
          $$0289$i$i = $902; //@line 22299
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[2536] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 22306
         } else {
          HEAP32[$900 >> 2] = $722; //@line 22309
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 22311
          HEAP32[$722 + 12 >> 2] = $722; //@line 22313
          HEAP32[$722 + 8 >> 2] = $722; //@line 22315
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 22320
         $910 = HEAP32[$909 >> 2] | 0; //@line 22321
         $911 = HEAP32[2536] | 0; //@line 22322
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 22328
          HEAP32[$909 >> 2] = $722; //@line 22329
          HEAP32[$722 + 8 >> 2] = $910; //@line 22331
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 22333
          HEAP32[$722 + 24 >> 2] = 0; //@line 22335
          break;
         } else {
          _abort(); //@line 22338
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 22345
      STACKTOP = sp; //@line 22346
      return $$0 | 0; //@line 22346
     } else {
      $$0$i$i$i = 10576; //@line 22348
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 22352
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 22357
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 22365
    }
    $927 = $923 + -47 | 0; //@line 22367
    $929 = $927 + 8 | 0; //@line 22369
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 22375
    $936 = $636 + 16 | 0; //@line 22376
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 22378
    $939 = $938 + 8 | 0; //@line 22379
    $940 = $938 + 24 | 0; //@line 22380
    $941 = $$723947$i + -40 | 0; //@line 22381
    $943 = $$748$i + 8 | 0; //@line 22383
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 22388
    $949 = $$748$i + $948 | 0; //@line 22389
    $950 = $941 - $948 | 0; //@line 22390
    HEAP32[2538] = $949; //@line 22391
    HEAP32[2535] = $950; //@line 22392
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 22395
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 22398
    HEAP32[2539] = HEAP32[2654]; //@line 22400
    $956 = $938 + 4 | 0; //@line 22401
    HEAP32[$956 >> 2] = 27; //@line 22402
    HEAP32[$939 >> 2] = HEAP32[2644]; //@line 22403
    HEAP32[$939 + 4 >> 2] = HEAP32[2645]; //@line 22403
    HEAP32[$939 + 8 >> 2] = HEAP32[2646]; //@line 22403
    HEAP32[$939 + 12 >> 2] = HEAP32[2647]; //@line 22403
    HEAP32[2644] = $$748$i; //@line 22404
    HEAP32[2645] = $$723947$i; //@line 22405
    HEAP32[2647] = 0; //@line 22406
    HEAP32[2646] = $939; //@line 22407
    $958 = $940; //@line 22408
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 22410
     HEAP32[$958 >> 2] = 7; //@line 22411
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 22424
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 22427
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 22430
     HEAP32[$938 >> 2] = $964; //@line 22431
     $969 = $964 >>> 3; //@line 22432
     if ($964 >>> 0 < 256) {
      $972 = 10168 + ($969 << 1 << 2) | 0; //@line 22436
      $973 = HEAP32[2532] | 0; //@line 22437
      $974 = 1 << $969; //@line 22438
      if (!($973 & $974)) {
       HEAP32[2532] = $973 | $974; //@line 22443
       $$0211$i$i = $972; //@line 22445
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 22445
      } else {
       $978 = $972 + 8 | 0; //@line 22447
       $979 = HEAP32[$978 >> 2] | 0; //@line 22448
       if ((HEAP32[2536] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 22452
       } else {
        $$0211$i$i = $979; //@line 22455
        $$pre$phi$i$iZ2D = $978; //@line 22455
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 22458
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 22460
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 22462
      HEAP32[$636 + 12 >> 2] = $972; //@line 22464
      break;
     }
     $985 = $964 >>> 8; //@line 22467
     if (!$985) {
      $$0212$i$i = 0; //@line 22470
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 22474
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 22478
       $991 = $985 << $990; //@line 22479
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 22482
       $996 = $991 << $994; //@line 22484
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 22487
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 22492
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 22498
      }
     }
     $1010 = 10432 + ($$0212$i$i << 2) | 0; //@line 22501
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 22503
     HEAP32[$636 + 20 >> 2] = 0; //@line 22505
     HEAP32[$936 >> 2] = 0; //@line 22506
     $1013 = HEAP32[2533] | 0; //@line 22507
     $1014 = 1 << $$0212$i$i; //@line 22508
     if (!($1013 & $1014)) {
      HEAP32[2533] = $1013 | $1014; //@line 22513
      HEAP32[$1010 >> 2] = $636; //@line 22514
      HEAP32[$636 + 24 >> 2] = $1010; //@line 22516
      HEAP32[$636 + 12 >> 2] = $636; //@line 22518
      HEAP32[$636 + 8 >> 2] = $636; //@line 22520
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 22529
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 22529
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 22536
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 22540
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 22542
      if (!$1034) {
       label = 286; //@line 22545
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 22548
       $$0207$i$i = $1034; //@line 22548
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[2536] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 22555
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 22558
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 22560
       HEAP32[$636 + 12 >> 2] = $636; //@line 22562
       HEAP32[$636 + 8 >> 2] = $636; //@line 22564
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 22569
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 22570
      $1043 = HEAP32[2536] | 0; //@line 22571
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 22577
       HEAP32[$1041 >> 2] = $636; //@line 22578
       HEAP32[$636 + 8 >> 2] = $1042; //@line 22580
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 22582
       HEAP32[$636 + 24 >> 2] = 0; //@line 22584
       break;
      } else {
       _abort(); //@line 22587
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[2535] | 0; //@line 22594
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 22597
   HEAP32[2535] = $1054; //@line 22598
   $1055 = HEAP32[2538] | 0; //@line 22599
   $1056 = $1055 + $$0197 | 0; //@line 22600
   HEAP32[2538] = $1056; //@line 22601
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 22604
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 22607
   $$0 = $1055 + 8 | 0; //@line 22609
   STACKTOP = sp; //@line 22610
   return $$0 | 0; //@line 22610
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 22614
 $$0 = 0; //@line 22615
 STACKTOP = sp; //@line 22616
 return $$0 | 0; //@line 22616
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_122($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $214 = 0, $215 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 22078
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22080
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22082
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22084
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22086
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22088
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22090
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22092
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22094
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22096
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22098
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22100
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22102
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22104
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22106
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22108
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22110
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22112
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22114
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22116
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 22118
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 22120
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 22122
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 22124
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 22126
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 22128
 $150 = HEAP32[$8 >> 2] | 0; //@line 22129
 if ($150 | 0) {
  $153 = HEAP32[$150 + 8 >> 2] | 0; //@line 22133
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(104) | 0; //@line 22134
  FUNCTION_TABLE_vi[$153 & 511]($6); //@line 22135
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 189; //@line 22138
   $154 = $ReallocAsyncCtx2 + 4 | 0; //@line 22139
   HEAP32[$154 >> 2] = $2; //@line 22140
   $155 = $ReallocAsyncCtx2 + 8 | 0; //@line 22141
   HEAP32[$155 >> 2] = $4; //@line 22142
   $156 = $ReallocAsyncCtx2 + 12 | 0; //@line 22143
   HEAP32[$156 >> 2] = $6; //@line 22144
   $157 = $ReallocAsyncCtx2 + 16 | 0; //@line 22145
   HEAP32[$157 >> 2] = $10; //@line 22146
   $158 = $ReallocAsyncCtx2 + 20 | 0; //@line 22147
   HEAP32[$158 >> 2] = $8; //@line 22148
   $159 = $ReallocAsyncCtx2 + 24 | 0; //@line 22149
   HEAP32[$159 >> 2] = $46; //@line 22150
   $160 = $ReallocAsyncCtx2 + 28 | 0; //@line 22151
   HEAP32[$160 >> 2] = $12; //@line 22152
   $161 = $ReallocAsyncCtx2 + 32 | 0; //@line 22153
   HEAP32[$161 >> 2] = $14; //@line 22154
   $162 = $ReallocAsyncCtx2 + 36 | 0; //@line 22155
   HEAP32[$162 >> 2] = $16; //@line 22156
   $163 = $ReallocAsyncCtx2 + 40 | 0; //@line 22157
   HEAP32[$163 >> 2] = $18; //@line 22158
   $164 = $ReallocAsyncCtx2 + 44 | 0; //@line 22159
   HEAP32[$164 >> 2] = $20; //@line 22160
   $165 = $ReallocAsyncCtx2 + 48 | 0; //@line 22161
   HEAP32[$165 >> 2] = $22; //@line 22162
   $166 = $ReallocAsyncCtx2 + 52 | 0; //@line 22163
   HEAP32[$166 >> 2] = $24; //@line 22164
   $167 = $ReallocAsyncCtx2 + 56 | 0; //@line 22165
   HEAP32[$167 >> 2] = $26; //@line 22166
   $168 = $ReallocAsyncCtx2 + 60 | 0; //@line 22167
   HEAP32[$168 >> 2] = $28; //@line 22168
   $169 = $ReallocAsyncCtx2 + 64 | 0; //@line 22169
   HEAP32[$169 >> 2] = $30; //@line 22170
   $170 = $ReallocAsyncCtx2 + 68 | 0; //@line 22171
   HEAP32[$170 >> 2] = $32; //@line 22172
   $171 = $ReallocAsyncCtx2 + 72 | 0; //@line 22173
   HEAP32[$171 >> 2] = $34; //@line 22174
   $172 = $ReallocAsyncCtx2 + 76 | 0; //@line 22175
   HEAP32[$172 >> 2] = $36; //@line 22176
   $173 = $ReallocAsyncCtx2 + 80 | 0; //@line 22177
   HEAP32[$173 >> 2] = $38; //@line 22178
   $174 = $ReallocAsyncCtx2 + 84 | 0; //@line 22179
   HEAP32[$174 >> 2] = $40; //@line 22180
   $175 = $ReallocAsyncCtx2 + 88 | 0; //@line 22181
   HEAP32[$175 >> 2] = $42; //@line 22182
   $176 = $ReallocAsyncCtx2 + 92 | 0; //@line 22183
   HEAP32[$176 >> 2] = $44; //@line 22184
   $177 = $ReallocAsyncCtx2 + 96 | 0; //@line 22185
   HEAP32[$177 >> 2] = $48; //@line 22186
   $178 = $ReallocAsyncCtx2 + 100 | 0; //@line 22187
   HEAP32[$178 >> 2] = $50; //@line 22188
   sp = STACKTOP; //@line 22189
   return;
  }
  ___async_unwind = 0; //@line 22192
  HEAP32[$ReallocAsyncCtx2 >> 2] = 189; //@line 22193
  $154 = $ReallocAsyncCtx2 + 4 | 0; //@line 22194
  HEAP32[$154 >> 2] = $2; //@line 22195
  $155 = $ReallocAsyncCtx2 + 8 | 0; //@line 22196
  HEAP32[$155 >> 2] = $4; //@line 22197
  $156 = $ReallocAsyncCtx2 + 12 | 0; //@line 22198
  HEAP32[$156 >> 2] = $6; //@line 22199
  $157 = $ReallocAsyncCtx2 + 16 | 0; //@line 22200
  HEAP32[$157 >> 2] = $10; //@line 22201
  $158 = $ReallocAsyncCtx2 + 20 | 0; //@line 22202
  HEAP32[$158 >> 2] = $8; //@line 22203
  $159 = $ReallocAsyncCtx2 + 24 | 0; //@line 22204
  HEAP32[$159 >> 2] = $46; //@line 22205
  $160 = $ReallocAsyncCtx2 + 28 | 0; //@line 22206
  HEAP32[$160 >> 2] = $12; //@line 22207
  $161 = $ReallocAsyncCtx2 + 32 | 0; //@line 22208
  HEAP32[$161 >> 2] = $14; //@line 22209
  $162 = $ReallocAsyncCtx2 + 36 | 0; //@line 22210
  HEAP32[$162 >> 2] = $16; //@line 22211
  $163 = $ReallocAsyncCtx2 + 40 | 0; //@line 22212
  HEAP32[$163 >> 2] = $18; //@line 22213
  $164 = $ReallocAsyncCtx2 + 44 | 0; //@line 22214
  HEAP32[$164 >> 2] = $20; //@line 22215
  $165 = $ReallocAsyncCtx2 + 48 | 0; //@line 22216
  HEAP32[$165 >> 2] = $22; //@line 22217
  $166 = $ReallocAsyncCtx2 + 52 | 0; //@line 22218
  HEAP32[$166 >> 2] = $24; //@line 22219
  $167 = $ReallocAsyncCtx2 + 56 | 0; //@line 22220
  HEAP32[$167 >> 2] = $26; //@line 22221
  $168 = $ReallocAsyncCtx2 + 60 | 0; //@line 22222
  HEAP32[$168 >> 2] = $28; //@line 22223
  $169 = $ReallocAsyncCtx2 + 64 | 0; //@line 22224
  HEAP32[$169 >> 2] = $30; //@line 22225
  $170 = $ReallocAsyncCtx2 + 68 | 0; //@line 22226
  HEAP32[$170 >> 2] = $32; //@line 22227
  $171 = $ReallocAsyncCtx2 + 72 | 0; //@line 22228
  HEAP32[$171 >> 2] = $34; //@line 22229
  $172 = $ReallocAsyncCtx2 + 76 | 0; //@line 22230
  HEAP32[$172 >> 2] = $36; //@line 22231
  $173 = $ReallocAsyncCtx2 + 80 | 0; //@line 22232
  HEAP32[$173 >> 2] = $38; //@line 22233
  $174 = $ReallocAsyncCtx2 + 84 | 0; //@line 22234
  HEAP32[$174 >> 2] = $40; //@line 22235
  $175 = $ReallocAsyncCtx2 + 88 | 0; //@line 22236
  HEAP32[$175 >> 2] = $42; //@line 22237
  $176 = $ReallocAsyncCtx2 + 92 | 0; //@line 22238
  HEAP32[$176 >> 2] = $44; //@line 22239
  $177 = $ReallocAsyncCtx2 + 96 | 0; //@line 22240
  HEAP32[$177 >> 2] = $48; //@line 22241
  $178 = $ReallocAsyncCtx2 + 100 | 0; //@line 22242
  HEAP32[$178 >> 2] = $50; //@line 22243
  sp = STACKTOP; //@line 22244
  return;
 }
 $179 = HEAP32[$4 >> 2] | 0; //@line 22247
 if (!$179) {
  $$02972$reg2mem$0 = $50; //@line 22250
  $$03071$reg2mem$0 = $48; //@line 22250
  $$reg2mem$0 = $46; //@line 22250
 } else {
  $182 = HEAP32[$179 + 8 >> 2] | 0; //@line 22253
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 22254
  FUNCTION_TABLE_vi[$182 & 511]($2); //@line 22255
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 190; //@line 22258
   $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 22259
   HEAP32[$183 >> 2] = $2; //@line 22260
   $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 22261
   HEAP32[$184 >> 2] = $4; //@line 22262
   $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 22263
   HEAP32[$185 >> 2] = $6; //@line 22264
   $186 = $ReallocAsyncCtx3 + 16 | 0; //@line 22265
   HEAP32[$186 >> 2] = $10; //@line 22266
   $187 = $ReallocAsyncCtx3 + 20 | 0; //@line 22267
   HEAP32[$187 >> 2] = $8; //@line 22268
   $188 = $ReallocAsyncCtx3 + 24 | 0; //@line 22269
   HEAP32[$188 >> 2] = $46; //@line 22270
   $189 = $ReallocAsyncCtx3 + 28 | 0; //@line 22271
   HEAP32[$189 >> 2] = $12; //@line 22272
   $190 = $ReallocAsyncCtx3 + 32 | 0; //@line 22273
   HEAP32[$190 >> 2] = $14; //@line 22274
   $191 = $ReallocAsyncCtx3 + 36 | 0; //@line 22275
   HEAP32[$191 >> 2] = $16; //@line 22276
   $192 = $ReallocAsyncCtx3 + 40 | 0; //@line 22277
   HEAP32[$192 >> 2] = $18; //@line 22278
   $193 = $ReallocAsyncCtx3 + 44 | 0; //@line 22279
   HEAP32[$193 >> 2] = $20; //@line 22280
   $194 = $ReallocAsyncCtx3 + 48 | 0; //@line 22281
   HEAP32[$194 >> 2] = $22; //@line 22282
   $195 = $ReallocAsyncCtx3 + 52 | 0; //@line 22283
   HEAP32[$195 >> 2] = $24; //@line 22284
   $196 = $ReallocAsyncCtx3 + 56 | 0; //@line 22285
   HEAP32[$196 >> 2] = $26; //@line 22286
   $197 = $ReallocAsyncCtx3 + 60 | 0; //@line 22287
   HEAP32[$197 >> 2] = $28; //@line 22288
   $198 = $ReallocAsyncCtx3 + 64 | 0; //@line 22289
   HEAP32[$198 >> 2] = $30; //@line 22290
   $199 = $ReallocAsyncCtx3 + 68 | 0; //@line 22291
   HEAP32[$199 >> 2] = $32; //@line 22292
   $200 = $ReallocAsyncCtx3 + 72 | 0; //@line 22293
   HEAP32[$200 >> 2] = $34; //@line 22294
   $201 = $ReallocAsyncCtx3 + 76 | 0; //@line 22295
   HEAP32[$201 >> 2] = $36; //@line 22296
   $202 = $ReallocAsyncCtx3 + 80 | 0; //@line 22297
   HEAP32[$202 >> 2] = $38; //@line 22298
   $203 = $ReallocAsyncCtx3 + 84 | 0; //@line 22299
   HEAP32[$203 >> 2] = $40; //@line 22300
   $204 = $ReallocAsyncCtx3 + 88 | 0; //@line 22301
   HEAP32[$204 >> 2] = $42; //@line 22302
   $205 = $ReallocAsyncCtx3 + 92 | 0; //@line 22303
   HEAP32[$205 >> 2] = $44; //@line 22304
   $206 = $ReallocAsyncCtx3 + 96 | 0; //@line 22305
   HEAP32[$206 >> 2] = $48; //@line 22306
   $207 = $ReallocAsyncCtx3 + 100 | 0; //@line 22307
   HEAP32[$207 >> 2] = $50; //@line 22308
   sp = STACKTOP; //@line 22309
   return;
  }
  ___async_unwind = 0; //@line 22312
  HEAP32[$ReallocAsyncCtx3 >> 2] = 190; //@line 22313
  $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 22314
  HEAP32[$183 >> 2] = $2; //@line 22315
  $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 22316
  HEAP32[$184 >> 2] = $4; //@line 22317
  $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 22318
  HEAP32[$185 >> 2] = $6; //@line 22319
  $186 = $ReallocAsyncCtx3 + 16 | 0; //@line 22320
  HEAP32[$186 >> 2] = $10; //@line 22321
  $187 = $ReallocAsyncCtx3 + 20 | 0; //@line 22322
  HEAP32[$187 >> 2] = $8; //@line 22323
  $188 = $ReallocAsyncCtx3 + 24 | 0; //@line 22324
  HEAP32[$188 >> 2] = $46; //@line 22325
  $189 = $ReallocAsyncCtx3 + 28 | 0; //@line 22326
  HEAP32[$189 >> 2] = $12; //@line 22327
  $190 = $ReallocAsyncCtx3 + 32 | 0; //@line 22328
  HEAP32[$190 >> 2] = $14; //@line 22329
  $191 = $ReallocAsyncCtx3 + 36 | 0; //@line 22330
  HEAP32[$191 >> 2] = $16; //@line 22331
  $192 = $ReallocAsyncCtx3 + 40 | 0; //@line 22332
  HEAP32[$192 >> 2] = $18; //@line 22333
  $193 = $ReallocAsyncCtx3 + 44 | 0; //@line 22334
  HEAP32[$193 >> 2] = $20; //@line 22335
  $194 = $ReallocAsyncCtx3 + 48 | 0; //@line 22336
  HEAP32[$194 >> 2] = $22; //@line 22337
  $195 = $ReallocAsyncCtx3 + 52 | 0; //@line 22338
  HEAP32[$195 >> 2] = $24; //@line 22339
  $196 = $ReallocAsyncCtx3 + 56 | 0; //@line 22340
  HEAP32[$196 >> 2] = $26; //@line 22341
  $197 = $ReallocAsyncCtx3 + 60 | 0; //@line 22342
  HEAP32[$197 >> 2] = $28; //@line 22343
  $198 = $ReallocAsyncCtx3 + 64 | 0; //@line 22344
  HEAP32[$198 >> 2] = $30; //@line 22345
  $199 = $ReallocAsyncCtx3 + 68 | 0; //@line 22346
  HEAP32[$199 >> 2] = $32; //@line 22347
  $200 = $ReallocAsyncCtx3 + 72 | 0; //@line 22348
  HEAP32[$200 >> 2] = $34; //@line 22349
  $201 = $ReallocAsyncCtx3 + 76 | 0; //@line 22350
  HEAP32[$201 >> 2] = $36; //@line 22351
  $202 = $ReallocAsyncCtx3 + 80 | 0; //@line 22352
  HEAP32[$202 >> 2] = $38; //@line 22353
  $203 = $ReallocAsyncCtx3 + 84 | 0; //@line 22354
  HEAP32[$203 >> 2] = $40; //@line 22355
  $204 = $ReallocAsyncCtx3 + 88 | 0; //@line 22356
  HEAP32[$204 >> 2] = $42; //@line 22357
  $205 = $ReallocAsyncCtx3 + 92 | 0; //@line 22358
  HEAP32[$205 >> 2] = $44; //@line 22359
  $206 = $ReallocAsyncCtx3 + 96 | 0; //@line 22360
  HEAP32[$206 >> 2] = $48; //@line 22361
  $207 = $ReallocAsyncCtx3 + 100 | 0; //@line 22362
  HEAP32[$207 >> 2] = $50; //@line 22363
  sp = STACKTOP; //@line 22364
  return;
 }
 L15 : while (1) {
  $208 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 22368
  $209 = $208 + 76 | 0; //@line 22369
  $210 = HEAP32[$209 >> 2] | 0; //@line 22370
  if ($210 | 0) {
   if ($210 >>> 0 <= 100) {
    label = 29; //@line 22375
    break;
   }
   HEAP32[$209 >> 2] = $210 + -100; //@line 22379
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 22384
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 22384
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 22386
   $$131 = $$03071$reg2mem$0; //@line 22386
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 22389
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 22392
    break L15;
   }
   $52 = 10036 + ($$02972$reg2mem$1 << 2) | 0; //@line 22395
   $54 = HEAP32[$52 >> 2] | 0; //@line 22396
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 22408
   break;
  }
  $84 = $54 + 72 | 0; //@line 22411
  $85 = HEAP32[$84 >> 2] | 0; //@line 22412
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 22416
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 22417
   $$03071$reg2mem$0 = $$131; //@line 22417
   $$reg2mem$0 = $52; //@line 22417
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 22424
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 22427
    $$03071$reg2mem$0 = $$131; //@line 22427
    $$reg2mem$0 = $52; //@line 22427
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[10976] = 0; //@line 22435
   return;
  }
  $275 = $$131 + 44 | 0; //@line 22438
  $276 = HEAP32[$275 >> 2] | 0; //@line 22439
  if (!$276) {
   $284 = $10 + 12 | 0; //@line 22442
   HEAP32[$284 >> 2] = 0; //@line 22443
   $286 = $32 + 4 | 0; //@line 22445
   HEAP32[$286 >> 2] = 0; //@line 22447
   HEAP32[$286 + 4 >> 2] = 0; //@line 22450
   HEAP32[$32 >> 2] = 3; //@line 22451
   $290 = $32 + 12 | 0; //@line 22452
   HEAP32[$290 >> 2] = 712; //@line 22453
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 22454
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $32) | 0; //@line 22455
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 22458
    $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 22459
    HEAP32[$291 >> 2] = $290; //@line 22460
    $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 22461
    HEAP32[$292 >> 2] = $284; //@line 22462
    $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 22463
    HEAP32[$293 >> 2] = $32; //@line 22464
    $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 22465
    HEAP32[$294 >> 2] = $10; //@line 22466
    sp = STACKTOP; //@line 22467
    return;
   }
   ___async_unwind = 0; //@line 22470
   HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 22471
   $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 22472
   HEAP32[$291 >> 2] = $290; //@line 22473
   $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 22474
   HEAP32[$292 >> 2] = $284; //@line 22475
   $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 22476
   HEAP32[$293 >> 2] = $32; //@line 22477
   $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 22478
   HEAP32[$294 >> 2] = $10; //@line 22479
   sp = STACKTOP; //@line 22480
   return;
  } else {
   $280 = HEAP32[$276 + 4 >> 2] | 0; //@line 22485
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 22486
   FUNCTION_TABLE_vii[$280 & 7]($10, $$131 + 32 | 0); //@line 22487
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 22490
    $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 22491
    HEAP32[$281 >> 2] = $275; //@line 22492
    $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 22493
    HEAP32[$282 >> 2] = $10; //@line 22494
    $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 22495
    HEAP32[$283 >> 2] = $32; //@line 22496
    sp = STACKTOP; //@line 22497
    return;
   }
   ___async_unwind = 0; //@line 22500
   HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 22501
   $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 22502
   HEAP32[$281 >> 2] = $275; //@line 22503
   $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 22504
   HEAP32[$282 >> 2] = $10; //@line 22505
   $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 22506
   HEAP32[$283 >> 2] = $32; //@line 22507
   sp = STACKTOP; //@line 22508
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 22513
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 22514
  __ZL28nsapi_dns_query_async_deletei($59); //@line 22515
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 22518
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 22519
   HEAP32[$60 >> 2] = $2; //@line 22520
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 22521
   HEAP32[$61 >> 2] = $4; //@line 22522
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 22523
   HEAP32[$62 >> 2] = $6; //@line 22524
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 22525
   HEAP32[$63 >> 2] = $10; //@line 22526
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 22527
   HEAP32[$64 >> 2] = $8; //@line 22528
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 22529
   HEAP32[$65 >> 2] = $12; //@line 22530
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 22531
   HEAP32[$66 >> 2] = $14; //@line 22532
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 22533
   HEAP32[$67 >> 2] = $16; //@line 22534
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 22535
   HEAP32[$68 >> 2] = $18; //@line 22536
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 22537
   HEAP32[$69 >> 2] = $20; //@line 22538
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 22539
   HEAP32[$70 >> 2] = $22; //@line 22540
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 22541
   HEAP32[$71 >> 2] = $24; //@line 22542
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 22543
   HEAP32[$72 >> 2] = $26; //@line 22544
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 22545
   HEAP32[$73 >> 2] = $28; //@line 22546
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 22547
   HEAP32[$74 >> 2] = $30; //@line 22548
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 22549
   HEAP32[$75 >> 2] = $32; //@line 22550
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 22551
   HEAP32[$76 >> 2] = $34; //@line 22552
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 22553
   HEAP32[$77 >> 2] = $36; //@line 22554
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 22555
   HEAP32[$78 >> 2] = $38; //@line 22556
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 22557
   HEAP32[$79 >> 2] = $40; //@line 22558
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 22559
   HEAP32[$80 >> 2] = $42; //@line 22560
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 22561
   HEAP32[$81 >> 2] = $44; //@line 22562
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 22563
   HEAP32[$82 >> 2] = $$131; //@line 22564
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 22565
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 22566
   sp = STACKTOP; //@line 22567
   return;
  }
  ___async_unwind = 0; //@line 22570
  HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 22571
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 22572
  HEAP32[$60 >> 2] = $2; //@line 22573
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 22574
  HEAP32[$61 >> 2] = $4; //@line 22575
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 22576
  HEAP32[$62 >> 2] = $6; //@line 22577
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 22578
  HEAP32[$63 >> 2] = $10; //@line 22579
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 22580
  HEAP32[$64 >> 2] = $8; //@line 22581
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 22582
  HEAP32[$65 >> 2] = $12; //@line 22583
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 22584
  HEAP32[$66 >> 2] = $14; //@line 22585
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 22586
  HEAP32[$67 >> 2] = $16; //@line 22587
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 22588
  HEAP32[$68 >> 2] = $18; //@line 22589
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 22590
  HEAP32[$69 >> 2] = $20; //@line 22591
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 22592
  HEAP32[$70 >> 2] = $22; //@line 22593
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 22594
  HEAP32[$71 >> 2] = $24; //@line 22595
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 22596
  HEAP32[$72 >> 2] = $26; //@line 22597
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 22598
  HEAP32[$73 >> 2] = $28; //@line 22599
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 22600
  HEAP32[$74 >> 2] = $30; //@line 22601
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 22602
  HEAP32[$75 >> 2] = $32; //@line 22603
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 22604
  HEAP32[$76 >> 2] = $34; //@line 22605
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 22606
  HEAP32[$77 >> 2] = $36; //@line 22607
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 22608
  HEAP32[$78 >> 2] = $38; //@line 22609
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 22610
  HEAP32[$79 >> 2] = $40; //@line 22611
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 22612
  HEAP32[$80 >> 2] = $42; //@line 22613
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 22614
  HEAP32[$81 >> 2] = $44; //@line 22615
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 22616
  HEAP32[$82 >> 2] = $$131; //@line 22617
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 22618
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 22619
  sp = STACKTOP; //@line 22620
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 22625
  $92 = $54 + 44 | 0; //@line 22626
  $93 = HEAP32[$92 >> 2] | 0; //@line 22627
  if (!$93) {
   HEAP32[$34 >> 2] = 0; //@line 22630
   $124 = HEAP32[$54 >> 2] | 0; //@line 22631
   HEAP32[$36 >> 2] = 0; //@line 22632
   HEAP32[$38 >> 2] = 187; //@line 22633
   HEAP32[$40 >> 2] = $124; //@line 22634
   HEAP32[$8 >> 2] = 724; //@line 22635
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 22636
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 22637
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 22640
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 22641
    HEAP32[$125 >> 2] = $2; //@line 22642
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 22643
    HEAP32[$126 >> 2] = $4; //@line 22644
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 22645
    HEAP32[$127 >> 2] = $6; //@line 22646
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 22647
    HEAP32[$128 >> 2] = $8; //@line 22648
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 22649
    HEAP32[$129 >> 2] = $10; //@line 22650
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 22651
    HEAP32[$130 >> 2] = $12; //@line 22652
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 22653
    HEAP32[$131 >> 2] = $14; //@line 22654
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 22655
    HEAP32[$132 >> 2] = $16; //@line 22656
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 22657
    HEAP32[$133 >> 2] = $18; //@line 22658
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 22659
    HEAP32[$134 >> 2] = $20; //@line 22660
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 22661
    HEAP32[$135 >> 2] = $22; //@line 22662
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 22663
    HEAP32[$136 >> 2] = $24; //@line 22664
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 22665
    HEAP32[$137 >> 2] = $26; //@line 22666
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 22667
    HEAP32[$138 >> 2] = $28; //@line 22668
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 22669
    HEAP32[$139 >> 2] = $30; //@line 22670
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 22671
    HEAP32[$140 >> 2] = $32; //@line 22672
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 22673
    HEAP32[$141 >> 2] = $34; //@line 22674
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 22675
    HEAP32[$142 >> 2] = $36; //@line 22676
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 22677
    HEAP32[$143 >> 2] = $38; //@line 22678
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 22679
    HEAP32[$144 >> 2] = $40; //@line 22680
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 22681
    HEAP32[$145 >> 2] = $42; //@line 22682
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 22683
    HEAP32[$146 >> 2] = $44; //@line 22684
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 22685
    HEAP32[$147 >> 2] = $52; //@line 22686
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 22687
    HEAP32[$148 >> 2] = $$131; //@line 22688
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 22689
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 22690
    sp = STACKTOP; //@line 22691
    return;
   }
   ___async_unwind = 0; //@line 22694
   HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 22695
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 22696
   HEAP32[$125 >> 2] = $2; //@line 22697
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 22698
   HEAP32[$126 >> 2] = $4; //@line 22699
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 22700
   HEAP32[$127 >> 2] = $6; //@line 22701
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 22702
   HEAP32[$128 >> 2] = $8; //@line 22703
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 22704
   HEAP32[$129 >> 2] = $10; //@line 22705
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 22706
   HEAP32[$130 >> 2] = $12; //@line 22707
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 22708
   HEAP32[$131 >> 2] = $14; //@line 22709
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 22710
   HEAP32[$132 >> 2] = $16; //@line 22711
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 22712
   HEAP32[$133 >> 2] = $18; //@line 22713
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 22714
   HEAP32[$134 >> 2] = $20; //@line 22715
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 22716
   HEAP32[$135 >> 2] = $22; //@line 22717
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 22718
   HEAP32[$136 >> 2] = $24; //@line 22719
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 22720
   HEAP32[$137 >> 2] = $26; //@line 22721
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 22722
   HEAP32[$138 >> 2] = $28; //@line 22723
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 22724
   HEAP32[$139 >> 2] = $30; //@line 22725
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 22726
   HEAP32[$140 >> 2] = $32; //@line 22727
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 22728
   HEAP32[$141 >> 2] = $34; //@line 22729
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 22730
   HEAP32[$142 >> 2] = $36; //@line 22731
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 22732
   HEAP32[$143 >> 2] = $38; //@line 22733
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 22734
   HEAP32[$144 >> 2] = $40; //@line 22735
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 22736
   HEAP32[$145 >> 2] = $42; //@line 22737
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 22738
   HEAP32[$146 >> 2] = $44; //@line 22739
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 22740
   HEAP32[$147 >> 2] = $52; //@line 22741
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 22742
   HEAP32[$148 >> 2] = $$131; //@line 22743
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 22744
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 22745
   sp = STACKTOP; //@line 22746
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 22751
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 22752
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 22753
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 22756
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 22757
    HEAP32[$98 >> 2] = $2; //@line 22758
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 22759
    HEAP32[$99 >> 2] = $4; //@line 22760
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 22761
    HEAP32[$100 >> 2] = $6; //@line 22762
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 22763
    HEAP32[$101 >> 2] = $8; //@line 22764
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 22765
    HEAP32[$102 >> 2] = $10; //@line 22766
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 22767
    HEAP32[$103 >> 2] = $52; //@line 22768
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 22769
    HEAP32[$104 >> 2] = $12; //@line 22770
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 22771
    HEAP32[$105 >> 2] = $14; //@line 22772
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 22773
    HEAP32[$106 >> 2] = $16; //@line 22774
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 22775
    HEAP32[$107 >> 2] = $18; //@line 22776
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 22777
    HEAP32[$108 >> 2] = $20; //@line 22778
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 22779
    HEAP32[$109 >> 2] = $22; //@line 22780
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 22781
    HEAP32[$110 >> 2] = $24; //@line 22782
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 22783
    HEAP32[$111 >> 2] = $92; //@line 22784
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 22785
    HEAP32[$112 >> 2] = $26; //@line 22786
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 22787
    HEAP32[$113 >> 2] = $28; //@line 22788
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 22789
    HEAP32[$114 >> 2] = $30; //@line 22790
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 22791
    HEAP32[$115 >> 2] = $$131; //@line 22792
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 22793
    HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 22794
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 22795
    HEAP32[$117 >> 2] = $32; //@line 22796
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 22797
    HEAP32[$118 >> 2] = $34; //@line 22798
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 22799
    HEAP32[$119 >> 2] = $36; //@line 22800
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 22801
    HEAP32[$120 >> 2] = $38; //@line 22802
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 22803
    HEAP32[$121 >> 2] = $40; //@line 22804
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 22805
    HEAP32[$122 >> 2] = $42; //@line 22806
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 22807
    HEAP32[$123 >> 2] = $44; //@line 22808
    sp = STACKTOP; //@line 22809
    return;
   }
   ___async_unwind = 0; //@line 22812
   HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 22813
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 22814
   HEAP32[$98 >> 2] = $2; //@line 22815
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 22816
   HEAP32[$99 >> 2] = $4; //@line 22817
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 22818
   HEAP32[$100 >> 2] = $6; //@line 22819
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 22820
   HEAP32[$101 >> 2] = $8; //@line 22821
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 22822
   HEAP32[$102 >> 2] = $10; //@line 22823
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 22824
   HEAP32[$103 >> 2] = $52; //@line 22825
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 22826
   HEAP32[$104 >> 2] = $12; //@line 22827
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 22828
   HEAP32[$105 >> 2] = $14; //@line 22829
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 22830
   HEAP32[$106 >> 2] = $16; //@line 22831
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 22832
   HEAP32[$107 >> 2] = $18; //@line 22833
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 22834
   HEAP32[$108 >> 2] = $20; //@line 22835
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 22836
   HEAP32[$109 >> 2] = $22; //@line 22837
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 22838
   HEAP32[$110 >> 2] = $24; //@line 22839
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 22840
   HEAP32[$111 >> 2] = $92; //@line 22841
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 22842
   HEAP32[$112 >> 2] = $26; //@line 22843
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 22844
   HEAP32[$113 >> 2] = $28; //@line 22845
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 22846
   HEAP32[$114 >> 2] = $30; //@line 22847
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 22848
   HEAP32[$115 >> 2] = $$131; //@line 22849
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 22850
   HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 22851
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 22852
   HEAP32[$117 >> 2] = $32; //@line 22853
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 22854
   HEAP32[$118 >> 2] = $34; //@line 22855
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 22856
   HEAP32[$119 >> 2] = $36; //@line 22857
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 22858
   HEAP32[$120 >> 2] = $38; //@line 22859
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 22860
   HEAP32[$121 >> 2] = $40; //@line 22861
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 22862
   HEAP32[$122 >> 2] = $42; //@line 22863
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 22864
   HEAP32[$123 >> 2] = $44; //@line 22865
   sp = STACKTOP; //@line 22866
   return;
  }
 } else if ((label | 0) == 29) {
  HEAP32[$209 >> 2] = 0; //@line 22871
  $214 = $208 + 44 | 0; //@line 22872
  $215 = HEAP32[$214 >> 2] | 0; //@line 22873
  if (!$215) {
   HEAP32[$14 >> 2] = 0; //@line 22876
   $246 = HEAP32[$208 >> 2] | 0; //@line 22877
   HEAP32[$16 >> 2] = 0; //@line 22878
   HEAP32[$18 >> 2] = 192; //@line 22879
   HEAP32[$20 >> 2] = $246; //@line 22880
   HEAP32[$12 >> 2] = 724; //@line 22881
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 22882
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 22883
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 22886
    $247 = $ReallocAsyncCtx13 + 4 | 0; //@line 22887
    HEAP32[$247 >> 2] = $2; //@line 22888
    $248 = $ReallocAsyncCtx13 + 8 | 0; //@line 22889
    HEAP32[$248 >> 2] = $4; //@line 22890
    $249 = $ReallocAsyncCtx13 + 12 | 0; //@line 22891
    HEAP32[$249 >> 2] = $6; //@line 22892
    $250 = $ReallocAsyncCtx13 + 16 | 0; //@line 22893
    HEAP32[$250 >> 2] = $10; //@line 22894
    $251 = $ReallocAsyncCtx13 + 20 | 0; //@line 22895
    HEAP32[$251 >> 2] = $8; //@line 22896
    $252 = $ReallocAsyncCtx13 + 24 | 0; //@line 22897
    HEAP32[$252 >> 2] = $12; //@line 22898
    $253 = $ReallocAsyncCtx13 + 28 | 0; //@line 22899
    HEAP32[$253 >> 2] = $14; //@line 22900
    $254 = $ReallocAsyncCtx13 + 32 | 0; //@line 22901
    HEAP32[$254 >> 2] = $16; //@line 22902
    $255 = $ReallocAsyncCtx13 + 36 | 0; //@line 22903
    HEAP32[$255 >> 2] = $18; //@line 22904
    $256 = $ReallocAsyncCtx13 + 40 | 0; //@line 22905
    HEAP32[$256 >> 2] = $20; //@line 22906
    $257 = $ReallocAsyncCtx13 + 44 | 0; //@line 22907
    HEAP32[$257 >> 2] = $22; //@line 22908
    $258 = $ReallocAsyncCtx13 + 48 | 0; //@line 22909
    HEAP32[$258 >> 2] = $24; //@line 22910
    $259 = $ReallocAsyncCtx13 + 52 | 0; //@line 22911
    HEAP32[$259 >> 2] = $26; //@line 22912
    $260 = $ReallocAsyncCtx13 + 56 | 0; //@line 22913
    HEAP32[$260 >> 2] = $28; //@line 22914
    $261 = $ReallocAsyncCtx13 + 60 | 0; //@line 22915
    HEAP32[$261 >> 2] = $30; //@line 22916
    $262 = $ReallocAsyncCtx13 + 64 | 0; //@line 22917
    HEAP32[$262 >> 2] = $32; //@line 22918
    $263 = $ReallocAsyncCtx13 + 68 | 0; //@line 22919
    HEAP32[$263 >> 2] = $34; //@line 22920
    $264 = $ReallocAsyncCtx13 + 72 | 0; //@line 22921
    HEAP32[$264 >> 2] = $36; //@line 22922
    $265 = $ReallocAsyncCtx13 + 76 | 0; //@line 22923
    HEAP32[$265 >> 2] = $38; //@line 22924
    $266 = $ReallocAsyncCtx13 + 80 | 0; //@line 22925
    HEAP32[$266 >> 2] = $40; //@line 22926
    $267 = $ReallocAsyncCtx13 + 84 | 0; //@line 22927
    HEAP32[$267 >> 2] = $42; //@line 22928
    $268 = $ReallocAsyncCtx13 + 88 | 0; //@line 22929
    HEAP32[$268 >> 2] = $44; //@line 22930
    $269 = $ReallocAsyncCtx13 + 92 | 0; //@line 22931
    HEAP32[$269 >> 2] = $$03071$reg2mem$0; //@line 22932
    $270 = $ReallocAsyncCtx13 + 96 | 0; //@line 22933
    HEAP32[$270 >> 2] = $$02972$reg2mem$0; //@line 22934
    $271 = $ReallocAsyncCtx13 + 100 | 0; //@line 22935
    HEAP32[$271 >> 2] = $$reg2mem$0; //@line 22936
    sp = STACKTOP; //@line 22937
    return;
   }
   ___async_unwind = 0; //@line 22940
   HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 22941
   $247 = $ReallocAsyncCtx13 + 4 | 0; //@line 22942
   HEAP32[$247 >> 2] = $2; //@line 22943
   $248 = $ReallocAsyncCtx13 + 8 | 0; //@line 22944
   HEAP32[$248 >> 2] = $4; //@line 22945
   $249 = $ReallocAsyncCtx13 + 12 | 0; //@line 22946
   HEAP32[$249 >> 2] = $6; //@line 22947
   $250 = $ReallocAsyncCtx13 + 16 | 0; //@line 22948
   HEAP32[$250 >> 2] = $10; //@line 22949
   $251 = $ReallocAsyncCtx13 + 20 | 0; //@line 22950
   HEAP32[$251 >> 2] = $8; //@line 22951
   $252 = $ReallocAsyncCtx13 + 24 | 0; //@line 22952
   HEAP32[$252 >> 2] = $12; //@line 22953
   $253 = $ReallocAsyncCtx13 + 28 | 0; //@line 22954
   HEAP32[$253 >> 2] = $14; //@line 22955
   $254 = $ReallocAsyncCtx13 + 32 | 0; //@line 22956
   HEAP32[$254 >> 2] = $16; //@line 22957
   $255 = $ReallocAsyncCtx13 + 36 | 0; //@line 22958
   HEAP32[$255 >> 2] = $18; //@line 22959
   $256 = $ReallocAsyncCtx13 + 40 | 0; //@line 22960
   HEAP32[$256 >> 2] = $20; //@line 22961
   $257 = $ReallocAsyncCtx13 + 44 | 0; //@line 22962
   HEAP32[$257 >> 2] = $22; //@line 22963
   $258 = $ReallocAsyncCtx13 + 48 | 0; //@line 22964
   HEAP32[$258 >> 2] = $24; //@line 22965
   $259 = $ReallocAsyncCtx13 + 52 | 0; //@line 22966
   HEAP32[$259 >> 2] = $26; //@line 22967
   $260 = $ReallocAsyncCtx13 + 56 | 0; //@line 22968
   HEAP32[$260 >> 2] = $28; //@line 22969
   $261 = $ReallocAsyncCtx13 + 60 | 0; //@line 22970
   HEAP32[$261 >> 2] = $30; //@line 22971
   $262 = $ReallocAsyncCtx13 + 64 | 0; //@line 22972
   HEAP32[$262 >> 2] = $32; //@line 22973
   $263 = $ReallocAsyncCtx13 + 68 | 0; //@line 22974
   HEAP32[$263 >> 2] = $34; //@line 22975
   $264 = $ReallocAsyncCtx13 + 72 | 0; //@line 22976
   HEAP32[$264 >> 2] = $36; //@line 22977
   $265 = $ReallocAsyncCtx13 + 76 | 0; //@line 22978
   HEAP32[$265 >> 2] = $38; //@line 22979
   $266 = $ReallocAsyncCtx13 + 80 | 0; //@line 22980
   HEAP32[$266 >> 2] = $40; //@line 22981
   $267 = $ReallocAsyncCtx13 + 84 | 0; //@line 22982
   HEAP32[$267 >> 2] = $42; //@line 22983
   $268 = $ReallocAsyncCtx13 + 88 | 0; //@line 22984
   HEAP32[$268 >> 2] = $44; //@line 22985
   $269 = $ReallocAsyncCtx13 + 92 | 0; //@line 22986
   HEAP32[$269 >> 2] = $$03071$reg2mem$0; //@line 22987
   $270 = $ReallocAsyncCtx13 + 96 | 0; //@line 22988
   HEAP32[$270 >> 2] = $$02972$reg2mem$0; //@line 22989
   $271 = $ReallocAsyncCtx13 + 100 | 0; //@line 22990
   HEAP32[$271 >> 2] = $$reg2mem$0; //@line 22991
   sp = STACKTOP; //@line 22992
   return;
  } else {
   $219 = HEAP32[$215 + 4 >> 2] | 0; //@line 22997
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 22998
   FUNCTION_TABLE_vii[$219 & 7]($26, $208 + 32 | 0); //@line 22999
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 23002
    $220 = $ReallocAsyncCtx4 + 4 | 0; //@line 23003
    HEAP32[$220 >> 2] = $2; //@line 23004
    $221 = $ReallocAsyncCtx4 + 8 | 0; //@line 23005
    HEAP32[$221 >> 2] = $4; //@line 23006
    $222 = $ReallocAsyncCtx4 + 12 | 0; //@line 23007
    HEAP32[$222 >> 2] = $6; //@line 23008
    $223 = $ReallocAsyncCtx4 + 16 | 0; //@line 23009
    HEAP32[$223 >> 2] = $10; //@line 23010
    $224 = $ReallocAsyncCtx4 + 20 | 0; //@line 23011
    HEAP32[$224 >> 2] = $8; //@line 23012
    $225 = $ReallocAsyncCtx4 + 24 | 0; //@line 23013
    HEAP32[$225 >> 2] = $12; //@line 23014
    $226 = $ReallocAsyncCtx4 + 28 | 0; //@line 23015
    HEAP32[$226 >> 2] = $14; //@line 23016
    $227 = $ReallocAsyncCtx4 + 32 | 0; //@line 23017
    HEAP32[$227 >> 2] = $16; //@line 23018
    $228 = $ReallocAsyncCtx4 + 36 | 0; //@line 23019
    HEAP32[$228 >> 2] = $18; //@line 23020
    $229 = $ReallocAsyncCtx4 + 40 | 0; //@line 23021
    HEAP32[$229 >> 2] = $20; //@line 23022
    $230 = $ReallocAsyncCtx4 + 44 | 0; //@line 23023
    HEAP32[$230 >> 2] = $22; //@line 23024
    $231 = $ReallocAsyncCtx4 + 48 | 0; //@line 23025
    HEAP32[$231 >> 2] = $24; //@line 23026
    $232 = $ReallocAsyncCtx4 + 52 | 0; //@line 23027
    HEAP32[$232 >> 2] = $26; //@line 23028
    $233 = $ReallocAsyncCtx4 + 56 | 0; //@line 23029
    HEAP32[$233 >> 2] = $28; //@line 23030
    $234 = $ReallocAsyncCtx4 + 60 | 0; //@line 23031
    HEAP32[$234 >> 2] = $30; //@line 23032
    $235 = $ReallocAsyncCtx4 + 64 | 0; //@line 23033
    HEAP32[$235 >> 2] = $32; //@line 23034
    $236 = $ReallocAsyncCtx4 + 68 | 0; //@line 23035
    HEAP32[$236 >> 2] = $34; //@line 23036
    $237 = $ReallocAsyncCtx4 + 72 | 0; //@line 23037
    HEAP32[$237 >> 2] = $36; //@line 23038
    $238 = $ReallocAsyncCtx4 + 76 | 0; //@line 23039
    HEAP32[$238 >> 2] = $38; //@line 23040
    $239 = $ReallocAsyncCtx4 + 80 | 0; //@line 23041
    HEAP32[$239 >> 2] = $40; //@line 23042
    $240 = $ReallocAsyncCtx4 + 84 | 0; //@line 23043
    HEAP32[$240 >> 2] = $42; //@line 23044
    $241 = $ReallocAsyncCtx4 + 88 | 0; //@line 23045
    HEAP32[$241 >> 2] = $44; //@line 23046
    $242 = $ReallocAsyncCtx4 + 92 | 0; //@line 23047
    HEAP32[$242 >> 2] = $214; //@line 23048
    $243 = $ReallocAsyncCtx4 + 96 | 0; //@line 23049
    HEAP32[$243 >> 2] = $$reg2mem$0; //@line 23050
    $244 = $ReallocAsyncCtx4 + 100 | 0; //@line 23051
    HEAP32[$244 >> 2] = $$03071$reg2mem$0; //@line 23052
    $245 = $ReallocAsyncCtx4 + 104 | 0; //@line 23053
    HEAP32[$245 >> 2] = $$02972$reg2mem$0; //@line 23054
    sp = STACKTOP; //@line 23055
    return;
   }
   ___async_unwind = 0; //@line 23058
   HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 23059
   $220 = $ReallocAsyncCtx4 + 4 | 0; //@line 23060
   HEAP32[$220 >> 2] = $2; //@line 23061
   $221 = $ReallocAsyncCtx4 + 8 | 0; //@line 23062
   HEAP32[$221 >> 2] = $4; //@line 23063
   $222 = $ReallocAsyncCtx4 + 12 | 0; //@line 23064
   HEAP32[$222 >> 2] = $6; //@line 23065
   $223 = $ReallocAsyncCtx4 + 16 | 0; //@line 23066
   HEAP32[$223 >> 2] = $10; //@line 23067
   $224 = $ReallocAsyncCtx4 + 20 | 0; //@line 23068
   HEAP32[$224 >> 2] = $8; //@line 23069
   $225 = $ReallocAsyncCtx4 + 24 | 0; //@line 23070
   HEAP32[$225 >> 2] = $12; //@line 23071
   $226 = $ReallocAsyncCtx4 + 28 | 0; //@line 23072
   HEAP32[$226 >> 2] = $14; //@line 23073
   $227 = $ReallocAsyncCtx4 + 32 | 0; //@line 23074
   HEAP32[$227 >> 2] = $16; //@line 23075
   $228 = $ReallocAsyncCtx4 + 36 | 0; //@line 23076
   HEAP32[$228 >> 2] = $18; //@line 23077
   $229 = $ReallocAsyncCtx4 + 40 | 0; //@line 23078
   HEAP32[$229 >> 2] = $20; //@line 23079
   $230 = $ReallocAsyncCtx4 + 44 | 0; //@line 23080
   HEAP32[$230 >> 2] = $22; //@line 23081
   $231 = $ReallocAsyncCtx4 + 48 | 0; //@line 23082
   HEAP32[$231 >> 2] = $24; //@line 23083
   $232 = $ReallocAsyncCtx4 + 52 | 0; //@line 23084
   HEAP32[$232 >> 2] = $26; //@line 23085
   $233 = $ReallocAsyncCtx4 + 56 | 0; //@line 23086
   HEAP32[$233 >> 2] = $28; //@line 23087
   $234 = $ReallocAsyncCtx4 + 60 | 0; //@line 23088
   HEAP32[$234 >> 2] = $30; //@line 23089
   $235 = $ReallocAsyncCtx4 + 64 | 0; //@line 23090
   HEAP32[$235 >> 2] = $32; //@line 23091
   $236 = $ReallocAsyncCtx4 + 68 | 0; //@line 23092
   HEAP32[$236 >> 2] = $34; //@line 23093
   $237 = $ReallocAsyncCtx4 + 72 | 0; //@line 23094
   HEAP32[$237 >> 2] = $36; //@line 23095
   $238 = $ReallocAsyncCtx4 + 76 | 0; //@line 23096
   HEAP32[$238 >> 2] = $38; //@line 23097
   $239 = $ReallocAsyncCtx4 + 80 | 0; //@line 23098
   HEAP32[$239 >> 2] = $40; //@line 23099
   $240 = $ReallocAsyncCtx4 + 84 | 0; //@line 23100
   HEAP32[$240 >> 2] = $42; //@line 23101
   $241 = $ReallocAsyncCtx4 + 88 | 0; //@line 23102
   HEAP32[$241 >> 2] = $44; //@line 23103
   $242 = $ReallocAsyncCtx4 + 92 | 0; //@line 23104
   HEAP32[$242 >> 2] = $214; //@line 23105
   $243 = $ReallocAsyncCtx4 + 96 | 0; //@line 23106
   HEAP32[$243 >> 2] = $$reg2mem$0; //@line 23107
   $244 = $ReallocAsyncCtx4 + 100 | 0; //@line 23108
   HEAP32[$244 >> 2] = $$03071$reg2mem$0; //@line 23109
   $245 = $ReallocAsyncCtx4 + 104 | 0; //@line 23110
   HEAP32[$245 >> 2] = $$02972$reg2mem$0; //@line 23111
   sp = STACKTOP; //@line 23112
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_121($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 21023
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21027
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21029
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21031
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21033
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21035
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21037
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21039
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21041
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21043
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21045
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21047
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21049
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21051
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21053
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21055
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21057
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21059
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21061
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21063
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 21065
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21067
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 21069
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 21071
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 21073
 $214 = HEAP32[$12 >> 2] | 0; //@line 21074
 if ($214 | 0) {
  $217 = HEAP32[$214 + 8 >> 2] | 0; //@line 21078
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(104) | 0; //@line 21079
  FUNCTION_TABLE_vi[$217 & 511]($30); //@line 21080
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 194; //@line 21083
   $218 = $ReallocAsyncCtx5 + 4 | 0; //@line 21084
   HEAP32[$218 >> 2] = $2; //@line 21085
   $219 = $ReallocAsyncCtx5 + 8 | 0; //@line 21086
   HEAP32[$219 >> 2] = $4; //@line 21087
   $220 = $ReallocAsyncCtx5 + 12 | 0; //@line 21088
   HEAP32[$220 >> 2] = $6; //@line 21089
   $221 = $ReallocAsyncCtx5 + 16 | 0; //@line 21090
   HEAP32[$221 >> 2] = $8; //@line 21091
   $222 = $ReallocAsyncCtx5 + 20 | 0; //@line 21092
   HEAP32[$222 >> 2] = $10; //@line 21093
   $223 = $ReallocAsyncCtx5 + 24 | 0; //@line 21094
   HEAP32[$223 >> 2] = $12; //@line 21095
   $224 = $ReallocAsyncCtx5 + 28 | 0; //@line 21096
   HEAP32[$224 >> 2] = $14; //@line 21097
   $225 = $ReallocAsyncCtx5 + 32 | 0; //@line 21098
   HEAP32[$225 >> 2] = $16; //@line 21099
   $226 = $ReallocAsyncCtx5 + 36 | 0; //@line 21100
   HEAP32[$226 >> 2] = $18; //@line 21101
   $227 = $ReallocAsyncCtx5 + 40 | 0; //@line 21102
   HEAP32[$227 >> 2] = $20; //@line 21103
   $228 = $ReallocAsyncCtx5 + 44 | 0; //@line 21104
   HEAP32[$228 >> 2] = $22; //@line 21105
   $229 = $ReallocAsyncCtx5 + 48 | 0; //@line 21106
   HEAP32[$229 >> 2] = $24; //@line 21107
   $230 = $ReallocAsyncCtx5 + 52 | 0; //@line 21108
   HEAP32[$230 >> 2] = $26; //@line 21109
   $231 = $ReallocAsyncCtx5 + 56 | 0; //@line 21110
   HEAP32[$231 >> 2] = $28; //@line 21111
   $232 = $ReallocAsyncCtx5 + 60 | 0; //@line 21112
   HEAP32[$232 >> 2] = $30; //@line 21113
   $233 = $ReallocAsyncCtx5 + 64 | 0; //@line 21114
   HEAP32[$233 >> 2] = $32; //@line 21115
   $234 = $ReallocAsyncCtx5 + 68 | 0; //@line 21116
   HEAP32[$234 >> 2] = $34; //@line 21117
   $235 = $ReallocAsyncCtx5 + 72 | 0; //@line 21118
   HEAP32[$235 >> 2] = $36; //@line 21119
   $236 = $ReallocAsyncCtx5 + 76 | 0; //@line 21120
   HEAP32[$236 >> 2] = $38; //@line 21121
   $237 = $ReallocAsyncCtx5 + 80 | 0; //@line 21122
   HEAP32[$237 >> 2] = $40; //@line 21123
   $238 = $ReallocAsyncCtx5 + 84 | 0; //@line 21124
   HEAP32[$238 >> 2] = $42; //@line 21125
   $239 = $ReallocAsyncCtx5 + 88 | 0; //@line 21126
   HEAP32[$239 >> 2] = $44; //@line 21127
   $240 = $ReallocAsyncCtx5 + 92 | 0; //@line 21128
   HEAP32[$240 >> 2] = $46; //@line 21129
   $241 = $ReallocAsyncCtx5 + 96 | 0; //@line 21130
   HEAP32[$241 >> 2] = $48; //@line 21131
   $242 = $ReallocAsyncCtx5 + 100 | 0; //@line 21132
   HEAP32[$242 >> 2] = $50; //@line 21133
   sp = STACKTOP; //@line 21134
   return;
  }
  ___async_unwind = 0; //@line 21137
  HEAP32[$ReallocAsyncCtx5 >> 2] = 194; //@line 21138
  $218 = $ReallocAsyncCtx5 + 4 | 0; //@line 21139
  HEAP32[$218 >> 2] = $2; //@line 21140
  $219 = $ReallocAsyncCtx5 + 8 | 0; //@line 21141
  HEAP32[$219 >> 2] = $4; //@line 21142
  $220 = $ReallocAsyncCtx5 + 12 | 0; //@line 21143
  HEAP32[$220 >> 2] = $6; //@line 21144
  $221 = $ReallocAsyncCtx5 + 16 | 0; //@line 21145
  HEAP32[$221 >> 2] = $8; //@line 21146
  $222 = $ReallocAsyncCtx5 + 20 | 0; //@line 21147
  HEAP32[$222 >> 2] = $10; //@line 21148
  $223 = $ReallocAsyncCtx5 + 24 | 0; //@line 21149
  HEAP32[$223 >> 2] = $12; //@line 21150
  $224 = $ReallocAsyncCtx5 + 28 | 0; //@line 21151
  HEAP32[$224 >> 2] = $14; //@line 21152
  $225 = $ReallocAsyncCtx5 + 32 | 0; //@line 21153
  HEAP32[$225 >> 2] = $16; //@line 21154
  $226 = $ReallocAsyncCtx5 + 36 | 0; //@line 21155
  HEAP32[$226 >> 2] = $18; //@line 21156
  $227 = $ReallocAsyncCtx5 + 40 | 0; //@line 21157
  HEAP32[$227 >> 2] = $20; //@line 21158
  $228 = $ReallocAsyncCtx5 + 44 | 0; //@line 21159
  HEAP32[$228 >> 2] = $22; //@line 21160
  $229 = $ReallocAsyncCtx5 + 48 | 0; //@line 21161
  HEAP32[$229 >> 2] = $24; //@line 21162
  $230 = $ReallocAsyncCtx5 + 52 | 0; //@line 21163
  HEAP32[$230 >> 2] = $26; //@line 21164
  $231 = $ReallocAsyncCtx5 + 56 | 0; //@line 21165
  HEAP32[$231 >> 2] = $28; //@line 21166
  $232 = $ReallocAsyncCtx5 + 60 | 0; //@line 21167
  HEAP32[$232 >> 2] = $30; //@line 21168
  $233 = $ReallocAsyncCtx5 + 64 | 0; //@line 21169
  HEAP32[$233 >> 2] = $32; //@line 21170
  $234 = $ReallocAsyncCtx5 + 68 | 0; //@line 21171
  HEAP32[$234 >> 2] = $34; //@line 21172
  $235 = $ReallocAsyncCtx5 + 72 | 0; //@line 21173
  HEAP32[$235 >> 2] = $36; //@line 21174
  $236 = $ReallocAsyncCtx5 + 76 | 0; //@line 21175
  HEAP32[$236 >> 2] = $38; //@line 21176
  $237 = $ReallocAsyncCtx5 + 80 | 0; //@line 21177
  HEAP32[$237 >> 2] = $40; //@line 21178
  $238 = $ReallocAsyncCtx5 + 84 | 0; //@line 21179
  HEAP32[$238 >> 2] = $42; //@line 21180
  $239 = $ReallocAsyncCtx5 + 88 | 0; //@line 21181
  HEAP32[$239 >> 2] = $44; //@line 21182
  $240 = $ReallocAsyncCtx5 + 92 | 0; //@line 21183
  HEAP32[$240 >> 2] = $46; //@line 21184
  $241 = $ReallocAsyncCtx5 + 96 | 0; //@line 21185
  HEAP32[$241 >> 2] = $48; //@line 21186
  $242 = $ReallocAsyncCtx5 + 100 | 0; //@line 21187
  HEAP32[$242 >> 2] = $50; //@line 21188
  sp = STACKTOP; //@line 21189
  return;
 }
 $243 = HEAP32[$28 >> 2] | 0; //@line 21192
 if (!$243) {
  $$02972$reg2mem$0 = $48; //@line 21195
  $$03071$reg2mem$0 = $46; //@line 21195
  $$reg2mem$0 = $50; //@line 21195
 } else {
  $246 = HEAP32[$243 + 8 >> 2] | 0; //@line 21198
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 21199
  FUNCTION_TABLE_vi[$246 & 511]($26); //@line 21200
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 195; //@line 21203
   $247 = $ReallocAsyncCtx6 + 4 | 0; //@line 21204
   HEAP32[$247 >> 2] = $2; //@line 21205
   $248 = $ReallocAsyncCtx6 + 8 | 0; //@line 21206
   HEAP32[$248 >> 2] = $4; //@line 21207
   $249 = $ReallocAsyncCtx6 + 12 | 0; //@line 21208
   HEAP32[$249 >> 2] = $6; //@line 21209
   $250 = $ReallocAsyncCtx6 + 16 | 0; //@line 21210
   HEAP32[$250 >> 2] = $8; //@line 21211
   $251 = $ReallocAsyncCtx6 + 20 | 0; //@line 21212
   HEAP32[$251 >> 2] = $10; //@line 21213
   $252 = $ReallocAsyncCtx6 + 24 | 0; //@line 21214
   HEAP32[$252 >> 2] = $12; //@line 21215
   $253 = $ReallocAsyncCtx6 + 28 | 0; //@line 21216
   HEAP32[$253 >> 2] = $14; //@line 21217
   $254 = $ReallocAsyncCtx6 + 32 | 0; //@line 21218
   HEAP32[$254 >> 2] = $16; //@line 21219
   $255 = $ReallocAsyncCtx6 + 36 | 0; //@line 21220
   HEAP32[$255 >> 2] = $18; //@line 21221
   $256 = $ReallocAsyncCtx6 + 40 | 0; //@line 21222
   HEAP32[$256 >> 2] = $20; //@line 21223
   $257 = $ReallocAsyncCtx6 + 44 | 0; //@line 21224
   HEAP32[$257 >> 2] = $22; //@line 21225
   $258 = $ReallocAsyncCtx6 + 48 | 0; //@line 21226
   HEAP32[$258 >> 2] = $24; //@line 21227
   $259 = $ReallocAsyncCtx6 + 52 | 0; //@line 21228
   HEAP32[$259 >> 2] = $26; //@line 21229
   $260 = $ReallocAsyncCtx6 + 56 | 0; //@line 21230
   HEAP32[$260 >> 2] = $28; //@line 21231
   $261 = $ReallocAsyncCtx6 + 60 | 0; //@line 21232
   HEAP32[$261 >> 2] = $30; //@line 21233
   $262 = $ReallocAsyncCtx6 + 64 | 0; //@line 21234
   HEAP32[$262 >> 2] = $32; //@line 21235
   $263 = $ReallocAsyncCtx6 + 68 | 0; //@line 21236
   HEAP32[$263 >> 2] = $34; //@line 21237
   $264 = $ReallocAsyncCtx6 + 72 | 0; //@line 21238
   HEAP32[$264 >> 2] = $36; //@line 21239
   $265 = $ReallocAsyncCtx6 + 76 | 0; //@line 21240
   HEAP32[$265 >> 2] = $38; //@line 21241
   $266 = $ReallocAsyncCtx6 + 80 | 0; //@line 21242
   HEAP32[$266 >> 2] = $40; //@line 21243
   $267 = $ReallocAsyncCtx6 + 84 | 0; //@line 21244
   HEAP32[$267 >> 2] = $42; //@line 21245
   $268 = $ReallocAsyncCtx6 + 88 | 0; //@line 21246
   HEAP32[$268 >> 2] = $44; //@line 21247
   $269 = $ReallocAsyncCtx6 + 92 | 0; //@line 21248
   HEAP32[$269 >> 2] = $46; //@line 21249
   $270 = $ReallocAsyncCtx6 + 96 | 0; //@line 21250
   HEAP32[$270 >> 2] = $48; //@line 21251
   $271 = $ReallocAsyncCtx6 + 100 | 0; //@line 21252
   HEAP32[$271 >> 2] = $50; //@line 21253
   sp = STACKTOP; //@line 21254
   return;
  }
  ___async_unwind = 0; //@line 21257
  HEAP32[$ReallocAsyncCtx6 >> 2] = 195; //@line 21258
  $247 = $ReallocAsyncCtx6 + 4 | 0; //@line 21259
  HEAP32[$247 >> 2] = $2; //@line 21260
  $248 = $ReallocAsyncCtx6 + 8 | 0; //@line 21261
  HEAP32[$248 >> 2] = $4; //@line 21262
  $249 = $ReallocAsyncCtx6 + 12 | 0; //@line 21263
  HEAP32[$249 >> 2] = $6; //@line 21264
  $250 = $ReallocAsyncCtx6 + 16 | 0; //@line 21265
  HEAP32[$250 >> 2] = $8; //@line 21266
  $251 = $ReallocAsyncCtx6 + 20 | 0; //@line 21267
  HEAP32[$251 >> 2] = $10; //@line 21268
  $252 = $ReallocAsyncCtx6 + 24 | 0; //@line 21269
  HEAP32[$252 >> 2] = $12; //@line 21270
  $253 = $ReallocAsyncCtx6 + 28 | 0; //@line 21271
  HEAP32[$253 >> 2] = $14; //@line 21272
  $254 = $ReallocAsyncCtx6 + 32 | 0; //@line 21273
  HEAP32[$254 >> 2] = $16; //@line 21274
  $255 = $ReallocAsyncCtx6 + 36 | 0; //@line 21275
  HEAP32[$255 >> 2] = $18; //@line 21276
  $256 = $ReallocAsyncCtx6 + 40 | 0; //@line 21277
  HEAP32[$256 >> 2] = $20; //@line 21278
  $257 = $ReallocAsyncCtx6 + 44 | 0; //@line 21279
  HEAP32[$257 >> 2] = $22; //@line 21280
  $258 = $ReallocAsyncCtx6 + 48 | 0; //@line 21281
  HEAP32[$258 >> 2] = $24; //@line 21282
  $259 = $ReallocAsyncCtx6 + 52 | 0; //@line 21283
  HEAP32[$259 >> 2] = $26; //@line 21284
  $260 = $ReallocAsyncCtx6 + 56 | 0; //@line 21285
  HEAP32[$260 >> 2] = $28; //@line 21286
  $261 = $ReallocAsyncCtx6 + 60 | 0; //@line 21287
  HEAP32[$261 >> 2] = $30; //@line 21288
  $262 = $ReallocAsyncCtx6 + 64 | 0; //@line 21289
  HEAP32[$262 >> 2] = $32; //@line 21290
  $263 = $ReallocAsyncCtx6 + 68 | 0; //@line 21291
  HEAP32[$263 >> 2] = $34; //@line 21292
  $264 = $ReallocAsyncCtx6 + 72 | 0; //@line 21293
  HEAP32[$264 >> 2] = $36; //@line 21294
  $265 = $ReallocAsyncCtx6 + 76 | 0; //@line 21295
  HEAP32[$265 >> 2] = $38; //@line 21296
  $266 = $ReallocAsyncCtx6 + 80 | 0; //@line 21297
  HEAP32[$266 >> 2] = $40; //@line 21298
  $267 = $ReallocAsyncCtx6 + 84 | 0; //@line 21299
  HEAP32[$267 >> 2] = $42; //@line 21300
  $268 = $ReallocAsyncCtx6 + 88 | 0; //@line 21301
  HEAP32[$268 >> 2] = $44; //@line 21302
  $269 = $ReallocAsyncCtx6 + 92 | 0; //@line 21303
  HEAP32[$269 >> 2] = $46; //@line 21304
  $270 = $ReallocAsyncCtx6 + 96 | 0; //@line 21305
  HEAP32[$270 >> 2] = $48; //@line 21306
  $271 = $ReallocAsyncCtx6 + 100 | 0; //@line 21307
  HEAP32[$271 >> 2] = $50; //@line 21308
  sp = STACKTOP; //@line 21309
  return;
 }
 L15 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 21316
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 21316
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 21318
   $$131 = $$03071$reg2mem$0; //@line 21318
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 21321
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 21324
    break L15;
   }
   $52 = 10036 + ($$02972$reg2mem$1 << 2) | 0; //@line 21327
   $54 = HEAP32[$52 >> 2] | 0; //@line 21328
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 21340
   break;
  }
  $84 = $54 + 72 | 0; //@line 21343
  $85 = HEAP32[$84 >> 2] | 0; //@line 21344
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 21348
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 21354
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 21358
  $151 = $150 + 76 | 0; //@line 21359
  $152 = HEAP32[$151 >> 2] | 0; //@line 21360
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 21363
   $$03071$reg2mem$0 = $$131; //@line 21363
   $$reg2mem$0 = $52; //@line 21363
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 21368
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 21372
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 21373
  $$03071$reg2mem$0 = $$131; //@line 21373
  $$reg2mem$0 = $52; //@line 21373
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[10976] = 0; //@line 21378
   return;
  }
  $275 = $$131 + 44 | 0; //@line 21381
  $276 = HEAP32[$275 >> 2] | 0; //@line 21382
  if (!$276) {
   $284 = $8 + 12 | 0; //@line 21385
   HEAP32[$284 >> 2] = 0; //@line 21386
   $286 = $32 + 4 | 0; //@line 21388
   HEAP32[$286 >> 2] = 0; //@line 21390
   HEAP32[$286 + 4 >> 2] = 0; //@line 21393
   HEAP32[$32 >> 2] = 3; //@line 21394
   $290 = $32 + 12 | 0; //@line 21395
   HEAP32[$290 >> 2] = 712; //@line 21396
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 21397
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $32) | 0; //@line 21398
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 21401
    $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 21402
    HEAP32[$291 >> 2] = $290; //@line 21403
    $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 21404
    HEAP32[$292 >> 2] = $284; //@line 21405
    $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 21406
    HEAP32[$293 >> 2] = $32; //@line 21407
    $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 21408
    HEAP32[$294 >> 2] = $8; //@line 21409
    sp = STACKTOP; //@line 21410
    return;
   }
   ___async_unwind = 0; //@line 21413
   HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 21414
   $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 21415
   HEAP32[$291 >> 2] = $290; //@line 21416
   $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 21417
   HEAP32[$292 >> 2] = $284; //@line 21418
   $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 21419
   HEAP32[$293 >> 2] = $32; //@line 21420
   $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 21421
   HEAP32[$294 >> 2] = $8; //@line 21422
   sp = STACKTOP; //@line 21423
   return;
  } else {
   $280 = HEAP32[$276 + 4 >> 2] | 0; //@line 21428
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 21429
   FUNCTION_TABLE_vii[$280 & 7]($8, $$131 + 32 | 0); //@line 21430
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 21433
    $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 21434
    HEAP32[$281 >> 2] = $275; //@line 21435
    $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 21436
    HEAP32[$282 >> 2] = $8; //@line 21437
    $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 21438
    HEAP32[$283 >> 2] = $32; //@line 21439
    sp = STACKTOP; //@line 21440
    return;
   }
   ___async_unwind = 0; //@line 21443
   HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 21444
   $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 21445
   HEAP32[$281 >> 2] = $275; //@line 21446
   $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 21447
   HEAP32[$282 >> 2] = $8; //@line 21448
   $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 21449
   HEAP32[$283 >> 2] = $32; //@line 21450
   sp = STACKTOP; //@line 21451
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 21456
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 21457
  __ZL28nsapi_dns_query_async_deletei($59); //@line 21458
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 21461
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 21462
   HEAP32[$60 >> 2] = $2; //@line 21463
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 21464
   HEAP32[$61 >> 2] = $4; //@line 21465
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 21466
   HEAP32[$62 >> 2] = $6; //@line 21467
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 21468
   HEAP32[$63 >> 2] = $8; //@line 21469
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 21470
   HEAP32[$64 >> 2] = $10; //@line 21471
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 21472
   HEAP32[$65 >> 2] = $12; //@line 21473
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 21474
   HEAP32[$66 >> 2] = $14; //@line 21475
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 21476
   HEAP32[$67 >> 2] = $16; //@line 21477
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 21478
   HEAP32[$68 >> 2] = $18; //@line 21479
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 21480
   HEAP32[$69 >> 2] = $20; //@line 21481
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 21482
   HEAP32[$70 >> 2] = $22; //@line 21483
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 21484
   HEAP32[$71 >> 2] = $24; //@line 21485
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 21486
   HEAP32[$72 >> 2] = $26; //@line 21487
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 21488
   HEAP32[$73 >> 2] = $28; //@line 21489
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 21490
   HEAP32[$74 >> 2] = $30; //@line 21491
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 21492
   HEAP32[$75 >> 2] = $32; //@line 21493
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 21494
   HEAP32[$76 >> 2] = $34; //@line 21495
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 21496
   HEAP32[$77 >> 2] = $36; //@line 21497
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 21498
   HEAP32[$78 >> 2] = $38; //@line 21499
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 21500
   HEAP32[$79 >> 2] = $40; //@line 21501
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 21502
   HEAP32[$80 >> 2] = $42; //@line 21503
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 21504
   HEAP32[$81 >> 2] = $44; //@line 21505
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 21506
   HEAP32[$82 >> 2] = $$131; //@line 21507
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 21508
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 21509
   sp = STACKTOP; //@line 21510
   return;
  }
  ___async_unwind = 0; //@line 21513
  HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 21514
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 21515
  HEAP32[$60 >> 2] = $2; //@line 21516
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 21517
  HEAP32[$61 >> 2] = $4; //@line 21518
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 21519
  HEAP32[$62 >> 2] = $6; //@line 21520
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 21521
  HEAP32[$63 >> 2] = $8; //@line 21522
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 21523
  HEAP32[$64 >> 2] = $10; //@line 21524
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 21525
  HEAP32[$65 >> 2] = $12; //@line 21526
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 21527
  HEAP32[$66 >> 2] = $14; //@line 21528
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 21529
  HEAP32[$67 >> 2] = $16; //@line 21530
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 21531
  HEAP32[$68 >> 2] = $18; //@line 21532
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 21533
  HEAP32[$69 >> 2] = $20; //@line 21534
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 21535
  HEAP32[$70 >> 2] = $22; //@line 21536
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 21537
  HEAP32[$71 >> 2] = $24; //@line 21538
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 21539
  HEAP32[$72 >> 2] = $26; //@line 21540
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 21541
  HEAP32[$73 >> 2] = $28; //@line 21542
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 21543
  HEAP32[$74 >> 2] = $30; //@line 21544
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 21545
  HEAP32[$75 >> 2] = $32; //@line 21546
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 21547
  HEAP32[$76 >> 2] = $34; //@line 21548
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 21549
  HEAP32[$77 >> 2] = $36; //@line 21550
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 21551
  HEAP32[$78 >> 2] = $38; //@line 21552
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 21553
  HEAP32[$79 >> 2] = $40; //@line 21554
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 21555
  HEAP32[$80 >> 2] = $42; //@line 21556
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 21557
  HEAP32[$81 >> 2] = $44; //@line 21558
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 21559
  HEAP32[$82 >> 2] = $$131; //@line 21560
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 21561
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 21562
  sp = STACKTOP; //@line 21563
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 21568
  $92 = $54 + 44 | 0; //@line 21569
  $93 = HEAP32[$92 >> 2] | 0; //@line 21570
  if (!$93) {
   HEAP32[$34 >> 2] = 0; //@line 21573
   $124 = HEAP32[$54 >> 2] | 0; //@line 21574
   HEAP32[$36 >> 2] = 0; //@line 21575
   HEAP32[$38 >> 2] = 187; //@line 21576
   HEAP32[$40 >> 2] = $124; //@line 21577
   HEAP32[$10 >> 2] = 724; //@line 21578
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 21579
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 21580
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 21583
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 21584
    HEAP32[$125 >> 2] = $2; //@line 21585
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 21586
    HEAP32[$126 >> 2] = $4; //@line 21587
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 21588
    HEAP32[$127 >> 2] = $6; //@line 21589
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 21590
    HEAP32[$128 >> 2] = $10; //@line 21591
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 21592
    HEAP32[$129 >> 2] = $8; //@line 21593
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 21594
    HEAP32[$130 >> 2] = $12; //@line 21595
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 21596
    HEAP32[$131 >> 2] = $14; //@line 21597
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 21598
    HEAP32[$132 >> 2] = $16; //@line 21599
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 21600
    HEAP32[$133 >> 2] = $18; //@line 21601
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 21602
    HEAP32[$134 >> 2] = $20; //@line 21603
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 21604
    HEAP32[$135 >> 2] = $22; //@line 21605
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 21606
    HEAP32[$136 >> 2] = $24; //@line 21607
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 21608
    HEAP32[$137 >> 2] = $26; //@line 21609
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 21610
    HEAP32[$138 >> 2] = $28; //@line 21611
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 21612
    HEAP32[$139 >> 2] = $30; //@line 21613
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 21614
    HEAP32[$140 >> 2] = $32; //@line 21615
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 21616
    HEAP32[$141 >> 2] = $34; //@line 21617
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 21618
    HEAP32[$142 >> 2] = $36; //@line 21619
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 21620
    HEAP32[$143 >> 2] = $38; //@line 21621
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 21622
    HEAP32[$144 >> 2] = $40; //@line 21623
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 21624
    HEAP32[$145 >> 2] = $42; //@line 21625
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 21626
    HEAP32[$146 >> 2] = $44; //@line 21627
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 21628
    HEAP32[$147 >> 2] = $52; //@line 21629
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 21630
    HEAP32[$148 >> 2] = $$131; //@line 21631
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 21632
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 21633
    sp = STACKTOP; //@line 21634
    return;
   }
   ___async_unwind = 0; //@line 21637
   HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 21638
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 21639
   HEAP32[$125 >> 2] = $2; //@line 21640
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 21641
   HEAP32[$126 >> 2] = $4; //@line 21642
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 21643
   HEAP32[$127 >> 2] = $6; //@line 21644
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 21645
   HEAP32[$128 >> 2] = $10; //@line 21646
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 21647
   HEAP32[$129 >> 2] = $8; //@line 21648
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 21649
   HEAP32[$130 >> 2] = $12; //@line 21650
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 21651
   HEAP32[$131 >> 2] = $14; //@line 21652
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 21653
   HEAP32[$132 >> 2] = $16; //@line 21654
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 21655
   HEAP32[$133 >> 2] = $18; //@line 21656
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 21657
   HEAP32[$134 >> 2] = $20; //@line 21658
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 21659
   HEAP32[$135 >> 2] = $22; //@line 21660
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 21661
   HEAP32[$136 >> 2] = $24; //@line 21662
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 21663
   HEAP32[$137 >> 2] = $26; //@line 21664
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 21665
   HEAP32[$138 >> 2] = $28; //@line 21666
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 21667
   HEAP32[$139 >> 2] = $30; //@line 21668
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 21669
   HEAP32[$140 >> 2] = $32; //@line 21670
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 21671
   HEAP32[$141 >> 2] = $34; //@line 21672
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 21673
   HEAP32[$142 >> 2] = $36; //@line 21674
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 21675
   HEAP32[$143 >> 2] = $38; //@line 21676
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 21677
   HEAP32[$144 >> 2] = $40; //@line 21678
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 21679
   HEAP32[$145 >> 2] = $42; //@line 21680
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 21681
   HEAP32[$146 >> 2] = $44; //@line 21682
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 21683
   HEAP32[$147 >> 2] = $52; //@line 21684
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 21685
   HEAP32[$148 >> 2] = $$131; //@line 21686
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 21687
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 21688
   sp = STACKTOP; //@line 21689
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 21694
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 21695
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 21696
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 21699
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 21700
    HEAP32[$98 >> 2] = $2; //@line 21701
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 21702
    HEAP32[$99 >> 2] = $4; //@line 21703
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 21704
    HEAP32[$100 >> 2] = $6; //@line 21705
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 21706
    HEAP32[$101 >> 2] = $10; //@line 21707
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 21708
    HEAP32[$102 >> 2] = $8; //@line 21709
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 21710
    HEAP32[$103 >> 2] = $52; //@line 21711
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 21712
    HEAP32[$104 >> 2] = $12; //@line 21713
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 21714
    HEAP32[$105 >> 2] = $14; //@line 21715
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 21716
    HEAP32[$106 >> 2] = $16; //@line 21717
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 21718
    HEAP32[$107 >> 2] = $18; //@line 21719
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 21720
    HEAP32[$108 >> 2] = $20; //@line 21721
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 21722
    HEAP32[$109 >> 2] = $22; //@line 21723
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 21724
    HEAP32[$110 >> 2] = $24; //@line 21725
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 21726
    HEAP32[$111 >> 2] = $92; //@line 21727
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 21728
    HEAP32[$112 >> 2] = $26; //@line 21729
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 21730
    HEAP32[$113 >> 2] = $28; //@line 21731
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 21732
    HEAP32[$114 >> 2] = $30; //@line 21733
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 21734
    HEAP32[$115 >> 2] = $$131; //@line 21735
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 21736
    HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 21737
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 21738
    HEAP32[$117 >> 2] = $32; //@line 21739
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 21740
    HEAP32[$118 >> 2] = $34; //@line 21741
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 21742
    HEAP32[$119 >> 2] = $36; //@line 21743
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 21744
    HEAP32[$120 >> 2] = $38; //@line 21745
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 21746
    HEAP32[$121 >> 2] = $40; //@line 21747
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 21748
    HEAP32[$122 >> 2] = $42; //@line 21749
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 21750
    HEAP32[$123 >> 2] = $44; //@line 21751
    sp = STACKTOP; //@line 21752
    return;
   }
   ___async_unwind = 0; //@line 21755
   HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 21756
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 21757
   HEAP32[$98 >> 2] = $2; //@line 21758
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 21759
   HEAP32[$99 >> 2] = $4; //@line 21760
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 21761
   HEAP32[$100 >> 2] = $6; //@line 21762
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 21763
   HEAP32[$101 >> 2] = $10; //@line 21764
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 21765
   HEAP32[$102 >> 2] = $8; //@line 21766
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 21767
   HEAP32[$103 >> 2] = $52; //@line 21768
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 21769
   HEAP32[$104 >> 2] = $12; //@line 21770
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 21771
   HEAP32[$105 >> 2] = $14; //@line 21772
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 21773
   HEAP32[$106 >> 2] = $16; //@line 21774
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 21775
   HEAP32[$107 >> 2] = $18; //@line 21776
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 21777
   HEAP32[$108 >> 2] = $20; //@line 21778
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 21779
   HEAP32[$109 >> 2] = $22; //@line 21780
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 21781
   HEAP32[$110 >> 2] = $24; //@line 21782
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 21783
   HEAP32[$111 >> 2] = $92; //@line 21784
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 21785
   HEAP32[$112 >> 2] = $26; //@line 21786
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 21787
   HEAP32[$113 >> 2] = $28; //@line 21788
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 21789
   HEAP32[$114 >> 2] = $30; //@line 21790
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 21791
   HEAP32[$115 >> 2] = $$131; //@line 21792
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 21793
   HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 21794
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 21795
   HEAP32[$117 >> 2] = $32; //@line 21796
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 21797
   HEAP32[$118 >> 2] = $34; //@line 21798
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 21799
   HEAP32[$119 >> 2] = $36; //@line 21800
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 21801
   HEAP32[$120 >> 2] = $38; //@line 21802
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 21803
   HEAP32[$121 >> 2] = $40; //@line 21804
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 21805
   HEAP32[$122 >> 2] = $42; //@line 21806
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 21807
   HEAP32[$123 >> 2] = $44; //@line 21808
   sp = STACKTOP; //@line 21809
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 21814
  $156 = $150 + 44 | 0; //@line 21815
  $157 = HEAP32[$156 >> 2] | 0; //@line 21816
  if (!$157) {
   HEAP32[$14 >> 2] = 0; //@line 21819
   $188 = HEAP32[$150 >> 2] | 0; //@line 21820
   HEAP32[$16 >> 2] = 0; //@line 21821
   HEAP32[$18 >> 2] = 192; //@line 21822
   HEAP32[$20 >> 2] = $188; //@line 21823
   HEAP32[$12 >> 2] = 724; //@line 21824
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 21825
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 21826
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 21829
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 21830
    HEAP32[$189 >> 2] = $2; //@line 21831
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 21832
    HEAP32[$190 >> 2] = $4; //@line 21833
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 21834
    HEAP32[$191 >> 2] = $6; //@line 21835
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 21836
    HEAP32[$192 >> 2] = $8; //@line 21837
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 21838
    HEAP32[$193 >> 2] = $10; //@line 21839
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 21840
    HEAP32[$194 >> 2] = $12; //@line 21841
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 21842
    HEAP32[$195 >> 2] = $14; //@line 21843
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 21844
    HEAP32[$196 >> 2] = $16; //@line 21845
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 21846
    HEAP32[$197 >> 2] = $18; //@line 21847
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 21848
    HEAP32[$198 >> 2] = $20; //@line 21849
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 21850
    HEAP32[$199 >> 2] = $22; //@line 21851
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 21852
    HEAP32[$200 >> 2] = $24; //@line 21853
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 21854
    HEAP32[$201 >> 2] = $26; //@line 21855
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 21856
    HEAP32[$202 >> 2] = $28; //@line 21857
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 21858
    HEAP32[$203 >> 2] = $30; //@line 21859
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 21860
    HEAP32[$204 >> 2] = $32; //@line 21861
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 21862
    HEAP32[$205 >> 2] = $34; //@line 21863
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 21864
    HEAP32[$206 >> 2] = $36; //@line 21865
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 21866
    HEAP32[$207 >> 2] = $38; //@line 21867
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 21868
    HEAP32[$208 >> 2] = $40; //@line 21869
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 21870
    HEAP32[$209 >> 2] = $42; //@line 21871
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 21872
    HEAP32[$210 >> 2] = $44; //@line 21873
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 21874
    HEAP32[$211 >> 2] = $$131; //@line 21875
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 21876
    HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 21877
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 21878
    HEAP32[$213 >> 2] = $52; //@line 21879
    sp = STACKTOP; //@line 21880
    return;
   }
   ___async_unwind = 0; //@line 21883
   HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 21884
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 21885
   HEAP32[$189 >> 2] = $2; //@line 21886
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 21887
   HEAP32[$190 >> 2] = $4; //@line 21888
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 21889
   HEAP32[$191 >> 2] = $6; //@line 21890
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 21891
   HEAP32[$192 >> 2] = $8; //@line 21892
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 21893
   HEAP32[$193 >> 2] = $10; //@line 21894
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 21895
   HEAP32[$194 >> 2] = $12; //@line 21896
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 21897
   HEAP32[$195 >> 2] = $14; //@line 21898
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 21899
   HEAP32[$196 >> 2] = $16; //@line 21900
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 21901
   HEAP32[$197 >> 2] = $18; //@line 21902
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 21903
   HEAP32[$198 >> 2] = $20; //@line 21904
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 21905
   HEAP32[$199 >> 2] = $22; //@line 21906
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 21907
   HEAP32[$200 >> 2] = $24; //@line 21908
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 21909
   HEAP32[$201 >> 2] = $26; //@line 21910
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 21911
   HEAP32[$202 >> 2] = $28; //@line 21912
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 21913
   HEAP32[$203 >> 2] = $30; //@line 21914
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 21915
   HEAP32[$204 >> 2] = $32; //@line 21916
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 21917
   HEAP32[$205 >> 2] = $34; //@line 21918
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 21919
   HEAP32[$206 >> 2] = $36; //@line 21920
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 21921
   HEAP32[$207 >> 2] = $38; //@line 21922
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 21923
   HEAP32[$208 >> 2] = $40; //@line 21924
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 21925
   HEAP32[$209 >> 2] = $42; //@line 21926
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 21927
   HEAP32[$210 >> 2] = $44; //@line 21928
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 21929
   HEAP32[$211 >> 2] = $$131; //@line 21930
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 21931
   HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 21932
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 21933
   HEAP32[$213 >> 2] = $52; //@line 21934
   sp = STACKTOP; //@line 21935
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 21940
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 21941
   FUNCTION_TABLE_vii[$161 & 7]($26, $150 + 32 | 0); //@line 21942
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 21945
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 21946
    HEAP32[$162 >> 2] = $2; //@line 21947
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 21948
    HEAP32[$163 >> 2] = $4; //@line 21949
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 21950
    HEAP32[$164 >> 2] = $6; //@line 21951
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 21952
    HEAP32[$165 >> 2] = $8; //@line 21953
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 21954
    HEAP32[$166 >> 2] = $10; //@line 21955
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 21956
    HEAP32[$167 >> 2] = $12; //@line 21957
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 21958
    HEAP32[$168 >> 2] = $14; //@line 21959
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 21960
    HEAP32[$169 >> 2] = $16; //@line 21961
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 21962
    HEAP32[$170 >> 2] = $18; //@line 21963
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 21964
    HEAP32[$171 >> 2] = $20; //@line 21965
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 21966
    HEAP32[$172 >> 2] = $22; //@line 21967
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 21968
    HEAP32[$173 >> 2] = $24; //@line 21969
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 21970
    HEAP32[$174 >> 2] = $26; //@line 21971
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 21972
    HEAP32[$175 >> 2] = $28; //@line 21973
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 21974
    HEAP32[$176 >> 2] = $30; //@line 21975
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 21976
    HEAP32[$177 >> 2] = $32; //@line 21977
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 21978
    HEAP32[$178 >> 2] = $34; //@line 21979
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 21980
    HEAP32[$179 >> 2] = $36; //@line 21981
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 21982
    HEAP32[$180 >> 2] = $38; //@line 21983
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 21984
    HEAP32[$181 >> 2] = $40; //@line 21985
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 21986
    HEAP32[$182 >> 2] = $42; //@line 21987
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 21988
    HEAP32[$183 >> 2] = $44; //@line 21989
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 21990
    HEAP32[$184 >> 2] = $156; //@line 21991
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 21992
    HEAP32[$185 >> 2] = $52; //@line 21993
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 21994
    HEAP32[$186 >> 2] = $$131; //@line 21995
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 21996
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 21997
    sp = STACKTOP; //@line 21998
    return;
   }
   ___async_unwind = 0; //@line 22001
   HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 22002
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 22003
   HEAP32[$162 >> 2] = $2; //@line 22004
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 22005
   HEAP32[$163 >> 2] = $4; //@line 22006
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 22007
   HEAP32[$164 >> 2] = $6; //@line 22008
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 22009
   HEAP32[$165 >> 2] = $8; //@line 22010
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 22011
   HEAP32[$166 >> 2] = $10; //@line 22012
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 22013
   HEAP32[$167 >> 2] = $12; //@line 22014
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 22015
   HEAP32[$168 >> 2] = $14; //@line 22016
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 22017
   HEAP32[$169 >> 2] = $16; //@line 22018
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 22019
   HEAP32[$170 >> 2] = $18; //@line 22020
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 22021
   HEAP32[$171 >> 2] = $20; //@line 22022
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 22023
   HEAP32[$172 >> 2] = $22; //@line 22024
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 22025
   HEAP32[$173 >> 2] = $24; //@line 22026
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 22027
   HEAP32[$174 >> 2] = $26; //@line 22028
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 22029
   HEAP32[$175 >> 2] = $28; //@line 22030
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 22031
   HEAP32[$176 >> 2] = $30; //@line 22032
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 22033
   HEAP32[$177 >> 2] = $32; //@line 22034
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 22035
   HEAP32[$178 >> 2] = $34; //@line 22036
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 22037
   HEAP32[$179 >> 2] = $36; //@line 22038
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 22039
   HEAP32[$180 >> 2] = $38; //@line 22040
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 22041
   HEAP32[$181 >> 2] = $40; //@line 22042
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 22043
   HEAP32[$182 >> 2] = $42; //@line 22044
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 22045
   HEAP32[$183 >> 2] = $44; //@line 22046
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 22047
   HEAP32[$184 >> 2] = $156; //@line 22048
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 22049
   HEAP32[$185 >> 2] = $52; //@line 22050
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 22051
   HEAP32[$186 >> 2] = $$131; //@line 22052
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 22053
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 22054
   sp = STACKTOP; //@line 22055
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_110($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $246 = 0, $247 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 16322
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16324
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16326
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16328
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16330
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16332
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16334
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16336
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16338
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16340
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16342
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16344
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16346
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16348
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16350
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16352
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16354
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16356
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16358
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16360
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16362
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16364
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 16366
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16368
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16370
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16372
 $150 = HEAP32[$4 >> 2] | 0; //@line 16373
 if (!$150) {
  $$02972$reg2mem$0 = $50; //@line 16376
  $$03071$reg2mem$0 = $48; //@line 16376
  $$reg2mem$0 = $12; //@line 16376
 } else {
  $153 = HEAP32[$150 + 8 >> 2] | 0; //@line 16379
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 16380
  FUNCTION_TABLE_vi[$153 & 511]($2); //@line 16381
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 190; //@line 16384
   $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 16385
   HEAP32[$154 >> 2] = $2; //@line 16386
   $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 16387
   HEAP32[$155 >> 2] = $4; //@line 16388
   $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 16389
   HEAP32[$156 >> 2] = $6; //@line 16390
   $157 = $ReallocAsyncCtx3 + 16 | 0; //@line 16391
   HEAP32[$157 >> 2] = $8; //@line 16392
   $158 = $ReallocAsyncCtx3 + 20 | 0; //@line 16393
   HEAP32[$158 >> 2] = $10; //@line 16394
   $159 = $ReallocAsyncCtx3 + 24 | 0; //@line 16395
   HEAP32[$159 >> 2] = $12; //@line 16396
   $160 = $ReallocAsyncCtx3 + 28 | 0; //@line 16397
   HEAP32[$160 >> 2] = $14; //@line 16398
   $161 = $ReallocAsyncCtx3 + 32 | 0; //@line 16399
   HEAP32[$161 >> 2] = $16; //@line 16400
   $162 = $ReallocAsyncCtx3 + 36 | 0; //@line 16401
   HEAP32[$162 >> 2] = $18; //@line 16402
   $163 = $ReallocAsyncCtx3 + 40 | 0; //@line 16403
   HEAP32[$163 >> 2] = $20; //@line 16404
   $164 = $ReallocAsyncCtx3 + 44 | 0; //@line 16405
   HEAP32[$164 >> 2] = $22; //@line 16406
   $165 = $ReallocAsyncCtx3 + 48 | 0; //@line 16407
   HEAP32[$165 >> 2] = $24; //@line 16408
   $166 = $ReallocAsyncCtx3 + 52 | 0; //@line 16409
   HEAP32[$166 >> 2] = $26; //@line 16410
   $167 = $ReallocAsyncCtx3 + 56 | 0; //@line 16411
   HEAP32[$167 >> 2] = $28; //@line 16412
   $168 = $ReallocAsyncCtx3 + 60 | 0; //@line 16413
   HEAP32[$168 >> 2] = $30; //@line 16414
   $169 = $ReallocAsyncCtx3 + 64 | 0; //@line 16415
   HEAP32[$169 >> 2] = $32; //@line 16416
   $170 = $ReallocAsyncCtx3 + 68 | 0; //@line 16417
   HEAP32[$170 >> 2] = $34; //@line 16418
   $171 = $ReallocAsyncCtx3 + 72 | 0; //@line 16419
   HEAP32[$171 >> 2] = $36; //@line 16420
   $172 = $ReallocAsyncCtx3 + 76 | 0; //@line 16421
   HEAP32[$172 >> 2] = $38; //@line 16422
   $173 = $ReallocAsyncCtx3 + 80 | 0; //@line 16423
   HEAP32[$173 >> 2] = $40; //@line 16424
   $174 = $ReallocAsyncCtx3 + 84 | 0; //@line 16425
   HEAP32[$174 >> 2] = $42; //@line 16426
   $175 = $ReallocAsyncCtx3 + 88 | 0; //@line 16427
   HEAP32[$175 >> 2] = $44; //@line 16428
   $176 = $ReallocAsyncCtx3 + 92 | 0; //@line 16429
   HEAP32[$176 >> 2] = $46; //@line 16430
   $177 = $ReallocAsyncCtx3 + 96 | 0; //@line 16431
   HEAP32[$177 >> 2] = $48; //@line 16432
   $178 = $ReallocAsyncCtx3 + 100 | 0; //@line 16433
   HEAP32[$178 >> 2] = $50; //@line 16434
   sp = STACKTOP; //@line 16435
   return;
  }
  ___async_unwind = 0; //@line 16438
  HEAP32[$ReallocAsyncCtx3 >> 2] = 190; //@line 16439
  $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 16440
  HEAP32[$154 >> 2] = $2; //@line 16441
  $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 16442
  HEAP32[$155 >> 2] = $4; //@line 16443
  $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 16444
  HEAP32[$156 >> 2] = $6; //@line 16445
  $157 = $ReallocAsyncCtx3 + 16 | 0; //@line 16446
  HEAP32[$157 >> 2] = $8; //@line 16447
  $158 = $ReallocAsyncCtx3 + 20 | 0; //@line 16448
  HEAP32[$158 >> 2] = $10; //@line 16449
  $159 = $ReallocAsyncCtx3 + 24 | 0; //@line 16450
  HEAP32[$159 >> 2] = $12; //@line 16451
  $160 = $ReallocAsyncCtx3 + 28 | 0; //@line 16452
  HEAP32[$160 >> 2] = $14; //@line 16453
  $161 = $ReallocAsyncCtx3 + 32 | 0; //@line 16454
  HEAP32[$161 >> 2] = $16; //@line 16455
  $162 = $ReallocAsyncCtx3 + 36 | 0; //@line 16456
  HEAP32[$162 >> 2] = $18; //@line 16457
  $163 = $ReallocAsyncCtx3 + 40 | 0; //@line 16458
  HEAP32[$163 >> 2] = $20; //@line 16459
  $164 = $ReallocAsyncCtx3 + 44 | 0; //@line 16460
  HEAP32[$164 >> 2] = $22; //@line 16461
  $165 = $ReallocAsyncCtx3 + 48 | 0; //@line 16462
  HEAP32[$165 >> 2] = $24; //@line 16463
  $166 = $ReallocAsyncCtx3 + 52 | 0; //@line 16464
  HEAP32[$166 >> 2] = $26; //@line 16465
  $167 = $ReallocAsyncCtx3 + 56 | 0; //@line 16466
  HEAP32[$167 >> 2] = $28; //@line 16467
  $168 = $ReallocAsyncCtx3 + 60 | 0; //@line 16468
  HEAP32[$168 >> 2] = $30; //@line 16469
  $169 = $ReallocAsyncCtx3 + 64 | 0; //@line 16470
  HEAP32[$169 >> 2] = $32; //@line 16471
  $170 = $ReallocAsyncCtx3 + 68 | 0; //@line 16472
  HEAP32[$170 >> 2] = $34; //@line 16473
  $171 = $ReallocAsyncCtx3 + 72 | 0; //@line 16474
  HEAP32[$171 >> 2] = $36; //@line 16475
  $172 = $ReallocAsyncCtx3 + 76 | 0; //@line 16476
  HEAP32[$172 >> 2] = $38; //@line 16477
  $173 = $ReallocAsyncCtx3 + 80 | 0; //@line 16478
  HEAP32[$173 >> 2] = $40; //@line 16479
  $174 = $ReallocAsyncCtx3 + 84 | 0; //@line 16480
  HEAP32[$174 >> 2] = $42; //@line 16481
  $175 = $ReallocAsyncCtx3 + 88 | 0; //@line 16482
  HEAP32[$175 >> 2] = $44; //@line 16483
  $176 = $ReallocAsyncCtx3 + 92 | 0; //@line 16484
  HEAP32[$176 >> 2] = $46; //@line 16485
  $177 = $ReallocAsyncCtx3 + 96 | 0; //@line 16486
  HEAP32[$177 >> 2] = $48; //@line 16487
  $178 = $ReallocAsyncCtx3 + 100 | 0; //@line 16488
  HEAP32[$178 >> 2] = $50; //@line 16489
  sp = STACKTOP; //@line 16490
  return;
 }
 L9 : while (1) {
  $179 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 16494
  $180 = $179 + 76 | 0; //@line 16495
  $181 = HEAP32[$180 >> 2] | 0; //@line 16496
  if ($181 | 0) {
   if ($181 >>> 0 <= 100) {
    label = 26; //@line 16501
    break;
   }
   HEAP32[$180 >> 2] = $181 + -100; //@line 16505
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 16510
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 16510
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 16512
   $$131 = $$03071$reg2mem$0; //@line 16512
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 16515
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 16518
    break L9;
   }
   $52 = 10036 + ($$02972$reg2mem$1 << 2) | 0; //@line 16521
   $54 = HEAP32[$52 >> 2] | 0; //@line 16522
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 16534
   break;
  }
  $84 = $54 + 72 | 0; //@line 16537
  $85 = HEAP32[$84 >> 2] | 0; //@line 16538
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 16542
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 16543
   $$03071$reg2mem$0 = $$131; //@line 16543
   $$reg2mem$0 = $52; //@line 16543
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 16550
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 16553
    $$03071$reg2mem$0 = $$131; //@line 16553
    $$reg2mem$0 = $52; //@line 16553
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[10976] = 0; //@line 16561
   return;
  }
  $246 = $$131 + 44 | 0; //@line 16564
  $247 = HEAP32[$246 >> 2] | 0; //@line 16565
  if (!$247) {
   $255 = $8 + 12 | 0; //@line 16568
   HEAP32[$255 >> 2] = 0; //@line 16569
   $257 = $34 + 4 | 0; //@line 16571
   HEAP32[$257 >> 2] = 0; //@line 16573
   HEAP32[$257 + 4 >> 2] = 0; //@line 16576
   HEAP32[$34 >> 2] = 3; //@line 16577
   $261 = $34 + 12 | 0; //@line 16578
   HEAP32[$261 >> 2] = 712; //@line 16579
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 16580
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $34) | 0; //@line 16581
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 16584
    $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 16585
    HEAP32[$262 >> 2] = $261; //@line 16586
    $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 16587
    HEAP32[$263 >> 2] = $255; //@line 16588
    $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 16589
    HEAP32[$264 >> 2] = $34; //@line 16590
    $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 16591
    HEAP32[$265 >> 2] = $8; //@line 16592
    sp = STACKTOP; //@line 16593
    return;
   }
   ___async_unwind = 0; //@line 16596
   HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 16597
   $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 16598
   HEAP32[$262 >> 2] = $261; //@line 16599
   $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 16600
   HEAP32[$263 >> 2] = $255; //@line 16601
   $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 16602
   HEAP32[$264 >> 2] = $34; //@line 16603
   $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 16604
   HEAP32[$265 >> 2] = $8; //@line 16605
   sp = STACKTOP; //@line 16606
   return;
  } else {
   $251 = HEAP32[$247 + 4 >> 2] | 0; //@line 16611
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 16612
   FUNCTION_TABLE_vii[$251 & 7]($8, $$131 + 32 | 0); //@line 16613
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 16616
    $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 16617
    HEAP32[$252 >> 2] = $246; //@line 16618
    $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 16619
    HEAP32[$253 >> 2] = $8; //@line 16620
    $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 16621
    HEAP32[$254 >> 2] = $34; //@line 16622
    sp = STACKTOP; //@line 16623
    return;
   }
   ___async_unwind = 0; //@line 16626
   HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 16627
   $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 16628
   HEAP32[$252 >> 2] = $246; //@line 16629
   $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 16630
   HEAP32[$253 >> 2] = $8; //@line 16631
   $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 16632
   HEAP32[$254 >> 2] = $34; //@line 16633
   sp = STACKTOP; //@line 16634
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 16639
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 16640
  __ZL28nsapi_dns_query_async_deletei($59); //@line 16641
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 16644
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 16645
   HEAP32[$60 >> 2] = $2; //@line 16646
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 16647
   HEAP32[$61 >> 2] = $4; //@line 16648
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 16649
   HEAP32[$62 >> 2] = $6; //@line 16650
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 16651
   HEAP32[$63 >> 2] = $8; //@line 16652
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 16653
   HEAP32[$64 >> 2] = $10; //@line 16654
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 16655
   HEAP32[$65 >> 2] = $14; //@line 16656
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 16657
   HEAP32[$66 >> 2] = $16; //@line 16658
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 16659
   HEAP32[$67 >> 2] = $18; //@line 16660
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 16661
   HEAP32[$68 >> 2] = $20; //@line 16662
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 16663
   HEAP32[$69 >> 2] = $22; //@line 16664
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 16665
   HEAP32[$70 >> 2] = $24; //@line 16666
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 16667
   HEAP32[$71 >> 2] = $26; //@line 16668
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 16669
   HEAP32[$72 >> 2] = $28; //@line 16670
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 16671
   HEAP32[$73 >> 2] = $30; //@line 16672
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 16673
   HEAP32[$74 >> 2] = $32; //@line 16674
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 16675
   HEAP32[$75 >> 2] = $34; //@line 16676
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 16677
   HEAP32[$76 >> 2] = $36; //@line 16678
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 16679
   HEAP32[$77 >> 2] = $38; //@line 16680
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 16681
   HEAP32[$78 >> 2] = $40; //@line 16682
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 16683
   HEAP32[$79 >> 2] = $42; //@line 16684
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 16685
   HEAP32[$80 >> 2] = $44; //@line 16686
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 16687
   HEAP32[$81 >> 2] = $46; //@line 16688
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 16689
   HEAP32[$82 >> 2] = $$131; //@line 16690
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 16691
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 16692
   sp = STACKTOP; //@line 16693
   return;
  }
  ___async_unwind = 0; //@line 16696
  HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 16697
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 16698
  HEAP32[$60 >> 2] = $2; //@line 16699
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 16700
  HEAP32[$61 >> 2] = $4; //@line 16701
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 16702
  HEAP32[$62 >> 2] = $6; //@line 16703
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 16704
  HEAP32[$63 >> 2] = $8; //@line 16705
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 16706
  HEAP32[$64 >> 2] = $10; //@line 16707
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 16708
  HEAP32[$65 >> 2] = $14; //@line 16709
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 16710
  HEAP32[$66 >> 2] = $16; //@line 16711
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 16712
  HEAP32[$67 >> 2] = $18; //@line 16713
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 16714
  HEAP32[$68 >> 2] = $20; //@line 16715
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 16716
  HEAP32[$69 >> 2] = $22; //@line 16717
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 16718
  HEAP32[$70 >> 2] = $24; //@line 16719
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 16720
  HEAP32[$71 >> 2] = $26; //@line 16721
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 16722
  HEAP32[$72 >> 2] = $28; //@line 16723
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 16724
  HEAP32[$73 >> 2] = $30; //@line 16725
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 16726
  HEAP32[$74 >> 2] = $32; //@line 16727
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 16728
  HEAP32[$75 >> 2] = $34; //@line 16729
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 16730
  HEAP32[$76 >> 2] = $36; //@line 16731
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 16732
  HEAP32[$77 >> 2] = $38; //@line 16733
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 16734
  HEAP32[$78 >> 2] = $40; //@line 16735
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 16736
  HEAP32[$79 >> 2] = $42; //@line 16737
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 16738
  HEAP32[$80 >> 2] = $44; //@line 16739
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 16740
  HEAP32[$81 >> 2] = $46; //@line 16741
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 16742
  HEAP32[$82 >> 2] = $$131; //@line 16743
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 16744
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 16745
  sp = STACKTOP; //@line 16746
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 16751
  $92 = $54 + 44 | 0; //@line 16752
  $93 = HEAP32[$92 >> 2] | 0; //@line 16753
  if (!$93) {
   HEAP32[$36 >> 2] = 0; //@line 16756
   $124 = HEAP32[$54 >> 2] | 0; //@line 16757
   HEAP32[$38 >> 2] = 0; //@line 16758
   HEAP32[$40 >> 2] = 187; //@line 16759
   HEAP32[$42 >> 2] = $124; //@line 16760
   HEAP32[$10 >> 2] = 724; //@line 16761
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 16762
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 16763
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 16766
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 16767
    HEAP32[$125 >> 2] = $2; //@line 16768
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 16769
    HEAP32[$126 >> 2] = $4; //@line 16770
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 16771
    HEAP32[$127 >> 2] = $6; //@line 16772
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 16773
    HEAP32[$128 >> 2] = $10; //@line 16774
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 16775
    HEAP32[$129 >> 2] = $8; //@line 16776
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 16777
    HEAP32[$130 >> 2] = $14; //@line 16778
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 16779
    HEAP32[$131 >> 2] = $16; //@line 16780
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 16781
    HEAP32[$132 >> 2] = $18; //@line 16782
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 16783
    HEAP32[$133 >> 2] = $20; //@line 16784
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 16785
    HEAP32[$134 >> 2] = $22; //@line 16786
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 16787
    HEAP32[$135 >> 2] = $24; //@line 16788
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 16789
    HEAP32[$136 >> 2] = $26; //@line 16790
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 16791
    HEAP32[$137 >> 2] = $28; //@line 16792
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 16793
    HEAP32[$138 >> 2] = $30; //@line 16794
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 16795
    HEAP32[$139 >> 2] = $32; //@line 16796
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 16797
    HEAP32[$140 >> 2] = $34; //@line 16798
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 16799
    HEAP32[$141 >> 2] = $36; //@line 16800
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 16801
    HEAP32[$142 >> 2] = $38; //@line 16802
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 16803
    HEAP32[$143 >> 2] = $40; //@line 16804
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 16805
    HEAP32[$144 >> 2] = $42; //@line 16806
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 16807
    HEAP32[$145 >> 2] = $44; //@line 16808
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 16809
    HEAP32[$146 >> 2] = $46; //@line 16810
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 16811
    HEAP32[$147 >> 2] = $52; //@line 16812
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 16813
    HEAP32[$148 >> 2] = $$131; //@line 16814
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 16815
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 16816
    sp = STACKTOP; //@line 16817
    return;
   }
   ___async_unwind = 0; //@line 16820
   HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 16821
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 16822
   HEAP32[$125 >> 2] = $2; //@line 16823
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 16824
   HEAP32[$126 >> 2] = $4; //@line 16825
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 16826
   HEAP32[$127 >> 2] = $6; //@line 16827
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 16828
   HEAP32[$128 >> 2] = $10; //@line 16829
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 16830
   HEAP32[$129 >> 2] = $8; //@line 16831
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 16832
   HEAP32[$130 >> 2] = $14; //@line 16833
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 16834
   HEAP32[$131 >> 2] = $16; //@line 16835
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 16836
   HEAP32[$132 >> 2] = $18; //@line 16837
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 16838
   HEAP32[$133 >> 2] = $20; //@line 16839
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 16840
   HEAP32[$134 >> 2] = $22; //@line 16841
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 16842
   HEAP32[$135 >> 2] = $24; //@line 16843
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 16844
   HEAP32[$136 >> 2] = $26; //@line 16845
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 16846
   HEAP32[$137 >> 2] = $28; //@line 16847
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 16848
   HEAP32[$138 >> 2] = $30; //@line 16849
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 16850
   HEAP32[$139 >> 2] = $32; //@line 16851
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 16852
   HEAP32[$140 >> 2] = $34; //@line 16853
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 16854
   HEAP32[$141 >> 2] = $36; //@line 16855
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 16856
   HEAP32[$142 >> 2] = $38; //@line 16857
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 16858
   HEAP32[$143 >> 2] = $40; //@line 16859
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 16860
   HEAP32[$144 >> 2] = $42; //@line 16861
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 16862
   HEAP32[$145 >> 2] = $44; //@line 16863
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 16864
   HEAP32[$146 >> 2] = $46; //@line 16865
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 16866
   HEAP32[$147 >> 2] = $52; //@line 16867
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 16868
   HEAP32[$148 >> 2] = $$131; //@line 16869
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 16870
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 16871
   sp = STACKTOP; //@line 16872
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 16877
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 16878
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 16879
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 16882
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 16883
    HEAP32[$98 >> 2] = $2; //@line 16884
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 16885
    HEAP32[$99 >> 2] = $4; //@line 16886
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 16887
    HEAP32[$100 >> 2] = $6; //@line 16888
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 16889
    HEAP32[$101 >> 2] = $10; //@line 16890
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 16891
    HEAP32[$102 >> 2] = $8; //@line 16892
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 16893
    HEAP32[$103 >> 2] = $52; //@line 16894
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 16895
    HEAP32[$104 >> 2] = $14; //@line 16896
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 16897
    HEAP32[$105 >> 2] = $16; //@line 16898
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 16899
    HEAP32[$106 >> 2] = $18; //@line 16900
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 16901
    HEAP32[$107 >> 2] = $20; //@line 16902
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 16903
    HEAP32[$108 >> 2] = $22; //@line 16904
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 16905
    HEAP32[$109 >> 2] = $24; //@line 16906
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 16907
    HEAP32[$110 >> 2] = $26; //@line 16908
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 16909
    HEAP32[$111 >> 2] = $92; //@line 16910
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 16911
    HEAP32[$112 >> 2] = $28; //@line 16912
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 16913
    HEAP32[$113 >> 2] = $30; //@line 16914
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 16915
    HEAP32[$114 >> 2] = $32; //@line 16916
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 16917
    HEAP32[$115 >> 2] = $$131; //@line 16918
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 16919
    HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 16920
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 16921
    HEAP32[$117 >> 2] = $34; //@line 16922
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 16923
    HEAP32[$118 >> 2] = $36; //@line 16924
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 16925
    HEAP32[$119 >> 2] = $38; //@line 16926
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 16927
    HEAP32[$120 >> 2] = $40; //@line 16928
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 16929
    HEAP32[$121 >> 2] = $42; //@line 16930
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 16931
    HEAP32[$122 >> 2] = $44; //@line 16932
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 16933
    HEAP32[$123 >> 2] = $46; //@line 16934
    sp = STACKTOP; //@line 16935
    return;
   }
   ___async_unwind = 0; //@line 16938
   HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 16939
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 16940
   HEAP32[$98 >> 2] = $2; //@line 16941
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 16942
   HEAP32[$99 >> 2] = $4; //@line 16943
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 16944
   HEAP32[$100 >> 2] = $6; //@line 16945
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 16946
   HEAP32[$101 >> 2] = $10; //@line 16947
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 16948
   HEAP32[$102 >> 2] = $8; //@line 16949
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 16950
   HEAP32[$103 >> 2] = $52; //@line 16951
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 16952
   HEAP32[$104 >> 2] = $14; //@line 16953
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 16954
   HEAP32[$105 >> 2] = $16; //@line 16955
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 16956
   HEAP32[$106 >> 2] = $18; //@line 16957
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 16958
   HEAP32[$107 >> 2] = $20; //@line 16959
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 16960
   HEAP32[$108 >> 2] = $22; //@line 16961
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 16962
   HEAP32[$109 >> 2] = $24; //@line 16963
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 16964
   HEAP32[$110 >> 2] = $26; //@line 16965
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 16966
   HEAP32[$111 >> 2] = $92; //@line 16967
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 16968
   HEAP32[$112 >> 2] = $28; //@line 16969
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 16970
   HEAP32[$113 >> 2] = $30; //@line 16971
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 16972
   HEAP32[$114 >> 2] = $32; //@line 16973
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 16974
   HEAP32[$115 >> 2] = $$131; //@line 16975
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 16976
   HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 16977
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 16978
   HEAP32[$117 >> 2] = $34; //@line 16979
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 16980
   HEAP32[$118 >> 2] = $36; //@line 16981
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 16982
   HEAP32[$119 >> 2] = $38; //@line 16983
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 16984
   HEAP32[$120 >> 2] = $40; //@line 16985
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 16986
   HEAP32[$121 >> 2] = $42; //@line 16987
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 16988
   HEAP32[$122 >> 2] = $44; //@line 16989
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 16990
   HEAP32[$123 >> 2] = $46; //@line 16991
   sp = STACKTOP; //@line 16992
   return;
  }
 } else if ((label | 0) == 26) {
  HEAP32[$180 >> 2] = 0; //@line 16997
  $185 = $179 + 44 | 0; //@line 16998
  $186 = HEAP32[$185 >> 2] | 0; //@line 16999
  if (!$186) {
   HEAP32[$16 >> 2] = 0; //@line 17002
   $217 = HEAP32[$179 >> 2] | 0; //@line 17003
   HEAP32[$18 >> 2] = 0; //@line 17004
   HEAP32[$20 >> 2] = 192; //@line 17005
   HEAP32[$22 >> 2] = $217; //@line 17006
   HEAP32[$14 >> 2] = 724; //@line 17007
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 17008
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 17009
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 17012
    $218 = $ReallocAsyncCtx13 + 4 | 0; //@line 17013
    HEAP32[$218 >> 2] = $2; //@line 17014
    $219 = $ReallocAsyncCtx13 + 8 | 0; //@line 17015
    HEAP32[$219 >> 2] = $4; //@line 17016
    $220 = $ReallocAsyncCtx13 + 12 | 0; //@line 17017
    HEAP32[$220 >> 2] = $6; //@line 17018
    $221 = $ReallocAsyncCtx13 + 16 | 0; //@line 17019
    HEAP32[$221 >> 2] = $8; //@line 17020
    $222 = $ReallocAsyncCtx13 + 20 | 0; //@line 17021
    HEAP32[$222 >> 2] = $10; //@line 17022
    $223 = $ReallocAsyncCtx13 + 24 | 0; //@line 17023
    HEAP32[$223 >> 2] = $14; //@line 17024
    $224 = $ReallocAsyncCtx13 + 28 | 0; //@line 17025
    HEAP32[$224 >> 2] = $16; //@line 17026
    $225 = $ReallocAsyncCtx13 + 32 | 0; //@line 17027
    HEAP32[$225 >> 2] = $18; //@line 17028
    $226 = $ReallocAsyncCtx13 + 36 | 0; //@line 17029
    HEAP32[$226 >> 2] = $20; //@line 17030
    $227 = $ReallocAsyncCtx13 + 40 | 0; //@line 17031
    HEAP32[$227 >> 2] = $22; //@line 17032
    $228 = $ReallocAsyncCtx13 + 44 | 0; //@line 17033
    HEAP32[$228 >> 2] = $24; //@line 17034
    $229 = $ReallocAsyncCtx13 + 48 | 0; //@line 17035
    HEAP32[$229 >> 2] = $26; //@line 17036
    $230 = $ReallocAsyncCtx13 + 52 | 0; //@line 17037
    HEAP32[$230 >> 2] = $28; //@line 17038
    $231 = $ReallocAsyncCtx13 + 56 | 0; //@line 17039
    HEAP32[$231 >> 2] = $30; //@line 17040
    $232 = $ReallocAsyncCtx13 + 60 | 0; //@line 17041
    HEAP32[$232 >> 2] = $32; //@line 17042
    $233 = $ReallocAsyncCtx13 + 64 | 0; //@line 17043
    HEAP32[$233 >> 2] = $34; //@line 17044
    $234 = $ReallocAsyncCtx13 + 68 | 0; //@line 17045
    HEAP32[$234 >> 2] = $36; //@line 17046
    $235 = $ReallocAsyncCtx13 + 72 | 0; //@line 17047
    HEAP32[$235 >> 2] = $38; //@line 17048
    $236 = $ReallocAsyncCtx13 + 76 | 0; //@line 17049
    HEAP32[$236 >> 2] = $40; //@line 17050
    $237 = $ReallocAsyncCtx13 + 80 | 0; //@line 17051
    HEAP32[$237 >> 2] = $42; //@line 17052
    $238 = $ReallocAsyncCtx13 + 84 | 0; //@line 17053
    HEAP32[$238 >> 2] = $44; //@line 17054
    $239 = $ReallocAsyncCtx13 + 88 | 0; //@line 17055
    HEAP32[$239 >> 2] = $46; //@line 17056
    $240 = $ReallocAsyncCtx13 + 92 | 0; //@line 17057
    HEAP32[$240 >> 2] = $$03071$reg2mem$0; //@line 17058
    $241 = $ReallocAsyncCtx13 + 96 | 0; //@line 17059
    HEAP32[$241 >> 2] = $$02972$reg2mem$0; //@line 17060
    $242 = $ReallocAsyncCtx13 + 100 | 0; //@line 17061
    HEAP32[$242 >> 2] = $$reg2mem$0; //@line 17062
    sp = STACKTOP; //@line 17063
    return;
   }
   ___async_unwind = 0; //@line 17066
   HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 17067
   $218 = $ReallocAsyncCtx13 + 4 | 0; //@line 17068
   HEAP32[$218 >> 2] = $2; //@line 17069
   $219 = $ReallocAsyncCtx13 + 8 | 0; //@line 17070
   HEAP32[$219 >> 2] = $4; //@line 17071
   $220 = $ReallocAsyncCtx13 + 12 | 0; //@line 17072
   HEAP32[$220 >> 2] = $6; //@line 17073
   $221 = $ReallocAsyncCtx13 + 16 | 0; //@line 17074
   HEAP32[$221 >> 2] = $8; //@line 17075
   $222 = $ReallocAsyncCtx13 + 20 | 0; //@line 17076
   HEAP32[$222 >> 2] = $10; //@line 17077
   $223 = $ReallocAsyncCtx13 + 24 | 0; //@line 17078
   HEAP32[$223 >> 2] = $14; //@line 17079
   $224 = $ReallocAsyncCtx13 + 28 | 0; //@line 17080
   HEAP32[$224 >> 2] = $16; //@line 17081
   $225 = $ReallocAsyncCtx13 + 32 | 0; //@line 17082
   HEAP32[$225 >> 2] = $18; //@line 17083
   $226 = $ReallocAsyncCtx13 + 36 | 0; //@line 17084
   HEAP32[$226 >> 2] = $20; //@line 17085
   $227 = $ReallocAsyncCtx13 + 40 | 0; //@line 17086
   HEAP32[$227 >> 2] = $22; //@line 17087
   $228 = $ReallocAsyncCtx13 + 44 | 0; //@line 17088
   HEAP32[$228 >> 2] = $24; //@line 17089
   $229 = $ReallocAsyncCtx13 + 48 | 0; //@line 17090
   HEAP32[$229 >> 2] = $26; //@line 17091
   $230 = $ReallocAsyncCtx13 + 52 | 0; //@line 17092
   HEAP32[$230 >> 2] = $28; //@line 17093
   $231 = $ReallocAsyncCtx13 + 56 | 0; //@line 17094
   HEAP32[$231 >> 2] = $30; //@line 17095
   $232 = $ReallocAsyncCtx13 + 60 | 0; //@line 17096
   HEAP32[$232 >> 2] = $32; //@line 17097
   $233 = $ReallocAsyncCtx13 + 64 | 0; //@line 17098
   HEAP32[$233 >> 2] = $34; //@line 17099
   $234 = $ReallocAsyncCtx13 + 68 | 0; //@line 17100
   HEAP32[$234 >> 2] = $36; //@line 17101
   $235 = $ReallocAsyncCtx13 + 72 | 0; //@line 17102
   HEAP32[$235 >> 2] = $38; //@line 17103
   $236 = $ReallocAsyncCtx13 + 76 | 0; //@line 17104
   HEAP32[$236 >> 2] = $40; //@line 17105
   $237 = $ReallocAsyncCtx13 + 80 | 0; //@line 17106
   HEAP32[$237 >> 2] = $42; //@line 17107
   $238 = $ReallocAsyncCtx13 + 84 | 0; //@line 17108
   HEAP32[$238 >> 2] = $44; //@line 17109
   $239 = $ReallocAsyncCtx13 + 88 | 0; //@line 17110
   HEAP32[$239 >> 2] = $46; //@line 17111
   $240 = $ReallocAsyncCtx13 + 92 | 0; //@line 17112
   HEAP32[$240 >> 2] = $$03071$reg2mem$0; //@line 17113
   $241 = $ReallocAsyncCtx13 + 96 | 0; //@line 17114
   HEAP32[$241 >> 2] = $$02972$reg2mem$0; //@line 17115
   $242 = $ReallocAsyncCtx13 + 100 | 0; //@line 17116
   HEAP32[$242 >> 2] = $$reg2mem$0; //@line 17117
   sp = STACKTOP; //@line 17118
   return;
  } else {
   $190 = HEAP32[$186 + 4 >> 2] | 0; //@line 17123
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 17124
   FUNCTION_TABLE_vii[$190 & 7]($28, $179 + 32 | 0); //@line 17125
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 17128
    $191 = $ReallocAsyncCtx4 + 4 | 0; //@line 17129
    HEAP32[$191 >> 2] = $2; //@line 17130
    $192 = $ReallocAsyncCtx4 + 8 | 0; //@line 17131
    HEAP32[$192 >> 2] = $4; //@line 17132
    $193 = $ReallocAsyncCtx4 + 12 | 0; //@line 17133
    HEAP32[$193 >> 2] = $6; //@line 17134
    $194 = $ReallocAsyncCtx4 + 16 | 0; //@line 17135
    HEAP32[$194 >> 2] = $8; //@line 17136
    $195 = $ReallocAsyncCtx4 + 20 | 0; //@line 17137
    HEAP32[$195 >> 2] = $10; //@line 17138
    $196 = $ReallocAsyncCtx4 + 24 | 0; //@line 17139
    HEAP32[$196 >> 2] = $14; //@line 17140
    $197 = $ReallocAsyncCtx4 + 28 | 0; //@line 17141
    HEAP32[$197 >> 2] = $16; //@line 17142
    $198 = $ReallocAsyncCtx4 + 32 | 0; //@line 17143
    HEAP32[$198 >> 2] = $18; //@line 17144
    $199 = $ReallocAsyncCtx4 + 36 | 0; //@line 17145
    HEAP32[$199 >> 2] = $20; //@line 17146
    $200 = $ReallocAsyncCtx4 + 40 | 0; //@line 17147
    HEAP32[$200 >> 2] = $22; //@line 17148
    $201 = $ReallocAsyncCtx4 + 44 | 0; //@line 17149
    HEAP32[$201 >> 2] = $24; //@line 17150
    $202 = $ReallocAsyncCtx4 + 48 | 0; //@line 17151
    HEAP32[$202 >> 2] = $26; //@line 17152
    $203 = $ReallocAsyncCtx4 + 52 | 0; //@line 17153
    HEAP32[$203 >> 2] = $28; //@line 17154
    $204 = $ReallocAsyncCtx4 + 56 | 0; //@line 17155
    HEAP32[$204 >> 2] = $30; //@line 17156
    $205 = $ReallocAsyncCtx4 + 60 | 0; //@line 17157
    HEAP32[$205 >> 2] = $32; //@line 17158
    $206 = $ReallocAsyncCtx4 + 64 | 0; //@line 17159
    HEAP32[$206 >> 2] = $34; //@line 17160
    $207 = $ReallocAsyncCtx4 + 68 | 0; //@line 17161
    HEAP32[$207 >> 2] = $36; //@line 17162
    $208 = $ReallocAsyncCtx4 + 72 | 0; //@line 17163
    HEAP32[$208 >> 2] = $38; //@line 17164
    $209 = $ReallocAsyncCtx4 + 76 | 0; //@line 17165
    HEAP32[$209 >> 2] = $40; //@line 17166
    $210 = $ReallocAsyncCtx4 + 80 | 0; //@line 17167
    HEAP32[$210 >> 2] = $42; //@line 17168
    $211 = $ReallocAsyncCtx4 + 84 | 0; //@line 17169
    HEAP32[$211 >> 2] = $44; //@line 17170
    $212 = $ReallocAsyncCtx4 + 88 | 0; //@line 17171
    HEAP32[$212 >> 2] = $46; //@line 17172
    $213 = $ReallocAsyncCtx4 + 92 | 0; //@line 17173
    HEAP32[$213 >> 2] = $185; //@line 17174
    $214 = $ReallocAsyncCtx4 + 96 | 0; //@line 17175
    HEAP32[$214 >> 2] = $$reg2mem$0; //@line 17176
    $215 = $ReallocAsyncCtx4 + 100 | 0; //@line 17177
    HEAP32[$215 >> 2] = $$03071$reg2mem$0; //@line 17178
    $216 = $ReallocAsyncCtx4 + 104 | 0; //@line 17179
    HEAP32[$216 >> 2] = $$02972$reg2mem$0; //@line 17180
    sp = STACKTOP; //@line 17181
    return;
   }
   ___async_unwind = 0; //@line 17184
   HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 17185
   $191 = $ReallocAsyncCtx4 + 4 | 0; //@line 17186
   HEAP32[$191 >> 2] = $2; //@line 17187
   $192 = $ReallocAsyncCtx4 + 8 | 0; //@line 17188
   HEAP32[$192 >> 2] = $4; //@line 17189
   $193 = $ReallocAsyncCtx4 + 12 | 0; //@line 17190
   HEAP32[$193 >> 2] = $6; //@line 17191
   $194 = $ReallocAsyncCtx4 + 16 | 0; //@line 17192
   HEAP32[$194 >> 2] = $8; //@line 17193
   $195 = $ReallocAsyncCtx4 + 20 | 0; //@line 17194
   HEAP32[$195 >> 2] = $10; //@line 17195
   $196 = $ReallocAsyncCtx4 + 24 | 0; //@line 17196
   HEAP32[$196 >> 2] = $14; //@line 17197
   $197 = $ReallocAsyncCtx4 + 28 | 0; //@line 17198
   HEAP32[$197 >> 2] = $16; //@line 17199
   $198 = $ReallocAsyncCtx4 + 32 | 0; //@line 17200
   HEAP32[$198 >> 2] = $18; //@line 17201
   $199 = $ReallocAsyncCtx4 + 36 | 0; //@line 17202
   HEAP32[$199 >> 2] = $20; //@line 17203
   $200 = $ReallocAsyncCtx4 + 40 | 0; //@line 17204
   HEAP32[$200 >> 2] = $22; //@line 17205
   $201 = $ReallocAsyncCtx4 + 44 | 0; //@line 17206
   HEAP32[$201 >> 2] = $24; //@line 17207
   $202 = $ReallocAsyncCtx4 + 48 | 0; //@line 17208
   HEAP32[$202 >> 2] = $26; //@line 17209
   $203 = $ReallocAsyncCtx4 + 52 | 0; //@line 17210
   HEAP32[$203 >> 2] = $28; //@line 17211
   $204 = $ReallocAsyncCtx4 + 56 | 0; //@line 17212
   HEAP32[$204 >> 2] = $30; //@line 17213
   $205 = $ReallocAsyncCtx4 + 60 | 0; //@line 17214
   HEAP32[$205 >> 2] = $32; //@line 17215
   $206 = $ReallocAsyncCtx4 + 64 | 0; //@line 17216
   HEAP32[$206 >> 2] = $34; //@line 17217
   $207 = $ReallocAsyncCtx4 + 68 | 0; //@line 17218
   HEAP32[$207 >> 2] = $36; //@line 17219
   $208 = $ReallocAsyncCtx4 + 72 | 0; //@line 17220
   HEAP32[$208 >> 2] = $38; //@line 17221
   $209 = $ReallocAsyncCtx4 + 76 | 0; //@line 17222
   HEAP32[$209 >> 2] = $40; //@line 17223
   $210 = $ReallocAsyncCtx4 + 80 | 0; //@line 17224
   HEAP32[$210 >> 2] = $42; //@line 17225
   $211 = $ReallocAsyncCtx4 + 84 | 0; //@line 17226
   HEAP32[$211 >> 2] = $44; //@line 17227
   $212 = $ReallocAsyncCtx4 + 88 | 0; //@line 17228
   HEAP32[$212 >> 2] = $46; //@line 17229
   $213 = $ReallocAsyncCtx4 + 92 | 0; //@line 17230
   HEAP32[$213 >> 2] = $185; //@line 17231
   $214 = $ReallocAsyncCtx4 + 96 | 0; //@line 17232
   HEAP32[$214 >> 2] = $$reg2mem$0; //@line 17233
   $215 = $ReallocAsyncCtx4 + 100 | 0; //@line 17234
   HEAP32[$215 >> 2] = $$03071$reg2mem$0; //@line 17235
   $216 = $ReallocAsyncCtx4 + 104 | 0; //@line 17236
   HEAP32[$216 >> 2] = $$02972$reg2mem$0; //@line 17237
   sp = STACKTOP; //@line 17238
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_113($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $246 = 0, $247 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 18205
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18207
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18209
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18211
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18213
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18215
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18217
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18219
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18221
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18223
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18225
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18227
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18229
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18231
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18233
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18235
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18237
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18239
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18241
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18243
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 18245
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 18247
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 18249
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 18251
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 18253
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 18255
 $214 = HEAP32[$28 >> 2] | 0; //@line 18256
 if (!$214) {
  $$02972$reg2mem$0 = $48; //@line 18259
  $$03071$reg2mem$0 = $46; //@line 18259
  $$reg2mem$0 = $50; //@line 18259
 } else {
  $217 = HEAP32[$214 + 8 >> 2] | 0; //@line 18262
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 18263
  FUNCTION_TABLE_vi[$217 & 511]($26); //@line 18264
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 195; //@line 18267
   $218 = $ReallocAsyncCtx6 + 4 | 0; //@line 18268
   HEAP32[$218 >> 2] = $2; //@line 18269
   $219 = $ReallocAsyncCtx6 + 8 | 0; //@line 18270
   HEAP32[$219 >> 2] = $4; //@line 18271
   $220 = $ReallocAsyncCtx6 + 12 | 0; //@line 18272
   HEAP32[$220 >> 2] = $6; //@line 18273
   $221 = $ReallocAsyncCtx6 + 16 | 0; //@line 18274
   HEAP32[$221 >> 2] = $8; //@line 18275
   $222 = $ReallocAsyncCtx6 + 20 | 0; //@line 18276
   HEAP32[$222 >> 2] = $10; //@line 18277
   $223 = $ReallocAsyncCtx6 + 24 | 0; //@line 18278
   HEAP32[$223 >> 2] = $12; //@line 18279
   $224 = $ReallocAsyncCtx6 + 28 | 0; //@line 18280
   HEAP32[$224 >> 2] = $14; //@line 18281
   $225 = $ReallocAsyncCtx6 + 32 | 0; //@line 18282
   HEAP32[$225 >> 2] = $16; //@line 18283
   $226 = $ReallocAsyncCtx6 + 36 | 0; //@line 18284
   HEAP32[$226 >> 2] = $18; //@line 18285
   $227 = $ReallocAsyncCtx6 + 40 | 0; //@line 18286
   HEAP32[$227 >> 2] = $20; //@line 18287
   $228 = $ReallocAsyncCtx6 + 44 | 0; //@line 18288
   HEAP32[$228 >> 2] = $22; //@line 18289
   $229 = $ReallocAsyncCtx6 + 48 | 0; //@line 18290
   HEAP32[$229 >> 2] = $24; //@line 18291
   $230 = $ReallocAsyncCtx6 + 52 | 0; //@line 18292
   HEAP32[$230 >> 2] = $26; //@line 18293
   $231 = $ReallocAsyncCtx6 + 56 | 0; //@line 18294
   HEAP32[$231 >> 2] = $28; //@line 18295
   $232 = $ReallocAsyncCtx6 + 60 | 0; //@line 18296
   HEAP32[$232 >> 2] = $30; //@line 18297
   $233 = $ReallocAsyncCtx6 + 64 | 0; //@line 18298
   HEAP32[$233 >> 2] = $32; //@line 18299
   $234 = $ReallocAsyncCtx6 + 68 | 0; //@line 18300
   HEAP32[$234 >> 2] = $34; //@line 18301
   $235 = $ReallocAsyncCtx6 + 72 | 0; //@line 18302
   HEAP32[$235 >> 2] = $36; //@line 18303
   $236 = $ReallocAsyncCtx6 + 76 | 0; //@line 18304
   HEAP32[$236 >> 2] = $38; //@line 18305
   $237 = $ReallocAsyncCtx6 + 80 | 0; //@line 18306
   HEAP32[$237 >> 2] = $40; //@line 18307
   $238 = $ReallocAsyncCtx6 + 84 | 0; //@line 18308
   HEAP32[$238 >> 2] = $42; //@line 18309
   $239 = $ReallocAsyncCtx6 + 88 | 0; //@line 18310
   HEAP32[$239 >> 2] = $44; //@line 18311
   $240 = $ReallocAsyncCtx6 + 92 | 0; //@line 18312
   HEAP32[$240 >> 2] = $46; //@line 18313
   $241 = $ReallocAsyncCtx6 + 96 | 0; //@line 18314
   HEAP32[$241 >> 2] = $48; //@line 18315
   $242 = $ReallocAsyncCtx6 + 100 | 0; //@line 18316
   HEAP32[$242 >> 2] = $50; //@line 18317
   sp = STACKTOP; //@line 18318
   return;
  }
  ___async_unwind = 0; //@line 18321
  HEAP32[$ReallocAsyncCtx6 >> 2] = 195; //@line 18322
  $218 = $ReallocAsyncCtx6 + 4 | 0; //@line 18323
  HEAP32[$218 >> 2] = $2; //@line 18324
  $219 = $ReallocAsyncCtx6 + 8 | 0; //@line 18325
  HEAP32[$219 >> 2] = $4; //@line 18326
  $220 = $ReallocAsyncCtx6 + 12 | 0; //@line 18327
  HEAP32[$220 >> 2] = $6; //@line 18328
  $221 = $ReallocAsyncCtx6 + 16 | 0; //@line 18329
  HEAP32[$221 >> 2] = $8; //@line 18330
  $222 = $ReallocAsyncCtx6 + 20 | 0; //@line 18331
  HEAP32[$222 >> 2] = $10; //@line 18332
  $223 = $ReallocAsyncCtx6 + 24 | 0; //@line 18333
  HEAP32[$223 >> 2] = $12; //@line 18334
  $224 = $ReallocAsyncCtx6 + 28 | 0; //@line 18335
  HEAP32[$224 >> 2] = $14; //@line 18336
  $225 = $ReallocAsyncCtx6 + 32 | 0; //@line 18337
  HEAP32[$225 >> 2] = $16; //@line 18338
  $226 = $ReallocAsyncCtx6 + 36 | 0; //@line 18339
  HEAP32[$226 >> 2] = $18; //@line 18340
  $227 = $ReallocAsyncCtx6 + 40 | 0; //@line 18341
  HEAP32[$227 >> 2] = $20; //@line 18342
  $228 = $ReallocAsyncCtx6 + 44 | 0; //@line 18343
  HEAP32[$228 >> 2] = $22; //@line 18344
  $229 = $ReallocAsyncCtx6 + 48 | 0; //@line 18345
  HEAP32[$229 >> 2] = $24; //@line 18346
  $230 = $ReallocAsyncCtx6 + 52 | 0; //@line 18347
  HEAP32[$230 >> 2] = $26; //@line 18348
  $231 = $ReallocAsyncCtx6 + 56 | 0; //@line 18349
  HEAP32[$231 >> 2] = $28; //@line 18350
  $232 = $ReallocAsyncCtx6 + 60 | 0; //@line 18351
  HEAP32[$232 >> 2] = $30; //@line 18352
  $233 = $ReallocAsyncCtx6 + 64 | 0; //@line 18353
  HEAP32[$233 >> 2] = $32; //@line 18354
  $234 = $ReallocAsyncCtx6 + 68 | 0; //@line 18355
  HEAP32[$234 >> 2] = $34; //@line 18356
  $235 = $ReallocAsyncCtx6 + 72 | 0; //@line 18357
  HEAP32[$235 >> 2] = $36; //@line 18358
  $236 = $ReallocAsyncCtx6 + 76 | 0; //@line 18359
  HEAP32[$236 >> 2] = $38; //@line 18360
  $237 = $ReallocAsyncCtx6 + 80 | 0; //@line 18361
  HEAP32[$237 >> 2] = $40; //@line 18362
  $238 = $ReallocAsyncCtx6 + 84 | 0; //@line 18363
  HEAP32[$238 >> 2] = $42; //@line 18364
  $239 = $ReallocAsyncCtx6 + 88 | 0; //@line 18365
  HEAP32[$239 >> 2] = $44; //@line 18366
  $240 = $ReallocAsyncCtx6 + 92 | 0; //@line 18367
  HEAP32[$240 >> 2] = $46; //@line 18368
  $241 = $ReallocAsyncCtx6 + 96 | 0; //@line 18369
  HEAP32[$241 >> 2] = $48; //@line 18370
  $242 = $ReallocAsyncCtx6 + 100 | 0; //@line 18371
  HEAP32[$242 >> 2] = $50; //@line 18372
  sp = STACKTOP; //@line 18373
  return;
 }
 L9 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 18380
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 18380
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 18382
   $$131 = $$03071$reg2mem$0; //@line 18382
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 18385
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 18388
    break L9;
   }
   $52 = 10036 + ($$02972$reg2mem$1 << 2) | 0; //@line 18391
   $54 = HEAP32[$52 >> 2] | 0; //@line 18392
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 18404
   break;
  }
  $84 = $54 + 72 | 0; //@line 18407
  $85 = HEAP32[$84 >> 2] | 0; //@line 18408
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 18412
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 18418
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 18422
  $151 = $150 + 76 | 0; //@line 18423
  $152 = HEAP32[$151 >> 2] | 0; //@line 18424
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 18427
   $$03071$reg2mem$0 = $$131; //@line 18427
   $$reg2mem$0 = $52; //@line 18427
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 18432
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 18436
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 18437
  $$03071$reg2mem$0 = $$131; //@line 18437
  $$reg2mem$0 = $52; //@line 18437
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[10976] = 0; //@line 18442
   return;
  }
  $246 = $$131 + 44 | 0; //@line 18445
  $247 = HEAP32[$246 >> 2] | 0; //@line 18446
  if (!$247) {
   $255 = $8 + 12 | 0; //@line 18449
   HEAP32[$255 >> 2] = 0; //@line 18450
   $257 = $32 + 4 | 0; //@line 18452
   HEAP32[$257 >> 2] = 0; //@line 18454
   HEAP32[$257 + 4 >> 2] = 0; //@line 18457
   HEAP32[$32 >> 2] = 3; //@line 18458
   $261 = $32 + 12 | 0; //@line 18459
   HEAP32[$261 >> 2] = 712; //@line 18460
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 18461
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $32) | 0; //@line 18462
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 18465
    $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 18466
    HEAP32[$262 >> 2] = $261; //@line 18467
    $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 18468
    HEAP32[$263 >> 2] = $255; //@line 18469
    $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 18470
    HEAP32[$264 >> 2] = $32; //@line 18471
    $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 18472
    HEAP32[$265 >> 2] = $8; //@line 18473
    sp = STACKTOP; //@line 18474
    return;
   }
   ___async_unwind = 0; //@line 18477
   HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 18478
   $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 18479
   HEAP32[$262 >> 2] = $261; //@line 18480
   $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 18481
   HEAP32[$263 >> 2] = $255; //@line 18482
   $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 18483
   HEAP32[$264 >> 2] = $32; //@line 18484
   $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 18485
   HEAP32[$265 >> 2] = $8; //@line 18486
   sp = STACKTOP; //@line 18487
   return;
  } else {
   $251 = HEAP32[$247 + 4 >> 2] | 0; //@line 18492
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 18493
   FUNCTION_TABLE_vii[$251 & 7]($8, $$131 + 32 | 0); //@line 18494
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 18497
    $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 18498
    HEAP32[$252 >> 2] = $246; //@line 18499
    $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 18500
    HEAP32[$253 >> 2] = $8; //@line 18501
    $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 18502
    HEAP32[$254 >> 2] = $32; //@line 18503
    sp = STACKTOP; //@line 18504
    return;
   }
   ___async_unwind = 0; //@line 18507
   HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 18508
   $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 18509
   HEAP32[$252 >> 2] = $246; //@line 18510
   $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 18511
   HEAP32[$253 >> 2] = $8; //@line 18512
   $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 18513
   HEAP32[$254 >> 2] = $32; //@line 18514
   sp = STACKTOP; //@line 18515
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 18520
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 18521
  __ZL28nsapi_dns_query_async_deletei($59); //@line 18522
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 18525
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 18526
   HEAP32[$60 >> 2] = $2; //@line 18527
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 18528
   HEAP32[$61 >> 2] = $4; //@line 18529
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 18530
   HEAP32[$62 >> 2] = $6; //@line 18531
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 18532
   HEAP32[$63 >> 2] = $8; //@line 18533
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 18534
   HEAP32[$64 >> 2] = $10; //@line 18535
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 18536
   HEAP32[$65 >> 2] = $12; //@line 18537
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 18538
   HEAP32[$66 >> 2] = $14; //@line 18539
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 18540
   HEAP32[$67 >> 2] = $16; //@line 18541
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 18542
   HEAP32[$68 >> 2] = $18; //@line 18543
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 18544
   HEAP32[$69 >> 2] = $20; //@line 18545
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 18546
   HEAP32[$70 >> 2] = $22; //@line 18547
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 18548
   HEAP32[$71 >> 2] = $24; //@line 18549
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 18550
   HEAP32[$72 >> 2] = $26; //@line 18551
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 18552
   HEAP32[$73 >> 2] = $28; //@line 18553
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 18554
   HEAP32[$74 >> 2] = $30; //@line 18555
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 18556
   HEAP32[$75 >> 2] = $32; //@line 18557
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 18558
   HEAP32[$76 >> 2] = $34; //@line 18559
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 18560
   HEAP32[$77 >> 2] = $36; //@line 18561
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 18562
   HEAP32[$78 >> 2] = $38; //@line 18563
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 18564
   HEAP32[$79 >> 2] = $40; //@line 18565
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 18566
   HEAP32[$80 >> 2] = $42; //@line 18567
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 18568
   HEAP32[$81 >> 2] = $44; //@line 18569
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 18570
   HEAP32[$82 >> 2] = $$131; //@line 18571
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 18572
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 18573
   sp = STACKTOP; //@line 18574
   return;
  }
  ___async_unwind = 0; //@line 18577
  HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 18578
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 18579
  HEAP32[$60 >> 2] = $2; //@line 18580
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 18581
  HEAP32[$61 >> 2] = $4; //@line 18582
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 18583
  HEAP32[$62 >> 2] = $6; //@line 18584
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 18585
  HEAP32[$63 >> 2] = $8; //@line 18586
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 18587
  HEAP32[$64 >> 2] = $10; //@line 18588
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 18589
  HEAP32[$65 >> 2] = $12; //@line 18590
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 18591
  HEAP32[$66 >> 2] = $14; //@line 18592
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 18593
  HEAP32[$67 >> 2] = $16; //@line 18594
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 18595
  HEAP32[$68 >> 2] = $18; //@line 18596
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 18597
  HEAP32[$69 >> 2] = $20; //@line 18598
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 18599
  HEAP32[$70 >> 2] = $22; //@line 18600
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 18601
  HEAP32[$71 >> 2] = $24; //@line 18602
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 18603
  HEAP32[$72 >> 2] = $26; //@line 18604
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 18605
  HEAP32[$73 >> 2] = $28; //@line 18606
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 18607
  HEAP32[$74 >> 2] = $30; //@line 18608
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 18609
  HEAP32[$75 >> 2] = $32; //@line 18610
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 18611
  HEAP32[$76 >> 2] = $34; //@line 18612
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 18613
  HEAP32[$77 >> 2] = $36; //@line 18614
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 18615
  HEAP32[$78 >> 2] = $38; //@line 18616
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 18617
  HEAP32[$79 >> 2] = $40; //@line 18618
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 18619
  HEAP32[$80 >> 2] = $42; //@line 18620
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 18621
  HEAP32[$81 >> 2] = $44; //@line 18622
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 18623
  HEAP32[$82 >> 2] = $$131; //@line 18624
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 18625
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 18626
  sp = STACKTOP; //@line 18627
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 18632
  $92 = $54 + 44 | 0; //@line 18633
  $93 = HEAP32[$92 >> 2] | 0; //@line 18634
  if (!$93) {
   HEAP32[$34 >> 2] = 0; //@line 18637
   $124 = HEAP32[$54 >> 2] | 0; //@line 18638
   HEAP32[$36 >> 2] = 0; //@line 18639
   HEAP32[$38 >> 2] = 187; //@line 18640
   HEAP32[$40 >> 2] = $124; //@line 18641
   HEAP32[$10 >> 2] = 724; //@line 18642
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 18643
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 18644
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 18647
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 18648
    HEAP32[$125 >> 2] = $2; //@line 18649
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 18650
    HEAP32[$126 >> 2] = $4; //@line 18651
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 18652
    HEAP32[$127 >> 2] = $6; //@line 18653
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 18654
    HEAP32[$128 >> 2] = $10; //@line 18655
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 18656
    HEAP32[$129 >> 2] = $8; //@line 18657
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 18658
    HEAP32[$130 >> 2] = $12; //@line 18659
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 18660
    HEAP32[$131 >> 2] = $14; //@line 18661
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 18662
    HEAP32[$132 >> 2] = $16; //@line 18663
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 18664
    HEAP32[$133 >> 2] = $18; //@line 18665
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 18666
    HEAP32[$134 >> 2] = $20; //@line 18667
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 18668
    HEAP32[$135 >> 2] = $22; //@line 18669
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 18670
    HEAP32[$136 >> 2] = $24; //@line 18671
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 18672
    HEAP32[$137 >> 2] = $26; //@line 18673
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 18674
    HEAP32[$138 >> 2] = $28; //@line 18675
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 18676
    HEAP32[$139 >> 2] = $30; //@line 18677
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 18678
    HEAP32[$140 >> 2] = $32; //@line 18679
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 18680
    HEAP32[$141 >> 2] = $34; //@line 18681
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 18682
    HEAP32[$142 >> 2] = $36; //@line 18683
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 18684
    HEAP32[$143 >> 2] = $38; //@line 18685
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 18686
    HEAP32[$144 >> 2] = $40; //@line 18687
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 18688
    HEAP32[$145 >> 2] = $42; //@line 18689
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 18690
    HEAP32[$146 >> 2] = $44; //@line 18691
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 18692
    HEAP32[$147 >> 2] = $52; //@line 18693
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 18694
    HEAP32[$148 >> 2] = $$131; //@line 18695
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 18696
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 18697
    sp = STACKTOP; //@line 18698
    return;
   }
   ___async_unwind = 0; //@line 18701
   HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 18702
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 18703
   HEAP32[$125 >> 2] = $2; //@line 18704
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 18705
   HEAP32[$126 >> 2] = $4; //@line 18706
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 18707
   HEAP32[$127 >> 2] = $6; //@line 18708
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 18709
   HEAP32[$128 >> 2] = $10; //@line 18710
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 18711
   HEAP32[$129 >> 2] = $8; //@line 18712
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 18713
   HEAP32[$130 >> 2] = $12; //@line 18714
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 18715
   HEAP32[$131 >> 2] = $14; //@line 18716
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 18717
   HEAP32[$132 >> 2] = $16; //@line 18718
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 18719
   HEAP32[$133 >> 2] = $18; //@line 18720
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 18721
   HEAP32[$134 >> 2] = $20; //@line 18722
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 18723
   HEAP32[$135 >> 2] = $22; //@line 18724
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 18725
   HEAP32[$136 >> 2] = $24; //@line 18726
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 18727
   HEAP32[$137 >> 2] = $26; //@line 18728
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 18729
   HEAP32[$138 >> 2] = $28; //@line 18730
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 18731
   HEAP32[$139 >> 2] = $30; //@line 18732
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 18733
   HEAP32[$140 >> 2] = $32; //@line 18734
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 18735
   HEAP32[$141 >> 2] = $34; //@line 18736
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 18737
   HEAP32[$142 >> 2] = $36; //@line 18738
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 18739
   HEAP32[$143 >> 2] = $38; //@line 18740
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 18741
   HEAP32[$144 >> 2] = $40; //@line 18742
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 18743
   HEAP32[$145 >> 2] = $42; //@line 18744
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 18745
   HEAP32[$146 >> 2] = $44; //@line 18746
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 18747
   HEAP32[$147 >> 2] = $52; //@line 18748
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 18749
   HEAP32[$148 >> 2] = $$131; //@line 18750
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 18751
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 18752
   sp = STACKTOP; //@line 18753
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 18758
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 18759
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 18760
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 18763
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 18764
    HEAP32[$98 >> 2] = $2; //@line 18765
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 18766
    HEAP32[$99 >> 2] = $4; //@line 18767
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 18768
    HEAP32[$100 >> 2] = $6; //@line 18769
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 18770
    HEAP32[$101 >> 2] = $10; //@line 18771
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 18772
    HEAP32[$102 >> 2] = $8; //@line 18773
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 18774
    HEAP32[$103 >> 2] = $52; //@line 18775
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 18776
    HEAP32[$104 >> 2] = $12; //@line 18777
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 18778
    HEAP32[$105 >> 2] = $14; //@line 18779
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 18780
    HEAP32[$106 >> 2] = $16; //@line 18781
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 18782
    HEAP32[$107 >> 2] = $18; //@line 18783
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 18784
    HEAP32[$108 >> 2] = $20; //@line 18785
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 18786
    HEAP32[$109 >> 2] = $22; //@line 18787
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 18788
    HEAP32[$110 >> 2] = $24; //@line 18789
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 18790
    HEAP32[$111 >> 2] = $92; //@line 18791
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 18792
    HEAP32[$112 >> 2] = $26; //@line 18793
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 18794
    HEAP32[$113 >> 2] = $28; //@line 18795
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 18796
    HEAP32[$114 >> 2] = $30; //@line 18797
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 18798
    HEAP32[$115 >> 2] = $$131; //@line 18799
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 18800
    HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 18801
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 18802
    HEAP32[$117 >> 2] = $32; //@line 18803
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 18804
    HEAP32[$118 >> 2] = $34; //@line 18805
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 18806
    HEAP32[$119 >> 2] = $36; //@line 18807
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 18808
    HEAP32[$120 >> 2] = $38; //@line 18809
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 18810
    HEAP32[$121 >> 2] = $40; //@line 18811
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 18812
    HEAP32[$122 >> 2] = $42; //@line 18813
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 18814
    HEAP32[$123 >> 2] = $44; //@line 18815
    sp = STACKTOP; //@line 18816
    return;
   }
   ___async_unwind = 0; //@line 18819
   HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 18820
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 18821
   HEAP32[$98 >> 2] = $2; //@line 18822
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 18823
   HEAP32[$99 >> 2] = $4; //@line 18824
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 18825
   HEAP32[$100 >> 2] = $6; //@line 18826
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 18827
   HEAP32[$101 >> 2] = $10; //@line 18828
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 18829
   HEAP32[$102 >> 2] = $8; //@line 18830
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 18831
   HEAP32[$103 >> 2] = $52; //@line 18832
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 18833
   HEAP32[$104 >> 2] = $12; //@line 18834
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 18835
   HEAP32[$105 >> 2] = $14; //@line 18836
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 18837
   HEAP32[$106 >> 2] = $16; //@line 18838
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 18839
   HEAP32[$107 >> 2] = $18; //@line 18840
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 18841
   HEAP32[$108 >> 2] = $20; //@line 18842
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 18843
   HEAP32[$109 >> 2] = $22; //@line 18844
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 18845
   HEAP32[$110 >> 2] = $24; //@line 18846
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 18847
   HEAP32[$111 >> 2] = $92; //@line 18848
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 18849
   HEAP32[$112 >> 2] = $26; //@line 18850
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 18851
   HEAP32[$113 >> 2] = $28; //@line 18852
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 18853
   HEAP32[$114 >> 2] = $30; //@line 18854
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 18855
   HEAP32[$115 >> 2] = $$131; //@line 18856
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 18857
   HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 18858
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 18859
   HEAP32[$117 >> 2] = $32; //@line 18860
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 18861
   HEAP32[$118 >> 2] = $34; //@line 18862
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 18863
   HEAP32[$119 >> 2] = $36; //@line 18864
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 18865
   HEAP32[$120 >> 2] = $38; //@line 18866
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 18867
   HEAP32[$121 >> 2] = $40; //@line 18868
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 18869
   HEAP32[$122 >> 2] = $42; //@line 18870
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 18871
   HEAP32[$123 >> 2] = $44; //@line 18872
   sp = STACKTOP; //@line 18873
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 18878
  $156 = $150 + 44 | 0; //@line 18879
  $157 = HEAP32[$156 >> 2] | 0; //@line 18880
  if (!$157) {
   HEAP32[$14 >> 2] = 0; //@line 18883
   $188 = HEAP32[$150 >> 2] | 0; //@line 18884
   HEAP32[$16 >> 2] = 0; //@line 18885
   HEAP32[$18 >> 2] = 192; //@line 18886
   HEAP32[$20 >> 2] = $188; //@line 18887
   HEAP32[$12 >> 2] = 724; //@line 18888
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 18889
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 18890
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 18893
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 18894
    HEAP32[$189 >> 2] = $2; //@line 18895
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 18896
    HEAP32[$190 >> 2] = $4; //@line 18897
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 18898
    HEAP32[$191 >> 2] = $6; //@line 18899
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 18900
    HEAP32[$192 >> 2] = $8; //@line 18901
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 18902
    HEAP32[$193 >> 2] = $10; //@line 18903
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 18904
    HEAP32[$194 >> 2] = $12; //@line 18905
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 18906
    HEAP32[$195 >> 2] = $14; //@line 18907
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 18908
    HEAP32[$196 >> 2] = $16; //@line 18909
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 18910
    HEAP32[$197 >> 2] = $18; //@line 18911
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 18912
    HEAP32[$198 >> 2] = $20; //@line 18913
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 18914
    HEAP32[$199 >> 2] = $22; //@line 18915
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 18916
    HEAP32[$200 >> 2] = $24; //@line 18917
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 18918
    HEAP32[$201 >> 2] = $26; //@line 18919
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 18920
    HEAP32[$202 >> 2] = $28; //@line 18921
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 18922
    HEAP32[$203 >> 2] = $30; //@line 18923
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 18924
    HEAP32[$204 >> 2] = $32; //@line 18925
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 18926
    HEAP32[$205 >> 2] = $34; //@line 18927
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 18928
    HEAP32[$206 >> 2] = $36; //@line 18929
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 18930
    HEAP32[$207 >> 2] = $38; //@line 18931
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 18932
    HEAP32[$208 >> 2] = $40; //@line 18933
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 18934
    HEAP32[$209 >> 2] = $42; //@line 18935
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 18936
    HEAP32[$210 >> 2] = $44; //@line 18937
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 18938
    HEAP32[$211 >> 2] = $$131; //@line 18939
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 18940
    HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 18941
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 18942
    HEAP32[$213 >> 2] = $52; //@line 18943
    sp = STACKTOP; //@line 18944
    return;
   }
   ___async_unwind = 0; //@line 18947
   HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 18948
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 18949
   HEAP32[$189 >> 2] = $2; //@line 18950
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 18951
   HEAP32[$190 >> 2] = $4; //@line 18952
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 18953
   HEAP32[$191 >> 2] = $6; //@line 18954
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 18955
   HEAP32[$192 >> 2] = $8; //@line 18956
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 18957
   HEAP32[$193 >> 2] = $10; //@line 18958
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 18959
   HEAP32[$194 >> 2] = $12; //@line 18960
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 18961
   HEAP32[$195 >> 2] = $14; //@line 18962
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 18963
   HEAP32[$196 >> 2] = $16; //@line 18964
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 18965
   HEAP32[$197 >> 2] = $18; //@line 18966
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 18967
   HEAP32[$198 >> 2] = $20; //@line 18968
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 18969
   HEAP32[$199 >> 2] = $22; //@line 18970
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 18971
   HEAP32[$200 >> 2] = $24; //@line 18972
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 18973
   HEAP32[$201 >> 2] = $26; //@line 18974
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 18975
   HEAP32[$202 >> 2] = $28; //@line 18976
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 18977
   HEAP32[$203 >> 2] = $30; //@line 18978
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 18979
   HEAP32[$204 >> 2] = $32; //@line 18980
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 18981
   HEAP32[$205 >> 2] = $34; //@line 18982
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 18983
   HEAP32[$206 >> 2] = $36; //@line 18984
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 18985
   HEAP32[$207 >> 2] = $38; //@line 18986
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 18987
   HEAP32[$208 >> 2] = $40; //@line 18988
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 18989
   HEAP32[$209 >> 2] = $42; //@line 18990
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 18991
   HEAP32[$210 >> 2] = $44; //@line 18992
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 18993
   HEAP32[$211 >> 2] = $$131; //@line 18994
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 18995
   HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 18996
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 18997
   HEAP32[$213 >> 2] = $52; //@line 18998
   sp = STACKTOP; //@line 18999
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 19004
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 19005
   FUNCTION_TABLE_vii[$161 & 7]($26, $150 + 32 | 0); //@line 19006
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 19009
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 19010
    HEAP32[$162 >> 2] = $2; //@line 19011
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 19012
    HEAP32[$163 >> 2] = $4; //@line 19013
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 19014
    HEAP32[$164 >> 2] = $6; //@line 19015
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 19016
    HEAP32[$165 >> 2] = $8; //@line 19017
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 19018
    HEAP32[$166 >> 2] = $10; //@line 19019
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 19020
    HEAP32[$167 >> 2] = $12; //@line 19021
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 19022
    HEAP32[$168 >> 2] = $14; //@line 19023
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 19024
    HEAP32[$169 >> 2] = $16; //@line 19025
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 19026
    HEAP32[$170 >> 2] = $18; //@line 19027
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 19028
    HEAP32[$171 >> 2] = $20; //@line 19029
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 19030
    HEAP32[$172 >> 2] = $22; //@line 19031
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 19032
    HEAP32[$173 >> 2] = $24; //@line 19033
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 19034
    HEAP32[$174 >> 2] = $26; //@line 19035
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 19036
    HEAP32[$175 >> 2] = $28; //@line 19037
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 19038
    HEAP32[$176 >> 2] = $30; //@line 19039
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 19040
    HEAP32[$177 >> 2] = $32; //@line 19041
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 19042
    HEAP32[$178 >> 2] = $34; //@line 19043
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 19044
    HEAP32[$179 >> 2] = $36; //@line 19045
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 19046
    HEAP32[$180 >> 2] = $38; //@line 19047
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 19048
    HEAP32[$181 >> 2] = $40; //@line 19049
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 19050
    HEAP32[$182 >> 2] = $42; //@line 19051
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 19052
    HEAP32[$183 >> 2] = $44; //@line 19053
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 19054
    HEAP32[$184 >> 2] = $156; //@line 19055
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 19056
    HEAP32[$185 >> 2] = $52; //@line 19057
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 19058
    HEAP32[$186 >> 2] = $$131; //@line 19059
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 19060
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 19061
    sp = STACKTOP; //@line 19062
    return;
   }
   ___async_unwind = 0; //@line 19065
   HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 19066
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 19067
   HEAP32[$162 >> 2] = $2; //@line 19068
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 19069
   HEAP32[$163 >> 2] = $4; //@line 19070
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 19071
   HEAP32[$164 >> 2] = $6; //@line 19072
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 19073
   HEAP32[$165 >> 2] = $8; //@line 19074
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 19075
   HEAP32[$166 >> 2] = $10; //@line 19076
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 19077
   HEAP32[$167 >> 2] = $12; //@line 19078
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 19079
   HEAP32[$168 >> 2] = $14; //@line 19080
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 19081
   HEAP32[$169 >> 2] = $16; //@line 19082
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 19083
   HEAP32[$170 >> 2] = $18; //@line 19084
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 19085
   HEAP32[$171 >> 2] = $20; //@line 19086
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 19087
   HEAP32[$172 >> 2] = $22; //@line 19088
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 19089
   HEAP32[$173 >> 2] = $24; //@line 19090
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 19091
   HEAP32[$174 >> 2] = $26; //@line 19092
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 19093
   HEAP32[$175 >> 2] = $28; //@line 19094
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 19095
   HEAP32[$176 >> 2] = $30; //@line 19096
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 19097
   HEAP32[$177 >> 2] = $32; //@line 19098
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 19099
   HEAP32[$178 >> 2] = $34; //@line 19100
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 19101
   HEAP32[$179 >> 2] = $36; //@line 19102
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 19103
   HEAP32[$180 >> 2] = $38; //@line 19104
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 19105
   HEAP32[$181 >> 2] = $40; //@line 19106
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 19107
   HEAP32[$182 >> 2] = $42; //@line 19108
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 19109
   HEAP32[$183 >> 2] = $44; //@line 19110
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 19111
   HEAP32[$184 >> 2] = $156; //@line 19112
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 19113
   HEAP32[$185 >> 2] = $52; //@line 19114
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 19115
   HEAP32[$186 >> 2] = $$131; //@line 19116
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 19117
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 19118
   sp = STACKTOP; //@line 19119
   return;
  }
 }
}
function _sn_coap_builder_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$120$129$i$i = 0, $$120$129$i14$i = 0, $$120$129$i23$i = 0, $$120$129$i32$i = 0, $$120$129$i41$i = 0, $$120$129$i5$i = 0, $$120$129$i50$i = 0, $$120$129$i59$i = 0, $$120$129$i68$i = 0, $$120$232$i$i = 0, $$120$232$i16$i = 0, $$120$232$i25$i = 0, $$120$232$i34$i = 0, $$120$232$i43$i = 0, $$120$232$i52$i = 0, $$120$232$i61$i = 0, $$120$232$i7$i = 0, $$120$232$i70$i = 0, $$120$3$i$i = 0, $$120$3$i17$i = 0, $$120$3$i26$i = 0, $$120$3$i35$i = 0, $$120$3$i44$i = 0, $$120$3$i53$i = 0, $$120$3$i62$i = 0, $$120$3$i71$i = 0, $$120$3$i8$i = 0, $$12026$i$i = 0, $$12026$i12$i = 0, $$12026$i21$i = 0, $$12026$i3$i = 0, $$12026$i30$i = 0, $$12026$i39$i = 0, $$12026$i48$i = 0, $$12026$i57$i = 0, $$12026$i66$i = 0, $$cast = 0, $$sink13$i = 0, $$sink13$i70 = 0, $$sink63$i = 0, $$sink63$i69 = 0, $$sink7$i = 0, $$sink7$i106 = 0, $$sink7$i16 = 0, $$sink7$i24 = 0, $$sink7$i34 = 0, $$sink7$i44 = 0, $$sink7$i54 = 0, $$sink7$i76 = 0, $$sink7$i86 = 0, $$sink7$i96 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $107 = 0, $111 = 0, $117 = 0, $119 = 0, $128 = 0, $13 = 0, $137 = 0, $142 = 0, $143 = 0, $165 = 0, $166 = 0, $17 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $180 = 0, $184 = 0, $190 = 0, $192 = 0, $201 = 0, $21 = 0, $210 = 0, $215 = 0, $216 = 0, $238 = 0, $242 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $256 = 0, $260 = 0, $266 = 0, $268 = 0, $277 = 0, $286 = 0, $291 = 0, $292 = 0, $3 = 0, $313 = 0, $316 = 0, $32 = 0, $323 = 0, $324 = 0, $326 = 0, $327 = 0, $330 = 0, $334 = 0, $340 = 0, $342 = 0, $351 = 0, $360 = 0, $365 = 0, $366 = 0, $388 = 0, $39 = 0, $390 = 0, $392 = 0, $399 = 0, $4 = 0, $400 = 0, $402 = 0, $403 = 0, $406 = 0, $410 = 0, $416 = 0, $418 = 0, $42 = 0, $427 = 0, $436 = 0, $441 = 0, $442 = 0, $464 = 0, $467 = 0, $469 = 0, $476 = 0, $477 = 0, $479 = 0, $480 = 0, $483 = 0, $487 = 0, $493 = 0, $495 = 0, $5 = 0, $504 = 0, $513 = 0, $518 = 0, $519 = 0, $54 = 0, $541 = 0, $542 = 0, $549 = 0, $55 = 0, $551 = 0, $552 = 0, $556 = 0, $560 = 0, $566 = 0, $568 = 0, $577 = 0, $58 = 0, $586 = 0, $591 = 0, $592 = 0, $61 = 0, $614 = 0, $619 = 0, $62 = 0, $625 = 0, $627 = 0, $628 = 0, $63 = 0, $632 = 0, $636 = 0, $64 = 0, $642 = 0, $644 = 0, $653 = 0, $662 = 0, $667 = 0, $668 = 0, $67 = 0, $69 = 0, $690 = 0, $691 = 0, $693 = 0, $695 = 0, $697 = 0, $698 = 0, $703 = 0, $707 = 0, $71 = 0, $713 = 0, $715 = 0, $724 = 0, $733 = 0, $737 = 0, $742 = 0, $744 = 0, $745 = 0, $748 = 0, $753 = 0, $759 = 0, $761 = 0, $762 = 0, $766 = 0, $77 = 0, $770 = 0, $776 = 0, $778 = 0, $787 = 0, $796 = 0, $8 = 0, $801 = 0, $802 = 0, $81 = 0, $823 = 0, $826 = 0, $831 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $93 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1897
 STACKTOP = STACKTOP + 48 | 0; //@line 1898
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1898
 $vararg_buffer5 = sp + 24 | 0; //@line 1899
 $3 = sp + 36 | 0; //@line 1903
 $4 = sp + 32 | 0; //@line 1904
 $5 = sp + 28 | 0; //@line 1905
 HEAP32[$5 >> 2] = $0; //@line 1906
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$1 = -2; //@line 1911
  STACKTOP = sp; //@line 1912
  return $$1 | 0; //@line 1912
 }
 $8 = _sn_coap_builder_calc_needed_packet_data_size_2($1, 0) | 0; //@line 1914
 if (!($8 << 16 >> 16)) {
  _mbed_tracef(2, 3803, 2598, sp); //@line 1917
  $$1 = -1; //@line 1918
  STACKTOP = sp; //@line 1919
  return $$1 | 0; //@line 1919
 }
 _memset($0 | 0, 0, $8 & 65535 | 0) | 0; //@line 1922
 $$cast = $0; //@line 1923
 if ((_sn_coap_header_validity_check($1, 64) | 0) << 24 >> 24) {
  _mbed_tracef(2, 3803, 2646, sp + 8 | 0); //@line 1927
  _mbed_tracef(2, 3803, 2698, sp + 16 | 0); //@line 1928
  $$1 = -1; //@line 1929
  STACKTOP = sp; //@line 1930
  return $$1 | 0; //@line 1930
 }
 $13 = HEAP8[$0 >> 0] | 0; //@line 1932
 HEAP8[$0 >> 0] = ($13 & 255) + 64; //@line 1936
 $17 = $1 + 12 | 0; //@line 1937
 $21 = (HEAP32[$17 >> 2] | 0) + ($13 + 64 & 255) | 0; //@line 1941
 HEAP8[$0 >> 0] = $21; //@line 1943
 HEAP8[$0 >> 0] = $21 + (HEAPU8[$1 >> 0] | 0); //@line 1948
 HEAP8[$0 + 1 >> 0] = HEAP32[$1 + 8 >> 2]; //@line 1953
 $32 = $1 + 20 | 0; //@line 1955
 HEAP8[$0 + 2 >> 0] = (HEAPU16[$32 >> 1] | 0) >>> 8; //@line 1959
 HEAP8[$0 + 3 >> 0] = HEAP16[$32 >> 1]; //@line 1963
 $39 = $0 + 4 | 0; //@line 1964
 HEAP32[$5 >> 2] = $39; //@line 1965
 if ((HEAP32[$17 >> 2] | 0) != 48) {
  $42 = $1 + 32 | 0; //@line 1969
  if (!(HEAP32[$42 >> 2] | 0)) {
   if (!(HEAP32[$1 + 28 >> 2] | 0)) {
    if ((HEAP32[$1 + 16 >> 2] | 0) == -1) {
     if (!(HEAP32[$1 + 40 >> 2] | 0)) {
      _mbed_tracef(2, 3803, 2742, $vararg_buffer5); //@line 1985
     } else {
      label = 12; //@line 1987
     }
    } else {
     label = 12; //@line 1990
    }
   } else {
    label = 12; //@line 1993
   }
  } else {
   label = 12; //@line 1996
  }
  if ((label | 0) == 12) {
   $54 = HEAP8[$1 >> 0] | 0; //@line 1999
   $55 = $54 & 255; //@line 2000
   if (!($54 << 24 >> 24)) {
    $61 = 0; //@line 2003
   } else {
    $58 = HEAP32[$1 + 28 >> 2] | 0; //@line 2006
    if (!$58) {
     $61 = $54; //@line 2009
    } else {
     _memcpy($39 | 0, $58 | 0, $55 | 0) | 0; //@line 2011
     $61 = HEAP8[$1 >> 0] | 0; //@line 2013
    }
   }
   $62 = $39 + ($61 & 255) | 0; //@line 2017
   HEAP32[$5 >> 2] = $62; //@line 2018
   HEAP16[$4 >> 1] = 0; //@line 2019
   $63 = $1 + 40 | 0; //@line 2020
   $64 = HEAP32[$63 >> 2] | 0; //@line 2021
   if ($64 | 0) {
    $67 = HEAP16[$64 + 4 >> 1] | 0; //@line 2025
    $69 = HEAP32[$64 + 52 >> 2] | 0; //@line 2027
    if (!$69) {
     $90 = $64; //@line 2030
    } else {
     $71 = $67 & 65535; //@line 2032
     HEAP8[$62 >> 0] = (($67 & 65535) < 13 ? $67 & 65535 : ($67 & 65535) < 269 ? 13 : 14) + 48; //@line 2040
     $77 = $62 + 1 | 0; //@line 2041
     HEAP32[$5 >> 2] = $77; //@line 2042
     if (($67 + -13 & 65535) < 256) {
      $$sink13$i70 = 1; //@line 2047
      $$sink63$i69 = $71 + 243 | 0; //@line 2047
      label = 21; //@line 2048
     } else {
      if (($67 & 65535) > 268) {
       $81 = $71 + -269 | 0; //@line 2052
       HEAP8[$62 + 2 >> 0] = $81; //@line 2055
       $$sink13$i70 = 2; //@line 2057
       $$sink63$i69 = $81 >>> 8; //@line 2057
       label = 21; //@line 2058
      } else {
       $87 = $77; //@line 2060
      }
     }
     if ((label | 0) == 21) {
      HEAP8[$77 >> 0] = $$sink63$i69; //@line 2065
      $86 = $77 + $$sink13$i70 | 0; //@line 2066
      HEAP32[$5 >> 2] = $86; //@line 2067
      $87 = $86; //@line 2068
     }
     HEAP16[$4 >> 1] = 3; //@line 2070
     _memcpy($87 | 0, $69 | 0, $71 | 0) | 0; //@line 2071
     HEAP32[$5 >> 2] = $87 + $71; //@line 2073
     $90 = HEAP32[$63 >> 2] | 0; //@line 2075
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $90 + 48 | 0, $90, 4, $4); //@line 2078
    $91 = HEAP32[$63 >> 2] | 0; //@line 2079
    $93 = HEAP32[$91 + 32 >> 2] | 0; //@line 2081
    if (($93 | 0) == -1) {
     $165 = $91; //@line 2084
    } else {
     if ($93 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $93 >>> 24; //@line 2090
      $$12026$i$i = 1; //@line 2091
      label = 35; //@line 2092
     } else {
      if ($93 << 8 >>> 0 > 16777215) {
       $$12026$i$i = 0; //@line 2097
       label = 35; //@line 2098
      } else {
       if ($93 << 16 >>> 0 > 16777215) {
        $$120$129$i$i = 0; //@line 2103
        label = 37; //@line 2104
       } else {
        if ($93 << 24 >>> 0 > 16777215) {
         $$120$232$i$i = 0; //@line 2109
         label = 39; //@line 2110
        } else {
         $$120$3$i$i = 0; //@line 2112
        }
       }
      }
     }
     if ((label | 0) == 35) {
      HEAP8[$3 + ($$12026$i$i & 255) >> 0] = $93 >>> 16; //@line 2123
      $$120$129$i$i = $$12026$i$i + 1 << 24 >> 24; //@line 2124
      label = 37; //@line 2125
     }
     if ((label | 0) == 37) {
      HEAP8[$3 + ($$120$129$i$i & 255) >> 0] = $93 >>> 8; //@line 2133
      $$120$232$i$i = $$120$129$i$i + 1 << 24 >> 24; //@line 2134
      label = 39; //@line 2135
     }
     if ((label | 0) == 39) {
      HEAP8[$3 + ($$120$232$i$i & 255) >> 0] = $93; //@line 2142
      $$120$3$i$i = $$120$232$i$i + 1 << 24 >> 24; //@line 2143
     }
     $100 = $$120$3$i$i & 255; //@line 2145
     $101 = HEAP16[$4 >> 1] | 0; //@line 2146
     $103 = 6 - ($101 & 65535) | 0; //@line 2148
     $104 = $$120$3$i$i & 255; //@line 2149
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i$i & 255) < 13 ? $$120$3$i$i : 13; //@line 2153
     $107 = 6 - $101 << 16 >> 16; //@line 2154
     do {
      if (($107 & 65535) < 13) {
       $111 = HEAP32[$5 >> 2] | 0; //@line 2160
       HEAP8[$111 >> 0] = (($107 & 65535) << 4) + (HEAPU8[$111 >> 0] | 0); //@line 2165
       $$sink7$i96 = 1; //@line 2166
      } else {
       $117 = HEAP32[$5 >> 2] | 0; //@line 2169
       $119 = HEAPU8[$117 >> 0] | 0; //@line 2171
       if (($107 & 65535) < 269) {
        HEAP8[$117 >> 0] = $119 + 208; //@line 2175
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $103 + 243; //@line 2180
        $$sink7$i96 = 2; //@line 2181
        break;
       } else {
        HEAP8[$117 >> 0] = $119 + 224; //@line 2186
        $128 = $103 + 65267 | 0; //@line 2187
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $128; //@line 2191
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $128 >>> 8; //@line 2196
        $$sink7$i96 = 3; //@line 2197
        break;
       }
      }
     } while (0);
     $137 = (HEAP32[$5 >> 2] | 0) + $$sink7$i96 | 0; //@line 2203
     HEAP32[$5 >> 2] = $137; //@line 2204
     if (($100 + -13 & 65535) < 256) {
      HEAP8[$137 >> 0] = $104 + 243; //@line 2210
      $142 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2212
      HEAP32[$5 >> 2] = $142; //@line 2213
      $143 = $142; //@line 2214
     } else {
      $143 = $137; //@line 2216
     }
     HEAP16[$4 >> 1] = 6; //@line 2218
     _memcpy($143 | 0, $3 | 0, $104 | 0) | 0; //@line 2219
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $104; //@line 2222
     $165 = HEAP32[$63 >> 2] | 0; //@line 2224
    }
    $166 = HEAP32[$165 + 28 >> 2] | 0; //@line 2227
    if (($166 | 0) == -1) {
     $238 = $165; //@line 2230
    } else {
     if ($166 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $166 >>> 24; //@line 2236
      $$12026$i3$i = 1; //@line 2237
      label = 52; //@line 2238
     } else {
      if ($166 << 8 >>> 0 > 16777215) {
       $$12026$i3$i = 0; //@line 2243
       label = 52; //@line 2244
      } else {
       if ($166 << 16 >>> 0 > 16777215) {
        $$120$129$i5$i = 0; //@line 2249
        label = 54; //@line 2250
       } else {
        if ($166 << 24 >>> 0 > 16777215) {
         $$120$232$i7$i = 0; //@line 2255
         label = 56; //@line 2256
        } else {
         $$120$3$i8$i = 0; //@line 2258
        }
       }
      }
     }
     if ((label | 0) == 52) {
      HEAP8[$3 + ($$12026$i3$i & 255) >> 0] = $166 >>> 16; //@line 2269
      $$120$129$i5$i = $$12026$i3$i + 1 << 24 >> 24; //@line 2270
      label = 54; //@line 2271
     }
     if ((label | 0) == 54) {
      HEAP8[$3 + ($$120$129$i5$i & 255) >> 0] = $166 >>> 8; //@line 2279
      $$120$232$i7$i = $$120$129$i5$i + 1 << 24 >> 24; //@line 2280
      label = 56; //@line 2281
     }
     if ((label | 0) == 56) {
      HEAP8[$3 + ($$120$232$i7$i & 255) >> 0] = $166; //@line 2288
      $$120$3$i8$i = $$120$232$i7$i + 1 << 24 >> 24; //@line 2289
     }
     $173 = $$120$3$i8$i & 255; //@line 2291
     $174 = HEAP16[$4 >> 1] | 0; //@line 2292
     $176 = 7 - ($174 & 65535) | 0; //@line 2294
     $177 = $$120$3$i8$i & 255; //@line 2295
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i8$i & 255) < 13 ? $$120$3$i8$i : 13; //@line 2299
     $180 = 7 - $174 << 16 >> 16; //@line 2300
     do {
      if (($180 & 65535) < 13) {
       $184 = HEAP32[$5 >> 2] | 0; //@line 2306
       HEAP8[$184 >> 0] = (($180 & 65535) << 4) + (HEAPU8[$184 >> 0] | 0); //@line 2311
       $$sink7$i106 = 1; //@line 2312
      } else {
       $190 = HEAP32[$5 >> 2] | 0; //@line 2315
       $192 = HEAPU8[$190 >> 0] | 0; //@line 2317
       if (($180 & 65535) < 269) {
        HEAP8[$190 >> 0] = $192 + 208; //@line 2321
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $176 + 243; //@line 2326
        $$sink7$i106 = 2; //@line 2327
        break;
       } else {
        HEAP8[$190 >> 0] = $192 + 224; //@line 2332
        $201 = $176 + 65267 | 0; //@line 2333
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $201; //@line 2337
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $201 >>> 8; //@line 2342
        $$sink7$i106 = 3; //@line 2343
        break;
       }
      }
     } while (0);
     $210 = (HEAP32[$5 >> 2] | 0) + $$sink7$i106 | 0; //@line 2349
     HEAP32[$5 >> 2] = $210; //@line 2350
     if (($173 + -13 & 65535) < 256) {
      HEAP8[$210 >> 0] = $177 + 243; //@line 2356
      $215 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2358
      HEAP32[$5 >> 2] = $215; //@line 2359
      $216 = $215; //@line 2360
     } else {
      $216 = $210; //@line 2362
     }
     HEAP16[$4 >> 1] = 7; //@line 2364
     _memcpy($216 | 0, $3 | 0, $177 | 0) | 0; //@line 2365
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $177; //@line 2368
     $238 = HEAP32[$63 >> 2] | 0; //@line 2370
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $238 + 56 | 0, $238 + 6 | 0, 8, $4); //@line 2374
   }
   _sn_coap_builder_options_build_add_multiple_option($5, $42, $1 + 22 | 0, 11, $4); //@line 2377
   $242 = HEAP32[$1 + 16 >> 2] | 0; //@line 2379
   if (($242 | 0) != -1) {
    if ($242 >>> 0 > 16777215) {
     HEAP8[$3 >> 0] = $242 >>> 24; //@line 2386
     $$12026$i12$i = 1; //@line 2387
     label = 70; //@line 2388
    } else {
     if ($242 << 8 >>> 0 > 16777215) {
      $$12026$i12$i = 0; //@line 2393
      label = 70; //@line 2394
     } else {
      if ($242 << 16 >>> 0 > 16777215) {
       $$120$129$i14$i = 0; //@line 2399
       label = 72; //@line 2400
      } else {
       if ($242 << 24 >>> 0 > 16777215) {
        $$120$232$i16$i = 0; //@line 2405
        label = 74; //@line 2406
       } else {
        $$120$3$i17$i = 0; //@line 2408
       }
      }
     }
    }
    if ((label | 0) == 70) {
     HEAP8[$3 + ($$12026$i12$i & 255) >> 0] = $242 >>> 16; //@line 2419
     $$120$129$i14$i = $$12026$i12$i + 1 << 24 >> 24; //@line 2420
     label = 72; //@line 2421
    }
    if ((label | 0) == 72) {
     HEAP8[$3 + ($$120$129$i14$i & 255) >> 0] = $242 >>> 8; //@line 2429
     $$120$232$i16$i = $$120$129$i14$i + 1 << 24 >> 24; //@line 2430
     label = 74; //@line 2431
    }
    if ((label | 0) == 74) {
     HEAP8[$3 + ($$120$232$i16$i & 255) >> 0] = $242; //@line 2438
     $$120$3$i17$i = $$120$232$i16$i + 1 << 24 >> 24; //@line 2439
    }
    $249 = $$120$3$i17$i & 255; //@line 2441
    $250 = HEAP16[$4 >> 1] | 0; //@line 2442
    $252 = 12 - ($250 & 65535) | 0; //@line 2444
    $253 = $$120$3$i17$i & 255; //@line 2445
    HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i17$i & 255) < 13 ? $$120$3$i17$i : 13; //@line 2449
    $256 = 12 - $250 << 16 >> 16; //@line 2450
    do {
     if (($256 & 65535) < 13) {
      $260 = HEAP32[$5 >> 2] | 0; //@line 2456
      HEAP8[$260 >> 0] = (($256 & 65535) << 4) + (HEAPU8[$260 >> 0] | 0); //@line 2461
      $$sink7$i86 = 1; //@line 2462
     } else {
      $266 = HEAP32[$5 >> 2] | 0; //@line 2465
      $268 = HEAPU8[$266 >> 0] | 0; //@line 2467
      if (($256 & 65535) < 269) {
       HEAP8[$266 >> 0] = $268 + 208; //@line 2471
       HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $252 + 243; //@line 2476
       $$sink7$i86 = 2; //@line 2477
       break;
      } else {
       HEAP8[$266 >> 0] = $268 + 224; //@line 2482
       $277 = $252 + 65267 | 0; //@line 2483
       HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $277; //@line 2487
       HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $277 >>> 8; //@line 2492
       $$sink7$i86 = 3; //@line 2493
       break;
      }
     }
    } while (0);
    $286 = (HEAP32[$5 >> 2] | 0) + $$sink7$i86 | 0; //@line 2499
    HEAP32[$5 >> 2] = $286; //@line 2500
    if (($249 + -13 & 65535) < 256) {
     HEAP8[$286 >> 0] = $253 + 243; //@line 2506
     $291 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2508
     HEAP32[$5 >> 2] = $291; //@line 2509
     $292 = $291; //@line 2510
    } else {
     $292 = $286; //@line 2512
    }
    HEAP16[$4 >> 1] = 12; //@line 2514
    _memcpy($292 | 0, $3 | 0, $253 | 0) | 0; //@line 2515
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $253; //@line 2518
   }
   $313 = HEAP32[$63 >> 2] | 0; //@line 2520
   if ($313 | 0) {
    $316 = HEAP32[$313 + 16 >> 2] | 0; //@line 2524
    if (($316 | 0) == 60) {
     $388 = $313; //@line 2527
    } else {
     if ($316 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $316 >>> 24; //@line 2533
      $$12026$i21$i = 1; //@line 2534
      label = 88; //@line 2535
     } else {
      if ($316 << 8 >>> 0 > 16777215) {
       $$12026$i21$i = 0; //@line 2540
       label = 88; //@line 2541
      } else {
       if ($316 << 16 >>> 0 > 16777215) {
        $$120$129$i23$i = 0; //@line 2546
        label = 90; //@line 2547
       } else {
        if ($316 << 24 >>> 0 > 16777215) {
         $$120$232$i25$i = 0; //@line 2552
         label = 92; //@line 2553
        } else {
         $$120$3$i26$i = 0; //@line 2555
        }
       }
      }
     }
     if ((label | 0) == 88) {
      HEAP8[$3 + ($$12026$i21$i & 255) >> 0] = $316 >>> 16; //@line 2566
      $$120$129$i23$i = $$12026$i21$i + 1 << 24 >> 24; //@line 2567
      label = 90; //@line 2568
     }
     if ((label | 0) == 90) {
      HEAP8[$3 + ($$120$129$i23$i & 255) >> 0] = $316 >>> 8; //@line 2576
      $$120$232$i25$i = $$120$129$i23$i + 1 << 24 >> 24; //@line 2577
      label = 92; //@line 2578
     }
     if ((label | 0) == 92) {
      HEAP8[$3 + ($$120$232$i25$i & 255) >> 0] = $316; //@line 2585
      $$120$3$i26$i = $$120$232$i25$i + 1 << 24 >> 24; //@line 2586
     }
     $323 = $$120$3$i26$i & 255; //@line 2588
     $324 = HEAP16[$4 >> 1] | 0; //@line 2589
     $326 = 14 - ($324 & 65535) | 0; //@line 2591
     $327 = $$120$3$i26$i & 255; //@line 2592
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i26$i & 255) < 13 ? $$120$3$i26$i : 13; //@line 2596
     $330 = 14 - $324 << 16 >> 16; //@line 2597
     do {
      if (($330 & 65535) < 13) {
       $334 = HEAP32[$5 >> 2] | 0; //@line 2603
       HEAP8[$334 >> 0] = (($330 & 65535) << 4) + (HEAPU8[$334 >> 0] | 0); //@line 2608
       $$sink7$i76 = 1; //@line 2609
      } else {
       $340 = HEAP32[$5 >> 2] | 0; //@line 2612
       $342 = HEAPU8[$340 >> 0] | 0; //@line 2614
       if (($330 & 65535) < 269) {
        HEAP8[$340 >> 0] = $342 + 208; //@line 2618
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $326 + 243; //@line 2623
        $$sink7$i76 = 2; //@line 2624
        break;
       } else {
        HEAP8[$340 >> 0] = $342 + 224; //@line 2629
        $351 = $326 + 65267 | 0; //@line 2630
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $351; //@line 2634
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $351 >>> 8; //@line 2639
        $$sink7$i76 = 3; //@line 2640
        break;
       }
      }
     } while (0);
     $360 = (HEAP32[$5 >> 2] | 0) + $$sink7$i76 | 0; //@line 2646
     HEAP32[$5 >> 2] = $360; //@line 2647
     if (($323 + -13 & 65535) < 256) {
      HEAP8[$360 >> 0] = $327 + 243; //@line 2653
      $365 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2655
      HEAP32[$5 >> 2] = $365; //@line 2656
      $366 = $365; //@line 2657
     } else {
      $366 = $360; //@line 2659
     }
     HEAP16[$4 >> 1] = 14; //@line 2661
     _memcpy($366 | 0, $3 | 0, $327 | 0) | 0; //@line 2662
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $327; //@line 2665
     $388 = HEAP32[$63 >> 2] | 0; //@line 2667
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $388 + 64 | 0, $388 + 10 | 0, 15, $4); //@line 2671
    $390 = HEAP32[$63 >> 2] | 0; //@line 2672
    $392 = HEAP32[$390 + 12 >> 2] | 0; //@line 2674
    if (($392 | 0) == -1) {
     $464 = $390; //@line 2677
    } else {
     if ($392 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $392 >>> 24; //@line 2683
      $$12026$i30$i = 1; //@line 2684
      label = 105; //@line 2685
     } else {
      if ($392 << 8 >>> 0 > 16777215) {
       $$12026$i30$i = 0; //@line 2690
       label = 105; //@line 2691
      } else {
       if ($392 << 16 >>> 0 > 16777215) {
        $$120$129$i32$i = 0; //@line 2696
        label = 107; //@line 2697
       } else {
        if ($392 << 24 >>> 0 > 16777215) {
         $$120$232$i34$i = 0; //@line 2702
         label = 109; //@line 2703
        } else {
         $$120$3$i35$i = 0; //@line 2705
        }
       }
      }
     }
     if ((label | 0) == 105) {
      HEAP8[$3 + ($$12026$i30$i & 255) >> 0] = $392 >>> 16; //@line 2716
      $$120$129$i32$i = $$12026$i30$i + 1 << 24 >> 24; //@line 2717
      label = 107; //@line 2718
     }
     if ((label | 0) == 107) {
      HEAP8[$3 + ($$120$129$i32$i & 255) >> 0] = $392 >>> 8; //@line 2726
      $$120$232$i34$i = $$120$129$i32$i + 1 << 24 >> 24; //@line 2727
      label = 109; //@line 2728
     }
     if ((label | 0) == 109) {
      HEAP8[$3 + ($$120$232$i34$i & 255) >> 0] = $392; //@line 2735
      $$120$3$i35$i = $$120$232$i34$i + 1 << 24 >> 24; //@line 2736
     }
     $399 = $$120$3$i35$i & 255; //@line 2738
     $400 = HEAP16[$4 >> 1] | 0; //@line 2739
     $402 = 17 - ($400 & 65535) | 0; //@line 2741
     $403 = $$120$3$i35$i & 255; //@line 2742
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i35$i & 255) < 13 ? $$120$3$i35$i : 13; //@line 2746
     $406 = 17 - $400 << 16 >> 16; //@line 2747
     do {
      if (($406 & 65535) < 13) {
       $410 = HEAP32[$5 >> 2] | 0; //@line 2753
       HEAP8[$410 >> 0] = (($406 & 65535) << 4) + (HEAPU8[$410 >> 0] | 0); //@line 2758
       $$sink7$i54 = 1; //@line 2759
      } else {
       $416 = HEAP32[$5 >> 2] | 0; //@line 2762
       $418 = HEAPU8[$416 >> 0] | 0; //@line 2764
       if (($406 & 65535) < 269) {
        HEAP8[$416 >> 0] = $418 + 208; //@line 2768
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $402 + 243; //@line 2773
        $$sink7$i54 = 2; //@line 2774
        break;
       } else {
        HEAP8[$416 >> 0] = $418 + 224; //@line 2779
        $427 = $402 + 65267 | 0; //@line 2780
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $427; //@line 2784
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $427 >>> 8; //@line 2789
        $$sink7$i54 = 3; //@line 2790
        break;
       }
      }
     } while (0);
     $436 = (HEAP32[$5 >> 2] | 0) + $$sink7$i54 | 0; //@line 2796
     HEAP32[$5 >> 2] = $436; //@line 2797
     if (($399 + -13 & 65535) < 256) {
      HEAP8[$436 >> 0] = $403 + 243; //@line 2803
      $441 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2805
      HEAP32[$5 >> 2] = $441; //@line 2806
      $442 = $441; //@line 2807
     } else {
      $442 = $436; //@line 2809
     }
     HEAP16[$4 >> 1] = 17; //@line 2811
     _memcpy($442 | 0, $3 | 0, $403 | 0) | 0; //@line 2812
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $403; //@line 2815
     $464 = HEAP32[$63 >> 2] | 0; //@line 2817
    }
    if ($464 | 0) {
     _sn_coap_builder_options_build_add_multiple_option($5, $464 + 60 | 0, $464 + 8 | 0, 20, $4); //@line 2823
     $467 = HEAP32[$63 >> 2] | 0; //@line 2824
     $469 = HEAP32[$467 + 40 >> 2] | 0; //@line 2826
     if (($469 | 0) == -1) {
      $541 = $467; //@line 2829
     } else {
      do {
       if ($469 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $469 >>> 24; //@line 2836
        $$12026$i39$i = 1; //@line 2837
        label = 123; //@line 2838
       } else {
        if ($469 << 8 >>> 0 > 16777215) {
         $$12026$i39$i = 0; //@line 2843
         label = 123; //@line 2844
        } else {
         if ($469 << 16 >>> 0 > 16777215) {
          $$120$129$i41$i = 0; //@line 2849
          label = 125; //@line 2850
          break;
         }
         if ($469 << 24 >>> 0 > 16777215) {
          $$120$232$i43$i = 0; //@line 2856
          label = 127; //@line 2857
         } else {
          $$120$3$i44$i = 0; //@line 2859
         }
        }
       }
      } while (0);
      if ((label | 0) == 123) {
       HEAP8[$3 + ($$12026$i39$i & 255) >> 0] = $469 >>> 16; //@line 2870
       $$120$129$i41$i = $$12026$i39$i + 1 << 24 >> 24; //@line 2871
       label = 125; //@line 2872
      }
      if ((label | 0) == 125) {
       HEAP8[$3 + ($$120$129$i41$i & 255) >> 0] = $469 >>> 8; //@line 2880
       $$120$232$i43$i = $$120$129$i41$i + 1 << 24 >> 24; //@line 2881
       label = 127; //@line 2882
      }
      if ((label | 0) == 127) {
       HEAP8[$3 + ($$120$232$i43$i & 255) >> 0] = $469; //@line 2889
       $$120$3$i44$i = $$120$232$i43$i + 1 << 24 >> 24; //@line 2890
      }
      $476 = $$120$3$i44$i & 255; //@line 2892
      $477 = HEAP16[$4 >> 1] | 0; //@line 2893
      $479 = 23 - ($477 & 65535) | 0; //@line 2895
      $480 = $$120$3$i44$i & 255; //@line 2896
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i44$i & 255) < 13 ? $$120$3$i44$i : 13; //@line 2900
      $483 = 23 - $477 << 16 >> 16; //@line 2901
      do {
       if (($483 & 65535) < 13) {
        $487 = HEAP32[$5 >> 2] | 0; //@line 2907
        HEAP8[$487 >> 0] = (($483 & 65535) << 4) + (HEAPU8[$487 >> 0] | 0); //@line 2912
        $$sink7$i44 = 1; //@line 2913
       } else {
        $493 = HEAP32[$5 >> 2] | 0; //@line 2916
        $495 = HEAPU8[$493 >> 0] | 0; //@line 2918
        if (($483 & 65535) < 269) {
         HEAP8[$493 >> 0] = $495 + 208; //@line 2922
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $479 + 243; //@line 2927
         $$sink7$i44 = 2; //@line 2928
         break;
        } else {
         HEAP8[$493 >> 0] = $495 + 224; //@line 2933
         $504 = $479 + 65267 | 0; //@line 2934
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $504; //@line 2938
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $504 >>> 8; //@line 2943
         $$sink7$i44 = 3; //@line 2944
         break;
        }
       }
      } while (0);
      $513 = (HEAP32[$5 >> 2] | 0) + $$sink7$i44 | 0; //@line 2950
      HEAP32[$5 >> 2] = $513; //@line 2951
      if (($476 + -13 & 65535) < 256) {
       HEAP8[$513 >> 0] = $480 + 243; //@line 2957
       $518 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2959
       HEAP32[$5 >> 2] = $518; //@line 2960
       $519 = $518; //@line 2961
      } else {
       $519 = $513; //@line 2963
      }
      HEAP16[$4 >> 1] = 23; //@line 2965
      _memcpy($519 | 0, $3 | 0, $480 | 0) | 0; //@line 2966
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $480; //@line 2969
      $541 = HEAP32[$63 >> 2] | 0; //@line 2971
     }
     $542 = HEAP32[$541 + 36 >> 2] | 0; //@line 2974
     if (($542 | 0) == -1) {
      $614 = $541; //@line 2977
     } else {
      do {
       if ($542 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $542 >>> 24; //@line 2984
        $$12026$i48$i = 1; //@line 2985
        label = 140; //@line 2986
       } else {
        if ($542 << 8 >>> 0 > 16777215) {
         $$12026$i48$i = 0; //@line 2991
         label = 140; //@line 2992
         break;
        }
        if ($542 << 16 >>> 0 > 16777215) {
         $$120$129$i50$i = 0; //@line 2998
         label = 142; //@line 2999
         break;
        }
        if ($542 << 24 >>> 0 > 16777215) {
         $$120$232$i52$i = 0; //@line 3005
         label = 144; //@line 3006
        } else {
         $$120$3$i53$i = 0; //@line 3008
        }
       }
      } while (0);
      if ((label | 0) == 140) {
       HEAP8[$3 + ($$12026$i48$i & 255) >> 0] = $542 >>> 16; //@line 3018
       $$120$129$i50$i = $$12026$i48$i + 1 << 24 >> 24; //@line 3019
       label = 142; //@line 3020
      }
      if ((label | 0) == 142) {
       HEAP8[$3 + ($$120$129$i50$i & 255) >> 0] = $542 >>> 8; //@line 3028
       $$120$232$i52$i = $$120$129$i50$i + 1 << 24 >> 24; //@line 3029
       label = 144; //@line 3030
      }
      if ((label | 0) == 144) {
       HEAP8[$3 + ($$120$232$i52$i & 255) >> 0] = $542; //@line 3037
       $$120$3$i53$i = $$120$232$i52$i + 1 & 255; //@line 3039
      }
      $549 = HEAP16[$4 >> 1] | 0; //@line 3041
      $551 = 27 - ($549 & 65535) | 0; //@line 3043
      $552 = $$120$3$i53$i & 65535; //@line 3044
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i53$i & 65535) < 13 ? $$120$3$i53$i : 13; //@line 3049
      $556 = 27 - $549 << 16 >> 16; //@line 3050
      do {
       if (($556 & 65535) < 13) {
        $560 = HEAP32[$5 >> 2] | 0; //@line 3056
        HEAP8[$560 >> 0] = (($556 & 65535) << 4) + (HEAPU8[$560 >> 0] | 0); //@line 3061
        $$sink7$i34 = 1; //@line 3062
       } else {
        $566 = HEAP32[$5 >> 2] | 0; //@line 3065
        $568 = HEAPU8[$566 >> 0] | 0; //@line 3067
        if (($556 & 65535) < 269) {
         HEAP8[$566 >> 0] = $568 + 208; //@line 3071
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $551 + 243; //@line 3076
         $$sink7$i34 = 2; //@line 3077
         break;
        } else {
         HEAP8[$566 >> 0] = $568 + 224; //@line 3082
         $577 = $551 + 65267 | 0; //@line 3083
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $577; //@line 3087
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $577 >>> 8; //@line 3092
         $$sink7$i34 = 3; //@line 3093
         break;
        }
       }
      } while (0);
      $586 = (HEAP32[$5 >> 2] | 0) + $$sink7$i34 | 0; //@line 3099
      HEAP32[$5 >> 2] = $586; //@line 3100
      if (($$120$3$i53$i + -13 & 65535) < 256) {
       HEAP8[$586 >> 0] = $552 + 243; //@line 3106
       $591 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 3108
       HEAP32[$5 >> 2] = $591; //@line 3109
       $592 = $591; //@line 3110
      } else {
       $592 = $586; //@line 3112
      }
      HEAP16[$4 >> 1] = 27; //@line 3114
      _memcpy($592 | 0, $3 | 0, $552 | 0) | 0; //@line 3115
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $552; //@line 3118
      $614 = HEAP32[$63 >> 2] | 0; //@line 3120
     }
     if (!(HEAP8[$614 + 1 >> 0] & 2)) {
      $690 = $614; //@line 3127
     } else {
      $619 = HEAP32[$614 + 24 >> 2] | 0; //@line 3130
      do {
       if ($619 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $619 >>> 24; //@line 3136
        $$12026$i57$i = 1; //@line 3137
        label = 157; //@line 3138
       } else {
        if ($619 << 8 >>> 0 > 16777215) {
         $$12026$i57$i = 0; //@line 3143
         label = 157; //@line 3144
         break;
        }
        if ($619 << 16 >>> 0 > 16777215) {
         $$120$129$i59$i = 0; //@line 3150
         label = 159; //@line 3151
         break;
        }
        if ($619 << 24 >>> 0 > 16777215) {
         $$120$232$i61$i = 0; //@line 3157
         label = 161; //@line 3158
        } else {
         $$120$3$i62$i = 0; //@line 3160
        }
       }
      } while (0);
      if ((label | 0) == 157) {
       HEAP8[$3 + ($$12026$i57$i & 255) >> 0] = $619 >>> 16; //@line 3170
       $$120$129$i59$i = $$12026$i57$i + 1 << 24 >> 24; //@line 3171
       label = 159; //@line 3172
      }
      if ((label | 0) == 159) {
       HEAP8[$3 + ($$120$129$i59$i & 255) >> 0] = $619 >>> 8; //@line 3180
       $$120$232$i61$i = $$120$129$i59$i + 1 << 24 >> 24; //@line 3181
       label = 161; //@line 3182
      }
      if ((label | 0) == 161) {
       HEAP8[$3 + ($$120$232$i61$i & 255) >> 0] = $619; //@line 3189
       $$120$3$i62$i = $$120$232$i61$i + 1 & 255; //@line 3191
      }
      $625 = HEAP16[$4 >> 1] | 0; //@line 3193
      $627 = 28 - ($625 & 65535) | 0; //@line 3195
      $628 = $$120$3$i62$i & 65535; //@line 3196
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i62$i & 65535) < 13 ? $$120$3$i62$i : 13; //@line 3201
      $632 = 28 - $625 << 16 >> 16; //@line 3202
      do {
       if (($632 & 65535) < 13) {
        $636 = HEAP32[$5 >> 2] | 0; //@line 3208
        HEAP8[$636 >> 0] = (($632 & 65535) << 4) + (HEAPU8[$636 >> 0] | 0); //@line 3213
        $$sink7$i24 = 1; //@line 3214
       } else {
        $642 = HEAP32[$5 >> 2] | 0; //@line 3217
        $644 = HEAPU8[$642 >> 0] | 0; //@line 3219
        if (($632 & 65535) < 269) {
         HEAP8[$642 >> 0] = $644 + 208; //@line 3223
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $627 + 243; //@line 3228
         $$sink7$i24 = 2; //@line 3229
         break;
        } else {
         HEAP8[$642 >> 0] = $644 + 224; //@line 3234
         $653 = $627 + 65267 | 0; //@line 3235
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $653; //@line 3239
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $653 >>> 8; //@line 3244
         $$sink7$i24 = 3; //@line 3245
         break;
        }
       }
      } while (0);
      $662 = (HEAP32[$5 >> 2] | 0) + $$sink7$i24 | 0; //@line 3251
      HEAP32[$5 >> 2] = $662; //@line 3252
      if (($$120$3$i62$i + -13 & 65535) < 256) {
       HEAP8[$662 >> 0] = $628 + 243; //@line 3258
       $667 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 3260
       HEAP32[$5 >> 2] = $667; //@line 3261
       $668 = $667; //@line 3262
      } else {
       $668 = $662; //@line 3264
      }
      HEAP16[$4 >> 1] = 28; //@line 3266
      _memcpy($668 | 0, $3 | 0, $628 | 0) | 0; //@line 3267
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $628; //@line 3270
      $690 = HEAP32[$63 >> 2] | 0; //@line 3272
     }
     $691 = HEAP16[$690 + 2 >> 1] | 0; //@line 3275
     $693 = HEAP32[$690 + 44 >> 2] | 0; //@line 3277
     if (!$693) {
      $748 = $690; //@line 3280
     } else {
      $695 = HEAP16[$4 >> 1] | 0; //@line 3282
      $697 = 35 - ($695 & 65535) | 0; //@line 3284
      $698 = $691 & 65535; //@line 3285
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($691 & 65535) < 13 ? $691 & 255 : ($691 & 65535) < 269 ? 13 : 14; //@line 3292
      $703 = 35 - $695 << 16 >> 16; //@line 3293
      do {
       if (($703 & 65535) < 13) {
        $707 = HEAP32[$5 >> 2] | 0; //@line 3299
        HEAP8[$707 >> 0] = (($703 & 65535) << 4) + (HEAPU8[$707 >> 0] | 0); //@line 3304
        $$sink7$i16 = 1; //@line 3305
       } else {
        $713 = HEAP32[$5 >> 2] | 0; //@line 3308
        $715 = HEAPU8[$713 >> 0] | 0; //@line 3310
        if (($703 & 65535) < 269) {
         HEAP8[$713 >> 0] = $715 + 208; //@line 3314
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $697 + 243; //@line 3319
         $$sink7$i16 = 2; //@line 3320
         break;
        } else {
         HEAP8[$713 >> 0] = $715 + 224; //@line 3325
         $724 = $697 + 65267 | 0; //@line 3326
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $724; //@line 3330
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $724 >>> 8; //@line 3335
         $$sink7$i16 = 3; //@line 3336
         break;
        }
       }
      } while (0);
      $733 = (HEAP32[$5 >> 2] | 0) + $$sink7$i16 | 0; //@line 3342
      HEAP32[$5 >> 2] = $733; //@line 3343
      do {
       if (($691 + -13 & 65535) < 256) {
        $$sink13$i = 1; //@line 3349
        $$sink63$i = $698 + 243 | 0; //@line 3349
        $742 = $733; //@line 3349
        label = 172; //@line 3350
       } else {
        if (($691 & 65535) <= 268) {
         $745 = $733; //@line 3354
         break;
        }
        $737 = $698 + -269 | 0; //@line 3357
        HEAP8[$733 + 1 >> 0] = $737; //@line 3360
        $$sink13$i = 2; //@line 3363
        $$sink63$i = $737 >>> 8; //@line 3363
        $742 = HEAP32[$5 >> 2] | 0; //@line 3363
        label = 172; //@line 3364
       }
      } while (0);
      if ((label | 0) == 172) {
       HEAP8[$742 >> 0] = $$sink63$i; //@line 3369
       $744 = (HEAP32[$5 >> 2] | 0) + $$sink13$i | 0; //@line 3371
       HEAP32[$5 >> 2] = $744; //@line 3372
       $745 = $744; //@line 3373
      }
      HEAP16[$4 >> 1] = 35; //@line 3375
      _memcpy($745 | 0, $693 | 0, $698 | 0) | 0; //@line 3376
      HEAP32[$5 >> 2] = $745 + $698; //@line 3378
      $748 = HEAP32[$63 >> 2] | 0; //@line 3380
     }
     if (HEAP8[$748 + 1 >> 0] & 1) {
      $753 = HEAP32[$748 + 20 >> 2] | 0; //@line 3388
      do {
       if ($753 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $753 >>> 24; //@line 3394
        $$12026$i66$i = 1; //@line 3395
        label = 186; //@line 3396
       } else {
        if ($753 << 8 >>> 0 > 16777215) {
         $$12026$i66$i = 0; //@line 3401
         label = 186; //@line 3402
         break;
        }
        if ($753 << 16 >>> 0 > 16777215) {
         $$120$129$i68$i = 0; //@line 3408
         label = 188; //@line 3409
         break;
        }
        if ($753 << 24 >>> 0 > 16777215) {
         $$120$232$i70$i = 0; //@line 3415
         label = 190; //@line 3416
        } else {
         $$120$3$i71$i = 0; //@line 3418
        }
       }
      } while (0);
      if ((label | 0) == 186) {
       HEAP8[$3 + ($$12026$i66$i & 255) >> 0] = $753 >>> 16; //@line 3428
       $$120$129$i68$i = $$12026$i66$i + 1 << 24 >> 24; //@line 3429
       label = 188; //@line 3430
      }
      if ((label | 0) == 188) {
       HEAP8[$3 + ($$120$129$i68$i & 255) >> 0] = $753 >>> 8; //@line 3438
       $$120$232$i70$i = $$120$129$i68$i + 1 << 24 >> 24; //@line 3439
       label = 190; //@line 3440
      }
      if ((label | 0) == 190) {
       HEAP8[$3 + ($$120$232$i70$i & 255) >> 0] = $753; //@line 3447
       $$120$3$i71$i = $$120$232$i70$i + 1 & 255; //@line 3449
      }
      $759 = HEAP16[$4 >> 1] | 0; //@line 3451
      $761 = 60 - ($759 & 65535) | 0; //@line 3453
      $762 = $$120$3$i71$i & 65535; //@line 3454
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i71$i & 65535) < 13 ? $$120$3$i71$i : 13; //@line 3459
      $766 = 60 - $759 << 16 >> 16; //@line 3460
      do {
       if (($766 & 65535) < 13) {
        $770 = HEAP32[$5 >> 2] | 0; //@line 3466
        HEAP8[$770 >> 0] = (($766 & 65535) << 4) + (HEAPU8[$770 >> 0] | 0); //@line 3471
        $$sink7$i = 1; //@line 3472
       } else {
        $776 = HEAP32[$5 >> 2] | 0; //@line 3475
        $778 = HEAPU8[$776 >> 0] | 0; //@line 3477
        if (($766 & 65535) < 269) {
         HEAP8[$776 >> 0] = $778 + 208; //@line 3481
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $761 + 243; //@line 3486
         $$sink7$i = 2; //@line 3487
         break;
        } else {
         HEAP8[$776 >> 0] = $778 + 224; //@line 3492
         $787 = $761 + 65267 | 0; //@line 3493
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $787; //@line 3497
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $787 >>> 8; //@line 3502
         $$sink7$i = 3; //@line 3503
         break;
        }
       }
      } while (0);
      $796 = (HEAP32[$5 >> 2] | 0) + $$sink7$i | 0; //@line 3509
      HEAP32[$5 >> 2] = $796; //@line 3510
      if (($$120$3$i71$i + -13 & 65535) < 256) {
       HEAP8[$796 >> 0] = $762 + 243; //@line 3516
       $801 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 3518
       HEAP32[$5 >> 2] = $801; //@line 3519
       $802 = $801; //@line 3520
      } else {
       $802 = $796; //@line 3522
      }
      HEAP16[$4 >> 1] = 60; //@line 3524
      _memcpy($802 | 0, $3 | 0, $762 | 0) | 0; //@line 3525
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $762; //@line 3528
     }
    }
   }
  }
  $823 = $1 + 24 | 0; //@line 3533
  if (HEAP16[$823 >> 1] | 0) {
   $826 = $1 + 36 | 0; //@line 3537
   if (HEAP32[$826 >> 2] | 0) {
    HEAP8[HEAP32[$5 >> 2] >> 0] = -1; //@line 3542
    $831 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 3544
    _memcpy($831 | 0, HEAP32[$826 >> 2] | 0, HEAPU16[$823 >> 1] | 0) | 0; //@line 3548
    HEAP32[$5 >> 2] = $831 + (HEAPU16[$823 >> 1] | 0); //@line 3552
   }
  }
 }
 $$1 = (HEAP32[$5 >> 2] | 0) - $$cast & 65535; //@line 3559
 STACKTOP = sp; //@line 3560
 return $$1 | 0; //@line 3560
}
function _sn_coap_builder_calc_needed_packet_data_size_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$$65$i = 0, $$0104 = 0, $$012$lcssa$i54$i = 0, $$012$lcssa$i54$i146 = 0, $$012$lcssa$i54$i181 = 0, $$012$lcssa$i54$i216 = 0, $$012$lcssa$i54$i238 = 0, $$01213$i$i = 0, $$01213$i$i142 = 0, $$01213$i$i177 = 0, $$01213$i$i212 = 0, $$01213$i$i234 = 0, $$014$i$i = 0, $$014$i$i141 = 0, $$014$i$i176 = 0, $$014$i$i211 = 0, $$014$i$i233 = 0, $$02441$i = 0, $$02441$i157 = 0, $$02441$i192 = 0, $$02441$i222 = 0, $$02441$i244 = 0, $$02540$i = 0, $$02540$i158 = 0, $$02540$i193 = 0, $$02540$i223 = 0, $$02540$i245 = 0, $$028$lcssa$i = 0, $$028$lcssa$i165 = 0, $$028$lcssa$i200 = 0, $$028$lcssa$i230 = 0, $$028$lcssa$i252 = 0, $$02839$i = 0, $$02839$i159 = 0, $$02839$i194 = 0, $$02839$i224 = 0, $$02839$i246 = 0, $$03138$i = 0, $$03138$i160 = 0, $$03138$i195 = 0, $$03138$i225 = 0, $$03138$i247 = 0, $$03239$i = 0, $$03239$i$us = 0, $$03239$i148 = 0, $$03239$i183 = 0, $$03239$i183$us = 0, $$03239$us$i = 0, $$03239$us46$i = 0, $$03239$us46$i$us = 0, $$03538$i = 0, $$03538$i$us = 0, $$03538$i149 = 0, $$03538$i184 = 0, $$03538$i184$us = 0, $$03538$us$i = 0, $$03538$us47$i = 0, $$03538$us47$i$us = 0, $$10 = 0, $$1058$i = 0, $$11 = 0, $$11$i = 0, $$1105 = 0, $$1159$i = 0, $$12 = 0, $$120$232$i = 0, $$120$232$i121 = 0, $$120$232$i129 = 0, $$120$232$i137 = 0, $$120$232$i172 = 0, $$120$232$i207 = 0, $$120$232$i259 = 0, $$120$232$i267 = 0, $$120$232$i275 = 0, $$120$3$i = 0, $$120$3$i122 = 0, $$120$3$i130 = 0, $$120$3$i138 = 0, $$120$3$i173 = 0, $$120$3$i208 = 0, $$120$3$i260 = 0, $$120$3$i268 = 0, $$120$3$i276 = 0, $$126$i = 0, $$126$i164 = 0, $$126$i199 = 0, $$126$i229 = 0, $$126$i251 = 0, $$1260$i = 0, $$129$i = 0, $$129$i163 = 0, $$129$i198 = 0, $$129$i228 = 0, $$129$i250 = 0, $$13 = 0, $$13$i = 0, $$133$i = 0, $$133$i152 = 0, $$133$i187 = 0, $$133$us49$i = 0, $$1361$i = 0, $$14 = 0, $$1462$i = 0, $$15 = 0, $$16 = 0, $$16$i = 0, $$17 = 0, $$18 = 0, $$2 = 0, $$2108 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$5$i = 0, $$553$$$i = 0, $$553$$$i$ = 0, $$553$$i = 0, $$6 = 0, $$7 = 0, $$7$i = 0, $$8 = 0, $$9 = 0, $$9$i = 0, $$957$i = 0, $$lcssa292 = 0, $$lcssa293 = 0, $$lcssa294 = 0, $$lcssa295 = 0, $$lcssa297 = 0, $$lcssa298 = 0, $115 = 0, $131 = 0, $133 = 0, $134 = 0, $136 = 0, $139 = 0, $149 = 0, $16 = 0, $17 = 0, $174 = 0, $186 = 0, $189 = 0, $19 = 0, $191 = 0, $194 = 0, $203 = 0, $208 = 0, $21 = 0, $224 = 0, $225 = 0, $234 = 0, $24 = 0, $249 = 0, $252 = 0, $254 = 0, $257 = 0, $266 = 0, $271 = 0, $287 = 0, $288 = 0, $297 = 0, $312 = 0, $315 = 0, $317 = 0, $320 = 0, $33 = 0, $330 = 0, $347 = 0, $356 = 0, $371 = 0, $375 = 0, $38 = 0, $389 = 0, $406 = 0, $418 = 0, $426 = 0, $428 = 0, $466 = 0, $474 = 0, $475 = 0, $504 = 0, $517 = 0, $54 = 0, $55 = 0, $64 = 0, $65 = 0, $79 = 0, $80 = 0, $82 = 0, $9 = 0, $97 = 0, $merge$i = 0, $narrow$i = 0, $phitmp$i$i = 0, $phitmp$i$i144 = 0, $phitmp$i$i179 = 0, $phitmp$i$i214 = 0, $phitmp$i$i236 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3602
 STACKTOP = STACKTOP + 112 | 0; //@line 3603
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 3603
 $vararg_buffer23 = sp + 96 | 0; //@line 3604
 $vararg_buffer21 = sp + 88 | 0; //@line 3605
 $vararg_buffer19 = sp + 80 | 0; //@line 3606
 $vararg_buffer17 = sp + 72 | 0; //@line 3607
 $vararg_buffer15 = sp + 64 | 0; //@line 3608
 $vararg_buffer13 = sp + 56 | 0; //@line 3609
 $vararg_buffer11 = sp + 48 | 0; //@line 3610
 $vararg_buffer9 = sp + 40 | 0; //@line 3611
 $vararg_buffer7 = sp + 32 | 0; //@line 3612
 $vararg_buffer5 = sp + 24 | 0; //@line 3613
 $vararg_buffer3 = sp + 16 | 0; //@line 3614
 $vararg_buffer1 = sp + 8 | 0; //@line 3615
 $vararg_buffer = sp; //@line 3616
 if (!$0) {
  $$2108 = 0; //@line 3619
  STACKTOP = sp; //@line 3620
  return $$2108 | 0; //@line 3620
 }
 if ((HEAP32[$0 + 12 >> 2] | 0) == 48) {
  $$2108 = 4; //@line 3626
  STACKTOP = sp; //@line 3627
  return $$2108 | 0; //@line 3627
 }
 do {
  if (!(HEAP32[$0 + 28 >> 2] | 0)) {
   $$0104 = 4; //@line 3634
  } else {
   $9 = HEAP8[$0 >> 0] | 0; //@line 3636
   if (($9 + -1 & 255) <= 7) {
    $$0104 = ($9 & 255) + 4 & 65535; //@line 3643
    break;
   }
   _mbed_tracef(2, 3803, 2792, $vararg_buffer); //@line 3646
   $$2108 = 0; //@line 3647
   STACKTOP = sp; //@line 3648
   return $$2108 | 0; //@line 3648
  }
 } while (0);
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3652
 $17 = ($16 | 0) == 0; //@line 3653
 L14 : do {
  if ($17) {
   $$1105 = $$0104; //@line 3656
  } else {
   $19 = HEAP16[$0 + 22 >> 1] | 0; //@line 3659
   $21 = ($19 & 65535) + -1 | 0; //@line 3661
   if (($19 & 65535) > 2) {
    $$01213$i$i = 0; //@line 3664
    $$014$i$i = 1; //@line 3664
    $24 = 1; //@line 3664
    do {
     $$01213$i$i = $$01213$i$i + ((HEAP8[$16 + $24 >> 0] | 0) == 47 & 1) << 24 >> 24; //@line 3670
     $$014$i$i = $$014$i$i + 1 << 16 >> 16; //@line 3671
     $24 = $$014$i$i & 65535; //@line 3672
    } while (($21 | 0) > ($24 | 0));
    $phitmp$i$i = $$01213$i$i + 1 << 24 >> 24; //@line 3680
    if ($phitmp$i$i << 24 >> 24) {
     $$012$lcssa$i54$i = $phitmp$i$i; //@line 3683
     label = 11; //@line 3684
    }
   } else {
    $$012$lcssa$i54$i = 1; //@line 3687
    label = 11; //@line 3688
   }
   L20 : do {
    if ((label | 0) == 11) {
     if (!($19 << 16 >> 16)) {
      $$03239$i$us = 0; //@line 3694
      $$03538$i$us = 0; //@line 3694
      do {
       $33 = $$03239$i$us + 1 | 0; //@line 3696
       $$03239$i$us = $33 & 65535; //@line 3697
       $$03538$i$us = $$03538$i$us + 1 << 24 >> 24; //@line 3698
      } while (($$03538$i$us & 255) < ($$012$lcssa$i54$i & 255));
      $$lcssa297 = $33 & 65535; //@line 3707
      $$lcssa298 = $$03239$i$us; //@line 3707
     } else {
      $$03239$i = 0; //@line 3709
      $$03538$i = 0; //@line 3709
      while (1) {
       $$02441$i = 0; //@line 3711
       $$02540$i = 0; //@line 3711
       $$02839$i = 0; //@line 3711
       $$03138$i = $16; //@line 3711
       while (1) {
        $38 = (HEAP8[$$03138$i >> 0] | 0) != 47; //@line 3714
        if ($$02839$i << 16 >> 16 == 0 | $38) {
         $$126$i = $$02540$i; //@line 3720
         $$129$i = $$02839$i + ($38 & 1) << 16 >> 16; //@line 3720
        } else {
         if ($$02540$i << 24 >> 24 == $$03538$i << 24 >> 24) {
          $$028$lcssa$i = $$02839$i; //@line 3724
          break;
         }
         $$126$i = $$02540$i + 1 << 24 >> 24; //@line 3728
         $$129$i = 0; //@line 3728
        }
        $$02441$i = $$02441$i + 1 << 16 >> 16; //@line 3731
        if (($$02441$i & 65535) >= ($19 & 65535)) {
         $$028$lcssa$i = $$129$i; //@line 3736
         break;
        } else {
         $$02540$i = $$126$i; //@line 3734
         $$02839$i = $$129$i; //@line 3734
         $$03138$i = $$03138$i + 1 | 0; //@line 3734
        }
       }
       if (($$028$lcssa$i & 65535) > 255) {
        break L20;
       }
       if (($$028$lcssa$i & 65535) < 13) {
        $$133$i = $$03239$i + 1 << 16 >> 16; //@line 3748
       } else {
        $$133$i = ($$03239$i & 65535) + 2 & 65535; //@line 3753
       }
       $54 = ($$133$i & 65535) + ($$028$lcssa$i & 65535) | 0; //@line 3756
       $55 = $54 & 65535; //@line 3757
       $$03538$i = $$03538$i + 1 << 24 >> 24; //@line 3758
       if (($$03538$i & 255) >= ($$012$lcssa$i54$i & 255)) {
        $$lcssa297 = $55; //@line 3763
        $$lcssa298 = $54; //@line 3763
        break;
       } else {
        $$03239$i = $55; //@line 3761
       }
      }
     }
     if ($$lcssa297 << 16 >> 16) {
      $$1105 = $$lcssa298 + ($$0104 & 65535) & 65535; //@line 3773
      break L14;
     }
    }
   } while (0);
   _mbed_tracef(2, 3803, 2858, $vararg_buffer1); //@line 3778
   $$2108 = 0; //@line 3779
   STACKTOP = sp; //@line 3780
   return $$2108 | 0; //@line 3780
  }
 } while (0);
 $64 = HEAP32[$0 + 16 >> 2] | 0; //@line 3784
 $65 = ($64 | 0) == -1; //@line 3785
 if ($65) {
  $$2 = $$1105; //@line 3787
 } else {
  if ($64 >>> 0 > 65535) {
   _mbed_tracef(2, 3803, 2929, $vararg_buffer3); //@line 3791
   $$2108 = 0; //@line 3792
   STACKTOP = sp; //@line 3793
   return $$2108 | 0; //@line 3793
  }
  if ($64 << 8 >>> 0 > 16777215) {
   $$120$232$i275 = 3; //@line 3798
   label = 34; //@line 3799
  } else {
   if ($64 << 16 >>> 0 > 16777215) {
    $$120$232$i275 = 2; //@line 3804
    label = 34; //@line 3805
   } else {
    if ($64 << 24 >>> 0 > 16777215) {
     $$120$232$i275 = 1; //@line 3810
     label = 34; //@line 3811
    } else {
     $$120$3$i276 = 0; //@line 3813
    }
   }
  }
  if ((label | 0) == 34) {
   $$120$3$i276 = $$120$232$i275; //@line 3818
  }
  $$2 = ($$120$3$i276 + 1 & 255) + ($$1105 & 65535) & 65535; //@line 3825
 }
 $79 = HEAP32[$0 + 40 >> 2] | 0; //@line 3828
 $80 = ($79 | 0) == 0; //@line 3829
 do {
  if ($80) {
   $$18 = $$2; //@line 3832
  } else {
   $82 = HEAP32[$79 + 12 >> 2] | 0; //@line 3835
   if (($82 | 0) == -1) {
    $$3 = $$2; //@line 3838
   } else {
    if ($82 >>> 0 > 65535) {
     _mbed_tracef(2, 3803, 3004, $vararg_buffer5); //@line 3842
     $$2108 = 0; //@line 3843
     STACKTOP = sp; //@line 3844
     return $$2108 | 0; //@line 3844
    }
    if ($82 << 8 >>> 0 > 16777215) {
     $$120$232$i267 = 3; //@line 3849
     label = 43; //@line 3850
    } else {
     if ($82 << 16 >>> 0 > 16777215) {
      $$120$232$i267 = 2; //@line 3855
      label = 43; //@line 3856
     } else {
      if ($82 << 24 >>> 0 > 16777215) {
       $$120$232$i267 = 1; //@line 3861
       label = 43; //@line 3862
      } else {
       $$120$3$i268 = 0; //@line 3864
      }
     }
    }
    if ((label | 0) == 43) {
     $$120$3$i268 = $$120$232$i267; //@line 3869
    }
    $$3 = ($$120$3$i268 + 1 & 255) + ($$2 & 65535) & 65535; //@line 3876
   }
   $97 = HEAP32[$79 + 16 >> 2] | 0; //@line 3879
   if (($97 | 0) == 60) {
    $$4 = $$3; //@line 3882
   } else {
    if ($97 >>> 0 > 16777215) {
     $$120$232$i259 = 4; //@line 3886
     label = 50; //@line 3887
    } else {
     if ($97 << 8 >>> 0 > 16777215) {
      $$120$232$i259 = 3; //@line 3892
      label = 50; //@line 3893
     } else {
      if ($97 << 16 >>> 0 > 16777215) {
       $$120$232$i259 = 2; //@line 3898
       label = 50; //@line 3899
      } else {
       if ($97 << 24 >>> 0 > 16777215) {
        $$120$232$i259 = 1; //@line 3904
        label = 50; //@line 3905
       } else {
        $$120$3$i260 = 0; //@line 3907
       }
      }
     }
    }
    if ((label | 0) == 50) {
     $$120$3$i260 = $$120$232$i259; //@line 3913
    }
    $$4 = ($$120$3$i260 + 1 & 255) + ($$3 & 65535) & 65535; //@line 3920
   }
   if (!(HEAP32[$79 + 44 >> 2] | 0)) {
    $$6 = $$4; //@line 3926
   } else {
    $115 = HEAP16[$79 + 2 >> 1] | 0; //@line 3929
    do {
     if (($115 + -1 & 65535) < 12) {
      $$5 = $$4 + 1 << 16 >> 16; //@line 3935
     } else {
      if (($115 + -13 & 65535) < 257) {
       $$5 = ($$4 & 65535) + 2 & 65535; //@line 3943
       break;
      }
      if (($115 + -270 & 65535) < 765) {
       $$5 = ($$4 & 65535) + 3 & 65535; //@line 3952
       break;
      }
      _mbed_tracef(2, 3803, 3071, $vararg_buffer7); //@line 3955
      $$2108 = 0; //@line 3956
      STACKTOP = sp; //@line 3957
      return $$2108 | 0; //@line 3957
     }
    } while (0);
    $$6 = ($115 & 65535) + ($$5 & 65535) & 65535; //@line 3964
   }
   $131 = HEAP32[$79 + 48 >> 2] | 0; //@line 3967
   L98 : do {
    if (!$131) {
     $$7 = $$6; //@line 3971
    } else {
     $133 = HEAP8[$79 >> 0] | 0; //@line 3973
     $134 = $133 & 255; //@line 3974
     $136 = ($133 & 255) + -1 | 0; //@line 3976
     if (($133 & 255) > 2) {
      $$01213$i$i234 = 0; //@line 3979
      $$014$i$i233 = 1; //@line 3979
      $139 = 1; //@line 3979
      do {
       $$01213$i$i234 = $$01213$i$i234 + ((HEAP8[$131 + $139 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3985
       $$014$i$i233 = $$014$i$i233 + 1 << 16 >> 16; //@line 3986
       $139 = $$014$i$i233 & 65535; //@line 3987
      } while (($136 | 0) > ($139 | 0));
      $phitmp$i$i236 = $$01213$i$i234 + 1 << 24 >> 24; //@line 3995
      if ($phitmp$i$i236 << 24 >> 24) {
       $$012$lcssa$i54$i238 = $phitmp$i$i236; //@line 3998
       label = 65; //@line 3999
      }
     } else {
      $$012$lcssa$i54$i238 = 1; //@line 4002
      label = 65; //@line 4003
     }
     L104 : do {
      if ((label | 0) == 65) {
       if ($133 << 24 >> 24) {
        $$03239$us$i = 0; //@line 4009
        $$03538$us$i = 0; //@line 4009
        do {
         $$02441$i244 = 0; //@line 4011
         $$02540$i245 = 0; //@line 4011
         $$02839$i246 = 0; //@line 4011
         $$03138$i247 = $131; //@line 4011
         while (1) {
          $149 = (HEAP8[$$03138$i247 >> 0] | 0) != 38; //@line 4014
          if ($$02839$i246 << 16 >> 16 == 0 | $149) {
           $$126$i251 = $$02540$i245; //@line 4020
           $$129$i250 = $$02839$i246 + ($149 & 1) << 16 >> 16; //@line 4020
          } else {
           if ($$02540$i245 << 24 >> 24 == $$03538$us$i << 24 >> 24) {
            $$028$lcssa$i252 = $$02839$i246; //@line 4024
            break;
           }
           $$126$i251 = $$02540$i245 + 1 << 24 >> 24; //@line 4028
           $$129$i250 = 0; //@line 4028
          }
          $$02441$i244 = $$02441$i244 + 1 << 16 >> 16; //@line 4031
          if (($$02441$i244 & 65535) >= ($134 & 65535)) {
           $$028$lcssa$i252 = $$129$i250; //@line 4036
           break;
          } else {
           $$02540$i245 = $$126$i251; //@line 4034
           $$02839$i246 = $$129$i250; //@line 4034
           $$03138$i247 = $$03138$i247 + 1 | 0; //@line 4034
          }
         }
         if (($$028$lcssa$i252 + -1 & 65535) > 7) {
          break L104;
         }
         $$03239$us$i = ($$03239$us$i + 1 & 65535) + ($$028$lcssa$i252 & 65535) | 0; //@line 4048
         $$03538$us$i = $$03538$us$i + 1 << 24 >> 24; //@line 4049
        } while (($$03538$us$i & 255) < ($$012$lcssa$i54$i238 & 255));
        if (($$03239$us$i & 65535) << 16 >> 16) {
         $$7 = $$03239$us$i + ($$6 & 65535) & 65535; //@line 4063
         break L98;
        }
       }
      }
     } while (0);
     _mbed_tracef(2, 3803, 3141, $vararg_buffer9); //@line 4069
     $$2108 = 0; //@line 4070
     STACKTOP = sp; //@line 4071
     return $$2108 | 0; //@line 4071
    }
   } while (0);
   if (!(HEAP32[$79 + 52 >> 2] | 0)) {
    $$9 = $$7; //@line 4078
   } else {
    $174 = HEAP16[$79 + 4 >> 1] | 0; //@line 4081
    do {
     if (($174 + -1 & 65535) < 12) {
      $$8 = $$7 + 1 << 16 >> 16; //@line 4087
     } else {
      if (($174 + -13 & 65535) < 243) {
       $$8 = ($$7 & 65535) + 2 & 65535; //@line 4095
       break;
      }
      _mbed_tracef(2, 3803, 3206, $vararg_buffer11); //@line 4098
      $$2108 = 0; //@line 4099
      STACKTOP = sp; //@line 4100
      return $$2108 | 0; //@line 4100
     }
    } while (0);
    $$9 = ($174 & 65535) + ($$8 & 65535) & 65535; //@line 4107
   }
   $186 = HEAP32[$79 + 56 >> 2] | 0; //@line 4110
   L133 : do {
    if (!$186) {
     $$10 = $$9; //@line 4114
    } else {
     $189 = HEAP16[$79 + 6 >> 1] | 0; //@line 4117
     $191 = ($189 & 65535) + -1 | 0; //@line 4119
     if (($189 & 65535) > 2) {
      $$01213$i$i212 = 0; //@line 4122
      $$014$i$i211 = 1; //@line 4122
      $194 = 1; //@line 4122
      do {
       $$01213$i$i212 = $$01213$i$i212 + ((HEAP8[$186 + $194 >> 0] | 0) == 47 & 1) << 24 >> 24; //@line 4128
       $$014$i$i211 = $$014$i$i211 + 1 << 16 >> 16; //@line 4129
       $194 = $$014$i$i211 & 65535; //@line 4130
      } while (($191 | 0) > ($194 | 0));
      $phitmp$i$i214 = $$01213$i$i212 + 1 << 24 >> 24; //@line 4138
      if ($phitmp$i$i214 << 24 >> 24) {
       $$012$lcssa$i54$i216 = $phitmp$i$i214; //@line 4141
       label = 88; //@line 4142
      }
     } else {
      $$012$lcssa$i54$i216 = 1; //@line 4145
      label = 88; //@line 4146
     }
     L139 : do {
      if ((label | 0) == 88) {
       if (!($189 << 16 >> 16)) {
        $$03239$us46$i$us = 0; //@line 4152
        $$03538$us47$i$us = 0; //@line 4152
        do {
         $203 = $$03239$us46$i$us + 1 | 0; //@line 4154
         $$03239$us46$i$us = $203 & 65535; //@line 4155
         $$03538$us47$i$us = $$03538$us47$i$us + 1 << 24 >> 24; //@line 4156
        } while (($$03538$us47$i$us & 255) < ($$012$lcssa$i54$i216 & 255));
        $$lcssa294 = $203 & 65535; //@line 4165
        $$lcssa295 = $$03239$us46$i$us; //@line 4165
       } else {
        $$03239$us46$i = 0; //@line 4167
        $$03538$us47$i = 0; //@line 4167
        while (1) {
         $$02441$i222 = 0; //@line 4169
         $$02540$i223 = 0; //@line 4169
         $$02839$i224 = 0; //@line 4169
         $$03138$i225 = $186; //@line 4169
         while (1) {
          $208 = (HEAP8[$$03138$i225 >> 0] | 0) != 47; //@line 4172
          if ($$02839$i224 << 16 >> 16 == 0 | $208) {
           $$126$i229 = $$02540$i223; //@line 4178
           $$129$i228 = $$02839$i224 + ($208 & 1) << 16 >> 16; //@line 4178
          } else {
           if ($$02540$i223 << 24 >> 24 == $$03538$us47$i << 24 >> 24) {
            $$028$lcssa$i230 = $$02839$i224; //@line 4182
            break;
           }
           $$126$i229 = $$02540$i223 + 1 << 24 >> 24; //@line 4186
           $$129$i228 = 0; //@line 4186
          }
          $$02441$i222 = $$02441$i222 + 1 << 16 >> 16; //@line 4189
          if (($$02441$i222 & 65535) >= ($189 & 65535)) {
           $$028$lcssa$i230 = $$129$i228; //@line 4194
           break;
          } else {
           $$02540$i223 = $$126$i229; //@line 4192
           $$02839$i224 = $$129$i228; //@line 4192
           $$03138$i225 = $$03138$i225 + 1 | 0; //@line 4192
          }
         }
         if (($$028$lcssa$i230 & 65535) > 255) {
          break L139;
         }
         if (($$028$lcssa$i230 & 65535) < 13) {
          $$133$us49$i = $$03239$us46$i + 1 << 16 >> 16; //@line 4206
         } else {
          $$133$us49$i = ($$03239$us46$i & 65535) + 2 & 65535; //@line 4211
         }
         $224 = ($$133$us49$i & 65535) + ($$028$lcssa$i230 & 65535) | 0; //@line 4214
         $225 = $224 & 65535; //@line 4215
         $$03538$us47$i = $$03538$us47$i + 1 << 24 >> 24; //@line 4216
         if (($$03538$us47$i & 255) >= ($$012$lcssa$i54$i216 & 255)) {
          $$lcssa294 = $225; //@line 4221
          $$lcssa295 = $224; //@line 4221
          break;
         } else {
          $$03239$us46$i = $225; //@line 4219
         }
        }
       }
       if ($$lcssa294 << 16 >> 16) {
        $$10 = $$lcssa295 + ($$9 & 65535) & 65535; //@line 4231
        break L133;
       }
      }
     } while (0);
     _mbed_tracef(2, 3803, 3275, $vararg_buffer13); //@line 4236
     $$2108 = 0; //@line 4237
     STACKTOP = sp; //@line 4238
     return $$2108 | 0; //@line 4238
    }
   } while (0);
   $234 = HEAP32[$79 + 28 >> 2] | 0; //@line 4242
   if (($234 | 0) == -1) {
    $$11 = $$10; //@line 4245
   } else {
    if ($234 >>> 0 > 65535) {
     _mbed_tracef(2, 3803, 3349, $vararg_buffer15); //@line 4249
     $$2108 = 0; //@line 4250
     STACKTOP = sp; //@line 4251
     return $$2108 | 0; //@line 4251
    }
    if ($234 << 8 >>> 0 > 16777215) {
     $$120$232$i207 = 3; //@line 4256
     label = 111; //@line 4257
    } else {
     if ($234 << 16 >>> 0 > 16777215) {
      $$120$232$i207 = 2; //@line 4262
      label = 111; //@line 4263
     } else {
      if ($234 << 24 >>> 0 > 16777215) {
       $$120$232$i207 = 1; //@line 4268
       label = 111; //@line 4269
      } else {
       $$120$3$i208 = 0; //@line 4271
      }
     }
    }
    if ((label | 0) == 111) {
     $$120$3$i208 = $$120$232$i207; //@line 4276
    }
    $$11 = ($$120$3$i208 + 1 & 255) + ($$10 & 65535) & 65535; //@line 4283
   }
   $249 = HEAP32[$79 + 60 >> 2] | 0; //@line 4286
   L178 : do {
    if (!$249) {
     $$12 = $$11; //@line 4290
    } else {
     $252 = HEAP16[$79 + 8 >> 1] | 0; //@line 4293
     $254 = ($252 & 65535) + -1 | 0; //@line 4295
     if (($252 & 65535) > 2) {
      $$01213$i$i177 = 0; //@line 4298
      $$014$i$i176 = 1; //@line 4298
      $257 = 1; //@line 4298
      do {
       $$01213$i$i177 = $$01213$i$i177 + ((HEAP8[$249 + $257 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 4304
       $$014$i$i176 = $$014$i$i176 + 1 << 16 >> 16; //@line 4305
       $257 = $$014$i$i176 & 65535; //@line 4306
      } while (($254 | 0) > ($257 | 0));
      $phitmp$i$i179 = $$01213$i$i177 + 1 << 24 >> 24; //@line 4314
      if ($phitmp$i$i179 << 24 >> 24) {
       $$012$lcssa$i54$i181 = $phitmp$i$i179; //@line 4317
       label = 117; //@line 4318
      }
     } else {
      $$012$lcssa$i54$i181 = 1; //@line 4321
      label = 117; //@line 4322
     }
     L184 : do {
      if ((label | 0) == 117) {
       if (!($252 << 16 >> 16)) {
        $$03239$i183$us = 0; //@line 4328
        $$03538$i184$us = 0; //@line 4328
        do {
         $266 = $$03239$i183$us + 1 | 0; //@line 4330
         $$03239$i183$us = $266 & 65535; //@line 4331
         $$03538$i184$us = $$03538$i184$us + 1 << 24 >> 24; //@line 4332
        } while (($$03538$i184$us & 255) < ($$012$lcssa$i54$i181 & 255));
        $$lcssa292 = $266 & 65535; //@line 4341
        $$lcssa293 = $$03239$i183$us; //@line 4341
       } else {
        $$03239$i183 = 0; //@line 4343
        $$03538$i184 = 0; //@line 4343
        while (1) {
         $$02441$i192 = 0; //@line 4345
         $$02540$i193 = 0; //@line 4345
         $$02839$i194 = 0; //@line 4345
         $$03138$i195 = $249; //@line 4345
         while (1) {
          $271 = (HEAP8[$$03138$i195 >> 0] | 0) != 38; //@line 4348
          if ($$02839$i194 << 16 >> 16 == 0 | $271) {
           $$126$i199 = $$02540$i193; //@line 4354
           $$129$i198 = $$02839$i194 + ($271 & 1) << 16 >> 16; //@line 4354
          } else {
           if ($$02540$i193 << 24 >> 24 == $$03538$i184 << 24 >> 24) {
            $$028$lcssa$i200 = $$02839$i194; //@line 4358
            break;
           }
           $$126$i199 = $$02540$i193 + 1 << 24 >> 24; //@line 4362
           $$129$i198 = 0; //@line 4362
          }
          $$02441$i192 = $$02441$i192 + 1 << 16 >> 16; //@line 4365
          if (($$02441$i192 & 65535) >= ($252 & 65535)) {
           $$028$lcssa$i200 = $$129$i198; //@line 4370
           break;
          } else {
           $$02540$i193 = $$126$i199; //@line 4368
           $$02839$i194 = $$129$i198; //@line 4368
           $$03138$i195 = $$03138$i195 + 1 | 0; //@line 4368
          }
         }
         if (($$028$lcssa$i200 & 65535) > 255) {
          break L184;
         }
         if (($$028$lcssa$i200 & 65535) < 13) {
          $$133$i187 = $$03239$i183 + 1 << 16 >> 16; //@line 4382
         } else {
          $$133$i187 = ($$03239$i183 & 65535) + 2 & 65535; //@line 4387
         }
         $287 = ($$133$i187 & 65535) + ($$028$lcssa$i200 & 65535) | 0; //@line 4390
         $288 = $287 & 65535; //@line 4391
         $$03538$i184 = $$03538$i184 + 1 << 24 >> 24; //@line 4392
         if (($$03538$i184 & 255) >= ($$012$lcssa$i54$i181 & 255)) {
          $$lcssa292 = $288; //@line 4397
          $$lcssa293 = $287; //@line 4397
          break;
         } else {
          $$03239$i183 = $288; //@line 4395
         }
        }
       }
       if ($$lcssa292 << 16 >> 16) {
        $$12 = $$lcssa293 + ($$11 & 65535) & 65535; //@line 4407
        break L178;
       }
      }
     } while (0);
     _mbed_tracef(2, 3803, 3418, $vararg_buffer17); //@line 4412
     $$2108 = 0; //@line 4413
     STACKTOP = sp; //@line 4414
     return $$2108 | 0; //@line 4414
    }
   } while (0);
   $297 = HEAP32[$79 + 32 >> 2] | 0; //@line 4418
   if (($297 | 0) == -1) {
    $$13 = $$12; //@line 4421
   } else {
    if ($297 >>> 0 > 16777215) {
     $$2108 = 0; //@line 4425
     STACKTOP = sp; //@line 4426
     return $$2108 | 0; //@line 4426
    }
    do {
     if ($297 << 8 >>> 0 > 16777215) {
      $$120$232$i172 = 3; //@line 4432
      label = 139; //@line 4433
     } else {
      if ($297 << 16 >>> 0 > 16777215) {
       $$120$232$i172 = 2; //@line 4438
       label = 139; //@line 4439
       break;
      }
      if ($297 << 24 >>> 0 > 16777215) {
       $$120$232$i172 = 1; //@line 4445
       label = 139; //@line 4446
      } else {
       $$120$3$i173 = 0; //@line 4448
      }
     }
    } while (0);
    if ((label | 0) == 139) {
     $$120$3$i173 = $$120$232$i172; //@line 4453
    }
    $$13 = ($$120$3$i173 + 1 & 255) + ($$12 & 65535) & 65535; //@line 4460
   }
   $312 = HEAP32[$79 + 64 >> 2] | 0; //@line 4463
   L222 : do {
    if (!$312) {
     $$14 = $$13; //@line 4467
    } else {
     $315 = HEAP16[$79 + 10 >> 1] | 0; //@line 4470
     $317 = ($315 & 65535) + -1 | 0; //@line 4472
     if (($315 & 65535) > 2) {
      $$01213$i$i142 = 0; //@line 4475
      $$014$i$i141 = 1; //@line 4475
      $320 = 1; //@line 4475
      do {
       $$01213$i$i142 = $$01213$i$i142 + ((HEAP8[$312 + $320 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 4481
       $$014$i$i141 = $$014$i$i141 + 1 << 16 >> 16; //@line 4482
       $320 = $$014$i$i141 & 65535; //@line 4483
      } while (($317 | 0) > ($320 | 0));
      $phitmp$i$i144 = $$01213$i$i142 + 1 << 24 >> 24; //@line 4491
      if ($phitmp$i$i144 << 24 >> 24) {
       $$012$lcssa$i54$i146 = $phitmp$i$i144; //@line 4494
       label = 145; //@line 4495
      }
     } else {
      $$012$lcssa$i54$i146 = 1; //@line 4498
      label = 145; //@line 4499
     }
     L228 : do {
      if ((label | 0) == 145) {
       if (!($315 << 16 >> 16)) {
        break;
       } else {
        $$03239$i148 = 0; //@line 4507
        $$03538$i149 = 0; //@line 4507
       }
       do {
        $$02441$i157 = 0; //@line 4510
        $$02540$i158 = 0; //@line 4510
        $$02839$i159 = 0; //@line 4510
        $$03138$i160 = $312; //@line 4510
        while (1) {
         $330 = (HEAP8[$$03138$i160 >> 0] | 0) != 38; //@line 4513
         if ($$02839$i159 << 16 >> 16 == 0 | $330) {
          $$126$i164 = $$02540$i158; //@line 4519
          $$129$i163 = $$02839$i159 + ($330 & 1) << 16 >> 16; //@line 4519
         } else {
          if ($$02540$i158 << 24 >> 24 == $$03538$i149 << 24 >> 24) {
           $$028$lcssa$i165 = $$02839$i159; //@line 4523
           break;
          }
          $$126$i164 = $$02540$i158 + 1 << 24 >> 24; //@line 4527
          $$129$i163 = 0; //@line 4527
         }
         $$02441$i157 = $$02441$i157 + 1 << 16 >> 16; //@line 4530
         if (($$02441$i157 & 65535) >= ($315 & 65535)) {
          $$028$lcssa$i165 = $$129$i163; //@line 4535
          break;
         } else {
          $$02540$i158 = $$126$i164; //@line 4533
          $$02839$i159 = $$129$i163; //@line 4533
          $$03138$i160 = $$03138$i160 + 1 | 0; //@line 4533
         }
        }
        if (($$028$lcssa$i165 + -1 & 65535) > 254) {
         break L228;
        }
        if (($$028$lcssa$i165 & 65535) < 13) {
         $$133$i152 = $$03239$i148 + 1 << 16 >> 16; //@line 4548
        } else {
         $$133$i152 = ($$03239$i148 & 65535) + 2 & 65535; //@line 4553
        }
        $347 = ($$133$i152 & 65535) + ($$028$lcssa$i165 & 65535) | 0; //@line 4556
        $$03239$i148 = $347 & 65535; //@line 4557
        $$03538$i149 = $$03538$i149 + 1 << 24 >> 24; //@line 4558
       } while (($$03538$i149 & 255) < ($$012$lcssa$i54$i146 & 255));
       if (!($$03239$i148 << 16 >> 16)) {
        break;
       }
       $$14 = $347 + ($$13 & 65535) & 65535; //@line 4573
       break L222;
      }
     } while (0);
     _mbed_tracef(2, 3803, 3493, $vararg_buffer19); //@line 4577
     $$2108 = 0; //@line 4578
     STACKTOP = sp; //@line 4579
     return $$2108 | 0; //@line 4579
    }
   } while (0);
   $356 = HEAP32[$79 + 36 >> 2] | 0; //@line 4583
   if (($356 | 0) == -1) {
    $$15 = $$14; //@line 4586
   } else {
    if ($356 >>> 0 > 16777215) {
     _mbed_tracef(2, 3803, 3561, $vararg_buffer21); //@line 4590
     $$2108 = 0; //@line 4591
     STACKTOP = sp; //@line 4592
     return $$2108 | 0; //@line 4592
    }
    do {
     if ($356 << 8 >>> 0 > 16777215) {
      $$120$232$i137 = 3; //@line 4598
      label = 166; //@line 4599
     } else {
      if ($356 << 16 >>> 0 > 16777215) {
       $$120$232$i137 = 2; //@line 4604
       label = 166; //@line 4605
       break;
      }
      if ($356 << 24 >>> 0 > 16777215) {
       $$120$232$i137 = 1; //@line 4611
       label = 166; //@line 4612
      } else {
       $$120$3$i138 = 0; //@line 4614
      }
     }
    } while (0);
    if ((label | 0) == 166) {
     $$120$3$i138 = $$120$232$i137; //@line 4619
    }
    $$15 = ($$120$3$i138 + 1 & 255) + ($$14 & 65535) & 65535; //@line 4626
   }
   $371 = HEAP8[$79 + 1 >> 0] | 0; //@line 4629
   if (!($371 & 1)) {
    $$16 = $$15; //@line 4633
   } else {
    $375 = HEAP32[$79 + 20 >> 2] | 0; //@line 4636
    do {
     if ($375 >>> 0 > 16777215) {
      $$120$232$i129 = 4; //@line 4640
      label = 173; //@line 4641
     } else {
      if ($375 << 8 >>> 0 > 16777215) {
       $$120$232$i129 = 3; //@line 4646
       label = 173; //@line 4647
       break;
      }
      if ($375 << 16 >>> 0 > 16777215) {
       $$120$232$i129 = 2; //@line 4653
       label = 173; //@line 4654
       break;
      }
      if ($375 << 24 >>> 0 > 16777215) {
       $$120$232$i129 = 1; //@line 4660
       label = 173; //@line 4661
      } else {
       $$120$3$i130 = 0; //@line 4663
      }
     }
    } while (0);
    if ((label | 0) == 173) {
     $$120$3$i130 = $$120$232$i129; //@line 4668
    }
    $$16 = ($$120$3$i130 + 1 & 255) + ($$15 & 65535) & 65535; //@line 4675
   }
   $389 = HEAP32[$79 + 40 >> 2] | 0; //@line 4678
   if (($389 | 0) == -1) {
    $$17 = $$16; //@line 4681
   } else {
    if ($389 >>> 0 > 16777215) {
     _mbed_tracef(2, 3803, 3628, $vararg_buffer23); //@line 4685
     $$2108 = 0; //@line 4686
     STACKTOP = sp; //@line 4687
     return $$2108 | 0; //@line 4687
    }
    do {
     if ($389 << 8 >>> 0 > 16777215) {
      $$120$232$i121 = 3; //@line 4693
      label = 181; //@line 4694
     } else {
      if ($389 << 16 >>> 0 > 16777215) {
       $$120$232$i121 = 2; //@line 4699
       label = 181; //@line 4700
       break;
      }
      if ($389 << 24 >>> 0 > 16777215) {
       $$120$232$i121 = 1; //@line 4706
       label = 181; //@line 4707
      } else {
       $$120$3$i122 = 0; //@line 4709
      }
     }
    } while (0);
    if ((label | 0) == 181) {
     $$120$3$i122 = $$120$232$i121; //@line 4714
    }
    $$17 = ($$120$3$i122 + 1 & 255) + ($$16 & 65535) & 65535; //@line 4721
   }
   if (!($371 & 2)) {
    $$18 = $$17; //@line 4726
    break;
   }
   $406 = HEAP32[$79 + 24 >> 2] | 0; //@line 4730
   do {
    if ($406 >>> 0 > 16777215) {
     $$120$232$i = 5; //@line 4734
     label = 188; //@line 4735
    } else {
     if ($406 << 8 >>> 0 > 16777215) {
      $$120$232$i = 4; //@line 4740
      label = 188; //@line 4741
      break;
     }
     if ($406 << 16 >>> 0 > 16777215) {
      $$120$232$i = 3; //@line 4747
      label = 188; //@line 4748
      break;
     }
     if ($406 << 24 >>> 0 > 16777215) {
      $$120$232$i = 2; //@line 4754
      label = 188; //@line 4755
     } else {
      $$120$3$i = 1; //@line 4757
     }
    }
   } while (0);
   if ((label | 0) == 188) {
    $$120$3$i = $$120$232$i; //@line 4762
   }
   $$18 = $$120$3$i + ($$17 & 65535) & 65535; //@line 4767
  }
 } while (0);
 $418 = HEAP16[$0 + 24 >> 1] | 0; //@line 4771
 $$ = ($418 & 65535) + ($$18 & 65535) + ($418 << 16 >> 16 != 0 & 1) | 0; //@line 4777
 do {
  if ($80) {
   $merge$i = 0; //@line 4780
  } else {
   $426 = (HEAP32[$79 + 64 >> 2] | 0) == 0; //@line 4784
   $428 = HEAP32[$79 + 12 >> 2] | 0; //@line 4786
   if ($426 & ($428 | 0) == -1) {
    if (!(HEAP32[$79 + 60 >> 2] | 0)) {
     if ((HEAP32[$79 + 40 >> 2] | 0) == -1) {
      if ((HEAP32[$79 + 36 >> 2] | 0) == -1) {
       if (!(HEAP32[$79 + 44 >> 2] | 0)) {
        if ((HEAP32[$79 + 16 >> 2] | 0) == 60) {
         if (!(HEAP8[$79 + 1 >> 0] & 3)) {
          $merge$i = 0; //@line 4815
          break;
         } else {
          $475 = -1; //@line 4818
         }
        } else {
         $475 = -1; //@line 4821
        }
       } else {
        $475 = -1; //@line 4824
       }
      } else {
       $475 = -1; //@line 4827
      }
     } else {
      $475 = -1; //@line 4830
     }
    } else {
     $475 = -1; //@line 4833
    }
   } else {
    $475 = $428; //@line 4836
   }
   $$553$$i = $65 ? $17 ? (HEAP32[$79 + 56 >> 2] | 0) == 0 ? (HEAP32[$79 + 28 >> 2] | 0) == -1 ? (HEAP32[$79 + 32 >> 2] | 0) == -1 ? (HEAP32[$79 + 48 >> 2] | 0) == 0 ? (HEAP32[$79 + 52 >> 2] | 0) == 0 ? 0 : 3 : 4 : 6 : 7 : 8 : 11 : 12; //@line 4859
   $466 = (HEAP32[$79 + 16 >> 2] | 0) == 60; //@line 4862
   $$553$$$i = $466 ? $$553$$i : 14; //@line 4866
   $narrow$i = (14 - ($$553$$i & 255) | 0) > 12 & ($466 ^ 1); //@line 4868
   $$$65$i = $narrow$i & 1; //@line 4869
   $$553$$$i$ = $426 ? $$553$$$i : 15; //@line 4875
   $474 = ($475 | 0) == -1; //@line 4877
   $$957$i = $474 ? $$553$$$i$ : 17; //@line 4881
   $$5$i = ($426 ? $$$65$i : (15 - ($$553$$$i & 255) | 0) > 12 ? $narrow$i ? 2 : 1 : $$$65$i) + ((17 - ($$553$$$i$ & 255) | 0) > 12 & ($474 ^ 1) & 1) << 24 >> 24; //@line 4885
   if (!(HEAP32[$79 + 60 >> 2] | 0)) {
    $$1058$i = $$957$i; //@line 4890
    $$7$i = $$5$i; //@line 4890
   } else {
    $$1058$i = 20; //@line 4897
    $$7$i = $$5$i + ((20 - ($$957$i & 255) | 0) > 12 & 1) << 24 >> 24; //@line 4897
   }
   if ((HEAP32[$79 + 40 >> 2] | 0) == -1) {
    $$1159$i = $$1058$i; //@line 4903
    $$9$i = $$7$i; //@line 4903
   } else {
    if ((23 - ($$1058$i & 255) | 0) > 12) {
     $$1159$i = 23; //@line 4912
     $$9$i = ($$7$i & 255) + 1 & 255; //@line 4912
    } else {
     $$1159$i = 23; //@line 4914
     $$9$i = $$7$i; //@line 4914
    }
   }
   if ((HEAP32[$79 + 36 >> 2] | 0) == -1) {
    $$11$i = $$9$i; //@line 4921
    $$1260$i = $$1159$i; //@line 4921
   } else {
    if ((27 - ($$1159$i & 255) | 0) > 12) {
     $$11$i = ($$9$i & 255) + 1 & 255; //@line 4930
     $$1260$i = 27; //@line 4930
    } else {
     $$11$i = $$9$i; //@line 4932
     $$1260$i = 27; //@line 4932
    }
   }
   $504 = HEAP8[$79 + 1 >> 0] | 0; //@line 4936
   if (!($504 & 2)) {
    $$13$i = $$11$i; //@line 4940
    $$1361$i = $$1260$i; //@line 4940
   } else {
    if ((28 - ($$1260$i & 255) | 0) > 12) {
     $$13$i = ($$11$i & 255) + 1 & 255; //@line 4949
     $$1361$i = 28; //@line 4949
    } else {
     $$13$i = $$11$i; //@line 4951
     $$1361$i = 28; //@line 4951
    }
   }
   if (!(HEAP32[$79 + 44 >> 2] | 0)) {
    $$1462$i = $$1361$i; //@line 4958
    $$16$i = $$13$i; //@line 4958
   } else {
    $517 = 35 - ($$1361$i & 255) | 0; //@line 4961
    if (($517 | 0) > 12) {
     if (($517 | 0) > 269) {
      $$1462$i = 35; //@line 4973
      $$16$i = ($$13$i + 1 & 255) + 1 & 255; //@line 4973
     } else {
      $$1462$i = 35; //@line 4975
      $$16$i = ($$13$i & 255) + 1 & 255; //@line 4975
     }
    } else {
     $$1462$i = 35; //@line 4978
     $$16$i = $$13$i; //@line 4978
    }
   }
   if (!($504 & 1)) {
    $merge$i = $$16$i; //@line 4984
   } else {
    if ((60 - ($$1462$i & 255) | 0) > 12) {
     $merge$i = ($$16$i & 255) + 1 & 255; //@line 4993
    } else {
     $merge$i = $$16$i; //@line 4995
    }
   }
  }
 } while (0);
 $$2108 = $$ + ($merge$i & 255) & 65535; //@line 5003
 STACKTOP = sp; //@line 5004
 return $$2108 | 0; //@line 5004
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_111($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 17258
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17260
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17262
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17264
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17266
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17268
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17272
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17274
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17276
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17278
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17280
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17282
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17284
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17286
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17288
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17290
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17292
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17294
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17296
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 17298
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 17300
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 17302
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 17304
 $$02972$reg2mem$0 = HEAP32[$0 + 100 >> 2] | 0; //@line 17309
 $$03071$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 17309
 $$reg2mem$0 = HEAP32[$0 + 24 >> 2] | 0; //@line 17309
 L2 : while (1) {
  $150 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 17311
  $151 = $150 + 76 | 0; //@line 17312
  $152 = HEAP32[$151 >> 2] | 0; //@line 17313
  if ($152 | 0) {
   if ($152 >>> 0 <= 100) {
    label = 22; //@line 17318
    break;
   }
   HEAP32[$151 >> 2] = $152 + -100; //@line 17322
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 17327
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 17327
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 17329
   $$131 = $$03071$reg2mem$0; //@line 17329
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 17332
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 17335
    break L2;
   }
   $52 = 10036 + ($$02972$reg2mem$1 << 2) | 0; //@line 17338
   $54 = HEAP32[$52 >> 2] | 0; //@line 17339
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 17351
   break;
  }
  $84 = $54 + 72 | 0; //@line 17354
  $85 = HEAP32[$84 >> 2] | 0; //@line 17355
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 17359
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 17360
   $$03071$reg2mem$0 = $$131; //@line 17360
   $$reg2mem$0 = $52; //@line 17360
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 17367
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 17370
    $$03071$reg2mem$0 = $$131; //@line 17370
    $$reg2mem$0 = $52; //@line 17370
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[10976] = 0; //@line 17378
   return;
  }
  $217 = $$131 + 44 | 0; //@line 17381
  $218 = HEAP32[$217 >> 2] | 0; //@line 17382
  if (!$218) {
   $226 = $8 + 12 | 0; //@line 17385
   HEAP32[$226 >> 2] = 0; //@line 17386
   $228 = $34 + 4 | 0; //@line 17388
   HEAP32[$228 >> 2] = 0; //@line 17390
   HEAP32[$228 + 4 >> 2] = 0; //@line 17393
   HEAP32[$34 >> 2] = 3; //@line 17394
   $232 = $34 + 12 | 0; //@line 17395
   HEAP32[$232 >> 2] = 712; //@line 17396
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 17397
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $34) | 0; //@line 17398
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 17401
    $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 17402
    HEAP32[$233 >> 2] = $232; //@line 17403
    $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 17404
    HEAP32[$234 >> 2] = $226; //@line 17405
    $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 17406
    HEAP32[$235 >> 2] = $34; //@line 17407
    $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 17408
    HEAP32[$236 >> 2] = $8; //@line 17409
    sp = STACKTOP; //@line 17410
    return;
   }
   ___async_unwind = 0; //@line 17413
   HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 17414
   $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 17415
   HEAP32[$233 >> 2] = $232; //@line 17416
   $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 17417
   HEAP32[$234 >> 2] = $226; //@line 17418
   $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 17419
   HEAP32[$235 >> 2] = $34; //@line 17420
   $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 17421
   HEAP32[$236 >> 2] = $8; //@line 17422
   sp = STACKTOP; //@line 17423
   return;
  } else {
   $222 = HEAP32[$218 + 4 >> 2] | 0; //@line 17428
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 17429
   FUNCTION_TABLE_vii[$222 & 7]($8, $$131 + 32 | 0); //@line 17430
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 17433
    $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 17434
    HEAP32[$223 >> 2] = $217; //@line 17435
    $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 17436
    HEAP32[$224 >> 2] = $8; //@line 17437
    $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 17438
    HEAP32[$225 >> 2] = $34; //@line 17439
    sp = STACKTOP; //@line 17440
    return;
   }
   ___async_unwind = 0; //@line 17443
   HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 17444
   $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 17445
   HEAP32[$223 >> 2] = $217; //@line 17446
   $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 17447
   HEAP32[$224 >> 2] = $8; //@line 17448
   $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 17449
   HEAP32[$225 >> 2] = $34; //@line 17450
   sp = STACKTOP; //@line 17451
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 17456
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 17457
  __ZL28nsapi_dns_query_async_deletei($59); //@line 17458
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 17461
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 17462
   HEAP32[$60 >> 2] = $2; //@line 17463
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 17464
   HEAP32[$61 >> 2] = $4; //@line 17465
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 17466
   HEAP32[$62 >> 2] = $6; //@line 17467
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 17468
   HEAP32[$63 >> 2] = $8; //@line 17469
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 17470
   HEAP32[$64 >> 2] = $10; //@line 17471
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 17472
   HEAP32[$65 >> 2] = $14; //@line 17473
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 17474
   HEAP32[$66 >> 2] = $16; //@line 17475
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 17476
   HEAP32[$67 >> 2] = $18; //@line 17477
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 17478
   HEAP32[$68 >> 2] = $20; //@line 17479
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 17480
   HEAP32[$69 >> 2] = $22; //@line 17481
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 17482
   HEAP32[$70 >> 2] = $24; //@line 17483
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 17484
   HEAP32[$71 >> 2] = $26; //@line 17485
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 17486
   HEAP32[$72 >> 2] = $28; //@line 17487
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 17488
   HEAP32[$73 >> 2] = $30; //@line 17489
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 17490
   HEAP32[$74 >> 2] = $32; //@line 17491
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 17492
   HEAP32[$75 >> 2] = $34; //@line 17493
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 17494
   HEAP32[$76 >> 2] = $36; //@line 17495
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 17496
   HEAP32[$77 >> 2] = $38; //@line 17497
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 17498
   HEAP32[$78 >> 2] = $40; //@line 17499
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 17500
   HEAP32[$79 >> 2] = $42; //@line 17501
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 17502
   HEAP32[$80 >> 2] = $44; //@line 17503
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 17504
   HEAP32[$81 >> 2] = $46; //@line 17505
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 17506
   HEAP32[$82 >> 2] = $$131; //@line 17507
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 17508
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 17509
   sp = STACKTOP; //@line 17510
   return;
  }
  ___async_unwind = 0; //@line 17513
  HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 17514
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 17515
  HEAP32[$60 >> 2] = $2; //@line 17516
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 17517
  HEAP32[$61 >> 2] = $4; //@line 17518
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 17519
  HEAP32[$62 >> 2] = $6; //@line 17520
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 17521
  HEAP32[$63 >> 2] = $8; //@line 17522
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 17523
  HEAP32[$64 >> 2] = $10; //@line 17524
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 17525
  HEAP32[$65 >> 2] = $14; //@line 17526
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 17527
  HEAP32[$66 >> 2] = $16; //@line 17528
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 17529
  HEAP32[$67 >> 2] = $18; //@line 17530
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 17531
  HEAP32[$68 >> 2] = $20; //@line 17532
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 17533
  HEAP32[$69 >> 2] = $22; //@line 17534
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 17535
  HEAP32[$70 >> 2] = $24; //@line 17536
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 17537
  HEAP32[$71 >> 2] = $26; //@line 17538
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 17539
  HEAP32[$72 >> 2] = $28; //@line 17540
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 17541
  HEAP32[$73 >> 2] = $30; //@line 17542
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 17543
  HEAP32[$74 >> 2] = $32; //@line 17544
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 17545
  HEAP32[$75 >> 2] = $34; //@line 17546
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 17547
  HEAP32[$76 >> 2] = $36; //@line 17548
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 17549
  HEAP32[$77 >> 2] = $38; //@line 17550
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 17551
  HEAP32[$78 >> 2] = $40; //@line 17552
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 17553
  HEAP32[$79 >> 2] = $42; //@line 17554
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 17555
  HEAP32[$80 >> 2] = $44; //@line 17556
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 17557
  HEAP32[$81 >> 2] = $46; //@line 17558
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 17559
  HEAP32[$82 >> 2] = $$131; //@line 17560
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 17561
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 17562
  sp = STACKTOP; //@line 17563
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 17568
  $92 = $54 + 44 | 0; //@line 17569
  $93 = HEAP32[$92 >> 2] | 0; //@line 17570
  if (!$93) {
   HEAP32[$36 >> 2] = 0; //@line 17573
   $124 = HEAP32[$54 >> 2] | 0; //@line 17574
   HEAP32[$38 >> 2] = 0; //@line 17575
   HEAP32[$40 >> 2] = 187; //@line 17576
   HEAP32[$42 >> 2] = $124; //@line 17577
   HEAP32[$10 >> 2] = 724; //@line 17578
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 17579
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 17580
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 17583
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 17584
    HEAP32[$125 >> 2] = $2; //@line 17585
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 17586
    HEAP32[$126 >> 2] = $4; //@line 17587
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 17588
    HEAP32[$127 >> 2] = $6; //@line 17589
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 17590
    HEAP32[$128 >> 2] = $10; //@line 17591
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 17592
    HEAP32[$129 >> 2] = $8; //@line 17593
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 17594
    HEAP32[$130 >> 2] = $14; //@line 17595
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 17596
    HEAP32[$131 >> 2] = $16; //@line 17597
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 17598
    HEAP32[$132 >> 2] = $18; //@line 17599
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 17600
    HEAP32[$133 >> 2] = $20; //@line 17601
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 17602
    HEAP32[$134 >> 2] = $22; //@line 17603
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 17604
    HEAP32[$135 >> 2] = $24; //@line 17605
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 17606
    HEAP32[$136 >> 2] = $26; //@line 17607
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 17608
    HEAP32[$137 >> 2] = $28; //@line 17609
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 17610
    HEAP32[$138 >> 2] = $30; //@line 17611
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 17612
    HEAP32[$139 >> 2] = $32; //@line 17613
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 17614
    HEAP32[$140 >> 2] = $34; //@line 17615
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 17616
    HEAP32[$141 >> 2] = $36; //@line 17617
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 17618
    HEAP32[$142 >> 2] = $38; //@line 17619
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 17620
    HEAP32[$143 >> 2] = $40; //@line 17621
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 17622
    HEAP32[$144 >> 2] = $42; //@line 17623
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 17624
    HEAP32[$145 >> 2] = $44; //@line 17625
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 17626
    HEAP32[$146 >> 2] = $46; //@line 17627
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 17628
    HEAP32[$147 >> 2] = $52; //@line 17629
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 17630
    HEAP32[$148 >> 2] = $$131; //@line 17631
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 17632
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 17633
    sp = STACKTOP; //@line 17634
    return;
   }
   ___async_unwind = 0; //@line 17637
   HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 17638
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 17639
   HEAP32[$125 >> 2] = $2; //@line 17640
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 17641
   HEAP32[$126 >> 2] = $4; //@line 17642
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 17643
   HEAP32[$127 >> 2] = $6; //@line 17644
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 17645
   HEAP32[$128 >> 2] = $10; //@line 17646
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 17647
   HEAP32[$129 >> 2] = $8; //@line 17648
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 17649
   HEAP32[$130 >> 2] = $14; //@line 17650
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 17651
   HEAP32[$131 >> 2] = $16; //@line 17652
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 17653
   HEAP32[$132 >> 2] = $18; //@line 17654
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 17655
   HEAP32[$133 >> 2] = $20; //@line 17656
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 17657
   HEAP32[$134 >> 2] = $22; //@line 17658
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 17659
   HEAP32[$135 >> 2] = $24; //@line 17660
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 17661
   HEAP32[$136 >> 2] = $26; //@line 17662
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 17663
   HEAP32[$137 >> 2] = $28; //@line 17664
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 17665
   HEAP32[$138 >> 2] = $30; //@line 17666
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 17667
   HEAP32[$139 >> 2] = $32; //@line 17668
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 17669
   HEAP32[$140 >> 2] = $34; //@line 17670
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 17671
   HEAP32[$141 >> 2] = $36; //@line 17672
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 17673
   HEAP32[$142 >> 2] = $38; //@line 17674
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 17675
   HEAP32[$143 >> 2] = $40; //@line 17676
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 17677
   HEAP32[$144 >> 2] = $42; //@line 17678
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 17679
   HEAP32[$145 >> 2] = $44; //@line 17680
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 17681
   HEAP32[$146 >> 2] = $46; //@line 17682
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 17683
   HEAP32[$147 >> 2] = $52; //@line 17684
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 17685
   HEAP32[$148 >> 2] = $$131; //@line 17686
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 17687
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 17688
   sp = STACKTOP; //@line 17689
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 17694
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 17695
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 17696
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 17699
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 17700
    HEAP32[$98 >> 2] = $2; //@line 17701
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 17702
    HEAP32[$99 >> 2] = $4; //@line 17703
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 17704
    HEAP32[$100 >> 2] = $6; //@line 17705
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 17706
    HEAP32[$101 >> 2] = $10; //@line 17707
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 17708
    HEAP32[$102 >> 2] = $8; //@line 17709
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 17710
    HEAP32[$103 >> 2] = $52; //@line 17711
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 17712
    HEAP32[$104 >> 2] = $14; //@line 17713
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 17714
    HEAP32[$105 >> 2] = $16; //@line 17715
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 17716
    HEAP32[$106 >> 2] = $18; //@line 17717
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 17718
    HEAP32[$107 >> 2] = $20; //@line 17719
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 17720
    HEAP32[$108 >> 2] = $22; //@line 17721
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 17722
    HEAP32[$109 >> 2] = $24; //@line 17723
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 17724
    HEAP32[$110 >> 2] = $26; //@line 17725
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 17726
    HEAP32[$111 >> 2] = $92; //@line 17727
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 17728
    HEAP32[$112 >> 2] = $28; //@line 17729
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 17730
    HEAP32[$113 >> 2] = $30; //@line 17731
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 17732
    HEAP32[$114 >> 2] = $32; //@line 17733
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 17734
    HEAP32[$115 >> 2] = $$131; //@line 17735
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 17736
    HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 17737
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 17738
    HEAP32[$117 >> 2] = $34; //@line 17739
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 17740
    HEAP32[$118 >> 2] = $36; //@line 17741
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 17742
    HEAP32[$119 >> 2] = $38; //@line 17743
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 17744
    HEAP32[$120 >> 2] = $40; //@line 17745
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 17746
    HEAP32[$121 >> 2] = $42; //@line 17747
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 17748
    HEAP32[$122 >> 2] = $44; //@line 17749
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 17750
    HEAP32[$123 >> 2] = $46; //@line 17751
    sp = STACKTOP; //@line 17752
    return;
   }
   ___async_unwind = 0; //@line 17755
   HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 17756
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 17757
   HEAP32[$98 >> 2] = $2; //@line 17758
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 17759
   HEAP32[$99 >> 2] = $4; //@line 17760
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 17761
   HEAP32[$100 >> 2] = $6; //@line 17762
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 17763
   HEAP32[$101 >> 2] = $10; //@line 17764
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 17765
   HEAP32[$102 >> 2] = $8; //@line 17766
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 17767
   HEAP32[$103 >> 2] = $52; //@line 17768
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 17769
   HEAP32[$104 >> 2] = $14; //@line 17770
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 17771
   HEAP32[$105 >> 2] = $16; //@line 17772
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 17773
   HEAP32[$106 >> 2] = $18; //@line 17774
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 17775
   HEAP32[$107 >> 2] = $20; //@line 17776
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 17777
   HEAP32[$108 >> 2] = $22; //@line 17778
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 17779
   HEAP32[$109 >> 2] = $24; //@line 17780
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 17781
   HEAP32[$110 >> 2] = $26; //@line 17782
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 17783
   HEAP32[$111 >> 2] = $92; //@line 17784
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 17785
   HEAP32[$112 >> 2] = $28; //@line 17786
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 17787
   HEAP32[$113 >> 2] = $30; //@line 17788
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 17789
   HEAP32[$114 >> 2] = $32; //@line 17790
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 17791
   HEAP32[$115 >> 2] = $$131; //@line 17792
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 17793
   HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 17794
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 17795
   HEAP32[$117 >> 2] = $34; //@line 17796
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 17797
   HEAP32[$118 >> 2] = $36; //@line 17798
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 17799
   HEAP32[$119 >> 2] = $38; //@line 17800
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 17801
   HEAP32[$120 >> 2] = $40; //@line 17802
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 17803
   HEAP32[$121 >> 2] = $42; //@line 17804
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 17805
   HEAP32[$122 >> 2] = $44; //@line 17806
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 17807
   HEAP32[$123 >> 2] = $46; //@line 17808
   sp = STACKTOP; //@line 17809
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$151 >> 2] = 0; //@line 17814
  $156 = $150 + 44 | 0; //@line 17815
  $157 = HEAP32[$156 >> 2] | 0; //@line 17816
  if (!$157) {
   HEAP32[$16 >> 2] = 0; //@line 17819
   $188 = HEAP32[$150 >> 2] | 0; //@line 17820
   HEAP32[$18 >> 2] = 0; //@line 17821
   HEAP32[$20 >> 2] = 192; //@line 17822
   HEAP32[$22 >> 2] = $188; //@line 17823
   HEAP32[$14 >> 2] = 724; //@line 17824
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 17825
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 17826
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 17829
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 17830
    HEAP32[$189 >> 2] = $2; //@line 17831
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 17832
    HEAP32[$190 >> 2] = $4; //@line 17833
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 17834
    HEAP32[$191 >> 2] = $6; //@line 17835
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 17836
    HEAP32[$192 >> 2] = $8; //@line 17837
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 17838
    HEAP32[$193 >> 2] = $10; //@line 17839
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 17840
    HEAP32[$194 >> 2] = $14; //@line 17841
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 17842
    HEAP32[$195 >> 2] = $16; //@line 17843
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 17844
    HEAP32[$196 >> 2] = $18; //@line 17845
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 17846
    HEAP32[$197 >> 2] = $20; //@line 17847
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 17848
    HEAP32[$198 >> 2] = $22; //@line 17849
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 17850
    HEAP32[$199 >> 2] = $24; //@line 17851
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 17852
    HEAP32[$200 >> 2] = $26; //@line 17853
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 17854
    HEAP32[$201 >> 2] = $28; //@line 17855
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 17856
    HEAP32[$202 >> 2] = $30; //@line 17857
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 17858
    HEAP32[$203 >> 2] = $32; //@line 17859
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 17860
    HEAP32[$204 >> 2] = $34; //@line 17861
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 17862
    HEAP32[$205 >> 2] = $36; //@line 17863
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 17864
    HEAP32[$206 >> 2] = $38; //@line 17865
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 17866
    HEAP32[$207 >> 2] = $40; //@line 17867
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 17868
    HEAP32[$208 >> 2] = $42; //@line 17869
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 17870
    HEAP32[$209 >> 2] = $44; //@line 17871
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 17872
    HEAP32[$210 >> 2] = $46; //@line 17873
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 17874
    HEAP32[$211 >> 2] = $$03071$reg2mem$0; //@line 17875
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 17876
    HEAP32[$212 >> 2] = $$02972$reg2mem$0; //@line 17877
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 17878
    HEAP32[$213 >> 2] = $$reg2mem$0; //@line 17879
    sp = STACKTOP; //@line 17880
    return;
   }
   ___async_unwind = 0; //@line 17883
   HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 17884
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 17885
   HEAP32[$189 >> 2] = $2; //@line 17886
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 17887
   HEAP32[$190 >> 2] = $4; //@line 17888
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 17889
   HEAP32[$191 >> 2] = $6; //@line 17890
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 17891
   HEAP32[$192 >> 2] = $8; //@line 17892
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 17893
   HEAP32[$193 >> 2] = $10; //@line 17894
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 17895
   HEAP32[$194 >> 2] = $14; //@line 17896
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 17897
   HEAP32[$195 >> 2] = $16; //@line 17898
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 17899
   HEAP32[$196 >> 2] = $18; //@line 17900
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 17901
   HEAP32[$197 >> 2] = $20; //@line 17902
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 17903
   HEAP32[$198 >> 2] = $22; //@line 17904
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 17905
   HEAP32[$199 >> 2] = $24; //@line 17906
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 17907
   HEAP32[$200 >> 2] = $26; //@line 17908
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 17909
   HEAP32[$201 >> 2] = $28; //@line 17910
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 17911
   HEAP32[$202 >> 2] = $30; //@line 17912
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 17913
   HEAP32[$203 >> 2] = $32; //@line 17914
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 17915
   HEAP32[$204 >> 2] = $34; //@line 17916
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 17917
   HEAP32[$205 >> 2] = $36; //@line 17918
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 17919
   HEAP32[$206 >> 2] = $38; //@line 17920
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 17921
   HEAP32[$207 >> 2] = $40; //@line 17922
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 17923
   HEAP32[$208 >> 2] = $42; //@line 17924
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 17925
   HEAP32[$209 >> 2] = $44; //@line 17926
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 17927
   HEAP32[$210 >> 2] = $46; //@line 17928
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 17929
   HEAP32[$211 >> 2] = $$03071$reg2mem$0; //@line 17930
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 17931
   HEAP32[$212 >> 2] = $$02972$reg2mem$0; //@line 17932
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 17933
   HEAP32[$213 >> 2] = $$reg2mem$0; //@line 17934
   sp = STACKTOP; //@line 17935
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 17940
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 17941
   FUNCTION_TABLE_vii[$161 & 7]($28, $150 + 32 | 0); //@line 17942
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 17945
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 17946
    HEAP32[$162 >> 2] = $2; //@line 17947
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 17948
    HEAP32[$163 >> 2] = $4; //@line 17949
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 17950
    HEAP32[$164 >> 2] = $6; //@line 17951
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 17952
    HEAP32[$165 >> 2] = $8; //@line 17953
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 17954
    HEAP32[$166 >> 2] = $10; //@line 17955
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 17956
    HEAP32[$167 >> 2] = $14; //@line 17957
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 17958
    HEAP32[$168 >> 2] = $16; //@line 17959
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 17960
    HEAP32[$169 >> 2] = $18; //@line 17961
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 17962
    HEAP32[$170 >> 2] = $20; //@line 17963
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 17964
    HEAP32[$171 >> 2] = $22; //@line 17965
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 17966
    HEAP32[$172 >> 2] = $24; //@line 17967
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 17968
    HEAP32[$173 >> 2] = $26; //@line 17969
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 17970
    HEAP32[$174 >> 2] = $28; //@line 17971
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 17972
    HEAP32[$175 >> 2] = $30; //@line 17973
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 17974
    HEAP32[$176 >> 2] = $32; //@line 17975
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 17976
    HEAP32[$177 >> 2] = $34; //@line 17977
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 17978
    HEAP32[$178 >> 2] = $36; //@line 17979
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 17980
    HEAP32[$179 >> 2] = $38; //@line 17981
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 17982
    HEAP32[$180 >> 2] = $40; //@line 17983
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 17984
    HEAP32[$181 >> 2] = $42; //@line 17985
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 17986
    HEAP32[$182 >> 2] = $44; //@line 17987
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 17988
    HEAP32[$183 >> 2] = $46; //@line 17989
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 17990
    HEAP32[$184 >> 2] = $156; //@line 17991
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 17992
    HEAP32[$185 >> 2] = $$reg2mem$0; //@line 17993
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 17994
    HEAP32[$186 >> 2] = $$03071$reg2mem$0; //@line 17995
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 17996
    HEAP32[$187 >> 2] = $$02972$reg2mem$0; //@line 17997
    sp = STACKTOP; //@line 17998
    return;
   }
   ___async_unwind = 0; //@line 18001
   HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 18002
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 18003
   HEAP32[$162 >> 2] = $2; //@line 18004
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 18005
   HEAP32[$163 >> 2] = $4; //@line 18006
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 18007
   HEAP32[$164 >> 2] = $6; //@line 18008
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 18009
   HEAP32[$165 >> 2] = $8; //@line 18010
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 18011
   HEAP32[$166 >> 2] = $10; //@line 18012
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 18013
   HEAP32[$167 >> 2] = $14; //@line 18014
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 18015
   HEAP32[$168 >> 2] = $16; //@line 18016
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 18017
   HEAP32[$169 >> 2] = $18; //@line 18018
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 18019
   HEAP32[$170 >> 2] = $20; //@line 18020
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 18021
   HEAP32[$171 >> 2] = $22; //@line 18022
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 18023
   HEAP32[$172 >> 2] = $24; //@line 18024
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 18025
   HEAP32[$173 >> 2] = $26; //@line 18026
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 18027
   HEAP32[$174 >> 2] = $28; //@line 18028
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 18029
   HEAP32[$175 >> 2] = $30; //@line 18030
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 18031
   HEAP32[$176 >> 2] = $32; //@line 18032
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 18033
   HEAP32[$177 >> 2] = $34; //@line 18034
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 18035
   HEAP32[$178 >> 2] = $36; //@line 18036
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 18037
   HEAP32[$179 >> 2] = $38; //@line 18038
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 18039
   HEAP32[$180 >> 2] = $40; //@line 18040
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 18041
   HEAP32[$181 >> 2] = $42; //@line 18042
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 18043
   HEAP32[$182 >> 2] = $44; //@line 18044
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 18045
   HEAP32[$183 >> 2] = $46; //@line 18046
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 18047
   HEAP32[$184 >> 2] = $156; //@line 18048
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 18049
   HEAP32[$185 >> 2] = $$reg2mem$0; //@line 18050
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 18051
   HEAP32[$186 >> 2] = $$03071$reg2mem$0; //@line 18052
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 18053
   HEAP32[$187 >> 2] = $$02972$reg2mem$0; //@line 18054
   sp = STACKTOP; //@line 18055
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_114($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 19139
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19141
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19143
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19145
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19147
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19149
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19151
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19153
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19155
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19157
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19159
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19161
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19163
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19165
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19167
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19169
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19171
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19173
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19175
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19177
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19179
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19181
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19183
 $$02972$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 19190
 $$03071$reg2mem$0 = HEAP32[$0 + 92 >> 2] | 0; //@line 19190
 $$reg2mem$0 = HEAP32[$0 + 100 >> 2] | 0; //@line 19190
 L2 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 19195
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 19195
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 19197
   $$131 = $$03071$reg2mem$0; //@line 19197
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 19200
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 19203
    break L2;
   }
   $52 = 10036 + ($$02972$reg2mem$1 << 2) | 0; //@line 19206
   $54 = HEAP32[$52 >> 2] | 0; //@line 19207
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 19219
   break;
  }
  $84 = $54 + 72 | 0; //@line 19222
  $85 = HEAP32[$84 >> 2] | 0; //@line 19223
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 19227
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 19233
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 19237
  $151 = $150 + 76 | 0; //@line 19238
  $152 = HEAP32[$151 >> 2] | 0; //@line 19239
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 19242
   $$03071$reg2mem$0 = $$131; //@line 19242
   $$reg2mem$0 = $52; //@line 19242
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 19247
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 19251
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 19252
  $$03071$reg2mem$0 = $$131; //@line 19252
  $$reg2mem$0 = $52; //@line 19252
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[10976] = 0; //@line 19257
   return;
  }
  $217 = $$131 + 44 | 0; //@line 19260
  $218 = HEAP32[$217 >> 2] | 0; //@line 19261
  if (!$218) {
   $226 = $8 + 12 | 0; //@line 19264
   HEAP32[$226 >> 2] = 0; //@line 19265
   $228 = $32 + 4 | 0; //@line 19267
   HEAP32[$228 >> 2] = 0; //@line 19269
   HEAP32[$228 + 4 >> 2] = 0; //@line 19272
   HEAP32[$32 >> 2] = 3; //@line 19273
   $232 = $32 + 12 | 0; //@line 19274
   HEAP32[$232 >> 2] = 712; //@line 19275
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 19276
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $32) | 0; //@line 19277
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 19280
    $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 19281
    HEAP32[$233 >> 2] = $232; //@line 19282
    $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 19283
    HEAP32[$234 >> 2] = $226; //@line 19284
    $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 19285
    HEAP32[$235 >> 2] = $32; //@line 19286
    $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 19287
    HEAP32[$236 >> 2] = $8; //@line 19288
    sp = STACKTOP; //@line 19289
    return;
   }
   ___async_unwind = 0; //@line 19292
   HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 19293
   $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 19294
   HEAP32[$233 >> 2] = $232; //@line 19295
   $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 19296
   HEAP32[$234 >> 2] = $226; //@line 19297
   $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 19298
   HEAP32[$235 >> 2] = $32; //@line 19299
   $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 19300
   HEAP32[$236 >> 2] = $8; //@line 19301
   sp = STACKTOP; //@line 19302
   return;
  } else {
   $222 = HEAP32[$218 + 4 >> 2] | 0; //@line 19307
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 19308
   FUNCTION_TABLE_vii[$222 & 7]($8, $$131 + 32 | 0); //@line 19309
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 19312
    $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 19313
    HEAP32[$223 >> 2] = $217; //@line 19314
    $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 19315
    HEAP32[$224 >> 2] = $8; //@line 19316
    $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 19317
    HEAP32[$225 >> 2] = $32; //@line 19318
    sp = STACKTOP; //@line 19319
    return;
   }
   ___async_unwind = 0; //@line 19322
   HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 19323
   $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 19324
   HEAP32[$223 >> 2] = $217; //@line 19325
   $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 19326
   HEAP32[$224 >> 2] = $8; //@line 19327
   $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 19328
   HEAP32[$225 >> 2] = $32; //@line 19329
   sp = STACKTOP; //@line 19330
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 19335
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 19336
  __ZL28nsapi_dns_query_async_deletei($59); //@line 19337
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 19340
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 19341
   HEAP32[$60 >> 2] = $2; //@line 19342
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 19343
   HEAP32[$61 >> 2] = $4; //@line 19344
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 19345
   HEAP32[$62 >> 2] = $6; //@line 19346
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 19347
   HEAP32[$63 >> 2] = $8; //@line 19348
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 19349
   HEAP32[$64 >> 2] = $10; //@line 19350
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 19351
   HEAP32[$65 >> 2] = $12; //@line 19352
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 19353
   HEAP32[$66 >> 2] = $14; //@line 19354
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 19355
   HEAP32[$67 >> 2] = $16; //@line 19356
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 19357
   HEAP32[$68 >> 2] = $18; //@line 19358
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 19359
   HEAP32[$69 >> 2] = $20; //@line 19360
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 19361
   HEAP32[$70 >> 2] = $22; //@line 19362
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 19363
   HEAP32[$71 >> 2] = $24; //@line 19364
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 19365
   HEAP32[$72 >> 2] = $26; //@line 19366
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 19367
   HEAP32[$73 >> 2] = $28; //@line 19368
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 19369
   HEAP32[$74 >> 2] = $30; //@line 19370
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 19371
   HEAP32[$75 >> 2] = $32; //@line 19372
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 19373
   HEAP32[$76 >> 2] = $34; //@line 19374
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 19375
   HEAP32[$77 >> 2] = $36; //@line 19376
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 19377
   HEAP32[$78 >> 2] = $38; //@line 19378
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 19379
   HEAP32[$79 >> 2] = $40; //@line 19380
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 19381
   HEAP32[$80 >> 2] = $42; //@line 19382
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 19383
   HEAP32[$81 >> 2] = $44; //@line 19384
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 19385
   HEAP32[$82 >> 2] = $$131; //@line 19386
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 19387
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 19388
   sp = STACKTOP; //@line 19389
   return;
  }
  ___async_unwind = 0; //@line 19392
  HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 19393
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 19394
  HEAP32[$60 >> 2] = $2; //@line 19395
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 19396
  HEAP32[$61 >> 2] = $4; //@line 19397
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 19398
  HEAP32[$62 >> 2] = $6; //@line 19399
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 19400
  HEAP32[$63 >> 2] = $8; //@line 19401
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 19402
  HEAP32[$64 >> 2] = $10; //@line 19403
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 19404
  HEAP32[$65 >> 2] = $12; //@line 19405
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 19406
  HEAP32[$66 >> 2] = $14; //@line 19407
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 19408
  HEAP32[$67 >> 2] = $16; //@line 19409
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 19410
  HEAP32[$68 >> 2] = $18; //@line 19411
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 19412
  HEAP32[$69 >> 2] = $20; //@line 19413
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 19414
  HEAP32[$70 >> 2] = $22; //@line 19415
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 19416
  HEAP32[$71 >> 2] = $24; //@line 19417
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 19418
  HEAP32[$72 >> 2] = $26; //@line 19419
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 19420
  HEAP32[$73 >> 2] = $28; //@line 19421
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 19422
  HEAP32[$74 >> 2] = $30; //@line 19423
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 19424
  HEAP32[$75 >> 2] = $32; //@line 19425
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 19426
  HEAP32[$76 >> 2] = $34; //@line 19427
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 19428
  HEAP32[$77 >> 2] = $36; //@line 19429
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 19430
  HEAP32[$78 >> 2] = $38; //@line 19431
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 19432
  HEAP32[$79 >> 2] = $40; //@line 19433
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 19434
  HEAP32[$80 >> 2] = $42; //@line 19435
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 19436
  HEAP32[$81 >> 2] = $44; //@line 19437
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 19438
  HEAP32[$82 >> 2] = $$131; //@line 19439
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 19440
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 19441
  sp = STACKTOP; //@line 19442
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 19447
  $92 = $54 + 44 | 0; //@line 19448
  $93 = HEAP32[$92 >> 2] | 0; //@line 19449
  if (!$93) {
   HEAP32[$34 >> 2] = 0; //@line 19452
   $124 = HEAP32[$54 >> 2] | 0; //@line 19453
   HEAP32[$36 >> 2] = 0; //@line 19454
   HEAP32[$38 >> 2] = 187; //@line 19455
   HEAP32[$40 >> 2] = $124; //@line 19456
   HEAP32[$10 >> 2] = 724; //@line 19457
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 19458
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 19459
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 19462
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 19463
    HEAP32[$125 >> 2] = $2; //@line 19464
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 19465
    HEAP32[$126 >> 2] = $4; //@line 19466
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 19467
    HEAP32[$127 >> 2] = $6; //@line 19468
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 19469
    HEAP32[$128 >> 2] = $10; //@line 19470
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 19471
    HEAP32[$129 >> 2] = $8; //@line 19472
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 19473
    HEAP32[$130 >> 2] = $12; //@line 19474
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 19475
    HEAP32[$131 >> 2] = $14; //@line 19476
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 19477
    HEAP32[$132 >> 2] = $16; //@line 19478
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 19479
    HEAP32[$133 >> 2] = $18; //@line 19480
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 19481
    HEAP32[$134 >> 2] = $20; //@line 19482
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 19483
    HEAP32[$135 >> 2] = $22; //@line 19484
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 19485
    HEAP32[$136 >> 2] = $24; //@line 19486
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 19487
    HEAP32[$137 >> 2] = $26; //@line 19488
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 19489
    HEAP32[$138 >> 2] = $28; //@line 19490
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 19491
    HEAP32[$139 >> 2] = $30; //@line 19492
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 19493
    HEAP32[$140 >> 2] = $32; //@line 19494
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 19495
    HEAP32[$141 >> 2] = $34; //@line 19496
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 19497
    HEAP32[$142 >> 2] = $36; //@line 19498
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 19499
    HEAP32[$143 >> 2] = $38; //@line 19500
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 19501
    HEAP32[$144 >> 2] = $40; //@line 19502
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 19503
    HEAP32[$145 >> 2] = $42; //@line 19504
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 19505
    HEAP32[$146 >> 2] = $44; //@line 19506
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 19507
    HEAP32[$147 >> 2] = $52; //@line 19508
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 19509
    HEAP32[$148 >> 2] = $$131; //@line 19510
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 19511
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 19512
    sp = STACKTOP; //@line 19513
    return;
   }
   ___async_unwind = 0; //@line 19516
   HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 19517
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 19518
   HEAP32[$125 >> 2] = $2; //@line 19519
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 19520
   HEAP32[$126 >> 2] = $4; //@line 19521
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 19522
   HEAP32[$127 >> 2] = $6; //@line 19523
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 19524
   HEAP32[$128 >> 2] = $10; //@line 19525
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 19526
   HEAP32[$129 >> 2] = $8; //@line 19527
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 19528
   HEAP32[$130 >> 2] = $12; //@line 19529
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 19530
   HEAP32[$131 >> 2] = $14; //@line 19531
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 19532
   HEAP32[$132 >> 2] = $16; //@line 19533
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 19534
   HEAP32[$133 >> 2] = $18; //@line 19535
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 19536
   HEAP32[$134 >> 2] = $20; //@line 19537
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 19538
   HEAP32[$135 >> 2] = $22; //@line 19539
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 19540
   HEAP32[$136 >> 2] = $24; //@line 19541
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 19542
   HEAP32[$137 >> 2] = $26; //@line 19543
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 19544
   HEAP32[$138 >> 2] = $28; //@line 19545
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 19546
   HEAP32[$139 >> 2] = $30; //@line 19547
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 19548
   HEAP32[$140 >> 2] = $32; //@line 19549
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 19550
   HEAP32[$141 >> 2] = $34; //@line 19551
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 19552
   HEAP32[$142 >> 2] = $36; //@line 19553
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 19554
   HEAP32[$143 >> 2] = $38; //@line 19555
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 19556
   HEAP32[$144 >> 2] = $40; //@line 19557
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 19558
   HEAP32[$145 >> 2] = $42; //@line 19559
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 19560
   HEAP32[$146 >> 2] = $44; //@line 19561
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 19562
   HEAP32[$147 >> 2] = $52; //@line 19563
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 19564
   HEAP32[$148 >> 2] = $$131; //@line 19565
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 19566
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 19567
   sp = STACKTOP; //@line 19568
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 19573
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 19574
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 19575
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 19578
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 19579
    HEAP32[$98 >> 2] = $2; //@line 19580
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 19581
    HEAP32[$99 >> 2] = $4; //@line 19582
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 19583
    HEAP32[$100 >> 2] = $6; //@line 19584
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 19585
    HEAP32[$101 >> 2] = $10; //@line 19586
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 19587
    HEAP32[$102 >> 2] = $8; //@line 19588
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 19589
    HEAP32[$103 >> 2] = $52; //@line 19590
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 19591
    HEAP32[$104 >> 2] = $12; //@line 19592
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 19593
    HEAP32[$105 >> 2] = $14; //@line 19594
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 19595
    HEAP32[$106 >> 2] = $16; //@line 19596
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 19597
    HEAP32[$107 >> 2] = $18; //@line 19598
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 19599
    HEAP32[$108 >> 2] = $20; //@line 19600
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 19601
    HEAP32[$109 >> 2] = $22; //@line 19602
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 19603
    HEAP32[$110 >> 2] = $24; //@line 19604
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 19605
    HEAP32[$111 >> 2] = $92; //@line 19606
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 19607
    HEAP32[$112 >> 2] = $26; //@line 19608
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 19609
    HEAP32[$113 >> 2] = $28; //@line 19610
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 19611
    HEAP32[$114 >> 2] = $30; //@line 19612
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 19613
    HEAP32[$115 >> 2] = $$131; //@line 19614
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 19615
    HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 19616
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 19617
    HEAP32[$117 >> 2] = $32; //@line 19618
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 19619
    HEAP32[$118 >> 2] = $34; //@line 19620
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 19621
    HEAP32[$119 >> 2] = $36; //@line 19622
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 19623
    HEAP32[$120 >> 2] = $38; //@line 19624
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 19625
    HEAP32[$121 >> 2] = $40; //@line 19626
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 19627
    HEAP32[$122 >> 2] = $42; //@line 19628
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 19629
    HEAP32[$123 >> 2] = $44; //@line 19630
    sp = STACKTOP; //@line 19631
    return;
   }
   ___async_unwind = 0; //@line 19634
   HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 19635
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 19636
   HEAP32[$98 >> 2] = $2; //@line 19637
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 19638
   HEAP32[$99 >> 2] = $4; //@line 19639
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 19640
   HEAP32[$100 >> 2] = $6; //@line 19641
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 19642
   HEAP32[$101 >> 2] = $10; //@line 19643
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 19644
   HEAP32[$102 >> 2] = $8; //@line 19645
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 19646
   HEAP32[$103 >> 2] = $52; //@line 19647
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 19648
   HEAP32[$104 >> 2] = $12; //@line 19649
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 19650
   HEAP32[$105 >> 2] = $14; //@line 19651
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 19652
   HEAP32[$106 >> 2] = $16; //@line 19653
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 19654
   HEAP32[$107 >> 2] = $18; //@line 19655
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 19656
   HEAP32[$108 >> 2] = $20; //@line 19657
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 19658
   HEAP32[$109 >> 2] = $22; //@line 19659
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 19660
   HEAP32[$110 >> 2] = $24; //@line 19661
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 19662
   HEAP32[$111 >> 2] = $92; //@line 19663
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 19664
   HEAP32[$112 >> 2] = $26; //@line 19665
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 19666
   HEAP32[$113 >> 2] = $28; //@line 19667
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 19668
   HEAP32[$114 >> 2] = $30; //@line 19669
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 19670
   HEAP32[$115 >> 2] = $$131; //@line 19671
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 19672
   HEAP32[$116 >> 2] = $$02972$reg2mem$1; //@line 19673
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 19674
   HEAP32[$117 >> 2] = $32; //@line 19675
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 19676
   HEAP32[$118 >> 2] = $34; //@line 19677
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 19678
   HEAP32[$119 >> 2] = $36; //@line 19679
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 19680
   HEAP32[$120 >> 2] = $38; //@line 19681
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 19682
   HEAP32[$121 >> 2] = $40; //@line 19683
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 19684
   HEAP32[$122 >> 2] = $42; //@line 19685
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 19686
   HEAP32[$123 >> 2] = $44; //@line 19687
   sp = STACKTOP; //@line 19688
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 19693
  $156 = $150 + 44 | 0; //@line 19694
  $157 = HEAP32[$156 >> 2] | 0; //@line 19695
  if (!$157) {
   HEAP32[$14 >> 2] = 0; //@line 19698
   $188 = HEAP32[$150 >> 2] | 0; //@line 19699
   HEAP32[$16 >> 2] = 0; //@line 19700
   HEAP32[$18 >> 2] = 192; //@line 19701
   HEAP32[$20 >> 2] = $188; //@line 19702
   HEAP32[$12 >> 2] = 724; //@line 19703
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 19704
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 19705
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 19708
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 19709
    HEAP32[$189 >> 2] = $2; //@line 19710
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 19711
    HEAP32[$190 >> 2] = $4; //@line 19712
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 19713
    HEAP32[$191 >> 2] = $6; //@line 19714
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 19715
    HEAP32[$192 >> 2] = $8; //@line 19716
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 19717
    HEAP32[$193 >> 2] = $10; //@line 19718
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 19719
    HEAP32[$194 >> 2] = $12; //@line 19720
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 19721
    HEAP32[$195 >> 2] = $14; //@line 19722
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 19723
    HEAP32[$196 >> 2] = $16; //@line 19724
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 19725
    HEAP32[$197 >> 2] = $18; //@line 19726
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 19727
    HEAP32[$198 >> 2] = $20; //@line 19728
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 19729
    HEAP32[$199 >> 2] = $22; //@line 19730
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 19731
    HEAP32[$200 >> 2] = $24; //@line 19732
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 19733
    HEAP32[$201 >> 2] = $26; //@line 19734
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 19735
    HEAP32[$202 >> 2] = $28; //@line 19736
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 19737
    HEAP32[$203 >> 2] = $30; //@line 19738
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 19739
    HEAP32[$204 >> 2] = $32; //@line 19740
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 19741
    HEAP32[$205 >> 2] = $34; //@line 19742
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 19743
    HEAP32[$206 >> 2] = $36; //@line 19744
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 19745
    HEAP32[$207 >> 2] = $38; //@line 19746
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 19747
    HEAP32[$208 >> 2] = $40; //@line 19748
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 19749
    HEAP32[$209 >> 2] = $42; //@line 19750
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 19751
    HEAP32[$210 >> 2] = $44; //@line 19752
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 19753
    HEAP32[$211 >> 2] = $$131; //@line 19754
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 19755
    HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 19756
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 19757
    HEAP32[$213 >> 2] = $52; //@line 19758
    sp = STACKTOP; //@line 19759
    return;
   }
   ___async_unwind = 0; //@line 19762
   HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 19763
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 19764
   HEAP32[$189 >> 2] = $2; //@line 19765
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 19766
   HEAP32[$190 >> 2] = $4; //@line 19767
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 19768
   HEAP32[$191 >> 2] = $6; //@line 19769
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 19770
   HEAP32[$192 >> 2] = $8; //@line 19771
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 19772
   HEAP32[$193 >> 2] = $10; //@line 19773
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 19774
   HEAP32[$194 >> 2] = $12; //@line 19775
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 19776
   HEAP32[$195 >> 2] = $14; //@line 19777
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 19778
   HEAP32[$196 >> 2] = $16; //@line 19779
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 19780
   HEAP32[$197 >> 2] = $18; //@line 19781
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 19782
   HEAP32[$198 >> 2] = $20; //@line 19783
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 19784
   HEAP32[$199 >> 2] = $22; //@line 19785
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 19786
   HEAP32[$200 >> 2] = $24; //@line 19787
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 19788
   HEAP32[$201 >> 2] = $26; //@line 19789
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 19790
   HEAP32[$202 >> 2] = $28; //@line 19791
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 19792
   HEAP32[$203 >> 2] = $30; //@line 19793
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 19794
   HEAP32[$204 >> 2] = $32; //@line 19795
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 19796
   HEAP32[$205 >> 2] = $34; //@line 19797
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 19798
   HEAP32[$206 >> 2] = $36; //@line 19799
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 19800
   HEAP32[$207 >> 2] = $38; //@line 19801
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 19802
   HEAP32[$208 >> 2] = $40; //@line 19803
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 19804
   HEAP32[$209 >> 2] = $42; //@line 19805
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 19806
   HEAP32[$210 >> 2] = $44; //@line 19807
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 19808
   HEAP32[$211 >> 2] = $$131; //@line 19809
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 19810
   HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 19811
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 19812
   HEAP32[$213 >> 2] = $52; //@line 19813
   sp = STACKTOP; //@line 19814
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 19819
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 19820
   FUNCTION_TABLE_vii[$161 & 7]($26, $150 + 32 | 0); //@line 19821
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 19824
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 19825
    HEAP32[$162 >> 2] = $2; //@line 19826
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 19827
    HEAP32[$163 >> 2] = $4; //@line 19828
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 19829
    HEAP32[$164 >> 2] = $6; //@line 19830
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 19831
    HEAP32[$165 >> 2] = $8; //@line 19832
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 19833
    HEAP32[$166 >> 2] = $10; //@line 19834
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 19835
    HEAP32[$167 >> 2] = $12; //@line 19836
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 19837
    HEAP32[$168 >> 2] = $14; //@line 19838
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 19839
    HEAP32[$169 >> 2] = $16; //@line 19840
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 19841
    HEAP32[$170 >> 2] = $18; //@line 19842
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 19843
    HEAP32[$171 >> 2] = $20; //@line 19844
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 19845
    HEAP32[$172 >> 2] = $22; //@line 19846
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 19847
    HEAP32[$173 >> 2] = $24; //@line 19848
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 19849
    HEAP32[$174 >> 2] = $26; //@line 19850
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 19851
    HEAP32[$175 >> 2] = $28; //@line 19852
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 19853
    HEAP32[$176 >> 2] = $30; //@line 19854
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 19855
    HEAP32[$177 >> 2] = $32; //@line 19856
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 19857
    HEAP32[$178 >> 2] = $34; //@line 19858
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 19859
    HEAP32[$179 >> 2] = $36; //@line 19860
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 19861
    HEAP32[$180 >> 2] = $38; //@line 19862
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 19863
    HEAP32[$181 >> 2] = $40; //@line 19864
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 19865
    HEAP32[$182 >> 2] = $42; //@line 19866
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 19867
    HEAP32[$183 >> 2] = $44; //@line 19868
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 19869
    HEAP32[$184 >> 2] = $156; //@line 19870
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 19871
    HEAP32[$185 >> 2] = $52; //@line 19872
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 19873
    HEAP32[$186 >> 2] = $$131; //@line 19874
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 19875
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 19876
    sp = STACKTOP; //@line 19877
    return;
   }
   ___async_unwind = 0; //@line 19880
   HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 19881
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 19882
   HEAP32[$162 >> 2] = $2; //@line 19883
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 19884
   HEAP32[$163 >> 2] = $4; //@line 19885
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 19886
   HEAP32[$164 >> 2] = $6; //@line 19887
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 19888
   HEAP32[$165 >> 2] = $8; //@line 19889
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 19890
   HEAP32[$166 >> 2] = $10; //@line 19891
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 19892
   HEAP32[$167 >> 2] = $12; //@line 19893
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 19894
   HEAP32[$168 >> 2] = $14; //@line 19895
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 19896
   HEAP32[$169 >> 2] = $16; //@line 19897
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 19898
   HEAP32[$170 >> 2] = $18; //@line 19899
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 19900
   HEAP32[$171 >> 2] = $20; //@line 19901
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 19902
   HEAP32[$172 >> 2] = $22; //@line 19903
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 19904
   HEAP32[$173 >> 2] = $24; //@line 19905
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 19906
   HEAP32[$174 >> 2] = $26; //@line 19907
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 19908
   HEAP32[$175 >> 2] = $28; //@line 19909
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 19910
   HEAP32[$176 >> 2] = $30; //@line 19911
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 19912
   HEAP32[$177 >> 2] = $32; //@line 19913
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 19914
   HEAP32[$178 >> 2] = $34; //@line 19915
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 19916
   HEAP32[$179 >> 2] = $36; //@line 19917
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 19918
   HEAP32[$180 >> 2] = $38; //@line 19919
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 19920
   HEAP32[$181 >> 2] = $40; //@line 19921
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 19922
   HEAP32[$182 >> 2] = $42; //@line 19923
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 19924
   HEAP32[$183 >> 2] = $44; //@line 19925
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 19926
   HEAP32[$184 >> 2] = $156; //@line 19927
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 19928
   HEAP32[$185 >> 2] = $52; //@line 19929
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 19930
   HEAP32[$186 >> 2] = $$131; //@line 19931
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 19932
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 19933
   sp = STACKTOP; //@line 19934
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_119($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$131 = 0, $$131$phi = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $215 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $226 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $90 = 0, $91 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20154
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20156
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20158
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20160
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20162
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20164
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20166
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20168
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20170
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20172
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20174
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20176
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20178
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20180
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20182
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20184
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20186
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20188
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20190
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20192
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20194
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20196
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20198
 $$02972$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 20203
 $$131 = HEAP32[$0 + 92 >> 2] | 0; //@line 20203
 while (1) {
  $51 = $$02972$reg2mem$0 + 1 | 0; //@line 20205
  if (($$02972$reg2mem$0 | 0) >= 4) {
   label = 2; //@line 20208
   break;
  }
  $50 = 10036 + ($51 << 2) | 0; //@line 20211
  $52 = HEAP32[$50 >> 2] | 0; //@line 20212
  if (!$52) {
   $$131$phi = $$131; //@line 20215
   $$02972$reg2mem$0 = $51; //@line 20215
   $$131 = $$131$phi; //@line 20215
   continue;
  }
  if ((HEAP32[$52 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 20222
   break;
  }
  $82 = $52 + 72 | 0; //@line 20225
  $83 = HEAP32[$82 >> 2] | 0; //@line 20226
  if ($83 >>> 0 > 100) {
   HEAP32[$82 >> 2] = $83 + -100; //@line 20230
  } else {
   if ((HEAP32[$52 + 4 >> 2] | 0) == -3019) {
    label = 12; //@line 20236
    break;
   }
  }
  $148 = HEAP32[$50 >> 2] | 0; //@line 20240
  $149 = $148 + 76 | 0; //@line 20241
  $150 = HEAP32[$149 >> 2] | 0; //@line 20242
  if ($150 | 0) {
   if ($150 >>> 0 <= 100) {
    label = 22; //@line 20247
    break;
   }
   HEAP32[$149 >> 2] = $150 + -100; //@line 20251
  }
  if ($$131 | 0) {
   $$131$phi = $$131; //@line 20255
   $$02972$reg2mem$0 = $51; //@line 20255
   $$131 = $$131$phi; //@line 20255
   continue;
  }
  $$02972$reg2mem$0 = $51; //@line 20259
  $$131 = HEAP32[$50 >> 2] | 0; //@line 20259
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[10976] = 0; //@line 20264
   return;
  }
  $215 = $$131 + 44 | 0; //@line 20267
  $216 = HEAP32[$215 >> 2] | 0; //@line 20268
  if (!$216) {
   $224 = $8 + 12 | 0; //@line 20271
   HEAP32[$224 >> 2] = 0; //@line 20272
   $226 = $32 + 4 | 0; //@line 20274
   HEAP32[$226 >> 2] = 0; //@line 20276
   HEAP32[$226 + 4 >> 2] = 0; //@line 20279
   HEAP32[$32 >> 2] = 3; //@line 20280
   $230 = $32 + 12 | 0; //@line 20281
   HEAP32[$230 >> 2] = 712; //@line 20282
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 20283
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $32) | 0; //@line 20284
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 20287
    $231 = $ReallocAsyncCtx12 + 4 | 0; //@line 20288
    HEAP32[$231 >> 2] = $230; //@line 20289
    $232 = $ReallocAsyncCtx12 + 8 | 0; //@line 20290
    HEAP32[$232 >> 2] = $224; //@line 20291
    $233 = $ReallocAsyncCtx12 + 12 | 0; //@line 20292
    HEAP32[$233 >> 2] = $32; //@line 20293
    $234 = $ReallocAsyncCtx12 + 16 | 0; //@line 20294
    HEAP32[$234 >> 2] = $8; //@line 20295
    sp = STACKTOP; //@line 20296
    return;
   }
   ___async_unwind = 0; //@line 20299
   HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 20300
   $231 = $ReallocAsyncCtx12 + 4 | 0; //@line 20301
   HEAP32[$231 >> 2] = $230; //@line 20302
   $232 = $ReallocAsyncCtx12 + 8 | 0; //@line 20303
   HEAP32[$232 >> 2] = $224; //@line 20304
   $233 = $ReallocAsyncCtx12 + 12 | 0; //@line 20305
   HEAP32[$233 >> 2] = $32; //@line 20306
   $234 = $ReallocAsyncCtx12 + 16 | 0; //@line 20307
   HEAP32[$234 >> 2] = $8; //@line 20308
   sp = STACKTOP; //@line 20309
   return;
  } else {
   $220 = HEAP32[$216 + 4 >> 2] | 0; //@line 20314
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 20315
   FUNCTION_TABLE_vii[$220 & 7]($8, $$131 + 32 | 0); //@line 20316
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 20319
    $221 = $ReallocAsyncCtx7 + 4 | 0; //@line 20320
    HEAP32[$221 >> 2] = $215; //@line 20321
    $222 = $ReallocAsyncCtx7 + 8 | 0; //@line 20322
    HEAP32[$222 >> 2] = $8; //@line 20323
    $223 = $ReallocAsyncCtx7 + 12 | 0; //@line 20324
    HEAP32[$223 >> 2] = $32; //@line 20325
    sp = STACKTOP; //@line 20326
    return;
   }
   ___async_unwind = 0; //@line 20329
   HEAP32[$ReallocAsyncCtx7 >> 2] = 196; //@line 20330
   $221 = $ReallocAsyncCtx7 + 4 | 0; //@line 20331
   HEAP32[$221 >> 2] = $215; //@line 20332
   $222 = $ReallocAsyncCtx7 + 8 | 0; //@line 20333
   HEAP32[$222 >> 2] = $8; //@line 20334
   $223 = $ReallocAsyncCtx7 + 12 | 0; //@line 20335
   HEAP32[$223 >> 2] = $32; //@line 20336
   sp = STACKTOP; //@line 20337
   return;
  }
 } else if ((label | 0) == 5) {
  $57 = HEAP32[$52 >> 2] | 0; //@line 20342
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 20343
  __ZL28nsapi_dns_query_async_deletei($57); //@line 20344
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 20347
   $58 = $ReallocAsyncCtx10 + 4 | 0; //@line 20348
   HEAP32[$58 >> 2] = $2; //@line 20349
   $59 = $ReallocAsyncCtx10 + 8 | 0; //@line 20350
   HEAP32[$59 >> 2] = $4; //@line 20351
   $60 = $ReallocAsyncCtx10 + 12 | 0; //@line 20352
   HEAP32[$60 >> 2] = $6; //@line 20353
   $61 = $ReallocAsyncCtx10 + 16 | 0; //@line 20354
   HEAP32[$61 >> 2] = $8; //@line 20355
   $62 = $ReallocAsyncCtx10 + 20 | 0; //@line 20356
   HEAP32[$62 >> 2] = $10; //@line 20357
   $63 = $ReallocAsyncCtx10 + 24 | 0; //@line 20358
   HEAP32[$63 >> 2] = $12; //@line 20359
   $64 = $ReallocAsyncCtx10 + 28 | 0; //@line 20360
   HEAP32[$64 >> 2] = $14; //@line 20361
   $65 = $ReallocAsyncCtx10 + 32 | 0; //@line 20362
   HEAP32[$65 >> 2] = $16; //@line 20363
   $66 = $ReallocAsyncCtx10 + 36 | 0; //@line 20364
   HEAP32[$66 >> 2] = $18; //@line 20365
   $67 = $ReallocAsyncCtx10 + 40 | 0; //@line 20366
   HEAP32[$67 >> 2] = $20; //@line 20367
   $68 = $ReallocAsyncCtx10 + 44 | 0; //@line 20368
   HEAP32[$68 >> 2] = $22; //@line 20369
   $69 = $ReallocAsyncCtx10 + 48 | 0; //@line 20370
   HEAP32[$69 >> 2] = $24; //@line 20371
   $70 = $ReallocAsyncCtx10 + 52 | 0; //@line 20372
   HEAP32[$70 >> 2] = $26; //@line 20373
   $71 = $ReallocAsyncCtx10 + 56 | 0; //@line 20374
   HEAP32[$71 >> 2] = $28; //@line 20375
   $72 = $ReallocAsyncCtx10 + 60 | 0; //@line 20376
   HEAP32[$72 >> 2] = $30; //@line 20377
   $73 = $ReallocAsyncCtx10 + 64 | 0; //@line 20378
   HEAP32[$73 >> 2] = $32; //@line 20379
   $74 = $ReallocAsyncCtx10 + 68 | 0; //@line 20380
   HEAP32[$74 >> 2] = $34; //@line 20381
   $75 = $ReallocAsyncCtx10 + 72 | 0; //@line 20382
   HEAP32[$75 >> 2] = $36; //@line 20383
   $76 = $ReallocAsyncCtx10 + 76 | 0; //@line 20384
   HEAP32[$76 >> 2] = $38; //@line 20385
   $77 = $ReallocAsyncCtx10 + 80 | 0; //@line 20386
   HEAP32[$77 >> 2] = $40; //@line 20387
   $78 = $ReallocAsyncCtx10 + 84 | 0; //@line 20388
   HEAP32[$78 >> 2] = $42; //@line 20389
   $79 = $ReallocAsyncCtx10 + 88 | 0; //@line 20390
   HEAP32[$79 >> 2] = $44; //@line 20391
   $80 = $ReallocAsyncCtx10 + 92 | 0; //@line 20392
   HEAP32[$80 >> 2] = $$131; //@line 20393
   $81 = $ReallocAsyncCtx10 + 96 | 0; //@line 20394
   HEAP32[$81 >> 2] = $51; //@line 20395
   sp = STACKTOP; //@line 20396
   return;
  }
  ___async_unwind = 0; //@line 20399
  HEAP32[$ReallocAsyncCtx10 >> 2] = 184; //@line 20400
  $58 = $ReallocAsyncCtx10 + 4 | 0; //@line 20401
  HEAP32[$58 >> 2] = $2; //@line 20402
  $59 = $ReallocAsyncCtx10 + 8 | 0; //@line 20403
  HEAP32[$59 >> 2] = $4; //@line 20404
  $60 = $ReallocAsyncCtx10 + 12 | 0; //@line 20405
  HEAP32[$60 >> 2] = $6; //@line 20406
  $61 = $ReallocAsyncCtx10 + 16 | 0; //@line 20407
  HEAP32[$61 >> 2] = $8; //@line 20408
  $62 = $ReallocAsyncCtx10 + 20 | 0; //@line 20409
  HEAP32[$62 >> 2] = $10; //@line 20410
  $63 = $ReallocAsyncCtx10 + 24 | 0; //@line 20411
  HEAP32[$63 >> 2] = $12; //@line 20412
  $64 = $ReallocAsyncCtx10 + 28 | 0; //@line 20413
  HEAP32[$64 >> 2] = $14; //@line 20414
  $65 = $ReallocAsyncCtx10 + 32 | 0; //@line 20415
  HEAP32[$65 >> 2] = $16; //@line 20416
  $66 = $ReallocAsyncCtx10 + 36 | 0; //@line 20417
  HEAP32[$66 >> 2] = $18; //@line 20418
  $67 = $ReallocAsyncCtx10 + 40 | 0; //@line 20419
  HEAP32[$67 >> 2] = $20; //@line 20420
  $68 = $ReallocAsyncCtx10 + 44 | 0; //@line 20421
  HEAP32[$68 >> 2] = $22; //@line 20422
  $69 = $ReallocAsyncCtx10 + 48 | 0; //@line 20423
  HEAP32[$69 >> 2] = $24; //@line 20424
  $70 = $ReallocAsyncCtx10 + 52 | 0; //@line 20425
  HEAP32[$70 >> 2] = $26; //@line 20426
  $71 = $ReallocAsyncCtx10 + 56 | 0; //@line 20427
  HEAP32[$71 >> 2] = $28; //@line 20428
  $72 = $ReallocAsyncCtx10 + 60 | 0; //@line 20429
  HEAP32[$72 >> 2] = $30; //@line 20430
  $73 = $ReallocAsyncCtx10 + 64 | 0; //@line 20431
  HEAP32[$73 >> 2] = $32; //@line 20432
  $74 = $ReallocAsyncCtx10 + 68 | 0; //@line 20433
  HEAP32[$74 >> 2] = $34; //@line 20434
  $75 = $ReallocAsyncCtx10 + 72 | 0; //@line 20435
  HEAP32[$75 >> 2] = $36; //@line 20436
  $76 = $ReallocAsyncCtx10 + 76 | 0; //@line 20437
  HEAP32[$76 >> 2] = $38; //@line 20438
  $77 = $ReallocAsyncCtx10 + 80 | 0; //@line 20439
  HEAP32[$77 >> 2] = $40; //@line 20440
  $78 = $ReallocAsyncCtx10 + 84 | 0; //@line 20441
  HEAP32[$78 >> 2] = $42; //@line 20442
  $79 = $ReallocAsyncCtx10 + 88 | 0; //@line 20443
  HEAP32[$79 >> 2] = $44; //@line 20444
  $80 = $ReallocAsyncCtx10 + 92 | 0; //@line 20445
  HEAP32[$80 >> 2] = $$131; //@line 20446
  $81 = $ReallocAsyncCtx10 + 96 | 0; //@line 20447
  HEAP32[$81 >> 2] = $51; //@line 20448
  sp = STACKTOP; //@line 20449
  return;
 } else if ((label | 0) == 12) {
  HEAP32[$52 + 76 >> 2] = 0; //@line 20454
  $90 = $52 + 44 | 0; //@line 20455
  $91 = HEAP32[$90 >> 2] | 0; //@line 20456
  if (!$91) {
   HEAP32[$34 >> 2] = 0; //@line 20459
   $122 = HEAP32[$52 >> 2] | 0; //@line 20460
   HEAP32[$36 >> 2] = 0; //@line 20461
   HEAP32[$38 >> 2] = 187; //@line 20462
   HEAP32[$40 >> 2] = $122; //@line 20463
   HEAP32[$10 >> 2] = 724; //@line 20464
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 20465
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 20466
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 20469
    $123 = $ReallocAsyncCtx14 + 4 | 0; //@line 20470
    HEAP32[$123 >> 2] = $2; //@line 20471
    $124 = $ReallocAsyncCtx14 + 8 | 0; //@line 20472
    HEAP32[$124 >> 2] = $4; //@line 20473
    $125 = $ReallocAsyncCtx14 + 12 | 0; //@line 20474
    HEAP32[$125 >> 2] = $6; //@line 20475
    $126 = $ReallocAsyncCtx14 + 16 | 0; //@line 20476
    HEAP32[$126 >> 2] = $10; //@line 20477
    $127 = $ReallocAsyncCtx14 + 20 | 0; //@line 20478
    HEAP32[$127 >> 2] = $8; //@line 20479
    $128 = $ReallocAsyncCtx14 + 24 | 0; //@line 20480
    HEAP32[$128 >> 2] = $12; //@line 20481
    $129 = $ReallocAsyncCtx14 + 28 | 0; //@line 20482
    HEAP32[$129 >> 2] = $14; //@line 20483
    $130 = $ReallocAsyncCtx14 + 32 | 0; //@line 20484
    HEAP32[$130 >> 2] = $16; //@line 20485
    $131 = $ReallocAsyncCtx14 + 36 | 0; //@line 20486
    HEAP32[$131 >> 2] = $18; //@line 20487
    $132 = $ReallocAsyncCtx14 + 40 | 0; //@line 20488
    HEAP32[$132 >> 2] = $20; //@line 20489
    $133 = $ReallocAsyncCtx14 + 44 | 0; //@line 20490
    HEAP32[$133 >> 2] = $22; //@line 20491
    $134 = $ReallocAsyncCtx14 + 48 | 0; //@line 20492
    HEAP32[$134 >> 2] = $24; //@line 20493
    $135 = $ReallocAsyncCtx14 + 52 | 0; //@line 20494
    HEAP32[$135 >> 2] = $26; //@line 20495
    $136 = $ReallocAsyncCtx14 + 56 | 0; //@line 20496
    HEAP32[$136 >> 2] = $28; //@line 20497
    $137 = $ReallocAsyncCtx14 + 60 | 0; //@line 20498
    HEAP32[$137 >> 2] = $30; //@line 20499
    $138 = $ReallocAsyncCtx14 + 64 | 0; //@line 20500
    HEAP32[$138 >> 2] = $32; //@line 20501
    $139 = $ReallocAsyncCtx14 + 68 | 0; //@line 20502
    HEAP32[$139 >> 2] = $34; //@line 20503
    $140 = $ReallocAsyncCtx14 + 72 | 0; //@line 20504
    HEAP32[$140 >> 2] = $36; //@line 20505
    $141 = $ReallocAsyncCtx14 + 76 | 0; //@line 20506
    HEAP32[$141 >> 2] = $38; //@line 20507
    $142 = $ReallocAsyncCtx14 + 80 | 0; //@line 20508
    HEAP32[$142 >> 2] = $40; //@line 20509
    $143 = $ReallocAsyncCtx14 + 84 | 0; //@line 20510
    HEAP32[$143 >> 2] = $42; //@line 20511
    $144 = $ReallocAsyncCtx14 + 88 | 0; //@line 20512
    HEAP32[$144 >> 2] = $44; //@line 20513
    $145 = $ReallocAsyncCtx14 + 92 | 0; //@line 20514
    HEAP32[$145 >> 2] = $50; //@line 20515
    $146 = $ReallocAsyncCtx14 + 96 | 0; //@line 20516
    HEAP32[$146 >> 2] = $$131; //@line 20517
    $147 = $ReallocAsyncCtx14 + 100 | 0; //@line 20518
    HEAP32[$147 >> 2] = $51; //@line 20519
    sp = STACKTOP; //@line 20520
    return;
   }
   ___async_unwind = 0; //@line 20523
   HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 20524
   $123 = $ReallocAsyncCtx14 + 4 | 0; //@line 20525
   HEAP32[$123 >> 2] = $2; //@line 20526
   $124 = $ReallocAsyncCtx14 + 8 | 0; //@line 20527
   HEAP32[$124 >> 2] = $4; //@line 20528
   $125 = $ReallocAsyncCtx14 + 12 | 0; //@line 20529
   HEAP32[$125 >> 2] = $6; //@line 20530
   $126 = $ReallocAsyncCtx14 + 16 | 0; //@line 20531
   HEAP32[$126 >> 2] = $10; //@line 20532
   $127 = $ReallocAsyncCtx14 + 20 | 0; //@line 20533
   HEAP32[$127 >> 2] = $8; //@line 20534
   $128 = $ReallocAsyncCtx14 + 24 | 0; //@line 20535
   HEAP32[$128 >> 2] = $12; //@line 20536
   $129 = $ReallocAsyncCtx14 + 28 | 0; //@line 20537
   HEAP32[$129 >> 2] = $14; //@line 20538
   $130 = $ReallocAsyncCtx14 + 32 | 0; //@line 20539
   HEAP32[$130 >> 2] = $16; //@line 20540
   $131 = $ReallocAsyncCtx14 + 36 | 0; //@line 20541
   HEAP32[$131 >> 2] = $18; //@line 20542
   $132 = $ReallocAsyncCtx14 + 40 | 0; //@line 20543
   HEAP32[$132 >> 2] = $20; //@line 20544
   $133 = $ReallocAsyncCtx14 + 44 | 0; //@line 20545
   HEAP32[$133 >> 2] = $22; //@line 20546
   $134 = $ReallocAsyncCtx14 + 48 | 0; //@line 20547
   HEAP32[$134 >> 2] = $24; //@line 20548
   $135 = $ReallocAsyncCtx14 + 52 | 0; //@line 20549
   HEAP32[$135 >> 2] = $26; //@line 20550
   $136 = $ReallocAsyncCtx14 + 56 | 0; //@line 20551
   HEAP32[$136 >> 2] = $28; //@line 20552
   $137 = $ReallocAsyncCtx14 + 60 | 0; //@line 20553
   HEAP32[$137 >> 2] = $30; //@line 20554
   $138 = $ReallocAsyncCtx14 + 64 | 0; //@line 20555
   HEAP32[$138 >> 2] = $32; //@line 20556
   $139 = $ReallocAsyncCtx14 + 68 | 0; //@line 20557
   HEAP32[$139 >> 2] = $34; //@line 20558
   $140 = $ReallocAsyncCtx14 + 72 | 0; //@line 20559
   HEAP32[$140 >> 2] = $36; //@line 20560
   $141 = $ReallocAsyncCtx14 + 76 | 0; //@line 20561
   HEAP32[$141 >> 2] = $38; //@line 20562
   $142 = $ReallocAsyncCtx14 + 80 | 0; //@line 20563
   HEAP32[$142 >> 2] = $40; //@line 20564
   $143 = $ReallocAsyncCtx14 + 84 | 0; //@line 20565
   HEAP32[$143 >> 2] = $42; //@line 20566
   $144 = $ReallocAsyncCtx14 + 88 | 0; //@line 20567
   HEAP32[$144 >> 2] = $44; //@line 20568
   $145 = $ReallocAsyncCtx14 + 92 | 0; //@line 20569
   HEAP32[$145 >> 2] = $50; //@line 20570
   $146 = $ReallocAsyncCtx14 + 96 | 0; //@line 20571
   HEAP32[$146 >> 2] = $$131; //@line 20572
   $147 = $ReallocAsyncCtx14 + 100 | 0; //@line 20573
   HEAP32[$147 >> 2] = $51; //@line 20574
   sp = STACKTOP; //@line 20575
   return;
  } else {
   $95 = HEAP32[$91 + 4 >> 2] | 0; //@line 20580
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 20581
   FUNCTION_TABLE_vii[$95 & 7]($2, $52 + 32 | 0); //@line 20582
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 20585
    $96 = $ReallocAsyncCtx + 4 | 0; //@line 20586
    HEAP32[$96 >> 2] = $2; //@line 20587
    $97 = $ReallocAsyncCtx + 8 | 0; //@line 20588
    HEAP32[$97 >> 2] = $4; //@line 20589
    $98 = $ReallocAsyncCtx + 12 | 0; //@line 20590
    HEAP32[$98 >> 2] = $6; //@line 20591
    $99 = $ReallocAsyncCtx + 16 | 0; //@line 20592
    HEAP32[$99 >> 2] = $10; //@line 20593
    $100 = $ReallocAsyncCtx + 20 | 0; //@line 20594
    HEAP32[$100 >> 2] = $8; //@line 20595
    $101 = $ReallocAsyncCtx + 24 | 0; //@line 20596
    HEAP32[$101 >> 2] = $50; //@line 20597
    $102 = $ReallocAsyncCtx + 28 | 0; //@line 20598
    HEAP32[$102 >> 2] = $12; //@line 20599
    $103 = $ReallocAsyncCtx + 32 | 0; //@line 20600
    HEAP32[$103 >> 2] = $14; //@line 20601
    $104 = $ReallocAsyncCtx + 36 | 0; //@line 20602
    HEAP32[$104 >> 2] = $16; //@line 20603
    $105 = $ReallocAsyncCtx + 40 | 0; //@line 20604
    HEAP32[$105 >> 2] = $18; //@line 20605
    $106 = $ReallocAsyncCtx + 44 | 0; //@line 20606
    HEAP32[$106 >> 2] = $20; //@line 20607
    $107 = $ReallocAsyncCtx + 48 | 0; //@line 20608
    HEAP32[$107 >> 2] = $22; //@line 20609
    $108 = $ReallocAsyncCtx + 52 | 0; //@line 20610
    HEAP32[$108 >> 2] = $24; //@line 20611
    $109 = $ReallocAsyncCtx + 56 | 0; //@line 20612
    HEAP32[$109 >> 2] = $90; //@line 20613
    $110 = $ReallocAsyncCtx + 60 | 0; //@line 20614
    HEAP32[$110 >> 2] = $26; //@line 20615
    $111 = $ReallocAsyncCtx + 64 | 0; //@line 20616
    HEAP32[$111 >> 2] = $28; //@line 20617
    $112 = $ReallocAsyncCtx + 68 | 0; //@line 20618
    HEAP32[$112 >> 2] = $30; //@line 20619
    $113 = $ReallocAsyncCtx + 72 | 0; //@line 20620
    HEAP32[$113 >> 2] = $$131; //@line 20621
    $114 = $ReallocAsyncCtx + 76 | 0; //@line 20622
    HEAP32[$114 >> 2] = $51; //@line 20623
    $115 = $ReallocAsyncCtx + 80 | 0; //@line 20624
    HEAP32[$115 >> 2] = $32; //@line 20625
    $116 = $ReallocAsyncCtx + 84 | 0; //@line 20626
    HEAP32[$116 >> 2] = $34; //@line 20627
    $117 = $ReallocAsyncCtx + 88 | 0; //@line 20628
    HEAP32[$117 >> 2] = $36; //@line 20629
    $118 = $ReallocAsyncCtx + 92 | 0; //@line 20630
    HEAP32[$118 >> 2] = $38; //@line 20631
    $119 = $ReallocAsyncCtx + 96 | 0; //@line 20632
    HEAP32[$119 >> 2] = $40; //@line 20633
    $120 = $ReallocAsyncCtx + 100 | 0; //@line 20634
    HEAP32[$120 >> 2] = $42; //@line 20635
    $121 = $ReallocAsyncCtx + 104 | 0; //@line 20636
    HEAP32[$121 >> 2] = $44; //@line 20637
    sp = STACKTOP; //@line 20638
    return;
   }
   ___async_unwind = 0; //@line 20641
   HEAP32[$ReallocAsyncCtx >> 2] = 186; //@line 20642
   $96 = $ReallocAsyncCtx + 4 | 0; //@line 20643
   HEAP32[$96 >> 2] = $2; //@line 20644
   $97 = $ReallocAsyncCtx + 8 | 0; //@line 20645
   HEAP32[$97 >> 2] = $4; //@line 20646
   $98 = $ReallocAsyncCtx + 12 | 0; //@line 20647
   HEAP32[$98 >> 2] = $6; //@line 20648
   $99 = $ReallocAsyncCtx + 16 | 0; //@line 20649
   HEAP32[$99 >> 2] = $10; //@line 20650
   $100 = $ReallocAsyncCtx + 20 | 0; //@line 20651
   HEAP32[$100 >> 2] = $8; //@line 20652
   $101 = $ReallocAsyncCtx + 24 | 0; //@line 20653
   HEAP32[$101 >> 2] = $50; //@line 20654
   $102 = $ReallocAsyncCtx + 28 | 0; //@line 20655
   HEAP32[$102 >> 2] = $12; //@line 20656
   $103 = $ReallocAsyncCtx + 32 | 0; //@line 20657
   HEAP32[$103 >> 2] = $14; //@line 20658
   $104 = $ReallocAsyncCtx + 36 | 0; //@line 20659
   HEAP32[$104 >> 2] = $16; //@line 20660
   $105 = $ReallocAsyncCtx + 40 | 0; //@line 20661
   HEAP32[$105 >> 2] = $18; //@line 20662
   $106 = $ReallocAsyncCtx + 44 | 0; //@line 20663
   HEAP32[$106 >> 2] = $20; //@line 20664
   $107 = $ReallocAsyncCtx + 48 | 0; //@line 20665
   HEAP32[$107 >> 2] = $22; //@line 20666
   $108 = $ReallocAsyncCtx + 52 | 0; //@line 20667
   HEAP32[$108 >> 2] = $24; //@line 20668
   $109 = $ReallocAsyncCtx + 56 | 0; //@line 20669
   HEAP32[$109 >> 2] = $90; //@line 20670
   $110 = $ReallocAsyncCtx + 60 | 0; //@line 20671
   HEAP32[$110 >> 2] = $26; //@line 20672
   $111 = $ReallocAsyncCtx + 64 | 0; //@line 20673
   HEAP32[$111 >> 2] = $28; //@line 20674
   $112 = $ReallocAsyncCtx + 68 | 0; //@line 20675
   HEAP32[$112 >> 2] = $30; //@line 20676
   $113 = $ReallocAsyncCtx + 72 | 0; //@line 20677
   HEAP32[$113 >> 2] = $$131; //@line 20678
   $114 = $ReallocAsyncCtx + 76 | 0; //@line 20679
   HEAP32[$114 >> 2] = $51; //@line 20680
   $115 = $ReallocAsyncCtx + 80 | 0; //@line 20681
   HEAP32[$115 >> 2] = $32; //@line 20682
   $116 = $ReallocAsyncCtx + 84 | 0; //@line 20683
   HEAP32[$116 >> 2] = $34; //@line 20684
   $117 = $ReallocAsyncCtx + 88 | 0; //@line 20685
   HEAP32[$117 >> 2] = $36; //@line 20686
   $118 = $ReallocAsyncCtx + 92 | 0; //@line 20687
   HEAP32[$118 >> 2] = $38; //@line 20688
   $119 = $ReallocAsyncCtx + 96 | 0; //@line 20689
   HEAP32[$119 >> 2] = $40; //@line 20690
   $120 = $ReallocAsyncCtx + 100 | 0; //@line 20691
   HEAP32[$120 >> 2] = $42; //@line 20692
   $121 = $ReallocAsyncCtx + 104 | 0; //@line 20693
   HEAP32[$121 >> 2] = $44; //@line 20694
   sp = STACKTOP; //@line 20695
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$149 >> 2] = 0; //@line 20700
  $154 = $148 + 44 | 0; //@line 20701
  $155 = HEAP32[$154 >> 2] | 0; //@line 20702
  if (!$155) {
   HEAP32[$14 >> 2] = 0; //@line 20705
   $186 = HEAP32[$148 >> 2] | 0; //@line 20706
   HEAP32[$16 >> 2] = 0; //@line 20707
   HEAP32[$18 >> 2] = 192; //@line 20708
   HEAP32[$20 >> 2] = $186; //@line 20709
   HEAP32[$12 >> 2] = 724; //@line 20710
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 20711
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 20712
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 20715
    $187 = $ReallocAsyncCtx13 + 4 | 0; //@line 20716
    HEAP32[$187 >> 2] = $2; //@line 20717
    $188 = $ReallocAsyncCtx13 + 8 | 0; //@line 20718
    HEAP32[$188 >> 2] = $4; //@line 20719
    $189 = $ReallocAsyncCtx13 + 12 | 0; //@line 20720
    HEAP32[$189 >> 2] = $6; //@line 20721
    $190 = $ReallocAsyncCtx13 + 16 | 0; //@line 20722
    HEAP32[$190 >> 2] = $8; //@line 20723
    $191 = $ReallocAsyncCtx13 + 20 | 0; //@line 20724
    HEAP32[$191 >> 2] = $10; //@line 20725
    $192 = $ReallocAsyncCtx13 + 24 | 0; //@line 20726
    HEAP32[$192 >> 2] = $12; //@line 20727
    $193 = $ReallocAsyncCtx13 + 28 | 0; //@line 20728
    HEAP32[$193 >> 2] = $14; //@line 20729
    $194 = $ReallocAsyncCtx13 + 32 | 0; //@line 20730
    HEAP32[$194 >> 2] = $16; //@line 20731
    $195 = $ReallocAsyncCtx13 + 36 | 0; //@line 20732
    HEAP32[$195 >> 2] = $18; //@line 20733
    $196 = $ReallocAsyncCtx13 + 40 | 0; //@line 20734
    HEAP32[$196 >> 2] = $20; //@line 20735
    $197 = $ReallocAsyncCtx13 + 44 | 0; //@line 20736
    HEAP32[$197 >> 2] = $22; //@line 20737
    $198 = $ReallocAsyncCtx13 + 48 | 0; //@line 20738
    HEAP32[$198 >> 2] = $24; //@line 20739
    $199 = $ReallocAsyncCtx13 + 52 | 0; //@line 20740
    HEAP32[$199 >> 2] = $26; //@line 20741
    $200 = $ReallocAsyncCtx13 + 56 | 0; //@line 20742
    HEAP32[$200 >> 2] = $28; //@line 20743
    $201 = $ReallocAsyncCtx13 + 60 | 0; //@line 20744
    HEAP32[$201 >> 2] = $30; //@line 20745
    $202 = $ReallocAsyncCtx13 + 64 | 0; //@line 20746
    HEAP32[$202 >> 2] = $32; //@line 20747
    $203 = $ReallocAsyncCtx13 + 68 | 0; //@line 20748
    HEAP32[$203 >> 2] = $34; //@line 20749
    $204 = $ReallocAsyncCtx13 + 72 | 0; //@line 20750
    HEAP32[$204 >> 2] = $36; //@line 20751
    $205 = $ReallocAsyncCtx13 + 76 | 0; //@line 20752
    HEAP32[$205 >> 2] = $38; //@line 20753
    $206 = $ReallocAsyncCtx13 + 80 | 0; //@line 20754
    HEAP32[$206 >> 2] = $40; //@line 20755
    $207 = $ReallocAsyncCtx13 + 84 | 0; //@line 20756
    HEAP32[$207 >> 2] = $42; //@line 20757
    $208 = $ReallocAsyncCtx13 + 88 | 0; //@line 20758
    HEAP32[$208 >> 2] = $44; //@line 20759
    $209 = $ReallocAsyncCtx13 + 92 | 0; //@line 20760
    HEAP32[$209 >> 2] = $$131; //@line 20761
    $210 = $ReallocAsyncCtx13 + 96 | 0; //@line 20762
    HEAP32[$210 >> 2] = $51; //@line 20763
    $211 = $ReallocAsyncCtx13 + 100 | 0; //@line 20764
    HEAP32[$211 >> 2] = $50; //@line 20765
    sp = STACKTOP; //@line 20766
    return;
   }
   ___async_unwind = 0; //@line 20769
   HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 20770
   $187 = $ReallocAsyncCtx13 + 4 | 0; //@line 20771
   HEAP32[$187 >> 2] = $2; //@line 20772
   $188 = $ReallocAsyncCtx13 + 8 | 0; //@line 20773
   HEAP32[$188 >> 2] = $4; //@line 20774
   $189 = $ReallocAsyncCtx13 + 12 | 0; //@line 20775
   HEAP32[$189 >> 2] = $6; //@line 20776
   $190 = $ReallocAsyncCtx13 + 16 | 0; //@line 20777
   HEAP32[$190 >> 2] = $8; //@line 20778
   $191 = $ReallocAsyncCtx13 + 20 | 0; //@line 20779
   HEAP32[$191 >> 2] = $10; //@line 20780
   $192 = $ReallocAsyncCtx13 + 24 | 0; //@line 20781
   HEAP32[$192 >> 2] = $12; //@line 20782
   $193 = $ReallocAsyncCtx13 + 28 | 0; //@line 20783
   HEAP32[$193 >> 2] = $14; //@line 20784
   $194 = $ReallocAsyncCtx13 + 32 | 0; //@line 20785
   HEAP32[$194 >> 2] = $16; //@line 20786
   $195 = $ReallocAsyncCtx13 + 36 | 0; //@line 20787
   HEAP32[$195 >> 2] = $18; //@line 20788
   $196 = $ReallocAsyncCtx13 + 40 | 0; //@line 20789
   HEAP32[$196 >> 2] = $20; //@line 20790
   $197 = $ReallocAsyncCtx13 + 44 | 0; //@line 20791
   HEAP32[$197 >> 2] = $22; //@line 20792
   $198 = $ReallocAsyncCtx13 + 48 | 0; //@line 20793
   HEAP32[$198 >> 2] = $24; //@line 20794
   $199 = $ReallocAsyncCtx13 + 52 | 0; //@line 20795
   HEAP32[$199 >> 2] = $26; //@line 20796
   $200 = $ReallocAsyncCtx13 + 56 | 0; //@line 20797
   HEAP32[$200 >> 2] = $28; //@line 20798
   $201 = $ReallocAsyncCtx13 + 60 | 0; //@line 20799
   HEAP32[$201 >> 2] = $30; //@line 20800
   $202 = $ReallocAsyncCtx13 + 64 | 0; //@line 20801
   HEAP32[$202 >> 2] = $32; //@line 20802
   $203 = $ReallocAsyncCtx13 + 68 | 0; //@line 20803
   HEAP32[$203 >> 2] = $34; //@line 20804
   $204 = $ReallocAsyncCtx13 + 72 | 0; //@line 20805
   HEAP32[$204 >> 2] = $36; //@line 20806
   $205 = $ReallocAsyncCtx13 + 76 | 0; //@line 20807
   HEAP32[$205 >> 2] = $38; //@line 20808
   $206 = $ReallocAsyncCtx13 + 80 | 0; //@line 20809
   HEAP32[$206 >> 2] = $40; //@line 20810
   $207 = $ReallocAsyncCtx13 + 84 | 0; //@line 20811
   HEAP32[$207 >> 2] = $42; //@line 20812
   $208 = $ReallocAsyncCtx13 + 88 | 0; //@line 20813
   HEAP32[$208 >> 2] = $44; //@line 20814
   $209 = $ReallocAsyncCtx13 + 92 | 0; //@line 20815
   HEAP32[$209 >> 2] = $$131; //@line 20816
   $210 = $ReallocAsyncCtx13 + 96 | 0; //@line 20817
   HEAP32[$210 >> 2] = $51; //@line 20818
   $211 = $ReallocAsyncCtx13 + 100 | 0; //@line 20819
   HEAP32[$211 >> 2] = $50; //@line 20820
   sp = STACKTOP; //@line 20821
   return;
  } else {
   $159 = HEAP32[$155 + 4 >> 2] | 0; //@line 20826
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 20827
   FUNCTION_TABLE_vii[$159 & 7]($26, $148 + 32 | 0); //@line 20828
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 20831
    $160 = $ReallocAsyncCtx4 + 4 | 0; //@line 20832
    HEAP32[$160 >> 2] = $2; //@line 20833
    $161 = $ReallocAsyncCtx4 + 8 | 0; //@line 20834
    HEAP32[$161 >> 2] = $4; //@line 20835
    $162 = $ReallocAsyncCtx4 + 12 | 0; //@line 20836
    HEAP32[$162 >> 2] = $6; //@line 20837
    $163 = $ReallocAsyncCtx4 + 16 | 0; //@line 20838
    HEAP32[$163 >> 2] = $8; //@line 20839
    $164 = $ReallocAsyncCtx4 + 20 | 0; //@line 20840
    HEAP32[$164 >> 2] = $10; //@line 20841
    $165 = $ReallocAsyncCtx4 + 24 | 0; //@line 20842
    HEAP32[$165 >> 2] = $12; //@line 20843
    $166 = $ReallocAsyncCtx4 + 28 | 0; //@line 20844
    HEAP32[$166 >> 2] = $14; //@line 20845
    $167 = $ReallocAsyncCtx4 + 32 | 0; //@line 20846
    HEAP32[$167 >> 2] = $16; //@line 20847
    $168 = $ReallocAsyncCtx4 + 36 | 0; //@line 20848
    HEAP32[$168 >> 2] = $18; //@line 20849
    $169 = $ReallocAsyncCtx4 + 40 | 0; //@line 20850
    HEAP32[$169 >> 2] = $20; //@line 20851
    $170 = $ReallocAsyncCtx4 + 44 | 0; //@line 20852
    HEAP32[$170 >> 2] = $22; //@line 20853
    $171 = $ReallocAsyncCtx4 + 48 | 0; //@line 20854
    HEAP32[$171 >> 2] = $24; //@line 20855
    $172 = $ReallocAsyncCtx4 + 52 | 0; //@line 20856
    HEAP32[$172 >> 2] = $26; //@line 20857
    $173 = $ReallocAsyncCtx4 + 56 | 0; //@line 20858
    HEAP32[$173 >> 2] = $28; //@line 20859
    $174 = $ReallocAsyncCtx4 + 60 | 0; //@line 20860
    HEAP32[$174 >> 2] = $30; //@line 20861
    $175 = $ReallocAsyncCtx4 + 64 | 0; //@line 20862
    HEAP32[$175 >> 2] = $32; //@line 20863
    $176 = $ReallocAsyncCtx4 + 68 | 0; //@line 20864
    HEAP32[$176 >> 2] = $34; //@line 20865
    $177 = $ReallocAsyncCtx4 + 72 | 0; //@line 20866
    HEAP32[$177 >> 2] = $36; //@line 20867
    $178 = $ReallocAsyncCtx4 + 76 | 0; //@line 20868
    HEAP32[$178 >> 2] = $38; //@line 20869
    $179 = $ReallocAsyncCtx4 + 80 | 0; //@line 20870
    HEAP32[$179 >> 2] = $40; //@line 20871
    $180 = $ReallocAsyncCtx4 + 84 | 0; //@line 20872
    HEAP32[$180 >> 2] = $42; //@line 20873
    $181 = $ReallocAsyncCtx4 + 88 | 0; //@line 20874
    HEAP32[$181 >> 2] = $44; //@line 20875
    $182 = $ReallocAsyncCtx4 + 92 | 0; //@line 20876
    HEAP32[$182 >> 2] = $154; //@line 20877
    $183 = $ReallocAsyncCtx4 + 96 | 0; //@line 20878
    HEAP32[$183 >> 2] = $50; //@line 20879
    $184 = $ReallocAsyncCtx4 + 100 | 0; //@line 20880
    HEAP32[$184 >> 2] = $$131; //@line 20881
    $185 = $ReallocAsyncCtx4 + 104 | 0; //@line 20882
    HEAP32[$185 >> 2] = $51; //@line 20883
    sp = STACKTOP; //@line 20884
    return;
   }
   ___async_unwind = 0; //@line 20887
   HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 20888
   $160 = $ReallocAsyncCtx4 + 4 | 0; //@line 20889
   HEAP32[$160 >> 2] = $2; //@line 20890
   $161 = $ReallocAsyncCtx4 + 8 | 0; //@line 20891
   HEAP32[$161 >> 2] = $4; //@line 20892
   $162 = $ReallocAsyncCtx4 + 12 | 0; //@line 20893
   HEAP32[$162 >> 2] = $6; //@line 20894
   $163 = $ReallocAsyncCtx4 + 16 | 0; //@line 20895
   HEAP32[$163 >> 2] = $8; //@line 20896
   $164 = $ReallocAsyncCtx4 + 20 | 0; //@line 20897
   HEAP32[$164 >> 2] = $10; //@line 20898
   $165 = $ReallocAsyncCtx4 + 24 | 0; //@line 20899
   HEAP32[$165 >> 2] = $12; //@line 20900
   $166 = $ReallocAsyncCtx4 + 28 | 0; //@line 20901
   HEAP32[$166 >> 2] = $14; //@line 20902
   $167 = $ReallocAsyncCtx4 + 32 | 0; //@line 20903
   HEAP32[$167 >> 2] = $16; //@line 20904
   $168 = $ReallocAsyncCtx4 + 36 | 0; //@line 20905
   HEAP32[$168 >> 2] = $18; //@line 20906
   $169 = $ReallocAsyncCtx4 + 40 | 0; //@line 20907
   HEAP32[$169 >> 2] = $20; //@line 20908
   $170 = $ReallocAsyncCtx4 + 44 | 0; //@line 20909
   HEAP32[$170 >> 2] = $22; //@line 20910
   $171 = $ReallocAsyncCtx4 + 48 | 0; //@line 20911
   HEAP32[$171 >> 2] = $24; //@line 20912
   $172 = $ReallocAsyncCtx4 + 52 | 0; //@line 20913
   HEAP32[$172 >> 2] = $26; //@line 20914
   $173 = $ReallocAsyncCtx4 + 56 | 0; //@line 20915
   HEAP32[$173 >> 2] = $28; //@line 20916
   $174 = $ReallocAsyncCtx4 + 60 | 0; //@line 20917
   HEAP32[$174 >> 2] = $30; //@line 20918
   $175 = $ReallocAsyncCtx4 + 64 | 0; //@line 20919
   HEAP32[$175 >> 2] = $32; //@line 20920
   $176 = $ReallocAsyncCtx4 + 68 | 0; //@line 20921
   HEAP32[$176 >> 2] = $34; //@line 20922
   $177 = $ReallocAsyncCtx4 + 72 | 0; //@line 20923
   HEAP32[$177 >> 2] = $36; //@line 20924
   $178 = $ReallocAsyncCtx4 + 76 | 0; //@line 20925
   HEAP32[$178 >> 2] = $38; //@line 20926
   $179 = $ReallocAsyncCtx4 + 80 | 0; //@line 20927
   HEAP32[$179 >> 2] = $40; //@line 20928
   $180 = $ReallocAsyncCtx4 + 84 | 0; //@line 20929
   HEAP32[$180 >> 2] = $42; //@line 20930
   $181 = $ReallocAsyncCtx4 + 88 | 0; //@line 20931
   HEAP32[$181 >> 2] = $44; //@line 20932
   $182 = $ReallocAsyncCtx4 + 92 | 0; //@line 20933
   HEAP32[$182 >> 2] = $154; //@line 20934
   $183 = $ReallocAsyncCtx4 + 96 | 0; //@line 20935
   HEAP32[$183 >> 2] = $50; //@line 20936
   $184 = $ReallocAsyncCtx4 + 100 | 0; //@line 20937
   HEAP32[$184 >> 2] = $$131; //@line 20938
   $185 = $ReallocAsyncCtx4 + 104 | 0; //@line 20939
   HEAP32[$185 >> 2] = $51; //@line 20940
   sp = STACKTOP; //@line 20941
   return;
  }
 }
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $65 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25952
 STACKTOP = STACKTOP + 288 | 0; //@line 25953
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 25953
 $3 = sp + 8 | 0; //@line 25954
 $4 = sp + 17 | 0; //@line 25955
 $5 = sp; //@line 25956
 $6 = sp + 16 | 0; //@line 25957
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $314 = ___lockfile($0) | 0; //@line 25963
 } else {
  $314 = 0; //@line 25965
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 25967
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 25971
  } else {
   $13 = $0 + 4 | 0; //@line 25973
   $14 = $0 + 100 | 0; //@line 25974
   $15 = $0 + 108 | 0; //@line 25975
   $16 = $0 + 8 | 0; //@line 25976
   $17 = $4 + 10 | 0; //@line 25977
   $18 = $4 + 33 | 0; //@line 25978
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 25979
   $$0273408 = $1; //@line 25980
   $$0283407 = 0; //@line 25980
   $$0288404 = 0; //@line 25980
   $$0305402 = 0; //@line 25980
   $20 = $11; //@line 25980
   $315 = 0; //@line 25980
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 25988
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 25991
        $52 = HEAP8[$51 >> 0] | 0; //@line 25992
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 26001
           $$2275 = $$0273408 + 2 | 0; //@line 26001
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n_727($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 26018
             $$2275 = $$0273408 + 3 | 0; //@line 26018
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 26033
           $91 = HEAP32[$90 >> 2] | 0; //@line 26034
           HEAP32[$2 >> 2] = $90 + 4; //@line 26036
           $$0293 = $91; //@line 26037
           $$2275 = $51; //@line 26037
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 26046
         $$3$lcssa = $$2275; //@line 26046
        } else {
         $$0266397 = 0; //@line 26048
         $$3396 = $$2275; //@line 26048
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 26054
          $101 = $$3396 + 1 | 0; //@line 26055
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 26061
           $$3$lcssa = $101; //@line 26061
           break;
          } else {
           $$0266397 = $100; //@line 26064
           $$3396 = $101; //@line 26064
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 26068
        $108 = $$3$lcssa + 1 | 0; //@line 26070
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 26075
         $$1306 = 0; //@line 26075
         $$4 = $108; //@line 26075
         $112 = HEAP8[$108 >> 0] | 0; //@line 26075
         $318 = 0; //@line 26075
        } else {
         $$0270 = 0; //@line 26077
         $$1306 = $$0305402; //@line 26077
         $$4 = $$3$lcssa; //@line 26077
         $112 = $106; //@line 26077
         $318 = $315; //@line 26077
        }
        $111 = $$4 + 1 | 0; //@line 26079
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 26083
          $$0268 = $114 ? -2 : -1; //@line 26087
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 26087
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 26092
          $$0268 = $117 ? 3 : 1; //@line 26096
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 26096
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 26100
          $$5 = $111; //@line 26100
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 26104
          $$5 = $111; //@line 26104
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 26108
          $$5 = $111; //@line 26108
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 26112
          $$5 = $$4; //@line 26112
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 26116
          $319 = $318; //@line 26116
          label = 136; //@line 26117
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 26122
        $122 = ($120 & 47 | 0) == 3; //@line 26124
        $$ = $122 ? $120 | 32 : $120; //@line 26126
        $$$0268 = $122 ? 1 : $$0268; //@line 26127
        $trunc = $$ & 255; //@line 26128
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 26133
          $$1284 = $$0283407; //@line 26133
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 26137
          $$1284 = $$0283407; //@line 26137
          break;
         }
        case 110:
         {
          _store_int_728($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 26143
          $$11 = $$5; //@line 26144
          $$1289 = $$0288404; //@line 26144
          $$2285 = $$0283407; //@line 26144
          $$6311 = $$1306; //@line 26144
          $316 = $318; //@line 26144
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 26149
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 26151
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 26156
            $134 = HEAPU8[$127 >> 0] | 0; //@line 26159
           } else {
            $134 = ___shgetc($0) | 0; //@line 26162
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 26174
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 26177
           HEAP32[$13 >> 2] = $140; //@line 26178
           $146 = $140; //@line 26180
          }
          $$1267 = $$0266$lcssa; //@line 26187
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 26187
         }
        }
        ___shlim($0, $$1267); //@line 26190
        $148 = HEAP32[$13 >> 2] | 0; //@line 26191
        $149 = HEAP32[$14 >> 2] | 0; //@line 26192
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 26196
         $155 = $149; //@line 26197
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 26202
          $319 = $318; //@line 26202
          label = 136; //@line 26203
          break L6;
         }
         $155 = HEAP32[$14 >> 2] | 0; //@line 26207
        }
        if ($155 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 26213
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 26218
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 26224
             HEAP8[$4 >> 0] = 0; //@line 26225
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 26227
              HEAP8[$17 >> 0] = 0; //@line 26228
              HEAP8[$17 + 1 >> 0] = 0; //@line 26228
              HEAP8[$17 + 2 >> 0] = 0; //@line 26228
              HEAP8[$17 + 3 >> 0] = 0; //@line 26228
              HEAP8[$17 + 4 >> 0] = 0; //@line 26228
              $$9 = $$5; //@line 26229
             } else {
              $$9 = $$5; //@line 26231
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 26234
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 26236
             $$0292 = $164 & 1; //@line 26238
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 26239
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 26240
             HEAP8[$4 >> 0] = 0; //@line 26241
             $166 = HEAP8[$$6 >> 0] | 0; //@line 26242
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 26245
               $$sink330 = 46; //@line 26245
               label = 65; //@line 26246
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 26250
               $$sink330 = 94; //@line 26250
               label = 65; //@line 26251
               break;
              }
             default:
              {
               $$7 = $$6; //@line 26255
               $168 = $166; //@line 26255
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 26260
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 26264
               $$7$ph = $$6$pn + 1 | 0; //@line 26265
               $$7 = $$7$ph; //@line 26267
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 26267
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 26272
                 $319 = $318; //@line 26272
                 label = 136; //@line 26273
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 26278
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 26283
                 $170 = HEAP8[$169 >> 0] | 0; //@line 26284
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 26287
                   $183 = 45; //@line 26287
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 26295
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 26300
                  $$0286399 = $172 & 255; //@line 26301
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 26303
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 26305
                   $179 = HEAP8[$169 >> 0] | 0; //@line 26306
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 26312
                  $183 = $179; //@line 26312
                 } else {
                  $$8 = $169; //@line 26317
                  $183 = $170; //@line 26317
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 26322
                 $183 = $168; //@line 26322
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 26328
              $$sink330 = ($183 & 255) + 1 | 0; //@line 26328
              label = 65; //@line 26329
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 26334
           $187 = ($$$0268 | 0) == 1; //@line 26335
           $188 = ($$0270 | 0) != 0; //@line 26336
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 26341
              if (!$190) {
               $$7312 = 0; //@line 26344
               $319 = 0; //@line 26344
               label = 136; //@line 26345
               break L6;
              } else {
               $321 = $190; //@line 26348
              }
             } else {
              $321 = $$0293; //@line 26351
             }
             HEAP32[$3 >> 2] = 0; //@line 26353
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 26354
             $$0276$ph = $186; //@line 26355
             $$0278$ph = 0; //@line 26355
             $$ph = $321; //@line 26355
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 26357
              $$0278$ph336 = $$0278$ph; //@line 26358
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 26361
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 26366
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 26369
                } else {
                 $201 = ___shgetc($0) | 0; //@line 26372
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 26382
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 26386
                  $319 = $$ph; //@line 26386
                  label = 136; //@line 26387
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 26400
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 26405
                $$1279 = $$0278$ph336 + 1 | 0; //@line 26406
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 26413
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 26417
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 26419
              if (!$213) {
               $$7312 = 0; //@line 26422
               $319 = $$ph; //@line 26422
               label = 136; //@line 26423
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 26426
               $$0276$ph = $211; //@line 26426
               $$ph = $213; //@line 26426
               $$0278$ph = $$0278$ph$phi; //@line 26426
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 26432
              $319 = $$ph; //@line 26432
              label = 136; //@line 26433
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 26436
              $$4309 = 0; //@line 26436
              $$5299 = $$ph; //@line 26436
              $322 = $$ph; //@line 26436
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 26440
              if (!$217) {
               $$7312 = 0; //@line 26443
               $319 = 0; //@line 26443
               label = 136; //@line 26444
               break L6;
              } else {
               $$1277$ph = $186; //@line 26447
               $$2280$ph = 0; //@line 26447
               $$2307$ph = $217; //@line 26447
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 26450
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 26452
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 26457
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 26460
                } else {
                 $227 = ___shgetc($0) | 0; //@line 26463
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 26470
                 $$4309 = $$2307$ph; //@line 26470
                 $$5299 = 0; //@line 26470
                 $322 = 0; //@line 26470
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 26476
                $$2280 = $$2280 + 1 | 0; //@line 26474
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 26485
               $236 = _realloc($$2307$ph, $235) | 0; //@line 26486
               if (!$236) {
                $$7312 = $$2307$ph; //@line 26489
                $319 = 0; //@line 26489
                label = 136; //@line 26490
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 26493
                $$1277$ph = $235; //@line 26493
                $$2307$ph = $236; //@line 26493
                $$2280$ph = $$2280$ph$phi; //@line 26493
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 26500
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 26505
                $262 = HEAPU8[$254 >> 0] | 0; //@line 26508
               } else {
                $262 = ___shgetc($0) | 0; //@line 26511
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 26518
                $$4309 = 0; //@line 26518
                $$5299 = 0; //@line 26518
                $322 = 0; //@line 26518
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 26523
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 26526
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 26531
               $247 = HEAPU8[$239 >> 0] | 0; //@line 26534
              } else {
               $247 = ___shgetc($0) | 0; //@line 26537
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 26544
               $$4309 = $$0293; //@line 26544
               $$5299 = 0; //@line 26544
               $322 = 0; //@line 26544
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 26550
              $$3281 = $$3281 + 1 | 0; //@line 26551
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 26559
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 26562
            HEAP32[$13 >> 2] = $269; //@line 26563
            $274 = $269; //@line 26565
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 26570
           if (!$275) {
            $$2 = $$0270; //@line 26573
            $$2290 = $$0288404; //@line 26573
            $$9314 = $$4309; //@line 26573
            $312 = $322; //@line 26573
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 26580
            $$2290 = $$0288404; //@line 26580
            $$9314 = $$4309; //@line 26580
            $312 = $322; //@line 26580
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 26586
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 26589
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 26595
            $$5310 = $$4309; //@line 26595
            $320 = $322; //@line 26595
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 26600
            }
            if (!$$4309) {
             $$10 = $$9; //@line 26604
             $$5310 = 0; //@line 26604
             $320 = $322; //@line 26604
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 26608
            $$10 = $$9; //@line 26609
            $$5310 = $$4309; //@line 26609
            $320 = $322; //@line 26609
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 26614
           label = 124; //@line 26615
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 26619
           label = 124; //@line 26620
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 26624
           label = 124; //@line 26625
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 26629
           label = 124; //@line 26630
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 26634
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 26641
            $$2290 = $$0288404; //@line 26641
            $$9314 = $$1306; //@line 26641
            $312 = $318; //@line 26641
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 26646
            $$5310 = $$1306; //@line 26646
            $320 = $318; //@line 26646
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 26651
              $$10 = $$5; //@line 26652
              $$5310 = $$1306; //@line 26652
              $320 = $318; //@line 26652
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 26657
              $$10 = $$5; //@line 26658
              $$5310 = $$1306; //@line 26658
              $320 = $318; //@line 26658
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 26663
              $$10 = $$5; //@line 26664
              $$5310 = $$1306; //@line 26664
              $320 = $318; //@line 26664
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 26669
              $$5310 = $$1306; //@line 26669
              $320 = $318; //@line 26669
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 26677
           $$5310 = $$1306; //@line 26677
           $320 = $318; //@line 26677
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 26683
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 26684
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 26692
           $$2290 = $$0288404; //@line 26692
           $$9314 = $$1306; //@line 26692
           $312 = $318; //@line 26692
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 26700
           $$10 = $$5; //@line 26701
           $$5310 = $$1306; //@line 26701
           $320 = $318; //@line 26701
           break;
          } else {
           _store_int_728($$0293, $$$0268, $282, tempRet0); //@line 26704
           $$10 = $$5; //@line 26705
           $$5310 = $$1306; //@line 26705
           $320 = $318; //@line 26705
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 26719
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 26719
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 26719
        $$6311 = $$5310; //@line 26719
        $316 = $320; //@line 26719
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 26724
      ___shlim($0, 0); //@line 26725
      $55 = HEAP32[$13 >> 2] | 0; //@line 26726
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 26731
       $65 = HEAPU8[$55 >> 0] | 0; //@line 26734
      } else {
       $65 = ___shgetc($0) | 0; //@line 26737
      }
      if (($65 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 26743
       break L6;
      }
      $$11 = $54; //@line 26747
      $$1289 = $$0288404; //@line 26747
      $$2285 = $$0283407 + 1 | 0; //@line 26747
      $$6311 = $$0305402; //@line 26747
      $316 = $315; //@line 26747
     } else {
      $$1274 = $$0273408; //@line 26749
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 26751
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 26759
       }
      }
      ___shlim($0, 0); //@line 26762
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 26764
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 26769
        $35 = HEAPU8[$28 >> 0] | 0; //@line 26772
       } else {
        $35 = ___shgetc($0) | 0; //@line 26775
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 26787
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 26790
       HEAP32[$13 >> 2] = $41; //@line 26791
       $47 = $41; //@line 26793
      }
      $$11 = $$1274; //@line 26800
      $$1289 = $$0288404; //@line 26800
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 26800
      $$6311 = $$0305402; //@line 26800
      $316 = $315; //@line 26800
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 26803
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 26804
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 26807
     break L4;
    } else {
     $$0283407 = $$2285; //@line 26810
     $$0288404 = $$1289; //@line 26810
     $$0305402 = $$6311; //@line 26810
     $315 = $316; //@line 26810
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 26819
    }
    if (($$0288404 | 0) != 0 | ($65 | 0) > -1) {
     $$3291 = $$0288404; //@line 26825
     break;
    } else {
     $$1271 = 0; //@line 26828
     $$8313 = $$0305402; //@line 26828
     $317 = $315; //@line 26828
     label = 137; //@line 26829
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 26835
     $$8313 = $$7312; //@line 26835
     $317 = $319; //@line 26835
     label = 137; //@line 26836
    } else {
     $$2 = $$0270; //@line 26838
     $$2290 = $$0288404; //@line 26838
     $$9314 = $$7312; //@line 26838
     $312 = $319; //@line 26838
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 26842
    $$2290 = -1; //@line 26842
    $$9314 = $$8313; //@line 26842
    $312 = $317; //@line 26842
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 26846
   } else {
    _free($$9314); //@line 26848
    _free($312); //@line 26849
    $$3291 = $$2290; //@line 26850
   }
  }
 } while (0);
 if ($314 | 0) {
  ___unlockfile($0); //@line 26856
 }
 STACKTOP = sp; //@line 26858
 return $$3291 | 0; //@line 26858
}
function __ZL29nsapi_dns_query_async_timeoutv() {
 var $$02972 = 0, $$03071 = 0, $$131 = 0, $$sroa_idx5$i$i = 0, $$sroa_idx5$i$i43 = 0, $0 = 0, $1 = 0, $10 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $165 = 0, $168 = 0, $19 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $200 = 0, $201 = 0, $205 = 0, $232 = 0, $233 = 0, $234 = 0, $260 = 0, $263 = 0, $289 = 0, $292 = 0, $3 = 0, $322 = 0, $323 = 0, $327 = 0, $331 = 0, $332 = 0, $334 = 0, $338 = 0, $343 = 0, $346 = 0, $349 = 0, $352 = 0, $4 = 0, $5 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14815
 STACKTOP = STACKTOP + 96 | 0; //@line 14816
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 14816
 $0 = sp + 80 | 0; //@line 14817
 $1 = sp + 64 | 0; //@line 14818
 $2 = sp + 48 | 0; //@line 14819
 $3 = sp + 32 | 0; //@line 14820
 $4 = sp + 16 | 0; //@line 14821
 $5 = sp; //@line 14822
 $6 = $2 + 12 | 0; //@line 14823
 $7 = $3 + 8 | 0; //@line 14824
 $$sroa_idx5$i$i43 = $3 + 4 | 0; //@line 14825
 $8 = $3 + 12 | 0; //@line 14826
 $9 = $0 + 12 | 0; //@line 14827
 $10 = $1 + 8 | 0; //@line 14828
 $$sroa_idx5$i$i = $1 + 4 | 0; //@line 14829
 $11 = $1 + 12 | 0; //@line 14830
 $$02972 = 0; //@line 14831
 $$03071 = 0; //@line 14831
 L1 : while (1) {
  $13 = 10036 + ($$02972 << 2) | 0; //@line 14833
  $14 = HEAP32[$13 >> 2] | 0; //@line 14834
  do {
   if (!$14) {
    $$131 = $$03071; //@line 14838
   } else {
    if ((HEAP32[$14 + 88 >> 2] | 0) == 2) {
     $19 = HEAP32[$14 >> 2] | 0; //@line 14844
     $AsyncCtx35 = _emscripten_alloc_async_context(100, sp) | 0; //@line 14845
     __ZL28nsapi_dns_query_async_deletei($19); //@line 14846
     if (___async) {
      label = 6; //@line 14849
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx35 | 0); //@line 14852
     $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 14853
     __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 14854
     if (___async) {
      label = 8; //@line 14857
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx38 | 0); //@line 14860
     $$131 = $$03071; //@line 14861
     break;
    }
    $68 = $14 + 72 | 0; //@line 14864
    $69 = HEAP32[$68 >> 2] | 0; //@line 14865
    if ($69 >>> 0 > 100) {
     HEAP32[$68 >> 2] = $69 + -100; //@line 14869
    } else {
     if ((HEAP32[$14 + 4 >> 2] | 0) == -3019) {
      HEAP32[$14 + 76 >> 2] = 0; //@line 14876
      $76 = $14 + 44 | 0; //@line 14877
      $77 = HEAP32[$76 >> 2] | 0; //@line 14878
      if (!$77) {
       $108 = 0; //@line 14881
       $110 = $14; //@line 14881
      } else {
       $81 = HEAP32[$77 + 4 >> 2] | 0; //@line 14885
       $AsyncCtx = _emscripten_alloc_async_context(108, sp) | 0; //@line 14886
       FUNCTION_TABLE_vii[$81 & 7]($0, $14 + 32 | 0); //@line 14887
       if (___async) {
        label = 15; //@line 14890
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 14893
       $108 = HEAP32[$76 >> 2] | 0; //@line 14896
       $110 = HEAP32[$13 >> 2] | 0; //@line 14896
      }
      HEAP32[$9 >> 2] = $108; //@line 14898
      $109 = HEAP32[$110 >> 2] | 0; //@line 14899
      HEAP32[$10 >> 2] = 0; //@line 14900
      HEAP32[$1 >> 2] = 187; //@line 14901
      HEAP32[$$sroa_idx5$i$i >> 2] = $109; //@line 14902
      HEAP32[$11 >> 2] = 724; //@line 14903
      $AsyncCtx47 = _emscripten_alloc_async_context(104, sp) | 0; //@line 14904
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 14905
      if (___async) {
       label = 18; //@line 14908
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx47 | 0); //@line 14911
      $136 = HEAP32[$11 >> 2] | 0; //@line 14912
      if ($136 | 0) {
       $139 = HEAP32[$136 + 8 >> 2] | 0; //@line 14916
       $AsyncCtx3 = _emscripten_alloc_async_context(104, sp) | 0; //@line 14917
       FUNCTION_TABLE_vi[$139 & 511]($1); //@line 14918
       if (___async) {
        label = 21; //@line 14921
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14924
      }
      $165 = HEAP32[$9 >> 2] | 0; //@line 14926
      if ($165 | 0) {
       $168 = HEAP32[$165 + 8 >> 2] | 0; //@line 14930
       $AsyncCtx7 = _emscripten_alloc_async_context(104, sp) | 0; //@line 14931
       FUNCTION_TABLE_vi[$168 & 511]($0); //@line 14932
       if (___async) {
        label = 25; //@line 14935
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14938
      }
     }
    }
    $194 = HEAP32[$13 >> 2] | 0; //@line 14942
    $195 = $194 + 76 | 0; //@line 14943
    $196 = HEAP32[$195 >> 2] | 0; //@line 14944
    do {
     if ($196 | 0) {
      if ($196 >>> 0 > 100) {
       HEAP32[$195 >> 2] = $196 + -100; //@line 14951
       break;
      }
      HEAP32[$195 >> 2] = 0; //@line 14954
      $200 = $194 + 44 | 0; //@line 14955
      $201 = HEAP32[$200 >> 2] | 0; //@line 14956
      if (!$201) {
       $232 = 0; //@line 14959
       $234 = $194; //@line 14959
      } else {
       $205 = HEAP32[$201 + 4 >> 2] | 0; //@line 14963
       $AsyncCtx11 = _emscripten_alloc_async_context(108, sp) | 0; //@line 14964
       FUNCTION_TABLE_vii[$205 & 7]($2, $194 + 32 | 0); //@line 14965
       if (___async) {
        label = 32; //@line 14968
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 14971
       $232 = HEAP32[$200 >> 2] | 0; //@line 14974
       $234 = HEAP32[$13 >> 2] | 0; //@line 14974
      }
      HEAP32[$6 >> 2] = $232; //@line 14976
      $233 = HEAP32[$234 >> 2] | 0; //@line 14977
      HEAP32[$7 >> 2] = 0; //@line 14978
      HEAP32[$3 >> 2] = 192; //@line 14979
      HEAP32[$$sroa_idx5$i$i43 >> 2] = $233; //@line 14980
      HEAP32[$8 >> 2] = 724; //@line 14981
      $AsyncCtx44 = _emscripten_alloc_async_context(104, sp) | 0; //@line 14982
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 0, $3) | 0; //@line 14983
      if (___async) {
       label = 35; //@line 14986
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx44 | 0); //@line 14989
      $260 = HEAP32[$8 >> 2] | 0; //@line 14990
      if ($260 | 0) {
       $263 = HEAP32[$260 + 8 >> 2] | 0; //@line 14994
       $AsyncCtx15 = _emscripten_alloc_async_context(104, sp) | 0; //@line 14995
       FUNCTION_TABLE_vi[$263 & 511]($3); //@line 14996
       if (___async) {
        label = 38; //@line 14999
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15002
      }
      $289 = HEAP32[$6 >> 2] | 0; //@line 15004
      if ($289 | 0) {
       $292 = HEAP32[$289 + 8 >> 2] | 0; //@line 15008
       $AsyncCtx19 = _emscripten_alloc_async_context(104, sp) | 0; //@line 15009
       FUNCTION_TABLE_vi[$292 & 511]($2); //@line 15010
       if (___async) {
        label = 42; //@line 15013
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx19 | 0); //@line 15016
      }
     }
    } while (0);
    if (!$$03071) {
     $$131 = HEAP32[$13 >> 2] | 0; //@line 15023
    } else {
     $$131 = $$03071; //@line 15025
    }
   }
  } while (0);
  if (($$02972 | 0) < 4) {
   $$02972 = $$02972 + 1 | 0; //@line 15032
   $$03071 = $$131; //@line 15032
  } else {
   label = 2; //@line 15034
   break;
  }
 }
 switch (label | 0) {
 case 2:
  {
   if (!$$131) {
    HEAP8[10976] = 0; //@line 15042
    STACKTOP = sp; //@line 15043
    return;
   }
   $322 = $$131 + 44 | 0; //@line 15045
   $323 = HEAP32[$322 >> 2] | 0; //@line 15046
   do {
    if (!$323) {
     $332 = 0; //@line 15050
    } else {
     $327 = HEAP32[$323 + 4 >> 2] | 0; //@line 15054
     $AsyncCtx23 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15055
     FUNCTION_TABLE_vii[$327 & 7]($4, $$131 + 32 | 0); //@line 15056
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 196; //@line 15059
      HEAP32[$AsyncCtx23 + 4 >> 2] = $322; //@line 15061
      HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 15063
      HEAP32[$AsyncCtx23 + 12 >> 2] = $5; //@line 15065
      sp = STACKTOP; //@line 15066
      STACKTOP = sp; //@line 15067
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 15069
      $332 = HEAP32[$322 >> 2] | 0; //@line 15071
      break;
     }
    }
   } while (0);
   $331 = $4 + 12 | 0; //@line 15076
   HEAP32[$331 >> 2] = $332; //@line 15077
   $334 = $5 + 4 | 0; //@line 15079
   HEAP32[$334 >> 2] = 0; //@line 15081
   HEAP32[$334 + 4 >> 2] = 0; //@line 15084
   HEAP32[$5 >> 2] = 3; //@line 15085
   $338 = $5 + 12 | 0; //@line 15086
   HEAP32[$338 >> 2] = 712; //@line 15087
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15088
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $5) | 0; //@line 15089
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 197; //@line 15092
    HEAP32[$AsyncCtx41 + 4 >> 2] = $338; //@line 15094
    HEAP32[$AsyncCtx41 + 8 >> 2] = $331; //@line 15096
    HEAP32[$AsyncCtx41 + 12 >> 2] = $5; //@line 15098
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 15100
    sp = STACKTOP; //@line 15101
    STACKTOP = sp; //@line 15102
    return;
   }
   _emscripten_free_async_context($AsyncCtx41 | 0); //@line 15104
   $343 = HEAP32[$338 >> 2] | 0; //@line 15105
   do {
    if ($343 | 0) {
     $346 = HEAP32[$343 + 8 >> 2] | 0; //@line 15110
     $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15111
     FUNCTION_TABLE_vi[$346 & 511]($5); //@line 15112
     if (___async) {
      HEAP32[$AsyncCtx27 >> 2] = 198; //@line 15115
      HEAP32[$AsyncCtx27 + 4 >> 2] = $331; //@line 15117
      HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 15119
      sp = STACKTOP; //@line 15120
      STACKTOP = sp; //@line 15121
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 15123
      break;
     }
    }
   } while (0);
   $349 = HEAP32[$331 >> 2] | 0; //@line 15128
   if (!$349) {
    STACKTOP = sp; //@line 15131
    return;
   }
   $352 = HEAP32[$349 + 8 >> 2] | 0; //@line 15134
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15135
   FUNCTION_TABLE_vi[$352 & 511]($4); //@line 15136
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 199; //@line 15139
    sp = STACKTOP; //@line 15140
    STACKTOP = sp; //@line 15141
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 15143
   STACKTOP = sp; //@line 15144
   return;
  }
 case 6:
  {
   HEAP32[$AsyncCtx35 >> 2] = 184; //@line 15148
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 15150
   HEAP32[$AsyncCtx35 + 8 >> 2] = $9; //@line 15152
   HEAP32[$AsyncCtx35 + 12 >> 2] = $1; //@line 15154
   HEAP32[$AsyncCtx35 + 16 >> 2] = $4; //@line 15156
   HEAP32[$AsyncCtx35 + 20 >> 2] = $11; //@line 15158
   HEAP32[$AsyncCtx35 + 24 >> 2] = $8; //@line 15160
   HEAP32[$AsyncCtx35 + 28 >> 2] = $6; //@line 15162
   HEAP32[$AsyncCtx35 + 32 >> 2] = $7; //@line 15164
   HEAP32[$AsyncCtx35 + 36 >> 2] = $3; //@line 15166
   HEAP32[$AsyncCtx35 + 40 >> 2] = $$sroa_idx5$i$i43; //@line 15168
   HEAP32[$AsyncCtx35 + 44 >> 2] = $2; //@line 15170
   HEAP32[$AsyncCtx35 + 48 >> 2] = $3; //@line 15172
   HEAP32[$AsyncCtx35 + 52 >> 2] = $2; //@line 15174
   HEAP32[$AsyncCtx35 + 56 >> 2] = $6; //@line 15176
   HEAP32[$AsyncCtx35 + 60 >> 2] = $3; //@line 15178
   HEAP32[$AsyncCtx35 + 64 >> 2] = $5; //@line 15180
   HEAP32[$AsyncCtx35 + 68 >> 2] = $9; //@line 15182
   HEAP32[$AsyncCtx35 + 72 >> 2] = $10; //@line 15184
   HEAP32[$AsyncCtx35 + 76 >> 2] = $1; //@line 15186
   HEAP32[$AsyncCtx35 + 80 >> 2] = $$sroa_idx5$i$i; //@line 15188
   HEAP32[$AsyncCtx35 + 84 >> 2] = $0; //@line 15190
   HEAP32[$AsyncCtx35 + 88 >> 2] = $1; //@line 15192
   HEAP32[$AsyncCtx35 + 92 >> 2] = $$03071; //@line 15194
   HEAP32[$AsyncCtx35 + 96 >> 2] = $$02972; //@line 15196
   sp = STACKTOP; //@line 15197
   STACKTOP = sp; //@line 15198
   return;
  }
 case 8:
  {
   HEAP32[$AsyncCtx38 >> 2] = 185; //@line 15202
   HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 15204
   HEAP32[$AsyncCtx38 + 8 >> 2] = $9; //@line 15206
   HEAP32[$AsyncCtx38 + 12 >> 2] = $1; //@line 15208
   HEAP32[$AsyncCtx38 + 16 >> 2] = $4; //@line 15210
   HEAP32[$AsyncCtx38 + 20 >> 2] = $11; //@line 15212
   HEAP32[$AsyncCtx38 + 24 >> 2] = $8; //@line 15214
   HEAP32[$AsyncCtx38 + 28 >> 2] = $6; //@line 15216
   HEAP32[$AsyncCtx38 + 32 >> 2] = $7; //@line 15218
   HEAP32[$AsyncCtx38 + 36 >> 2] = $3; //@line 15220
   HEAP32[$AsyncCtx38 + 40 >> 2] = $$sroa_idx5$i$i43; //@line 15222
   HEAP32[$AsyncCtx38 + 44 >> 2] = $2; //@line 15224
   HEAP32[$AsyncCtx38 + 48 >> 2] = $3; //@line 15226
   HEAP32[$AsyncCtx38 + 52 >> 2] = $2; //@line 15228
   HEAP32[$AsyncCtx38 + 56 >> 2] = $6; //@line 15230
   HEAP32[$AsyncCtx38 + 60 >> 2] = $3; //@line 15232
   HEAP32[$AsyncCtx38 + 64 >> 2] = $5; //@line 15234
   HEAP32[$AsyncCtx38 + 68 >> 2] = $9; //@line 15236
   HEAP32[$AsyncCtx38 + 72 >> 2] = $10; //@line 15238
   HEAP32[$AsyncCtx38 + 76 >> 2] = $1; //@line 15240
   HEAP32[$AsyncCtx38 + 80 >> 2] = $$sroa_idx5$i$i; //@line 15242
   HEAP32[$AsyncCtx38 + 84 >> 2] = $0; //@line 15244
   HEAP32[$AsyncCtx38 + 88 >> 2] = $1; //@line 15246
   HEAP32[$AsyncCtx38 + 92 >> 2] = $$03071; //@line 15248
   HEAP32[$AsyncCtx38 + 96 >> 2] = $$02972; //@line 15250
   sp = STACKTOP; //@line 15251
   STACKTOP = sp; //@line 15252
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx >> 2] = 186; //@line 15256
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15258
   HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 15260
   HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 15262
   HEAP32[$AsyncCtx + 16 >> 2] = $11; //@line 15264
   HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 15266
   HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 15268
   HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 15270
   HEAP32[$AsyncCtx + 32 >> 2] = $6; //@line 15272
   HEAP32[$AsyncCtx + 36 >> 2] = $7; //@line 15274
   HEAP32[$AsyncCtx + 40 >> 2] = $3; //@line 15276
   HEAP32[$AsyncCtx + 44 >> 2] = $$sroa_idx5$i$i43; //@line 15278
   HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 15280
   HEAP32[$AsyncCtx + 52 >> 2] = $3; //@line 15282
   HEAP32[$AsyncCtx + 56 >> 2] = $76; //@line 15284
   HEAP32[$AsyncCtx + 60 >> 2] = $2; //@line 15286
   HEAP32[$AsyncCtx + 64 >> 2] = $6; //@line 15288
   HEAP32[$AsyncCtx + 68 >> 2] = $3; //@line 15290
   HEAP32[$AsyncCtx + 72 >> 2] = $$03071; //@line 15292
   HEAP32[$AsyncCtx + 76 >> 2] = $$02972; //@line 15294
   HEAP32[$AsyncCtx + 80 >> 2] = $5; //@line 15296
   HEAP32[$AsyncCtx + 84 >> 2] = $9; //@line 15298
   HEAP32[$AsyncCtx + 88 >> 2] = $10; //@line 15300
   HEAP32[$AsyncCtx + 92 >> 2] = $1; //@line 15302
   HEAP32[$AsyncCtx + 96 >> 2] = $$sroa_idx5$i$i; //@line 15304
   HEAP32[$AsyncCtx + 100 >> 2] = $0; //@line 15306
   HEAP32[$AsyncCtx + 104 >> 2] = $1; //@line 15308
   sp = STACKTOP; //@line 15309
   STACKTOP = sp; //@line 15310
   return;
  }
 case 18:
  {
   HEAP32[$AsyncCtx47 >> 2] = 188; //@line 15314
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 15316
   HEAP32[$AsyncCtx47 + 8 >> 2] = $9; //@line 15318
   HEAP32[$AsyncCtx47 + 12 >> 2] = $1; //@line 15320
   HEAP32[$AsyncCtx47 + 16 >> 2] = $11; //@line 15322
   HEAP32[$AsyncCtx47 + 20 >> 2] = $4; //@line 15324
   HEAP32[$AsyncCtx47 + 24 >> 2] = $8; //@line 15326
   HEAP32[$AsyncCtx47 + 28 >> 2] = $6; //@line 15328
   HEAP32[$AsyncCtx47 + 32 >> 2] = $7; //@line 15330
   HEAP32[$AsyncCtx47 + 36 >> 2] = $3; //@line 15332
   HEAP32[$AsyncCtx47 + 40 >> 2] = $$sroa_idx5$i$i43; //@line 15334
   HEAP32[$AsyncCtx47 + 44 >> 2] = $2; //@line 15336
   HEAP32[$AsyncCtx47 + 48 >> 2] = $3; //@line 15338
   HEAP32[$AsyncCtx47 + 52 >> 2] = $2; //@line 15340
   HEAP32[$AsyncCtx47 + 56 >> 2] = $6; //@line 15342
   HEAP32[$AsyncCtx47 + 60 >> 2] = $3; //@line 15344
   HEAP32[$AsyncCtx47 + 64 >> 2] = $5; //@line 15346
   HEAP32[$AsyncCtx47 + 68 >> 2] = $9; //@line 15348
   HEAP32[$AsyncCtx47 + 72 >> 2] = $10; //@line 15350
   HEAP32[$AsyncCtx47 + 76 >> 2] = $1; //@line 15352
   HEAP32[$AsyncCtx47 + 80 >> 2] = $$sroa_idx5$i$i; //@line 15354
   HEAP32[$AsyncCtx47 + 84 >> 2] = $0; //@line 15356
   HEAP32[$AsyncCtx47 + 88 >> 2] = $1; //@line 15358
   HEAP32[$AsyncCtx47 + 92 >> 2] = $13; //@line 15360
   HEAP32[$AsyncCtx47 + 96 >> 2] = $$03071; //@line 15362
   HEAP32[$AsyncCtx47 + 100 >> 2] = $$02972; //@line 15364
   sp = STACKTOP; //@line 15365
   STACKTOP = sp; //@line 15366
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx3 >> 2] = 189; //@line 15370
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15372
   HEAP32[$AsyncCtx3 + 8 >> 2] = $9; //@line 15374
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15376
   HEAP32[$AsyncCtx3 + 16 >> 2] = $4; //@line 15378
   HEAP32[$AsyncCtx3 + 20 >> 2] = $11; //@line 15380
   HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 15382
   HEAP32[$AsyncCtx3 + 28 >> 2] = $8; //@line 15384
   HEAP32[$AsyncCtx3 + 32 >> 2] = $6; //@line 15386
   HEAP32[$AsyncCtx3 + 36 >> 2] = $7; //@line 15388
   HEAP32[$AsyncCtx3 + 40 >> 2] = $3; //@line 15390
   HEAP32[$AsyncCtx3 + 44 >> 2] = $$sroa_idx5$i$i43; //@line 15392
   HEAP32[$AsyncCtx3 + 48 >> 2] = $2; //@line 15394
   HEAP32[$AsyncCtx3 + 52 >> 2] = $3; //@line 15396
   HEAP32[$AsyncCtx3 + 56 >> 2] = $2; //@line 15398
   HEAP32[$AsyncCtx3 + 60 >> 2] = $6; //@line 15400
   HEAP32[$AsyncCtx3 + 64 >> 2] = $3; //@line 15402
   HEAP32[$AsyncCtx3 + 68 >> 2] = $5; //@line 15404
   HEAP32[$AsyncCtx3 + 72 >> 2] = $9; //@line 15406
   HEAP32[$AsyncCtx3 + 76 >> 2] = $10; //@line 15408
   HEAP32[$AsyncCtx3 + 80 >> 2] = $1; //@line 15410
   HEAP32[$AsyncCtx3 + 84 >> 2] = $$sroa_idx5$i$i; //@line 15412
   HEAP32[$AsyncCtx3 + 88 >> 2] = $0; //@line 15414
   HEAP32[$AsyncCtx3 + 92 >> 2] = $1; //@line 15416
   HEAP32[$AsyncCtx3 + 96 >> 2] = $$03071; //@line 15418
   HEAP32[$AsyncCtx3 + 100 >> 2] = $$02972; //@line 15420
   sp = STACKTOP; //@line 15421
   STACKTOP = sp; //@line 15422
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx7 >> 2] = 190; //@line 15426
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 15428
   HEAP32[$AsyncCtx7 + 8 >> 2] = $9; //@line 15430
   HEAP32[$AsyncCtx7 + 12 >> 2] = $1; //@line 15432
   HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 15434
   HEAP32[$AsyncCtx7 + 20 >> 2] = $11; //@line 15436
   HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 15438
   HEAP32[$AsyncCtx7 + 28 >> 2] = $8; //@line 15440
   HEAP32[$AsyncCtx7 + 32 >> 2] = $6; //@line 15442
   HEAP32[$AsyncCtx7 + 36 >> 2] = $7; //@line 15444
   HEAP32[$AsyncCtx7 + 40 >> 2] = $3; //@line 15446
   HEAP32[$AsyncCtx7 + 44 >> 2] = $$sroa_idx5$i$i43; //@line 15448
   HEAP32[$AsyncCtx7 + 48 >> 2] = $2; //@line 15450
   HEAP32[$AsyncCtx7 + 52 >> 2] = $3; //@line 15452
   HEAP32[$AsyncCtx7 + 56 >> 2] = $2; //@line 15454
   HEAP32[$AsyncCtx7 + 60 >> 2] = $6; //@line 15456
   HEAP32[$AsyncCtx7 + 64 >> 2] = $3; //@line 15458
   HEAP32[$AsyncCtx7 + 68 >> 2] = $5; //@line 15460
   HEAP32[$AsyncCtx7 + 72 >> 2] = $9; //@line 15462
   HEAP32[$AsyncCtx7 + 76 >> 2] = $10; //@line 15464
   HEAP32[$AsyncCtx7 + 80 >> 2] = $1; //@line 15466
   HEAP32[$AsyncCtx7 + 84 >> 2] = $$sroa_idx5$i$i; //@line 15468
   HEAP32[$AsyncCtx7 + 88 >> 2] = $0; //@line 15470
   HEAP32[$AsyncCtx7 + 92 >> 2] = $1; //@line 15472
   HEAP32[$AsyncCtx7 + 96 >> 2] = $$03071; //@line 15474
   HEAP32[$AsyncCtx7 + 100 >> 2] = $$02972; //@line 15476
   sp = STACKTOP; //@line 15477
   STACKTOP = sp; //@line 15478
   return;
  }
 case 32:
  {
   HEAP32[$AsyncCtx11 >> 2] = 191; //@line 15482
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15484
   HEAP32[$AsyncCtx11 + 8 >> 2] = $9; //@line 15486
   HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 15488
   HEAP32[$AsyncCtx11 + 16 >> 2] = $4; //@line 15490
   HEAP32[$AsyncCtx11 + 20 >> 2] = $11; //@line 15492
   HEAP32[$AsyncCtx11 + 24 >> 2] = $8; //@line 15494
   HEAP32[$AsyncCtx11 + 28 >> 2] = $6; //@line 15496
   HEAP32[$AsyncCtx11 + 32 >> 2] = $7; //@line 15498
   HEAP32[$AsyncCtx11 + 36 >> 2] = $3; //@line 15500
   HEAP32[$AsyncCtx11 + 40 >> 2] = $$sroa_idx5$i$i43; //@line 15502
   HEAP32[$AsyncCtx11 + 44 >> 2] = $2; //@line 15504
   HEAP32[$AsyncCtx11 + 48 >> 2] = $3; //@line 15506
   HEAP32[$AsyncCtx11 + 52 >> 2] = $2; //@line 15508
   HEAP32[$AsyncCtx11 + 56 >> 2] = $6; //@line 15510
   HEAP32[$AsyncCtx11 + 60 >> 2] = $3; //@line 15512
   HEAP32[$AsyncCtx11 + 64 >> 2] = $5; //@line 15514
   HEAP32[$AsyncCtx11 + 68 >> 2] = $9; //@line 15516
   HEAP32[$AsyncCtx11 + 72 >> 2] = $10; //@line 15518
   HEAP32[$AsyncCtx11 + 76 >> 2] = $1; //@line 15520
   HEAP32[$AsyncCtx11 + 80 >> 2] = $$sroa_idx5$i$i; //@line 15522
   HEAP32[$AsyncCtx11 + 84 >> 2] = $0; //@line 15524
   HEAP32[$AsyncCtx11 + 88 >> 2] = $1; //@line 15526
   HEAP32[$AsyncCtx11 + 92 >> 2] = $200; //@line 15528
   HEAP32[$AsyncCtx11 + 96 >> 2] = $13; //@line 15530
   HEAP32[$AsyncCtx11 + 100 >> 2] = $$03071; //@line 15532
   HEAP32[$AsyncCtx11 + 104 >> 2] = $$02972; //@line 15534
   sp = STACKTOP; //@line 15535
   STACKTOP = sp; //@line 15536
   return;
  }
 case 35:
  {
   HEAP32[$AsyncCtx44 >> 2] = 193; //@line 15540
   HEAP32[$AsyncCtx44 + 4 >> 2] = $0; //@line 15542
   HEAP32[$AsyncCtx44 + 8 >> 2] = $9; //@line 15544
   HEAP32[$AsyncCtx44 + 12 >> 2] = $1; //@line 15546
   HEAP32[$AsyncCtx44 + 16 >> 2] = $4; //@line 15548
   HEAP32[$AsyncCtx44 + 20 >> 2] = $11; //@line 15550
   HEAP32[$AsyncCtx44 + 24 >> 2] = $8; //@line 15552
   HEAP32[$AsyncCtx44 + 28 >> 2] = $6; //@line 15554
   HEAP32[$AsyncCtx44 + 32 >> 2] = $7; //@line 15556
   HEAP32[$AsyncCtx44 + 36 >> 2] = $3; //@line 15558
   HEAP32[$AsyncCtx44 + 40 >> 2] = $$sroa_idx5$i$i43; //@line 15560
   HEAP32[$AsyncCtx44 + 44 >> 2] = $2; //@line 15562
   HEAP32[$AsyncCtx44 + 48 >> 2] = $3; //@line 15564
   HEAP32[$AsyncCtx44 + 52 >> 2] = $2; //@line 15566
   HEAP32[$AsyncCtx44 + 56 >> 2] = $6; //@line 15568
   HEAP32[$AsyncCtx44 + 60 >> 2] = $3; //@line 15570
   HEAP32[$AsyncCtx44 + 64 >> 2] = $5; //@line 15572
   HEAP32[$AsyncCtx44 + 68 >> 2] = $9; //@line 15574
   HEAP32[$AsyncCtx44 + 72 >> 2] = $10; //@line 15576
   HEAP32[$AsyncCtx44 + 76 >> 2] = $1; //@line 15578
   HEAP32[$AsyncCtx44 + 80 >> 2] = $$sroa_idx5$i$i; //@line 15580
   HEAP32[$AsyncCtx44 + 84 >> 2] = $0; //@line 15582
   HEAP32[$AsyncCtx44 + 88 >> 2] = $1; //@line 15584
   HEAP32[$AsyncCtx44 + 92 >> 2] = $$03071; //@line 15586
   HEAP32[$AsyncCtx44 + 96 >> 2] = $$02972; //@line 15588
   HEAP32[$AsyncCtx44 + 100 >> 2] = $13; //@line 15590
   sp = STACKTOP; //@line 15591
   STACKTOP = sp; //@line 15592
   return;
  }
 case 38:
  {
   HEAP32[$AsyncCtx15 >> 2] = 194; //@line 15596
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 15598
   HEAP32[$AsyncCtx15 + 8 >> 2] = $9; //@line 15600
   HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 15602
   HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 15604
   HEAP32[$AsyncCtx15 + 20 >> 2] = $11; //@line 15606
   HEAP32[$AsyncCtx15 + 24 >> 2] = $8; //@line 15608
   HEAP32[$AsyncCtx15 + 28 >> 2] = $6; //@line 15610
   HEAP32[$AsyncCtx15 + 32 >> 2] = $7; //@line 15612
   HEAP32[$AsyncCtx15 + 36 >> 2] = $3; //@line 15614
   HEAP32[$AsyncCtx15 + 40 >> 2] = $$sroa_idx5$i$i43; //@line 15616
   HEAP32[$AsyncCtx15 + 44 >> 2] = $2; //@line 15618
   HEAP32[$AsyncCtx15 + 48 >> 2] = $3; //@line 15620
   HEAP32[$AsyncCtx15 + 52 >> 2] = $2; //@line 15622
   HEAP32[$AsyncCtx15 + 56 >> 2] = $6; //@line 15624
   HEAP32[$AsyncCtx15 + 60 >> 2] = $3; //@line 15626
   HEAP32[$AsyncCtx15 + 64 >> 2] = $5; //@line 15628
   HEAP32[$AsyncCtx15 + 68 >> 2] = $9; //@line 15630
   HEAP32[$AsyncCtx15 + 72 >> 2] = $10; //@line 15632
   HEAP32[$AsyncCtx15 + 76 >> 2] = $1; //@line 15634
   HEAP32[$AsyncCtx15 + 80 >> 2] = $$sroa_idx5$i$i; //@line 15636
   HEAP32[$AsyncCtx15 + 84 >> 2] = $0; //@line 15638
   HEAP32[$AsyncCtx15 + 88 >> 2] = $1; //@line 15640
   HEAP32[$AsyncCtx15 + 92 >> 2] = $$03071; //@line 15642
   HEAP32[$AsyncCtx15 + 96 >> 2] = $$02972; //@line 15644
   HEAP32[$AsyncCtx15 + 100 >> 2] = $13; //@line 15646
   sp = STACKTOP; //@line 15647
   STACKTOP = sp; //@line 15648
   return;
  }
 case 42:
  {
   HEAP32[$AsyncCtx19 >> 2] = 195; //@line 15652
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 15654
   HEAP32[$AsyncCtx19 + 8 >> 2] = $9; //@line 15656
   HEAP32[$AsyncCtx19 + 12 >> 2] = $1; //@line 15658
   HEAP32[$AsyncCtx19 + 16 >> 2] = $4; //@line 15660
   HEAP32[$AsyncCtx19 + 20 >> 2] = $11; //@line 15662
   HEAP32[$AsyncCtx19 + 24 >> 2] = $8; //@line 15664
   HEAP32[$AsyncCtx19 + 28 >> 2] = $6; //@line 15666
   HEAP32[$AsyncCtx19 + 32 >> 2] = $7; //@line 15668
   HEAP32[$AsyncCtx19 + 36 >> 2] = $3; //@line 15670
   HEAP32[$AsyncCtx19 + 40 >> 2] = $$sroa_idx5$i$i43; //@line 15672
   HEAP32[$AsyncCtx19 + 44 >> 2] = $2; //@line 15674
   HEAP32[$AsyncCtx19 + 48 >> 2] = $3; //@line 15676
   HEAP32[$AsyncCtx19 + 52 >> 2] = $2; //@line 15678
   HEAP32[$AsyncCtx19 + 56 >> 2] = $6; //@line 15680
   HEAP32[$AsyncCtx19 + 60 >> 2] = $3; //@line 15682
   HEAP32[$AsyncCtx19 + 64 >> 2] = $5; //@line 15684
   HEAP32[$AsyncCtx19 + 68 >> 2] = $9; //@line 15686
   HEAP32[$AsyncCtx19 + 72 >> 2] = $10; //@line 15688
   HEAP32[$AsyncCtx19 + 76 >> 2] = $1; //@line 15690
   HEAP32[$AsyncCtx19 + 80 >> 2] = $$sroa_idx5$i$i; //@line 15692
   HEAP32[$AsyncCtx19 + 84 >> 2] = $0; //@line 15694
   HEAP32[$AsyncCtx19 + 88 >> 2] = $1; //@line 15696
   HEAP32[$AsyncCtx19 + 92 >> 2] = $$03071; //@line 15698
   HEAP32[$AsyncCtx19 + 96 >> 2] = $$02972; //@line 15700
   HEAP32[$AsyncCtx19 + 100 >> 2] = $13; //@line 15702
   sp = STACKTOP; //@line 15703
   STACKTOP = sp; //@line 15704
   return;
  }
 }
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1815
 STACKTOP = STACKTOP + 512 | 0; //@line 1816
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 1816
 $6 = sp; //@line 1817
 $sum = $3 + $2 | 0; //@line 1818
 $7 = 0 - $sum | 0; //@line 1819
 $8 = $0 + 4 | 0; //@line 1820
 $9 = $0 + 100 | 0; //@line 1821
 $$0329 = $1; //@line 1822
 $$0396 = 0; //@line 1822
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 1826
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 1834
    $$2 = $$0329; //@line 1834
    $$2398 = $$0396; //@line 1834
    $368 = 0; //@line 1834
    $369 = 0; //@line 1834
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 1838
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 1843
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 1846
   $$0396 = 1; //@line 1846
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 1850
   $$0396 = 1; //@line 1850
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 1855
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 1860
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 1863
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 1866
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 1870
   $26 = 0; //@line 1870
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 1872
    $28 = tempRet0; //@line 1873
    $29 = HEAP32[$8 >> 2] | 0; //@line 1874
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 1879
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 1882
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 1885
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 1889
     $26 = $28; //@line 1889
    } else {
     $$0393 = 1; //@line 1891
     $$2 = $$1330$be; //@line 1891
     $$2398 = 1; //@line 1891
     $368 = $27; //@line 1891
     $369 = $28; //@line 1891
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 1896
   $$2 = $$1330$ph; //@line 1896
   $$2398 = $$0396; //@line 1896
   $368 = 0; //@line 1896
   $369 = 0; //@line 1896
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 1899
 $37 = $$2 + -48 | 0; //@line 1900
 $39 = ($$2 | 0) == 46; //@line 1902
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 1906
   $$0341511 = 0; //@line 1907
   $$0345510 = 0; //@line 1907
   $$0401507 = 0; //@line 1907
   $$1394509 = $$0393; //@line 1907
   $$3399508 = $$2398; //@line 1907
   $$3512 = $$2; //@line 1907
   $370 = $39; //@line 1907
   $371 = $37; //@line 1907
   $372 = $368; //@line 1907
   $373 = $369; //@line 1907
   $44 = 0; //@line 1907
   $45 = 0; //@line 1907
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 1913
       $$2347 = $$0345510; //@line 1913
       $$2395 = 1; //@line 1913
       $$2403 = $$0401507; //@line 1913
       $$4400 = $$3399508; //@line 1913
       $374 = $44; //@line 1913
       $375 = $45; //@line 1913
       $376 = $44; //@line 1913
       $377 = $45; //@line 1913
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 1919
      $47 = tempRet0; //@line 1920
      $48 = ($$3512 | 0) != 48; //@line 1921
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 1924
        $$2347 = $$0345510; //@line 1924
        $$2395 = $$1394509; //@line 1924
        $$2403 = $$0401507; //@line 1924
        $$4400 = $$3399508; //@line 1924
        $374 = $372; //@line 1924
        $375 = $373; //@line 1924
        $376 = $46; //@line 1924
        $377 = $47; //@line 1924
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 1929
       $$2343 = $$0341511; //@line 1930
       $$2347 = $$0345510; //@line 1930
       $$2395 = $$1394509; //@line 1930
       $$2403 = $$0401507; //@line 1930
       $$4400 = $$3399508; //@line 1930
       $374 = $372; //@line 1930
       $375 = $373; //@line 1930
       $376 = $46; //@line 1930
       $377 = $47; //@line 1930
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 1935
      if (!$$0341511) {
       $$sink = $371; //@line 1937
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 1943
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 1945
      $54 = $$0341511 + 1 | 0; //@line 1946
      $55 = ($54 | 0) == 9; //@line 1947
      $$2343 = $55 ? 0 : $54; //@line 1951
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 1951
      $$2395 = $$1394509; //@line 1951
      $$2403 = $48 ? $46 : $$0401507; //@line 1951
      $$4400 = 1; //@line 1951
      $374 = $372; //@line 1951
      $375 = $373; //@line 1951
      $376 = $46; //@line 1951
      $377 = $47; //@line 1951
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 1954
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 1959
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 1962
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 1965
    }
    $371 = $$3$be + -48 | 0; //@line 1967
    $370 = ($$3$be | 0) == 46; //@line 1969
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 1974
     $$0345$lcssa = $$2347; //@line 1974
     $$0401$lcssa = $$2403; //@line 1974
     $$1394$lcssa = $$2395; //@line 1974
     $$3$lcssa = $$3$be; //@line 1974
     $$3399$lcssa = $$4400; //@line 1974
     $72 = $376; //@line 1974
     $73 = $374; //@line 1974
     $75 = $377; //@line 1974
     $76 = $375; //@line 1974
     label = 29; //@line 1975
     break L20;
    } else {
     $$0341511 = $$2343; //@line 1972
     $$0345510 = $$2347; //@line 1972
     $$0401507 = $$2403; //@line 1972
     $$1394509 = $$2395; //@line 1972
     $$3399508 = $$4400; //@line 1972
     $$3512 = $$3$be; //@line 1972
     $372 = $374; //@line 1972
     $373 = $375; //@line 1972
     $44 = $376; //@line 1972
     $45 = $377; //@line 1972
    }
   }
   $$0341463 = $$0341511; //@line 1980
   $$0345467 = $$0345510; //@line 1980
   $$0401473 = $$0401507; //@line 1980
   $378 = $44; //@line 1980
   $379 = $45; //@line 1980
   $380 = $372; //@line 1980
   $381 = $373; //@line 1980
   $382 = ($$3399508 | 0) != 0; //@line 1980
   label = 37; //@line 1981
  } else {
   $$0341$lcssa = 0; //@line 1983
   $$0345$lcssa = 0; //@line 1983
   $$0401$lcssa = 0; //@line 1983
   $$1394$lcssa = $$0393; //@line 1983
   $$3$lcssa = $$2; //@line 1983
   $$3399$lcssa = $$2398; //@line 1983
   $72 = 0; //@line 1983
   $73 = $368; //@line 1983
   $75 = 0; //@line 1983
   $76 = $369; //@line 1983
   label = 29; //@line 1984
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 1989
   $71 = $70 ? $72 : $73; //@line 1990
   $74 = $70 ? $75 : $76; //@line 1991
   $77 = ($$3399$lcssa | 0) != 0; //@line 1992
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 1999
     $$0345467 = $$0345$lcssa; //@line 1999
     $$0401473 = $$0401$lcssa; //@line 1999
     $378 = $72; //@line 1999
     $379 = $75; //@line 1999
     $380 = $71; //@line 1999
     $381 = $74; //@line 1999
     $382 = $77; //@line 1999
     label = 37; //@line 2000
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 2003
     $$0345466 = $$0345$lcssa; //@line 2003
     $$0401472 = $$0401$lcssa; //@line 2003
     $383 = $72; //@line 2003
     $384 = $75; //@line 2003
     $385 = $77; //@line 2003
     $386 = $71; //@line 2003
     $387 = $74; //@line 2003
     label = 39; //@line 2004
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 2008
   $81 = tempRet0; //@line 2009
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 2016
     $$1 = 0.0; //@line 2017
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 2023
     $91 = 0; //@line 2023
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 2027
     $90 = 0; //@line 2028
     $91 = 0; //@line 2028
    }
   } else {
    $90 = $80; //@line 2031
    $91 = $81; //@line 2031
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0; //@line 2033
   $$0341461 = $$0341$lcssa; //@line 2035
   $$0345465 = $$0345$lcssa; //@line 2035
   $$0401471 = $$0401$lcssa; //@line 2035
   $105 = $92; //@line 2035
   $106 = $72; //@line 2035
   $108 = tempRet0; //@line 2035
   $109 = $75; //@line 2035
   label = 41; //@line 2036
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 2043
   $$0345466 = $$0345467; //@line 2043
   $$0401472 = $$0401473; //@line 2043
   $383 = $378; //@line 2043
   $384 = $379; //@line 2043
   $385 = $382; //@line 2043
   $386 = $380; //@line 2043
   $387 = $381; //@line 2043
   label = 39; //@line 2044
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 2048
   if ($382) {
    $$0341461 = $$0341463; //@line 2050
    $$0345465 = $$0345467; //@line 2050
    $$0401471 = $$0401473; //@line 2050
    $105 = $380; //@line 2050
    $106 = $378; //@line 2050
    $108 = $381; //@line 2050
    $109 = $379; //@line 2050
    label = 41; //@line 2051
   } else {
    label = 40; //@line 2053
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 2059
   $$0345465 = $$0345466; //@line 2059
   $$0401471 = $$0401472; //@line 2059
   $105 = $386; //@line 2059
   $106 = $383; //@line 2059
   $108 = $387; //@line 2059
   $109 = $384; //@line 2059
   label = 41; //@line 2060
  } else {
   label = 40; //@line 2062
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 2068
   ___shlim($0, 0); //@line 2069
   $$1 = 0.0; //@line 2070
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 2073
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 2078
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 2099
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 2103
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 2105
   if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 2113
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 2117
    break;
   }
   $134 = $3 + -106 | 0; //@line 2120
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 2122
   if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 2130
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 2134
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 2139
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 2143
     $$3344501 = $$0341461; //@line 2145
     $150 = HEAP32[$148 >> 2] | 0; //@line 2145
     while (1) {
      $150 = $150 * 10 | 0; //@line 2147
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 2151
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 2156
    }
    $$3348 = $$0345465 + 1 | 0; //@line 2159
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
     if (($105 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 2173
      break;
     }
     if (($105 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[1460 + (8 - $105 << 2) >> 2] | 0); //@line 2187
      break;
     }
     $172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0; //@line 2192
     $$pre = HEAP32[$6 >> 2] | 0; //@line 2194
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[1460 + ($105 + -10 << 2) >> 2] | 0); //@line 2207
      break;
     }
    }
   }
   $184 = ($105 | 0) % 9 | 0; //@line 2212
   if (!$184) {
    $$0380$ph = 0; //@line 2215
    $$1373$ph446 = $$3348; //@line 2215
    $$2352$ph447 = 0; //@line 2215
    $$2387$ph445 = $105; //@line 2215
   } else {
    $188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 2219
    $191 = HEAP32[1460 + (8 - $188 << 2) >> 2] | 0; //@line 2222
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 2225
     $$0372 = 0; //@line 2225
     $$0385$lcssa552 = $105; //@line 2225
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 2227
     $$0340494 = 0; //@line 2228
     $$0350492 = 0; //@line 2228
     $$0385491 = $105; //@line 2228
     $$4349493 = 0; //@line 2228
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 2230
      $195 = HEAP32[$194 >> 2] | 0; //@line 2231
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 2234
      HEAP32[$194 >> 2] = $198; //@line 2235
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 2236
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 2239
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 2243
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 2244
      $$4349493 = $$4349493 + 1 | 0; //@line 2245
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 2255
      $$0372 = $$3348; //@line 2255
      $$0385$lcssa552 = $$0385491; //@line 2255
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 2259
      $$0350$lcssa553 = $$0350492; //@line 2260
      $$0372 = $$3348 + 1 | 0; //@line 2260
      $$0385$lcssa552 = $$0385491; //@line 2260
     }
    }
    $$0380$ph = 0; //@line 2265
    $$1373$ph446 = $$0372; //@line 2265
    $$2352$ph447 = $$0350$lcssa553; //@line 2265
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 2265
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 2268
    $213 = ($$2387$ph445 | 0) == 18; //@line 2269
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 2270
    $$0380 = $$0380$ph; //@line 2271
    $$1373 = $$1373$ph446; //@line 2271
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 2275
       $$4354$ph = $$2352$ph447; //@line 2275
       $$4389$ph443 = $$2387$ph445; //@line 2275
       $$6378$ph = $$1373; //@line 2275
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 2281
       $$4354$ph = $$2352$ph447; //@line 2281
       $$4389$ph443 = 18; //@line 2281
       $$6378$ph = $$1373; //@line 2281
       break L101;
      }
     }
     $$0334 = 0; //@line 2286
     $$2374 = $$1373; //@line 2286
     $$5$in = $$1373 + 127 | 0; //@line 2286
     while (1) {
      $$5 = $$5$in & 127; //@line 2288
      $218 = $6 + ($$5 << 2) | 0; //@line 2289
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 2291
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 2293
      $223 = tempRet0; //@line 2294
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 2301
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 2303
       $$1335 = $229; //@line 2305
       $$sink419$off0 = $231; //@line 2305
      } else {
       $$1335 = 0; //@line 2307
       $$sink419$off0 = $222; //@line 2307
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 2309
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 2313
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 2318
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 2323
       $$5$in = $$5 + -1 | 0; //@line 2323
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 2326
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 2329
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 2336
    $246 = $$2374 + 127 & 127; //@line 2339
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 2342
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 2348
     $$4376 = $246; //@line 2349
    } else {
     $$4376 = $$2374; //@line 2351
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 2354
    $$0380$ph = $$0380; //@line 2355
    $$1373$ph446 = $$4376; //@line 2355
    $$2352$ph447 = $243; //@line 2355
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 2355
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 & 127; //@line 2359
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 2362
    $$1381$ph557 = $$1381$ph; //@line 2363
    $$4354$ph558 = $$4354$ph; //@line 2363
    $$4389$ph = $$4389$ph443; //@line 2363
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 2365
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 2367
     $$1381 = $$1381$ph557; //@line 2368
     $$4354 = $$4354$ph558; //@line 2368
     while (1) {
      $$0336484 = 0; //@line 2370
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 2373
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 2376
        label = 88; //@line 2377
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 2381
       $261 = HEAP32[1492 + ($$0336484 << 2) >> 2] | 0; //@line 2383
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 2386
        label = 88; //@line 2387
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 2394
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 2397
       } else {
        $$1337 = $264; //@line 2399
        label = 88; //@line 2400
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 2405
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 2409
        $$4483 = 0; //@line 2409
        $$9481 = $$6378$ph; //@line 2409
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 2413
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 2416
       $$4354 = $$6378$ph; //@line 2416
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 2422
     $272 = 1e9 >>> $$423; //@line 2423
     $$0332488 = 0; //@line 2424
     $$5355486 = $$4354; //@line 2424
     $$5390485 = $$4389$ph; //@line 2424
     $$6487 = $$4354; //@line 2424
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 2426
      $274 = HEAP32[$273 >> 2] | 0; //@line 2427
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 2430
      HEAP32[$273 >> 2] = $277; //@line 2431
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 2432
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 2435
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 2439
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 2440
      $$6487 = $$6487 + 1 & 127; //@line 2442
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 2452
      $$4354$ph558 = $$5355486; //@line 2452
      $$4389$ph = $$5390485; //@line 2452
      continue;
     }
     if (($289 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 2461
     $$1381$ph557 = $268; //@line 2462
     $$4354$ph558 = $$5355486; //@line 2462
     $$4389$ph = $$5390485; //@line 2462
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 2465
    $$1381$ph = $268; //@line 2466
    $$4354$ph = $$5355486; //@line 2466
    $$4389$ph443 = $$5390485; //@line 2466
    $$6378$ph = $289; //@line 2466
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 2470
    $302 = $$9481 + 1 & 127; //@line 2473
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 2477
     $$10 = $302; //@line 2478
    } else {
     $$10 = $$9481; //@line 2480
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 2486
    $$4483 = $$4483 + 1 | 0; //@line 2487
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 2492
    }
   }
   $311 = +($4 | 0); //@line 2495
   $312 = $$0365482 * $311; //@line 2496
   $313 = $$1381 + 53 | 0; //@line 2497
   $314 = $313 - $3 | 0; //@line 2498
   $315 = ($314 | 0) < ($2 | 0); //@line 2499
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 2502
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 2507
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 2510
    $$0360 = $320; //@line 2513
    $$0361 = $323; //@line 2513
    $$1366 = $320 + ($312 - $323); //@line 2513
   } else {
    $$0360 = 0.0; //@line 2515
    $$0361 = 0.0; //@line 2515
    $$1366 = $312; //@line 2515
   }
   $327 = $$4354 + 2 & 127; //@line 2518
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 2521
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 2524
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 2534
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 2540
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 2546
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 2555
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 2560
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 2571
     } else {
      $$3364 = $$1362 + 1.0; //@line 2574
     }
    } else {
     $$3364 = $$1362; //@line 2577
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 2581
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 2588
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 2592
     $$2367 = $359 ? $354 : $354 * .5; //@line 2593
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 2603
       $$4384 = $$3383; //@line 2603
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 2608
     $$3368 = $$2367; //@line 2609
     $$4384 = $$3383; //@line 2609
    } else {
     $$3368 = $354; //@line 2611
     $$4384 = $$1381; //@line 2611
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 2615
  }
 } while (0);
 STACKTOP = sp; //@line 2618
 return +$$1;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$090114$lcssa = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $$3 = 0, $$5 = 0, $$byval_copy = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $110 = 0, $12 = 0, $124 = 0, $125 = 0, $128 = 0, $142 = 0, $146 = 0, $147 = 0, $155 = 0, $158 = 0, $161 = 0, $164 = 0, $171 = 0, $173 = 0, $174 = 0, $177 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $195 = 0, $196 = 0, $20 = 0, $208 = 0, $211 = 0, $222 = 0, $223 = 0, $226 = 0, $235 = 0, $237 = 0, $240 = 0, $245 = 0, $248 = 0, $255 = 0, $257 = 0, $265 = 0, $268 = 0, $27 = 0, $270 = 0, $278 = 0, $28 = 0, $281 = 0, $283 = 0, $291 = 0, $294 = 0, $296 = 0, $315 = 0, $316 = 0, $317 = 0, $33 = 0, $46 = 0, $50 = 0, $6 = 0, $63 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $8 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13956
 STACKTOP = STACKTOP + 144 | 0; //@line 13957
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 13957
 $$byval_copy = sp + 116 | 0; //@line 13958
 $6 = sp + 96 | 0; //@line 13959
 $7 = sp + 32 | 0; //@line 13960
 $8 = sp + 16 | 0; //@line 13961
 $9 = sp; //@line 13962
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$5 = -3003; //@line 13967
  STACKTOP = sp; //@line 13968
  return $$5 | 0; //@line 13968
 }
 $12 = _strlen($1) | 0; //@line 13970
 if (($12 | 0) > 255 | ($12 | 0) == 0) {
  $$5 = -3003; //@line 13975
  STACKTOP = sp; //@line 13976
  return $$5 | 0; //@line 13976
 }
 L7 : do {
  if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $5, $6) | 0)) {
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 13982
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 13982
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 13982
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 13982
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 13982
   __ZN13SocketAddressC2E10nsapi_addrt($7, $$byval_copy, 0); //@line 13983
   $19 = $2 + 12 | 0; //@line 13984
   $20 = HEAP32[$19 >> 2] | 0; //@line 13985
   do {
    if (!$20) {
     $AsyncCtx53 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13989
     _mbed_assert_internal(5972, 5977, 1677); //@line 13990
     if (___async) {
      HEAP32[$AsyncCtx53 >> 2] = 169; //@line 13993
      HEAP32[$AsyncCtx53 + 4 >> 2] = $19; //@line 13995
      HEAP32[$AsyncCtx53 + 8 >> 2] = $2; //@line 13997
      HEAP32[$AsyncCtx53 + 12 >> 2] = $7; //@line 13999
      HEAP32[$AsyncCtx53 + 16 >> 2] = $7; //@line 14001
      HEAP32[$AsyncCtx53 + 20 >> 2] = $6; //@line 14003
      sp = STACKTOP; //@line 14004
      STACKTOP = sp; //@line 14005
      return 0; //@line 14005
     } else {
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 14007
      $28 = HEAP32[$19 >> 2] | 0; //@line 14009
      break;
     }
    } else {
     $28 = $20; //@line 14013
    }
   } while (0);
   $27 = HEAP32[$28 >> 2] | 0; //@line 14016
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14017
   FUNCTION_TABLE_viii[$27 & 0]($2, 0, $7); //@line 14018
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 170; //@line 14021
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 14023
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 14025
    sp = STACKTOP; //@line 14026
    STACKTOP = sp; //@line 14027
    return 0; //@line 14027
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14029
    $$3 = 0; //@line 14030
    break;
   }
  } else {
   if (!(HEAP32[2509] | 0)) {
    $$090114$lcssa = 0; //@line 14037
   } else {
    if (!(HEAP32[2510] | 0)) {
     $$090114$lcssa = 1; //@line 14042
    } else {
     if (!(HEAP32[2511] | 0)) {
      $$090114$lcssa = 2; //@line 14047
     } else {
      if (!(HEAP32[2512] | 0)) {
       $$090114$lcssa = 3; //@line 14052
      } else {
       if (!(HEAP32[2513] | 0)) {
        $$090114$lcssa = 4; //@line 14057
       } else {
        $$3 = -3007; //@line 14059
        break;
       }
      }
     }
    }
   }
   $AsyncCtx38 = _emscripten_alloc_async_context(48, sp) | 0; //@line 14066
   $33 = __ZnwjRKSt9nothrow_t(92, 12017) | 0; //@line 14067
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 171; //@line 14070
    HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 14072
    HEAP32[$AsyncCtx38 + 8 >> 2] = $3; //@line 14074
    HEAP32[$AsyncCtx38 + 12 >> 2] = $5; //@line 14076
    HEAP32[$AsyncCtx38 + 16 >> 2] = $6; //@line 14078
    HEAP32[$AsyncCtx38 + 20 >> 2] = $4; //@line 14080
    HEAP32[$AsyncCtx38 + 24 >> 2] = $9; //@line 14082
    HEAP32[$AsyncCtx38 + 28 >> 2] = $8; //@line 14084
    HEAP32[$AsyncCtx38 + 32 >> 2] = $$090114$lcssa; //@line 14086
    HEAP32[$AsyncCtx38 + 36 >> 2] = $2; //@line 14088
    HEAP32[$AsyncCtx38 + 40 >> 2] = $12; //@line 14090
    HEAP32[$AsyncCtx38 + 44 >> 2] = $1; //@line 14092
    sp = STACKTOP; //@line 14093
    STACKTOP = sp; //@line 14094
    return 0; //@line 14094
   }
   _emscripten_free_async_context($AsyncCtx38 | 0); //@line 14096
   if (!$33) {
    $$3 = -3007; //@line 14099
   } else {
    $46 = $33 + 16 | 0; //@line 14101
    HEAP32[$46 >> 2] = 0; //@line 14102
    HEAP32[$46 + 4 >> 2] = 0; //@line 14102
    HEAP32[$46 + 8 >> 2] = 0; //@line 14102
    HEAP32[$46 + 12 >> 2] = 0; //@line 14102
    HEAP32[$46 + 16 >> 2] = 0; //@line 14102
    HEAP32[$46 + 20 >> 2] = 0; //@line 14102
    HEAP32[$46 + 24 >> 2] = 0; //@line 14102
    HEAP32[$46 + 28 >> 2] = 0; //@line 14102
    $AsyncCtx42 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14106
    $50 = __ZnajRKSt9nothrow_t(($12 | 0) < -1 ? -1 : $12 + 1 | 0, 12017) | 0; //@line 14107
    if (___async) {
     HEAP32[$AsyncCtx42 >> 2] = 172; //@line 14110
     HEAP32[$AsyncCtx42 + 4 >> 2] = $33; //@line 14112
     HEAP32[$AsyncCtx42 + 8 >> 2] = $0; //@line 14114
     HEAP32[$AsyncCtx42 + 12 >> 2] = $3; //@line 14116
     HEAP32[$AsyncCtx42 + 16 >> 2] = $5; //@line 14118
     HEAP32[$AsyncCtx42 + 20 >> 2] = $6; //@line 14120
     HEAP32[$AsyncCtx42 + 24 >> 2] = $4; //@line 14122
     HEAP32[$AsyncCtx42 + 28 >> 2] = $9; //@line 14124
     HEAP32[$AsyncCtx42 + 32 >> 2] = $8; //@line 14126
     HEAP32[$AsyncCtx42 + 36 >> 2] = $46; //@line 14128
     HEAP32[$AsyncCtx42 + 40 >> 2] = $$090114$lcssa; //@line 14130
     HEAP32[$AsyncCtx42 + 44 >> 2] = $2; //@line 14132
     HEAP32[$AsyncCtx42 + 48 >> 2] = $1; //@line 14134
     sp = STACKTOP; //@line 14135
     STACKTOP = sp; //@line 14136
     return 0; //@line 14136
    }
    _emscripten_free_async_context($AsyncCtx42 | 0); //@line 14138
    $63 = $33 + 12 | 0; //@line 14139
    HEAP32[$63 >> 2] = $50; //@line 14140
    if (!$50) {
     __ZdlPv($33); //@line 14143
     $$3 = -3007; //@line 14144
     break;
    }
    _strcpy($50, $1) | 0; //@line 14147
    HEAP32[$33 + 4 >> 2] = -3019; //@line 14149
    if (($46 | 0) != ($2 | 0)) {
     $67 = $33 + 28 | 0; //@line 14152
     $68 = HEAP32[$67 >> 2] | 0; //@line 14153
     do {
      if ($68 | 0) {
       $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 14158
       $AsyncCtx2 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14159
       FUNCTION_TABLE_vi[$71 & 511]($46); //@line 14160
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 173; //@line 14163
        HEAP32[$AsyncCtx2 + 4 >> 2] = $33; //@line 14165
        HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 14167
        HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 14169
        HEAP32[$AsyncCtx2 + 16 >> 2] = $5; //@line 14171
        HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 14173
        HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 14175
        HEAP32[$AsyncCtx2 + 28 >> 2] = $9; //@line 14177
        HEAP32[$AsyncCtx2 + 32 >> 2] = $8; //@line 14179
        HEAP32[$AsyncCtx2 + 36 >> 2] = $46; //@line 14181
        HEAP32[$AsyncCtx2 + 40 >> 2] = $67; //@line 14183
        HEAP32[$AsyncCtx2 + 44 >> 2] = $$090114$lcssa; //@line 14185
        HEAP32[$AsyncCtx2 + 48 >> 2] = $2; //@line 14187
        HEAP32[$AsyncCtx2 + 52 >> 2] = $63; //@line 14189
        sp = STACKTOP; //@line 14190
        STACKTOP = sp; //@line 14191
        return 0; //@line 14191
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14193
        break;
       }
      }
     } while (0);
     $85 = $2 + 12 | 0; //@line 14198
     $86 = HEAP32[$85 >> 2] | 0; //@line 14199
     do {
      if (!$86) {
       $103 = 0; //@line 14203
      } else {
       $89 = HEAP32[$86 + 4 >> 2] | 0; //@line 14206
       $AsyncCtx6 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14207
       FUNCTION_TABLE_vii[$89 & 7]($46, $2); //@line 14208
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 174; //@line 14211
        HEAP32[$AsyncCtx6 + 4 >> 2] = $33; //@line 14213
        HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 14215
        HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 14217
        HEAP32[$AsyncCtx6 + 16 >> 2] = $5; //@line 14219
        HEAP32[$AsyncCtx6 + 20 >> 2] = $6; //@line 14221
        HEAP32[$AsyncCtx6 + 24 >> 2] = $4; //@line 14223
        HEAP32[$AsyncCtx6 + 28 >> 2] = $85; //@line 14225
        HEAP32[$AsyncCtx6 + 32 >> 2] = $9; //@line 14227
        HEAP32[$AsyncCtx6 + 36 >> 2] = $8; //@line 14229
        HEAP32[$AsyncCtx6 + 40 >> 2] = $46; //@line 14231
        HEAP32[$AsyncCtx6 + 44 >> 2] = $67; //@line 14233
        HEAP32[$AsyncCtx6 + 48 >> 2] = $$090114$lcssa; //@line 14235
        HEAP32[$AsyncCtx6 + 52 >> 2] = $63; //@line 14237
        sp = STACKTOP; //@line 14238
        STACKTOP = sp; //@line 14239
        return 0; //@line 14239
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14241
        $103 = HEAP32[$85 >> 2] | 0; //@line 14243
        break;
       }
      }
     } while (0);
     HEAP32[$67 >> 2] = $103; //@line 14248
    }
    $104 = $33 + 32 | 0; //@line 14250
    if (($104 | 0) != ($4 | 0)) {
     $106 = $33 + 44 | 0; //@line 14253
     $107 = HEAP32[$106 >> 2] | 0; //@line 14254
     do {
      if ($107 | 0) {
       $110 = HEAP32[$107 + 8 >> 2] | 0; //@line 14259
       $AsyncCtx10 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14260
       FUNCTION_TABLE_vi[$110 & 511]($104); //@line 14261
       if (___async) {
        HEAP32[$AsyncCtx10 >> 2] = 175; //@line 14264
        HEAP32[$AsyncCtx10 + 4 >> 2] = $33; //@line 14266
        HEAP32[$AsyncCtx10 + 8 >> 2] = $0; //@line 14268
        HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 14270
        HEAP32[$AsyncCtx10 + 16 >> 2] = $5; //@line 14272
        HEAP32[$AsyncCtx10 + 20 >> 2] = $6; //@line 14274
        HEAP32[$AsyncCtx10 + 24 >> 2] = $4; //@line 14276
        HEAP32[$AsyncCtx10 + 28 >> 2] = $106; //@line 14278
        HEAP32[$AsyncCtx10 + 32 >> 2] = $104; //@line 14280
        HEAP32[$AsyncCtx10 + 36 >> 2] = $9; //@line 14282
        HEAP32[$AsyncCtx10 + 40 >> 2] = $8; //@line 14284
        HEAP32[$AsyncCtx10 + 44 >> 2] = $46; //@line 14286
        HEAP32[$AsyncCtx10 + 48 >> 2] = $$090114$lcssa; //@line 14288
        HEAP32[$AsyncCtx10 + 52 >> 2] = $63; //@line 14290
        sp = STACKTOP; //@line 14291
        STACKTOP = sp; //@line 14292
        return 0; //@line 14292
       } else {
        _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14294
        break;
       }
      }
     } while (0);
     $124 = $4 + 12 | 0; //@line 14299
     $125 = HEAP32[$124 >> 2] | 0; //@line 14300
     do {
      if (!$125) {
       $142 = 0; //@line 14304
      } else {
       $128 = HEAP32[$125 + 4 >> 2] | 0; //@line 14307
       $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14308
       FUNCTION_TABLE_vii[$128 & 7]($104, $4); //@line 14309
       if (___async) {
        HEAP32[$AsyncCtx14 >> 2] = 176; //@line 14312
        HEAP32[$AsyncCtx14 + 4 >> 2] = $33; //@line 14314
        HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 14316
        HEAP32[$AsyncCtx14 + 12 >> 2] = $3; //@line 14318
        HEAP32[$AsyncCtx14 + 16 >> 2] = $5; //@line 14320
        HEAP32[$AsyncCtx14 + 20 >> 2] = $6; //@line 14322
        HEAP32[$AsyncCtx14 + 24 >> 2] = $106; //@line 14324
        HEAP32[$AsyncCtx14 + 28 >> 2] = $9; //@line 14326
        HEAP32[$AsyncCtx14 + 32 >> 2] = $8; //@line 14328
        HEAP32[$AsyncCtx14 + 36 >> 2] = $124; //@line 14330
        HEAP32[$AsyncCtx14 + 40 >> 2] = $104; //@line 14332
        HEAP32[$AsyncCtx14 + 44 >> 2] = $46; //@line 14334
        HEAP32[$AsyncCtx14 + 48 >> 2] = $$090114$lcssa; //@line 14336
        HEAP32[$AsyncCtx14 + 52 >> 2] = $63; //@line 14338
        sp = STACKTOP; //@line 14339
        STACKTOP = sp; //@line 14340
        return 0; //@line 14340
       } else {
        _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14342
        $142 = HEAP32[$124 >> 2] | 0; //@line 14344
        break;
       }
      }
     } while (0);
     HEAP32[$106 >> 2] = $142; //@line 14349
    }
    HEAP32[$33 + 8 >> 2] = $0; //@line 14352
    HEAP32[$33 + 48 >> 2] = $3; //@line 14354
    HEAP32[$33 + 52 >> 2] = $5; //@line 14356
    $146 = $33 + 56 | 0; //@line 14357
    HEAP32[$146 >> 2] = 0; //@line 14358
    $147 = $33 + 60 | 0; //@line 14359
    HEAP32[$147 >> 2] = 0; //@line 14360
    HEAP32[$33 + 64 >> 2] = 0; //@line 14362
    HEAP8[$33 + 82 >> 0] = 0; //@line 14364
    HEAP8[$33 + 83 >> 0] = 1; //@line 14366
    HEAP8[$33 + 84 >> 0] = 3; //@line 14368
    HEAP8[$33 + 85 >> 0] = 0; //@line 14370
    HEAP16[$33 + 80 >> 1] = 0; //@line 14372
    HEAP32[$33 + 76 >> 2] = 0; //@line 14374
    $155 = $33 + 72 | 0; //@line 14375
    HEAP32[$155 >> 2] = 15500; //@line 14376
    HEAP8[$33 + 86 >> 0] = 0; //@line 14378
    HEAP32[$33 + 88 >> 2] = 0; //@line 14380
    $158 = HEAP32[177] | 0; //@line 14381
    HEAP32[177] = $158 + 1; //@line 14383
    HEAP32[$33 >> 2] = ($158 | 0) > 32767 ? 1 : $158; //@line 14386
    $161 = HEAP32[2509] | 0; //@line 14387
    if (!$161) {
     $$1 = 0; //@line 14390
     $255 = 0; //@line 14390
    } else {
     $164 = HEAP32[$161 + 56 >> 2] | 0; //@line 14393
     if (!$164) {
      $$1 = 1; //@line 14396
      $255 = 0; //@line 14396
     } else {
      if ((HEAP32[$161 + 8 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$146 >> 2] = $164; //@line 14402
       HEAP32[$147 >> 2] = HEAP32[$161 + 60 >> 2]; //@line 14405
       $$1 = 1; //@line 14406
       $255 = $164; //@line 14406
      } else {
       $$1 = 1; //@line 14408
       $255 = 0; //@line 14408
      }
     }
    }
    $171 = HEAP32[2510] | 0; //@line 14412
    if (!$171) {
     $$1$1 = $$1; //@line 14415
     $268 = $255; //@line 14415
    } else {
     if (!$255) {
      $257 = HEAP32[$171 + 56 >> 2] | 0; //@line 14420
      if (!$257) {
       $315 = 0; //@line 14423
      } else {
       if ((HEAP32[$171 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $257; //@line 14429
        HEAP32[$147 >> 2] = HEAP32[$171 + 60 >> 2]; //@line 14432
        $315 = $257; //@line 14433
       } else {
        $315 = 0; //@line 14435
       }
      }
     } else {
      $315 = $255; //@line 14439
     }
     $$1$1 = $$1 + 1 | 0; //@line 14442
     $268 = $315; //@line 14442
    }
    $265 = HEAP32[2511] | 0; //@line 14444
    if (!$265) {
     $$1$2 = $$1$1; //@line 14447
     $281 = $268; //@line 14447
    } else {
     if (!$268) {
      $270 = HEAP32[$265 + 56 >> 2] | 0; //@line 14452
      if (!$270) {
       $316 = 0; //@line 14455
      } else {
       if ((HEAP32[$265 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $270; //@line 14461
        HEAP32[$147 >> 2] = HEAP32[$265 + 60 >> 2]; //@line 14464
        $316 = $270; //@line 14465
       } else {
        $316 = 0; //@line 14467
       }
      }
     } else {
      $316 = $268; //@line 14471
     }
     $$1$2 = $$1$1 + 1 | 0; //@line 14474
     $281 = $316; //@line 14474
    }
    $278 = HEAP32[2512] | 0; //@line 14476
    if (!$278) {
     $$1$3 = $$1$2; //@line 14479
     $294 = $281; //@line 14479
    } else {
     if (!$281) {
      $283 = HEAP32[$278 + 56 >> 2] | 0; //@line 14484
      if (!$283) {
       $317 = 0; //@line 14487
      } else {
       if ((HEAP32[$278 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $283; //@line 14493
        HEAP32[$147 >> 2] = HEAP32[$278 + 60 >> 2]; //@line 14496
        $317 = $283; //@line 14497
       } else {
        $317 = 0; //@line 14499
       }
      }
     } else {
      $317 = $281; //@line 14503
     }
     $$1$3 = $$1$2 + 1 | 0; //@line 14506
     $294 = $317; //@line 14506
    }
    $291 = HEAP32[2513] | 0; //@line 14508
    if (!$291) {
     $$1$4 = $$1$3; //@line 14511
    } else {
     do {
      if (!$294) {
       $296 = HEAP32[$291 + 56 >> 2] | 0; //@line 14517
       if ($296 | 0) {
        if ((HEAP32[$291 + 8 >> 2] | 0) != ($0 | 0)) {
         break;
        }
        HEAP32[$146 >> 2] = $296; //@line 14526
        HEAP32[$147 >> 2] = HEAP32[$291 + 60 >> 2]; //@line 14529
       }
      }
     } while (0);
     $$1$4 = $$1$3 + 1 | 0; //@line 14534
    }
    HEAP32[10036 + ($$090114$lcssa << 2) >> 2] = $33; //@line 14537
    HEAP32[$155 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 14540
    do {
     if (!(HEAP8[10976] | 0)) {
      $173 = $33 + 44 | 0; //@line 14545
      $174 = HEAP32[$173 >> 2] | 0; //@line 14546
      do {
       if (!$174) {
        $189 = 0; //@line 14550
       } else {
        $177 = HEAP32[$174 + 4 >> 2] | 0; //@line 14553
        $AsyncCtx18 = _emscripten_alloc_async_context(44, sp) | 0; //@line 14554
        FUNCTION_TABLE_vii[$177 & 7]($8, $104); //@line 14555
        if (___async) {
         HEAP32[$AsyncCtx18 >> 2] = 177; //@line 14558
         HEAP32[$AsyncCtx18 + 4 >> 2] = $6; //@line 14560
         HEAP32[$AsyncCtx18 + 8 >> 2] = $9; //@line 14562
         HEAP32[$AsyncCtx18 + 12 >> 2] = $173; //@line 14564
         HEAP32[$AsyncCtx18 + 16 >> 2] = $8; //@line 14566
         HEAP32[$AsyncCtx18 + 20 >> 2] = $46; //@line 14568
         HEAP32[$AsyncCtx18 + 24 >> 2] = $104; //@line 14570
         HEAP32[$AsyncCtx18 + 28 >> 2] = $33; //@line 14572
         HEAP32[$AsyncCtx18 + 32 >> 2] = $173; //@line 14574
         HEAP32[$AsyncCtx18 + 36 >> 2] = $63; //@line 14576
         HEAP32[$AsyncCtx18 + 40 >> 2] = $33; //@line 14578
         sp = STACKTOP; //@line 14579
         STACKTOP = sp; //@line 14580
         return 0; //@line 14580
        } else {
         _emscripten_free_async_context($AsyncCtx18 | 0); //@line 14582
         $189 = HEAP32[$173 >> 2] | 0; //@line 14584
         break;
        }
       }
      } while (0);
      $188 = $8 + 12 | 0; //@line 14589
      HEAP32[$188 >> 2] = $189; //@line 14590
      $191 = $9 + 4 | 0; //@line 14592
      HEAP32[$191 >> 2] = 0; //@line 14594
      HEAP32[$191 + 4 >> 2] = 0; //@line 14597
      HEAP32[$9 >> 2] = 3; //@line 14598
      $195 = $9 + 12 | 0; //@line 14599
      HEAP32[$195 >> 2] = 712; //@line 14600
      $AsyncCtx49 = _emscripten_alloc_async_context(48, sp) | 0; //@line 14601
      $196 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $9) | 0; //@line 14602
      if (___async) {
       HEAP32[$AsyncCtx49 >> 2] = 178; //@line 14605
       HEAP32[$AsyncCtx49 + 4 >> 2] = $6; //@line 14607
       HEAP32[$AsyncCtx49 + 8 >> 2] = $9; //@line 14609
       HEAP32[$AsyncCtx49 + 12 >> 2] = $8; //@line 14611
       HEAP32[$AsyncCtx49 + 16 >> 2] = $188; //@line 14613
       HEAP32[$AsyncCtx49 + 20 >> 2] = $46; //@line 14615
       HEAP32[$AsyncCtx49 + 24 >> 2] = $104; //@line 14617
       HEAP32[$AsyncCtx49 + 28 >> 2] = $33; //@line 14619
       HEAP32[$AsyncCtx49 + 32 >> 2] = $173; //@line 14621
       HEAP32[$AsyncCtx49 + 36 >> 2] = $63; //@line 14623
       HEAP32[$AsyncCtx49 + 40 >> 2] = $33; //@line 14625
       HEAP32[$AsyncCtx49 + 44 >> 2] = $195; //@line 14627
       sp = STACKTOP; //@line 14628
       STACKTOP = sp; //@line 14629
       return 0; //@line 14629
      }
      _emscripten_free_async_context($AsyncCtx49 | 0); //@line 14631
      $208 = HEAP32[$195 >> 2] | 0; //@line 14632
      do {
       if ($208 | 0) {
        $211 = HEAP32[$208 + 8 >> 2] | 0; //@line 14637
        $AsyncCtx22 = _emscripten_alloc_async_context(44, sp) | 0; //@line 14638
        FUNCTION_TABLE_vi[$211 & 511]($9); //@line 14639
        if (___async) {
         HEAP32[$AsyncCtx22 >> 2] = 179; //@line 14642
         HEAP32[$AsyncCtx22 + 4 >> 2] = $6; //@line 14644
         HEAP32[$AsyncCtx22 + 8 >> 2] = $8; //@line 14646
         HEAP32[$AsyncCtx22 + 12 >> 2] = $196; //@line 14648
         HEAP32[$AsyncCtx22 + 16 >> 2] = $188; //@line 14650
         HEAP32[$AsyncCtx22 + 20 >> 2] = $46; //@line 14652
         HEAP32[$AsyncCtx22 + 24 >> 2] = $104; //@line 14654
         HEAP32[$AsyncCtx22 + 28 >> 2] = $33; //@line 14656
         HEAP32[$AsyncCtx22 + 32 >> 2] = $173; //@line 14658
         HEAP32[$AsyncCtx22 + 36 >> 2] = $63; //@line 14660
         HEAP32[$AsyncCtx22 + 40 >> 2] = $33; //@line 14662
         sp = STACKTOP; //@line 14663
         STACKTOP = sp; //@line 14664
         return 0; //@line 14664
        } else {
         _emscripten_free_async_context($AsyncCtx22 | 0); //@line 14666
         break;
        }
       }
      } while (0);
      $222 = ($196 | 0) == 0; //@line 14671
      $223 = HEAP32[$188 >> 2] | 0; //@line 14672
      do {
       if ($223 | 0) {
        $226 = HEAP32[$223 + 8 >> 2] | 0; //@line 14677
        $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14678
        FUNCTION_TABLE_vi[$226 & 511]($8); //@line 14679
        if (___async) {
         HEAP32[$AsyncCtx26 >> 2] = 180; //@line 14682
         HEAP32[$AsyncCtx26 + 4 >> 2] = $6; //@line 14684
         HEAP32[$AsyncCtx26 + 8 >> 2] = $46; //@line 14686
         HEAP32[$AsyncCtx26 + 12 >> 2] = $104; //@line 14688
         HEAP32[$AsyncCtx26 + 16 >> 2] = $33; //@line 14690
         HEAP32[$AsyncCtx26 + 20 >> 2] = $173; //@line 14692
         HEAP8[$AsyncCtx26 + 24 >> 0] = $222 & 1; //@line 14695
         HEAP32[$AsyncCtx26 + 28 >> 2] = $63; //@line 14697
         HEAP32[$AsyncCtx26 + 32 >> 2] = $33; //@line 14699
         sp = STACKTOP; //@line 14700
         STACKTOP = sp; //@line 14701
         return 0; //@line 14701
        } else {
         _emscripten_free_async_context($AsyncCtx26 | 0); //@line 14703
         break;
        }
       }
      } while (0);
      if ($222) {
       HEAP8[10976] = 1; //@line 14709
       break;
      }
      $235 = HEAP32[$63 >> 2] | 0; //@line 14712
      if ($235 | 0) {
       __ZdlPv($235); //@line 14715
      }
      $237 = HEAP32[$173 >> 2] | 0; //@line 14717
      do {
       if ($237 | 0) {
        $240 = HEAP32[$237 + 8 >> 2] | 0; //@line 14722
        $AsyncCtx30 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14723
        FUNCTION_TABLE_vi[$240 & 511]($104); //@line 14724
        if (___async) {
         HEAP32[$AsyncCtx30 >> 2] = 181; //@line 14727
         HEAP32[$AsyncCtx30 + 4 >> 2] = $33; //@line 14729
         HEAP32[$AsyncCtx30 + 8 >> 2] = $46; //@line 14731
         HEAP32[$AsyncCtx30 + 12 >> 2] = $6; //@line 14733
         sp = STACKTOP; //@line 14734
         STACKTOP = sp; //@line 14735
         return 0; //@line 14735
        } else {
         _emscripten_free_async_context($AsyncCtx30 | 0); //@line 14737
         break;
        }
       }
      } while (0);
      $245 = HEAP32[$33 + 28 >> 2] | 0; //@line 14743
      do {
       if ($245 | 0) {
        $248 = HEAP32[$245 + 8 >> 2] | 0; //@line 14748
        $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14749
        FUNCTION_TABLE_vi[$248 & 511]($46); //@line 14750
        if (___async) {
         HEAP32[$AsyncCtx34 >> 2] = 182; //@line 14753
         HEAP32[$AsyncCtx34 + 4 >> 2] = $33; //@line 14755
         HEAP32[$AsyncCtx34 + 8 >> 2] = $6; //@line 14757
         sp = STACKTOP; //@line 14758
         STACKTOP = sp; //@line 14759
         return 0; //@line 14759
        } else {
         _emscripten_free_async_context($AsyncCtx34 | 0); //@line 14761
         break;
        }
       }
      } while (0);
      __ZdlPv($33); //@line 14766
      $$3 = -3007; //@line 14767
      break L7;
     }
    } while (0);
    $AsyncCtx46 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14771
    __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 14772
    if (___async) {
     HEAP32[$AsyncCtx46 >> 2] = 183; //@line 14775
     HEAP32[$AsyncCtx46 + 4 >> 2] = $33; //@line 14777
     HEAP32[$AsyncCtx46 + 8 >> 2] = $6; //@line 14779
     sp = STACKTOP; //@line 14780
     STACKTOP = sp; //@line 14781
     return 0; //@line 14781
    } else {
     _emscripten_free_async_context($AsyncCtx46 | 0); //@line 14783
     $$3 = HEAP32[$33 >> 2] | 0; //@line 14785
     break;
    }
   }
  }
 } while (0);
 $$5 = $$3; //@line 14791
 STACKTOP = sp; //@line 14792
 return $$5 | 0; //@line 14792
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4987
 STACKTOP = STACKTOP + 560 | 0; //@line 4988
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 4988
 $6 = sp + 8 | 0; //@line 4989
 $7 = sp; //@line 4990
 $8 = sp + 524 | 0; //@line 4991
 $9 = $8; //@line 4992
 $10 = sp + 512 | 0; //@line 4993
 HEAP32[$7 >> 2] = 0; //@line 4994
 $11 = $10 + 12 | 0; //@line 4995
 ___DOUBLE_BITS_677($1) | 0; //@line 4996
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 5001
  $$0520 = 1; //@line 5001
  $$0521 = 7245; //@line 5001
 } else {
  $$0471 = $1; //@line 5012
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 5012
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 7246 : 7251 : 7248; //@line 5012
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 5014
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 5023
   $31 = $$0520 + 3 | 0; //@line 5028
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 5030
   _out_670($0, $$0521, $$0520); //@line 5031
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 7272 : 7276 : $27 ? 7264 : 7268, 3); //@line 5032
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 5034
   $$sink560 = $31; //@line 5035
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 5038
   $36 = $35 != 0.0; //@line 5039
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 5043
   }
   $39 = $5 | 32; //@line 5045
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 5048
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 5051
    $44 = $$0520 | 2; //@line 5052
    $46 = 12 - $3 | 0; //@line 5054
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 5059
     } else {
      $$0509585 = 8.0; //@line 5061
      $$1508586 = $46; //@line 5061
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 5063
       $$0509585 = $$0509585 * 16.0; //@line 5064
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 5079
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 5084
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 5089
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 5092
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 5095
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 5098
     HEAP8[$68 >> 0] = 48; //@line 5099
     $$0511 = $68; //@line 5100
    } else {
     $$0511 = $66; //@line 5102
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 5109
    $76 = $$0511 + -2 | 0; //@line 5112
    HEAP8[$76 >> 0] = $5 + 15; //@line 5113
    $77 = ($3 | 0) < 1; //@line 5114
    $79 = ($4 & 8 | 0) == 0; //@line 5116
    $$0523 = $8; //@line 5117
    $$2473 = $$1472; //@line 5117
    while (1) {
     $80 = ~~$$2473; //@line 5119
     $86 = $$0523 + 1 | 0; //@line 5125
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[7280 + $80 >> 0]; //@line 5126
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 5129
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 5138
      } else {
       HEAP8[$86 >> 0] = 46; //@line 5141
       $$1524 = $$0523 + 2 | 0; //@line 5142
      }
     } else {
      $$1524 = $86; //@line 5145
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 5149
     }
    }
    $$pre693 = $$1524; //@line 5155
    if (!$3) {
     label = 24; //@line 5157
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 5165
      $$sink = $3 + 2 | 0; //@line 5165
     } else {
      label = 24; //@line 5167
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 5171
     $$pre$phi691Z2D = $101; //@line 5172
     $$sink = $101; //@line 5172
    }
    $104 = $11 - $76 | 0; //@line 5176
    $106 = $104 + $44 + $$sink | 0; //@line 5178
    _pad_676($0, 32, $2, $106, $4); //@line 5179
    _out_670($0, $$0521$, $44); //@line 5180
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 5182
    _out_670($0, $8, $$pre$phi691Z2D); //@line 5183
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 5185
    _out_670($0, $76, $104); //@line 5186
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 5188
    $$sink560 = $106; //@line 5189
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 5193
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 5197
    HEAP32[$7 >> 2] = $113; //@line 5198
    $$3 = $35 * 268435456.0; //@line 5199
    $$pr = $113; //@line 5199
   } else {
    $$3 = $35; //@line 5202
    $$pr = HEAP32[$7 >> 2] | 0; //@line 5202
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 5206
   $$0498 = $$561; //@line 5207
   $$4 = $$3; //@line 5207
   do {
    $116 = ~~$$4 >>> 0; //@line 5209
    HEAP32[$$0498 >> 2] = $116; //@line 5210
    $$0498 = $$0498 + 4 | 0; //@line 5211
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 5214
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 5224
    $$1499662 = $$0498; //@line 5224
    $124 = $$pr; //@line 5224
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 5227
     $$0488655 = $$1499662 + -4 | 0; //@line 5228
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 5231
     } else {
      $$0488657 = $$0488655; //@line 5233
      $$0497656 = 0; //@line 5233
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 5236
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 5238
       $131 = tempRet0; //@line 5239
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 5240
       HEAP32[$$0488657 >> 2] = $132; //@line 5242
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 5243
       $$0488657 = $$0488657 + -4 | 0; //@line 5245
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 5255
      } else {
       $138 = $$1482663 + -4 | 0; //@line 5257
       HEAP32[$138 >> 2] = $$0497656; //@line 5258
       $$2483$ph = $138; //@line 5259
      }
     }
     $$2500 = $$1499662; //@line 5262
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 5268
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 5272
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 5278
     HEAP32[$7 >> 2] = $144; //@line 5279
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 5282
      $$1499662 = $$2500; //@line 5282
      $124 = $144; //@line 5282
     } else {
      $$1482$lcssa = $$2483$ph; //@line 5284
      $$1499$lcssa = $$2500; //@line 5284
      $$pr566 = $144; //@line 5284
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 5289
    $$1499$lcssa = $$0498; //@line 5289
    $$pr566 = $$pr; //@line 5289
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 5295
    $150 = ($39 | 0) == 102; //@line 5296
    $$3484650 = $$1482$lcssa; //@line 5297
    $$3501649 = $$1499$lcssa; //@line 5297
    $152 = $$pr566; //@line 5297
    while (1) {
     $151 = 0 - $152 | 0; //@line 5299
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 5301
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 5305
      $161 = 1e9 >>> $154; //@line 5306
      $$0487644 = 0; //@line 5307
      $$1489643 = $$3484650; //@line 5307
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 5309
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 5313
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 5314
       $$1489643 = $$1489643 + 4 | 0; //@line 5315
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 5326
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 5329
       $$4502 = $$3501649; //@line 5329
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 5332
       $$$3484700 = $$$3484; //@line 5333
       $$4502 = $$3501649 + 4 | 0; //@line 5333
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 5340
      $$4502 = $$3501649; //@line 5340
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 5342
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 5349
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 5351
     HEAP32[$7 >> 2] = $152; //@line 5352
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 5357
      $$3501$lcssa = $$$4502; //@line 5357
      break;
     } else {
      $$3484650 = $$$3484700; //@line 5355
      $$3501649 = $$$4502; //@line 5355
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 5362
    $$3501$lcssa = $$1499$lcssa; //@line 5362
   }
   $185 = $$561; //@line 5365
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 5370
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 5371
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 5374
    } else {
     $$0514639 = $189; //@line 5376
     $$0530638 = 10; //@line 5376
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 5378
      $193 = $$0514639 + 1 | 0; //@line 5379
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 5382
       break;
      } else {
       $$0514639 = $193; //@line 5385
      }
     }
    }
   } else {
    $$1515 = 0; //@line 5390
   }
   $198 = ($39 | 0) == 103; //@line 5395
   $199 = ($$540 | 0) != 0; //@line 5396
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 5399
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 5408
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 5411
    $213 = ($209 | 0) % 9 | 0; //@line 5412
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 5415
     $$1531632 = 10; //@line 5415
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 5418
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 5421
       $$1531632 = $215; //@line 5421
      } else {
       $$1531$lcssa = $215; //@line 5423
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 5428
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 5430
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 5431
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 5434
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 5437
     $$4518 = $$1515; //@line 5437
     $$8 = $$3484$lcssa; //@line 5437
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 5442
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 5443
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 5448
     if (!$$0520) {
      $$1467 = $$$564; //@line 5451
      $$1469 = $$543; //@line 5451
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 5454
      $$1467 = $230 ? -$$$564 : $$$564; //@line 5459
      $$1469 = $230 ? -$$543 : $$543; //@line 5459
     }
     $233 = $217 - $218 | 0; //@line 5461
     HEAP32[$212 >> 2] = $233; //@line 5462
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 5466
      HEAP32[$212 >> 2] = $236; //@line 5467
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 5470
       $$sink547625 = $212; //@line 5470
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 5472
        HEAP32[$$sink547625 >> 2] = 0; //@line 5473
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 5476
         HEAP32[$240 >> 2] = 0; //@line 5477
         $$6 = $240; //@line 5478
        } else {
         $$6 = $$5486626; //@line 5480
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 5483
        HEAP32[$238 >> 2] = $242; //@line 5484
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 5487
         $$sink547625 = $238; //@line 5487
        } else {
         $$5486$lcssa = $$6; //@line 5489
         $$sink547$lcssa = $238; //@line 5489
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 5494
       $$sink547$lcssa = $212; //@line 5494
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 5499
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 5500
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 5503
       $$4518 = $247; //@line 5503
       $$8 = $$5486$lcssa; //@line 5503
      } else {
       $$2516621 = $247; //@line 5505
       $$2532620 = 10; //@line 5505
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 5507
        $251 = $$2516621 + 1 | 0; //@line 5508
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 5511
         $$4518 = $251; //@line 5511
         $$8 = $$5486$lcssa; //@line 5511
         break;
        } else {
         $$2516621 = $251; //@line 5514
        }
       }
      }
     } else {
      $$4492 = $212; //@line 5519
      $$4518 = $$1515; //@line 5519
      $$8 = $$3484$lcssa; //@line 5519
     }
    }
    $253 = $$4492 + 4 | 0; //@line 5522
    $$5519$ph = $$4518; //@line 5525
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 5525
    $$9$ph = $$8; //@line 5525
   } else {
    $$5519$ph = $$1515; //@line 5527
    $$7505$ph = $$3501$lcssa; //@line 5527
    $$9$ph = $$3484$lcssa; //@line 5527
   }
   $$7505 = $$7505$ph; //@line 5529
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 5533
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 5536
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 5540
    } else {
     $$lcssa675 = 1; //@line 5542
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 5546
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 5551
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 5559
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 5559
     } else {
      $$0479 = $5 + -2 | 0; //@line 5563
      $$2476 = $$540$ + -1 | 0; //@line 5563
     }
     $267 = $4 & 8; //@line 5565
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 5570
       if (!$270) {
        $$2529 = 9; //@line 5573
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 5578
         $$3533616 = 10; //@line 5578
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 5580
          $275 = $$1528617 + 1 | 0; //@line 5581
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 5587
           break;
          } else {
           $$1528617 = $275; //@line 5585
          }
         }
        } else {
         $$2529 = 0; //@line 5592
        }
       }
      } else {
       $$2529 = 9; //@line 5596
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 5604
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 5606
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 5608
       $$1480 = $$0479; //@line 5611
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 5611
       $$pre$phi698Z2D = 0; //@line 5611
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 5615
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 5617
       $$1480 = $$0479; //@line 5620
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 5620
       $$pre$phi698Z2D = 0; //@line 5620
       break;
      }
     } else {
      $$1480 = $$0479; //@line 5624
      $$3477 = $$2476; //@line 5624
      $$pre$phi698Z2D = $267; //@line 5624
     }
    } else {
     $$1480 = $5; //@line 5628
     $$3477 = $$540; //@line 5628
     $$pre$phi698Z2D = $4 & 8; //@line 5628
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 5631
   $294 = ($292 | 0) != 0 & 1; //@line 5633
   $296 = ($$1480 | 32 | 0) == 102; //@line 5635
   if ($296) {
    $$2513 = 0; //@line 5639
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 5639
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 5642
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 5645
    $304 = $11; //@line 5646
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 5651
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 5653
      HEAP8[$308 >> 0] = 48; //@line 5654
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 5659
      } else {
       $$1512$lcssa = $308; //@line 5661
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 5666
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 5673
    $318 = $$1512$lcssa + -2 | 0; //@line 5675
    HEAP8[$318 >> 0] = $$1480; //@line 5676
    $$2513 = $318; //@line 5679
    $$pn = $304 - $318 | 0; //@line 5679
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 5684
   _pad_676($0, 32, $2, $323, $4); //@line 5685
   _out_670($0, $$0521, $$0520); //@line 5686
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 5688
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 5691
    $326 = $8 + 9 | 0; //@line 5692
    $327 = $326; //@line 5693
    $328 = $8 + 8 | 0; //@line 5694
    $$5493600 = $$0496$$9; //@line 5695
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 5698
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 5703
       $$1465 = $328; //@line 5704
      } else {
       $$1465 = $330; //@line 5706
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 5713
       $$0464597 = $330; //@line 5714
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 5716
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 5719
        } else {
         $$1465 = $335; //@line 5721
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 5726
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 5731
     $$5493600 = $$5493600 + 4 | 0; //@line 5732
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 7296, 1); //@line 5742
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 5748
     $$6494592 = $$5493600; //@line 5748
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 5751
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 5756
       $$0463587 = $347; //@line 5757
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 5759
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 5762
        } else {
         $$0463$lcssa = $351; //@line 5764
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 5769
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 5773
      $$6494592 = $$6494592 + 4 | 0; //@line 5774
      $356 = $$4478593 + -9 | 0; //@line 5775
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 5782
       break;
      } else {
       $$4478593 = $356; //@line 5780
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 5787
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 5790
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 5793
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 5796
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 5797
     $365 = $363; //@line 5798
     $366 = 0 - $9 | 0; //@line 5799
     $367 = $8 + 8 | 0; //@line 5800
     $$5605 = $$3477; //@line 5801
     $$7495604 = $$9$ph; //@line 5801
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 5804
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 5807
       $$0 = $367; //@line 5808
      } else {
       $$0 = $369; //@line 5810
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 5815
        _out_670($0, $$0, 1); //@line 5816
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 5820
         break;
        }
        _out_670($0, 7296, 1); //@line 5823
        $$2 = $375; //@line 5824
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 5828
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 5833
        $$1601 = $$0; //@line 5834
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 5836
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 5839
         } else {
          $$2 = $373; //@line 5841
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 5848
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 5851
      $381 = $$5605 - $378 | 0; //@line 5852
      $$7495604 = $$7495604 + 4 | 0; //@line 5853
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 5860
       break;
      } else {
       $$5605 = $381; //@line 5858
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 5865
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 5868
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 5872
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 5875
   $$sink560 = $323; //@line 5876
  }
 } while (0);
 STACKTOP = sp; //@line 5881
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 5881
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_218($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $107 = 0, $108 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $125 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $173 = 0, $175 = 0, $18 = 0, $183 = 0, $186 = 0, $188 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $209 = 0, $212 = 0, $214 = 0, $22 = 0, $227 = 0, $228 = 0, $229 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31654
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31656
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31658
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31660
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31662
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31664
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31666
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31668
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31670
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31672
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31674
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31676
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31678
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31680
 $26 = $2 + 12 | 0; //@line 31681
 HEAP32[$26 >> 2] = $AsyncRetVal; //@line 31682
 if (!$AsyncRetVal) {
  __ZdlPv($2); //@line 31685
  HEAP32[___async_retval >> 2] = -3007; //@line 31687
  return;
 }
 _strcpy($AsyncRetVal, $24) | 0; //@line 31690
 HEAP32[$2 + 4 >> 2] = -3019; //@line 31692
 do {
  if (($18 | 0) != ($22 | 0)) {
   $30 = $2 + 28 | 0; //@line 31696
   $31 = HEAP32[$30 >> 2] | 0; //@line 31697
   if ($31 | 0) {
    $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 31701
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 31702
    FUNCTION_TABLE_vi[$34 & 511]($18); //@line 31703
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 173; //@line 31706
     $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 31707
     HEAP32[$35 >> 2] = $2; //@line 31708
     $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 31709
     HEAP32[$36 >> 2] = $4; //@line 31710
     $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 31711
     HEAP32[$37 >> 2] = $6; //@line 31712
     $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 31713
     HEAP32[$38 >> 2] = $8; //@line 31714
     $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 31715
     HEAP32[$39 >> 2] = $10; //@line 31716
     $40 = $ReallocAsyncCtx2 + 24 | 0; //@line 31717
     HEAP32[$40 >> 2] = $12; //@line 31718
     $41 = $ReallocAsyncCtx2 + 28 | 0; //@line 31719
     HEAP32[$41 >> 2] = $14; //@line 31720
     $42 = $ReallocAsyncCtx2 + 32 | 0; //@line 31721
     HEAP32[$42 >> 2] = $16; //@line 31722
     $43 = $ReallocAsyncCtx2 + 36 | 0; //@line 31723
     HEAP32[$43 >> 2] = $18; //@line 31724
     $44 = $ReallocAsyncCtx2 + 40 | 0; //@line 31725
     HEAP32[$44 >> 2] = $30; //@line 31726
     $45 = $ReallocAsyncCtx2 + 44 | 0; //@line 31727
     HEAP32[$45 >> 2] = $20; //@line 31728
     $46 = $ReallocAsyncCtx2 + 48 | 0; //@line 31729
     HEAP32[$46 >> 2] = $22; //@line 31730
     $47 = $ReallocAsyncCtx2 + 52 | 0; //@line 31731
     HEAP32[$47 >> 2] = $26; //@line 31732
     sp = STACKTOP; //@line 31733
     return;
    }
    ___async_unwind = 0; //@line 31736
    HEAP32[$ReallocAsyncCtx2 >> 2] = 173; //@line 31737
    $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 31738
    HEAP32[$35 >> 2] = $2; //@line 31739
    $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 31740
    HEAP32[$36 >> 2] = $4; //@line 31741
    $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 31742
    HEAP32[$37 >> 2] = $6; //@line 31743
    $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 31744
    HEAP32[$38 >> 2] = $8; //@line 31745
    $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 31746
    HEAP32[$39 >> 2] = $10; //@line 31747
    $40 = $ReallocAsyncCtx2 + 24 | 0; //@line 31748
    HEAP32[$40 >> 2] = $12; //@line 31749
    $41 = $ReallocAsyncCtx2 + 28 | 0; //@line 31750
    HEAP32[$41 >> 2] = $14; //@line 31751
    $42 = $ReallocAsyncCtx2 + 32 | 0; //@line 31752
    HEAP32[$42 >> 2] = $16; //@line 31753
    $43 = $ReallocAsyncCtx2 + 36 | 0; //@line 31754
    HEAP32[$43 >> 2] = $18; //@line 31755
    $44 = $ReallocAsyncCtx2 + 40 | 0; //@line 31756
    HEAP32[$44 >> 2] = $30; //@line 31757
    $45 = $ReallocAsyncCtx2 + 44 | 0; //@line 31758
    HEAP32[$45 >> 2] = $20; //@line 31759
    $46 = $ReallocAsyncCtx2 + 48 | 0; //@line 31760
    HEAP32[$46 >> 2] = $22; //@line 31761
    $47 = $ReallocAsyncCtx2 + 52 | 0; //@line 31762
    HEAP32[$47 >> 2] = $26; //@line 31763
    sp = STACKTOP; //@line 31764
    return;
   }
   $48 = $22 + 12 | 0; //@line 31767
   $49 = HEAP32[$48 >> 2] | 0; //@line 31768
   if (!$49) {
    HEAP32[$30 >> 2] = 0; //@line 31771
    break;
   }
   $52 = HEAP32[$49 + 4 >> 2] | 0; //@line 31775
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 31776
   FUNCTION_TABLE_vii[$52 & 7]($18, $22); //@line 31777
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 31780
    $53 = $ReallocAsyncCtx3 + 4 | 0; //@line 31781
    HEAP32[$53 >> 2] = $2; //@line 31782
    $54 = $ReallocAsyncCtx3 + 8 | 0; //@line 31783
    HEAP32[$54 >> 2] = $4; //@line 31784
    $55 = $ReallocAsyncCtx3 + 12 | 0; //@line 31785
    HEAP32[$55 >> 2] = $6; //@line 31786
    $56 = $ReallocAsyncCtx3 + 16 | 0; //@line 31787
    HEAP32[$56 >> 2] = $8; //@line 31788
    $57 = $ReallocAsyncCtx3 + 20 | 0; //@line 31789
    HEAP32[$57 >> 2] = $10; //@line 31790
    $58 = $ReallocAsyncCtx3 + 24 | 0; //@line 31791
    HEAP32[$58 >> 2] = $12; //@line 31792
    $59 = $ReallocAsyncCtx3 + 28 | 0; //@line 31793
    HEAP32[$59 >> 2] = $48; //@line 31794
    $60 = $ReallocAsyncCtx3 + 32 | 0; //@line 31795
    HEAP32[$60 >> 2] = $14; //@line 31796
    $61 = $ReallocAsyncCtx3 + 36 | 0; //@line 31797
    HEAP32[$61 >> 2] = $16; //@line 31798
    $62 = $ReallocAsyncCtx3 + 40 | 0; //@line 31799
    HEAP32[$62 >> 2] = $18; //@line 31800
    $63 = $ReallocAsyncCtx3 + 44 | 0; //@line 31801
    HEAP32[$63 >> 2] = $30; //@line 31802
    $64 = $ReallocAsyncCtx3 + 48 | 0; //@line 31803
    HEAP32[$64 >> 2] = $20; //@line 31804
    $65 = $ReallocAsyncCtx3 + 52 | 0; //@line 31805
    HEAP32[$65 >> 2] = $26; //@line 31806
    sp = STACKTOP; //@line 31807
    return;
   }
   ___async_unwind = 0; //@line 31810
   HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 31811
   $53 = $ReallocAsyncCtx3 + 4 | 0; //@line 31812
   HEAP32[$53 >> 2] = $2; //@line 31813
   $54 = $ReallocAsyncCtx3 + 8 | 0; //@line 31814
   HEAP32[$54 >> 2] = $4; //@line 31815
   $55 = $ReallocAsyncCtx3 + 12 | 0; //@line 31816
   HEAP32[$55 >> 2] = $6; //@line 31817
   $56 = $ReallocAsyncCtx3 + 16 | 0; //@line 31818
   HEAP32[$56 >> 2] = $8; //@line 31819
   $57 = $ReallocAsyncCtx3 + 20 | 0; //@line 31820
   HEAP32[$57 >> 2] = $10; //@line 31821
   $58 = $ReallocAsyncCtx3 + 24 | 0; //@line 31822
   HEAP32[$58 >> 2] = $12; //@line 31823
   $59 = $ReallocAsyncCtx3 + 28 | 0; //@line 31824
   HEAP32[$59 >> 2] = $48; //@line 31825
   $60 = $ReallocAsyncCtx3 + 32 | 0; //@line 31826
   HEAP32[$60 >> 2] = $14; //@line 31827
   $61 = $ReallocAsyncCtx3 + 36 | 0; //@line 31828
   HEAP32[$61 >> 2] = $16; //@line 31829
   $62 = $ReallocAsyncCtx3 + 40 | 0; //@line 31830
   HEAP32[$62 >> 2] = $18; //@line 31831
   $63 = $ReallocAsyncCtx3 + 44 | 0; //@line 31832
   HEAP32[$63 >> 2] = $30; //@line 31833
   $64 = $ReallocAsyncCtx3 + 48 | 0; //@line 31834
   HEAP32[$64 >> 2] = $20; //@line 31835
   $65 = $ReallocAsyncCtx3 + 52 | 0; //@line 31836
   HEAP32[$65 >> 2] = $26; //@line 31837
   sp = STACKTOP; //@line 31838
   return;
  }
 } while (0);
 $66 = $2 + 32 | 0; //@line 31842
 do {
  if (($66 | 0) != ($12 | 0)) {
   $68 = $2 + 44 | 0; //@line 31846
   $69 = HEAP32[$68 >> 2] | 0; //@line 31847
   if ($69 | 0) {
    $72 = HEAP32[$69 + 8 >> 2] | 0; //@line 31851
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 31852
    FUNCTION_TABLE_vi[$72 & 511]($66); //@line 31853
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 31856
     $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 31857
     HEAP32[$73 >> 2] = $2; //@line 31858
     $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 31859
     HEAP32[$74 >> 2] = $4; //@line 31860
     $75 = $ReallocAsyncCtx4 + 12 | 0; //@line 31861
     HEAP32[$75 >> 2] = $6; //@line 31862
     $76 = $ReallocAsyncCtx4 + 16 | 0; //@line 31863
     HEAP32[$76 >> 2] = $8; //@line 31864
     $77 = $ReallocAsyncCtx4 + 20 | 0; //@line 31865
     HEAP32[$77 >> 2] = $10; //@line 31866
     $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 31867
     HEAP32[$78 >> 2] = $12; //@line 31868
     $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 31869
     HEAP32[$79 >> 2] = $68; //@line 31870
     $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 31871
     HEAP32[$80 >> 2] = $66; //@line 31872
     $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 31873
     HEAP32[$81 >> 2] = $14; //@line 31874
     $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 31875
     HEAP32[$82 >> 2] = $16; //@line 31876
     $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 31877
     HEAP32[$83 >> 2] = $18; //@line 31878
     $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 31879
     HEAP32[$84 >> 2] = $20; //@line 31880
     $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 31881
     HEAP32[$85 >> 2] = $26; //@line 31882
     sp = STACKTOP; //@line 31883
     return;
    }
    ___async_unwind = 0; //@line 31886
    HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 31887
    $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 31888
    HEAP32[$73 >> 2] = $2; //@line 31889
    $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 31890
    HEAP32[$74 >> 2] = $4; //@line 31891
    $75 = $ReallocAsyncCtx4 + 12 | 0; //@line 31892
    HEAP32[$75 >> 2] = $6; //@line 31893
    $76 = $ReallocAsyncCtx4 + 16 | 0; //@line 31894
    HEAP32[$76 >> 2] = $8; //@line 31895
    $77 = $ReallocAsyncCtx4 + 20 | 0; //@line 31896
    HEAP32[$77 >> 2] = $10; //@line 31897
    $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 31898
    HEAP32[$78 >> 2] = $12; //@line 31899
    $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 31900
    HEAP32[$79 >> 2] = $68; //@line 31901
    $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 31902
    HEAP32[$80 >> 2] = $66; //@line 31903
    $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 31904
    HEAP32[$81 >> 2] = $14; //@line 31905
    $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 31906
    HEAP32[$82 >> 2] = $16; //@line 31907
    $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 31908
    HEAP32[$83 >> 2] = $18; //@line 31909
    $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 31910
    HEAP32[$84 >> 2] = $20; //@line 31911
    $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 31912
    HEAP32[$85 >> 2] = $26; //@line 31913
    sp = STACKTOP; //@line 31914
    return;
   }
   $86 = $12 + 12 | 0; //@line 31917
   $87 = HEAP32[$86 >> 2] | 0; //@line 31918
   if (!$87) {
    HEAP32[$68 >> 2] = 0; //@line 31921
    break;
   }
   $90 = HEAP32[$87 + 4 >> 2] | 0; //@line 31925
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 31926
   FUNCTION_TABLE_vii[$90 & 7]($66, $12); //@line 31927
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 31930
    $91 = $ReallocAsyncCtx5 + 4 | 0; //@line 31931
    HEAP32[$91 >> 2] = $2; //@line 31932
    $92 = $ReallocAsyncCtx5 + 8 | 0; //@line 31933
    HEAP32[$92 >> 2] = $4; //@line 31934
    $93 = $ReallocAsyncCtx5 + 12 | 0; //@line 31935
    HEAP32[$93 >> 2] = $6; //@line 31936
    $94 = $ReallocAsyncCtx5 + 16 | 0; //@line 31937
    HEAP32[$94 >> 2] = $8; //@line 31938
    $95 = $ReallocAsyncCtx5 + 20 | 0; //@line 31939
    HEAP32[$95 >> 2] = $10; //@line 31940
    $96 = $ReallocAsyncCtx5 + 24 | 0; //@line 31941
    HEAP32[$96 >> 2] = $68; //@line 31942
    $97 = $ReallocAsyncCtx5 + 28 | 0; //@line 31943
    HEAP32[$97 >> 2] = $14; //@line 31944
    $98 = $ReallocAsyncCtx5 + 32 | 0; //@line 31945
    HEAP32[$98 >> 2] = $16; //@line 31946
    $99 = $ReallocAsyncCtx5 + 36 | 0; //@line 31947
    HEAP32[$99 >> 2] = $86; //@line 31948
    $100 = $ReallocAsyncCtx5 + 40 | 0; //@line 31949
    HEAP32[$100 >> 2] = $66; //@line 31950
    $101 = $ReallocAsyncCtx5 + 44 | 0; //@line 31951
    HEAP32[$101 >> 2] = $18; //@line 31952
    $102 = $ReallocAsyncCtx5 + 48 | 0; //@line 31953
    HEAP32[$102 >> 2] = $20; //@line 31954
    $103 = $ReallocAsyncCtx5 + 52 | 0; //@line 31955
    HEAP32[$103 >> 2] = $26; //@line 31956
    sp = STACKTOP; //@line 31957
    return;
   }
   ___async_unwind = 0; //@line 31960
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 31961
   $91 = $ReallocAsyncCtx5 + 4 | 0; //@line 31962
   HEAP32[$91 >> 2] = $2; //@line 31963
   $92 = $ReallocAsyncCtx5 + 8 | 0; //@line 31964
   HEAP32[$92 >> 2] = $4; //@line 31965
   $93 = $ReallocAsyncCtx5 + 12 | 0; //@line 31966
   HEAP32[$93 >> 2] = $6; //@line 31967
   $94 = $ReallocAsyncCtx5 + 16 | 0; //@line 31968
   HEAP32[$94 >> 2] = $8; //@line 31969
   $95 = $ReallocAsyncCtx5 + 20 | 0; //@line 31970
   HEAP32[$95 >> 2] = $10; //@line 31971
   $96 = $ReallocAsyncCtx5 + 24 | 0; //@line 31972
   HEAP32[$96 >> 2] = $68; //@line 31973
   $97 = $ReallocAsyncCtx5 + 28 | 0; //@line 31974
   HEAP32[$97 >> 2] = $14; //@line 31975
   $98 = $ReallocAsyncCtx5 + 32 | 0; //@line 31976
   HEAP32[$98 >> 2] = $16; //@line 31977
   $99 = $ReallocAsyncCtx5 + 36 | 0; //@line 31978
   HEAP32[$99 >> 2] = $86; //@line 31979
   $100 = $ReallocAsyncCtx5 + 40 | 0; //@line 31980
   HEAP32[$100 >> 2] = $66; //@line 31981
   $101 = $ReallocAsyncCtx5 + 44 | 0; //@line 31982
   HEAP32[$101 >> 2] = $18; //@line 31983
   $102 = $ReallocAsyncCtx5 + 48 | 0; //@line 31984
   HEAP32[$102 >> 2] = $20; //@line 31985
   $103 = $ReallocAsyncCtx5 + 52 | 0; //@line 31986
   HEAP32[$103 >> 2] = $26; //@line 31987
   sp = STACKTOP; //@line 31988
   return;
  }
 } while (0);
 HEAP32[$2 + 8 >> 2] = $4; //@line 31993
 HEAP32[$2 + 48 >> 2] = $6; //@line 31995
 HEAP32[$2 + 52 >> 2] = $8; //@line 31997
 $107 = $2 + 56 | 0; //@line 31998
 HEAP32[$107 >> 2] = 0; //@line 31999
 $108 = $2 + 60 | 0; //@line 32000
 HEAP32[$108 >> 2] = 0; //@line 32001
 HEAP32[$2 + 64 >> 2] = 0; //@line 32003
 HEAP8[$2 + 82 >> 0] = 0; //@line 32005
 HEAP8[$2 + 83 >> 0] = 1; //@line 32007
 HEAP8[$2 + 84 >> 0] = 3; //@line 32009
 HEAP8[$2 + 85 >> 0] = 0; //@line 32011
 HEAP16[$2 + 80 >> 1] = 0; //@line 32013
 HEAP32[$2 + 76 >> 2] = 0; //@line 32015
 $116 = $2 + 72 | 0; //@line 32016
 HEAP32[$116 >> 2] = 15500; //@line 32017
 HEAP8[$2 + 86 >> 0] = 0; //@line 32019
 HEAP32[$2 + 88 >> 2] = 0; //@line 32021
 $119 = HEAP32[177] | 0; //@line 32022
 HEAP32[177] = $119 + 1; //@line 32024
 HEAP32[$2 >> 2] = ($119 | 0) > 32767 ? 1 : $119; //@line 32027
 $122 = HEAP32[2509] | 0; //@line 32028
 if (!$122) {
  $$1 = 0; //@line 32031
  $173 = 0; //@line 32031
 } else {
  $125 = HEAP32[$122 + 56 >> 2] | 0; //@line 32034
  if (!$125) {
   $$1 = 1; //@line 32037
   $173 = 0; //@line 32037
  } else {
   if ((HEAP32[$122 + 8 >> 2] | 0) == ($4 | 0)) {
    HEAP32[$107 >> 2] = $125; //@line 32043
    HEAP32[$108 >> 2] = HEAP32[$122 + 60 >> 2]; //@line 32046
    $$1 = 1; //@line 32047
    $173 = $125; //@line 32047
   } else {
    $$1 = 1; //@line 32049
    $173 = 0; //@line 32049
   }
  }
 }
 $132 = HEAP32[2510] | 0; //@line 32053
 if (!$132) {
  $$1$1 = $$1; //@line 32056
  $186 = $173; //@line 32056
 } else {
  if (!$173) {
   $175 = HEAP32[$132 + 56 >> 2] | 0; //@line 32061
   if (!$175) {
    $227 = 0; //@line 32064
   } else {
    if ((HEAP32[$132 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$107 >> 2] = $175; //@line 32070
     HEAP32[$108 >> 2] = HEAP32[$132 + 60 >> 2]; //@line 32073
     $227 = $175; //@line 32074
    } else {
     $227 = 0; //@line 32076
    }
   }
  } else {
   $227 = $173; //@line 32080
  }
  $$1$1 = $$1 + 1 | 0; //@line 32083
  $186 = $227; //@line 32083
 }
 $183 = HEAP32[2511] | 0; //@line 32085
 if (!$183) {
  $$1$2 = $$1$1; //@line 32088
  $199 = $186; //@line 32088
 } else {
  if (!$186) {
   $188 = HEAP32[$183 + 56 >> 2] | 0; //@line 32093
   if (!$188) {
    $228 = 0; //@line 32096
   } else {
    if ((HEAP32[$183 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$107 >> 2] = $188; //@line 32102
     HEAP32[$108 >> 2] = HEAP32[$183 + 60 >> 2]; //@line 32105
     $228 = $188; //@line 32106
    } else {
     $228 = 0; //@line 32108
    }
   }
  } else {
   $228 = $186; //@line 32112
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 32115
  $199 = $228; //@line 32115
 }
 $196 = HEAP32[2512] | 0; //@line 32117
 if (!$196) {
  $$1$3 = $$1$2; //@line 32120
  $212 = $199; //@line 32120
 } else {
  if (!$199) {
   $201 = HEAP32[$196 + 56 >> 2] | 0; //@line 32125
   if (!$201) {
    $229 = 0; //@line 32128
   } else {
    if ((HEAP32[$196 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$107 >> 2] = $201; //@line 32134
     HEAP32[$108 >> 2] = HEAP32[$196 + 60 >> 2]; //@line 32137
     $229 = $201; //@line 32138
    } else {
     $229 = 0; //@line 32140
    }
   }
  } else {
   $229 = $199; //@line 32144
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 32147
  $212 = $229; //@line 32147
 }
 $209 = HEAP32[2513] | 0; //@line 32149
 if (!$209) {
  $$1$4 = $$1$3; //@line 32152
 } else {
  if (!$212) {
   $214 = HEAP32[$209 + 56 >> 2] | 0; //@line 32157
   if ($214 | 0) {
    if ((HEAP32[$209 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$107 >> 2] = $214; //@line 32164
     HEAP32[$108 >> 2] = HEAP32[$209 + 60 >> 2]; //@line 32167
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 32172
 }
 HEAP32[10036 + ($20 << 2) >> 2] = $2; //@line 32175
 HEAP32[$116 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 32178
 if (HEAP8[10976] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 32182
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 32183
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 32186
   $169 = $ReallocAsyncCtx13 + 4 | 0; //@line 32187
   HEAP32[$169 >> 2] = $2; //@line 32188
   $170 = $ReallocAsyncCtx13 + 8 | 0; //@line 32189
   HEAP32[$170 >> 2] = $10; //@line 32190
   sp = STACKTOP; //@line 32191
   return;
  }
  ___async_unwind = 0; //@line 32194
  HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 32195
  $169 = $ReallocAsyncCtx13 + 4 | 0; //@line 32196
  HEAP32[$169 >> 2] = $2; //@line 32197
  $170 = $ReallocAsyncCtx13 + 8 | 0; //@line 32198
  HEAP32[$170 >> 2] = $10; //@line 32199
  sp = STACKTOP; //@line 32200
  return;
 }
 $134 = $2 + 44 | 0; //@line 32203
 $135 = HEAP32[$134 >> 2] | 0; //@line 32204
 if (!$135) {
  $149 = $16 + 12 | 0; //@line 32207
  HEAP32[$149 >> 2] = 0; //@line 32208
  $151 = $14 + 4 | 0; //@line 32210
  HEAP32[$151 >> 2] = 0; //@line 32212
  HEAP32[$151 + 4 >> 2] = 0; //@line 32215
  HEAP32[$14 >> 2] = 3; //@line 32216
  $155 = $14 + 12 | 0; //@line 32217
  HEAP32[$155 >> 2] = 712; //@line 32218
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 32219
  $156 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 100, $14) | 0; //@line 32220
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 32223
   $157 = $ReallocAsyncCtx14 + 4 | 0; //@line 32224
   HEAP32[$157 >> 2] = $10; //@line 32225
   $158 = $ReallocAsyncCtx14 + 8 | 0; //@line 32226
   HEAP32[$158 >> 2] = $14; //@line 32227
   $159 = $ReallocAsyncCtx14 + 12 | 0; //@line 32228
   HEAP32[$159 >> 2] = $16; //@line 32229
   $160 = $ReallocAsyncCtx14 + 16 | 0; //@line 32230
   HEAP32[$160 >> 2] = $149; //@line 32231
   $161 = $ReallocAsyncCtx14 + 20 | 0; //@line 32232
   HEAP32[$161 >> 2] = $18; //@line 32233
   $162 = $ReallocAsyncCtx14 + 24 | 0; //@line 32234
   HEAP32[$162 >> 2] = $66; //@line 32235
   $163 = $ReallocAsyncCtx14 + 28 | 0; //@line 32236
   HEAP32[$163 >> 2] = $2; //@line 32237
   $164 = $ReallocAsyncCtx14 + 32 | 0; //@line 32238
   HEAP32[$164 >> 2] = $134; //@line 32239
   $165 = $ReallocAsyncCtx14 + 36 | 0; //@line 32240
   HEAP32[$165 >> 2] = $26; //@line 32241
   $166 = $ReallocAsyncCtx14 + 40 | 0; //@line 32242
   HEAP32[$166 >> 2] = $2; //@line 32243
   $167 = $ReallocAsyncCtx14 + 44 | 0; //@line 32244
   HEAP32[$167 >> 2] = $155; //@line 32245
   sp = STACKTOP; //@line 32246
   return;
  }
  HEAP32[___async_retval >> 2] = $156; //@line 32250
  ___async_unwind = 0; //@line 32251
  HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 32252
  $157 = $ReallocAsyncCtx14 + 4 | 0; //@line 32253
  HEAP32[$157 >> 2] = $10; //@line 32254
  $158 = $ReallocAsyncCtx14 + 8 | 0; //@line 32255
  HEAP32[$158 >> 2] = $14; //@line 32256
  $159 = $ReallocAsyncCtx14 + 12 | 0; //@line 32257
  HEAP32[$159 >> 2] = $16; //@line 32258
  $160 = $ReallocAsyncCtx14 + 16 | 0; //@line 32259
  HEAP32[$160 >> 2] = $149; //@line 32260
  $161 = $ReallocAsyncCtx14 + 20 | 0; //@line 32261
  HEAP32[$161 >> 2] = $18; //@line 32262
  $162 = $ReallocAsyncCtx14 + 24 | 0; //@line 32263
  HEAP32[$162 >> 2] = $66; //@line 32264
  $163 = $ReallocAsyncCtx14 + 28 | 0; //@line 32265
  HEAP32[$163 >> 2] = $2; //@line 32266
  $164 = $ReallocAsyncCtx14 + 32 | 0; //@line 32267
  HEAP32[$164 >> 2] = $134; //@line 32268
  $165 = $ReallocAsyncCtx14 + 36 | 0; //@line 32269
  HEAP32[$165 >> 2] = $26; //@line 32270
  $166 = $ReallocAsyncCtx14 + 40 | 0; //@line 32271
  HEAP32[$166 >> 2] = $2; //@line 32272
  $167 = $ReallocAsyncCtx14 + 44 | 0; //@line 32273
  HEAP32[$167 >> 2] = $155; //@line 32274
  sp = STACKTOP; //@line 32275
  return;
 } else {
  $138 = HEAP32[$135 + 4 >> 2] | 0; //@line 32279
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 32280
  FUNCTION_TABLE_vii[$138 & 7]($16, $66); //@line 32281
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 32284
   $139 = $ReallocAsyncCtx6 + 4 | 0; //@line 32285
   HEAP32[$139 >> 2] = $10; //@line 32286
   $140 = $ReallocAsyncCtx6 + 8 | 0; //@line 32287
   HEAP32[$140 >> 2] = $14; //@line 32288
   $141 = $ReallocAsyncCtx6 + 12 | 0; //@line 32289
   HEAP32[$141 >> 2] = $134; //@line 32290
   $142 = $ReallocAsyncCtx6 + 16 | 0; //@line 32291
   HEAP32[$142 >> 2] = $16; //@line 32292
   $143 = $ReallocAsyncCtx6 + 20 | 0; //@line 32293
   HEAP32[$143 >> 2] = $18; //@line 32294
   $144 = $ReallocAsyncCtx6 + 24 | 0; //@line 32295
   HEAP32[$144 >> 2] = $66; //@line 32296
   $145 = $ReallocAsyncCtx6 + 28 | 0; //@line 32297
   HEAP32[$145 >> 2] = $2; //@line 32298
   $146 = $ReallocAsyncCtx6 + 32 | 0; //@line 32299
   HEAP32[$146 >> 2] = $134; //@line 32300
   $147 = $ReallocAsyncCtx6 + 36 | 0; //@line 32301
   HEAP32[$147 >> 2] = $26; //@line 32302
   $148 = $ReallocAsyncCtx6 + 40 | 0; //@line 32303
   HEAP32[$148 >> 2] = $2; //@line 32304
   sp = STACKTOP; //@line 32305
   return;
  }
  ___async_unwind = 0; //@line 32308
  HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 32309
  $139 = $ReallocAsyncCtx6 + 4 | 0; //@line 32310
  HEAP32[$139 >> 2] = $10; //@line 32311
  $140 = $ReallocAsyncCtx6 + 8 | 0; //@line 32312
  HEAP32[$140 >> 2] = $14; //@line 32313
  $141 = $ReallocAsyncCtx6 + 12 | 0; //@line 32314
  HEAP32[$141 >> 2] = $134; //@line 32315
  $142 = $ReallocAsyncCtx6 + 16 | 0; //@line 32316
  HEAP32[$142 >> 2] = $16; //@line 32317
  $143 = $ReallocAsyncCtx6 + 20 | 0; //@line 32318
  HEAP32[$143 >> 2] = $18; //@line 32319
  $144 = $ReallocAsyncCtx6 + 24 | 0; //@line 32320
  HEAP32[$144 >> 2] = $66; //@line 32321
  $145 = $ReallocAsyncCtx6 + 28 | 0; //@line 32322
  HEAP32[$145 >> 2] = $2; //@line 32323
  $146 = $ReallocAsyncCtx6 + 32 | 0; //@line 32324
  HEAP32[$146 >> 2] = $134; //@line 32325
  $147 = $ReallocAsyncCtx6 + 36 | 0; //@line 32326
  HEAP32[$147 >> 2] = $26; //@line 32327
  $148 = $ReallocAsyncCtx6 + 40 | 0; //@line 32328
  HEAP32[$148 >> 2] = $2; //@line 32329
  sp = STACKTOP; //@line 32330
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_4($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1107 = 0, $$byval_copy = 0, $$byval_copy24 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10164
 STACKTOP = STACKTOP + 48 | 0; //@line 10165
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10165
 $$byval_copy24 = sp + 20 | 0; //@line 10166
 $$byval_copy = sp; //@line 10167
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10169
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10171
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10173
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10175
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10177
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10179
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10181
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10183
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10185
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10187
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10189
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10191
 $26 = HEAP8[$0 + 52 >> 0] | 0; //@line 10193
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10195
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10197
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10199
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 10201
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 10203
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 10205
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 10207
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 10209
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 10211
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 10213
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 10215
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 10217
 $52 = HEAP8[$0 + 101 >> 0] | 0; //@line 10219
 $54 = HEAP8[$0 + 102 >> 0] | 0; //@line 10221
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $150 = $52 + 1 << 24 >> 24; //@line 10226
  $151 = $54 + -1 << 24 >> 24; //@line 10227
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 10228
  $152 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($30, 0, $4, 512) | 0; //@line 10229
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 157; //@line 10232
   $153 = $ReallocAsyncCtx3 + 4 | 0; //@line 10233
   HEAP32[$153 >> 2] = $2; //@line 10234
   $154 = $ReallocAsyncCtx3 + 8 | 0; //@line 10235
   HEAP32[$154 >> 2] = $4; //@line 10236
   $155 = $ReallocAsyncCtx3 + 12 | 0; //@line 10237
   HEAP32[$155 >> 2] = $6; //@line 10238
   $156 = $ReallocAsyncCtx3 + 16 | 0; //@line 10239
   HEAP32[$156 >> 2] = $8; //@line 10240
   $157 = $ReallocAsyncCtx3 + 20 | 0; //@line 10241
   HEAP32[$157 >> 2] = $10; //@line 10242
   $158 = $ReallocAsyncCtx3 + 24 | 0; //@line 10243
   HEAP32[$158 >> 2] = $12; //@line 10244
   $159 = $ReallocAsyncCtx3 + 28 | 0; //@line 10245
   HEAP32[$159 >> 2] = $14; //@line 10246
   $160 = $ReallocAsyncCtx3 + 32 | 0; //@line 10247
   HEAP32[$160 >> 2] = $16; //@line 10248
   $161 = $ReallocAsyncCtx3 + 36 | 0; //@line 10249
   HEAP32[$161 >> 2] = $18; //@line 10250
   $162 = $ReallocAsyncCtx3 + 40 | 0; //@line 10251
   HEAP32[$162 >> 2] = $20; //@line 10252
   $163 = $ReallocAsyncCtx3 + 44 | 0; //@line 10253
   HEAP32[$163 >> 2] = $22; //@line 10254
   $164 = $ReallocAsyncCtx3 + 48 | 0; //@line 10255
   HEAP32[$164 >> 2] = $24; //@line 10256
   $165 = $ReallocAsyncCtx3 + 52 | 0; //@line 10257
   HEAP8[$165 >> 0] = $26; //@line 10258
   $166 = $ReallocAsyncCtx3 + 56 | 0; //@line 10259
   HEAP32[$166 >> 2] = $28; //@line 10260
   $167 = $ReallocAsyncCtx3 + 60 | 0; //@line 10261
   HEAP32[$167 >> 2] = $30; //@line 10262
   $168 = $ReallocAsyncCtx3 + 64 | 0; //@line 10263
   HEAP32[$168 >> 2] = $32; //@line 10264
   $169 = $ReallocAsyncCtx3 + 68 | 0; //@line 10265
   HEAP32[$169 >> 2] = $34; //@line 10266
   $170 = $ReallocAsyncCtx3 + 72 | 0; //@line 10267
   HEAP32[$170 >> 2] = $36; //@line 10268
   $171 = $ReallocAsyncCtx3 + 76 | 0; //@line 10269
   HEAP32[$171 >> 2] = $38; //@line 10270
   $172 = $ReallocAsyncCtx3 + 80 | 0; //@line 10271
   HEAP32[$172 >> 2] = $40; //@line 10272
   $173 = $ReallocAsyncCtx3 + 84 | 0; //@line 10273
   HEAP32[$173 >> 2] = $42; //@line 10274
   $174 = $ReallocAsyncCtx3 + 88 | 0; //@line 10275
   HEAP32[$174 >> 2] = $44; //@line 10276
   $175 = $ReallocAsyncCtx3 + 92 | 0; //@line 10277
   HEAP32[$175 >> 2] = $46; //@line 10278
   $176 = $ReallocAsyncCtx3 + 96 | 0; //@line 10279
   HEAP32[$176 >> 2] = $48; //@line 10280
   $177 = $ReallocAsyncCtx3 + 100 | 0; //@line 10281
   HEAP8[$177 >> 0] = $151; //@line 10282
   $178 = $ReallocAsyncCtx3 + 101 | 0; //@line 10283
   HEAP8[$178 >> 0] = $150; //@line 10284
   $179 = $ReallocAsyncCtx3 + 102 | 0; //@line 10285
   HEAP8[$179 >> 0] = $50; //@line 10286
   sp = STACKTOP; //@line 10287
   STACKTOP = sp; //@line 10288
   return;
  }
  HEAP32[___async_retval >> 2] = $152; //@line 10291
  ___async_unwind = 0; //@line 10292
  HEAP32[$ReallocAsyncCtx3 >> 2] = 157; //@line 10293
  $153 = $ReallocAsyncCtx3 + 4 | 0; //@line 10294
  HEAP32[$153 >> 2] = $2; //@line 10295
  $154 = $ReallocAsyncCtx3 + 8 | 0; //@line 10296
  HEAP32[$154 >> 2] = $4; //@line 10297
  $155 = $ReallocAsyncCtx3 + 12 | 0; //@line 10298
  HEAP32[$155 >> 2] = $6; //@line 10299
  $156 = $ReallocAsyncCtx3 + 16 | 0; //@line 10300
  HEAP32[$156 >> 2] = $8; //@line 10301
  $157 = $ReallocAsyncCtx3 + 20 | 0; //@line 10302
  HEAP32[$157 >> 2] = $10; //@line 10303
  $158 = $ReallocAsyncCtx3 + 24 | 0; //@line 10304
  HEAP32[$158 >> 2] = $12; //@line 10305
  $159 = $ReallocAsyncCtx3 + 28 | 0; //@line 10306
  HEAP32[$159 >> 2] = $14; //@line 10307
  $160 = $ReallocAsyncCtx3 + 32 | 0; //@line 10308
  HEAP32[$160 >> 2] = $16; //@line 10309
  $161 = $ReallocAsyncCtx3 + 36 | 0; //@line 10310
  HEAP32[$161 >> 2] = $18; //@line 10311
  $162 = $ReallocAsyncCtx3 + 40 | 0; //@line 10312
  HEAP32[$162 >> 2] = $20; //@line 10313
  $163 = $ReallocAsyncCtx3 + 44 | 0; //@line 10314
  HEAP32[$163 >> 2] = $22; //@line 10315
  $164 = $ReallocAsyncCtx3 + 48 | 0; //@line 10316
  HEAP32[$164 >> 2] = $24; //@line 10317
  $165 = $ReallocAsyncCtx3 + 52 | 0; //@line 10318
  HEAP8[$165 >> 0] = $26; //@line 10319
  $166 = $ReallocAsyncCtx3 + 56 | 0; //@line 10320
  HEAP32[$166 >> 2] = $28; //@line 10321
  $167 = $ReallocAsyncCtx3 + 60 | 0; //@line 10322
  HEAP32[$167 >> 2] = $30; //@line 10323
  $168 = $ReallocAsyncCtx3 + 64 | 0; //@line 10324
  HEAP32[$168 >> 2] = $32; //@line 10325
  $169 = $ReallocAsyncCtx3 + 68 | 0; //@line 10326
  HEAP32[$169 >> 2] = $34; //@line 10327
  $170 = $ReallocAsyncCtx3 + 72 | 0; //@line 10328
  HEAP32[$170 >> 2] = $36; //@line 10329
  $171 = $ReallocAsyncCtx3 + 76 | 0; //@line 10330
  HEAP32[$171 >> 2] = $38; //@line 10331
  $172 = $ReallocAsyncCtx3 + 80 | 0; //@line 10332
  HEAP32[$172 >> 2] = $40; //@line 10333
  $173 = $ReallocAsyncCtx3 + 84 | 0; //@line 10334
  HEAP32[$173 >> 2] = $42; //@line 10335
  $174 = $ReallocAsyncCtx3 + 88 | 0; //@line 10336
  HEAP32[$174 >> 2] = $44; //@line 10337
  $175 = $ReallocAsyncCtx3 + 92 | 0; //@line 10338
  HEAP32[$175 >> 2] = $46; //@line 10339
  $176 = $ReallocAsyncCtx3 + 96 | 0; //@line 10340
  HEAP32[$176 >> 2] = $48; //@line 10341
  $177 = $ReallocAsyncCtx3 + 100 | 0; //@line 10342
  HEAP8[$177 >> 0] = $151; //@line 10343
  $178 = $ReallocAsyncCtx3 + 101 | 0; //@line 10344
  HEAP8[$178 >> 0] = $150; //@line 10345
  $179 = $ReallocAsyncCtx3 + 102 | 0; //@line 10346
  HEAP8[$179 >> 0] = $50; //@line 10347
  sp = STACKTOP; //@line 10348
  STACKTOP = sp; //@line 10349
  return;
 }
 $58 = $50 + 1 << 24 >> 24; //@line 10351
 HEAP32[$46 >> 2] = 0; //@line 10352
 HEAP32[$46 + 4 >> 2] = 0; //@line 10352
 HEAP32[$46 + 8 >> 2] = 0; //@line 10352
 HEAP32[$46 + 12 >> 2] = 0; //@line 10352
 HEAP32[$46 + 16 >> 2] = 0; //@line 10352
 HEAP32[$$byval_copy >> 2] = HEAP32[$48 >> 2]; //@line 10353
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$48 + 4 >> 2]; //@line 10353
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$48 + 8 >> 2]; //@line 10353
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$48 + 12 >> 2]; //@line 10353
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$48 + 16 >> 2]; //@line 10353
 __ZN13SocketAddressC2E10nsapi_addrt($2, $$byval_copy, 0); //@line 10354
 do {
  if ($54 << 24 >> 24) {
   if (($58 & 255) > 9) {
    if (!($52 << 24 >> 24)) {
     break;
    } else {
     $$1107 = 0; //@line 10364
     $62 = 0; //@line 10364
    }
   } else {
    if (($58 & 255) < 5) {
     $$1107 = $52; //@line 10369
     $62 = $58; //@line 10369
    } else {
     $97 = 608 + ((($58 & 255) + -5 | 0) * 20 | 0) | 0; //@line 10373
     HEAP32[$$byval_copy24 >> 2] = HEAP32[$97 >> 2]; //@line 10374
     HEAP32[$$byval_copy24 + 4 >> 2] = HEAP32[$97 + 4 >> 2]; //@line 10374
     HEAP32[$$byval_copy24 + 8 >> 2] = HEAP32[$97 + 8 >> 2]; //@line 10374
     HEAP32[$$byval_copy24 + 12 >> 2] = HEAP32[$97 + 12 >> 2]; //@line 10374
     HEAP32[$$byval_copy24 + 16 >> 2] = HEAP32[$97 + 16 >> 2]; //@line 10374
     __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy24); //@line 10375
     __ZN13SocketAddress8set_portEt($2, 53); //@line 10376
     HEAP8[$4 >> 0] = 0; //@line 10377
     HEAP8[$6 >> 0] = 1; //@line 10378
     HEAP8[$8 >> 0] = 1; //@line 10379
     HEAP8[$10 >> 0] = 0; //@line 10380
     HEAP8[$12 >> 0] = 0; //@line 10381
     HEAP8[$14 >> 0] = 1; //@line 10382
     HEAP8[$16 >> 0] = 0; //@line 10383
     HEAP8[$16 + 1 >> 0] = 0; //@line 10383
     HEAP8[$16 + 2 >> 0] = 0; //@line 10383
     HEAP8[$16 + 3 >> 0] = 0; //@line 10383
     HEAP8[$16 + 4 >> 0] = 0; //@line 10383
     HEAP8[$16 + 5 >> 0] = 0; //@line 10383
     if (!(HEAP8[$18 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $24; //@line 10387
     } else {
      $$048$i = $18; //@line 10389
      $$sroa$0$0$in47$i = $24; //@line 10389
      while (1) {
       $100 = _strcspn($$048$i, 7296) | 0; //@line 10391
       $102 = $$sroa$0$0$in47$i + 1 | 0; //@line 10393
       HEAP8[$$sroa$0$0$in47$i >> 0] = $100; //@line 10394
       $103 = $100 & 255; //@line 10395
       _memcpy($102 | 0, $$048$i | 0, $103 | 0) | 0; //@line 10396
       $104 = $102 + $103 | 0; //@line 10397
       $$048$i = $$048$i + ($100 + ((HEAP8[$$048$i + $100 >> 0] | 0) == 46 & 1)) | 0; //@line 10403
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $104; //@line 10407
        break;
       } else {
        $$sroa$0$0$in47$i = $104; //@line 10410
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 10415
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 10417
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $26; //@line 10419
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 10421
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 10424
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 10426
     $120 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($30, $2, $4, $$sroa$0$0$in$lcssa$i + 5 - $28 | 0) | 0; //@line 10427
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 10430
      $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 10431
      HEAP32[$121 >> 2] = $2; //@line 10432
      $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 10433
      HEAP32[$122 >> 2] = $4; //@line 10434
      $123 = $ReallocAsyncCtx4 + 12 | 0; //@line 10435
      HEAP32[$123 >> 2] = $6; //@line 10436
      $124 = $ReallocAsyncCtx4 + 16 | 0; //@line 10437
      HEAP32[$124 >> 2] = $8; //@line 10438
      $125 = $ReallocAsyncCtx4 + 20 | 0; //@line 10439
      HEAP32[$125 >> 2] = $10; //@line 10440
      $126 = $ReallocAsyncCtx4 + 24 | 0; //@line 10441
      HEAP32[$126 >> 2] = $12; //@line 10442
      $127 = $ReallocAsyncCtx4 + 28 | 0; //@line 10443
      HEAP32[$127 >> 2] = $14; //@line 10444
      $128 = $ReallocAsyncCtx4 + 32 | 0; //@line 10445
      HEAP32[$128 >> 2] = $16; //@line 10446
      $129 = $ReallocAsyncCtx4 + 36 | 0; //@line 10447
      HEAP32[$129 >> 2] = $18; //@line 10448
      $130 = $ReallocAsyncCtx4 + 40 | 0; //@line 10449
      HEAP32[$130 >> 2] = $20; //@line 10450
      $131 = $ReallocAsyncCtx4 + 44 | 0; //@line 10451
      HEAP32[$131 >> 2] = $22; //@line 10452
      $132 = $ReallocAsyncCtx4 + 48 | 0; //@line 10453
      HEAP32[$132 >> 2] = $24; //@line 10454
      $133 = $ReallocAsyncCtx4 + 52 | 0; //@line 10455
      HEAP8[$133 >> 0] = $26; //@line 10456
      $134 = $ReallocAsyncCtx4 + 56 | 0; //@line 10457
      HEAP32[$134 >> 2] = $28; //@line 10458
      $135 = $ReallocAsyncCtx4 + 60 | 0; //@line 10459
      HEAP32[$135 >> 2] = $30; //@line 10460
      $136 = $ReallocAsyncCtx4 + 64 | 0; //@line 10461
      HEAP32[$136 >> 2] = $32; //@line 10462
      $137 = $ReallocAsyncCtx4 + 68 | 0; //@line 10463
      HEAP32[$137 >> 2] = $34; //@line 10464
      $138 = $ReallocAsyncCtx4 + 72 | 0; //@line 10465
      HEAP32[$138 >> 2] = $36; //@line 10466
      $139 = $ReallocAsyncCtx4 + 76 | 0; //@line 10467
      HEAP32[$139 >> 2] = $38; //@line 10468
      $140 = $ReallocAsyncCtx4 + 80 | 0; //@line 10469
      HEAP32[$140 >> 2] = $40; //@line 10470
      $141 = $ReallocAsyncCtx4 + 84 | 0; //@line 10471
      HEAP32[$141 >> 2] = $42; //@line 10472
      $142 = $ReallocAsyncCtx4 + 88 | 0; //@line 10473
      HEAP32[$142 >> 2] = $44; //@line 10474
      $143 = $ReallocAsyncCtx4 + 92 | 0; //@line 10475
      HEAP32[$143 >> 2] = $46; //@line 10476
      $144 = $ReallocAsyncCtx4 + 96 | 0; //@line 10477
      HEAP32[$144 >> 2] = $48; //@line 10478
      $145 = $ReallocAsyncCtx4 + 100 | 0; //@line 10479
      HEAP8[$145 >> 0] = $58; //@line 10480
      $146 = $ReallocAsyncCtx4 + 101 | 0; //@line 10481
      HEAP8[$146 >> 0] = $52; //@line 10482
      $147 = $ReallocAsyncCtx4 + 102 | 0; //@line 10483
      HEAP8[$147 >> 0] = $54; //@line 10484
      sp = STACKTOP; //@line 10485
      STACKTOP = sp; //@line 10486
      return;
     }
     HEAP32[___async_retval >> 2] = $120; //@line 10489
     ___async_unwind = 0; //@line 10490
     HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 10491
     $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 10492
     HEAP32[$121 >> 2] = $2; //@line 10493
     $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 10494
     HEAP32[$122 >> 2] = $4; //@line 10495
     $123 = $ReallocAsyncCtx4 + 12 | 0; //@line 10496
     HEAP32[$123 >> 2] = $6; //@line 10497
     $124 = $ReallocAsyncCtx4 + 16 | 0; //@line 10498
     HEAP32[$124 >> 2] = $8; //@line 10499
     $125 = $ReallocAsyncCtx4 + 20 | 0; //@line 10500
     HEAP32[$125 >> 2] = $10; //@line 10501
     $126 = $ReallocAsyncCtx4 + 24 | 0; //@line 10502
     HEAP32[$126 >> 2] = $12; //@line 10503
     $127 = $ReallocAsyncCtx4 + 28 | 0; //@line 10504
     HEAP32[$127 >> 2] = $14; //@line 10505
     $128 = $ReallocAsyncCtx4 + 32 | 0; //@line 10506
     HEAP32[$128 >> 2] = $16; //@line 10507
     $129 = $ReallocAsyncCtx4 + 36 | 0; //@line 10508
     HEAP32[$129 >> 2] = $18; //@line 10509
     $130 = $ReallocAsyncCtx4 + 40 | 0; //@line 10510
     HEAP32[$130 >> 2] = $20; //@line 10511
     $131 = $ReallocAsyncCtx4 + 44 | 0; //@line 10512
     HEAP32[$131 >> 2] = $22; //@line 10513
     $132 = $ReallocAsyncCtx4 + 48 | 0; //@line 10514
     HEAP32[$132 >> 2] = $24; //@line 10515
     $133 = $ReallocAsyncCtx4 + 52 | 0; //@line 10516
     HEAP8[$133 >> 0] = $26; //@line 10517
     $134 = $ReallocAsyncCtx4 + 56 | 0; //@line 10518
     HEAP32[$134 >> 2] = $28; //@line 10519
     $135 = $ReallocAsyncCtx4 + 60 | 0; //@line 10520
     HEAP32[$135 >> 2] = $30; //@line 10521
     $136 = $ReallocAsyncCtx4 + 64 | 0; //@line 10522
     HEAP32[$136 >> 2] = $32; //@line 10523
     $137 = $ReallocAsyncCtx4 + 68 | 0; //@line 10524
     HEAP32[$137 >> 2] = $34; //@line 10525
     $138 = $ReallocAsyncCtx4 + 72 | 0; //@line 10526
     HEAP32[$138 >> 2] = $36; //@line 10527
     $139 = $ReallocAsyncCtx4 + 76 | 0; //@line 10528
     HEAP32[$139 >> 2] = $38; //@line 10529
     $140 = $ReallocAsyncCtx4 + 80 | 0; //@line 10530
     HEAP32[$140 >> 2] = $40; //@line 10531
     $141 = $ReallocAsyncCtx4 + 84 | 0; //@line 10532
     HEAP32[$141 >> 2] = $42; //@line 10533
     $142 = $ReallocAsyncCtx4 + 88 | 0; //@line 10534
     HEAP32[$142 >> 2] = $44; //@line 10535
     $143 = $ReallocAsyncCtx4 + 92 | 0; //@line 10536
     HEAP32[$143 >> 2] = $46; //@line 10537
     $144 = $ReallocAsyncCtx4 + 96 | 0; //@line 10538
     HEAP32[$144 >> 2] = $48; //@line 10539
     $145 = $ReallocAsyncCtx4 + 100 | 0; //@line 10540
     HEAP8[$145 >> 0] = $58; //@line 10541
     $146 = $ReallocAsyncCtx4 + 101 | 0; //@line 10542
     HEAP8[$146 >> 0] = $52; //@line 10543
     $147 = $ReallocAsyncCtx4 + 102 | 0; //@line 10544
     HEAP8[$147 >> 0] = $54; //@line 10545
     sp = STACKTOP; //@line 10546
     STACKTOP = sp; //@line 10547
     return;
    }
   }
   $65 = HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0; //@line 10553
   $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 10554
   $66 = FUNCTION_TABLE_iiii[$65 & 31]($22, $62 & 255, $2) | 0; //@line 10555
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 10558
    $67 = $ReallocAsyncCtx + 4 | 0; //@line 10559
    HEAP8[$67 >> 0] = $$1107; //@line 10560
    $68 = $ReallocAsyncCtx + 8 | 0; //@line 10561
    HEAP32[$68 >> 2] = $2; //@line 10562
    $69 = $ReallocAsyncCtx + 12 | 0; //@line 10563
    HEAP8[$69 >> 0] = $62; //@line 10564
    $70 = $ReallocAsyncCtx + 16 | 0; //@line 10565
    HEAP32[$70 >> 2] = $4; //@line 10566
    $71 = $ReallocAsyncCtx + 20 | 0; //@line 10567
    HEAP32[$71 >> 2] = $6; //@line 10568
    $72 = $ReallocAsyncCtx + 24 | 0; //@line 10569
    HEAP32[$72 >> 2] = $8; //@line 10570
    $73 = $ReallocAsyncCtx + 28 | 0; //@line 10571
    HEAP32[$73 >> 2] = $10; //@line 10572
    $74 = $ReallocAsyncCtx + 32 | 0; //@line 10573
    HEAP32[$74 >> 2] = $12; //@line 10574
    $75 = $ReallocAsyncCtx + 36 | 0; //@line 10575
    HEAP32[$75 >> 2] = $14; //@line 10576
    $76 = $ReallocAsyncCtx + 40 | 0; //@line 10577
    HEAP32[$76 >> 2] = $16; //@line 10578
    $77 = $ReallocAsyncCtx + 44 | 0; //@line 10579
    HEAP32[$77 >> 2] = $18; //@line 10580
    $78 = $ReallocAsyncCtx + 48 | 0; //@line 10581
    HEAP32[$78 >> 2] = $20; //@line 10582
    $79 = $ReallocAsyncCtx + 52 | 0; //@line 10583
    HEAP32[$79 >> 2] = $22; //@line 10584
    $80 = $ReallocAsyncCtx + 56 | 0; //@line 10585
    HEAP32[$80 >> 2] = $24; //@line 10586
    $81 = $ReallocAsyncCtx + 60 | 0; //@line 10587
    HEAP8[$81 >> 0] = $26; //@line 10588
    $82 = $ReallocAsyncCtx + 64 | 0; //@line 10589
    HEAP32[$82 >> 2] = $28; //@line 10590
    $83 = $ReallocAsyncCtx + 68 | 0; //@line 10591
    HEAP32[$83 >> 2] = $30; //@line 10592
    $84 = $ReallocAsyncCtx + 72 | 0; //@line 10593
    HEAP32[$84 >> 2] = $32; //@line 10594
    $85 = $ReallocAsyncCtx + 76 | 0; //@line 10595
    HEAP8[$85 >> 0] = $54; //@line 10596
    $86 = $ReallocAsyncCtx + 80 | 0; //@line 10597
    HEAP32[$86 >> 2] = $34; //@line 10598
    $87 = $ReallocAsyncCtx + 84 | 0; //@line 10599
    HEAP32[$87 >> 2] = $36; //@line 10600
    $88 = $ReallocAsyncCtx + 88 | 0; //@line 10601
    HEAP32[$88 >> 2] = $38; //@line 10602
    $89 = $ReallocAsyncCtx + 92 | 0; //@line 10603
    HEAP32[$89 >> 2] = $40; //@line 10604
    $90 = $ReallocAsyncCtx + 96 | 0; //@line 10605
    HEAP32[$90 >> 2] = $42; //@line 10606
    $91 = $ReallocAsyncCtx + 100 | 0; //@line 10607
    HEAP32[$91 >> 2] = $44; //@line 10608
    $92 = $ReallocAsyncCtx + 104 | 0; //@line 10609
    HEAP32[$92 >> 2] = $46; //@line 10610
    $93 = $ReallocAsyncCtx + 108 | 0; //@line 10611
    HEAP32[$93 >> 2] = $48; //@line 10612
    sp = STACKTOP; //@line 10613
    STACKTOP = sp; //@line 10614
    return;
   }
   HEAP32[___async_retval >> 2] = $66; //@line 10617
   ___async_unwind = 0; //@line 10618
   HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 10619
   $67 = $ReallocAsyncCtx + 4 | 0; //@line 10620
   HEAP8[$67 >> 0] = $$1107; //@line 10621
   $68 = $ReallocAsyncCtx + 8 | 0; //@line 10622
   HEAP32[$68 >> 2] = $2; //@line 10623
   $69 = $ReallocAsyncCtx + 12 | 0; //@line 10624
   HEAP8[$69 >> 0] = $62; //@line 10625
   $70 = $ReallocAsyncCtx + 16 | 0; //@line 10626
   HEAP32[$70 >> 2] = $4; //@line 10627
   $71 = $ReallocAsyncCtx + 20 | 0; //@line 10628
   HEAP32[$71 >> 2] = $6; //@line 10629
   $72 = $ReallocAsyncCtx + 24 | 0; //@line 10630
   HEAP32[$72 >> 2] = $8; //@line 10631
   $73 = $ReallocAsyncCtx + 28 | 0; //@line 10632
   HEAP32[$73 >> 2] = $10; //@line 10633
   $74 = $ReallocAsyncCtx + 32 | 0; //@line 10634
   HEAP32[$74 >> 2] = $12; //@line 10635
   $75 = $ReallocAsyncCtx + 36 | 0; //@line 10636
   HEAP32[$75 >> 2] = $14; //@line 10637
   $76 = $ReallocAsyncCtx + 40 | 0; //@line 10638
   HEAP32[$76 >> 2] = $16; //@line 10639
   $77 = $ReallocAsyncCtx + 44 | 0; //@line 10640
   HEAP32[$77 >> 2] = $18; //@line 10641
   $78 = $ReallocAsyncCtx + 48 | 0; //@line 10642
   HEAP32[$78 >> 2] = $20; //@line 10643
   $79 = $ReallocAsyncCtx + 52 | 0; //@line 10644
   HEAP32[$79 >> 2] = $22; //@line 10645
   $80 = $ReallocAsyncCtx + 56 | 0; //@line 10646
   HEAP32[$80 >> 2] = $24; //@line 10647
   $81 = $ReallocAsyncCtx + 60 | 0; //@line 10648
   HEAP8[$81 >> 0] = $26; //@line 10649
   $82 = $ReallocAsyncCtx + 64 | 0; //@line 10650
   HEAP32[$82 >> 2] = $28; //@line 10651
   $83 = $ReallocAsyncCtx + 68 | 0; //@line 10652
   HEAP32[$83 >> 2] = $30; //@line 10653
   $84 = $ReallocAsyncCtx + 72 | 0; //@line 10654
   HEAP32[$84 >> 2] = $32; //@line 10655
   $85 = $ReallocAsyncCtx + 76 | 0; //@line 10656
   HEAP8[$85 >> 0] = $54; //@line 10657
   $86 = $ReallocAsyncCtx + 80 | 0; //@line 10658
   HEAP32[$86 >> 2] = $34; //@line 10659
   $87 = $ReallocAsyncCtx + 84 | 0; //@line 10660
   HEAP32[$87 >> 2] = $36; //@line 10661
   $88 = $ReallocAsyncCtx + 88 | 0; //@line 10662
   HEAP32[$88 >> 2] = $38; //@line 10663
   $89 = $ReallocAsyncCtx + 92 | 0; //@line 10664
   HEAP32[$89 >> 2] = $40; //@line 10665
   $90 = $ReallocAsyncCtx + 96 | 0; //@line 10666
   HEAP32[$90 >> 2] = $42; //@line 10667
   $91 = $ReallocAsyncCtx + 100 | 0; //@line 10668
   HEAP32[$91 >> 2] = $44; //@line 10669
   $92 = $ReallocAsyncCtx + 104 | 0; //@line 10670
   HEAP32[$92 >> 2] = $46; //@line 10671
   $93 = $ReallocAsyncCtx + 108 | 0; //@line 10672
   HEAP32[$93 >> 2] = $48; //@line 10673
   sp = STACKTOP; //@line 10674
   STACKTOP = sp; //@line 10675
   return;
  }
 } while (0);
 _free($4); //@line 10678
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 10679
 $181 = __ZN6Socket5closeEv($44) | 0; //@line 10680
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 10683
  $182 = $ReallocAsyncCtx6 + 4 | 0; //@line 10684
  HEAP32[$182 >> 2] = -3009; //@line 10685
  $183 = $ReallocAsyncCtx6 + 8 | 0; //@line 10686
  HEAP32[$183 >> 2] = $30; //@line 10687
  $184 = $ReallocAsyncCtx6 + 12 | 0; //@line 10688
  HEAP32[$184 >> 2] = $32; //@line 10689
  sp = STACKTOP; //@line 10690
  STACKTOP = sp; //@line 10691
  return;
 }
 HEAP32[___async_retval >> 2] = $181; //@line 10694
 ___async_unwind = 0; //@line 10695
 HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 10696
 $182 = $ReallocAsyncCtx6 + 4 | 0; //@line 10697
 HEAP32[$182 >> 2] = -3009; //@line 10698
 $183 = $ReallocAsyncCtx6 + 8 | 0; //@line 10699
 HEAP32[$183 >> 2] = $30; //@line 10700
 $184 = $ReallocAsyncCtx6 + 12 | 0; //@line 10701
 HEAP32[$184 >> 2] = $32; //@line 10702
 sp = STACKTOP; //@line 10703
 STACKTOP = sp; //@line 10704
 return;
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 3559
 STACKTOP = STACKTOP + 64 | 0; //@line 3560
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 3560
 $5 = sp + 16 | 0; //@line 3561
 $6 = sp; //@line 3562
 $7 = sp + 24 | 0; //@line 3563
 $8 = sp + 8 | 0; //@line 3564
 $9 = sp + 20 | 0; //@line 3565
 HEAP32[$5 >> 2] = $1; //@line 3566
 $10 = ($0 | 0) != 0; //@line 3567
 $11 = $7 + 40 | 0; //@line 3568
 $12 = $11; //@line 3569
 $13 = $7 + 39 | 0; //@line 3570
 $14 = $8 + 4 | 0; //@line 3571
 $$0243 = 0; //@line 3572
 $$0247 = 0; //@line 3572
 $$0269 = 0; //@line 3572
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 3581
     $$1248 = -1; //@line 3582
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 3586
     break;
    }
   } else {
    $$1248 = $$0247; //@line 3590
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 3593
  $21 = HEAP8[$20 >> 0] | 0; //@line 3594
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 3597
   break;
  } else {
   $23 = $21; //@line 3600
   $25 = $20; //@line 3600
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 3605
     $27 = $25; //@line 3605
     label = 9; //@line 3606
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 3611
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 3618
   HEAP32[$5 >> 2] = $24; //@line 3619
   $23 = HEAP8[$24 >> 0] | 0; //@line 3621
   $25 = $24; //@line 3621
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 3626
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 3631
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 3634
     $27 = $27 + 2 | 0; //@line 3635
     HEAP32[$5 >> 2] = $27; //@line 3636
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 3643
      break;
     } else {
      $$0249303 = $30; //@line 3640
      label = 9; //@line 3641
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 3651
  if ($10) {
   _out_670($0, $20, $36); //@line 3653
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 3657
   $$0247 = $$1248; //@line 3657
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 3665
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 3666
  if ($43) {
   $$0253 = -1; //@line 3668
   $$1270 = $$0269; //@line 3668
   $$sink = 1; //@line 3668
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 3678
    $$1270 = 1; //@line 3678
    $$sink = 3; //@line 3678
   } else {
    $$0253 = -1; //@line 3680
    $$1270 = $$0269; //@line 3680
    $$sink = 1; //@line 3680
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 3683
  HEAP32[$5 >> 2] = $51; //@line 3684
  $52 = HEAP8[$51 >> 0] | 0; //@line 3685
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 3687
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 3694
   $$lcssa291 = $52; //@line 3694
   $$lcssa292 = $51; //@line 3694
  } else {
   $$0262309 = 0; //@line 3696
   $60 = $52; //@line 3696
   $65 = $51; //@line 3696
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 3701
    $64 = $65 + 1 | 0; //@line 3702
    HEAP32[$5 >> 2] = $64; //@line 3703
    $66 = HEAP8[$64 >> 0] | 0; //@line 3704
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 3706
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 3713
     $$lcssa291 = $66; //@line 3713
     $$lcssa292 = $64; //@line 3713
     break;
    } else {
     $$0262309 = $63; //@line 3716
     $60 = $66; //@line 3716
     $65 = $64; //@line 3716
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 3728
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 3730
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 3735
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 3740
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 3752
     $$2271 = 1; //@line 3752
     $storemerge274 = $79 + 3 | 0; //@line 3752
    } else {
     label = 23; //@line 3754
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 3758
    if ($$1270 | 0) {
     $$0 = -1; //@line 3761
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 3776
     $106 = HEAP32[$105 >> 2] | 0; //@line 3777
     HEAP32[$2 >> 2] = $105 + 4; //@line 3779
     $363 = $106; //@line 3780
    } else {
     $363 = 0; //@line 3782
    }
    $$0259 = $363; //@line 3786
    $$2271 = 0; //@line 3786
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 3786
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 3788
   $109 = ($$0259 | 0) < 0; //@line 3789
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 3794
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 3794
   $$3272 = $$2271; //@line 3794
   $115 = $storemerge274; //@line 3794
  } else {
   $112 = _getint_671($5) | 0; //@line 3796
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 3799
    break;
   }
   $$1260 = $112; //@line 3803
   $$1263 = $$0262$lcssa; //@line 3803
   $$3272 = $$1270; //@line 3803
   $115 = HEAP32[$5 >> 2] | 0; //@line 3803
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 3814
     $156 = _getint_671($5) | 0; //@line 3815
     $$0254 = $156; //@line 3817
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 3817
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 3826
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 3831
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 3836
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 3843
      $144 = $125 + 4 | 0; //@line 3847
      HEAP32[$5 >> 2] = $144; //@line 3848
      $$0254 = $140; //@line 3849
      $$pre345 = $144; //@line 3849
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 3855
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 3870
     $152 = HEAP32[$151 >> 2] | 0; //@line 3871
     HEAP32[$2 >> 2] = $151 + 4; //@line 3873
     $364 = $152; //@line 3874
    } else {
     $364 = 0; //@line 3876
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 3879
    HEAP32[$5 >> 2] = $154; //@line 3880
    $$0254 = $364; //@line 3881
    $$pre345 = $154; //@line 3881
   } else {
    $$0254 = -1; //@line 3883
    $$pre345 = $115; //@line 3883
   }
  } while (0);
  $$0252 = 0; //@line 3886
  $158 = $$pre345; //@line 3886
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 3893
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 3896
   HEAP32[$5 >> 2] = $158; //@line 3897
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (6764 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 3902
   $168 = $167 & 255; //@line 3903
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 3907
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 3914
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 3918
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 3922
     break L1;
    } else {
     label = 50; //@line 3925
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 3930
     $176 = $3 + ($$0253 << 3) | 0; //@line 3932
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 3937
     $182 = $6; //@line 3938
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 3940
     HEAP32[$182 + 4 >> 2] = $181; //@line 3943
     label = 50; //@line 3944
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 3948
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 3951
    $187 = HEAP32[$5 >> 2] | 0; //@line 3953
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 3957
   if ($10) {
    $187 = $158; //@line 3959
   } else {
    $$0243 = 0; //@line 3961
    $$0247 = $$1248; //@line 3961
    $$0269 = $$3272; //@line 3961
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 3967
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 3973
  $196 = $$1263 & -65537; //@line 3976
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 3977
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 3985
       $$0243 = 0; //@line 3986
       $$0247 = $$1248; //@line 3986
       $$0269 = $$3272; //@line 3986
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 3992
       $$0243 = 0; //@line 3993
       $$0247 = $$1248; //@line 3993
       $$0269 = $$3272; //@line 3993
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 4001
       HEAP32[$208 >> 2] = $$1248; //@line 4003
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 4006
       $$0243 = 0; //@line 4007
       $$0247 = $$1248; //@line 4007
       $$0269 = $$3272; //@line 4007
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 4014
       $$0243 = 0; //@line 4015
       $$0247 = $$1248; //@line 4015
       $$0269 = $$3272; //@line 4015
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 4022
       $$0243 = 0; //@line 4023
       $$0247 = $$1248; //@line 4023
       $$0269 = $$3272; //@line 4023
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 4029
       $$0243 = 0; //@line 4030
       $$0247 = $$1248; //@line 4030
       $$0269 = $$3272; //@line 4030
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 4038
       HEAP32[$220 >> 2] = $$1248; //@line 4040
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 4043
       $$0243 = 0; //@line 4044
       $$0247 = $$1248; //@line 4044
       $$0269 = $$3272; //@line 4044
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 4049
       $$0247 = $$1248; //@line 4049
       $$0269 = $$3272; //@line 4049
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 4059
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 4059
     $$3265 = $$1263$ | 8; //@line 4059
     label = 62; //@line 4060
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 4064
     $$1255 = $$0254; //@line 4064
     $$3265 = $$1263$; //@line 4064
     label = 62; //@line 4065
     break;
    }
   case 111:
    {
     $242 = $6; //@line 4069
     $244 = HEAP32[$242 >> 2] | 0; //@line 4071
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 4074
     $248 = _fmt_o($244, $247, $11) | 0; //@line 4075
     $252 = $12 - $248 | 0; //@line 4079
     $$0228 = $248; //@line 4084
     $$1233 = 0; //@line 4084
     $$1238 = 7228; //@line 4084
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 4084
     $$4266 = $$1263$; //@line 4084
     $281 = $244; //@line 4084
     $283 = $247; //@line 4084
     label = 68; //@line 4085
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 4089
     $258 = HEAP32[$256 >> 2] | 0; //@line 4091
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 4094
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 4097
      $264 = tempRet0; //@line 4098
      $265 = $6; //@line 4099
      HEAP32[$265 >> 2] = $263; //@line 4101
      HEAP32[$265 + 4 >> 2] = $264; //@line 4104
      $$0232 = 1; //@line 4105
      $$0237 = 7228; //@line 4105
      $275 = $263; //@line 4105
      $276 = $264; //@line 4105
      label = 67; //@line 4106
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 4118
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 7228 : 7230 : 7229; //@line 4118
      $275 = $258; //@line 4118
      $276 = $261; //@line 4118
      label = 67; //@line 4119
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 4125
     $$0232 = 0; //@line 4131
     $$0237 = 7228; //@line 4131
     $275 = HEAP32[$197 >> 2] | 0; //@line 4131
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 4131
     label = 67; //@line 4132
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 4143
     $$2 = $13; //@line 4144
     $$2234 = 0; //@line 4144
     $$2239 = 7228; //@line 4144
     $$2251 = $11; //@line 4144
     $$5 = 1; //@line 4144
     $$6268 = $196; //@line 4144
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 4151
     label = 72; //@line 4152
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 4156
     $$1 = $302 | 0 ? $302 : 7238; //@line 4159
     label = 72; //@line 4160
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 4170
     HEAP32[$14 >> 2] = 0; //@line 4171
     HEAP32[$6 >> 2] = $8; //@line 4172
     $$4258354 = -1; //@line 4173
     $365 = $8; //@line 4173
     label = 76; //@line 4174
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 4178
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 4181
      $$0240$lcssa356 = 0; //@line 4182
      label = 85; //@line 4183
     } else {
      $$4258354 = $$0254; //@line 4185
      $365 = $$pre348; //@line 4185
      label = 76; //@line 4186
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 4193
     $$0247 = $$1248; //@line 4193
     $$0269 = $$3272; //@line 4193
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 4198
     $$2234 = 0; //@line 4198
     $$2239 = 7228; //@line 4198
     $$2251 = $11; //@line 4198
     $$5 = $$0254; //@line 4198
     $$6268 = $$1263$; //@line 4198
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 4204
    $227 = $6; //@line 4205
    $229 = HEAP32[$227 >> 2] | 0; //@line 4207
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 4210
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 4212
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 4218
    $$0228 = $234; //@line 4223
    $$1233 = $or$cond278 ? 0 : 2; //@line 4223
    $$1238 = $or$cond278 ? 7228 : 7228 + ($$1236 >> 4) | 0; //@line 4223
    $$2256 = $$1255; //@line 4223
    $$4266 = $$3265; //@line 4223
    $281 = $229; //@line 4223
    $283 = $232; //@line 4223
    label = 68; //@line 4224
   } else if ((label | 0) == 67) {
    label = 0; //@line 4227
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 4229
    $$1233 = $$0232; //@line 4229
    $$1238 = $$0237; //@line 4229
    $$2256 = $$0254; //@line 4229
    $$4266 = $$1263$; //@line 4229
    $281 = $275; //@line 4229
    $283 = $276; //@line 4229
    label = 68; //@line 4230
   } else if ((label | 0) == 72) {
    label = 0; //@line 4233
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 4234
    $306 = ($305 | 0) == 0; //@line 4235
    $$2 = $$1; //@line 4242
    $$2234 = 0; //@line 4242
    $$2239 = 7228; //@line 4242
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 4242
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 4242
    $$6268 = $196; //@line 4242
   } else if ((label | 0) == 76) {
    label = 0; //@line 4245
    $$0229316 = $365; //@line 4246
    $$0240315 = 0; //@line 4246
    $$1244314 = 0; //@line 4246
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 4248
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 4251
      $$2245 = $$1244314; //@line 4251
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 4254
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 4260
      $$2245 = $320; //@line 4260
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 4264
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 4267
      $$0240315 = $325; //@line 4267
      $$1244314 = $320; //@line 4267
     } else {
      $$0240$lcssa = $325; //@line 4269
      $$2245 = $320; //@line 4269
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 4275
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 4278
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 4281
     label = 85; //@line 4282
    } else {
     $$1230327 = $365; //@line 4284
     $$1241326 = 0; //@line 4284
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 4286
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 4289
       label = 85; //@line 4290
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 4293
      $$1241326 = $331 + $$1241326 | 0; //@line 4294
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 4297
       label = 85; //@line 4298
       break L97;
      }
      _out_670($0, $9, $331); //@line 4302
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 4307
       label = 85; //@line 4308
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 4305
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 4316
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 4322
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 4324
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 4329
   $$2 = $or$cond ? $$0228 : $11; //@line 4334
   $$2234 = $$1233; //@line 4334
   $$2239 = $$1238; //@line 4334
   $$2251 = $11; //@line 4334
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 4334
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 4334
  } else if ((label | 0) == 85) {
   label = 0; //@line 4337
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 4339
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 4342
   $$0247 = $$1248; //@line 4342
   $$0269 = $$3272; //@line 4342
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 4347
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 4349
  $345 = $$$5 + $$2234 | 0; //@line 4350
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 4352
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 4353
  _out_670($0, $$2239, $$2234); //@line 4354
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 4356
  _pad_676($0, 48, $$$5, $343, 0); //@line 4357
  _out_670($0, $$2, $343); //@line 4358
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 4360
  $$0243 = $$2261; //@line 4361
  $$0247 = $$1248; //@line 4361
  $$0269 = $$3272; //@line 4361
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 4369
    } else {
     $$2242302 = 1; //@line 4371
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 4374
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 4377
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 4381
      $356 = $$2242302 + 1 | 0; //@line 4382
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 4385
      } else {
       $$2242$lcssa = $356; //@line 4387
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 4393
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 4399
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 4405
       } else {
        $$0 = 1; //@line 4407
        break;
       }
      }
     } else {
      $$0 = 1; //@line 4412
     }
    }
   } else {
    $$0 = $$1248; //@line 4416
   }
  }
 } while (0);
 STACKTOP = sp; //@line 4420
 return $$0 | 0; //@line 4420
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_3($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$048$i = 0, $$094 = 0, $$097 = 0, $$1107 = 0, $$4$ph = 0, $$4110 = 0, $$byval_copy = 0, $$byval_copy20 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9658
 STACKTOP = STACKTOP + 48 | 0; //@line 9659
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9659
 $$byval_copy20 = sp + 20 | 0; //@line 9660
 $$byval_copy = sp; //@line 9661
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9663
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9665
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9667
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9669
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9671
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9673
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9675
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9677
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9679
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9681
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9683
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9685
 $26 = HEAP8[$0 + 52 >> 0] | 0; //@line 9687
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9689
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9691
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9693
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9695
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9697
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9699
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9701
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9703
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9705
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9707
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 9709
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 9711
 $52 = HEAP8[$0 + 101 >> 0] | 0; //@line 9713
 $54 = HEAP8[$0 + 102 >> 0] | 0; //@line 9715
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9717
 do {
  if (($AsyncRetVal | 0) == -3001) {
   $$0 = $52; //@line 9722
   $$094 = $50; //@line 9722
   $$097 = $54 + 1 << 24 >> 24; //@line 9722
   label = 2; //@line 9723
  } else {
   if (($AsyncRetVal | 0) < 0) {
    $$4$ph = $AsyncRetVal; //@line 9727
    label = 23; //@line 9728
   } else {
    $150 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($4, 1, $34, $36, $40) | 0; //@line 9730
    if (($150 | 0) <= 0) {
     if (($150 | 0) < 0) {
      $$0 = $52; //@line 9735
      $$094 = $50; //@line 9735
      $$097 = $54; //@line 9735
      label = 2; //@line 9736
      break;
     } else {
      $$4110 = -3009; //@line 9739
      break;
     }
    }
    $152 = HEAP32[$34 >> 2] | 0; //@line 9743
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 9744
    __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($18, $36, $152); //@line 9745
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 158; //@line 9748
     $153 = $ReallocAsyncCtx2 + 4 | 0; //@line 9749
     HEAP32[$153 >> 2] = $150; //@line 9750
     $154 = $ReallocAsyncCtx2 + 8 | 0; //@line 9751
     HEAP32[$154 >> 2] = $38; //@line 9752
     $155 = $ReallocAsyncCtx2 + 12 | 0; //@line 9753
     HEAP32[$155 >> 2] = $42; //@line 9754
     $156 = $ReallocAsyncCtx2 + 16 | 0; //@line 9755
     HEAP32[$156 >> 2] = $4; //@line 9756
     $157 = $ReallocAsyncCtx2 + 20 | 0; //@line 9757
     HEAP32[$157 >> 2] = $44; //@line 9758
     $158 = $ReallocAsyncCtx2 + 24 | 0; //@line 9759
     HEAP32[$158 >> 2] = $30; //@line 9760
     $159 = $ReallocAsyncCtx2 + 28 | 0; //@line 9761
     HEAP32[$159 >> 2] = $32; //@line 9762
     sp = STACKTOP; //@line 9763
     STACKTOP = sp; //@line 9764
     return;
    }
    ___async_unwind = 0; //@line 9766
    HEAP32[$ReallocAsyncCtx2 >> 2] = 158; //@line 9767
    $153 = $ReallocAsyncCtx2 + 4 | 0; //@line 9768
    HEAP32[$153 >> 2] = $150; //@line 9769
    $154 = $ReallocAsyncCtx2 + 8 | 0; //@line 9770
    HEAP32[$154 >> 2] = $38; //@line 9771
    $155 = $ReallocAsyncCtx2 + 12 | 0; //@line 9772
    HEAP32[$155 >> 2] = $42; //@line 9773
    $156 = $ReallocAsyncCtx2 + 16 | 0; //@line 9774
    HEAP32[$156 >> 2] = $4; //@line 9775
    $157 = $ReallocAsyncCtx2 + 20 | 0; //@line 9776
    HEAP32[$157 >> 2] = $44; //@line 9777
    $158 = $ReallocAsyncCtx2 + 24 | 0; //@line 9778
    HEAP32[$158 >> 2] = $30; //@line 9779
    $159 = $ReallocAsyncCtx2 + 28 | 0; //@line 9780
    HEAP32[$159 >> 2] = $32; //@line 9781
    sp = STACKTOP; //@line 9782
    STACKTOP = sp; //@line 9783
    return;
   }
  }
 } while (0);
 do {
  if ((label | 0) == 2) {
   HEAP32[$46 >> 2] = 0; //@line 9789
   HEAP32[$46 + 4 >> 2] = 0; //@line 9789
   HEAP32[$46 + 8 >> 2] = 0; //@line 9789
   HEAP32[$46 + 12 >> 2] = 0; //@line 9789
   HEAP32[$46 + 16 >> 2] = 0; //@line 9789
   HEAP32[$$byval_copy >> 2] = HEAP32[$48 >> 2]; //@line 9790
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$48 + 4 >> 2]; //@line 9790
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$48 + 8 >> 2]; //@line 9790
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$48 + 12 >> 2]; //@line 9790
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$48 + 16 >> 2]; //@line 9790
   __ZN13SocketAddressC2E10nsapi_addrt($2, $$byval_copy, 0); //@line 9791
   if (!($$094 << 24 >> 24)) {
    $$4$ph = -3009; //@line 9794
    label = 23; //@line 9795
   } else {
    if (($$097 & 255) > 9) {
     if (!($$0 << 24 >> 24)) {
      $$4$ph = -3009; //@line 9801
      label = 23; //@line 9802
      break;
     } else {
      $$1107 = 0; //@line 9805
      $61 = 0; //@line 9805
     }
    } else {
     if (($$097 & 255) < 5) {
      $$1107 = $$0; //@line 9810
      $61 = $$097; //@line 9810
     } else {
      $96 = 608 + ((($$097 & 255) + -5 | 0) * 20 | 0) | 0; //@line 9814
      HEAP32[$$byval_copy20 >> 2] = HEAP32[$96 >> 2]; //@line 9815
      HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$96 + 4 >> 2]; //@line 9815
      HEAP32[$$byval_copy20 + 8 >> 2] = HEAP32[$96 + 8 >> 2]; //@line 9815
      HEAP32[$$byval_copy20 + 12 >> 2] = HEAP32[$96 + 12 >> 2]; //@line 9815
      HEAP32[$$byval_copy20 + 16 >> 2] = HEAP32[$96 + 16 >> 2]; //@line 9815
      __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy20); //@line 9816
      __ZN13SocketAddress8set_portEt($2, 53); //@line 9817
      HEAP8[$4 >> 0] = 0; //@line 9818
      HEAP8[$6 >> 0] = 1; //@line 9819
      HEAP8[$8 >> 0] = 1; //@line 9820
      HEAP8[$10 >> 0] = 0; //@line 9821
      HEAP8[$12 >> 0] = 0; //@line 9822
      HEAP8[$14 >> 0] = 1; //@line 9823
      HEAP8[$16 >> 0] = 0; //@line 9824
      HEAP8[$16 + 1 >> 0] = 0; //@line 9824
      HEAP8[$16 + 2 >> 0] = 0; //@line 9824
      HEAP8[$16 + 3 >> 0] = 0; //@line 9824
      HEAP8[$16 + 4 >> 0] = 0; //@line 9824
      HEAP8[$16 + 5 >> 0] = 0; //@line 9824
      if (!(HEAP8[$18 >> 0] | 0)) {
       $$sroa$0$0$in$lcssa$i = $24; //@line 9828
      } else {
       $$048$i = $18; //@line 9830
       $$sroa$0$0$in47$i = $24; //@line 9830
       while (1) {
        $99 = _strcspn($$048$i, 7296) | 0; //@line 9832
        $101 = $$sroa$0$0$in47$i + 1 | 0; //@line 9834
        HEAP8[$$sroa$0$0$in47$i >> 0] = $99; //@line 9835
        $102 = $99 & 255; //@line 9836
        _memcpy($101 | 0, $$048$i | 0, $102 | 0) | 0; //@line 9837
        $103 = $101 + $102 | 0; //@line 9838
        $$048$i = $$048$i + ($99 + ((HEAP8[$$048$i + $99 >> 0] | 0) == 46 & 1)) | 0; //@line 9844
        if (!(HEAP8[$$048$i >> 0] | 0)) {
         $$sroa$0$0$in$lcssa$i = $103; //@line 9848
         break;
        } else {
         $$sroa$0$0$in47$i = $103; //@line 9851
        }
       }
      }
      HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 9856
      HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 9858
      HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $26; //@line 9860
      HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 9862
      HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 9865
      $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 9867
      $119 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($30, $2, $4, $$sroa$0$0$in$lcssa$i + 5 - $28 | 0) | 0; //@line 9868
      if (___async) {
       HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 9871
       $120 = $ReallocAsyncCtx4 + 4 | 0; //@line 9872
       HEAP32[$120 >> 2] = $2; //@line 9873
       $121 = $ReallocAsyncCtx4 + 8 | 0; //@line 9874
       HEAP32[$121 >> 2] = $4; //@line 9875
       $122 = $ReallocAsyncCtx4 + 12 | 0; //@line 9876
       HEAP32[$122 >> 2] = $6; //@line 9877
       $123 = $ReallocAsyncCtx4 + 16 | 0; //@line 9878
       HEAP32[$123 >> 2] = $8; //@line 9879
       $124 = $ReallocAsyncCtx4 + 20 | 0; //@line 9880
       HEAP32[$124 >> 2] = $10; //@line 9881
       $125 = $ReallocAsyncCtx4 + 24 | 0; //@line 9882
       HEAP32[$125 >> 2] = $12; //@line 9883
       $126 = $ReallocAsyncCtx4 + 28 | 0; //@line 9884
       HEAP32[$126 >> 2] = $14; //@line 9885
       $127 = $ReallocAsyncCtx4 + 32 | 0; //@line 9886
       HEAP32[$127 >> 2] = $16; //@line 9887
       $128 = $ReallocAsyncCtx4 + 36 | 0; //@line 9888
       HEAP32[$128 >> 2] = $18; //@line 9889
       $129 = $ReallocAsyncCtx4 + 40 | 0; //@line 9890
       HEAP32[$129 >> 2] = $20; //@line 9891
       $130 = $ReallocAsyncCtx4 + 44 | 0; //@line 9892
       HEAP32[$130 >> 2] = $22; //@line 9893
       $131 = $ReallocAsyncCtx4 + 48 | 0; //@line 9894
       HEAP32[$131 >> 2] = $24; //@line 9895
       $132 = $ReallocAsyncCtx4 + 52 | 0; //@line 9896
       HEAP8[$132 >> 0] = $26; //@line 9897
       $133 = $ReallocAsyncCtx4 + 56 | 0; //@line 9898
       HEAP32[$133 >> 2] = $28; //@line 9899
       $134 = $ReallocAsyncCtx4 + 60 | 0; //@line 9900
       HEAP32[$134 >> 2] = $30; //@line 9901
       $135 = $ReallocAsyncCtx4 + 64 | 0; //@line 9902
       HEAP32[$135 >> 2] = $32; //@line 9903
       $136 = $ReallocAsyncCtx4 + 68 | 0; //@line 9904
       HEAP32[$136 >> 2] = $34; //@line 9905
       $137 = $ReallocAsyncCtx4 + 72 | 0; //@line 9906
       HEAP32[$137 >> 2] = $36; //@line 9907
       $138 = $ReallocAsyncCtx4 + 76 | 0; //@line 9908
       HEAP32[$138 >> 2] = $38; //@line 9909
       $139 = $ReallocAsyncCtx4 + 80 | 0; //@line 9910
       HEAP32[$139 >> 2] = $40; //@line 9911
       $140 = $ReallocAsyncCtx4 + 84 | 0; //@line 9912
       HEAP32[$140 >> 2] = $42; //@line 9913
       $141 = $ReallocAsyncCtx4 + 88 | 0; //@line 9914
       HEAP32[$141 >> 2] = $44; //@line 9915
       $142 = $ReallocAsyncCtx4 + 92 | 0; //@line 9916
       HEAP32[$142 >> 2] = $46; //@line 9917
       $143 = $ReallocAsyncCtx4 + 96 | 0; //@line 9918
       HEAP32[$143 >> 2] = $48; //@line 9919
       $144 = $ReallocAsyncCtx4 + 100 | 0; //@line 9920
       HEAP8[$144 >> 0] = $$097; //@line 9921
       $145 = $ReallocAsyncCtx4 + 101 | 0; //@line 9922
       HEAP8[$145 >> 0] = $$0; //@line 9923
       $146 = $ReallocAsyncCtx4 + 102 | 0; //@line 9924
       HEAP8[$146 >> 0] = $$094; //@line 9925
       sp = STACKTOP; //@line 9926
       STACKTOP = sp; //@line 9927
       return;
      }
      HEAP32[___async_retval >> 2] = $119; //@line 9930
      ___async_unwind = 0; //@line 9931
      HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 9932
      $120 = $ReallocAsyncCtx4 + 4 | 0; //@line 9933
      HEAP32[$120 >> 2] = $2; //@line 9934
      $121 = $ReallocAsyncCtx4 + 8 | 0; //@line 9935
      HEAP32[$121 >> 2] = $4; //@line 9936
      $122 = $ReallocAsyncCtx4 + 12 | 0; //@line 9937
      HEAP32[$122 >> 2] = $6; //@line 9938
      $123 = $ReallocAsyncCtx4 + 16 | 0; //@line 9939
      HEAP32[$123 >> 2] = $8; //@line 9940
      $124 = $ReallocAsyncCtx4 + 20 | 0; //@line 9941
      HEAP32[$124 >> 2] = $10; //@line 9942
      $125 = $ReallocAsyncCtx4 + 24 | 0; //@line 9943
      HEAP32[$125 >> 2] = $12; //@line 9944
      $126 = $ReallocAsyncCtx4 + 28 | 0; //@line 9945
      HEAP32[$126 >> 2] = $14; //@line 9946
      $127 = $ReallocAsyncCtx4 + 32 | 0; //@line 9947
      HEAP32[$127 >> 2] = $16; //@line 9948
      $128 = $ReallocAsyncCtx4 + 36 | 0; //@line 9949
      HEAP32[$128 >> 2] = $18; //@line 9950
      $129 = $ReallocAsyncCtx4 + 40 | 0; //@line 9951
      HEAP32[$129 >> 2] = $20; //@line 9952
      $130 = $ReallocAsyncCtx4 + 44 | 0; //@line 9953
      HEAP32[$130 >> 2] = $22; //@line 9954
      $131 = $ReallocAsyncCtx4 + 48 | 0; //@line 9955
      HEAP32[$131 >> 2] = $24; //@line 9956
      $132 = $ReallocAsyncCtx4 + 52 | 0; //@line 9957
      HEAP8[$132 >> 0] = $26; //@line 9958
      $133 = $ReallocAsyncCtx4 + 56 | 0; //@line 9959
      HEAP32[$133 >> 2] = $28; //@line 9960
      $134 = $ReallocAsyncCtx4 + 60 | 0; //@line 9961
      HEAP32[$134 >> 2] = $30; //@line 9962
      $135 = $ReallocAsyncCtx4 + 64 | 0; //@line 9963
      HEAP32[$135 >> 2] = $32; //@line 9964
      $136 = $ReallocAsyncCtx4 + 68 | 0; //@line 9965
      HEAP32[$136 >> 2] = $34; //@line 9966
      $137 = $ReallocAsyncCtx4 + 72 | 0; //@line 9967
      HEAP32[$137 >> 2] = $36; //@line 9968
      $138 = $ReallocAsyncCtx4 + 76 | 0; //@line 9969
      HEAP32[$138 >> 2] = $38; //@line 9970
      $139 = $ReallocAsyncCtx4 + 80 | 0; //@line 9971
      HEAP32[$139 >> 2] = $40; //@line 9972
      $140 = $ReallocAsyncCtx4 + 84 | 0; //@line 9973
      HEAP32[$140 >> 2] = $42; //@line 9974
      $141 = $ReallocAsyncCtx4 + 88 | 0; //@line 9975
      HEAP32[$141 >> 2] = $44; //@line 9976
      $142 = $ReallocAsyncCtx4 + 92 | 0; //@line 9977
      HEAP32[$142 >> 2] = $46; //@line 9978
      $143 = $ReallocAsyncCtx4 + 96 | 0; //@line 9979
      HEAP32[$143 >> 2] = $48; //@line 9980
      $144 = $ReallocAsyncCtx4 + 100 | 0; //@line 9981
      HEAP8[$144 >> 0] = $$097; //@line 9982
      $145 = $ReallocAsyncCtx4 + 101 | 0; //@line 9983
      HEAP8[$145 >> 0] = $$0; //@line 9984
      $146 = $ReallocAsyncCtx4 + 102 | 0; //@line 9985
      HEAP8[$146 >> 0] = $$094; //@line 9986
      sp = STACKTOP; //@line 9987
      STACKTOP = sp; //@line 9988
      return;
     }
    }
    $64 = HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0; //@line 9994
    $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 9995
    $65 = FUNCTION_TABLE_iiii[$64 & 31]($22, $61 & 255, $2) | 0; //@line 9996
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 9999
     $66 = $ReallocAsyncCtx + 4 | 0; //@line 10000
     HEAP8[$66 >> 0] = $$1107; //@line 10001
     $67 = $ReallocAsyncCtx + 8 | 0; //@line 10002
     HEAP32[$67 >> 2] = $2; //@line 10003
     $68 = $ReallocAsyncCtx + 12 | 0; //@line 10004
     HEAP8[$68 >> 0] = $61; //@line 10005
     $69 = $ReallocAsyncCtx + 16 | 0; //@line 10006
     HEAP32[$69 >> 2] = $4; //@line 10007
     $70 = $ReallocAsyncCtx + 20 | 0; //@line 10008
     HEAP32[$70 >> 2] = $6; //@line 10009
     $71 = $ReallocAsyncCtx + 24 | 0; //@line 10010
     HEAP32[$71 >> 2] = $8; //@line 10011
     $72 = $ReallocAsyncCtx + 28 | 0; //@line 10012
     HEAP32[$72 >> 2] = $10; //@line 10013
     $73 = $ReallocAsyncCtx + 32 | 0; //@line 10014
     HEAP32[$73 >> 2] = $12; //@line 10015
     $74 = $ReallocAsyncCtx + 36 | 0; //@line 10016
     HEAP32[$74 >> 2] = $14; //@line 10017
     $75 = $ReallocAsyncCtx + 40 | 0; //@line 10018
     HEAP32[$75 >> 2] = $16; //@line 10019
     $76 = $ReallocAsyncCtx + 44 | 0; //@line 10020
     HEAP32[$76 >> 2] = $18; //@line 10021
     $77 = $ReallocAsyncCtx + 48 | 0; //@line 10022
     HEAP32[$77 >> 2] = $20; //@line 10023
     $78 = $ReallocAsyncCtx + 52 | 0; //@line 10024
     HEAP32[$78 >> 2] = $22; //@line 10025
     $79 = $ReallocAsyncCtx + 56 | 0; //@line 10026
     HEAP32[$79 >> 2] = $24; //@line 10027
     $80 = $ReallocAsyncCtx + 60 | 0; //@line 10028
     HEAP8[$80 >> 0] = $26; //@line 10029
     $81 = $ReallocAsyncCtx + 64 | 0; //@line 10030
     HEAP32[$81 >> 2] = $28; //@line 10031
     $82 = $ReallocAsyncCtx + 68 | 0; //@line 10032
     HEAP32[$82 >> 2] = $30; //@line 10033
     $83 = $ReallocAsyncCtx + 72 | 0; //@line 10034
     HEAP32[$83 >> 2] = $32; //@line 10035
     $84 = $ReallocAsyncCtx + 76 | 0; //@line 10036
     HEAP8[$84 >> 0] = $$094; //@line 10037
     $85 = $ReallocAsyncCtx + 80 | 0; //@line 10038
     HEAP32[$85 >> 2] = $34; //@line 10039
     $86 = $ReallocAsyncCtx + 84 | 0; //@line 10040
     HEAP32[$86 >> 2] = $36; //@line 10041
     $87 = $ReallocAsyncCtx + 88 | 0; //@line 10042
     HEAP32[$87 >> 2] = $38; //@line 10043
     $88 = $ReallocAsyncCtx + 92 | 0; //@line 10044
     HEAP32[$88 >> 2] = $40; //@line 10045
     $89 = $ReallocAsyncCtx + 96 | 0; //@line 10046
     HEAP32[$89 >> 2] = $42; //@line 10047
     $90 = $ReallocAsyncCtx + 100 | 0; //@line 10048
     HEAP32[$90 >> 2] = $44; //@line 10049
     $91 = $ReallocAsyncCtx + 104 | 0; //@line 10050
     HEAP32[$91 >> 2] = $46; //@line 10051
     $92 = $ReallocAsyncCtx + 108 | 0; //@line 10052
     HEAP32[$92 >> 2] = $48; //@line 10053
     sp = STACKTOP; //@line 10054
     STACKTOP = sp; //@line 10055
     return;
    }
    HEAP32[___async_retval >> 2] = $65; //@line 10058
    ___async_unwind = 0; //@line 10059
    HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 10060
    $66 = $ReallocAsyncCtx + 4 | 0; //@line 10061
    HEAP8[$66 >> 0] = $$1107; //@line 10062
    $67 = $ReallocAsyncCtx + 8 | 0; //@line 10063
    HEAP32[$67 >> 2] = $2; //@line 10064
    $68 = $ReallocAsyncCtx + 12 | 0; //@line 10065
    HEAP8[$68 >> 0] = $61; //@line 10066
    $69 = $ReallocAsyncCtx + 16 | 0; //@line 10067
    HEAP32[$69 >> 2] = $4; //@line 10068
    $70 = $ReallocAsyncCtx + 20 | 0; //@line 10069
    HEAP32[$70 >> 2] = $6; //@line 10070
    $71 = $ReallocAsyncCtx + 24 | 0; //@line 10071
    HEAP32[$71 >> 2] = $8; //@line 10072
    $72 = $ReallocAsyncCtx + 28 | 0; //@line 10073
    HEAP32[$72 >> 2] = $10; //@line 10074
    $73 = $ReallocAsyncCtx + 32 | 0; //@line 10075
    HEAP32[$73 >> 2] = $12; //@line 10076
    $74 = $ReallocAsyncCtx + 36 | 0; //@line 10077
    HEAP32[$74 >> 2] = $14; //@line 10078
    $75 = $ReallocAsyncCtx + 40 | 0; //@line 10079
    HEAP32[$75 >> 2] = $16; //@line 10080
    $76 = $ReallocAsyncCtx + 44 | 0; //@line 10081
    HEAP32[$76 >> 2] = $18; //@line 10082
    $77 = $ReallocAsyncCtx + 48 | 0; //@line 10083
    HEAP32[$77 >> 2] = $20; //@line 10084
    $78 = $ReallocAsyncCtx + 52 | 0; //@line 10085
    HEAP32[$78 >> 2] = $22; //@line 10086
    $79 = $ReallocAsyncCtx + 56 | 0; //@line 10087
    HEAP32[$79 >> 2] = $24; //@line 10088
    $80 = $ReallocAsyncCtx + 60 | 0; //@line 10089
    HEAP8[$80 >> 0] = $26; //@line 10090
    $81 = $ReallocAsyncCtx + 64 | 0; //@line 10091
    HEAP32[$81 >> 2] = $28; //@line 10092
    $82 = $ReallocAsyncCtx + 68 | 0; //@line 10093
    HEAP32[$82 >> 2] = $30; //@line 10094
    $83 = $ReallocAsyncCtx + 72 | 0; //@line 10095
    HEAP32[$83 >> 2] = $32; //@line 10096
    $84 = $ReallocAsyncCtx + 76 | 0; //@line 10097
    HEAP8[$84 >> 0] = $$094; //@line 10098
    $85 = $ReallocAsyncCtx + 80 | 0; //@line 10099
    HEAP32[$85 >> 2] = $34; //@line 10100
    $86 = $ReallocAsyncCtx + 84 | 0; //@line 10101
    HEAP32[$86 >> 2] = $36; //@line 10102
    $87 = $ReallocAsyncCtx + 88 | 0; //@line 10103
    HEAP32[$87 >> 2] = $38; //@line 10104
    $88 = $ReallocAsyncCtx + 92 | 0; //@line 10105
    HEAP32[$88 >> 2] = $40; //@line 10106
    $89 = $ReallocAsyncCtx + 96 | 0; //@line 10107
    HEAP32[$89 >> 2] = $42; //@line 10108
    $90 = $ReallocAsyncCtx + 100 | 0; //@line 10109
    HEAP32[$90 >> 2] = $44; //@line 10110
    $91 = $ReallocAsyncCtx + 104 | 0; //@line 10111
    HEAP32[$91 >> 2] = $46; //@line 10112
    $92 = $ReallocAsyncCtx + 108 | 0; //@line 10113
    HEAP32[$92 >> 2] = $48; //@line 10114
    sp = STACKTOP; //@line 10115
    STACKTOP = sp; //@line 10116
    return;
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  $$4110 = $$4$ph; //@line 10121
 }
 _free($4); //@line 10123
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 10124
 $162 = __ZN6Socket5closeEv($44) | 0; //@line 10125
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 10128
  $163 = $ReallocAsyncCtx6 + 4 | 0; //@line 10129
  HEAP32[$163 >> 2] = $$4110; //@line 10130
  $164 = $ReallocAsyncCtx6 + 8 | 0; //@line 10131
  HEAP32[$164 >> 2] = $30; //@line 10132
  $165 = $ReallocAsyncCtx6 + 12 | 0; //@line 10133
  HEAP32[$165 >> 2] = $32; //@line 10134
  sp = STACKTOP; //@line 10135
  STACKTOP = sp; //@line 10136
  return;
 }
 HEAP32[___async_retval >> 2] = $162; //@line 10139
 ___async_unwind = 0; //@line 10140
 HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 10141
 $163 = $ReallocAsyncCtx6 + 4 | 0; //@line 10142
 HEAP32[$163 >> 2] = $$4110; //@line 10143
 $164 = $ReallocAsyncCtx6 + 8 | 0; //@line 10144
 HEAP32[$164 >> 2] = $30; //@line 10145
 $165 = $ReallocAsyncCtx6 + 12 | 0; //@line 10146
 HEAP32[$165 >> 2] = $32; //@line 10147
 sp = STACKTOP; //@line 10148
 STACKTOP = sp; //@line 10149
 return;
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8536
 STACKTOP = STACKTOP + 96 | 0; //@line 8537
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 8537
 $vararg_buffer23 = sp + 72 | 0; //@line 8538
 $vararg_buffer20 = sp + 64 | 0; //@line 8539
 $vararg_buffer18 = sp + 56 | 0; //@line 8540
 $vararg_buffer15 = sp + 48 | 0; //@line 8541
 $vararg_buffer12 = sp + 40 | 0; //@line 8542
 $vararg_buffer9 = sp + 32 | 0; //@line 8543
 $vararg_buffer6 = sp + 24 | 0; //@line 8544
 $vararg_buffer3 = sp + 16 | 0; //@line 8545
 $vararg_buffer1 = sp + 8 | 0; //@line 8546
 $vararg_buffer = sp; //@line 8547
 $4 = sp + 80 | 0; //@line 8548
 $5 = HEAP32[131] | 0; //@line 8549
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 8553
   FUNCTION_TABLE_v[$5 & 7](); //@line 8554
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 73; //@line 8557
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 8559
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 8561
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer20; //@line 8563
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer20; //@line 8565
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 8567
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 8569
    HEAP8[$AsyncCtx + 28 >> 0] = $0; //@line 8571
    HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 8573
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer18; //@line 8575
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer18; //@line 8577
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer15; //@line 8579
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer15; //@line 8581
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer12; //@line 8583
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer12; //@line 8585
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer9; //@line 8587
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer9; //@line 8589
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer6; //@line 8591
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer6; //@line 8593
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer23; //@line 8595
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer23; //@line 8597
    HEAP32[$AsyncCtx + 84 >> 2] = $4; //@line 8599
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer3; //@line 8601
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer3; //@line 8603
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer1; //@line 8605
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer1; //@line 8607
    sp = STACKTOP; //@line 8608
    STACKTOP = sp; //@line 8609
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8611
    HEAP32[133] = (HEAP32[133] | 0) + 1; //@line 8614
    break;
   }
  }
 } while (0);
 $34 = HEAP32[122] | 0; //@line 8619
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 8623
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[119] | 0; //@line 8629
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 8636
       break;
      }
     }
     $43 = HEAP32[120] | 0; //@line 8640
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 8644
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 8649
      } else {
       label = 11; //@line 8651
      }
     }
    } else {
     label = 11; //@line 8655
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 8659
   }
   if (!((HEAP32[129] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[126] = HEAP32[124]; //@line 8671
    break;
   }
   $54 = HEAPU8[472] | 0; //@line 8675
   $55 = $0 & 255; //@line 8676
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 8681
    $$lobit = $59 >>> 6; //@line 8682
    $60 = $$lobit & 255; //@line 8683
    $64 = ($54 & 32 | 0) == 0; //@line 8687
    $65 = HEAP32[123] | 0; //@line 8688
    $66 = HEAP32[122] | 0; //@line 8689
    $67 = $0 << 24 >> 24 == 1; //@line 8690
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8694
      _vsnprintf($66, $65, $2, $3) | 0; //@line 8695
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 74; //@line 8698
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 8701
       sp = STACKTOP; //@line 8702
       STACKTOP = sp; //@line 8703
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 8705
      $69 = HEAP32[130] | 0; //@line 8706
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[129] | 0; //@line 8710
       $74 = HEAP32[122] | 0; //@line 8711
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8712
       FUNCTION_TABLE_vi[$73 & 511]($74); //@line 8713
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 77; //@line 8716
        sp = STACKTOP; //@line 8717
        STACKTOP = sp; //@line 8718
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 8720
        break;
       }
      }
      $71 = HEAP32[122] | 0; //@line 8724
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8725
      FUNCTION_TABLE_vi[$69 & 511]($71); //@line 8726
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 75; //@line 8729
       sp = STACKTOP; //@line 8730
       STACKTOP = sp; //@line 8731
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8733
      $72 = HEAP32[130] | 0; //@line 8734
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8735
      FUNCTION_TABLE_vi[$72 & 511](5635); //@line 8736
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 76; //@line 8739
       sp = STACKTOP; //@line 8740
       STACKTOP = sp; //@line 8741
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 8743
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 8750
       $$1143 = $66; //@line 8750
       $$1145 = $65; //@line 8750
       $$3154 = 0; //@line 8750
       label = 38; //@line 8751
      } else {
       if ($64) {
        $$0142 = $66; //@line 8754
        $$0144 = $65; //@line 8754
       } else {
        $76 = _snprintf($66, $65, 5637, $vararg_buffer) | 0; //@line 8756
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 8758
        $78 = ($$ | 0) > 0; //@line 8759
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 8764
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 8764
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 8768
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 5655; //@line 8774
          label = 35; //@line 8775
          break;
         }
        case 1:
         {
          $$sink = 5661; //@line 8779
          label = 35; //@line 8780
          break;
         }
        case 3:
         {
          $$sink = 5649; //@line 8784
          label = 35; //@line 8785
          break;
         }
        case 7:
         {
          $$sink = 5643; //@line 8789
          label = 35; //@line 8790
          break;
         }
        default:
         {
          $$0141 = 0; //@line 8794
          $$1152 = 0; //@line 8794
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 8798
         $$0141 = $60 & 1; //@line 8801
         $$1152 = _snprintf($$0142, $$0144, 5667, $vararg_buffer1) | 0; //@line 8801
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 8804
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 8806
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 8808
         $$1$off0 = $extract$t159; //@line 8813
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 8813
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 8813
         $$3154 = $$1152; //@line 8813
         label = 38; //@line 8814
        } else {
         $$1$off0 = $extract$t159; //@line 8816
         $$1143 = $$0142; //@line 8816
         $$1145 = $$0144; //@line 8816
         $$3154 = $$1152$; //@line 8816
         label = 38; //@line 8817
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[127] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 8830
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8831
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 8832
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 78; //@line 8835
           HEAP32[$AsyncCtx60 + 4 >> 2] = $vararg_buffer20; //@line 8837
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer20; //@line 8839
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer18; //@line 8841
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer18; //@line 8843
           HEAP32[$AsyncCtx60 + 20 >> 2] = $2; //@line 8845
           HEAP32[$AsyncCtx60 + 24 >> 2] = $3; //@line 8847
           HEAP32[$AsyncCtx60 + 28 >> 2] = $vararg_buffer15; //@line 8849
           HEAP32[$AsyncCtx60 + 32 >> 2] = $1; //@line 8851
           HEAP32[$AsyncCtx60 + 36 >> 2] = $vararg_buffer15; //@line 8853
           HEAP32[$AsyncCtx60 + 40 >> 2] = $vararg_buffer12; //@line 8855
           HEAP32[$AsyncCtx60 + 44 >> 2] = $vararg_buffer12; //@line 8857
           HEAP32[$AsyncCtx60 + 48 >> 2] = $vararg_buffer9; //@line 8859
           HEAP32[$AsyncCtx60 + 52 >> 2] = $vararg_buffer9; //@line 8861
           HEAP8[$AsyncCtx60 + 56 >> 0] = $$1$off0 & 1; //@line 8864
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer6; //@line 8866
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer6; //@line 8868
           HEAP32[$AsyncCtx60 + 68 >> 2] = $vararg_buffer23; //@line 8870
           HEAP32[$AsyncCtx60 + 72 >> 2] = $vararg_buffer23; //@line 8872
           HEAP32[$AsyncCtx60 + 76 >> 2] = $$1143; //@line 8874
           HEAP32[$AsyncCtx60 + 80 >> 2] = $$1145; //@line 8876
           HEAP32[$AsyncCtx60 + 84 >> 2] = $55; //@line 8878
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer3; //@line 8880
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer3; //@line 8882
           HEAP32[$AsyncCtx60 + 96 >> 2] = $4; //@line 8884
           HEAP32[$AsyncCtx60 + 100 >> 2] = $$3154; //@line 8886
           sp = STACKTOP; //@line 8887
           STACKTOP = sp; //@line 8888
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 8890
          $125 = HEAP32[127] | 0; //@line 8895
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8896
          $126 = FUNCTION_TABLE_ii[$125 & 31](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 8897
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 79; //@line 8900
           HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer20; //@line 8902
           HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer20; //@line 8904
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer18; //@line 8906
           HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer18; //@line 8908
           HEAP32[$AsyncCtx38 + 20 >> 2] = $2; //@line 8910
           HEAP32[$AsyncCtx38 + 24 >> 2] = $3; //@line 8912
           HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer15; //@line 8914
           HEAP32[$AsyncCtx38 + 32 >> 2] = $1; //@line 8916
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer15; //@line 8918
           HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer12; //@line 8920
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer12; //@line 8922
           HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer9; //@line 8924
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer9; //@line 8926
           HEAP8[$AsyncCtx38 + 56 >> 0] = $$1$off0 & 1; //@line 8929
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer6; //@line 8931
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer6; //@line 8933
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer23; //@line 8935
           HEAP32[$AsyncCtx38 + 72 >> 2] = $vararg_buffer23; //@line 8937
           HEAP32[$AsyncCtx38 + 76 >> 2] = $$1143; //@line 8939
           HEAP32[$AsyncCtx38 + 80 >> 2] = $$1145; //@line 8941
           HEAP32[$AsyncCtx38 + 84 >> 2] = $55; //@line 8943
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer3; //@line 8945
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer3; //@line 8947
           HEAP32[$AsyncCtx38 + 96 >> 2] = $4; //@line 8949
           sp = STACKTOP; //@line 8950
           STACKTOP = sp; //@line 8951
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 8953
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 8954
           $151 = _snprintf($$1143, $$1145, 5667, $vararg_buffer3) | 0; //@line 8955
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 8957
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 8962
            $$3147 = $$1145 - $$10 | 0; //@line 8962
            label = 44; //@line 8963
            break;
           } else {
            $$3147168 = $$1145; //@line 8966
            $$3169 = $$1143; //@line 8966
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 8971
          $$3147 = $$1145; //@line 8971
          label = 44; //@line 8972
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 8978
          $$3169 = $$3; //@line 8978
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 8983
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 8989
          $$5156 = _snprintf($$3169, $$3147168, 5670, $vararg_buffer6) | 0; //@line 8991
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 8995
          $$5156 = _snprintf($$3169, $$3147168, 5685, $vararg_buffer9) | 0; //@line 8997
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 9001
          $$5156 = _snprintf($$3169, $$3147168, 5700, $vararg_buffer12) | 0; //@line 9003
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 9007
          $$5156 = _snprintf($$3169, $$3147168, 5715, $vararg_buffer15) | 0; //@line 9009
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 5730, $vararg_buffer18) | 0; //@line 9014
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 9018
        $168 = $$3169 + $$5156$ | 0; //@line 9020
        $169 = $$3147168 - $$5156$ | 0; //@line 9021
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9025
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 9026
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 80; //@line 9029
          HEAP32[$AsyncCtx56 + 4 >> 2] = $vararg_buffer20; //@line 9031
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer20; //@line 9033
          HEAP8[$AsyncCtx56 + 12 >> 0] = $$1$off0 & 1; //@line 9036
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer23; //@line 9038
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer23; //@line 9040
          HEAP32[$AsyncCtx56 + 24 >> 2] = $169; //@line 9042
          HEAP32[$AsyncCtx56 + 28 >> 2] = $168; //@line 9044
          sp = STACKTOP; //@line 9045
          STACKTOP = sp; //@line 9046
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 9048
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 9050
         $181 = $168 + $$13 | 0; //@line 9052
         $182 = $169 - $$13 | 0; //@line 9053
         if (($$13 | 0) > 0) {
          $184 = HEAP32[128] | 0; //@line 9056
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9061
            $186 = FUNCTION_TABLE_i[$184 & 0]() | 0; //@line 9062
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 81; //@line 9065
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 9067
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 9069
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 9071
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 9073
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 9076
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 9078
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 9080
             sp = STACKTOP; //@line 9081
             STACKTOP = sp; //@line 9082
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 9084
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 9085
             $194 = _snprintf($181, $182, 5667, $vararg_buffer20) | 0; //@line 9086
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 9088
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 9093
              $$6150 = $182 - $$18 | 0; //@line 9093
              $$9 = $$18; //@line 9093
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 9100
            $$6150 = $182; //@line 9100
            $$9 = $$13; //@line 9100
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 5745, $vararg_buffer23) | 0; //@line 9109
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[129] | 0; //@line 9115
      $202 = HEAP32[122] | 0; //@line 9116
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9117
      FUNCTION_TABLE_vi[$201 & 511]($202); //@line 9118
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 82; //@line 9121
       sp = STACKTOP; //@line 9122
       STACKTOP = sp; //@line 9123
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 9125
       break;
      }
     }
    } while (0);
    HEAP32[126] = HEAP32[124]; //@line 9131
   }
  }
 } while (0);
 $204 = HEAP32[132] | 0; //@line 9135
 if (!$204) {
  STACKTOP = sp; //@line 9138
  return;
 }
 $206 = HEAP32[133] | 0; //@line 9140
 HEAP32[133] = 0; //@line 9141
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9142
 FUNCTION_TABLE_v[$204 & 7](); //@line 9143
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 83; //@line 9146
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 9148
  sp = STACKTOP; //@line 9149
  STACKTOP = sp; //@line 9150
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 9152
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 9155
 } else {
  STACKTOP = sp; //@line 9157
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 9160
  $$pre = HEAP32[132] | 0; //@line 9161
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9162
  FUNCTION_TABLE_v[$$pre & 7](); //@line 9163
  if (___async) {
   label = 70; //@line 9166
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 9169
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 9172
  } else {
   label = 72; //@line 9174
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 84; //@line 9179
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 9181
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 9183
  sp = STACKTOP; //@line 9184
  STACKTOP = sp; //@line 9185
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 9188
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_208($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $101 = 0, $104 = 0, $111 = 0, $113 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $151 = 0, $153 = 0, $16 = 0, $161 = 0, $164 = 0, $166 = 0, $174 = 0, $177 = 0, $179 = 0, $18 = 0, $187 = 0, $190 = 0, $192 = 0, $2 = 0, $20 = 0, $205 = 0, $206 = 0, $207 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $86 = 0, $87 = 0, $95 = 0, $98 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29191
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29193
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29195
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29197
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29199
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29201
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29203
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29205
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29207
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29209
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29211
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29213
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29215
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29217
 $27 = $24 + 12 | 0; //@line 29218
 $28 = HEAP32[$27 >> 2] | 0; //@line 29219
 if ($28 | 0) {
  $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 29223
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 29224
  FUNCTION_TABLE_vii[$31 & 7]($18, $24); //@line 29225
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 29228
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 29229
   HEAP32[$32 >> 2] = $2; //@line 29230
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 29231
   HEAP32[$33 >> 2] = $4; //@line 29232
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 29233
   HEAP32[$34 >> 2] = $6; //@line 29234
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 29235
   HEAP32[$35 >> 2] = $8; //@line 29236
   $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 29237
   HEAP32[$36 >> 2] = $10; //@line 29238
   $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 29239
   HEAP32[$37 >> 2] = $12; //@line 29240
   $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 29241
   HEAP32[$38 >> 2] = $27; //@line 29242
   $39 = $ReallocAsyncCtx3 + 32 | 0; //@line 29243
   HEAP32[$39 >> 2] = $14; //@line 29244
   $40 = $ReallocAsyncCtx3 + 36 | 0; //@line 29245
   HEAP32[$40 >> 2] = $16; //@line 29246
   $41 = $ReallocAsyncCtx3 + 40 | 0; //@line 29247
   HEAP32[$41 >> 2] = $18; //@line 29248
   $42 = $ReallocAsyncCtx3 + 44 | 0; //@line 29249
   HEAP32[$42 >> 2] = $20; //@line 29250
   $43 = $ReallocAsyncCtx3 + 48 | 0; //@line 29251
   HEAP32[$43 >> 2] = $22; //@line 29252
   $44 = $ReallocAsyncCtx3 + 52 | 0; //@line 29253
   HEAP32[$44 >> 2] = $26; //@line 29254
   sp = STACKTOP; //@line 29255
   return;
  }
  ___async_unwind = 0; //@line 29258
  HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 29259
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 29260
  HEAP32[$32 >> 2] = $2; //@line 29261
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 29262
  HEAP32[$33 >> 2] = $4; //@line 29263
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 29264
  HEAP32[$34 >> 2] = $6; //@line 29265
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 29266
  HEAP32[$35 >> 2] = $8; //@line 29267
  $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 29268
  HEAP32[$36 >> 2] = $10; //@line 29269
  $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 29270
  HEAP32[$37 >> 2] = $12; //@line 29271
  $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 29272
  HEAP32[$38 >> 2] = $27; //@line 29273
  $39 = $ReallocAsyncCtx3 + 32 | 0; //@line 29274
  HEAP32[$39 >> 2] = $14; //@line 29275
  $40 = $ReallocAsyncCtx3 + 36 | 0; //@line 29276
  HEAP32[$40 >> 2] = $16; //@line 29277
  $41 = $ReallocAsyncCtx3 + 40 | 0; //@line 29278
  HEAP32[$41 >> 2] = $18; //@line 29279
  $42 = $ReallocAsyncCtx3 + 44 | 0; //@line 29280
  HEAP32[$42 >> 2] = $20; //@line 29281
  $43 = $ReallocAsyncCtx3 + 48 | 0; //@line 29282
  HEAP32[$43 >> 2] = $22; //@line 29283
  $44 = $ReallocAsyncCtx3 + 52 | 0; //@line 29284
  HEAP32[$44 >> 2] = $26; //@line 29285
  sp = STACKTOP; //@line 29286
  return;
 }
 HEAP32[$20 >> 2] = 0; //@line 29289
 $45 = $2 + 32 | 0; //@line 29290
 do {
  if (($45 | 0) != ($12 | 0)) {
   $47 = $2 + 44 | 0; //@line 29294
   $48 = HEAP32[$47 >> 2] | 0; //@line 29295
   if ($48 | 0) {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 29299
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 29300
    FUNCTION_TABLE_vi[$51 & 511]($45); //@line 29301
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 29304
     $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 29305
     HEAP32[$52 >> 2] = $2; //@line 29306
     $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 29307
     HEAP32[$53 >> 2] = $4; //@line 29308
     $54 = $ReallocAsyncCtx4 + 12 | 0; //@line 29309
     HEAP32[$54 >> 2] = $6; //@line 29310
     $55 = $ReallocAsyncCtx4 + 16 | 0; //@line 29311
     HEAP32[$55 >> 2] = $8; //@line 29312
     $56 = $ReallocAsyncCtx4 + 20 | 0; //@line 29313
     HEAP32[$56 >> 2] = $10; //@line 29314
     $57 = $ReallocAsyncCtx4 + 24 | 0; //@line 29315
     HEAP32[$57 >> 2] = $12; //@line 29316
     $58 = $ReallocAsyncCtx4 + 28 | 0; //@line 29317
     HEAP32[$58 >> 2] = $47; //@line 29318
     $59 = $ReallocAsyncCtx4 + 32 | 0; //@line 29319
     HEAP32[$59 >> 2] = $45; //@line 29320
     $60 = $ReallocAsyncCtx4 + 36 | 0; //@line 29321
     HEAP32[$60 >> 2] = $14; //@line 29322
     $61 = $ReallocAsyncCtx4 + 40 | 0; //@line 29323
     HEAP32[$61 >> 2] = $16; //@line 29324
     $62 = $ReallocAsyncCtx4 + 44 | 0; //@line 29325
     HEAP32[$62 >> 2] = $18; //@line 29326
     $63 = $ReallocAsyncCtx4 + 48 | 0; //@line 29327
     HEAP32[$63 >> 2] = $22; //@line 29328
     $64 = $ReallocAsyncCtx4 + 52 | 0; //@line 29329
     HEAP32[$64 >> 2] = $26; //@line 29330
     sp = STACKTOP; //@line 29331
     return;
    }
    ___async_unwind = 0; //@line 29334
    HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 29335
    $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 29336
    HEAP32[$52 >> 2] = $2; //@line 29337
    $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 29338
    HEAP32[$53 >> 2] = $4; //@line 29339
    $54 = $ReallocAsyncCtx4 + 12 | 0; //@line 29340
    HEAP32[$54 >> 2] = $6; //@line 29341
    $55 = $ReallocAsyncCtx4 + 16 | 0; //@line 29342
    HEAP32[$55 >> 2] = $8; //@line 29343
    $56 = $ReallocAsyncCtx4 + 20 | 0; //@line 29344
    HEAP32[$56 >> 2] = $10; //@line 29345
    $57 = $ReallocAsyncCtx4 + 24 | 0; //@line 29346
    HEAP32[$57 >> 2] = $12; //@line 29347
    $58 = $ReallocAsyncCtx4 + 28 | 0; //@line 29348
    HEAP32[$58 >> 2] = $47; //@line 29349
    $59 = $ReallocAsyncCtx4 + 32 | 0; //@line 29350
    HEAP32[$59 >> 2] = $45; //@line 29351
    $60 = $ReallocAsyncCtx4 + 36 | 0; //@line 29352
    HEAP32[$60 >> 2] = $14; //@line 29353
    $61 = $ReallocAsyncCtx4 + 40 | 0; //@line 29354
    HEAP32[$61 >> 2] = $16; //@line 29355
    $62 = $ReallocAsyncCtx4 + 44 | 0; //@line 29356
    HEAP32[$62 >> 2] = $18; //@line 29357
    $63 = $ReallocAsyncCtx4 + 48 | 0; //@line 29358
    HEAP32[$63 >> 2] = $22; //@line 29359
    $64 = $ReallocAsyncCtx4 + 52 | 0; //@line 29360
    HEAP32[$64 >> 2] = $26; //@line 29361
    sp = STACKTOP; //@line 29362
    return;
   }
   $65 = $12 + 12 | 0; //@line 29365
   $66 = HEAP32[$65 >> 2] | 0; //@line 29366
   if (!$66) {
    HEAP32[$47 >> 2] = 0; //@line 29369
    break;
   }
   $69 = HEAP32[$66 + 4 >> 2] | 0; //@line 29373
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 29374
   FUNCTION_TABLE_vii[$69 & 7]($45, $12); //@line 29375
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 29378
    $70 = $ReallocAsyncCtx5 + 4 | 0; //@line 29379
    HEAP32[$70 >> 2] = $2; //@line 29380
    $71 = $ReallocAsyncCtx5 + 8 | 0; //@line 29381
    HEAP32[$71 >> 2] = $4; //@line 29382
    $72 = $ReallocAsyncCtx5 + 12 | 0; //@line 29383
    HEAP32[$72 >> 2] = $6; //@line 29384
    $73 = $ReallocAsyncCtx5 + 16 | 0; //@line 29385
    HEAP32[$73 >> 2] = $8; //@line 29386
    $74 = $ReallocAsyncCtx5 + 20 | 0; //@line 29387
    HEAP32[$74 >> 2] = $10; //@line 29388
    $75 = $ReallocAsyncCtx5 + 24 | 0; //@line 29389
    HEAP32[$75 >> 2] = $47; //@line 29390
    $76 = $ReallocAsyncCtx5 + 28 | 0; //@line 29391
    HEAP32[$76 >> 2] = $14; //@line 29392
    $77 = $ReallocAsyncCtx5 + 32 | 0; //@line 29393
    HEAP32[$77 >> 2] = $16; //@line 29394
    $78 = $ReallocAsyncCtx5 + 36 | 0; //@line 29395
    HEAP32[$78 >> 2] = $65; //@line 29396
    $79 = $ReallocAsyncCtx5 + 40 | 0; //@line 29397
    HEAP32[$79 >> 2] = $45; //@line 29398
    $80 = $ReallocAsyncCtx5 + 44 | 0; //@line 29399
    HEAP32[$80 >> 2] = $18; //@line 29400
    $81 = $ReallocAsyncCtx5 + 48 | 0; //@line 29401
    HEAP32[$81 >> 2] = $22; //@line 29402
    $82 = $ReallocAsyncCtx5 + 52 | 0; //@line 29403
    HEAP32[$82 >> 2] = $26; //@line 29404
    sp = STACKTOP; //@line 29405
    return;
   }
   ___async_unwind = 0; //@line 29408
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 29409
   $70 = $ReallocAsyncCtx5 + 4 | 0; //@line 29410
   HEAP32[$70 >> 2] = $2; //@line 29411
   $71 = $ReallocAsyncCtx5 + 8 | 0; //@line 29412
   HEAP32[$71 >> 2] = $4; //@line 29413
   $72 = $ReallocAsyncCtx5 + 12 | 0; //@line 29414
   HEAP32[$72 >> 2] = $6; //@line 29415
   $73 = $ReallocAsyncCtx5 + 16 | 0; //@line 29416
   HEAP32[$73 >> 2] = $8; //@line 29417
   $74 = $ReallocAsyncCtx5 + 20 | 0; //@line 29418
   HEAP32[$74 >> 2] = $10; //@line 29419
   $75 = $ReallocAsyncCtx5 + 24 | 0; //@line 29420
   HEAP32[$75 >> 2] = $47; //@line 29421
   $76 = $ReallocAsyncCtx5 + 28 | 0; //@line 29422
   HEAP32[$76 >> 2] = $14; //@line 29423
   $77 = $ReallocAsyncCtx5 + 32 | 0; //@line 29424
   HEAP32[$77 >> 2] = $16; //@line 29425
   $78 = $ReallocAsyncCtx5 + 36 | 0; //@line 29426
   HEAP32[$78 >> 2] = $65; //@line 29427
   $79 = $ReallocAsyncCtx5 + 40 | 0; //@line 29428
   HEAP32[$79 >> 2] = $45; //@line 29429
   $80 = $ReallocAsyncCtx5 + 44 | 0; //@line 29430
   HEAP32[$80 >> 2] = $18; //@line 29431
   $81 = $ReallocAsyncCtx5 + 48 | 0; //@line 29432
   HEAP32[$81 >> 2] = $22; //@line 29433
   $82 = $ReallocAsyncCtx5 + 52 | 0; //@line 29434
   HEAP32[$82 >> 2] = $26; //@line 29435
   sp = STACKTOP; //@line 29436
   return;
  }
 } while (0);
 HEAP32[$2 + 8 >> 2] = $4; //@line 29441
 HEAP32[$2 + 48 >> 2] = $6; //@line 29443
 HEAP32[$2 + 52 >> 2] = $8; //@line 29445
 $86 = $2 + 56 | 0; //@line 29446
 HEAP32[$86 >> 2] = 0; //@line 29447
 $87 = $2 + 60 | 0; //@line 29448
 HEAP32[$87 >> 2] = 0; //@line 29449
 HEAP32[$2 + 64 >> 2] = 0; //@line 29451
 HEAP8[$2 + 82 >> 0] = 0; //@line 29453
 HEAP8[$2 + 83 >> 0] = 1; //@line 29455
 HEAP8[$2 + 84 >> 0] = 3; //@line 29457
 HEAP8[$2 + 85 >> 0] = 0; //@line 29459
 HEAP16[$2 + 80 >> 1] = 0; //@line 29461
 HEAP32[$2 + 76 >> 2] = 0; //@line 29463
 $95 = $2 + 72 | 0; //@line 29464
 HEAP32[$95 >> 2] = 15500; //@line 29465
 HEAP8[$2 + 86 >> 0] = 0; //@line 29467
 HEAP32[$2 + 88 >> 2] = 0; //@line 29469
 $98 = HEAP32[177] | 0; //@line 29470
 HEAP32[177] = $98 + 1; //@line 29472
 HEAP32[$2 >> 2] = ($98 | 0) > 32767 ? 1 : $98; //@line 29475
 $101 = HEAP32[2509] | 0; //@line 29476
 if (!$101) {
  $$1 = 0; //@line 29479
  $151 = 0; //@line 29479
 } else {
  $104 = HEAP32[$101 + 56 >> 2] | 0; //@line 29482
  if (!$104) {
   $$1 = 1; //@line 29485
   $151 = 0; //@line 29485
  } else {
   if ((HEAP32[$101 + 8 >> 2] | 0) == ($4 | 0)) {
    HEAP32[$86 >> 2] = $104; //@line 29491
    HEAP32[$87 >> 2] = HEAP32[$101 + 60 >> 2]; //@line 29494
    $$1 = 1; //@line 29495
    $151 = $104; //@line 29495
   } else {
    $$1 = 1; //@line 29497
    $151 = 0; //@line 29497
   }
  }
 }
 $111 = HEAP32[2510] | 0; //@line 29501
 if (!$111) {
  $$1$1 = $$1; //@line 29504
  $164 = $151; //@line 29504
 } else {
  if (!$151) {
   $153 = HEAP32[$111 + 56 >> 2] | 0; //@line 29509
   if (!$153) {
    $205 = 0; //@line 29512
   } else {
    if ((HEAP32[$111 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$86 >> 2] = $153; //@line 29518
     HEAP32[$87 >> 2] = HEAP32[$111 + 60 >> 2]; //@line 29521
     $205 = $153; //@line 29522
    } else {
     $205 = 0; //@line 29524
    }
   }
  } else {
   $205 = $151; //@line 29528
  }
  $$1$1 = $$1 + 1 | 0; //@line 29531
  $164 = $205; //@line 29531
 }
 $161 = HEAP32[2511] | 0; //@line 29533
 if (!$161) {
  $$1$2 = $$1$1; //@line 29536
  $177 = $164; //@line 29536
 } else {
  if (!$164) {
   $166 = HEAP32[$161 + 56 >> 2] | 0; //@line 29541
   if (!$166) {
    $206 = 0; //@line 29544
   } else {
    if ((HEAP32[$161 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$86 >> 2] = $166; //@line 29550
     HEAP32[$87 >> 2] = HEAP32[$161 + 60 >> 2]; //@line 29553
     $206 = $166; //@line 29554
    } else {
     $206 = 0; //@line 29556
    }
   }
  } else {
   $206 = $164; //@line 29560
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 29563
  $177 = $206; //@line 29563
 }
 $174 = HEAP32[2512] | 0; //@line 29565
 if (!$174) {
  $$1$3 = $$1$2; //@line 29568
  $190 = $177; //@line 29568
 } else {
  if (!$177) {
   $179 = HEAP32[$174 + 56 >> 2] | 0; //@line 29573
   if (!$179) {
    $207 = 0; //@line 29576
   } else {
    if ((HEAP32[$174 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$86 >> 2] = $179; //@line 29582
     HEAP32[$87 >> 2] = HEAP32[$174 + 60 >> 2]; //@line 29585
     $207 = $179; //@line 29586
    } else {
     $207 = 0; //@line 29588
    }
   }
  } else {
   $207 = $177; //@line 29592
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 29595
  $190 = $207; //@line 29595
 }
 $187 = HEAP32[2513] | 0; //@line 29597
 if (!$187) {
  $$1$4 = $$1$3; //@line 29600
 } else {
  if (!$190) {
   $192 = HEAP32[$187 + 56 >> 2] | 0; //@line 29605
   if ($192 | 0) {
    if ((HEAP32[$187 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$86 >> 2] = $192; //@line 29612
     HEAP32[$87 >> 2] = HEAP32[$187 + 60 >> 2]; //@line 29615
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 29620
 }
 HEAP32[10036 + ($22 << 2) >> 2] = $2; //@line 29623
 HEAP32[$95 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 29626
 if (HEAP8[10976] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 29630
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 29631
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 29634
   $148 = $ReallocAsyncCtx13 + 4 | 0; //@line 29635
   HEAP32[$148 >> 2] = $2; //@line 29636
   $149 = $ReallocAsyncCtx13 + 8 | 0; //@line 29637
   HEAP32[$149 >> 2] = $10; //@line 29638
   sp = STACKTOP; //@line 29639
   return;
  }
  ___async_unwind = 0; //@line 29642
  HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 29643
  $148 = $ReallocAsyncCtx13 + 4 | 0; //@line 29644
  HEAP32[$148 >> 2] = $2; //@line 29645
  $149 = $ReallocAsyncCtx13 + 8 | 0; //@line 29646
  HEAP32[$149 >> 2] = $10; //@line 29647
  sp = STACKTOP; //@line 29648
  return;
 }
 $113 = $2 + 44 | 0; //@line 29651
 $114 = HEAP32[$113 >> 2] | 0; //@line 29652
 if (!$114) {
  $128 = $16 + 12 | 0; //@line 29655
  HEAP32[$128 >> 2] = 0; //@line 29656
  $130 = $14 + 4 | 0; //@line 29658
  HEAP32[$130 >> 2] = 0; //@line 29660
  HEAP32[$130 + 4 >> 2] = 0; //@line 29663
  HEAP32[$14 >> 2] = 3; //@line 29664
  $134 = $14 + 12 | 0; //@line 29665
  HEAP32[$134 >> 2] = 712; //@line 29666
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 29667
  $135 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 100, $14) | 0; //@line 29668
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 29671
   $136 = $ReallocAsyncCtx14 + 4 | 0; //@line 29672
   HEAP32[$136 >> 2] = $10; //@line 29673
   $137 = $ReallocAsyncCtx14 + 8 | 0; //@line 29674
   HEAP32[$137 >> 2] = $14; //@line 29675
   $138 = $ReallocAsyncCtx14 + 12 | 0; //@line 29676
   HEAP32[$138 >> 2] = $16; //@line 29677
   $139 = $ReallocAsyncCtx14 + 16 | 0; //@line 29678
   HEAP32[$139 >> 2] = $128; //@line 29679
   $140 = $ReallocAsyncCtx14 + 20 | 0; //@line 29680
   HEAP32[$140 >> 2] = $18; //@line 29681
   $141 = $ReallocAsyncCtx14 + 24 | 0; //@line 29682
   HEAP32[$141 >> 2] = $45; //@line 29683
   $142 = $ReallocAsyncCtx14 + 28 | 0; //@line 29684
   HEAP32[$142 >> 2] = $2; //@line 29685
   $143 = $ReallocAsyncCtx14 + 32 | 0; //@line 29686
   HEAP32[$143 >> 2] = $113; //@line 29687
   $144 = $ReallocAsyncCtx14 + 36 | 0; //@line 29688
   HEAP32[$144 >> 2] = $26; //@line 29689
   $145 = $ReallocAsyncCtx14 + 40 | 0; //@line 29690
   HEAP32[$145 >> 2] = $2; //@line 29691
   $146 = $ReallocAsyncCtx14 + 44 | 0; //@line 29692
   HEAP32[$146 >> 2] = $134; //@line 29693
   sp = STACKTOP; //@line 29694
   return;
  }
  HEAP32[___async_retval >> 2] = $135; //@line 29698
  ___async_unwind = 0; //@line 29699
  HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 29700
  $136 = $ReallocAsyncCtx14 + 4 | 0; //@line 29701
  HEAP32[$136 >> 2] = $10; //@line 29702
  $137 = $ReallocAsyncCtx14 + 8 | 0; //@line 29703
  HEAP32[$137 >> 2] = $14; //@line 29704
  $138 = $ReallocAsyncCtx14 + 12 | 0; //@line 29705
  HEAP32[$138 >> 2] = $16; //@line 29706
  $139 = $ReallocAsyncCtx14 + 16 | 0; //@line 29707
  HEAP32[$139 >> 2] = $128; //@line 29708
  $140 = $ReallocAsyncCtx14 + 20 | 0; //@line 29709
  HEAP32[$140 >> 2] = $18; //@line 29710
  $141 = $ReallocAsyncCtx14 + 24 | 0; //@line 29711
  HEAP32[$141 >> 2] = $45; //@line 29712
  $142 = $ReallocAsyncCtx14 + 28 | 0; //@line 29713
  HEAP32[$142 >> 2] = $2; //@line 29714
  $143 = $ReallocAsyncCtx14 + 32 | 0; //@line 29715
  HEAP32[$143 >> 2] = $113; //@line 29716
  $144 = $ReallocAsyncCtx14 + 36 | 0; //@line 29717
  HEAP32[$144 >> 2] = $26; //@line 29718
  $145 = $ReallocAsyncCtx14 + 40 | 0; //@line 29719
  HEAP32[$145 >> 2] = $2; //@line 29720
  $146 = $ReallocAsyncCtx14 + 44 | 0; //@line 29721
  HEAP32[$146 >> 2] = $134; //@line 29722
  sp = STACKTOP; //@line 29723
  return;
 } else {
  $117 = HEAP32[$114 + 4 >> 2] | 0; //@line 29727
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 29728
  FUNCTION_TABLE_vii[$117 & 7]($16, $45); //@line 29729
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 29732
   $118 = $ReallocAsyncCtx6 + 4 | 0; //@line 29733
   HEAP32[$118 >> 2] = $10; //@line 29734
   $119 = $ReallocAsyncCtx6 + 8 | 0; //@line 29735
   HEAP32[$119 >> 2] = $14; //@line 29736
   $120 = $ReallocAsyncCtx6 + 12 | 0; //@line 29737
   HEAP32[$120 >> 2] = $113; //@line 29738
   $121 = $ReallocAsyncCtx6 + 16 | 0; //@line 29739
   HEAP32[$121 >> 2] = $16; //@line 29740
   $122 = $ReallocAsyncCtx6 + 20 | 0; //@line 29741
   HEAP32[$122 >> 2] = $18; //@line 29742
   $123 = $ReallocAsyncCtx6 + 24 | 0; //@line 29743
   HEAP32[$123 >> 2] = $45; //@line 29744
   $124 = $ReallocAsyncCtx6 + 28 | 0; //@line 29745
   HEAP32[$124 >> 2] = $2; //@line 29746
   $125 = $ReallocAsyncCtx6 + 32 | 0; //@line 29747
   HEAP32[$125 >> 2] = $113; //@line 29748
   $126 = $ReallocAsyncCtx6 + 36 | 0; //@line 29749
   HEAP32[$126 >> 2] = $26; //@line 29750
   $127 = $ReallocAsyncCtx6 + 40 | 0; //@line 29751
   HEAP32[$127 >> 2] = $2; //@line 29752
   sp = STACKTOP; //@line 29753
   return;
  }
  ___async_unwind = 0; //@line 29756
  HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 29757
  $118 = $ReallocAsyncCtx6 + 4 | 0; //@line 29758
  HEAP32[$118 >> 2] = $10; //@line 29759
  $119 = $ReallocAsyncCtx6 + 8 | 0; //@line 29760
  HEAP32[$119 >> 2] = $14; //@line 29761
  $120 = $ReallocAsyncCtx6 + 12 | 0; //@line 29762
  HEAP32[$120 >> 2] = $113; //@line 29763
  $121 = $ReallocAsyncCtx6 + 16 | 0; //@line 29764
  HEAP32[$121 >> 2] = $16; //@line 29765
  $122 = $ReallocAsyncCtx6 + 20 | 0; //@line 29766
  HEAP32[$122 >> 2] = $18; //@line 29767
  $123 = $ReallocAsyncCtx6 + 24 | 0; //@line 29768
  HEAP32[$123 >> 2] = $45; //@line 29769
  $124 = $ReallocAsyncCtx6 + 28 | 0; //@line 29770
  HEAP32[$124 >> 2] = $2; //@line 29771
  $125 = $ReallocAsyncCtx6 + 32 | 0; //@line 29772
  HEAP32[$125 >> 2] = $113; //@line 29773
  $126 = $ReallocAsyncCtx6 + 36 | 0; //@line 29774
  HEAP32[$126 >> 2] = $26; //@line 29775
  $127 = $ReallocAsyncCtx6 + 40 | 0; //@line 29776
  HEAP32[$127 >> 2] = $2; //@line 29777
  sp = STACKTOP; //@line 29778
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_7($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1107 = 0, $$2 = 0, $$byval_copy = 0, $$byval_copy16 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10763
 STACKTOP = STACKTOP + 48 | 0; //@line 10764
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10764
 $$byval_copy16 = sp + 20 | 0; //@line 10765
 $$byval_copy = sp; //@line 10766
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10768
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10770
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10772
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10774
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10776
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10778
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10780
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10782
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10784
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10786
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10788
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10790
 if (!$AsyncRetVal) {
  __ZN6Socket11set_timeoutEi($18, 5e3); //@line 10793
  $25 = _malloc(512) | 0; //@line 10794
  if (!$25) {
   $$2 = -3007; //@line 10797
  } else {
   $27 = $25; //@line 10799
   $28 = $25 + 1 | 0; //@line 10800
   $29 = $25 + 2 | 0; //@line 10801
   $30 = $25 + 3 | 0; //@line 10802
   $31 = $25 + 4 | 0; //@line 10803
   $32 = $25 + 5 | 0; //@line 10804
   $33 = $25 + 6 | 0; //@line 10805
   $34 = $25 + 12 | 0; //@line 10806
   $$sink$i = ($22 | 0) == 2 ? 28 : 1; //@line 10808
   HEAP32[$20 >> 2] = 0; //@line 10809
   HEAP32[$20 + 4 >> 2] = 0; //@line 10809
   HEAP32[$20 + 8 >> 2] = 0; //@line 10809
   HEAP32[$20 + 12 >> 2] = 0; //@line 10809
   HEAP32[$20 + 16 >> 2] = 0; //@line 10809
   HEAP32[$$byval_copy >> 2] = HEAP32[$20 >> 2]; //@line 10810
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 10810
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$20 + 8 >> 2]; //@line 10810
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$20 + 12 >> 2]; //@line 10810
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$20 + 16 >> 2]; //@line 10810
   __ZN13SocketAddressC2E10nsapi_addrt($2, $$byval_copy, 0); //@line 10811
   do {
    if (3) {
     if (0 > 9) {
      if (!0) {
       break;
      } else {
       $$1107 = 0; //@line 10821
       $41 = 0; //@line 10821
      }
     } else {
      if (0 < 5) {
       $$1107 = 0; //@line 10826
       $41 = 0; //@line 10826
      } else {
       $76 = 608 + ((0 + -5 | 0) * 20 | 0) | 0; //@line 10830
       HEAP32[$$byval_copy16 >> 2] = HEAP32[$76 >> 2]; //@line 10831
       HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$76 + 4 >> 2]; //@line 10831
       HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$76 + 8 >> 2]; //@line 10831
       HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$76 + 12 >> 2]; //@line 10831
       HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$76 + 16 >> 2]; //@line 10831
       __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy16); //@line 10832
       __ZN13SocketAddress8set_portEt($2, 53); //@line 10833
       HEAP8[$25 >> 0] = 0; //@line 10834
       HEAP8[$28 >> 0] = 1; //@line 10835
       HEAP8[$29 >> 0] = 1; //@line 10836
       HEAP8[$30 >> 0] = 0; //@line 10837
       HEAP8[$31 >> 0] = 0; //@line 10838
       HEAP8[$32 >> 0] = 1; //@line 10839
       HEAP8[$33 >> 0] = 0; //@line 10840
       HEAP8[$33 + 1 >> 0] = 0; //@line 10840
       HEAP8[$33 + 2 >> 0] = 0; //@line 10840
       HEAP8[$33 + 3 >> 0] = 0; //@line 10840
       HEAP8[$33 + 4 >> 0] = 0; //@line 10840
       HEAP8[$33 + 5 >> 0] = 0; //@line 10840
       if (!(HEAP8[$4 >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $34; //@line 10844
       } else {
        $$048$i = $4; //@line 10846
        $$sroa$0$0$in47$i = $34; //@line 10846
        while (1) {
         $79 = _strcspn($$048$i, 7296) | 0; //@line 10848
         $81 = $$sroa$0$0$in47$i + 1 | 0; //@line 10850
         HEAP8[$$sroa$0$0$in47$i >> 0] = $79; //@line 10851
         $82 = $79 & 255; //@line 10852
         _memcpy($81 | 0, $$048$i | 0, $82 | 0) | 0; //@line 10853
         $83 = $81 + $82 | 0; //@line 10854
         $$048$i = $$048$i + ($79 + ((HEAP8[$$048$i + $79 >> 0] | 0) == 46 & 1)) | 0; //@line 10860
         if (!(HEAP8[$$048$i >> 0] | 0)) {
          $$sroa$0$0$in$lcssa$i = $83; //@line 10864
          break;
         } else {
          $$sroa$0$0$in47$i = $83; //@line 10867
         }
        }
       }
       HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 10872
       HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 10874
       HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 10876
       HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 10878
       HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 10881
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 10883
       $99 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($8, $2, $25, $$sroa$0$0$in$lcssa$i + 5 - $27 | 0) | 0; //@line 10884
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 10887
        $100 = $ReallocAsyncCtx4 + 4 | 0; //@line 10888
        HEAP32[$100 >> 2] = $2; //@line 10889
        $101 = $ReallocAsyncCtx4 + 8 | 0; //@line 10890
        HEAP32[$101 >> 2] = $25; //@line 10891
        $102 = $ReallocAsyncCtx4 + 12 | 0; //@line 10892
        HEAP32[$102 >> 2] = $28; //@line 10893
        $103 = $ReallocAsyncCtx4 + 16 | 0; //@line 10894
        HEAP32[$103 >> 2] = $29; //@line 10895
        $104 = $ReallocAsyncCtx4 + 20 | 0; //@line 10896
        HEAP32[$104 >> 2] = $30; //@line 10897
        $105 = $ReallocAsyncCtx4 + 24 | 0; //@line 10898
        HEAP32[$105 >> 2] = $31; //@line 10899
        $106 = $ReallocAsyncCtx4 + 28 | 0; //@line 10900
        HEAP32[$106 >> 2] = $32; //@line 10901
        $107 = $ReallocAsyncCtx4 + 32 | 0; //@line 10902
        HEAP32[$107 >> 2] = $33; //@line 10903
        $108 = $ReallocAsyncCtx4 + 36 | 0; //@line 10904
        HEAP32[$108 >> 2] = $4; //@line 10905
        $109 = $ReallocAsyncCtx4 + 40 | 0; //@line 10906
        HEAP32[$109 >> 2] = $6; //@line 10907
        $110 = $ReallocAsyncCtx4 + 44 | 0; //@line 10908
        HEAP32[$110 >> 2] = $6; //@line 10909
        $111 = $ReallocAsyncCtx4 + 48 | 0; //@line 10910
        HEAP32[$111 >> 2] = $34; //@line 10911
        $112 = $ReallocAsyncCtx4 + 52 | 0; //@line 10912
        HEAP8[$112 >> 0] = $$sink$i; //@line 10913
        $113 = $ReallocAsyncCtx4 + 56 | 0; //@line 10914
        HEAP32[$113 >> 2] = $27; //@line 10915
        $114 = $ReallocAsyncCtx4 + 60 | 0; //@line 10916
        HEAP32[$114 >> 2] = $8; //@line 10917
        $115 = $ReallocAsyncCtx4 + 64 | 0; //@line 10918
        HEAP32[$115 >> 2] = $10; //@line 10919
        $116 = $ReallocAsyncCtx4 + 68 | 0; //@line 10920
        HEAP32[$116 >> 2] = $12; //@line 10921
        $117 = $ReallocAsyncCtx4 + 72 | 0; //@line 10922
        HEAP32[$117 >> 2] = $14; //@line 10923
        $118 = $ReallocAsyncCtx4 + 76 | 0; //@line 10924
        HEAP32[$118 >> 2] = $12; //@line 10925
        $119 = $ReallocAsyncCtx4 + 80 | 0; //@line 10926
        HEAP32[$119 >> 2] = $16; //@line 10927
        $120 = $ReallocAsyncCtx4 + 84 | 0; //@line 10928
        HEAP32[$120 >> 2] = $2; //@line 10929
        $121 = $ReallocAsyncCtx4 + 88 | 0; //@line 10930
        HEAP32[$121 >> 2] = $18; //@line 10931
        $122 = $ReallocAsyncCtx4 + 92 | 0; //@line 10932
        HEAP32[$122 >> 2] = $20; //@line 10933
        $123 = $ReallocAsyncCtx4 + 96 | 0; //@line 10934
        HEAP32[$123 >> 2] = $20; //@line 10935
        $124 = $ReallocAsyncCtx4 + 100 | 0; //@line 10936
        HEAP8[$124 >> 0] = 0; //@line 10937
        $125 = $ReallocAsyncCtx4 + 101 | 0; //@line 10938
        HEAP8[$125 >> 0] = 0; //@line 10939
        $126 = $ReallocAsyncCtx4 + 102 | 0; //@line 10940
        HEAP8[$126 >> 0] = 3; //@line 10941
        sp = STACKTOP; //@line 10942
        STACKTOP = sp; //@line 10943
        return;
       }
       HEAP32[___async_retval >> 2] = $99; //@line 10946
       ___async_unwind = 0; //@line 10947
       HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 10948
       $100 = $ReallocAsyncCtx4 + 4 | 0; //@line 10949
       HEAP32[$100 >> 2] = $2; //@line 10950
       $101 = $ReallocAsyncCtx4 + 8 | 0; //@line 10951
       HEAP32[$101 >> 2] = $25; //@line 10952
       $102 = $ReallocAsyncCtx4 + 12 | 0; //@line 10953
       HEAP32[$102 >> 2] = $28; //@line 10954
       $103 = $ReallocAsyncCtx4 + 16 | 0; //@line 10955
       HEAP32[$103 >> 2] = $29; //@line 10956
       $104 = $ReallocAsyncCtx4 + 20 | 0; //@line 10957
       HEAP32[$104 >> 2] = $30; //@line 10958
       $105 = $ReallocAsyncCtx4 + 24 | 0; //@line 10959
       HEAP32[$105 >> 2] = $31; //@line 10960
       $106 = $ReallocAsyncCtx4 + 28 | 0; //@line 10961
       HEAP32[$106 >> 2] = $32; //@line 10962
       $107 = $ReallocAsyncCtx4 + 32 | 0; //@line 10963
       HEAP32[$107 >> 2] = $33; //@line 10964
       $108 = $ReallocAsyncCtx4 + 36 | 0; //@line 10965
       HEAP32[$108 >> 2] = $4; //@line 10966
       $109 = $ReallocAsyncCtx4 + 40 | 0; //@line 10967
       HEAP32[$109 >> 2] = $6; //@line 10968
       $110 = $ReallocAsyncCtx4 + 44 | 0; //@line 10969
       HEAP32[$110 >> 2] = $6; //@line 10970
       $111 = $ReallocAsyncCtx4 + 48 | 0; //@line 10971
       HEAP32[$111 >> 2] = $34; //@line 10972
       $112 = $ReallocAsyncCtx4 + 52 | 0; //@line 10973
       HEAP8[$112 >> 0] = $$sink$i; //@line 10974
       $113 = $ReallocAsyncCtx4 + 56 | 0; //@line 10975
       HEAP32[$113 >> 2] = $27; //@line 10976
       $114 = $ReallocAsyncCtx4 + 60 | 0; //@line 10977
       HEAP32[$114 >> 2] = $8; //@line 10978
       $115 = $ReallocAsyncCtx4 + 64 | 0; //@line 10979
       HEAP32[$115 >> 2] = $10; //@line 10980
       $116 = $ReallocAsyncCtx4 + 68 | 0; //@line 10981
       HEAP32[$116 >> 2] = $12; //@line 10982
       $117 = $ReallocAsyncCtx4 + 72 | 0; //@line 10983
       HEAP32[$117 >> 2] = $14; //@line 10984
       $118 = $ReallocAsyncCtx4 + 76 | 0; //@line 10985
       HEAP32[$118 >> 2] = $12; //@line 10986
       $119 = $ReallocAsyncCtx4 + 80 | 0; //@line 10987
       HEAP32[$119 >> 2] = $16; //@line 10988
       $120 = $ReallocAsyncCtx4 + 84 | 0; //@line 10989
       HEAP32[$120 >> 2] = $2; //@line 10990
       $121 = $ReallocAsyncCtx4 + 88 | 0; //@line 10991
       HEAP32[$121 >> 2] = $18; //@line 10992
       $122 = $ReallocAsyncCtx4 + 92 | 0; //@line 10993
       HEAP32[$122 >> 2] = $20; //@line 10994
       $123 = $ReallocAsyncCtx4 + 96 | 0; //@line 10995
       HEAP32[$123 >> 2] = $20; //@line 10996
       $124 = $ReallocAsyncCtx4 + 100 | 0; //@line 10997
       HEAP8[$124 >> 0] = 0; //@line 10998
       $125 = $ReallocAsyncCtx4 + 101 | 0; //@line 10999
       HEAP8[$125 >> 0] = 0; //@line 11000
       $126 = $ReallocAsyncCtx4 + 102 | 0; //@line 11001
       HEAP8[$126 >> 0] = 3; //@line 11002
       sp = STACKTOP; //@line 11003
       STACKTOP = sp; //@line 11004
       return;
      }
     }
     $44 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 11010
     $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 11011
     $45 = FUNCTION_TABLE_iiii[$44 & 31]($6, $41 & 255, $2) | 0; //@line 11012
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 11015
      $46 = $ReallocAsyncCtx + 4 | 0; //@line 11016
      HEAP8[$46 >> 0] = $$1107; //@line 11017
      $47 = $ReallocAsyncCtx + 8 | 0; //@line 11018
      HEAP32[$47 >> 2] = $2; //@line 11019
      $48 = $ReallocAsyncCtx + 12 | 0; //@line 11020
      HEAP8[$48 >> 0] = $41; //@line 11021
      $49 = $ReallocAsyncCtx + 16 | 0; //@line 11022
      HEAP32[$49 >> 2] = $25; //@line 11023
      $50 = $ReallocAsyncCtx + 20 | 0; //@line 11024
      HEAP32[$50 >> 2] = $28; //@line 11025
      $51 = $ReallocAsyncCtx + 24 | 0; //@line 11026
      HEAP32[$51 >> 2] = $29; //@line 11027
      $52 = $ReallocAsyncCtx + 28 | 0; //@line 11028
      HEAP32[$52 >> 2] = $30; //@line 11029
      $53 = $ReallocAsyncCtx + 32 | 0; //@line 11030
      HEAP32[$53 >> 2] = $31; //@line 11031
      $54 = $ReallocAsyncCtx + 36 | 0; //@line 11032
      HEAP32[$54 >> 2] = $32; //@line 11033
      $55 = $ReallocAsyncCtx + 40 | 0; //@line 11034
      HEAP32[$55 >> 2] = $33; //@line 11035
      $56 = $ReallocAsyncCtx + 44 | 0; //@line 11036
      HEAP32[$56 >> 2] = $4; //@line 11037
      $57 = $ReallocAsyncCtx + 48 | 0; //@line 11038
      HEAP32[$57 >> 2] = $6; //@line 11039
      $58 = $ReallocAsyncCtx + 52 | 0; //@line 11040
      HEAP32[$58 >> 2] = $6; //@line 11041
      $59 = $ReallocAsyncCtx + 56 | 0; //@line 11042
      HEAP32[$59 >> 2] = $34; //@line 11043
      $60 = $ReallocAsyncCtx + 60 | 0; //@line 11044
      HEAP8[$60 >> 0] = $$sink$i; //@line 11045
      $61 = $ReallocAsyncCtx + 64 | 0; //@line 11046
      HEAP32[$61 >> 2] = $27; //@line 11047
      $62 = $ReallocAsyncCtx + 68 | 0; //@line 11048
      HEAP32[$62 >> 2] = $8; //@line 11049
      $63 = $ReallocAsyncCtx + 72 | 0; //@line 11050
      HEAP32[$63 >> 2] = $10; //@line 11051
      $64 = $ReallocAsyncCtx + 76 | 0; //@line 11052
      HEAP8[$64 >> 0] = 3; //@line 11053
      $65 = $ReallocAsyncCtx + 80 | 0; //@line 11054
      HEAP32[$65 >> 2] = $12; //@line 11055
      $66 = $ReallocAsyncCtx + 84 | 0; //@line 11056
      HEAP32[$66 >> 2] = $14; //@line 11057
      $67 = $ReallocAsyncCtx + 88 | 0; //@line 11058
      HEAP32[$67 >> 2] = $12; //@line 11059
      $68 = $ReallocAsyncCtx + 92 | 0; //@line 11060
      HEAP32[$68 >> 2] = $16; //@line 11061
      $69 = $ReallocAsyncCtx + 96 | 0; //@line 11062
      HEAP32[$69 >> 2] = $2; //@line 11063
      $70 = $ReallocAsyncCtx + 100 | 0; //@line 11064
      HEAP32[$70 >> 2] = $18; //@line 11065
      $71 = $ReallocAsyncCtx + 104 | 0; //@line 11066
      HEAP32[$71 >> 2] = $20; //@line 11067
      $72 = $ReallocAsyncCtx + 108 | 0; //@line 11068
      HEAP32[$72 >> 2] = $20; //@line 11069
      sp = STACKTOP; //@line 11070
      STACKTOP = sp; //@line 11071
      return;
     }
     HEAP32[___async_retval >> 2] = $45; //@line 11074
     ___async_unwind = 0; //@line 11075
     HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 11076
     $46 = $ReallocAsyncCtx + 4 | 0; //@line 11077
     HEAP8[$46 >> 0] = $$1107; //@line 11078
     $47 = $ReallocAsyncCtx + 8 | 0; //@line 11079
     HEAP32[$47 >> 2] = $2; //@line 11080
     $48 = $ReallocAsyncCtx + 12 | 0; //@line 11081
     HEAP8[$48 >> 0] = $41; //@line 11082
     $49 = $ReallocAsyncCtx + 16 | 0; //@line 11083
     HEAP32[$49 >> 2] = $25; //@line 11084
     $50 = $ReallocAsyncCtx + 20 | 0; //@line 11085
     HEAP32[$50 >> 2] = $28; //@line 11086
     $51 = $ReallocAsyncCtx + 24 | 0; //@line 11087
     HEAP32[$51 >> 2] = $29; //@line 11088
     $52 = $ReallocAsyncCtx + 28 | 0; //@line 11089
     HEAP32[$52 >> 2] = $30; //@line 11090
     $53 = $ReallocAsyncCtx + 32 | 0; //@line 11091
     HEAP32[$53 >> 2] = $31; //@line 11092
     $54 = $ReallocAsyncCtx + 36 | 0; //@line 11093
     HEAP32[$54 >> 2] = $32; //@line 11094
     $55 = $ReallocAsyncCtx + 40 | 0; //@line 11095
     HEAP32[$55 >> 2] = $33; //@line 11096
     $56 = $ReallocAsyncCtx + 44 | 0; //@line 11097
     HEAP32[$56 >> 2] = $4; //@line 11098
     $57 = $ReallocAsyncCtx + 48 | 0; //@line 11099
     HEAP32[$57 >> 2] = $6; //@line 11100
     $58 = $ReallocAsyncCtx + 52 | 0; //@line 11101
     HEAP32[$58 >> 2] = $6; //@line 11102
     $59 = $ReallocAsyncCtx + 56 | 0; //@line 11103
     HEAP32[$59 >> 2] = $34; //@line 11104
     $60 = $ReallocAsyncCtx + 60 | 0; //@line 11105
     HEAP8[$60 >> 0] = $$sink$i; //@line 11106
     $61 = $ReallocAsyncCtx + 64 | 0; //@line 11107
     HEAP32[$61 >> 2] = $27; //@line 11108
     $62 = $ReallocAsyncCtx + 68 | 0; //@line 11109
     HEAP32[$62 >> 2] = $8; //@line 11110
     $63 = $ReallocAsyncCtx + 72 | 0; //@line 11111
     HEAP32[$63 >> 2] = $10; //@line 11112
     $64 = $ReallocAsyncCtx + 76 | 0; //@line 11113
     HEAP8[$64 >> 0] = 3; //@line 11114
     $65 = $ReallocAsyncCtx + 80 | 0; //@line 11115
     HEAP32[$65 >> 2] = $12; //@line 11116
     $66 = $ReallocAsyncCtx + 84 | 0; //@line 11117
     HEAP32[$66 >> 2] = $14; //@line 11118
     $67 = $ReallocAsyncCtx + 88 | 0; //@line 11119
     HEAP32[$67 >> 2] = $12; //@line 11120
     $68 = $ReallocAsyncCtx + 92 | 0; //@line 11121
     HEAP32[$68 >> 2] = $16; //@line 11122
     $69 = $ReallocAsyncCtx + 96 | 0; //@line 11123
     HEAP32[$69 >> 2] = $2; //@line 11124
     $70 = $ReallocAsyncCtx + 100 | 0; //@line 11125
     HEAP32[$70 >> 2] = $18; //@line 11126
     $71 = $ReallocAsyncCtx + 104 | 0; //@line 11127
     HEAP32[$71 >> 2] = $20; //@line 11128
     $72 = $ReallocAsyncCtx + 108 | 0; //@line 11129
     HEAP32[$72 >> 2] = $20; //@line 11130
     sp = STACKTOP; //@line 11131
     STACKTOP = sp; //@line 11132
     return;
    }
   } while (0);
   _free($25); //@line 11135
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 11136
   $128 = __ZN6Socket5closeEv($18) | 0; //@line 11137
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 11140
    $129 = $ReallocAsyncCtx6 + 4 | 0; //@line 11141
    HEAP32[$129 >> 2] = -3009; //@line 11142
    $130 = $ReallocAsyncCtx6 + 8 | 0; //@line 11143
    HEAP32[$130 >> 2] = $8; //@line 11144
    $131 = $ReallocAsyncCtx6 + 12 | 0; //@line 11145
    HEAP32[$131 >> 2] = $10; //@line 11146
    sp = STACKTOP; //@line 11147
    STACKTOP = sp; //@line 11148
    return;
   }
   HEAP32[___async_retval >> 2] = $128; //@line 11151
   ___async_unwind = 0; //@line 11152
   HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 11153
   $129 = $ReallocAsyncCtx6 + 4 | 0; //@line 11154
   HEAP32[$129 >> 2] = -3009; //@line 11155
   $130 = $ReallocAsyncCtx6 + 8 | 0; //@line 11156
   HEAP32[$130 >> 2] = $8; //@line 11157
   $131 = $ReallocAsyncCtx6 + 12 | 0; //@line 11158
   HEAP32[$131 >> 2] = $10; //@line 11159
   sp = STACKTOP; //@line 11160
   STACKTOP = sp; //@line 11161
   return;
  }
 } else {
  $$2 = $AsyncRetVal; //@line 11164
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 11166
 __ZN9UDPSocketD2Ev($8); //@line 11167
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 160; //@line 11170
  $133 = $ReallocAsyncCtx5 + 4 | 0; //@line 11171
  HEAP32[$133 >> 2] = $10; //@line 11172
  $134 = $ReallocAsyncCtx5 + 8 | 0; //@line 11173
  HEAP32[$134 >> 2] = $$2; //@line 11174
  sp = STACKTOP; //@line 11175
  STACKTOP = sp; //@line 11176
  return;
 }
 ___async_unwind = 0; //@line 11178
 HEAP32[$ReallocAsyncCtx5 >> 2] = 160; //@line 11179
 $133 = $ReallocAsyncCtx5 + 4 | 0; //@line 11180
 HEAP32[$133 >> 2] = $10; //@line 11181
 $134 = $ReallocAsyncCtx5 + 8 | 0; //@line 11182
 HEAP32[$134 >> 2] = $$2; //@line 11183
 sp = STACKTOP; //@line 11184
 STACKTOP = sp; //@line 11185
 return;
}
function __ZL28nsapi_dns_query_async_createPv($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $$pr$i = 0, $$pr$i72 = 0, $$pre85 = 0, $1 = 0, $104 = 0, $106 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $14 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $157 = 0, $161 = 0, $163 = 0, $164 = 0, $170 = 0, $173 = 0, $177 = 0, $181 = 0, $189 = 0, $195 = 0, $2 = 0, $20 = 0, $203 = 0, $209 = 0, $217 = 0, $220 = 0, $222 = 0, $232 = 0, $236 = 0, $240 = 0, $244 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $52 = 0, $53 = 0, $57 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $71 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx48 = 0, $AsyncCtx51 = 0, $AsyncCtx54 = 0, $AsyncCtx57 = 0, $AsyncCtx6 = 0, $AsyncCtx61 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16139
 STACKTOP = STACKTOP + 32 | 0; //@line 16140
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 16140
 $1 = sp + 16 | 0; //@line 16141
 $2 = sp; //@line 16142
 $3 = $0; //@line 16143
 $4 = HEAP32[2509] | 0; //@line 16144
 $5 = ($4 | 0) == 0; //@line 16145
 if ($5) {
  label = 3; //@line 16147
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa = $4; //@line 16152
  } else {
   label = 3; //@line 16154
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[2510] | 0; //@line 16159
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $8; //@line 16165
     break;
    }
   }
   $232 = HEAP32[2511] | 0; //@line 16169
   if ($232 | 0) {
    if ((HEAP32[$232 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $232; //@line 16175
     break;
    }
   }
   $236 = HEAP32[2512] | 0; //@line 16179
   if ($236 | 0) {
    if ((HEAP32[$236 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $236; //@line 16185
     break;
    }
   }
   $240 = HEAP32[2513] | 0; //@line 16189
   if (!$240) {
    STACKTOP = sp; //@line 16192
    return;
   }
   if ((HEAP32[$240 >> 2] | 0) == ($3 | 0)) {
    $$lcssa = $240; //@line 16197
   } else {
    STACKTOP = sp; //@line 16199
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 2) {
  STACKTOP = sp; //@line 16207
  return;
 }
 $13 = $$lcssa + 56 | 0; //@line 16209
 $14 = $$lcssa + 8 | 0; //@line 16210
 $15 = $$lcssa + 60 | 0; //@line 16211
 if (!($5 | ($4 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $20 = HEAP32[$4 + 56 >> 2] | 0; //@line 16219
   if ($20 | 0) {
    if ((HEAP32[$4 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $20; //@line 16227
     HEAP32[$15 >> 2] = HEAP32[$4 + 60 >> 2]; //@line 16230
    }
   }
  }
 }
 $28 = HEAP32[2510] | 0; //@line 16235
 if (!(($28 | 0) == 0 | ($28 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $181 = HEAP32[$28 + 56 >> 2] | 0; //@line 16244
   if ($181 | 0) {
    if ((HEAP32[$28 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $181; //@line 16252
     HEAP32[$15 >> 2] = HEAP32[$28 + 60 >> 2]; //@line 16255
    }
   }
  }
 }
 $189 = HEAP32[2511] | 0; //@line 16260
 if (!(($189 | 0) == 0 | ($189 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $195 = HEAP32[$189 + 56 >> 2] | 0; //@line 16269
   if ($195 | 0) {
    if ((HEAP32[$189 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $195; //@line 16277
     HEAP32[$15 >> 2] = HEAP32[$189 + 60 >> 2]; //@line 16280
    }
   }
  }
 }
 $203 = HEAP32[2512] | 0; //@line 16285
 if (!(($203 | 0) == 0 | ($203 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $209 = HEAP32[$203 + 56 >> 2] | 0; //@line 16294
   if ($209 | 0) {
    if ((HEAP32[$203 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $209; //@line 16302
     HEAP32[$15 >> 2] = HEAP32[$203 + 60 >> 2]; //@line 16305
    }
   }
  }
 }
 $217 = HEAP32[2513] | 0; //@line 16310
 $220 = (HEAP32[$13 >> 2] | 0) == 0; //@line 16315
 if (($217 | 0) == 0 | ($217 | 0) == ($$lcssa | 0)) {
  if ($220) {
   label = 11; //@line 16318
  }
 } else {
  if ($220) {
   $222 = HEAP32[$217 + 56 >> 2] | 0; //@line 16323
   if (!$222) {
    label = 11; //@line 16326
   } else {
    if ((HEAP32[$217 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $222; //@line 16333
     HEAP32[$15 >> 2] = HEAP32[$217 + 60 >> 2]; //@line 16336
    } else {
     label = 11; //@line 16338
    }
   }
  }
 }
 if ((label | 0) == 11) {
  $AsyncCtx39 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16344
  $31 = __ZnwjRKSt9nothrow_t(56, 12017) | 0; //@line 16345
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 211; //@line 16348
   HEAP32[$AsyncCtx39 + 4 >> 2] = $15; //@line 16350
   HEAP32[$AsyncCtx39 + 8 >> 2] = $14; //@line 16352
   HEAP32[$AsyncCtx39 + 12 >> 2] = $2; //@line 16354
   HEAP32[$AsyncCtx39 + 16 >> 2] = $13; //@line 16356
   HEAP32[$AsyncCtx39 + 20 >> 2] = $$lcssa; //@line 16358
   HEAP32[$AsyncCtx39 + 24 >> 2] = $1; //@line 16360
   HEAP32[$AsyncCtx39 + 28 >> 2] = $1; //@line 16362
   sp = STACKTOP; //@line 16363
   STACKTOP = sp; //@line 16364
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 16366
  if (!$31) {
   $52 = $$lcssa + 28 | 0; //@line 16369
   $53 = HEAP32[$52 >> 2] | 0; //@line 16370
   do {
    if (!$53) {
     $63 = 0; //@line 16374
    } else {
     $57 = HEAP32[$53 + 4 >> 2] | 0; //@line 16378
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 16379
     FUNCTION_TABLE_vii[$57 & 7]($1, $$lcssa + 16 | 0); //@line 16380
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 213; //@line 16383
      HEAP32[$AsyncCtx + 4 >> 2] = $52; //@line 16385
      HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16387
      HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 16389
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16391
      sp = STACKTOP; //@line 16392
      STACKTOP = sp; //@line 16393
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 16395
      $63 = HEAP32[$52 >> 2] | 0; //@line 16397
      break;
     }
    }
   } while (0);
   $62 = $1 + 12 | 0; //@line 16402
   HEAP32[$62 >> 2] = $63; //@line 16403
   $64 = HEAP32[$$lcssa >> 2] | 0; //@line 16404
   $AsyncCtx48 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16405
   __ZL28nsapi_dns_query_async_deletei($64); //@line 16406
   if (___async) {
    HEAP32[$AsyncCtx48 >> 2] = 214; //@line 16409
    HEAP32[$AsyncCtx48 + 4 >> 2] = $62; //@line 16411
    HEAP32[$AsyncCtx48 + 8 >> 2] = $1; //@line 16413
    sp = STACKTOP; //@line 16414
    STACKTOP = sp; //@line 16415
    return;
   }
   _emscripten_free_async_context($AsyncCtx48 | 0); //@line 16417
   $AsyncCtx54 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16418
   __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 16419
   if (___async) {
    HEAP32[$AsyncCtx54 >> 2] = 215; //@line 16422
    HEAP32[$AsyncCtx54 + 4 >> 2] = $62; //@line 16424
    HEAP32[$AsyncCtx54 + 8 >> 2] = $1; //@line 16426
    sp = STACKTOP; //@line 16427
    STACKTOP = sp; //@line 16428
    return;
   }
   _emscripten_free_async_context($AsyncCtx54 | 0); //@line 16430
   $69 = HEAP32[$62 >> 2] | 0; //@line 16431
   do {
    if ($69 | 0) {
     $71 = HEAP32[$69 >> 2] | 0; //@line 16435
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16436
     FUNCTION_TABLE_viii[$71 & 0]($1, -3007, 0); //@line 16437
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 216; //@line 16440
      HEAP32[$AsyncCtx2 + 4 >> 2] = $62; //@line 16442
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 16444
      sp = STACKTOP; //@line 16445
      STACKTOP = sp; //@line 16446
      return;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16448
     $$pr$i = HEAP32[$62 >> 2] | 0; //@line 16449
     if ($$pr$i | 0) {
      $76 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 16453
      $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 16454
      FUNCTION_TABLE_vi[$76 & 511]($1); //@line 16455
      if (___async) {
       HEAP32[$AsyncCtx6 >> 2] = 217; //@line 16458
       HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 16460
       sp = STACKTOP; //@line 16461
       STACKTOP = sp; //@line 16462
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx6 | 0); //@line 16464
       break;
      }
     }
    }
   } while (0);
   STACKTOP = sp; //@line 16470
   return;
  }
  __ZN9UDPSocketC2Ev($31); //@line 16472
  $40 = HEAP32[$14 >> 2] | 0; //@line 16473
  $AsyncCtx61 = _emscripten_alloc_async_context(40, sp) | 0; //@line 16474
  $41 = __ZN6Socket4openEP12NetworkStack($31, $40) | 0; //@line 16475
  if (___async) {
   HEAP32[$AsyncCtx61 >> 2] = 212; //@line 16478
   HEAP32[$AsyncCtx61 + 4 >> 2] = $15; //@line 16480
   HEAP32[$AsyncCtx61 + 8 >> 2] = $14; //@line 16482
   HEAP32[$AsyncCtx61 + 12 >> 2] = $2; //@line 16484
   HEAP32[$AsyncCtx61 + 16 >> 2] = $31; //@line 16486
   HEAP32[$AsyncCtx61 + 20 >> 2] = $13; //@line 16488
   HEAP32[$AsyncCtx61 + 24 >> 2] = $31; //@line 16490
   HEAP32[$AsyncCtx61 + 28 >> 2] = $$lcssa; //@line 16492
   HEAP32[$AsyncCtx61 + 32 >> 2] = $1; //@line 16494
   HEAP32[$AsyncCtx61 + 36 >> 2] = $31; //@line 16496
   sp = STACKTOP; //@line 16497
   STACKTOP = sp; //@line 16498
   return;
  }
  _emscripten_free_async_context($AsyncCtx61 | 0); //@line 16500
  if ($41 | 0) {
   $80 = HEAP32[(HEAP32[$31 >> 2] | 0) + 4 >> 2] | 0; //@line 16505
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16506
   FUNCTION_TABLE_vi[$80 & 511]($31); //@line 16507
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 218; //@line 16510
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 16512
    HEAP32[$AsyncCtx9 + 8 >> 2] = $$lcssa; //@line 16514
    HEAP32[$AsyncCtx9 + 12 >> 2] = $41; //@line 16516
    sp = STACKTOP; //@line 16517
    STACKTOP = sp; //@line 16518
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 16520
   $84 = $$lcssa + 28 | 0; //@line 16521
   $85 = HEAP32[$84 >> 2] | 0; //@line 16522
   do {
    if (!$85) {
     $96 = 0; //@line 16526
    } else {
     $89 = HEAP32[$85 + 4 >> 2] | 0; //@line 16530
     $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16531
     FUNCTION_TABLE_vii[$89 & 7]($1, $$lcssa + 16 | 0); //@line 16532
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 219; //@line 16535
      HEAP32[$AsyncCtx13 + 4 >> 2] = $84; //@line 16537
      HEAP32[$AsyncCtx13 + 8 >> 2] = $1; //@line 16539
      HEAP32[$AsyncCtx13 + 12 >> 2] = $$lcssa; //@line 16541
      HEAP32[$AsyncCtx13 + 16 >> 2] = $1; //@line 16543
      HEAP32[$AsyncCtx13 + 20 >> 2] = $41; //@line 16545
      sp = STACKTOP; //@line 16546
      STACKTOP = sp; //@line 16547
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 16549
      $96 = HEAP32[$84 >> 2] | 0; //@line 16551
      break;
     }
    }
   } while (0);
   $95 = $1 + 12 | 0; //@line 16556
   HEAP32[$95 >> 2] = $96; //@line 16557
   $97 = HEAP32[$$lcssa >> 2] | 0; //@line 16558
   $AsyncCtx45 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16559
   __ZL28nsapi_dns_query_async_deletei($97); //@line 16560
   if (___async) {
    HEAP32[$AsyncCtx45 >> 2] = 220; //@line 16563
    HEAP32[$AsyncCtx45 + 4 >> 2] = $95; //@line 16565
    HEAP32[$AsyncCtx45 + 8 >> 2] = $1; //@line 16567
    HEAP32[$AsyncCtx45 + 12 >> 2] = $41; //@line 16569
    sp = STACKTOP; //@line 16570
    STACKTOP = sp; //@line 16571
    return;
   }
   _emscripten_free_async_context($AsyncCtx45 | 0); //@line 16573
   $AsyncCtx51 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16574
   __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 16575
   if (___async) {
    HEAP32[$AsyncCtx51 >> 2] = 221; //@line 16578
    HEAP32[$AsyncCtx51 + 4 >> 2] = $95; //@line 16580
    HEAP32[$AsyncCtx51 + 8 >> 2] = $1; //@line 16582
    HEAP32[$AsyncCtx51 + 12 >> 2] = $41; //@line 16584
    sp = STACKTOP; //@line 16585
    STACKTOP = sp; //@line 16586
    return;
   }
   _emscripten_free_async_context($AsyncCtx51 | 0); //@line 16588
   $104 = HEAP32[$95 >> 2] | 0; //@line 16589
   do {
    if ($104 | 0) {
     $106 = HEAP32[$104 >> 2] | 0; //@line 16593
     $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16594
     FUNCTION_TABLE_viii[$106 & 0]($1, $41, 0); //@line 16595
     if (___async) {
      HEAP32[$AsyncCtx16 >> 2] = 222; //@line 16598
      HEAP32[$AsyncCtx16 + 4 >> 2] = $95; //@line 16600
      HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 16602
      sp = STACKTOP; //@line 16603
      STACKTOP = sp; //@line 16604
      return;
     }
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 16606
     $$pr$i72 = HEAP32[$95 >> 2] | 0; //@line 16607
     if (!$$pr$i72) {
      break;
     }
     $111 = HEAP32[$$pr$i72 + 8 >> 2] | 0; //@line 16613
     $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 16614
     FUNCTION_TABLE_vi[$111 & 511]($1); //@line 16615
     if (___async) {
      HEAP32[$AsyncCtx20 >> 2] = 223; //@line 16618
      HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 16620
      sp = STACKTOP; //@line 16621
      STACKTOP = sp; //@line 16622
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx20 | 0); //@line 16624
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 16629
   return;
  }
  __ZN6Socket11set_timeoutEi($31, 0); //@line 16631
  $113 = HEAP32[$15 >> 2] | 0; //@line 16632
  $115 = $113; //@line 16634
  do {
   if (!$113) {
    $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16637
    $116 = __Znwj(20) | 0; //@line 16638
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 224; //@line 16641
     HEAP32[$AsyncCtx36 + 4 >> 2] = $15; //@line 16643
     HEAP32[$AsyncCtx36 + 8 >> 2] = $14; //@line 16645
     HEAP32[$AsyncCtx36 + 12 >> 2] = $2; //@line 16647
     HEAP32[$AsyncCtx36 + 16 >> 2] = $31; //@line 16649
     HEAP32[$AsyncCtx36 + 20 >> 2] = $13; //@line 16651
     HEAP32[$AsyncCtx36 + 24 >> 2] = $31; //@line 16653
     HEAP32[$AsyncCtx36 + 28 >> 2] = $$lcssa; //@line 16655
     sp = STACKTOP; //@line 16656
     STACKTOP = sp; //@line 16657
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 16659
     HEAP32[$116 >> 2] = 0; //@line 16660
     HEAP32[$116 + 4 >> 2] = 0; //@line 16660
     HEAP32[$116 + 8 >> 2] = 0; //@line 16660
     HEAP32[$116 + 12 >> 2] = 0; //@line 16660
     HEAP32[$15 >> 2] = $116; //@line 16661
     $127 = $116; //@line 16663
     $244 = $116; //@line 16663
     break;
    }
   } else {
    $127 = $113; //@line 16667
    $244 = $115; //@line 16667
   }
  } while (0);
  $125 = $$lcssa + 32 | 0; //@line 16670
  if (($127 | 0) == ($125 | 0)) {
   $161 = $127; //@line 16673
   $163 = $244; //@line 16673
  } else {
   $128 = $127 + 12 | 0; //@line 16675
   $129 = HEAP32[$128 >> 2] | 0; //@line 16676
   do {
    if ($129 | 0) {
     $132 = HEAP32[$129 + 8 >> 2] | 0; //@line 16681
     $AsyncCtx24 = _emscripten_alloc_async_context(44, sp) | 0; //@line 16682
     FUNCTION_TABLE_vi[$132 & 511]($127); //@line 16683
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 225; //@line 16686
      HEAP32[$AsyncCtx24 + 4 >> 2] = $14; //@line 16688
      HEAP32[$AsyncCtx24 + 8 >> 2] = $2; //@line 16690
      HEAP32[$AsyncCtx24 + 12 >> 2] = $31; //@line 16692
      HEAP32[$AsyncCtx24 + 16 >> 2] = $128; //@line 16694
      HEAP32[$AsyncCtx24 + 20 >> 2] = $15; //@line 16696
      HEAP32[$AsyncCtx24 + 24 >> 2] = $13; //@line 16698
      HEAP32[$AsyncCtx24 + 28 >> 2] = $31; //@line 16700
      HEAP32[$AsyncCtx24 + 32 >> 2] = $127; //@line 16702
      HEAP32[$AsyncCtx24 + 36 >> 2] = $125; //@line 16704
      HEAP32[$AsyncCtx24 + 40 >> 2] = $$lcssa; //@line 16706
      sp = STACKTOP; //@line 16707
      STACKTOP = sp; //@line 16708
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 16710
      break;
     }
    }
   } while (0);
   $143 = $$lcssa + 44 | 0; //@line 16715
   $144 = HEAP32[$143 >> 2] | 0; //@line 16716
   do {
    if (!$144) {
     $157 = 0; //@line 16720
    } else {
     $147 = HEAP32[$144 + 4 >> 2] | 0; //@line 16723
     $AsyncCtx28 = _emscripten_alloc_async_context(40, sp) | 0; //@line 16724
     FUNCTION_TABLE_vii[$147 & 7]($127, $125); //@line 16725
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 226; //@line 16728
      HEAP32[$AsyncCtx28 + 4 >> 2] = $143; //@line 16730
      HEAP32[$AsyncCtx28 + 8 >> 2] = $128; //@line 16732
      HEAP32[$AsyncCtx28 + 12 >> 2] = $15; //@line 16734
      HEAP32[$AsyncCtx28 + 16 >> 2] = $14; //@line 16736
      HEAP32[$AsyncCtx28 + 20 >> 2] = $2; //@line 16738
      HEAP32[$AsyncCtx28 + 24 >> 2] = $31; //@line 16740
      HEAP32[$AsyncCtx28 + 28 >> 2] = $13; //@line 16742
      HEAP32[$AsyncCtx28 + 32 >> 2] = $31; //@line 16744
      HEAP32[$AsyncCtx28 + 36 >> 2] = $$lcssa; //@line 16746
      sp = STACKTOP; //@line 16747
      STACKTOP = sp; //@line 16748
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 16750
      $157 = HEAP32[$143 >> 2] | 0; //@line 16752
      break;
     }
    }
   } while (0);
   HEAP32[$128 >> 2] = $157; //@line 16757
   $$pre85 = HEAP32[$15 >> 2] | 0; //@line 16758
   $161 = $$pre85; //@line 16760
   $163 = $$pre85; //@line 16760
  }
  HEAP32[$161 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 16764
  HEAP32[$2 + 8 >> 2] = 0; //@line 16766
  HEAP32[$2 >> 2] = 227; //@line 16767
  HEAP32[$2 + 4 >> 2] = $163; //@line 16769
  $164 = $2 + 12 | 0; //@line 16770
  HEAP32[$164 >> 2] = 724; //@line 16771
  $AsyncCtx57 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16772
  __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($31, $2); //@line 16773
  if (___async) {
   HEAP32[$AsyncCtx57 >> 2] = 228; //@line 16776
   HEAP32[$AsyncCtx57 + 4 >> 2] = $164; //@line 16778
   HEAP32[$AsyncCtx57 + 8 >> 2] = $13; //@line 16780
   HEAP32[$AsyncCtx57 + 12 >> 2] = $31; //@line 16782
   HEAP32[$AsyncCtx57 + 16 >> 2] = $2; //@line 16784
   HEAP32[$AsyncCtx57 + 20 >> 2] = $$lcssa; //@line 16786
   sp = STACKTOP; //@line 16787
   STACKTOP = sp; //@line 16788
   return;
  }
  _emscripten_free_async_context($AsyncCtx57 | 0); //@line 16790
  $170 = HEAP32[$164 >> 2] | 0; //@line 16791
  do {
   if ($170 | 0) {
    $173 = HEAP32[$170 + 8 >> 2] | 0; //@line 16796
    $AsyncCtx32 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16797
    FUNCTION_TABLE_vi[$173 & 511]($2); //@line 16798
    if (___async) {
     HEAP32[$AsyncCtx32 >> 2] = 229; //@line 16801
     HEAP32[$AsyncCtx32 + 4 >> 2] = $13; //@line 16803
     HEAP32[$AsyncCtx32 + 8 >> 2] = $31; //@line 16805
     HEAP32[$AsyncCtx32 + 12 >> 2] = $$lcssa; //@line 16807
     sp = STACKTOP; //@line 16808
     STACKTOP = sp; //@line 16809
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx32 | 0); //@line 16811
     break;
    }
   }
  } while (0);
  HEAP32[$13 >> 2] = $31; //@line 16816
 }
 $177 = HEAP32[$$lcssa >> 2] | 0; //@line 16818
 $AsyncCtx42 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16819
 __ZL26nsapi_dns_query_async_sendPv($177); //@line 16820
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 230; //@line 16823
  sp = STACKTOP; //@line 16824
  STACKTOP = sp; //@line 16825
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 16827
 STACKTOP = sp; //@line 16828
 return;
}
function __ZL26nsapi_dns_query_async_sendPv($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$byval_copy51 = 0, $$lcssa69 = 0, $$pr$i = 0, $$pr$i52 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $1 = 0, $104 = 0, $107 = 0, $108 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $150 = 0, $152 = 0, $159 = 0, $163 = 0, $164 = 0, $17 = 0, $184 = 0, $190 = 0, $194 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $66 = 0, $67 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17330
 STACKTOP = STACKTOP + 112 | 0; //@line 17331
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 17331
 $$byval_copy51 = sp + 84 | 0; //@line 17332
 $1 = sp; //@line 17333
 $2 = sp + 64 | 0; //@line 17334
 $3 = $0; //@line 17335
 $4 = HEAP32[2509] | 0; //@line 17336
 if (!$4) {
  label = 3; //@line 17339
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa69 = $4; //@line 17344
  } else {
   label = 3; //@line 17346
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[2510] | 0; //@line 17351
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $8; //@line 17357
     break;
    }
   }
   $190 = HEAP32[2511] | 0; //@line 17361
   if ($190 | 0) {
    if ((HEAP32[$190 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $190; //@line 17367
     break;
    }
   }
   $194 = HEAP32[2512] | 0; //@line 17371
   if ($194 | 0) {
    if ((HEAP32[$194 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $194; //@line 17377
     break;
    }
   }
   $198 = HEAP32[2513] | 0; //@line 17381
   if (!$198) {
    STACKTOP = sp; //@line 17384
    return;
   }
   if ((HEAP32[$198 >> 2] | 0) == ($3 | 0)) {
    $$lcssa69 = $198; //@line 17389
   } else {
    STACKTOP = sp; //@line 17391
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa69 + 88 >> 2] | 0) != 1) {
  STACKTOP = sp; //@line 17399
  return;
 }
 $13 = $$lcssa69 + 83 | 0; //@line 17401
 $14 = HEAP8[$13 >> 0] | 0; //@line 17402
 if (!($14 << 24 >> 24)) {
  $17 = $$lcssa69 + 82 | 0; //@line 17405
  HEAP8[$17 >> 0] = (HEAP8[$17 >> 0] | 0) + 1 << 24 >> 24; //@line 17408
  $storemerge = 0; //@line 17409
 } else {
  $storemerge = $14 + -1 << 24 >> 24; //@line 17412
 }
 HEAP8[$13 >> 0] = $storemerge; //@line 17414
 $20 = HEAP16[874] | 0; //@line 17415
 $21 = $20 + 1 << 16 >> 16; //@line 17416
 HEAP16[874] = $21; //@line 17417
 $22 = $$lcssa69 + 80 | 0; //@line 17418
 HEAP16[$22 >> 1] = $20; //@line 17419
 if (!($21 << 16 >> 16)) {
  HEAP16[874] = 1; //@line 17422
 }
 $24 = _malloc(512) | 0; //@line 17424
 if (!$24) {
  $26 = $$lcssa69 + 28 | 0; //@line 17427
  $27 = HEAP32[$26 >> 2] | 0; //@line 17428
  do {
   if (!$27) {
    $37 = 0; //@line 17432
   } else {
    $31 = HEAP32[$27 + 4 >> 2] | 0; //@line 17436
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 17437
    FUNCTION_TABLE_vii[$31 & 7]($$byval_copy51, $$lcssa69 + 16 | 0); //@line 17438
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 242; //@line 17441
     HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 17443
     HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy51; //@line 17445
     HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa69; //@line 17447
     HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy51; //@line 17449
     sp = STACKTOP; //@line 17450
     STACKTOP = sp; //@line 17451
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17453
     $37 = HEAP32[$26 >> 2] | 0; //@line 17455
     break;
    }
   }
  } while (0);
  $36 = $$byval_copy51 + 12 | 0; //@line 17460
  HEAP32[$36 >> 2] = $37; //@line 17461
  $38 = HEAP32[$$lcssa69 >> 2] | 0; //@line 17462
  $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17463
  __ZL28nsapi_dns_query_async_deletei($38); //@line 17464
  if (___async) {
   HEAP32[$AsyncCtx27 >> 2] = 243; //@line 17467
   HEAP32[$AsyncCtx27 + 4 >> 2] = $36; //@line 17469
   HEAP32[$AsyncCtx27 + 8 >> 2] = $$byval_copy51; //@line 17471
   sp = STACKTOP; //@line 17472
   STACKTOP = sp; //@line 17473
   return;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 17475
  $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17476
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 17477
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 244; //@line 17480
   HEAP32[$AsyncCtx33 + 4 >> 2] = $36; //@line 17482
   HEAP32[$AsyncCtx33 + 8 >> 2] = $$byval_copy51; //@line 17484
   sp = STACKTOP; //@line 17485
   STACKTOP = sp; //@line 17486
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 17488
  $43 = HEAP32[$36 >> 2] | 0; //@line 17489
  do {
   if ($43 | 0) {
    $45 = HEAP32[$43 >> 2] | 0; //@line 17493
    $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17494
    FUNCTION_TABLE_viii[$45 & 0]($$byval_copy51, -3007, 0); //@line 17495
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 245; //@line 17498
     HEAP32[$AsyncCtx2 + 4 >> 2] = $36; //@line 17500
     HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy51; //@line 17502
     sp = STACKTOP; //@line 17503
     STACKTOP = sp; //@line 17504
     return;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 17506
    $$pr$i52 = HEAP32[$36 >> 2] | 0; //@line 17507
    if ($$pr$i52 | 0) {
     $50 = HEAP32[$$pr$i52 + 8 >> 2] | 0; //@line 17511
     $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 17512
     FUNCTION_TABLE_vi[$50 & 511]($$byval_copy51); //@line 17513
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 246; //@line 17516
      HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy51; //@line 17518
      sp = STACKTOP; //@line 17519
      STACKTOP = sp; //@line 17520
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 17522
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 17528
  return;
 }
 $52 = HEAP16[$22 >> 1] | 0; //@line 17530
 $54 = HEAP32[$$lcssa69 + 12 >> 2] | 0; //@line 17532
 $56 = HEAP32[$$lcssa69 + 52 >> 2] | 0; //@line 17534
 $57 = $24; //@line 17535
 HEAP8[$24 >> 0] = ($52 & 65535) >>> 8; //@line 17539
 HEAP8[$24 + 1 >> 0] = $52; //@line 17542
 HEAP8[$24 + 2 >> 0] = 1; //@line 17544
 HEAP8[$24 + 3 >> 0] = 0; //@line 17546
 HEAP8[$24 + 4 >> 0] = 0; //@line 17548
 $66 = $24 + 6 | 0; //@line 17549
 HEAP8[$24 + 5 >> 0] = 1; //@line 17550
 $67 = $24 + 12 | 0; //@line 17551
 HEAP8[$66 >> 0] = 0; //@line 17552
 HEAP8[$66 + 1 >> 0] = 0; //@line 17552
 HEAP8[$66 + 2 >> 0] = 0; //@line 17552
 HEAP8[$66 + 3 >> 0] = 0; //@line 17552
 HEAP8[$66 + 4 >> 0] = 0; //@line 17552
 HEAP8[$66 + 5 >> 0] = 0; //@line 17552
 if (!(HEAP8[$54 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $67; //@line 17556
 } else {
  $$048$i = $54; //@line 17558
  $$sroa$0$0$in47$i = $67; //@line 17558
  while (1) {
   $70 = _strcspn($$048$i, 7296) | 0; //@line 17560
   $72 = $$sroa$0$0$in47$i + 1 | 0; //@line 17562
   HEAP8[$$sroa$0$0$in47$i >> 0] = $70; //@line 17563
   $73 = $70 & 255; //@line 17564
   _memcpy($72 | 0, $$048$i | 0, $73 | 0) | 0; //@line 17565
   $74 = $72 + $73 | 0; //@line 17566
   $$048$i = $$048$i + ($70 + ((HEAP8[$$048$i + $70 >> 0] | 0) == 46 & 1)) | 0; //@line 17572
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $74; //@line 17576
    break;
   } else {
    $$sroa$0$0$in47$i = $74; //@line 17579
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 17584
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 17587
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = ($56 | 0) == 2 ? 28 : 1; //@line 17590
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 17592
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 17595
 $90 = $$sroa$0$0$in$lcssa$i + 5 - $57 | 0; //@line 17596
 HEAP32[$2 >> 2] = 0; //@line 17597
 HEAP32[$2 + 4 >> 2] = 0; //@line 17597
 HEAP32[$2 + 8 >> 2] = 0; //@line 17597
 HEAP32[$2 + 12 >> 2] = 0; //@line 17597
 HEAP32[$2 + 16 >> 2] = 0; //@line 17597
 HEAP32[$$byval_copy51 >> 2] = HEAP32[$2 >> 2]; //@line 17598
 HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 17598
 HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 17598
 HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 17598
 HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 17598
 __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy51, 0); //@line 17599
 $91 = $$lcssa69 + 8 | 0; //@line 17600
 $92 = $$lcssa69 + 82 | 0; //@line 17601
 $93 = $$lcssa69 + 84 | 0; //@line 17602
 $94 = $$lcssa69 + 85 | 0; //@line 17603
 L59 : do {
  if (HEAP8[$93 >> 0] | 0) {
   $96 = $$lcssa69 + 56 | 0; //@line 17608
   while (1) {
    $97 = HEAP32[$91 >> 2] | 0; //@line 17610
    $98 = HEAP8[$92 >> 0] | 0; //@line 17611
    if (($98 & 255) > 9) {
     if (!(HEAP8[$94 >> 0] | 0)) {
      break L59;
     }
     HEAP8[$92 >> 0] = 0; //@line 17619
     HEAP8[$94 >> 0] = 0; //@line 17620
     $104 = 0; //@line 17621
     label = 35; //@line 17622
    } else {
     if (($98 & 255) < 5) {
      $104 = $98; //@line 17626
      label = 35; //@line 17627
     } else {
      $124 = $98; //@line 17629
      label = 39; //@line 17630
     }
    }
    if ((label | 0) == 35) {
     label = 0; //@line 17634
     $107 = HEAP32[(HEAP32[$97 >> 2] | 0) + 28 >> 2] | 0; //@line 17638
     $AsyncCtx10 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17639
     $108 = FUNCTION_TABLE_iiii[$107 & 31]($97, $104 & 255, $1) | 0; //@line 17640
     if (___async) {
      label = 36; //@line 17643
      break;
     }
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 17646
     if (($108 | 0) < 0) {
      HEAP8[$92 >> 0] = 5; //@line 17649
      $124 = 5; //@line 17650
      label = 39; //@line 17651
     }
    }
    if ((label | 0) == 39) {
     label = 0; //@line 17655
     $126 = 608 + ((($124 & 255) + -5 | 0) * 20 | 0) | 0; //@line 17658
     HEAP32[$$byval_copy51 >> 2] = HEAP32[$126 >> 2]; //@line 17659
     HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$126 + 4 >> 2]; //@line 17659
     HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$126 + 8 >> 2]; //@line 17659
     HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$126 + 12 >> 2]; //@line 17659
     HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$126 + 16 >> 2]; //@line 17659
     __ZN13SocketAddress8set_addrE10nsapi_addr($1, $$byval_copy51); //@line 17660
    }
    __ZN13SocketAddress8set_portEt($1, 53); //@line 17662
    $163 = HEAP32[$96 >> 2] | 0; //@line 17663
    $AsyncCtx37 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17664
    $164 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($163, $1, $24, $90) | 0; //@line 17665
    if (___async) {
     label = 57; //@line 17668
     break;
    }
    _emscripten_free_async_context($AsyncCtx37 | 0); //@line 17671
    if (($164 | 0) >= 0) {
     label = 60; //@line 17674
     break;
    }
    HEAP8[$92 >> 0] = (HEAP8[$92 >> 0] | 0) + 1 << 24 >> 24; //@line 17679
    HEAP32[$2 >> 2] = 0; //@line 17680
    HEAP32[$2 + 4 >> 2] = 0; //@line 17680
    HEAP32[$2 + 8 >> 2] = 0; //@line 17680
    HEAP32[$2 + 12 >> 2] = 0; //@line 17680
    HEAP32[$2 + 16 >> 2] = 0; //@line 17680
    HEAP32[$$byval_copy51 >> 2] = HEAP32[$2 >> 2]; //@line 17681
    HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 17681
    HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 17681
    HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 17681
    HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 17681
    __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy51, 0); //@line 17682
    if (!(HEAP8[$93 >> 0] | 0)) {
     break L59;
    }
   }
   if ((label | 0) == 36) {
    HEAP32[$AsyncCtx10 >> 2] = 247; //@line 17690
    HEAP32[$AsyncCtx10 + 4 >> 2] = $93; //@line 17692
    HEAP32[$AsyncCtx10 + 8 >> 2] = $24; //@line 17694
    HEAP32[$AsyncCtx10 + 12 >> 2] = $$lcssa69; //@line 17696
    HEAP32[$AsyncCtx10 + 16 >> 2] = $92; //@line 17698
    HEAP32[$AsyncCtx10 + 20 >> 2] = $1; //@line 17700
    HEAP32[$AsyncCtx10 + 24 >> 2] = $2; //@line 17702
    HEAP32[$AsyncCtx10 + 28 >> 2] = $1; //@line 17704
    HEAP32[$AsyncCtx10 + 32 >> 2] = $2; //@line 17706
    HEAP32[$AsyncCtx10 + 36 >> 2] = $94; //@line 17708
    HEAP32[$AsyncCtx10 + 40 >> 2] = $96; //@line 17710
    HEAP32[$AsyncCtx10 + 44 >> 2] = $90; //@line 17712
    HEAP32[$AsyncCtx10 + 48 >> 2] = $91; //@line 17714
    HEAP32[$AsyncCtx10 + 52 >> 2] = $$byval_copy51; //@line 17716
    sp = STACKTOP; //@line 17717
    STACKTOP = sp; //@line 17718
    return;
   } else if ((label | 0) == 57) {
    HEAP32[$AsyncCtx37 >> 2] = 253; //@line 17721
    HEAP32[$AsyncCtx37 + 4 >> 2] = $24; //@line 17723
    HEAP32[$AsyncCtx37 + 8 >> 2] = $1; //@line 17725
    HEAP32[$AsyncCtx37 + 12 >> 2] = $93; //@line 17727
    HEAP32[$AsyncCtx37 + 16 >> 2] = $$lcssa69; //@line 17729
    HEAP32[$AsyncCtx37 + 20 >> 2] = $$byval_copy51; //@line 17731
    HEAP32[$AsyncCtx37 + 24 >> 2] = $92; //@line 17733
    HEAP32[$AsyncCtx37 + 28 >> 2] = $2; //@line 17735
    HEAP32[$AsyncCtx37 + 32 >> 2] = $1; //@line 17737
    HEAP32[$AsyncCtx37 + 36 >> 2] = $2; //@line 17739
    HEAP32[$AsyncCtx37 + 40 >> 2] = $94; //@line 17741
    HEAP32[$AsyncCtx37 + 44 >> 2] = $96; //@line 17743
    HEAP32[$AsyncCtx37 + 48 >> 2] = $90; //@line 17745
    HEAP32[$AsyncCtx37 + 52 >> 2] = $91; //@line 17747
    sp = STACKTOP; //@line 17748
    STACKTOP = sp; //@line 17749
    return;
   } else if ((label | 0) == 60) {
    HEAP8[$94 >> 0] = (HEAP8[$94 >> 0] | 0) + 1 << 24 >> 24; //@line 17754
    $184 = HEAP8[$93 >> 0] | 0; //@line 17755
    if ($184 << 24 >> 24) {
     HEAP8[$93 >> 0] = $184 + -1 << 24 >> 24; //@line 17759
    }
    _free($24); //@line 17761
    HEAP32[$$lcssa69 + 76 >> 2] = 5e3; //@line 17763
    STACKTOP = sp; //@line 17764
    return;
   }
  }
 } while (0);
 $127 = $$lcssa69 + 28 | 0; //@line 17768
 $128 = HEAP32[$127 >> 2] | 0; //@line 17769
 do {
  if (!$128) {
   $140 = 0; //@line 17773
  } else {
   $132 = HEAP32[$128 + 4 >> 2] | 0; //@line 17777
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17778
   FUNCTION_TABLE_vii[$132 & 7]($$byval_copy51, $$lcssa69 + 16 | 0); //@line 17779
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 248; //@line 17782
    HEAP32[$AsyncCtx14 + 4 >> 2] = $127; //@line 17784
    HEAP32[$AsyncCtx14 + 8 >> 2] = $$byval_copy51; //@line 17786
    HEAP32[$AsyncCtx14 + 12 >> 2] = $$lcssa69; //@line 17788
    HEAP32[$AsyncCtx14 + 16 >> 2] = $$byval_copy51; //@line 17790
    HEAP32[$AsyncCtx14 + 20 >> 2] = $24; //@line 17792
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 17794
    sp = STACKTOP; //@line 17795
    STACKTOP = sp; //@line 17796
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 17798
    $140 = HEAP32[$127 >> 2] | 0; //@line 17800
    break;
   }
  }
 } while (0);
 $139 = $$byval_copy51 + 12 | 0; //@line 17805
 HEAP32[$139 >> 2] = $140; //@line 17806
 $141 = HEAP32[$$lcssa69 >> 2] | 0; //@line 17807
 $AsyncCtx24 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17808
 __ZL28nsapi_dns_query_async_deletei($141); //@line 17809
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 249; //@line 17812
  HEAP32[$AsyncCtx24 + 4 >> 2] = $139; //@line 17814
  HEAP32[$AsyncCtx24 + 8 >> 2] = $$byval_copy51; //@line 17816
  HEAP32[$AsyncCtx24 + 12 >> 2] = $24; //@line 17818
  HEAP32[$AsyncCtx24 + 16 >> 2] = $1; //@line 17820
  sp = STACKTOP; //@line 17821
  STACKTOP = sp; //@line 17822
  return;
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 17824
 $AsyncCtx30 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17825
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 17826
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 250; //@line 17829
  HEAP32[$AsyncCtx30 + 4 >> 2] = $139; //@line 17831
  HEAP32[$AsyncCtx30 + 8 >> 2] = $$byval_copy51; //@line 17833
  HEAP32[$AsyncCtx30 + 12 >> 2] = $24; //@line 17835
  HEAP32[$AsyncCtx30 + 16 >> 2] = $1; //@line 17837
  sp = STACKTOP; //@line 17838
  STACKTOP = sp; //@line 17839
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 17841
 $150 = HEAP32[$139 >> 2] | 0; //@line 17842
 do {
  if ($150 | 0) {
   $152 = HEAP32[$150 >> 2] | 0; //@line 17846
   $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17847
   FUNCTION_TABLE_viii[$152 & 0]($$byval_copy51, -3019, 0); //@line 17848
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 251; //@line 17851
    HEAP32[$AsyncCtx17 + 4 >> 2] = $139; //@line 17853
    HEAP32[$AsyncCtx17 + 8 >> 2] = $$byval_copy51; //@line 17855
    HEAP32[$AsyncCtx17 + 12 >> 2] = $24; //@line 17857
    HEAP32[$AsyncCtx17 + 16 >> 2] = $1; //@line 17859
    sp = STACKTOP; //@line 17860
    STACKTOP = sp; //@line 17861
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 17863
   $$pr$i = HEAP32[$139 >> 2] | 0; //@line 17864
   if ($$pr$i | 0) {
    $159 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 17868
    $AsyncCtx21 = _emscripten_alloc_async_context(16, sp) | 0; //@line 17869
    FUNCTION_TABLE_vi[$159 & 511]($$byval_copy51); //@line 17870
    if (___async) {
     HEAP32[$AsyncCtx21 >> 2] = 252; //@line 17873
     HEAP32[$AsyncCtx21 + 4 >> 2] = $$byval_copy51; //@line 17875
     HEAP32[$AsyncCtx21 + 8 >> 2] = $24; //@line 17877
     HEAP32[$AsyncCtx21 + 12 >> 2] = $1; //@line 17879
     sp = STACKTOP; //@line 17880
     STACKTOP = sp; //@line 17881
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx21 | 0); //@line 17883
     break;
    }
   }
  }
 } while (0);
 _free($24); //@line 17889
 STACKTOP = sp; //@line 17890
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_209($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $143 = 0, $146 = 0, $148 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $169 = 0, $172 = 0, $174 = 0, $18 = 0, $187 = 0, $188 = 0, $189 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $69 = 0, $77 = 0, $8 = 0, $80 = 0, $83 = 0, $86 = 0, $93 = 0, $95 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29795
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29797
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29799
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29801
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29803
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29805
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29807
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29811
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29813
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29815
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29819
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29821
 HEAP32[HEAP32[$0 + 44 >> 2] >> 2] = HEAP32[HEAP32[$0 + 28 >> 2] >> 2]; //@line 29823
 $27 = $2 + 32 | 0; //@line 29824
 do {
  if (($27 | 0) != ($12 | 0)) {
   $29 = $2 + 44 | 0; //@line 29828
   $30 = HEAP32[$29 >> 2] | 0; //@line 29829
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 29833
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 29834
    FUNCTION_TABLE_vi[$33 & 511]($27); //@line 29835
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 29838
     $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 29839
     HEAP32[$34 >> 2] = $2; //@line 29840
     $35 = $ReallocAsyncCtx4 + 8 | 0; //@line 29841
     HEAP32[$35 >> 2] = $4; //@line 29842
     $36 = $ReallocAsyncCtx4 + 12 | 0; //@line 29843
     HEAP32[$36 >> 2] = $6; //@line 29844
     $37 = $ReallocAsyncCtx4 + 16 | 0; //@line 29845
     HEAP32[$37 >> 2] = $8; //@line 29846
     $38 = $ReallocAsyncCtx4 + 20 | 0; //@line 29847
     HEAP32[$38 >> 2] = $10; //@line 29848
     $39 = $ReallocAsyncCtx4 + 24 | 0; //@line 29849
     HEAP32[$39 >> 2] = $12; //@line 29850
     $40 = $ReallocAsyncCtx4 + 28 | 0; //@line 29851
     HEAP32[$40 >> 2] = $29; //@line 29852
     $41 = $ReallocAsyncCtx4 + 32 | 0; //@line 29853
     HEAP32[$41 >> 2] = $27; //@line 29854
     $42 = $ReallocAsyncCtx4 + 36 | 0; //@line 29855
     HEAP32[$42 >> 2] = $16; //@line 29856
     $43 = $ReallocAsyncCtx4 + 40 | 0; //@line 29857
     HEAP32[$43 >> 2] = $18; //@line 29858
     $44 = $ReallocAsyncCtx4 + 44 | 0; //@line 29859
     HEAP32[$44 >> 2] = $20; //@line 29860
     $45 = $ReallocAsyncCtx4 + 48 | 0; //@line 29861
     HEAP32[$45 >> 2] = $24; //@line 29862
     $46 = $ReallocAsyncCtx4 + 52 | 0; //@line 29863
     HEAP32[$46 >> 2] = $26; //@line 29864
     sp = STACKTOP; //@line 29865
     return;
    }
    ___async_unwind = 0; //@line 29868
    HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 29869
    $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 29870
    HEAP32[$34 >> 2] = $2; //@line 29871
    $35 = $ReallocAsyncCtx4 + 8 | 0; //@line 29872
    HEAP32[$35 >> 2] = $4; //@line 29873
    $36 = $ReallocAsyncCtx4 + 12 | 0; //@line 29874
    HEAP32[$36 >> 2] = $6; //@line 29875
    $37 = $ReallocAsyncCtx4 + 16 | 0; //@line 29876
    HEAP32[$37 >> 2] = $8; //@line 29877
    $38 = $ReallocAsyncCtx4 + 20 | 0; //@line 29878
    HEAP32[$38 >> 2] = $10; //@line 29879
    $39 = $ReallocAsyncCtx4 + 24 | 0; //@line 29880
    HEAP32[$39 >> 2] = $12; //@line 29881
    $40 = $ReallocAsyncCtx4 + 28 | 0; //@line 29882
    HEAP32[$40 >> 2] = $29; //@line 29883
    $41 = $ReallocAsyncCtx4 + 32 | 0; //@line 29884
    HEAP32[$41 >> 2] = $27; //@line 29885
    $42 = $ReallocAsyncCtx4 + 36 | 0; //@line 29886
    HEAP32[$42 >> 2] = $16; //@line 29887
    $43 = $ReallocAsyncCtx4 + 40 | 0; //@line 29888
    HEAP32[$43 >> 2] = $18; //@line 29889
    $44 = $ReallocAsyncCtx4 + 44 | 0; //@line 29890
    HEAP32[$44 >> 2] = $20; //@line 29891
    $45 = $ReallocAsyncCtx4 + 48 | 0; //@line 29892
    HEAP32[$45 >> 2] = $24; //@line 29893
    $46 = $ReallocAsyncCtx4 + 52 | 0; //@line 29894
    HEAP32[$46 >> 2] = $26; //@line 29895
    sp = STACKTOP; //@line 29896
    return;
   }
   $47 = $12 + 12 | 0; //@line 29899
   $48 = HEAP32[$47 >> 2] | 0; //@line 29900
   if (!$48) {
    HEAP32[$29 >> 2] = 0; //@line 29903
    break;
   }
   $51 = HEAP32[$48 + 4 >> 2] | 0; //@line 29907
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 29908
   FUNCTION_TABLE_vii[$51 & 7]($27, $12); //@line 29909
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 29912
    $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 29913
    HEAP32[$52 >> 2] = $2; //@line 29914
    $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 29915
    HEAP32[$53 >> 2] = $4; //@line 29916
    $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 29917
    HEAP32[$54 >> 2] = $6; //@line 29918
    $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 29919
    HEAP32[$55 >> 2] = $8; //@line 29920
    $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 29921
    HEAP32[$56 >> 2] = $10; //@line 29922
    $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 29923
    HEAP32[$57 >> 2] = $29; //@line 29924
    $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 29925
    HEAP32[$58 >> 2] = $16; //@line 29926
    $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 29927
    HEAP32[$59 >> 2] = $18; //@line 29928
    $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 29929
    HEAP32[$60 >> 2] = $47; //@line 29930
    $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 29931
    HEAP32[$61 >> 2] = $27; //@line 29932
    $62 = $ReallocAsyncCtx5 + 44 | 0; //@line 29933
    HEAP32[$62 >> 2] = $20; //@line 29934
    $63 = $ReallocAsyncCtx5 + 48 | 0; //@line 29935
    HEAP32[$63 >> 2] = $24; //@line 29936
    $64 = $ReallocAsyncCtx5 + 52 | 0; //@line 29937
    HEAP32[$64 >> 2] = $26; //@line 29938
    sp = STACKTOP; //@line 29939
    return;
   }
   ___async_unwind = 0; //@line 29942
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 29943
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 29944
   HEAP32[$52 >> 2] = $2; //@line 29945
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 29946
   HEAP32[$53 >> 2] = $4; //@line 29947
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 29948
   HEAP32[$54 >> 2] = $6; //@line 29949
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 29950
   HEAP32[$55 >> 2] = $8; //@line 29951
   $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 29952
   HEAP32[$56 >> 2] = $10; //@line 29953
   $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 29954
   HEAP32[$57 >> 2] = $29; //@line 29955
   $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 29956
   HEAP32[$58 >> 2] = $16; //@line 29957
   $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 29958
   HEAP32[$59 >> 2] = $18; //@line 29959
   $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 29960
   HEAP32[$60 >> 2] = $47; //@line 29961
   $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 29962
   HEAP32[$61 >> 2] = $27; //@line 29963
   $62 = $ReallocAsyncCtx5 + 44 | 0; //@line 29964
   HEAP32[$62 >> 2] = $20; //@line 29965
   $63 = $ReallocAsyncCtx5 + 48 | 0; //@line 29966
   HEAP32[$63 >> 2] = $24; //@line 29967
   $64 = $ReallocAsyncCtx5 + 52 | 0; //@line 29968
   HEAP32[$64 >> 2] = $26; //@line 29969
   sp = STACKTOP; //@line 29970
   return;
  }
 } while (0);
 HEAP32[$2 + 8 >> 2] = $4; //@line 29975
 HEAP32[$2 + 48 >> 2] = $6; //@line 29977
 HEAP32[$2 + 52 >> 2] = $8; //@line 29979
 $68 = $2 + 56 | 0; //@line 29980
 HEAP32[$68 >> 2] = 0; //@line 29981
 $69 = $2 + 60 | 0; //@line 29982
 HEAP32[$69 >> 2] = 0; //@line 29983
 HEAP32[$2 + 64 >> 2] = 0; //@line 29985
 HEAP8[$2 + 82 >> 0] = 0; //@line 29987
 HEAP8[$2 + 83 >> 0] = 1; //@line 29989
 HEAP8[$2 + 84 >> 0] = 3; //@line 29991
 HEAP8[$2 + 85 >> 0] = 0; //@line 29993
 HEAP16[$2 + 80 >> 1] = 0; //@line 29995
 HEAP32[$2 + 76 >> 2] = 0; //@line 29997
 $77 = $2 + 72 | 0; //@line 29998
 HEAP32[$77 >> 2] = 15500; //@line 29999
 HEAP8[$2 + 86 >> 0] = 0; //@line 30001
 HEAP32[$2 + 88 >> 2] = 0; //@line 30003
 $80 = HEAP32[177] | 0; //@line 30004
 HEAP32[177] = $80 + 1; //@line 30006
 HEAP32[$2 >> 2] = ($80 | 0) > 32767 ? 1 : $80; //@line 30009
 $83 = HEAP32[2509] | 0; //@line 30010
 if (!$83) {
  $$1 = 0; //@line 30013
  $133 = 0; //@line 30013
 } else {
  $86 = HEAP32[$83 + 56 >> 2] | 0; //@line 30016
  if (!$86) {
   $$1 = 1; //@line 30019
   $133 = 0; //@line 30019
  } else {
   if ((HEAP32[$83 + 8 >> 2] | 0) == ($4 | 0)) {
    HEAP32[$68 >> 2] = $86; //@line 30025
    HEAP32[$69 >> 2] = HEAP32[$83 + 60 >> 2]; //@line 30028
    $$1 = 1; //@line 30029
    $133 = $86; //@line 30029
   } else {
    $$1 = 1; //@line 30031
    $133 = 0; //@line 30031
   }
  }
 }
 $93 = HEAP32[2510] | 0; //@line 30035
 if (!$93) {
  $$1$1 = $$1; //@line 30038
  $146 = $133; //@line 30038
 } else {
  if (!$133) {
   $135 = HEAP32[$93 + 56 >> 2] | 0; //@line 30043
   if (!$135) {
    $187 = 0; //@line 30046
   } else {
    if ((HEAP32[$93 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$68 >> 2] = $135; //@line 30052
     HEAP32[$69 >> 2] = HEAP32[$93 + 60 >> 2]; //@line 30055
     $187 = $135; //@line 30056
    } else {
     $187 = 0; //@line 30058
    }
   }
  } else {
   $187 = $133; //@line 30062
  }
  $$1$1 = $$1 + 1 | 0; //@line 30065
  $146 = $187; //@line 30065
 }
 $143 = HEAP32[2511] | 0; //@line 30067
 if (!$143) {
  $$1$2 = $$1$1; //@line 30070
  $159 = $146; //@line 30070
 } else {
  if (!$146) {
   $148 = HEAP32[$143 + 56 >> 2] | 0; //@line 30075
   if (!$148) {
    $188 = 0; //@line 30078
   } else {
    if ((HEAP32[$143 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$68 >> 2] = $148; //@line 30084
     HEAP32[$69 >> 2] = HEAP32[$143 + 60 >> 2]; //@line 30087
     $188 = $148; //@line 30088
    } else {
     $188 = 0; //@line 30090
    }
   }
  } else {
   $188 = $146; //@line 30094
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 30097
  $159 = $188; //@line 30097
 }
 $156 = HEAP32[2512] | 0; //@line 30099
 if (!$156) {
  $$1$3 = $$1$2; //@line 30102
  $172 = $159; //@line 30102
 } else {
  if (!$159) {
   $161 = HEAP32[$156 + 56 >> 2] | 0; //@line 30107
   if (!$161) {
    $189 = 0; //@line 30110
   } else {
    if ((HEAP32[$156 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$68 >> 2] = $161; //@line 30116
     HEAP32[$69 >> 2] = HEAP32[$156 + 60 >> 2]; //@line 30119
     $189 = $161; //@line 30120
    } else {
     $189 = 0; //@line 30122
    }
   }
  } else {
   $189 = $159; //@line 30126
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 30129
  $172 = $189; //@line 30129
 }
 $169 = HEAP32[2513] | 0; //@line 30131
 if (!$169) {
  $$1$4 = $$1$3; //@line 30134
 } else {
  if (!$172) {
   $174 = HEAP32[$169 + 56 >> 2] | 0; //@line 30139
   if ($174 | 0) {
    if ((HEAP32[$169 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$68 >> 2] = $174; //@line 30146
     HEAP32[$69 >> 2] = HEAP32[$169 + 60 >> 2]; //@line 30149
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 30154
 }
 HEAP32[10036 + ($24 << 2) >> 2] = $2; //@line 30157
 HEAP32[$77 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 30160
 if (HEAP8[10976] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 30164
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 30165
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 30168
   $130 = $ReallocAsyncCtx13 + 4 | 0; //@line 30169
   HEAP32[$130 >> 2] = $2; //@line 30170
   $131 = $ReallocAsyncCtx13 + 8 | 0; //@line 30171
   HEAP32[$131 >> 2] = $10; //@line 30172
   sp = STACKTOP; //@line 30173
   return;
  }
  ___async_unwind = 0; //@line 30176
  HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 30177
  $130 = $ReallocAsyncCtx13 + 4 | 0; //@line 30178
  HEAP32[$130 >> 2] = $2; //@line 30179
  $131 = $ReallocAsyncCtx13 + 8 | 0; //@line 30180
  HEAP32[$131 >> 2] = $10; //@line 30181
  sp = STACKTOP; //@line 30182
  return;
 }
 $95 = $2 + 44 | 0; //@line 30185
 $96 = HEAP32[$95 >> 2] | 0; //@line 30186
 if (!$96) {
  $110 = $18 + 12 | 0; //@line 30189
  HEAP32[$110 >> 2] = 0; //@line 30190
  $112 = $16 + 4 | 0; //@line 30192
  HEAP32[$112 >> 2] = 0; //@line 30194
  HEAP32[$112 + 4 >> 2] = 0; //@line 30197
  HEAP32[$16 >> 2] = 3; //@line 30198
  $116 = $16 + 12 | 0; //@line 30199
  HEAP32[$116 >> 2] = 712; //@line 30200
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 30201
  $117 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 100, $16) | 0; //@line 30202
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 30205
   $118 = $ReallocAsyncCtx14 + 4 | 0; //@line 30206
   HEAP32[$118 >> 2] = $10; //@line 30207
   $119 = $ReallocAsyncCtx14 + 8 | 0; //@line 30208
   HEAP32[$119 >> 2] = $16; //@line 30209
   $120 = $ReallocAsyncCtx14 + 12 | 0; //@line 30210
   HEAP32[$120 >> 2] = $18; //@line 30211
   $121 = $ReallocAsyncCtx14 + 16 | 0; //@line 30212
   HEAP32[$121 >> 2] = $110; //@line 30213
   $122 = $ReallocAsyncCtx14 + 20 | 0; //@line 30214
   HEAP32[$122 >> 2] = $20; //@line 30215
   $123 = $ReallocAsyncCtx14 + 24 | 0; //@line 30216
   HEAP32[$123 >> 2] = $27; //@line 30217
   $124 = $ReallocAsyncCtx14 + 28 | 0; //@line 30218
   HEAP32[$124 >> 2] = $2; //@line 30219
   $125 = $ReallocAsyncCtx14 + 32 | 0; //@line 30220
   HEAP32[$125 >> 2] = $95; //@line 30221
   $126 = $ReallocAsyncCtx14 + 36 | 0; //@line 30222
   HEAP32[$126 >> 2] = $26; //@line 30223
   $127 = $ReallocAsyncCtx14 + 40 | 0; //@line 30224
   HEAP32[$127 >> 2] = $2; //@line 30225
   $128 = $ReallocAsyncCtx14 + 44 | 0; //@line 30226
   HEAP32[$128 >> 2] = $116; //@line 30227
   sp = STACKTOP; //@line 30228
   return;
  }
  HEAP32[___async_retval >> 2] = $117; //@line 30232
  ___async_unwind = 0; //@line 30233
  HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 30234
  $118 = $ReallocAsyncCtx14 + 4 | 0; //@line 30235
  HEAP32[$118 >> 2] = $10; //@line 30236
  $119 = $ReallocAsyncCtx14 + 8 | 0; //@line 30237
  HEAP32[$119 >> 2] = $16; //@line 30238
  $120 = $ReallocAsyncCtx14 + 12 | 0; //@line 30239
  HEAP32[$120 >> 2] = $18; //@line 30240
  $121 = $ReallocAsyncCtx14 + 16 | 0; //@line 30241
  HEAP32[$121 >> 2] = $110; //@line 30242
  $122 = $ReallocAsyncCtx14 + 20 | 0; //@line 30243
  HEAP32[$122 >> 2] = $20; //@line 30244
  $123 = $ReallocAsyncCtx14 + 24 | 0; //@line 30245
  HEAP32[$123 >> 2] = $27; //@line 30246
  $124 = $ReallocAsyncCtx14 + 28 | 0; //@line 30247
  HEAP32[$124 >> 2] = $2; //@line 30248
  $125 = $ReallocAsyncCtx14 + 32 | 0; //@line 30249
  HEAP32[$125 >> 2] = $95; //@line 30250
  $126 = $ReallocAsyncCtx14 + 36 | 0; //@line 30251
  HEAP32[$126 >> 2] = $26; //@line 30252
  $127 = $ReallocAsyncCtx14 + 40 | 0; //@line 30253
  HEAP32[$127 >> 2] = $2; //@line 30254
  $128 = $ReallocAsyncCtx14 + 44 | 0; //@line 30255
  HEAP32[$128 >> 2] = $116; //@line 30256
  sp = STACKTOP; //@line 30257
  return;
 } else {
  $99 = HEAP32[$96 + 4 >> 2] | 0; //@line 30261
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 30262
  FUNCTION_TABLE_vii[$99 & 7]($18, $27); //@line 30263
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 30266
   $100 = $ReallocAsyncCtx6 + 4 | 0; //@line 30267
   HEAP32[$100 >> 2] = $10; //@line 30268
   $101 = $ReallocAsyncCtx6 + 8 | 0; //@line 30269
   HEAP32[$101 >> 2] = $16; //@line 30270
   $102 = $ReallocAsyncCtx6 + 12 | 0; //@line 30271
   HEAP32[$102 >> 2] = $95; //@line 30272
   $103 = $ReallocAsyncCtx6 + 16 | 0; //@line 30273
   HEAP32[$103 >> 2] = $18; //@line 30274
   $104 = $ReallocAsyncCtx6 + 20 | 0; //@line 30275
   HEAP32[$104 >> 2] = $20; //@line 30276
   $105 = $ReallocAsyncCtx6 + 24 | 0; //@line 30277
   HEAP32[$105 >> 2] = $27; //@line 30278
   $106 = $ReallocAsyncCtx6 + 28 | 0; //@line 30279
   HEAP32[$106 >> 2] = $2; //@line 30280
   $107 = $ReallocAsyncCtx6 + 32 | 0; //@line 30281
   HEAP32[$107 >> 2] = $95; //@line 30282
   $108 = $ReallocAsyncCtx6 + 36 | 0; //@line 30283
   HEAP32[$108 >> 2] = $26; //@line 30284
   $109 = $ReallocAsyncCtx6 + 40 | 0; //@line 30285
   HEAP32[$109 >> 2] = $2; //@line 30286
   sp = STACKTOP; //@line 30287
   return;
  }
  ___async_unwind = 0; //@line 30290
  HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 30291
  $100 = $ReallocAsyncCtx6 + 4 | 0; //@line 30292
  HEAP32[$100 >> 2] = $10; //@line 30293
  $101 = $ReallocAsyncCtx6 + 8 | 0; //@line 30294
  HEAP32[$101 >> 2] = $16; //@line 30295
  $102 = $ReallocAsyncCtx6 + 12 | 0; //@line 30296
  HEAP32[$102 >> 2] = $95; //@line 30297
  $103 = $ReallocAsyncCtx6 + 16 | 0; //@line 30298
  HEAP32[$103 >> 2] = $18; //@line 30299
  $104 = $ReallocAsyncCtx6 + 20 | 0; //@line 30300
  HEAP32[$104 >> 2] = $20; //@line 30301
  $105 = $ReallocAsyncCtx6 + 24 | 0; //@line 30302
  HEAP32[$105 >> 2] = $27; //@line 30303
  $106 = $ReallocAsyncCtx6 + 28 | 0; //@line 30304
  HEAP32[$106 >> 2] = $2; //@line 30305
  $107 = $ReallocAsyncCtx6 + 32 | 0; //@line 30306
  HEAP32[$107 >> 2] = $95; //@line 30307
  $108 = $ReallocAsyncCtx6 + 36 | 0; //@line 30308
  HEAP32[$108 >> 2] = $26; //@line 30309
  $109 = $ReallocAsyncCtx6 + 40 | 0; //@line 30310
  HEAP32[$109 >> 2] = $2; //@line 30311
  sp = STACKTOP; //@line 30312
  return;
 }
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13809
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13811
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13815
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13817
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13819
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13821
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 13823
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13825
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13827
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13829
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13831
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13833
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13835
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13837
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13839
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13841
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13843
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13845
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 13847
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 13849
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 13851
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 13853
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 13855
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 13857
 HEAP32[133] = (HEAP32[133] | 0) + 1; //@line 13862
 $53 = HEAP32[122] | 0; //@line 13863
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 13867
   do {
    if ($14 << 24 >> 24 > -1 & ($16 | 0) != 0) {
     $57 = HEAP32[119] | 0; //@line 13873
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $16) | 0) {
       $$0$i = 1; //@line 13880
       break;
      }
     }
     $62 = HEAP32[120] | 0; //@line 13884
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 13888
     } else {
      if (!(_strstr($62, $16) | 0)) {
       $$0$i = 1; //@line 13893
      } else {
       label = 9; //@line 13895
      }
     }
    } else {
     label = 9; //@line 13899
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 13903
   }
   if (!((HEAP32[129] | 0) != 0 & ((($16 | 0) == 0 | (($10 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[126] = HEAP32[124]; //@line 13915
    break;
   }
   $73 = HEAPU8[472] | 0; //@line 13919
   $74 = $14 & 255; //@line 13920
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 13925
    $$lobit = $78 >>> 6; //@line 13926
    $79 = $$lobit & 255; //@line 13927
    $83 = ($73 & 32 | 0) == 0; //@line 13931
    $84 = HEAP32[123] | 0; //@line 13932
    $85 = HEAP32[122] | 0; //@line 13933
    $86 = $14 << 24 >> 24 == 1; //@line 13934
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 13937
     _vsnprintf($85, $84, $10, $12) | 0; //@line 13938
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 74; //@line 13941
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 13942
      $$expand_i1_val = $86 & 1; //@line 13943
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 13944
      sp = STACKTOP; //@line 13945
      return;
     }
     ___async_unwind = 0; //@line 13948
     HEAP32[$ReallocAsyncCtx12 >> 2] = 74; //@line 13949
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 13950
     $$expand_i1_val = $86 & 1; //@line 13951
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 13952
     sp = STACKTOP; //@line 13953
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 13959
     $$1143 = $85; //@line 13959
     $$1145 = $84; //@line 13959
     $$3154 = 0; //@line 13959
     label = 28; //@line 13960
    } else {
     if ($83) {
      $$0142 = $85; //@line 13963
      $$0144 = $84; //@line 13963
     } else {
      $89 = _snprintf($85, $84, 5637, $2) | 0; //@line 13965
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 13967
      $91 = ($$ | 0) > 0; //@line 13968
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 13973
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 13973
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 13977
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 5655; //@line 13983
        label = 25; //@line 13984
        break;
       }
      case 1:
       {
        $$sink = 5661; //@line 13988
        label = 25; //@line 13989
        break;
       }
      case 3:
       {
        $$sink = 5649; //@line 13993
        label = 25; //@line 13994
        break;
       }
      case 7:
       {
        $$sink = 5643; //@line 13998
        label = 25; //@line 13999
        break;
       }
      default:
       {
        $$0141 = 0; //@line 14003
        $$1152 = 0; //@line 14003
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$48 >> 2] = $$sink; //@line 14007
       $$0141 = $79 & 1; //@line 14010
       $$1152 = _snprintf($$0142, $$0144, 5667, $48) | 0; //@line 14010
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 14013
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 14015
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 14017
       $$1$off0 = $extract$t159; //@line 14022
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 14022
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 14022
       $$3154 = $$1152; //@line 14022
       label = 28; //@line 14023
      } else {
       $$1$off0 = $extract$t159; //@line 14025
       $$1143 = $$0142; //@line 14025
       $$1145 = $$0144; //@line 14025
       $$3154 = $$1152$; //@line 14025
       label = 28; //@line 14026
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[127] | 0) != 0) {
      HEAP32[$42 >> 2] = HEAP32[$12 >> 2]; //@line 14037
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 14038
      $108 = _vsnprintf(0, 0, $10, $42) | 0; //@line 14039
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 78; //@line 14042
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 14043
       HEAP32[$109 >> 2] = $6; //@line 14044
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 14045
       HEAP32[$110 >> 2] = $8; //@line 14046
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 14047
       HEAP32[$111 >> 2] = $18; //@line 14048
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 14049
       HEAP32[$112 >> 2] = $20; //@line 14050
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 14051
       HEAP32[$113 >> 2] = $10; //@line 14052
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 14053
       HEAP32[$114 >> 2] = $12; //@line 14054
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 14055
       HEAP32[$115 >> 2] = $22; //@line 14056
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 14057
       HEAP32[$116 >> 2] = $16; //@line 14058
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 14059
       HEAP32[$117 >> 2] = $24; //@line 14060
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 14061
       HEAP32[$118 >> 2] = $26; //@line 14062
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 14063
       HEAP32[$119 >> 2] = $28; //@line 14064
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 14065
       HEAP32[$120 >> 2] = $30; //@line 14066
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 14067
       HEAP32[$121 >> 2] = $32; //@line 14068
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 14069
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 14070
       HEAP8[$122 >> 0] = $$1$off0$expand_i1_val; //@line 14071
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 14072
       HEAP32[$123 >> 2] = $34; //@line 14073
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 14074
       HEAP32[$124 >> 2] = $36; //@line 14075
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 14076
       HEAP32[$125 >> 2] = $38; //@line 14077
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 14078
       HEAP32[$126 >> 2] = $40; //@line 14079
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 14080
       HEAP32[$127 >> 2] = $$1143; //@line 14081
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 14082
       HEAP32[$128 >> 2] = $$1145; //@line 14083
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 14084
       HEAP32[$129 >> 2] = $74; //@line 14085
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 14086
       HEAP32[$130 >> 2] = $44; //@line 14087
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 14088
       HEAP32[$131 >> 2] = $46; //@line 14089
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 14090
       HEAP32[$132 >> 2] = $42; //@line 14091
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 14092
       HEAP32[$133 >> 2] = $$3154; //@line 14093
       sp = STACKTOP; //@line 14094
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 14098
      ___async_unwind = 0; //@line 14099
      HEAP32[$ReallocAsyncCtx11 >> 2] = 78; //@line 14100
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 14101
      HEAP32[$109 >> 2] = $6; //@line 14102
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 14103
      HEAP32[$110 >> 2] = $8; //@line 14104
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 14105
      HEAP32[$111 >> 2] = $18; //@line 14106
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 14107
      HEAP32[$112 >> 2] = $20; //@line 14108
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 14109
      HEAP32[$113 >> 2] = $10; //@line 14110
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 14111
      HEAP32[$114 >> 2] = $12; //@line 14112
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 14113
      HEAP32[$115 >> 2] = $22; //@line 14114
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 14115
      HEAP32[$116 >> 2] = $16; //@line 14116
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 14117
      HEAP32[$117 >> 2] = $24; //@line 14118
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 14119
      HEAP32[$118 >> 2] = $26; //@line 14120
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 14121
      HEAP32[$119 >> 2] = $28; //@line 14122
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 14123
      HEAP32[$120 >> 2] = $30; //@line 14124
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 14125
      HEAP32[$121 >> 2] = $32; //@line 14126
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 14127
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 14128
      HEAP8[$122 >> 0] = $$1$off0$expand_i1_val; //@line 14129
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 14130
      HEAP32[$123 >> 2] = $34; //@line 14131
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 14132
      HEAP32[$124 >> 2] = $36; //@line 14133
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 14134
      HEAP32[$125 >> 2] = $38; //@line 14135
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 14136
      HEAP32[$126 >> 2] = $40; //@line 14137
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 14138
      HEAP32[$127 >> 2] = $$1143; //@line 14139
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 14140
      HEAP32[$128 >> 2] = $$1145; //@line 14141
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 14142
      HEAP32[$129 >> 2] = $74; //@line 14143
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 14144
      HEAP32[$130 >> 2] = $44; //@line 14145
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 14146
      HEAP32[$131 >> 2] = $46; //@line 14147
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 14148
      HEAP32[$132 >> 2] = $42; //@line 14149
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 14150
      HEAP32[$133 >> 2] = $$3154; //@line 14151
      sp = STACKTOP; //@line 14152
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 14157
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$34 >> 2] = $16; //@line 14163
        $$5156 = _snprintf($$1143, $$1145, 5670, $34) | 0; //@line 14165
        break;
       }
      case 1:
       {
        HEAP32[$30 >> 2] = $16; //@line 14169
        $$5156 = _snprintf($$1143, $$1145, 5685, $30) | 0; //@line 14171
        break;
       }
      case 3:
       {
        HEAP32[$26 >> 2] = $16; //@line 14175
        $$5156 = _snprintf($$1143, $$1145, 5700, $26) | 0; //@line 14177
        break;
       }
      case 7:
       {
        HEAP32[$22 >> 2] = $16; //@line 14181
        $$5156 = _snprintf($$1143, $$1145, 5715, $22) | 0; //@line 14183
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 5730, $18) | 0; //@line 14188
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 14192
      $147 = $$1143 + $$5156$ | 0; //@line 14194
      $148 = $$1145 - $$5156$ | 0; //@line 14195
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 14199
       $150 = _vsnprintf($147, $148, $10, $12) | 0; //@line 14200
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 80; //@line 14203
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 14204
        HEAP32[$151 >> 2] = $6; //@line 14205
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 14206
        HEAP32[$152 >> 2] = $8; //@line 14207
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 14208
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 14209
        HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 14210
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 14211
        HEAP32[$154 >> 2] = $38; //@line 14212
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 14213
        HEAP32[$155 >> 2] = $40; //@line 14214
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 14215
        HEAP32[$156 >> 2] = $148; //@line 14216
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 14217
        HEAP32[$157 >> 2] = $147; //@line 14218
        sp = STACKTOP; //@line 14219
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 14223
       ___async_unwind = 0; //@line 14224
       HEAP32[$ReallocAsyncCtx10 >> 2] = 80; //@line 14225
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 14226
       HEAP32[$151 >> 2] = $6; //@line 14227
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 14228
       HEAP32[$152 >> 2] = $8; //@line 14229
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 14230
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 14231
       HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 14232
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 14233
       HEAP32[$154 >> 2] = $38; //@line 14234
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 14235
       HEAP32[$155 >> 2] = $40; //@line 14236
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 14237
       HEAP32[$156 >> 2] = $148; //@line 14238
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 14239
       HEAP32[$157 >> 2] = $147; //@line 14240
       sp = STACKTOP; //@line 14241
       return;
      }
     }
    }
    $159 = HEAP32[129] | 0; //@line 14246
    $160 = HEAP32[122] | 0; //@line 14247
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14248
    FUNCTION_TABLE_vi[$159 & 511]($160); //@line 14249
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 14252
     sp = STACKTOP; //@line 14253
     return;
    }
    ___async_unwind = 0; //@line 14256
    HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 14257
    sp = STACKTOP; //@line 14258
    return;
   }
  }
 } while (0);
 $161 = HEAP32[132] | 0; //@line 14263
 if (!$161) {
  return;
 }
 $163 = HEAP32[133] | 0; //@line 14268
 HEAP32[133] = 0; //@line 14269
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 14270
 FUNCTION_TABLE_v[$161 & 7](); //@line 14271
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 14274
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 14275
  HEAP32[$164 >> 2] = $163; //@line 14276
  sp = STACKTOP; //@line 14277
  return;
 }
 ___async_unwind = 0; //@line 14280
 HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 14281
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 14282
 HEAP32[$164 >> 2] = $163; //@line 14283
 sp = STACKTOP; //@line 14284
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$048$i = 0, $$094 = 0, $$097 = 0, $$1105 = 0, $$1106 = 0, $$1107 = 0, $$170 = 0, $$2 = 0, $$296$ph113 = 0, $$299 = 0, $$3 = 0, $$3100 = 0, $$393$ph114 = 0, $$4$ph = 0, $$4110 = 0, $$byval_copy29 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $101 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $162 = 0, $164 = 0, $174 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $78 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12327
 STACKTOP = STACKTOP + 176 | 0; //@line 12328
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 12328
 $$byval_copy29 = sp + 144 | 0; //@line 12329
 $5 = sp + 88 | 0; //@line 12330
 $6 = sp; //@line 12331
 $7 = sp + 64 | 0; //@line 12332
 if (!$1) {
  $$3 = -3003; //@line 12335
  STACKTOP = sp; //@line 12336
  return $$3 | 0; //@line 12336
 }
 $9 = _strlen($1) | 0; //@line 12338
 if (($9 | 0) > 255 | ($9 | 0) == 0) {
  $$3 = -3003; //@line 12343
  STACKTOP = sp; //@line 12344
  return $$3 | 0; //@line 12344
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $4, $2) | 0)) {
  $$3 = 1; //@line 12349
  STACKTOP = sp; //@line 12350
  return $$3 | 0; //@line 12350
 }
 __ZN9UDPSocketC2Ev($5); //@line 12352
 $AsyncCtx21 = _emscripten_alloc_async_context(48, sp) | 0; //@line 12353
 $14 = __ZN6Socket4openEP12NetworkStack($5, $0) | 0; //@line 12354
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 154; //@line 12357
  HEAP32[$AsyncCtx21 + 4 >> 2] = $6; //@line 12359
  HEAP32[$AsyncCtx21 + 8 >> 2] = $1; //@line 12361
  HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 12363
  HEAP32[$AsyncCtx21 + 16 >> 2] = $5; //@line 12365
  HEAP32[$AsyncCtx21 + 20 >> 2] = $5; //@line 12367
  HEAP32[$AsyncCtx21 + 24 >> 2] = $$byval_copy29; //@line 12369
  HEAP32[$AsyncCtx21 + 28 >> 2] = $2; //@line 12371
  HEAP32[$AsyncCtx21 + 32 >> 2] = $3; //@line 12373
  HEAP32[$AsyncCtx21 + 36 >> 2] = $5; //@line 12375
  HEAP32[$AsyncCtx21 + 40 >> 2] = $7; //@line 12377
  HEAP32[$AsyncCtx21 + 44 >> 2] = $4; //@line 12379
  sp = STACKTOP; //@line 12380
  STACKTOP = sp; //@line 12381
  return 0; //@line 12381
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 12383
 do {
  if (!$14) {
   __ZN6Socket11set_timeoutEi($5, 5e3); //@line 12387
   $27 = _malloc(512) | 0; //@line 12388
   if (!$27) {
    $$2 = -3007; //@line 12391
   } else {
    $29 = $27; //@line 12393
    $30 = $27 + 1 | 0; //@line 12394
    $31 = $27 + 2 | 0; //@line 12395
    $32 = $27 + 3 | 0; //@line 12396
    $33 = $27 + 4 | 0; //@line 12397
    $34 = $27 + 5 | 0; //@line 12398
    $35 = $27 + 6 | 0; //@line 12399
    $36 = $27 + 12 | 0; //@line 12400
    $$sink$i = ($4 | 0) == 2 ? 28 : 1; //@line 12402
    $$0 = 0; //@line 12403
    $$094 = 3; //@line 12403
    $$097 = 0; //@line 12403
    while (1) {
     HEAP32[$7 >> 2] = 0; //@line 12405
     HEAP32[$7 + 4 >> 2] = 0; //@line 12405
     HEAP32[$7 + 8 >> 2] = 0; //@line 12405
     HEAP32[$7 + 12 >> 2] = 0; //@line 12405
     HEAP32[$7 + 16 >> 2] = 0; //@line 12405
     HEAP32[$$byval_copy29 >> 2] = HEAP32[$7 >> 2]; //@line 12406
     HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 12406
     HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 12406
     HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 12406
     HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 12406
     __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy29, 0); //@line 12407
     if (!($$094 << 24 >> 24)) {
      $$4$ph = -3009; //@line 12410
      label = 32; //@line 12411
      break;
     }
     if (($$097 & 255) > 9) {
      if (!($$0 << 24 >> 24)) {
       $$4$ph = -3009; //@line 12418
       label = 32; //@line 12419
       break;
      } else {
       $$1107 = 0; //@line 12422
       $43 = 0; //@line 12422
       label = 13; //@line 12423
      }
     } else {
      if (($$097 & 255) < 5) {
       $$1107 = $$0; //@line 12428
       $43 = $$097; //@line 12428
       label = 13; //@line 12429
      } else {
       $$1106 = $$0; //@line 12431
       $$299 = $$097; //@line 12431
       label = 16; //@line 12432
      }
     }
     if ((label | 0) == 13) {
      label = 0; //@line 12436
      $46 = HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0; //@line 12440
      $AsyncCtx = _emscripten_alloc_async_context(112, sp) | 0; //@line 12441
      $47 = FUNCTION_TABLE_iiii[$46 & 31]($0, $43 & 255, $6) | 0; //@line 12442
      if (___async) {
       label = 14; //@line 12445
       break;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12448
      if (($47 | 0) < 0) {
       $$1106 = $$1107; //@line 12451
       $$299 = 5; //@line 12451
       label = 16; //@line 12452
      } else {
       $$1105 = $$1107; //@line 12454
       $$3100 = $43; //@line 12454
      }
     }
     if ((label | 0) == 16) {
      label = 0; //@line 12458
      $78 = 608 + ((($$299 & 255) + -5 | 0) * 20 | 0) | 0; //@line 12461
      HEAP32[$$byval_copy29 >> 2] = HEAP32[$78 >> 2]; //@line 12462
      HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$78 + 4 >> 2]; //@line 12462
      HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$78 + 8 >> 2]; //@line 12462
      HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$78 + 12 >> 2]; //@line 12462
      HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$78 + 16 >> 2]; //@line 12462
      __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy29); //@line 12463
      $$1105 = $$1106; //@line 12464
      $$3100 = $$299; //@line 12464
     }
     __ZN13SocketAddress8set_portEt($6, 53); //@line 12466
     HEAP8[$27 >> 0] = 0; //@line 12467
     HEAP8[$30 >> 0] = 1; //@line 12468
     HEAP8[$31 >> 0] = 1; //@line 12469
     HEAP8[$32 >> 0] = 0; //@line 12470
     HEAP8[$33 >> 0] = 0; //@line 12471
     HEAP8[$34 >> 0] = 1; //@line 12472
     HEAP8[$35 >> 0] = 0; //@line 12473
     HEAP8[$35 + 1 >> 0] = 0; //@line 12473
     HEAP8[$35 + 2 >> 0] = 0; //@line 12473
     HEAP8[$35 + 3 >> 0] = 0; //@line 12473
     HEAP8[$35 + 4 >> 0] = 0; //@line 12473
     HEAP8[$35 + 5 >> 0] = 0; //@line 12473
     if (!(HEAP8[$1 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $36; //@line 12477
     } else {
      $$048$i = $1; //@line 12479
      $$sroa$0$0$in47$i = $36; //@line 12479
      while (1) {
       $81 = _strcspn($$048$i, 7296) | 0; //@line 12481
       $83 = $$sroa$0$0$in47$i + 1 | 0; //@line 12483
       HEAP8[$$sroa$0$0$in47$i >> 0] = $81; //@line 12484
       $84 = $81 & 255; //@line 12485
       _memcpy($83 | 0, $$048$i | 0, $84 | 0) | 0; //@line 12486
       $85 = $83 + $84 | 0; //@line 12487
       $$048$i = $$048$i + ($81 + ((HEAP8[$$048$i + $81 >> 0] | 0) == 46 & 1)) | 0; //@line 12493
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $85; //@line 12497
        break;
       } else {
        $$sroa$0$0$in47$i = $85; //@line 12500
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 12505
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 12507
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 12509
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 12511
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 12514
     $AsyncCtx9 = _emscripten_alloc_async_context(104, sp) | 0; //@line 12516
     $101 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $27, $$sroa$0$0$in$lcssa$i + 5 - $29 | 0) | 0; //@line 12517
     if (___async) {
      label = 20; //@line 12520
      break;
     }
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12523
     if (($101 | 0) < 0) {
      $$296$ph113 = $$094; //@line 12526
      $$393$ph114 = $$1105; //@line 12526
     } else {
      $130 = $$1105 + 1 << 24 >> 24; //@line 12528
      $131 = $$094 + -1 << 24 >> 24; //@line 12529
      $AsyncCtx6 = _emscripten_alloc_async_context(104, sp) | 0; //@line 12530
      $132 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $27, 512) | 0; //@line 12531
      if (___async) {
       label = 23; //@line 12534
       break;
      }
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12537
      if (($132 | 0) == -3001) {
       $$296$ph113 = $131; //@line 12540
       $$393$ph114 = $130; //@line 12540
      } else {
       if (($132 | 0) < 0) {
        $$4$ph = $132; //@line 12544
        label = 32; //@line 12545
        break;
       }
       $162 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($27, 1, $$byval_copy29, $2, $3) | 0; //@line 12548
       if (($162 | 0) > 0) {
        label = 27; //@line 12551
        break;
       }
       if (($162 | 0) >= 0) {
        $$170 = -3009; //@line 12556
        label = 31; //@line 12557
        break;
       }
       $$0 = $130; //@line 12560
       $$094 = $131; //@line 12560
       $$097 = $$3100; //@line 12560
       continue;
      }
     }
     $$0 = $$393$ph114; //@line 12565
     $$094 = $$296$ph113; //@line 12565
     $$097 = $$3100 + 1 << 24 >> 24; //@line 12565
    }
    do {
     if ((label | 0) == 14) {
      HEAP32[$AsyncCtx >> 2] = 155; //@line 12569
      HEAP8[$AsyncCtx + 4 >> 0] = $$1107; //@line 12571
      HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 12573
      HEAP8[$AsyncCtx + 12 >> 0] = $43; //@line 12575
      HEAP32[$AsyncCtx + 16 >> 2] = $27; //@line 12577
      HEAP32[$AsyncCtx + 20 >> 2] = $30; //@line 12579
      HEAP32[$AsyncCtx + 24 >> 2] = $31; //@line 12581
      HEAP32[$AsyncCtx + 28 >> 2] = $32; //@line 12583
      HEAP32[$AsyncCtx + 32 >> 2] = $33; //@line 12585
      HEAP32[$AsyncCtx + 36 >> 2] = $34; //@line 12587
      HEAP32[$AsyncCtx + 40 >> 2] = $35; //@line 12589
      HEAP32[$AsyncCtx + 44 >> 2] = $1; //@line 12591
      HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 12593
      HEAP32[$AsyncCtx + 52 >> 2] = $0; //@line 12595
      HEAP32[$AsyncCtx + 56 >> 2] = $36; //@line 12597
      HEAP8[$AsyncCtx + 60 >> 0] = $$sink$i; //@line 12599
      HEAP32[$AsyncCtx + 64 >> 2] = $29; //@line 12601
      HEAP32[$AsyncCtx + 68 >> 2] = $5; //@line 12603
      HEAP32[$AsyncCtx + 72 >> 2] = $5; //@line 12605
      HEAP8[$AsyncCtx + 76 >> 0] = $$094; //@line 12607
      HEAP32[$AsyncCtx + 80 >> 2] = $$byval_copy29; //@line 12609
      HEAP32[$AsyncCtx + 84 >> 2] = $2; //@line 12611
      HEAP32[$AsyncCtx + 88 >> 2] = $$byval_copy29; //@line 12613
      HEAP32[$AsyncCtx + 92 >> 2] = $3; //@line 12615
      HEAP32[$AsyncCtx + 96 >> 2] = $6; //@line 12617
      HEAP32[$AsyncCtx + 100 >> 2] = $5; //@line 12619
      HEAP32[$AsyncCtx + 104 >> 2] = $7; //@line 12621
      HEAP32[$AsyncCtx + 108 >> 2] = $7; //@line 12623
      sp = STACKTOP; //@line 12624
      STACKTOP = sp; //@line 12625
      return 0; //@line 12625
     } else if ((label | 0) == 20) {
      HEAP32[$AsyncCtx9 >> 2] = 156; //@line 12628
      HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 12630
      HEAP32[$AsyncCtx9 + 8 >> 2] = $27; //@line 12632
      HEAP32[$AsyncCtx9 + 12 >> 2] = $30; //@line 12634
      HEAP32[$AsyncCtx9 + 16 >> 2] = $31; //@line 12636
      HEAP32[$AsyncCtx9 + 20 >> 2] = $32; //@line 12638
      HEAP32[$AsyncCtx9 + 24 >> 2] = $33; //@line 12640
      HEAP32[$AsyncCtx9 + 28 >> 2] = $34; //@line 12642
      HEAP32[$AsyncCtx9 + 32 >> 2] = $35; //@line 12644
      HEAP32[$AsyncCtx9 + 36 >> 2] = $1; //@line 12646
      HEAP32[$AsyncCtx9 + 40 >> 2] = $0; //@line 12648
      HEAP32[$AsyncCtx9 + 44 >> 2] = $0; //@line 12650
      HEAP32[$AsyncCtx9 + 48 >> 2] = $36; //@line 12652
      HEAP8[$AsyncCtx9 + 52 >> 0] = $$sink$i; //@line 12654
      HEAP32[$AsyncCtx9 + 56 >> 2] = $29; //@line 12656
      HEAP32[$AsyncCtx9 + 60 >> 2] = $5; //@line 12658
      HEAP32[$AsyncCtx9 + 64 >> 2] = $5; //@line 12660
      HEAP32[$AsyncCtx9 + 68 >> 2] = $$byval_copy29; //@line 12662
      HEAP32[$AsyncCtx9 + 72 >> 2] = $2; //@line 12664
      HEAP32[$AsyncCtx9 + 76 >> 2] = $$byval_copy29; //@line 12666
      HEAP32[$AsyncCtx9 + 80 >> 2] = $3; //@line 12668
      HEAP32[$AsyncCtx9 + 84 >> 2] = $6; //@line 12670
      HEAP32[$AsyncCtx9 + 88 >> 2] = $5; //@line 12672
      HEAP32[$AsyncCtx9 + 92 >> 2] = $7; //@line 12674
      HEAP32[$AsyncCtx9 + 96 >> 2] = $7; //@line 12676
      HEAP8[$AsyncCtx9 + 100 >> 0] = $$3100; //@line 12678
      HEAP8[$AsyncCtx9 + 101 >> 0] = $$1105; //@line 12680
      HEAP8[$AsyncCtx9 + 102 >> 0] = $$094; //@line 12682
      sp = STACKTOP; //@line 12683
      STACKTOP = sp; //@line 12684
      return 0; //@line 12684
     } else if ((label | 0) == 23) {
      HEAP32[$AsyncCtx6 >> 2] = 157; //@line 12687
      HEAP32[$AsyncCtx6 + 4 >> 2] = $6; //@line 12689
      HEAP32[$AsyncCtx6 + 8 >> 2] = $27; //@line 12691
      HEAP32[$AsyncCtx6 + 12 >> 2] = $30; //@line 12693
      HEAP32[$AsyncCtx6 + 16 >> 2] = $31; //@line 12695
      HEAP32[$AsyncCtx6 + 20 >> 2] = $32; //@line 12697
      HEAP32[$AsyncCtx6 + 24 >> 2] = $33; //@line 12699
      HEAP32[$AsyncCtx6 + 28 >> 2] = $34; //@line 12701
      HEAP32[$AsyncCtx6 + 32 >> 2] = $35; //@line 12703
      HEAP32[$AsyncCtx6 + 36 >> 2] = $1; //@line 12705
      HEAP32[$AsyncCtx6 + 40 >> 2] = $0; //@line 12707
      HEAP32[$AsyncCtx6 + 44 >> 2] = $0; //@line 12709
      HEAP32[$AsyncCtx6 + 48 >> 2] = $36; //@line 12711
      HEAP8[$AsyncCtx6 + 52 >> 0] = $$sink$i; //@line 12713
      HEAP32[$AsyncCtx6 + 56 >> 2] = $29; //@line 12715
      HEAP32[$AsyncCtx6 + 60 >> 2] = $5; //@line 12717
      HEAP32[$AsyncCtx6 + 64 >> 2] = $5; //@line 12719
      HEAP32[$AsyncCtx6 + 68 >> 2] = $$byval_copy29; //@line 12721
      HEAP32[$AsyncCtx6 + 72 >> 2] = $2; //@line 12723
      HEAP32[$AsyncCtx6 + 76 >> 2] = $$byval_copy29; //@line 12725
      HEAP32[$AsyncCtx6 + 80 >> 2] = $3; //@line 12727
      HEAP32[$AsyncCtx6 + 84 >> 2] = $6; //@line 12729
      HEAP32[$AsyncCtx6 + 88 >> 2] = $5; //@line 12731
      HEAP32[$AsyncCtx6 + 92 >> 2] = $7; //@line 12733
      HEAP32[$AsyncCtx6 + 96 >> 2] = $7; //@line 12735
      HEAP8[$AsyncCtx6 + 100 >> 0] = $131; //@line 12737
      HEAP8[$AsyncCtx6 + 101 >> 0] = $130; //@line 12739
      HEAP8[$AsyncCtx6 + 102 >> 0] = $$3100; //@line 12741
      sp = STACKTOP; //@line 12742
      STACKTOP = sp; //@line 12743
      return 0; //@line 12743
     } else if ((label | 0) == 27) {
      $164 = HEAP32[$$byval_copy29 >> 2] | 0; //@line 12746
      $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 12747
      __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($1, $2, $164); //@line 12748
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 158; //@line 12751
       HEAP32[$AsyncCtx2 + 4 >> 2] = $162; //@line 12753
       HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy29; //@line 12755
       HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 12757
       HEAP32[$AsyncCtx2 + 16 >> 2] = $27; //@line 12759
       HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 12761
       HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 12763
       HEAP32[$AsyncCtx2 + 28 >> 2] = $5; //@line 12765
       sp = STACKTOP; //@line 12766
       STACKTOP = sp; //@line 12767
       return 0; //@line 12767
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12769
       $$170 = $162; //@line 12770
       label = 31; //@line 12771
       break;
      }
     } else if ((label | 0) == 32) {
      $$4110 = $$4$ph; //@line 12776
     }
    } while (0);
    if ((label | 0) == 31) {
     $$4110 = $$170; //@line 12780
    }
    _free($27); //@line 12782
    $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12783
    $174 = __ZN6Socket5closeEv($5) | 0; //@line 12784
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 159; //@line 12787
     HEAP32[$AsyncCtx17 + 4 >> 2] = $$4110; //@line 12789
     HEAP32[$AsyncCtx17 + 8 >> 2] = $5; //@line 12791
     HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 12793
     sp = STACKTOP; //@line 12794
     STACKTOP = sp; //@line 12795
     return 0; //@line 12795
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 12797
     $$2 = ($174 | 0) == 0 ? $$4110 : $174; //@line 12800
     break;
    }
   }
  } else {
   $$2 = $14; //@line 12805
  }
 } while (0);
 $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12808
 __ZN9UDPSocketD2Ev($5); //@line 12809
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 160; //@line 12812
  HEAP32[$AsyncCtx13 + 4 >> 2] = $5; //@line 12814
  HEAP32[$AsyncCtx13 + 8 >> 2] = $$2; //@line 12816
  sp = STACKTOP; //@line 12817
  STACKTOP = sp; //@line 12818
  return 0; //@line 12818
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12820
 $$3 = $$2; //@line 12821
 STACKTOP = sp; //@line 12822
 return $$3 | 0; //@line 12822
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 22643
 $3 = HEAP32[2536] | 0; //@line 22644
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 22647
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 22651
 $7 = $6 & 3; //@line 22652
 if (($7 | 0) == 1) {
  _abort(); //@line 22655
 }
 $9 = $6 & -8; //@line 22658
 $10 = $2 + $9 | 0; //@line 22659
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 22664
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 22670
   $17 = $13 + $9 | 0; //@line 22671
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 22674
   }
   if ((HEAP32[2537] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 22680
    $106 = HEAP32[$105 >> 2] | 0; //@line 22681
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 22685
     $$1382 = $17; //@line 22685
     $114 = $16; //@line 22685
     break;
    }
    HEAP32[2534] = $17; //@line 22688
    HEAP32[$105 >> 2] = $106 & -2; //@line 22690
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 22693
    HEAP32[$16 + $17 >> 2] = $17; //@line 22695
    return;
   }
   $21 = $13 >>> 3; //@line 22698
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 22702
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 22704
    $28 = 10168 + ($21 << 1 << 2) | 0; //@line 22706
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 22711
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 22718
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[2532] = HEAP32[2532] & ~(1 << $21); //@line 22728
     $$1 = $16; //@line 22729
     $$1382 = $17; //@line 22729
     $114 = $16; //@line 22729
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 22735
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 22739
     }
     $41 = $26 + 8 | 0; //@line 22742
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 22746
     } else {
      _abort(); //@line 22748
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 22753
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 22754
    $$1 = $16; //@line 22755
    $$1382 = $17; //@line 22755
    $114 = $16; //@line 22755
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 22759
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 22761
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 22765
     $60 = $59 + 4 | 0; //@line 22766
     $61 = HEAP32[$60 >> 2] | 0; //@line 22767
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 22770
      if (!$63) {
       $$3 = 0; //@line 22773
       break;
      } else {
       $$1387 = $63; //@line 22776
       $$1390 = $59; //@line 22776
      }
     } else {
      $$1387 = $61; //@line 22779
      $$1390 = $60; //@line 22779
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 22782
      $66 = HEAP32[$65 >> 2] | 0; //@line 22783
      if ($66 | 0) {
       $$1387 = $66; //@line 22786
       $$1390 = $65; //@line 22786
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 22789
      $69 = HEAP32[$68 >> 2] | 0; //@line 22790
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 22795
       $$1390 = $68; //@line 22795
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 22800
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 22803
      $$3 = $$1387; //@line 22804
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 22809
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 22812
     }
     $53 = $51 + 12 | 0; //@line 22815
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 22819
     }
     $56 = $48 + 8 | 0; //@line 22822
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 22826
      HEAP32[$56 >> 2] = $51; //@line 22827
      $$3 = $48; //@line 22828
      break;
     } else {
      _abort(); //@line 22831
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 22838
    $$1382 = $17; //@line 22838
    $114 = $16; //@line 22838
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 22841
    $75 = 10432 + ($74 << 2) | 0; //@line 22842
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 22847
      if (!$$3) {
       HEAP32[2533] = HEAP32[2533] & ~(1 << $74); //@line 22854
       $$1 = $16; //@line 22855
       $$1382 = $17; //@line 22855
       $114 = $16; //@line 22855
       break L10;
      }
     } else {
      if ((HEAP32[2536] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 22862
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 22870
       if (!$$3) {
        $$1 = $16; //@line 22873
        $$1382 = $17; //@line 22873
        $114 = $16; //@line 22873
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[2536] | 0; //@line 22881
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 22884
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 22888
    $92 = $16 + 16 | 0; //@line 22889
    $93 = HEAP32[$92 >> 2] | 0; //@line 22890
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 22896
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 22900
       HEAP32[$93 + 24 >> 2] = $$3; //@line 22902
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 22908
    if (!$99) {
     $$1 = $16; //@line 22911
     $$1382 = $17; //@line 22911
     $114 = $16; //@line 22911
    } else {
     if ((HEAP32[2536] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 22916
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 22920
      HEAP32[$99 + 24 >> 2] = $$3; //@line 22922
      $$1 = $16; //@line 22923
      $$1382 = $17; //@line 22923
      $114 = $16; //@line 22923
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 22929
   $$1382 = $9; //@line 22929
   $114 = $2; //@line 22929
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 22934
 }
 $115 = $10 + 4 | 0; //@line 22937
 $116 = HEAP32[$115 >> 2] | 0; //@line 22938
 if (!($116 & 1)) {
  _abort(); //@line 22942
 }
 if (!($116 & 2)) {
  if ((HEAP32[2538] | 0) == ($10 | 0)) {
   $124 = (HEAP32[2535] | 0) + $$1382 | 0; //@line 22952
   HEAP32[2535] = $124; //@line 22953
   HEAP32[2538] = $$1; //@line 22954
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 22957
   if (($$1 | 0) != (HEAP32[2537] | 0)) {
    return;
   }
   HEAP32[2537] = 0; //@line 22963
   HEAP32[2534] = 0; //@line 22964
   return;
  }
  if ((HEAP32[2537] | 0) == ($10 | 0)) {
   $132 = (HEAP32[2534] | 0) + $$1382 | 0; //@line 22971
   HEAP32[2534] = $132; //@line 22972
   HEAP32[2537] = $114; //@line 22973
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 22976
   HEAP32[$114 + $132 >> 2] = $132; //@line 22978
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 22982
  $138 = $116 >>> 3; //@line 22983
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 22988
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 22990
    $145 = 10168 + ($138 << 1 << 2) | 0; //@line 22992
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[2536] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 22998
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 23005
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[2532] = HEAP32[2532] & ~(1 << $138); //@line 23015
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 23021
    } else {
     if ((HEAP32[2536] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 23026
     }
     $160 = $143 + 8 | 0; //@line 23029
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 23033
     } else {
      _abort(); //@line 23035
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 23040
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 23041
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 23044
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 23046
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 23050
      $180 = $179 + 4 | 0; //@line 23051
      $181 = HEAP32[$180 >> 2] | 0; //@line 23052
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 23055
       if (!$183) {
        $$3400 = 0; //@line 23058
        break;
       } else {
        $$1398 = $183; //@line 23061
        $$1402 = $179; //@line 23061
       }
      } else {
       $$1398 = $181; //@line 23064
       $$1402 = $180; //@line 23064
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 23067
       $186 = HEAP32[$185 >> 2] | 0; //@line 23068
       if ($186 | 0) {
        $$1398 = $186; //@line 23071
        $$1402 = $185; //@line 23071
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 23074
       $189 = HEAP32[$188 >> 2] | 0; //@line 23075
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 23080
        $$1402 = $188; //@line 23080
       }
      }
      if ((HEAP32[2536] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 23086
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 23089
       $$3400 = $$1398; //@line 23090
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 23095
      if ((HEAP32[2536] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 23099
      }
      $173 = $170 + 12 | 0; //@line 23102
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 23106
      }
      $176 = $167 + 8 | 0; //@line 23109
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 23113
       HEAP32[$176 >> 2] = $170; //@line 23114
       $$3400 = $167; //@line 23115
       break;
      } else {
       _abort(); //@line 23118
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 23126
     $196 = 10432 + ($195 << 2) | 0; //@line 23127
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 23132
       if (!$$3400) {
        HEAP32[2533] = HEAP32[2533] & ~(1 << $195); //@line 23139
        break L108;
       }
      } else {
       if ((HEAP32[2536] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 23146
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 23154
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[2536] | 0; //@line 23164
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 23167
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 23171
     $213 = $10 + 16 | 0; //@line 23172
     $214 = HEAP32[$213 >> 2] | 0; //@line 23173
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 23179
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 23183
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 23185
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 23191
     if ($220 | 0) {
      if ((HEAP32[2536] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 23197
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 23201
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 23203
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 23212
  HEAP32[$114 + $137 >> 2] = $137; //@line 23214
  if (($$1 | 0) == (HEAP32[2537] | 0)) {
   HEAP32[2534] = $137; //@line 23218
   return;
  } else {
   $$2 = $137; //@line 23221
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 23225
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 23228
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 23230
  $$2 = $$1382; //@line 23231
 }
 $235 = $$2 >>> 3; //@line 23233
 if ($$2 >>> 0 < 256) {
  $238 = 10168 + ($235 << 1 << 2) | 0; //@line 23237
  $239 = HEAP32[2532] | 0; //@line 23238
  $240 = 1 << $235; //@line 23239
  if (!($239 & $240)) {
   HEAP32[2532] = $239 | $240; //@line 23244
   $$0403 = $238; //@line 23246
   $$pre$phiZ2D = $238 + 8 | 0; //@line 23246
  } else {
   $244 = $238 + 8 | 0; //@line 23248
   $245 = HEAP32[$244 >> 2] | 0; //@line 23249
   if ((HEAP32[2536] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 23253
   } else {
    $$0403 = $245; //@line 23256
    $$pre$phiZ2D = $244; //@line 23256
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 23259
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 23261
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 23263
  HEAP32[$$1 + 12 >> 2] = $238; //@line 23265
  return;
 }
 $251 = $$2 >>> 8; //@line 23268
 if (!$251) {
  $$0396 = 0; //@line 23271
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 23275
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 23279
   $257 = $251 << $256; //@line 23280
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 23283
   $262 = $257 << $260; //@line 23285
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 23288
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 23293
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 23299
  }
 }
 $276 = 10432 + ($$0396 << 2) | 0; //@line 23302
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 23304
 HEAP32[$$1 + 20 >> 2] = 0; //@line 23307
 HEAP32[$$1 + 16 >> 2] = 0; //@line 23308
 $280 = HEAP32[2533] | 0; //@line 23309
 $281 = 1 << $$0396; //@line 23310
 do {
  if (!($280 & $281)) {
   HEAP32[2533] = $280 | $281; //@line 23316
   HEAP32[$276 >> 2] = $$1; //@line 23317
   HEAP32[$$1 + 24 >> 2] = $276; //@line 23319
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 23321
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 23323
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 23331
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 23331
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 23338
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 23342
    $301 = HEAP32[$299 >> 2] | 0; //@line 23344
    if (!$301) {
     label = 121; //@line 23347
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 23350
     $$0384 = $301; //@line 23350
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[2536] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 23357
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 23360
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 23362
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 23364
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 23366
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 23371
    $309 = HEAP32[$308 >> 2] | 0; //@line 23372
    $310 = HEAP32[2536] | 0; //@line 23373
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 23379
     HEAP32[$308 >> 2] = $$1; //@line 23380
     HEAP32[$$1 + 8 >> 2] = $309; //@line 23382
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 23384
     HEAP32[$$1 + 24 >> 2] = 0; //@line 23386
     break;
    } else {
     _abort(); //@line 23389
    }
   }
  }
 } while (0);
 $319 = (HEAP32[2540] | 0) + -1 | 0; //@line 23396
 HEAP32[2540] = $319; //@line 23397
 if (!$319) {
  $$0212$in$i = 10584; //@line 23400
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 23405
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 23411
  }
 }
 HEAP32[2540] = -1; //@line 23414
 return;
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 23946
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 23948
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 23953
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 23960
   $12 = $7 + $1 | 0; //@line 23961
   $13 = HEAP32[2536] | 0; //@line 23962
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 23965
   }
   if ((HEAP32[2537] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 23971
    $102 = HEAP32[$101 >> 2] | 0; //@line 23972
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 23976
     $$1418 = $12; //@line 23976
     break;
    }
    HEAP32[2534] = $12; //@line 23979
    HEAP32[$101 >> 2] = $102 & -2; //@line 23981
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 23984
    HEAP32[$2 >> 2] = $12; //@line 23985
    return;
   }
   $17 = $7 >>> 3; //@line 23988
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 23992
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 23994
    $24 = 10168 + ($17 << 1 << 2) | 0; //@line 23996
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 24001
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 24008
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[2532] = HEAP32[2532] & ~(1 << $17); //@line 24018
     $$1 = $11; //@line 24019
     $$1418 = $12; //@line 24019
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 24025
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 24029
     }
     $37 = $22 + 8 | 0; //@line 24032
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 24036
     } else {
      _abort(); //@line 24038
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 24043
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 24044
    $$1 = $11; //@line 24045
    $$1418 = $12; //@line 24045
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 24049
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 24051
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 24055
     $56 = $55 + 4 | 0; //@line 24056
     $57 = HEAP32[$56 >> 2] | 0; //@line 24057
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 24060
      if (!$59) {
       $$3 = 0; //@line 24063
       break;
      } else {
       $$1426 = $59; //@line 24066
       $$1429 = $55; //@line 24066
      }
     } else {
      $$1426 = $57; //@line 24069
      $$1429 = $56; //@line 24069
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 24072
      $62 = HEAP32[$61 >> 2] | 0; //@line 24073
      if ($62 | 0) {
       $$1426 = $62; //@line 24076
       $$1429 = $61; //@line 24076
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 24079
      $65 = HEAP32[$64 >> 2] | 0; //@line 24080
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 24085
       $$1429 = $64; //@line 24085
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 24090
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 24093
      $$3 = $$1426; //@line 24094
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 24099
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 24102
     }
     $49 = $47 + 12 | 0; //@line 24105
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 24109
     }
     $52 = $44 + 8 | 0; //@line 24112
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 24116
      HEAP32[$52 >> 2] = $47; //@line 24117
      $$3 = $44; //@line 24118
      break;
     } else {
      _abort(); //@line 24121
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 24128
    $$1418 = $12; //@line 24128
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 24131
    $71 = 10432 + ($70 << 2) | 0; //@line 24132
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 24137
      if (!$$3) {
       HEAP32[2533] = HEAP32[2533] & ~(1 << $70); //@line 24144
       $$1 = $11; //@line 24145
       $$1418 = $12; //@line 24145
       break L1;
      }
     } else {
      if ((HEAP32[2536] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 24152
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 24160
       if (!$$3) {
        $$1 = $11; //@line 24163
        $$1418 = $12; //@line 24163
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[2536] | 0; //@line 24171
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 24174
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 24178
    $88 = $11 + 16 | 0; //@line 24179
    $89 = HEAP32[$88 >> 2] | 0; //@line 24180
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 24186
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 24190
       HEAP32[$89 + 24 >> 2] = $$3; //@line 24192
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 24198
    if (!$95) {
     $$1 = $11; //@line 24201
     $$1418 = $12; //@line 24201
    } else {
     if ((HEAP32[2536] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 24206
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 24210
      HEAP32[$95 + 24 >> 2] = $$3; //@line 24212
      $$1 = $11; //@line 24213
      $$1418 = $12; //@line 24213
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 24219
   $$1418 = $1; //@line 24219
  }
 } while (0);
 $108 = HEAP32[2536] | 0; //@line 24222
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 24225
 }
 $110 = $2 + 4 | 0; //@line 24228
 $111 = HEAP32[$110 >> 2] | 0; //@line 24229
 if (!($111 & 2)) {
  if ((HEAP32[2538] | 0) == ($2 | 0)) {
   $117 = (HEAP32[2535] | 0) + $$1418 | 0; //@line 24237
   HEAP32[2535] = $117; //@line 24238
   HEAP32[2538] = $$1; //@line 24239
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 24242
   if (($$1 | 0) != (HEAP32[2537] | 0)) {
    return;
   }
   HEAP32[2537] = 0; //@line 24248
   HEAP32[2534] = 0; //@line 24249
   return;
  }
  if ((HEAP32[2537] | 0) == ($2 | 0)) {
   $125 = (HEAP32[2534] | 0) + $$1418 | 0; //@line 24256
   HEAP32[2534] = $125; //@line 24257
   HEAP32[2537] = $$1; //@line 24258
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 24261
   HEAP32[$$1 + $125 >> 2] = $125; //@line 24263
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 24267
  $131 = $111 >>> 3; //@line 24268
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 24273
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 24275
    $138 = 10168 + ($131 << 1 << 2) | 0; //@line 24277
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 24282
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 24289
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[2532] = HEAP32[2532] & ~(1 << $131); //@line 24299
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 24305
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 24309
     }
     $151 = $136 + 8 | 0; //@line 24312
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 24316
     } else {
      _abort(); //@line 24318
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 24323
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 24324
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 24327
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 24329
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 24333
      $170 = $169 + 4 | 0; //@line 24334
      $171 = HEAP32[$170 >> 2] | 0; //@line 24335
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 24338
       if (!$173) {
        $$3435 = 0; //@line 24341
        break;
       } else {
        $$1433 = $173; //@line 24344
        $$1437 = $169; //@line 24344
       }
      } else {
       $$1433 = $171; //@line 24347
       $$1437 = $170; //@line 24347
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 24350
       $176 = HEAP32[$175 >> 2] | 0; //@line 24351
       if ($176 | 0) {
        $$1433 = $176; //@line 24354
        $$1437 = $175; //@line 24354
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 24357
       $179 = HEAP32[$178 >> 2] | 0; //@line 24358
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 24363
        $$1437 = $178; //@line 24363
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 24368
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 24371
       $$3435 = $$1433; //@line 24372
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 24377
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 24380
      }
      $163 = $161 + 12 | 0; //@line 24383
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 24387
      }
      $166 = $158 + 8 | 0; //@line 24390
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 24394
       HEAP32[$166 >> 2] = $161; //@line 24395
       $$3435 = $158; //@line 24396
       break;
      } else {
       _abort(); //@line 24399
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 24407
     $185 = 10432 + ($184 << 2) | 0; //@line 24408
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 24413
       if (!$$3435) {
        HEAP32[2533] = HEAP32[2533] & ~(1 << $184); //@line 24420
        break L96;
       }
      } else {
       if ((HEAP32[2536] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 24427
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 24435
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[2536] | 0; //@line 24445
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 24448
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 24452
     $202 = $2 + 16 | 0; //@line 24453
     $203 = HEAP32[$202 >> 2] | 0; //@line 24454
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 24460
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 24464
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 24466
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 24472
     if ($209 | 0) {
      if ((HEAP32[2536] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 24478
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 24482
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 24484
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 24493
  HEAP32[$$1 + $130 >> 2] = $130; //@line 24495
  if (($$1 | 0) == (HEAP32[2537] | 0)) {
   HEAP32[2534] = $130; //@line 24499
   return;
  } else {
   $$2 = $130; //@line 24502
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 24506
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 24509
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 24511
  $$2 = $$1418; //@line 24512
 }
 $224 = $$2 >>> 3; //@line 24514
 if ($$2 >>> 0 < 256) {
  $227 = 10168 + ($224 << 1 << 2) | 0; //@line 24518
  $228 = HEAP32[2532] | 0; //@line 24519
  $229 = 1 << $224; //@line 24520
  if (!($228 & $229)) {
   HEAP32[2532] = $228 | $229; //@line 24525
   $$0438 = $227; //@line 24527
   $$pre$phiZ2D = $227 + 8 | 0; //@line 24527
  } else {
   $233 = $227 + 8 | 0; //@line 24529
   $234 = HEAP32[$233 >> 2] | 0; //@line 24530
   if ((HEAP32[2536] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 24534
   } else {
    $$0438 = $234; //@line 24537
    $$pre$phiZ2D = $233; //@line 24537
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 24540
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 24542
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 24544
  HEAP32[$$1 + 12 >> 2] = $227; //@line 24546
  return;
 }
 $240 = $$2 >>> 8; //@line 24549
 if (!$240) {
  $$0431 = 0; //@line 24552
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 24556
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 24560
   $246 = $240 << $245; //@line 24561
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 24564
   $251 = $246 << $249; //@line 24566
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 24569
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 24574
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 24580
  }
 }
 $265 = 10432 + ($$0431 << 2) | 0; //@line 24583
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 24585
 HEAP32[$$1 + 20 >> 2] = 0; //@line 24588
 HEAP32[$$1 + 16 >> 2] = 0; //@line 24589
 $269 = HEAP32[2533] | 0; //@line 24590
 $270 = 1 << $$0431; //@line 24591
 if (!($269 & $270)) {
  HEAP32[2533] = $269 | $270; //@line 24596
  HEAP32[$265 >> 2] = $$1; //@line 24597
  HEAP32[$$1 + 24 >> 2] = $265; //@line 24599
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 24601
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 24603
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 24612
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 24612
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 24619
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 24623
  $290 = HEAP32[$288 >> 2] | 0; //@line 24625
  if (!$290) {
   label = 118; //@line 24628
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 24631
   $$0420 = $290; //@line 24631
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[2536] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 24638
  }
  HEAP32[$288 >> 2] = $$1; //@line 24641
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 24643
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 24645
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 24647
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 24651
  $298 = HEAP32[$297 >> 2] | 0; //@line 24652
  $299 = HEAP32[2536] | 0; //@line 24653
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 24658
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 24662
  HEAP32[$297 >> 2] = $$1; //@line 24663
  HEAP32[$$1 + 8 >> 2] = $298; //@line 24665
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 24667
  HEAP32[$$1 + 24 >> 2] = 0; //@line 24669
  return;
 }
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $263 = 0, $265 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 387
   $289 = 0; //@line 388
   $290 = 0; //@line 388
  } else {
   $6 = $0 + 4 | 0; //@line 390
   $7 = $0 + 100 | 0; //@line 391
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 393
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 398
     $16 = HEAPU8[$9 >> 0] | 0; //@line 401
    } else {
     $16 = ___shgetc($0) | 0; //@line 404
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 416
      $21 = HEAP32[$6 >> 2] | 0; //@line 417
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 422
       $$0157 = $20; //@line 425
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 425
       break L11;
      } else {
       $$0157 = $20; //@line 429
       $$0159 = ___shgetc($0) | 0; //@line 429
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 435
      $$0159 = $16; //@line 435
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 439
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 446
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 451
      $40 = HEAPU8[$32 >> 0] | 0; //@line 454
     } else {
      $40 = ___shgetc($0) | 0; //@line 457
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 463
       $$1165167 = 8; //@line 463
       label = 46; //@line 464
       break;
      } else {
       $$1160 = $40; //@line 467
       $$1165 = $1; //@line 467
       label = 32; //@line 468
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 472
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 477
      $50 = HEAPU8[$42 >> 0] | 0; //@line 480
     } else {
      $50 = ___shgetc($0) | 0; //@line 483
     }
     if ((HEAPU8[6499 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 490
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 494
      }
      if (!$2) {
       ___shlim($0, 0); //@line 498
       $289 = 0; //@line 499
       $290 = 0; //@line 499
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 503
       $290 = 0; //@line 503
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 508
      $289 = 0; //@line 509
      $290 = 0; //@line 509
      break L1;
     } else {
      $$1160169 = $50; //@line 512
      $$1165167 = 16; //@line 512
      label = 46; //@line 513
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 516
     if ($$166 >>> 0 > (HEAPU8[6499 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 522
      $$1165 = $$166; //@line 522
      label = 32; //@line 523
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 530
      }
      ___shlim($0, 0); //@line 532
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 534
      $289 = 0; //@line 535
      $290 = 0; //@line 535
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 544
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 547
       $74 = $70; //@line 547
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 550
        $75 = HEAP32[$6 >> 2] | 0; //@line 551
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 556
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 559
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 562
        }
        $74 = $$2161$be + -48 | 0; //@line 564
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 574
       $291 = $$0154222; //@line 574
       $292 = 0; //@line 574
      } else {
       $$2161$lcssa = $$1160; //@line 576
       $291 = 0; //@line 576
       $292 = 0; //@line 576
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 578
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 581
       $88 = $291; //@line 581
       $89 = $292; //@line 581
       $93 = $86; //@line 581
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 583
        $91 = tempRet0; //@line 584
        $94 = (($93 | 0) < 0) << 31 >> 31; //@line 586
        $96 = ~$94; //@line 588
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
         $$1165168 = 10; //@line 595
         $$8 = $$3162215; //@line 595
         $293 = $88; //@line 595
         $294 = $89; //@line 595
         label = 72; //@line 596
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0; //@line 599
        $89 = tempRet0; //@line 600
        $104 = HEAP32[$6 >> 2] | 0; //@line 601
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 606
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 609
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 612
        }
        $93 = $$3162$be + -48 | 0; //@line 614
        if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 623
        }
       }
       if ($93 >>> 0 > 9) {
        $$1158 = $$0157; //@line 630
        $263 = $89; //@line 630
        $265 = $88; //@line 630
       } else {
        $$1165168 = 10; //@line 632
        $$8 = $$3162$be; //@line 632
        $293 = $88; //@line 632
        $294 = $89; //@line 632
        label = 72; //@line 633
       }
      } else {
       $$1158 = $$0157; //@line 636
       $263 = $292; //@line 636
       $265 = $291; //@line 636
      }
     } else {
      $$1160169 = $$1160; //@line 639
      $$1165167 = $$1165; //@line 639
      label = 46; //@line 640
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[6755 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 655
      $133 = HEAP8[6499 + $$1160169 >> 0] | 0; //@line 657
      $134 = $133 & 255; //@line 658
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 661
       $138 = $134; //@line 661
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 664
        $139 = HEAP32[$6 >> 2] | 0; //@line 665
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 670
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 673
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 676
        }
        $147 = HEAP8[6499 + $$4163$be >> 0] | 0; //@line 679
        $138 = $147 & 255; //@line 680
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 690
       $155 = $147; //@line 690
       $158 = 0; //@line 690
       $160 = $$1155192; //@line 690
      } else {
       $$4163$lcssa = $$1160169; //@line 692
       $155 = $133; //@line 692
       $158 = 0; //@line 692
       $160 = 0; //@line 692
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 694
      $153 = tempRet0; //@line 695
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 705
       $$8 = $$4163$lcssa; //@line 705
       $293 = $160; //@line 705
       $294 = $158; //@line 705
       label = 72; //@line 706
       break;
      } else {
       $164 = $160; //@line 709
       $165 = $158; //@line 709
       $169 = $155; //@line 709
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 712
       $167 = tempRet0; //@line 713
       $170 = $166 | $169 & 255; //@line 715
       $171 = HEAP32[$6 >> 2] | 0; //@line 716
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 721
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 724
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 727
       }
       $169 = HEAP8[6499 + $$5$be >> 0] | 0; //@line 730
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 740
        $$8 = $$5$be; //@line 740
        $293 = $170; //@line 740
        $294 = $167; //@line 740
        label = 72; //@line 741
        break L63;
       } else {
        $164 = $170; //@line 744
        $165 = $167; //@line 744
       }
      }
     }
     $123 = HEAP8[6499 + $$1160169 >> 0] | 0; //@line 749
     $124 = $123 & 255; //@line 750
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 753
      $189 = $124; //@line 753
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 756
       $190 = HEAP32[$6 >> 2] | 0; //@line 757
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 762
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 765
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 768
       }
       $198 = HEAP8[6499 + $$6$be >> 0] | 0; //@line 771
       $189 = $198 & 255; //@line 772
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 782
      $204 = $198; //@line 782
      $295 = $$2156210; //@line 782
      $296 = 0; //@line 782
     } else {
      $$6$lcssa = $$1160169; //@line 784
      $204 = $123; //@line 784
      $295 = 0; //@line 784
      $296 = 0; //@line 784
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 789
      $207 = tempRet0; //@line 790
      $$7198 = $$6$lcssa; //@line 791
      $209 = $296; //@line 791
      $211 = $295; //@line 791
      $218 = $204; //@line 791
      while (1) {
       if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 799
        $$8 = $$7198; //@line 799
        $293 = $211; //@line 799
        $294 = $209; //@line 799
        label = 72; //@line 800
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0; //@line 803
       $216 = tempRet0; //@line 804
       $217 = $218 & 255; //@line 805
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 813
        $$8 = $$7198; //@line 813
        $293 = $211; //@line 813
        $294 = $209; //@line 813
        label = 72; //@line 814
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 817
       $226 = tempRet0; //@line 818
       $227 = HEAP32[$6 >> 2] | 0; //@line 819
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 824
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 827
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 830
       }
       $218 = HEAP8[6499 + $$7$be >> 0] | 0; //@line 833
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 839
        $$8 = $$7$be; //@line 839
        $293 = $225; //@line 839
        $294 = $226; //@line 839
        label = 72; //@line 840
        break;
       } else {
        $$7198 = $$7$be; //@line 837
        $209 = $226; //@line 837
        $211 = $225; //@line 837
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 845
      $$8 = $$6$lcssa; //@line 845
      $293 = $295; //@line 845
      $294 = $296; //@line 845
      label = 72; //@line 846
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[6499 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 857
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 862
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 865
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 868
      }
     } while ($$1165168 >>> 0 > (HEAPU8[6499 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 879
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 885
     $263 = $4; //@line 885
     $265 = $3; //@line 885
    } else {
     $$1158 = $$0157; //@line 887
     $263 = $294; //@line 887
     $265 = $293; //@line 887
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 895
   }
   if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 911
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 912
     $289 = tempRet0; //@line 914
     $290 = $275; //@line 914
     break;
    }
    if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 924
     $289 = $4; //@line 925
     $290 = $3; //@line 925
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 930
   $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 933
   $289 = tempRet0; //@line 935
   $290 = $287; //@line 935
  }
 } while (0);
 tempRet0 = $289; //@line 938
 return $290 | 0; //@line 939
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_210($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $12 = 0, $123 = 0, $126 = 0, $128 = 0, $136 = 0, $139 = 0, $14 = 0, $141 = 0, $149 = 0, $152 = 0, $154 = 0, $16 = 0, $167 = 0, $168 = 0, $169 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $57 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30328
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30330
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30332
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30334
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30336
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30338
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30340
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30342
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30344
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30346
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30348
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30350
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30352
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30354
 $27 = $12 + 12 | 0; //@line 30355
 $28 = HEAP32[$27 >> 2] | 0; //@line 30356
 if ($28 | 0) {
  $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 30360
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 30361
  FUNCTION_TABLE_vii[$31 & 7]($16, $12); //@line 30362
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 30365
   $32 = $ReallocAsyncCtx5 + 4 | 0; //@line 30366
   HEAP32[$32 >> 2] = $2; //@line 30367
   $33 = $ReallocAsyncCtx5 + 8 | 0; //@line 30368
   HEAP32[$33 >> 2] = $4; //@line 30369
   $34 = $ReallocAsyncCtx5 + 12 | 0; //@line 30370
   HEAP32[$34 >> 2] = $6; //@line 30371
   $35 = $ReallocAsyncCtx5 + 16 | 0; //@line 30372
   HEAP32[$35 >> 2] = $8; //@line 30373
   $36 = $ReallocAsyncCtx5 + 20 | 0; //@line 30374
   HEAP32[$36 >> 2] = $10; //@line 30375
   $37 = $ReallocAsyncCtx5 + 24 | 0; //@line 30376
   HEAP32[$37 >> 2] = $14; //@line 30377
   $38 = $ReallocAsyncCtx5 + 28 | 0; //@line 30378
   HEAP32[$38 >> 2] = $18; //@line 30379
   $39 = $ReallocAsyncCtx5 + 32 | 0; //@line 30380
   HEAP32[$39 >> 2] = $20; //@line 30381
   $40 = $ReallocAsyncCtx5 + 36 | 0; //@line 30382
   HEAP32[$40 >> 2] = $27; //@line 30383
   $41 = $ReallocAsyncCtx5 + 40 | 0; //@line 30384
   HEAP32[$41 >> 2] = $16; //@line 30385
   $42 = $ReallocAsyncCtx5 + 44 | 0; //@line 30386
   HEAP32[$42 >> 2] = $22; //@line 30387
   $43 = $ReallocAsyncCtx5 + 48 | 0; //@line 30388
   HEAP32[$43 >> 2] = $24; //@line 30389
   $44 = $ReallocAsyncCtx5 + 52 | 0; //@line 30390
   HEAP32[$44 >> 2] = $26; //@line 30391
   sp = STACKTOP; //@line 30392
   return;
  }
  ___async_unwind = 0; //@line 30395
  HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 30396
  $32 = $ReallocAsyncCtx5 + 4 | 0; //@line 30397
  HEAP32[$32 >> 2] = $2; //@line 30398
  $33 = $ReallocAsyncCtx5 + 8 | 0; //@line 30399
  HEAP32[$33 >> 2] = $4; //@line 30400
  $34 = $ReallocAsyncCtx5 + 12 | 0; //@line 30401
  HEAP32[$34 >> 2] = $6; //@line 30402
  $35 = $ReallocAsyncCtx5 + 16 | 0; //@line 30403
  HEAP32[$35 >> 2] = $8; //@line 30404
  $36 = $ReallocAsyncCtx5 + 20 | 0; //@line 30405
  HEAP32[$36 >> 2] = $10; //@line 30406
  $37 = $ReallocAsyncCtx5 + 24 | 0; //@line 30407
  HEAP32[$37 >> 2] = $14; //@line 30408
  $38 = $ReallocAsyncCtx5 + 28 | 0; //@line 30409
  HEAP32[$38 >> 2] = $18; //@line 30410
  $39 = $ReallocAsyncCtx5 + 32 | 0; //@line 30411
  HEAP32[$39 >> 2] = $20; //@line 30412
  $40 = $ReallocAsyncCtx5 + 36 | 0; //@line 30413
  HEAP32[$40 >> 2] = $27; //@line 30414
  $41 = $ReallocAsyncCtx5 + 40 | 0; //@line 30415
  HEAP32[$41 >> 2] = $16; //@line 30416
  $42 = $ReallocAsyncCtx5 + 44 | 0; //@line 30417
  HEAP32[$42 >> 2] = $22; //@line 30418
  $43 = $ReallocAsyncCtx5 + 48 | 0; //@line 30419
  HEAP32[$43 >> 2] = $24; //@line 30420
  $44 = $ReallocAsyncCtx5 + 52 | 0; //@line 30421
  HEAP32[$44 >> 2] = $26; //@line 30422
  sp = STACKTOP; //@line 30423
  return;
 }
 HEAP32[$14 >> 2] = 0; //@line 30426
 HEAP32[$2 + 8 >> 2] = $4; //@line 30428
 HEAP32[$2 + 48 >> 2] = $6; //@line 30430
 HEAP32[$2 + 52 >> 2] = $8; //@line 30432
 $48 = $2 + 56 | 0; //@line 30433
 HEAP32[$48 >> 2] = 0; //@line 30434
 $49 = $2 + 60 | 0; //@line 30435
 HEAP32[$49 >> 2] = 0; //@line 30436
 HEAP32[$2 + 64 >> 2] = 0; //@line 30438
 HEAP8[$2 + 82 >> 0] = 0; //@line 30440
 HEAP8[$2 + 83 >> 0] = 1; //@line 30442
 HEAP8[$2 + 84 >> 0] = 3; //@line 30444
 HEAP8[$2 + 85 >> 0] = 0; //@line 30446
 HEAP16[$2 + 80 >> 1] = 0; //@line 30448
 HEAP32[$2 + 76 >> 2] = 0; //@line 30450
 $57 = $2 + 72 | 0; //@line 30451
 HEAP32[$57 >> 2] = 15500; //@line 30452
 HEAP8[$2 + 86 >> 0] = 0; //@line 30454
 HEAP32[$2 + 88 >> 2] = 0; //@line 30456
 $60 = HEAP32[177] | 0; //@line 30457
 HEAP32[177] = $60 + 1; //@line 30459
 HEAP32[$2 >> 2] = ($60 | 0) > 32767 ? 1 : $60; //@line 30462
 $63 = HEAP32[2509] | 0; //@line 30463
 if (!$63) {
  $$1 = 0; //@line 30466
  $113 = 0; //@line 30466
 } else {
  $66 = HEAP32[$63 + 56 >> 2] | 0; //@line 30469
  if (!$66) {
   $$1 = 1; //@line 30472
   $113 = 0; //@line 30472
  } else {
   if ((HEAP32[$63 + 8 >> 2] | 0) == ($4 | 0)) {
    HEAP32[$48 >> 2] = $66; //@line 30478
    HEAP32[$49 >> 2] = HEAP32[$63 + 60 >> 2]; //@line 30481
    $$1 = 1; //@line 30482
    $113 = $66; //@line 30482
   } else {
    $$1 = 1; //@line 30484
    $113 = 0; //@line 30484
   }
  }
 }
 $73 = HEAP32[2510] | 0; //@line 30488
 if (!$73) {
  $$1$1 = $$1; //@line 30491
  $126 = $113; //@line 30491
 } else {
  if (!$113) {
   $115 = HEAP32[$73 + 56 >> 2] | 0; //@line 30496
   if (!$115) {
    $167 = 0; //@line 30499
   } else {
    if ((HEAP32[$73 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$48 >> 2] = $115; //@line 30505
     HEAP32[$49 >> 2] = HEAP32[$73 + 60 >> 2]; //@line 30508
     $167 = $115; //@line 30509
    } else {
     $167 = 0; //@line 30511
    }
   }
  } else {
   $167 = $113; //@line 30515
  }
  $$1$1 = $$1 + 1 | 0; //@line 30518
  $126 = $167; //@line 30518
 }
 $123 = HEAP32[2511] | 0; //@line 30520
 if (!$123) {
  $$1$2 = $$1$1; //@line 30523
  $139 = $126; //@line 30523
 } else {
  if (!$126) {
   $128 = HEAP32[$123 + 56 >> 2] | 0; //@line 30528
   if (!$128) {
    $168 = 0; //@line 30531
   } else {
    if ((HEAP32[$123 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$48 >> 2] = $128; //@line 30537
     HEAP32[$49 >> 2] = HEAP32[$123 + 60 >> 2]; //@line 30540
     $168 = $128; //@line 30541
    } else {
     $168 = 0; //@line 30543
    }
   }
  } else {
   $168 = $126; //@line 30547
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 30550
  $139 = $168; //@line 30550
 }
 $136 = HEAP32[2512] | 0; //@line 30552
 if (!$136) {
  $$1$3 = $$1$2; //@line 30555
  $152 = $139; //@line 30555
 } else {
  if (!$139) {
   $141 = HEAP32[$136 + 56 >> 2] | 0; //@line 30560
   if (!$141) {
    $169 = 0; //@line 30563
   } else {
    if ((HEAP32[$136 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$48 >> 2] = $141; //@line 30569
     HEAP32[$49 >> 2] = HEAP32[$136 + 60 >> 2]; //@line 30572
     $169 = $141; //@line 30573
    } else {
     $169 = 0; //@line 30575
    }
   }
  } else {
   $169 = $139; //@line 30579
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 30582
  $152 = $169; //@line 30582
 }
 $149 = HEAP32[2513] | 0; //@line 30584
 if (!$149) {
  $$1$4 = $$1$3; //@line 30587
 } else {
  if (!$152) {
   $154 = HEAP32[$149 + 56 >> 2] | 0; //@line 30592
   if ($154 | 0) {
    if ((HEAP32[$149 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$48 >> 2] = $154; //@line 30599
     HEAP32[$49 >> 2] = HEAP32[$149 + 60 >> 2]; //@line 30602
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 30607
 }
 HEAP32[10036 + ($24 << 2) >> 2] = $2; //@line 30610
 HEAP32[$57 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 30613
 if (HEAP8[10976] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 30617
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 30618
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 30621
   $110 = $ReallocAsyncCtx13 + 4 | 0; //@line 30622
   HEAP32[$110 >> 2] = $2; //@line 30623
   $111 = $ReallocAsyncCtx13 + 8 | 0; //@line 30624
   HEAP32[$111 >> 2] = $10; //@line 30625
   sp = STACKTOP; //@line 30626
   return;
  }
  ___async_unwind = 0; //@line 30629
  HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 30630
  $110 = $ReallocAsyncCtx13 + 4 | 0; //@line 30631
  HEAP32[$110 >> 2] = $2; //@line 30632
  $111 = $ReallocAsyncCtx13 + 8 | 0; //@line 30633
  HEAP32[$111 >> 2] = $10; //@line 30634
  sp = STACKTOP; //@line 30635
  return;
 }
 $75 = $2 + 44 | 0; //@line 30638
 $76 = HEAP32[$75 >> 2] | 0; //@line 30639
 if (!$76) {
  $90 = $20 + 12 | 0; //@line 30642
  HEAP32[$90 >> 2] = 0; //@line 30643
  $92 = $18 + 4 | 0; //@line 30645
  HEAP32[$92 >> 2] = 0; //@line 30647
  HEAP32[$92 + 4 >> 2] = 0; //@line 30650
  HEAP32[$18 >> 2] = 3; //@line 30651
  $96 = $18 + 12 | 0; //@line 30652
  HEAP32[$96 >> 2] = 712; //@line 30653
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 30654
  $97 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 100, $18) | 0; //@line 30655
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 30658
   $98 = $ReallocAsyncCtx14 + 4 | 0; //@line 30659
   HEAP32[$98 >> 2] = $10; //@line 30660
   $99 = $ReallocAsyncCtx14 + 8 | 0; //@line 30661
   HEAP32[$99 >> 2] = $18; //@line 30662
   $100 = $ReallocAsyncCtx14 + 12 | 0; //@line 30663
   HEAP32[$100 >> 2] = $20; //@line 30664
   $101 = $ReallocAsyncCtx14 + 16 | 0; //@line 30665
   HEAP32[$101 >> 2] = $90; //@line 30666
   $102 = $ReallocAsyncCtx14 + 20 | 0; //@line 30667
   HEAP32[$102 >> 2] = $22; //@line 30668
   $103 = $ReallocAsyncCtx14 + 24 | 0; //@line 30669
   HEAP32[$103 >> 2] = $16; //@line 30670
   $104 = $ReallocAsyncCtx14 + 28 | 0; //@line 30671
   HEAP32[$104 >> 2] = $2; //@line 30672
   $105 = $ReallocAsyncCtx14 + 32 | 0; //@line 30673
   HEAP32[$105 >> 2] = $75; //@line 30674
   $106 = $ReallocAsyncCtx14 + 36 | 0; //@line 30675
   HEAP32[$106 >> 2] = $26; //@line 30676
   $107 = $ReallocAsyncCtx14 + 40 | 0; //@line 30677
   HEAP32[$107 >> 2] = $2; //@line 30678
   $108 = $ReallocAsyncCtx14 + 44 | 0; //@line 30679
   HEAP32[$108 >> 2] = $96; //@line 30680
   sp = STACKTOP; //@line 30681
   return;
  }
  HEAP32[___async_retval >> 2] = $97; //@line 30685
  ___async_unwind = 0; //@line 30686
  HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 30687
  $98 = $ReallocAsyncCtx14 + 4 | 0; //@line 30688
  HEAP32[$98 >> 2] = $10; //@line 30689
  $99 = $ReallocAsyncCtx14 + 8 | 0; //@line 30690
  HEAP32[$99 >> 2] = $18; //@line 30691
  $100 = $ReallocAsyncCtx14 + 12 | 0; //@line 30692
  HEAP32[$100 >> 2] = $20; //@line 30693
  $101 = $ReallocAsyncCtx14 + 16 | 0; //@line 30694
  HEAP32[$101 >> 2] = $90; //@line 30695
  $102 = $ReallocAsyncCtx14 + 20 | 0; //@line 30696
  HEAP32[$102 >> 2] = $22; //@line 30697
  $103 = $ReallocAsyncCtx14 + 24 | 0; //@line 30698
  HEAP32[$103 >> 2] = $16; //@line 30699
  $104 = $ReallocAsyncCtx14 + 28 | 0; //@line 30700
  HEAP32[$104 >> 2] = $2; //@line 30701
  $105 = $ReallocAsyncCtx14 + 32 | 0; //@line 30702
  HEAP32[$105 >> 2] = $75; //@line 30703
  $106 = $ReallocAsyncCtx14 + 36 | 0; //@line 30704
  HEAP32[$106 >> 2] = $26; //@line 30705
  $107 = $ReallocAsyncCtx14 + 40 | 0; //@line 30706
  HEAP32[$107 >> 2] = $2; //@line 30707
  $108 = $ReallocAsyncCtx14 + 44 | 0; //@line 30708
  HEAP32[$108 >> 2] = $96; //@line 30709
  sp = STACKTOP; //@line 30710
  return;
 } else {
  $79 = HEAP32[$76 + 4 >> 2] | 0; //@line 30714
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 30715
  FUNCTION_TABLE_vii[$79 & 7]($20, $16); //@line 30716
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 30719
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 30720
   HEAP32[$80 >> 2] = $10; //@line 30721
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 30722
   HEAP32[$81 >> 2] = $18; //@line 30723
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 30724
   HEAP32[$82 >> 2] = $75; //@line 30725
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 30726
   HEAP32[$83 >> 2] = $20; //@line 30727
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 30728
   HEAP32[$84 >> 2] = $22; //@line 30729
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 30730
   HEAP32[$85 >> 2] = $16; //@line 30731
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 30732
   HEAP32[$86 >> 2] = $2; //@line 30733
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 30734
   HEAP32[$87 >> 2] = $75; //@line 30735
   $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 30736
   HEAP32[$88 >> 2] = $26; //@line 30737
   $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 30738
   HEAP32[$89 >> 2] = $2; //@line 30739
   sp = STACKTOP; //@line 30740
   return;
  }
  ___async_unwind = 0; //@line 30743
  HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 30744
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 30745
  HEAP32[$80 >> 2] = $10; //@line 30746
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 30747
  HEAP32[$81 >> 2] = $18; //@line 30748
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 30749
  HEAP32[$82 >> 2] = $75; //@line 30750
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 30751
  HEAP32[$83 >> 2] = $20; //@line 30752
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 30753
  HEAP32[$84 >> 2] = $22; //@line 30754
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 30755
  HEAP32[$85 >> 2] = $16; //@line 30756
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 30757
  HEAP32[$86 >> 2] = $2; //@line 30758
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 30759
  HEAP32[$87 >> 2] = $75; //@line 30760
  $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 30761
  HEAP32[$88 >> 2] = $26; //@line 30762
  $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 30763
  HEAP32[$89 >> 2] = $2; //@line 30764
  sp = STACKTOP; //@line 30765
  return;
 }
}
function _sn_coap_parser_options_parse_multiple_options($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$04966$i = 0, $$04966$us$i = 0, $$05165$i = 0, $$05165$us$i = 0, $$053$i68 = 0, $$06378 = 0, $$06378$us = 0, $$064 = 0, $$065$be$in = 0, $$065$be$us$in = 0, $$06577 = 0, $$06577$us = 0, $$080 = 0, $$080$us = 0, $$1 = 0, $$1$i = 0, $$1$us = 0, $$1$us$i = 0, $$152$in$i = 0, $$152$in$us$i = 0, $$lcssa94$sink$i = 0, $$sink = 0, $$sink69 = 0, $$sink69$in = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $108 = 0, $11 = 0, $113 = 0, $115 = 0, $118 = 0, $123 = 0, $125 = 0, $126 = 0, $129 = 0, $132 = 0, $141 = 0, $146 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $174 = 0, $176 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $43 = 0, $49 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $76 = 0, $8 = 0, $88 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $AsyncCtx = 0, $sext = 0, $trunc = 0, $trunc$i = 0, $trunc$us$i = 0, $trunc110 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7880
 STACKTOP = STACKTOP + 16 | 0; //@line 7881
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7881
 $vararg_buffer = sp; //@line 7882
 $7 = HEAP32[$1 >> 2] | 0; //@line 7883
 $8 = $2 & 65535; //@line 7884
 do {
  if ($2 << 16 >> 16) {
   $10 = ($5 | 0) == 17; //@line 7888
   $11 = ($5 | 0) == 4; //@line 7889
   L3 : do {
    switch ($5 | 0) {
    case 8:
    case 11:
    case 15:
    case 20:
     {
      $$04966$us$i = 0; //@line 7893
      $$05165$us$i = $6; //@line 7893
      $17 = 1; //@line 7893
      L22 : while (1) {
       if ($11 & ($$05165$us$i & 65535) > 8 | (($$05165$us$i & 65535) > 255 | $10 & ($$05165$us$i & 65535) > 2)) {
        $$064 = -1; //@line 7903
        label = 55; //@line 7904
        break;
       }
       $15 = $$05165$us$i & 65535; //@line 7907
       $16 = $17 + $15 | 0; //@line 7908
       $18 = $16 & 65535; //@line 7909
       $21 = ($$04966$us$i & 65535) + 1 + $15 | 0; //@line 7912
       $22 = $16 & 65535; //@line 7913
       if (($22 | 0) == ($8 | 0)) {
        $$lcssa94$sink$i = $21; //@line 7916
        label = 23; //@line 7917
        break L3;
       }
       if ($22 >>> 0 > $8 >>> 0) {
        $$064 = -1; //@line 7922
        label = 55; //@line 7923
        break;
       }
       $25 = $7 + $22 | 0; //@line 7926
       $trunc$us$i = HEAP8[$25 >> 0] | 0; //@line 7927
       $26 = $trunc$us$i & 255; //@line 7928
       if ($26 & 240 | 0) {
        $$sink69$in = $21; //@line 7932
        break L3;
       }
       switch ($trunc$us$i & 15) {
       case 15:
        {
         $$064 = -1; //@line 7939
         label = 55; //@line 7940
         break L22;
         break;
        }
       case 13:
        {
         if (($22 + 1 | 0) >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 7948
          label = 55; //@line 7949
          break L22;
         }
         $43 = $18 + 1 << 16 >> 16; //@line 7952
         $$1$us$i = $43; //@line 7958
         $$152$in$us$i = (HEAPU8[$7 + ($43 & 65535) >> 0] | 0) + 13 | 0; //@line 7958
         break;
        }
       case 14:
        {
         $29 = $22 + 2 | 0; //@line 7962
         if ($29 >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 7965
          label = 55; //@line 7966
          break L22;
         }
         $$1$us$i = $29 & 65535; //@line 7979
         $$152$in$us$i = (HEAPU8[$25 + 2 >> 0] | 0) + 269 + ((HEAPU8[$25 + 1 >> 0] | 0) << 8) | 0; //@line 7979
         break;
        }
       default:
        {
         $$1$us$i = $18; //@line 7983
         $$152$in$us$i = $26 & 15; //@line 7983
        }
       }
       $49 = $$1$us$i + 1 << 16 >> 16; //@line 7987
       if (($49 & 65535) > ($2 & 65535)) {
        $$lcssa94$sink$i = $21; //@line 7991
        label = 23; //@line 7992
        break L3;
       } else {
        $$04966$us$i = $21; //@line 7995
        $$05165$us$i = $$152$in$us$i & 65535; //@line 7995
        $17 = $49 & 65535; //@line 7995
       }
      }
      if ((label | 0) == 55) {
       STACKTOP = sp; //@line 7999
       return $$064 | 0; //@line 7999
      }
      break;
     }
    default:
     {
      $$04966$i = 0; //@line 8004
      $$05165$i = $6; //@line 8004
      $56 = 1; //@line 8004
      L4 : while (1) {
       if ($10 & ($$05165$i & 65535) > 2 | $11 & ($$05165$i & 65535) > 8) {
        $$064 = -1; //@line 8012
        label = 55; //@line 8013
        break;
       }
       $54 = $$05165$i & 65535; //@line 8016
       $55 = $56 + $54 | 0; //@line 8017
       $57 = $55 & 65535; //@line 8018
       $60 = ($$04966$i & 65535) + 1 + $54 | 0; //@line 8021
       $61 = $55 & 65535; //@line 8022
       if (($61 | 0) == ($8 | 0)) {
        $$lcssa94$sink$i = $60; //@line 8025
        label = 23; //@line 8026
        break L3;
       }
       if ($61 >>> 0 > $8 >>> 0) {
        $$064 = -1; //@line 8031
        label = 55; //@line 8032
        break;
       }
       $64 = $7 + $61 | 0; //@line 8035
       $trunc$i = HEAP8[$64 >> 0] | 0; //@line 8036
       $65 = $trunc$i & 255; //@line 8037
       if ($65 & 240 | 0) {
        $$sink69$in = $60; //@line 8041
        break L3;
       }
       switch ($trunc$i & 15) {
       case 15:
        {
         $$064 = -1; //@line 8048
         label = 55; //@line 8049
         break L4;
         break;
        }
       case 13:
        {
         if (($61 + 1 | 0) >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 8057
          label = 55; //@line 8058
          break L4;
         }
         $70 = $57 + 1 << 16 >> 16; //@line 8061
         $$1$i = $70; //@line 8067
         $$152$in$i = (HEAPU8[$7 + ($70 & 65535) >> 0] | 0) + 13 | 0; //@line 8067
         break;
        }
       case 14:
        {
         $76 = $61 + 2 | 0; //@line 8071
         if ($76 >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 8074
          label = 55; //@line 8075
          break L4;
         }
         $$1$i = $76 & 65535; //@line 8088
         $$152$in$i = (HEAPU8[$64 + 2 >> 0] | 0) + 269 + ((HEAPU8[$64 + 1 >> 0] | 0) << 8) | 0; //@line 8088
         break;
        }
       default:
        {
         $$1$i = $57; //@line 8092
         $$152$in$i = $65 & 15; //@line 8092
        }
       }
       $88 = $$1$i + 1 << 16 >> 16; //@line 8096
       if (($88 & 65535) > ($2 & 65535)) {
        $$lcssa94$sink$i = $60; //@line 8100
        label = 23; //@line 8101
        break L3;
       } else {
        $$04966$i = $60; //@line 8104
        $$05165$i = $$152$in$i & 65535; //@line 8104
        $56 = $88 & 65535; //@line 8104
       }
      }
      if ((label | 0) == 55) {
       STACKTOP = sp; //@line 8108
       return $$064 | 0; //@line 8108
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    if (!(($$lcssa94$sink$i & 65535) << 16 >> 16)) {
     break;
    } else {
     $$sink69$in = $$lcssa94$sink$i; //@line 8119
    }
   }
   $$sink69 = $$sink69$in + 65535 | 0; //@line 8122
   $93 = $$sink69 & 65535; //@line 8123
   $sext = $$sink69 << 16; //@line 8124
   $94 = $sext >> 16; //@line 8125
   switch ($93 << 16 >> 16) {
   case 0:
    {
     $$053$i68 = 0; //@line 8128
     break;
    }
   case -1:
    {
     $$064 = -1; //@line 8132
     STACKTOP = sp; //@line 8133
     return $$064 | 0; //@line 8133
    }
   default:
    {
     label = 25; //@line 8137
    }
   }
   if ((label | 0) == 25) {
    $95 = HEAP32[$0 >> 2] | 0; //@line 8141
    $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 8142
    $96 = FUNCTION_TABLE_ii[$95 & 31]($93) | 0; //@line 8143
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 69; //@line 8146
     HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8148
     HEAP32[$AsyncCtx + 8 >> 2] = $94; //@line 8150
     HEAP16[$AsyncCtx + 12 >> 1] = $6; //@line 8152
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 8154
     HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 8156
     HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 8158
     HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 8160
     HEAP16[$AsyncCtx + 32 >> 1] = $93; //@line 8162
     HEAP32[$AsyncCtx + 36 >> 2] = $4; //@line 8164
     HEAP32[$AsyncCtx + 40 >> 2] = $sext; //@line 8166
     sp = STACKTOP; //@line 8167
     STACKTOP = sp; //@line 8168
     return 0; //@line 8168
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8170
    HEAP32[$3 >> 2] = $96; //@line 8171
    if (!$96) {
     _mbed_tracef(2, 3803, 5559, $vararg_buffer); //@line 8174
     $$064 = -1; //@line 8175
     STACKTOP = sp; //@line 8176
     return $$064 | 0; //@line 8176
    } else {
     $$053$i68 = $93; //@line 8178
    }
   }
   HEAP16[$4 >> 1] = $$053$i68; //@line 8181
   $108 = HEAP32[$3 >> 2] | 0; //@line 8182
   if (($sext | 0) <= 0) {
    $$064 = 0; //@line 8185
    STACKTOP = sp; //@line 8186
    return $$064 | 0; //@line 8186
   }
   if (($5 | 0) == 20) {
    $$06378$us = $108; //@line 8190
    $$06577$us = $6; //@line 8190
    $$080$us = 0; //@line 8190
    while (1) {
     if (!($$080$us << 24 >> 24)) {
      $$1$us = $$06378$us; //@line 8194
     } else {
      HEAP8[$$06378$us >> 0] = 38; //@line 8196
      $$1$us = $$06378$us + 1 | 0; //@line 8198
     }
     $113 = $$080$us + 1 << 24 >> 24; //@line 8200
     $115 = (HEAP32[$1 >> 2] | 0) + 1 | 0; //@line 8202
     HEAP32[$1 >> 2] = $115; //@line 8203
     $118 = $$06577$us & 65535; //@line 8206
     if (($$1$us + $118 - (HEAP32[$3 >> 2] | 0) | 0) > ($94 | 0)) {
      $$064 = -1; //@line 8211
      label = 55; //@line 8212
      break;
     }
     _memcpy($$1$us | 0, $115 | 0, $118 | 0) | 0; //@line 8215
     $123 = (HEAP32[$1 >> 2] | 0) + $118 | 0; //@line 8217
     HEAP32[$1 >> 2] = $123; //@line 8218
     $$06378$us = $$1$us + $118 | 0; //@line 8219
     $125 = HEAP32[$3 >> 2] | 0; //@line 8220
     $126 = $$06378$us; //@line 8221
     if (($126 - $125 | 0) >= ($94 | 0)) {
      $$064 = $113; //@line 8225
      label = 55; //@line 8226
      break;
     }
     $trunc110 = HEAP8[$123 >> 0] | 0; //@line 8229
     $129 = $trunc110 & 255; //@line 8230
     if ($129 & 240 | 0) {
      $$064 = $113; //@line 8234
      label = 55; //@line 8235
      break;
     }
     switch ($trunc110 & 15) {
     case 13:
      {
       $141 = $123 + 1 | 0; //@line 8242
       $$sink87 = $141; //@line 8246
       $$sink88 = (HEAPU8[$141 >> 0] | 0) + 13 | 0; //@line 8246
       label = 40; //@line 8247
       break;
      }
     case 14:
      {
       $132 = $123 + 2 | 0; //@line 8251
       $$sink87 = $132; //@line 8260
       $$sink88 = (HEAPU8[$132 >> 0] | 0) + 269 + ((HEAPU8[$123 + 1 >> 0] | 0) << 8) | 0; //@line 8260
       label = 40; //@line 8261
       break;
      }
     default:
      {
       $$065$be$us$in = $129 & 15; //@line 8265
       $146 = $125; //@line 8265
      }
     }
     if ((label | 0) == 40) {
      label = 0; //@line 8269
      HEAP32[$1 >> 2] = $$sink87; //@line 8270
      $$065$be$us$in = $$sink88; //@line 8272
      $146 = HEAP32[$3 >> 2] | 0; //@line 8272
     }
     if (($126 - $146 | 0) >= ($94 | 0)) {
      $$064 = $113; //@line 8280
      label = 55; //@line 8281
      break;
     } else {
      $$06577$us = $$065$be$us$in & 65535; //@line 8278
      $$080$us = $113; //@line 8278
     }
    }
    if ((label | 0) == 55) {
     STACKTOP = sp; //@line 8286
     return $$064 | 0; //@line 8286
    }
   } else {
    $$06378 = $108; //@line 8289
    $$06577 = $6; //@line 8289
    $$080 = 0; //@line 8289
   }
   while (1) {
    if (!($$080 << 24 >> 24)) {
     $$1 = $$06378; //@line 8294
    } else {
     switch ($5 | 0) {
     case 4:
     case 15:
     case 17:
     case 20:
      {
       $$sink = 38; //@line 8298
       label = 45; //@line 8299
       break;
      }
     case 8:
     case 11:
      {
       $$sink = 47; //@line 8303
       label = 45; //@line 8304
       break;
      }
     default:
      {}
     }
     if ((label | 0) == 45) {
      label = 0; //@line 8311
      HEAP8[$$06378 >> 0] = $$sink; //@line 8312
     }
     $$1 = $$06378 + 1 | 0; //@line 8315
    }
    $150 = $$080 + 1 << 24 >> 24; //@line 8317
    $152 = (HEAP32[$1 >> 2] | 0) + 1 | 0; //@line 8319
    HEAP32[$1 >> 2] = $152; //@line 8320
    $155 = $$06577 & 65535; //@line 8323
    if (($$1 + $155 - (HEAP32[$3 >> 2] | 0) | 0) > ($94 | 0)) {
     $$064 = -1; //@line 8328
     label = 55; //@line 8329
     break;
    }
    _memcpy($$1 | 0, $152 | 0, $155 | 0) | 0; //@line 8332
    $160 = (HEAP32[$1 >> 2] | 0) + $155 | 0; //@line 8334
    HEAP32[$1 >> 2] = $160; //@line 8335
    $$06378 = $$1 + $155 | 0; //@line 8336
    $162 = HEAP32[$3 >> 2] | 0; //@line 8337
    $163 = $$06378; //@line 8338
    if (($163 - $162 | 0) >= ($94 | 0)) {
     $$064 = $150; //@line 8342
     label = 55; //@line 8343
     break;
    }
    $trunc = HEAP8[$160 >> 0] | 0; //@line 8346
    $166 = $trunc & 255; //@line 8347
    if ($166 & 240 | 0) {
     $$064 = $150; //@line 8351
     label = 55; //@line 8352
     break;
    }
    switch ($trunc & 15) {
    case 13:
     {
      $169 = $160 + 1 | 0; //@line 8359
      $$sink89 = $169; //@line 8363
      $$sink90 = (HEAPU8[$169 >> 0] | 0) + 13 | 0; //@line 8363
      label = 52; //@line 8364
      break;
     }
    case 14:
     {
      $176 = $160 + 2 | 0; //@line 8368
      $$sink89 = $176; //@line 8377
      $$sink90 = (HEAPU8[$176 >> 0] | 0) + 269 + ((HEAPU8[$160 + 1 >> 0] | 0) << 8) | 0; //@line 8377
      label = 52; //@line 8378
      break;
     }
    default:
     {
      $$065$be$in = $166 & 15; //@line 8382
      $174 = $162; //@line 8382
     }
    }
    if ((label | 0) == 52) {
     label = 0; //@line 8386
     HEAP32[$1 >> 2] = $$sink89; //@line 8387
     $$065$be$in = $$sink90; //@line 8389
     $174 = HEAP32[$3 >> 2] | 0; //@line 8389
    }
    if (($163 - $174 | 0) >= ($94 | 0)) {
     $$064 = $150; //@line 8397
     label = 55; //@line 8398
     break;
    } else {
     $$06577 = $$065$be$in & 65535; //@line 8395
     $$080 = $150; //@line 8395
    }
   }
   if ((label | 0) == 55) {
    STACKTOP = sp; //@line 8403
    return $$064 | 0; //@line 8403
   }
  }
 } while (0);
 HEAP16[$4 >> 1] = 0; //@line 8407
 $$064 = 0; //@line 8408
 STACKTOP = sp; //@line 8409
 return $$064 | 0; //@line 8409
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa88 = 0, $$sroa_idx5$i$i = 0, $1 = 0, $11 = 0, $110 = 0, $111 = 0, $125 = 0, $128 = 0, $13 = 0, $142 = 0, $145 = 0, $15 = 0, $163 = 0, $169 = 0, $175 = 0, $184 = 0, $189 = 0, $194 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $43 = 0, $59 = 0, $62 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $89 = 0, $90 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17906
 STACKTOP = STACKTOP + 32 | 0; //@line 17907
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17907
 $1 = sp + 16 | 0; //@line 17908
 $2 = sp; //@line 17909
 $3 = HEAP32[2509] | 0; //@line 17910
 if (!$3) {
  label = 3; //@line 17913
 } else {
  if ((HEAP32[$3 + 8 >> 2] | 0) == ($0 | 0)) {
   $$lcssa88 = $3; //@line 17919
  } else {
   label = 3; //@line 17921
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[2510] | 0; //@line 17926
   if ($8 | 0) {
    if ((HEAP32[$8 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $8; //@line 17933
     break;
    }
   }
   $184 = HEAP32[2511] | 0; //@line 17937
   if ($184 | 0) {
    if ((HEAP32[$184 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $184; //@line 17944
     break;
    }
   }
   $189 = HEAP32[2512] | 0; //@line 17948
   if ($189 | 0) {
    if ((HEAP32[$189 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $189; //@line 17955
     break;
    }
   }
   $194 = HEAP32[2513] | 0; //@line 17959
   if (!$194) {
    STACKTOP = sp; //@line 17962
    return;
   }
   if ((HEAP32[$194 + 8 >> 2] | 0) == ($0 | 0)) {
    $$lcssa88 = $194; //@line 17968
   } else {
    STACKTOP = sp; //@line 17970
    return;
   }
  }
 } while (0);
 $11 = HEAP32[$$lcssa88 + 56 >> 2] | 0; //@line 17975
 if (!$11) {
  STACKTOP = sp; //@line 17978
  return;
 }
 $13 = _malloc(512) | 0; //@line 17980
 if (!$13) {
  STACKTOP = sp; //@line 17983
  return;
 }
 $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17985
 $15 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 17986
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 254; //@line 17989
  HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 17991
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 17993
  HEAP32[$AsyncCtx20 + 12 >> 2] = $13; //@line 17995
  HEAP32[$AsyncCtx20 + 16 >> 2] = $11; //@line 17997
  sp = STACKTOP; //@line 17998
  STACKTOP = sp; //@line 17999
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 18001
 L28 : do {
  if (($15 | 0) >= 12) {
   $21 = $13 + 1 | 0; //@line 18005
   $22 = $1 + 12 | 0; //@line 18006
   $23 = $2 + 8 | 0; //@line 18007
   $$sroa_idx5$i$i = $2 + 4 | 0; //@line 18008
   $24 = $2 + 12 | 0; //@line 18009
   L30 : while (1) {
    $30 = (HEAPU8[$13 >> 0] | 0) << 8 | (HEAPU8[$21 >> 0] | 0); //@line 18016
    $31 = $30 & 65535; //@line 18017
    $32 = HEAP32[2509] | 0; //@line 18018
    if (!$32) {
     label = 12; //@line 18021
    } else {
     if (($30 | 0) == (HEAPU16[$32 + 80 >> 1] | 0 | 0)) {
      $$lcssa = $32; //@line 18028
      label = 13; //@line 18029
     } else {
      label = 12; //@line 18031
     }
    }
    do {
     if ((label | 0) == 12) {
      label = 0; //@line 18036
      $38 = HEAP32[2510] | 0; //@line 18037
      if ($38 | 0) {
       if (($30 | 0) == (HEAPU16[$38 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $38; //@line 18045
        label = 13; //@line 18046
        break;
       }
      }
      $163 = HEAP32[2511] | 0; //@line 18050
      if ($163 | 0) {
       if (($30 | 0) == (HEAPU16[$163 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $163; //@line 18058
        label = 13; //@line 18059
        break;
       }
      }
      $169 = HEAP32[2512] | 0; //@line 18063
      if ($169 | 0) {
       if (($30 | 0) == (HEAPU16[$169 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $169; //@line 18071
        label = 13; //@line 18072
        break;
       }
      }
      $175 = HEAP32[2513] | 0; //@line 18076
      if ($175 | 0) {
       if (($30 | 0) == (HEAPU16[$175 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $175; //@line 18084
        label = 13; //@line 18085
       }
      }
     }
    } while (0);
    do {
     if ((label | 0) == 13) {
      label = 0; //@line 18092
      if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
       $59 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 18098
       $$ = $59 >>> 0 > 1 ? $59 : 1; //@line 18100
       $AsyncCtx11 = _emscripten_alloc_async_context(68, sp) | 0; //@line 18104
       $62 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 12017) | 0; //@line 18105
       if (___async) {
        label = 18; //@line 18108
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18111
       $79 = $$lcssa + 64 | 0; //@line 18112
       HEAP32[$79 >> 2] = $62; //@line 18113
       $81 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($13, $31, $$lcssa + 68 | 0, $62, $$) | 0; //@line 18115
       if (($81 | 0) < 0) {
        $83 = HEAP32[$79 >> 2] | 0; //@line 18118
        if ($83 | 0) {
         __ZdaPv($83); //@line 18121
        }
        HEAP32[$79 >> 2] = 0; //@line 18123
        break;
       }
       HEAP8[$$lcssa + 86 >> 0] = $81; //@line 18128
       HEAP32[$$lcssa + 4 >> 2] = -3009; //@line 18130
       HEAP32[$$lcssa + 76 >> 2] = 0; //@line 18132
       $89 = $$lcssa + 44 | 0; //@line 18133
       $90 = HEAP32[$89 >> 2] | 0; //@line 18134
       if (!$90) {
        $110 = 0; //@line 18137
       } else {
        $94 = HEAP32[$90 + 4 >> 2] | 0; //@line 18141
        $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 18142
        FUNCTION_TABLE_vii[$94 & 7]($1, $$lcssa + 32 | 0); //@line 18143
        if (___async) {
         label = 25; //@line 18146
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 18149
        $110 = HEAP32[$89 >> 2] | 0; //@line 18151
       }
       HEAP32[$22 >> 2] = $110; //@line 18153
       $111 = HEAP32[$$lcssa >> 2] | 0; //@line 18154
       HEAP32[$23 >> 2] = 0; //@line 18155
       HEAP32[$2 >> 2] = 187; //@line 18156
       HEAP32[$$sroa_idx5$i$i >> 2] = $111; //@line 18157
       HEAP32[$24 >> 2] = 724; //@line 18158
       $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 18159
       __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 18160
       if (___async) {
        label = 28; //@line 18163
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx14 | 0); //@line 18166
       $125 = HEAP32[$24 >> 2] | 0; //@line 18167
       if ($125 | 0) {
        $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 18171
        $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 18172
        FUNCTION_TABLE_vi[$128 & 511]($2); //@line 18173
        if (___async) {
         label = 31; //@line 18176
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18179
       }
       $142 = HEAP32[$22 >> 2] | 0; //@line 18181
       if ($142 | 0) {
        $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 18185
        $AsyncCtx7 = _emscripten_alloc_async_context(56, sp) | 0; //@line 18186
        FUNCTION_TABLE_vi[$145 & 511]($1); //@line 18187
        if (___async) {
         label = 35; //@line 18190
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18193
       }
      }
     }
    } while (0);
    $AsyncCtx17 = _emscripten_alloc_async_context(56, sp) | 0; //@line 18198
    $43 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 18199
    if (___async) {
     label = 15; //@line 18202
     break;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 18205
    if (($43 | 0) < 12) {
     break L28;
    }
   }
   if ((label | 0) == 15) {
    HEAP32[$AsyncCtx17 >> 2] = 255; //@line 18212
    HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 18214
    HEAP32[$AsyncCtx17 + 8 >> 2] = $24; //@line 18216
    HEAP32[$AsyncCtx17 + 12 >> 2] = $22; //@line 18218
    HEAP32[$AsyncCtx17 + 16 >> 2] = $23; //@line 18220
    HEAP32[$AsyncCtx17 + 20 >> 2] = $2; //@line 18222
    HEAP32[$AsyncCtx17 + 24 >> 2] = $$sroa_idx5$i$i; //@line 18224
    HEAP32[$AsyncCtx17 + 28 >> 2] = $1; //@line 18226
    HEAP32[$AsyncCtx17 + 32 >> 2] = $2; //@line 18228
    HEAP32[$AsyncCtx17 + 36 >> 2] = $13; //@line 18230
    HEAP32[$AsyncCtx17 + 40 >> 2] = $2; //@line 18232
    HEAP32[$AsyncCtx17 + 44 >> 2] = $22; //@line 18234
    HEAP32[$AsyncCtx17 + 48 >> 2] = $21; //@line 18236
    HEAP32[$AsyncCtx17 + 52 >> 2] = $11; //@line 18238
    sp = STACKTOP; //@line 18239
    STACKTOP = sp; //@line 18240
    return;
   } else if ((label | 0) == 18) {
    HEAP32[$AsyncCtx11 >> 2] = 256; //@line 18243
    HEAP32[$AsyncCtx11 + 4 >> 2] = $$lcssa; //@line 18245
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 18247
    HEAP32[$AsyncCtx11 + 12 >> 2] = $24; //@line 18249
    HEAP32[$AsyncCtx11 + 16 >> 2] = $22; //@line 18251
    HEAP32[$AsyncCtx11 + 20 >> 2] = $23; //@line 18253
    HEAP32[$AsyncCtx11 + 24 >> 2] = $2; //@line 18255
    HEAP32[$AsyncCtx11 + 28 >> 2] = $$sroa_idx5$i$i; //@line 18257
    HEAP32[$AsyncCtx11 + 32 >> 2] = $1; //@line 18259
    HEAP32[$AsyncCtx11 + 36 >> 2] = $2; //@line 18261
    HEAP32[$AsyncCtx11 + 40 >> 2] = $13; //@line 18263
    HEAP32[$AsyncCtx11 + 44 >> 2] = $2; //@line 18265
    HEAP32[$AsyncCtx11 + 48 >> 2] = $22; //@line 18267
    HEAP32[$AsyncCtx11 + 52 >> 2] = $21; //@line 18269
    HEAP32[$AsyncCtx11 + 56 >> 2] = $11; //@line 18271
    HEAP16[$AsyncCtx11 + 60 >> 1] = $31; //@line 18273
    HEAP32[$AsyncCtx11 + 64 >> 2] = $$; //@line 18275
    sp = STACKTOP; //@line 18276
    STACKTOP = sp; //@line 18277
    return;
   } else if ((label | 0) == 25) {
    HEAP32[$AsyncCtx >> 2] = 257; //@line 18280
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 18282
    HEAP32[$AsyncCtx + 8 >> 2] = $24; //@line 18284
    HEAP32[$AsyncCtx + 12 >> 2] = $22; //@line 18286
    HEAP32[$AsyncCtx + 16 >> 2] = $$lcssa; //@line 18288
    HEAP32[$AsyncCtx + 20 >> 2] = $23; //@line 18290
    HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 18292
    HEAP32[$AsyncCtx + 28 >> 2] = $$sroa_idx5$i$i; //@line 18294
    HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 18296
    HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 18298
    HEAP32[$AsyncCtx + 40 >> 2] = $13; //@line 18300
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 18302
    HEAP32[$AsyncCtx + 48 >> 2] = $22; //@line 18304
    HEAP32[$AsyncCtx + 52 >> 2] = $21; //@line 18306
    HEAP32[$AsyncCtx + 56 >> 2] = $89; //@line 18308
    HEAP32[$AsyncCtx + 60 >> 2] = $11; //@line 18310
    sp = STACKTOP; //@line 18311
    STACKTOP = sp; //@line 18312
    return;
   } else if ((label | 0) == 28) {
    HEAP32[$AsyncCtx14 >> 2] = 258; //@line 18315
    HEAP32[$AsyncCtx14 + 4 >> 2] = $1; //@line 18317
    HEAP32[$AsyncCtx14 + 8 >> 2] = $24; //@line 18319
    HEAP32[$AsyncCtx14 + 12 >> 2] = $22; //@line 18321
    HEAP32[$AsyncCtx14 + 16 >> 2] = $23; //@line 18323
    HEAP32[$AsyncCtx14 + 20 >> 2] = $2; //@line 18325
    HEAP32[$AsyncCtx14 + 24 >> 2] = $$sroa_idx5$i$i; //@line 18327
    HEAP32[$AsyncCtx14 + 28 >> 2] = $1; //@line 18329
    HEAP32[$AsyncCtx14 + 32 >> 2] = $2; //@line 18331
    HEAP32[$AsyncCtx14 + 36 >> 2] = $13; //@line 18333
    HEAP32[$AsyncCtx14 + 40 >> 2] = $2; //@line 18335
    HEAP32[$AsyncCtx14 + 44 >> 2] = $22; //@line 18337
    HEAP32[$AsyncCtx14 + 48 >> 2] = $21; //@line 18339
    HEAP32[$AsyncCtx14 + 52 >> 2] = $11; //@line 18341
    sp = STACKTOP; //@line 18342
    STACKTOP = sp; //@line 18343
    return;
   } else if ((label | 0) == 31) {
    HEAP32[$AsyncCtx3 >> 2] = 259; //@line 18346
    HEAP32[$AsyncCtx3 + 4 >> 2] = $1; //@line 18348
    HEAP32[$AsyncCtx3 + 8 >> 2] = $24; //@line 18350
    HEAP32[$AsyncCtx3 + 12 >> 2] = $22; //@line 18352
    HEAP32[$AsyncCtx3 + 16 >> 2] = $23; //@line 18354
    HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 18356
    HEAP32[$AsyncCtx3 + 24 >> 2] = $$sroa_idx5$i$i; //@line 18358
    HEAP32[$AsyncCtx3 + 28 >> 2] = $1; //@line 18360
    HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 18362
    HEAP32[$AsyncCtx3 + 36 >> 2] = $13; //@line 18364
    HEAP32[$AsyncCtx3 + 40 >> 2] = $2; //@line 18366
    HEAP32[$AsyncCtx3 + 44 >> 2] = $22; //@line 18368
    HEAP32[$AsyncCtx3 + 48 >> 2] = $21; //@line 18370
    HEAP32[$AsyncCtx3 + 52 >> 2] = $11; //@line 18372
    sp = STACKTOP; //@line 18373
    STACKTOP = sp; //@line 18374
    return;
   } else if ((label | 0) == 35) {
    HEAP32[$AsyncCtx7 >> 2] = 260; //@line 18377
    HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 18379
    HEAP32[$AsyncCtx7 + 8 >> 2] = $24; //@line 18381
    HEAP32[$AsyncCtx7 + 12 >> 2] = $22; //@line 18383
    HEAP32[$AsyncCtx7 + 16 >> 2] = $23; //@line 18385
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 18387
    HEAP32[$AsyncCtx7 + 24 >> 2] = $$sroa_idx5$i$i; //@line 18389
    HEAP32[$AsyncCtx7 + 28 >> 2] = $1; //@line 18391
    HEAP32[$AsyncCtx7 + 32 >> 2] = $2; //@line 18393
    HEAP32[$AsyncCtx7 + 36 >> 2] = $13; //@line 18395
    HEAP32[$AsyncCtx7 + 40 >> 2] = $2; //@line 18397
    HEAP32[$AsyncCtx7 + 44 >> 2] = $22; //@line 18399
    HEAP32[$AsyncCtx7 + 48 >> 2] = $21; //@line 18401
    HEAP32[$AsyncCtx7 + 52 >> 2] = $11; //@line 18403
    sp = STACKTOP; //@line 18404
    STACKTOP = sp; //@line 18405
    return;
   }
  }
 } while (0);
 _free($13); //@line 18409
 STACKTOP = sp; //@line 18410
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_18($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy16 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $97 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11578
 STACKTOP = STACKTOP + 48 | 0; //@line 11579
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11579
 $$byval_copy16 = sp + 20 | 0; //@line 11580
 $$byval_copy = sp; //@line 11581
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11583
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11585
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11587
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11589
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11591
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11593
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11595
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11597
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11599
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11601
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11603
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11605
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11607
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  HEAP8[$20 >> 0] = (HEAP8[$20 >> 0] | 0) + 1 << 24 >> 24; //@line 11614
  $97 = HEAP8[$6 >> 0] | 0; //@line 11615
  if ($97 << 24 >> 24) {
   HEAP8[$6 >> 0] = $97 + -1 << 24 >> 24; //@line 11619
  }
  _free($2); //@line 11621
  HEAP32[$8 + 76 >> 2] = 5e3; //@line 11623
  STACKTOP = sp; //@line 11624
  return;
 }
 HEAP8[$12 >> 0] = (HEAP8[$12 >> 0] | 0) + 1 << 24 >> 24; //@line 11628
 HEAP32[$14 >> 2] = 0; //@line 11629
 HEAP32[$14 + 4 >> 2] = 0; //@line 11629
 HEAP32[$14 + 8 >> 2] = 0; //@line 11629
 HEAP32[$14 + 12 >> 2] = 0; //@line 11629
 HEAP32[$14 + 16 >> 2] = 0; //@line 11629
 HEAP32[$$byval_copy16 >> 2] = HEAP32[$18 >> 2]; //@line 11630
 HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$18 + 4 >> 2]; //@line 11630
 HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$18 + 8 >> 2]; //@line 11630
 HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$18 + 12 >> 2]; //@line 11630
 HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$18 + 16 >> 2]; //@line 11630
 __ZN13SocketAddressC2E10nsapi_addrt($16, $$byval_copy16, 0); //@line 11631
 do {
  if (HEAP8[$6 >> 0] | 0) {
   $28 = HEAP32[$26 >> 2] | 0; //@line 11636
   $29 = HEAP8[$12 >> 0] | 0; //@line 11637
   if (($29 & 255) > 9) {
    if (!(HEAP8[$20 >> 0] | 0)) {
     break;
    }
    HEAP8[$12 >> 0] = 0; //@line 11645
    HEAP8[$20 >> 0] = 0; //@line 11646
    $35 = 0; //@line 11647
   } else {
    if (($29 & 255) < 5) {
     $35 = $29; //@line 11651
    } else {
     $56 = 608 + ((($29 & 255) + -5 | 0) * 20 | 0) | 0; //@line 11655
     HEAP32[$$byval_copy >> 2] = HEAP32[$56 >> 2]; //@line 11656
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$56 + 4 >> 2]; //@line 11656
     HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$56 + 8 >> 2]; //@line 11656
     HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$56 + 12 >> 2]; //@line 11656
     HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$56 + 16 >> 2]; //@line 11656
     __ZN13SocketAddress8set_addrE10nsapi_addr($16, $$byval_copy); //@line 11657
     __ZN13SocketAddress8set_portEt($16, 53); //@line 11658
     $75 = HEAP32[$22 >> 2] | 0; //@line 11659
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 11660
     $76 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($75, $16, $2, $24) | 0; //@line 11661
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 253; //@line 11664
      $77 = $ReallocAsyncCtx12 + 4 | 0; //@line 11665
      HEAP32[$77 >> 2] = $2; //@line 11666
      $78 = $ReallocAsyncCtx12 + 8 | 0; //@line 11667
      HEAP32[$78 >> 2] = $4; //@line 11668
      $79 = $ReallocAsyncCtx12 + 12 | 0; //@line 11669
      HEAP32[$79 >> 2] = $6; //@line 11670
      $80 = $ReallocAsyncCtx12 + 16 | 0; //@line 11671
      HEAP32[$80 >> 2] = $8; //@line 11672
      $81 = $ReallocAsyncCtx12 + 20 | 0; //@line 11673
      HEAP32[$81 >> 2] = $10; //@line 11674
      $82 = $ReallocAsyncCtx12 + 24 | 0; //@line 11675
      HEAP32[$82 >> 2] = $12; //@line 11676
      $83 = $ReallocAsyncCtx12 + 28 | 0; //@line 11677
      HEAP32[$83 >> 2] = $14; //@line 11678
      $84 = $ReallocAsyncCtx12 + 32 | 0; //@line 11679
      HEAP32[$84 >> 2] = $16; //@line 11680
      $85 = $ReallocAsyncCtx12 + 36 | 0; //@line 11681
      HEAP32[$85 >> 2] = $18; //@line 11682
      $86 = $ReallocAsyncCtx12 + 40 | 0; //@line 11683
      HEAP32[$86 >> 2] = $20; //@line 11684
      $87 = $ReallocAsyncCtx12 + 44 | 0; //@line 11685
      HEAP32[$87 >> 2] = $22; //@line 11686
      $88 = $ReallocAsyncCtx12 + 48 | 0; //@line 11687
      HEAP32[$88 >> 2] = $24; //@line 11688
      $89 = $ReallocAsyncCtx12 + 52 | 0; //@line 11689
      HEAP32[$89 >> 2] = $26; //@line 11690
      sp = STACKTOP; //@line 11691
      STACKTOP = sp; //@line 11692
      return;
     }
     HEAP32[___async_retval >> 2] = $76; //@line 11695
     ___async_unwind = 0; //@line 11696
     HEAP32[$ReallocAsyncCtx12 >> 2] = 253; //@line 11697
     $77 = $ReallocAsyncCtx12 + 4 | 0; //@line 11698
     HEAP32[$77 >> 2] = $2; //@line 11699
     $78 = $ReallocAsyncCtx12 + 8 | 0; //@line 11700
     HEAP32[$78 >> 2] = $4; //@line 11701
     $79 = $ReallocAsyncCtx12 + 12 | 0; //@line 11702
     HEAP32[$79 >> 2] = $6; //@line 11703
     $80 = $ReallocAsyncCtx12 + 16 | 0; //@line 11704
     HEAP32[$80 >> 2] = $8; //@line 11705
     $81 = $ReallocAsyncCtx12 + 20 | 0; //@line 11706
     HEAP32[$81 >> 2] = $10; //@line 11707
     $82 = $ReallocAsyncCtx12 + 24 | 0; //@line 11708
     HEAP32[$82 >> 2] = $12; //@line 11709
     $83 = $ReallocAsyncCtx12 + 28 | 0; //@line 11710
     HEAP32[$83 >> 2] = $14; //@line 11711
     $84 = $ReallocAsyncCtx12 + 32 | 0; //@line 11712
     HEAP32[$84 >> 2] = $16; //@line 11713
     $85 = $ReallocAsyncCtx12 + 36 | 0; //@line 11714
     HEAP32[$85 >> 2] = $18; //@line 11715
     $86 = $ReallocAsyncCtx12 + 40 | 0; //@line 11716
     HEAP32[$86 >> 2] = $20; //@line 11717
     $87 = $ReallocAsyncCtx12 + 44 | 0; //@line 11718
     HEAP32[$87 >> 2] = $22; //@line 11719
     $88 = $ReallocAsyncCtx12 + 48 | 0; //@line 11720
     HEAP32[$88 >> 2] = $24; //@line 11721
     $89 = $ReallocAsyncCtx12 + 52 | 0; //@line 11722
     HEAP32[$89 >> 2] = $26; //@line 11723
     sp = STACKTOP; //@line 11724
     STACKTOP = sp; //@line 11725
     return;
    }
   }
   $38 = HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0; //@line 11731
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 11732
   $39 = FUNCTION_TABLE_iiii[$38 & 31]($28, $35 & 255, $16) | 0; //@line 11733
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 247; //@line 11736
    $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 11737
    HEAP32[$40 >> 2] = $6; //@line 11738
    $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 11739
    HEAP32[$41 >> 2] = $2; //@line 11740
    $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 11741
    HEAP32[$42 >> 2] = $8; //@line 11742
    $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 11743
    HEAP32[$43 >> 2] = $12; //@line 11744
    $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 11745
    HEAP32[$44 >> 2] = $4; //@line 11746
    $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 11747
    HEAP32[$45 >> 2] = $14; //@line 11748
    $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 11749
    HEAP32[$46 >> 2] = $16; //@line 11750
    $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 11751
    HEAP32[$47 >> 2] = $18; //@line 11752
    $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 11753
    HEAP32[$48 >> 2] = $20; //@line 11754
    $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 11755
    HEAP32[$49 >> 2] = $22; //@line 11756
    $50 = $ReallocAsyncCtx4 + 44 | 0; //@line 11757
    HEAP32[$50 >> 2] = $24; //@line 11758
    $51 = $ReallocAsyncCtx4 + 48 | 0; //@line 11759
    HEAP32[$51 >> 2] = $26; //@line 11760
    $52 = $ReallocAsyncCtx4 + 52 | 0; //@line 11761
    HEAP32[$52 >> 2] = $10; //@line 11762
    sp = STACKTOP; //@line 11763
    STACKTOP = sp; //@line 11764
    return;
   }
   HEAP32[___async_retval >> 2] = $39; //@line 11767
   ___async_unwind = 0; //@line 11768
   HEAP32[$ReallocAsyncCtx4 >> 2] = 247; //@line 11769
   $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 11770
   HEAP32[$40 >> 2] = $6; //@line 11771
   $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 11772
   HEAP32[$41 >> 2] = $2; //@line 11773
   $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 11774
   HEAP32[$42 >> 2] = $8; //@line 11775
   $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 11776
   HEAP32[$43 >> 2] = $12; //@line 11777
   $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 11778
   HEAP32[$44 >> 2] = $4; //@line 11779
   $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 11780
   HEAP32[$45 >> 2] = $14; //@line 11781
   $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 11782
   HEAP32[$46 >> 2] = $16; //@line 11783
   $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 11784
   HEAP32[$47 >> 2] = $18; //@line 11785
   $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 11786
   HEAP32[$48 >> 2] = $20; //@line 11787
   $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 11788
   HEAP32[$49 >> 2] = $22; //@line 11789
   $50 = $ReallocAsyncCtx4 + 44 | 0; //@line 11790
   HEAP32[$50 >> 2] = $24; //@line 11791
   $51 = $ReallocAsyncCtx4 + 48 | 0; //@line 11792
   HEAP32[$51 >> 2] = $26; //@line 11793
   $52 = $ReallocAsyncCtx4 + 52 | 0; //@line 11794
   HEAP32[$52 >> 2] = $10; //@line 11795
   sp = STACKTOP; //@line 11796
   STACKTOP = sp; //@line 11797
   return;
  }
 } while (0);
 $57 = $8 + 28 | 0; //@line 11800
 $58 = HEAP32[$57 >> 2] | 0; //@line 11801
 if (!$58) {
  $69 = $10 + 12 | 0; //@line 11804
  HEAP32[$69 >> 2] = 0; //@line 11805
  $70 = HEAP32[$8 >> 2] | 0; //@line 11806
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 11807
  __ZL28nsapi_dns_query_async_deletei($70); //@line 11808
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 249; //@line 11811
   $71 = $ReallocAsyncCtx8 + 4 | 0; //@line 11812
   HEAP32[$71 >> 2] = $69; //@line 11813
   $72 = $ReallocAsyncCtx8 + 8 | 0; //@line 11814
   HEAP32[$72 >> 2] = $10; //@line 11815
   $73 = $ReallocAsyncCtx8 + 12 | 0; //@line 11816
   HEAP32[$73 >> 2] = $2; //@line 11817
   $74 = $ReallocAsyncCtx8 + 16 | 0; //@line 11818
   HEAP32[$74 >> 2] = $4; //@line 11819
   sp = STACKTOP; //@line 11820
   STACKTOP = sp; //@line 11821
   return;
  }
  ___async_unwind = 0; //@line 11823
  HEAP32[$ReallocAsyncCtx8 >> 2] = 249; //@line 11824
  $71 = $ReallocAsyncCtx8 + 4 | 0; //@line 11825
  HEAP32[$71 >> 2] = $69; //@line 11826
  $72 = $ReallocAsyncCtx8 + 8 | 0; //@line 11827
  HEAP32[$72 >> 2] = $10; //@line 11828
  $73 = $ReallocAsyncCtx8 + 12 | 0; //@line 11829
  HEAP32[$73 >> 2] = $2; //@line 11830
  $74 = $ReallocAsyncCtx8 + 16 | 0; //@line 11831
  HEAP32[$74 >> 2] = $4; //@line 11832
  sp = STACKTOP; //@line 11833
  STACKTOP = sp; //@line 11834
  return;
 } else {
  $62 = HEAP32[$58 + 4 >> 2] | 0; //@line 11838
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 11839
  FUNCTION_TABLE_vii[$62 & 7]($10, $8 + 16 | 0); //@line 11840
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 11843
   $63 = $ReallocAsyncCtx5 + 4 | 0; //@line 11844
   HEAP32[$63 >> 2] = $57; //@line 11845
   $64 = $ReallocAsyncCtx5 + 8 | 0; //@line 11846
   HEAP32[$64 >> 2] = $10; //@line 11847
   $65 = $ReallocAsyncCtx5 + 12 | 0; //@line 11848
   HEAP32[$65 >> 2] = $8; //@line 11849
   $66 = $ReallocAsyncCtx5 + 16 | 0; //@line 11850
   HEAP32[$66 >> 2] = $10; //@line 11851
   $67 = $ReallocAsyncCtx5 + 20 | 0; //@line 11852
   HEAP32[$67 >> 2] = $2; //@line 11853
   $68 = $ReallocAsyncCtx5 + 24 | 0; //@line 11854
   HEAP32[$68 >> 2] = $4; //@line 11855
   sp = STACKTOP; //@line 11856
   STACKTOP = sp; //@line 11857
   return;
  }
  ___async_unwind = 0; //@line 11859
  HEAP32[$ReallocAsyncCtx5 >> 2] = 248; //@line 11860
  $63 = $ReallocAsyncCtx5 + 4 | 0; //@line 11861
  HEAP32[$63 >> 2] = $57; //@line 11862
  $64 = $ReallocAsyncCtx5 + 8 | 0; //@line 11863
  HEAP32[$64 >> 2] = $10; //@line 11864
  $65 = $ReallocAsyncCtx5 + 12 | 0; //@line 11865
  HEAP32[$65 >> 2] = $8; //@line 11866
  $66 = $ReallocAsyncCtx5 + 16 | 0; //@line 11867
  HEAP32[$66 >> 2] = $10; //@line 11868
  $67 = $ReallocAsyncCtx5 + 20 | 0; //@line 11869
  HEAP32[$67 >> 2] = $2; //@line 11870
  $68 = $ReallocAsyncCtx5 + 24 | 0; //@line 11871
  HEAP32[$68 >> 2] = $4; //@line 11872
  sp = STACKTOP; //@line 11873
  STACKTOP = sp; //@line 11874
  return;
 }
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 1362
 $6 = HEAP32[$5 >> 2] | 0; //@line 1363
 $7 = $0 + 100 | 0; //@line 1364
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 1369
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 1372
  $$0142 = 0; //@line 1372
 } else {
  $$0 = ___shgetc($0) | 0; //@line 1375
  $$0142 = 0; //@line 1375
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 1380
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 1388
    $$0148 = 0; //@line 1388
    $$0152 = 1.0; //@line 1388
    $$0155 = 0.0; //@line 1388
    $$0159 = 0; //@line 1388
    $$2 = $$0; //@line 1388
    $$2144 = $$0142; //@line 1388
    $51 = 0; //@line 1388
    $53 = 0; //@line 1388
    $96 = 0; //@line 1388
    $98 = 0; //@line 1388
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 1392
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 1397
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 1400
   $$0142 = 1; //@line 1400
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 1404
   $$0142 = 1; //@line 1404
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 1409
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 1414
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 1417
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 1420
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 1424
   $37 = 0; //@line 1424
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 1426
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 1431
     $41 = HEAPU8[$29 >> 0] | 0; //@line 1434
    } else {
     $41 = ___shgetc($0) | 0; //@line 1437
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 1439
    $39 = tempRet0; //@line 1440
    if (($41 | 0) == 48) {
     $36 = $38; //@line 1443
     $37 = $39; //@line 1443
    } else {
     $$0146 = 1; //@line 1445
     $$0148 = 0; //@line 1445
     $$0152 = 1.0; //@line 1445
     $$0155 = 0.0; //@line 1445
     $$0159 = 0; //@line 1445
     $$2 = $41; //@line 1445
     $$2144 = 1; //@line 1445
     $51 = 0; //@line 1445
     $53 = 0; //@line 1445
     $96 = $38; //@line 1445
     $98 = $39; //@line 1445
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 1450
   $$0148 = 0; //@line 1450
   $$0152 = 1.0; //@line 1450
   $$0155 = 0.0; //@line 1450
   $$0159 = 0; //@line 1450
   $$2 = $$1$ph; //@line 1450
   $$2144 = $$0142; //@line 1450
   $51 = 0; //@line 1450
   $53 = 0; //@line 1450
   $96 = 0; //@line 1450
   $98 = 0; //@line 1450
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 1454
  $$pre = $$2 | 32; //@line 1456
  if ($42 >>> 0 < 10) {
   label = 20; //@line 1458
  } else {
   $46 = ($$2 | 0) == 46; //@line 1462
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 1465
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 1471
     $$2150 = $$0148; //@line 1471
     $$2154 = $$0152; //@line 1471
     $$2157 = $$0155; //@line 1471
     $$2161 = $$0159; //@line 1471
     $$3145 = $$2144; //@line 1471
     $211 = $53; //@line 1471
     $212 = $51; //@line 1471
     $213 = $53; //@line 1471
     $214 = $51; //@line 1471
    } else {
     $$2$lcssa = 46; //@line 1473
     break;
    }
   } else {
    label = 20; //@line 1477
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 1481
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 1484
   do {
    if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
     $$1149 = $$0148; //@line 1494
     $$1153 = $$0152; //@line 1494
     $$1156 = $$0155; //@line 1494
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 1494
    } else {
     if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 1503
      $$1149 = $$0148; //@line 1506
      $$1153 = $65; //@line 1506
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 1506
      $$1160 = $$0159; //@line 1506
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 1511
      $$1149 = $or$cond ? $$0148 : 1; //@line 1516
      $$1153 = $$0152; //@line 1516
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 1516
      $$1160 = $$0159; //@line 1516
      break;
     }
    }
   } while (0);
   $72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0; //@line 1521
   $$1147 = $$0146; //@line 1523
   $$2150 = $$1149; //@line 1523
   $$2154 = $$1153; //@line 1523
   $$2157 = $$1156; //@line 1523
   $$2161 = $$1160; //@line 1523
   $$3145 = 1; //@line 1523
   $211 = $96; //@line 1523
   $212 = $98; //@line 1523
   $213 = $72; //@line 1523
   $214 = tempRet0; //@line 1523
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 1525
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 1530
   $$0146 = $$1147; //@line 1533
   $$0148 = $$2150; //@line 1533
   $$0152 = $$2154; //@line 1533
   $$0155 = $$2157; //@line 1533
   $$0159 = $$2161; //@line 1533
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 1533
   $$2144 = $$3145; //@line 1533
   $51 = $214; //@line 1533
   $53 = $213; //@line 1533
   $96 = $211; //@line 1533
   $98 = $212; //@line 1533
   continue;
  } else {
   $$0146 = $$1147; //@line 1537
   $$0148 = $$2150; //@line 1537
   $$0152 = $$2154; //@line 1537
   $$0155 = $$2157; //@line 1537
   $$0159 = $$2161; //@line 1537
   $$2 = ___shgetc($0) | 0; //@line 1537
   $$2144 = $$3145; //@line 1537
   $51 = $214; //@line 1537
   $53 = $213; //@line 1537
   $96 = $211; //@line 1537
   $98 = $212; //@line 1537
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 1545
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 1549
   }
   if (!$4) {
    ___shlim($0, 0); //@line 1553
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 1558
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 1565
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 1570
  } else {
   $94 = ($$0146 | 0) == 0; //@line 1572
   $95 = $94 ? $53 : $96; //@line 1573
   $97 = $94 ? $51 : $98; //@line 1574
   if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 1581
    $105 = $53; //@line 1581
    $106 = $51; //@line 1581
    while (1) {
     $104 = $$3162183 << 4; //@line 1583
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 1584
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 1594
      break;
     } else {
      $$3162183 = $104; //@line 1592
      $106 = tempRet0; //@line 1592
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 1599
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 1604
    $117 = tempRet0; //@line 1605
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 1612
      $$0165 = 0.0; //@line 1613
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 1619
      $135 = 0; //@line 1619
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 1623
      $134 = 0; //@line 1624
      $135 = 0; //@line 1624
     }
    } else {
     $134 = $116; //@line 1627
     $135 = $117; //@line 1627
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 1633
     $135 = 0; //@line 1633
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 1637
     $134 = 0; //@line 1638
     $135 = 0; //@line 1638
    }
   }
   $130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0; //@line 1641
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 1643
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 1645
   $137 = tempRet0; //@line 1646
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 1651
    break;
   }
   $141 = 0 - $2 | 0; //@line 1654
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 1656
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 1664
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 1668
    break;
   }
   $153 = $2 + -106 | 0; //@line 1671
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 1673
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 1681
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 1685
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 1690
    $$4163178 = $$3162$lcssa; //@line 1690
    $170 = $136; //@line 1690
    $171 = $137; //@line 1690
    while (1) {
     $166 = !($$3158179 >= .5); //@line 1692
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 1697
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 1699
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 1700
     $173 = tempRet0; //@line 1701
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 1704
      $$4163178 = $$5164; //@line 1704
      $170 = $172; //@line 1704
      $171 = $173; //@line 1704
     } else {
      $$3158$lcssa = $$4; //@line 1706
      $$4163$lcssa = $$5164; //@line 1706
      $181 = $172; //@line 1706
      $182 = $173; //@line 1706
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 1711
    $$4163$lcssa = $$3162$lcssa; //@line 1711
    $181 = $136; //@line 1711
    $182 = $137; //@line 1711
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 1714
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 1717
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 1719
   $184 = tempRet0; //@line 1720
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 1729
     label = 59; //@line 1730
    } else {
     $$0166170 = 0; //@line 1732
     $194 = 84; //@line 1732
     label = 61; //@line 1733
    }
   } else {
    $$0166 = $1; //@line 1736
    label = 59; //@line 1737
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 1743
     $194 = 84 - $$0166 | 0; //@line 1743
     label = 61; //@line 1744
    } else {
     $$0151 = 0.0; //@line 1747
     $$0166169 = $$0166; //@line 1747
     $$pre$phi201Z2D = +($3 | 0); //@line 1747
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 1751
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 1754
    $$0166169 = $$0166170; //@line 1754
    $$pre$phi201Z2D = $193; //@line 1754
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 1761
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 1770
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 1774
   }
   $$0165 = +_scalbnl($207, $181); //@line 1777
  }
 } while (0);
 return +$$0165;
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6403
 STACKTOP = STACKTOP + 1056 | 0; //@line 6404
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 6404
 $2 = sp + 1024 | 0; //@line 6405
 $3 = sp; //@line 6406
 HEAP32[$2 >> 2] = 0; //@line 6407
 HEAP32[$2 + 4 >> 2] = 0; //@line 6407
 HEAP32[$2 + 8 >> 2] = 0; //@line 6407
 HEAP32[$2 + 12 >> 2] = 0; //@line 6407
 HEAP32[$2 + 16 >> 2] = 0; //@line 6407
 HEAP32[$2 + 20 >> 2] = 0; //@line 6407
 HEAP32[$2 + 24 >> 2] = 0; //@line 6407
 HEAP32[$2 + 28 >> 2] = 0; //@line 6407
 $4 = HEAP8[$1 >> 0] | 0; //@line 6408
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 6412
   $$0185$ph$lcssa327 = -1; //@line 6412
   $$0187219$ph325326 = 0; //@line 6412
   $$1176$ph$ph$lcssa208 = 1; //@line 6412
   $$1186$ph$lcssa = -1; //@line 6412
   label = 26; //@line 6413
  } else {
   $$0187263 = 0; //@line 6415
   $10 = $4; //@line 6415
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 6421
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 6429
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 6432
    $$0187263 = $$0187263 + 1 | 0; //@line 6433
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 6436
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 6438
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 6446
   if ($23) {
    $$0183$ph260 = 0; //@line 6448
    $$0185$ph259 = -1; //@line 6448
    $130 = 1; //@line 6448
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 6450
     $$0183$ph197$ph253 = $$0183$ph260; //@line 6450
     $131 = $130; //@line 6450
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 6452
      $132 = $131; //@line 6452
      L10 : while (1) {
       $$0179242 = 1; //@line 6454
       $25 = $132; //@line 6454
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 6458
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 6460
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 6466
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 6470
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 6475
         $$0185$ph$lcssa = $$0185$ph259; //@line 6475
         break L6;
        } else {
         $25 = $27; //@line 6473
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 6479
       $132 = $37 + 1 | 0; //@line 6480
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 6485
        $$0185$ph$lcssa = $$0185$ph259; //@line 6485
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 6483
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 6490
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 6494
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 6499
       $$0185$ph$lcssa = $$0185$ph259; //@line 6499
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 6497
       $$0183$ph197$ph253 = $25; //@line 6497
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 6504
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 6509
      $$0185$ph$lcssa = $$0183$ph197248; //@line 6509
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 6507
      $$0185$ph259 = $$0183$ph197248; //@line 6507
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 6514
     $$1186$ph238 = -1; //@line 6514
     $133 = 1; //@line 6514
     while (1) {
      $$1176$ph$ph233 = 1; //@line 6516
      $$1184$ph193$ph232 = $$1184$ph239; //@line 6516
      $135 = $133; //@line 6516
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 6518
       $134 = $135; //@line 6518
       L25 : while (1) {
        $$1180222 = 1; //@line 6520
        $52 = $134; //@line 6520
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 6524
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 6526
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 6532
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 6536
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 6541
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 6541
          $$0187219$ph325326 = $$0187263; //@line 6541
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 6541
          $$1186$ph$lcssa = $$1186$ph238; //@line 6541
          label = 26; //@line 6542
          break L1;
         } else {
          $52 = $45; //@line 6539
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 6546
        $134 = $56 + 1 | 0; //@line 6547
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 6552
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 6552
         $$0187219$ph325326 = $$0187263; //@line 6552
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 6552
         $$1186$ph$lcssa = $$1186$ph238; //@line 6552
         label = 26; //@line 6553
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 6550
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 6558
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 6562
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 6567
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 6567
        $$0187219$ph325326 = $$0187263; //@line 6567
        $$1176$ph$ph$lcssa208 = $60; //@line 6567
        $$1186$ph$lcssa = $$1186$ph238; //@line 6567
        label = 26; //@line 6568
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 6565
        $$1184$ph193$ph232 = $52; //@line 6565
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 6573
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 6578
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 6578
       $$0187219$ph325326 = $$0187263; //@line 6578
       $$1176$ph$ph$lcssa208 = 1; //@line 6578
       $$1186$ph$lcssa = $$1184$ph193227; //@line 6578
       label = 26; //@line 6579
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 6576
       $$1186$ph238 = $$1184$ph193227; //@line 6576
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 6584
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 6584
     $$0187219$ph325326 = $$0187263; //@line 6584
     $$1176$ph$ph$lcssa208 = 1; //@line 6584
     $$1186$ph$lcssa = -1; //@line 6584
     label = 26; //@line 6585
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 6588
    $$0185$ph$lcssa327 = -1; //@line 6588
    $$0187219$ph325326 = $$0187263; //@line 6588
    $$1176$ph$ph$lcssa208 = 1; //@line 6588
    $$1186$ph$lcssa = -1; //@line 6588
    label = 26; //@line 6589
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 6597
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 6598
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 6599
   $70 = $$1186$$0185 + 1 | 0; //@line 6601
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 6606
    $$3178 = $$1176$$0175; //@line 6606
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 6609
    $$0168 = 0; //@line 6613
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 6613
   }
   $78 = $$0187219$ph325326 | 63; //@line 6615
   $79 = $$0187219$ph325326 + -1 | 0; //@line 6616
   $80 = ($$0168 | 0) != 0; //@line 6617
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 6618
   $$0166 = $0; //@line 6619
   $$0169 = 0; //@line 6619
   $$0170 = $0; //@line 6619
   while (1) {
    $83 = $$0166; //@line 6622
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 6627
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 6631
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 6638
        break L35;
       } else {
        $$3173 = $86; //@line 6641
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 6646
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 6650
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 6662
      $$2181$sink = $$0187219$ph325326; //@line 6662
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 6667
      if ($105 | 0) {
       $$0169$be = 0; //@line 6675
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 6675
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 6679
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 6681
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 6685
       } else {
        $$3182221 = $111; //@line 6687
        $$pr = $113; //@line 6687
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 6695
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 6697
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 6700
          break L54;
         } else {
          $$3182221 = $118; //@line 6703
         }
        }
        $$0169$be = 0; //@line 6707
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 6707
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 6714
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 6717
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 6726
        $$2181$sink = $$3178; //@line 6726
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 6733
    $$0169 = $$0169$be; //@line 6733
    $$0170 = $$3173; //@line 6733
   }
  }
 } while (0);
 STACKTOP = sp; //@line 6737
 return $$3 | 0; //@line 6737
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$011 = 0, $$013 = 0, $$112 = 0, $$byval_copy42 = 0, $104 = 0, $107 = 0, $112 = 0, $115 = 0, $13 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $44 = 0, $5 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $94 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9891
 STACKTOP = STACKTOP + 224 | 0; //@line 9892
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 9892
 $$byval_copy42 = sp + 204 | 0; //@line 9893
 $4 = sp + 120 | 0; //@line 9894
 $5 = sp + 184 | 0; //@line 9895
 $6 = sp + 56 | 0; //@line 9896
 $7 = sp + 32 | 0; //@line 9897
 $8 = sp + 16 | 0; //@line 9898
 $9 = sp; //@line 9899
 HEAP32[$5 >> 2] = 0; //@line 9900
 HEAP32[$5 + 4 >> 2] = 0; //@line 9900
 HEAP32[$5 + 8 >> 2] = 0; //@line 9900
 HEAP32[$5 + 12 >> 2] = 0; //@line 9900
 HEAP32[$5 + 16 >> 2] = 0; //@line 9900
 HEAP32[$$byval_copy42 >> 2] = HEAP32[$5 >> 2]; //@line 9901
 HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 9901
 HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 9901
 HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 9901
 HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 9901
 __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy42, 0); //@line 9902
 if (!(HEAP8[$1 >> 0] | 0)) {
  $$013 = -3003; //@line 9906
  STACKTOP = sp; //@line 9907
  return $$013 | 0; //@line 9907
 }
 $13 = ($3 | 0) == 0; //@line 9910
 if (__ZN13SocketAddress14set_ip_addressEPKc($4, $1) | 0) {
  if (!$13) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($4) | 0) != ($3 | 0)) {
    $$013 = -3009; //@line 9916
    STACKTOP = sp; //@line 9917
    return $$013 | 0; //@line 9917
   }
  }
  $16 = $2 + 12 | 0; //@line 9920
  $17 = HEAP32[$16 >> 2] | 0; //@line 9921
  do {
   if (!$17) {
    $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9925
    _mbed_assert_internal(5972, 5977, 1677); //@line 9926
    if (___async) {
     HEAP32[$AsyncCtx31 >> 2] = 100; //@line 9929
     HEAP32[$AsyncCtx31 + 4 >> 2] = $16; //@line 9931
     HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 9933
     HEAP32[$AsyncCtx31 + 12 >> 2] = $4; //@line 9935
     HEAP32[$AsyncCtx31 + 16 >> 2] = $4; //@line 9937
     sp = STACKTOP; //@line 9938
     STACKTOP = sp; //@line 9939
     return 0; //@line 9939
    } else {
     _emscripten_free_async_context($AsyncCtx31 | 0); //@line 9941
     $24 = HEAP32[$16 >> 2] | 0; //@line 9943
     break;
    }
   } else {
    $24 = $17; //@line 9947
   }
  } while (0);
  $23 = HEAP32[$24 >> 2] | 0; //@line 9950
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9951
  FUNCTION_TABLE_viii[$23 & 0]($2, 0, $4); //@line 9952
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 101; //@line 9955
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 9957
   sp = STACKTOP; //@line 9958
   STACKTOP = sp; //@line 9959
   return 0; //@line 9959
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9961
  $$013 = 0; //@line 9962
  STACKTOP = sp; //@line 9963
  return $$013 | 0; //@line 9963
 }
 if ($13) {
  HEAP32[$7 >> 2] = 0; //@line 9966
  HEAP32[$7 + 4 >> 2] = 0; //@line 9966
  HEAP32[$7 + 8 >> 2] = 0; //@line 9966
  HEAP32[$7 + 12 >> 2] = 0; //@line 9966
  HEAP32[$7 + 16 >> 2] = 0; //@line 9966
  HEAP32[$$byval_copy42 >> 2] = HEAP32[$7 >> 2]; //@line 9967
  HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 9967
  HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 9967
  HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 9967
  HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 9967
  __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy42, 0); //@line 9968
  $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 9971
  $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 9972
  $29 = FUNCTION_TABLE_ii[$28 & 31]($0) | 0; //@line 9973
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 102; //@line 9976
   HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 9978
   HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 9980
   HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 9982
   HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 9984
   HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 9986
   HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 9988
   HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 9990
   HEAP32[$AsyncCtx2 + 32 >> 2] = $$byval_copy42; //@line 9992
   HEAP32[$AsyncCtx2 + 36 >> 2] = $3; //@line 9994
   HEAP32[$AsyncCtx2 + 40 >> 2] = $6; //@line 9996
   sp = STACKTOP; //@line 9997
   STACKTOP = sp; //@line 9998
   return 0; //@line 9998
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10000
  if (__ZN13SocketAddress14set_ip_addressEPKc($6, $29) | 0) {
   $$011 = __ZNK13SocketAddress14get_ip_versionEv($6) | 0; //@line 10004
  } else {
   $$011 = 0; //@line 10006
  }
  $$112 = $$011; //@line 10008
 } else {
  $$112 = $3; //@line 10010
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 96 >> 2] | 0; //@line 10014
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10015
 FUNCTION_TABLE_vii[$44 & 7]($$byval_copy42, $0); //@line 10016
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 103; //@line 10019
  HEAP32[$AsyncCtx6 + 4 >> 2] = $2; //@line 10021
  HEAP32[$AsyncCtx6 + 8 >> 2] = $4; //@line 10023
  HEAP32[$AsyncCtx6 + 12 >> 2] = $$byval_copy42; //@line 10025
  HEAP32[$AsyncCtx6 + 16 >> 2] = $8; //@line 10027
  HEAP32[$AsyncCtx6 + 20 >> 2] = $9; //@line 10029
  HEAP32[$AsyncCtx6 + 24 >> 2] = $0; //@line 10031
  HEAP32[$AsyncCtx6 + 28 >> 2] = $1; //@line 10033
  HEAP32[$AsyncCtx6 + 32 >> 2] = $$112; //@line 10035
  HEAP32[$AsyncCtx6 + 36 >> 2] = $$byval_copy42; //@line 10037
  sp = STACKTOP; //@line 10038
  STACKTOP = sp; //@line 10039
  return 0; //@line 10039
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10041
 $54 = $2 + 12 | 0; //@line 10042
 $55 = HEAP32[$54 >> 2] | 0; //@line 10043
 do {
  if (!$55) {
   $69 = 0; //@line 10047
  } else {
   $58 = HEAP32[$55 + 4 >> 2] | 0; //@line 10050
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10051
   FUNCTION_TABLE_vii[$58 & 7]($8, $2); //@line 10052
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 104; //@line 10055
    HEAP32[$AsyncCtx9 + 4 >> 2] = $4; //@line 10057
    HEAP32[$AsyncCtx9 + 8 >> 2] = $$byval_copy42; //@line 10059
    HEAP32[$AsyncCtx9 + 12 >> 2] = $54; //@line 10061
    HEAP32[$AsyncCtx9 + 16 >> 2] = $8; //@line 10063
    HEAP32[$AsyncCtx9 + 20 >> 2] = $9; //@line 10065
    HEAP32[$AsyncCtx9 + 24 >> 2] = $0; //@line 10067
    HEAP32[$AsyncCtx9 + 28 >> 2] = $1; //@line 10069
    HEAP32[$AsyncCtx9 + 32 >> 2] = $$112; //@line 10071
    HEAP32[$AsyncCtx9 + 36 >> 2] = $$byval_copy42; //@line 10073
    sp = STACKTOP; //@line 10074
    STACKTOP = sp; //@line 10075
    return 0; //@line 10075
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10077
    $69 = HEAP32[$54 >> 2] | 0; //@line 10079
    break;
   }
  }
 } while (0);
 $68 = $8 + 12 | 0; //@line 10084
 HEAP32[$68 >> 2] = $69; //@line 10085
 $70 = $$byval_copy42 + 12 | 0; //@line 10086
 $71 = HEAP32[$70 >> 2] | 0; //@line 10087
 do {
  if (!$71) {
   $85 = 0; //@line 10091
  } else {
   $74 = HEAP32[$71 + 4 >> 2] | 0; //@line 10094
   $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10095
   FUNCTION_TABLE_vii[$74 & 7]($9, $$byval_copy42); //@line 10096
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 105; //@line 10099
    HEAP32[$AsyncCtx12 + 4 >> 2] = $70; //@line 10101
    HEAP32[$AsyncCtx12 + 8 >> 2] = $4; //@line 10103
    HEAP32[$AsyncCtx12 + 12 >> 2] = $$byval_copy42; //@line 10105
    HEAP32[$AsyncCtx12 + 16 >> 2] = $8; //@line 10107
    HEAP32[$AsyncCtx12 + 20 >> 2] = $68; //@line 10109
    HEAP32[$AsyncCtx12 + 24 >> 2] = $9; //@line 10111
    HEAP32[$AsyncCtx12 + 28 >> 2] = $0; //@line 10113
    HEAP32[$AsyncCtx12 + 32 >> 2] = $1; //@line 10115
    HEAP32[$AsyncCtx12 + 36 >> 2] = $$112; //@line 10117
    sp = STACKTOP; //@line 10118
    STACKTOP = sp; //@line 10119
    return 0; //@line 10119
   } else {
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 10121
    $85 = HEAP32[$70 >> 2] | 0; //@line 10123
    break;
   }
  }
 } while (0);
 $84 = $9 + 12 | 0; //@line 10128
 HEAP32[$84 >> 2] = $85; //@line 10129
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10130
 $86 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $8, $9, $$112) | 0; //@line 10131
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 106; //@line 10134
  HEAP32[$AsyncCtx27 + 4 >> 2] = $84; //@line 10136
  HEAP32[$AsyncCtx27 + 8 >> 2] = $68; //@line 10138
  HEAP32[$AsyncCtx27 + 12 >> 2] = $9; //@line 10140
  HEAP32[$AsyncCtx27 + 16 >> 2] = $70; //@line 10142
  HEAP32[$AsyncCtx27 + 20 >> 2] = $8; //@line 10144
  HEAP32[$AsyncCtx27 + 24 >> 2] = $$byval_copy42; //@line 10146
  HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 10148
  sp = STACKTOP; //@line 10149
  STACKTOP = sp; //@line 10150
  return 0; //@line 10150
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 10152
 $94 = HEAP32[$84 >> 2] | 0; //@line 10153
 do {
  if ($94 | 0) {
   $97 = HEAP32[$94 + 8 >> 2] | 0; //@line 10158
   $AsyncCtx16 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10159
   FUNCTION_TABLE_vi[$97 & 511]($9); //@line 10160
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 107; //@line 10163
    HEAP32[$AsyncCtx16 + 4 >> 2] = $68; //@line 10165
    HEAP32[$AsyncCtx16 + 8 >> 2] = $70; //@line 10167
    HEAP32[$AsyncCtx16 + 12 >> 2] = $8; //@line 10169
    HEAP32[$AsyncCtx16 + 16 >> 2] = $$byval_copy42; //@line 10171
    HEAP32[$AsyncCtx16 + 20 >> 2] = $86; //@line 10173
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 10175
    sp = STACKTOP; //@line 10176
    STACKTOP = sp; //@line 10177
    return 0; //@line 10177
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 10179
    break;
   }
  }
 } while (0);
 $104 = HEAP32[$68 >> 2] | 0; //@line 10184
 do {
  if ($104 | 0) {
   $107 = HEAP32[$104 + 8 >> 2] | 0; //@line 10189
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10190
   FUNCTION_TABLE_vi[$107 & 511]($8); //@line 10191
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 108; //@line 10194
    HEAP32[$AsyncCtx20 + 4 >> 2] = $70; //@line 10196
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$byval_copy42; //@line 10198
    HEAP32[$AsyncCtx20 + 12 >> 2] = $86; //@line 10200
    HEAP32[$AsyncCtx20 + 16 >> 2] = $4; //@line 10202
    sp = STACKTOP; //@line 10203
    STACKTOP = sp; //@line 10204
    return 0; //@line 10204
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 10206
    break;
   }
  }
 } while (0);
 $112 = HEAP32[$70 >> 2] | 0; //@line 10211
 do {
  if ($112 | 0) {
   $115 = HEAP32[$112 + 8 >> 2] | 0; //@line 10216
   $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10217
   FUNCTION_TABLE_vi[$115 & 511]($$byval_copy42); //@line 10218
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 109; //@line 10221
    HEAP32[$AsyncCtx24 + 4 >> 2] = $$byval_copy42; //@line 10223
    HEAP32[$AsyncCtx24 + 8 >> 2] = $86; //@line 10225
    HEAP32[$AsyncCtx24 + 12 >> 2] = $4; //@line 10227
    sp = STACKTOP; //@line 10228
    STACKTOP = sp; //@line 10229
    return 0; //@line 10229
   } else {
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10231
    break;
   }
  }
 } while (0);
 $$013 = $86; //@line 10236
 STACKTOP = sp; //@line 10237
 return $$013 | 0; //@line 10237
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_59($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11473
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11475
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11477
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11479
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11481
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11483
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11485
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11487
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11489
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11491
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11493
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11495
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11497
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11499
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11501
 $30 = HEAP16[$0 + 60 >> 1] | 0; //@line 11503
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11505
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11507
 $49 = $2 + 64 | 0; //@line 11508
 HEAP32[$49 >> 2] = $AsyncRetVal; //@line 11509
 $51 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($20, $30, $2 + 68 | 0, $AsyncRetVal, $32) | 0; //@line 11511
 if (($51 | 0) < 0) {
  $53 = HEAP32[$49 >> 2] | 0; //@line 11514
  if ($53 | 0) {
   __ZdaPv($53); //@line 11517
  }
  HEAP32[$49 >> 2] = 0; //@line 11519
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 11520
  $34 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($28, 0, $20, 512) | 0; //@line 11521
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 255; //@line 11524
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 11525
   HEAP32[$35 >> 2] = $4; //@line 11526
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 11527
   HEAP32[$36 >> 2] = $6; //@line 11528
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 11529
   HEAP32[$37 >> 2] = $8; //@line 11530
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 11531
   HEAP32[$38 >> 2] = $10; //@line 11532
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 11533
   HEAP32[$39 >> 2] = $12; //@line 11534
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 11535
   HEAP32[$40 >> 2] = $14; //@line 11536
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 11537
   HEAP32[$41 >> 2] = $16; //@line 11538
   $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 11539
   HEAP32[$42 >> 2] = $18; //@line 11540
   $43 = $ReallocAsyncCtx6 + 36 | 0; //@line 11541
   HEAP32[$43 >> 2] = $20; //@line 11542
   $44 = $ReallocAsyncCtx6 + 40 | 0; //@line 11543
   HEAP32[$44 >> 2] = $22; //@line 11544
   $45 = $ReallocAsyncCtx6 + 44 | 0; //@line 11545
   HEAP32[$45 >> 2] = $24; //@line 11546
   $46 = $ReallocAsyncCtx6 + 48 | 0; //@line 11547
   HEAP32[$46 >> 2] = $26; //@line 11548
   $47 = $ReallocAsyncCtx6 + 52 | 0; //@line 11549
   HEAP32[$47 >> 2] = $28; //@line 11550
   sp = STACKTOP; //@line 11551
   return;
  }
  HEAP32[___async_retval >> 2] = $34; //@line 11555
  ___async_unwind = 0; //@line 11556
  HEAP32[$ReallocAsyncCtx6 >> 2] = 255; //@line 11557
  $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 11558
  HEAP32[$35 >> 2] = $4; //@line 11559
  $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 11560
  HEAP32[$36 >> 2] = $6; //@line 11561
  $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 11562
  HEAP32[$37 >> 2] = $8; //@line 11563
  $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 11564
  HEAP32[$38 >> 2] = $10; //@line 11565
  $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 11566
  HEAP32[$39 >> 2] = $12; //@line 11567
  $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 11568
  HEAP32[$40 >> 2] = $14; //@line 11569
  $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 11570
  HEAP32[$41 >> 2] = $16; //@line 11571
  $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 11572
  HEAP32[$42 >> 2] = $18; //@line 11573
  $43 = $ReallocAsyncCtx6 + 36 | 0; //@line 11574
  HEAP32[$43 >> 2] = $20; //@line 11575
  $44 = $ReallocAsyncCtx6 + 40 | 0; //@line 11576
  HEAP32[$44 >> 2] = $22; //@line 11577
  $45 = $ReallocAsyncCtx6 + 44 | 0; //@line 11578
  HEAP32[$45 >> 2] = $24; //@line 11579
  $46 = $ReallocAsyncCtx6 + 48 | 0; //@line 11580
  HEAP32[$46 >> 2] = $26; //@line 11581
  $47 = $ReallocAsyncCtx6 + 52 | 0; //@line 11582
  HEAP32[$47 >> 2] = $28; //@line 11583
  sp = STACKTOP; //@line 11584
  return;
 }
 HEAP8[$2 + 86 >> 0] = $51; //@line 11589
 HEAP32[$2 + 4 >> 2] = -3009; //@line 11591
 HEAP32[$2 + 76 >> 2] = 0; //@line 11593
 $59 = $2 + 44 | 0; //@line 11594
 $60 = HEAP32[$59 >> 2] | 0; //@line 11595
 if (!$60) {
  HEAP32[$8 >> 2] = 0; //@line 11598
  $80 = HEAP32[$2 >> 2] | 0; //@line 11599
  HEAP32[$10 >> 2] = 0; //@line 11600
  HEAP32[$12 >> 2] = 187; //@line 11601
  HEAP32[$14 >> 2] = $80; //@line 11602
  HEAP32[$6 >> 2] = 724; //@line 11603
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 11604
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 11605
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 258; //@line 11608
   $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 11609
   HEAP32[$81 >> 2] = $4; //@line 11610
   $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 11611
   HEAP32[$82 >> 2] = $6; //@line 11612
   $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 11613
   HEAP32[$83 >> 2] = $8; //@line 11614
   $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 11615
   HEAP32[$84 >> 2] = $10; //@line 11616
   $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 11617
   HEAP32[$85 >> 2] = $12; //@line 11618
   $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 11619
   HEAP32[$86 >> 2] = $14; //@line 11620
   $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 11621
   HEAP32[$87 >> 2] = $16; //@line 11622
   $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 11623
   HEAP32[$88 >> 2] = $18; //@line 11624
   $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 11625
   HEAP32[$89 >> 2] = $20; //@line 11626
   $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 11627
   HEAP32[$90 >> 2] = $22; //@line 11628
   $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 11629
   HEAP32[$91 >> 2] = $24; //@line 11630
   $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 11631
   HEAP32[$92 >> 2] = $26; //@line 11632
   $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 11633
   HEAP32[$93 >> 2] = $28; //@line 11634
   sp = STACKTOP; //@line 11635
   return;
  }
  ___async_unwind = 0; //@line 11638
  HEAP32[$ReallocAsyncCtx5 >> 2] = 258; //@line 11639
  $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 11640
  HEAP32[$81 >> 2] = $4; //@line 11641
  $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 11642
  HEAP32[$82 >> 2] = $6; //@line 11643
  $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 11644
  HEAP32[$83 >> 2] = $8; //@line 11645
  $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 11646
  HEAP32[$84 >> 2] = $10; //@line 11647
  $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 11648
  HEAP32[$85 >> 2] = $12; //@line 11649
  $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 11650
  HEAP32[$86 >> 2] = $14; //@line 11651
  $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 11652
  HEAP32[$87 >> 2] = $16; //@line 11653
  $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 11654
  HEAP32[$88 >> 2] = $18; //@line 11655
  $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 11656
  HEAP32[$89 >> 2] = $20; //@line 11657
  $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 11658
  HEAP32[$90 >> 2] = $22; //@line 11659
  $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 11660
  HEAP32[$91 >> 2] = $24; //@line 11661
  $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 11662
  HEAP32[$92 >> 2] = $26; //@line 11663
  $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 11664
  HEAP32[$93 >> 2] = $28; //@line 11665
  sp = STACKTOP; //@line 11666
  return;
 } else {
  $64 = HEAP32[$60 + 4 >> 2] | 0; //@line 11671
  $ReallocAsyncCtx = _emscripten_realloc_async_context(64) | 0; //@line 11672
  FUNCTION_TABLE_vii[$64 & 7]($4, $2 + 32 | 0); //@line 11673
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 257; //@line 11676
   $65 = $ReallocAsyncCtx + 4 | 0; //@line 11677
   HEAP32[$65 >> 2] = $4; //@line 11678
   $66 = $ReallocAsyncCtx + 8 | 0; //@line 11679
   HEAP32[$66 >> 2] = $6; //@line 11680
   $67 = $ReallocAsyncCtx + 12 | 0; //@line 11681
   HEAP32[$67 >> 2] = $8; //@line 11682
   $68 = $ReallocAsyncCtx + 16 | 0; //@line 11683
   HEAP32[$68 >> 2] = $2; //@line 11684
   $69 = $ReallocAsyncCtx + 20 | 0; //@line 11685
   HEAP32[$69 >> 2] = $10; //@line 11686
   $70 = $ReallocAsyncCtx + 24 | 0; //@line 11687
   HEAP32[$70 >> 2] = $12; //@line 11688
   $71 = $ReallocAsyncCtx + 28 | 0; //@line 11689
   HEAP32[$71 >> 2] = $14; //@line 11690
   $72 = $ReallocAsyncCtx + 32 | 0; //@line 11691
   HEAP32[$72 >> 2] = $16; //@line 11692
   $73 = $ReallocAsyncCtx + 36 | 0; //@line 11693
   HEAP32[$73 >> 2] = $18; //@line 11694
   $74 = $ReallocAsyncCtx + 40 | 0; //@line 11695
   HEAP32[$74 >> 2] = $20; //@line 11696
   $75 = $ReallocAsyncCtx + 44 | 0; //@line 11697
   HEAP32[$75 >> 2] = $22; //@line 11698
   $76 = $ReallocAsyncCtx + 48 | 0; //@line 11699
   HEAP32[$76 >> 2] = $24; //@line 11700
   $77 = $ReallocAsyncCtx + 52 | 0; //@line 11701
   HEAP32[$77 >> 2] = $26; //@line 11702
   $78 = $ReallocAsyncCtx + 56 | 0; //@line 11703
   HEAP32[$78 >> 2] = $59; //@line 11704
   $79 = $ReallocAsyncCtx + 60 | 0; //@line 11705
   HEAP32[$79 >> 2] = $28; //@line 11706
   sp = STACKTOP; //@line 11707
   return;
  }
  ___async_unwind = 0; //@line 11710
  HEAP32[$ReallocAsyncCtx >> 2] = 257; //@line 11711
  $65 = $ReallocAsyncCtx + 4 | 0; //@line 11712
  HEAP32[$65 >> 2] = $4; //@line 11713
  $66 = $ReallocAsyncCtx + 8 | 0; //@line 11714
  HEAP32[$66 >> 2] = $6; //@line 11715
  $67 = $ReallocAsyncCtx + 12 | 0; //@line 11716
  HEAP32[$67 >> 2] = $8; //@line 11717
  $68 = $ReallocAsyncCtx + 16 | 0; //@line 11718
  HEAP32[$68 >> 2] = $2; //@line 11719
  $69 = $ReallocAsyncCtx + 20 | 0; //@line 11720
  HEAP32[$69 >> 2] = $10; //@line 11721
  $70 = $ReallocAsyncCtx + 24 | 0; //@line 11722
  HEAP32[$70 >> 2] = $12; //@line 11723
  $71 = $ReallocAsyncCtx + 28 | 0; //@line 11724
  HEAP32[$71 >> 2] = $14; //@line 11725
  $72 = $ReallocAsyncCtx + 32 | 0; //@line 11726
  HEAP32[$72 >> 2] = $16; //@line 11727
  $73 = $ReallocAsyncCtx + 36 | 0; //@line 11728
  HEAP32[$73 >> 2] = $18; //@line 11729
  $74 = $ReallocAsyncCtx + 40 | 0; //@line 11730
  HEAP32[$74 >> 2] = $20; //@line 11731
  $75 = $ReallocAsyncCtx + 44 | 0; //@line 11732
  HEAP32[$75 >> 2] = $22; //@line 11733
  $76 = $ReallocAsyncCtx + 48 | 0; //@line 11734
  HEAP32[$76 >> 2] = $24; //@line 11735
  $77 = $ReallocAsyncCtx + 52 | 0; //@line 11736
  HEAP32[$77 >> 2] = $26; //@line 11737
  $78 = $ReallocAsyncCtx + 56 | 0; //@line 11738
  HEAP32[$78 >> 2] = $59; //@line 11739
  $79 = $ReallocAsyncCtx + 60 | 0; //@line 11740
  HEAP32[$79 >> 2] = $28; //@line 11741
  sp = STACKTOP; //@line 11742
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_211($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $105 = 0, $108 = 0, $110 = 0, $118 = 0, $121 = 0, $123 = 0, $131 = 0, $134 = 0, $136 = 0, $14 = 0, $149 = 0, $150 = 0, $151 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $48 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $95 = 0, $97 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30780
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30782
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30784
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30786
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30788
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30790
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30794
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30796
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30800
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30802
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30804
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30806
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] >> 2]; //@line 30808
 HEAP32[$2 + 8 >> 2] = $4; //@line 30810
 HEAP32[$2 + 48 >> 2] = $6; //@line 30812
 HEAP32[$2 + 52 >> 2] = $8; //@line 30814
 $30 = $2 + 56 | 0; //@line 30815
 HEAP32[$30 >> 2] = 0; //@line 30816
 $31 = $2 + 60 | 0; //@line 30817
 HEAP32[$31 >> 2] = 0; //@line 30818
 HEAP32[$2 + 64 >> 2] = 0; //@line 30820
 HEAP8[$2 + 82 >> 0] = 0; //@line 30822
 HEAP8[$2 + 83 >> 0] = 1; //@line 30824
 HEAP8[$2 + 84 >> 0] = 3; //@line 30826
 HEAP8[$2 + 85 >> 0] = 0; //@line 30828
 HEAP16[$2 + 80 >> 1] = 0; //@line 30830
 HEAP32[$2 + 76 >> 2] = 0; //@line 30832
 $39 = $2 + 72 | 0; //@line 30833
 HEAP32[$39 >> 2] = 15500; //@line 30834
 HEAP8[$2 + 86 >> 0] = 0; //@line 30836
 HEAP32[$2 + 88 >> 2] = 0; //@line 30838
 $42 = HEAP32[177] | 0; //@line 30839
 HEAP32[177] = $42 + 1; //@line 30841
 HEAP32[$2 >> 2] = ($42 | 0) > 32767 ? 1 : $42; //@line 30844
 $45 = HEAP32[2509] | 0; //@line 30845
 if (!$45) {
  $$1 = 0; //@line 30848
  $95 = 0; //@line 30848
 } else {
  $48 = HEAP32[$45 + 56 >> 2] | 0; //@line 30851
  if (!$48) {
   $$1 = 1; //@line 30854
   $95 = 0; //@line 30854
  } else {
   if ((HEAP32[$45 + 8 >> 2] | 0) == ($4 | 0)) {
    HEAP32[$30 >> 2] = $48; //@line 30860
    HEAP32[$31 >> 2] = HEAP32[$45 + 60 >> 2]; //@line 30863
    $$1 = 1; //@line 30864
    $95 = $48; //@line 30864
   } else {
    $$1 = 1; //@line 30866
    $95 = 0; //@line 30866
   }
  }
 }
 $55 = HEAP32[2510] | 0; //@line 30870
 if (!$55) {
  $$1$1 = $$1; //@line 30873
  $108 = $95; //@line 30873
 } else {
  if (!$95) {
   $97 = HEAP32[$55 + 56 >> 2] | 0; //@line 30878
   if (!$97) {
    $149 = 0; //@line 30881
   } else {
    if ((HEAP32[$55 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$30 >> 2] = $97; //@line 30887
     HEAP32[$31 >> 2] = HEAP32[$55 + 60 >> 2]; //@line 30890
     $149 = $97; //@line 30891
    } else {
     $149 = 0; //@line 30893
    }
   }
  } else {
   $149 = $95; //@line 30897
  }
  $$1$1 = $$1 + 1 | 0; //@line 30900
  $108 = $149; //@line 30900
 }
 $105 = HEAP32[2511] | 0; //@line 30902
 if (!$105) {
  $$1$2 = $$1$1; //@line 30905
  $121 = $108; //@line 30905
 } else {
  if (!$108) {
   $110 = HEAP32[$105 + 56 >> 2] | 0; //@line 30910
   if (!$110) {
    $150 = 0; //@line 30913
   } else {
    if ((HEAP32[$105 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$30 >> 2] = $110; //@line 30919
     HEAP32[$31 >> 2] = HEAP32[$105 + 60 >> 2]; //@line 30922
     $150 = $110; //@line 30923
    } else {
     $150 = 0; //@line 30925
    }
   }
  } else {
   $150 = $108; //@line 30929
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 30932
  $121 = $150; //@line 30932
 }
 $118 = HEAP32[2512] | 0; //@line 30934
 if (!$118) {
  $$1$3 = $$1$2; //@line 30937
  $134 = $121; //@line 30937
 } else {
  if (!$121) {
   $123 = HEAP32[$118 + 56 >> 2] | 0; //@line 30942
   if (!$123) {
    $151 = 0; //@line 30945
   } else {
    if ((HEAP32[$118 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$30 >> 2] = $123; //@line 30951
     HEAP32[$31 >> 2] = HEAP32[$118 + 60 >> 2]; //@line 30954
     $151 = $123; //@line 30955
    } else {
     $151 = 0; //@line 30957
    }
   }
  } else {
   $151 = $121; //@line 30961
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 30964
  $134 = $151; //@line 30964
 }
 $131 = HEAP32[2513] | 0; //@line 30966
 if (!$131) {
  $$1$4 = $$1$3; //@line 30969
 } else {
  if (!$134) {
   $136 = HEAP32[$131 + 56 >> 2] | 0; //@line 30974
   if ($136 | 0) {
    if ((HEAP32[$131 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$30 >> 2] = $136; //@line 30981
     HEAP32[$31 >> 2] = HEAP32[$131 + 60 >> 2]; //@line 30984
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 30989
 }
 HEAP32[10036 + ($24 << 2) >> 2] = $2; //@line 30992
 HEAP32[$39 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 30995
 if (HEAP8[10976] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 30999
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 31000
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 31003
   $92 = $ReallocAsyncCtx13 + 4 | 0; //@line 31004
   HEAP32[$92 >> 2] = $2; //@line 31005
   $93 = $ReallocAsyncCtx13 + 8 | 0; //@line 31006
   HEAP32[$93 >> 2] = $10; //@line 31007
   sp = STACKTOP; //@line 31008
   return;
  }
  ___async_unwind = 0; //@line 31011
  HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 31012
  $92 = $ReallocAsyncCtx13 + 4 | 0; //@line 31013
  HEAP32[$92 >> 2] = $2; //@line 31014
  $93 = $ReallocAsyncCtx13 + 8 | 0; //@line 31015
  HEAP32[$93 >> 2] = $10; //@line 31016
  sp = STACKTOP; //@line 31017
  return;
 }
 $57 = $2 + 44 | 0; //@line 31020
 $58 = HEAP32[$57 >> 2] | 0; //@line 31021
 if (!$58) {
  $72 = $16 + 12 | 0; //@line 31024
  HEAP32[$72 >> 2] = 0; //@line 31025
  $74 = $14 + 4 | 0; //@line 31027
  HEAP32[$74 >> 2] = 0; //@line 31029
  HEAP32[$74 + 4 >> 2] = 0; //@line 31032
  HEAP32[$14 >> 2] = 3; //@line 31033
  $78 = $14 + 12 | 0; //@line 31034
  HEAP32[$78 >> 2] = 712; //@line 31035
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 31036
  $79 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 100, $14) | 0; //@line 31037
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 31040
   $80 = $ReallocAsyncCtx14 + 4 | 0; //@line 31041
   HEAP32[$80 >> 2] = $10; //@line 31042
   $81 = $ReallocAsyncCtx14 + 8 | 0; //@line 31043
   HEAP32[$81 >> 2] = $14; //@line 31044
   $82 = $ReallocAsyncCtx14 + 12 | 0; //@line 31045
   HEAP32[$82 >> 2] = $16; //@line 31046
   $83 = $ReallocAsyncCtx14 + 16 | 0; //@line 31047
   HEAP32[$83 >> 2] = $72; //@line 31048
   $84 = $ReallocAsyncCtx14 + 20 | 0; //@line 31049
   HEAP32[$84 >> 2] = $22; //@line 31050
   $85 = $ReallocAsyncCtx14 + 24 | 0; //@line 31051
   HEAP32[$85 >> 2] = $20; //@line 31052
   $86 = $ReallocAsyncCtx14 + 28 | 0; //@line 31053
   HEAP32[$86 >> 2] = $2; //@line 31054
   $87 = $ReallocAsyncCtx14 + 32 | 0; //@line 31055
   HEAP32[$87 >> 2] = $57; //@line 31056
   $88 = $ReallocAsyncCtx14 + 36 | 0; //@line 31057
   HEAP32[$88 >> 2] = $26; //@line 31058
   $89 = $ReallocAsyncCtx14 + 40 | 0; //@line 31059
   HEAP32[$89 >> 2] = $2; //@line 31060
   $90 = $ReallocAsyncCtx14 + 44 | 0; //@line 31061
   HEAP32[$90 >> 2] = $78; //@line 31062
   sp = STACKTOP; //@line 31063
   return;
  }
  HEAP32[___async_retval >> 2] = $79; //@line 31067
  ___async_unwind = 0; //@line 31068
  HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 31069
  $80 = $ReallocAsyncCtx14 + 4 | 0; //@line 31070
  HEAP32[$80 >> 2] = $10; //@line 31071
  $81 = $ReallocAsyncCtx14 + 8 | 0; //@line 31072
  HEAP32[$81 >> 2] = $14; //@line 31073
  $82 = $ReallocAsyncCtx14 + 12 | 0; //@line 31074
  HEAP32[$82 >> 2] = $16; //@line 31075
  $83 = $ReallocAsyncCtx14 + 16 | 0; //@line 31076
  HEAP32[$83 >> 2] = $72; //@line 31077
  $84 = $ReallocAsyncCtx14 + 20 | 0; //@line 31078
  HEAP32[$84 >> 2] = $22; //@line 31079
  $85 = $ReallocAsyncCtx14 + 24 | 0; //@line 31080
  HEAP32[$85 >> 2] = $20; //@line 31081
  $86 = $ReallocAsyncCtx14 + 28 | 0; //@line 31082
  HEAP32[$86 >> 2] = $2; //@line 31083
  $87 = $ReallocAsyncCtx14 + 32 | 0; //@line 31084
  HEAP32[$87 >> 2] = $57; //@line 31085
  $88 = $ReallocAsyncCtx14 + 36 | 0; //@line 31086
  HEAP32[$88 >> 2] = $26; //@line 31087
  $89 = $ReallocAsyncCtx14 + 40 | 0; //@line 31088
  HEAP32[$89 >> 2] = $2; //@line 31089
  $90 = $ReallocAsyncCtx14 + 44 | 0; //@line 31090
  HEAP32[$90 >> 2] = $78; //@line 31091
  sp = STACKTOP; //@line 31092
  return;
 } else {
  $61 = HEAP32[$58 + 4 >> 2] | 0; //@line 31096
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 31097
  FUNCTION_TABLE_vii[$61 & 7]($16, $20); //@line 31098
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 31101
   $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 31102
   HEAP32[$62 >> 2] = $10; //@line 31103
   $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 31104
   HEAP32[$63 >> 2] = $14; //@line 31105
   $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 31106
   HEAP32[$64 >> 2] = $57; //@line 31107
   $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 31108
   HEAP32[$65 >> 2] = $16; //@line 31109
   $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 31110
   HEAP32[$66 >> 2] = $22; //@line 31111
   $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 31112
   HEAP32[$67 >> 2] = $20; //@line 31113
   $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 31114
   HEAP32[$68 >> 2] = $2; //@line 31115
   $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 31116
   HEAP32[$69 >> 2] = $57; //@line 31117
   $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 31118
   HEAP32[$70 >> 2] = $26; //@line 31119
   $71 = $ReallocAsyncCtx6 + 40 | 0; //@line 31120
   HEAP32[$71 >> 2] = $2; //@line 31121
   sp = STACKTOP; //@line 31122
   return;
  }
  ___async_unwind = 0; //@line 31125
  HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 31126
  $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 31127
  HEAP32[$62 >> 2] = $10; //@line 31128
  $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 31129
  HEAP32[$63 >> 2] = $14; //@line 31130
  $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 31131
  HEAP32[$64 >> 2] = $57; //@line 31132
  $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 31133
  HEAP32[$65 >> 2] = $16; //@line 31134
  $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 31135
  HEAP32[$66 >> 2] = $22; //@line 31136
  $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 31137
  HEAP32[$67 >> 2] = $20; //@line 31138
  $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 31139
  HEAP32[$68 >> 2] = $2; //@line 31140
  $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 31141
  HEAP32[$69 >> 2] = $57; //@line 31142
  $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 31143
  HEAP32[$70 >> 2] = $26; //@line 31144
  $71 = $ReallocAsyncCtx6 + 40 | 0; //@line 31145
  HEAP32[$71 >> 2] = $2; //@line 31146
  sp = STACKTOP; //@line 31147
  return;
 }
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_170($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 26409
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26411
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26413
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26415
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26417
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26419
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26421
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26423
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26425
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26427
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26429
 if ($AsyncRetVal | 0) {
  $23 = HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] | 0; //@line 26434
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 26435
  FUNCTION_TABLE_vi[$23 & 511]($18); //@line 26436
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 218; //@line 26439
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 26440
   HEAP32[$24 >> 2] = $16; //@line 26441
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 26442
   HEAP32[$25 >> 2] = $14; //@line 26443
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 26444
   HEAP32[$26 >> 2] = $AsyncRetVal; //@line 26445
   sp = STACKTOP; //@line 26446
   return;
  }
  ___async_unwind = 0; //@line 26449
  HEAP32[$ReallocAsyncCtx4 >> 2] = 218; //@line 26450
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 26451
  HEAP32[$24 >> 2] = $16; //@line 26452
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 26453
  HEAP32[$25 >> 2] = $14; //@line 26454
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 26455
  HEAP32[$26 >> 2] = $AsyncRetVal; //@line 26456
  sp = STACKTOP; //@line 26457
  return;
 }
 __ZN6Socket11set_timeoutEi($8, 0); //@line 26460
 $27 = HEAP32[$2 >> 2] | 0; //@line 26461
 $29 = $27; //@line 26463
 if (!$27) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 26465
  $30 = __Znwj(20) | 0; //@line 26466
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 224; //@line 26469
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 26470
   HEAP32[$31 >> 2] = $2; //@line 26471
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 26472
   HEAP32[$32 >> 2] = $4; //@line 26473
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 26474
   HEAP32[$33 >> 2] = $6; //@line 26475
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 26476
   HEAP32[$34 >> 2] = $8; //@line 26477
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 26478
   HEAP32[$35 >> 2] = $10; //@line 26479
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 26480
   HEAP32[$36 >> 2] = $12; //@line 26481
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 26482
   HEAP32[$37 >> 2] = $14; //@line 26483
   sp = STACKTOP; //@line 26484
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 26488
  ___async_unwind = 0; //@line 26489
  HEAP32[$ReallocAsyncCtx11 >> 2] = 224; //@line 26490
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 26491
  HEAP32[$31 >> 2] = $2; //@line 26492
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 26493
  HEAP32[$32 >> 2] = $4; //@line 26494
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 26495
  HEAP32[$33 >> 2] = $6; //@line 26496
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 26497
  HEAP32[$34 >> 2] = $8; //@line 26498
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 26499
  HEAP32[$35 >> 2] = $10; //@line 26500
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 26501
  HEAP32[$36 >> 2] = $12; //@line 26502
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 26503
  HEAP32[$37 >> 2] = $14; //@line 26504
  sp = STACKTOP; //@line 26505
  return;
 }
 $39 = $14 + 32 | 0; //@line 26508
 do {
  if (($27 | 0) == ($39 | 0)) {
   $73 = $27; //@line 26512
   $75 = $29; //@line 26512
  } else {
   $41 = $27 + 12 | 0; //@line 26514
   $42 = HEAP32[$41 >> 2] | 0; //@line 26515
   if ($42 | 0) {
    $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 26519
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(44) | 0; //@line 26520
    FUNCTION_TABLE_vi[$45 & 511]($27); //@line 26521
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 225; //@line 26524
     $46 = $ReallocAsyncCtx8 + 4 | 0; //@line 26525
     HEAP32[$46 >> 2] = $4; //@line 26526
     $47 = $ReallocAsyncCtx8 + 8 | 0; //@line 26527
     HEAP32[$47 >> 2] = $6; //@line 26528
     $48 = $ReallocAsyncCtx8 + 12 | 0; //@line 26529
     HEAP32[$48 >> 2] = $8; //@line 26530
     $49 = $ReallocAsyncCtx8 + 16 | 0; //@line 26531
     HEAP32[$49 >> 2] = $41; //@line 26532
     $50 = $ReallocAsyncCtx8 + 20 | 0; //@line 26533
     HEAP32[$50 >> 2] = $2; //@line 26534
     $51 = $ReallocAsyncCtx8 + 24 | 0; //@line 26535
     HEAP32[$51 >> 2] = $10; //@line 26536
     $52 = $ReallocAsyncCtx8 + 28 | 0; //@line 26537
     HEAP32[$52 >> 2] = $12; //@line 26538
     $53 = $ReallocAsyncCtx8 + 32 | 0; //@line 26539
     HEAP32[$53 >> 2] = $27; //@line 26540
     $54 = $ReallocAsyncCtx8 + 36 | 0; //@line 26541
     HEAP32[$54 >> 2] = $39; //@line 26542
     $55 = $ReallocAsyncCtx8 + 40 | 0; //@line 26543
     HEAP32[$55 >> 2] = $14; //@line 26544
     sp = STACKTOP; //@line 26545
     return;
    }
    ___async_unwind = 0; //@line 26548
    HEAP32[$ReallocAsyncCtx8 >> 2] = 225; //@line 26549
    $46 = $ReallocAsyncCtx8 + 4 | 0; //@line 26550
    HEAP32[$46 >> 2] = $4; //@line 26551
    $47 = $ReallocAsyncCtx8 + 8 | 0; //@line 26552
    HEAP32[$47 >> 2] = $6; //@line 26553
    $48 = $ReallocAsyncCtx8 + 12 | 0; //@line 26554
    HEAP32[$48 >> 2] = $8; //@line 26555
    $49 = $ReallocAsyncCtx8 + 16 | 0; //@line 26556
    HEAP32[$49 >> 2] = $41; //@line 26557
    $50 = $ReallocAsyncCtx8 + 20 | 0; //@line 26558
    HEAP32[$50 >> 2] = $2; //@line 26559
    $51 = $ReallocAsyncCtx8 + 24 | 0; //@line 26560
    HEAP32[$51 >> 2] = $10; //@line 26561
    $52 = $ReallocAsyncCtx8 + 28 | 0; //@line 26562
    HEAP32[$52 >> 2] = $12; //@line 26563
    $53 = $ReallocAsyncCtx8 + 32 | 0; //@line 26564
    HEAP32[$53 >> 2] = $27; //@line 26565
    $54 = $ReallocAsyncCtx8 + 36 | 0; //@line 26566
    HEAP32[$54 >> 2] = $39; //@line 26567
    $55 = $ReallocAsyncCtx8 + 40 | 0; //@line 26568
    HEAP32[$55 >> 2] = $14; //@line 26569
    sp = STACKTOP; //@line 26570
    return;
   }
   $56 = $14 + 44 | 0; //@line 26573
   $57 = HEAP32[$56 >> 2] | 0; //@line 26574
   if (!$57) {
    HEAP32[$41 >> 2] = 0; //@line 26577
    $$pre85 = HEAP32[$2 >> 2] | 0; //@line 26578
    $73 = $$pre85; //@line 26580
    $75 = $$pre85; //@line 26580
    break;
   }
   $60 = HEAP32[$57 + 4 >> 2] | 0; //@line 26584
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 26585
   FUNCTION_TABLE_vii[$60 & 7]($27, $39); //@line 26586
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 226; //@line 26589
    $61 = $ReallocAsyncCtx9 + 4 | 0; //@line 26590
    HEAP32[$61 >> 2] = $56; //@line 26591
    $62 = $ReallocAsyncCtx9 + 8 | 0; //@line 26592
    HEAP32[$62 >> 2] = $41; //@line 26593
    $63 = $ReallocAsyncCtx9 + 12 | 0; //@line 26594
    HEAP32[$63 >> 2] = $2; //@line 26595
    $64 = $ReallocAsyncCtx9 + 16 | 0; //@line 26596
    HEAP32[$64 >> 2] = $4; //@line 26597
    $65 = $ReallocAsyncCtx9 + 20 | 0; //@line 26598
    HEAP32[$65 >> 2] = $6; //@line 26599
    $66 = $ReallocAsyncCtx9 + 24 | 0; //@line 26600
    HEAP32[$66 >> 2] = $8; //@line 26601
    $67 = $ReallocAsyncCtx9 + 28 | 0; //@line 26602
    HEAP32[$67 >> 2] = $10; //@line 26603
    $68 = $ReallocAsyncCtx9 + 32 | 0; //@line 26604
    HEAP32[$68 >> 2] = $12; //@line 26605
    $69 = $ReallocAsyncCtx9 + 36 | 0; //@line 26606
    HEAP32[$69 >> 2] = $14; //@line 26607
    sp = STACKTOP; //@line 26608
    return;
   }
   ___async_unwind = 0; //@line 26611
   HEAP32[$ReallocAsyncCtx9 >> 2] = 226; //@line 26612
   $61 = $ReallocAsyncCtx9 + 4 | 0; //@line 26613
   HEAP32[$61 >> 2] = $56; //@line 26614
   $62 = $ReallocAsyncCtx9 + 8 | 0; //@line 26615
   HEAP32[$62 >> 2] = $41; //@line 26616
   $63 = $ReallocAsyncCtx9 + 12 | 0; //@line 26617
   HEAP32[$63 >> 2] = $2; //@line 26618
   $64 = $ReallocAsyncCtx9 + 16 | 0; //@line 26619
   HEAP32[$64 >> 2] = $4; //@line 26620
   $65 = $ReallocAsyncCtx9 + 20 | 0; //@line 26621
   HEAP32[$65 >> 2] = $6; //@line 26622
   $66 = $ReallocAsyncCtx9 + 24 | 0; //@line 26623
   HEAP32[$66 >> 2] = $8; //@line 26624
   $67 = $ReallocAsyncCtx9 + 28 | 0; //@line 26625
   HEAP32[$67 >> 2] = $10; //@line 26626
   $68 = $ReallocAsyncCtx9 + 32 | 0; //@line 26627
   HEAP32[$68 >> 2] = $12; //@line 26628
   $69 = $ReallocAsyncCtx9 + 36 | 0; //@line 26629
   HEAP32[$69 >> 2] = $14; //@line 26630
   sp = STACKTOP; //@line 26631
   return;
  }
 } while (0);
 HEAP32[$73 + 16 >> 2] = HEAP32[$4 >> 2]; //@line 26637
 HEAP32[$6 + 8 >> 2] = 0; //@line 26639
 HEAP32[$6 >> 2] = 227; //@line 26640
 HEAP32[$6 + 4 >> 2] = $75; //@line 26642
 $76 = $6 + 12 | 0; //@line 26643
 HEAP32[$76 >> 2] = 724; //@line 26644
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 26645
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($8, $6); //@line 26646
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 228; //@line 26649
  $77 = $ReallocAsyncCtx18 + 4 | 0; //@line 26650
  HEAP32[$77 >> 2] = $76; //@line 26651
  $78 = $ReallocAsyncCtx18 + 8 | 0; //@line 26652
  HEAP32[$78 >> 2] = $10; //@line 26653
  $79 = $ReallocAsyncCtx18 + 12 | 0; //@line 26654
  HEAP32[$79 >> 2] = $12; //@line 26655
  $80 = $ReallocAsyncCtx18 + 16 | 0; //@line 26656
  HEAP32[$80 >> 2] = $6; //@line 26657
  $81 = $ReallocAsyncCtx18 + 20 | 0; //@line 26658
  HEAP32[$81 >> 2] = $14; //@line 26659
  sp = STACKTOP; //@line 26660
  return;
 }
 ___async_unwind = 0; //@line 26663
 HEAP32[$ReallocAsyncCtx18 >> 2] = 228; //@line 26664
 $77 = $ReallocAsyncCtx18 + 4 | 0; //@line 26665
 HEAP32[$77 >> 2] = $76; //@line 26666
 $78 = $ReallocAsyncCtx18 + 8 | 0; //@line 26667
 HEAP32[$78 >> 2] = $10; //@line 26668
 $79 = $ReallocAsyncCtx18 + 12 | 0; //@line 26669
 HEAP32[$79 >> 2] = $12; //@line 26670
 $80 = $ReallocAsyncCtx18 + 16 | 0; //@line 26671
 HEAP32[$80 >> 2] = $6; //@line 26672
 $81 = $ReallocAsyncCtx18 + 20 | 0; //@line 26673
 HEAP32[$81 >> 2] = $14; //@line 26674
 sp = STACKTOP; //@line 26675
 return;
}
function __ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$2 = 0, $$2$1 = 0, $$2$us = 0, $$2$us$1 = 0, $$pre = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $111 = 0, $118 = 0, $12 = 0, $122 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $139 = 0, $152 = 0, $157 = 0, $160 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $173 = 0, $186 = 0, $191 = 0, $194 = 0, $24 = 0, $28 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $47 = 0, $54 = 0, $57 = 0, $6 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $76 = 0, $81 = 0, $88 = 0, $9 = 0, $92 = 0, $98 = 0, label = 0;
 $4 = ($2 | 0) == 0; //@line 12841
 $6 = (HEAP32[2506] | 0) == 0; //@line 12843
 if (!$1) {
  do {
   if ($6) {
    $$2$us = -3006; //@line 12847
   } else {
    $7 = _emscripten_asm_const_i(8) | 0; //@line 12849
    $9 = (($7 | 0) < 0) << 31 >> 31; //@line 12851
    $10 = HEAP32[2506] | 0; //@line 12852
    $12 = $10 + 24 | 0; //@line 12854
    $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 12859
    $24 = HEAP32[$10 + 20 >> 2] | 0; //@line 12866
    if ($17 >>> 0 < $9 >>> 0 | (($17 | 0) == ($9 | 0) ? (HEAP32[$12 >> 2] | 0) >>> 0 < $7 >>> 0 : 0)) {
     if (!$24) {
      $34 = $10; //@line 12870
      label = 11; //@line 12871
     } else {
      __ZdlPv($24); //@line 12873
      $$pre35 = HEAP32[2506] | 0; //@line 12874
      if ($$pre35 | 0) {
       $34 = $$pre35; //@line 12877
       label = 11; //@line 12878
      }
     }
     if ((label | 0) == 11) {
      __ZdlPv($34); //@line 12882
     }
     HEAP32[2506] = 0; //@line 12884
     $$2$us = -3006; //@line 12885
     break;
    } else {
     if (_strcmp($24, $0) | 0) {
      $$2$us = -3006; //@line 12891
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$10 >> 2]; //@line 12895
      HEAP32[$2 + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 12895
      HEAP32[$2 + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 12895
      HEAP32[$2 + 12 >> 2] = HEAP32[$10 + 12 >> 2]; //@line 12895
      HEAP32[$2 + 16 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 12895
     }
     $28 = $10 + 32 | 0; //@line 12898
     HEAP32[$28 >> 2] = $7; //@line 12900
     HEAP32[$28 + 4 >> 2] = $9; //@line 12903
     $$2$us = 0; //@line 12904
     break;
    }
   }
  } while (0);
  do {
   if (!(HEAP32[2507] | 0)) {
    $$2$us$1 = $$2$us; //@line 12913
   } else {
    $71 = _emscripten_asm_const_i(8) | 0; //@line 12915
    $73 = (($71 | 0) < 0) << 31 >> 31; //@line 12917
    $74 = HEAP32[2507] | 0; //@line 12918
    $76 = $74 + 24 | 0; //@line 12920
    $81 = HEAP32[$76 + 4 >> 2] | 0; //@line 12925
    $88 = HEAP32[$74 + 20 >> 2] | 0; //@line 12932
    if ($81 >>> 0 < $73 >>> 0 | (($81 | 0) == ($73 | 0) ? (HEAP32[$76 >> 2] | 0) >>> 0 < $71 >>> 0 : 0)) {
     if (!$88) {
      $98 = $74; //@line 12936
      label = 33; //@line 12937
     } else {
      __ZdlPv($88); //@line 12939
      $$pre36 = HEAP32[2507] | 0; //@line 12940
      if ($$pre36 | 0) {
       $98 = $$pre36; //@line 12943
       label = 33; //@line 12944
      }
     }
     if ((label | 0) == 33) {
      __ZdlPv($98); //@line 12948
     }
     HEAP32[2507] = 0; //@line 12950
     $$2$us$1 = $$2$us; //@line 12951
     break;
    } else {
     if (_strcmp($88, $0) | 0) {
      $$2$us$1 = $$2$us; //@line 12957
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$74 >> 2]; //@line 12961
      HEAP32[$2 + 4 >> 2] = HEAP32[$74 + 4 >> 2]; //@line 12961
      HEAP32[$2 + 8 >> 2] = HEAP32[$74 + 8 >> 2]; //@line 12961
      HEAP32[$2 + 12 >> 2] = HEAP32[$74 + 12 >> 2]; //@line 12961
      HEAP32[$2 + 16 >> 2] = HEAP32[$74 + 16 >> 2]; //@line 12961
     }
     $92 = $74 + 32 | 0; //@line 12964
     HEAP32[$92 >> 2] = $71; //@line 12966
     HEAP32[$92 + 4 >> 2] = $73; //@line 12969
     $$2$us$1 = 0; //@line 12970
     break;
    }
   }
  } while (0);
  if (!(HEAP32[2508] | 0)) {
   $$0$lcssa = $$2$us$1; //@line 12978
   return $$0$lcssa | 0; //@line 12979
  }
  $101 = _emscripten_asm_const_i(8) | 0; //@line 12981
  $103 = (($101 | 0) < 0) << 31 >> 31; //@line 12983
  $104 = HEAP32[2508] | 0; //@line 12984
  $106 = $104 + 24 | 0; //@line 12986
  $111 = HEAP32[$106 + 4 >> 2] | 0; //@line 12991
  $118 = HEAP32[$104 + 20 >> 2] | 0; //@line 12998
  if ($111 >>> 0 < $103 >>> 0 | (($111 | 0) == ($103 | 0) ? (HEAP32[$106 >> 2] | 0) >>> 0 < $101 >>> 0 : 0)) {
   if (!$118) {
    $128 = $104; //@line 13002
    label = 43; //@line 13003
   } else {
    __ZdlPv($118); //@line 13005
    $$pre37 = HEAP32[2508] | 0; //@line 13006
    if ($$pre37 | 0) {
     $128 = $$pre37; //@line 13009
     label = 43; //@line 13010
    }
   }
   if ((label | 0) == 43) {
    __ZdlPv($128); //@line 13014
   }
   HEAP32[2508] = 0; //@line 13016
   $$0$lcssa = $$2$us$1; //@line 13017
   return $$0$lcssa | 0; //@line 13018
  }
  if (_strcmp($118, $0) | 0) {
   $$0$lcssa = $$2$us$1; //@line 13023
   return $$0$lcssa | 0; //@line 13024
  }
  if (!$4) {
   HEAP32[$2 >> 2] = HEAP32[$104 >> 2]; //@line 13027
   HEAP32[$2 + 4 >> 2] = HEAP32[$104 + 4 >> 2]; //@line 13027
   HEAP32[$2 + 8 >> 2] = HEAP32[$104 + 8 >> 2]; //@line 13027
   HEAP32[$2 + 12 >> 2] = HEAP32[$104 + 12 >> 2]; //@line 13027
   HEAP32[$2 + 16 >> 2] = HEAP32[$104 + 16 >> 2]; //@line 13027
  }
  $122 = $104 + 32 | 0; //@line 13030
  HEAP32[$122 >> 2] = $101; //@line 13032
  HEAP32[$122 + 4 >> 2] = $103; //@line 13035
  $$0$lcssa = 0; //@line 13036
  return $$0$lcssa | 0; //@line 13037
 }
 do {
  if ($6) {
   $$2 = -3006; //@line 13041
  } else {
   $37 = _emscripten_asm_const_i(8) | 0; //@line 13043
   $39 = (($37 | 0) < 0) << 31 >> 31; //@line 13045
   $40 = HEAP32[2506] | 0; //@line 13046
   $42 = $40 + 24 | 0; //@line 13048
   $47 = HEAP32[$42 + 4 >> 2] | 0; //@line 13053
   if ($47 >>> 0 < $39 >>> 0 | (($47 | 0) == ($39 | 0) ? (HEAP32[$42 >> 2] | 0) >>> 0 < $37 >>> 0 : 0)) {
    $54 = HEAP32[$40 + 20 >> 2] | 0; //@line 13061
    if (!$54) {
     $57 = $40; //@line 13064
     label = 18; //@line 13065
    } else {
     __ZdlPv($54); //@line 13067
     $$pre = HEAP32[2506] | 0; //@line 13068
     if ($$pre | 0) {
      $57 = $$pre; //@line 13071
      label = 18; //@line 13072
     }
    }
    if ((label | 0) == 18) {
     __ZdlPv($57); //@line 13076
    }
    HEAP32[2506] = 0; //@line 13078
    $$2 = -3006; //@line 13079
    break;
   }
   if ((HEAP32[$40 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$40 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$40 >> 2]; //@line 13091
      HEAP32[$2 + 4 >> 2] = HEAP32[$40 + 4 >> 2]; //@line 13091
      HEAP32[$2 + 8 >> 2] = HEAP32[$40 + 8 >> 2]; //@line 13091
      HEAP32[$2 + 12 >> 2] = HEAP32[$40 + 12 >> 2]; //@line 13091
      HEAP32[$2 + 16 >> 2] = HEAP32[$40 + 16 >> 2]; //@line 13091
     }
     $65 = $40 + 32 | 0; //@line 13094
     HEAP32[$65 >> 2] = $37; //@line 13096
     HEAP32[$65 + 4 >> 2] = $39; //@line 13099
     $$2 = 0; //@line 13100
    } else {
     $$2 = -3006; //@line 13102
    }
   } else {
    $$2 = -3006; //@line 13105
   }
  }
 } while (0);
 do {
  if (!(HEAP32[2507] | 0)) {
   $$2$1 = $$2; //@line 13113
  } else {
   $129 = _emscripten_asm_const_i(8) | 0; //@line 13115
   $131 = (($129 | 0) < 0) << 31 >> 31; //@line 13117
   $132 = HEAP32[2507] | 0; //@line 13118
   $134 = $132 + 24 | 0; //@line 13120
   $139 = HEAP32[$134 + 4 >> 2] | 0; //@line 13125
   if ($139 >>> 0 < $131 >>> 0 | (($139 | 0) == ($131 | 0) ? (HEAP32[$134 >> 2] | 0) >>> 0 < $129 >>> 0 : 0)) {
    $157 = HEAP32[$132 + 20 >> 2] | 0; //@line 13133
    if (!$157) {
     $160 = $132; //@line 13136
     label = 53; //@line 13137
    } else {
     __ZdlPv($157); //@line 13139
     $$pre33 = HEAP32[2507] | 0; //@line 13140
     if ($$pre33 | 0) {
      $160 = $$pre33; //@line 13143
      label = 53; //@line 13144
     }
    }
    if ((label | 0) == 53) {
     __ZdlPv($160); //@line 13148
    }
    HEAP32[2507] = 0; //@line 13150
    $$2$1 = $$2; //@line 13151
    break;
   }
   if ((HEAP32[$132 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$132 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$132 >> 2]; //@line 13163
      HEAP32[$2 + 4 >> 2] = HEAP32[$132 + 4 >> 2]; //@line 13163
      HEAP32[$2 + 8 >> 2] = HEAP32[$132 + 8 >> 2]; //@line 13163
      HEAP32[$2 + 12 >> 2] = HEAP32[$132 + 12 >> 2]; //@line 13163
      HEAP32[$2 + 16 >> 2] = HEAP32[$132 + 16 >> 2]; //@line 13163
     }
     $152 = $132 + 32 | 0; //@line 13166
     HEAP32[$152 >> 2] = $129; //@line 13168
     HEAP32[$152 + 4 >> 2] = $131; //@line 13171
     $$2$1 = 0; //@line 13172
    } else {
     $$2$1 = $$2; //@line 13174
    }
   } else {
    $$2$1 = $$2; //@line 13177
   }
  }
 } while (0);
 if (!(HEAP32[2508] | 0)) {
  $$0$lcssa = $$2$1; //@line 13184
  return $$0$lcssa | 0; //@line 13185
 }
 $163 = _emscripten_asm_const_i(8) | 0; //@line 13187
 $165 = (($163 | 0) < 0) << 31 >> 31; //@line 13189
 $166 = HEAP32[2508] | 0; //@line 13190
 $168 = $166 + 24 | 0; //@line 13192
 $173 = HEAP32[$168 + 4 >> 2] | 0; //@line 13197
 if ($173 >>> 0 < $165 >>> 0 | (($173 | 0) == ($165 | 0) ? (HEAP32[$168 >> 2] | 0) >>> 0 < $163 >>> 0 : 0)) {
  $191 = HEAP32[$166 + 20 >> 2] | 0; //@line 13205
  if (!$191) {
   $194 = $166; //@line 13208
   label = 64; //@line 13209
  } else {
   __ZdlPv($191); //@line 13211
   $$pre34 = HEAP32[2508] | 0; //@line 13212
   if ($$pre34 | 0) {
    $194 = $$pre34; //@line 13215
    label = 64; //@line 13216
   }
  }
  if ((label | 0) == 64) {
   __ZdlPv($194); //@line 13220
  }
  HEAP32[2508] = 0; //@line 13222
  $$0$lcssa = $$2$1; //@line 13223
  return $$0$lcssa | 0; //@line 13224
 }
 if ((HEAP32[$166 >> 2] | 0) != ($1 | 0)) {
  $$0$lcssa = $$2$1; //@line 13229
  return $$0$lcssa | 0; //@line 13230
 }
 if (_strcmp(HEAP32[$166 + 20 >> 2] | 0, $0) | 0) {
  $$0$lcssa = $$2$1; //@line 13237
  return $$0$lcssa | 0; //@line 13238
 }
 if (!$4) {
  HEAP32[$2 >> 2] = HEAP32[$166 >> 2]; //@line 13241
  HEAP32[$2 + 4 >> 2] = HEAP32[$166 + 4 >> 2]; //@line 13241
  HEAP32[$2 + 8 >> 2] = HEAP32[$166 + 8 >> 2]; //@line 13241
  HEAP32[$2 + 12 >> 2] = HEAP32[$166 + 12 >> 2]; //@line 13241
  HEAP32[$2 + 16 >> 2] = HEAP32[$166 + 16 >> 2]; //@line 13241
 }
 $186 = $166 + 32 | 0; //@line 13244
 HEAP32[$186 >> 2] = $163; //@line 13246
 HEAP32[$186 + 4 >> 2] = $165; //@line 13249
 $$0$lcssa = 0; //@line 13250
 return $$0$lcssa | 0; //@line 13251
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 32676
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 32677
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 32678
 $d_sroa_0_0_extract_trunc = $b$0; //@line 32679
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 32680
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 32681
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 32683
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 32686
    HEAP32[$rem + 4 >> 2] = 0; //@line 32687
   }
   $_0$1 = 0; //@line 32689
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 32690
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32691
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 32694
    $_0$0 = 0; //@line 32695
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32696
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 32698
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 32699
   $_0$1 = 0; //@line 32700
   $_0$0 = 0; //@line 32701
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32702
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 32705
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 32710
     HEAP32[$rem + 4 >> 2] = 0; //@line 32711
    }
    $_0$1 = 0; //@line 32713
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 32714
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32715
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 32719
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 32720
    }
    $_0$1 = 0; //@line 32722
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 32723
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32724
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 32726
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 32729
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 32730
    }
    $_0$1 = 0; //@line 32732
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 32733
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32734
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 32737
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 32739
    $58 = 31 - $51 | 0; //@line 32740
    $sr_1_ph = $57; //@line 32741
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 32742
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 32743
    $q_sroa_0_1_ph = 0; //@line 32744
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 32745
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 32749
    $_0$0 = 0; //@line 32750
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32751
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 32753
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 32754
   $_0$1 = 0; //@line 32755
   $_0$0 = 0; //@line 32756
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32757
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 32761
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 32763
     $126 = 31 - $119 | 0; //@line 32764
     $130 = $119 - 31 >> 31; //@line 32765
     $sr_1_ph = $125; //@line 32766
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 32767
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 32768
     $q_sroa_0_1_ph = 0; //@line 32769
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 32770
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 32774
     $_0$0 = 0; //@line 32775
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32776
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 32778
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 32779
    $_0$1 = 0; //@line 32780
    $_0$0 = 0; //@line 32781
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32782
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 32784
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 32787
    $89 = 64 - $88 | 0; //@line 32788
    $91 = 32 - $88 | 0; //@line 32789
    $92 = $91 >> 31; //@line 32790
    $95 = $88 - 32 | 0; //@line 32791
    $105 = $95 >> 31; //@line 32792
    $sr_1_ph = $88; //@line 32793
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 32794
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 32795
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 32796
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 32797
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 32801
    HEAP32[$rem + 4 >> 2] = 0; //@line 32802
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 32805
    $_0$0 = $a$0 | 0 | 0; //@line 32806
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32807
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 32809
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 32810
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 32811
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32812
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 32817
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 32818
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 32819
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 32820
  $carry_0_lcssa$1 = 0; //@line 32821
  $carry_0_lcssa$0 = 0; //@line 32822
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 32824
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 32825
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 32826
  $137$1 = tempRet0; //@line 32827
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 32828
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 32829
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 32830
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 32831
  $sr_1202 = $sr_1_ph; //@line 32832
  $carry_0203 = 0; //@line 32833
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 32835
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 32836
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 32837
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 32838
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 32839
   $150$1 = tempRet0; //@line 32840
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 32841
   $carry_0203 = $151$0 & 1; //@line 32842
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 32844
   $r_sroa_1_1200 = tempRet0; //@line 32845
   $sr_1202 = $sr_1202 - 1 | 0; //@line 32846
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 32858
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 32859
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 32860
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 32861
  $carry_0_lcssa$1 = 0; //@line 32862
  $carry_0_lcssa$0 = $carry_0203; //@line 32863
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 32865
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 32866
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 32869
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 32870
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 32872
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 32873
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32874
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8591
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 8597
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 8606
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 8611
      $19 = $1 + 44 | 0; //@line 8612
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 8621
      $26 = $1 + 52 | 0; //@line 8622
      $27 = $1 + 53 | 0; //@line 8623
      $28 = $1 + 54 | 0; //@line 8624
      $29 = $0 + 8 | 0; //@line 8625
      $30 = $1 + 24 | 0; //@line 8626
      $$081$off0 = 0; //@line 8627
      $$084 = $0 + 16 | 0; //@line 8627
      $$085$off0 = 0; //@line 8627
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 8631
        label = 20; //@line 8632
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 8635
       HEAP8[$27 >> 0] = 0; //@line 8636
       $AsyncCtx15 = _emscripten_alloc_async_context(52, sp) | 0; //@line 8637
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 8638
       if (___async) {
        label = 12; //@line 8641
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8644
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 8648
        label = 20; //@line 8649
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 8656
         $$186$off0 = $$085$off0; //@line 8656
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 8665
           label = 20; //@line 8666
           break L10;
          } else {
           $$182$off0 = 1; //@line 8669
           $$186$off0 = $$085$off0; //@line 8669
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 8676
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 8683
          break L10;
         } else {
          $$182$off0 = 1; //@line 8686
          $$186$off0 = 1; //@line 8686
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 8691
       $$084 = $$084 + 8 | 0; //@line 8691
       $$085$off0 = $$186$off0; //@line 8691
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 359; //@line 8694
       HEAP32[$AsyncCtx15 + 4 >> 2] = $25; //@line 8696
       HEAP32[$AsyncCtx15 + 8 >> 2] = $26; //@line 8698
       HEAP32[$AsyncCtx15 + 12 >> 2] = $27; //@line 8700
       HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 8702
       HEAP32[$AsyncCtx15 + 20 >> 2] = $2; //@line 8704
       HEAP8[$AsyncCtx15 + 24 >> 0] = $4 & 1; //@line 8707
       HEAP8[$AsyncCtx15 + 25 >> 0] = $$081$off0 & 1; //@line 8710
       HEAP8[$AsyncCtx15 + 26 >> 0] = $$085$off0 & 1; //@line 8713
       HEAP32[$AsyncCtx15 + 28 >> 2] = $13; //@line 8715
       HEAP32[$AsyncCtx15 + 32 >> 2] = $30; //@line 8717
       HEAP32[$AsyncCtx15 + 36 >> 2] = $28; //@line 8719
       HEAP32[$AsyncCtx15 + 40 >> 2] = $29; //@line 8721
       HEAP32[$AsyncCtx15 + 44 >> 2] = $$084; //@line 8723
       HEAP32[$AsyncCtx15 + 48 >> 2] = $19; //@line 8725
       sp = STACKTOP; //@line 8726
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 8732
         $61 = $1 + 40 | 0; //@line 8733
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 8736
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 8744
           if ($$283$off0) {
            label = 25; //@line 8746
            break;
           } else {
            $69 = 4; //@line 8749
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 8756
        } else {
         $69 = 4; //@line 8758
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 8763
      }
      HEAP32[$19 >> 2] = $69; //@line 8765
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 8774
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 8779
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 8780
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8781
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 8782
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 360; //@line 8785
    HEAP32[$AsyncCtx11 + 4 >> 2] = $73; //@line 8787
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 8789
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 8791
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 8793
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 8796
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 8798
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 8800
    sp = STACKTOP; //@line 8801
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8804
   $81 = $0 + 24 | 0; //@line 8805
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 8809
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 8813
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 8820
       $$2 = $81; //@line 8821
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 8833
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 8834
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 8839
        $136 = $$2 + 8 | 0; //@line 8840
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 8843
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 363; //@line 8848
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 8850
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 8852
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 8854
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 8856
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 8858
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 8860
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 8862
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 8865
       sp = STACKTOP; //@line 8866
       return;
      }
      $104 = $1 + 24 | 0; //@line 8869
      $105 = $1 + 54 | 0; //@line 8870
      $$1 = $81; //@line 8871
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 8887
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 8888
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8893
       $122 = $$1 + 8 | 0; //@line 8894
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 8897
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 362; //@line 8902
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 8904
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 8906
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 8908
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 8910
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 8912
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 8914
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 8916
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 8918
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 8921
      sp = STACKTOP; //@line 8922
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 8926
    $$0 = $81; //@line 8927
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8934
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 8935
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8940
     $100 = $$0 + 8 | 0; //@line 8941
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 8944
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 361; //@line 8949
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 8951
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 8953
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 8955
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 8957
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 8959
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 8961
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 8964
    sp = STACKTOP; //@line 8965
    return;
   }
  }
 } while (0);
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_60($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11753
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11755
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11757
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11759
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11761
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11763
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11765
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11767
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11769
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11771
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11773
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11775
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11777
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11779
 $42 = HEAP32[$4 >> 2] | 0; //@line 11780
 if ($42 | 0) {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 11784
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 11785
  FUNCTION_TABLE_vi[$45 & 511]($20); //@line 11786
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 259; //@line 11789
   $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 11790
   HEAP32[$46 >> 2] = $2; //@line 11791
   $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 11792
   HEAP32[$47 >> 2] = $4; //@line 11793
   $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 11794
   HEAP32[$48 >> 2] = $6; //@line 11795
   $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 11796
   HEAP32[$49 >> 2] = $8; //@line 11797
   $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 11798
   HEAP32[$50 >> 2] = $10; //@line 11799
   $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 11800
   HEAP32[$51 >> 2] = $12; //@line 11801
   $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 11802
   HEAP32[$52 >> 2] = $14; //@line 11803
   $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 11804
   HEAP32[$53 >> 2] = $16; //@line 11805
   $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 11806
   HEAP32[$54 >> 2] = $18; //@line 11807
   $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 11808
   HEAP32[$55 >> 2] = $20; //@line 11809
   $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 11810
   HEAP32[$56 >> 2] = $22; //@line 11811
   $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 11812
   HEAP32[$57 >> 2] = $24; //@line 11813
   $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 11814
   HEAP32[$58 >> 2] = $26; //@line 11815
   sp = STACKTOP; //@line 11816
   return;
  }
  ___async_unwind = 0; //@line 11819
  HEAP32[$ReallocAsyncCtx2 >> 2] = 259; //@line 11820
  $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 11821
  HEAP32[$46 >> 2] = $2; //@line 11822
  $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 11823
  HEAP32[$47 >> 2] = $4; //@line 11824
  $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 11825
  HEAP32[$48 >> 2] = $6; //@line 11826
  $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 11827
  HEAP32[$49 >> 2] = $8; //@line 11828
  $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 11829
  HEAP32[$50 >> 2] = $10; //@line 11830
  $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 11831
  HEAP32[$51 >> 2] = $12; //@line 11832
  $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 11833
  HEAP32[$52 >> 2] = $14; //@line 11834
  $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 11835
  HEAP32[$53 >> 2] = $16; //@line 11836
  $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 11837
  HEAP32[$54 >> 2] = $18; //@line 11838
  $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 11839
  HEAP32[$55 >> 2] = $20; //@line 11840
  $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 11841
  HEAP32[$56 >> 2] = $22; //@line 11842
  $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 11843
  HEAP32[$57 >> 2] = $24; //@line 11844
  $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 11845
  HEAP32[$58 >> 2] = $26; //@line 11846
  sp = STACKTOP; //@line 11847
  return;
 }
 $59 = HEAP32[$22 >> 2] | 0; //@line 11850
 if (!$59) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 11853
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($26, 0, $18, 512) | 0; //@line 11854
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 255; //@line 11857
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 11858
   HEAP32[$28 >> 2] = $2; //@line 11859
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 11860
   HEAP32[$29 >> 2] = $4; //@line 11861
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 11862
   HEAP32[$30 >> 2] = $6; //@line 11863
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 11864
   HEAP32[$31 >> 2] = $8; //@line 11865
   $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 11866
   HEAP32[$32 >> 2] = $10; //@line 11867
   $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 11868
   HEAP32[$33 >> 2] = $12; //@line 11869
   $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 11870
   HEAP32[$34 >> 2] = $14; //@line 11871
   $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 11872
   HEAP32[$35 >> 2] = $16; //@line 11873
   $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 11874
   HEAP32[$36 >> 2] = $18; //@line 11875
   $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 11876
   HEAP32[$37 >> 2] = $20; //@line 11877
   $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 11878
   HEAP32[$38 >> 2] = $22; //@line 11879
   $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 11880
   HEAP32[$39 >> 2] = $24; //@line 11881
   $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 11882
   HEAP32[$40 >> 2] = $26; //@line 11883
   sp = STACKTOP; //@line 11884
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 11888
  ___async_unwind = 0; //@line 11889
  HEAP32[$ReallocAsyncCtx6 >> 2] = 255; //@line 11890
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 11891
  HEAP32[$28 >> 2] = $2; //@line 11892
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 11893
  HEAP32[$29 >> 2] = $4; //@line 11894
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 11895
  HEAP32[$30 >> 2] = $6; //@line 11896
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 11897
  HEAP32[$31 >> 2] = $8; //@line 11898
  $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 11899
  HEAP32[$32 >> 2] = $10; //@line 11900
  $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 11901
  HEAP32[$33 >> 2] = $12; //@line 11902
  $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 11903
  HEAP32[$34 >> 2] = $14; //@line 11904
  $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 11905
  HEAP32[$35 >> 2] = $16; //@line 11906
  $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 11907
  HEAP32[$36 >> 2] = $18; //@line 11908
  $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 11909
  HEAP32[$37 >> 2] = $20; //@line 11910
  $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 11911
  HEAP32[$38 >> 2] = $22; //@line 11912
  $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 11913
  HEAP32[$39 >> 2] = $24; //@line 11914
  $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 11915
  HEAP32[$40 >> 2] = $26; //@line 11916
  sp = STACKTOP; //@line 11917
  return;
 } else {
  $62 = HEAP32[$59 + 8 >> 2] | 0; //@line 11921
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 11922
  FUNCTION_TABLE_vi[$62 & 511]($2); //@line 11923
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 11926
   $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 11927
   HEAP32[$63 >> 2] = $2; //@line 11928
   $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 11929
   HEAP32[$64 >> 2] = $4; //@line 11930
   $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 11931
   HEAP32[$65 >> 2] = $6; //@line 11932
   $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 11933
   HEAP32[$66 >> 2] = $8; //@line 11934
   $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 11935
   HEAP32[$67 >> 2] = $10; //@line 11936
   $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 11937
   HEAP32[$68 >> 2] = $12; //@line 11938
   $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 11939
   HEAP32[$69 >> 2] = $14; //@line 11940
   $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 11941
   HEAP32[$70 >> 2] = $16; //@line 11942
   $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 11943
   HEAP32[$71 >> 2] = $18; //@line 11944
   $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 11945
   HEAP32[$72 >> 2] = $20; //@line 11946
   $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 11947
   HEAP32[$73 >> 2] = $22; //@line 11948
   $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 11949
   HEAP32[$74 >> 2] = $24; //@line 11950
   $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 11951
   HEAP32[$75 >> 2] = $26; //@line 11952
   sp = STACKTOP; //@line 11953
   return;
  }
  ___async_unwind = 0; //@line 11956
  HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 11957
  $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 11958
  HEAP32[$63 >> 2] = $2; //@line 11959
  $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 11960
  HEAP32[$64 >> 2] = $4; //@line 11961
  $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 11962
  HEAP32[$65 >> 2] = $6; //@line 11963
  $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 11964
  HEAP32[$66 >> 2] = $8; //@line 11965
  $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 11966
  HEAP32[$67 >> 2] = $10; //@line 11967
  $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 11968
  HEAP32[$68 >> 2] = $12; //@line 11969
  $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 11970
  HEAP32[$69 >> 2] = $14; //@line 11971
  $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 11972
  HEAP32[$70 >> 2] = $16; //@line 11973
  $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 11974
  HEAP32[$71 >> 2] = $18; //@line 11975
  $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 11976
  HEAP32[$72 >> 2] = $20; //@line 11977
  $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 11978
  HEAP32[$73 >> 2] = $22; //@line 11979
  $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 11980
  HEAP32[$74 >> 2] = $24; //@line 11981
  $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 11982
  HEAP32[$75 >> 2] = $26; //@line 11983
  sp = STACKTOP; //@line 11984
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1105 = 0, $$3100 = 0, $$byval_copy = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9365
 STACKTOP = STACKTOP + 32 | 0; //@line 9366
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9366
 $$byval_copy = sp; //@line 9367
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 9369
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9371
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 9373
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9375
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9377
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9379
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9381
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9383
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9385
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9387
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9389
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9391
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9393
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9395
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 9397
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9399
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9401
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9403
 $38 = HEAP8[$0 + 76 >> 0] | 0; //@line 9405
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9407
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9409
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9411
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9413
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 9415
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 9417
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 9419
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 9421
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  $59 = 608 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 9428
  HEAP32[$$byval_copy >> 2] = HEAP32[$59 >> 2]; //@line 9429
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$59 + 4 >> 2]; //@line 9429
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$59 + 8 >> 2]; //@line 9429
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$59 + 12 >> 2]; //@line 9429
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$59 + 16 >> 2]; //@line 9429
  __ZN13SocketAddress8set_addrE10nsapi_addr($4, $$byval_copy); //@line 9430
  $$1105 = $2; //@line 9431
  $$3100 = 5; //@line 9431
 } else {
  $$1105 = $2; //@line 9433
  $$3100 = $6; //@line 9433
 }
 __ZN13SocketAddress8set_portEt($4, 53); //@line 9435
 HEAP8[$8 >> 0] = 0; //@line 9436
 HEAP8[$10 >> 0] = 1; //@line 9437
 HEAP8[$12 >> 0] = 1; //@line 9438
 HEAP8[$14 >> 0] = 0; //@line 9439
 HEAP8[$16 >> 0] = 0; //@line 9440
 HEAP8[$18 >> 0] = 1; //@line 9441
 HEAP8[$20 >> 0] = 0; //@line 9442
 HEAP8[$20 + 1 >> 0] = 0; //@line 9442
 HEAP8[$20 + 2 >> 0] = 0; //@line 9442
 HEAP8[$20 + 3 >> 0] = 0; //@line 9442
 HEAP8[$20 + 4 >> 0] = 0; //@line 9442
 HEAP8[$20 + 5 >> 0] = 0; //@line 9442
 if (!(HEAP8[$22 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $28; //@line 9446
 } else {
  $$048$i = $22; //@line 9448
  $$sroa$0$0$in47$i = $28; //@line 9448
  while (1) {
   $62 = _strcspn($$048$i, 7296) | 0; //@line 9450
   $64 = $$sroa$0$0$in47$i + 1 | 0; //@line 9452
   HEAP8[$$sroa$0$0$in47$i >> 0] = $62; //@line 9453
   $65 = $62 & 255; //@line 9454
   _memcpy($64 | 0, $$048$i | 0, $65 | 0) | 0; //@line 9455
   $66 = $64 + $65 | 0; //@line 9456
   $$048$i = $$048$i + ($62 + ((HEAP8[$$048$i + $62 >> 0] | 0) == 46 & 1)) | 0; //@line 9462
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $66; //@line 9466
    break;
   } else {
    $$sroa$0$0$in47$i = $66; //@line 9469
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 9474
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 9476
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $30; //@line 9478
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 9480
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 9483
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 9485
 $82 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($34, $4, $8, $$sroa$0$0$in$lcssa$i + 5 - $32 | 0) | 0; //@line 9486
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 9489
  $83 = $ReallocAsyncCtx4 + 4 | 0; //@line 9490
  HEAP32[$83 >> 2] = $4; //@line 9491
  $84 = $ReallocAsyncCtx4 + 8 | 0; //@line 9492
  HEAP32[$84 >> 2] = $8; //@line 9493
  $85 = $ReallocAsyncCtx4 + 12 | 0; //@line 9494
  HEAP32[$85 >> 2] = $10; //@line 9495
  $86 = $ReallocAsyncCtx4 + 16 | 0; //@line 9496
  HEAP32[$86 >> 2] = $12; //@line 9497
  $87 = $ReallocAsyncCtx4 + 20 | 0; //@line 9498
  HEAP32[$87 >> 2] = $14; //@line 9499
  $88 = $ReallocAsyncCtx4 + 24 | 0; //@line 9500
  HEAP32[$88 >> 2] = $16; //@line 9501
  $89 = $ReallocAsyncCtx4 + 28 | 0; //@line 9502
  HEAP32[$89 >> 2] = $18; //@line 9503
  $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 9504
  HEAP32[$90 >> 2] = $20; //@line 9505
  $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 9506
  HEAP32[$91 >> 2] = $22; //@line 9507
  $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 9508
  HEAP32[$92 >> 2] = $24; //@line 9509
  $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 9510
  HEAP32[$93 >> 2] = $26; //@line 9511
  $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 9512
  HEAP32[$94 >> 2] = $28; //@line 9513
  $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 9514
  HEAP8[$95 >> 0] = $30; //@line 9515
  $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 9516
  HEAP32[$96 >> 2] = $32; //@line 9517
  $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 9518
  HEAP32[$97 >> 2] = $34; //@line 9519
  $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 9520
  HEAP32[$98 >> 2] = $36; //@line 9521
  $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 9522
  HEAP32[$99 >> 2] = $40; //@line 9523
  $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 9524
  HEAP32[$100 >> 2] = $42; //@line 9525
  $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 9526
  HEAP32[$101 >> 2] = $44; //@line 9527
  $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 9528
  HEAP32[$102 >> 2] = $46; //@line 9529
  $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 9530
  HEAP32[$103 >> 2] = $48; //@line 9531
  $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 9532
  HEAP32[$104 >> 2] = $50; //@line 9533
  $105 = $ReallocAsyncCtx4 + 92 | 0; //@line 9534
  HEAP32[$105 >> 2] = $52; //@line 9535
  $106 = $ReallocAsyncCtx4 + 96 | 0; //@line 9536
  HEAP32[$106 >> 2] = $54; //@line 9537
  $107 = $ReallocAsyncCtx4 + 100 | 0; //@line 9538
  HEAP8[$107 >> 0] = $$3100; //@line 9539
  $108 = $ReallocAsyncCtx4 + 101 | 0; //@line 9540
  HEAP8[$108 >> 0] = $$1105; //@line 9541
  $109 = $ReallocAsyncCtx4 + 102 | 0; //@line 9542
  HEAP8[$109 >> 0] = $38; //@line 9543
  sp = STACKTOP; //@line 9544
  STACKTOP = sp; //@line 9545
  return;
 }
 HEAP32[___async_retval >> 2] = $82; //@line 9548
 ___async_unwind = 0; //@line 9549
 HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 9550
 $83 = $ReallocAsyncCtx4 + 4 | 0; //@line 9551
 HEAP32[$83 >> 2] = $4; //@line 9552
 $84 = $ReallocAsyncCtx4 + 8 | 0; //@line 9553
 HEAP32[$84 >> 2] = $8; //@line 9554
 $85 = $ReallocAsyncCtx4 + 12 | 0; //@line 9555
 HEAP32[$85 >> 2] = $10; //@line 9556
 $86 = $ReallocAsyncCtx4 + 16 | 0; //@line 9557
 HEAP32[$86 >> 2] = $12; //@line 9558
 $87 = $ReallocAsyncCtx4 + 20 | 0; //@line 9559
 HEAP32[$87 >> 2] = $14; //@line 9560
 $88 = $ReallocAsyncCtx4 + 24 | 0; //@line 9561
 HEAP32[$88 >> 2] = $16; //@line 9562
 $89 = $ReallocAsyncCtx4 + 28 | 0; //@line 9563
 HEAP32[$89 >> 2] = $18; //@line 9564
 $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 9565
 HEAP32[$90 >> 2] = $20; //@line 9566
 $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 9567
 HEAP32[$91 >> 2] = $22; //@line 9568
 $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 9569
 HEAP32[$92 >> 2] = $24; //@line 9570
 $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 9571
 HEAP32[$93 >> 2] = $26; //@line 9572
 $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 9573
 HEAP32[$94 >> 2] = $28; //@line 9574
 $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 9575
 HEAP8[$95 >> 0] = $30; //@line 9576
 $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 9577
 HEAP32[$96 >> 2] = $32; //@line 9578
 $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 9579
 HEAP32[$97 >> 2] = $34; //@line 9580
 $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 9581
 HEAP32[$98 >> 2] = $36; //@line 9582
 $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 9583
 HEAP32[$99 >> 2] = $40; //@line 9584
 $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 9585
 HEAP32[$100 >> 2] = $42; //@line 9586
 $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 9587
 HEAP32[$101 >> 2] = $44; //@line 9588
 $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 9589
 HEAP32[$102 >> 2] = $46; //@line 9590
 $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 9591
 HEAP32[$103 >> 2] = $48; //@line 9592
 $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 9593
 HEAP32[$104 >> 2] = $50; //@line 9594
 $105 = $ReallocAsyncCtx4 + 92 | 0; //@line 9595
 HEAP32[$105 >> 2] = $52; //@line 9596
 $106 = $ReallocAsyncCtx4 + 96 | 0; //@line 9597
 HEAP32[$106 >> 2] = $54; //@line 9598
 $107 = $ReallocAsyncCtx4 + 100 | 0; //@line 9599
 HEAP8[$107 >> 0] = $$3100; //@line 9600
 $108 = $ReallocAsyncCtx4 + 101 | 0; //@line 9601
 HEAP8[$108 >> 0] = $$1105; //@line 9602
 $109 = $ReallocAsyncCtx4 + 102 | 0; //@line 9603
 HEAP8[$109 >> 0] = $38; //@line 9604
 sp = STACKTOP; //@line 9605
 STACKTOP = sp; //@line 9606
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i20 = 0, $$06 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $50 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $65 = 0, $68 = 0, $75 = 0, $76 = 0, $79 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10344
 STACKTOP = STACKTOP + 32 | 0; //@line 10345
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10345
 $3 = sp + 16 | 0; //@line 10346
 $4 = sp; //@line 10347
 if (!(HEAP8[9792] | 0)) {
  if (___cxa_guard_acquire(9792) | 0) {
   HEAP32[2501] = __ZN4mbed16mbed_event_queueEv() | 0; //@line 10355
  }
 }
 $10 = HEAP32[2501] | 0; //@line 10358
 if (!$10) {
  $$06 = -3007; //@line 10361
  STACKTOP = sp; //@line 10362
  return $$06 | 0; //@line 10362
 }
 $13 = $2 + 12 | 0; //@line 10365
 $14 = HEAP32[$13 >> 2] | 0; //@line 10366
 $15 = ($14 | 0) == 0; //@line 10367
 if (($1 | 0) > 0) {
  do {
   if ($15) {
    $23 = 0; //@line 10371
   } else {
    $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 10374
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10375
    FUNCTION_TABLE_vii[$17 & 7]($3, $2); //@line 10376
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 111; //@line 10379
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 10381
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10383
     HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 10385
     HEAP32[$AsyncCtx + 16 >> 2] = $13; //@line 10387
     sp = STACKTOP; //@line 10388
     STACKTOP = sp; //@line 10389
     return 0; //@line 10389
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10391
     $23 = HEAP32[$13 >> 2] | 0; //@line 10393
     break;
    }
   }
  } while (0);
  $22 = $3 + 12 | 0; //@line 10398
  HEAP32[$22 >> 2] = $23; //@line 10399
  $AsyncCtx29 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10400
  $24 = _equeue_alloc($10, 16) | 0; //@line 10401
  if (___async) {
   HEAP32[$AsyncCtx29 >> 2] = 112; //@line 10404
   HEAP32[$AsyncCtx29 + 4 >> 2] = $22; //@line 10406
   HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 10408
   HEAP32[$AsyncCtx29 + 12 >> 2] = $10; //@line 10410
   HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 10412
   HEAP32[$AsyncCtx29 + 20 >> 2] = $22; //@line 10414
   sp = STACKTOP; //@line 10415
   STACKTOP = sp; //@line 10416
   return 0; //@line 10416
  }
  _emscripten_free_async_context($AsyncCtx29 | 0); //@line 10418
  do {
   if (!$24) {
    $$0$i = 0; //@line 10422
   } else {
    $31 = HEAP32[$22 >> 2] | 0; //@line 10424
    do {
     if (!$31) {
      $42 = 0; //@line 10428
     } else {
      $34 = HEAP32[$31 + 4 >> 2] | 0; //@line 10431
      $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10432
      FUNCTION_TABLE_vii[$34 & 7]($24, $3); //@line 10433
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 113; //@line 10436
       HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 10438
       HEAP32[$AsyncCtx2 + 8 >> 2] = $24; //@line 10440
       HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 10442
       HEAP32[$AsyncCtx2 + 16 >> 2] = $10; //@line 10444
       HEAP32[$AsyncCtx2 + 20 >> 2] = $22; //@line 10446
       HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 10448
       sp = STACKTOP; //@line 10449
       STACKTOP = sp; //@line 10450
       return 0; //@line 10450
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10452
       $42 = HEAP32[$22 >> 2] | 0; //@line 10454
       break;
      }
     }
    } while (0);
    HEAP32[$24 + 12 >> 2] = $42; //@line 10460
    _equeue_event_delay($24, $1); //@line 10461
    _equeue_event_dtor($24, 114); //@line 10462
    $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10463
    $43 = _equeue_post($10, 115, $24) | 0; //@line 10464
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 116; //@line 10467
     HEAP32[$AsyncCtx23 + 4 >> 2] = $22; //@line 10469
     HEAP32[$AsyncCtx23 + 8 >> 2] = $3; //@line 10471
     sp = STACKTOP; //@line 10472
     STACKTOP = sp; //@line 10473
     return 0; //@line 10473
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 10475
     $$0$i = $43; //@line 10476
     break;
    }
   }
  } while (0);
  $46 = ($$0$i | 0) == 0; //@line 10481
  $47 = HEAP32[$22 >> 2] | 0; //@line 10482
  do {
   if ($47 | 0) {
    $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 10487
    $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10488
    FUNCTION_TABLE_vi[$50 & 511]($3); //@line 10489
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 117; //@line 10492
     HEAP8[$AsyncCtx6 + 4 >> 0] = $46 & 1; //@line 10495
     sp = STACKTOP; //@line 10496
     STACKTOP = sp; //@line 10497
     return 0; //@line 10497
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10499
     break;
    }
   }
  } while (0);
  if ($46) {
   $$06 = -3007; //@line 10505
   STACKTOP = sp; //@line 10506
   return $$06 | 0; //@line 10506
  }
 } else {
  do {
   if ($15) {
    $58 = 0; //@line 10511
   } else {
    $53 = HEAP32[$14 + 4 >> 2] | 0; //@line 10514
    $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10515
    FUNCTION_TABLE_vii[$53 & 7]($4, $2); //@line 10516
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 118; //@line 10519
     HEAP32[$AsyncCtx10 + 4 >> 2] = $13; //@line 10521
     HEAP32[$AsyncCtx10 + 8 >> 2] = $4; //@line 10523
     HEAP32[$AsyncCtx10 + 12 >> 2] = $10; //@line 10525
     sp = STACKTOP; //@line 10526
     STACKTOP = sp; //@line 10527
     return 0; //@line 10527
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10529
     $58 = HEAP32[$13 >> 2] | 0; //@line 10531
     break;
    }
   }
  } while (0);
  $57 = $4 + 12 | 0; //@line 10536
  HEAP32[$57 >> 2] = $58; //@line 10537
  $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10538
  $59 = _equeue_alloc($10, 16) | 0; //@line 10539
  if (___async) {
   HEAP32[$AsyncCtx26 >> 2] = 119; //@line 10542
   HEAP32[$AsyncCtx26 + 4 >> 2] = $57; //@line 10544
   HEAP32[$AsyncCtx26 + 8 >> 2] = $10; //@line 10546
   HEAP32[$AsyncCtx26 + 12 >> 2] = $4; //@line 10548
   HEAP32[$AsyncCtx26 + 16 >> 2] = $57; //@line 10550
   sp = STACKTOP; //@line 10551
   STACKTOP = sp; //@line 10552
   return 0; //@line 10552
  }
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 10554
  do {
   if (!$59) {
    $$0$i20 = 0; //@line 10558
   } else {
    $65 = HEAP32[$57 >> 2] | 0; //@line 10560
    do {
     if (!$65) {
      $75 = 0; //@line 10564
     } else {
      $68 = HEAP32[$65 + 4 >> 2] | 0; //@line 10567
      $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10568
      FUNCTION_TABLE_vii[$68 & 7]($59, $4); //@line 10569
      if (___async) {
       HEAP32[$AsyncCtx13 >> 2] = 120; //@line 10572
       HEAP32[$AsyncCtx13 + 4 >> 2] = $57; //@line 10574
       HEAP32[$AsyncCtx13 + 8 >> 2] = $59; //@line 10576
       HEAP32[$AsyncCtx13 + 12 >> 2] = $10; //@line 10578
       HEAP32[$AsyncCtx13 + 16 >> 2] = $57; //@line 10580
       HEAP32[$AsyncCtx13 + 20 >> 2] = $4; //@line 10582
       sp = STACKTOP; //@line 10583
       STACKTOP = sp; //@line 10584
       return 0; //@line 10584
      } else {
       _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10586
       $75 = HEAP32[$57 >> 2] | 0; //@line 10588
       break;
      }
     }
    } while (0);
    HEAP32[$59 + 12 >> 2] = $75; //@line 10594
    _equeue_event_dtor($59, 114); //@line 10595
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10596
    $76 = _equeue_post($10, 115, $59) | 0; //@line 10597
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 121; //@line 10600
     HEAP32[$AsyncCtx20 + 4 >> 2] = $57; //@line 10602
     HEAP32[$AsyncCtx20 + 8 >> 2] = $4; //@line 10604
     sp = STACKTOP; //@line 10605
     STACKTOP = sp; //@line 10606
     return 0; //@line 10606
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 10608
     $$0$i20 = $76; //@line 10609
     break;
    }
   }
  } while (0);
  $79 = ($$0$i20 | 0) == 0; //@line 10614
  $80 = HEAP32[$57 >> 2] | 0; //@line 10615
  do {
   if ($80 | 0) {
    $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 10620
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10621
    FUNCTION_TABLE_vi[$83 & 511]($4); //@line 10622
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 122; //@line 10625
     HEAP8[$AsyncCtx17 + 4 >> 0] = $79 & 1; //@line 10628
     sp = STACKTOP; //@line 10629
     STACKTOP = sp; //@line 10630
     return 0; //@line 10630
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 10632
     break;
    }
   }
  } while (0);
  if ($79) {
   $$06 = -3007; //@line 10638
   STACKTOP = sp; //@line 10639
   return $$06 | 0; //@line 10639
  }
 }
 $$06 = 0; //@line 10642
 STACKTOP = sp; //@line 10643
 return $$06 | 0; //@line 10643
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_61($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $10 = 0, $100 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $88 = 0, $94 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11996
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11998
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12000
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12002
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12004
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12006
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12008
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12010
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12012
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12014
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12016
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12018
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12020
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12022
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($18); //@line 12027
  return;
 }
 $33 = (HEAPU8[$18 >> 0] | 0) << 8 | (HEAPU8[$24 >> 0] | 0); //@line 12035
 $34 = $33 & 65535; //@line 12036
 $35 = HEAP32[2509] | 0; //@line 12037
 if (!$35) {
  label = 4; //@line 12040
 } else {
  if (($33 | 0) == (HEAPU16[$35 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $35; //@line 12047
   label = 5; //@line 12048
  } else {
   label = 4; //@line 12050
  }
 }
 do {
  if ((label | 0) == 4) {
   $41 = HEAP32[2510] | 0; //@line 12055
   if ($41 | 0) {
    if (($33 | 0) == (HEAPU16[$41 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $41; //@line 12063
     label = 5; //@line 12064
     break;
    }
   }
   $88 = HEAP32[2511] | 0; //@line 12068
   if ($88 | 0) {
    if (($33 | 0) == (HEAPU16[$88 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $88; //@line 12076
     label = 5; //@line 12077
     break;
    }
   }
   $94 = HEAP32[2512] | 0; //@line 12081
   if ($94 | 0) {
    if (($33 | 0) == (HEAPU16[$94 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $94; //@line 12089
     label = 5; //@line 12090
     break;
    }
   }
   $100 = HEAP32[2513] | 0; //@line 12094
   if ($100 | 0) {
    if (($33 | 0) == (HEAPU16[$100 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $100; //@line 12102
     label = 5; //@line 12103
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
   $63 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 12114
   $$ = $63 >>> 0 > 1 ? $63 : 1; //@line 12116
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 12120
   $66 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 12017) | 0; //@line 12121
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 256; //@line 12124
    $67 = $ReallocAsyncCtx4 + 4 | 0; //@line 12125
    HEAP32[$67 >> 2] = $$lcssa; //@line 12126
    $68 = $ReallocAsyncCtx4 + 8 | 0; //@line 12127
    HEAP32[$68 >> 2] = $2; //@line 12128
    $69 = $ReallocAsyncCtx4 + 12 | 0; //@line 12129
    HEAP32[$69 >> 2] = $4; //@line 12130
    $70 = $ReallocAsyncCtx4 + 16 | 0; //@line 12131
    HEAP32[$70 >> 2] = $6; //@line 12132
    $71 = $ReallocAsyncCtx4 + 20 | 0; //@line 12133
    HEAP32[$71 >> 2] = $8; //@line 12134
    $72 = $ReallocAsyncCtx4 + 24 | 0; //@line 12135
    HEAP32[$72 >> 2] = $10; //@line 12136
    $73 = $ReallocAsyncCtx4 + 28 | 0; //@line 12137
    HEAP32[$73 >> 2] = $12; //@line 12138
    $74 = $ReallocAsyncCtx4 + 32 | 0; //@line 12139
    HEAP32[$74 >> 2] = $14; //@line 12140
    $75 = $ReallocAsyncCtx4 + 36 | 0; //@line 12141
    HEAP32[$75 >> 2] = $16; //@line 12142
    $76 = $ReallocAsyncCtx4 + 40 | 0; //@line 12143
    HEAP32[$76 >> 2] = $18; //@line 12144
    $77 = $ReallocAsyncCtx4 + 44 | 0; //@line 12145
    HEAP32[$77 >> 2] = $20; //@line 12146
    $78 = $ReallocAsyncCtx4 + 48 | 0; //@line 12147
    HEAP32[$78 >> 2] = $22; //@line 12148
    $79 = $ReallocAsyncCtx4 + 52 | 0; //@line 12149
    HEAP32[$79 >> 2] = $24; //@line 12150
    $80 = $ReallocAsyncCtx4 + 56 | 0; //@line 12151
    HEAP32[$80 >> 2] = $26; //@line 12152
    $81 = $ReallocAsyncCtx4 + 60 | 0; //@line 12153
    HEAP16[$81 >> 1] = $34; //@line 12154
    $82 = $ReallocAsyncCtx4 + 64 | 0; //@line 12155
    HEAP32[$82 >> 2] = $$; //@line 12156
    sp = STACKTOP; //@line 12157
    return;
   }
   HEAP32[___async_retval >> 2] = $66; //@line 12161
   ___async_unwind = 0; //@line 12162
   HEAP32[$ReallocAsyncCtx4 >> 2] = 256; //@line 12163
   $67 = $ReallocAsyncCtx4 + 4 | 0; //@line 12164
   HEAP32[$67 >> 2] = $$lcssa; //@line 12165
   $68 = $ReallocAsyncCtx4 + 8 | 0; //@line 12166
   HEAP32[$68 >> 2] = $2; //@line 12167
   $69 = $ReallocAsyncCtx4 + 12 | 0; //@line 12168
   HEAP32[$69 >> 2] = $4; //@line 12169
   $70 = $ReallocAsyncCtx4 + 16 | 0; //@line 12170
   HEAP32[$70 >> 2] = $6; //@line 12171
   $71 = $ReallocAsyncCtx4 + 20 | 0; //@line 12172
   HEAP32[$71 >> 2] = $8; //@line 12173
   $72 = $ReallocAsyncCtx4 + 24 | 0; //@line 12174
   HEAP32[$72 >> 2] = $10; //@line 12175
   $73 = $ReallocAsyncCtx4 + 28 | 0; //@line 12176
   HEAP32[$73 >> 2] = $12; //@line 12177
   $74 = $ReallocAsyncCtx4 + 32 | 0; //@line 12178
   HEAP32[$74 >> 2] = $14; //@line 12179
   $75 = $ReallocAsyncCtx4 + 36 | 0; //@line 12180
   HEAP32[$75 >> 2] = $16; //@line 12181
   $76 = $ReallocAsyncCtx4 + 40 | 0; //@line 12182
   HEAP32[$76 >> 2] = $18; //@line 12183
   $77 = $ReallocAsyncCtx4 + 44 | 0; //@line 12184
   HEAP32[$77 >> 2] = $20; //@line 12185
   $78 = $ReallocAsyncCtx4 + 48 | 0; //@line 12186
   HEAP32[$78 >> 2] = $22; //@line 12187
   $79 = $ReallocAsyncCtx4 + 52 | 0; //@line 12188
   HEAP32[$79 >> 2] = $24; //@line 12189
   $80 = $ReallocAsyncCtx4 + 56 | 0; //@line 12190
   HEAP32[$80 >> 2] = $26; //@line 12191
   $81 = $ReallocAsyncCtx4 + 60 | 0; //@line 12192
   HEAP16[$81 >> 1] = $34; //@line 12193
   $82 = $ReallocAsyncCtx4 + 64 | 0; //@line 12194
   HEAP32[$82 >> 2] = $$; //@line 12195
   sp = STACKTOP; //@line 12196
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 12200
 $46 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($26, 0, $18, 512) | 0; //@line 12201
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 255; //@line 12204
  $47 = $ReallocAsyncCtx6 + 4 | 0; //@line 12205
  HEAP32[$47 >> 2] = $2; //@line 12206
  $48 = $ReallocAsyncCtx6 + 8 | 0; //@line 12207
  HEAP32[$48 >> 2] = $4; //@line 12208
  $49 = $ReallocAsyncCtx6 + 12 | 0; //@line 12209
  HEAP32[$49 >> 2] = $6; //@line 12210
  $50 = $ReallocAsyncCtx6 + 16 | 0; //@line 12211
  HEAP32[$50 >> 2] = $8; //@line 12212
  $51 = $ReallocAsyncCtx6 + 20 | 0; //@line 12213
  HEAP32[$51 >> 2] = $10; //@line 12214
  $52 = $ReallocAsyncCtx6 + 24 | 0; //@line 12215
  HEAP32[$52 >> 2] = $12; //@line 12216
  $53 = $ReallocAsyncCtx6 + 28 | 0; //@line 12217
  HEAP32[$53 >> 2] = $14; //@line 12218
  $54 = $ReallocAsyncCtx6 + 32 | 0; //@line 12219
  HEAP32[$54 >> 2] = $16; //@line 12220
  $55 = $ReallocAsyncCtx6 + 36 | 0; //@line 12221
  HEAP32[$55 >> 2] = $18; //@line 12222
  $56 = $ReallocAsyncCtx6 + 40 | 0; //@line 12223
  HEAP32[$56 >> 2] = $20; //@line 12224
  $57 = $ReallocAsyncCtx6 + 44 | 0; //@line 12225
  HEAP32[$57 >> 2] = $22; //@line 12226
  $58 = $ReallocAsyncCtx6 + 48 | 0; //@line 12227
  HEAP32[$58 >> 2] = $24; //@line 12228
  $59 = $ReallocAsyncCtx6 + 52 | 0; //@line 12229
  HEAP32[$59 >> 2] = $26; //@line 12230
  sp = STACKTOP; //@line 12231
  return;
 }
 HEAP32[___async_retval >> 2] = $46; //@line 12235
 ___async_unwind = 0; //@line 12236
 HEAP32[$ReallocAsyncCtx6 >> 2] = 255; //@line 12237
 $47 = $ReallocAsyncCtx6 + 4 | 0; //@line 12238
 HEAP32[$47 >> 2] = $2; //@line 12239
 $48 = $ReallocAsyncCtx6 + 8 | 0; //@line 12240
 HEAP32[$48 >> 2] = $4; //@line 12241
 $49 = $ReallocAsyncCtx6 + 12 | 0; //@line 12242
 HEAP32[$49 >> 2] = $6; //@line 12243
 $50 = $ReallocAsyncCtx6 + 16 | 0; //@line 12244
 HEAP32[$50 >> 2] = $8; //@line 12245
 $51 = $ReallocAsyncCtx6 + 20 | 0; //@line 12246
 HEAP32[$51 >> 2] = $10; //@line 12247
 $52 = $ReallocAsyncCtx6 + 24 | 0; //@line 12248
 HEAP32[$52 >> 2] = $12; //@line 12249
 $53 = $ReallocAsyncCtx6 + 28 | 0; //@line 12250
 HEAP32[$53 >> 2] = $14; //@line 12251
 $54 = $ReallocAsyncCtx6 + 32 | 0; //@line 12252
 HEAP32[$54 >> 2] = $16; //@line 12253
 $55 = $ReallocAsyncCtx6 + 36 | 0; //@line 12254
 HEAP32[$55 >> 2] = $18; //@line 12255
 $56 = $ReallocAsyncCtx6 + 40 | 0; //@line 12256
 HEAP32[$56 >> 2] = $20; //@line 12257
 $57 = $ReallocAsyncCtx6 + 44 | 0; //@line 12258
 HEAP32[$57 >> 2] = $22; //@line 12259
 $58 = $ReallocAsyncCtx6 + 48 | 0; //@line 12260
 HEAP32[$58 >> 2] = $24; //@line 12261
 $59 = $ReallocAsyncCtx6 + 52 | 0; //@line 12262
 HEAP32[$59 >> 2] = $26; //@line 12263
 sp = STACKTOP; //@line 12264
 return;
}
function __ZL30nsapi_dns_query_async_responsePv($0) {
 $0 = $0 | 0;
 var $$048 = 0, $$049 = 0, $$051 = 0, $$byval_copy27 = 0, $$lcssa = 0, $$pr$i = 0, $$pre = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $41 = 0, $45 = 0, $47 = 0, $54 = 0, $55 = 0, $59 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $77 = 0, $79 = 0, $85 = 0, $91 = 0, $95 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18465
 STACKTOP = STACKTOP + 48 | 0; //@line 18466
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 18466
 $$byval_copy27 = sp + 20 | 0; //@line 18467
 $1 = sp; //@line 18468
 $2 = $0; //@line 18469
 $3 = HEAP32[2509] | 0; //@line 18470
 if (!$3) {
  label = 3; //@line 18473
 } else {
  if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) {
   $$lcssa = $3; //@line 18478
  } else {
   label = 3; //@line 18480
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = HEAP32[2510] | 0; //@line 18485
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $7; //@line 18491
     break;
    }
   }
   $91 = HEAP32[2511] | 0; //@line 18495
   if ($91 | 0) {
    if ((HEAP32[$91 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $91; //@line 18501
     break;
    }
   }
   $95 = HEAP32[2512] | 0; //@line 18505
   if ($95 | 0) {
    if ((HEAP32[$95 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $95; //@line 18511
     break;
    }
   }
   $99 = HEAP32[2513] | 0; //@line 18515
   if (!$99) {
    STACKTOP = sp; //@line 18518
    return;
   }
   if ((HEAP32[$99 >> 2] | 0) == ($2 | 0)) {
    $$lcssa = $99; //@line 18523
   } else {
    STACKTOP = sp; //@line 18525
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa + 88 >> 2] | 0) != 1) {
  STACKTOP = sp; //@line 18533
  return;
 }
 $14 = $$lcssa + 86 | 0; //@line 18537
 $15 = HEAP8[$14 >> 0] | 0; //@line 18538
 $16 = $15 & 255; //@line 18539
 if (!($15 << 24 >> 24)) {
  $$048 = 0; //@line 18542
  $$049 = HEAP32[$$lcssa + 4 >> 2] | 0; //@line 18542
 } else {
  $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18545
  $19 = __ZnajRKSt9nothrow_t($16 << 6, 12017) | 0; //@line 18546
  if (___async) {
   HEAP32[$AsyncCtx13 >> 2] = 262; //@line 18549
   HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 18551
   HEAP32[$AsyncCtx13 + 8 >> 2] = $16; //@line 18553
   HEAP32[$AsyncCtx13 + 12 >> 2] = $14; //@line 18555
   HEAP32[$AsyncCtx13 + 16 >> 2] = $$lcssa; //@line 18557
   HEAP32[$AsyncCtx13 + 20 >> 2] = $$byval_copy27; //@line 18559
   sp = STACKTOP; //@line 18560
   STACKTOP = sp; //@line 18561
   return;
  }
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 18563
  if (!$19) {
   $41 = 0; //@line 18566
  } else {
   $26 = $19 + ($16 << 6) | 0; //@line 18568
   $27 = $19; //@line 18569
   do {
    HEAP32[$1 >> 2] = 0; //@line 18571
    HEAP32[$1 + 4 >> 2] = 0; //@line 18571
    HEAP32[$1 + 8 >> 2] = 0; //@line 18571
    HEAP32[$1 + 12 >> 2] = 0; //@line 18571
    HEAP32[$1 + 16 >> 2] = 0; //@line 18571
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$1 >> 2]; //@line 18572
    HEAP32[$$byval_copy27 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 18572
    HEAP32[$$byval_copy27 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 18572
    HEAP32[$$byval_copy27 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 18572
    HEAP32[$$byval_copy27 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 18572
    __ZN13SocketAddressC2E10nsapi_addrt($27, $$byval_copy27, 0); //@line 18573
    $27 = $27 + 64 | 0; //@line 18574
   } while (($27 | 0) != ($26 | 0));
   $41 = $19; //@line 18577
  }
  $$pre = $$lcssa + 64 | 0; //@line 18586
  if (HEAP8[$14 >> 0] | 0) {
   $$051 = 0; //@line 18588
   do {
    $45 = $41 + ($$051 << 6) | 0; //@line 18590
    $47 = (HEAP32[$$pre >> 2] | 0) + ($$051 * 20 | 0) | 0; //@line 18592
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$47 >> 2]; //@line 18593
    HEAP32[$$byval_copy27 + 4 >> 2] = HEAP32[$47 + 4 >> 2]; //@line 18593
    HEAP32[$$byval_copy27 + 8 >> 2] = HEAP32[$47 + 8 >> 2]; //@line 18593
    HEAP32[$$byval_copy27 + 12 >> 2] = HEAP32[$47 + 12 >> 2]; //@line 18593
    HEAP32[$$byval_copy27 + 16 >> 2] = HEAP32[$47 + 16 >> 2]; //@line 18593
    __ZN13SocketAddress8set_addrE10nsapi_addr($45, $$byval_copy27); //@line 18594
    $$051 = $$051 + 1 | 0; //@line 18595
   } while (($$051 | 0) < (HEAPU8[$14 >> 0] | 0));
  }
  $33 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 18607
  $34 = HEAP32[$$pre >> 2] | 0; //@line 18608
  $36 = HEAP32[$$lcssa + 68 >> 2] | 0; //@line 18610
  $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18611
  __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($33, $34, $36); //@line 18612
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 263; //@line 18615
   HEAP32[$AsyncCtx9 + 4 >> 2] = $$lcssa; //@line 18617
   HEAP32[$AsyncCtx9 + 8 >> 2] = $14; //@line 18619
   HEAP32[$AsyncCtx9 + 12 >> 2] = $$byval_copy27; //@line 18621
   HEAP32[$AsyncCtx9 + 16 >> 2] = $41; //@line 18623
   sp = STACKTOP; //@line 18624
   STACKTOP = sp; //@line 18625
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 18627
  if (!(HEAP32[$$lcssa + 48 >> 2] | 0)) {
   $$048 = $41; //@line 18632
   $$049 = 0; //@line 18632
  } else {
   $$048 = $41; //@line 18636
   $$049 = HEAPU8[$14 >> 0] | 0; //@line 18636
  }
 }
 $54 = $$lcssa + 28 | 0; //@line 18639
 $55 = HEAP32[$54 >> 2] | 0; //@line 18640
 do {
  if (!$55) {
   $67 = 0; //@line 18644
  } else {
   $59 = HEAP32[$55 + 4 >> 2] | 0; //@line 18648
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 18649
   FUNCTION_TABLE_vii[$59 & 7]($$byval_copy27, $$lcssa + 16 | 0); //@line 18650
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 264; //@line 18653
    HEAP32[$AsyncCtx + 4 >> 2] = $54; //@line 18655
    HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy27; //@line 18657
    HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 18659
    HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy27; //@line 18661
    HEAP32[$AsyncCtx + 20 >> 2] = $$048; //@line 18663
    HEAP32[$AsyncCtx + 24 >> 2] = $$049; //@line 18665
    sp = STACKTOP; //@line 18666
    STACKTOP = sp; //@line 18667
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18669
    $67 = HEAP32[$54 >> 2] | 0; //@line 18671
    break;
   }
  }
 } while (0);
 $66 = $$byval_copy27 + 12 | 0; //@line 18676
 HEAP32[$66 >> 2] = $67; //@line 18677
 $68 = HEAP32[$$lcssa >> 2] | 0; //@line 18678
 $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18679
 __ZL28nsapi_dns_query_async_deletei($68); //@line 18680
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 265; //@line 18683
  HEAP32[$AsyncCtx16 + 4 >> 2] = $66; //@line 18685
  HEAP32[$AsyncCtx16 + 8 >> 2] = $$byval_copy27; //@line 18687
  HEAP32[$AsyncCtx16 + 12 >> 2] = $$048; //@line 18689
  HEAP32[$AsyncCtx16 + 16 >> 2] = $$049; //@line 18691
  sp = STACKTOP; //@line 18692
  STACKTOP = sp; //@line 18693
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 18695
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18696
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 18697
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 266; //@line 18700
  HEAP32[$AsyncCtx19 + 4 >> 2] = $66; //@line 18702
  HEAP32[$AsyncCtx19 + 8 >> 2] = $$byval_copy27; //@line 18704
  HEAP32[$AsyncCtx19 + 12 >> 2] = $$048; //@line 18706
  HEAP32[$AsyncCtx19 + 16 >> 2] = $$049; //@line 18708
  sp = STACKTOP; //@line 18709
  STACKTOP = sp; //@line 18710
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18712
 $77 = HEAP32[$66 >> 2] | 0; //@line 18713
 do {
  if ($77 | 0) {
   $79 = HEAP32[$77 >> 2] | 0; //@line 18717
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18718
   FUNCTION_TABLE_viii[$79 & 0]($$byval_copy27, $$049, $$048); //@line 18719
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 267; //@line 18722
    HEAP32[$AsyncCtx2 + 4 >> 2] = $66; //@line 18724
    HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy27; //@line 18726
    HEAP32[$AsyncCtx2 + 12 >> 2] = $$048; //@line 18728
    sp = STACKTOP; //@line 18729
    STACKTOP = sp; //@line 18730
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 18732
   $$pr$i = HEAP32[$66 >> 2] | 0; //@line 18733
   if ($$pr$i | 0) {
    $85 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 18737
    $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18738
    FUNCTION_TABLE_vi[$85 & 511]($$byval_copy27); //@line 18739
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 268; //@line 18742
     HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy27; //@line 18744
     HEAP32[$AsyncCtx6 + 8 >> 2] = $$048; //@line 18746
     sp = STACKTOP; //@line 18747
     STACKTOP = sp; //@line 18748
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 18750
     break;
    }
   }
  }
 } while (0);
 if (!$$048) {
  STACKTOP = sp; //@line 18758
  return;
 }
 __ZdaPv($$048); //@line 18760
 STACKTOP = sp; //@line 18761
 return;
}
function __Z17recv_coap_messagev() {
 var $$016$i$i = 0, $$017$i$i = 0, $$byval_copy = 0, $$pre$phi23Z2D = 0, $$pre22$pre$phiZZ2D = 0, $0 = 0, $1 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $76 = 0, $AsyncCtx = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19838
 STACKTOP = STACKTOP + 176 | 0; //@line 19839
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 19839
 $$byval_copy = sp + 144 | 0; //@line 19840
 $vararg_buffer19 = sp + 56 | 0; //@line 19841
 $vararg_buffer16 = sp + 48 | 0; //@line 19842
 $vararg_buffer13 = sp + 40 | 0; //@line 19843
 $vararg_buffer10 = sp + 32 | 0; //@line 19844
 $vararg_buffer7 = sp + 24 | 0; //@line 19845
 $vararg_buffer4 = sp + 16 | 0; //@line 19846
 $vararg_buffer1 = sp + 8 | 0; //@line 19847
 $vararg_buffer = sp; //@line 19848
 $0 = sp + 80 | 0; //@line 19849
 $1 = sp + 60 | 0; //@line 19850
 HEAP32[$1 >> 2] = 0; //@line 19851
 HEAP32[$1 + 4 >> 2] = 0; //@line 19851
 HEAP32[$1 + 8 >> 2] = 0; //@line 19851
 HEAP32[$1 + 12 >> 2] = 0; //@line 19851
 HEAP32[$1 + 16 >> 2] = 0; //@line 19851
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 19852
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19852
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 19852
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 19852
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 19852
 __ZN13SocketAddressC2E10nsapi_addrt($0, $$byval_copy, 0); //@line 19853
 $2 = _malloc(1280) | 0; //@line 19854
 $AsyncCtx23 = _emscripten_alloc_async_context(80, sp) | 0; //@line 19855
 $3 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj(10068, $0, $2, 1280) | 0; //@line 19856
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 308; //@line 19859
  HEAP32[$AsyncCtx23 + 4 >> 2] = $vararg_buffer; //@line 19861
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer; //@line 19863
  HEAP32[$AsyncCtx23 + 12 >> 2] = $2; //@line 19865
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer19; //@line 19867
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer19; //@line 19869
  HEAP32[$AsyncCtx23 + 24 >> 2] = $0; //@line 19871
  HEAP32[$AsyncCtx23 + 28 >> 2] = $$byval_copy; //@line 19873
  HEAP32[$AsyncCtx23 + 32 >> 2] = $vararg_buffer1; //@line 19875
  HEAP32[$AsyncCtx23 + 36 >> 2] = $vararg_buffer1; //@line 19877
  HEAP32[$AsyncCtx23 + 40 >> 2] = $vararg_buffer4; //@line 19879
  HEAP32[$AsyncCtx23 + 44 >> 2] = $vararg_buffer4; //@line 19881
  HEAP32[$AsyncCtx23 + 48 >> 2] = $vararg_buffer7; //@line 19883
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer7; //@line 19885
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer10; //@line 19887
  HEAP32[$AsyncCtx23 + 60 >> 2] = $vararg_buffer10; //@line 19889
  HEAP32[$AsyncCtx23 + 64 >> 2] = $vararg_buffer13; //@line 19891
  HEAP32[$AsyncCtx23 + 68 >> 2] = $vararg_buffer13; //@line 19893
  HEAP32[$AsyncCtx23 + 72 >> 2] = $vararg_buffer16; //@line 19895
  HEAP32[$AsyncCtx23 + 76 >> 2] = $vararg_buffer16; //@line 19897
  sp = STACKTOP; //@line 19898
  STACKTOP = sp; //@line 19899
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 19901
 if (($3 | 0) <= 0) {
  HEAP32[$vararg_buffer19 >> 2] = $3; //@line 19904
  _printf(6256, $vararg_buffer19) | 0; //@line 19905
  _free($2); //@line 19906
  STACKTOP = sp; //@line 19907
  return;
 }
 HEAP32[$vararg_buffer >> 2] = $3; //@line 19909
 _printf(6083, $vararg_buffer) | 0; //@line 19910
 $24 = HEAP32[2531] | 0; //@line 19911
 $AsyncCtx27 = _emscripten_alloc_async_context(64, sp) | 0; //@line 19913
 $26 = _sn_coap_parser($24, $3 & 65535, $2, 748) | 0; //@line 19914
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 309; //@line 19917
  HEAP32[$AsyncCtx27 + 4 >> 2] = $$byval_copy; //@line 19919
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer1; //@line 19921
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 19923
  HEAP32[$AsyncCtx27 + 16 >> 2] = $vararg_buffer4; //@line 19925
  HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer4; //@line 19927
  HEAP32[$AsyncCtx27 + 24 >> 2] = $vararg_buffer7; //@line 19929
  HEAP32[$AsyncCtx27 + 28 >> 2] = $vararg_buffer7; //@line 19931
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer10; //@line 19933
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer10; //@line 19935
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer13; //@line 19937
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer13; //@line 19939
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer16; //@line 19941
  HEAP32[$AsyncCtx27 + 52 >> 2] = $vararg_buffer16; //@line 19943
  HEAP32[$AsyncCtx27 + 56 >> 2] = $2; //@line 19945
  HEAP32[$AsyncCtx27 + 60 >> 2] = $0; //@line 19947
  sp = STACKTOP; //@line 19948
  STACKTOP = sp; //@line 19949
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 19951
 $43 = HEAP32[$26 + 36 >> 2] | 0; //@line 19953
 $44 = $26 + 24 | 0; //@line 19954
 $45 = HEAP16[$44 >> 1] | 0; //@line 19955
 $46 = $45 & 65535; //@line 19956
 HEAP32[$$byval_copy >> 2] = 0; //@line 19957
 HEAP32[$$byval_copy + 4 >> 2] = 0; //@line 19957
 HEAP32[$$byval_copy + 8 >> 2] = 0; //@line 19957
 do {
  if (($45 & 65535) < 11) {
   $76 = $$byval_copy + 11 | 0; //@line 19962
   HEAP8[$76 >> 0] = $45; //@line 19963
   if (!($45 << 16 >> 16)) {
    $$017$i$i = $$byval_copy; //@line 19966
    $$pre$phi23Z2D = $76; //@line 19966
   } else {
    $$016$i$i = $$byval_copy; //@line 19968
    $$pre22$pre$phiZZ2D = $76; //@line 19968
    label = 11; //@line 19969
   }
  } else {
   $49 = $46 + 16 & 131056; //@line 19973
   $AsyncCtx = _emscripten_alloc_async_context(88, sp) | 0; //@line 19974
   $50 = __Znwj($49) | 0; //@line 19975
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 310; //@line 19978
    HEAP32[$AsyncCtx + 4 >> 2] = $$byval_copy; //@line 19980
    HEAP32[$AsyncCtx + 8 >> 2] = $49; //@line 19982
    HEAP32[$AsyncCtx + 12 >> 2] = $46; //@line 19984
    HEAP32[$AsyncCtx + 16 >> 2] = $43; //@line 19986
    HEAP32[$AsyncCtx + 20 >> 2] = $26; //@line 19988
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 19990
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 19992
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer4; //@line 19994
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer4; //@line 19996
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer7; //@line 19998
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer7; //@line 20000
    HEAP32[$AsyncCtx + 48 >> 2] = $44; //@line 20002
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer10; //@line 20004
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer10; //@line 20006
    HEAP32[$AsyncCtx + 60 >> 2] = $$byval_copy; //@line 20008
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer13; //@line 20010
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer13; //@line 20012
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer16; //@line 20014
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer16; //@line 20016
    HEAP32[$AsyncCtx + 80 >> 2] = $2; //@line 20018
    HEAP32[$AsyncCtx + 84 >> 2] = $0; //@line 20020
    sp = STACKTOP; //@line 20021
    STACKTOP = sp; //@line 20022
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20024
    HEAP32[$$byval_copy >> 2] = $50; //@line 20025
    HEAP32[$$byval_copy + 8 >> 2] = $49 | -2147483648; //@line 20028
    HEAP32[$$byval_copy + 4 >> 2] = $46; //@line 20030
    $$016$i$i = $50; //@line 20032
    $$pre22$pre$phiZZ2D = $$byval_copy + 11 | 0; //@line 20032
    label = 11; //@line 20033
    break;
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  _memcpy($$016$i$i | 0, $43 | 0, $46 | 0) | 0; //@line 20039
  $$017$i$i = $$016$i$i; //@line 20040
  $$pre$phi23Z2D = $$pre22$pre$phiZZ2D; //@line 20040
 }
 HEAP8[$$017$i$i + $46 >> 0] = 0; //@line 20043
 HEAP32[$vararg_buffer1 >> 2] = HEAPU16[$26 + 20 >> 1]; //@line 20047
 _printf(6118, $vararg_buffer1) | 0; //@line 20048
 HEAP32[$vararg_buffer4 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 20051
 _printf(6141, $vararg_buffer4) | 0; //@line 20052
 HEAP32[$vararg_buffer7 >> 2] = HEAP32[$26 + 16 >> 2]; //@line 20055
 _printf(6164, $vararg_buffer7) | 0; //@line 20056
 HEAP32[$vararg_buffer10 >> 2] = HEAPU16[$44 >> 1]; //@line 20059
 _printf(6187, $vararg_buffer10) | 0; //@line 20060
 HEAP32[$vararg_buffer13 >> 2] = (HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0 ? HEAP32[$$byval_copy >> 2] | 0 : $$byval_copy; //@line 20065
 _printf(6210, $vararg_buffer13) | 0; //@line 20066
 HEAP32[$vararg_buffer16 >> 2] = HEAP32[$26 + 40 >> 2]; //@line 20069
 _printf(6233, $vararg_buffer16) | 0; //@line 20070
 if ((HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 20075
 }
 _free($2); //@line 20077
 STACKTOP = sp; //@line 20078
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_62($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$sroa_idx5$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $74 = 0, $8 = 0, $80 = 0, $86 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12275
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12277
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12279
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12281
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12283
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($6); //@line 12288
  return;
 }
 $11 = $6 + 1 | 0; //@line 12291
 $12 = $2 + 12 | 0; //@line 12292
 $13 = $4 + 8 | 0; //@line 12293
 $$sroa_idx5$i$i = $4 + 4 | 0; //@line 12294
 $14 = $4 + 12 | 0; //@line 12295
 $20 = (HEAPU8[$6 >> 0] | 0) << 8 | (HEAPU8[$11 >> 0] | 0); //@line 12301
 $21 = $20 & 65535; //@line 12302
 $22 = HEAP32[2509] | 0; //@line 12303
 if (!$22) {
  label = 6; //@line 12306
 } else {
  if (($20 | 0) == (HEAPU16[$22 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $22; //@line 12313
   label = 7; //@line 12314
  } else {
   label = 6; //@line 12316
  }
 }
 do {
  if ((label | 0) == 6) {
   $28 = HEAP32[2510] | 0; //@line 12321
   if ($28 | 0) {
    if (($20 | 0) == (HEAPU16[$28 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $28; //@line 12329
     label = 7; //@line 12330
     break;
    }
   }
   $74 = HEAP32[2511] | 0; //@line 12334
   if ($74 | 0) {
    if (($20 | 0) == (HEAPU16[$74 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $74; //@line 12342
     label = 7; //@line 12343
     break;
    }
   }
   $80 = HEAP32[2512] | 0; //@line 12347
   if ($80 | 0) {
    if (($20 | 0) == (HEAPU16[$80 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $80; //@line 12355
     label = 7; //@line 12356
     break;
    }
   }
   $86 = HEAP32[2513] | 0; //@line 12360
   if ($86 | 0) {
    if (($20 | 0) == (HEAPU16[$86 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $86; //@line 12368
     label = 7; //@line 12369
    }
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
   $49 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 12380
   $$ = $49 >>> 0 > 1 ? $49 : 1; //@line 12382
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 12386
   $52 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 12017) | 0; //@line 12387
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 256; //@line 12390
    $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 12391
    HEAP32[$53 >> 2] = $$lcssa; //@line 12392
    $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 12393
    HEAP32[$54 >> 2] = $2; //@line 12394
    $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 12395
    HEAP32[$55 >> 2] = $14; //@line 12396
    $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 12397
    HEAP32[$56 >> 2] = $12; //@line 12398
    $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 12399
    HEAP32[$57 >> 2] = $13; //@line 12400
    $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 12401
    HEAP32[$58 >> 2] = $4; //@line 12402
    $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 12403
    HEAP32[$59 >> 2] = $$sroa_idx5$i$i; //@line 12404
    $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 12405
    HEAP32[$60 >> 2] = $2; //@line 12406
    $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 12407
    HEAP32[$61 >> 2] = $4; //@line 12408
    $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 12409
    HEAP32[$62 >> 2] = $6; //@line 12410
    $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 12411
    HEAP32[$63 >> 2] = $4; //@line 12412
    $64 = $ReallocAsyncCtx4 + 48 | 0; //@line 12413
    HEAP32[$64 >> 2] = $12; //@line 12414
    $65 = $ReallocAsyncCtx4 + 52 | 0; //@line 12415
    HEAP32[$65 >> 2] = $11; //@line 12416
    $66 = $ReallocAsyncCtx4 + 56 | 0; //@line 12417
    HEAP32[$66 >> 2] = $8; //@line 12418
    $67 = $ReallocAsyncCtx4 + 60 | 0; //@line 12419
    HEAP16[$67 >> 1] = $21; //@line 12420
    $68 = $ReallocAsyncCtx4 + 64 | 0; //@line 12421
    HEAP32[$68 >> 2] = $$; //@line 12422
    sp = STACKTOP; //@line 12423
    return;
   }
   HEAP32[___async_retval >> 2] = $52; //@line 12427
   ___async_unwind = 0; //@line 12428
   HEAP32[$ReallocAsyncCtx4 >> 2] = 256; //@line 12429
   $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 12430
   HEAP32[$53 >> 2] = $$lcssa; //@line 12431
   $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 12432
   HEAP32[$54 >> 2] = $2; //@line 12433
   $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 12434
   HEAP32[$55 >> 2] = $14; //@line 12435
   $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 12436
   HEAP32[$56 >> 2] = $12; //@line 12437
   $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 12438
   HEAP32[$57 >> 2] = $13; //@line 12439
   $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 12440
   HEAP32[$58 >> 2] = $4; //@line 12441
   $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 12442
   HEAP32[$59 >> 2] = $$sroa_idx5$i$i; //@line 12443
   $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 12444
   HEAP32[$60 >> 2] = $2; //@line 12445
   $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 12446
   HEAP32[$61 >> 2] = $4; //@line 12447
   $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 12448
   HEAP32[$62 >> 2] = $6; //@line 12449
   $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 12450
   HEAP32[$63 >> 2] = $4; //@line 12451
   $64 = $ReallocAsyncCtx4 + 48 | 0; //@line 12452
   HEAP32[$64 >> 2] = $12; //@line 12453
   $65 = $ReallocAsyncCtx4 + 52 | 0; //@line 12454
   HEAP32[$65 >> 2] = $11; //@line 12455
   $66 = $ReallocAsyncCtx4 + 56 | 0; //@line 12456
   HEAP32[$66 >> 2] = $8; //@line 12457
   $67 = $ReallocAsyncCtx4 + 60 | 0; //@line 12458
   HEAP16[$67 >> 1] = $21; //@line 12459
   $68 = $ReallocAsyncCtx4 + 64 | 0; //@line 12460
   HEAP32[$68 >> 2] = $$; //@line 12461
   sp = STACKTOP; //@line 12462
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 12466
 $33 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($8, 0, $6, 512) | 0; //@line 12467
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 255; //@line 12470
  $34 = $ReallocAsyncCtx6 + 4 | 0; //@line 12471
  HEAP32[$34 >> 2] = $2; //@line 12472
  $35 = $ReallocAsyncCtx6 + 8 | 0; //@line 12473
  HEAP32[$35 >> 2] = $14; //@line 12474
  $36 = $ReallocAsyncCtx6 + 12 | 0; //@line 12475
  HEAP32[$36 >> 2] = $12; //@line 12476
  $37 = $ReallocAsyncCtx6 + 16 | 0; //@line 12477
  HEAP32[$37 >> 2] = $13; //@line 12478
  $38 = $ReallocAsyncCtx6 + 20 | 0; //@line 12479
  HEAP32[$38 >> 2] = $4; //@line 12480
  $39 = $ReallocAsyncCtx6 + 24 | 0; //@line 12481
  HEAP32[$39 >> 2] = $$sroa_idx5$i$i; //@line 12482
  $40 = $ReallocAsyncCtx6 + 28 | 0; //@line 12483
  HEAP32[$40 >> 2] = $2; //@line 12484
  $41 = $ReallocAsyncCtx6 + 32 | 0; //@line 12485
  HEAP32[$41 >> 2] = $4; //@line 12486
  $42 = $ReallocAsyncCtx6 + 36 | 0; //@line 12487
  HEAP32[$42 >> 2] = $6; //@line 12488
  $43 = $ReallocAsyncCtx6 + 40 | 0; //@line 12489
  HEAP32[$43 >> 2] = $4; //@line 12490
  $44 = $ReallocAsyncCtx6 + 44 | 0; //@line 12491
  HEAP32[$44 >> 2] = $12; //@line 12492
  $45 = $ReallocAsyncCtx6 + 48 | 0; //@line 12493
  HEAP32[$45 >> 2] = $11; //@line 12494
  $46 = $ReallocAsyncCtx6 + 52 | 0; //@line 12495
  HEAP32[$46 >> 2] = $8; //@line 12496
  sp = STACKTOP; //@line 12497
  return;
 }
 HEAP32[___async_retval >> 2] = $33; //@line 12501
 ___async_unwind = 0; //@line 12502
 HEAP32[$ReallocAsyncCtx6 >> 2] = 255; //@line 12503
 $34 = $ReallocAsyncCtx6 + 4 | 0; //@line 12504
 HEAP32[$34 >> 2] = $2; //@line 12505
 $35 = $ReallocAsyncCtx6 + 8 | 0; //@line 12506
 HEAP32[$35 >> 2] = $14; //@line 12507
 $36 = $ReallocAsyncCtx6 + 12 | 0; //@line 12508
 HEAP32[$36 >> 2] = $12; //@line 12509
 $37 = $ReallocAsyncCtx6 + 16 | 0; //@line 12510
 HEAP32[$37 >> 2] = $13; //@line 12511
 $38 = $ReallocAsyncCtx6 + 20 | 0; //@line 12512
 HEAP32[$38 >> 2] = $4; //@line 12513
 $39 = $ReallocAsyncCtx6 + 24 | 0; //@line 12514
 HEAP32[$39 >> 2] = $$sroa_idx5$i$i; //@line 12515
 $40 = $ReallocAsyncCtx6 + 28 | 0; //@line 12516
 HEAP32[$40 >> 2] = $2; //@line 12517
 $41 = $ReallocAsyncCtx6 + 32 | 0; //@line 12518
 HEAP32[$41 >> 2] = $4; //@line 12519
 $42 = $ReallocAsyncCtx6 + 36 | 0; //@line 12520
 HEAP32[$42 >> 2] = $6; //@line 12521
 $43 = $ReallocAsyncCtx6 + 40 | 0; //@line 12522
 HEAP32[$43 >> 2] = $4; //@line 12523
 $44 = $ReallocAsyncCtx6 + 44 | 0; //@line 12524
 HEAP32[$44 >> 2] = $12; //@line 12525
 $45 = $ReallocAsyncCtx6 + 48 | 0; //@line 12526
 HEAP32[$45 >> 2] = $11; //@line 12527
 $46 = $ReallocAsyncCtx6 + 52 | 0; //@line 12528
 HEAP32[$46 >> 2] = $8; //@line 12529
 sp = STACKTOP; //@line 12530
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_220($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32354
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32356
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32358
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32360
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32362
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32364
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32366
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32368
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32370
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32372
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32374
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32378
 $24 = HEAP32[HEAP32[$0 + 44 >> 2] >> 2] | 0; //@line 32379
 if ($24 | 0) {
  $27 = HEAP32[$24 + 8 >> 2] | 0; //@line 32383
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(44) | 0; //@line 32384
  FUNCTION_TABLE_vi[$27 & 511]($4); //@line 32385
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 32388
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 32389
   HEAP32[$28 >> 2] = $2; //@line 32390
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 32391
   HEAP32[$29 >> 2] = $6; //@line 32392
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 32393
   HEAP32[$30 >> 2] = $AsyncRetVal; //@line 32394
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 32395
   HEAP32[$31 >> 2] = $8; //@line 32396
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 32397
   HEAP32[$32 >> 2] = $10; //@line 32398
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 32399
   HEAP32[$33 >> 2] = $12; //@line 32400
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 32401
   HEAP32[$34 >> 2] = $14; //@line 32402
   $35 = $ReallocAsyncCtx7 + 32 | 0; //@line 32403
   HEAP32[$35 >> 2] = $16; //@line 32404
   $36 = $ReallocAsyncCtx7 + 36 | 0; //@line 32405
   HEAP32[$36 >> 2] = $18; //@line 32406
   $37 = $ReallocAsyncCtx7 + 40 | 0; //@line 32407
   HEAP32[$37 >> 2] = $20; //@line 32408
   sp = STACKTOP; //@line 32409
   return;
  }
  ___async_unwind = 0; //@line 32412
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 32413
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 32414
  HEAP32[$28 >> 2] = $2; //@line 32415
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 32416
  HEAP32[$29 >> 2] = $6; //@line 32417
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 32418
  HEAP32[$30 >> 2] = $AsyncRetVal; //@line 32419
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 32420
  HEAP32[$31 >> 2] = $8; //@line 32421
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 32422
  HEAP32[$32 >> 2] = $10; //@line 32423
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 32424
  HEAP32[$33 >> 2] = $12; //@line 32425
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 32426
  HEAP32[$34 >> 2] = $14; //@line 32427
  $35 = $ReallocAsyncCtx7 + 32 | 0; //@line 32428
  HEAP32[$35 >> 2] = $16; //@line 32429
  $36 = $ReallocAsyncCtx7 + 36 | 0; //@line 32430
  HEAP32[$36 >> 2] = $18; //@line 32431
  $37 = $ReallocAsyncCtx7 + 40 | 0; //@line 32432
  HEAP32[$37 >> 2] = $20; //@line 32433
  sp = STACKTOP; //@line 32434
  return;
 }
 $38 = ($AsyncRetVal | 0) == 0; //@line 32437
 $39 = HEAP32[$8 >> 2] | 0; //@line 32438
 if ($39 | 0) {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 32442
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 32443
  FUNCTION_TABLE_vi[$42 & 511]($6); //@line 32444
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 32447
   $43 = $ReallocAsyncCtx8 + 4 | 0; //@line 32448
   HEAP32[$43 >> 2] = $2; //@line 32449
   $44 = $ReallocAsyncCtx8 + 8 | 0; //@line 32450
   HEAP32[$44 >> 2] = $10; //@line 32451
   $45 = $ReallocAsyncCtx8 + 12 | 0; //@line 32452
   HEAP32[$45 >> 2] = $12; //@line 32453
   $46 = $ReallocAsyncCtx8 + 16 | 0; //@line 32454
   HEAP32[$46 >> 2] = $14; //@line 32455
   $47 = $ReallocAsyncCtx8 + 20 | 0; //@line 32456
   HEAP32[$47 >> 2] = $16; //@line 32457
   $48 = $ReallocAsyncCtx8 + 24 | 0; //@line 32458
   $$expand_i1_val = $38 & 1; //@line 32459
   HEAP8[$48 >> 0] = $$expand_i1_val; //@line 32460
   $49 = $ReallocAsyncCtx8 + 28 | 0; //@line 32461
   HEAP32[$49 >> 2] = $18; //@line 32462
   $50 = $ReallocAsyncCtx8 + 32 | 0; //@line 32463
   HEAP32[$50 >> 2] = $20; //@line 32464
   sp = STACKTOP; //@line 32465
   return;
  }
  ___async_unwind = 0; //@line 32468
  HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 32469
  $43 = $ReallocAsyncCtx8 + 4 | 0; //@line 32470
  HEAP32[$43 >> 2] = $2; //@line 32471
  $44 = $ReallocAsyncCtx8 + 8 | 0; //@line 32472
  HEAP32[$44 >> 2] = $10; //@line 32473
  $45 = $ReallocAsyncCtx8 + 12 | 0; //@line 32474
  HEAP32[$45 >> 2] = $12; //@line 32475
  $46 = $ReallocAsyncCtx8 + 16 | 0; //@line 32476
  HEAP32[$46 >> 2] = $14; //@line 32477
  $47 = $ReallocAsyncCtx8 + 20 | 0; //@line 32478
  HEAP32[$47 >> 2] = $16; //@line 32479
  $48 = $ReallocAsyncCtx8 + 24 | 0; //@line 32480
  $$expand_i1_val = $38 & 1; //@line 32481
  HEAP8[$48 >> 0] = $$expand_i1_val; //@line 32482
  $49 = $ReallocAsyncCtx8 + 28 | 0; //@line 32483
  HEAP32[$49 >> 2] = $18; //@line 32484
  $50 = $ReallocAsyncCtx8 + 32 | 0; //@line 32485
  HEAP32[$50 >> 2] = $20; //@line 32486
  sp = STACKTOP; //@line 32487
  return;
 }
 if ($38) {
  HEAP8[10976] = 1; //@line 32491
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 32492
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 32493
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 32496
   $67 = $ReallocAsyncCtx13 + 4 | 0; //@line 32497
   HEAP32[$67 >> 2] = $20; //@line 32498
   $68 = $ReallocAsyncCtx13 + 8 | 0; //@line 32499
   HEAP32[$68 >> 2] = $2; //@line 32500
   sp = STACKTOP; //@line 32501
   return;
  }
  ___async_unwind = 0; //@line 32504
  HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 32505
  $67 = $ReallocAsyncCtx13 + 4 | 0; //@line 32506
  HEAP32[$67 >> 2] = $20; //@line 32507
  $68 = $ReallocAsyncCtx13 + 8 | 0; //@line 32508
  HEAP32[$68 >> 2] = $2; //@line 32509
  sp = STACKTOP; //@line 32510
  return;
 }
 $51 = HEAP32[$18 >> 2] | 0; //@line 32513
 if ($51 | 0) {
  __ZdlPv($51); //@line 32516
 }
 $53 = HEAP32[$16 >> 2] | 0; //@line 32518
 if ($53 | 0) {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 32522
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 32523
  FUNCTION_TABLE_vi[$56 & 511]($12); //@line 32524
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 32527
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 32528
   HEAP32[$57 >> 2] = $14; //@line 32529
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 32530
   HEAP32[$58 >> 2] = $10; //@line 32531
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 32532
   HEAP32[$59 >> 2] = $2; //@line 32533
   sp = STACKTOP; //@line 32534
   return;
  }
  ___async_unwind = 0; //@line 32537
  HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 32538
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 32539
  HEAP32[$57 >> 2] = $14; //@line 32540
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 32541
  HEAP32[$58 >> 2] = $10; //@line 32542
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 32543
  HEAP32[$59 >> 2] = $2; //@line 32544
  sp = STACKTOP; //@line 32545
  return;
 }
 $61 = HEAP32[$14 + 28 >> 2] | 0; //@line 32549
 if (!$61) {
  __ZdlPv($14); //@line 32552
  HEAP32[___async_retval >> 2] = -3007; //@line 32554
  return;
 }
 $64 = HEAP32[$61 + 8 >> 2] | 0; //@line 32558
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 32559
 FUNCTION_TABLE_vi[$64 & 511]($10); //@line 32560
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 32563
  $65 = $ReallocAsyncCtx10 + 4 | 0; //@line 32564
  HEAP32[$65 >> 2] = $14; //@line 32565
  $66 = $ReallocAsyncCtx10 + 8 | 0; //@line 32566
  HEAP32[$66 >> 2] = $2; //@line 32567
  sp = STACKTOP; //@line 32568
  return;
 }
 ___async_unwind = 0; //@line 32571
 HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 32572
 $65 = $ReallocAsyncCtx10 + 4 | 0; //@line 32573
 HEAP32[$65 >> 2] = $14; //@line 32574
 $66 = $ReallocAsyncCtx10 + 8 | 0; //@line 32575
 HEAP32[$66 >> 2] = $2; //@line 32576
 sp = STACKTOP; //@line 32577
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19176
 STACKTOP = STACKTOP + 32 | 0; //@line 19177
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19177
 $0 = sp; //@line 19178
 _gpio_init_out($0, 50); //@line 19179
 while (1) {
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19182
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19183
  _wait_ms(150); //@line 19184
  if (___async) {
   label = 3; //@line 19187
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 19190
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19192
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19193
  _wait_ms(150); //@line 19194
  if (___async) {
   label = 5; //@line 19197
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 19200
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19202
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19203
  _wait_ms(150); //@line 19204
  if (___async) {
   label = 7; //@line 19207
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 19210
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19212
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19213
  _wait_ms(150); //@line 19214
  if (___async) {
   label = 9; //@line 19217
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 19220
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19222
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19223
  _wait_ms(150); //@line 19224
  if (___async) {
   label = 11; //@line 19227
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 19230
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19232
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19233
  _wait_ms(150); //@line 19234
  if (___async) {
   label = 13; //@line 19237
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 19240
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19242
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19243
  _wait_ms(150); //@line 19244
  if (___async) {
   label = 15; //@line 19247
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 19250
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19252
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19253
  _wait_ms(150); //@line 19254
  if (___async) {
   label = 17; //@line 19257
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 19260
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19262
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19263
  _wait_ms(400); //@line 19264
  if (___async) {
   label = 19; //@line 19267
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 19270
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19272
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19273
  _wait_ms(400); //@line 19274
  if (___async) {
   label = 21; //@line 19277
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 19280
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19282
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19283
  _wait_ms(400); //@line 19284
  if (___async) {
   label = 23; //@line 19287
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19290
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19292
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19293
  _wait_ms(400); //@line 19294
  if (___async) {
   label = 25; //@line 19297
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19300
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19302
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19303
  _wait_ms(400); //@line 19304
  if (___async) {
   label = 27; //@line 19307
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19310
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19312
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19313
  _wait_ms(400); //@line 19314
  if (___async) {
   label = 29; //@line 19317
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19320
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19322
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19323
  _wait_ms(400); //@line 19324
  if (___async) {
   label = 31; //@line 19327
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19330
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19332
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19333
  _wait_ms(400); //@line 19334
  if (___async) {
   label = 33; //@line 19337
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19340
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 280; //@line 19344
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 19346
   sp = STACKTOP; //@line 19347
   STACKTOP = sp; //@line 19348
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 281; //@line 19352
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 19354
   sp = STACKTOP; //@line 19355
   STACKTOP = sp; //@line 19356
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 282; //@line 19360
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 19362
   sp = STACKTOP; //@line 19363
   STACKTOP = sp; //@line 19364
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 283; //@line 19368
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 19370
   sp = STACKTOP; //@line 19371
   STACKTOP = sp; //@line 19372
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 284; //@line 19376
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 19378
   sp = STACKTOP; //@line 19379
   STACKTOP = sp; //@line 19380
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 285; //@line 19384
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 19386
   sp = STACKTOP; //@line 19387
   STACKTOP = sp; //@line 19388
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 286; //@line 19392
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 19394
   sp = STACKTOP; //@line 19395
   STACKTOP = sp; //@line 19396
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 287; //@line 19400
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 19402
   sp = STACKTOP; //@line 19403
   STACKTOP = sp; //@line 19404
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 288; //@line 19408
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 19410
   sp = STACKTOP; //@line 19411
   STACKTOP = sp; //@line 19412
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 289; //@line 19416
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 19418
   sp = STACKTOP; //@line 19419
   STACKTOP = sp; //@line 19420
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 290; //@line 19424
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 19426
   sp = STACKTOP; //@line 19427
   STACKTOP = sp; //@line 19428
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 291; //@line 19432
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 19434
   sp = STACKTOP; //@line 19435
   STACKTOP = sp; //@line 19436
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 292; //@line 19440
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 19442
   sp = STACKTOP; //@line 19443
   STACKTOP = sp; //@line 19444
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 293; //@line 19448
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 19450
   sp = STACKTOP; //@line 19451
   STACKTOP = sp; //@line 19452
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 294; //@line 19456
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 19458
   sp = STACKTOP; //@line 19459
   STACKTOP = sp; //@line 19460
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 295; //@line 19464
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19466
   sp = STACKTOP; //@line 19467
   STACKTOP = sp; //@line 19468
   return;
  }
 }
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 23518
 $3 = HEAP32[$2 >> 2] | 0; //@line 23519
 $4 = $3 & -8; //@line 23520
 $5 = $0 + $4 | 0; //@line 23521
 $6 = HEAP32[2536] | 0; //@line 23522
 $8 = $3 & 3; //@line 23524
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 23530
 }
 $11 = $5 + 4 | 0; //@line 23533
 $12 = HEAP32[$11 >> 2] | 0; //@line 23534
 if (!($12 & 1)) {
  _abort(); //@line 23538
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 23545
   return $$2 | 0; //@line 23546
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[2652] << 1 >>> 0) {
    $$2 = $0; //@line 23556
    return $$2 | 0; //@line 23557
   }
  }
  $$2 = 0; //@line 23560
  return $$2 | 0; //@line 23561
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 23565
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 23568
   return $$2 | 0; //@line 23569
  }
  $26 = $0 + $1 | 0; //@line 23571
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 23575
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 23578
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 23581
  _dispose_chunk($26, $24); //@line 23582
  $$2 = $0; //@line 23583
  return $$2 | 0; //@line 23584
 }
 if ((HEAP32[2538] | 0) == ($5 | 0)) {
  $37 = (HEAP32[2535] | 0) + $4 | 0; //@line 23590
  $39 = $37 - $1 | 0; //@line 23592
  $40 = $0 + $1 | 0; //@line 23593
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 23595
   return $$2 | 0; //@line 23596
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 23603
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 23604
  HEAP32[2538] = $40; //@line 23605
  HEAP32[2535] = $39; //@line 23606
  $$2 = $0; //@line 23607
  return $$2 | 0; //@line 23608
 }
 if ((HEAP32[2537] | 0) == ($5 | 0)) {
  $49 = (HEAP32[2534] | 0) + $4 | 0; //@line 23614
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 23617
   return $$2 | 0; //@line 23618
  }
  $51 = $49 - $1 | 0; //@line 23620
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 23623
   $54 = $0 + $49 | 0; //@line 23624
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 23628
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 23631
   HEAP32[$54 >> 2] = $51; //@line 23632
   $60 = $54 + 4 | 0; //@line 23633
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 23636
   $storemerge = $53; //@line 23637
   $storemerge4 = $51; //@line 23637
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 23642
   $67 = $0 + $49 + 4 | 0; //@line 23644
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 23647
   $storemerge = 0; //@line 23648
   $storemerge4 = 0; //@line 23648
  }
  HEAP32[2534] = $storemerge4; //@line 23650
  HEAP32[2537] = $storemerge; //@line 23651
  $$2 = $0; //@line 23652
  return $$2 | 0; //@line 23653
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 23658
  return $$2 | 0; //@line 23659
 }
 $73 = ($12 & -8) + $4 | 0; //@line 23662
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 23665
  return $$2 | 0; //@line 23666
 }
 $75 = $73 - $1 | 0; //@line 23668
 $76 = $12 >>> 3; //@line 23669
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 23674
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 23676
   $83 = 10168 + ($76 << 1 << 2) | 0; //@line 23678
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 23683
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 23690
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[2532] = HEAP32[2532] & ~(1 << $76); //@line 23700
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 23706
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 23710
    }
    $96 = $81 + 8 | 0; //@line 23713
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 23717
    } else {
     _abort(); //@line 23719
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 23724
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 23725
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 23728
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 23730
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 23734
     $115 = $114 + 4 | 0; //@line 23735
     $116 = HEAP32[$115 >> 2] | 0; //@line 23736
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 23739
      if (!$118) {
       $$3 = 0; //@line 23742
       break;
      } else {
       $$1272 = $118; //@line 23745
       $$1275 = $114; //@line 23745
      }
     } else {
      $$1272 = $116; //@line 23748
      $$1275 = $115; //@line 23748
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 23751
      $121 = HEAP32[$120 >> 2] | 0; //@line 23752
      if ($121 | 0) {
       $$1272 = $121; //@line 23755
       $$1275 = $120; //@line 23755
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 23758
      $124 = HEAP32[$123 >> 2] | 0; //@line 23759
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 23764
       $$1275 = $123; //@line 23764
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 23769
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 23772
      $$3 = $$1272; //@line 23773
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 23778
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 23781
     }
     $108 = $106 + 12 | 0; //@line 23784
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 23788
     }
     $111 = $103 + 8 | 0; //@line 23791
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 23795
      HEAP32[$111 >> 2] = $106; //@line 23796
      $$3 = $103; //@line 23797
      break;
     } else {
      _abort(); //@line 23800
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 23808
    $130 = 10432 + ($129 << 2) | 0; //@line 23809
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 23814
      if (!$$3) {
       HEAP32[2533] = HEAP32[2533] & ~(1 << $129); //@line 23821
       break L49;
      }
     } else {
      if ((HEAP32[2536] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 23828
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 23836
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[2536] | 0; //@line 23846
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 23849
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 23853
    $147 = $5 + 16 | 0; //@line 23854
    $148 = HEAP32[$147 >> 2] | 0; //@line 23855
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 23861
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 23865
       HEAP32[$148 + 24 >> 2] = $$3; //@line 23867
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 23873
    if ($154 | 0) {
     if ((HEAP32[2536] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 23879
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 23883
      HEAP32[$154 + 24 >> 2] = $$3; //@line 23885
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 23897
  $165 = $0 + $73 + 4 | 0; //@line 23899
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 23902
  $$2 = $0; //@line 23903
  return $$2 | 0; //@line 23904
 } else {
  $168 = $0 + $1 | 0; //@line 23906
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 23910
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 23913
  $175 = $0 + $73 + 4 | 0; //@line 23915
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 23918
  _dispose_chunk($168, $75); //@line 23919
  $$2 = $0; //@line 23920
  return $$2 | 0; //@line 23921
 }
 return 0; //@line 23923
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 956
   $$0106$ph = 24; //@line 956
   label = 4; //@line 957
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 961
   $$0106$ph = 53; //@line 961
   label = 4; //@line 962
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 966
   $$0106$ph = 53; //@line 966
   label = 4; //@line 967
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 971
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 976
   $4 = $0 + 100 | 0; //@line 977
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 979
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 984
     $12 = HEAPU8[$5 >> 0] | 0; //@line 987
    } else {
     $12 = ___shgetc($0) | 0; //@line 990
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 1004
      $19 = HEAP32[$3 >> 2] | 0; //@line 1005
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 1010
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 1013
       $$0113 = $18; //@line 1013
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 1017
       $$0113 = $18; //@line 1017
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 1023
      $$0113 = 1; //@line 1023
     }
    }
   } while (0);
   $$0107127 = 0; //@line 1027
   $$1128 = $$0; //@line 1027
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[6489 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 1035
     $$1$lcssa = $$1128; //@line 1035
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 1041
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 1046
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 1049
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 1053
       break;
      }
     } else {
      $$2 = $$1128; //@line 1057
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 1060
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 1063
     $$1128 = $$2; //@line 1063
    } else {
     $$0107$lcssa = $39; //@line 1065
     $$1$lcssa = $$2; //@line 1065
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 1075
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 1080
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 1087
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 1094
        $$3126 = $$1$lcssa; //@line 1094
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[7272 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 1102
          $$5 = $$3126; //@line 1102
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 1108
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 1113
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 1116
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 1120
            break;
           }
          } else {
           $$4 = $$3126; //@line 1124
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 1127
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 1130
          $$3126 = $$4; //@line 1130
         } else {
          $$3110 = $70; //@line 1132
          $$5 = $$4; //@line 1132
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 1137
        $$5 = $$1$lcssa; //@line 1137
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 1142
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 1147
         $80 = HEAPU8[$72 >> 0] | 0; //@line 1150
        } else {
         $80 = ___shgetc($0) | 0; //@line 1153
        }
        if (($80 | 0) == 40) {
         $$4111 = 1; //@line 1157
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 1162
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 1167
         $$0114 = nan; //@line 1168
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 1172
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 1177
          $93 = HEAPU8[$85 >> 0] | 0; //@line 1180
         } else {
          $93 = ___shgetc($0) | 0; //@line 1183
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 1200
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 1204
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 1208
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 1212
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 1216
         ___shlim($0, 0); //@line 1217
         $$0114 = 0.0; //@line 1218
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 1223
         break L4;
        } else {
         $$in = $$4111; //@line 1226
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 1229
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 1233
         }
         if (!$$in) {
          $$0114 = nan; //@line 1237
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 1248
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 1253
          $126 = HEAPU8[$118 >> 0] | 0; //@line 1256
         } else {
          $126 = ___shgetc($0) | 0; //@line 1259
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 1265
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 1271
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 1275
          $$6 = 48; //@line 1276
         }
        } else {
         $$6 = $$5; //@line 1279
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 1282
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 1292
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 1295
        ___shlim($0, 0); //@line 1296
        $$0114 = 0.0; //@line 1297
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 1306
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 1310
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 1316
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 1321
      }
      $$1108 = $$1108 + -1 | 0; //@line 1323
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 1336
  }
 } while (0);
 return +$$0114;
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 2894
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 2894
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 2895
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 2896
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 2896
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 2897
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 2898
 $8 = $6 & 2047; //@line 2900
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 2901
 $11 = $9 & 2047; //@line 2903
 $12 = $3 & -2147483648; //@line 2904
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 2905
 $14 = tempRet0; //@line 2906
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 2912
  } else {
   $18 = ___DOUBLE_BITS_563($1) | 0; //@line 2914
   $20 = tempRet0 & 2147483647; //@line 2916
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 2925
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 2927
    $30 = tempRet0; //@line 2928
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 2944
     $42 = tempRet0; //@line 2945
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 2952
      $49 = $41; //@line 2952
      $50 = $42; //@line 2952
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 2954
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 2955
       $50 = tempRet0; //@line 2956
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 2965
        break;
       } else {
        $$073100 = $48; //@line 2963
       }
      }
     } else {
      $$073$lcssa = 0; //@line 2970
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 2973
     $$174 = $$073$lcssa; //@line 2975
     $87 = $59; //@line 2975
     $88 = tempRet0; //@line 2975
    } else {
     $$174 = $8; //@line 2979
     $87 = $2; //@line 2979
     $88 = $3 & 1048575 | 1048576; //@line 2979
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 2983
     $65 = tempRet0; //@line 2984
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 2991
      $72 = $64; //@line 2991
      $73 = $65; //@line 2991
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 2993
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 2994
       $73 = tempRet0; //@line 2995
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 3004
        break;
       } else {
        $$07194 = $71; //@line 3002
       }
      }
     } else {
      $$071$lcssa = 0; //@line 3009
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 3012
     $$172$ph = $$071$lcssa; //@line 3014
     $89 = $82; //@line 3014
     $90 = tempRet0; //@line 3014
    } else {
     $$172$ph = $11; //@line 3018
     $89 = $4; //@line 3018
     $90 = $5 & 1048575 | 1048576; //@line 3018
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 3021
    $92 = tempRet0; //@line 3022
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 3027
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 3030
      $101 = $92; //@line 3030
      $156 = $97; //@line 3030
      $157 = $87; //@line 3030
      $158 = $88; //@line 3030
      $99 = $91; //@line 3030
      while (1) {
       if ($156) {
        if (($99 | 0) == 0 & ($101 | 0) == 0) {
         break;
        } else {
         $104 = $99; //@line 3039
         $105 = $101; //@line 3039
        }
       } else {
        $104 = $157; //@line 3042
        $105 = $158; //@line 3042
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 3044
       $107 = tempRet0; //@line 3045
       $108 = $$27586 + -1 | 0; //@line 3046
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 3048
       $111 = tempRet0; //@line 3049
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 3054
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 3056
        $101 = $111; //@line 3056
        $156 = $116; //@line 3056
        $157 = $106; //@line 3056
        $158 = $107; //@line 3056
        $99 = $110; //@line 3056
       } else {
        $$275$lcssa = $108; //@line 3058
        $$lcssa = $116; //@line 3058
        $118 = $110; //@line 3058
        $120 = $111; //@line 3058
        $159 = $106; //@line 3058
        $160 = $107; //@line 3058
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 3063
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 3066
      $$lcssa = $97; //@line 3066
      $118 = $91; //@line 3066
      $120 = $92; //@line 3066
      $159 = $87; //@line 3066
      $160 = $88; //@line 3066
     }
    } while (0);
    if ($$lcssa) {
     if (($118 | 0) == 0 & ($120 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 3075
      break;
     } else {
      $123 = $120; //@line 3078
      $125 = $118; //@line 3078
     }
    } else {
     $123 = $160; //@line 3081
     $125 = $159; //@line 3081
    }
    if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 3089
     $130 = $125; //@line 3089
     $131 = $123; //@line 3089
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 3091
      $133 = tempRet0; //@line 3092
      $134 = $$37683 + -1 | 0; //@line 3093
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 3100
       $130 = $132; //@line 3100
       $131 = $133; //@line 3100
      } else {
       $$376$lcssa = $134; //@line 3102
       $141 = $132; //@line 3102
       $142 = $133; //@line 3102
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 3107
     $141 = $125; //@line 3107
     $142 = $123; //@line 3107
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 3111
     $144 = tempRet0; //@line 3112
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 3113
     $153 = $144 | tempRet0; //@line 3117
     $154 = $143 | $145; //@line 3117
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 3120
     $153 = tempRet0; //@line 3122
     $154 = $150; //@line 3122
    }
    HEAP32[tempDoublePtr >> 2] = $154; //@line 3125
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 3125
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 3126
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 3131
  $$070 = $27 / $27; //@line 3133
 }
 return +$$070;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_162($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25888
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25890
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25892
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25894
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25896
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25898
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25900
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25902
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25904
 HEAP32[$AsyncRetVal >> 2] = 0; //@line 25905
 HEAP32[$AsyncRetVal + 4 >> 2] = 0; //@line 25905
 HEAP32[$AsyncRetVal + 8 >> 2] = 0; //@line 25905
 HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 25905
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 25906
 $17 = $14 + 32 | 0; //@line 25908
 do {
  if (($AsyncRetVal | 0) == ($17 | 0)) {
   $51 = $AsyncRetVal; //@line 25912
   $53 = $AsyncRetVal; //@line 25912
  } else {
   $19 = $AsyncRetVal + 12 | 0; //@line 25914
   $20 = HEAP32[$19 >> 2] | 0; //@line 25915
   if ($20 | 0) {
    $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 25919
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(44) | 0; //@line 25920
    FUNCTION_TABLE_vi[$23 & 511]($AsyncRetVal); //@line 25921
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 225; //@line 25924
     $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 25925
     HEAP32[$24 >> 2] = $4; //@line 25926
     $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 25927
     HEAP32[$25 >> 2] = $6; //@line 25928
     $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 25929
     HEAP32[$26 >> 2] = $8; //@line 25930
     $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 25931
     HEAP32[$27 >> 2] = $19; //@line 25932
     $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 25933
     HEAP32[$28 >> 2] = $2; //@line 25934
     $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 25935
     HEAP32[$29 >> 2] = $10; //@line 25936
     $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 25937
     HEAP32[$30 >> 2] = $12; //@line 25938
     $31 = $ReallocAsyncCtx8 + 32 | 0; //@line 25939
     HEAP32[$31 >> 2] = $AsyncRetVal; //@line 25940
     $32 = $ReallocAsyncCtx8 + 36 | 0; //@line 25941
     HEAP32[$32 >> 2] = $17; //@line 25942
     $33 = $ReallocAsyncCtx8 + 40 | 0; //@line 25943
     HEAP32[$33 >> 2] = $14; //@line 25944
     sp = STACKTOP; //@line 25945
     return;
    }
    ___async_unwind = 0; //@line 25948
    HEAP32[$ReallocAsyncCtx8 >> 2] = 225; //@line 25949
    $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 25950
    HEAP32[$24 >> 2] = $4; //@line 25951
    $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 25952
    HEAP32[$25 >> 2] = $6; //@line 25953
    $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 25954
    HEAP32[$26 >> 2] = $8; //@line 25955
    $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 25956
    HEAP32[$27 >> 2] = $19; //@line 25957
    $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 25958
    HEAP32[$28 >> 2] = $2; //@line 25959
    $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 25960
    HEAP32[$29 >> 2] = $10; //@line 25961
    $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 25962
    HEAP32[$30 >> 2] = $12; //@line 25963
    $31 = $ReallocAsyncCtx8 + 32 | 0; //@line 25964
    HEAP32[$31 >> 2] = $AsyncRetVal; //@line 25965
    $32 = $ReallocAsyncCtx8 + 36 | 0; //@line 25966
    HEAP32[$32 >> 2] = $17; //@line 25967
    $33 = $ReallocAsyncCtx8 + 40 | 0; //@line 25968
    HEAP32[$33 >> 2] = $14; //@line 25969
    sp = STACKTOP; //@line 25970
    return;
   }
   $34 = $14 + 44 | 0; //@line 25973
   $35 = HEAP32[$34 >> 2] | 0; //@line 25974
   if (!$35) {
    HEAP32[$19 >> 2] = 0; //@line 25977
    $$pre85 = HEAP32[$2 >> 2] | 0; //@line 25978
    $51 = $$pre85; //@line 25980
    $53 = $$pre85; //@line 25980
    break;
   }
   $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 25984
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 25985
   FUNCTION_TABLE_vii[$38 & 7]($AsyncRetVal, $17); //@line 25986
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 226; //@line 25989
    $39 = $ReallocAsyncCtx9 + 4 | 0; //@line 25990
    HEAP32[$39 >> 2] = $34; //@line 25991
    $40 = $ReallocAsyncCtx9 + 8 | 0; //@line 25992
    HEAP32[$40 >> 2] = $19; //@line 25993
    $41 = $ReallocAsyncCtx9 + 12 | 0; //@line 25994
    HEAP32[$41 >> 2] = $2; //@line 25995
    $42 = $ReallocAsyncCtx9 + 16 | 0; //@line 25996
    HEAP32[$42 >> 2] = $4; //@line 25997
    $43 = $ReallocAsyncCtx9 + 20 | 0; //@line 25998
    HEAP32[$43 >> 2] = $6; //@line 25999
    $44 = $ReallocAsyncCtx9 + 24 | 0; //@line 26000
    HEAP32[$44 >> 2] = $8; //@line 26001
    $45 = $ReallocAsyncCtx9 + 28 | 0; //@line 26002
    HEAP32[$45 >> 2] = $10; //@line 26003
    $46 = $ReallocAsyncCtx9 + 32 | 0; //@line 26004
    HEAP32[$46 >> 2] = $12; //@line 26005
    $47 = $ReallocAsyncCtx9 + 36 | 0; //@line 26006
    HEAP32[$47 >> 2] = $14; //@line 26007
    sp = STACKTOP; //@line 26008
    return;
   }
   ___async_unwind = 0; //@line 26011
   HEAP32[$ReallocAsyncCtx9 >> 2] = 226; //@line 26012
   $39 = $ReallocAsyncCtx9 + 4 | 0; //@line 26013
   HEAP32[$39 >> 2] = $34; //@line 26014
   $40 = $ReallocAsyncCtx9 + 8 | 0; //@line 26015
   HEAP32[$40 >> 2] = $19; //@line 26016
   $41 = $ReallocAsyncCtx9 + 12 | 0; //@line 26017
   HEAP32[$41 >> 2] = $2; //@line 26018
   $42 = $ReallocAsyncCtx9 + 16 | 0; //@line 26019
   HEAP32[$42 >> 2] = $4; //@line 26020
   $43 = $ReallocAsyncCtx9 + 20 | 0; //@line 26021
   HEAP32[$43 >> 2] = $6; //@line 26022
   $44 = $ReallocAsyncCtx9 + 24 | 0; //@line 26023
   HEAP32[$44 >> 2] = $8; //@line 26024
   $45 = $ReallocAsyncCtx9 + 28 | 0; //@line 26025
   HEAP32[$45 >> 2] = $10; //@line 26026
   $46 = $ReallocAsyncCtx9 + 32 | 0; //@line 26027
   HEAP32[$46 >> 2] = $12; //@line 26028
   $47 = $ReallocAsyncCtx9 + 36 | 0; //@line 26029
   HEAP32[$47 >> 2] = $14; //@line 26030
   sp = STACKTOP; //@line 26031
   return;
  }
 } while (0);
 HEAP32[$51 + 16 >> 2] = HEAP32[$4 >> 2]; //@line 26037
 HEAP32[$6 + 8 >> 2] = 0; //@line 26039
 HEAP32[$6 >> 2] = 227; //@line 26040
 HEAP32[$6 + 4 >> 2] = $53; //@line 26042
 $54 = $6 + 12 | 0; //@line 26043
 HEAP32[$54 >> 2] = 724; //@line 26044
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 26045
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($8, $6); //@line 26046
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 228; //@line 26049
  $55 = $ReallocAsyncCtx18 + 4 | 0; //@line 26050
  HEAP32[$55 >> 2] = $54; //@line 26051
  $56 = $ReallocAsyncCtx18 + 8 | 0; //@line 26052
  HEAP32[$56 >> 2] = $10; //@line 26053
  $57 = $ReallocAsyncCtx18 + 12 | 0; //@line 26054
  HEAP32[$57 >> 2] = $12; //@line 26055
  $58 = $ReallocAsyncCtx18 + 16 | 0; //@line 26056
  HEAP32[$58 >> 2] = $6; //@line 26057
  $59 = $ReallocAsyncCtx18 + 20 | 0; //@line 26058
  HEAP32[$59 >> 2] = $14; //@line 26059
  sp = STACKTOP; //@line 26060
  return;
 }
 ___async_unwind = 0; //@line 26063
 HEAP32[$ReallocAsyncCtx18 >> 2] = 228; //@line 26064
 $55 = $ReallocAsyncCtx18 + 4 | 0; //@line 26065
 HEAP32[$55 >> 2] = $54; //@line 26066
 $56 = $ReallocAsyncCtx18 + 8 | 0; //@line 26067
 HEAP32[$56 >> 2] = $10; //@line 26068
 $57 = $ReallocAsyncCtx18 + 12 | 0; //@line 26069
 HEAP32[$57 >> 2] = $12; //@line 26070
 $58 = $ReallocAsyncCtx18 + 16 | 0; //@line 26071
 HEAP32[$58 >> 2] = $6; //@line 26072
 $59 = $ReallocAsyncCtx18 + 20 | 0; //@line 26073
 HEAP32[$59 >> 2] = $14; //@line 26074
 sp = STACKTOP; //@line 26075
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_145($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24740
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24742
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24744
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24746
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24748
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24750
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24752
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24754
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24756
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24758
 $19 = $2 + 12 | 0; //@line 24759
 $20 = HEAP32[$19 >> 2] | 0; //@line 24760
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 24764
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 24765
  FUNCTION_TABLE_vii[$23 & 7]($8, $2); //@line 24766
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 104; //@line 24769
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 24770
   HEAP32[$24 >> 2] = $4; //@line 24771
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 24772
   HEAP32[$25 >> 2] = $6; //@line 24773
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 24774
   HEAP32[$26 >> 2] = $19; //@line 24775
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 24776
   HEAP32[$27 >> 2] = $8; //@line 24777
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 24778
   HEAP32[$28 >> 2] = $10; //@line 24779
   $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 24780
   HEAP32[$29 >> 2] = $12; //@line 24781
   $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 24782
   HEAP32[$30 >> 2] = $14; //@line 24783
   $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 24784
   HEAP32[$31 >> 2] = $16; //@line 24785
   $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 24786
   HEAP32[$32 >> 2] = $18; //@line 24787
   sp = STACKTOP; //@line 24788
   return;
  }
  ___async_unwind = 0; //@line 24791
  HEAP32[$ReallocAsyncCtx4 >> 2] = 104; //@line 24792
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 24793
  HEAP32[$24 >> 2] = $4; //@line 24794
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 24795
  HEAP32[$25 >> 2] = $6; //@line 24796
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 24797
  HEAP32[$26 >> 2] = $19; //@line 24798
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 24799
  HEAP32[$27 >> 2] = $8; //@line 24800
  $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 24801
  HEAP32[$28 >> 2] = $10; //@line 24802
  $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 24803
  HEAP32[$29 >> 2] = $12; //@line 24804
  $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 24805
  HEAP32[$30 >> 2] = $14; //@line 24806
  $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 24807
  HEAP32[$31 >> 2] = $16; //@line 24808
  $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 24809
  HEAP32[$32 >> 2] = $18; //@line 24810
  sp = STACKTOP; //@line 24811
  return;
 }
 $33 = $8 + 12 | 0; //@line 24814
 HEAP32[$33 >> 2] = 0; //@line 24815
 $34 = $18 + 12 | 0; //@line 24816
 $35 = HEAP32[$34 >> 2] | 0; //@line 24817
 if (!$35) {
  $48 = $10 + 12 | 0; //@line 24820
  HEAP32[$48 >> 2] = 0; //@line 24821
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 24822
  $49 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($12, $14, $8, $10, $16) | 0; //@line 24823
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 106; //@line 24826
   $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 24827
   HEAP32[$50 >> 2] = $48; //@line 24828
   $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 24829
   HEAP32[$51 >> 2] = $33; //@line 24830
   $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 24831
   HEAP32[$52 >> 2] = $10; //@line 24832
   $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 24833
   HEAP32[$53 >> 2] = $34; //@line 24834
   $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 24835
   HEAP32[$54 >> 2] = $8; //@line 24836
   $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 24837
   HEAP32[$55 >> 2] = $6; //@line 24838
   $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 24839
   HEAP32[$56 >> 2] = $4; //@line 24840
   sp = STACKTOP; //@line 24841
   return;
  }
  HEAP32[___async_retval >> 2] = $49; //@line 24845
  ___async_unwind = 0; //@line 24846
  HEAP32[$ReallocAsyncCtx9 >> 2] = 106; //@line 24847
  $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 24848
  HEAP32[$50 >> 2] = $48; //@line 24849
  $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 24850
  HEAP32[$51 >> 2] = $33; //@line 24851
  $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 24852
  HEAP32[$52 >> 2] = $10; //@line 24853
  $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 24854
  HEAP32[$53 >> 2] = $34; //@line 24855
  $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 24856
  HEAP32[$54 >> 2] = $8; //@line 24857
  $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 24858
  HEAP32[$55 >> 2] = $6; //@line 24859
  $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 24860
  HEAP32[$56 >> 2] = $4; //@line 24861
  sp = STACKTOP; //@line 24862
  return;
 } else {
  $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 24866
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 24867
  FUNCTION_TABLE_vii[$38 & 7]($10, $6); //@line 24868
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 105; //@line 24871
   $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 24872
   HEAP32[$39 >> 2] = $34; //@line 24873
   $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 24874
   HEAP32[$40 >> 2] = $4; //@line 24875
   $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 24876
   HEAP32[$41 >> 2] = $6; //@line 24877
   $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 24878
   HEAP32[$42 >> 2] = $8; //@line 24879
   $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 24880
   HEAP32[$43 >> 2] = $33; //@line 24881
   $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 24882
   HEAP32[$44 >> 2] = $10; //@line 24883
   $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 24884
   HEAP32[$45 >> 2] = $12; //@line 24885
   $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 24886
   HEAP32[$46 >> 2] = $14; //@line 24887
   $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 24888
   HEAP32[$47 >> 2] = $16; //@line 24889
   sp = STACKTOP; //@line 24890
   return;
  }
  ___async_unwind = 0; //@line 24893
  HEAP32[$ReallocAsyncCtx5 >> 2] = 105; //@line 24894
  $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 24895
  HEAP32[$39 >> 2] = $34; //@line 24896
  $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 24897
  HEAP32[$40 >> 2] = $4; //@line 24898
  $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 24899
  HEAP32[$41 >> 2] = $6; //@line 24900
  $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 24901
  HEAP32[$42 >> 2] = $8; //@line 24902
  $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 24903
  HEAP32[$43 >> 2] = $33; //@line 24904
  $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 24905
  HEAP32[$44 >> 2] = $10; //@line 24906
  $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 24907
  HEAP32[$45 >> 2] = $12; //@line 24908
  $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 24909
  HEAP32[$46 >> 2] = $14; //@line 24910
  $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 24911
  HEAP32[$47 >> 2] = $16; //@line 24912
  sp = STACKTOP; //@line 24913
  return;
 }
}
function __ZL28nsapi_dns_query_async_deletei($0) {
 $0 = $0 | 0;
 var $$04011$lcssa = 0, $$1$off0 = 0, $$1$off0$1 = 0, $$1$off0$2 = 0, $$1$off0$3 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $1 = 0, $105 = 0, $109 = 0, $113 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $29 = 0, $33 = 0, $36 = 0, $39 = 0, $44 = 0, $47 = 0, $5 = 0, $50 = 0, $54 = 0, $58 = 0, $62 = 0, $7 = 0, $73 = 0, $83 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16884
 $1 = HEAP32[2509] | 0; //@line 16885
 $2 = ($1 | 0) == 0; //@line 16886
 if ($2) {
  label = 4; //@line 16888
 } else {
  if ((HEAP32[$1 >> 2] | 0) == ($0 | 0)) {
   $$04011$lcssa = 0; //@line 16893
   $$lcssa = $1; //@line 16893
  } else {
   label = 4; //@line 16895
  }
 }
 do {
  if ((label | 0) == 4) {
   $7 = HEAP32[2510] | 0; //@line 16900
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 1; //@line 16906
     $$lcssa = $7; //@line 16906
     break;
    }
   }
   $105 = HEAP32[2511] | 0; //@line 16910
   if ($105 | 0) {
    if ((HEAP32[$105 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 2; //@line 16916
     $$lcssa = $105; //@line 16916
     break;
    }
   }
   $109 = HEAP32[2512] | 0; //@line 16920
   if ($109 | 0) {
    if ((HEAP32[$109 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 3; //@line 16926
     $$lcssa = $109; //@line 16926
     break;
    }
   }
   $113 = HEAP32[2513] | 0; //@line 16930
   if (!$113) {
    return;
   }
   if ((HEAP32[$113 >> 2] | 0) == ($0 | 0)) {
    $$04011$lcssa = 4; //@line 16938
    $$lcssa = $113; //@line 16938
   } else {
    return;
   }
  }
 } while (0);
 $5 = $$lcssa + 8 | 0; //@line 16944
 if ($2 | ($1 | 0) == ($$lcssa | 0)) {
  $$1$off0 = 1; //@line 16948
 } else {
  if (!(HEAP32[$1 + 56 >> 2] | 0)) {
   $$1$off0 = 1; //@line 16954
  } else {
   $$1$off0 = (HEAP32[$1 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 16960
  }
 }
 $16 = HEAP32[2510] | 0; //@line 16963
 if (($16 | 0) == 0 | ($16 | 0) == ($$lcssa | 0)) {
  $$1$off0$1 = $$1$off0; //@line 16968
 } else {
  if (!(HEAP32[$16 + 56 >> 2] | 0)) {
   $$1$off0$1 = $$1$off0; //@line 16974
  } else {
   $$1$off0$1 = $$1$off0 & (HEAP32[$16 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 16981
  }
 }
 $73 = HEAP32[2511] | 0; //@line 16984
 if (($73 | 0) == 0 | ($73 | 0) == ($$lcssa | 0)) {
  $$1$off0$2 = $$1$off0$1; //@line 16989
 } else {
  if (!(HEAP32[$73 + 56 >> 2] | 0)) {
   $$1$off0$2 = $$1$off0$1; //@line 16995
  } else {
   $$1$off0$2 = $$1$off0$1 & (HEAP32[$73 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 17002
  }
 }
 $83 = HEAP32[2512] | 0; //@line 17005
 if (($83 | 0) == 0 | ($83 | 0) == ($$lcssa | 0)) {
  $$1$off0$3 = $$1$off0$2; //@line 17010
 } else {
  if (!(HEAP32[$83 + 56 >> 2] | 0)) {
   $$1$off0$3 = $$1$off0$2; //@line 17016
  } else {
   $$1$off0$3 = $$1$off0$2 & (HEAP32[$83 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 17023
  }
 }
 $93 = HEAP32[2513] | 0; //@line 17026
 if (($93 | 0) == 0 | ($93 | 0) == ($$lcssa | 0)) {
  label = 47; //@line 17031
 } else {
  if (!(HEAP32[$93 + 56 >> 2] | 0)) {
   label = 47; //@line 17037
  } else {
   if ($$1$off0$3 & (HEAP32[$93 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0)) {
    label = 8; //@line 17045
   }
  }
 }
 if ((label | 0) == 47) {
  if ($$1$off0$3) {
   label = 8; //@line 17051
  }
 }
 if ((label | 0) == 8) {
  $19 = $$lcssa + 56 | 0; //@line 17055
  $20 = HEAP32[$19 >> 2] | 0; //@line 17056
  if ($20 | 0) {
   $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 17059
   __ZN6Socket5closeEv($20) | 0; //@line 17060
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 232; //@line 17063
    HEAP32[$AsyncCtx15 + 4 >> 2] = $$lcssa; //@line 17065
    HEAP32[$AsyncCtx15 + 8 >> 2] = $$04011$lcssa; //@line 17067
    HEAP32[$AsyncCtx15 + 12 >> 2] = $19; //@line 17069
    sp = STACKTOP; //@line 17070
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17073
   $25 = HEAP32[$19 >> 2] | 0; //@line 17074
   do {
    if ($25 | 0) {
     $29 = HEAP32[(HEAP32[$25 >> 2] | 0) + 4 >> 2] | 0; //@line 17080
     $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 17081
     FUNCTION_TABLE_vi[$29 & 511]($25); //@line 17082
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 233; //@line 17085
      HEAP32[$AsyncCtx + 4 >> 2] = $$lcssa; //@line 17087
      HEAP32[$AsyncCtx + 8 >> 2] = $$04011$lcssa; //@line 17089
      sp = STACKTOP; //@line 17090
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 17093
      break;
     }
    }
   } while (0);
   $33 = HEAP32[$$lcssa + 60 >> 2] | 0; //@line 17099
   if ($33 | 0) {
    $36 = HEAP32[$33 + 12 >> 2] | 0; //@line 17103
    do {
     if (!$36) {
      $$pre$phiZ2D = $33; //@line 17107
     } else {
      $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 17110
      $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 17111
      FUNCTION_TABLE_vi[$39 & 511]($33); //@line 17112
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 234; //@line 17115
       HEAP32[$AsyncCtx3 + 4 >> 2] = $33; //@line 17117
       HEAP32[$AsyncCtx3 + 8 >> 2] = $$lcssa; //@line 17119
       HEAP32[$AsyncCtx3 + 12 >> 2] = $$04011$lcssa; //@line 17121
       sp = STACKTOP; //@line 17122
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17125
       $$pre$phiZ2D = $33; //@line 17126
       break;
      }
     }
    } while (0);
    __ZdlPv($$pre$phiZ2D); //@line 17131
   }
  }
 }
 $44 = HEAP32[$$lcssa + 64 >> 2] | 0; //@line 17136
 if ($44 | 0) {
  __ZdaPv($44); //@line 17139
 }
 $47 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 17142
 if ($47 | 0) {
  __ZdlPv($47); //@line 17145
 }
 $50 = HEAP32[$$lcssa + 44 >> 2] | 0; //@line 17148
 do {
  if ($50 | 0) {
   $54 = HEAP32[$50 + 8 >> 2] | 0; //@line 17154
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17155
   FUNCTION_TABLE_vi[$54 & 511]($$lcssa + 32 | 0); //@line 17156
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 235; //@line 17159
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$lcssa; //@line 17161
    HEAP32[$AsyncCtx7 + 8 >> 2] = $$04011$lcssa; //@line 17163
    sp = STACKTOP; //@line 17164
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17167
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$$lcssa + 28 >> 2] | 0; //@line 17173
 do {
  if ($58 | 0) {
   $62 = HEAP32[$58 + 8 >> 2] | 0; //@line 17179
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17180
   FUNCTION_TABLE_vi[$62 & 511]($$lcssa + 16 | 0); //@line 17181
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 236; //@line 17184
    HEAP32[$AsyncCtx11 + 4 >> 2] = $$lcssa; //@line 17186
    HEAP32[$AsyncCtx11 + 8 >> 2] = $$04011$lcssa; //@line 17188
    sp = STACKTOP; //@line 17189
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17192
    break;
   }
  }
 } while (0);
 __ZdlPv($$lcssa); //@line 17197
 HEAP32[10036 + ($$04011$lcssa << 2) >> 2] = 0; //@line 17199
 return;
}
function __Z17recv_coap_messagev__async_cb_83($0) {
 $0 = $0 | 0;
 var $$017$i$i = 0, $$pre$phi23Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13297
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13299
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13301
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13303
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13305
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13307
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13309
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13311
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13313
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13315
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13317
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13319
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13321
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13323
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13325
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13327
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13329
 $33 = HEAP32[$AsyncRetVal + 36 >> 2] | 0; //@line 13331
 $34 = $AsyncRetVal + 24 | 0; //@line 13332
 $35 = HEAP16[$34 >> 1] | 0; //@line 13333
 $36 = $35 & 65535; //@line 13334
 HEAP32[$2 >> 2] = 0; //@line 13335
 HEAP32[$2 + 4 >> 2] = 0; //@line 13335
 HEAP32[$2 + 8 >> 2] = 0; //@line 13335
 if (($35 & 65535) >= 11) {
  $39 = $36 + 16 & 131056; //@line 13339
  $ReallocAsyncCtx = _emscripten_realloc_async_context(88) | 0; //@line 13340
  $40 = __Znwj($39) | 0; //@line 13341
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 310; //@line 13344
   $41 = $ReallocAsyncCtx + 4 | 0; //@line 13345
   HEAP32[$41 >> 2] = $2; //@line 13346
   $42 = $ReallocAsyncCtx + 8 | 0; //@line 13347
   HEAP32[$42 >> 2] = $39; //@line 13348
   $43 = $ReallocAsyncCtx + 12 | 0; //@line 13349
   HEAP32[$43 >> 2] = $36; //@line 13350
   $44 = $ReallocAsyncCtx + 16 | 0; //@line 13351
   HEAP32[$44 >> 2] = $33; //@line 13352
   $45 = $ReallocAsyncCtx + 20 | 0; //@line 13353
   HEAP32[$45 >> 2] = $AsyncRetVal; //@line 13354
   $46 = $ReallocAsyncCtx + 24 | 0; //@line 13355
   HEAP32[$46 >> 2] = $4; //@line 13356
   $47 = $ReallocAsyncCtx + 28 | 0; //@line 13357
   HEAP32[$47 >> 2] = $6; //@line 13358
   $48 = $ReallocAsyncCtx + 32 | 0; //@line 13359
   HEAP32[$48 >> 2] = $8; //@line 13360
   $49 = $ReallocAsyncCtx + 36 | 0; //@line 13361
   HEAP32[$49 >> 2] = $10; //@line 13362
   $50 = $ReallocAsyncCtx + 40 | 0; //@line 13363
   HEAP32[$50 >> 2] = $12; //@line 13364
   $51 = $ReallocAsyncCtx + 44 | 0; //@line 13365
   HEAP32[$51 >> 2] = $14; //@line 13366
   $52 = $ReallocAsyncCtx + 48 | 0; //@line 13367
   HEAP32[$52 >> 2] = $34; //@line 13368
   $53 = $ReallocAsyncCtx + 52 | 0; //@line 13369
   HEAP32[$53 >> 2] = $16; //@line 13370
   $54 = $ReallocAsyncCtx + 56 | 0; //@line 13371
   HEAP32[$54 >> 2] = $18; //@line 13372
   $55 = $ReallocAsyncCtx + 60 | 0; //@line 13373
   HEAP32[$55 >> 2] = $2; //@line 13374
   $56 = $ReallocAsyncCtx + 64 | 0; //@line 13375
   HEAP32[$56 >> 2] = $20; //@line 13376
   $57 = $ReallocAsyncCtx + 68 | 0; //@line 13377
   HEAP32[$57 >> 2] = $22; //@line 13378
   $58 = $ReallocAsyncCtx + 72 | 0; //@line 13379
   HEAP32[$58 >> 2] = $24; //@line 13380
   $59 = $ReallocAsyncCtx + 76 | 0; //@line 13381
   HEAP32[$59 >> 2] = $26; //@line 13382
   $60 = $ReallocAsyncCtx + 80 | 0; //@line 13383
   HEAP32[$60 >> 2] = $28; //@line 13384
   $61 = $ReallocAsyncCtx + 84 | 0; //@line 13385
   HEAP32[$61 >> 2] = $30; //@line 13386
   sp = STACKTOP; //@line 13387
   return;
  }
  HEAP32[___async_retval >> 2] = $40; //@line 13391
  ___async_unwind = 0; //@line 13392
  HEAP32[$ReallocAsyncCtx >> 2] = 310; //@line 13393
  $41 = $ReallocAsyncCtx + 4 | 0; //@line 13394
  HEAP32[$41 >> 2] = $2; //@line 13395
  $42 = $ReallocAsyncCtx + 8 | 0; //@line 13396
  HEAP32[$42 >> 2] = $39; //@line 13397
  $43 = $ReallocAsyncCtx + 12 | 0; //@line 13398
  HEAP32[$43 >> 2] = $36; //@line 13399
  $44 = $ReallocAsyncCtx + 16 | 0; //@line 13400
  HEAP32[$44 >> 2] = $33; //@line 13401
  $45 = $ReallocAsyncCtx + 20 | 0; //@line 13402
  HEAP32[$45 >> 2] = $AsyncRetVal; //@line 13403
  $46 = $ReallocAsyncCtx + 24 | 0; //@line 13404
  HEAP32[$46 >> 2] = $4; //@line 13405
  $47 = $ReallocAsyncCtx + 28 | 0; //@line 13406
  HEAP32[$47 >> 2] = $6; //@line 13407
  $48 = $ReallocAsyncCtx + 32 | 0; //@line 13408
  HEAP32[$48 >> 2] = $8; //@line 13409
  $49 = $ReallocAsyncCtx + 36 | 0; //@line 13410
  HEAP32[$49 >> 2] = $10; //@line 13411
  $50 = $ReallocAsyncCtx + 40 | 0; //@line 13412
  HEAP32[$50 >> 2] = $12; //@line 13413
  $51 = $ReallocAsyncCtx + 44 | 0; //@line 13414
  HEAP32[$51 >> 2] = $14; //@line 13415
  $52 = $ReallocAsyncCtx + 48 | 0; //@line 13416
  HEAP32[$52 >> 2] = $34; //@line 13417
  $53 = $ReallocAsyncCtx + 52 | 0; //@line 13418
  HEAP32[$53 >> 2] = $16; //@line 13419
  $54 = $ReallocAsyncCtx + 56 | 0; //@line 13420
  HEAP32[$54 >> 2] = $18; //@line 13421
  $55 = $ReallocAsyncCtx + 60 | 0; //@line 13422
  HEAP32[$55 >> 2] = $2; //@line 13423
  $56 = $ReallocAsyncCtx + 64 | 0; //@line 13424
  HEAP32[$56 >> 2] = $20; //@line 13425
  $57 = $ReallocAsyncCtx + 68 | 0; //@line 13426
  HEAP32[$57 >> 2] = $22; //@line 13427
  $58 = $ReallocAsyncCtx + 72 | 0; //@line 13428
  HEAP32[$58 >> 2] = $24; //@line 13429
  $59 = $ReallocAsyncCtx + 76 | 0; //@line 13430
  HEAP32[$59 >> 2] = $26; //@line 13431
  $60 = $ReallocAsyncCtx + 80 | 0; //@line 13432
  HEAP32[$60 >> 2] = $28; //@line 13433
  $61 = $ReallocAsyncCtx + 84 | 0; //@line 13434
  HEAP32[$61 >> 2] = $30; //@line 13435
  sp = STACKTOP; //@line 13436
  return;
 }
 $64 = $2 + 11 | 0; //@line 13440
 HEAP8[$64 >> 0] = $35; //@line 13441
 if (!($35 << 16 >> 16)) {
  $$017$i$i = $2; //@line 13444
  $$pre$phi23Z2D = $64; //@line 13444
 } else {
  _memcpy($2 | 0, $33 | 0, $36 | 0) | 0; //@line 13446
  $$017$i$i = $2; //@line 13447
  $$pre$phi23Z2D = $64; //@line 13447
 }
 HEAP8[$$017$i$i + $36 >> 0] = 0; //@line 13450
 HEAP32[$4 >> 2] = HEAPU16[$AsyncRetVal + 20 >> 1]; //@line 13454
 _printf(6118, $4) | 0; //@line 13455
 HEAP32[$8 >> 2] = HEAP32[$AsyncRetVal + 8 >> 2]; //@line 13458
 _printf(6141, $8) | 0; //@line 13459
 HEAP32[$12 >> 2] = HEAP32[$AsyncRetVal + 16 >> 2]; //@line 13462
 _printf(6164, $12) | 0; //@line 13463
 HEAP32[$16 >> 2] = HEAPU16[$34 >> 1]; //@line 13466
 _printf(6187, $16) | 0; //@line 13467
 HEAP32[$20 >> 2] = (HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2; //@line 13472
 _printf(6210, $20) | 0; //@line 13473
 HEAP32[$24 >> 2] = HEAP32[$AsyncRetVal + 40 >> 2]; //@line 13476
 _printf(6233, $24) | 0; //@line 13477
 if ((HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 13482
 }
 _free($28); //@line 13484
 return;
}
function _main() {
 var $$0 = 0, $0 = 0, $12 = 0, $13 = 0, $19 = 0, $25 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 20085
 STACKTOP = STACKTOP + 880 | 0; //@line 20086
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(880); //@line 20086
 $vararg_buffer1 = sp + 8 | 0; //@line 20087
 $vararg_buffer = sp; //@line 20088
 $0 = sp + 16 | 0; //@line 20089
 __ZN17EthernetInterfaceC2Ev($0); //@line 20090
 if (__ZN17EthernetInterface7connectEv($0) | 0) {
  $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20094
  _puts(6288) | 0; //@line 20095
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 311; //@line 20098
   HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 20100
   sp = STACKTOP; //@line 20101
   STACKTOP = sp; //@line 20102
   return 0; //@line 20102
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 20104
  $$0 = 1; //@line 20105
  STACKTOP = sp; //@line 20106
  return $$0 | 0; //@line 20106
 }
 $AsyncCtx13 = _emscripten_alloc_async_context(28, sp) | 0; //@line 20108
 _puts(6337) | 0; //@line 20109
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 312; //@line 20112
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 20114
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 20116
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 20118
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 20120
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 20122
  HEAP32[$AsyncCtx13 + 24 >> 2] = $0; //@line 20124
  sp = STACKTOP; //@line 20125
  STACKTOP = sp; //@line 20126
  return 0; //@line 20126
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 20128
 $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 20131
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 20132
 $13 = FUNCTION_TABLE_ii[$12 & 31]($0) | 0; //@line 20133
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 313; //@line 20136
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 20138
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 20140
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 20142
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 20144
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 20146
  sp = STACKTOP; //@line 20147
  STACKTOP = sp; //@line 20148
  return 0; //@line 20148
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20150
 $19 = __Z18nsapi_create_stackP12NetworkStack($13) | 0; //@line 20151
 $AsyncCtx24 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20152
 __ZN6Socket4openEP12NetworkStack(10068, $19) | 0; //@line 20153
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 314; //@line 20156
  HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer; //@line 20158
  HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer; //@line 20160
  HEAP32[$AsyncCtx24 + 12 >> 2] = $vararg_buffer1; //@line 20162
  HEAP32[$AsyncCtx24 + 16 >> 2] = $vararg_buffer1; //@line 20164
  HEAP32[$AsyncCtx24 + 20 >> 2] = $0; //@line 20166
  sp = STACKTOP; //@line 20167
  STACKTOP = sp; //@line 20168
  return 0; //@line 20168
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 20170
 $AsyncCtx27 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20171
 $25 = _sn_coap_protocol_init(18, 315, 12, 17) | 0; //@line 20172
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 316; //@line 20175
  HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer; //@line 20177
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 20179
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 20181
  HEAP32[$AsyncCtx27 + 16 >> 2] = $vararg_buffer1; //@line 20183
  HEAP32[$AsyncCtx27 + 20 >> 2] = $0; //@line 20185
  sp = STACKTOP; //@line 20186
  STACKTOP = sp; //@line 20187
  return 0; //@line 20187
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 20189
 HEAP32[2531] = $25; //@line 20190
 $31 = _calloc(44, 1) | 0; //@line 20191
 HEAP32[$31 + 32 >> 2] = 6383; //@line 20193
 HEAP16[$31 + 22 >> 1] = 6; //@line 20195
 HEAP32[$31 + 8 >> 2] = 1; //@line 20197
 HEAP16[$31 + 20 >> 1] = 7; //@line 20199
 $37 = (_sn_coap_builder_calc_needed_packet_data_size($31) | 0) & 65535; //@line 20201
 HEAP32[$vararg_buffer >> 2] = $37; //@line 20202
 _printf(6390, $vararg_buffer) | 0; //@line 20203
 $38 = _malloc($37) | 0; //@line 20204
 _sn_coap_builder($38, $31) | 0; //@line 20205
 $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20206
 $39 = __ZN9UDPSocket6sendtoEPKctPKvj(10068, 6427, 5683, $38, $37) | 0; //@line 20207
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 317; //@line 20210
  HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 20212
  HEAP32[$AsyncCtx20 + 8 >> 2] = $vararg_buffer1; //@line 20214
  HEAP32[$AsyncCtx20 + 12 >> 2] = $31; //@line 20216
  HEAP32[$AsyncCtx20 + 16 >> 2] = $38; //@line 20218
  HEAP32[$AsyncCtx20 + 20 >> 2] = $0; //@line 20220
  sp = STACKTOP; //@line 20221
  STACKTOP = sp; //@line 20222
  return 0; //@line 20222
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 20224
 HEAP32[$vararg_buffer1 >> 2] = $39; //@line 20225
 HEAP32[$vararg_buffer1 + 4 >> 2] = 6383; //@line 20227
 _printf(6435, $vararg_buffer1) | 0; //@line 20228
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 20229
 __Z17recv_coap_messagev(); //@line 20230
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 318; //@line 20233
  HEAP32[$AsyncCtx6 + 4 >> 2] = $31; //@line 20235
  HEAP32[$AsyncCtx6 + 8 >> 2] = $38; //@line 20237
  HEAP32[$AsyncCtx6 + 12 >> 2] = $0; //@line 20239
  sp = STACKTOP; //@line 20240
  STACKTOP = sp; //@line 20241
  return 0; //@line 20241
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 20243
 _free($31); //@line 20244
 _free($38); //@line 20245
 $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20246
 _puts(6483) | 0; //@line 20247
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 319; //@line 20250
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 20252
  sp = STACKTOP; //@line 20253
  STACKTOP = sp; //@line 20254
  return 0; //@line 20254
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 20256
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20257
 _wait(4294967296.0); //@line 20258
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 320; //@line 20261
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 20263
  sp = STACKTOP; //@line 20264
  STACKTOP = sp; //@line 20265
  return 0; //@line 20265
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 20267
 $$0 = 0; //@line 20268
 STACKTOP = sp; //@line 20269
 return $$0 | 0; //@line 20269
}
function __ZL35nsapi_dns_query_async_initiate_nextv() {
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$433 = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $32 = 0, $35 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $48 = 0, $49 = 0, $53 = 0, $54 = 0, $55 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15862
 STACKTOP = STACKTOP + 32 | 0; //@line 15863
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15863
 $0 = sp + 16 | 0; //@line 15864
 $1 = sp; //@line 15865
 $2 = HEAP32[2509] | 0; //@line 15866
 L1 : do {
  if (!$2) {
   $$1 = 0; //@line 15870
   $$124 = 2147483647; //@line 15870
  } else {
   switch (HEAP32[$2 + 88 >> 2] | 0) {
   case 0:
    {
     $$1 = $2; //@line 15877
     $$124 = HEAP32[$2 >> 2] | 0; //@line 15877
     break L1;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 15882
     return;
    }
   default:
    {
     $$1 = 0; //@line 15886
     $$124 = 2147483647; //@line 15886
     break L1;
    }
   }
  }
 } while (0);
 $7 = HEAP32[2510] | 0; //@line 15892
 L7 : do {
  if (!$7) {
   $$1$1 = $$1; //@line 15896
   $$124$1 = $$124; //@line 15896
  } else {
   switch (HEAP32[$7 + 88 >> 2] | 0) {
   case 0:
    {
     $41 = HEAP32[$7 >> 2] | 0; //@line 15902
     $42 = ($41 | 0) > ($$124 | 0); //@line 15903
     $$1$1 = $42 ? $$1 : $7; //@line 15906
     $$124$1 = $42 ? $$124 : $41; //@line 15906
     break L7;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 15911
     return;
    }
   default:
    {
     $$1$1 = $$1; //@line 15915
     $$124$1 = $$124; //@line 15915
     break L7;
    }
   }
  }
 } while (0);
 $43 = HEAP32[2511] | 0; //@line 15921
 L13 : do {
  if (!$43) {
   $$1$2 = $$1$1; //@line 15925
   $$124$2 = $$124$1; //@line 15925
  } else {
   switch (HEAP32[$43 + 88 >> 2] | 0) {
   case 0:
    {
     $47 = HEAP32[$43 >> 2] | 0; //@line 15931
     $48 = ($47 | 0) > ($$124$1 | 0); //@line 15932
     $$1$2 = $48 ? $$1$1 : $43; //@line 15935
     $$124$2 = $48 ? $$124$1 : $47; //@line 15935
     break L13;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 15940
     return;
    }
   default:
    {
     $$1$2 = $$1$1; //@line 15944
     $$124$2 = $$124$1; //@line 15944
     break L13;
    }
   }
  }
 } while (0);
 $49 = HEAP32[2512] | 0; //@line 15950
 L19 : do {
  if (!$49) {
   $$1$3 = $$1$2; //@line 15954
   $$124$3 = $$124$2; //@line 15954
  } else {
   switch (HEAP32[$49 + 88 >> 2] | 0) {
   case 0:
    {
     $53 = HEAP32[$49 >> 2] | 0; //@line 15960
     $54 = ($53 | 0) > ($$124$2 | 0); //@line 15961
     $$1$3 = $54 ? $$1$2 : $49; //@line 15964
     $$124$3 = $54 ? $$124$2 : $53; //@line 15964
     break L19;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 15969
     return;
    }
   default:
    {
     $$1$3 = $$1$2; //@line 15973
     $$124$3 = $$124$2; //@line 15973
     break L19;
    }
   }
  }
 } while (0);
 $55 = HEAP32[2513] | 0; //@line 15979
 L25 : do {
  if (!$55) {
   label = 31; //@line 15983
  } else {
   switch (HEAP32[$55 + 88 >> 2] | 0) {
   case 0:
    {
     if ((HEAP32[$55 >> 2] | 0) > ($$124$3 | 0)) {
      label = 31; //@line 15992
      break L25;
     } else {
      $$1$433 = $55; //@line 15995
      break L25;
     }
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 16001
     return;
    }
   default:
    {
     label = 31; //@line 16005
     break L25;
    }
   }
  }
 } while (0);
 if ((label | 0) == 31) {
  if (!$$1$3) {
   STACKTOP = sp; //@line 16014
   return;
  } else {
   $$1$433 = $$1$3; //@line 16016
  }
 }
 HEAP32[$$1$433 + 88 >> 2] = 1; //@line 16020
 $10 = $$1$433 + 44 | 0; //@line 16021
 $11 = HEAP32[$10 >> 2] | 0; //@line 16022
 do {
  if (!$11) {
   $21 = 0; //@line 16026
  } else {
   $15 = HEAP32[$11 + 4 >> 2] | 0; //@line 16030
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 16031
   FUNCTION_TABLE_vii[$15 & 7]($0, $$1$433 + 32 | 0); //@line 16032
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 206; //@line 16035
    HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 16037
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 16039
    HEAP32[$AsyncCtx + 12 >> 2] = $$1$433; //@line 16041
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16043
    sp = STACKTOP; //@line 16044
    STACKTOP = sp; //@line 16045
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16047
    $21 = HEAP32[$10 >> 2] | 0; //@line 16049
    break;
   }
  }
 } while (0);
 $20 = $0 + 12 | 0; //@line 16054
 HEAP32[$20 >> 2] = $21; //@line 16055
 $22 = HEAP32[$$1$433 >> 2] | 0; //@line 16056
 HEAP32[$1 + 8 >> 2] = 0; //@line 16058
 HEAP32[$1 >> 2] = 207; //@line 16059
 HEAP32[$1 + 4 >> 2] = $22; //@line 16061
 $24 = $1 + 12 | 0; //@line 16062
 HEAP32[$24 >> 2] = 724; //@line 16063
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16064
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 16065
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 208; //@line 16068
  HEAP32[$AsyncCtx10 + 4 >> 2] = $24; //@line 16070
  HEAP32[$AsyncCtx10 + 8 >> 2] = $20; //@line 16072
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 16074
  HEAP32[$AsyncCtx10 + 16 >> 2] = $0; //@line 16076
  sp = STACKTOP; //@line 16077
  STACKTOP = sp; //@line 16078
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 16080
 $29 = HEAP32[$24 >> 2] | 0; //@line 16081
 do {
  if ($29 | 0) {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 16086
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16087
   FUNCTION_TABLE_vi[$32 & 511]($1); //@line 16088
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 209; //@line 16091
    HEAP32[$AsyncCtx3 + 4 >> 2] = $20; //@line 16093
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16095
    sp = STACKTOP; //@line 16096
    STACKTOP = sp; //@line 16097
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16099
    break;
   }
  }
 } while (0);
 $35 = HEAP32[$20 >> 2] | 0; //@line 16104
 if (!$35) {
  STACKTOP = sp; //@line 16107
  return;
 }
 $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 16110
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16111
 FUNCTION_TABLE_vi[$38 & 511]($0); //@line 16112
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 210; //@line 16115
  sp = STACKTOP; //@line 16116
  STACKTOP = sp; //@line 16117
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16119
 STACKTOP = sp; //@line 16120
 return;
}
function __ZN6Socket4openEP12NetworkStack($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10914
 STACKTOP = STACKTOP + 32 | 0; //@line 10915
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10915
 $2 = sp + 16 | 0; //@line 10916
 $3 = sp; //@line 10917
 $4 = $0 + 4 | 0; //@line 10918
 if (($1 | 0) == 0 | (HEAP32[$4 >> 2] | 0) != 0) {
  $$1 = -3003; //@line 10924
  STACKTOP = sp; //@line 10925
  return $$1 | 0; //@line 10925
 }
 HEAP32[$4 >> 2] = $1; //@line 10927
 $10 = HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0; //@line 10930
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 10933
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 10934
 $14 = FUNCTION_TABLE_ii[$13 & 31]($0) | 0; //@line 10935
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 130; //@line 10938
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10940
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 10942
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 10944
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 10946
  HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 10948
  HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 10950
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 10952
  sp = STACKTOP; //@line 10953
  STACKTOP = sp; //@line 10954
  return 0; //@line 10954
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10956
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10957
 $22 = FUNCTION_TABLE_iiii[$10 & 31]($1, $2, $14) | 0; //@line 10958
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 131; //@line 10961
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 10963
  HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 10965
  HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 10967
  HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 10969
  HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 10971
  sp = STACKTOP; //@line 10972
  STACKTOP = sp; //@line 10973
  return 0; //@line 10973
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10975
 do {
  if (!$22) {
   $30 = $0 + 8 | 0; //@line 10980
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 10981
   $31 = $3 + 12 | 0; //@line 10982
   HEAP32[$3 >> 2] = 12; //@line 10983
   HEAP32[$3 + 4 >> 2] = 1; //@line 10985
   HEAP32[$3 + 8 >> 2] = $0; //@line 10987
   HEAP32[$31 >> 2] = 572; //@line 10988
   $32 = $0 + 16 | 0; //@line 10989
   do {
    if (($32 | 0) == ($3 | 0)) {
     $60 = 572; //@line 10993
     label = 16; //@line 10994
    } else {
     $34 = $0 + 28 | 0; //@line 10996
     $35 = HEAP32[$34 >> 2] | 0; //@line 10997
     if (!$35) {
      $48 = 572; //@line 11000
     } else {
      $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 11003
      $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11004
      FUNCTION_TABLE_vi[$38 & 511]($32); //@line 11005
      if (___async) {
       HEAP32[$AsyncCtx5 >> 2] = 132; //@line 11008
       HEAP32[$AsyncCtx5 + 4 >> 2] = $31; //@line 11010
       HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 11012
       HEAP32[$AsyncCtx5 + 12 >> 2] = $32; //@line 11014
       HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 11016
       HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 11018
       HEAP32[$AsyncCtx5 + 24 >> 2] = $30; //@line 11020
       HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 11022
       sp = STACKTOP; //@line 11023
       STACKTOP = sp; //@line 11024
       return 0; //@line 11024
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 11026
      $$pre = HEAP32[$31 >> 2] | 0; //@line 11027
      if (!$$pre) {
       HEAP32[$34 >> 2] = 0; //@line 11030
       break;
      } else {
       $48 = $$pre; //@line 11033
      }
     }
     $49 = HEAP32[$48 + 4 >> 2] | 0; //@line 11037
     $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11038
     FUNCTION_TABLE_vii[$49 & 7]($32, $3); //@line 11039
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 133; //@line 11042
      HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 11044
      HEAP32[$AsyncCtx8 + 8 >> 2] = $34; //@line 11046
      HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 11048
      HEAP32[$AsyncCtx8 + 16 >> 2] = $4; //@line 11050
      HEAP32[$AsyncCtx8 + 20 >> 2] = $30; //@line 11052
      HEAP32[$AsyncCtx8 + 24 >> 2] = $32; //@line 11054
      HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 11056
      sp = STACKTOP; //@line 11057
      STACKTOP = sp; //@line 11058
      return 0; //@line 11058
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 11060
      $$pre$i$i = HEAP32[$31 >> 2] | 0; //@line 11061
      HEAP32[$34 >> 2] = $$pre$i$i; //@line 11063
      if (!$$pre$i$i) {
       break;
      } else {
       $60 = $$pre$i$i; //@line 11068
       label = 16; //@line 11069
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 16) {
     $61 = HEAP32[$60 + 8 >> 2] | 0; //@line 11078
     $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11079
     FUNCTION_TABLE_vi[$61 & 511]($3); //@line 11080
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 134; //@line 11083
      HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 11085
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 11087
      HEAP32[$AsyncCtx11 + 12 >> 2] = $30; //@line 11089
      HEAP32[$AsyncCtx11 + 16 >> 2] = $32; //@line 11091
      HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 11093
      sp = STACKTOP; //@line 11094
      STACKTOP = sp; //@line 11095
      return 0; //@line 11095
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11097
      break;
     }
    }
   } while (0);
   $67 = HEAP32[$4 >> 2] | 0; //@line 11102
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 84 >> 2] | 0; //@line 11105
   $71 = HEAP32[$30 >> 2] | 0; //@line 11106
   $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11107
   FUNCTION_TABLE_viiii[$70 & 7]($67, $71, 135, $32); //@line 11108
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 136; //@line 11111
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 11113
    sp = STACKTOP; //@line 11114
    STACKTOP = sp; //@line 11115
    return 0; //@line 11115
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 11117
    $$0 = 0; //@line 11118
    break;
   }
  } else {
   $$0 = $22; //@line 11122
  }
 } while (0);
 $$1 = $$0; //@line 11125
 STACKTOP = sp; //@line 11126
 return $$1 | 0; //@line 11126
}
function _sn_coap_parser_options_parse_multiple_options__async_cb($0) {
 $0 = $0 | 0;
 var $$06378 = 0, $$06378$us = 0, $$064 = 0, $$065$be$in = 0, $$065$be$us$in = 0, $$06577 = 0, $$06577$us = 0, $$080 = 0, $$080$us = 0, $$1 = 0, $$1$us = 0, $$sink = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $100 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $28 = 0, $30 = 0, $33 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $47 = 0, $56 = 0, $6 = 0, $61 = 0, $65 = 0, $67 = 0, $70 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $84 = 0, $89 = 0, $91 = 0, $AsyncRetVal = 0, $trunc = 0, $trunc110 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12053
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12055
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 12057
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12059
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12061
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12063
 $16 = HEAP16[$0 + 32 >> 1] | 0; //@line 12067
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12069
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12071
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12073
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 12074
 if (!$AsyncRetVal) {
  _mbed_tracef(2, 3803, 5559, $12); //@line 12077
  $$064 = -1; //@line 12078
  $100 = ___async_retval; //@line 12079
  HEAP8[$100 >> 0] = $$064; //@line 12080
  return;
 }
 HEAP16[$18 >> 1] = $16; //@line 12083
 $23 = HEAP32[$10 >> 2] | 0; //@line 12084
 if (($20 | 0) <= 0) {
  $$064 = 0; //@line 12087
  $100 = ___async_retval; //@line 12088
  HEAP8[$100 >> 0] = $$064; //@line 12089
  return;
 }
 if (($2 | 0) == 20) {
  $$06378$us = $23; //@line 12094
  $$06577$us = $6; //@line 12094
  $$080$us = 0; //@line 12094
  while (1) {
   if (!($$080$us << 24 >> 24)) {
    $$1$us = $$06378$us; //@line 12098
   } else {
    HEAP8[$$06378$us >> 0] = 38; //@line 12100
    $$1$us = $$06378$us + 1 | 0; //@line 12102
   }
   $28 = $$080$us + 1 << 24 >> 24; //@line 12104
   $30 = (HEAP32[$8 >> 2] | 0) + 1 | 0; //@line 12106
   HEAP32[$8 >> 2] = $30; //@line 12107
   $33 = $$06577$us & 65535; //@line 12110
   if (($$1$us + $33 - (HEAP32[$10 >> 2] | 0) | 0) > ($4 | 0)) {
    $$064 = -1; //@line 12115
    label = 29; //@line 12116
    break;
   }
   _memcpy($$1$us | 0, $30 | 0, $33 | 0) | 0; //@line 12119
   $38 = (HEAP32[$8 >> 2] | 0) + $33 | 0; //@line 12121
   HEAP32[$8 >> 2] = $38; //@line 12122
   $$06378$us = $$1$us + $33 | 0; //@line 12123
   $40 = HEAP32[$10 >> 2] | 0; //@line 12124
   $41 = $$06378$us; //@line 12125
   if (($41 - $40 | 0) >= ($4 | 0)) {
    $$064 = $28; //@line 12129
    label = 29; //@line 12130
    break;
   }
   $trunc110 = HEAP8[$38 >> 0] | 0; //@line 12133
   $44 = $trunc110 & 255; //@line 12134
   if ($44 & 240 | 0) {
    $$064 = $28; //@line 12138
    label = 29; //@line 12139
    break;
   }
   switch ($trunc110 & 15) {
   case 13:
    {
     $56 = $38 + 1 | 0; //@line 12146
     $$sink87 = $56; //@line 12150
     $$sink88 = (HEAPU8[$56 >> 0] | 0) + 13 | 0; //@line 12150
     label = 14; //@line 12151
     break;
    }
   case 14:
    {
     $47 = $38 + 2 | 0; //@line 12155
     $$sink87 = $47; //@line 12164
     $$sink88 = (HEAPU8[$47 >> 0] | 0) + 269 + ((HEAPU8[$38 + 1 >> 0] | 0) << 8) | 0; //@line 12164
     label = 14; //@line 12165
     break;
    }
   default:
    {
     $$065$be$us$in = $44 & 15; //@line 12169
     $61 = $40; //@line 12169
    }
   }
   if ((label | 0) == 14) {
    label = 0; //@line 12173
    HEAP32[$8 >> 2] = $$sink87; //@line 12174
    $$065$be$us$in = $$sink88; //@line 12176
    $61 = HEAP32[$10 >> 2] | 0; //@line 12176
   }
   if (($41 - $61 | 0) >= ($4 | 0)) {
    $$064 = $28; //@line 12184
    label = 29; //@line 12185
    break;
   } else {
    $$06577$us = $$065$be$us$in & 65535; //@line 12182
    $$080$us = $28; //@line 12182
   }
  }
  if ((label | 0) == 29) {
   $100 = ___async_retval; //@line 12190
   HEAP8[$100 >> 0] = $$064; //@line 12191
   return;
  }
 } else {
  $$06378 = $23; //@line 12195
  $$06577 = $6; //@line 12195
  $$080 = 0; //@line 12195
 }
 while (1) {
  if (!($$080 << 24 >> 24)) {
   $$1 = $$06378; //@line 12200
  } else {
   switch ($2 | 0) {
   case 4:
   case 15:
   case 17:
   case 20:
    {
     $$sink = 38; //@line 12204
     label = 19; //@line 12205
     break;
    }
   case 8:
   case 11:
    {
     $$sink = 47; //@line 12209
     label = 19; //@line 12210
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 19) {
    label = 0; //@line 12217
    HEAP8[$$06378 >> 0] = $$sink; //@line 12218
   }
   $$1 = $$06378 + 1 | 0; //@line 12221
  }
  $65 = $$080 + 1 << 24 >> 24; //@line 12223
  $67 = (HEAP32[$8 >> 2] | 0) + 1 | 0; //@line 12225
  HEAP32[$8 >> 2] = $67; //@line 12226
  $70 = $$06577 & 65535; //@line 12229
  if (($$1 + $70 - (HEAP32[$10 >> 2] | 0) | 0) > ($4 | 0)) {
   $$064 = -1; //@line 12234
   label = 29; //@line 12235
   break;
  }
  _memcpy($$1 | 0, $67 | 0, $70 | 0) | 0; //@line 12238
  $75 = (HEAP32[$8 >> 2] | 0) + $70 | 0; //@line 12240
  HEAP32[$8 >> 2] = $75; //@line 12241
  $$06378 = $$1 + $70 | 0; //@line 12242
  $77 = HEAP32[$10 >> 2] | 0; //@line 12243
  $78 = $$06378; //@line 12244
  if (($78 - $77 | 0) >= ($4 | 0)) {
   $$064 = $65; //@line 12248
   label = 29; //@line 12249
   break;
  }
  $trunc = HEAP8[$75 >> 0] | 0; //@line 12252
  $81 = $trunc & 255; //@line 12253
  if ($81 & 240 | 0) {
   $$064 = $65; //@line 12257
   label = 29; //@line 12258
   break;
  }
  switch ($trunc & 15) {
  case 13:
   {
    $84 = $75 + 1 | 0; //@line 12265
    $$sink89 = $84; //@line 12269
    $$sink90 = (HEAPU8[$84 >> 0] | 0) + 13 | 0; //@line 12269
    label = 26; //@line 12270
    break;
   }
  case 14:
   {
    $91 = $75 + 2 | 0; //@line 12274
    $$sink89 = $91; //@line 12283
    $$sink90 = (HEAPU8[$91 >> 0] | 0) + 269 + ((HEAPU8[$75 + 1 >> 0] | 0) << 8) | 0; //@line 12283
    label = 26; //@line 12284
    break;
   }
  default:
   {
    $$065$be$in = $81 & 15; //@line 12288
    $89 = $77; //@line 12288
   }
  }
  if ((label | 0) == 26) {
   label = 0; //@line 12292
   HEAP32[$8 >> 2] = $$sink89; //@line 12293
   $$065$be$in = $$sink90; //@line 12295
   $89 = HEAP32[$10 >> 2] | 0; //@line 12295
  }
  if (($78 - $89 | 0) >= ($4 | 0)) {
   $$064 = $65; //@line 12303
   label = 29; //@line 12304
   break;
  } else {
   $$06577 = $$065$be$in & 65535; //@line 12301
   $$080 = $65; //@line 12301
  }
 }
 if ((label | 0) == 29) {
  $100 = ___async_retval; //@line 12309
  HEAP8[$100 >> 0] = $$064; //@line 12310
  return;
 }
}
function __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0100152 = 0, $$0103157 = 0, $$0104151 = 0, $$0105150 = 0, $$0136$lcssa = 0, $$0136156 = 0, $$098 = 0, $$1 = 0, $$1106 = 0, $$1137$lcssa = 0, $$1137154 = 0, $$2149 = 0, $$4 = 0, $$7 = 0, $103 = 0, $106 = 0, $111 = 0, $112 = 0, $116 = 0, $23 = 0, $30 = 0, $37 = 0, $41 = 0, $47 = 0, $48 = 0, $51 = 0, $55 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $77 = 0, $85 = 0, label = 0;
 $23 = (HEAPU8[$0 + 4 >> 0] | 0) << 8 | (HEAPU8[$0 + 5 >> 0] | 0); //@line 13289
 $30 = (HEAPU8[$0 + 6 >> 0] | 0) << 8 | (HEAPU8[$0 + 7 >> 0] | 0); //@line 13296
 if (!((HEAP8[$0 + 2 >> 0] & -8) << 24 >> 24 == -128 ? (((HEAPU8[$0 >> 0] | 0) << 8 | (HEAPU8[$0 + 1 >> 0] | 0)) & 65535) << 16 >> 16 == $1 << 16 >> 16 : 0)) {
  $$098 = -1; //@line 13302
  return $$098 | 0; //@line 13303
 }
 $37 = $0 + 12 | 0; //@line 13307
 if (HEAP8[$0 + 3 >> 0] & 15) {
  $$098 = 0; //@line 13311
  return $$098 | 0; //@line 13312
 }
 if (!$23) {
  $$0136$lcssa = $37; //@line 13316
 } else {
  $$0103157 = 0; //@line 13318
  $$0136156 = $37; //@line 13318
  while (1) {
   $41 = HEAP8[$$0136156 >> 0] | 0; //@line 13320
   if (!($41 << 24 >> 24)) {
    $$1137$lcssa = $$0136156; //@line 13323
   } else {
    $$1137154 = $$0136156; //@line 13325
    $47 = $41; //@line 13325
    while (1) {
     $48 = $$1137154 + 1 + ($47 & 255) | 0; //@line 13329
     $47 = HEAP8[$48 >> 0] | 0; //@line 13330
     if (!($47 << 24 >> 24)) {
      $$1137$lcssa = $48; //@line 13333
      break;
     } else {
      $$1137154 = $48; //@line 13336
     }
    }
   }
   $51 = $$1137$lcssa + 5 | 0; //@line 13340
   $$0103157 = $$0103157 + 1 | 0; //@line 13341
   if (($$0103157 | 0) >= ($23 | 0)) {
    $$0136$lcssa = $51; //@line 13346
    break;
   } else {
    $$0136156 = $51; //@line 13344
   }
  }
 }
 if (($4 | 0) != 0 & ($30 | 0) != 0) {
  $$0100152 = $3; //@line 13355
  $$0104151 = 0; //@line 13355
  $$0105150 = 0; //@line 13355
  $$2149 = $$0136$lcssa; //@line 13355
 } else {
  $$098 = 0; //@line 13357
  return $$098 | 0; //@line 13358
 }
 while (1) {
  $55 = HEAP8[$$2149 >> 0] | 0; //@line 13362
  do {
   if (!($55 << 24 >> 24)) {
    $$4 = $$2149 + 1 | 0; //@line 13366
   } else {
    $59 = $55 & 255; //@line 13369
    $62 = $$2149; //@line 13369
    while (1) {
     if ($59 & 192 | 0) {
      label = 11; //@line 13374
      break;
     }
     $64 = $62 + 1 + $59 | 0; //@line 13378
     $65 = HEAP8[$64 >> 0] | 0; //@line 13379
     if (!($65 << 24 >> 24)) {
      label = 13; //@line 13383
      break;
     } else {
      $59 = $65 & 255; //@line 13386
      $62 = $64; //@line 13386
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 13390
     $$4 = $62 + 2 | 0; //@line 13392
     break;
    } else if ((label | 0) == 13) {
     label = 0; //@line 13396
     $$4 = $64 + 1 | 0; //@line 13398
     break;
    }
   }
  } while (0);
  $77 = ((HEAPU8[$$4 >> 0] | 0) << 8 | (HEAPU8[$$4 + 1 >> 0] | 0)) & 65535; //@line 13411
  $85 = (HEAPU8[$$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$$4 + 3 >> 0] | 0); //@line 13419
  $103 = (HEAPU8[$$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$$4 + 7 >> 0] | 0); //@line 13437
  $106 = $$4 + 10 | 0; //@line 13440
  $111 = (HEAPU8[$$4 + 8 >> 0] | 0) << 8 | (HEAPU8[$$4 + 9 >> 0] | 0); //@line 13445
  $112 = $111 & 65535; //@line 13446
  if (!$$0104151) {
   HEAP32[$2 >> 2] = $103 >>> 0 < 2147483647 ? $103 : 2147483647; //@line 13451
  }
  $116 = ($85 | 0) == 1; //@line 13454
  do {
   if ($77 << 16 >> 16 == 1 & $116 & $112 << 16 >> 16 == 4) {
    HEAP32[$$0100152 >> 2] = 1; //@line 13460
    HEAP8[$$0100152 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 13464
    HEAP8[$$0100152 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 13468
    HEAP8[$$0100152 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 13472
    HEAP8[$$0100152 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 13475
    $$1 = $$0100152 + 20 | 0; //@line 13479
    $$1106 = $$0105150 + 1 | 0; //@line 13479
    $$7 = $$4 + 14 | 0; //@line 13479
   } else {
    if ($77 << 16 >> 16 == 28 & $116 & $112 << 16 >> 16 == 16) {
     HEAP32[$$0100152 >> 2] = 2; //@line 13486
     HEAP8[$$0100152 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 13490
     HEAP8[$$0100152 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 13494
     HEAP8[$$0100152 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 13498
     HEAP8[$$0100152 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 13502
     HEAP8[$$0100152 + 8 >> 0] = HEAP8[$$4 + 14 >> 0] | 0; //@line 13506
     HEAP8[$$0100152 + 9 >> 0] = HEAP8[$$4 + 15 >> 0] | 0; //@line 13510
     HEAP8[$$0100152 + 10 >> 0] = HEAP8[$$4 + 16 >> 0] | 0; //@line 13514
     HEAP8[$$0100152 + 11 >> 0] = HEAP8[$$4 + 17 >> 0] | 0; //@line 13518
     HEAP8[$$0100152 + 12 >> 0] = HEAP8[$$4 + 18 >> 0] | 0; //@line 13522
     HEAP8[$$0100152 + 13 >> 0] = HEAP8[$$4 + 19 >> 0] | 0; //@line 13526
     HEAP8[$$0100152 + 14 >> 0] = HEAP8[$$4 + 20 >> 0] | 0; //@line 13530
     HEAP8[$$0100152 + 15 >> 0] = HEAP8[$$4 + 21 >> 0] | 0; //@line 13534
     HEAP8[$$0100152 + 16 >> 0] = HEAP8[$$4 + 22 >> 0] | 0; //@line 13538
     HEAP8[$$0100152 + 17 >> 0] = HEAP8[$$4 + 23 >> 0] | 0; //@line 13542
     HEAP8[$$0100152 + 18 >> 0] = HEAP8[$$4 + 24 >> 0] | 0; //@line 13546
     HEAP8[$$0100152 + 19 >> 0] = HEAP8[$$4 + 25 >> 0] | 0; //@line 13549
     $$1 = $$0100152 + 20 | 0; //@line 13553
     $$1106 = $$0105150 + 1 | 0; //@line 13553
     $$7 = $$4 + 26 | 0; //@line 13553
     break;
    } else {
     $$1 = $$0100152; //@line 13557
     $$1106 = $$0105150; //@line 13557
     $$7 = $106 + $111 | 0; //@line 13557
     break;
    }
   }
  } while (0);
  $$0104151 = $$0104151 + 1 | 0; //@line 13562
  if (!($$1106 >>> 0 < $4 >>> 0 & ($$0104151 | 0) < ($30 | 0))) {
   $$098 = $$1106; //@line 13569
   break;
  } else {
   $$0100152 = $$1; //@line 13567
   $$0105150 = $$1106; //@line 13567
   $$2149 = $$7; //@line 13567
  }
 }
 return $$098 | 0; //@line 13573
}
function __ZN6Socket4openEP12NetworkStack__async_cb_139($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24277
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24279
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24281
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24283
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24285
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24287
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24289
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24293
  return;
 }
 $14 = $2 + 8 | 0; //@line 24297
 HEAP32[$14 >> 2] = HEAP32[$4 >> 2]; //@line 24298
 $15 = $6 + 12 | 0; //@line 24299
 HEAP32[$6 >> 2] = 12; //@line 24300
 HEAP32[$6 + 4 >> 2] = 1; //@line 24302
 HEAP32[$6 + 8 >> 2] = $2; //@line 24304
 HEAP32[$15 >> 2] = 572; //@line 24305
 $16 = $2 + 16 | 0; //@line 24306
 if (($16 | 0) == ($6 | 0)) {
  $40 = HEAP32[145] | 0; //@line 24310
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 24311
  FUNCTION_TABLE_vi[$40 & 511]($6); //@line 24312
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 134; //@line 24315
   $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 24316
   HEAP32[$41 >> 2] = $6; //@line 24317
   $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 24318
   HEAP32[$42 >> 2] = $8; //@line 24319
   $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 24320
   HEAP32[$43 >> 2] = $14; //@line 24321
   $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 24322
   HEAP32[$44 >> 2] = $16; //@line 24323
   $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 24324
   HEAP32[$45 >> 2] = $10; //@line 24325
   sp = STACKTOP; //@line 24326
   return;
  }
  ___async_unwind = 0; //@line 24329
  HEAP32[$ReallocAsyncCtx5 >> 2] = 134; //@line 24330
  $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 24331
  HEAP32[$41 >> 2] = $6; //@line 24332
  $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 24333
  HEAP32[$42 >> 2] = $8; //@line 24334
  $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 24335
  HEAP32[$43 >> 2] = $14; //@line 24336
  $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 24337
  HEAP32[$44 >> 2] = $16; //@line 24338
  $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 24339
  HEAP32[$45 >> 2] = $10; //@line 24340
  sp = STACKTOP; //@line 24341
  return;
 }
 $18 = $2 + 28 | 0; //@line 24344
 $19 = HEAP32[$18 >> 2] | 0; //@line 24345
 if (!$19) {
  $31 = HEAP32[144] | 0; //@line 24349
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 24350
  FUNCTION_TABLE_vii[$31 & 7]($16, $6); //@line 24351
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 24354
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 24355
   HEAP32[$32 >> 2] = $15; //@line 24356
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 24357
   HEAP32[$33 >> 2] = $18; //@line 24358
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 24359
   HEAP32[$34 >> 2] = $6; //@line 24360
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 24361
   HEAP32[$35 >> 2] = $8; //@line 24362
   $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 24363
   HEAP32[$36 >> 2] = $14; //@line 24364
   $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 24365
   HEAP32[$37 >> 2] = $16; //@line 24366
   $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 24367
   HEAP32[$38 >> 2] = $10; //@line 24368
   sp = STACKTOP; //@line 24369
   return;
  }
  ___async_unwind = 0; //@line 24372
  HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 24373
  $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 24374
  HEAP32[$32 >> 2] = $15; //@line 24375
  $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 24376
  HEAP32[$33 >> 2] = $18; //@line 24377
  $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 24378
  HEAP32[$34 >> 2] = $6; //@line 24379
  $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 24380
  HEAP32[$35 >> 2] = $8; //@line 24381
  $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 24382
  HEAP32[$36 >> 2] = $14; //@line 24383
  $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 24384
  HEAP32[$37 >> 2] = $16; //@line 24385
  $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 24386
  HEAP32[$38 >> 2] = $10; //@line 24387
  sp = STACKTOP; //@line 24388
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 24392
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 24393
  FUNCTION_TABLE_vi[$22 & 511]($16); //@line 24394
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 132; //@line 24397
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 24398
   HEAP32[$23 >> 2] = $15; //@line 24399
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 24400
   HEAP32[$24 >> 2] = $18; //@line 24401
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 24402
   HEAP32[$25 >> 2] = $16; //@line 24403
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 24404
   HEAP32[$26 >> 2] = $6; //@line 24405
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 24406
   HEAP32[$27 >> 2] = $8; //@line 24407
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 24408
   HEAP32[$28 >> 2] = $14; //@line 24409
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 24410
   HEAP32[$29 >> 2] = $10; //@line 24411
   sp = STACKTOP; //@line 24412
   return;
  }
  ___async_unwind = 0; //@line 24415
  HEAP32[$ReallocAsyncCtx3 >> 2] = 132; //@line 24416
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 24417
  HEAP32[$23 >> 2] = $15; //@line 24418
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 24419
  HEAP32[$24 >> 2] = $18; //@line 24420
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 24421
  HEAP32[$25 >> 2] = $16; //@line 24422
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 24423
  HEAP32[$26 >> 2] = $6; //@line 24424
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 24425
  HEAP32[$27 >> 2] = $8; //@line 24426
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 24427
  HEAP32[$28 >> 2] = $14; //@line 24428
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 24429
  HEAP32[$29 >> 2] = $10; //@line 24430
  sp = STACKTOP; //@line 24431
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_213($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31230
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31232
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31234
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31240
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31242
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31244
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31246
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31248
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31250
 $21 = (HEAP32[$0 + 12 >> 2] | 0) == 0; //@line 31251
 $22 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 31252
 if ($22 | 0) {
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 31256
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 31257
  FUNCTION_TABLE_vi[$25 & 511]($4); //@line 31258
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 31261
   $26 = $ReallocAsyncCtx8 + 4 | 0; //@line 31262
   HEAP32[$26 >> 2] = $2; //@line 31263
   $27 = $ReallocAsyncCtx8 + 8 | 0; //@line 31264
   HEAP32[$27 >> 2] = $10; //@line 31265
   $28 = $ReallocAsyncCtx8 + 12 | 0; //@line 31266
   HEAP32[$28 >> 2] = $12; //@line 31267
   $29 = $ReallocAsyncCtx8 + 16 | 0; //@line 31268
   HEAP32[$29 >> 2] = $14; //@line 31269
   $30 = $ReallocAsyncCtx8 + 20 | 0; //@line 31270
   HEAP32[$30 >> 2] = $16; //@line 31271
   $31 = $ReallocAsyncCtx8 + 24 | 0; //@line 31272
   $$expand_i1_val = $21 & 1; //@line 31273
   HEAP8[$31 >> 0] = $$expand_i1_val; //@line 31274
   $32 = $ReallocAsyncCtx8 + 28 | 0; //@line 31275
   HEAP32[$32 >> 2] = $18; //@line 31276
   $33 = $ReallocAsyncCtx8 + 32 | 0; //@line 31277
   HEAP32[$33 >> 2] = $20; //@line 31278
   sp = STACKTOP; //@line 31279
   return;
  }
  ___async_unwind = 0; //@line 31282
  HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 31283
  $26 = $ReallocAsyncCtx8 + 4 | 0; //@line 31284
  HEAP32[$26 >> 2] = $2; //@line 31285
  $27 = $ReallocAsyncCtx8 + 8 | 0; //@line 31286
  HEAP32[$27 >> 2] = $10; //@line 31287
  $28 = $ReallocAsyncCtx8 + 12 | 0; //@line 31288
  HEAP32[$28 >> 2] = $12; //@line 31289
  $29 = $ReallocAsyncCtx8 + 16 | 0; //@line 31290
  HEAP32[$29 >> 2] = $14; //@line 31291
  $30 = $ReallocAsyncCtx8 + 20 | 0; //@line 31292
  HEAP32[$30 >> 2] = $16; //@line 31293
  $31 = $ReallocAsyncCtx8 + 24 | 0; //@line 31294
  $$expand_i1_val = $21 & 1; //@line 31295
  HEAP8[$31 >> 0] = $$expand_i1_val; //@line 31296
  $32 = $ReallocAsyncCtx8 + 28 | 0; //@line 31297
  HEAP32[$32 >> 2] = $18; //@line 31298
  $33 = $ReallocAsyncCtx8 + 32 | 0; //@line 31299
  HEAP32[$33 >> 2] = $20; //@line 31300
  sp = STACKTOP; //@line 31301
  return;
 }
 if ($21) {
  HEAP8[10976] = 1; //@line 31305
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 31306
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 31307
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 31310
   $50 = $ReallocAsyncCtx13 + 4 | 0; //@line 31311
   HEAP32[$50 >> 2] = $20; //@line 31312
   $51 = $ReallocAsyncCtx13 + 8 | 0; //@line 31313
   HEAP32[$51 >> 2] = $2; //@line 31314
   sp = STACKTOP; //@line 31315
   return;
  }
  ___async_unwind = 0; //@line 31318
  HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 31319
  $50 = $ReallocAsyncCtx13 + 4 | 0; //@line 31320
  HEAP32[$50 >> 2] = $20; //@line 31321
  $51 = $ReallocAsyncCtx13 + 8 | 0; //@line 31322
  HEAP32[$51 >> 2] = $2; //@line 31323
  sp = STACKTOP; //@line 31324
  return;
 }
 $34 = HEAP32[$18 >> 2] | 0; //@line 31327
 if ($34 | 0) {
  __ZdlPv($34); //@line 31330
 }
 $36 = HEAP32[$16 >> 2] | 0; //@line 31332
 if ($36 | 0) {
  $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 31336
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 31337
  FUNCTION_TABLE_vi[$39 & 511]($12); //@line 31338
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 31341
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 31342
   HEAP32[$40 >> 2] = $14; //@line 31343
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 31344
   HEAP32[$41 >> 2] = $10; //@line 31345
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 31346
   HEAP32[$42 >> 2] = $2; //@line 31347
   sp = STACKTOP; //@line 31348
   return;
  }
  ___async_unwind = 0; //@line 31351
  HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 31352
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 31353
  HEAP32[$40 >> 2] = $14; //@line 31354
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 31355
  HEAP32[$41 >> 2] = $10; //@line 31356
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 31357
  HEAP32[$42 >> 2] = $2; //@line 31358
  sp = STACKTOP; //@line 31359
  return;
 }
 $44 = HEAP32[$14 + 28 >> 2] | 0; //@line 31363
 if (!$44) {
  __ZdlPv($14); //@line 31366
  HEAP32[___async_retval >> 2] = -3007; //@line 31368
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 31372
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 31373
 FUNCTION_TABLE_vi[$47 & 511]($10); //@line 31374
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 31377
  $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 31378
  HEAP32[$48 >> 2] = $14; //@line 31379
  $49 = $ReallocAsyncCtx10 + 8 | 0; //@line 31380
  HEAP32[$49 >> 2] = $2; //@line 31381
  sp = STACKTOP; //@line 31382
  return;
 }
 ___async_unwind = 0; //@line 31385
 HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 31386
 $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 31387
 HEAP32[$48 >> 2] = $14; //@line 31388
 $49 = $ReallocAsyncCtx10 + 8 | 0; //@line 31389
 HEAP32[$49 >> 2] = $2; //@line 31390
 sp = STACKTOP; //@line 31391
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28040
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28042
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28046
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28048
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 28051
 $11 = $8 + 12 | 0; //@line 28052
 HEAP32[$11 >> 2] = $$pre$i; //@line 28053
 $12 = $6 + 12 | 0; //@line 28054
 $13 = HEAP32[$12 >> 2] | 0; //@line 28055
 $15 = $$pre$i; //@line 28057
 if (!$13) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 28059
  _mbed_assert_internal(5972, 5977, 1677); //@line 28060
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 270; //@line 28063
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 28064
   HEAP32[$16 >> 2] = $12; //@line 28065
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 28066
   HEAP32[$17 >> 2] = $11; //@line 28067
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 28068
   HEAP32[$18 >> 2] = $6; //@line 28069
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 28070
   HEAP32[$19 >> 2] = $2; //@line 28071
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 28072
   HEAP32[$20 >> 2] = $4; //@line 28073
   $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 28074
   HEAP32[$21 >> 2] = $8; //@line 28075
   $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 28076
   HEAP32[$22 >> 2] = $2; //@line 28077
   $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 28078
   HEAP32[$23 >> 2] = $11; //@line 28079
   sp = STACKTOP; //@line 28080
   return;
  }
  ___async_unwind = 0; //@line 28083
  HEAP32[$ReallocAsyncCtx6 >> 2] = 270; //@line 28084
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 28085
  HEAP32[$16 >> 2] = $12; //@line 28086
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 28087
  HEAP32[$17 >> 2] = $11; //@line 28088
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 28089
  HEAP32[$18 >> 2] = $6; //@line 28090
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 28091
  HEAP32[$19 >> 2] = $2; //@line 28092
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 28093
  HEAP32[$20 >> 2] = $4; //@line 28094
  $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 28095
  HEAP32[$21 >> 2] = $8; //@line 28096
  $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 28097
  HEAP32[$22 >> 2] = $2; //@line 28098
  $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 28099
  HEAP32[$23 >> 2] = $11; //@line 28100
  sp = STACKTOP; //@line 28101
  return;
 }
 $24 = HEAP32[$13 >> 2] | 0; //@line 28104
 if (!$15) {
  $36 = $2 + 12 | 0; //@line 28107
  HEAP32[$36 >> 2] = 0; //@line 28108
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 28109
  $37 = FUNCTION_TABLE_iiii[$24 & 31]($6, $4, $2) | 0; //@line 28110
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 272; //@line 28113
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 28114
   HEAP32[$38 >> 2] = $36; //@line 28115
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 28116
   HEAP32[$39 >> 2] = $2; //@line 28117
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 28118
   HEAP32[$40 >> 2] = $11; //@line 28119
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 28120
   HEAP32[$41 >> 2] = $8; //@line 28121
   sp = STACKTOP; //@line 28122
   return;
  }
  HEAP32[___async_retval >> 2] = $37; //@line 28126
  ___async_unwind = 0; //@line 28127
  HEAP32[$ReallocAsyncCtx3 >> 2] = 272; //@line 28128
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 28129
  HEAP32[$38 >> 2] = $36; //@line 28130
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 28131
  HEAP32[$39 >> 2] = $2; //@line 28132
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 28133
  HEAP32[$40 >> 2] = $11; //@line 28134
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 28135
  HEAP32[$41 >> 2] = $8; //@line 28136
  sp = STACKTOP; //@line 28137
  return;
 } else {
  $27 = HEAP32[$15 + 4 >> 2] | 0; //@line 28141
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 28142
  FUNCTION_TABLE_vii[$27 & 7]($2, $8); //@line 28143
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 28146
   $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 28147
   HEAP32[$28 >> 2] = $11; //@line 28148
   $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 28149
   HEAP32[$29 >> 2] = $2; //@line 28150
   $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 28151
   HEAP32[$30 >> 2] = $6; //@line 28152
   $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 28153
   HEAP32[$31 >> 2] = $4; //@line 28154
   $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 28155
   HEAP32[$32 >> 2] = $24; //@line 28156
   $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 28157
   HEAP32[$33 >> 2] = $2; //@line 28158
   $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 28159
   HEAP32[$34 >> 2] = $11; //@line 28160
   $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 28161
   HEAP32[$35 >> 2] = $8; //@line 28162
   sp = STACKTOP; //@line 28163
   return;
  }
  ___async_unwind = 0; //@line 28166
  HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 28167
  $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 28168
  HEAP32[$28 >> 2] = $11; //@line 28169
  $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 28170
  HEAP32[$29 >> 2] = $2; //@line 28171
  $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 28172
  HEAP32[$30 >> 2] = $6; //@line 28173
  $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 28174
  HEAP32[$31 >> 2] = $4; //@line 28175
  $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 28176
  HEAP32[$32 >> 2] = $24; //@line 28177
  $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 28178
  HEAP32[$33 >> 2] = $2; //@line 28179
  $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 28180
  HEAP32[$34 >> 2] = $11; //@line 28181
  $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 28182
  HEAP32[$35 >> 2] = $8; //@line 28183
  sp = STACKTOP; //@line 28184
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $53 = 0, $58 = 0, $6 = 0, $61 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18771
 STACKTOP = STACKTOP + 32 | 0; //@line 18772
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 18772
 $3 = sp + 16 | 0; //@line 18773
 $4 = sp; //@line 18774
 $5 = $2 + 12 | 0; //@line 18775
 $6 = HEAP32[$5 >> 2] | 0; //@line 18776
 do {
  if (!$6) {
   $16 = 0; //@line 18780
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 18783
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 18784
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 18785
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 269; //@line 18788
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 18790
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 18792
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 18794
    HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 18796
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 18798
    sp = STACKTOP; //@line 18799
    STACKTOP = sp; //@line 18800
    return 0; //@line 18800
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18802
    $16 = HEAP32[$5 >> 2] | 0; //@line 18804
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 18809
 HEAP32[$15 >> 2] = $16; //@line 18810
 $17 = $0 + 12 | 0; //@line 18811
 $18 = HEAP32[$17 >> 2] | 0; //@line 18812
 $20 = $16; //@line 18814
 do {
  if (!$18) {
   $AsyncCtx16 = _emscripten_alloc_async_context(36, sp) | 0; //@line 18817
   _mbed_assert_internal(5972, 5977, 1677); //@line 18818
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 270; //@line 18821
    HEAP32[$AsyncCtx16 + 4 >> 2] = $17; //@line 18823
    HEAP32[$AsyncCtx16 + 8 >> 2] = $15; //@line 18825
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 18827
    HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 18829
    HEAP32[$AsyncCtx16 + 20 >> 2] = $1; //@line 18831
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 18833
    HEAP32[$AsyncCtx16 + 28 >> 2] = $3; //@line 18835
    HEAP32[$AsyncCtx16 + 32 >> 2] = $15; //@line 18837
    sp = STACKTOP; //@line 18838
    STACKTOP = sp; //@line 18839
    return 0; //@line 18839
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 18841
    $30 = HEAP32[$17 >> 2] | 0; //@line 18844
    $32 = HEAP32[$15 >> 2] | 0; //@line 18844
    break;
   }
  } else {
   $30 = $18; //@line 18848
   $32 = $20; //@line 18848
  }
 } while (0);
 $29 = HEAP32[$30 >> 2] | 0; //@line 18851
 do {
  if (!$32) {
   $44 = 0; //@line 18855
  } else {
   $34 = HEAP32[$32 + 4 >> 2] | 0; //@line 18858
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 18859
   FUNCTION_TABLE_vii[$34 & 7]($3, $4); //@line 18860
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 271; //@line 18863
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 18865
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 18867
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 18869
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 18871
    HEAP32[$AsyncCtx2 + 20 >> 2] = $29; //@line 18873
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 18875
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 18877
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 18879
    sp = STACKTOP; //@line 18880
    STACKTOP = sp; //@line 18881
    return 0; //@line 18881
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 18883
    $44 = HEAP32[$15 >> 2] | 0; //@line 18885
    break;
   }
  }
 } while (0);
 $43 = $3 + 12 | 0; //@line 18890
 HEAP32[$43 >> 2] = $44; //@line 18891
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18892
 $45 = FUNCTION_TABLE_iiii[$29 & 31]($0, $1, $3) | 0; //@line 18893
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 272; //@line 18896
  HEAP32[$AsyncCtx5 + 4 >> 2] = $43; //@line 18898
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 18900
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 18902
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 18904
  sp = STACKTOP; //@line 18905
  STACKTOP = sp; //@line 18906
  return 0; //@line 18906
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 18908
 $50 = HEAP32[$43 >> 2] | 0; //@line 18909
 do {
  if ($50 | 0) {
   $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 18914
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18915
   FUNCTION_TABLE_vi[$53 & 511]($3); //@line 18916
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 273; //@line 18919
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 18921
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 18923
    HEAP32[$AsyncCtx9 + 12 >> 2] = $45; //@line 18925
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 18927
    sp = STACKTOP; //@line 18928
    STACKTOP = sp; //@line 18929
    return 0; //@line 18929
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 18931
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$15 >> 2] | 0; //@line 18936
 if (!$58) {
  STACKTOP = sp; //@line 18939
  return $45 | 0; //@line 18939
 }
 $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 18942
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18943
 FUNCTION_TABLE_vi[$61 & 511]($4); //@line 18944
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 274; //@line 18947
  HEAP32[$AsyncCtx13 + 4 >> 2] = $45; //@line 18949
  sp = STACKTOP; //@line 18950
  STACKTOP = sp; //@line 18951
  return 0; //@line 18951
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 18953
 STACKTOP = sp; //@line 18954
 return $45 | 0; //@line 18954
}
function __ZN13SocketAddress14set_ip_addressEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i = 0, $$02537$i = 0, $$02636$i = 0, $$1$1$i = 0, $$1$2$i = 0, $$1$3$i = 0, $$1$i = 0, $2 = 0, $26 = 0, $35 = 0, $4 = 0, $45 = 0, $56 = 0, $6 = 0, $68 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11413
 STACKTOP = STACKTOP + 32 | 0; //@line 11414
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11414
 $vararg_buffer7 = sp + 24 | 0; //@line 11415
 $vararg_buffer4 = sp + 16 | 0; //@line 11416
 $vararg_buffer1 = sp + 8 | 0; //@line 11417
 $vararg_buffer = sp; //@line 11418
 $2 = sp + 28 | 0; //@line 11419
 HEAP8[$0 >> 0] = 0; //@line 11420
 L1 : do {
  if ($1 | 0) {
   $4 = HEAP8[$1 >> 0] | 0; //@line 11424
   do {
    if ($4 << 24 >> 24) {
     $$016$i = 0; //@line 11428
     $6 = $4; //@line 11428
     while (1) {
      if (!($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10)) {
       $$02537$i = 0; //@line 11435
       $$02636$i = 0; //@line 11435
       $56 = $4; //@line 11435
       break;
      }
      $9 = $$016$i + 1 | 0; //@line 11438
      $6 = HEAP8[$1 + $9 >> 0] | 0; //@line 11440
      if (!($6 << 24 >> 24)) {
       label = 5; //@line 11443
       break;
      } else {
       $$016$i = $9; //@line 11446
      }
     }
     if ((label | 0) == 5) {
      if (($$016$i | 0) <= -1) {
       break;
      }
      if ((HEAP8[$1 + $$016$i >> 0] | 0) == 46) {
       $$02537$i = 0; //@line 11458
       $$02636$i = 0; //@line 11458
       $56 = $4; //@line 11458
      } else {
       break;
      }
     }
     do {
      if (!(($56 + -48 & 255) < 10 | ($56 + -97 & 255) < 6)) {
       switch ($56 << 24 >> 24) {
       case 58:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
        {
         break;
        }
       default:
        {
         break L1;
        }
       }
      }
      $$02636$i = $$02636$i + ($56 << 24 >> 24 == 58 & 1) | 0; //@line 11481
      $$02537$i = $$02537$i + 1 | 0; //@line 11482
      $56 = HEAP8[$1 + $$02537$i >> 0] | 0; //@line 11484
     } while ($56 << 24 >> 24 != 0);
     if (($$02636$i | 0) <= 1) {
      break L1;
     }
     HEAP32[$0 + 40 >> 2] = 2; //@line 11497
     _stoip6($1, _strlen($1) | 0, $0 + 44 | 0); //@line 11500
     $$0 = 1; //@line 11501
     STACKTOP = sp; //@line 11502
     return $$0 | 0; //@line 11502
    }
   } while (0);
   HEAP32[$0 + 40 >> 2] = 1; //@line 11506
   HEAP32[$vararg_buffer >> 2] = $2; //@line 11507
   L19 : do {
    if ((_sscanf($1, 5800, $vararg_buffer) | 0) >= 1) {
     HEAP8[$0 + 44 >> 0] = HEAP32[$2 >> 2]; //@line 11515
     $$1$i = 0; //@line 11516
     L21 : while (1) {
      switch (HEAP8[$1 + $$1$i >> 0] | 0) {
      case 0:
       {
        break L19;
        break;
       }
      case 46:
       {
        break L21;
        break;
       }
      default:
       {}
      }
      $$1$i = $$1$i + 1 | 0; //@line 11533
     }
     $26 = $$1$i + 1 | 0; //@line 11535
     HEAP32[$vararg_buffer1 >> 2] = $2; //@line 11537
     if ((_sscanf($1 + $26 | 0, 5800, $vararg_buffer1) | 0) >= 1) {
      HEAP8[$0 + 45 >> 0] = HEAP32[$2 >> 2]; //@line 11544
      $$1$1$i = $26; //@line 11545
      L26 : while (1) {
       switch (HEAP8[$1 + $$1$1$i >> 0] | 0) {
       case 0:
        {
         break L19;
         break;
        }
       case 46:
        {
         break L26;
         break;
        }
       default:
        {}
       }
       $$1$1$i = $$1$1$i + 1 | 0; //@line 11562
      }
      $35 = $$1$1$i + 1 | 0; //@line 11564
      HEAP32[$vararg_buffer4 >> 2] = $2; //@line 11566
      if ((_sscanf($1 + $35 | 0, 5800, $vararg_buffer4) | 0) >= 1) {
       HEAP8[$0 + 46 >> 0] = HEAP32[$2 >> 2]; //@line 11573
       $$1$2$i = $35; //@line 11574
       L31 : while (1) {
        switch (HEAP8[$1 + $$1$2$i >> 0] | 0) {
        case 0:
         {
          break L19;
          break;
         }
        case 46:
         {
          break L31;
          break;
         }
        default:
         {}
        }
        $$1$2$i = $$1$2$i + 1 | 0; //@line 11591
       }
       $45 = $$1$2$i + 1 | 0; //@line 11593
       HEAP32[$vararg_buffer7 >> 2] = $2; //@line 11595
       if ((_sscanf($1 + $45 | 0, 5800, $vararg_buffer7) | 0) >= 1) {
        HEAP8[$0 + 47 >> 0] = HEAP32[$2 >> 2]; //@line 11602
        $$1$3$i = $45; //@line 11603
        L36 : while (1) {
         switch (HEAP8[$1 + $$1$3$i >> 0] | 0) {
         case 0:
          {
           break L19;
           break;
          }
         case 46:
          {
           break L36;
           break;
          }
         default:
          {}
         }
         $$1$3$i = $$1$3$i + 1 | 0; //@line 11620
        }
        $$0 = 1; //@line 11622
        STACKTOP = sp; //@line 11623
        return $$0 | 0; //@line 11623
       }
      }
     }
    }
   } while (0);
   $$0 = 1; //@line 11629
   STACKTOP = sp; //@line 11630
   return $$0 | 0; //@line 11630
  }
 } while (0);
 $68 = $0 + 40 | 0; //@line 11633
 HEAP32[$68 >> 2] = 0; //@line 11634
 HEAP32[$68 + 4 >> 2] = 0; //@line 11634
 HEAP32[$68 + 8 >> 2] = 0; //@line 11634
 HEAP32[$68 + 12 >> 2] = 0; //@line 11634
 HEAP32[$68 + 16 >> 2] = 0; //@line 11634
 $$0 = 0; //@line 11635
 STACKTOP = sp; //@line 11636
 return $$0 | 0; //@line 11636
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_163($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx19 = 0, sp = 0;
 sp = STACKTOP; //@line 26083
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26085
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26087
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26089
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26091
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26093
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26095
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26097
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26099
 if ($AsyncRetVal | 0) {
  __ZN9UDPSocketC2Ev($AsyncRetVal); //@line 26102
  $17 = HEAP32[$4 >> 2] | 0; //@line 26103
  $ReallocAsyncCtx19 = _emscripten_realloc_async_context(40) | 0; //@line 26104
  $18 = __ZN6Socket4openEP12NetworkStack($AsyncRetVal, $17) | 0; //@line 26105
  if (___async) {
   HEAP32[$ReallocAsyncCtx19 >> 2] = 212; //@line 26108
   $19 = $ReallocAsyncCtx19 + 4 | 0; //@line 26109
   HEAP32[$19 >> 2] = $2; //@line 26110
   $20 = $ReallocAsyncCtx19 + 8 | 0; //@line 26111
   HEAP32[$20 >> 2] = $4; //@line 26112
   $21 = $ReallocAsyncCtx19 + 12 | 0; //@line 26113
   HEAP32[$21 >> 2] = $6; //@line 26114
   $22 = $ReallocAsyncCtx19 + 16 | 0; //@line 26115
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 26116
   $23 = $ReallocAsyncCtx19 + 20 | 0; //@line 26117
   HEAP32[$23 >> 2] = $8; //@line 26118
   $24 = $ReallocAsyncCtx19 + 24 | 0; //@line 26119
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 26120
   $25 = $ReallocAsyncCtx19 + 28 | 0; //@line 26121
   HEAP32[$25 >> 2] = $10; //@line 26122
   $26 = $ReallocAsyncCtx19 + 32 | 0; //@line 26123
   HEAP32[$26 >> 2] = $12; //@line 26124
   $27 = $ReallocAsyncCtx19 + 36 | 0; //@line 26125
   HEAP32[$27 >> 2] = $AsyncRetVal; //@line 26126
   sp = STACKTOP; //@line 26127
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 26131
  ___async_unwind = 0; //@line 26132
  HEAP32[$ReallocAsyncCtx19 >> 2] = 212; //@line 26133
  $19 = $ReallocAsyncCtx19 + 4 | 0; //@line 26134
  HEAP32[$19 >> 2] = $2; //@line 26135
  $20 = $ReallocAsyncCtx19 + 8 | 0; //@line 26136
  HEAP32[$20 >> 2] = $4; //@line 26137
  $21 = $ReallocAsyncCtx19 + 12 | 0; //@line 26138
  HEAP32[$21 >> 2] = $6; //@line 26139
  $22 = $ReallocAsyncCtx19 + 16 | 0; //@line 26140
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 26141
  $23 = $ReallocAsyncCtx19 + 20 | 0; //@line 26142
  HEAP32[$23 >> 2] = $8; //@line 26143
  $24 = $ReallocAsyncCtx19 + 24 | 0; //@line 26144
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 26145
  $25 = $ReallocAsyncCtx19 + 28 | 0; //@line 26146
  HEAP32[$25 >> 2] = $10; //@line 26147
  $26 = $ReallocAsyncCtx19 + 32 | 0; //@line 26148
  HEAP32[$26 >> 2] = $12; //@line 26149
  $27 = $ReallocAsyncCtx19 + 36 | 0; //@line 26150
  HEAP32[$27 >> 2] = $AsyncRetVal; //@line 26151
  sp = STACKTOP; //@line 26152
  return;
 }
 $29 = $10 + 28 | 0; //@line 26155
 $30 = HEAP32[$29 >> 2] | 0; //@line 26156
 if (!$30) {
  $39 = $14 + 12 | 0; //@line 26159
  HEAP32[$39 >> 2] = 0; //@line 26160
  $40 = HEAP32[$10 >> 2] | 0; //@line 26161
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 26162
  __ZL28nsapi_dns_query_async_deletei($40); //@line 26163
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 214; //@line 26166
   $41 = $ReallocAsyncCtx15 + 4 | 0; //@line 26167
   HEAP32[$41 >> 2] = $39; //@line 26168
   $42 = $ReallocAsyncCtx15 + 8 | 0; //@line 26169
   HEAP32[$42 >> 2] = $14; //@line 26170
   sp = STACKTOP; //@line 26171
   return;
  }
  ___async_unwind = 0; //@line 26174
  HEAP32[$ReallocAsyncCtx15 >> 2] = 214; //@line 26175
  $41 = $ReallocAsyncCtx15 + 4 | 0; //@line 26176
  HEAP32[$41 >> 2] = $39; //@line 26177
  $42 = $ReallocAsyncCtx15 + 8 | 0; //@line 26178
  HEAP32[$42 >> 2] = $14; //@line 26179
  sp = STACKTOP; //@line 26180
  return;
 } else {
  $34 = HEAP32[$30 + 4 >> 2] | 0; //@line 26185
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 26186
  FUNCTION_TABLE_vii[$34 & 7]($14, $10 + 16 | 0); //@line 26187
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 213; //@line 26190
   $35 = $ReallocAsyncCtx + 4 | 0; //@line 26191
   HEAP32[$35 >> 2] = $29; //@line 26192
   $36 = $ReallocAsyncCtx + 8 | 0; //@line 26193
   HEAP32[$36 >> 2] = $14; //@line 26194
   $37 = $ReallocAsyncCtx + 12 | 0; //@line 26195
   HEAP32[$37 >> 2] = $10; //@line 26196
   $38 = $ReallocAsyncCtx + 16 | 0; //@line 26197
   HEAP32[$38 >> 2] = $14; //@line 26198
   sp = STACKTOP; //@line 26199
   return;
  }
  ___async_unwind = 0; //@line 26202
  HEAP32[$ReallocAsyncCtx >> 2] = 213; //@line 26203
  $35 = $ReallocAsyncCtx + 4 | 0; //@line 26204
  HEAP32[$35 >> 2] = $29; //@line 26205
  $36 = $ReallocAsyncCtx + 8 | 0; //@line 26206
  HEAP32[$36 >> 2] = $14; //@line 26207
  $37 = $ReallocAsyncCtx + 12 | 0; //@line 26208
  HEAP32[$37 >> 2] = $10; //@line 26209
  $38 = $ReallocAsyncCtx + 16 | 0; //@line 26210
  HEAP32[$38 >> 2] = $14; //@line 26211
  sp = STACKTOP; //@line 26212
  return;
 }
}
function _mbed_vtracef__async_cb_88($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14372
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14374
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14376
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14378
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14382
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14384
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14386
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14388
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14392
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14396
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 14401
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 14403
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 14407
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14409
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14411
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 14413
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 14415
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 14417
 HEAP32[$44 >> 2] = HEAP32[___async_retval >> 2]; //@line 14424
 $50 = _snprintf($38, $40, 5667, $44) | 0; //@line 14425
 $$10 = ($50 | 0) >= ($40 | 0) ? 0 : $50; //@line 14427
 $53 = $38 + $$10 | 0; //@line 14429
 $54 = $40 - $$10 | 0; //@line 14430
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 14434
   $$3169 = $53; //@line 14434
   label = 4; //@line 14435
  }
 } else {
  $$3147168 = $40; //@line 14438
  $$3169 = $38; //@line 14438
  label = 4; //@line 14439
 }
 if ((label | 0) == 4) {
  $56 = $42 + -2 | 0; //@line 14442
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$30 >> 2] = $16; //@line 14448
    $$5156 = _snprintf($$3169, $$3147168, 5670, $30) | 0; //@line 14450
    break;
   }
  case 1:
   {
    HEAP32[$24 >> 2] = $16; //@line 14454
    $$5156 = _snprintf($$3169, $$3147168, 5685, $24) | 0; //@line 14456
    break;
   }
  case 3:
   {
    HEAP32[$20 >> 2] = $16; //@line 14460
    $$5156 = _snprintf($$3169, $$3147168, 5700, $20) | 0; //@line 14462
    break;
   }
  case 7:
   {
    HEAP32[$14 >> 2] = $16; //@line 14466
    $$5156 = _snprintf($$3169, $$3147168, 5715, $14) | 0; //@line 14468
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 5730, $6) | 0; //@line 14473
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 14477
  $67 = $$3169 + $$5156$ | 0; //@line 14479
  $68 = $$3147168 - $$5156$ | 0; //@line 14480
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 14484
   $70 = _vsnprintf($67, $68, $10, $12) | 0; //@line 14485
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 80; //@line 14488
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 14489
    HEAP32[$71 >> 2] = $2; //@line 14490
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 14491
    HEAP32[$72 >> 2] = $4; //@line 14492
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 14493
    $$expand_i1_val = $28 & 1; //@line 14494
    HEAP8[$73 >> 0] = $$expand_i1_val; //@line 14495
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 14496
    HEAP32[$74 >> 2] = $34; //@line 14497
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 14498
    HEAP32[$75 >> 2] = $36; //@line 14499
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 14500
    HEAP32[$76 >> 2] = $68; //@line 14501
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 14502
    HEAP32[$77 >> 2] = $67; //@line 14503
    sp = STACKTOP; //@line 14504
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 14508
   ___async_unwind = 0; //@line 14509
   HEAP32[$ReallocAsyncCtx10 >> 2] = 80; //@line 14510
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 14511
   HEAP32[$71 >> 2] = $2; //@line 14512
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 14513
   HEAP32[$72 >> 2] = $4; //@line 14514
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 14515
   $$expand_i1_val = $28 & 1; //@line 14516
   HEAP8[$73 >> 0] = $$expand_i1_val; //@line 14517
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 14518
   HEAP32[$74 >> 2] = $34; //@line 14519
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 14520
   HEAP32[$75 >> 2] = $36; //@line 14521
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 14522
   HEAP32[$76 >> 2] = $68; //@line 14523
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 14524
   HEAP32[$77 >> 2] = $67; //@line 14525
   sp = STACKTOP; //@line 14526
   return;
  }
 }
 $79 = HEAP32[129] | 0; //@line 14530
 $80 = HEAP32[122] | 0; //@line 14531
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14532
 FUNCTION_TABLE_vi[$79 & 511]($80); //@line 14533
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 14536
  sp = STACKTOP; //@line 14537
  return;
 }
 ___async_unwind = 0; //@line 14540
 HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 14541
 sp = STACKTOP; //@line 14542
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_146($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24922
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24924
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24926
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24930
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24932
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24934
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24936
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24938
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24940
 $19 = $8 + 12 | 0; //@line 24942
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 24943
 $20 = $18 + 12 | 0; //@line 24944
 $21 = HEAP32[$20 >> 2] | 0; //@line 24945
 if (!$21) {
  $34 = $10 + 12 | 0; //@line 24948
  HEAP32[$34 >> 2] = 0; //@line 24949
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 24950
  $35 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($12, $14, $8, $10, $16) | 0; //@line 24951
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 106; //@line 24954
   $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 24955
   HEAP32[$36 >> 2] = $34; //@line 24956
   $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 24957
   HEAP32[$37 >> 2] = $19; //@line 24958
   $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 24959
   HEAP32[$38 >> 2] = $10; //@line 24960
   $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 24961
   HEAP32[$39 >> 2] = $20; //@line 24962
   $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 24963
   HEAP32[$40 >> 2] = $8; //@line 24964
   $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 24965
   HEAP32[$41 >> 2] = $4; //@line 24966
   $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 24967
   HEAP32[$42 >> 2] = $2; //@line 24968
   sp = STACKTOP; //@line 24969
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 24973
  ___async_unwind = 0; //@line 24974
  HEAP32[$ReallocAsyncCtx9 >> 2] = 106; //@line 24975
  $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 24976
  HEAP32[$36 >> 2] = $34; //@line 24977
  $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 24978
  HEAP32[$37 >> 2] = $19; //@line 24979
  $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 24980
  HEAP32[$38 >> 2] = $10; //@line 24981
  $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 24982
  HEAP32[$39 >> 2] = $20; //@line 24983
  $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 24984
  HEAP32[$40 >> 2] = $8; //@line 24985
  $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 24986
  HEAP32[$41 >> 2] = $4; //@line 24987
  $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 24988
  HEAP32[$42 >> 2] = $2; //@line 24989
  sp = STACKTOP; //@line 24990
  return;
 } else {
  $24 = HEAP32[$21 + 4 >> 2] | 0; //@line 24994
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 24995
  FUNCTION_TABLE_vii[$24 & 7]($10, $4); //@line 24996
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 105; //@line 24999
   $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 25000
   HEAP32[$25 >> 2] = $20; //@line 25001
   $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 25002
   HEAP32[$26 >> 2] = $2; //@line 25003
   $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 25004
   HEAP32[$27 >> 2] = $4; //@line 25005
   $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 25006
   HEAP32[$28 >> 2] = $8; //@line 25007
   $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 25008
   HEAP32[$29 >> 2] = $19; //@line 25009
   $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 25010
   HEAP32[$30 >> 2] = $10; //@line 25011
   $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 25012
   HEAP32[$31 >> 2] = $12; //@line 25013
   $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 25014
   HEAP32[$32 >> 2] = $14; //@line 25015
   $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 25016
   HEAP32[$33 >> 2] = $16; //@line 25017
   sp = STACKTOP; //@line 25018
   return;
  }
  ___async_unwind = 0; //@line 25021
  HEAP32[$ReallocAsyncCtx5 >> 2] = 105; //@line 25022
  $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 25023
  HEAP32[$25 >> 2] = $20; //@line 25024
  $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 25025
  HEAP32[$26 >> 2] = $2; //@line 25026
  $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 25027
  HEAP32[$27 >> 2] = $4; //@line 25028
  $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 25029
  HEAP32[$28 >> 2] = $8; //@line 25030
  $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 25031
  HEAP32[$29 >> 2] = $19; //@line 25032
  $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 25033
  HEAP32[$30 >> 2] = $10; //@line 25034
  $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 25035
  HEAP32[$31 >> 2] = $12; //@line 25036
  $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 25037
  HEAP32[$32 >> 2] = $14; //@line 25038
  $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 25039
  HEAP32[$33 >> 2] = $16; //@line 25040
  sp = STACKTOP; //@line 25041
  return;
 }
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$unpack$i = 0, $$unpack4$i = 0, $15 = 0, $16 = 0, $20 = 0, $3 = 0, $30 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $5 = 0, $50 = 0, $55 = 0, $58 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10653
 STACKTOP = STACKTOP + 32 | 0; //@line 10654
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10654
 $3 = sp + 16 | 0; //@line 10655
 $4 = sp; //@line 10656
 $5 = $2 + 12 | 0; //@line 10657
 $6 = HEAP32[$5 >> 2] | 0; //@line 10658
 do {
  if (!$6) {
   $16 = 0; //@line 10662
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 10665
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 10666
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 10667
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 123; //@line 10670
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10672
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 10674
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10676
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 10678
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 10680
    sp = STACKTOP; //@line 10681
    STACKTOP = sp; //@line 10682
    return 0; //@line 10682
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10684
    $16 = HEAP32[$5 >> 2] | 0; //@line 10686
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 10691
 HEAP32[$15 >> 2] = $16; //@line 10692
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 10695
 $$unpack4$i = HEAP32[$0 + 4 >> 2] | 0; //@line 10697
 $20 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 10699
 if (!($$unpack4$i & 1)) {
  $36 = $$unpack$i; //@line 10705
 } else {
  $36 = HEAP32[(HEAP32[$20 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 10710
 }
 do {
  if (!$16) {
   $41 = 0; //@line 10715
  } else {
   $30 = HEAP32[$16 + 4 >> 2] | 0; //@line 10718
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10719
   FUNCTION_TABLE_vii[$30 & 7]($3, $4); //@line 10720
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 124; //@line 10723
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 10725
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 10727
    HEAP32[$AsyncCtx2 + 12 >> 2] = $20; //@line 10729
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 10731
    HEAP32[$AsyncCtx2 + 20 >> 2] = $36; //@line 10733
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 10735
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 10737
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 10739
    sp = STACKTOP; //@line 10740
    STACKTOP = sp; //@line 10741
    return 0; //@line 10741
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10743
    $41 = HEAP32[$15 >> 2] | 0; //@line 10745
    break;
   }
  }
 } while (0);
 $40 = $3 + 12 | 0; //@line 10750
 HEAP32[$40 >> 2] = $41; //@line 10751
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10752
 $42 = FUNCTION_TABLE_iiii[$36 & 31]($20, $1, $3) | 0; //@line 10753
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 125; //@line 10756
  HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 10758
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 10760
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 10762
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 10764
  sp = STACKTOP; //@line 10765
  STACKTOP = sp; //@line 10766
  return 0; //@line 10766
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10768
 $47 = HEAP32[$40 >> 2] | 0; //@line 10769
 do {
  if ($47 | 0) {
   $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 10774
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10775
   FUNCTION_TABLE_vi[$50 & 511]($3); //@line 10776
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 126; //@line 10779
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 10781
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 10783
    HEAP32[$AsyncCtx9 + 12 >> 2] = $42; //@line 10785
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 10787
    sp = STACKTOP; //@line 10788
    STACKTOP = sp; //@line 10789
    return 0; //@line 10789
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10791
    break;
   }
  }
 } while (0);
 $55 = HEAP32[$15 >> 2] | 0; //@line 10796
 if (!$55) {
  STACKTOP = sp; //@line 10799
  return $42 | 0; //@line 10799
 }
 $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 10802
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10803
 FUNCTION_TABLE_vi[$58 & 511]($4); //@line 10804
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 127; //@line 10807
  HEAP32[$AsyncCtx13 + 4 >> 2] = $42; //@line 10809
  sp = STACKTOP; //@line 10810
  STACKTOP = sp; //@line 10811
  return 0; //@line 10811
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10813
 STACKTOP = sp; //@line 10814
 return $42 | 0; //@line 10814
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13784
 STACKTOP = STACKTOP + 32 | 0; //@line 13785
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13785
 $5 = sp + 16 | 0; //@line 13786
 $6 = sp; //@line 13787
 $7 = $2 + 12 | 0; //@line 13788
 $8 = HEAP32[$7 >> 2] | 0; //@line 13789
 do {
  if (!$8) {
   $20 = 0; //@line 13793
  } else {
   $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 13796
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 13797
   FUNCTION_TABLE_vii[$11 & 7]($5, $2); //@line 13798
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 164; //@line 13801
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 13803
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 13805
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 13807
    HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 13809
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 13811
    HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 13813
    HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 13815
    sp = STACKTOP; //@line 13816
    STACKTOP = sp; //@line 13817
    return 0; //@line 13817
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13819
    $20 = HEAP32[$7 >> 2] | 0; //@line 13821
    break;
   }
  }
 } while (0);
 $19 = $5 + 12 | 0; //@line 13826
 HEAP32[$19 >> 2] = $20; //@line 13827
 $21 = $3 + 12 | 0; //@line 13828
 $22 = HEAP32[$21 >> 2] | 0; //@line 13829
 do {
  if (!$22) {
   $34 = 0; //@line 13833
  } else {
   $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 13836
   $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 13837
   FUNCTION_TABLE_vii[$25 & 7]($6, $3); //@line 13838
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 165; //@line 13841
    HEAP32[$AsyncCtx2 + 4 >> 2] = $21; //@line 13843
    HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 13845
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 13847
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 13849
    HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 13851
    HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 13853
    HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 13855
    sp = STACKTOP; //@line 13856
    STACKTOP = sp; //@line 13857
    return 0; //@line 13857
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13859
    $34 = HEAP32[$21 >> 2] | 0; //@line 13861
    break;
   }
  }
 } while (0);
 $33 = $6 + 12 | 0; //@line 13866
 HEAP32[$33 >> 2] = $34; //@line 13867
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13868
 $35 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $5, 0, $6, $4) | 0; //@line 13869
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 166; //@line 13872
  HEAP32[$AsyncCtx13 + 4 >> 2] = $33; //@line 13874
  HEAP32[$AsyncCtx13 + 8 >> 2] = $19; //@line 13876
  HEAP32[$AsyncCtx13 + 12 >> 2] = $6; //@line 13878
  HEAP32[$AsyncCtx13 + 16 >> 2] = $5; //@line 13880
  sp = STACKTOP; //@line 13881
  STACKTOP = sp; //@line 13882
  return 0; //@line 13882
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13884
 $40 = HEAP32[$33 >> 2] | 0; //@line 13885
 do {
  if ($40 | 0) {
   $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 13890
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13891
   FUNCTION_TABLE_vi[$43 & 511]($6); //@line 13892
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 167; //@line 13895
    HEAP32[$AsyncCtx6 + 4 >> 2] = $19; //@line 13897
    HEAP32[$AsyncCtx6 + 8 >> 2] = $35; //@line 13899
    HEAP32[$AsyncCtx6 + 12 >> 2] = $5; //@line 13901
    sp = STACKTOP; //@line 13902
    STACKTOP = sp; //@line 13903
    return 0; //@line 13903
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 13905
    break;
   }
  }
 } while (0);
 $47 = HEAP32[$19 >> 2] | 0; //@line 13910
 if (!$47) {
  STACKTOP = sp; //@line 13913
  return $35 | 0; //@line 13913
 }
 $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 13916
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13917
 FUNCTION_TABLE_vi[$50 & 511]($5); //@line 13918
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 168; //@line 13921
  HEAP32[$AsyncCtx10 + 4 >> 2] = $35; //@line 13923
  sp = STACKTOP; //@line 13924
  STACKTOP = sp; //@line 13925
  return 0; //@line 13925
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 13927
 STACKTOP = sp; //@line 13928
 return $35 | 0; //@line 13928
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_151($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25247
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25251
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25253
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25255
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25257
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25259
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25261
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25263
 $16 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25264
 if ($16 | 0) {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 25268
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 25269
  FUNCTION_TABLE_vi[$19 & 511]($6); //@line 25270
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 107; //@line 25273
   $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 25274
   HEAP32[$20 >> 2] = $4; //@line 25275
   $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 25276
   HEAP32[$21 >> 2] = $8; //@line 25277
   $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 25278
   HEAP32[$22 >> 2] = $10; //@line 25279
   $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 25280
   HEAP32[$23 >> 2] = $12; //@line 25281
   $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 25282
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 25283
   $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 25284
   HEAP32[$25 >> 2] = $14; //@line 25285
   sp = STACKTOP; //@line 25286
   return;
  }
  ___async_unwind = 0; //@line 25289
  HEAP32[$ReallocAsyncCtx6 >> 2] = 107; //@line 25290
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 25291
  HEAP32[$20 >> 2] = $4; //@line 25292
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 25293
  HEAP32[$21 >> 2] = $8; //@line 25294
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 25295
  HEAP32[$22 >> 2] = $10; //@line 25296
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 25297
  HEAP32[$23 >> 2] = $12; //@line 25298
  $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 25299
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 25300
  $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 25301
  HEAP32[$25 >> 2] = $14; //@line 25302
  sp = STACKTOP; //@line 25303
  return;
 }
 $26 = HEAP32[$4 >> 2] | 0; //@line 25306
 if ($26 | 0) {
  $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 25310
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 25311
  FUNCTION_TABLE_vi[$29 & 511]($10); //@line 25312
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 108; //@line 25315
   $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 25316
   HEAP32[$30 >> 2] = $8; //@line 25317
   $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 25318
   HEAP32[$31 >> 2] = $12; //@line 25319
   $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 25320
   HEAP32[$32 >> 2] = $AsyncRetVal; //@line 25321
   $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 25322
   HEAP32[$33 >> 2] = $14; //@line 25323
   sp = STACKTOP; //@line 25324
   return;
  }
  ___async_unwind = 0; //@line 25327
  HEAP32[$ReallocAsyncCtx7 >> 2] = 108; //@line 25328
  $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 25329
  HEAP32[$30 >> 2] = $8; //@line 25330
  $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 25331
  HEAP32[$31 >> 2] = $12; //@line 25332
  $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 25333
  HEAP32[$32 >> 2] = $AsyncRetVal; //@line 25334
  $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 25335
  HEAP32[$33 >> 2] = $14; //@line 25336
  sp = STACKTOP; //@line 25337
  return;
 }
 $34 = HEAP32[$8 >> 2] | 0; //@line 25340
 if (!$34) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 25344
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 25348
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 25349
 FUNCTION_TABLE_vi[$37 & 511]($12); //@line 25350
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 25353
  $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 25354
  HEAP32[$38 >> 2] = $12; //@line 25355
  $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 25356
  HEAP32[$39 >> 2] = $AsyncRetVal; //@line 25357
  $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 25358
  HEAP32[$40 >> 2] = $14; //@line 25359
  sp = STACKTOP; //@line 25360
  return;
 }
 ___async_unwind = 0; //@line 25363
 HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 25364
 $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 25365
 HEAP32[$38 >> 2] = $12; //@line 25366
 $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 25367
 HEAP32[$39 >> 2] = $AsyncRetVal; //@line 25368
 $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 25369
 HEAP32[$40 >> 2] = $14; //@line 25370
 sp = STACKTOP; //@line 25371
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$04 = 0, $11 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15716
 STACKTOP = STACKTOP + 32 | 0; //@line 15717
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15717
 $3 = sp + 16 | 0; //@line 15718
 $4 = sp; //@line 15719
 $7 = $2 + 12 | 0; //@line 15722
 $8 = HEAP32[$7 >> 2] | 0; //@line 15723
 $9 = ($8 | 0) == 0; //@line 15724
 if (!(HEAP32[2505] | 0)) {
  do {
   if ($9) {
    $30 = 0; //@line 15728
   } else {
    $24 = HEAP32[$8 + 4 >> 2] | 0; //@line 15731
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15732
    FUNCTION_TABLE_vii[$24 & 7]($4, $2); //@line 15733
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 203; //@line 15736
     HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 15738
     HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 15740
     HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 15742
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 15744
     sp = STACKTOP; //@line 15745
     STACKTOP = sp; //@line 15746
     return 0; //@line 15746
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15748
     $30 = HEAP32[$7 >> 2] | 0; //@line 15750
     break;
    }
   }
  } while (0);
  $29 = $4 + 12 | 0; //@line 15755
  HEAP32[$29 >> 2] = $30; //@line 15756
  $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15757
  $31 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $4) | 0; //@line 15758
  if (___async) {
   HEAP32[$AsyncCtx14 >> 2] = 204; //@line 15761
   HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 15763
   HEAP32[$AsyncCtx14 + 8 >> 2] = $4; //@line 15765
   sp = STACKTOP; //@line 15766
   STACKTOP = sp; //@line 15767
   return 0; //@line 15767
  }
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15769
  $34 = HEAP32[$29 >> 2] | 0; //@line 15770
  if (!$34) {
   $$04 = $31; //@line 15773
   STACKTOP = sp; //@line 15774
   return $$04 | 0; //@line 15774
  }
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 15777
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15778
  FUNCTION_TABLE_vi[$37 & 511]($4); //@line 15779
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 205; //@line 15782
   HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 15784
   sp = STACKTOP; //@line 15785
   STACKTOP = sp; //@line 15786
   return 0; //@line 15786
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15788
  $$04 = $31; //@line 15789
  STACKTOP = sp; //@line 15790
  return $$04 | 0; //@line 15790
 } else {
  do {
   if ($9) {
    $16 = 0; //@line 15794
   } else {
    $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 15797
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15798
    FUNCTION_TABLE_vii[$11 & 7]($3, $2); //@line 15799
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 200; //@line 15802
     HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 15804
     HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 15806
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 15808
     sp = STACKTOP; //@line 15809
     STACKTOP = sp; //@line 15810
     return 0; //@line 15810
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15812
     $16 = HEAP32[$7 >> 2] | 0; //@line 15814
     break;
    }
   }
  } while (0);
  $15 = $3 + 12 | 0; //@line 15819
  HEAP32[$15 >> 2] = $16; //@line 15820
  $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15821
  __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(10008, $1, $3) | 0; //@line 15822
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 201; //@line 15825
   HEAP32[$AsyncCtx17 + 4 >> 2] = $15; //@line 15827
   HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 15829
   sp = STACKTOP; //@line 15830
   STACKTOP = sp; //@line 15831
   return 0; //@line 15831
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15833
  $19 = HEAP32[$15 >> 2] | 0; //@line 15834
  if (!$19) {
   $$04 = 0; //@line 15837
   STACKTOP = sp; //@line 15838
   return $$04 | 0; //@line 15838
  }
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 15841
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15842
  FUNCTION_TABLE_vi[$22 & 511]($3); //@line 15843
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 202; //@line 15846
   sp = STACKTOP; //@line 15847
   STACKTOP = sp; //@line 15848
   return 0; //@line 15848
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15850
  $$04 = 0; //@line 15851
  STACKTOP = sp; //@line 15852
  return $$04 | 0; //@line 15852
 }
 return 0; //@line 15854
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_159($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25665
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25667
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25669
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25671
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25673
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25675
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25677
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25679
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25681
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25683
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25685
 $21 = $20 + 44 | 0; //@line 25686
 $22 = HEAP32[$21 >> 2] | 0; //@line 25687
 if ($22 | 0) {
  $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 25691
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 25692
  FUNCTION_TABLE_vii[$25 & 7]($16, $18); //@line 25693
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 226; //@line 25696
   $26 = $ReallocAsyncCtx9 + 4 | 0; //@line 25697
   HEAP32[$26 >> 2] = $21; //@line 25698
   $27 = $ReallocAsyncCtx9 + 8 | 0; //@line 25699
   HEAP32[$27 >> 2] = $8; //@line 25700
   $28 = $ReallocAsyncCtx9 + 12 | 0; //@line 25701
   HEAP32[$28 >> 2] = $10; //@line 25702
   $29 = $ReallocAsyncCtx9 + 16 | 0; //@line 25703
   HEAP32[$29 >> 2] = $2; //@line 25704
   $30 = $ReallocAsyncCtx9 + 20 | 0; //@line 25705
   HEAP32[$30 >> 2] = $4; //@line 25706
   $31 = $ReallocAsyncCtx9 + 24 | 0; //@line 25707
   HEAP32[$31 >> 2] = $6; //@line 25708
   $32 = $ReallocAsyncCtx9 + 28 | 0; //@line 25709
   HEAP32[$32 >> 2] = $12; //@line 25710
   $33 = $ReallocAsyncCtx9 + 32 | 0; //@line 25711
   HEAP32[$33 >> 2] = $14; //@line 25712
   $34 = $ReallocAsyncCtx9 + 36 | 0; //@line 25713
   HEAP32[$34 >> 2] = $20; //@line 25714
   sp = STACKTOP; //@line 25715
   return;
  }
  ___async_unwind = 0; //@line 25718
  HEAP32[$ReallocAsyncCtx9 >> 2] = 226; //@line 25719
  $26 = $ReallocAsyncCtx9 + 4 | 0; //@line 25720
  HEAP32[$26 >> 2] = $21; //@line 25721
  $27 = $ReallocAsyncCtx9 + 8 | 0; //@line 25722
  HEAP32[$27 >> 2] = $8; //@line 25723
  $28 = $ReallocAsyncCtx9 + 12 | 0; //@line 25724
  HEAP32[$28 >> 2] = $10; //@line 25725
  $29 = $ReallocAsyncCtx9 + 16 | 0; //@line 25726
  HEAP32[$29 >> 2] = $2; //@line 25727
  $30 = $ReallocAsyncCtx9 + 20 | 0; //@line 25728
  HEAP32[$30 >> 2] = $4; //@line 25729
  $31 = $ReallocAsyncCtx9 + 24 | 0; //@line 25730
  HEAP32[$31 >> 2] = $6; //@line 25731
  $32 = $ReallocAsyncCtx9 + 28 | 0; //@line 25732
  HEAP32[$32 >> 2] = $12; //@line 25733
  $33 = $ReallocAsyncCtx9 + 32 | 0; //@line 25734
  HEAP32[$33 >> 2] = $14; //@line 25735
  $34 = $ReallocAsyncCtx9 + 36 | 0; //@line 25736
  HEAP32[$34 >> 2] = $20; //@line 25737
  sp = STACKTOP; //@line 25738
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 25741
 $$pre85 = HEAP32[$10 >> 2] | 0; //@line 25742
 HEAP32[$$pre85 + 16 >> 2] = HEAP32[$2 >> 2]; //@line 25746
 HEAP32[$4 + 8 >> 2] = 0; //@line 25748
 HEAP32[$4 >> 2] = 227; //@line 25749
 HEAP32[$4 + 4 >> 2] = $$pre85; //@line 25751
 $39 = $4 + 12 | 0; //@line 25752
 HEAP32[$39 >> 2] = 724; //@line 25753
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 25754
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($6, $4); //@line 25755
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 228; //@line 25758
  $40 = $ReallocAsyncCtx18 + 4 | 0; //@line 25759
  HEAP32[$40 >> 2] = $39; //@line 25760
  $41 = $ReallocAsyncCtx18 + 8 | 0; //@line 25761
  HEAP32[$41 >> 2] = $12; //@line 25762
  $42 = $ReallocAsyncCtx18 + 12 | 0; //@line 25763
  HEAP32[$42 >> 2] = $14; //@line 25764
  $43 = $ReallocAsyncCtx18 + 16 | 0; //@line 25765
  HEAP32[$43 >> 2] = $4; //@line 25766
  $44 = $ReallocAsyncCtx18 + 20 | 0; //@line 25767
  HEAP32[$44 >> 2] = $20; //@line 25768
  sp = STACKTOP; //@line 25769
  return;
 }
 ___async_unwind = 0; //@line 25772
 HEAP32[$ReallocAsyncCtx18 >> 2] = 228; //@line 25773
 $40 = $ReallocAsyncCtx18 + 4 | 0; //@line 25774
 HEAP32[$40 >> 2] = $39; //@line 25775
 $41 = $ReallocAsyncCtx18 + 8 | 0; //@line 25776
 HEAP32[$41 >> 2] = $12; //@line 25777
 $42 = $ReallocAsyncCtx18 + 12 | 0; //@line 25778
 HEAP32[$42 >> 2] = $14; //@line 25779
 $43 = $ReallocAsyncCtx18 + 16 | 0; //@line 25780
 HEAP32[$43 >> 2] = $4; //@line 25781
 $44 = $ReallocAsyncCtx18 + 20 | 0; //@line 25782
 HEAP32[$44 >> 2] = $20; //@line 25783
 sp = STACKTOP; //@line 25784
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_100($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 15393
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15395
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15397
 $7 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 15400
 if ($7 | 0) {
  $11 = HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0; //@line 15405
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 15406
  FUNCTION_TABLE_vi[$11 & 511]($7); //@line 15407
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 233; //@line 15410
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 15411
   HEAP32[$12 >> 2] = $2; //@line 15412
   $13 = $ReallocAsyncCtx + 8 | 0; //@line 15413
   HEAP32[$13 >> 2] = $4; //@line 15414
   sp = STACKTOP; //@line 15415
   return;
  }
  ___async_unwind = 0; //@line 15418
  HEAP32[$ReallocAsyncCtx >> 2] = 233; //@line 15419
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 15420
  HEAP32[$12 >> 2] = $2; //@line 15421
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 15422
  HEAP32[$13 >> 2] = $4; //@line 15423
  sp = STACKTOP; //@line 15424
  return;
 }
 $15 = HEAP32[$2 + 60 >> 2] | 0; //@line 15428
 do {
  if ($15 | 0) {
   $18 = HEAP32[$15 + 12 >> 2] | 0; //@line 15433
   if (!$18) {
    __ZdlPv($15); //@line 15436
    break;
   }
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 15440
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 15441
   FUNCTION_TABLE_vi[$21 & 511]($15); //@line 15442
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 234; //@line 15445
    $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 15446
    HEAP32[$22 >> 2] = $15; //@line 15447
    $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 15448
    HEAP32[$23 >> 2] = $2; //@line 15449
    $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 15450
    HEAP32[$24 >> 2] = $4; //@line 15451
    sp = STACKTOP; //@line 15452
    return;
   }
   ___async_unwind = 0; //@line 15455
   HEAP32[$ReallocAsyncCtx2 >> 2] = 234; //@line 15456
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 15457
   HEAP32[$22 >> 2] = $15; //@line 15458
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 15459
   HEAP32[$23 >> 2] = $2; //@line 15460
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 15461
   HEAP32[$24 >> 2] = $4; //@line 15462
   sp = STACKTOP; //@line 15463
   return;
  }
 } while (0);
 $26 = HEAP32[$2 + 64 >> 2] | 0; //@line 15468
 if ($26 | 0) {
  __ZdaPv($26); //@line 15471
 }
 $29 = HEAP32[$2 + 12 >> 2] | 0; //@line 15474
 if ($29 | 0) {
  __ZdlPv($29); //@line 15477
 }
 $32 = HEAP32[$2 + 44 >> 2] | 0; //@line 15480
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 15485
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 15486
  FUNCTION_TABLE_vi[$36 & 511]($2 + 32 | 0); //@line 15487
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 235; //@line 15490
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 15491
   HEAP32[$37 >> 2] = $2; //@line 15492
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 15493
   HEAP32[$38 >> 2] = $4; //@line 15494
   sp = STACKTOP; //@line 15495
   return;
  }
  ___async_unwind = 0; //@line 15498
  HEAP32[$ReallocAsyncCtx3 >> 2] = 235; //@line 15499
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 15500
  HEAP32[$37 >> 2] = $2; //@line 15501
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 15502
  HEAP32[$38 >> 2] = $4; //@line 15503
  sp = STACKTOP; //@line 15504
  return;
 }
 $40 = HEAP32[$2 + 28 >> 2] | 0; //@line 15508
 if (!$40) {
  __ZdlPv($2); //@line 15511
  HEAP32[10036 + ($4 << 2) >> 2] = 0; //@line 15513
  return;
 }
 $44 = HEAP32[$40 + 8 >> 2] | 0; //@line 15518
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 15519
 FUNCTION_TABLE_vi[$44 & 511]($2 + 16 | 0); //@line 15520
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 236; //@line 15523
  $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 15524
  HEAP32[$45 >> 2] = $2; //@line 15525
  $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 15526
  HEAP32[$46 >> 2] = $4; //@line 15527
  sp = STACKTOP; //@line 15528
  return;
 }
 ___async_unwind = 0; //@line 15531
 HEAP32[$ReallocAsyncCtx4 >> 2] = 236; //@line 15532
 $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 15533
 HEAP32[$45 >> 2] = $2; //@line 15534
 $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 15535
 HEAP32[$46 >> 2] = $4; //@line 15536
 sp = STACKTOP; //@line 15537
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_53($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 10903
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10905
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10907
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10909
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10911
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10913
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10915
 if (!$AsyncRetVal) {
  $28 = 0 == 0; //@line 10918
  $29 = HEAP32[$2 >> 2] | 0; //@line 10919
  if (!$29) {
   if ($28) {
    $$06 = -3007; //@line 10923
    $34 = ___async_retval; //@line 10924
    HEAP32[$34 >> 2] = $$06; //@line 10925
    return;
   }
   $$06 = 0; //@line 10928
   $34 = ___async_retval; //@line 10929
   HEAP32[$34 >> 2] = $$06; //@line 10930
   return;
  } else {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 10934
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 10935
   FUNCTION_TABLE_vi[$32 & 511]($8); //@line 10936
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 10939
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 10940
    $$expand_i1_val = $28 & 1; //@line 10941
    HEAP8[$33 >> 0] = $$expand_i1_val; //@line 10942
    sp = STACKTOP; //@line 10943
    return;
   }
   ___async_unwind = 0; //@line 10946
   HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 10947
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 10948
   $$expand_i1_val = $28 & 1; //@line 10949
   HEAP8[$33 >> 0] = $$expand_i1_val; //@line 10950
   sp = STACKTOP; //@line 10951
   return;
  }
 } else {
  $13 = HEAP32[$2 >> 2] | 0; //@line 10955
  if (!$13) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 10959
   _equeue_event_delay($AsyncRetVal, $4); //@line 10960
   _equeue_event_dtor($AsyncRetVal, 114); //@line 10961
   $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 10962
   $24 = _equeue_post($6, 115, $AsyncRetVal) | 0; //@line 10963
   if (___async) {
    HEAP32[$ReallocAsyncCtx8 >> 2] = 116; //@line 10966
    $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 10967
    HEAP32[$25 >> 2] = $2; //@line 10968
    $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 10969
    HEAP32[$26 >> 2] = $8; //@line 10970
    sp = STACKTOP; //@line 10971
    return;
   }
   HEAP32[___async_retval >> 2] = $24; //@line 10975
   ___async_unwind = 0; //@line 10976
   HEAP32[$ReallocAsyncCtx8 >> 2] = 116; //@line 10977
   $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 10978
   HEAP32[$25 >> 2] = $2; //@line 10979
   $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 10980
   HEAP32[$26 >> 2] = $8; //@line 10981
   sp = STACKTOP; //@line 10982
   return;
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 10986
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 10987
   FUNCTION_TABLE_vii[$16 & 7]($AsyncRetVal, $8); //@line 10988
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 10991
    $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 10992
    HEAP32[$17 >> 2] = $10; //@line 10993
    $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 10994
    HEAP32[$18 >> 2] = $AsyncRetVal; //@line 10995
    $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 10996
    HEAP32[$19 >> 2] = $4; //@line 10997
    $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 10998
    HEAP32[$20 >> 2] = $6; //@line 10999
    $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 11000
    HEAP32[$21 >> 2] = $2; //@line 11001
    $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 11002
    HEAP32[$22 >> 2] = $8; //@line 11003
    sp = STACKTOP; //@line 11004
    return;
   }
   ___async_unwind = 0; //@line 11007
   HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 11008
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 11009
   HEAP32[$17 >> 2] = $10; //@line 11010
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 11011
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 11012
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 11013
   HEAP32[$19 >> 2] = $4; //@line 11014
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 11015
   HEAP32[$20 >> 2] = $6; //@line 11016
   $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 11017
   HEAP32[$21 >> 2] = $2; //@line 11018
   $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 11019
   HEAP32[$22 >> 2] = $8; //@line 11020
   sp = STACKTOP; //@line 11021
   return;
  }
 }
}
function __Z28nsapi_dns_query_async_canceli($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $31 = 0, $35 = 0, $39 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18993
 STACKTOP = STACKTOP + 16 | 0; //@line 18994
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18994
 $1 = sp; //@line 18995
 $2 = HEAP32[2509] | 0; //@line 18996
 if (!$2) {
  label = 3; //@line 18999
 } else {
  if ((HEAP32[$2 >> 2] | 0) == ($0 | 0)) {
   $$lcssa = $2; //@line 19004
  } else {
   label = 3; //@line 19006
  }
 }
 do {
  if ((label | 0) == 3) {
   $6 = HEAP32[2510] | 0; //@line 19011
   if ($6 | 0) {
    if ((HEAP32[$6 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $6; //@line 19017
     break;
    }
   }
   $35 = HEAP32[2511] | 0; //@line 19021
   if ($35 | 0) {
    if ((HEAP32[$35 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $35; //@line 19027
     break;
    }
   }
   $39 = HEAP32[2512] | 0; //@line 19031
   if ($39 | 0) {
    if ((HEAP32[$39 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $39; //@line 19037
     break;
    }
   }
   $43 = HEAP32[2513] | 0; //@line 19041
   if (!$43) {
    $$0 = -3003; //@line 19044
    STACKTOP = sp; //@line 19045
    return $$0 | 0; //@line 19045
   }
   if ((HEAP32[$43 >> 2] | 0) == ($0 | 0)) {
    $$lcssa = $43; //@line 19050
   } else {
    $$0 = -3003; //@line 19052
    STACKTOP = sp; //@line 19053
    return $$0 | 0; //@line 19053
   }
  }
 } while (0);
 $8 = $$lcssa + 88 | 0; //@line 19057
 if ((HEAP32[$8 >> 2] | 0) == 2) {
  $$0 = -3003; //@line 19061
  STACKTOP = sp; //@line 19062
  return $$0 | 0; //@line 19062
 }
 HEAP32[$8 >> 2] = 2; //@line 19064
 HEAP32[$1 >> 2] = 0; //@line 19065
 HEAP32[$1 + 4 >> 2] = 0; //@line 19065
 HEAP32[$1 + 8 >> 2] = 0; //@line 19065
 HEAP32[$1 + 12 >> 2] = 0; //@line 19065
 $11 = $$lcssa + 16 | 0; //@line 19066
 do {
  if (($11 | 0) != ($1 | 0)) {
   $13 = $$lcssa + 28 | 0; //@line 19070
   $14 = HEAP32[$13 >> 2] | 0; //@line 19071
   if ($14 | 0) {
    $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 19075
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 19076
    FUNCTION_TABLE_vi[$17 & 511]($11); //@line 19077
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 276; //@line 19080
     HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 19082
     HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 19084
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 19086
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 19088
     sp = STACKTOP; //@line 19089
     STACKTOP = sp; //@line 19090
     return 0; //@line 19090
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 19092
    $$phi$trans$insert = $1 + 12 | 0; //@line 19093
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 19094
    if ($$pre | 0) {
     $24 = HEAP32[$$pre + 4 >> 2] | 0; //@line 19098
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19099
     FUNCTION_TABLE_vii[$24 & 7]($11, $1); //@line 19100
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 277; //@line 19103
      HEAP32[$AsyncCtx2 + 4 >> 2] = $$phi$trans$insert; //@line 19105
      HEAP32[$AsyncCtx2 + 8 >> 2] = $13; //@line 19107
      HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 19109
      sp = STACKTOP; //@line 19110
      STACKTOP = sp; //@line 19111
      return 0; //@line 19111
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19113
     $$pre$i$i = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 19114
     HEAP32[$13 >> 2] = $$pre$i$i; //@line 19115
     if (!$$pre$i$i) {
      break;
     }
     $31 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 19122
     $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19123
     FUNCTION_TABLE_vi[$31 & 511]($1); //@line 19124
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 278; //@line 19127
      HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 19129
      sp = STACKTOP; //@line 19130
      STACKTOP = sp; //@line 19131
      return 0; //@line 19131
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19133
      break;
     }
    }
   }
   HEAP32[$13 >> 2] = 0; //@line 19138
  }
 } while (0);
 $$0 = 0; //@line 19141
 STACKTOP = sp; //@line 19142
 return $$0 | 0; //@line 19142
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_126($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23475
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23477
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23479
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23481
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23483
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23485
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 23488
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 23491
 $16 = HEAP8[$0 + 26 >> 0] & 1; //@line 23494
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 23496
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 23498
 $22 = HEAP32[$0 + 36 >> 2] | 0; //@line 23500
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 23502
 $26 = HEAP32[$0 + 44 >> 2] | 0; //@line 23504
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 23506
 L2 : do {
  if (!(HEAP8[$22 >> 0] | 0)) {
   do {
    if (!(HEAP8[$6 >> 0] | 0)) {
     $$182$off0 = $14; //@line 23515
     $$186$off0 = $16; //@line 23515
    } else {
     if (!(HEAP8[$4 >> 0] | 0)) {
      if (!(HEAP32[$24 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $16; //@line 23524
       $$283$off0 = 1; //@line 23524
       label = 13; //@line 23525
       break L2;
      } else {
       $$182$off0 = 1; //@line 23528
       $$186$off0 = $16; //@line 23528
       break;
      }
     }
     if ((HEAP32[$20 >> 2] | 0) == 1) {
      label = 18; //@line 23535
      break L2;
     }
     if (!(HEAP32[$24 >> 2] & 2)) {
      label = 18; //@line 23542
      break L2;
     } else {
      $$182$off0 = 1; //@line 23545
      $$186$off0 = 1; //@line 23545
     }
    }
   } while (0);
   $30 = $26 + 8 | 0; //@line 23549
   if ($30 >>> 0 < $2 >>> 0) {
    HEAP8[$4 >> 0] = 0; //@line 23552
    HEAP8[$6 >> 0] = 0; //@line 23553
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(52) | 0; //@line 23554
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $8, $10, $10, 1, $12); //@line 23555
    if (!___async) {
     ___async_unwind = 0; //@line 23558
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 359; //@line 23560
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 23562
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 23564
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 23566
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 23568
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 23570
    HEAP8[$ReallocAsyncCtx5 + 24 >> 0] = $12 & 1; //@line 23573
    HEAP8[$ReallocAsyncCtx5 + 25 >> 0] = $$182$off0 & 1; //@line 23576
    HEAP8[$ReallocAsyncCtx5 + 26 >> 0] = $$186$off0 & 1; //@line 23579
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 23581
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $20; //@line 23583
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 23585
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 23587
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $30; //@line 23589
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 23591
    sp = STACKTOP; //@line 23592
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 23595
    $$283$off0 = $$182$off0; //@line 23595
    label = 13; //@line 23596
   }
  } else {
   $$085$off0$reg2mem$0 = $16; //@line 23599
   $$283$off0 = $14; //@line 23599
   label = 13; //@line 23600
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$18 >> 2] = $10; //@line 23606
    $59 = $8 + 40 | 0; //@line 23607
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 23610
    if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$20 >> 2] | 0) == 2) {
      HEAP8[$22 >> 0] = 1; //@line 23618
      if ($$283$off0) {
       label = 18; //@line 23620
       break;
      } else {
       $67 = 4; //@line 23623
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 23630
   } else {
    $67 = 4; //@line 23632
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 23637
 }
 HEAP32[$28 >> 2] = $67; //@line 23639
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $$unpack$i = 0, $$unpack4$i = 0, $10 = 0, $11 = 0, $15 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9806
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9810
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9812
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9816
 $$pre$i = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 9817
 $11 = $2 + 12 | 0; //@line 9818
 HEAP32[$11 >> 2] = $$pre$i; //@line 9819
 $$unpack$i = HEAP32[$6 >> 2] | 0; //@line 9822
 $$unpack4$i = HEAP32[$6 + 4 >> 2] | 0; //@line 9824
 $15 = (HEAP32[$6 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 9826
 $18 = $$pre$i; //@line 9829
 if (!($$unpack4$i & 1)) {
  $31 = $$unpack$i; //@line 9832
 } else {
  $31 = HEAP32[(HEAP32[$15 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9837
 }
 if (!$$pre$i) {
  $35 = $4 + 12 | 0; //@line 9841
  HEAP32[$35 >> 2] = 0; //@line 9842
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 9843
  $36 = FUNCTION_TABLE_iiii[$31 & 31]($15, $10, $4) | 0; //@line 9844
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 125; //@line 9847
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 9848
   HEAP32[$37 >> 2] = $35; //@line 9849
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 9850
   HEAP32[$38 >> 2] = $4; //@line 9851
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 9852
   HEAP32[$39 >> 2] = $11; //@line 9853
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 9854
   HEAP32[$40 >> 2] = $2; //@line 9855
   sp = STACKTOP; //@line 9856
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 9860
  ___async_unwind = 0; //@line 9861
  HEAP32[$ReallocAsyncCtx3 >> 2] = 125; //@line 9862
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 9863
  HEAP32[$37 >> 2] = $35; //@line 9864
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 9865
  HEAP32[$38 >> 2] = $4; //@line 9866
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 9867
  HEAP32[$39 >> 2] = $11; //@line 9868
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 9869
  HEAP32[$40 >> 2] = $2; //@line 9870
  sp = STACKTOP; //@line 9871
  return;
 } else {
  $25 = HEAP32[$18 + 4 >> 2] | 0; //@line 9875
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 9876
  FUNCTION_TABLE_vii[$25 & 7]($4, $2); //@line 9877
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 124; //@line 9880
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 9881
   HEAP32[$26 >> 2] = $11; //@line 9882
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 9883
   HEAP32[$27 >> 2] = $4; //@line 9884
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 9885
   HEAP32[$28 >> 2] = $15; //@line 9886
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 9887
   HEAP32[$29 >> 2] = $10; //@line 9888
   $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 9889
   HEAP32[$30 >> 2] = $31; //@line 9890
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 9891
   HEAP32[$32 >> 2] = $4; //@line 9892
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 9893
   HEAP32[$33 >> 2] = $11; //@line 9894
   $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 9895
   HEAP32[$34 >> 2] = $2; //@line 9896
   sp = STACKTOP; //@line 9897
   return;
  }
  ___async_unwind = 0; //@line 9900
  HEAP32[$ReallocAsyncCtx2 >> 2] = 124; //@line 9901
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 9902
  HEAP32[$26 >> 2] = $11; //@line 9903
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 9904
  HEAP32[$27 >> 2] = $4; //@line 9905
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 9906
  HEAP32[$28 >> 2] = $15; //@line 9907
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 9908
  HEAP32[$29 >> 2] = $10; //@line 9909
  $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 9910
  HEAP32[$30 >> 2] = $31; //@line 9911
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 9912
  HEAP32[$32 >> 2] = $4; //@line 9913
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 9914
  HEAP32[$33 >> 2] = $11; //@line 9915
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 9916
  HEAP32[$34 >> 2] = $2; //@line 9917
  sp = STACKTOP; //@line 9918
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_52($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10782
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10784
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10786
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10788
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10790
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10792
 if (!$AsyncRetVal) {
  $25 = 0 == 0; //@line 10795
  $26 = HEAP32[$2 >> 2] | 0; //@line 10796
  if (!$26) {
   if ($25) {
    $$06 = -3007; //@line 10800
    $31 = ___async_retval; //@line 10801
    HEAP32[$31 >> 2] = $$06; //@line 10802
    return;
   }
   $$06 = 0; //@line 10805
   $31 = ___async_retval; //@line 10806
   HEAP32[$31 >> 2] = $$06; //@line 10807
   return;
  } else {
   $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 10811
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 10812
   FUNCTION_TABLE_vi[$29 & 511]($6); //@line 10813
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 122; //@line 10816
    $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 10817
    $$expand_i1_val = $25 & 1; //@line 10818
    HEAP8[$30 >> 0] = $$expand_i1_val; //@line 10819
    sp = STACKTOP; //@line 10820
    return;
   }
   ___async_unwind = 0; //@line 10823
   HEAP32[$ReallocAsyncCtx6 >> 2] = 122; //@line 10824
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 10825
   $$expand_i1_val = $25 & 1; //@line 10826
   HEAP8[$30 >> 0] = $$expand_i1_val; //@line 10827
   sp = STACKTOP; //@line 10828
   return;
  }
 } else {
  $11 = HEAP32[$2 >> 2] | 0; //@line 10832
  if (!$11) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 10836
   _equeue_event_dtor($AsyncRetVal, 114); //@line 10837
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 10838
   $21 = _equeue_post($4, 115, $AsyncRetVal) | 0; //@line 10839
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 121; //@line 10842
    $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 10843
    HEAP32[$22 >> 2] = $2; //@line 10844
    $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 10845
    HEAP32[$23 >> 2] = $6; //@line 10846
    sp = STACKTOP; //@line 10847
    return;
   }
   HEAP32[___async_retval >> 2] = $21; //@line 10851
   ___async_unwind = 0; //@line 10852
   HEAP32[$ReallocAsyncCtx7 >> 2] = 121; //@line 10853
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 10854
   HEAP32[$22 >> 2] = $2; //@line 10855
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 10856
   HEAP32[$23 >> 2] = $6; //@line 10857
   sp = STACKTOP; //@line 10858
   return;
  } else {
   $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 10862
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 10863
   FUNCTION_TABLE_vii[$14 & 7]($AsyncRetVal, $6); //@line 10864
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 120; //@line 10867
    $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 10868
    HEAP32[$15 >> 2] = $8; //@line 10869
    $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 10870
    HEAP32[$16 >> 2] = $AsyncRetVal; //@line 10871
    $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 10872
    HEAP32[$17 >> 2] = $4; //@line 10873
    $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 10874
    HEAP32[$18 >> 2] = $2; //@line 10875
    $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 10876
    HEAP32[$19 >> 2] = $6; //@line 10877
    sp = STACKTOP; //@line 10878
    return;
   }
   ___async_unwind = 0; //@line 10881
   HEAP32[$ReallocAsyncCtx5 >> 2] = 120; //@line 10882
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 10883
   HEAP32[$15 >> 2] = $8; //@line 10884
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 10885
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 10886
   $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 10887
   HEAP32[$17 >> 2] = $4; //@line 10888
   $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 10889
   HEAP32[$18 >> 2] = $2; //@line 10890
   $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 10891
   HEAP32[$19 >> 2] = $6; //@line 10892
   sp = STACKTOP; //@line 10893
   return;
  }
 }
}
function _sn_coap_builder_options_build_add_multiple_option($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$i = 0, $$012$lcssa$i10 = 0, $$01213$i = 0, $$014$i = 0, $$02441$i = 0, $$02540$i = 0, $$02542$i = 0, $$02641$i = 0, $$028$lcssa$i$ph = 0, $$02839$i = 0, $$03138$i = 0, $$03139$i = 0, $$07$us = 0, $$126$i = 0, $$127$i = 0, $$129$i = 0, $13 = 0, $15 = 0, $27 = 0, $29 = 0, $34 = 0, $39 = 0, $49 = 0, $5 = 0, $50 = 0, $61 = 0, $66 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $or$cond$i3 = 0, $phitmp$i = 0, $wide$trip$count = 0;
 $5 = HEAP32[$1 >> 2] | 0; //@line 5018
 if (!$5) {
  return;
 }
 $7 = HEAP16[$2 >> 1] | 0; //@line 5023
 $9 = ($7 & 65535) + -1 | 0; //@line 5025
 if (($7 & 65535) > 2) {
  $13 = ($3 | 0) == 11 | ($3 | 0) == 8 ? 47 : 38; //@line 5031
  $$01213$i = 0; //@line 5032
  $$014$i = 1; //@line 5032
  $15 = 1; //@line 5032
  do {
   $$01213$i = $$01213$i + (($13 | 0) == (HEAPU8[$5 + $15 >> 0] | 0) & 1) << 24 >> 24; //@line 5039
   $$014$i = $$014$i + 1 << 16 >> 16; //@line 5040
   $15 = $$014$i & 65535; //@line 5041
  } while (($9 | 0) > ($15 | 0));
  $phitmp$i = $$01213$i + 1 << 24 >> 24; //@line 5049
  if (!($phitmp$i << 24 >> 24)) {
   return;
  } else {
   $$012$lcssa$i10 = $phitmp$i; //@line 5054
  }
 } else {
  $$012$lcssa$i10 = 1; //@line 5057
 }
 $or$cond$i3 = ($3 | 0) == 11 | ($3 | 0) == 8; //@line 5062
 $$$i = $or$cond$i3 ? 47 : 38; //@line 5063
 $27 = $or$cond$i3 ? 47 : 38; //@line 5064
 if (!($7 << 16 >> 16)) {
  $$07$us = 0; //@line 5066
  do {
   if (!($$07$us << 24 >> 24)) {
    $29 = HEAP8[$5 >> 0] | 0; //@line 5070
    $34 = ($29 << 24 >> 24 == 0 ? 1 : $29 << 24 >> 24 == $$$i << 24 >> 24) & 1; //@line 5075
   } else {
    $34 = 65535; //@line 5077
   }
   _sn_coap_builder_options_build_add_one_option($0, 0, (HEAP32[$1 >> 2] | 0) + $34 | 0, $3, $4) | 0; //@line 5081
   $$07$us = $$07$us + 1 << 24 >> 24; //@line 5082
  } while (($$07$us & 255) < ($$012$lcssa$i10 & 255));
  return;
 }
 $wide$trip$count = $$012$lcssa$i10 & 255; //@line 5092
 $indvars$iv = 0; //@line 5093
 do {
  $$02441$i = 0; //@line 5095
  $$02540$i = 0; //@line 5095
  $$02839$i = 0; //@line 5095
  $$03138$i = $5; //@line 5095
  while (1) {
   $39 = ($27 | 0) != (HEAPU8[$$03138$i >> 0] | 0); //@line 5099
   if ($$02839$i << 16 >> 16 == 0 | $39) {
    $$126$i = $$02540$i; //@line 5105
    $$129$i = $$02839$i + ($39 & 1) << 16 >> 16; //@line 5105
   } else {
    if (($indvars$iv | 0) == ($$02540$i & 255 | 0)) {
     $$028$lcssa$i$ph = $$02839$i; //@line 5110
     break;
    }
    $$126$i = $$02540$i + 1 << 24 >> 24; //@line 5114
    $$129$i = 0; //@line 5114
   }
   $$02441$i = $$02441$i + 1 << 16 >> 16; //@line 5117
   if (($$02441$i & 65535) >= ($7 & 65535)) {
    $$028$lcssa$i$ph = $$129$i; //@line 5122
    break;
   } else {
    $$02540$i = $$126$i; //@line 5120
    $$02839$i = $$129$i; //@line 5120
    $$03138$i = $$03138$i + 1 | 0; //@line 5120
   }
  }
  L29 : do {
   if (!$indvars$iv) {
    $50 = HEAP8[$5 >> 0] | 0; //@line 5129
    $66 = ($50 << 24 >> 24 == 0 ? 1 : $50 << 24 >> 24 == $$$i << 24 >> 24) & 1; //@line 5134
   } else {
    $49 = $indvars$iv + -1 | 0; //@line 5136
    $$02542$i = 0; //@line 5137
    $$02641$i = 0; //@line 5137
    $$03139$i = $5; //@line 5137
    while (1) {
     if ($$02542$i << 16 >> 16 == 0 ? 1 : (HEAP8[$$03139$i >> 0] | 0) != $$$i << 24 >> 24) {
      $$127$i = $$02641$i; //@line 5144
     } else {
      if (($49 | 0) == ($$02641$i & 255 | 0)) {
       break;
      }
      $$127$i = $$02641$i + 1 << 24 >> 24; //@line 5152
     }
     $61 = $$02542$i + 1 << 16 >> 16; //@line 5154
     if (($61 & 65535) < ($7 & 65535)) {
      $$02542$i = $61; //@line 5158
      $$02641$i = $$127$i; //@line 5158
      $$03139$i = $$03139$i + 1 | 0; //@line 5158
     } else {
      $66 = 65535; //@line 5160
      break L29;
     }
    }
    $66 = ($$02542$i & 65535) + 1 | 0; //@line 5166
   }
  } while (0);
  _sn_coap_builder_options_build_add_one_option($0, $$028$lcssa$i$ph, (HEAP32[$1 >> 2] | 0) + ($66 & 65535) | 0, $3, $4) | 0; //@line 5172
  $indvars$iv = $indvars$iv + 1 | 0; //@line 5173
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 2630
 $3 = HEAP32[$2 >> 2] | 0; //@line 2631
 $4 = $0 + 100 | 0; //@line 2632
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 2637
  $11 = HEAPU8[$3 >> 0] | 0; //@line 2640
 } else {
  $11 = ___shgetc($0) | 0; //@line 2643
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 2648
   $14 = HEAP32[$2 >> 2] | 0; //@line 2649
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 2654
    $22 = HEAPU8[$14 >> 0] | 0; //@line 2657
   } else {
    $22 = ___shgetc($0) | 0; //@line 2660
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 2670
     $$049 = $22; //@line 2670
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 2674
     $$0 = $13; //@line 2675
     $$049 = $22; //@line 2675
    }
   } else {
    $$0 = $13; //@line 2678
    $$049 = $22; //@line 2678
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 2683
   $$049 = $11; //@line 2683
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 2692
   $101 = 0; //@line 2692
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 2696
   $100 = -2147483648; //@line 2697
   $101 = 0; //@line 2697
  }
 } else {
  $$04860 = 0; //@line 2700
  $$159 = $$049; //@line 2700
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 2704
   $38 = HEAP32[$2 >> 2] | 0; //@line 2705
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 2710
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 2713
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 2716
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 2723
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 2729
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 2733
   $55 = $$04860; //@line 2733
   $56 = $50; //@line 2733
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 2735
    $58 = tempRet0; //@line 2736
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 2739
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 2741
    $64 = tempRet0; //@line 2742
    $65 = HEAP32[$2 >> 2] | 0; //@line 2743
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 2748
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 2751
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 2754
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 2765
     $55 = $63; //@line 2765
     $56 = $64; //@line 2765
    } else {
     $$2$lcssa = $$2$be; //@line 2767
     $94 = $63; //@line 2767
     $95 = $64; //@line 2767
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 2772
   $94 = $$04860; //@line 2772
   $95 = $50; //@line 2772
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 2778
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 2783
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 2786
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 2789
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 2803
  }
  $93 = ($$0 | 0) != 0; //@line 2805
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 2806
  $100 = $93 ? tempRet0 : $95; //@line 2810
  $101 = $93 ? $96 : $94; //@line 2810
 }
 tempRet0 = $100; //@line 2812
 return $101 | 0; //@line 2813
}
function _ip6tos($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$049$be78 = 0, $$04962 = 0, $$05075 = 0, $$05274 = 0, $$05573 = 0, $$05872 = 0, $$1 = 0, $$151$lcssa = 0, $$15165 = 0, $$15364 = 0, $$2 = 0, $$254 = 0, $$257 = 0, $$260 = 0, $$3 = 0, $$461 = 0, $$lcssa = 0, $$shrunk = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $42 = 0, $45 = 0, $57 = 0, $59 = 0, $9 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9222
 STACKTOP = STACKTOP + 16 | 0; //@line 9223
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9223
 $vararg_buffer = sp; //@line 9224
 $$05075 = 0; //@line 9225
 $$05274 = $0; //@line 9225
 $$05573 = 1; //@line 9225
 $$05872 = -1; //@line 9225
 $15 = 0; //@line 9225
 while (1) {
  $9 = $$05274 + 2 | 0; //@line 9231
  if (!((HEAPU8[$$05274 >> 0] | 0) << 8 | (HEAPU8[$$05274 + 1 >> 0] | 0))) {
   $14 = $15 + 1 | 0; //@line 9237
   $16 = $14 & 255; //@line 9238
   $17 = $14 & 255; //@line 9239
   L5 : do {
    if (($16 & 255) < 8) {
     $$15165 = $16; //@line 9243
     $$15364 = $9; //@line 9243
     $indvars$iv = $17; //@line 9243
     while (1) {
      $23 = $$15364 + 2 | 0; //@line 9249
      if ((HEAPU8[$$15364 >> 0] | 0) << 8 | (HEAPU8[$$15364 + 1 >> 0] | 0) | 0) {
       $$151$lcssa = $indvars$iv & 255; //@line 9256
       $$254 = $23; //@line 9256
       $$lcssa = $indvars$iv; //@line 9256
       break L5;
      }
      $indvars$iv$next = $indvars$iv + 1 | 0; //@line 9259
      $29 = $$15165 + 1 << 24 >> 24; //@line 9260
      if ($indvars$iv$next >>> 0 < 8) {
       $$15165 = $29; //@line 9263
       $$15364 = $23; //@line 9263
       $indvars$iv = $indvars$iv$next; //@line 9263
      } else {
       $$151$lcssa = $29; //@line 9265
       $$254 = $23; //@line 9265
       $$lcssa = $indvars$iv$next; //@line 9265
       break;
      }
     }
    } else {
     $$151$lcssa = $16; //@line 9270
     $$254 = $9; //@line 9270
     $$lcssa = $17; //@line 9270
    }
   } while (0);
   $31 = $$lcssa - $15 | 0; //@line 9273
   $33 = ($31 | 0) > ($$05573 & 255 | 0); //@line 9275
   $$2 = $$151$lcssa; //@line 9279
   $$257 = $33 ? $31 & 255 : $$05573; //@line 9279
   $$260 = $33 ? $$05075 : $$05872; //@line 9279
   $$3 = $$254; //@line 9279
  } else {
   $$2 = $$05075; //@line 9281
   $$257 = $$05573; //@line 9281
   $$260 = $$05872; //@line 9281
   $$3 = $9; //@line 9281
  }
  $35 = $$2 + 1 << 24 >> 24; //@line 9283
  if (($35 & 255) < 8) {
   $$05075 = $35; //@line 9287
   $$05274 = $$3; //@line 9287
   $$05573 = $$257; //@line 9287
   $$05872 = $$260; //@line 9287
   $15 = $35 & 255; //@line 9287
  } else {
   break;
  }
 }
 $2 = $$257 & 255; //@line 9292
 $3 = $2 << 1; //@line 9293
 $4 = $$260 << 24 >> 24 == 0; //@line 9294
 $$04962 = $1; //@line 9295
 $$461 = $0; //@line 9295
 $$shrunk = 0; //@line 9295
 while (1) {
  $42 = $$shrunk & 255; //@line 9297
  if ($$shrunk << 24 >> 24 != $$260 << 24 >> 24) {
   $57 = $$shrunk + 1 << 24 >> 24; //@line 9307
   HEAP32[$vararg_buffer >> 2] = (HEAPU8[$$461 >> 0] | 0) << 8 | (HEAPU8[$$461 + 1 >> 0] | 0); //@line 9308
   $59 = $$04962 + (_sprintf($$04962, 5750, $vararg_buffer) | 0) | 0; //@line 9310
   if ($57 << 24 >> 24 == 8) {
    $$049$be78 = $59; //@line 9313
    label = 9; //@line 9314
    break;
   }
   HEAP8[$59 >> 0] = 58; //@line 9319
   $$04962 = $59 + 1 | 0; //@line 9320
   $$461 = $$461 + 2 | 0; //@line 9320
   $$shrunk = $57; //@line 9320
   continue;
  }
  if ($4) {
   HEAP8[$$04962 >> 0] = 58; //@line 9325
   $$1 = $$04962 + 1 | 0; //@line 9326
  } else {
   $$1 = $$04962; //@line 9328
  }
  $45 = $$1 + 1 | 0; //@line 9330
  HEAP8[$$1 >> 0] = 58; //@line 9331
  $$shrunk = $42 + $2 & 255; //@line 9334
  if (($$shrunk & 255) >= 8) {
   $$049$be78 = $45; //@line 9339
   label = 9; //@line 9340
   break;
  } else {
   $$04962 = $45; //@line 9337
   $$461 = $$461 + $3 | 0; //@line 9337
  }
 }
 if ((label | 0) == 9) {
  HEAP8[$$049$be78 >> 0] = 0; //@line 9345
  STACKTOP = sp; //@line 9350
  return $$049$be78 - $1 & 255 | 0; //@line 9350
 }
 return 0; //@line 9352
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_125($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23319
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23321
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23323
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23325
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23327
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 23330
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23332
 $15 = $12 + 24 | 0; //@line 23335
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 23340
   if (!($18 & 2)) {
    $21 = $4 + 36 | 0; //@line 23344
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $4 + 54 | 0; //@line 23351
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 23362
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 23363
      if (!___async) {
       ___async_unwind = 0; //@line 23366
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 363; //@line 23368
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 23370
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 23372
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 23374
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 23376
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $4; //@line 23378
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 23380
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 23382
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 23385
      sp = STACKTOP; //@line 23386
      return;
     }
     $36 = $4 + 24 | 0; //@line 23389
     $37 = $4 + 54 | 0; //@line 23390
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 23405
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 23406
     if (!___async) {
      ___async_unwind = 0; //@line 23409
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 362; //@line 23411
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 23413
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 23415
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 23417
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 23419
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 23421
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 23423
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 23425
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 23427
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 23430
     sp = STACKTOP; //@line 23431
     return;
    }
   }
   $24 = $4 + 54 | 0; //@line 23435
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 23439
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 23440
    if (!___async) {
     ___async_unwind = 0; //@line 23443
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 361; //@line 23445
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 23447
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 23449
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 23451
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 23453
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 23455
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 23457
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 23460
    sp = STACKTOP; //@line 23461
    return;
   }
  }
 } while (0);
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $$pr = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $54 = 0, $59 = 0, $61 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13584
 if (!$2) {
  return;
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, HEAP32[$1 >> 2] | 0, 0) | 0)) {
  return;
 }
 $7 = HEAP32[2506] | 0; //@line 13595
 if (!$7) {
  $$2 = 0; //@line 13598
 } else {
  $10 = $7 + 32 | 0; //@line 13601
  $12 = HEAP32[$10 >> 2] | 0; //@line 13603
  $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 13606
  $16 = HEAP32[2507] | 0; //@line 13607
  if (!$16) {
   $$2 = 1; //@line 13610
  } else {
   $59 = $16 + 32 | 0; //@line 13613
   $61 = HEAP32[$59 >> 2] | 0; //@line 13615
   $64 = HEAP32[$59 + 4 >> 2] | 0; //@line 13618
   $69 = $64 >>> 0 > $15 >>> 0 | ($64 | 0) == ($15 | 0) & $61 >>> 0 > $12 >>> 0; //@line 13623
   $70 = HEAP32[2508] | 0; //@line 13624
   if (!$70) {
    $$2 = 2; //@line 13627
   } else {
    $73 = $69 ? $15 : $64; //@line 13632
    $75 = $70 + 32 | 0; //@line 13634
    $80 = HEAP32[$75 + 4 >> 2] | 0; //@line 13639
    $$2 = $80 >>> 0 > $73 >>> 0 | (($80 | 0) == ($73 | 0) ? (HEAP32[$75 >> 2] | 0) >>> 0 > ($69 ? $12 : $61) >>> 0 : 0) ? ($69 ^ 1) & 1 : 2; //@line 13646
   }
  }
 }
 $18 = 10024 + ($$2 << 2) | 0; //@line 13650
 $19 = HEAP32[$18 >> 2] | 0; //@line 13651
 do {
  if (!$19) {
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 13655
   $21 = __ZnwjRKSt9nothrow_t(40, 12017) | 0; //@line 13656
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 161; //@line 13659
    HEAP32[$AsyncCtx + 4 >> 2] = $18; //@line 13661
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 13663
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 13665
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 13667
    sp = STACKTOP; //@line 13668
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13671
    HEAP32[$18 >> 2] = $21; //@line 13672
    $30 = $21; //@line 13673
    $31 = $21; //@line 13673
    break;
   }
  } else {
   $27 = HEAP32[$19 + 20 >> 2] | 0; //@line 13678
   if (!$27) {
    $$pr = $19; //@line 13681
   } else {
    __ZdlPv($27); //@line 13683
    $$pr = HEAP32[$18 >> 2] | 0; //@line 13685
   }
   $30 = $$pr; //@line 13687
   $31 = $$pr; //@line 13687
  }
 } while (0);
 if (!$30) {
  return;
 }
 HEAP32[$31 >> 2] = HEAP32[$1 >> 2]; //@line 13694
 HEAP32[$31 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13694
 HEAP32[$31 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 13694
 HEAP32[$31 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 13694
 HEAP32[$31 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 13694
 $33 = (_strlen($0) | 0) + 1 | 0; //@line 13696
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13697
 $34 = __ZnajRKSt9nothrow_t($33, 12017) | 0; //@line 13698
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 162; //@line 13701
  HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 13703
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 13705
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 13707
  HEAP32[$AsyncCtx3 + 16 >> 2] = $18; //@line 13709
  sp = STACKTOP; //@line 13710
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13713
 HEAP32[$30 + 20 >> 2] = $34; //@line 13715
 _strcpy($34, $0) | 0; //@line 13716
 $40 = _emscripten_asm_const_i(8) | 0; //@line 13717
 $42 = (($40 | 0) < 0) << 31 >> 31; //@line 13719
 $43 = ___muldi3($2 | 0, 0, 1e3, 0) | 0; //@line 13720
 $45 = _i64Add($43 | 0, tempRet0 | 0, $40 | 0, $42 | 0) | 0; //@line 13722
 $47 = HEAP32[$18 >> 2] | 0; //@line 13724
 $49 = $47 + 24 | 0; //@line 13726
 HEAP32[$49 >> 2] = $45; //@line 13728
 HEAP32[$49 + 4 >> 2] = tempRet0; //@line 13731
 $54 = $47 + 32 | 0; //@line 13733
 HEAP32[$54 >> 2] = $40; //@line 13735
 HEAP32[$54 + 4 >> 2] = $42; //@line 13738
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27394
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27398
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27400
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27402
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27404
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27406
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27408
 $15 = $4 + 12 | 0; //@line 27410
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27411
 $16 = $6 + 12 | 0; //@line 27412
 $17 = HEAP32[$16 >> 2] | 0; //@line 27413
 if (!$17) {
  $28 = $8 + 12 | 0; //@line 27416
  HEAP32[$28 >> 2] = 0; //@line 27417
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 27418
  $29 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($10, $12, $4, 0, $8, $14) | 0; //@line 27419
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 166; //@line 27422
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 27423
   HEAP32[$30 >> 2] = $28; //@line 27424
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 27425
   HEAP32[$31 >> 2] = $15; //@line 27426
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 27427
   HEAP32[$32 >> 2] = $8; //@line 27428
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 27429
   HEAP32[$33 >> 2] = $4; //@line 27430
   sp = STACKTOP; //@line 27431
   return;
  }
  HEAP32[___async_retval >> 2] = $29; //@line 27435
  ___async_unwind = 0; //@line 27436
  HEAP32[$ReallocAsyncCtx5 >> 2] = 166; //@line 27437
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 27438
  HEAP32[$30 >> 2] = $28; //@line 27439
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 27440
  HEAP32[$31 >> 2] = $15; //@line 27441
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 27442
  HEAP32[$32 >> 2] = $8; //@line 27443
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 27444
  HEAP32[$33 >> 2] = $4; //@line 27445
  sp = STACKTOP; //@line 27446
  return;
 } else {
  $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 27450
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 27451
  FUNCTION_TABLE_vii[$20 & 7]($8, $6); //@line 27452
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 165; //@line 27455
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 27456
   HEAP32[$21 >> 2] = $16; //@line 27457
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 27458
   HEAP32[$22 >> 2] = $8; //@line 27459
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 27460
   HEAP32[$23 >> 2] = $10; //@line 27461
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 27462
   HEAP32[$24 >> 2] = $12; //@line 27463
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 27464
   HEAP32[$25 >> 2] = $4; //@line 27465
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 27466
   HEAP32[$26 >> 2] = $14; //@line 27467
   $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 27468
   HEAP32[$27 >> 2] = $15; //@line 27469
   sp = STACKTOP; //@line 27470
   return;
  }
  ___async_unwind = 0; //@line 27473
  HEAP32[$ReallocAsyncCtx2 >> 2] = 165; //@line 27474
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 27475
  HEAP32[$21 >> 2] = $16; //@line 27476
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 27477
  HEAP32[$22 >> 2] = $8; //@line 27478
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 27479
  HEAP32[$23 >> 2] = $10; //@line 27480
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 27481
  HEAP32[$24 >> 2] = $12; //@line 27482
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 27483
  HEAP32[$25 >> 2] = $4; //@line 27484
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 27485
  HEAP32[$26 >> 2] = $14; //@line 27486
  $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 27487
  HEAP32[$27 >> 2] = $15; //@line 27488
  sp = STACKTOP; //@line 27489
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8429
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 8434
 } else {
  $9 = $1 + 52 | 0; //@line 8436
  $10 = HEAP8[$9 >> 0] | 0; //@line 8437
  $11 = $1 + 53 | 0; //@line 8438
  $12 = HEAP8[$11 >> 0] | 0; //@line 8439
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 8442
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 8443
  HEAP8[$9 >> 0] = 0; //@line 8444
  HEAP8[$11 >> 0] = 0; //@line 8445
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 8446
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 8447
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 357; //@line 8450
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 8452
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 8454
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 8456
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 8458
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 8460
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 8462
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 8464
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 8466
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 8468
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 8470
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 8473
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 8475
   sp = STACKTOP; //@line 8476
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8479
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 8484
    $32 = $0 + 8 | 0; //@line 8485
    $33 = $1 + 54 | 0; //@line 8486
    $$0 = $0 + 24 | 0; //@line 8487
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 8520
     HEAP8[$11 >> 0] = 0; //@line 8521
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 8522
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 8523
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 8528
     $62 = $$0 + 8 | 0; //@line 8529
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 8532
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 358; //@line 8537
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 8539
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 8541
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 8543
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 8545
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 8547
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 8549
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 8551
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 8553
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 8555
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 8557
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 8559
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 8561
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 8563
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 8566
    sp = STACKTOP; //@line 8567
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 8571
  HEAP8[$11 >> 0] = $12; //@line 8572
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 4504
      $10 = HEAP32[$9 >> 2] | 0; //@line 4505
      HEAP32[$2 >> 2] = $9 + 4; //@line 4507
      HEAP32[$0 >> 2] = $10; //@line 4508
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 4524
      $17 = HEAP32[$16 >> 2] | 0; //@line 4525
      HEAP32[$2 >> 2] = $16 + 4; //@line 4527
      $20 = $0; //@line 4530
      HEAP32[$20 >> 2] = $17; //@line 4532
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 4535
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 4551
      $30 = HEAP32[$29 >> 2] | 0; //@line 4552
      HEAP32[$2 >> 2] = $29 + 4; //@line 4554
      $31 = $0; //@line 4555
      HEAP32[$31 >> 2] = $30; //@line 4557
      HEAP32[$31 + 4 >> 2] = 0; //@line 4560
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 4576
      $41 = $40; //@line 4577
      $43 = HEAP32[$41 >> 2] | 0; //@line 4579
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 4582
      HEAP32[$2 >> 2] = $40 + 8; //@line 4584
      $47 = $0; //@line 4585
      HEAP32[$47 >> 2] = $43; //@line 4587
      HEAP32[$47 + 4 >> 2] = $46; //@line 4590
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 4606
      $57 = HEAP32[$56 >> 2] | 0; //@line 4607
      HEAP32[$2 >> 2] = $56 + 4; //@line 4609
      $59 = ($57 & 65535) << 16 >> 16; //@line 4611
      $62 = $0; //@line 4614
      HEAP32[$62 >> 2] = $59; //@line 4616
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 4619
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 4635
      $72 = HEAP32[$71 >> 2] | 0; //@line 4636
      HEAP32[$2 >> 2] = $71 + 4; //@line 4638
      $73 = $0; //@line 4640
      HEAP32[$73 >> 2] = $72 & 65535; //@line 4642
      HEAP32[$73 + 4 >> 2] = 0; //@line 4645
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 4661
      $83 = HEAP32[$82 >> 2] | 0; //@line 4662
      HEAP32[$2 >> 2] = $82 + 4; //@line 4664
      $85 = ($83 & 255) << 24 >> 24; //@line 4666
      $88 = $0; //@line 4669
      HEAP32[$88 >> 2] = $85; //@line 4671
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 4674
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 4690
      $98 = HEAP32[$97 >> 2] | 0; //@line 4691
      HEAP32[$2 >> 2] = $97 + 4; //@line 4693
      $99 = $0; //@line 4695
      HEAP32[$99 >> 2] = $98 & 255; //@line 4697
      HEAP32[$99 + 4 >> 2] = 0; //@line 4700
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 4716
      $109 = +HEAPF64[$108 >> 3]; //@line 4717
      HEAP32[$2 >> 2] = $108 + 8; //@line 4719
      HEAPF64[$0 >> 3] = $109; //@line 4720
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 4736
      $116 = +HEAPF64[$115 >> 3]; //@line 4737
      HEAP32[$2 >> 2] = $115 + 8; //@line 4739
      HEAPF64[$0 >> 3] = $116; //@line 4740
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_205($0) {
 $0 = $0 | 0;
 var $$051 = 0, $$byval_copy11 = 0, $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28983
 STACKTOP = STACKTOP + 32 | 0; //@line 28984
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 28984
 $$byval_copy11 = sp; //@line 28985
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28987
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28991
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28993
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28995
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28997
 if (!$AsyncRetVal) {
  $28 = 0; //@line 29000
 } else {
  $13 = $AsyncRetVal + (HEAP32[$0 + 8 >> 2] << 6) | 0; //@line 29002
  $14 = $AsyncRetVal; //@line 29003
  do {
   HEAP32[$2 >> 2] = 0; //@line 29005
   HEAP32[$2 + 4 >> 2] = 0; //@line 29005
   HEAP32[$2 + 8 >> 2] = 0; //@line 29005
   HEAP32[$2 + 12 >> 2] = 0; //@line 29005
   HEAP32[$2 + 16 >> 2] = 0; //@line 29005
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$2 >> 2]; //@line 29006
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 29006
   HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 29006
   HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 29006
   HEAP32[$$byval_copy11 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 29006
   __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy11, 0); //@line 29007
   $14 = $14 + 64 | 0; //@line 29008
  } while (($14 | 0) != ($13 | 0));
  $28 = $AsyncRetVal; //@line 29011
 }
 $$pre = $8 + 64 | 0; //@line 29020
 if (HEAP8[$6 >> 0] | 0) {
  $$051 = 0; //@line 29022
  do {
   $29 = $28 + ($$051 << 6) | 0; //@line 29024
   $31 = (HEAP32[$$pre >> 2] | 0) + ($$051 * 20 | 0) | 0; //@line 29026
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$31 >> 2]; //@line 29027
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 29027
   HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$31 + 8 >> 2]; //@line 29027
   HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$31 + 12 >> 2]; //@line 29027
   HEAP32[$$byval_copy11 + 16 >> 2] = HEAP32[$31 + 16 >> 2]; //@line 29027
   __ZN13SocketAddress8set_addrE10nsapi_addr($29, $$byval_copy11); //@line 29028
   $$051 = $$051 + 1 | 0; //@line 29029
  } while (($$051 | 0) < (HEAPU8[$6 >> 0] | 0));
 }
 $20 = HEAP32[$8 + 12 >> 2] | 0; //@line 29041
 $21 = HEAP32[$$pre >> 2] | 0; //@line 29042
 $23 = HEAP32[$8 + 68 >> 2] | 0; //@line 29044
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 29045
 __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($20, $21, $23); //@line 29046
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 29049
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 29050
  HEAP32[$24 >> 2] = $8; //@line 29051
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 29052
  HEAP32[$25 >> 2] = $6; //@line 29053
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 29054
  HEAP32[$26 >> 2] = $10; //@line 29055
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 29056
  HEAP32[$27 >> 2] = $28; //@line 29057
  sp = STACKTOP; //@line 29058
  STACKTOP = sp; //@line 29059
  return;
 }
 ___async_unwind = 0; //@line 29061
 HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 29062
 $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 29063
 HEAP32[$24 >> 2] = $8; //@line 29064
 $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 29065
 HEAP32[$25 >> 2] = $6; //@line 29066
 $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 29067
 HEAP32[$26 >> 2] = $10; //@line 29068
 $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 29069
 HEAP32[$27 >> 2] = $28; //@line 29070
 sp = STACKTOP; //@line 29071
 STACKTOP = sp; //@line 29072
 return;
}
function __ZN9UDPSocket6sendtoEPKctPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12067
 STACKTOP = STACKTOP + 112 | 0; //@line 12068
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 12068
 $$byval_copy = sp + 88 | 0; //@line 12069
 $5 = sp + 24 | 0; //@line 12070
 $6 = sp; //@line 12071
 HEAP32[$6 >> 2] = 0; //@line 12072
 HEAP32[$6 + 4 >> 2] = 0; //@line 12072
 HEAP32[$6 + 8 >> 2] = 0; //@line 12072
 HEAP32[$6 + 12 >> 2] = 0; //@line 12072
 HEAP32[$6 + 16 >> 2] = 0; //@line 12072
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 12073
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 12073
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 12073
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 12073
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 12073
 __ZN13SocketAddressC2E10nsapi_addrt($5, $$byval_copy, 0); //@line 12074
 $7 = $0 + 4 | 0; //@line 12075
 $8 = HEAP32[$7 >> 2] | 0; //@line 12076
 $10 = HEAP32[HEAP32[$8 >> 2] >> 2] | 0; //@line 12078
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 12079
 $11 = FUNCTION_TABLE_iiiii[$10 & 15]($8, $1, $5, 0) | 0; //@line 12080
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 150; //@line 12083
  HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 12085
  HEAP16[$AsyncCtx + 8 >> 1] = $2; //@line 12087
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 12089
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 12091
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 12093
  HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 12095
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 12097
  sp = STACKTOP; //@line 12098
  STACKTOP = sp; //@line 12099
  return 0; //@line 12099
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12101
 if ($11 | 0) {
  $$0 = -3009; //@line 12104
  STACKTOP = sp; //@line 12105
  return $$0 | 0; //@line 12105
 }
 __ZN13SocketAddress8set_portEt($5, $2); //@line 12107
 $20 = $0 + 8 | 0; //@line 12108
 $21 = $0 + 52 | 0; //@line 12109
 $22 = $0 + 12 | 0; //@line 12110
 while (1) {
  $23 = HEAP32[$20 >> 2] | 0; //@line 12112
  if (!$23) {
   $$0 = -3005; //@line 12115
   label = 9; //@line 12116
   break;
  }
  HEAP32[$21 >> 2] = 0; //@line 12119
  $25 = HEAP32[$7 >> 2] | 0; //@line 12120
  $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 76 >> 2] | 0; //@line 12123
  $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12124
  $29 = FUNCTION_TABLE_iiiiii[$28 & 7]($25, $23, $5, $3, $4) | 0; //@line 12125
  if (___async) {
   label = 7; //@line 12128
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12131
  if (($29 | 0) != -3001 | (HEAP32[$22 >> 2] | 0) == 0) {
   $$0 = $29; //@line 12137
   label = 9; //@line 12138
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx3 >> 2] = 151; //@line 12143
  HEAP32[$AsyncCtx3 + 4 >> 2] = $22; //@line 12145
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 12147
  HEAP32[$AsyncCtx3 + 12 >> 2] = $20; //@line 12149
  HEAP32[$AsyncCtx3 + 16 >> 2] = $21; //@line 12151
  HEAP32[$AsyncCtx3 + 20 >> 2] = $7; //@line 12153
  HEAP32[$AsyncCtx3 + 24 >> 2] = $5; //@line 12155
  HEAP32[$AsyncCtx3 + 28 >> 2] = $3; //@line 12157
  HEAP32[$AsyncCtx3 + 32 >> 2] = $4; //@line 12159
  sp = STACKTOP; //@line 12160
  STACKTOP = sp; //@line 12161
  return 0; //@line 12161
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 12164
  return $$0 | 0; //@line 12164
 }
 return 0; //@line 12166
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_112($0) {
 $0 = $0 | 0;
 var $$pre74 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 18067
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18069
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18071
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18073
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18075
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18077
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18079
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18081
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18083
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18085
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18087
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18089
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18091
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18093
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18095
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18097
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18099
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18101
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18103
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18105
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 18107
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 18109
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 18111
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 18115
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 18117
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 18119
 $$pre74 = HEAP32[$48 >> 2] | 0; //@line 18121
 HEAP32[$14 >> 2] = HEAP32[HEAP32[$0 + 92 >> 2] >> 2]; //@line 18122
 $53 = HEAP32[$$pre74 >> 2] | 0; //@line 18123
 HEAP32[$16 >> 2] = 0; //@line 18124
 HEAP32[$18 >> 2] = 192; //@line 18125
 HEAP32[$20 >> 2] = $53; //@line 18126
 HEAP32[$12 >> 2] = 724; //@line 18127
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 18128
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 18129
 if (!___async) {
  ___async_unwind = 0; //@line 18132
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 193; //@line 18134
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 18136
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 18138
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $6; //@line 18140
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $8; //@line 18142
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $10; //@line 18144
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $12; //@line 18146
 HEAP32[$ReallocAsyncCtx13 + 28 >> 2] = $14; //@line 18148
 HEAP32[$ReallocAsyncCtx13 + 32 >> 2] = $16; //@line 18150
 HEAP32[$ReallocAsyncCtx13 + 36 >> 2] = $18; //@line 18152
 HEAP32[$ReallocAsyncCtx13 + 40 >> 2] = $20; //@line 18154
 HEAP32[$ReallocAsyncCtx13 + 44 >> 2] = $22; //@line 18156
 HEAP32[$ReallocAsyncCtx13 + 48 >> 2] = $24; //@line 18158
 HEAP32[$ReallocAsyncCtx13 + 52 >> 2] = $26; //@line 18160
 HEAP32[$ReallocAsyncCtx13 + 56 >> 2] = $28; //@line 18162
 HEAP32[$ReallocAsyncCtx13 + 60 >> 2] = $30; //@line 18164
 HEAP32[$ReallocAsyncCtx13 + 64 >> 2] = $32; //@line 18166
 HEAP32[$ReallocAsyncCtx13 + 68 >> 2] = $34; //@line 18168
 HEAP32[$ReallocAsyncCtx13 + 72 >> 2] = $36; //@line 18170
 HEAP32[$ReallocAsyncCtx13 + 76 >> 2] = $38; //@line 18172
 HEAP32[$ReallocAsyncCtx13 + 80 >> 2] = $40; //@line 18174
 HEAP32[$ReallocAsyncCtx13 + 84 >> 2] = $42; //@line 18176
 HEAP32[$ReallocAsyncCtx13 + 88 >> 2] = $44; //@line 18178
 HEAP32[$ReallocAsyncCtx13 + 92 >> 2] = $50; //@line 18180
 HEAP32[$ReallocAsyncCtx13 + 96 >> 2] = $52; //@line 18182
 HEAP32[$ReallocAsyncCtx13 + 100 >> 2] = $48; //@line 18184
 sp = STACKTOP; //@line 18185
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 16184
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16186
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16188
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16190
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16192
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16194
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16196
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16198
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16200
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16202
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16204
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16206
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16208
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16210
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16214
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16216
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16218
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16220
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16222
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16224
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16226
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 16228
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16230
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16232
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16234
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 16236
 $$pre = HEAP32[$12 >> 2] | 0; //@line 16238
 HEAP32[$42 >> 2] = HEAP32[HEAP32[$0 + 56 >> 2] >> 2]; //@line 16239
 $53 = HEAP32[$$pre >> 2] | 0; //@line 16240
 HEAP32[$44 >> 2] = 0; //@line 16241
 HEAP32[$46 >> 2] = 187; //@line 16242
 HEAP32[$48 >> 2] = $53; //@line 16243
 HEAP32[$8 >> 2] = 724; //@line 16244
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 16245
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($50, 0, $52) | 0; //@line 16246
 if (!___async) {
  ___async_unwind = 0; //@line 16249
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 16251
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 16253
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 16255
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $6; //@line 16257
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $8; //@line 16259
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 16261
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $14; //@line 16263
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $16; //@line 16265
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $18; //@line 16267
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $20; //@line 16269
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $22; //@line 16271
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $24; //@line 16273
 HEAP32[$ReallocAsyncCtx14 + 48 >> 2] = $26; //@line 16275
 HEAP32[$ReallocAsyncCtx14 + 52 >> 2] = $30; //@line 16277
 HEAP32[$ReallocAsyncCtx14 + 56 >> 2] = $32; //@line 16279
 HEAP32[$ReallocAsyncCtx14 + 60 >> 2] = $34; //@line 16281
 HEAP32[$ReallocAsyncCtx14 + 64 >> 2] = $40; //@line 16283
 HEAP32[$ReallocAsyncCtx14 + 68 >> 2] = $42; //@line 16285
 HEAP32[$ReallocAsyncCtx14 + 72 >> 2] = $44; //@line 16287
 HEAP32[$ReallocAsyncCtx14 + 76 >> 2] = $46; //@line 16289
 HEAP32[$ReallocAsyncCtx14 + 80 >> 2] = $48; //@line 16291
 HEAP32[$ReallocAsyncCtx14 + 84 >> 2] = $50; //@line 16293
 HEAP32[$ReallocAsyncCtx14 + 88 >> 2] = $52; //@line 16295
 HEAP32[$ReallocAsyncCtx14 + 92 >> 2] = $12; //@line 16297
 HEAP32[$ReallocAsyncCtx14 + 96 >> 2] = $36; //@line 16299
 HEAP32[$ReallocAsyncCtx14 + 100 >> 2] = $38; //@line 16301
 sp = STACKTOP; //@line 16302
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3404
 STACKTOP = STACKTOP + 224 | 0; //@line 3405
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 3405
 $3 = sp + 120 | 0; //@line 3406
 $4 = sp + 80 | 0; //@line 3407
 $5 = sp; //@line 3408
 $6 = sp + 136 | 0; //@line 3409
 dest = $4; //@line 3410
 stop = dest + 40 | 0; //@line 3410
 do {
  HEAP32[dest >> 2] = 0; //@line 3410
  dest = dest + 4 | 0; //@line 3410
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 3412
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 3416
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 3423
  } else {
   $43 = 0; //@line 3425
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 3427
  $14 = $13 & 32; //@line 3428
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 3434
  }
  $19 = $0 + 48 | 0; //@line 3436
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 3441
    $24 = HEAP32[$23 >> 2] | 0; //@line 3442
    HEAP32[$23 >> 2] = $6; //@line 3443
    $25 = $0 + 28 | 0; //@line 3444
    HEAP32[$25 >> 2] = $6; //@line 3445
    $26 = $0 + 20 | 0; //@line 3446
    HEAP32[$26 >> 2] = $6; //@line 3447
    HEAP32[$19 >> 2] = 80; //@line 3448
    $28 = $0 + 16 | 0; //@line 3450
    HEAP32[$28 >> 2] = $6 + 80; //@line 3451
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 3452
    if (!$24) {
     $$1 = $29; //@line 3455
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 3458
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 3459
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 3460
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 330; //@line 3463
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 3465
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 3467
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 3469
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 3471
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 3473
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 3475
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 3477
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 3479
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 3481
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 3483
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 3485
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 3487
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 3489
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 3491
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 3493
      sp = STACKTOP; //@line 3494
      STACKTOP = sp; //@line 3495
      return 0; //@line 3495
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3497
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 3500
      HEAP32[$23 >> 2] = $24; //@line 3501
      HEAP32[$19 >> 2] = 0; //@line 3502
      HEAP32[$28 >> 2] = 0; //@line 3503
      HEAP32[$25 >> 2] = 0; //@line 3504
      HEAP32[$26 >> 2] = 0; //@line 3505
      $$1 = $$; //@line 3506
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 3512
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 3515
  HEAP32[$0 >> 2] = $51 | $14; //@line 3520
  if ($43 | 0) {
   ___unlockfile($0); //@line 3523
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 3525
 }
 STACKTOP = sp; //@line 3527
 return $$0 | 0; //@line 3527
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_214($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31399
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31401
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31403
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31405
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31407
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31409
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31414
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31416
 if (HEAP8[$0 + 24 >> 0] & 1) {
  HEAP8[10976] = 1; //@line 31418
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 31419
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 31420
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 31423
   $33 = $ReallocAsyncCtx13 + 4 | 0; //@line 31424
   HEAP32[$33 >> 2] = $16; //@line 31425
   $34 = $ReallocAsyncCtx13 + 8 | 0; //@line 31426
   HEAP32[$34 >> 2] = $2; //@line 31427
   sp = STACKTOP; //@line 31428
   return;
  }
  ___async_unwind = 0; //@line 31431
  HEAP32[$ReallocAsyncCtx13 >> 2] = 183; //@line 31432
  $33 = $ReallocAsyncCtx13 + 4 | 0; //@line 31433
  HEAP32[$33 >> 2] = $16; //@line 31434
  $34 = $ReallocAsyncCtx13 + 8 | 0; //@line 31435
  HEAP32[$34 >> 2] = $2; //@line 31436
  sp = STACKTOP; //@line 31437
  return;
 }
 $17 = HEAP32[$14 >> 2] | 0; //@line 31440
 if ($17 | 0) {
  __ZdlPv($17); //@line 31443
 }
 $19 = HEAP32[$10 >> 2] | 0; //@line 31445
 if ($19 | 0) {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 31449
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 31450
  FUNCTION_TABLE_vi[$22 & 511]($6); //@line 31451
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 31454
   $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 31455
   HEAP32[$23 >> 2] = $8; //@line 31456
   $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 31457
   HEAP32[$24 >> 2] = $4; //@line 31458
   $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 31459
   HEAP32[$25 >> 2] = $2; //@line 31460
   sp = STACKTOP; //@line 31461
   return;
  }
  ___async_unwind = 0; //@line 31464
  HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 31465
  $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 31466
  HEAP32[$23 >> 2] = $8; //@line 31467
  $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 31468
  HEAP32[$24 >> 2] = $4; //@line 31469
  $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 31470
  HEAP32[$25 >> 2] = $2; //@line 31471
  sp = STACKTOP; //@line 31472
  return;
 }
 $27 = HEAP32[$8 + 28 >> 2] | 0; //@line 31476
 if (!$27) {
  __ZdlPv($8); //@line 31479
  HEAP32[___async_retval >> 2] = -3007; //@line 31481
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 31485
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 31486
 FUNCTION_TABLE_vi[$30 & 511]($4); //@line 31487
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 31490
  $31 = $ReallocAsyncCtx10 + 4 | 0; //@line 31491
  HEAP32[$31 >> 2] = $8; //@line 31492
  $32 = $ReallocAsyncCtx10 + 8 | 0; //@line 31493
  HEAP32[$32 >> 2] = $2; //@line 31494
  sp = STACKTOP; //@line 31495
  return;
 }
 ___async_unwind = 0; //@line 31498
 HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 31499
 $31 = $ReallocAsyncCtx10 + 4 | 0; //@line 31500
 HEAP32[$31 >> 2] = $8; //@line 31501
 $32 = $ReallocAsyncCtx10 + 8 | 0; //@line 31502
 HEAP32[$32 >> 2] = $2; //@line 31503
 sp = STACKTOP; //@line 31504
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 15131
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15133
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15135
 $6 = HEAP32[$2 + 60 >> 2] | 0; //@line 15137
 do {
  if ($6 | 0) {
   $9 = HEAP32[$6 + 12 >> 2] | 0; //@line 15142
   if (!$9) {
    __ZdlPv($6); //@line 15145
    break;
   }
   $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 15149
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 15150
   FUNCTION_TABLE_vi[$12 & 511]($6); //@line 15151
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 234; //@line 15154
    $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 15155
    HEAP32[$13 >> 2] = $6; //@line 15156
    $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 15157
    HEAP32[$14 >> 2] = $2; //@line 15158
    $15 = $ReallocAsyncCtx2 + 12 | 0; //@line 15159
    HEAP32[$15 >> 2] = $4; //@line 15160
    sp = STACKTOP; //@line 15161
    return;
   }
   ___async_unwind = 0; //@line 15164
   HEAP32[$ReallocAsyncCtx2 >> 2] = 234; //@line 15165
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 15166
   HEAP32[$13 >> 2] = $6; //@line 15167
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 15168
   HEAP32[$14 >> 2] = $2; //@line 15169
   $15 = $ReallocAsyncCtx2 + 12 | 0; //@line 15170
   HEAP32[$15 >> 2] = $4; //@line 15171
   sp = STACKTOP; //@line 15172
   return;
  }
 } while (0);
 $17 = HEAP32[$2 + 64 >> 2] | 0; //@line 15177
 if ($17 | 0) {
  __ZdaPv($17); //@line 15180
 }
 $20 = HEAP32[$2 + 12 >> 2] | 0; //@line 15183
 if ($20 | 0) {
  __ZdlPv($20); //@line 15186
 }
 $23 = HEAP32[$2 + 44 >> 2] | 0; //@line 15189
 if ($23 | 0) {
  $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 15194
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 15195
  FUNCTION_TABLE_vi[$27 & 511]($2 + 32 | 0); //@line 15196
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 235; //@line 15199
   $28 = $ReallocAsyncCtx3 + 4 | 0; //@line 15200
   HEAP32[$28 >> 2] = $2; //@line 15201
   $29 = $ReallocAsyncCtx3 + 8 | 0; //@line 15202
   HEAP32[$29 >> 2] = $4; //@line 15203
   sp = STACKTOP; //@line 15204
   return;
  }
  ___async_unwind = 0; //@line 15207
  HEAP32[$ReallocAsyncCtx3 >> 2] = 235; //@line 15208
  $28 = $ReallocAsyncCtx3 + 4 | 0; //@line 15209
  HEAP32[$28 >> 2] = $2; //@line 15210
  $29 = $ReallocAsyncCtx3 + 8 | 0; //@line 15211
  HEAP32[$29 >> 2] = $4; //@line 15212
  sp = STACKTOP; //@line 15213
  return;
 }
 $31 = HEAP32[$2 + 28 >> 2] | 0; //@line 15217
 if (!$31) {
  __ZdlPv($2); //@line 15220
  HEAP32[10036 + ($4 << 2) >> 2] = 0; //@line 15222
  return;
 }
 $35 = HEAP32[$31 + 8 >> 2] | 0; //@line 15227
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 15228
 FUNCTION_TABLE_vi[$35 & 511]($2 + 16 | 0); //@line 15229
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 236; //@line 15232
  $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 15233
  HEAP32[$36 >> 2] = $2; //@line 15234
  $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 15235
  HEAP32[$37 >> 2] = $4; //@line 15236
  sp = STACKTOP; //@line 15237
  return;
 }
 ___async_unwind = 0; //@line 15240
 HEAP32[$ReallocAsyncCtx4 >> 2] = 236; //@line 15241
 $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 15242
 HEAP32[$36 >> 2] = $2; //@line 15243
 $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 15244
 HEAP32[$37 >> 2] = $4; //@line 15245
 sp = STACKTOP; //@line 15246
 return;
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7964
 STACKTOP = STACKTOP + 64 | 0; //@line 7965
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 7965
 $4 = sp; //@line 7966
 $5 = HEAP32[$0 >> 2] | 0; //@line 7967
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 7970
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 7972
 HEAP32[$4 >> 2] = $2; //@line 7973
 HEAP32[$4 + 4 >> 2] = $0; //@line 7975
 HEAP32[$4 + 8 >> 2] = $1; //@line 7977
 HEAP32[$4 + 12 >> 2] = $3; //@line 7979
 $14 = $4 + 16 | 0; //@line 7980
 $15 = $4 + 20 | 0; //@line 7981
 $16 = $4 + 24 | 0; //@line 7982
 $17 = $4 + 28 | 0; //@line 7983
 $18 = $4 + 32 | 0; //@line 7984
 $19 = $4 + 40 | 0; //@line 7985
 dest = $14; //@line 7986
 stop = dest + 36 | 0; //@line 7986
 do {
  HEAP32[dest >> 2] = 0; //@line 7986
  dest = dest + 4 | 0; //@line 7986
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 7986
 HEAP8[$14 + 38 >> 0] = 0; //@line 7986
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 7991
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 7994
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7995
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 7996
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 349; //@line 7999
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 8001
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 8003
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 8005
    sp = STACKTOP; //@line 8006
    STACKTOP = sp; //@line 8007
    return 0; //@line 8007
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8009
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 8013
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 8017
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 8020
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8021
   FUNCTION_TABLE_viiiii[$33 & 3]($10, $4, $8, 1, 0); //@line 8022
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 350; //@line 8025
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 8027
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 8029
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 8031
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 8033
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 8035
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 8037
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 8039
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 8041
    sp = STACKTOP; //@line 8042
    STACKTOP = sp; //@line 8043
    return 0; //@line 8043
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8045
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 8059
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 8067
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 8083
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 8088
  }
 } while (0);
 STACKTOP = sp; //@line 8091
 return $$0 | 0; //@line 8091
}
function _stoip6($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$0$lcssa6667 = 0, $$015$i = 0, $$016$i = 0, $$04857 = 0, $$049 = 0, $$050$lcssa = 0, $$05056 = 0, $$052$lcssa = 0, $$052$lcssa6568 = 0, $$05255 = 0, $$058 = 0, $$1 = 0, $$151 = 0, $$sink18$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $6 = 0, $9 = 0;
 if ($1 >>> 0 > 39) {
  return;
 }
 $4 = $0; //@line 9367
 do {
  if (!$1) {
   $$0$lcssa6667 = $2; //@line 9371
   $$052$lcssa6568 = 0; //@line 9371
  } else {
   $$04857 = $0; //@line 9373
   $$05056 = -1; //@line 9373
   $$05255 = 0; //@line 9373
   $$058 = $2; //@line 9373
   while (1) {
    $6 = HEAP8[$$04857 >> 0] | 0; //@line 9375
    if ($$05255 << 24 >> 24 < 8 & $6 << 24 >> 24 != 0) {
     $$049 = $$04857; //@line 9380
     $9 = $6; //@line 9380
    } else {
     $$0$lcssa = $$058; //@line 9382
     $$050$lcssa = $$05056; //@line 9382
     $$052$lcssa = $$05255; //@line 9382
     break;
    }
    L7 : while (1) {
     switch ($9 << 24 >> 24) {
     case 58:
     case 0:
      {
       $$015$i = $$04857; //@line 9388
       $$016$i = 0; //@line 9388
       $13 = $6; //@line 9388
       break L7;
       break;
      }
     default:
      {}
     }
     $10 = $$049 + 1 | 0; //@line 9395
     $$049 = $10; //@line 9397
     $9 = HEAP8[$10 >> 0] | 0; //@line 9397
    }
    while (1) {
     $11 = $$015$i + 1 | 0; //@line 9400
     $12 = $13 << 24 >> 24; //@line 9401
     if (($13 + -48 & 255) < 10) {
      $$sink18$i = -48; //@line 9405
     } else {
      if (($13 + -65 & 255) < 6) {
       $$sink18$i = -55; //@line 9410
      } else {
       if (($13 + -97 & 255) < 6) {
        $$sink18$i = 65449; //@line 9415
       } else {
        break;
       }
      }
     }
     $$015$i = $11; //@line 9427
     $$016$i = ($$sink18$i + $12 | ($$016$i & 65535) << 4) & 65535; //@line 9427
     $13 = HEAP8[$11 >> 0] | 0; //@line 9427
    }
    $21 = _common_write_16_bit($$016$i, $$058) | 0; //@line 9429
    $22 = $$05255 + 1 << 24 >> 24; //@line 9430
    if (($$049 - $4 | 0) >>> 0 < $1 >>> 0) {
     if ((HEAP8[$$049 >> 0] | 0) == 58) {
      $27 = $$049 + 1 | 0; //@line 9438
      $29 = (HEAP8[$27 >> 0] | 0) == 58; //@line 9440
      $$1 = $29 ? $27 : $$049; //@line 9443
      $$151 = $29 ? $22 : $$05056; //@line 9443
     } else {
      $$1 = $$049; //@line 9445
      $$151 = $$05056; //@line 9445
     }
    } else {
     $$1 = $$049; //@line 9448
     $$151 = $$05056; //@line 9448
    }
    $$04857 = $$1 + 1 | 0; //@line 9450
    if (($$04857 - $4 | 0) >>> 0 >= $1 >>> 0) {
     $$0$lcssa = $21; //@line 9457
     $$050$lcssa = $$151; //@line 9457
     $$052$lcssa = $22; //@line 9457
     break;
    } else {
     $$05056 = $$151; //@line 9455
     $$05255 = $22; //@line 9455
     $$058 = $21; //@line 9455
    }
   }
   if ($$050$lcssa << 24 >> 24 == -1) {
    if ($$052$lcssa << 24 >> 24 != 8) {
     $$0$lcssa6667 = $$0$lcssa; //@line 9465
     $$052$lcssa6568 = $$052$lcssa; //@line 9465
     break;
    }
    return;
   } else {
    $36 = $$050$lcssa << 24 >> 24 << 1; //@line 9471
    $39 = 8 - ($$052$lcssa << 24 >> 24) << 1; //@line 9474
    $42 = $39 & 254; //@line 9477
    $44 = $2 + ($36 & 254) | 0; //@line 9479
    _memmove($44 + $42 | 0, $44 | 0, 16 - $36 - $39 & 254 | 0) | 0; //@line 9482
    _memset($44 | 0, 0, $42 | 0) | 0; //@line 9483
    return;
   }
  }
 } while (0);
 _memset($$0$lcssa6667 | 0, 0, 16 - ($$052$lcssa6568 << 24 >> 24 << 1) | 0) | 0; //@line 9491
 return;
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 25665
 do {
  if (!$0) {
   do {
    if (!(HEAP32[252] | 0)) {
     $34 = 0; //@line 25673
    } else {
     $12 = HEAP32[252] | 0; //@line 25675
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25676
     $13 = _fflush($12) | 0; //@line 25677
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 326; //@line 25680
      sp = STACKTOP; //@line 25681
      return 0; //@line 25682
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 25684
      $34 = $13; //@line 25685
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 25691
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 25695
    } else {
     $$02327 = $$02325; //@line 25697
     $$02426 = $34; //@line 25697
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 25704
      } else {
       $28 = 0; //@line 25706
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 25714
       $25 = ___fflush_unlocked($$02327) | 0; //@line 25715
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 25720
       $$1 = $25 | $$02426; //@line 25722
      } else {
       $$1 = $$02426; //@line 25724
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 25728
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 25731
      if (!$$023) {
       $$024$lcssa = $$1; //@line 25734
       break L9;
      } else {
       $$02327 = $$023; //@line 25737
       $$02426 = $$1; //@line 25737
      }
     }
     HEAP32[$AsyncCtx >> 2] = 327; //@line 25740
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 25742
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 25744
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 25746
     sp = STACKTOP; //@line 25747
     return 0; //@line 25748
    }
   } while (0);
   ___ofl_unlock(); //@line 25751
   $$0 = $$024$lcssa; //@line 25752
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25758
    $5 = ___fflush_unlocked($0) | 0; //@line 25759
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 324; //@line 25762
     sp = STACKTOP; //@line 25763
     return 0; //@line 25764
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 25766
     $$0 = $5; //@line 25767
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 25772
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 25773
   $7 = ___fflush_unlocked($0) | 0; //@line 25774
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 325; //@line 25777
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 25780
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 25782
    sp = STACKTOP; //@line 25783
    return 0; //@line 25784
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 25786
   if ($phitmp) {
    $$0 = $7; //@line 25788
   } else {
    ___unlockfile($0); //@line 25790
    $$0 = $7; //@line 25791
   }
  }
 } while (0);
 return $$0 | 0; //@line 25795
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_204($0) {
 $0 = $0 | 0;
 var $$049 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28882
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28884
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28888
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28890
 if (!(HEAP32[$2 + 48 >> 2] | 0)) {
  $$049 = 0; //@line 28895
 } else {
  $$049 = HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 28899
 }
 $14 = $2 + 28 | 0; //@line 28901
 $15 = HEAP32[$14 >> 2] | 0; //@line 28902
 if (!$15) {
  $26 = $6 + 12 | 0; //@line 28905
  HEAP32[$26 >> 2] = 0; //@line 28906
  $27 = HEAP32[$2 >> 2] | 0; //@line 28907
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28908
  __ZL28nsapi_dns_query_async_deletei($27); //@line 28909
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 28912
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 28913
   HEAP32[$28 >> 2] = $26; //@line 28914
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 28915
   HEAP32[$29 >> 2] = $6; //@line 28916
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 28917
   HEAP32[$30 >> 2] = $8; //@line 28918
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 28919
   HEAP32[$31 >> 2] = $$049; //@line 28920
   sp = STACKTOP; //@line 28921
   return;
  }
  ___async_unwind = 0; //@line 28924
  HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 28925
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 28926
  HEAP32[$28 >> 2] = $26; //@line 28927
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 28928
  HEAP32[$29 >> 2] = $6; //@line 28929
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 28930
  HEAP32[$30 >> 2] = $8; //@line 28931
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 28932
  HEAP32[$31 >> 2] = $$049; //@line 28933
  sp = STACKTOP; //@line 28934
  return;
 } else {
  $19 = HEAP32[$15 + 4 >> 2] | 0; //@line 28939
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 28940
  FUNCTION_TABLE_vii[$19 & 7]($6, $2 + 16 | 0); //@line 28941
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 264; //@line 28944
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 28945
   HEAP32[$20 >> 2] = $14; //@line 28946
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 28947
   HEAP32[$21 >> 2] = $6; //@line 28948
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 28949
   HEAP32[$22 >> 2] = $2; //@line 28950
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 28951
   HEAP32[$23 >> 2] = $6; //@line 28952
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 28953
   HEAP32[$24 >> 2] = $8; //@line 28954
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 28955
   HEAP32[$25 >> 2] = $$049; //@line 28956
   sp = STACKTOP; //@line 28957
   return;
  }
  ___async_unwind = 0; //@line 28960
  HEAP32[$ReallocAsyncCtx >> 2] = 264; //@line 28961
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 28962
  HEAP32[$20 >> 2] = $14; //@line 28963
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 28964
  HEAP32[$21 >> 2] = $6; //@line 28965
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 28966
  HEAP32[$22 >> 2] = $2; //@line 28967
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 28968
  HEAP32[$23 >> 2] = $6; //@line 28969
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 28970
  HEAP32[$24 >> 2] = $8; //@line 28971
  $25 = $ReallocAsyncCtx + 24 | 0; //@line 28972
  HEAP32[$25 >> 2] = $$049; //@line 28973
  sp = STACKTOP; //@line 28974
  return;
 }
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 3276
 $7 = ($2 | 0) != 0; //@line 3280
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 3284
   $$03555 = $0; //@line 3285
   $$03654 = $2; //@line 3285
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 3290
     $$036$lcssa64 = $$03654; //@line 3290
     label = 6; //@line 3291
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 3294
    $12 = $$03654 + -1 | 0; //@line 3295
    $16 = ($12 | 0) != 0; //@line 3299
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 3302
     $$03654 = $12; //@line 3302
    } else {
     $$035$lcssa = $11; //@line 3304
     $$036$lcssa = $12; //@line 3304
     $$lcssa = $16; //@line 3304
     label = 5; //@line 3305
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 3310
   $$036$lcssa = $2; //@line 3310
   $$lcssa = $7; //@line 3310
   label = 5; //@line 3311
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 3316
   $$036$lcssa64 = $$036$lcssa; //@line 3316
   label = 6; //@line 3317
  } else {
   $$2 = $$035$lcssa; //@line 3319
   $$3 = 0; //@line 3319
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 3325
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 3328
    $$3 = $$036$lcssa64; //@line 3328
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 3330
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 3334
      $$13745 = $$036$lcssa64; //@line 3334
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 3337
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 3346
       $30 = $$13745 + -4 | 0; //@line 3347
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 3350
        $$13745 = $30; //@line 3350
       } else {
        $$0$lcssa = $29; //@line 3352
        $$137$lcssa = $30; //@line 3352
        label = 11; //@line 3353
        break L11;
       }
      }
      $$140 = $$046; //@line 3357
      $$23839 = $$13745; //@line 3357
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 3359
      $$137$lcssa = $$036$lcssa64; //@line 3359
      label = 11; //@line 3360
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 3366
      $$3 = 0; //@line 3366
      break;
     } else {
      $$140 = $$0$lcssa; //@line 3369
      $$23839 = $$137$lcssa; //@line 3369
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 3376
      $$3 = $$23839; //@line 3376
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 3379
     $$23839 = $$23839 + -1 | 0; //@line 3380
     if (!$$23839) {
      $$2 = $35; //@line 3383
      $$3 = 0; //@line 3383
      break;
     } else {
      $$140 = $35; //@line 3386
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 3394
}
function _mbed_vtracef__async_cb_93($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14702
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14704
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14706
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 14709
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14711
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14713
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14715
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14719
 $$13 = ($AsyncRetVal | 0) >= ($12 | 0) ? 0 : $AsyncRetVal; //@line 14721
 $18 = (HEAP32[$0 + 28 >> 2] | 0) + $$13 | 0; //@line 14723
 $19 = $12 - $$13 | 0; //@line 14724
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[128] | 0; //@line 14728
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $6 ^ 1) {
     break;
    }
    _snprintf($18, $19, 5745, $8) | 0; //@line 14740
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 14743
   $23 = FUNCTION_TABLE_i[$21 & 0]() | 0; //@line 14744
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 81; //@line 14747
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 14748
    HEAP32[$24 >> 2] = $2; //@line 14749
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 14750
    HEAP32[$25 >> 2] = $18; //@line 14751
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 14752
    HEAP32[$26 >> 2] = $19; //@line 14753
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 14754
    HEAP32[$27 >> 2] = $4; //@line 14755
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 14756
    $$expand_i1_val = $6 & 1; //@line 14757
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 14758
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 14759
    HEAP32[$29 >> 2] = $8; //@line 14760
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 14761
    HEAP32[$30 >> 2] = $10; //@line 14762
    sp = STACKTOP; //@line 14763
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 14767
   ___async_unwind = 0; //@line 14768
   HEAP32[$ReallocAsyncCtx6 >> 2] = 81; //@line 14769
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 14770
   HEAP32[$24 >> 2] = $2; //@line 14771
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 14772
   HEAP32[$25 >> 2] = $18; //@line 14773
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 14774
   HEAP32[$26 >> 2] = $19; //@line 14775
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 14776
   HEAP32[$27 >> 2] = $4; //@line 14777
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 14778
   $$expand_i1_val = $6 & 1; //@line 14779
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 14780
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 14781
   HEAP32[$29 >> 2] = $8; //@line 14782
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 14783
   HEAP32[$30 >> 2] = $10; //@line 14784
   sp = STACKTOP; //@line 14785
   return;
  }
 } while (0);
 $34 = HEAP32[129] | 0; //@line 14789
 $35 = HEAP32[122] | 0; //@line 14790
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14791
 FUNCTION_TABLE_vi[$34 & 511]($35); //@line 14792
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 14795
  sp = STACKTOP; //@line 14796
  return;
 }
 ___async_unwind = 0; //@line 14799
 HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 14800
 sp = STACKTOP; //@line 14801
 return;
}
function _mbed_vtracef__async_cb_94($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14811
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14813
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14815
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14817
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14819
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14821
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14823
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14825
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14827
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14829
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14831
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14833
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14835
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14837
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 14840
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 14842
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14844
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 14846
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14848
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14850
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 14852
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 14854
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 14856
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 14858
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 14860
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 14862
 $55 = ($50 | 0 ? 4 : 0) + $50 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 14868
 $56 = HEAP32[127] | 0; //@line 14869
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 14870
 $57 = FUNCTION_TABLE_ii[$56 & 31]($55) | 0; //@line 14871
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 14875
  ___async_unwind = 0; //@line 14876
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 79; //@line 14878
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 14880
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 14882
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 14884
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 14886
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 14888
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 14890
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 14892
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 14894
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 14896
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 14898
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 14900
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 14902
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $26; //@line 14904
 HEAP8[$ReallocAsyncCtx5 + 56 >> 0] = $28 & 1; //@line 14907
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $30; //@line 14909
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $32; //@line 14911
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $34; //@line 14913
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $36; //@line 14915
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $38; //@line 14917
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $40; //@line 14919
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $42; //@line 14921
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $44; //@line 14923
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $46; //@line 14925
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $48; //@line 14927
 sp = STACKTOP; //@line 14928
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8146
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 8152
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 8158
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 8161
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8162
    FUNCTION_TABLE_viiiii[$53 & 3]($50, $1, $2, $3, $4); //@line 8163
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 353; //@line 8166
     sp = STACKTOP; //@line 8167
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8170
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 8178
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 8183
     $19 = $1 + 44 | 0; //@line 8184
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 8190
     HEAP8[$22 >> 0] = 0; //@line 8191
     $23 = $1 + 53 | 0; //@line 8192
     HEAP8[$23 >> 0] = 0; //@line 8193
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 8195
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 8198
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 8199
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 8200
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 352; //@line 8203
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 8205
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 8207
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 8209
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 8211
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 8213
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 8215
      sp = STACKTOP; //@line 8216
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 8219
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 8223
      label = 13; //@line 8224
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 8229
       label = 13; //@line 8230
      } else {
       $$037$off039 = 3; //@line 8232
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 8236
      $39 = $1 + 40 | 0; //@line 8237
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 8240
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 8250
        $$037$off039 = $$037$off038; //@line 8251
       } else {
        $$037$off039 = $$037$off038; //@line 8253
       }
      } else {
       $$037$off039 = $$037$off038; //@line 8256
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 8259
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 8266
   }
  }
 } while (0);
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1428
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 1439
 $14 = $1 + 20 | 0; //@line 1440
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1442
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 1447
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 1451
 $24 = $0 + 128 | 0; //@line 1452
 _equeue_mutex_lock($24); //@line 1453
 $25 = HEAP32[$0 >> 2] | 0; //@line 1454
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 1458
   label = 5; //@line 1459
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 1461
   $$053 = $0; //@line 1462
   $29 = $25; //@line 1462
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 1471
    $34 = HEAP32[$33 >> 2] | 0; //@line 1472
    if (!$34) {
     $$051$ph = $33; //@line 1475
     label = 5; //@line 1476
     break L1;
    } else {
     $$053 = $33; //@line 1479
     $29 = $34; //@line 1479
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 1487
    HEAP32[$49 >> 2] = $29; //@line 1488
    HEAP32[$29 + 16 >> 2] = $49; //@line 1490
    $$0515859 = $$053; //@line 1491
    label = 11; //@line 1492
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 1496
   $43 = $1 + 8 | 0; //@line 1497
   HEAP32[$43 >> 2] = $42; //@line 1498
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 1502
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 1504
   $47 = $1 + 12 | 0; //@line 1505
   HEAP32[$47 >> 2] = $46; //@line 1506
   HEAP32[$46 + 16 >> 2] = $47; //@line 1508
   $$05157 = $$053; //@line 1509
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 1514
  $$0515859 = $$051$ph; //@line 1515
  label = 11; //@line 1516
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 1520
  $$05157 = $$0515859; //@line 1521
 }
 HEAP32[$$05157 >> 2] = $1; //@line 1523
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 1525
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 1527
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 1530
  return $13 | 0; //@line 1531
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 1537
  return $13 | 0; //@line 1538
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 1543
  return $13 | 0; //@line 1544
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 1550
  return $13 | 0; //@line 1551
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 1554
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1556
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1560
 FUNCTION_TABLE_vii[$54 & 7]($65, $67 & ~($67 >> 31)); //@line 1561
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 58; //@line 1564
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 1566
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 1568
  sp = STACKTOP; //@line 1569
  return 0; //@line 1570
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1572
 _equeue_mutex_unlock($24); //@line 1573
 return $13 | 0; //@line 1574
}
function __ZL37nsapi_dns_query_async_socket_callbackPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $26 = 0, $29 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17207
 STACKTOP = STACKTOP + 32 | 0; //@line 17208
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17208
 $1 = sp + 16 | 0; //@line 17209
 $2 = sp; //@line 17210
 if (!$0) {
  STACKTOP = sp; //@line 17213
  return;
 }
 $4 = $0 + 12 | 0; //@line 17215
 $5 = HEAP32[$4 >> 2] | 0; //@line 17216
 do {
  if (!$5) {
   $14 = 0; //@line 17220
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 17223
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 17224
   FUNCTION_TABLE_vii[$8 & 7]($1, $0); //@line 17225
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 237; //@line 17228
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 17230
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17232
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 17234
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 17236
    sp = STACKTOP; //@line 17237
    STACKTOP = sp; //@line 17238
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17240
    $14 = HEAP32[$4 >> 2] | 0; //@line 17242
    break;
   }
  }
 } while (0);
 $13 = $1 + 12 | 0; //@line 17247
 HEAP32[$13 >> 2] = $14; //@line 17248
 $16 = HEAP32[$0 + 16 >> 2] | 0; //@line 17250
 HEAP32[$2 + 8 >> 2] = 0; //@line 17252
 HEAP32[$2 >> 2] = 238; //@line 17253
 HEAP32[$2 + 4 >> 2] = $16; //@line 17255
 $18 = $2 + 12 | 0; //@line 17256
 HEAP32[$18 >> 2] = 736; //@line 17257
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17258
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 17259
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 239; //@line 17262
  HEAP32[$AsyncCtx10 + 4 >> 2] = $18; //@line 17264
  HEAP32[$AsyncCtx10 + 8 >> 2] = $13; //@line 17266
  HEAP32[$AsyncCtx10 + 12 >> 2] = $2; //@line 17268
  HEAP32[$AsyncCtx10 + 16 >> 2] = $1; //@line 17270
  sp = STACKTOP; //@line 17271
  STACKTOP = sp; //@line 17272
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 17274
 $23 = HEAP32[$18 >> 2] | 0; //@line 17275
 do {
  if ($23 | 0) {
   $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 17280
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17281
   FUNCTION_TABLE_vi[$26 & 511]($2); //@line 17282
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 240; //@line 17285
    HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 17287
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 17289
    sp = STACKTOP; //@line 17290
    STACKTOP = sp; //@line 17291
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17293
    break;
   }
  }
 } while (0);
 $29 = HEAP32[$13 >> 2] | 0; //@line 17298
 if (!$29) {
  STACKTOP = sp; //@line 17301
  return;
 }
 $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 17304
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17305
 FUNCTION_TABLE_vi[$32 & 511]($1); //@line 17306
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 241; //@line 17309
  sp = STACKTOP; //@line 17310
  STACKTOP = sp; //@line 17311
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17313
 STACKTOP = sp; //@line 17314
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $35 = 0, $4 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9608
 STACKTOP = STACKTOP + 16 | 0; //@line 9609
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9609
 $4 = sp; //@line 9610
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 9613
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9614
 $8 = FUNCTION_TABLE_ii[$7 & 31]($0) | 0; //@line 9615
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 90; //@line 9618
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 9620
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 9622
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 9624
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 9626
  sp = STACKTOP; //@line 9627
  STACKTOP = sp; //@line 9628
  return 0; //@line 9628
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9630
 $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0; //@line 9633
 $16 = $2 + 12 | 0; //@line 9634
 $17 = HEAP32[$16 >> 2] | 0; //@line 9635
 do {
  if (!$17) {
   $28 = 0; //@line 9639
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 9642
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9643
   FUNCTION_TABLE_vii[$20 & 7]($4, $2); //@line 9644
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 91; //@line 9647
    HEAP32[$AsyncCtx3 + 4 >> 2] = $16; //@line 9649
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 9651
    HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 9653
    HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 9655
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 9657
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 9659
    sp = STACKTOP; //@line 9660
    STACKTOP = sp; //@line 9661
    return 0; //@line 9661
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9663
    $28 = HEAP32[$16 >> 2] | 0; //@line 9665
    break;
   }
  }
 } while (0);
 $27 = $4 + 12 | 0; //@line 9670
 HEAP32[$27 >> 2] = $28; //@line 9671
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9672
 $29 = FUNCTION_TABLE_iiiii[$15 & 15]($8, $1, $4, $3) | 0; //@line 9673
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 92; //@line 9676
  HEAP32[$AsyncCtx6 + 4 >> 2] = $27; //@line 9678
  HEAP32[$AsyncCtx6 + 8 >> 2] = $4; //@line 9680
  sp = STACKTOP; //@line 9681
  STACKTOP = sp; //@line 9682
  return 0; //@line 9682
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 9684
 $32 = HEAP32[$27 >> 2] | 0; //@line 9685
 if (!$32) {
  STACKTOP = sp; //@line 9688
  return $29 | 0; //@line 9688
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 9691
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9692
 FUNCTION_TABLE_vi[$35 & 511]($4); //@line 9693
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 93; //@line 9696
  HEAP32[$AsyncCtx10 + 4 >> 2] = $29; //@line 9698
  sp = STACKTOP; //@line 9699
  STACKTOP = sp; //@line 9700
  return 0; //@line 9700
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 9702
 STACKTOP = sp; //@line 9703
 return $29 | 0; //@line 9703
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 7458
 STACKTOP = STACKTOP + 48 | 0; //@line 7459
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7459
 $vararg_buffer10 = sp + 32 | 0; //@line 7460
 $vararg_buffer7 = sp + 24 | 0; //@line 7461
 $vararg_buffer3 = sp + 16 | 0; //@line 7462
 $vararg_buffer = sp; //@line 7463
 $0 = sp + 36 | 0; //@line 7464
 $1 = ___cxa_get_globals_fast() | 0; //@line 7465
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 7468
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 7473
   $9 = HEAP32[$7 >> 2] | 0; //@line 7475
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 7478
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 9326; //@line 7484
    _abort_message(9276, $vararg_buffer7); //@line 7485
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 7494
   } else {
    $22 = $3 + 80 | 0; //@line 7496
   }
   HEAP32[$0 >> 2] = $22; //@line 7498
   $23 = HEAP32[$3 >> 2] | 0; //@line 7499
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 7501
   $28 = HEAP32[(HEAP32[26] | 0) + 16 >> 2] | 0; //@line 7504
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 7505
   $29 = FUNCTION_TABLE_iiii[$28 & 31](104, $23, $0) | 0; //@line 7506
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 343; //@line 7509
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7511
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 7513
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 7515
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 7517
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 7519
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 7521
    sp = STACKTOP; //@line 7522
    STACKTOP = sp; //@line 7523
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7525
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 9326; //@line 7527
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 7529
    _abort_message(9235, $vararg_buffer3); //@line 7530
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 7533
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 7536
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7537
   $40 = FUNCTION_TABLE_ii[$39 & 31]($36) | 0; //@line 7538
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 344; //@line 7541
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 7543
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 7545
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 7547
    sp = STACKTOP; //@line 7548
    STACKTOP = sp; //@line 7549
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 7551
    HEAP32[$vararg_buffer >> 2] = 9326; //@line 7552
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 7554
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 7556
    _abort_message(9190, $vararg_buffer); //@line 7557
   }
  }
 }
 _abort_message(9314, $vararg_buffer10); //@line 7562
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1$i = 0, $14 = 0, $15 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 820
 $5 = $0 + -4 | 0; //@line 821
 $6 = $1 + 8 | 0; //@line 822
 do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   label = 7; //@line 827
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$6 >> 0] | 0)) {
     label = 7; //@line 835
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 841
   _puts(1750) | 0; //@line 842
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 50; //@line 845
    sp = STACKTOP; //@line 846
    return 0; //@line 847
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 849
   $$1$i = -3012; //@line 850
   return $$1$i | 0; //@line 851
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $14 = HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0; //@line 858
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 859
   $15 = FUNCTION_TABLE_iiii[$14 & 31]($5, $1, $2) | 0; //@line 860
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 51; //@line 863
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 865
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 867
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 869
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 871
    HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 873
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 875
    sp = STACKTOP; //@line 876
    return 0; //@line 877
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 879
   if (($15 | 0) < 0) {
    $$1$i = $15; //@line 882
    return $$1$i | 0; //@line 883
   } else {
    $23 = $1 + 12 | 0; //@line 885
    dest = $23; //@line 886
    src = $2; //@line 886
    stop = dest + 60 | 0; //@line 886
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 886
     dest = dest + 4 | 0; //@line 886
     src = src + 4 | 0; //@line 886
    } while ((dest | 0) < (stop | 0));
    HEAP16[$23 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 886
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 891
 _wait_ms(1); //@line 892
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 52; //@line 895
  HEAP32[$AsyncCtx10 + 4 >> 2] = $5; //@line 897
  HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 899
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 901
  HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 903
  HEAP32[$AsyncCtx10 + 20 >> 2] = $4; //@line 905
  sp = STACKTOP; //@line 906
  return 0; //@line 907
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 909
 $31 = HEAP32[(HEAP32[$5 >> 2] | 0) + 116 >> 2] | 0; //@line 912
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 913
 $32 = FUNCTION_TABLE_iiiii[$31 & 15]($5, $1, $3, $4) | 0; //@line 914
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 53; //@line 917
  sp = STACKTOP; //@line 918
  return 0; //@line 919
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 921
 $$1$i = $32; //@line 922
 return $$1$i | 0; //@line 923
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10117
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10119
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10121
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10123
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10125
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10127
 $12 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 4 >> 2] | 0; //@line 10130
 $13 = $2 + 12 | 0; //@line 10131
 $14 = HEAP32[$13 >> 2] | 0; //@line 10132
 if (!$14) {
  $24 = $4 + 12 | 0; //@line 10135
  HEAP32[$24 >> 2] = 0; //@line 10136
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 10137
  $25 = FUNCTION_TABLE_iiiii[$12 & 15]($AsyncRetVal, $6, $4, $8) | 0; //@line 10138
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 10141
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 10142
   HEAP32[$26 >> 2] = $24; //@line 10143
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 10144
   HEAP32[$27 >> 2] = $4; //@line 10145
   sp = STACKTOP; //@line 10146
   return;
  }
  HEAP32[___async_retval >> 2] = $25; //@line 10150
  ___async_unwind = 0; //@line 10151
  HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 10152
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 10153
  HEAP32[$26 >> 2] = $24; //@line 10154
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 10155
  HEAP32[$27 >> 2] = $4; //@line 10156
  sp = STACKTOP; //@line 10157
  return;
 } else {
  $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 10161
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 10162
  FUNCTION_TABLE_vii[$17 & 7]($4, $2); //@line 10163
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 91; //@line 10166
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 10167
   HEAP32[$18 >> 2] = $13; //@line 10168
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 10169
   HEAP32[$19 >> 2] = $4; //@line 10170
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 10171
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 10172
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 10173
   HEAP32[$21 >> 2] = $6; //@line 10174
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 10175
   HEAP32[$22 >> 2] = $8; //@line 10176
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 10177
   HEAP32[$23 >> 2] = $12; //@line 10178
   sp = STACKTOP; //@line 10179
   return;
  }
  ___async_unwind = 0; //@line 10182
  HEAP32[$ReallocAsyncCtx2 >> 2] = 91; //@line 10183
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 10184
  HEAP32[$18 >> 2] = $13; //@line 10185
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 10186
  HEAP32[$19 >> 2] = $4; //@line 10187
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 10188
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 10189
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 10190
  HEAP32[$21 >> 2] = $6; //@line 10191
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 10192
  HEAP32[$22 >> 2] = $8; //@line 10193
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 10194
  HEAP32[$23 >> 2] = $12; //@line 10195
  sp = STACKTOP; //@line 10196
  return;
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_57($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11288
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11290
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11292
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11294
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11296
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11298
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11300
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11302
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11304
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11306
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11308
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11310
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11312
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11314
 $42 = HEAP32[$22 >> 2] | 0; //@line 11315
 if (!$42) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 11318
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($26, 0, $18, 512) | 0; //@line 11319
  if (!___async) {
   HEAP32[___async_retval >> 2] = $27; //@line 11323
   ___async_unwind = 0; //@line 11324
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 255; //@line 11326
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 11328
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 11330
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 11332
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 11334
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 11336
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 11338
  HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 11340
  HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 11342
  HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 11344
  HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 11346
  HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 11348
  HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 11350
  HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 11352
  sp = STACKTOP; //@line 11353
  return;
 } else {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 11357
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 11358
  FUNCTION_TABLE_vi[$45 & 511]($2); //@line 11359
  if (!___async) {
   ___async_unwind = 0; //@line 11362
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 260; //@line 11364
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 11366
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 11368
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 11370
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 11372
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 11374
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 11376
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 11378
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 11380
  HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 11382
  HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 11384
  HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 11386
  HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 11388
  HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $26; //@line 11390
  sp = STACKTOP; //@line 11391
  return;
 }
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15544
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15546
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15548
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15550
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[2514] | 0)) {
  _serial_init(10060, 2, 3); //@line 15558
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 15560
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 15566
  _serial_putc(10060, $9 << 24 >> 24); //@line 15567
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 299; //@line 15570
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 15571
   HEAP32[$18 >> 2] = 0; //@line 15572
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 15573
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 15574
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 15575
   HEAP32[$20 >> 2] = $2; //@line 15576
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 15577
   HEAP8[$21 >> 0] = $9; //@line 15578
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 15579
   HEAP32[$22 >> 2] = $4; //@line 15580
   sp = STACKTOP; //@line 15581
   return;
  }
  ___async_unwind = 0; //@line 15584
  HEAP32[$ReallocAsyncCtx2 >> 2] = 299; //@line 15585
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 15586
  HEAP32[$18 >> 2] = 0; //@line 15587
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 15588
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 15589
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 15590
  HEAP32[$20 >> 2] = $2; //@line 15591
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 15592
  HEAP8[$21 >> 0] = $9; //@line 15593
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 15594
  HEAP32[$22 >> 2] = $4; //@line 15595
  sp = STACKTOP; //@line 15596
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 15599
  _serial_putc(10060, 13); //@line 15600
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 298; //@line 15603
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 15604
   HEAP8[$12 >> 0] = $9; //@line 15605
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 15606
   HEAP32[$13 >> 2] = 0; //@line 15607
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 15608
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 15609
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 15610
   HEAP32[$15 >> 2] = $2; //@line 15611
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 15612
   HEAP32[$16 >> 2] = $4; //@line 15613
   sp = STACKTOP; //@line 15614
   return;
  }
  ___async_unwind = 0; //@line 15617
  HEAP32[$ReallocAsyncCtx3 >> 2] = 298; //@line 15618
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 15619
  HEAP8[$12 >> 0] = $9; //@line 15620
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 15621
  HEAP32[$13 >> 2] = 0; //@line 15622
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 15623
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 15624
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 15625
  HEAP32[$15 >> 2] = $2; //@line 15626
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 15627
  HEAP32[$16 >> 2] = $4; //@line 15628
  sp = STACKTOP; //@line 15629
  return;
 }
}
function _mbed_error_vfprintf__async_cb_101($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15637
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15641
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15643
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15647
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 15648
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 15654
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 15660
  _serial_putc(10060, $13 << 24 >> 24); //@line 15661
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 299; //@line 15664
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 15665
   HEAP32[$22 >> 2] = $12; //@line 15666
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 15667
   HEAP32[$23 >> 2] = $4; //@line 15668
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 15669
   HEAP32[$24 >> 2] = $6; //@line 15670
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 15671
   HEAP8[$25 >> 0] = $13; //@line 15672
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 15673
   HEAP32[$26 >> 2] = $10; //@line 15674
   sp = STACKTOP; //@line 15675
   return;
  }
  ___async_unwind = 0; //@line 15678
  HEAP32[$ReallocAsyncCtx2 >> 2] = 299; //@line 15679
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 15680
  HEAP32[$22 >> 2] = $12; //@line 15681
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 15682
  HEAP32[$23 >> 2] = $4; //@line 15683
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 15684
  HEAP32[$24 >> 2] = $6; //@line 15685
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 15686
  HEAP8[$25 >> 0] = $13; //@line 15687
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 15688
  HEAP32[$26 >> 2] = $10; //@line 15689
  sp = STACKTOP; //@line 15690
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 15693
  _serial_putc(10060, 13); //@line 15694
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 298; //@line 15697
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 15698
   HEAP8[$16 >> 0] = $13; //@line 15699
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 15700
   HEAP32[$17 >> 2] = $12; //@line 15701
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 15702
   HEAP32[$18 >> 2] = $4; //@line 15703
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 15704
   HEAP32[$19 >> 2] = $6; //@line 15705
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 15706
   HEAP32[$20 >> 2] = $10; //@line 15707
   sp = STACKTOP; //@line 15708
   return;
  }
  ___async_unwind = 0; //@line 15711
  HEAP32[$ReallocAsyncCtx3 >> 2] = 298; //@line 15712
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 15713
  HEAP8[$16 >> 0] = $13; //@line 15714
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 15715
  HEAP32[$17 >> 2] = $12; //@line 15716
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 15717
  HEAP32[$18 >> 2] = $4; //@line 15718
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 15719
  HEAP32[$19 >> 2] = $6; //@line 15720
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 15721
  HEAP32[$20 >> 2] = $10; //@line 15722
  sp = STACKTOP; //@line 15723
  return;
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_118($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 20032
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20034
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20036
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20038
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20040
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20042
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20044
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20046
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20048
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20050
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20052
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20054
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20056
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20058
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20060
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20062
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20064
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20066
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20068
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20070
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20072
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20074
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20076
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20078
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20080
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(100) | 0; //@line 20081
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 20082
 if (!___async) {
  ___async_unwind = 0; //@line 20085
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 185; //@line 20087
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 20089
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 20091
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 20093
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 20095
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 20097
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $12; //@line 20099
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $14; //@line 20101
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $16; //@line 20103
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $18; //@line 20105
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $20; //@line 20107
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $22; //@line 20109
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $24; //@line 20111
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $26; //@line 20113
 HEAP32[$ReallocAsyncCtx11 + 56 >> 2] = $28; //@line 20115
 HEAP32[$ReallocAsyncCtx11 + 60 >> 2] = $30; //@line 20117
 HEAP32[$ReallocAsyncCtx11 + 64 >> 2] = $32; //@line 20119
 HEAP32[$ReallocAsyncCtx11 + 68 >> 2] = $34; //@line 20121
 HEAP32[$ReallocAsyncCtx11 + 72 >> 2] = $36; //@line 20123
 HEAP32[$ReallocAsyncCtx11 + 76 >> 2] = $38; //@line 20125
 HEAP32[$ReallocAsyncCtx11 + 80 >> 2] = $40; //@line 20127
 HEAP32[$ReallocAsyncCtx11 + 84 >> 2] = $42; //@line 20129
 HEAP32[$ReallocAsyncCtx11 + 88 >> 2] = $44; //@line 20131
 HEAP32[$ReallocAsyncCtx11 + 92 >> 2] = $46; //@line 20133
 HEAP32[$ReallocAsyncCtx11 + 96 >> 2] = $48; //@line 20135
 sp = STACKTOP; //@line 20136
 return;
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27023
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27025
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 27027
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27029
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27031
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27033
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27035
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27037
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -3009; //@line 27042
  $36 = ___async_retval; //@line 27043
  HEAP32[$36 >> 2] = $$0; //@line 27044
  return;
 }
 __ZN13SocketAddress8set_portEt($2, $4); //@line 27047
 $17 = $6 + 8 | 0; //@line 27048
 $18 = $6 + 52 | 0; //@line 27049
 $19 = $6 + 12 | 0; //@line 27050
 $20 = HEAP32[$17 >> 2] | 0; //@line 27051
 if (!$20) {
  $$0 = -3005; //@line 27054
  $36 = ___async_retval; //@line 27055
  HEAP32[$36 >> 2] = $$0; //@line 27056
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 27059
 $22 = HEAP32[$10 >> 2] | 0; //@line 27060
 $25 = HEAP32[(HEAP32[$22 >> 2] | 0) + 76 >> 2] | 0; //@line 27063
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 27064
 $26 = FUNCTION_TABLE_iiiiii[$25 & 7]($22, $20, $2, $12, $14) | 0; //@line 27065
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 151; //@line 27068
  $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 27069
  HEAP32[$27 >> 2] = $19; //@line 27070
  $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 27071
  HEAP32[$28 >> 2] = $8; //@line 27072
  $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 27073
  HEAP32[$29 >> 2] = $17; //@line 27074
  $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 27075
  HEAP32[$30 >> 2] = $18; //@line 27076
  $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 27077
  HEAP32[$31 >> 2] = $10; //@line 27078
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 27079
  HEAP32[$32 >> 2] = $2; //@line 27080
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 27081
  HEAP32[$33 >> 2] = $12; //@line 27082
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 27083
  HEAP32[$34 >> 2] = $14; //@line 27084
  sp = STACKTOP; //@line 27085
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 27089
 ___async_unwind = 0; //@line 27090
 HEAP32[$ReallocAsyncCtx2 >> 2] = 151; //@line 27091
 $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 27092
 HEAP32[$27 >> 2] = $19; //@line 27093
 $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 27094
 HEAP32[$28 >> 2] = $8; //@line 27095
 $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 27096
 HEAP32[$29 >> 2] = $17; //@line 27097
 $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 27098
 HEAP32[$30 >> 2] = $18; //@line 27099
 $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 27100
 HEAP32[$31 >> 2] = $10; //@line 27101
 $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 27102
 HEAP32[$32 >> 2] = $2; //@line 27103
 $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 27104
 HEAP32[$33 >> 2] = $12; //@line 27105
 $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 27106
 HEAP32[$34 >> 2] = $14; //@line 27107
 sp = STACKTOP; //@line 27108
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_140($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24439
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24441
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24443
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24445
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24447
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24449
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24451
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24453
 $$pre = HEAP32[$2 >> 2] | 0; //@line 24454
 if ($$pre | 0) {
  $17 = HEAP32[$$pre + 4 >> 2] | 0; //@line 24458
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 24459
  FUNCTION_TABLE_vii[$17 & 7]($6, $8); //@line 24460
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 24463
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 24464
   HEAP32[$18 >> 2] = $2; //@line 24465
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 24466
   HEAP32[$19 >> 2] = $4; //@line 24467
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 24468
   HEAP32[$20 >> 2] = $8; //@line 24469
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 24470
   HEAP32[$21 >> 2] = $10; //@line 24471
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 24472
   HEAP32[$22 >> 2] = $12; //@line 24473
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 24474
   HEAP32[$23 >> 2] = $6; //@line 24475
   $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 24476
   HEAP32[$24 >> 2] = $14; //@line 24477
   sp = STACKTOP; //@line 24478
   return;
  }
  ___async_unwind = 0; //@line 24481
  HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 24482
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 24483
  HEAP32[$18 >> 2] = $2; //@line 24484
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 24485
  HEAP32[$19 >> 2] = $4; //@line 24486
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 24487
  HEAP32[$20 >> 2] = $8; //@line 24488
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 24489
  HEAP32[$21 >> 2] = $10; //@line 24490
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 24491
  HEAP32[$22 >> 2] = $12; //@line 24492
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 24493
  HEAP32[$23 >> 2] = $6; //@line 24494
  $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 24495
  HEAP32[$24 >> 2] = $14; //@line 24496
  sp = STACKTOP; //@line 24497
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 24500
 $25 = HEAP32[$10 >> 2] | 0; //@line 24501
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 84 >> 2] | 0; //@line 24504
 $29 = HEAP32[$12 >> 2] | 0; //@line 24505
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24506
 FUNCTION_TABLE_viiii[$28 & 7]($25, $29, 135, $6); //@line 24507
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 24510
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 24511
  HEAP32[$30 >> 2] = $14; //@line 24512
  sp = STACKTOP; //@line 24513
  return;
 }
 ___async_unwind = 0; //@line 24516
 HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 24517
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 24518
 HEAP32[$30 >> 2] = $14; //@line 24519
 sp = STACKTOP; //@line 24520
 return;
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb_174($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27116
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27118
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27120
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27122
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27124
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27126
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27128
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27130
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27132
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27134
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$0 = $AsyncRetVal; //@line 27140
  $37 = ___async_retval; //@line 27141
  HEAP32[$37 >> 2] = $$0; //@line 27142
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 27145
 if (!$18) {
  $$0 = -3005; //@line 27148
  $37 = ___async_retval; //@line 27149
  HEAP32[$37 >> 2] = $$0; //@line 27150
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 27153
 $20 = HEAP32[$10 >> 2] | 0; //@line 27154
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 76 >> 2] | 0; //@line 27157
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 27158
 $24 = FUNCTION_TABLE_iiiiii[$23 & 7]($20, $18, $12, $14, $16) | 0; //@line 27159
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 151; //@line 27162
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 27163
  HEAP32[$25 >> 2] = $2; //@line 27164
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 27165
  HEAP32[$26 >> 2] = $4; //@line 27166
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 27167
  HEAP32[$27 >> 2] = $6; //@line 27168
  $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 27169
  HEAP32[$28 >> 2] = $8; //@line 27170
  $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 27171
  HEAP32[$29 >> 2] = $10; //@line 27172
  $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 27173
  HEAP32[$30 >> 2] = $12; //@line 27174
  $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 27175
  HEAP32[$31 >> 2] = $14; //@line 27176
  $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 27177
  HEAP32[$32 >> 2] = $16; //@line 27178
  sp = STACKTOP; //@line 27179
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 27183
 ___async_unwind = 0; //@line 27184
 HEAP32[$ReallocAsyncCtx2 >> 2] = 151; //@line 27185
 $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 27186
 HEAP32[$25 >> 2] = $2; //@line 27187
 $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 27188
 HEAP32[$26 >> 2] = $4; //@line 27189
 $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 27190
 HEAP32[$27 >> 2] = $6; //@line 27191
 $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 27192
 HEAP32[$28 >> 2] = $8; //@line 27193
 $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 27194
 HEAP32[$29 >> 2] = $10; //@line 27195
 $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 27196
 HEAP32[$30 >> 2] = $12; //@line 27197
 $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 27198
 HEAP32[$31 >> 2] = $14; //@line 27199
 $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 27200
 HEAP32[$32 >> 2] = $16; //@line 27201
 sp = STACKTOP; //@line 27202
 return;
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 213
 STACKTOP = STACKTOP + 16 | 0; //@line 214
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 214
 $4 = sp; //@line 215
 $$ = ($3 | 0) == 0 ? 10704 : $3; //@line 217
 $6 = HEAP32[$$ >> 2] | 0; //@line 218
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 224
   } else {
    label = 17; //@line 226
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 230
   if (!$2) {
    $$0 = -2; //@line 233
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 237
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 241
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 244
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_913() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 251
     $22 = HEAP8[$1 >> 0] | 0; //@line 252
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 256
      $$0 = 1; //@line 257
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 261
     if ($26 >>> 0 > 50) {
      label = 17; //@line 264
      break;
     }
     $30 = HEAP32[1012 + ($26 << 2) >> 2] | 0; //@line 269
     $31 = $2 + -1 | 0; //@line 270
     if (!$31) {
      $$2 = $30; //@line 273
     } else {
      $$03952 = $1 + 1 | 0; //@line 275
      $$04051 = $30; //@line 275
      $$04350 = $31; //@line 275
      label = 11; //@line 276
     }
    } else {
     $$03952 = $1; //@line 279
     $$04051 = $6; //@line 279
     $$04350 = $2; //@line 279
     label = 11; //@line 280
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 284
      $35 = ($33 & 255) >>> 3; //@line 286
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 293
       break L1;
      } else {
       $$1 = $$03952; //@line 296
       $$141 = $$04051; //@line 296
       $$144 = $$04350; //@line 296
       $44 = $33; //@line 296
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 300
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 303
       $$144 = $$144 + -1 | 0; //@line 304
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 311
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 314
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 320
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 324
      HEAP32[$$47 >> 2] = $$141; //@line 325
      $$0 = $2 - $$144 | 0; //@line 327
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 331
    $$0 = -2; //@line 332
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 337
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 339
  $$0 = -1; //@line 340
 }
 STACKTOP = sp; //@line 342
 return $$0 | 0; //@line 342
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24695
 STACKTOP = STACKTOP + 48 | 0; //@line 24696
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 24696
 $vararg_buffer3 = sp + 16 | 0; //@line 24697
 $vararg_buffer = sp; //@line 24698
 $3 = sp + 32 | 0; //@line 24699
 $4 = $0 + 28 | 0; //@line 24700
 $5 = HEAP32[$4 >> 2] | 0; //@line 24701
 HEAP32[$3 >> 2] = $5; //@line 24702
 $7 = $0 + 20 | 0; //@line 24704
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 24706
 HEAP32[$3 + 4 >> 2] = $9; //@line 24707
 HEAP32[$3 + 8 >> 2] = $1; //@line 24709
 HEAP32[$3 + 12 >> 2] = $2; //@line 24711
 $12 = $9 + $2 | 0; //@line 24712
 $13 = $0 + 60 | 0; //@line 24713
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 24716
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 24718
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 24720
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 24722
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 24726
  } else {
   $$04756 = 2; //@line 24728
   $$04855 = $12; //@line 24728
   $$04954 = $3; //@line 24728
   $27 = $17; //@line 24728
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 24734
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 24736
    $38 = $27 >>> 0 > $37 >>> 0; //@line 24737
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 24739
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 24741
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 24743
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 24746
    $44 = $$150 + 4 | 0; //@line 24747
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 24750
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 24753
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 24755
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 24757
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 24759
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 24762
     break L1;
    } else {
     $$04756 = $$1; //@line 24765
     $$04954 = $$150; //@line 24765
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 24769
   HEAP32[$4 >> 2] = 0; //@line 24770
   HEAP32[$7 >> 2] = 0; //@line 24771
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 24774
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 24777
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 24782
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 24788
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 24793
  $25 = $20; //@line 24794
  HEAP32[$4 >> 2] = $25; //@line 24795
  HEAP32[$7 >> 2] = $25; //@line 24796
  $$051 = $2; //@line 24797
 }
 STACKTOP = sp; //@line 24799
 return $$051 | 0; //@line 24799
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 416
 $5 = $1 + 8 | 0; //@line 417
 do {
  if (!(HEAP8[$5 >> 0] | 0)) {
   label = 7; //@line 422
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$5 >> 0] | 0)) {
     label = 7; //@line 430
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 436
   _puts(1750) | 0; //@line 437
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 37; //@line 440
    sp = STACKTOP; //@line 441
    return 0; //@line 442
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 444
   $$1 = -3012; //@line 445
   return $$1 | 0; //@line 446
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 108 >> 2] | 0; //@line 453
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 454
   $14 = FUNCTION_TABLE_iiii[$13 & 31]($0, $1, $2) | 0; //@line 455
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 38; //@line 458
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 460
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 462
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 464
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 466
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 468
    sp = STACKTOP; //@line 469
    return 0; //@line 470
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 472
   if (($14 | 0) < 0) {
    $$1 = $14; //@line 475
    return $$1 | 0; //@line 476
   } else {
    $21 = $1 + 12 | 0; //@line 478
    dest = $21; //@line 479
    src = $2; //@line 479
    stop = dest + 60 | 0; //@line 479
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 479
     dest = dest + 4 | 0; //@line 479
     src = src + 4 | 0; //@line 479
    } while ((dest | 0) < (stop | 0));
    HEAP16[$21 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 479
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 484
 _wait_ms(1); //@line 485
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 39; //@line 488
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 490
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 492
  HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 494
  HEAP32[$AsyncCtx10 + 16 >> 2] = $4; //@line 496
  sp = STACKTOP; //@line 497
  return 0; //@line 498
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 500
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 116 >> 2] | 0; //@line 503
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 504
 $29 = FUNCTION_TABLE_iiiii[$28 & 15]($0, $1, $3, $4) | 0; //@line 505
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 40; //@line 508
  sp = STACKTOP; //@line 509
  return 0; //@line 510
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 512
 $$1 = $29; //@line 513
 return $$1 | 0; //@line 514
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$010 = 0, $$1 = 0, $$byval_copy = 0, $14 = 0, $15 = 0, $24 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9802
 STACKTOP = STACKTOP + 112 | 0; //@line 9803
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 9803
 $$byval_copy = sp + 88 | 0; //@line 9804
 $4 = sp + 24 | 0; //@line 9805
 $5 = sp; //@line 9806
 if (!(HEAP8[$1 >> 0] | 0)) {
  $$010 = -3003; //@line 9810
  STACKTOP = sp; //@line 9811
  return $$010 | 0; //@line 9811
 }
 $9 = ($3 | 0) == 0; //@line 9814
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, $1) | 0) {
  if (!$9) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($2) | 0) != ($3 | 0)) {
    $$010 = -3009; //@line 9820
    STACKTOP = sp; //@line 9821
    return $$010 | 0; //@line 9821
   }
  }
  $$010 = 0; //@line 9824
  STACKTOP = sp; //@line 9825
  return $$010 | 0; //@line 9825
 }
 if ($9) {
  HEAP32[$5 >> 2] = 0; //@line 9828
  HEAP32[$5 + 4 >> 2] = 0; //@line 9828
  HEAP32[$5 + 8 >> 2] = 0; //@line 9828
  HEAP32[$5 + 12 >> 2] = 0; //@line 9828
  HEAP32[$5 + 16 >> 2] = 0; //@line 9828
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 9829
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 9829
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 9829
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 9829
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 9829
  __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 9830
  $14 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 9833
  $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9834
  $15 = FUNCTION_TABLE_ii[$14 & 31]($0) | 0; //@line 9835
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 98; //@line 9838
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 9840
   HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 9842
   HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 9844
   HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 9846
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 9848
   HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 9850
   sp = STACKTOP; //@line 9851
   STACKTOP = sp; //@line 9852
   return 0; //@line 9852
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9854
  if (__ZN13SocketAddress14set_ip_addressEPKc($4, $15) | 0) {
   $$0 = __ZNK13SocketAddress14get_ip_versionEv($4) | 0; //@line 9858
  } else {
   $$0 = 0; //@line 9860
  }
  $$1 = $$0; //@line 9862
 } else {
  $$1 = $3; //@line 9864
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9866
 $24 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $$1) | 0; //@line 9867
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 99; //@line 9870
  sp = STACKTOP; //@line 9871
  STACKTOP = sp; //@line 9872
  return 0; //@line 9872
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9874
 $$010 = $24; //@line 9875
 STACKTOP = sp; //@line 9876
 return $$010 | 0; //@line 9876
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_155($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25512
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25514
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25516
 $7 = $4 + 28 | 0; //@line 25517
 $8 = HEAP32[$7 >> 2] | 0; //@line 25518
 if (!$8) {
  $18 = $2 + 12 | 0; //@line 25521
  HEAP32[$18 >> 2] = 0; //@line 25522
  $19 = HEAP32[$4 >> 2] | 0; //@line 25523
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 25524
  __ZL28nsapi_dns_query_async_deletei($19); //@line 25525
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 220; //@line 25528
   $20 = $ReallocAsyncCtx14 + 4 | 0; //@line 25529
   HEAP32[$20 >> 2] = $18; //@line 25530
   $21 = $ReallocAsyncCtx14 + 8 | 0; //@line 25531
   HEAP32[$21 >> 2] = $2; //@line 25532
   $22 = $ReallocAsyncCtx14 + 12 | 0; //@line 25533
   HEAP32[$22 >> 2] = $6; //@line 25534
   sp = STACKTOP; //@line 25535
   return;
  }
  ___async_unwind = 0; //@line 25538
  HEAP32[$ReallocAsyncCtx14 >> 2] = 220; //@line 25539
  $20 = $ReallocAsyncCtx14 + 4 | 0; //@line 25540
  HEAP32[$20 >> 2] = $18; //@line 25541
  $21 = $ReallocAsyncCtx14 + 8 | 0; //@line 25542
  HEAP32[$21 >> 2] = $2; //@line 25543
  $22 = $ReallocAsyncCtx14 + 12 | 0; //@line 25544
  HEAP32[$22 >> 2] = $6; //@line 25545
  sp = STACKTOP; //@line 25546
  return;
 } else {
  $12 = HEAP32[$8 + 4 >> 2] | 0; //@line 25551
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 25552
  FUNCTION_TABLE_vii[$12 & 7]($2, $4 + 16 | 0); //@line 25553
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 219; //@line 25556
   $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 25557
   HEAP32[$13 >> 2] = $7; //@line 25558
   $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 25559
   HEAP32[$14 >> 2] = $2; //@line 25560
   $15 = $ReallocAsyncCtx5 + 12 | 0; //@line 25561
   HEAP32[$15 >> 2] = $4; //@line 25562
   $16 = $ReallocAsyncCtx5 + 16 | 0; //@line 25563
   HEAP32[$16 >> 2] = $2; //@line 25564
   $17 = $ReallocAsyncCtx5 + 20 | 0; //@line 25565
   HEAP32[$17 >> 2] = $6; //@line 25566
   sp = STACKTOP; //@line 25567
   return;
  }
  ___async_unwind = 0; //@line 25570
  HEAP32[$ReallocAsyncCtx5 >> 2] = 219; //@line 25571
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 25572
  HEAP32[$13 >> 2] = $7; //@line 25573
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 25574
  HEAP32[$14 >> 2] = $2; //@line 25575
  $15 = $ReallocAsyncCtx5 + 12 | 0; //@line 25576
  HEAP32[$15 >> 2] = $4; //@line 25577
  $16 = $ReallocAsyncCtx5 + 16 | 0; //@line 25578
  HEAP32[$16 >> 2] = $2; //@line 25579
  $17 = $ReallocAsyncCtx5 + 20 | 0; //@line 25580
  HEAP32[$17 >> 2] = $6; //@line 25581
  sp = STACKTOP; //@line 25582
  return;
 }
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13713
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13715
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13717
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13719
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13721
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13723
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13725
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13727
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13729
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 13735
  $34 = ___async_retval; //@line 13736
  HEAP32[$34 >> 2] = $$2; //@line 13737
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 13740
 if (!$16) {
  $$2 = -3005; //@line 13743
  $34 = ___async_retval; //@line 13744
  HEAP32[$34 >> 2] = $$2; //@line 13745
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 13748
 $18 = HEAP32[$8 >> 2] | 0; //@line 13749
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 80 >> 2] | 0; //@line 13752
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 13753
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 13754
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 13757
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 13758
  HEAP32[$23 >> 2] = $2; //@line 13759
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 13760
  HEAP32[$24 >> 2] = $4; //@line 13761
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 13762
  HEAP32[$25 >> 2] = $6; //@line 13763
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 13764
  HEAP32[$26 >> 2] = $8; //@line 13765
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 13766
  HEAP32[$27 >> 2] = $10; //@line 13767
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 13768
  HEAP32[$28 >> 2] = $12; //@line 13769
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 13770
  HEAP32[$29 >> 2] = $14; //@line 13771
  sp = STACKTOP; //@line 13772
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 13776
 ___async_unwind = 0; //@line 13777
 HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 13778
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 13779
 HEAP32[$23 >> 2] = $2; //@line 13780
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 13781
 HEAP32[$24 >> 2] = $4; //@line 13782
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 13783
 HEAP32[$25 >> 2] = $6; //@line 13784
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 13785
 HEAP32[$26 >> 2] = $8; //@line 13786
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 13787
 HEAP32[$27 >> 2] = $10; //@line 13788
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 13789
 HEAP32[$28 >> 2] = $12; //@line 13790
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 13791
 HEAP32[$29 >> 2] = $14; //@line 13792
 sp = STACKTOP; //@line 13793
 return;
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13577
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13579
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13581
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13583
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13585
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13587
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13589
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13591
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13593
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 13599
  $34 = ___async_retval; //@line 13600
  HEAP32[$34 >> 2] = $$2; //@line 13601
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 13604
 if (!$16) {
  $$2 = -3005; //@line 13607
  $34 = ___async_retval; //@line 13608
  HEAP32[$34 >> 2] = $$2; //@line 13609
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 13612
 $18 = HEAP32[$8 >> 2] | 0; //@line 13613
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 76 >> 2] | 0; //@line 13616
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 13617
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 13618
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 152; //@line 13621
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 13622
  HEAP32[$23 >> 2] = $2; //@line 13623
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 13624
  HEAP32[$24 >> 2] = $4; //@line 13625
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 13626
  HEAP32[$25 >> 2] = $6; //@line 13627
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 13628
  HEAP32[$26 >> 2] = $8; //@line 13629
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 13630
  HEAP32[$27 >> 2] = $10; //@line 13631
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 13632
  HEAP32[$28 >> 2] = $12; //@line 13633
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 13634
  HEAP32[$29 >> 2] = $14; //@line 13635
  sp = STACKTOP; //@line 13636
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 13640
 ___async_unwind = 0; //@line 13641
 HEAP32[$ReallocAsyncCtx >> 2] = 152; //@line 13642
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 13643
 HEAP32[$23 >> 2] = $2; //@line 13644
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 13645
 HEAP32[$24 >> 2] = $4; //@line 13646
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 13647
 HEAP32[$25 >> 2] = $6; //@line 13648
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 13649
 HEAP32[$26 >> 2] = $8; //@line 13650
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 13651
 HEAP32[$27 >> 2] = $10; //@line 13652
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 13653
 HEAP32[$28 >> 2] = $12; //@line 13654
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 13655
 HEAP32[$29 >> 2] = $14; //@line 13656
 sp = STACKTOP; //@line 13657
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25101
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25105
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25107
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25109
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25111
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25113
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25114
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 25118
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 25119
  FUNCTION_TABLE_vi[$16 & 511]($6); //@line 25120
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 108; //@line 25123
   $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 25124
   HEAP32[$17 >> 2] = $4; //@line 25125
   $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 25126
   HEAP32[$18 >> 2] = $8; //@line 25127
   $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 25128
   HEAP32[$19 >> 2] = $10; //@line 25129
   $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 25130
   HEAP32[$20 >> 2] = $12; //@line 25131
   sp = STACKTOP; //@line 25132
   return;
  }
  ___async_unwind = 0; //@line 25135
  HEAP32[$ReallocAsyncCtx7 >> 2] = 108; //@line 25136
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 25137
  HEAP32[$17 >> 2] = $4; //@line 25138
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 25139
  HEAP32[$18 >> 2] = $8; //@line 25140
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 25141
  HEAP32[$19 >> 2] = $10; //@line 25142
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 25143
  HEAP32[$20 >> 2] = $12; //@line 25144
  sp = STACKTOP; //@line 25145
  return;
 }
 $21 = HEAP32[$4 >> 2] | 0; //@line 25148
 if (!$21) {
  HEAP32[___async_retval >> 2] = $10; //@line 25152
  return;
 }
 $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 25156
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 25157
 FUNCTION_TABLE_vi[$24 & 511]($8); //@line 25158
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 25161
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 25162
  HEAP32[$25 >> 2] = $8; //@line 25163
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 25164
  HEAP32[$26 >> 2] = $10; //@line 25165
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 25166
  HEAP32[$27 >> 2] = $12; //@line 25167
  sp = STACKTOP; //@line 25168
  return;
 }
 ___async_unwind = 0; //@line 25171
 HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 25172
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 25173
 HEAP32[$25 >> 2] = $8; //@line 25174
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 25175
 HEAP32[$26 >> 2] = $10; //@line 25176
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 25177
 HEAP32[$27 >> 2] = $12; //@line 25178
 sp = STACKTOP; //@line 25179
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_10($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 11269
 STACKTOP = STACKTOP + 32 | 0; //@line 11270
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11270
 $$byval_copy = sp; //@line 11271
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11273
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11275
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11277
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11279
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11281
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11283
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11285
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11287
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11289
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11291
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11293
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11295
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11297
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  HEAP8[$8 >> 0] = 5; //@line 11302
  $31 = 608 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 11305
  HEAP32[$$byval_copy >> 2] = HEAP32[$31 >> 2]; //@line 11306
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 11306
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$31 + 8 >> 2]; //@line 11306
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$31 + 12 >> 2]; //@line 11306
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$31 + 16 >> 2]; //@line 11306
  __ZN13SocketAddress8set_addrE10nsapi_addr($14, $$byval_copy); //@line 11307
 }
 __ZN13SocketAddress8set_portEt($14, 53); //@line 11309
 $32 = HEAP32[$20 >> 2] | 0; //@line 11310
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 11311
 $33 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($32, $14, $4, $22) | 0; //@line 11312
 if (!___async) {
  HEAP32[___async_retval >> 2] = $33; //@line 11316
  ___async_unwind = 0; //@line 11317
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 253; //@line 11319
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $4; //@line 11321
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $10; //@line 11323
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $2; //@line 11325
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $6; //@line 11327
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $26; //@line 11329
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $8; //@line 11331
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $12; //@line 11333
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $14; //@line 11335
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $16; //@line 11337
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $18; //@line 11339
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $20; //@line 11341
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $22; //@line 11343
 HEAP32[$ReallocAsyncCtx12 + 52 >> 2] = $24; //@line 11345
 sp = STACKTOP; //@line 11346
 STACKTOP = sp; //@line 11347
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_141($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24527
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24533
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24535
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24537
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24539
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24541
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24542
 $15 = $$pre$i$i; //@line 24543
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 24544
 if (!$$pre$i$i) {
  $24 = HEAP32[$8 >> 2] | 0; //@line 24547
  $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 84 >> 2] | 0; //@line 24550
  $28 = HEAP32[$10 >> 2] | 0; //@line 24551
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24552
  FUNCTION_TABLE_viiii[$27 & 7]($24, $28, 135, $12); //@line 24553
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 24556
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 24557
   HEAP32[$29 >> 2] = $14; //@line 24558
   sp = STACKTOP; //@line 24559
   return;
  }
  ___async_unwind = 0; //@line 24562
  HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 24563
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 24564
  HEAP32[$29 >> 2] = $14; //@line 24565
  sp = STACKTOP; //@line 24566
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 24570
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 24571
  FUNCTION_TABLE_vi[$18 & 511]($6); //@line 24572
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 134; //@line 24575
   $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 24576
   HEAP32[$19 >> 2] = $6; //@line 24577
   $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 24578
   HEAP32[$20 >> 2] = $8; //@line 24579
   $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 24580
   HEAP32[$21 >> 2] = $10; //@line 24581
   $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 24582
   HEAP32[$22 >> 2] = $12; //@line 24583
   $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 24584
   HEAP32[$23 >> 2] = $14; //@line 24585
   sp = STACKTOP; //@line 24586
   return;
  }
  ___async_unwind = 0; //@line 24589
  HEAP32[$ReallocAsyncCtx5 >> 2] = 134; //@line 24590
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 24591
  HEAP32[$19 >> 2] = $6; //@line 24592
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 24593
  HEAP32[$20 >> 2] = $8; //@line 24594
  $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 24595
  HEAP32[$21 >> 2] = $10; //@line 24596
  $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 24597
  HEAP32[$22 >> 2] = $12; //@line 24598
  $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 24599
  HEAP32[$23 >> 2] = $14; //@line 24600
  sp = STACKTOP; //@line 24601
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_192($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28360
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28364
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28366
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28368
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28370
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28372
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28374
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28376
 $$pre = HEAP32[$4 >> 2] | 0; //@line 28378
 $17 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 28379
 if ($$pre | 0) {
  $20 = HEAP32[$$pre + 4 >> 2] | 0; //@line 28383
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 28384
  FUNCTION_TABLE_vii[$20 & 7]($14, $12); //@line 28385
  if (!___async) {
   ___async_unwind = 0; //@line 28388
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 28390
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $16; //@line 28392
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 28394
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 28396
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $10; //@line 28398
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $17; //@line 28400
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $14; //@line 28402
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 28404
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $12; //@line 28406
  sp = STACKTOP; //@line 28407
  return;
 }
 $29 = $8 + 12 | 0; //@line 28410
 HEAP32[$29 >> 2] = 0; //@line 28411
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 28412
 $30 = FUNCTION_TABLE_iiii[$17 & 31]($6, $10, $8) | 0; //@line 28413
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 272; //@line 28416
  $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 28417
  HEAP32[$31 >> 2] = $29; //@line 28418
  $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 28419
  HEAP32[$32 >> 2] = $14; //@line 28420
  $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 28421
  HEAP32[$33 >> 2] = $4; //@line 28422
  $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 28423
  HEAP32[$34 >> 2] = $12; //@line 28424
  sp = STACKTOP; //@line 28425
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 28429
 ___async_unwind = 0; //@line 28430
 HEAP32[$ReallocAsyncCtx3 >> 2] = 272; //@line 28431
 $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 28432
 HEAP32[$31 >> 2] = $29; //@line 28433
 $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 28434
 HEAP32[$32 >> 2] = $14; //@line 28435
 $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 28436
 HEAP32[$33 >> 2] = $4; //@line 28437
 $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 28438
 HEAP32[$34 >> 2] = $12; //@line 28439
 sp = STACKTOP; //@line 28440
 return;
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 19500
 STACKTOP = STACKTOP + 128 | 0; //@line 19501
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 19501
 $2 = sp; //@line 19502
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 19503
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 19504
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 297; //@line 19507
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 19509
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 19511
  sp = STACKTOP; //@line 19512
  STACKTOP = sp; //@line 19513
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19515
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 19518
  return;
 }
 if (!(HEAP32[2514] | 0)) {
  _serial_init(10060, 2, 3); //@line 19523
  $$01213 = 0; //@line 19524
  $$014 = 0; //@line 19524
 } else {
  $$01213 = 0; //@line 19526
  $$014 = 0; //@line 19526
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 19530
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19535
   _serial_putc(10060, 13); //@line 19536
   if (___async) {
    label = 8; //@line 19539
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19542
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19545
  _serial_putc(10060, $$01213 << 24 >> 24); //@line 19546
  if (___async) {
   label = 11; //@line 19549
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19552
  $24 = $$014 + 1 | 0; //@line 19553
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 19556
   break;
  } else {
   $$014 = $24; //@line 19559
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 298; //@line 19563
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 19565
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 19567
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 19569
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 19571
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 19573
  sp = STACKTOP; //@line 19574
  STACKTOP = sp; //@line 19575
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 299; //@line 19578
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 19580
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 19582
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 19584
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 19586
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 19588
  sp = STACKTOP; //@line 19589
  STACKTOP = sp; //@line 19590
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 19593
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_173($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26909
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26913
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26915
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26917
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26919
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 26921
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26923
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26925
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26927
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26929
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 26932
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26934
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 26938
   $27 = $6 + 24 | 0; //@line 26939
   $28 = $4 + 8 | 0; //@line 26940
   $29 = $6 + 54 | 0; //@line 26941
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 26971
    HEAP8[$14 >> 0] = 0; //@line 26972
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 26973
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 26974
    if (!___async) {
     ___async_unwind = 0; //@line 26977
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 358; //@line 26979
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 26981
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 26983
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 26985
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 26987
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 26989
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 26991
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 26993
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 26995
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 26997
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 26999
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 27001
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 27003
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 27005
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 27008
    sp = STACKTOP; //@line 27009
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 27014
 HEAP8[$14 >> 0] = $12; //@line 27015
 return;
}
function _randLIB_seed_random() {
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $37 = 0, $38 = 0, $39 = 0, $43 = 0, $44 = 0, $45 = 0, $49 = 0, $50 = 0, $51 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0;
 $0 = _arm_random_seed_get() | 0; //@line 1670
 $1 = _arm_random_seed_get() | 0; //@line 1671
 $2 = 9776; //@line 1672
 $9 = $0 ^ HEAP32[$2 + 4 >> 2]; //@line 1679
 $10 = 9776; //@line 1680
 HEAP32[$10 >> 2] = $1 ^ HEAP32[$2 >> 2]; //@line 1682
 HEAP32[$10 + 4 >> 2] = $9; //@line 1685
 $14 = _arm_random_seed_get() | 0; //@line 1686
 $15 = _arm_random_seed_get() | 0; //@line 1687
 $16 = 9784; //@line 1688
 $22 = $15 ^ HEAP32[$16 >> 2]; //@line 1694
 $23 = $14 ^ HEAP32[$16 + 4 >> 2]; //@line 1695
 $24 = 9784; //@line 1696
 HEAP32[$24 >> 2] = $22; //@line 1698
 HEAP32[$24 + 4 >> 2] = $23; //@line 1701
 $28 = 9776; //@line 1702
 if (!((HEAP32[$28 >> 2] | 0) == ($22 | 0) ? (HEAP32[$28 + 4 >> 2] | 0) == ($23 | 0) : 0)) {
  return;
 }
 $37 = _i64Add($22 | 0, $23 | 0, 2135587861, -1640531527) | 0; //@line 1714
 $38 = tempRet0; //@line 1715
 $39 = _bitshift64Lshr($37 | 0, $38 | 0, 30) | 0; //@line 1716
 $43 = ___muldi3($39 ^ $37 | 0, tempRet0 ^ $38 | 0, 484763065, -1084733587) | 0; //@line 1720
 $44 = tempRet0; //@line 1721
 $45 = _bitshift64Lshr($43 | 0, $44 | 0, 27) | 0; //@line 1722
 $49 = ___muldi3($45 ^ $43 | 0, tempRet0 ^ $44 | 0, 321982955, -1798288965) | 0; //@line 1726
 $50 = tempRet0; //@line 1727
 $51 = _bitshift64Lshr($49 | 0, $50 | 0, 31) | 0; //@line 1728
 $55 = $49 ^ $22 ^ $51; //@line 1732
 $56 = $50 ^ $23 ^ tempRet0; //@line 1733
 $57 = 9776; //@line 1734
 HEAP32[$57 >> 2] = $55; //@line 1736
 HEAP32[$57 + 4 >> 2] = $56; //@line 1739
 $61 = _i64Add($22 | 0, $23 | 0, -23791574, 1013904242) | 0; //@line 1740
 $62 = tempRet0; //@line 1741
 $63 = _bitshift64Lshr($61 | 0, $62 | 0, 30) | 0; //@line 1742
 $67 = ___muldi3($63 ^ $61 | 0, tempRet0 ^ $62 | 0, 484763065, -1084733587) | 0; //@line 1746
 $68 = tempRet0; //@line 1747
 $69 = _bitshift64Lshr($67 | 0, $68 | 0, 27) | 0; //@line 1748
 $73 = ___muldi3($69 ^ $67 | 0, tempRet0 ^ $68 | 0, 321982955, -1798288965) | 0; //@line 1752
 $74 = tempRet0; //@line 1753
 $75 = _bitshift64Lshr($73 | 0, $74 | 0, 31) | 0; //@line 1754
 $79 = $75 ^ $73 ^ $22; //@line 1758
 $80 = tempRet0 ^ $74 ^ $23; //@line 1759
 $81 = 9784; //@line 1760
 HEAP32[$81 >> 2] = $79; //@line 1762
 HEAP32[$81 + 4 >> 2] = $80; //@line 1765
 if (!(($79 | $55 | 0) == 0 & ($80 | $56 | 0) == 0)) {
  return;
 }
 $90 = 9776; //@line 1774
 HEAP32[$90 >> 2] = 1; //@line 1776
 HEAP32[$90 + 4 >> 2] = 0; //@line 1779
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26793
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26797
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26799
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26801
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26803
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 26805
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26807
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26809
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26811
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26813
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26815
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26817
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26819
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 26822
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 26823
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 26856
    HEAP8[$14 >> 0] = 0; //@line 26857
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 26858
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 26859
    if (!___async) {
     ___async_unwind = 0; //@line 26862
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 358; //@line 26864
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 26866
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 26868
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 26870
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 26872
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 26874
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 26876
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 26878
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 26880
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 26882
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 26884
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 26886
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 26888
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 26890
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 26893
    sp = STACKTOP; //@line 26894
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 26899
 HEAP8[$14 >> 0] = $12; //@line 26900
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 32983
 }
 ret = dest | 0; //@line 32986
 dest_end = dest + num | 0; //@line 32987
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 32991
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 32992
   dest = dest + 1 | 0; //@line 32993
   src = src + 1 | 0; //@line 32994
   num = num - 1 | 0; //@line 32995
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 32997
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 32998
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 33000
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 33001
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 33002
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 33003
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 33004
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 33005
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 33006
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 33007
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 33008
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 33009
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 33010
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 33011
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 33012
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 33013
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 33014
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 33015
   dest = dest + 64 | 0; //@line 33016
   src = src + 64 | 0; //@line 33017
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 33020
   dest = dest + 4 | 0; //@line 33021
   src = src + 4 | 0; //@line 33022
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 33026
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 33028
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 33029
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 33030
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 33031
   dest = dest + 4 | 0; //@line 33032
   src = src + 4 | 0; //@line 33033
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 33038
  dest = dest + 1 | 0; //@line 33039
  src = src + 1 | 0; //@line 33040
 }
 return ret | 0; //@line 33042
}
function __Z17recv_coap_messagev__async_cb_82($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $41 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13196
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13198
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13202
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13204
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13208
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13210
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13212
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13214
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13216
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13218
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13220
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13222
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13224
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13226
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13228
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13230
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13232
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 13234
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13236
 if (($AsyncRetVal | 0) <= 0) {
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 13239
  _printf(6256, $8) | 0; //@line 13240
  _free($6); //@line 13241
  return;
 }
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 13244
 _printf(6083, $2) | 0; //@line 13245
 $41 = HEAP32[2531] | 0; //@line 13246
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 13248
 $43 = _sn_coap_parser($41, $AsyncRetVal & 65535, $6, 748) | 0; //@line 13249
 if (!___async) {
  HEAP32[___async_retval >> 2] = $43; //@line 13253
  ___async_unwind = 0; //@line 13254
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 309; //@line 13256
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $14; //@line 13258
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $16; //@line 13260
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $18; //@line 13262
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $20; //@line 13264
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $22; //@line 13266
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $24; //@line 13268
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $26; //@line 13270
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $28; //@line 13272
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $30; //@line 13274
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $32; //@line 13276
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $34; //@line 13278
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $36; //@line 13280
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $38; //@line 13282
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $6; //@line 13284
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $12; //@line 13286
 sp = STACKTOP; //@line 13287
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1280
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1286
   _wait_ms(10); //@line 1287
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 56; //@line 1290
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1292
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1294
    sp = STACKTOP; //@line 1295
    return 0; //@line 1296
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1298
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 1304
 $9 = $0 + 156 | 0; //@line 1305
 _equeue_mutex_lock($9); //@line 1306
 $10 = $0 + 24 | 0; //@line 1307
 $11 = HEAP32[$10 >> 2] | 0; //@line 1308
 L7 : do {
  if (!$11) {
   label = 11; //@line 1312
  } else {
   $$03842$i = $10; //@line 1314
   $14 = $11; //@line 1314
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 1321
    $21 = HEAP32[$20 >> 2] | 0; //@line 1322
    if (!$21) {
     label = 11; //@line 1325
     break L7;
    } else {
     $$03842$i = $20; //@line 1328
     $14 = $21; //@line 1328
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 1332
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 1335
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 1337
    $$038$sink$i = $17 + 8 | 0; //@line 1339
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 1343
   _equeue_mutex_unlock($9); //@line 1344
   $$1$i9 = $14; //@line 1345
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 1350
   $24 = HEAP32[$23 >> 2] | 0; //@line 1351
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 1354
    $$0 = 0; //@line 1355
    return $$0 | 0; //@line 1356
   } else {
    $26 = $0 + 32 | 0; //@line 1358
    $27 = HEAP32[$26 >> 2] | 0; //@line 1359
    HEAP32[$26 >> 2] = $27 + $8; //@line 1361
    HEAP32[$23 >> 2] = $24 - $8; //@line 1363
    HEAP32[$27 >> 2] = $8; //@line 1364
    HEAP8[$27 + 4 >> 0] = 1; //@line 1366
    _equeue_mutex_unlock($9); //@line 1367
    if (!$27) {
     $$0 = 0; //@line 1370
    } else {
     $$1$i9 = $27; //@line 1372
     break;
    }
    return $$0 | 0; //@line 1375
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 1380
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 1382
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 1384
 $$0 = $$1$i9 + 36 | 0; //@line 1386
 return $$0 | 0; //@line 1387
}
function ___stpcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $9 = 0, label = 0;
 $2 = $1; //@line 6915
 L1 : do {
  if (!(($2 ^ $0) & 3)) {
   if (!($2 & 3)) {
    $$026$lcssa = $1; //@line 6925
    $$027$lcssa = $0; //@line 6925
   } else {
    $$02642 = $1; //@line 6927
    $$02741 = $0; //@line 6927
    while (1) {
     $9 = HEAP8[$$02642 >> 0] | 0; //@line 6929
     HEAP8[$$02741 >> 0] = $9; //@line 6930
     if (!($9 << 24 >> 24)) {
      $$029 = $$02741; //@line 6933
      break L1;
     }
     $11 = $$02642 + 1 | 0; //@line 6936
     $12 = $$02741 + 1 | 0; //@line 6937
     if (!($11 & 3)) {
      $$026$lcssa = $11; //@line 6942
      $$027$lcssa = $12; //@line 6942
      break;
     } else {
      $$02642 = $11; //@line 6945
      $$02741 = $12; //@line 6945
     }
    }
   }
   $16 = HEAP32[$$026$lcssa >> 2] | 0; //@line 6949
   if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
    $$02536 = $$027$lcssa; //@line 6956
    $$037 = $$026$lcssa; //@line 6956
    $24 = $16; //@line 6956
    while (1) {
     $22 = $$037 + 4 | 0; //@line 6958
     $23 = $$02536 + 4 | 0; //@line 6959
     HEAP32[$$02536 >> 2] = $24; //@line 6960
     $24 = HEAP32[$22 >> 2] | 0; //@line 6961
     if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
      $$0$lcssa = $22; //@line 6970
      $$025$lcssa = $23; //@line 6970
      break;
     } else {
      $$02536 = $23; //@line 6968
      $$037 = $22; //@line 6968
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa; //@line 6975
    $$025$lcssa = $$027$lcssa; //@line 6975
   }
   $$1$ph = $$0$lcssa; //@line 6977
   $$128$ph = $$025$lcssa; //@line 6977
   label = 8; //@line 6978
  } else {
   $$1$ph = $1; //@line 6980
   $$128$ph = $0; //@line 6980
   label = 8; //@line 6981
  }
 } while (0);
 if ((label | 0) == 8) {
  $31 = HEAP8[$$1$ph >> 0] | 0; //@line 6985
  HEAP8[$$128$ph >> 0] = $31; //@line 6986
  if (!($31 << 24 >> 24)) {
   $$029 = $$128$ph; //@line 6989
  } else {
   $$12834 = $$128$ph; //@line 6991
   $$135 = $$1$ph; //@line 6991
   while (1) {
    $$135 = $$135 + 1 | 0; //@line 6993
    $34 = $$12834 + 1 | 0; //@line 6994
    $35 = HEAP8[$$135 >> 0] | 0; //@line 6995
    HEAP8[$34 >> 0] = $35; //@line 6996
    if (!($35 << 24 >> 24)) {
     $$029 = $34; //@line 6999
     break;
    } else {
     $$12834 = $34; //@line 7002
    }
   }
  }
 }
 return $$029 | 0; //@line 7007
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_36($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9970
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9974
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9976
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9978
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9980
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9981
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 9985
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 9986
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 9987
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 126; //@line 9990
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 9991
   HEAP32[$14 >> 2] = $4; //@line 9992
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 9993
   HEAP32[$15 >> 2] = $6; //@line 9994
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 9995
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 9996
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 9997
   HEAP32[$17 >> 2] = $8; //@line 9998
   sp = STACKTOP; //@line 9999
   return;
  }
  ___async_unwind = 0; //@line 10002
  HEAP32[$ReallocAsyncCtx4 >> 2] = 126; //@line 10003
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 10004
  HEAP32[$14 >> 2] = $4; //@line 10005
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 10006
  HEAP32[$15 >> 2] = $6; //@line 10007
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 10008
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 10009
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 10010
  HEAP32[$17 >> 2] = $8; //@line 10011
  sp = STACKTOP; //@line 10012
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 10015
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10019
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 10023
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10024
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 10025
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 127; //@line 10028
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 10029
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 10030
  sp = STACKTOP; //@line 10031
  return;
 }
 ___async_unwind = 0; //@line 10034
 HEAP32[$ReallocAsyncCtx5 >> 2] = 127; //@line 10035
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 10036
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 10037
 sp = STACKTOP; //@line 10038
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_217($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 31567
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31569
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31571
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31573
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31575
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31577
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31579
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31581
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31583
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31585
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31587
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31589
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31591
 if (!$AsyncRetVal) {
  HEAP32[___async_retval >> 2] = -3007; //@line 31595
  return;
 }
 $25 = $AsyncRetVal + 16 | 0; //@line 31598
 HEAP32[$25 >> 2] = 0; //@line 31599
 HEAP32[$25 + 4 >> 2] = 0; //@line 31599
 HEAP32[$25 + 8 >> 2] = 0; //@line 31599
 HEAP32[$25 + 12 >> 2] = 0; //@line 31599
 HEAP32[$25 + 16 >> 2] = 0; //@line 31599
 HEAP32[$25 + 20 >> 2] = 0; //@line 31599
 HEAP32[$25 + 24 >> 2] = 0; //@line 31599
 HEAP32[$25 + 28 >> 2] = 0; //@line 31599
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(52) | 0; //@line 31603
 $29 = __ZnajRKSt9nothrow_t(($20 | 0) < -1 ? -1 : $20 + 1 | 0, 12017) | 0; //@line 31604
 if (!___async) {
  HEAP32[___async_retval >> 2] = $29; //@line 31608
  ___async_unwind = 0; //@line 31609
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 172; //@line 31611
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $AsyncRetVal; //@line 31613
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $2; //@line 31615
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $4; //@line 31617
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $6; //@line 31619
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $8; //@line 31621
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $10; //@line 31623
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $12; //@line 31625
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $14; //@line 31627
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $25; //@line 31629
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $16; //@line 31631
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $18; //@line 31633
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $22; //@line 31635
 sp = STACKTOP; //@line 31636
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_189($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28236
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28240
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28242
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28244
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28246
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28247
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 28251
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 28252
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 28253
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 28256
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 28257
   HEAP32[$14 >> 2] = $4; //@line 28258
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 28259
   HEAP32[$15 >> 2] = $6; //@line 28260
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 28261
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 28262
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 28263
   HEAP32[$17 >> 2] = $8; //@line 28264
   sp = STACKTOP; //@line 28265
   return;
  }
  ___async_unwind = 0; //@line 28268
  HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 28269
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 28270
  HEAP32[$14 >> 2] = $4; //@line 28271
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 28272
  HEAP32[$15 >> 2] = $6; //@line 28273
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 28274
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 28275
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 28276
  HEAP32[$17 >> 2] = $8; //@line 28277
  sp = STACKTOP; //@line 28278
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 28281
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28285
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 28289
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28290
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 28291
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 28294
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 28295
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 28296
  sp = STACKTOP; //@line 28297
  return;
 }
 ___async_unwind = 0; //@line 28300
 HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 28301
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 28302
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 28303
 sp = STACKTOP; //@line 28304
 return;
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16084
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 16086
 $7 = $4 + 156 | 0; //@line 16087
 _equeue_mutex_lock($7); //@line 16088
 $8 = $4 + 24 | 0; //@line 16089
 $9 = HEAP32[$8 >> 2] | 0; //@line 16090
 L3 : do {
  if (!$9) {
   label = 9; //@line 16094
  } else {
   $$03842$i = $8; //@line 16096
   $12 = $9; //@line 16096
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 16103
    $19 = HEAP32[$18 >> 2] | 0; //@line 16104
    if (!$19) {
     label = 9; //@line 16107
     break L3;
    } else {
     $$03842$i = $18; //@line 16110
     $12 = $19; //@line 16110
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 16114
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 16117
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 16119
    $$038$sink$i = $15 + 8 | 0; //@line 16121
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 16125
   _equeue_mutex_unlock($7); //@line 16126
   $$1$i9 = $12; //@line 16127
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 16132
   $22 = HEAP32[$21 >> 2] | 0; //@line 16133
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 16136
    $$0 = 0; //@line 16137
    $34 = ___async_retval; //@line 16138
    HEAP32[$34 >> 2] = $$0; //@line 16139
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 16142
    $25 = HEAP32[$24 >> 2] | 0; //@line 16143
    HEAP32[$24 >> 2] = $25 + $6; //@line 16145
    HEAP32[$21 >> 2] = $22 - $6; //@line 16147
    HEAP32[$25 >> 2] = $6; //@line 16148
    HEAP8[$25 + 4 >> 0] = 1; //@line 16150
    _equeue_mutex_unlock($7); //@line 16151
    if (!$25) {
     $$0 = 0; //@line 16154
    } else {
     $$1$i9 = $25; //@line 16156
     break;
    }
    $34 = ___async_retval; //@line 16159
    HEAP32[$34 >> 2] = $$0; //@line 16160
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 16166
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 16168
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 16170
 $$0 = $$1$i9 + 36 | 0; //@line 16172
 $34 = ___async_retval; //@line 16173
 HEAP32[$34 >> 2] = $$0; //@line 16174
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7647
 STACKTOP = STACKTOP + 64 | 0; //@line 7648
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 7648
 $3 = sp; //@line 7649
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 7652
 } else {
  if (!$1) {
   $$2 = 0; //@line 7656
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7658
   $6 = ___dynamic_cast($1, 128, 112, 0) | 0; //@line 7659
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 347; //@line 7662
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 7664
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7666
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 7668
    sp = STACKTOP; //@line 7669
    STACKTOP = sp; //@line 7670
    return 0; //@line 7670
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7672
   if (!$6) {
    $$2 = 0; //@line 7675
   } else {
    dest = $3 + 4 | 0; //@line 7678
    stop = dest + 52 | 0; //@line 7678
    do {
     HEAP32[dest >> 2] = 0; //@line 7678
     dest = dest + 4 | 0; //@line 7678
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 7679
    HEAP32[$3 + 8 >> 2] = $0; //@line 7681
    HEAP32[$3 + 12 >> 2] = -1; //@line 7683
    HEAP32[$3 + 48 >> 2] = 1; //@line 7685
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 7688
    $18 = HEAP32[$2 >> 2] | 0; //@line 7689
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7690
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 7691
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 348; //@line 7694
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 7696
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7698
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 7700
     sp = STACKTOP; //@line 7701
     STACKTOP = sp; //@line 7702
     return 0; //@line 7702
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7704
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 7711
     $$0 = 1; //@line 7712
    } else {
     $$0 = 0; //@line 7714
    }
    $$2 = $$0; //@line 7716
   }
  }
 }
 STACKTOP = sp; //@line 7720
 return $$2 | 0; //@line 7720
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 622
 STACKTOP = STACKTOP + 48 | 0; //@line 623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 623
 $$byval_copy = sp + 20 | 0; //@line 624
 $3 = sp; //@line 625
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 626
 $4 = __Znwj(76) | 0; //@line 627
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 44; //@line 630
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 632
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 634
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 636
  sp = STACKTOP; //@line 637
  STACKTOP = sp; //@line 638
  return 0; //@line 638
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 640
 dest = $4; //@line 641
 stop = dest + 76 | 0; //@line 641
 do {
  HEAP32[dest >> 2] = 0; //@line 641
  dest = dest + 4 | 0; //@line 641
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 642
 HEAP32[$3 >> 2] = 0; //@line 643
 HEAP32[$3 + 4 >> 2] = 0; //@line 643
 HEAP32[$3 + 8 >> 2] = 0; //@line 643
 HEAP32[$3 + 12 >> 2] = 0; //@line 643
 HEAP32[$3 + 16 >> 2] = 0; //@line 643
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 644
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 644
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 644
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 644
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 644
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 645
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 646
 if (($9 | 0) == -1) {
  $$0$i = -3001; //@line 649
  STACKTOP = sp; //@line 650
  return $$0$i | 0; //@line 650
 }
 HEAP32[$4 >> 2] = $9; //@line 652
 HEAP8[$4 + 8 >> 0] = 0; //@line 654
 HEAP32[$4 + 4 >> 2] = $2; //@line 656
 HEAP32[$1 >> 2] = $4; //@line 657
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 658
 _wait_ms(1); //@line 659
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 45; //@line 662
  sp = STACKTOP; //@line 663
  STACKTOP = sp; //@line 664
  return 0; //@line 664
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 666
 $$0$i = 0; //@line 667
 STACKTOP = sp; //@line 668
 return $$0$i | 0; //@line 668
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8979
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 8985
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 8989
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 8990
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8991
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 8992
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 364; //@line 8995
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 8997
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 8999
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 9001
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 9003
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 9005
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 9007
    sp = STACKTOP; //@line 9008
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9011
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 9015
    $$0 = $0 + 24 | 0; //@line 9016
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9018
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 9019
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9024
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 9030
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 9033
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 365; //@line 9038
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 9040
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 9042
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 9044
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9046
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 9048
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 9050
    sp = STACKTOP; //@line 9051
    return;
   }
  }
 } while (0);
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 219
 STACKTOP = STACKTOP + 48 | 0; //@line 220
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 220
 $$byval_copy = sp + 20 | 0; //@line 221
 $3 = sp; //@line 222
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 223
 $4 = __Znwj(76) | 0; //@line 224
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 31; //@line 227
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 229
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 231
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 233
  sp = STACKTOP; //@line 234
  STACKTOP = sp; //@line 235
  return 0; //@line 235
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 237
 dest = $4; //@line 238
 stop = dest + 76 | 0; //@line 238
 do {
  HEAP32[dest >> 2] = 0; //@line 238
  dest = dest + 4 | 0; //@line 238
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 239
 HEAP32[$3 >> 2] = 0; //@line 240
 HEAP32[$3 + 4 >> 2] = 0; //@line 240
 HEAP32[$3 + 8 >> 2] = 0; //@line 240
 HEAP32[$3 + 12 >> 2] = 0; //@line 240
 HEAP32[$3 + 16 >> 2] = 0; //@line 240
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 241
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 241
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 241
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 241
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 241
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 242
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 243
 if (($9 | 0) == -1) {
  $$0 = -3001; //@line 246
  STACKTOP = sp; //@line 247
  return $$0 | 0; //@line 247
 }
 HEAP32[$4 >> 2] = $9; //@line 249
 HEAP8[$4 + 8 >> 0] = 0; //@line 251
 HEAP32[$4 + 4 >> 2] = $2; //@line 253
 HEAP32[$1 >> 2] = $4; //@line 254
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 255
 _wait_ms(1); //@line 256
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 32; //@line 259
  sp = STACKTOP; //@line 260
  STACKTOP = sp; //@line 261
  return 0; //@line 261
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 263
 $$0 = 0; //@line 264
 STACKTOP = sp; //@line 265
 return $$0 | 0; //@line 265
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 6809
 STACKTOP = STACKTOP + 128 | 0; //@line 6810
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 6810
 $4 = sp + 124 | 0; //@line 6811
 $5 = sp; //@line 6812
 dest = $5; //@line 6813
 src = 1500; //@line 6813
 stop = dest + 124 | 0; //@line 6813
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 6813
  dest = dest + 4 | 0; //@line 6813
  src = src + 4 | 0; //@line 6813
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 6819
   $$015 = 1; //@line 6819
   label = 4; //@line 6820
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 6823
   $$0 = -1; //@line 6824
  }
 } else {
  $$014 = $0; //@line 6827
  $$015 = $1; //@line 6827
  label = 4; //@line 6828
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 6832
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 6834
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 6836
  $14 = $5 + 20 | 0; //@line 6837
  HEAP32[$14 >> 2] = $$014; //@line 6838
  HEAP32[$5 + 44 >> 2] = $$014; //@line 6840
  $16 = $$014 + $$$015 | 0; //@line 6841
  $17 = $5 + 16 | 0; //@line 6842
  HEAP32[$17 >> 2] = $16; //@line 6843
  HEAP32[$5 + 28 >> 2] = $16; //@line 6845
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6846
  $19 = _vfprintf($5, $2, $3) | 0; //@line 6847
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 332; //@line 6850
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 6852
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6854
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 6856
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 6858
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 6860
   sp = STACKTOP; //@line 6861
   STACKTOP = sp; //@line 6862
   return 0; //@line 6862
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6864
  if (!$$$015) {
   $$0 = $19; //@line 6867
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 6869
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 6874
   $$0 = $19; //@line 6875
  }
 }
 STACKTOP = sp; //@line 6878
 return $$0 | 0; //@line 6878
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_97($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 15253
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15257
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15259
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 15260
 $8 = HEAP32[$4 + 64 >> 2] | 0; //@line 15262
 if ($8 | 0) {
  __ZdaPv($8); //@line 15265
 }
 $11 = HEAP32[$4 + 12 >> 2] | 0; //@line 15268
 if ($11 | 0) {
  __ZdlPv($11); //@line 15271
 }
 $14 = HEAP32[$4 + 44 >> 2] | 0; //@line 15274
 if ($14 | 0) {
  $18 = HEAP32[$14 + 8 >> 2] | 0; //@line 15279
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 15280
  FUNCTION_TABLE_vi[$18 & 511]($4 + 32 | 0); //@line 15281
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 235; //@line 15284
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 15285
   HEAP32[$19 >> 2] = $4; //@line 15286
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 15287
   HEAP32[$20 >> 2] = $6; //@line 15288
   sp = STACKTOP; //@line 15289
   return;
  }
  ___async_unwind = 0; //@line 15292
  HEAP32[$ReallocAsyncCtx3 >> 2] = 235; //@line 15293
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 15294
  HEAP32[$19 >> 2] = $4; //@line 15295
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 15296
  HEAP32[$20 >> 2] = $6; //@line 15297
  sp = STACKTOP; //@line 15298
  return;
 }
 $22 = HEAP32[$4 + 28 >> 2] | 0; //@line 15302
 if (!$22) {
  __ZdlPv($4); //@line 15305
  HEAP32[10036 + ($6 << 2) >> 2] = 0; //@line 15307
  return;
 }
 $26 = HEAP32[$22 + 8 >> 2] | 0; //@line 15312
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 15313
 FUNCTION_TABLE_vi[$26 & 511]($4 + 16 | 0); //@line 15314
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 236; //@line 15317
  $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 15318
  HEAP32[$27 >> 2] = $4; //@line 15319
  $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 15320
  HEAP32[$28 >> 2] = $6; //@line 15321
  sp = STACKTOP; //@line 15322
  return;
 }
 ___async_unwind = 0; //@line 15325
 HEAP32[$ReallocAsyncCtx4 >> 2] = 236; //@line 15326
 $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 15327
 HEAP32[$27 >> 2] = $4; //@line 15328
 $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 15329
 HEAP32[$28 >> 2] = $6; //@line 15330
 sp = STACKTOP; //@line 15331
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_180($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27585
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27589
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27591
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27593
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27595
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27596
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 27600
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 27601
  FUNCTION_TABLE_vi[$13 & 511]($6); //@line 27602
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 167; //@line 27605
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 27606
   HEAP32[$14 >> 2] = $4; //@line 27607
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 27608
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 27609
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 27610
   HEAP32[$16 >> 2] = $8; //@line 27611
   sp = STACKTOP; //@line 27612
   return;
  }
  ___async_unwind = 0; //@line 27615
  HEAP32[$ReallocAsyncCtx3 >> 2] = 167; //@line 27616
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 27617
  HEAP32[$14 >> 2] = $4; //@line 27618
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 27619
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 27620
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 27621
  HEAP32[$16 >> 2] = $8; //@line 27622
  sp = STACKTOP; //@line 27623
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 27626
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 27630
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 27634
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27635
 FUNCTION_TABLE_vi[$20 & 511]($8); //@line 27636
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 168; //@line 27639
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 27640
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 27641
  sp = STACKTOP; //@line 27642
  return;
 }
 ___async_unwind = 0; //@line 27645
 HEAP32[$ReallocAsyncCtx4 >> 2] = 168; //@line 27646
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 27647
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 27648
 sp = STACKTOP; //@line 27649
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 25416
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 25419
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 25422
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 25425
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 25431
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 25440
     $24 = $13 >>> 2; //@line 25441
     $$090 = 0; //@line 25442
     $$094 = $7; //@line 25442
     while (1) {
      $25 = $$094 >>> 1; //@line 25444
      $26 = $$090 + $25 | 0; //@line 25445
      $27 = $26 << 1; //@line 25446
      $28 = $27 + $23 | 0; //@line 25447
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 25450
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 25454
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 25460
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 25468
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 25472
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 25478
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 25483
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 25486
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 25486
      }
     }
     $46 = $27 + $24 | 0; //@line 25489
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 25492
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 25496
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 25508
     } else {
      $$4 = 0; //@line 25510
     }
    } else {
     $$4 = 0; //@line 25513
    }
   } else {
    $$4 = 0; //@line 25516
   }
  } else {
   $$4 = 0; //@line 25519
  }
 } while (0);
 return $$4 | 0; //@line 25522
}
function _sn_coap_builder_options_build_add_one_option($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$sink13 = 0, $$sink63 = 0, $$sink7 = 0, $14 = 0, $17 = 0, $23 = 0, $25 = 0, $34 = 0, $43 = 0, $47 = 0, $52 = 0, $54 = 0, $56 = 0, $8 = 0, $9 = 0, label = 0;
 if (!$2) {
  $$0 = 0; //@line 5196
  return $$0 | 0; //@line 5197
 }
 $8 = $3 - (HEAPU16[$4 >> 1] | 0) | 0; //@line 5201
 $9 = $1 & 65535; //@line 5202
 HEAP8[HEAP32[$0 >> 2] >> 0] = ($1 & 65535) < 13 ? $1 & 255 : ($1 & 65535) < 269 ? 13 : 14; //@line 5209
 $14 = $8 & 65535; //@line 5210
 do {
  if ($14 >>> 0 < 13) {
   $17 = HEAP32[$0 >> 2] | 0; //@line 5215
   HEAP8[$17 >> 0] = ($14 << 4) + (HEAPU8[$17 >> 0] | 0); //@line 5220
   $$sink7 = 1; //@line 5221
  } else {
   $23 = HEAP32[$0 >> 2] | 0; //@line 5224
   $25 = HEAPU8[$23 >> 0] | 0; //@line 5226
   if ($14 >>> 0 < 269) {
    HEAP8[$23 >> 0] = $25 + 208; //@line 5230
    HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = $8 + 243; //@line 5235
    $$sink7 = 2; //@line 5236
    break;
   } else {
    HEAP8[$23 >> 0] = $25 + 224; //@line 5241
    $34 = $8 + 65267 | 0; //@line 5242
    HEAP8[(HEAP32[$0 >> 2] | 0) + 2 >> 0] = $34; //@line 5246
    HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = $34 >>> 8; //@line 5251
    $$sink7 = 3; //@line 5252
    break;
   }
  }
 } while (0);
 $43 = (HEAP32[$0 >> 2] | 0) + $$sink7 | 0; //@line 5258
 HEAP32[$0 >> 2] = $43; //@line 5259
 if (($1 + -13 & 65535) < 256) {
  $$sink13 = 1; //@line 5264
  $$sink63 = $9 + 243 | 0; //@line 5264
  $52 = $43; //@line 5264
  label = 11; //@line 5265
 } else {
  if (($1 & 65535) > 268) {
   $47 = $9 + -269 | 0; //@line 5269
   HEAP8[$43 + 1 >> 0] = $47; //@line 5272
   $$sink13 = 2; //@line 5275
   $$sink63 = $47 >>> 8; //@line 5275
   $52 = HEAP32[$0 >> 2] | 0; //@line 5275
   label = 11; //@line 5276
  } else {
   $56 = $43; //@line 5278
  }
 }
 if ((label | 0) == 11) {
  HEAP8[$52 >> 0] = $$sink63; //@line 5283
  $54 = (HEAP32[$0 >> 2] | 0) + $$sink13 | 0; //@line 5285
  HEAP32[$0 >> 2] = $54; //@line 5286
  $56 = $54; //@line 5287
 }
 HEAP16[$4 >> 1] = $3; //@line 5290
 _memcpy($56 | 0, $2 | 0, $9 | 0) | 0; //@line 5291
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $9; //@line 5294
 $$0 = 1; //@line 5295
 return $$0 | 0; //@line 5296
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11208
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11210
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11212
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11214
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11216
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11218
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11220
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11222
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11224
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11226
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11228
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11230
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11232
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11234
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11238
 HEAP32[$6 >> 2] = HEAP32[HEAP32[$0 + 56 >> 2] >> 2]; //@line 11240
 $31 = HEAP32[$8 >> 2] | 0; //@line 11241
 HEAP32[$10 >> 2] = 0; //@line 11242
 HEAP32[$12 >> 2] = 187; //@line 11243
 HEAP32[$14 >> 2] = $31; //@line 11244
 HEAP32[$4 >> 2] = 724; //@line 11245
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 11246
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 11247
 if (!___async) {
  ___async_unwind = 0; //@line 11250
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 258; //@line 11252
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 11254
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 11256
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 11258
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 11260
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $12; //@line 11262
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 11264
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 11266
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 11268
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 11270
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 11272
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 11274
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 11276
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 11278
 sp = STACKTOP; //@line 11279
 return;
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25081
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 25086
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 25091
  } else {
   $20 = $0 & 255; //@line 25093
   $21 = $0 & 255; //@line 25094
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 25100
   } else {
    $26 = $1 + 20 | 0; //@line 25102
    $27 = HEAP32[$26 >> 2] | 0; //@line 25103
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 25109
     HEAP8[$27 >> 0] = $20; //@line 25110
     $34 = $21; //@line 25111
    } else {
     label = 12; //@line 25113
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 25118
     $32 = ___overflow($1, $0) | 0; //@line 25119
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 322; //@line 25122
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25124
      sp = STACKTOP; //@line 25125
      return 0; //@line 25126
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 25128
      $34 = $32; //@line 25129
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 25134
   $$0 = $34; //@line 25135
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 25140
   $8 = $0 & 255; //@line 25141
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 25147
    $14 = HEAP32[$13 >> 2] | 0; //@line 25148
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 25154
     HEAP8[$14 >> 0] = $7; //@line 25155
     $$0 = $8; //@line 25156
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25160
   $19 = ___overflow($1, $0) | 0; //@line 25161
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 321; //@line 25164
    sp = STACKTOP; //@line 25165
    return 0; //@line 25166
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 25168
    $$0 = $19; //@line 25169
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 25174
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25801
 $1 = $0 + 20 | 0; //@line 25802
 $3 = $0 + 28 | 0; //@line 25804
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 25810
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 25811
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 25812
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 328; //@line 25815
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25817
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 25819
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 25821
    sp = STACKTOP; //@line 25822
    return 0; //@line 25823
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 25825
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 25829
     break;
    } else {
     label = 5; //@line 25832
     break;
    }
   }
  } else {
   label = 5; //@line 25837
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 25841
  $14 = HEAP32[$13 >> 2] | 0; //@line 25842
  $15 = $0 + 8 | 0; //@line 25843
  $16 = HEAP32[$15 >> 2] | 0; //@line 25844
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 25852
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 25853
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 25854
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 329; //@line 25857
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 25859
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 25861
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 25863
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 25865
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 25867
     sp = STACKTOP; //@line 25868
     return 0; //@line 25869
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 25871
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 25877
  HEAP32[$3 >> 2] = 0; //@line 25878
  HEAP32[$1 >> 2] = 0; //@line 25879
  HEAP32[$15 >> 2] = 0; //@line 25880
  HEAP32[$13 >> 2] = 0; //@line 25881
  $$0 = 0; //@line 25882
 }
 return $$0 | 0; //@line 25884
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_160($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 25791
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25797
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25799
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25801
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25803
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25805
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25807
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25809
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 25811
 $$pre85 = HEAP32[$6 >> 2] | 0; //@line 25812
 HEAP32[$$pre85 + 16 >> 2] = HEAP32[$8 >> 2]; //@line 25816
 HEAP32[$10 + 8 >> 2] = 0; //@line 25818
 HEAP32[$10 >> 2] = 227; //@line 25819
 HEAP32[$10 + 4 >> 2] = $$pre85; //@line 25821
 $23 = $10 + 12 | 0; //@line 25822
 HEAP32[$23 >> 2] = 724; //@line 25823
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 25824
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $10); //@line 25825
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 228; //@line 25828
  $24 = $ReallocAsyncCtx18 + 4 | 0; //@line 25829
  HEAP32[$24 >> 2] = $23; //@line 25830
  $25 = $ReallocAsyncCtx18 + 8 | 0; //@line 25831
  HEAP32[$25 >> 2] = $14; //@line 25832
  $26 = $ReallocAsyncCtx18 + 12 | 0; //@line 25833
  HEAP32[$26 >> 2] = $16; //@line 25834
  $27 = $ReallocAsyncCtx18 + 16 | 0; //@line 25835
  HEAP32[$27 >> 2] = $10; //@line 25836
  $28 = $ReallocAsyncCtx18 + 20 | 0; //@line 25837
  HEAP32[$28 >> 2] = $18; //@line 25838
  sp = STACKTOP; //@line 25839
  return;
 }
 ___async_unwind = 0; //@line 25842
 HEAP32[$ReallocAsyncCtx18 >> 2] = 228; //@line 25843
 $24 = $ReallocAsyncCtx18 + 4 | 0; //@line 25844
 HEAP32[$24 >> 2] = $23; //@line 25845
 $25 = $ReallocAsyncCtx18 + 8 | 0; //@line 25846
 HEAP32[$25 >> 2] = $14; //@line 25847
 $26 = $ReallocAsyncCtx18 + 12 | 0; //@line 25848
 HEAP32[$26 >> 2] = $16; //@line 25849
 $27 = $ReallocAsyncCtx18 + 16 | 0; //@line 25850
 HEAP32[$27 >> 2] = $10; //@line 25851
 $28 = $ReallocAsyncCtx18 + 20 | 0; //@line 25852
 HEAP32[$28 >> 2] = $18; //@line 25853
 sp = STACKTOP; //@line 25854
 return;
}
function _main__async_cb_200($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28680
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28682
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28686
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28688
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28690
 HEAP32[2531] = HEAP32[___async_retval >> 2]; //@line 28693
 $12 = _calloc(44, 1) | 0; //@line 28694
 HEAP32[$12 + 32 >> 2] = 6383; //@line 28696
 HEAP16[$12 + 22 >> 1] = 6; //@line 28698
 HEAP32[$12 + 8 >> 2] = 1; //@line 28700
 HEAP16[$12 + 20 >> 1] = 7; //@line 28702
 $18 = (_sn_coap_builder_calc_needed_packet_data_size($12) | 0) & 65535; //@line 28704
 HEAP32[$2 >> 2] = $18; //@line 28705
 _printf(6390, $2) | 0; //@line 28706
 $19 = _malloc($18) | 0; //@line 28707
 _sn_coap_builder($19, $12) | 0; //@line 28708
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 28709
 $20 = __ZN9UDPSocket6sendtoEPKctPKvj(10068, 6427, 5683, $19, $18) | 0; //@line 28710
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 317; //@line 28713
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 28714
  HEAP32[$21 >> 2] = $6; //@line 28715
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 28716
  HEAP32[$22 >> 2] = $8; //@line 28717
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 28718
  HEAP32[$23 >> 2] = $12; //@line 28719
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 28720
  HEAP32[$24 >> 2] = $19; //@line 28721
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 28722
  HEAP32[$25 >> 2] = $10; //@line 28723
  sp = STACKTOP; //@line 28724
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 28728
 ___async_unwind = 0; //@line 28729
 HEAP32[$ReallocAsyncCtx6 >> 2] = 317; //@line 28730
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 28731
 HEAP32[$21 >> 2] = $6; //@line 28732
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 28733
 HEAP32[$22 >> 2] = $8; //@line 28734
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 28735
 HEAP32[$23 >> 2] = $12; //@line 28736
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 28737
 HEAP32[$24 >> 2] = $19; //@line 28738
 $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 28739
 HEAP32[$25 >> 2] = $10; //@line 28740
 sp = STACKTOP; //@line 28741
 return;
}
function __ZN6Socket5closeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11223
 $1 = $0 + 8 | 0; //@line 11224
 $2 = HEAP32[$1 >> 2] | 0; //@line 11225
 $$pre = $0 + 4 | 0; //@line 11227
 do {
  if (!$2) {
   $$0 = 0; //@line 11230
  } else {
   $4 = HEAP32[$$pre >> 2] | 0; //@line 11232
   $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 84 >> 2] | 0; //@line 11235
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11236
   FUNCTION_TABLE_viiii[$7 & 7]($4, $2, 0, 0); //@line 11237
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 140; //@line 11240
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11242
    HEAP32[$AsyncCtx + 8 >> 2] = $$pre; //@line 11244
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 11246
    sp = STACKTOP; //@line 11247
    return 0; //@line 11248
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11250
   $11 = HEAP32[$1 >> 2] | 0; //@line 11251
   HEAP32[$1 >> 2] = 0; //@line 11252
   $12 = HEAP32[$$pre >> 2] | 0; //@line 11253
   $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 48 >> 2] | 0; //@line 11256
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11257
   $16 = FUNCTION_TABLE_iii[$15 & 15]($12, $11) | 0; //@line 11258
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 141; //@line 11261
    HEAP32[$AsyncCtx2 + 4 >> 2] = $$pre; //@line 11263
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 11265
    sp = STACKTOP; //@line 11266
    return 0; //@line 11267
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11269
    $$0 = $16; //@line 11270
    break;
   }
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0; //@line 11275
 $21 = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0; //@line 11278
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11279
 FUNCTION_TABLE_vi[$21 & 511]($0); //@line 11280
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 142; //@line 11283
  HEAP32[$AsyncCtx5 + 4 >> 2] = $$0; //@line 11285
  sp = STACKTOP; //@line 11286
  return 0; //@line 11287
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 11289
  return $$0 | 0; //@line 11290
 }
 return 0; //@line 11292
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7081
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 7086
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 7091
  } else {
   $20 = $0 & 255; //@line 7093
   $21 = $0 & 255; //@line 7094
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 7100
   } else {
    $26 = $1 + 20 | 0; //@line 7102
    $27 = HEAP32[$26 >> 2] | 0; //@line 7103
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 7109
     HEAP8[$27 >> 0] = $20; //@line 7110
     $34 = $21; //@line 7111
    } else {
     label = 12; //@line 7113
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7118
     $32 = ___overflow($1, $0) | 0; //@line 7119
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 337; //@line 7122
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7124
      sp = STACKTOP; //@line 7125
      return 0; //@line 7126
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 7128
      $34 = $32; //@line 7129
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 7134
   $$0 = $34; //@line 7135
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 7140
   $8 = $0 & 255; //@line 7141
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 7147
    $14 = HEAP32[$13 >> 2] | 0; //@line 7148
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 7154
     HEAP8[$14 >> 0] = $7; //@line 7155
     $$0 = $8; //@line 7156
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7160
   $19 = ___overflow($1, $0) | 0; //@line 7161
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 336; //@line 7164
    sp = STACKTOP; //@line 7165
    return 0; //@line 7166
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7168
    $$0 = $19; //@line 7169
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 7174
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 27716
 STACKTOP = STACKTOP + 32 | 0; //@line 27717
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 27717
 $$byval_copy = sp; //@line 27718
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27720
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27722
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27724
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27726
 dest = $AsyncRetVal; //@line 27727
 stop = dest + 76 | 0; //@line 27727
 do {
  HEAP32[dest >> 2] = 0; //@line 27727
  dest = dest + 4 | 0; //@line 27727
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 27728
 HEAP32[$2 >> 2] = 0; //@line 27729
 HEAP32[$2 + 4 >> 2] = 0; //@line 27729
 HEAP32[$2 + 8 >> 2] = 0; //@line 27729
 HEAP32[$2 + 12 >> 2] = 0; //@line 27729
 HEAP32[$2 + 16 >> 2] = 0; //@line 27729
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 27730
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 27730
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 27730
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 27730
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 27730
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 27731
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 27732
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 27736
  STACKTOP = sp; //@line 27737
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 27739
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 27741
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 27743
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 27744
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27745
 _wait_ms(1); //@line 27746
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 27749
  sp = STACKTOP; //@line 27750
  STACKTOP = sp; //@line 27751
  return;
 }
 ___async_unwind = 0; //@line 27753
 HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 27754
 sp = STACKTOP; //@line 27755
 STACKTOP = sp; //@line 27756
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 27656
 STACKTOP = STACKTOP + 32 | 0; //@line 27657
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 27657
 $$byval_copy = sp; //@line 27658
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27660
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27662
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27664
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27666
 dest = $AsyncRetVal; //@line 27667
 stop = dest + 76 | 0; //@line 27667
 do {
  HEAP32[dest >> 2] = 0; //@line 27667
  dest = dest + 4 | 0; //@line 27667
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 27668
 HEAP32[$2 >> 2] = 0; //@line 27669
 HEAP32[$2 + 4 >> 2] = 0; //@line 27669
 HEAP32[$2 + 8 >> 2] = 0; //@line 27669
 HEAP32[$2 + 12 >> 2] = 0; //@line 27669
 HEAP32[$2 + 16 >> 2] = 0; //@line 27669
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 27670
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 27670
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 27670
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 27670
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 27670
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 27671
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 27672
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 27676
  STACKTOP = sp; //@line 27677
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 27679
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 27681
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 27683
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 27684
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27685
 _wait_ms(1); //@line 27686
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 27689
  sp = STACKTOP; //@line 27690
  STACKTOP = sp; //@line 27691
  return;
 }
 ___async_unwind = 0; //@line 27693
 HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 27694
 sp = STACKTOP; //@line 27695
 STACKTOP = sp; //@line 27696
 return;
}
function __ZNK13SocketAddresscvbEv($0) {
 $0 = $0 | 0;
 var $12 = 0;
 switch (HEAP32[$0 + 40 >> 2] | 0) {
 case 1:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 11738
    return $12 | 0; //@line 11739
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 11745
    return $12 | 0; //@line 11746
   }
   if (!(HEAP8[$0 + 46 >> 0] | 0)) {
    return (HEAP8[$0 + 47 >> 0] | 0) != 0 | 0; //@line 11755
   } else {
    $12 = 1; //@line 11757
    return $12 | 0; //@line 11758
   }
   break;
  }
 case 2:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 11767
    return $12 | 0; //@line 11768
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 11774
    return $12 | 0; //@line 11775
   }
   if (HEAP8[$0 + 46 >> 0] | 0) {
    $12 = 1; //@line 11781
    return $12 | 0; //@line 11782
   }
   if (HEAP8[$0 + 47 >> 0] | 0) {
    $12 = 1; //@line 11788
    return $12 | 0; //@line 11789
   }
   if (HEAP8[$0 + 48 >> 0] | 0) {
    $12 = 1; //@line 11795
    return $12 | 0; //@line 11796
   }
   if (HEAP8[$0 + 49 >> 0] | 0) {
    $12 = 1; //@line 11802
    return $12 | 0; //@line 11803
   }
   if (HEAP8[$0 + 50 >> 0] | 0) {
    $12 = 1; //@line 11809
    return $12 | 0; //@line 11810
   }
   if (HEAP8[$0 + 51 >> 0] | 0) {
    $12 = 1; //@line 11816
    return $12 | 0; //@line 11817
   }
   if (HEAP8[$0 + 52 >> 0] | 0) {
    $12 = 1; //@line 11823
    return $12 | 0; //@line 11824
   }
   if (HEAP8[$0 + 53 >> 0] | 0) {
    $12 = 1; //@line 11830
    return $12 | 0; //@line 11831
   }
   if (HEAP8[$0 + 54 >> 0] | 0) {
    $12 = 1; //@line 11837
    return $12 | 0; //@line 11838
   }
   if (HEAP8[$0 + 55 >> 0] | 0) {
    $12 = 1; //@line 11844
    return $12 | 0; //@line 11845
   }
   if (HEAP8[$0 + 56 >> 0] | 0) {
    $12 = 1; //@line 11851
    return $12 | 0; //@line 11852
   }
   if (HEAP8[$0 + 57 >> 0] | 0) {
    $12 = 1; //@line 11858
    return $12 | 0; //@line 11859
   }
   if (HEAP8[$0 + 58 >> 0] | 0) {
    $12 = 1; //@line 11865
    return $12 | 0; //@line 11866
   }
   $12 = (HEAP8[$0 + 59 >> 0] | 0) != 0; //@line 11871
   return $12 | 0; //@line 11872
  }
 default:
  {
   $12 = 0; //@line 11876
   return $12 | 0; //@line 11877
  }
 }
 return 0; //@line 11880
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $12 = 0, $15 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1031
 STACKTOP = STACKTOP + 48 | 0; //@line 1032
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1032
 $vararg_buffer12 = sp + 32 | 0; //@line 1033
 $vararg_buffer8 = sp + 24 | 0; //@line 1034
 $vararg_buffer4 = sp + 16 | 0; //@line 1035
 $vararg_buffer = sp; //@line 1036
 $6 = $4 & 255; //@line 1037
 $7 = $5 & 255; //@line 1038
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1039
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1041
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1043
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1045
 _mbed_tracef(16, 2409, 2414, $vararg_buffer); //@line 1046
 $9 = HEAP32[$0 + 752 >> 2] | 0; //@line 1048
 if (($9 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $9; //@line 1051
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1053
  _mbed_tracef(16, 2409, 2455, $vararg_buffer4); //@line 1054
  STACKTOP = sp; //@line 1055
  return;
 }
 $12 = HEAP32[$0 + 756 >> 2] | 0; //@line 1058
 if (($12 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $12; //@line 1061
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1063
  _mbed_tracef(16, 2409, 2502, $vararg_buffer8); //@line 1064
  STACKTOP = sp; //@line 1065
  return;
 }
 $15 = HEAP32[$0 + 692 >> 2] | 0; //@line 1068
 if (($15 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1072
  HEAP8[$0 + 782 >> 0] = $2; //@line 1075
  HEAP8[$0 + 781 >> 0] = -35; //@line 1077
  HEAP8[$0 + 780 >> 0] = -5; //@line 1079
  HEAP8[$0 + 783 >> 0] = 1; //@line 1081
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(8) | 0; //@line 1084
  STACKTOP = sp; //@line 1085
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $15; //@line 1087
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1089
  _mbed_tracef(16, 2409, 2549, $vararg_buffer12); //@line 1090
  STACKTOP = sp; //@line 1091
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_212($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 31156
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31158
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31160
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31164
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31166
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31168
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31170
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31172
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31174
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31176
 $21 = $8 + 12 | 0; //@line 31178
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 31179
 $23 = $4 + 4 | 0; //@line 31181
 HEAP32[$23 >> 2] = 0; //@line 31183
 HEAP32[$23 + 4 >> 2] = 0; //@line 31186
 HEAP32[$4 >> 2] = 3; //@line 31187
 $27 = $4 + 12 | 0; //@line 31188
 HEAP32[$27 >> 2] = 712; //@line 31189
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 31190
 $28 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $4) | 0; //@line 31191
 if (!___async) {
  HEAP32[___async_retval >> 2] = $28; //@line 31195
  ___async_unwind = 0; //@line 31196
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 178; //@line 31198
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 31200
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 31202
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $8; //@line 31204
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $21; //@line 31206
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 31208
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $12; //@line 31210
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $14; //@line 31212
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $16; //@line 31214
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $18; //@line 31216
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $20; //@line 31218
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $27; //@line 31220
 sp = STACKTOP; //@line 31221
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11111
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11113
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11115
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11117
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11119
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11121
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 11122
 if (!$AsyncRetVal) {
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = HEAP32[$4 >> 2]; //@line 11127
 HEAP32[$AsyncRetVal + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 11127
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 11127
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 11127
 HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 11127
 $12 = (_strlen($6) | 0) + 1 | 0; //@line 11129
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 11130
 $13 = __ZnajRKSt9nothrow_t($12, 12017) | 0; //@line 11131
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 162; //@line 11134
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 11135
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 11136
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 11137
  HEAP32[$15 >> 2] = $6; //@line 11138
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 11139
  HEAP32[$16 >> 2] = $8; //@line 11140
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 11141
  HEAP32[$17 >> 2] = $2; //@line 11142
  sp = STACKTOP; //@line 11143
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 11147
 ___async_unwind = 0; //@line 11148
 HEAP32[$ReallocAsyncCtx2 >> 2] = 162; //@line 11149
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 11150
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 11151
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 11152
 HEAP32[$15 >> 2] = $6; //@line 11153
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 11154
 HEAP32[$16 >> 2] = $8; //@line 11155
 $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 11156
 HEAP32[$17 >> 2] = $2; //@line 11157
 sp = STACKTOP; //@line 11158
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15774
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15776
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15778
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15780
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15782
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15784
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15786
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15790
  return;
 }
 $13 = $2 + 12 | 0; //@line 15793
 dest = $13; //@line 15794
 src = $4; //@line 15794
 stop = dest + 60 | 0; //@line 15794
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15794
  dest = dest + 4 | 0; //@line 15794
  src = src + 4 | 0; //@line 15794
 } while ((dest | 0) < (stop | 0));
 HEAP16[$13 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 15794
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 15795
 _wait_ms(1); //@line 15796
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 39; //@line 15799
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 15800
  HEAP32[$14 >> 2] = $6; //@line 15801
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 15802
  HEAP32[$15 >> 2] = $2; //@line 15803
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 15804
  HEAP32[$16 >> 2] = $8; //@line 15805
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 15806
  HEAP32[$17 >> 2] = $10; //@line 15807
  sp = STACKTOP; //@line 15808
  return;
 }
 ___async_unwind = 0; //@line 15811
 HEAP32[$ReallocAsyncCtx4 >> 2] = 39; //@line 15812
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 15813
 HEAP32[$14 >> 2] = $6; //@line 15814
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 15815
 HEAP32[$15 >> 2] = $2; //@line 15816
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 15817
 HEAP32[$16 >> 2] = $8; //@line 15818
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 15819
 HEAP32[$17 >> 2] = $10; //@line 15820
 sp = STACKTOP; //@line 15821
 return;
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 25565
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 25571
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 25577
   } else {
    $7 = $1 & 255; //@line 25579
    $$03039 = $0; //@line 25580
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 25582
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 25587
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 25590
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 25595
      break;
     } else {
      $$03039 = $13; //@line 25598
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 25602
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 25603
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 25611
     $25 = $18; //@line 25611
     while (1) {
      $24 = $25 ^ $17; //@line 25613
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 25620
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 25623
      $25 = HEAP32[$31 >> 2] | 0; //@line 25624
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 25633
       break;
      } else {
       $$02936 = $31; //@line 25631
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 25638
    }
   } while (0);
   $38 = $1 & 255; //@line 25641
   $$1 = $$029$lcssa; //@line 25642
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 25644
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 25650
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 25653
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 25658
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_58($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11400
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11402
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11404
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11406
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11408
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11410
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11412
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11414
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11416
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11418
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11420
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11422
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11424
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11426
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 11427
 $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($26, 0, $18, 512) | 0; //@line 11428
 if (!___async) {
  HEAP32[___async_retval >> 2] = $27; //@line 11432
  ___async_unwind = 0; //@line 11433
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 255; //@line 11435
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 11437
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 11439
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 11441
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 11443
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 11445
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 11447
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 11449
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 11451
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 11453
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 11455
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 11457
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 11459
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 11461
 sp = STACKTOP; //@line 11462
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 25307
 $4 = HEAP32[$3 >> 2] | 0; //@line 25308
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 25315
   label = 5; //@line 25316
  } else {
   $$1 = 0; //@line 25318
  }
 } else {
  $12 = $4; //@line 25322
  label = 5; //@line 25323
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 25327
   $10 = HEAP32[$9 >> 2] | 0; //@line 25328
   $14 = $10; //@line 25331
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 25336
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 25344
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 25348
       $$141 = $0; //@line 25348
       $$143 = $1; //@line 25348
       $31 = $14; //@line 25348
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 25351
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 25358
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 25363
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 25366
      break L5;
     }
     $$139 = $$038; //@line 25372
     $$141 = $0 + $$038 | 0; //@line 25372
     $$143 = $1 - $$038 | 0; //@line 25372
     $31 = HEAP32[$9 >> 2] | 0; //@line 25372
    } else {
     $$139 = 0; //@line 25374
     $$141 = $0; //@line 25374
     $$143 = $1; //@line 25374
     $31 = $14; //@line 25374
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 25377
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 25380
   $$1 = $$139 + $$143 | 0; //@line 25382
  }
 } while (0);
 return $$1 | 0; //@line 25385
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_169($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 26346
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26350
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26352
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26354
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26356
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26357
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 26361
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 26362
  FUNCTION_TABLE_vi[$14 & 511]($8); //@line 26363
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 229; //@line 26366
   $15 = $ReallocAsyncCtx10 + 4 | 0; //@line 26367
   HEAP32[$15 >> 2] = $4; //@line 26368
   $16 = $ReallocAsyncCtx10 + 8 | 0; //@line 26369
   HEAP32[$16 >> 2] = $6; //@line 26370
   $17 = $ReallocAsyncCtx10 + 12 | 0; //@line 26371
   HEAP32[$17 >> 2] = $10; //@line 26372
   sp = STACKTOP; //@line 26373
   return;
  }
  ___async_unwind = 0; //@line 26376
  HEAP32[$ReallocAsyncCtx10 >> 2] = 229; //@line 26377
  $15 = $ReallocAsyncCtx10 + 4 | 0; //@line 26378
  HEAP32[$15 >> 2] = $4; //@line 26379
  $16 = $ReallocAsyncCtx10 + 8 | 0; //@line 26380
  HEAP32[$16 >> 2] = $6; //@line 26381
  $17 = $ReallocAsyncCtx10 + 12 | 0; //@line 26382
  HEAP32[$17 >> 2] = $10; //@line 26383
  sp = STACKTOP; //@line 26384
  return;
 }
 HEAP32[$4 >> 2] = $6; //@line 26387
 $18 = HEAP32[$10 >> 2] | 0; //@line 26388
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 26389
 __ZL26nsapi_dns_query_async_sendPv($18); //@line 26390
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 230; //@line 26393
  sp = STACKTOP; //@line 26394
  return;
 }
 ___async_unwind = 0; //@line 26397
 HEAP32[$ReallocAsyncCtx13 >> 2] = 230; //@line 26398
 sp = STACKTOP; //@line 26399
 return;
}
function __Z17recv_coap_messagev__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $36 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13101
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13103
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13105
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13107
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13109
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13111
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13115
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13119
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13123
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13125
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13129
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13131
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13135
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 13139
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13143
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 13144
 HEAP32[$2 + 8 >> 2] = $4 | -2147483648; //@line 13147
 HEAP32[$2 + 4 >> 2] = $6; //@line 13149
 $$pre = $2 + 11 | 0; //@line 13150
 _memcpy($AsyncRetVal | 0, $8 | 0, $6 | 0) | 0; //@line 13151
 HEAP8[$AsyncRetVal + $6 >> 0] = 0; //@line 13153
 HEAP32[$12 >> 2] = HEAPU16[$10 + 20 >> 1]; //@line 13157
 _printf(6118, $12) | 0; //@line 13158
 HEAP32[$16 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 13161
 _printf(6141, $16) | 0; //@line 13162
 HEAP32[$20 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 13165
 _printf(6164, $20) | 0; //@line 13166
 HEAP32[$26 >> 2] = HEAPU16[$24 >> 1]; //@line 13169
 _printf(6187, $26) | 0; //@line 13170
 HEAP32[$32 >> 2] = (HEAP8[$$pre >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $30; //@line 13175
 _printf(6210, $32) | 0; //@line 13176
 HEAP32[$36 >> 2] = HEAP32[$10 + 40 >> 2]; //@line 13179
 _printf(6233, $36) | 0; //@line 13180
 if ((HEAP8[$$pre >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 13185
 }
 _free($40); //@line 13187
 return;
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 31
 $2 = HEAP32[$1 >> 2] | 0; //@line 32
 if (!$2) {
  label = 3; //@line 35
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 41
  } else {
   label = 4; //@line 43
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 47
  if (($7 | 0) < 0) {
   label = 4; //@line 50
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 52
   $$phi$trans$insert = $0 + 8 | 0; //@line 54
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 56
    $$sink = $$pre; //@line 57
    $26 = $$pre; //@line 57
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 59
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 61
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 66
    $21 = $12; //@line 68
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 70
     $26 = $21; //@line 70
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 74
     $26 = $21; //@line 74
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 78
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 80
   if (!$26) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 83
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 85
    $29 = $0 + 108 | 0; //@line 87
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 92
    $36 = $27; //@line 94
   }
   $35 = $36 + -1 | 0; //@line 96
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 101
   } else {
    HEAP8[$35 >> 0] = $7; //@line 104
    $$0 = $7; //@line 105
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 111
  $$0 = -1; //@line 112
 }
 return $$0 | 0; //@line 114
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_123($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23190
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23194
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23196
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23198
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23200
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23202
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23204
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23206
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 23209
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 23210
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 23226
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 23227
    if (!___async) {
     ___async_unwind = 0; //@line 23230
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 362; //@line 23232
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 23234
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 23236
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 23238
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 23240
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 23242
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 23244
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 23246
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 23248
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 23251
    sp = STACKTOP; //@line 23252
    return;
   }
  }
 } while (0);
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23984
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23988
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23990
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23992
 $9 = $4 + 12 | 0; //@line 23994
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23995
 $10 = HEAP32[$6 >> 2] | 0; //@line 23996
 HEAP32[$8 + 8 >> 2] = 0; //@line 23998
 HEAP32[$8 >> 2] = 207; //@line 23999
 HEAP32[$8 + 4 >> 2] = $10; //@line 24001
 $12 = $8 + 12 | 0; //@line 24002
 HEAP32[$12 >> 2] = 724; //@line 24003
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 24004
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 24005
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 208; //@line 24008
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 24009
  HEAP32[$13 >> 2] = $12; //@line 24010
  $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 24011
  HEAP32[$14 >> 2] = $9; //@line 24012
  $15 = $ReallocAsyncCtx4 + 12 | 0; //@line 24013
  HEAP32[$15 >> 2] = $8; //@line 24014
  $16 = $ReallocAsyncCtx4 + 16 | 0; //@line 24015
  HEAP32[$16 >> 2] = $4; //@line 24016
  sp = STACKTOP; //@line 24017
  return;
 }
 ___async_unwind = 0; //@line 24020
 HEAP32[$ReallocAsyncCtx4 >> 2] = 208; //@line 24021
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 24022
 HEAP32[$13 >> 2] = $12; //@line 24023
 $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 24024
 HEAP32[$14 >> 2] = $9; //@line 24025
 $15 = $ReallocAsyncCtx4 + 12 | 0; //@line 24026
 HEAP32[$15 >> 2] = $8; //@line 24027
 $16 = $ReallocAsyncCtx4 + 16 | 0; //@line 24028
 HEAP32[$16 >> 2] = $4; //@line 24029
 sp = STACKTOP; //@line 24030
 return;
}
function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7245
 STACKTOP = STACKTOP + 32 | 0; //@line 7246
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7246
 $2 = sp; //@line 7247
 $3 = HEAP8[$1 >> 0] | 0; //@line 7248
 L1 : do {
  if (!($3 << 24 >> 24)) {
   label = 3; //@line 7252
  } else {
   if (!(HEAP8[$1 + 1 >> 0] | 0)) {
    label = 3; //@line 7258
   } else {
    _memset($2 | 0, 0, 32) | 0; //@line 7260
    $10 = HEAP8[$1 >> 0] | 0; //@line 7261
    if ($10 << 24 >> 24) {
     $$01824 = $1; //@line 7264
     $15 = $10; //@line 7264
     do {
      $19 = $2 + ((($15 & 255) >>> 5 & 255) << 2) | 0; //@line 7271
      HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($15 & 31); //@line 7274
      $$01824 = $$01824 + 1 | 0; //@line 7275
      $15 = HEAP8[$$01824 >> 0] | 0; //@line 7276
     } while ($15 << 24 >> 24 != 0);
    }
    $12 = HEAP8[$0 >> 0] | 0; //@line 7285
    if (!($12 << 24 >> 24)) {
     $$019$sink = $0; //@line 7288
    } else {
     $$01922 = $0; //@line 7290
     $25 = $12; //@line 7290
     while (1) {
      if (HEAP32[$2 + ((($25 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($25 & 31) | 0) {
       $$019$sink = $$01922; //@line 7302
       break L1;
      }
      $34 = $$01922 + 1 | 0; //@line 7305
      $25 = HEAP8[$34 >> 0] | 0; //@line 7306
      if (!($25 << 24 >> 24)) {
       $$019$sink = $34; //@line 7309
       break;
      } else {
       $$01922 = $34; //@line 7312
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0; //@line 7322
 }
 STACKTOP = sp; //@line 7327
 return $$019$sink - $0 | 0; //@line 7327
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9658
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9662
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9664
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9666
 $9 = $4 + 12 | 0; //@line 9668
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9669
 $11 = HEAP32[$6 + 16 >> 2] | 0; //@line 9671
 HEAP32[$8 + 8 >> 2] = 0; //@line 9673
 HEAP32[$8 >> 2] = 238; //@line 9674
 HEAP32[$8 + 4 >> 2] = $11; //@line 9676
 $13 = $8 + 12 | 0; //@line 9677
 HEAP32[$13 >> 2] = 736; //@line 9678
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 9679
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 9680
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 239; //@line 9683
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 9684
  HEAP32[$14 >> 2] = $13; //@line 9685
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 9686
  HEAP32[$15 >> 2] = $9; //@line 9687
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 9688
  HEAP32[$16 >> 2] = $8; //@line 9689
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 9690
  HEAP32[$17 >> 2] = $4; //@line 9691
  sp = STACKTOP; //@line 9692
  return;
 }
 ___async_unwind = 0; //@line 9695
 HEAP32[$ReallocAsyncCtx4 >> 2] = 239; //@line 9696
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 9697
 HEAP32[$14 >> 2] = $13; //@line 9698
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 9699
 HEAP32[$15 >> 2] = $9; //@line 9700
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 9701
 HEAP32[$16 >> 2] = $8; //@line 9702
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 9703
 HEAP32[$17 >> 2] = $4; //@line 9704
 sp = STACKTOP; //@line 9705
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25193
 STACKTOP = STACKTOP + 16 | 0; //@line 25194
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25194
 $2 = sp; //@line 25195
 $3 = $1 & 255; //@line 25196
 HEAP8[$2 >> 0] = $3; //@line 25197
 $4 = $0 + 16 | 0; //@line 25198
 $5 = HEAP32[$4 >> 2] | 0; //@line 25199
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 25206
   label = 4; //@line 25207
  } else {
   $$0 = -1; //@line 25209
  }
 } else {
  $12 = $5; //@line 25212
  label = 4; //@line 25213
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 25217
   $10 = HEAP32[$9 >> 2] | 0; //@line 25218
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 25221
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 25228
     HEAP8[$10 >> 0] = $3; //@line 25229
     $$0 = $13; //@line 25230
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 25235
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 25236
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 25237
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 323; //@line 25240
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 25242
    sp = STACKTOP; //@line 25243
    STACKTOP = sp; //@line 25244
    return 0; //@line 25244
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 25246
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 25251
   } else {
    $$0 = -1; //@line 25253
   }
  }
 } while (0);
 STACKTOP = sp; //@line 25257
 return $$0 | 0; //@line 25257
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_115($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 19943
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19947
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19949
 $7 = $4 + 12 | 0; //@line 19951
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19952
 $9 = $6 + 4 | 0; //@line 19954
 HEAP32[$9 >> 2] = 0; //@line 19956
 HEAP32[$9 + 4 >> 2] = 0; //@line 19959
 HEAP32[$6 >> 2] = 3; //@line 19960
 $13 = $6 + 12 | 0; //@line 19961
 HEAP32[$13 >> 2] = 712; //@line 19962
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 19963
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $6) | 0; //@line 19964
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 19967
  $14 = $ReallocAsyncCtx12 + 4 | 0; //@line 19968
  HEAP32[$14 >> 2] = $13; //@line 19969
  $15 = $ReallocAsyncCtx12 + 8 | 0; //@line 19970
  HEAP32[$15 >> 2] = $7; //@line 19971
  $16 = $ReallocAsyncCtx12 + 12 | 0; //@line 19972
  HEAP32[$16 >> 2] = $6; //@line 19973
  $17 = $ReallocAsyncCtx12 + 16 | 0; //@line 19974
  HEAP32[$17 >> 2] = $4; //@line 19975
  sp = STACKTOP; //@line 19976
  return;
 }
 ___async_unwind = 0; //@line 19979
 HEAP32[$ReallocAsyncCtx12 >> 2] = 197; //@line 19980
 $14 = $ReallocAsyncCtx12 + 4 | 0; //@line 19981
 HEAP32[$14 >> 2] = $13; //@line 19982
 $15 = $ReallocAsyncCtx12 + 8 | 0; //@line 19983
 HEAP32[$15 >> 2] = $7; //@line 19984
 $16 = $ReallocAsyncCtx12 + 12 | 0; //@line 19985
 HEAP32[$16 >> 2] = $6; //@line 19986
 $17 = $ReallocAsyncCtx12 + 16 | 0; //@line 19987
 HEAP32[$17 >> 2] = $4; //@line 19988
 sp = STACKTOP; //@line 19989
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_144($0) {
 $0 = $0 | 0;
 var $$011 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24675
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24677
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24679
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24681
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24683
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24685
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24687
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24689
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24691
 if (__ZN13SocketAddress14set_ip_addressEPKc($6, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$011 = __ZNK13SocketAddress14get_ip_versionEv($6) | 0; //@line 24699
 } else {
  $$011 = 0; //@line 24701
 }
 $24 = HEAP32[(HEAP32[$12 >> 2] | 0) + 96 >> 2] | 0; //@line 24705
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 24706
 FUNCTION_TABLE_vii[$24 & 7]($16, $12); //@line 24707
 if (!___async) {
  ___async_unwind = 0; //@line 24710
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 103; //@line 24712
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 24714
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 24716
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $16; //@line 24718
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 24720
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 24722
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 24724
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 24726
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $$011; //@line 24728
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $16; //@line 24730
 sp = STACKTOP; //@line 24731
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_136($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24071
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24075
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24077
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24079
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24080
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 24084
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 24085
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 24086
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 209; //@line 24089
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 24090
   HEAP32[$13 >> 2] = $4; //@line 24091
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 24092
   HEAP32[$14 >> 2] = $8; //@line 24093
   sp = STACKTOP; //@line 24094
   return;
  }
  ___async_unwind = 0; //@line 24097
  HEAP32[$ReallocAsyncCtx2 >> 2] = 209; //@line 24098
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 24099
  HEAP32[$13 >> 2] = $4; //@line 24100
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 24101
  HEAP32[$14 >> 2] = $8; //@line 24102
  sp = STACKTOP; //@line 24103
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 24106
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 24112
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 24113
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 24114
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 210; //@line 24117
  sp = STACKTOP; //@line 24118
  return;
 }
 ___async_unwind = 0; //@line 24121
 HEAP32[$ReallocAsyncCtx3 >> 2] = 210; //@line 24122
 sp = STACKTOP; //@line 24123
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_120($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20950
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20958
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20959
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 20963
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 20964
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 20965
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 198; //@line 20968
   $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 20969
   HEAP32[$13 >> 2] = $4; //@line 20970
   $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 20971
   HEAP32[$14 >> 2] = $8; //@line 20972
   sp = STACKTOP; //@line 20973
   return;
  }
  ___async_unwind = 0; //@line 20976
  HEAP32[$ReallocAsyncCtx8 >> 2] = 198; //@line 20977
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 20978
  HEAP32[$13 >> 2] = $4; //@line 20979
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 20980
  HEAP32[$14 >> 2] = $8; //@line 20981
  sp = STACKTOP; //@line 20982
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 20985
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 20991
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 20992
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 20993
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 199; //@line 20996
  sp = STACKTOP; //@line 20997
  return;
 }
 ___async_unwind = 0; //@line 21000
 HEAP32[$ReallocAsyncCtx9 >> 2] = 199; //@line 21001
 sp = STACKTOP; //@line 21002
 return;
}
function _sn_coap_protocol_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8418
 if (($0 | 0) == 0 | ($1 | 0) == 0 | ($2 | 0) == 0) {
  $$1 = 0; //@line 8425
  return $$1 | 0; //@line 8426
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 8428
 $7 = FUNCTION_TABLE_ii[$0 & 31](44) | 0; //@line 8429
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 70; //@line 8432
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 8434
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8436
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8438
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 8440
  sp = STACKTOP; //@line 8441
  return 0; //@line 8442
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8444
 if (!$7) {
  $$1 = 0; //@line 8447
  return $$1 | 0; //@line 8448
 }
 $13 = $7 + 16 | 0; //@line 8450
 HEAP32[$13 >> 2] = 0; //@line 8451
 HEAP32[$13 + 4 >> 2] = 0; //@line 8451
 HEAP32[$13 + 8 >> 2] = 0; //@line 8451
 HEAP32[$13 + 12 >> 2] = 0; //@line 8451
 HEAP32[$13 + 16 >> 2] = 0; //@line 8451
 HEAP32[$13 + 20 >> 2] = 0; //@line 8451
 HEAP32[$13 + 24 >> 2] = 0; //@line 8451
 HEAP32[$7 + 8 >> 2] = $2; //@line 8453
 HEAP32[$7 + 4 >> 2] = $1; //@line 8455
 HEAP32[$7 >> 2] = $0; //@line 8456
 HEAP32[$7 + 12 >> 2] = $3; //@line 8458
 HEAP8[$7 + 43 >> 0] = 1; //@line 8460
 _ns_list_init_($7 + 16 | 0); //@line 8462
 HEAP8[$7 + 34 >> 0] = 2; //@line 8464
 HEAP32[$7 + 36 >> 2] = 0; //@line 8466
 HEAP8[$7 + 41 >> 0] = 10; //@line 8468
 HEAP8[$7 + 40 >> 0] = 3; //@line 8470
 _randLIB_seed_random(); //@line 8471
 _randLIB_get_16bit() | 0; //@line 8472
 $$1 = $7; //@line 8473
 return $$1 | 0; //@line 8474
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_34($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9746
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9750
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9752
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9754
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9755
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 9759
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 9760
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 9761
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 240; //@line 9764
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 9765
   HEAP32[$13 >> 2] = $4; //@line 9766
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 9767
   HEAP32[$14 >> 2] = $8; //@line 9768
   sp = STACKTOP; //@line 9769
   return;
  }
  ___async_unwind = 0; //@line 9772
  HEAP32[$ReallocAsyncCtx2 >> 2] = 240; //@line 9773
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 9774
  HEAP32[$13 >> 2] = $4; //@line 9775
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 9776
  HEAP32[$14 >> 2] = $8; //@line 9777
  sp = STACKTOP; //@line 9778
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 9781
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 9787
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 9788
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 9789
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 241; //@line 9792
  sp = STACKTOP; //@line 9793
  return;
 }
 ___async_unwind = 0; //@line 9796
 HEAP32[$ReallocAsyncCtx3 >> 2] = 241; //@line 9797
 sp = STACKTOP; //@line 9798
 return;
}
function _fflush__async_cb_44($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10398
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10400
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 10402
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 10406
  } else {
   $$02327 = $$02325; //@line 10408
   $$02426 = $AsyncRetVal; //@line 10408
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 10415
    } else {
     $16 = 0; //@line 10417
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 10429
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 10432
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 10435
     break L3;
    } else {
     $$02327 = $$023; //@line 10438
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 10441
   $13 = ___fflush_unlocked($$02327) | 0; //@line 10442
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 10446
    ___async_unwind = 0; //@line 10447
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 327; //@line 10449
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 10451
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 10453
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 10455
   sp = STACKTOP; //@line 10456
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 10460
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 10462
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11310
 $2 = $0 + 32 | 0; //@line 11311
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 44 | 0; //@line 11316
 $5 = HEAP32[$4 >> 2] | 0; //@line 11317
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 11322
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11323
   FUNCTION_TABLE_vi[$8 & 511]($2); //@line 11324
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 143; //@line 11327
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11329
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 11331
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 11333
    sp = STACKTOP; //@line 11334
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11337
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 11342
 $13 = HEAP32[$12 >> 2] | 0; //@line 11343
 do {
  if (!$13) {
   $19 = 0; //@line 11347
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 11350
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11351
   FUNCTION_TABLE_vii[$16 & 7]($2, $1); //@line 11352
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 144; //@line 11355
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 11357
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 11359
    sp = STACKTOP; //@line 11360
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11363
    $19 = HEAP32[$12 >> 2] | 0; //@line 11365
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 11370
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 33067
 value = value & 255; //@line 33069
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 33072
   ptr = ptr + 1 | 0; //@line 33073
  }
  aligned_end = end & -4 | 0; //@line 33076
  block_aligned_end = aligned_end - 64 | 0; //@line 33077
  value4 = value | value << 8 | value << 16 | value << 24; //@line 33078
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 33081
   HEAP32[ptr + 4 >> 2] = value4; //@line 33082
   HEAP32[ptr + 8 >> 2] = value4; //@line 33083
   HEAP32[ptr + 12 >> 2] = value4; //@line 33084
   HEAP32[ptr + 16 >> 2] = value4; //@line 33085
   HEAP32[ptr + 20 >> 2] = value4; //@line 33086
   HEAP32[ptr + 24 >> 2] = value4; //@line 33087
   HEAP32[ptr + 28 >> 2] = value4; //@line 33088
   HEAP32[ptr + 32 >> 2] = value4; //@line 33089
   HEAP32[ptr + 36 >> 2] = value4; //@line 33090
   HEAP32[ptr + 40 >> 2] = value4; //@line 33091
   HEAP32[ptr + 44 >> 2] = value4; //@line 33092
   HEAP32[ptr + 48 >> 2] = value4; //@line 33093
   HEAP32[ptr + 52 >> 2] = value4; //@line 33094
   HEAP32[ptr + 56 >> 2] = value4; //@line 33095
   HEAP32[ptr + 60 >> 2] = value4; //@line 33096
   ptr = ptr + 64 | 0; //@line 33097
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 33101
   ptr = ptr + 4 | 0; //@line 33102
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 33107
  ptr = ptr + 1 | 0; //@line 33108
 }
 return end - num | 0; //@line 33110
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12242
 $4 = $0 + 8 | 0; //@line 12243
 $5 = $0 + 52 | 0; //@line 12244
 $6 = $0 + 4 | 0; //@line 12245
 $7 = $0 + 12 | 0; //@line 12246
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 12248
  if (!$8) {
   $$2 = -3005; //@line 12251
   label = 6; //@line 12252
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 12255
  $10 = HEAP32[$6 >> 2] | 0; //@line 12256
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 80 >> 2] | 0; //@line 12259
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 12260
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 12261
  if (___async) {
   label = 4; //@line 12264
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12267
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 12273
   label = 6; //@line 12274
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 153; //@line 12279
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 12281
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 12283
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 12285
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 12287
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 12289
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 12291
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 12293
  sp = STACKTOP; //@line 12294
  return 0; //@line 12295
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 12298
 }
 return 0; //@line 12300
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12175
 $4 = $0 + 8 | 0; //@line 12176
 $5 = $0 + 52 | 0; //@line 12177
 $6 = $0 + 4 | 0; //@line 12178
 $7 = $0 + 12 | 0; //@line 12179
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 12181
  if (!$8) {
   $$2 = -3005; //@line 12184
   label = 6; //@line 12185
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 12188
  $10 = HEAP32[$6 >> 2] | 0; //@line 12189
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 12192
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 12193
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 12194
  if (___async) {
   label = 4; //@line 12197
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12200
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 12206
   label = 6; //@line 12207
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 152; //@line 12212
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 12214
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 12216
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 12218
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 12220
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 12222
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 12224
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 12226
  sp = STACKTOP; //@line 12227
  return 0; //@line 12228
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 12231
 }
 return 0; //@line 12233
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_147($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25049
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25051
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25053
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25055
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25057
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25059
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25061
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25063
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25065
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25067
 $19 = $12 + 12 | 0; //@line 25069
 HEAP32[$19 >> 2] = HEAP32[$2 >> 2]; //@line 25070
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 25071
 $20 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $8, $12, $18) | 0; //@line 25072
 if (!___async) {
  HEAP32[___async_retval >> 2] = $20; //@line 25076
  ___async_unwind = 0; //@line 25077
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 106; //@line 25079
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $19; //@line 25081
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $10; //@line 25083
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $12; //@line 25085
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $2; //@line 25087
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $8; //@line 25089
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $6; //@line 25091
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $4; //@line 25093
 sp = STACKTOP; //@line 25094
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23127
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23131
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23133
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23135
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23137
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23139
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23141
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 23144
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 23145
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 23154
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 23155
    if (!___async) {
     ___async_unwind = 0; //@line 23158
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 363; //@line 23160
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 23162
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 23164
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 23166
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 23168
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 23170
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 23172
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 23174
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 23177
    sp = STACKTOP; //@line 23178
    return;
   }
  }
 }
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15882
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15884
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15886
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15888
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15890
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15892
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15894
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15896
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15900
  return;
 }
 $15 = $2 + 12 | 0; //@line 15903
 dest = $15; //@line 15904
 src = $4; //@line 15904
 stop = dest + 60 | 0; //@line 15904
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15904
  dest = dest + 4 | 0; //@line 15904
  src = src + 4 | 0; //@line 15904
 } while ((dest | 0) < (stop | 0));
 HEAP16[$15 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 15904
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 15905
 _wait_ms(1); //@line 15906
 if (!___async) {
  ___async_unwind = 0; //@line 15909
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 15911
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $6; //@line 15913
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $8; //@line 15915
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $2; //@line 15917
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 15919
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $12; //@line 15921
 sp = STACKTOP; //@line 15922
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24136
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24140
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24142
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24144
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 24145
 $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 24146
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 24149
  HEAP32[___async_retval >> 2] = 0; //@line 24151
  return;
 }
 $11 = HEAP32[$$pre + 4 >> 2] | 0; //@line 24155
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 24156
 FUNCTION_TABLE_vii[$11 & 7]($6, $8); //@line 24157
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 277; //@line 24160
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 24161
  HEAP32[$12 >> 2] = $$phi$trans$insert; //@line 24162
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 24163
  HEAP32[$13 >> 2] = $4; //@line 24164
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 24165
  HEAP32[$14 >> 2] = $8; //@line 24166
  sp = STACKTOP; //@line 24167
  return;
 }
 ___async_unwind = 0; //@line 24170
 HEAP32[$ReallocAsyncCtx2 >> 2] = 277; //@line 24171
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 24172
 HEAP32[$12 >> 2] = $$phi$trans$insert; //@line 24173
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 24174
 HEAP32[$13 >> 2] = $4; //@line 24175
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 24176
 HEAP32[$14 >> 2] = $8; //@line 24177
 sp = STACKTOP; //@line 24178
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10299
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 10309
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 10309
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 10309
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 10313
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 10316
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 10319
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 10327
  } else {
   $20 = 0; //@line 10329
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 10339
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 10343
  HEAP32[___async_retval >> 2] = $$1; //@line 10345
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 10348
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 10349
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 10353
  ___async_unwind = 0; //@line 10354
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 327; //@line 10356
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 10358
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 10360
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 10362
 sp = STACKTOP; //@line 10363
 return;
}
function __ZN9UDPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11932
 HEAP32[$0 >> 2] = 592; //@line 11933
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11934
 __ZN6Socket5closeEv($0) | 0; //@line 11935
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 145; //@line 11938
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11940
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 11942
  sp = STACKTOP; //@line 11943
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11946
 HEAP32[$0 >> 2] = 556; //@line 11947
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 11949
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 11955
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11956
   FUNCTION_TABLE_vi[$8 & 511]($0 + 32 | 0); //@line 11957
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 146; //@line 11960
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11962
    sp = STACKTOP; //@line 11963
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11966
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 11972
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 11979
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11980
 FUNCTION_TABLE_vi[$15 & 511]($0 + 16 | 0); //@line 11981
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 147; //@line 11984
  sp = STACKTOP; //@line 11985
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11988
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11927
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11929
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11931
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11933
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 11938
  } else {
   $9 = $4 + 4 | 0; //@line 11940
   $10 = HEAP32[$9 >> 2] | 0; //@line 11941
   $11 = $4 + 8 | 0; //@line 11942
   $12 = HEAP32[$11 >> 2] | 0; //@line 11943
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 11947
    HEAP32[$6 >> 2] = 0; //@line 11948
    HEAP32[$2 >> 2] = 0; //@line 11949
    HEAP32[$11 >> 2] = 0; //@line 11950
    HEAP32[$9 >> 2] = 0; //@line 11951
    $$0 = 0; //@line 11952
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 11959
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 11960
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 11961
   if (!___async) {
    ___async_unwind = 0; //@line 11964
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 329; //@line 11966
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 11968
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 11970
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 11972
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 11974
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 11976
   sp = STACKTOP; //@line 11977
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 11982
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 933
 $5 = $0 + -4 | 0; //@line 934
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 120 >> 2] | 0; //@line 937
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 938
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($5, $1, $3, $4) | 0; //@line 939
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 54; //@line 942
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 944
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 946
  sp = STACKTOP; //@line 947
  return 0; //@line 948
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 950
 if (($2 | 0) != 0 & ($9 | 0) > -1) {
  $14 = $1 + 12 | 0; //@line 955
  dest = $2; //@line 956
  src = $14; //@line 956
  stop = dest + 60 | 0; //@line 956
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 956
   dest = dest + 4 | 0; //@line 956
   src = src + 4 | 0; //@line 956
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$14 + 60 >> 1] | 0; //@line 956
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 958
 _wait_ms(1); //@line 959
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 55; //@line 962
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 964
  sp = STACKTOP; //@line 965
  return 0; //@line 966
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 968
  return $9 | 0; //@line 969
 }
 return 0; //@line 971
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 1131
 if (!$2) {
  $$0 = -1; //@line 1134
  return $$0 | 0; //@line 1135
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 1138
 $5 = $0 + 20 | 0; //@line 1139
 HEAP32[$5 >> 2] = 0; //@line 1140
 $6 = $0 + 16 | 0; //@line 1141
 HEAP32[$6 >> 2] = 0; //@line 1142
 if ($1 | 0) {
  $$034$i = $1; //@line 1145
  $23 = 0; //@line 1145
  do {
   $23 = $23 + 1 | 0; //@line 1147
   $$034$i = $$034$i >>> 1; //@line 1148
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 1156
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1159
 HEAP32[$0 + 28 >> 2] = $1; //@line 1161
 HEAP32[$0 + 32 >> 2] = $2; //@line 1163
 HEAP32[$0 >> 2] = 0; //@line 1164
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1167
 HEAP8[$0 + 9 >> 0] = 0; //@line 1169
 HEAP8[$0 + 8 >> 0] = 0; //@line 1171
 HEAP8[$0 + 36 >> 0] = 0; //@line 1173
 HEAP32[$0 + 40 >> 2] = 0; //@line 1175
 HEAP32[$0 + 44 >> 2] = 0; //@line 1177
 HEAP8[$0 + 184 >> 0] = 0; //@line 1179
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1181
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 1184
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1187
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 1190
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1193
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 1196
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 1199
 $$0 = $$033$i; //@line 1200
 return $$0 | 0; //@line 1201
}
function _sn_coap_protocol_init__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $11 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15082
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15084
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15086
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15088
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15090
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 15093
  $21 = ___async_retval; //@line 15094
  HEAP32[$21 >> 2] = $$1; //@line 15095
  return;
 }
 $11 = $AsyncRetVal + 16 | 0; //@line 15098
 HEAP32[$11 >> 2] = 0; //@line 15099
 HEAP32[$11 + 4 >> 2] = 0; //@line 15099
 HEAP32[$11 + 8 >> 2] = 0; //@line 15099
 HEAP32[$11 + 12 >> 2] = 0; //@line 15099
 HEAP32[$11 + 16 >> 2] = 0; //@line 15099
 HEAP32[$11 + 20 >> 2] = 0; //@line 15099
 HEAP32[$11 + 24 >> 2] = 0; //@line 15099
 HEAP32[$AsyncRetVal + 8 >> 2] = $2; //@line 15101
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 15103
 HEAP32[$AsyncRetVal >> 2] = $6; //@line 15104
 HEAP32[$AsyncRetVal + 12 >> 2] = $8; //@line 15106
 HEAP8[$AsyncRetVal + 43 >> 0] = 1; //@line 15108
 _ns_list_init_($AsyncRetVal + 16 | 0); //@line 15110
 HEAP8[$AsyncRetVal + 34 >> 0] = 2; //@line 15112
 HEAP32[$AsyncRetVal + 36 >> 2] = 0; //@line 15114
 HEAP8[$AsyncRetVal + 41 >> 0] = 10; //@line 15116
 HEAP8[$AsyncRetVal + 40 >> 0] = 3; //@line 15118
 _randLIB_seed_random(); //@line 15119
 _randLIB_get_16bit() | 0; //@line 15120
 $$1 = $AsyncRetVal; //@line 15121
 $21 = ___async_retval; //@line 15122
 HEAP32[$21 >> 2] = $$1; //@line 15123
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 523
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 120 >> 2] | 0; //@line 526
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 527
 $8 = FUNCTION_TABLE_iiiii[$7 & 15]($0, $1, $3, $4) | 0; //@line 528
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 41; //@line 531
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 533
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 535
  sp = STACKTOP; //@line 536
  return 0; //@line 537
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 539
 if (($2 | 0) != 0 & ($8 | 0) > -1) {
  $13 = $1 + 12 | 0; //@line 544
  dest = $2; //@line 545
  src = $13; //@line 545
  stop = dest + 60 | 0; //@line 545
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 545
   dest = dest + 4 | 0; //@line 545
   src = src + 4 | 0; //@line 545
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$13 + 60 >> 1] | 0; //@line 545
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 547
 _wait_ms(1); //@line 548
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 42; //@line 551
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 553
  sp = STACKTOP; //@line 554
  return 0; //@line 555
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 557
  return $8 | 0; //@line 558
 }
 return 0; //@line 560
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13747
 STACKTOP = STACKTOP + 48 | 0; //@line 13748
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13748
 $$byval_copy = sp + 20 | 0; //@line 13749
 $4 = sp; //@line 13750
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13751
 $5 = __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $4, 1, $3) | 0; //@line 13752
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 163; //@line 13755
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13757
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 13759
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 13761
  sp = STACKTOP; //@line 13762
  STACKTOP = sp; //@line 13763
  return 0; //@line 13763
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13765
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 13766
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 13766
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 13766
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 13766
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 13766
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 13767
  STACKTOP = sp; //@line 13770
  return (($5 | 0) < 0 ? $5 : 0) | 0; //@line 13770
 }
 return 0; //@line 13772
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_207($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29107
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29109
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29111
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29113
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29115
 $9 = HEAP32[$2 >> 2] | 0; //@line 29116
 if (!$9) {
  if (!$6) {
   return;
  }
  __ZdaPv($6); //@line 29123
  return;
 } else {
  $11 = HEAP32[$9 >> 2] | 0; //@line 29126
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 29127
  FUNCTION_TABLE_viii[$11 & 0]($4, $8, $6); //@line 29128
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 267; //@line 29131
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 29132
   HEAP32[$12 >> 2] = $2; //@line 29133
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 29134
   HEAP32[$13 >> 2] = $4; //@line 29135
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 29136
   HEAP32[$14 >> 2] = $6; //@line 29137
   sp = STACKTOP; //@line 29138
   return;
  }
  ___async_unwind = 0; //@line 29141
  HEAP32[$ReallocAsyncCtx2 >> 2] = 267; //@line 29142
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 29143
  HEAP32[$12 >> 2] = $2; //@line 29144
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 29145
  HEAP32[$13 >> 2] = $4; //@line 29146
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 29147
  HEAP32[$14 >> 2] = $6; //@line 29148
  sp = STACKTOP; //@line 29149
  return;
 }
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_149($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25185
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25189
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25191
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25193
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25194
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 25198
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 25202
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 25203
 FUNCTION_TABLE_vi[$12 & 511]($4); //@line 25204
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 25207
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 25208
  HEAP32[$13 >> 2] = $4; //@line 25209
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 25210
  HEAP32[$14 >> 2] = $6; //@line 25211
  $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 25212
  HEAP32[$15 >> 2] = $8; //@line 25213
  sp = STACKTOP; //@line 25214
  return;
 }
 ___async_unwind = 0; //@line 25217
 HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 25218
 $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 25219
 HEAP32[$13 >> 2] = $4; //@line 25220
 $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 25221
 HEAP32[$14 >> 2] = $6; //@line 25222
 $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 25223
 HEAP32[$15 >> 2] = $8; //@line 25224
 sp = STACKTOP; //@line 25225
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_187($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27977
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27981
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 556; //@line 27982
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 27984
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 27989
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 27990
  FUNCTION_TABLE_vi[$10 & 511]($4 + 32 | 0); //@line 27991
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 146; //@line 27994
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 27995
   HEAP32[$11 >> 2] = $4; //@line 27996
   sp = STACKTOP; //@line 27997
   return;
  }
  ___async_unwind = 0; //@line 28000
  HEAP32[$ReallocAsyncCtx >> 2] = 146; //@line 28001
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 28002
  HEAP32[$11 >> 2] = $4; //@line 28003
  sp = STACKTOP; //@line 28004
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 28008
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 28015
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 28016
 FUNCTION_TABLE_vi[$17 & 511]($4 + 16 | 0); //@line 28017
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 147; //@line 28020
  sp = STACKTOP; //@line 28021
  return;
 }
 ___async_unwind = 0; //@line 28024
 HEAP32[$ReallocAsyncCtx2 >> 2] = 147; //@line 28025
 sp = STACKTOP; //@line 28026
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 5955
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 5960
    $$0 = 1; //@line 5961
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 5974
     $$0 = 1; //@line 5975
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 5979
     $$0 = -1; //@line 5980
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 5990
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 5994
    $$0 = 2; //@line 5995
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 6007
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 6013
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 6017
    $$0 = 3; //@line 6018
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 6028
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 6034
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 6040
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 6044
    $$0 = 4; //@line 6045
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 6049
    $$0 = -1; //@line 6050
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 6055
}
function __ZNK13SocketAddress14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11659
 STACKTOP = STACKTOP + 16 | 0; //@line 11660
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11660
 $vararg_buffer = sp; //@line 11661
 $2 = HEAP32[$0 + 40 >> 2] | 0; //@line 11663
 if (!$2) {
  $$0 = 0; //@line 11666
  STACKTOP = sp; //@line 11667
  return $$0 | 0; //@line 11667
 }
 if (HEAP8[$0 >> 0] | 0) {
  $$0 = $0; //@line 11672
  STACKTOP = sp; //@line 11673
  return $$0 | 0; //@line 11673
 }
 switch ($2 | 0) {
 case 1:
  {
   $11 = HEAPU8[$0 + 45 >> 0] | 0; //@line 11682
   $14 = HEAPU8[$0 + 46 >> 0] | 0; //@line 11685
   $17 = HEAPU8[$0 + 47 >> 0] | 0; //@line 11688
   HEAP32[$vararg_buffer >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 11689
   HEAP32[$vararg_buffer + 4 >> 2] = $11; //@line 11691
   HEAP32[$vararg_buffer + 8 >> 2] = $14; //@line 11693
   HEAP32[$vararg_buffer + 12 >> 2] = $17; //@line 11695
   _sprintf($0, 5803, $vararg_buffer) | 0; //@line 11696
   $$0 = $0; //@line 11697
   STACKTOP = sp; //@line 11698
   return $$0 | 0; //@line 11698
  }
 case 2:
  {
   _ip6tos($0 + 44 | 0, $0) | 0; //@line 11703
   $$0 = $0; //@line 11704
   STACKTOP = sp; //@line 11705
   return $$0 | 0; //@line 11705
  }
 default:
  {
   $$0 = $0; //@line 11709
   STACKTOP = sp; //@line 11710
   return $$0 | 0; //@line 11710
  }
 }
 return 0; //@line 11713
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_124($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23263
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23267
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23269
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23271
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23273
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23275
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 23278
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 23279
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 23285
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 23286
   if (!___async) {
    ___async_unwind = 0; //@line 23289
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 361; //@line 23291
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 23293
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 23295
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 23297
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 23299
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 23301
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 23303
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 23306
   sp = STACKTOP; //@line 23307
   return;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_1($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 9311
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9313
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9315
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9317
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9319
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 9324
  return;
 }
 dest = $2 + 4 | 0; //@line 9328
 stop = dest + 52 | 0; //@line 9328
 do {
  HEAP32[dest >> 2] = 0; //@line 9328
  dest = dest + 4 | 0; //@line 9328
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 9329
 HEAP32[$2 + 8 >> 2] = $4; //@line 9331
 HEAP32[$2 + 12 >> 2] = -1; //@line 9333
 HEAP32[$2 + 48 >> 2] = 1; //@line 9335
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 9338
 $16 = HEAP32[$6 >> 2] | 0; //@line 9339
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 9340
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 9341
 if (!___async) {
  ___async_unwind = 0; //@line 9344
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 348; //@line 9346
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 9348
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 9350
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 9352
 sp = STACKTOP; //@line 9353
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_39($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10204
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10208
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10210
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10212
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10214
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10216
 $13 = $4 + 12 | 0; //@line 10218
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10219
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 10220
 $14 = FUNCTION_TABLE_iiiii[$12 & 15]($6, $8, $4, $10) | 0; //@line 10221
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 10224
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 10225
  HEAP32[$15 >> 2] = $13; //@line 10226
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 10227
  HEAP32[$16 >> 2] = $4; //@line 10228
  sp = STACKTOP; //@line 10229
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 10233
 ___async_unwind = 0; //@line 10234
 HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 10235
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 10236
 HEAP32[$15 >> 2] = $13; //@line 10237
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 10238
 HEAP32[$16 >> 2] = $4; //@line 10239
 sp = STACKTOP; //@line 10240
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_12($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11391
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11395
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11397
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11399
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11400
 if (!$$pr$i) {
  _free($6); //@line 11403
  return;
 }
 $11 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 11407
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 11408
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 11409
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 252; //@line 11412
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 11413
  HEAP32[$12 >> 2] = $4; //@line 11414
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 11415
  HEAP32[$13 >> 2] = $6; //@line 11416
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 11417
  HEAP32[$14 >> 2] = $8; //@line 11418
  sp = STACKTOP; //@line 11419
  return;
 }
 ___async_unwind = 0; //@line 11422
 HEAP32[$ReallocAsyncCtx7 >> 2] = 252; //@line 11423
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 11424
 HEAP32[$12 >> 2] = $4; //@line 11425
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 11426
 HEAP32[$13 >> 2] = $6; //@line 11427
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 11428
 HEAP32[$14 >> 2] = $8; //@line 11429
 sp = STACKTOP; //@line 11430
 return;
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 1211
 HEAP32[$0 + 20 >> 2] = 0; //@line 1213
 $5 = $0 + 16 | 0; //@line 1214
 HEAP32[$5 >> 2] = 0; //@line 1215
 if ($1 | 0) {
  $$034 = $1; //@line 1218
  $22 = 0; //@line 1218
  do {
   $22 = $22 + 1 | 0; //@line 1220
   $$034 = $$034 >>> 1; //@line 1221
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 1229
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1232
 HEAP32[$0 + 28 >> 2] = $1; //@line 1234
 HEAP32[$0 + 32 >> 2] = $2; //@line 1236
 HEAP32[$0 >> 2] = 0; //@line 1237
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1240
 HEAP8[$0 + 9 >> 0] = 0; //@line 1242
 HEAP8[$0 + 8 >> 0] = 0; //@line 1244
 HEAP8[$0 + 36 >> 0] = 0; //@line 1246
 HEAP32[$0 + 40 >> 2] = 0; //@line 1248
 HEAP32[$0 + 44 >> 2] = 0; //@line 1250
 HEAP8[$0 + 184 >> 0] = 0; //@line 1252
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1254
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 1257
  return $$033 | 0; //@line 1258
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1261
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 1264
  return $$033 | 0; //@line 1265
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1268
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 1271
 return $$033 | 0; //@line 1272
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_51($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10733
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10737
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 10740
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10741
 if (!$7) {
  if ($6) {
   $$06 = -3007; //@line 10745
   $12 = ___async_retval; //@line 10746
   HEAP32[$12 >> 2] = $$06; //@line 10747
   return;
  }
  $$06 = 0; //@line 10750
  $12 = ___async_retval; //@line 10751
  HEAP32[$12 >> 2] = $$06; //@line 10752
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 10756
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 10757
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 10758
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 10761
   $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 10762
   $$expand_i1_val = $6 & 1; //@line 10763
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 10764
   sp = STACKTOP; //@line 10765
   return;
  }
  ___async_unwind = 0; //@line 10768
  HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 10769
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 10770
  $$expand_i1_val = $6 & 1; //@line 10771
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 10772
  sp = STACKTOP; //@line 10773
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_50($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10686
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10690
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 10693
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10694
 if (!$7) {
  if ($6) {
   $$06 = -3007; //@line 10698
   $12 = ___async_retval; //@line 10699
   HEAP32[$12 >> 2] = $$06; //@line 10700
   return;
  }
  $$06 = 0; //@line 10703
  $12 = ___async_retval; //@line 10704
  HEAP32[$12 >> 2] = $$06; //@line 10705
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 10709
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 10710
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 10711
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 122; //@line 10714
   $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 10715
   $$expand_i1_val = $6 & 1; //@line 10716
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 10717
   sp = STACKTOP; //@line 10718
   return;
  }
  ___async_unwind = 0; //@line 10721
  HEAP32[$ReallocAsyncCtx6 >> 2] = 122; //@line 10722
  $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 10723
  $$expand_i1_val = $6 & 1; //@line 10724
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 10725
  sp = STACKTOP; //@line 10726
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_45($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 10536
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10540
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10542
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10544
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10546
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10548
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10551
 _equeue_event_delay($4, $6); //@line 10552
 _equeue_event_dtor($4, 114); //@line 10553
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 10554
 $14 = _equeue_post($8, 115, $4) | 0; //@line 10555
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 116; //@line 10558
  $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 10559
  HEAP32[$15 >> 2] = $10; //@line 10560
  $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 10561
  HEAP32[$16 >> 2] = $12; //@line 10562
  sp = STACKTOP; //@line 10563
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 10567
 ___async_unwind = 0; //@line 10568
 HEAP32[$ReallocAsyncCtx8 >> 2] = 116; //@line 10569
 $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 10570
 HEAP32[$15 >> 2] = $10; //@line 10571
 $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 10572
 HEAP32[$16 >> 2] = $12; //@line 10573
 sp = STACKTOP; //@line 10574
 return;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 4839
  $8 = $0; //@line 4839
  $9 = $1; //@line 4839
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 4841
   $$0914 = $$0914 + -1 | 0; //@line 4845
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 4846
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 4847
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 4855
   }
  }
  $$010$lcssa$off0 = $8; //@line 4860
  $$09$lcssa = $$0914; //@line 4860
 } else {
  $$010$lcssa$off0 = $0; //@line 4862
  $$09$lcssa = $2; //@line 4862
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 4866
 } else {
  $$012 = $$010$lcssa$off0; //@line 4868
  $$111 = $$09$lcssa; //@line 4868
  while (1) {
   $26 = $$111 + -1 | 0; //@line 4873
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 4874
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 4878
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 4881
    $$111 = $26; //@line 4881
   }
  }
 }
 return $$1$lcssa | 0; //@line 4885
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_177($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27497
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27501
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27503
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27505
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27507
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27509
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27511
 $15 = $4 + 12 | 0; //@line 27513
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27514
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 27515
 $16 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($6, $8, $10, 0, $4, $12) | 0; //@line 27516
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 27520
  ___async_unwind = 0; //@line 27521
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 166; //@line 27523
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $15; //@line 27525
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $14; //@line 27527
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $4; //@line 27529
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 27531
 sp = STACKTOP; //@line 27532
 return;
}
function _randLIB_get_16bit() {
 var $0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $42 = 0, $5 = 0, $6 = 0, $8 = 0;
 $0 = 9776; //@line 1787
 $2 = HEAP32[$0 >> 2] | 0; //@line 1789
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 1792
 $6 = 9784; //@line 1793
 $8 = HEAP32[$6 >> 2] | 0; //@line 1795
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 1798
 $12 = _i64Add($8 | 0, $11 | 0, $2 | 0, $5 | 0) | 0; //@line 1799
 $13 = tempRet0; //@line 1800
 $14 = $8 ^ $2; //@line 1801
 $15 = $11 ^ $5; //@line 1802
 $16 = _bitshift64Shl($2 | 0, $5 | 0, 55) | 0; //@line 1803
 $17 = tempRet0; //@line 1804
 $18 = _bitshift64Lshr($2 | 0, $5 | 0, 9) | 0; //@line 1805
 $23 = (tempRet0 | $17) ^ $15; //@line 1810
 $24 = _bitshift64Shl($14 | 0, $15 | 0, 14) | 0; //@line 1811
 $28 = 9776; //@line 1815
 HEAP32[$28 >> 2] = ($18 | $16) ^ $14 ^ $24; //@line 1817
 HEAP32[$28 + 4 >> 2] = $23 ^ tempRet0; //@line 1820
 $32 = _bitshift64Shl($14 | 0, $15 | 0, 36) | 0; //@line 1821
 $33 = tempRet0; //@line 1822
 $34 = _bitshift64Lshr($14 | 0, $15 | 0, 28) | 0; //@line 1823
 $38 = 9784; //@line 1827
 HEAP32[$38 >> 2] = $34 | $32; //@line 1829
 HEAP32[$38 + 4 >> 2] = tempRet0 | $33; //@line 1832
 $42 = _bitshift64Lshr($12 | 0, $13 | 0, 48) | 0; //@line 1833
 return $42 & 65535 | 0; //@line 1836
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_215($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 31510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31512
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31514
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31516
 $8 = HEAP32[$2 + 28 >> 2] | 0; //@line 31518
 if (!$8) {
  __ZdlPv($2); //@line 31521
  HEAP32[___async_retval >> 2] = -3007; //@line 31523
  return;
 }
 $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 31527
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 31528
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 31529
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 31532
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 31533
  HEAP32[$12 >> 2] = $2; //@line 31534
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 31535
  HEAP32[$13 >> 2] = $6; //@line 31536
  sp = STACKTOP; //@line 31537
  return;
 }
 ___async_unwind = 0; //@line 31540
 HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 31541
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 31542
 HEAP32[$12 >> 2] = $2; //@line 31543
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 31544
 HEAP32[$13 >> 2] = $6; //@line 31545
 sp = STACKTOP; //@line 31546
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27850
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27852
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27856
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27858
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27860
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27862
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 27866
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 27869
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 27870
   if (!___async) {
    ___async_unwind = 0; //@line 27873
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 365; //@line 27875
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 27877
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 27879
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 27881
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 27883
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 27885
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 27887
   sp = STACKTOP; //@line 27888
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 24959
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 24964
   label = 4; //@line 24965
  } else {
   $$01519 = $0; //@line 24967
   $23 = $1; //@line 24967
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 24972
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 24975
    $23 = $6; //@line 24976
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 24980
     label = 4; //@line 24981
     break;
    } else {
     $$01519 = $6; //@line 24984
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 24990
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 24992
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 25000
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 25008
  } else {
   $$pn = $$0; //@line 25010
   while (1) {
    $19 = $$pn + 1 | 0; //@line 25012
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 25016
     break;
    } else {
     $$pn = $19; //@line 25019
    }
   }
  }
  $$sink = $$1$lcssa; //@line 25024
 }
 return $$sink - $1 | 0; //@line 25027
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 14995
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14997
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15001
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 15006
  dest = $2; //@line 15007
  src = $8; //@line 15007
  stop = dest + 60 | 0; //@line 15007
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15007
   dest = dest + 4 | 0; //@line 15007
   src = src + 4 | 0; //@line 15007
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 15007
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 15009
 _wait_ms(1); //@line 15010
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 55; //@line 15013
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 15014
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 15015
  sp = STACKTOP; //@line 15016
  return;
 }
 ___async_unwind = 0; //@line 15019
 HEAP32[$ReallocAsyncCtx2 >> 2] = 55; //@line 15020
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 15021
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 15022
 sp = STACKTOP; //@line 15023
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 16034
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16036
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16040
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 16045
  dest = $2; //@line 16046
  src = $8; //@line 16046
  stop = dest + 60 | 0; //@line 16046
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 16046
   dest = dest + 4 | 0; //@line 16046
   src = src + 4 | 0; //@line 16046
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 16046
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16048
 _wait_ms(1); //@line 16049
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 42; //@line 16052
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 16053
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 16054
  sp = STACKTOP; //@line 16055
  return;
 }
 ___async_unwind = 0; //@line 16058
 HEAP32[$ReallocAsyncCtx2 >> 2] = 42; //@line 16059
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 16060
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 16061
 sp = STACKTOP; //@line 16062
 return;
}
function __ZN6Socket5closeEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27769
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27771
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27773
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27775
 $7 = HEAP32[$2 >> 2] | 0; //@line 27776
 HEAP32[$2 >> 2] = 0; //@line 27777
 $8 = HEAP32[$4 >> 2] | 0; //@line 27778
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0; //@line 27781
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 27782
 $12 = FUNCTION_TABLE_iii[$11 & 15]($8, $7) | 0; //@line 27783
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 27786
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 27787
  HEAP32[$13 >> 2] = $4; //@line 27788
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 27789
  HEAP32[$14 >> 2] = $6; //@line 27790
  sp = STACKTOP; //@line 27791
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 27795
 ___async_unwind = 0; //@line 27796
 HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 27797
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 27798
 HEAP32[$13 >> 2] = $4; //@line 27799
 $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 27800
 HEAP32[$14 >> 2] = $6; //@line 27801
 sp = STACKTOP; //@line 27802
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 7894
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 7901
   $10 = $1 + 16 | 0; //@line 7902
   $11 = HEAP32[$10 >> 2] | 0; //@line 7903
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 7906
    HEAP32[$1 + 24 >> 2] = $4; //@line 7908
    HEAP32[$1 + 36 >> 2] = 1; //@line 7910
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 7920
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 7925
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 7928
    HEAP8[$1 + 54 >> 0] = 1; //@line 7930
    break;
   }
   $21 = $1 + 24 | 0; //@line 7933
   $22 = HEAP32[$21 >> 2] | 0; //@line 7934
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 7937
    $28 = $4; //@line 7938
   } else {
    $28 = $22; //@line 7940
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 7949
   }
  }
 } while (0);
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_48($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10629
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10633
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10635
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10637
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10639
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10642
 _equeue_event_dtor($4, 114); //@line 10643
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 10644
 $12 = _equeue_post($6, 115, $4) | 0; //@line 10645
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 121; //@line 10648
  $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 10649
  HEAP32[$13 >> 2] = $8; //@line 10650
  $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 10651
  HEAP32[$14 >> 2] = $10; //@line 10652
  sp = STACKTOP; //@line 10653
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 10657
 ___async_unwind = 0; //@line 10658
 HEAP32[$ReallocAsyncCtx7 >> 2] = 121; //@line 10659
 $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 10660
 HEAP32[$13 >> 2] = $8; //@line 10661
 $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 10662
 HEAP32[$14 >> 2] = $10; //@line 10663
 sp = STACKTOP; //@line 10664
 return;
}
function _sn_coap_header_validity_check($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 5309
 STACKTOP = STACKTOP + 16 | 0; //@line 5310
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5310
 $vararg_buffer1 = sp + 8 | 0; //@line 5311
 $vararg_buffer = sp; //@line 5312
 L1 : do {
  if (($1 | 0) == 64) {
   $4 = HEAP32[$0 + 12 >> 2] | 0; //@line 5317
   if (($4 >>> 4 | $4 << 28) >>> 0 >= 4) {
    _mbed_tracef(2, 3803, 3695, $vararg_buffer); //@line 5323
    $$0 = -1; //@line 5324
    break;
   }
   switch (HEAP32[$0 + 8 >> 2] | 0) {
   case 95:
   case 165:
   case 164:
   case 163:
   case 162:
   case 161:
   case 160:
   case 143:
   case 141:
   case 140:
   case 136:
   case 134:
   case 133:
   case 132:
   case 131:
   case 130:
   case 129:
   case 128:
   case 69:
   case 68:
   case 67:
   case 66:
   case 65:
   case 4:
   case 3:
   case 2:
   case 1:
   case 0:
    {
     $$0 = 0; //@line 5331
     break L1;
     break;
    }
   default:
    {}
   }
   _mbed_tracef(2, 3803, 3749, $vararg_buffer1); //@line 5338
   $$0 = -1; //@line 5339
  } else {
   $$0 = -1; //@line 5341
  }
 } while (0);
 STACKTOP = sp; //@line 5344
 return $$0 | 0; //@line 5344
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_35($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9926
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9930
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9932
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9934
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9936
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9938
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9940
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9942
 $17 = $4 + 12 | 0; //@line 9944
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9945
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 9946
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 9947
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 9951
  ___async_unwind = 0; //@line 9952
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 125; //@line 9954
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 9956
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 9958
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 9960
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 9962
 sp = STACKTOP; //@line 9963
 return;
}
function _mbed_vtracef__async_cb_89($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14549
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14551
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14553
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14555
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 14560
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14562
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 14567
 $16 = _snprintf($4, $6, 5667, $2) | 0; //@line 14568
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 14570
 $19 = $4 + $$18 | 0; //@line 14572
 $20 = $6 - $$18 | 0; //@line 14573
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 5745, $12) | 0; //@line 14581
  }
 }
 $23 = HEAP32[129] | 0; //@line 14584
 $24 = HEAP32[122] | 0; //@line 14585
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14586
 FUNCTION_TABLE_vi[$23 & 511]($24); //@line 14587
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 14590
  sp = STACKTOP; //@line 14591
  return;
 }
 ___async_unwind = 0; //@line 14594
 HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 14595
 sp = STACKTOP; //@line 14596
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_128($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23686
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23690
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23692
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23694
 $9 = $4 + 12 | 0; //@line 23696
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23697
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 23698
 $10 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($6, $8, $4) | 0; //@line 23699
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 204; //@line 23702
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 23703
  HEAP32[$11 >> 2] = $9; //@line 23704
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 23705
  HEAP32[$12 >> 2] = $4; //@line 23706
  sp = STACKTOP; //@line 23707
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 23711
 ___async_unwind = 0; //@line 23712
 HEAP32[$ReallocAsyncCtx5 >> 2] = 204; //@line 23713
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 23714
 HEAP32[$11 >> 2] = $9; //@line 23715
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 23716
 HEAP32[$12 >> 2] = $4; //@line 23717
 sp = STACKTOP; //@line 23718
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7180
 $1 = HEAP32[220] | 0; //@line 7181
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 7187
 } else {
  $19 = 0; //@line 7189
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 7195
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 7201
    $12 = HEAP32[$11 >> 2] | 0; //@line 7202
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 7208
     HEAP8[$12 >> 0] = 10; //@line 7209
     $22 = 0; //@line 7210
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7214
   $17 = ___overflow($1, 10) | 0; //@line 7215
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 338; //@line 7218
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 7220
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7222
    sp = STACKTOP; //@line 7223
    return 0; //@line 7224
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7226
    $22 = $17 >> 31; //@line 7228
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 7235
 }
 return $22 | 0; //@line 7237
}
function __ZN6Socket4openEP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24233
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24235
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24237
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24239
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24241
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24243
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24245
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24247
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24249
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 24250
 $16 = FUNCTION_TABLE_iiii[$6 & 31]($2, $4, $AsyncRetVal) | 0; //@line 24251
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 24255
  ___async_unwind = 0; //@line 24256
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 131; //@line 24258
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 24260
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 24262
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 24264
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 24266
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 24268
 sp = STACKTOP; //@line 24269
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12573
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12575
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12577
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12579
 $7 = $2 + 12 | 0; //@line 12580
 $8 = HEAP32[$7 >> 2] | 0; //@line 12581
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 12584
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 12588
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 12589
 FUNCTION_TABLE_vii[$11 & 7]($6, $2); //@line 12590
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 12593
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 12594
  HEAP32[$12 >> 2] = $7; //@line 12595
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 12596
  HEAP32[$13 >> 2] = $4; //@line 12597
  sp = STACKTOP; //@line 12598
  return;
 }
 ___async_unwind = 0; //@line 12601
 HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 12602
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 12603
 HEAP32[$12 >> 2] = $7; //@line 12604
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 12605
 HEAP32[$13 >> 2] = $4; //@line 12606
 sp = STACKTOP; //@line 12607
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_185($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27898
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27904
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27906
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27908
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27910
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 27915
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 27917
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 27918
 if (!___async) {
  ___async_unwind = 0; //@line 27921
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 365; //@line 27923
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 27925
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 27927
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 27929
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 27931
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 27933
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 27935
 sp = STACKTOP; //@line 27936
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_202($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28823
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28827
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28829
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28830
 if (!$$pr$i) {
  if (!$6) {
   return;
  }
  __ZdaPv($6); //@line 28837
  return;
 } else {
  $9 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 28841
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 28842
  FUNCTION_TABLE_vi[$9 & 511]($4); //@line 28843
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 268; //@line 28846
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 28847
   HEAP32[$10 >> 2] = $4; //@line 28848
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 28849
   HEAP32[$11 >> 2] = $6; //@line 28850
   sp = STACKTOP; //@line 28851
   return;
  }
  ___async_unwind = 0; //@line 28854
  HEAP32[$ReallocAsyncCtx3 >> 2] = 268; //@line 28855
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 28856
  HEAP32[$10 >> 2] = $4; //@line 28857
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 28858
  HEAP32[$11 >> 2] = $6; //@line 28859
  sp = STACKTOP; //@line 28860
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_188($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28192
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28196
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28198
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28200
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28202
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28204
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28206
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28208
 $17 = $4 + 12 | 0; //@line 28210
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28211
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 28212
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 28213
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 28217
  ___async_unwind = 0; //@line 28218
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 272; //@line 28220
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 28222
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 28224
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 28226
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 28228
 sp = STACKTOP; //@line 28229
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9566
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 9569
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9570
 $7 = FUNCTION_TABLE_ii[$6 & 31]($0) | 0; //@line 9571
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 88; //@line 9574
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9576
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 9578
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 9580
  sp = STACKTOP; //@line 9581
  return 0; //@line 9582
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9584
 $12 = HEAP32[HEAP32[$7 >> 2] >> 2] | 0; //@line 9586
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9587
 $13 = FUNCTION_TABLE_iiiii[$12 & 15]($7, $1, $2, $3) | 0; //@line 9588
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 89; //@line 9591
  sp = STACKTOP; //@line 9592
  return 0; //@line 9593
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9595
  return $13 | 0; //@line 9596
 }
 return 0; //@line 9598
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23871
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23873
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23875
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23877
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 23879
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 23881
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 9326; //@line 23886
  HEAP32[$4 + 4 >> 2] = $6; //@line 23888
  _abort_message(9235, $4); //@line 23889
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 23892
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 23895
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 23896
 $16 = FUNCTION_TABLE_ii[$15 & 31]($12) | 0; //@line 23897
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 23901
  ___async_unwind = 0; //@line 23902
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 344; //@line 23904
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 23906
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 23908
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 23910
 sp = STACKTOP; //@line 23911
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_98($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 15337
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15339
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15341
 $6 = HEAP32[$2 + 28 >> 2] | 0; //@line 15343
 if (!$6) {
  __ZdlPv($2); //@line 15346
  HEAP32[10036 + ($4 << 2) >> 2] = 0; //@line 15348
  return;
 }
 $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 15353
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 15354
 FUNCTION_TABLE_vi[$10 & 511]($2 + 16 | 0); //@line 15355
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 236; //@line 15358
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 15359
  HEAP32[$11 >> 2] = $2; //@line 15360
  $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 15361
  HEAP32[$12 >> 2] = $4; //@line 15362
  sp = STACKTOP; //@line 15363
  return;
 }
 ___async_unwind = 0; //@line 15366
 HEAP32[$ReallocAsyncCtx4 >> 2] = 236; //@line 15367
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 15368
 HEAP32[$11 >> 2] = $2; //@line 15369
 $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 15370
 HEAP32[$12 >> 2] = $4; //@line 15371
 sp = STACKTOP; //@line 15372
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27326
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27328
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27330
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27334
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 27338
  label = 4; //@line 27339
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 27344
   label = 4; //@line 27345
  } else {
   $$037$off039 = 3; //@line 27347
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 27351
  $17 = $8 + 40 | 0; //@line 27352
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 27355
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 27365
    $$037$off039 = $$037$off038; //@line 27366
   } else {
    $$037$off039 = $$037$off038; //@line 27368
   }
  } else {
   $$037$off039 = $$037$off038; //@line 27371
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 27374
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_6($0) {
 $0 = $0 | 0;
 var $$4$ = 0, $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10721
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10725
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10727
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10729
 $$4$ = ($AsyncRetVal | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : $AsyncRetVal; //@line 10731
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 10732
 __ZN9UDPSocketD2Ev($4); //@line 10733
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 160; //@line 10736
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 10737
  HEAP32[$9 >> 2] = $6; //@line 10738
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 10739
  HEAP32[$10 >> 2] = $$4$; //@line 10740
  sp = STACKTOP; //@line 10741
  return;
 }
 ___async_unwind = 0; //@line 10744
 HEAP32[$ReallocAsyncCtx5 >> 2] = 160; //@line 10745
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 10746
 HEAP32[$9 >> 2] = $6; //@line 10747
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 10748
 HEAP32[$10 >> 2] = $$4$; //@line 10749
 sp = STACKTOP; //@line 10750
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 7753
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 7762
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 7767
      HEAP32[$13 >> 2] = $2; //@line 7768
      $19 = $1 + 40 | 0; //@line 7769
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 7772
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 7782
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 7786
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 7793
    }
   }
  }
 } while (0);
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 25432
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25438
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25440
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 25442
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 25443
 $10 = HEAP32[$6 >> 2] | 0; //@line 25444
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 25445
 __ZL28nsapi_dns_query_async_deletei($10); //@line 25446
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 214; //@line 25449
  $11 = $ReallocAsyncCtx15 + 4 | 0; //@line 25450
  HEAP32[$11 >> 2] = $9; //@line 25451
  $12 = $ReallocAsyncCtx15 + 8 | 0; //@line 25452
  HEAP32[$12 >> 2] = $8; //@line 25453
  sp = STACKTOP; //@line 25454
  return;
 }
 ___async_unwind = 0; //@line 25457
 HEAP32[$ReallocAsyncCtx15 >> 2] = 214; //@line 25458
 $11 = $ReallocAsyncCtx15 + 4 | 0; //@line 25459
 HEAP32[$11 >> 2] = $9; //@line 25460
 $12 = $ReallocAsyncCtx15 + 8 | 0; //@line 25461
 HEAP32[$12 >> 2] = $8; //@line 25462
 sp = STACKTOP; //@line 25463
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 6075
 while (1) {
  if ((HEAPU8[7298 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 6082
   break;
  }
  $7 = $$016 + 1 | 0; //@line 6085
  if (($7 | 0) == 87) {
   $$01214 = 7386; //@line 6088
   $$115 = 87; //@line 6088
   label = 5; //@line 6089
   break;
  } else {
   $$016 = $7; //@line 6092
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 7386; //@line 6098
  } else {
   $$01214 = 7386; //@line 6100
   $$115 = $$016; //@line 6100
   label = 5; //@line 6101
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 6106
   $$113 = $$01214; //@line 6107
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 6111
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 6118
   if (!$$115) {
    $$012$lcssa = $$113; //@line 6121
    break;
   } else {
    $$01214 = $$113; //@line 6124
    label = 5; //@line 6125
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 6132
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11190
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11196
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11198
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 11200
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11201
 $10 = HEAP32[$6 >> 2] | 0; //@line 11202
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 11203
 __ZL28nsapi_dns_query_async_deletei($10); //@line 11204
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 243; //@line 11207
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 11208
  HEAP32[$11 >> 2] = $9; //@line 11209
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 11210
  HEAP32[$12 >> 2] = $8; //@line 11211
  sp = STACKTOP; //@line 11212
  return;
 }
 ___async_unwind = 0; //@line 11215
 HEAP32[$ReallocAsyncCtx9 >> 2] = 243; //@line 11216
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 11217
 HEAP32[$11 >> 2] = $9; //@line 11218
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 11219
 HEAP32[$12 >> 2] = $8; //@line 11220
 sp = STACKTOP; //@line 11221
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_167($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26273
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26275
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26277
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26279
 $7 = HEAP32[$2 >> 2] | 0; //@line 26280
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 26285
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 26286
 FUNCTION_TABLE_viii[$9 & 0]($4, $6, 0); //@line 26287
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 222; //@line 26290
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 26291
  HEAP32[$10 >> 2] = $2; //@line 26292
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 26293
  HEAP32[$11 >> 2] = $4; //@line 26294
  sp = STACKTOP; //@line 26295
  return;
 }
 ___async_unwind = 0; //@line 26298
 HEAP32[$ReallocAsyncCtx6 >> 2] = 222; //@line 26299
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 26300
 HEAP32[$10 >> 2] = $2; //@line 26301
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 26302
 HEAP32[$11 >> 2] = $4; //@line 26303
 sp = STACKTOP; //@line 26304
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9520
 $1 = $0 + 12 | 0; //@line 9521
 $2 = HEAP32[$1 >> 2] | 0; //@line 9522
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9526
   _mbed_assert_internal(5972, 5977, 528); //@line 9527
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 86; //@line 9530
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 9532
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9534
    sp = STACKTOP; //@line 9535
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9538
    $7 = HEAP32[$1 >> 2] | 0; //@line 9540
    break;
   }
  } else {
   $7 = $2; //@line 9544
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 9547
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9548
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 9549
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 87; //@line 9552
  sp = STACKTOP; //@line 9553
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9556
  return;
 }
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 6148
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 6152
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 6155
   if (!$5) {
    $$0 = 0; //@line 6158
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 6164
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 6170
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 6177
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 6184
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 6191
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 6198
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 6205
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 6209
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 6219
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11131
 $1 = $0 + 12 | 0; //@line 11132
 $2 = HEAP32[$1 >> 2] | 0; //@line 11133
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11137
   _mbed_assert_internal(5972, 5977, 528); //@line 11138
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 137; //@line 11141
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 11143
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 11145
    sp = STACKTOP; //@line 11146
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11149
    $7 = HEAP32[$1 >> 2] | 0; //@line 11151
    break;
   }
  } else {
   $7 = $2; //@line 11155
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 11158
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11159
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 11160
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 138; //@line 11163
  sp = STACKTOP; //@line 11164
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11167
  return;
 }
}
function _mbed_vtracef__async_cb_95($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14934
 $3 = HEAP32[130] | 0; //@line 14938
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[122] | 0; //@line 14942
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 14943
  FUNCTION_TABLE_vi[$3 & 511]($5); //@line 14944
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 75; //@line 14947
   sp = STACKTOP; //@line 14948
   return;
  }
  ___async_unwind = 0; //@line 14951
  HEAP32[$ReallocAsyncCtx2 >> 2] = 75; //@line 14952
  sp = STACKTOP; //@line 14953
  return;
 } else {
  $6 = HEAP32[129] | 0; //@line 14956
  $7 = HEAP32[122] | 0; //@line 14957
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 14958
  FUNCTION_TABLE_vi[$6 & 511]($7); //@line 14959
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 77; //@line 14962
   sp = STACKTOP; //@line 14963
   return;
  }
  ___async_unwind = 0; //@line 14966
  HEAP32[$ReallocAsyncCtx4 >> 2] = 77; //@line 14967
  sp = STACKTOP; //@line 14968
  return;
 }
}
function _main__async_cb_196($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28555
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28557
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28559
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28561
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28563
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28565
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28567
 $15 = HEAP32[(HEAP32[$2 >> 2] | 0) + 88 >> 2] | 0; //@line 28570
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 28571
 $16 = FUNCTION_TABLE_ii[$15 & 31]($2) | 0; //@line 28572
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 28576
  ___async_unwind = 0; //@line 28577
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 313; //@line 28579
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $4; //@line 28581
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 28583
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 28585
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 28587
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 28589
 sp = STACKTOP; //@line 28590
 return;
}
function __ZN6SocketD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10854
 HEAP32[$0 >> 2] = 556; //@line 10855
 $2 = HEAP32[$0 + 44 >> 2] | 0; //@line 10857
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 10863
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10864
   FUNCTION_TABLE_vi[$6 & 511]($0 + 32 | 0); //@line 10865
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 128; //@line 10868
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10870
    sp = STACKTOP; //@line 10871
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10874
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 28 >> 2] | 0; //@line 10880
 if (!$9) {
  return;
 }
 $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 10887
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10888
 FUNCTION_TABLE_vi[$13 & 511]($0 + 16 | 0); //@line 10889
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 129; //@line 10892
  sp = STACKTOP; //@line 10893
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10896
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19674
 $2 = $0 + 12 | 0; //@line 19676
 $3 = HEAP32[$2 >> 2] | 0; //@line 19677
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19681
   _mbed_assert_internal(5972, 5977, 528); //@line 19682
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 302; //@line 19685
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 19687
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 19689
    sp = STACKTOP; //@line 19690
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19693
    $8 = HEAP32[$2 >> 2] | 0; //@line 19695
    break;
   }
  } else {
   $8 = $3; //@line 19699
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 19702
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19704
 FUNCTION_TABLE_vi[$7 & 511]($0); //@line 19705
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 303; //@line 19708
  sp = STACKTOP; //@line 19709
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19712
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 6344
 $32 = $0 + 3 | 0; //@line 6358
 $33 = HEAP8[$32 >> 0] | 0; //@line 6359
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 6361
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 6366
  $$sink21$lcssa = $32; //@line 6366
 } else {
  $$sink2123 = $32; //@line 6368
  $39 = $35; //@line 6368
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 6371
   $41 = HEAP8[$40 >> 0] | 0; //@line 6372
   $39 = $39 << 8 | $41 & 255; //@line 6374
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 6379
    $$sink21$lcssa = $40; //@line 6379
    break;
   } else {
    $$sink2123 = $40; //@line 6382
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 6389
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_40($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10246
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10250
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10252
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10253
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10257
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 10261
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 10262
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 10263
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 93; //@line 10266
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 10267
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 10268
  sp = STACKTOP; //@line 10269
  return;
 }
 ___async_unwind = 0; //@line 10272
 HEAP32[$ReallocAsyncCtx4 >> 2] = 93; //@line 10273
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 10274
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 10275
 sp = STACKTOP; //@line 10276
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_168($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26310
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26312
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26314
 $5 = HEAP32[$2 >> 2] | 0; //@line 26315
 if (!$5) {
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0; //@line 26320
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 26321
 FUNCTION_TABLE_viii[$7 & 0]($4, -3007, 0); //@line 26322
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 216; //@line 26325
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 26326
  HEAP32[$8 >> 2] = $2; //@line 26327
  $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 26328
  HEAP32[$9 >> 2] = $4; //@line 26329
  sp = STACKTOP; //@line 26330
  return;
 }
 ___async_unwind = 0; //@line 26333
 HEAP32[$ReallocAsyncCtx2 >> 2] = 216; //@line 26334
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 26335
 HEAP32[$8 >> 2] = $2; //@line 26336
 $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 26337
 HEAP32[$9 >> 2] = $4; //@line 26338
 sp = STACKTOP; //@line 26339
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_17($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11538
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11540
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11542
 $5 = HEAP32[$2 >> 2] | 0; //@line 11543
 if (!$5) {
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0; //@line 11548
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 11549
 FUNCTION_TABLE_viii[$7 & 0]($4, -3007, 0); //@line 11550
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 245; //@line 11553
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 11554
  HEAP32[$8 >> 2] = $2; //@line 11555
  $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 11556
  HEAP32[$9 >> 2] = $4; //@line 11557
  sp = STACKTOP; //@line 11558
  return;
 }
 ___async_unwind = 0; //@line 11561
 HEAP32[$ReallocAsyncCtx2 >> 2] = 245; //@line 11562
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 11563
 HEAP32[$8 >> 2] = $2; //@line 11564
 $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 11565
 HEAP32[$9 >> 2] = $4; //@line 11566
 sp = STACKTOP; //@line 11567
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13036
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13038
 $6 = HEAP32[$0 + 16 >> 2] | 0; //@line 13042
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 13044
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 13046
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$0 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 13052
 } else {
  $$0 = 0; //@line 13054
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 13056
 $14 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($6, $8, $10, $$0) | 0; //@line 13057
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 13060
  sp = STACKTOP; //@line 13061
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 13065
 ___async_unwind = 0; //@line 13066
 HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 13067
 sp = STACKTOP; //@line 13068
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7586
 STACKTOP = STACKTOP + 16 | 0; //@line 7587
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7587
 $1 = sp; //@line 7588
 HEAP32[$1 >> 2] = $varargs; //@line 7589
 $2 = HEAP32[188] | 0; //@line 7590
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7591
 _vfprintf($2, $0, $1) | 0; //@line 7592
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 345; //@line 7595
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7597
  sp = STACKTOP; //@line 7598
  STACKTOP = sp; //@line 7599
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7601
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7602
 _fputc(10, $2) | 0; //@line 7603
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 346; //@line 7606
  sp = STACKTOP; //@line 7607
  STACKTOP = sp; //@line 7608
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7610
  _abort(); //@line 7611
 }
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27538
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27542
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27544
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27545
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 27549
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 27553
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 27554
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 27555
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 168; //@line 27558
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 27559
  HEAP32[$11 >> 2] = $4; //@line 27560
  sp = STACKTOP; //@line 27561
  return;
 }
 ___async_unwind = 0; //@line 27564
 HEAP32[$ReallocAsyncCtx4 >> 2] = 168; //@line 27565
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 27566
 HEAP32[$11 >> 2] = $4; //@line 27567
 sp = STACKTOP; //@line 27568
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_130($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23734
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23738
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23740
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23741
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23745
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 23749
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 23750
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 23751
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 205; //@line 23754
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 23755
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23756
  sp = STACKTOP; //@line 23757
  return;
 }
 ___async_unwind = 0; //@line 23760
 HEAP32[$ReallocAsyncCtx4 >> 2] = 205; //@line 23761
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 23762
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23763
 sp = STACKTOP; //@line 23764
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_37($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10050
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10052
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 10053
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 10057
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 10061
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10062
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 10063
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 127; //@line 10066
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 10067
  HEAP32[$13 >> 2] = $6; //@line 10068
  sp = STACKTOP; //@line 10069
  return;
 }
 ___async_unwind = 0; //@line 10072
 HEAP32[$ReallocAsyncCtx5 >> 2] = 127; //@line 10073
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 10074
 HEAP32[$13 >> 2] = $6; //@line 10075
 sp = STACKTOP; //@line 10076
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9744
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 9747
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9748
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 9749
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 96; //@line 9752
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9754
  sp = STACKTOP; //@line 9755
  return 0; //@line 9756
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9758
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0; //@line 9761
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9762
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 9763
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 97; //@line 9766
  sp = STACKTOP; //@line 9767
  return 0; //@line 9768
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9770
  return $10 | 0; //@line 9771
 }
 return 0; //@line 9773
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 6278
 $23 = $0 + 2 | 0; //@line 6287
 $24 = HEAP8[$23 >> 0] | 0; //@line 6288
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 6291
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 6296
  $$lcssa = $24; //@line 6296
 } else {
  $$01618 = $23; //@line 6298
  $$019 = $27; //@line 6298
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 6300
   $31 = HEAP8[$30 >> 0] | 0; //@line 6301
   $$019 = ($$019 | $31 & 255) << 8; //@line 6304
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 6309
    $$lcssa = $31; //@line 6309
    break;
   } else {
    $$01618 = $30; //@line 6312
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 6319
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28470
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28472
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28474
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28476
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28478
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28480
 $12 = __Z18nsapi_create_stackP12NetworkStack(HEAP32[___async_retval >> 2] | 0) | 0; //@line 28483
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 28484
 __ZN6Socket4openEP12NetworkStack(10068, $12) | 0; //@line 28485
 if (!___async) {
  ___async_unwind = 0; //@line 28488
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 314; //@line 28490
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 28492
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 28494
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 28496
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 28498
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 28500
 sp = STACKTOP; //@line 28501
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9709
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 9712
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9713
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 9714
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 94; //@line 9717
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9719
  sp = STACKTOP; //@line 9720
  return 0; //@line 9721
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9723
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0; //@line 9726
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9727
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 9728
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 95; //@line 9731
  sp = STACKTOP; //@line 9732
  return 0; //@line 9733
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9735
  return $10 | 0; //@line 9736
 }
 return 0; //@line 9738
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28785
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28791
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28793
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28795
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28797
 $13 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 28799
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28800
 $14 = HEAP32[$6 >> 2] | 0; //@line 28801
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28802
 __ZL28nsapi_dns_query_async_deletei($14); //@line 28803
 if (!___async) {
  ___async_unwind = 0; //@line 28806
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 28808
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $13; //@line 28810
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 28812
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $10; //@line 28814
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 28816
 sp = STACKTOP; //@line 28817
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_11($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11353
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11359
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11361
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11363
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11365
 $13 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 11367
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11368
 $14 = HEAP32[$6 >> 2] | 0; //@line 11369
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 11370
 __ZL28nsapi_dns_query_async_deletei($14); //@line 11371
 if (!___async) {
  ___async_unwind = 0; //@line 11374
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 249; //@line 11376
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $13; //@line 11378
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $8; //@line 11380
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $10; //@line 11382
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $12; //@line 11384
 sp = STACKTOP; //@line 11385
 return;
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, sp = 0;
 sp = STACKTOP; //@line 27228
 STACKTOP = STACKTOP + 32 | 0; //@line 27229
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 27229
 $$byval_copy = sp; //@line 27230
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27232
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27234
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27238
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 27239
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 27239
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 27239
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 27239
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 27239
 __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 27240
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) < 0 ? $AsyncRetVal : 0; //@line 27244
 STACKTOP = sp; //@line 27245
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 5906
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 5906
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 5907
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 5908
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 5917
    $$016 = $9; //@line 5920
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 5920
   } else {
    $$016 = $0; //@line 5922
    $storemerge = 0; //@line 5922
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 5924
   $$0 = $$016; //@line 5925
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 5929
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 5935
   HEAP32[tempDoublePtr >> 2] = $2; //@line 5938
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 5938
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 5939
  }
 }
 return +$$0;
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 2823
  $5 = ($1 | 0) > 2046; //@line 2825
  $7 = $1 + -2046 | 0; //@line 2827
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 2832
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 2832
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 2836
   $12 = ($1 | 0) < -2044; //@line 2838
   $14 = $1 + 2044 | 0; //@line 2840
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 2845
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 2845
  } else {
   $$0 = $0; //@line 2847
   $$020 = $1; //@line 2847
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 2851
 $18 = tempRet0; //@line 2852
 HEAP32[tempDoublePtr >> 2] = $17; //@line 2853
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 2853
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 10498
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10500
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10502
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10504
 $9 = $2 + 12 | 0; //@line 10508
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 10509
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 10510
 $10 = _equeue_alloc($6, 16) | 0; //@line 10511
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 10515
  ___async_unwind = 0; //@line 10516
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 112; //@line 10518
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $9; //@line 10520
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 10522
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 10524
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $2; //@line 10526
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $9; //@line 10528
 sp = STACKTOP; //@line 10529
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23816
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23824
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23826
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23828
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23830
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23832
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23834
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23836
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 23847
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 23848
 HEAP32[$10 >> 2] = 0; //@line 23849
 HEAP32[$12 >> 2] = 0; //@line 23850
 HEAP32[$14 >> 2] = 0; //@line 23851
 HEAP32[$2 >> 2] = 0; //@line 23852
 $33 = HEAP32[$16 >> 2] | 0; //@line 23853
 HEAP32[$16 >> 2] = $33 | $18; //@line 23858
 if ($20 | 0) {
  ___unlockfile($22); //@line 23861
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 23864
 return;
}
function _mbed_vtracef__async_cb_92($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14669
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 14674
 $$pre = HEAP32[132] | 0; //@line 14675
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 14676
 FUNCTION_TABLE_v[$$pre & 7](); //@line 14677
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 84; //@line 14680
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 14681
  HEAP32[$6 >> 2] = $4; //@line 14682
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 14683
  HEAP32[$7 >> 2] = $5; //@line 14684
  sp = STACKTOP; //@line 14685
  return;
 }
 ___async_unwind = 0; //@line 14688
 HEAP32[$ReallocAsyncCtx9 >> 2] = 84; //@line 14689
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 14690
 HEAP32[$6 >> 2] = $4; //@line 14691
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 14692
 HEAP32[$7 >> 2] = $5; //@line 14693
 sp = STACKTOP; //@line 14694
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_56($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11169
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11171
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11173
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11175
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 20 >> 2] = $AsyncRetVal; //@line 11177
 _strcpy($AsyncRetVal, $4) | 0; //@line 11178
 $11 = _emscripten_asm_const_i(8) | 0; //@line 11179
 $13 = (($11 | 0) < 0) << 31 >> 31; //@line 11181
 $14 = ___muldi3($6 | 0, 0, 1e3, 0) | 0; //@line 11182
 $16 = _i64Add($14 | 0, tempRet0 | 0, $11 | 0, $13 | 0) | 0; //@line 11184
 $18 = HEAP32[$8 >> 2] | 0; //@line 11186
 $20 = $18 + 24 | 0; //@line 11188
 HEAP32[$20 >> 2] = $16; //@line 11190
 HEAP32[$20 + 4 >> 2] = tempRet0; //@line 11193
 $25 = $18 + 32 | 0; //@line 11195
 HEAP32[$25 >> 2] = $11; //@line 11197
 HEAP32[$25 + 4 >> 2] = $13; //@line 11200
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9224
 STACKTOP = STACKTOP + 16 | 0; //@line 9225
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9225
 $3 = sp; //@line 9226
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 9228
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 9231
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9232
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 9233
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 369; //@line 9236
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 9238
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 9240
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 9242
  sp = STACKTOP; //@line 9243
  STACKTOP = sp; //@line 9244
  return 0; //@line 9244
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9246
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 9250
 }
 STACKTOP = sp; //@line 9252
 return $8 & 1 | 0; //@line 9252
}
function __ZN6Socket4openEP12NetworkStack__async_cb_142($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24608
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24616
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24618
 $11 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 24619
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 84 >> 2] | 0; //@line 24622
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 24623
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24624
 FUNCTION_TABLE_viiii[$14 & 7]($11, $15, 135, $8); //@line 24625
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 24628
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 24629
  HEAP32[$16 >> 2] = $10; //@line 24630
  sp = STACKTOP; //@line 24631
  return;
 }
 ___async_unwind = 0; //@line 24634
 HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 24635
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 24636
 HEAP32[$16 >> 2] = $10; //@line 24637
 sp = STACKTOP; //@line 24638
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb_137($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24184
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24190
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24191
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 24192
 if (!$$pre$i$i) {
  HEAP32[___async_retval >> 2] = 0; //@line 24196
  return;
 }
 $10 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 24201
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 24202
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 24203
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 278; //@line 24206
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 24207
  HEAP32[$11 >> 2] = $6; //@line 24208
  sp = STACKTOP; //@line 24209
  return;
 }
 ___async_unwind = 0; //@line 24212
 HEAP32[$ReallocAsyncCtx3 >> 2] = 278; //@line 24213
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 24214
 HEAP32[$11 >> 2] = $6; //@line 24215
 sp = STACKTOP; //@line 24216
 return;
}
function _main__async_cb_199($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28643
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28645
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28647
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28649
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28651
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28653
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 28654
 $11 = _sn_coap_protocol_init(18, 315, 12, 17) | 0; //@line 28655
 if (!___async) {
  HEAP32[___async_retval >> 2] = $11; //@line 28659
  ___async_unwind = 0; //@line 28660
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 316; //@line 28662
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 28664
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 28666
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 28668
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 28670
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 28672
 sp = STACKTOP; //@line 28673
 return;
}
function _mbed_vtracef__async_cb_91($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14632
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14634
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 14639
 $$pre = HEAP32[132] | 0; //@line 14640
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 14641
 FUNCTION_TABLE_v[$$pre & 7](); //@line 14642
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 84; //@line 14645
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 14646
  HEAP32[$5 >> 2] = $2; //@line 14647
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 14648
  HEAP32[$6 >> 2] = $4; //@line 14649
  sp = STACKTOP; //@line 14650
  return;
 }
 ___async_unwind = 0; //@line 14653
 HEAP32[$ReallocAsyncCtx9 >> 2] = 84; //@line 14654
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 14655
 HEAP32[$5 >> 2] = $2; //@line 14656
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 14657
 HEAP32[$6 >> 2] = $4; //@line 14658
 sp = STACKTOP; //@line 14659
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8109
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 8115
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 8118
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 8121
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8122
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 8123
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 351; //@line 8126
    sp = STACKTOP; //@line 8127
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8130
    break;
   }
  }
 } while (0);
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_16($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11501
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11503
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11505
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11507
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11509
 $9 = HEAP32[$2 >> 2] | 0; //@line 11510
 if (!$9) {
  _free($6); //@line 11513
  return;
 }
 $11 = HEAP32[$9 >> 2] | 0; //@line 11516
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 11517
 FUNCTION_TABLE_viii[$11 & 0]($4, -3019, 0); //@line 11518
 if (!___async) {
  ___async_unwind = 0; //@line 11521
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 11523
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 11525
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 11527
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 11529
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 11531
 sp = STACKTOP; //@line 11532
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_190($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28310
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28316
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28318
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 28319
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 28323
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 28327
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28328
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 28329
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 28332
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 28333
  HEAP32[$13 >> 2] = $6; //@line 28334
  sp = STACKTOP; //@line 28335
  return;
 }
 ___async_unwind = 0; //@line 28338
 HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 28339
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 28340
 HEAP32[$13 >> 2] = $6; //@line 28341
 sp = STACKTOP; //@line 28342
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_152($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25377
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25381
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25383
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25385
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 25387
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 25388
 FUNCTION_TABLE_viii[$9 & 0]($4, 0, $6); //@line 25389
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 101; //@line 25392
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 25393
  HEAP32[$10 >> 2] = $8; //@line 25394
  sp = STACKTOP; //@line 25395
  return;
 }
 ___async_unwind = 0; //@line 25398
 HEAP32[$ReallocAsyncCtx >> 2] = 101; //@line 25399
 $10 = $ReallocAsyncCtx + 4 | 0; //@line 25400
 HEAP32[$10 >> 2] = $8; //@line 25401
 sp = STACKTOP; //@line 25402
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9108
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 9110
 $8 = $7 >> 8; //@line 9111
 if (!($7 & 1)) {
  $$0 = $8; //@line 9115
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 9120
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 9122
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 9125
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9130
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 9131
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 367; //@line 9134
  sp = STACKTOP; //@line 9135
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9138
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8278
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 8284
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 8287
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 8290
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8291
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 8292
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 354; //@line 8295
    sp = STACKTOP; //@line 8296
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8299
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_error_vfprintf__async_cb_102($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15730
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 15732
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15734
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15736
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15738
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15740
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 15742
 _serial_putc(10060, $2 << 24 >> 24); //@line 15743
 if (!___async) {
  ___async_unwind = 0; //@line 15746
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 299; //@line 15748
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 15750
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 15752
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 15754
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 15756
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 15758
 sp = STACKTOP; //@line 15759
 return;
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7332
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 7334
 while (1) {
  $2 = _malloc($$) | 0; //@line 7336
  if ($2 | 0) {
   $$lcssa = $2; //@line 7339
   label = 7; //@line 7340
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 7343
  if (!$4) {
   $$lcssa = 0; //@line 7346
   label = 7; //@line 7347
   break;
  }
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7350
  FUNCTION_TABLE_v[$4 & 7](); //@line 7351
  if (___async) {
   label = 5; //@line 7354
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7357
 }
 if ((label | 0) == 5) {
  HEAP32[$AsyncCtx >> 2] = 339; //@line 7360
  HEAP32[$AsyncCtx + 4 >> 2] = $$; //@line 7362
  sp = STACKTOP; //@line 7363
  return 0; //@line 7364
 } else if ((label | 0) == 7) {
  return $$lcssa | 0; //@line 7367
 }
 return 0; //@line 7369
}
function ___dynamic_cast__async_cb_171($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26706
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26708
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26710
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26716
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 26731
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 26747
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 26752
    break;
   }
  default:
   {
    $$0 = 0; //@line 26756
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 26761
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_156($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 25589
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25595
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25597
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25599
 $11 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 25601
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 25602
 $12 = HEAP32[$6 >> 2] | 0; //@line 25603
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 25604
 __ZL28nsapi_dns_query_async_deletei($12); //@line 25605
 if (!___async) {
  ___async_unwind = 0; //@line 25608
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 220; //@line 25610
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $11; //@line 25612
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $8; //@line 25614
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $10; //@line 25616
 sp = STACKTOP; //@line 25617
 return;
}
function __ZN6Socket5closeEv__async_cb_183($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27812
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27814
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 27815
 $8 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; //@line 27818
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27819
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 27820
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 27823
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 27824
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 27825
  sp = STACKTOP; //@line 27826
  return;
 }
 ___async_unwind = 0; //@line 27829
 HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 27830
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 27831
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 27832
 sp = STACKTOP; //@line 27833
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11059
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11061
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11063
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11065
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11067
 $9 = HEAP32[HEAP32[$AsyncRetVal >> 2] >> 2] | 0; //@line 11069
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 11070
 $10 = FUNCTION_TABLE_iiiii[$9 & 15]($AsyncRetVal, $2, $4, $6) | 0; //@line 11071
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 89; //@line 11074
  sp = STACKTOP; //@line 11075
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 11079
 ___async_unwind = 0; //@line 11080
 HEAP32[$ReallocAsyncCtx2 >> 2] = 89; //@line 11081
 sp = STACKTOP; //@line 11082
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_2($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9612
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9614
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9622
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9624
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9626
 _free(HEAP32[$0 + 16 >> 2] | 0); //@line 9627
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 9628
 $15 = __ZN6Socket5closeEv($10) | 0; //@line 9629
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 9633
  ___async_unwind = 0; //@line 9634
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 9636
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 9638
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $12; //@line 9640
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $14; //@line 9642
 sp = STACKTOP; //@line 9643
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9150
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 9152
 $7 = $6 >> 8; //@line 9153
 if (!($6 & 1)) {
  $$0 = $7; //@line 9157
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 9162
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 9164
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 9167
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9172
 FUNCTION_TABLE_viiiii[$16 & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 9173
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 368; //@line 9176
  sp = STACKTOP; //@line 9177
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9180
  return;
 }
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_108($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15946
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15950
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15952
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15954
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15956
 $13 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 116 >> 2] | 0; //@line 15959
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15960
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($4, $6, $8, $10) | 0; //@line 15961
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 15964
  sp = STACKTOP; //@line 15965
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 15969
 ___async_unwind = 0; //@line 15970
 HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 15971
 sp = STACKTOP; //@line 15972
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_47($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10596
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10600
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10602
 $7 = $4 + 12 | 0; //@line 10604
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10605
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 10606
 $8 = _equeue_alloc($6, 16) | 0; //@line 10607
 if (!___async) {
  HEAP32[___async_retval >> 2] = $8; //@line 10611
  ___async_unwind = 0; //@line 10612
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 119; //@line 10614
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $7; //@line 10616
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $6; //@line 10618
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $4; //@line 10620
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $7; //@line 10622
 sp = STACKTOP; //@line 10623
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9065
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 9067
 $6 = $5 >> 8; //@line 9068
 if (!($5 & 1)) {
  $$0 = $6; //@line 9072
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 9077
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 9079
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 9082
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9087
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 9088
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 366; //@line 9091
  sp = STACKTOP; //@line 9092
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9095
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_221($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32583
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32587
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32589
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32591
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32593
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 32595
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 32596
 FUNCTION_TABLE_viii[$11 & 0]($4, 0, $6); //@line 32597
 if (!___async) {
  ___async_unwind = 0; //@line 32600
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 170; //@line 32602
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 32604
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 32606
 sp = STACKTOP; //@line 32607
 return;
}
function _main__async_cb_198($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28606
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28608
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28612
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28614
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28616
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 28619
 HEAP32[$2 + 4 >> 2] = 6383; //@line 28621
 _printf(6435, $2) | 0; //@line 28622
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28623
 __Z17recv_coap_messagev(); //@line 28624
 if (!___async) {
  ___async_unwind = 0; //@line 28627
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 318; //@line 28629
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 28631
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 28633
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 28635
 sp = STACKTOP; //@line 28636
 return;
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 23462
  return $$1 | 0; //@line 23463
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 23468
  $$1 = 0; //@line 23469
  return $$1 | 0; //@line 23470
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 23477
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 23481
  return $$1 | 0; //@line 23482
 }
 $14 = _malloc($1) | 0; //@line 23484
 if (!$14) {
  $$1 = 0; //@line 23487
  return $$1 | 0; //@line 23488
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 23491
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 23496
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 23499
 _free($0); //@line 23500
 $$1 = $14; //@line 23501
 return $$1 | 0; //@line 23502
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 3197
 $3 = HEAP8[$1 >> 0] | 0; //@line 3199
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 3203
 $7 = $0 + 20 | 0; //@line 3204
 $9 = $0 + 28 | 0; //@line 3206
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0; //@line 3212
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 3215
 HEAP32[$9 >> 2] = 0; //@line 3216
 HEAP32[$7 >> 2] = 0; //@line 3217
 $15 = HEAP32[$0 >> 2] | 0; //@line 3218
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 3226
  HEAP32[$0 + 8 >> 2] = $23; //@line 3228
  HEAP32[$0 + 4 >> 2] = $23; //@line 3230
  $$0 = $15 << 27 >> 31; //@line 3233
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 3236
  $$0 = -1; //@line 3237
 }
 return $$0 | 0; //@line 3239
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_105($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15845
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15847
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15853
 $11 = HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0; //@line 15856
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15857
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($2, $4, $6, $8) | 0; //@line 15858
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 40; //@line 15861
  sp = STACKTOP; //@line 15862
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 15866
 ___async_unwind = 0; //@line 15867
 HEAP32[$ReallocAsyncCtx2 >> 2] = 40; //@line 15868
 sp = STACKTOP; //@line 15869
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_157($0) {
 $0 = $0 | 0;
 var $$pr$i72 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25623
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25627
 $$pr$i72 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25628
 if (!$$pr$i72) {
  return;
 }
 $7 = HEAP32[$$pr$i72 + 8 >> 2] | 0; //@line 25634
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 25635
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 25636
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 223; //@line 25639
  $8 = $ReallocAsyncCtx7 + 4 | 0; //@line 25640
  HEAP32[$8 >> 2] = $4; //@line 25641
  sp = STACKTOP; //@line 25642
  return;
 }
 ___async_unwind = 0; //@line 25645
 HEAP32[$ReallocAsyncCtx7 >> 2] = 223; //@line 25646
 $8 = $ReallocAsyncCtx7 + 4 | 0; //@line 25647
 HEAP32[$8 >> 2] = $4; //@line 25648
 sp = STACKTOP; //@line 25649
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_8($0) {
 $0 = $0 | 0;
 var $$pr$i52 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11227
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11231
 $$pr$i52 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11232
 if (!$$pr$i52) {
  return;
 }
 $7 = HEAP32[$$pr$i52 + 8 >> 2] | 0; //@line 11238
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 11239
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 11240
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 246; //@line 11243
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 11244
  HEAP32[$8 >> 2] = $4; //@line 11245
  sp = STACKTOP; //@line 11246
  return;
 }
 ___async_unwind = 0; //@line 11249
 HEAP32[$ReallocAsyncCtx3 >> 2] = 246; //@line 11250
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 11251
 HEAP32[$8 >> 2] = $4; //@line 11252
 sp = STACKTOP; //@line 11253
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 720
 $3 = HEAP32[$1 >> 2] | 0; //@line 721
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 723
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0$i = -3012; //@line 729
  return $$0$i | 0; //@line 730
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 732
 _wait_ms(1); //@line 733
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 736
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 738
  sp = STACKTOP; //@line 739
  return 0; //@line 740
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 742
 HEAP8[$1 + 8 >> 0] = 1; //@line 744
 $$0$i = 0; //@line 745
 return $$0$i | 0; //@line 746
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_153($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25469
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25473
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25474
 if (!$$pr$i) {
  return;
 }
 $7 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 25480
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 25481
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 25482
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 25485
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 25486
  HEAP32[$8 >> 2] = $4; //@line 25487
  sp = STACKTOP; //@line 25488
  return;
 }
 ___async_unwind = 0; //@line 25491
 HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 25492
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 25493
 HEAP32[$8 >> 2] = $4; //@line 25494
 sp = STACKTOP; //@line 25495
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 4904
 STACKTOP = STACKTOP + 256 | 0; //@line 4905
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 4905
 $5 = sp; //@line 4906
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 4912
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 4916
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 4919
   $$011 = $9; //@line 4920
   do {
    _out_670($0, $5, 256); //@line 4922
    $$011 = $$011 + -256 | 0; //@line 4923
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 4932
  } else {
   $$0$lcssa = $9; //@line 4934
  }
  _out_670($0, $5, $$0$lcssa); //@line 4936
 }
 STACKTOP = sp; //@line 4938
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 317
 $3 = HEAP32[$1 >> 2] | 0; //@line 318
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 320
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0 = -3012; //@line 326
  return $$0 | 0; //@line 327
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 329
 _wait_ms(1); //@line 330
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 34; //@line 333
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 335
  sp = STACKTOP; //@line 336
  return 0; //@line 337
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 339
 HEAP8[$1 + 8 >> 0] = 1; //@line 341
 $$0 = 0; //@line 342
 return $$0 | 0; //@line 343
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 24806
 STACKTOP = STACKTOP + 32 | 0; //@line 24807
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 24807
 $vararg_buffer = sp; //@line 24808
 $3 = sp + 20 | 0; //@line 24809
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 24813
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 24815
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 24817
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 24819
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 24821
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 24826
  $10 = -1; //@line 24827
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 24830
 }
 STACKTOP = sp; //@line 24832
 return $10 | 0; //@line 24832
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 19149
 STACKTOP = STACKTOP + 16 | 0; //@line 19150
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19150
 $vararg_buffer = sp; //@line 19151
 HEAP32[$vararg_buffer >> 2] = $0; //@line 19152
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 19154
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 19156
 _mbed_error_printf(5849, $vararg_buffer); //@line 19157
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19158
 _mbed_die(); //@line 19159
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 279; //@line 19162
  sp = STACKTOP; //@line 19163
  STACKTOP = sp; //@line 19164
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19166
  STACKTOP = sp; //@line 19167
  return;
 }
}
function __ZN12NetworkStack14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 10261
 STACKTOP = STACKTOP + 48 | 0; //@line 10262
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10262
 $$byval_copy = sp + 20 | 0; //@line 10263
 $2 = sp; //@line 10264
 __ZNK13SocketAddress8get_addrEv($2, $1); //@line 10265
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 10266
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 10266
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 10266
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 10266
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 10266
 $3 = _nsapi_dns_add_server($$byval_copy) | 0; //@line 10267
 STACKTOP = sp; //@line 10268
 return $3 | 0; //@line 10268
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_14($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 11449
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11451
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11453
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11455
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11457
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 11458
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 11459
 if (!___async) {
  ___async_unwind = 0; //@line 11462
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 250; //@line 11464
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 11466
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 11468
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 11470
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $8; //@line 11472
 sp = STACKTOP; //@line 11473
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_206($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29077
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29079
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29081
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29083
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29085
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 29086
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 29087
 if (!___async) {
  ___async_unwind = 0; //@line 29090
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 266; //@line 29092
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 29094
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 29096
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 29098
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 29100
 sp = STACKTOP; //@line 29101
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11174
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 11177
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 11179
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 11181
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 11186
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 11191
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11193
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 11194
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 11197
  sp = STACKTOP; //@line 11198
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11201
  return;
 }
}
function _mbed_vtracef__async_cb_90($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14602
 HEAP32[126] = HEAP32[124]; //@line 14604
 $2 = HEAP32[132] | 0; //@line 14605
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 14610
 HEAP32[133] = 0; //@line 14611
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 14612
 FUNCTION_TABLE_v[$2 & 7](); //@line 14613
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 14616
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14617
  HEAP32[$5 >> 2] = $4; //@line 14618
  sp = STACKTOP; //@line 14619
  return;
 }
 ___async_unwind = 0; //@line 14622
 HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 14623
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14624
 HEAP32[$5 >> 2] = $4; //@line 14625
 sp = STACKTOP; //@line 14626
 return;
}
function _mbed_vtracef__async_cb_87($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14338
 HEAP32[126] = HEAP32[124]; //@line 14340
 $2 = HEAP32[132] | 0; //@line 14341
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 14346
 HEAP32[133] = 0; //@line 14347
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 14348
 FUNCTION_TABLE_v[$2 & 7](); //@line 14349
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 14352
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14353
  HEAP32[$5 >> 2] = $4; //@line 14354
  sp = STACKTOP; //@line 14355
  return;
 }
 ___async_unwind = 0; //@line 14358
 HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 14359
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14360
 HEAP32[$5 >> 2] = $4; //@line 14361
 sp = STACKTOP; //@line 14362
 return;
}
function _mbed_vtracef__async_cb_86($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14308
 HEAP32[126] = HEAP32[124]; //@line 14310
 $2 = HEAP32[132] | 0; //@line 14311
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 14316
 HEAP32[133] = 0; //@line 14317
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 14318
 FUNCTION_TABLE_v[$2 & 7](); //@line 14319
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 14322
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14323
  HEAP32[$5 >> 2] = $4; //@line 14324
  sp = STACKTOP; //@line 14325
  return;
 }
 ___async_unwind = 0; //@line 14328
 HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 14329
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14330
 HEAP32[$5 >> 2] = $4; //@line 14331
 sp = STACKTOP; //@line 14332
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7056
 STACKTOP = STACKTOP + 16 | 0; //@line 7057
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7057
 $1 = sp; //@line 7058
 HEAP32[$1 >> 2] = $varargs; //@line 7059
 $2 = HEAP32[220] | 0; //@line 7060
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7061
 $3 = _vfprintf($2, $0, $1) | 0; //@line 7062
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 335; //@line 7065
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7067
  sp = STACKTOP; //@line 7068
  STACKTOP = sp; //@line 7069
  return 0; //@line 7069
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7071
  STACKTOP = sp; //@line 7072
  return $3 | 0; //@line 7072
 }
 return 0; //@line 7074
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6783
 STACKTOP = STACKTOP + 16 | 0; //@line 6784
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6784
 $3 = sp; //@line 6785
 HEAP32[$3 >> 2] = $varargs; //@line 6786
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6787
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 6788
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 331; //@line 6791
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 6793
  sp = STACKTOP; //@line 6794
  STACKTOP = sp; //@line 6795
  return 0; //@line 6795
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6797
  STACKTOP = sp; //@line 6798
  return $4 | 0; //@line 6798
 }
 return 0; //@line 6800
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11880
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11882
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11884
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 12 >> 2] | 0; //@line 11887
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 11888
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 11889
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 97; //@line 11892
  sp = STACKTOP; //@line 11893
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 11897
 ___async_unwind = 0; //@line 11898
 HEAP32[$ReallocAsyncCtx2 >> 2] = 97; //@line 11899
 sp = STACKTOP; //@line 11900
 return;
}
function _main__async_cb_194($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28507
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28511
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28513
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 28514
 _free($4); //@line 28515
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 28516
 _puts(6483) | 0; //@line 28517
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 319; //@line 28520
  $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 28521
  HEAP32[$7 >> 2] = $6; //@line 28522
  sp = STACKTOP; //@line 28523
  return;
 }
 ___async_unwind = 0; //@line 28526
 HEAP32[$ReallocAsyncCtx3 >> 2] = 319; //@line 28527
 $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 28528
 HEAP32[$7 >> 2] = $6; //@line 28529
 sp = STACKTOP; //@line 28530
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12317
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12319
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12321
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 8 >> 2] | 0; //@line 12324
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 12325
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 12326
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 95; //@line 12329
  sp = STACKTOP; //@line 12330
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 12334
 ___async_unwind = 0; //@line 12335
 HEAP32[$ReallocAsyncCtx2 >> 2] = 95; //@line 12336
 sp = STACKTOP; //@line 12337
 return;
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7014
 STACKTOP = STACKTOP + 16 | 0; //@line 7015
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7015
 $2 = sp; //@line 7016
 HEAP32[$2 >> 2] = $varargs; //@line 7017
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7018
 $3 = _vsprintf($0, $1, $2) | 0; //@line 7019
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 333; //@line 7022
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7024
  sp = STACKTOP; //@line 7025
  STACKTOP = sp; //@line 7026
  return 0; //@line 7026
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7028
  STACKTOP = sp; //@line 7029
  return $3 | 0; //@line 7029
 }
 return 0; //@line 7031
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 7831
 $5 = HEAP32[$4 >> 2] | 0; //@line 7832
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 7836
   HEAP32[$1 + 24 >> 2] = $3; //@line 7838
   HEAP32[$1 + 36 >> 2] = 1; //@line 7840
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 7844
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 7847
    HEAP32[$1 + 24 >> 2] = 2; //@line 7849
    HEAP8[$1 + 54 >> 0] = 1; //@line 7851
    break;
   }
   $10 = $1 + 24 | 0; //@line 7854
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 7858
   }
  }
 } while (0);
 return;
}
function __ZneRK13SocketAddressS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $5 = 0, label = 0;
 if (__ZNK13SocketAddresscvbEv($0) | 0) {
  label = 3; //@line 11889
 } else {
  if (__ZNK13SocketAddresscvbEv($1) | 0) {
   label = 3; //@line 11893
  } else {
   $$0$i = 1; //@line 11895
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = HEAP32[$0 + 40 >> 2] | 0; //@line 11901
   if (($5 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
    $10 = $0 + 44 | 0; //@line 11907
    $11 = $1 + 44 | 0; //@line 11908
    if (($5 | 0) == 1) {
     $$0$i = (_memcmp($10, $11, 4) | 0) == 0; //@line 11912
     break;
    } else {
     $$0$i = (_memcmp($10, $11, 16) | 0) == 0; //@line 11917
     break;
    }
   } else {
    $$0$i = 0; //@line 11921
   }
  }
 } while (0);
 return $$0$i ^ 1 | 0; //@line 11926
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1394
 $4 = _equeue_tick() | 0; //@line 1396
 HEAP32[$2 + -4 >> 2] = $1; //@line 1398
 $6 = $2 + -16 | 0; //@line 1399
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 1402
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1403
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 1404
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 57; //@line 1407
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1409
  sp = STACKTOP; //@line 1410
  return 0; //@line 1411
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1413
  _equeue_sema_signal($0 + 48 | 0); //@line 1415
  return $9 | 0; //@line 1416
 }
 return 0; //@line 1418
}
function __Znwj__async_cb($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13498
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13500
 $3 = _malloc($2) | 0; //@line 13501
 if (!$3) {
  $5 = __ZSt15get_new_handlerv() | 0; //@line 13504
  if (!$5) {
   $$lcssa = 0; //@line 13507
  } else {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 13509
   FUNCTION_TABLE_v[$5 & 7](); //@line 13510
   if (!___async) {
    ___async_unwind = 0; //@line 13513
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 339; //@line 13515
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 13517
   sp = STACKTOP; //@line 13518
   return;
  }
 } else {
  $$lcssa = $3; //@line 13522
 }
 HEAP32[___async_retval >> 2] = $$lcssa; //@line 13525
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19646
 $2 = HEAP32[220] | 0; //@line 19647
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19648
 _putc($1, $2) | 0; //@line 19649
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 300; //@line 19652
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 19654
  sp = STACKTOP; //@line 19655
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19658
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19659
 _fflush($2) | 0; //@line 19660
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 301; //@line 19663
  sp = STACKTOP; //@line 19664
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19667
  return;
 }
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23651
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23655
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23657
 $7 = $4 + 12 | 0; //@line 23659
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23660
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 23661
 __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(10008, $6, $4) | 0; //@line 23662
 if (!___async) {
  ___async_unwind = 0; //@line 23665
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 201; //@line 23667
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $7; //@line 23669
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 23671
 sp = STACKTOP; //@line 23672
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 24913
 $3 = HEAP8[$1 >> 0] | 0; //@line 24914
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 24919
  $$lcssa8 = $2; //@line 24919
 } else {
  $$011 = $1; //@line 24921
  $$0710 = $0; //@line 24921
  do {
   $$0710 = $$0710 + 1 | 0; //@line 24923
   $$011 = $$011 + 1 | 0; //@line 24924
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 24925
   $9 = HEAP8[$$011 >> 0] | 0; //@line 24926
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 24931
  $$lcssa8 = $8; //@line 24931
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 24941
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 24865
 STACKTOP = STACKTOP + 32 | 0; //@line 24866
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 24866
 $vararg_buffer = sp; //@line 24867
 HEAP32[$0 + 36 >> 2] = 12; //@line 24870
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 24878
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 24880
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 24882
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 24887
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 24890
 STACKTOP = sp; //@line 24891
 return $14 | 0; //@line 24891
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_131($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23770
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23774
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23775
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 23779
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23783
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23784
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 23785
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 202; //@line 23788
  sp = STACKTOP; //@line 23789
  return;
 }
 ___async_unwind = 0; //@line 23792
 HEAP32[$ReallocAsyncCtx2 >> 2] = 202; //@line 23793
 sp = STACKTOP; //@line 23794
 return;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 8381
 STACKTOP = STACKTOP + 16 | 0; //@line 8382
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8382
 $vararg_buffer = sp; //@line 8383
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 8384
 FUNCTION_TABLE_v[$0 & 7](); //@line 8385
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 356; //@line 8388
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 8390
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 8392
  sp = STACKTOP; //@line 8393
  STACKTOP = sp; //@line 8394
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8396
  _abort_message(9617, $vararg_buffer); //@line 8397
 }
}
function _mbed_die__async_cb_78($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 12970
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12972
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12974
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 12975
 _wait_ms(150); //@line 12976
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 282; //@line 12979
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 12980
  HEAP32[$4 >> 2] = $2; //@line 12981
  sp = STACKTOP; //@line 12982
  return;
 }
 ___async_unwind = 0; //@line 12985
 HEAP32[$ReallocAsyncCtx14 >> 2] = 282; //@line 12986
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 12987
 HEAP32[$4 >> 2] = $2; //@line 12988
 sp = STACKTOP; //@line 12989
 return;
}
function _mbed_die__async_cb_77($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 12945
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12947
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12949
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 12950
 _wait_ms(150); //@line 12951
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 283; //@line 12954
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 12955
  HEAP32[$4 >> 2] = $2; //@line 12956
  sp = STACKTOP; //@line 12957
  return;
 }
 ___async_unwind = 0; //@line 12960
 HEAP32[$ReallocAsyncCtx13 >> 2] = 283; //@line 12961
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 12962
 HEAP32[$4 >> 2] = $2; //@line 12963
 sp = STACKTOP; //@line 12964
 return;
}
function _mbed_die__async_cb_76($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 12920
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12922
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12924
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 12925
 _wait_ms(150); //@line 12926
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 284; //@line 12929
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 12930
  HEAP32[$4 >> 2] = $2; //@line 12931
  sp = STACKTOP; //@line 12932
  return;
 }
 ___async_unwind = 0; //@line 12935
 HEAP32[$ReallocAsyncCtx12 >> 2] = 284; //@line 12936
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 12937
 HEAP32[$4 >> 2] = $2; //@line 12938
 sp = STACKTOP; //@line 12939
 return;
}
function _mbed_die__async_cb_75($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 12895
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12897
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12899
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 12900
 _wait_ms(150); //@line 12901
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 285; //@line 12904
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 12905
  HEAP32[$4 >> 2] = $2; //@line 12906
  sp = STACKTOP; //@line 12907
  return;
 }
 ___async_unwind = 0; //@line 12910
 HEAP32[$ReallocAsyncCtx11 >> 2] = 285; //@line 12911
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 12912
 HEAP32[$4 >> 2] = $2; //@line 12913
 sp = STACKTOP; //@line 12914
 return;
}
function _mbed_die__async_cb_74($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 12870
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12872
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12874
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 12875
 _wait_ms(150); //@line 12876
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 286; //@line 12879
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 12880
  HEAP32[$4 >> 2] = $2; //@line 12881
  sp = STACKTOP; //@line 12882
  return;
 }
 ___async_unwind = 0; //@line 12885
 HEAP32[$ReallocAsyncCtx10 >> 2] = 286; //@line 12886
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 12887
 HEAP32[$4 >> 2] = $2; //@line 12888
 sp = STACKTOP; //@line 12889
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8498
 STACKTOP = STACKTOP + 16 | 0; //@line 8499
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8499
 $3 = sp; //@line 8500
 HEAP32[$3 >> 2] = $varargs; //@line 8501
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8502
 _mbed_vtracef($0, $1, $2, $3); //@line 8503
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 72; //@line 8506
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 8508
  sp = STACKTOP; //@line 8509
  STACKTOP = sp; //@line 8510
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8512
  STACKTOP = sp; //@line 8513
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 6748
  } else {
   $$01318 = $0; //@line 6750
   $$01417 = $2; //@line 6750
   $$019 = $1; //@line 6750
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 6752
    $5 = HEAP8[$$019 >> 0] | 0; //@line 6753
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 6758
    if (!$$01417) {
     $14 = 0; //@line 6763
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 6766
     $$019 = $$019 + 1 | 0; //@line 6766
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 6772
  }
 } while (0);
 return $14 | 0; //@line 6775
}
function _mbed_die__async_cb_73($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12845
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12847
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12849
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 12850
 _wait_ms(150); //@line 12851
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 287; //@line 12854
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 12855
  HEAP32[$4 >> 2] = $2; //@line 12856
  sp = STACKTOP; //@line 12857
  return;
 }
 ___async_unwind = 0; //@line 12860
 HEAP32[$ReallocAsyncCtx9 >> 2] = 287; //@line 12861
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 12862
 HEAP32[$4 >> 2] = $2; //@line 12863
 sp = STACKTOP; //@line 12864
 return;
}
function _mbed_die__async_cb_72($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12820
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12822
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12824
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 12825
 _wait_ms(400); //@line 12826
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 288; //@line 12829
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 12830
  HEAP32[$4 >> 2] = $2; //@line 12831
  sp = STACKTOP; //@line 12832
  return;
 }
 ___async_unwind = 0; //@line 12835
 HEAP32[$ReallocAsyncCtx8 >> 2] = 288; //@line 12836
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 12837
 HEAP32[$4 >> 2] = $2; //@line 12838
 sp = STACKTOP; //@line 12839
 return;
}
function _mbed_die__async_cb_71($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12795
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12797
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12799
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 12800
 _wait_ms(400); //@line 12801
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 289; //@line 12804
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 12805
  HEAP32[$4 >> 2] = $2; //@line 12806
  sp = STACKTOP; //@line 12807
  return;
 }
 ___async_unwind = 0; //@line 12810
 HEAP32[$ReallocAsyncCtx7 >> 2] = 289; //@line 12811
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 12812
 HEAP32[$4 >> 2] = $2; //@line 12813
 sp = STACKTOP; //@line 12814
 return;
}
function _mbed_die__async_cb_70($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12770
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12772
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12774
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 12775
 _wait_ms(400); //@line 12776
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 290; //@line 12779
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 12780
  HEAP32[$4 >> 2] = $2; //@line 12781
  sp = STACKTOP; //@line 12782
  return;
 }
 ___async_unwind = 0; //@line 12785
 HEAP32[$ReallocAsyncCtx6 >> 2] = 290; //@line 12786
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 12787
 HEAP32[$4 >> 2] = $2; //@line 12788
 sp = STACKTOP; //@line 12789
 return;
}
function _mbed_die__async_cb_69($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12745
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12747
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12749
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 12750
 _wait_ms(400); //@line 12751
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 12754
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 12755
  HEAP32[$4 >> 2] = $2; //@line 12756
  sp = STACKTOP; //@line 12757
  return;
 }
 ___async_unwind = 0; //@line 12760
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 12761
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 12762
 HEAP32[$4 >> 2] = $2; //@line 12763
 sp = STACKTOP; //@line 12764
 return;
}
function _mbed_die__async_cb_68($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12720
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12722
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12724
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 12725
 _wait_ms(400); //@line 12726
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 292; //@line 12729
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 12730
  HEAP32[$4 >> 2] = $2; //@line 12731
  sp = STACKTOP; //@line 12732
  return;
 }
 ___async_unwind = 0; //@line 12735
 HEAP32[$ReallocAsyncCtx4 >> 2] = 292; //@line 12736
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 12737
 HEAP32[$4 >> 2] = $2; //@line 12738
 sp = STACKTOP; //@line 12739
 return;
}
function _mbed_die__async_cb_67($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12695
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12697
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12699
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 12700
 _wait_ms(400); //@line 12701
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 293; //@line 12704
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 12705
  HEAP32[$4 >> 2] = $2; //@line 12706
  sp = STACKTOP; //@line 12707
  return;
 }
 ___async_unwind = 0; //@line 12710
 HEAP32[$ReallocAsyncCtx3 >> 2] = 293; //@line 12711
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 12712
 HEAP32[$4 >> 2] = $2; //@line 12713
 sp = STACKTOP; //@line 12714
 return;
}
function _mbed_die__async_cb_66($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12670
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12672
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12674
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 12675
 _wait_ms(400); //@line 12676
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 294; //@line 12679
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 12680
  HEAP32[$4 >> 2] = $2; //@line 12681
  sp = STACKTOP; //@line 12682
  return;
 }
 ___async_unwind = 0; //@line 12685
 HEAP32[$ReallocAsyncCtx2 >> 2] = 294; //@line 12686
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 12687
 HEAP32[$4 >> 2] = $2; //@line 12688
 sp = STACKTOP; //@line 12689
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_165($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 26225
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26227
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26229
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26231
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 26232
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 26233
 if (!___async) {
  ___async_unwind = 0; //@line 26236
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 221; //@line 26238
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 26240
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $4; //@line 26242
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $6; //@line 26244
 sp = STACKTOP; //@line 26245
 return;
}
function _mbed_die__async_cb_65($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12645
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12647
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12649
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 12650
 _wait_ms(400); //@line 12651
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 295; //@line 12654
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 12655
  HEAP32[$4 >> 2] = $2; //@line 12656
  sp = STACKTOP; //@line 12657
  return;
 }
 ___async_unwind = 0; //@line 12660
 HEAP32[$ReallocAsyncCtx >> 2] = 295; //@line 12661
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 12662
 HEAP32[$4 >> 2] = $2; //@line 12663
 sp = STACKTOP; //@line 12664
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 25903
 STACKTOP = STACKTOP + 128 | 0; //@line 25904
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 25904
 $3 = sp; //@line 25905
 dest = $3; //@line 25906
 stop = dest + 124 | 0; //@line 25906
 do {
  HEAP32[dest >> 2] = 0; //@line 25906
  dest = dest + 4 | 0; //@line 25906
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 18; //@line 25908
 HEAP32[$3 + 44 >> 2] = $0; //@line 25910
 HEAP32[$3 + 76 >> 2] = -1; //@line 25912
 HEAP32[$3 + 84 >> 2] = $0; //@line 25914
 $8 = _vfscanf($3, $1, $2) | 0; //@line 25915
 STACKTOP = sp; //@line 25916
 return $8 | 0; //@line 25916
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19477
 STACKTOP = STACKTOP + 16 | 0; //@line 19478
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19478
 $1 = sp; //@line 19479
 HEAP32[$1 >> 2] = $varargs; //@line 19480
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19481
 _mbed_error_vfprintf($0, $1); //@line 19482
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 296; //@line 19485
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 19487
  sp = STACKTOP; //@line 19488
  STACKTOP = sp; //@line 19489
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19491
  STACKTOP = sp; //@line 19492
  return;
 }
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 788
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 791
 if (($6 | 0) < 0) {
  $$0$i = -3001; //@line 794
  return $$0$i | 0; //@line 795
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 797
 _wait_ms(1); //@line 798
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 801
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 803
  sp = STACKTOP; //@line 804
  return 0; //@line 805
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 807
 $$0$i = $6; //@line 808
 return $$0$i | 0; //@line 809
}
function _store_int_728($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 166
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 172
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 177
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 182
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 187
     HEAP32[$7 >> 2] = $2; //@line 189
     HEAP32[$7 + 4 >> 2] = $3; //@line 192
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 385
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 388
 if (($6 | 0) < 0) {
  $$0 = -3001; //@line 391
  return $$0 | 0; //@line 392
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 394
 _wait_ms(1); //@line 395
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 36; //@line 398
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 400
  sp = STACKTOP; //@line 401
  return 0; //@line 402
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 404
 $$0 = $6; //@line 405
 return $$0 | 0; //@line 406
}
function __ZThn4_N17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 674
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 676
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 677
 _wait_ms(1); //@line 678
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 681
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 683
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 685
  sp = STACKTOP; //@line 686
  return 0; //@line 687
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 689
 HEAP8[$1 + 8 >> 0] = 0; //@line 691
 if (!$1) {
  return $3 | 0; //@line 694
 }
 __ZdlPv($1); //@line 696
 return $3 | 0; //@line 697
}
function __ZN17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 271
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 273
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 274
 _wait_ms(1); //@line 275
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 33; //@line 278
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 280
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 282
  sp = STACKTOP; //@line 283
  return 0; //@line 284
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 286
 HEAP8[$1 + 8 >> 0] = 0; //@line 288
 if (!$1) {
  return $3 | 0; //@line 291
 }
 __ZdlPv($1); //@line 293
 return $3 | 0; //@line 294
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 33126
 newDynamicTop = oldDynamicTop + increment | 0; //@line 33127
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 33131
  ___setErrNo(12); //@line 33132
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 33136
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 33140
   ___setErrNo(12); //@line 33141
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 33145
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 25047
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 25049
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 25055
  $11 = ___fwritex($0, $4, $3) | 0; //@line 25056
  if ($phitmp) {
   $13 = $11; //@line 25058
  } else {
   ___unlockfile($3); //@line 25060
   $13 = $11; //@line 25061
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 25065
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 25069
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 25072
 }
 return $15 | 0; //@line 25074
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_134($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24036
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24040
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24041
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 24047
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 24048
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 24049
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 210; //@line 24052
  sp = STACKTOP; //@line 24053
  return;
 }
 ___async_unwind = 0; //@line 24056
 HEAP32[$ReallocAsyncCtx3 >> 2] = 210; //@line 24057
 sp = STACKTOP; //@line 24058
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_116($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 19995
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19999
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20000
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 20006
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 20007
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 20008
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 199; //@line 20011
  sp = STACKTOP; //@line 20012
  return;
 }
 ___async_unwind = 0; //@line 20015
 HEAP32[$ReallocAsyncCtx9 >> 2] = 199; //@line 20016
 sp = STACKTOP; //@line 20017
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_32($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9711
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9715
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9716
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 9722
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 9723
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 9724
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 241; //@line 9727
  sp = STACKTOP; //@line 9728
  return;
 }
 ___async_unwind = 0; //@line 9731
 HEAP32[$ReallocAsyncCtx3 >> 2] = 241; //@line 9732
 sp = STACKTOP; //@line 9733
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 4765
 } else {
  $$056 = $2; //@line 4767
  $15 = $1; //@line 4767
  $8 = $0; //@line 4767
  while (1) {
   $14 = $$056 + -1 | 0; //@line 4775
   HEAP8[$14 >> 0] = HEAPU8[7280 + ($8 & 15) >> 0] | 0 | $3; //@line 4776
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 4777
   $15 = tempRet0; //@line 4778
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 4783
    break;
   } else {
    $$056 = $14; //@line 4786
   }
  }
 }
 return $$05$lcssa | 0; //@line 4790
}
function __ZN9UDPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12019
 $1 = $0 + 52 | 0; //@line 12020
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 12023
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 12026
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 12036
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12037
 FUNCTION_TABLE_vi[$$pre & 511]($0 + 32 | 0); //@line 12038
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 149; //@line 12041
  sp = STACKTOP; //@line 12042
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12045
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_161($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 25860
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25866
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 25867
 $7 = HEAP32[$6 >> 2] | 0; //@line 25868
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 25869
 __ZL26nsapi_dns_query_async_sendPv($7); //@line 25870
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 230; //@line 25873
  sp = STACKTOP; //@line 25874
  return;
 }
 ___async_unwind = 0; //@line 25877
 HEAP32[$ReallocAsyncCtx13 >> 2] = 230; //@line 25878
 sp = STACKTOP; //@line 25879
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 25264
 $3 = HEAP8[$1 >> 0] | 0; //@line 25266
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 25270
 $7 = HEAP32[$0 >> 2] | 0; //@line 25271
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 25276
  HEAP32[$0 + 4 >> 2] = 0; //@line 25278
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 25280
  HEAP32[$0 + 28 >> 2] = $14; //@line 25282
  HEAP32[$0 + 20 >> 2] = $14; //@line 25284
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 25290
  $$0 = 0; //@line 25291
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 25294
  $$0 = -1; //@line 25295
 }
 return $$0 | 0; //@line 25297
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 8346
 $0 = ___cxa_get_globals_fast() | 0; //@line 8347
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 8350
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 8354
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 8366
    _emscripten_alloc_async_context(4, sp) | 0; //@line 8367
    __ZSt11__terminatePFvvE($16); //@line 8368
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 8373
 _emscripten_alloc_async_context(4, sp) | 0; //@line 8374
 __ZSt11__terminatePFvvE($17); //@line 8375
}
function __ZN9UDPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27942
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27944
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 27946
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 27953
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27954
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 27955
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 147; //@line 27958
  sp = STACKTOP; //@line 27959
  return;
 }
 ___async_unwind = 0; //@line 27962
 HEAP32[$ReallocAsyncCtx2 >> 2] = 147; //@line 27963
 sp = STACKTOP; //@line 27964
 return;
}
function __ZN6SocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13541
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13543
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 13545
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 13552
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 13553
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 13554
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 129; //@line 13557
  sp = STACKTOP; //@line 13558
  return;
 }
 ___async_unwind = 0; //@line 13561
 HEAP32[$ReallocAsyncCtx2 >> 2] = 129; //@line 13562
 sp = STACKTOP; //@line 13563
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_175($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27298
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27302
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 27304
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27305
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 27306
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 87; //@line 27309
  sp = STACKTOP; //@line 27310
  return;
 }
 ___async_unwind = 0; //@line 27313
 HEAP32[$ReallocAsyncCtx >> 2] = 87; //@line 27314
 sp = STACKTOP; //@line 27315
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 766
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 767
 _wait_ms(1); //@line 768
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 48; //@line 771
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 773
  sp = STACKTOP; //@line 774
  return 0; //@line 775
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 777
  return $6 | 0; //@line 778
 }
 return 0; //@line 780
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 3247
 $4 = HEAP32[$3 >> 2] | 0; //@line 3248
 $5 = $2 + 256 | 0; //@line 3249
 $6 = _memchr($4, 0, $5) | 0; //@line 3250
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 3255
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 3257
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 3258
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 3261
 $14 = $4 + $$027 | 0; //@line 3262
 HEAP32[$0 + 8 >> 2] = $14; //@line 3264
 HEAP32[$3 >> 2] = $14; //@line 3265
 return $$027$ | 0; //@line 3266
}
function __ZN17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 360
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 363
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 364
 _wait_ms(1); //@line 365
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 35; //@line 368
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 370
  sp = STACKTOP; //@line 371
  return 0; //@line 372
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 374
  return $6 | 0; //@line 375
 }
 return 0; //@line 377
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_166($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 26251
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26253
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26255
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 26256
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 26257
 if (!___async) {
  ___async_unwind = 0; //@line 26260
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 215; //@line 26262
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 26264
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 26266
 sp = STACKTOP; //@line 26267
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_15($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 11479
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11481
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11483
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 11484
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 11485
 if (!___async) {
  ___async_unwind = 0; //@line 11488
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 244; //@line 11490
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 11492
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 11494
 sp = STACKTOP; //@line 11495
 return;
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 6233
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 6236
 $$sink17$sink = $0; //@line 6236
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 6238
  $12 = HEAP8[$11 >> 0] | 0; //@line 6239
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 6247
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 6252
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 6257
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 4802
 } else {
  $$06 = $2; //@line 4804
  $11 = $1; //@line 4804
  $7 = $0; //@line 4804
  while (1) {
   $10 = $$06 + -1 | 0; //@line 4809
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 4810
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 4811
   $11 = tempRet0; //@line 4812
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 4817
    break;
   } else {
    $$06 = $10; //@line 4820
   }
  }
 }
 return $$0$lcssa | 0; //@line 4824
}
function _arg_n_727($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 121
 STACKTOP = STACKTOP + 16 | 0; //@line 122
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 122
 $2 = sp; //@line 123
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 125
 $$0 = $1; //@line 126
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 140
  $10 = HEAP32[$9 >> 2] | 0; //@line 141
  HEAP32[$2 >> 2] = $9 + 4; //@line 143
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 146
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 151
 return $10 | 0; //@line 151
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_133($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23941
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23945
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 23947
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 23948
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 23949
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 138; //@line 23952
  sp = STACKTOP; //@line 23953
  return;
 }
 ___async_unwind = 0; //@line 23956
 HEAP32[$ReallocAsyncCtx >> 2] = 138; //@line 23957
 sp = STACKTOP; //@line 23958
 return;
}
function _invoke_ticker__async_cb_54($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11035
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 11041
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 11042
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 11043
 FUNCTION_TABLE_vi[$5 & 511]($6); //@line 11044
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 303; //@line 11047
  sp = STACKTOP; //@line 11048
  return;
 }
 ___async_unwind = 0; //@line 11051
 HEAP32[$ReallocAsyncCtx >> 2] = 303; //@line 11052
 sp = STACKTOP; //@line 11053
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9257
 do {
  if (!$0) {
   $3 = 0; //@line 9261
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9263
   $2 = ___dynamic_cast($0, 128, 184, 0) | 0; //@line 9264
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 370; //@line 9267
    sp = STACKTOP; //@line 9268
    return 0; //@line 9269
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9271
    $3 = ($2 | 0) != 0 & 1; //@line 9274
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 9279
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 4446
 } else {
  $$04 = 0; //@line 4448
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 4451
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 4455
   $12 = $7 + 1 | 0; //@line 4456
   HEAP32[$0 >> 2] = $12; //@line 4457
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 4463
    break;
   } else {
    $$04 = $11; //@line 4466
   }
  }
 }
 return $$0$lcssa | 0; //@line 4470
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 32631
 $y_sroa_0_0_extract_trunc = $b$0; //@line 32632
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 32633
 $1$1 = tempRet0; //@line 32634
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 32636
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18415
 $1 = HEAP32[$0 >> 2] | 0; //@line 18416
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 18418
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18419
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 18420
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 261; //@line 18423
  sp = STACKTOP; //@line 18424
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18427
  return;
 }
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 33049
  src = src + num | 0; //@line 33050
  dest = dest + num | 0; //@line 33051
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 33053
   src = src - 1 | 0; //@line 33054
   num = num - 1 | 0; //@line 33055
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 33056
  }
  dest = ret; //@line 33058
 } else {
  _memcpy(dest, src, num) | 0; //@line 33060
 }
 return dest | 0; //@line 33062
}
function __ZN6SocketC2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 556; //@line 10840
 HEAP32[$0 + 4 >> 2] = 0; //@line 10842
 HEAP32[$0 + 8 >> 2] = 0; //@line 10844
 HEAP32[$0 + 12 >> 2] = -1; //@line 10846
 $4 = $0 + 16 | 0; //@line 10847
 HEAP32[$4 >> 2] = 0; //@line 10848
 HEAP32[$4 + 4 >> 2] = 0; //@line 10848
 HEAP32[$4 + 8 >> 2] = 0; //@line 10848
 HEAP32[$4 + 12 >> 2] = 0; //@line 10848
 HEAP32[$4 + 16 >> 2] = 0; //@line 10848
 HEAP32[$4 + 20 >> 2] = 0; //@line 10848
 HEAP32[$4 + 24 >> 2] = 0; //@line 10848
 HEAP32[$4 + 28 >> 2] = 0; //@line 10848
 return;
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 32616
 $2 = $b & 65535; //@line 32617
 $3 = Math_imul($2, $1) | 0; //@line 32618
 $6 = $a >>> 16; //@line 32619
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 32620
 $11 = $b >>> 16; //@line 32621
 $12 = Math_imul($11, $1) | 0; //@line 32622
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 32623
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16833
 $1 = HEAP32[$0 >> 2] | 0; //@line 16834
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 16836
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16837
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 16838
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 231; //@line 16841
  sp = STACKTOP; //@line 16842
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16845
  return;
 }
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 593
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 595
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 596
 _wait_ms(1); //@line 597
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 43; //@line 600
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 602
  sp = STACKTOP; //@line 603
  return 0; //@line 604
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 606
  return $2 | 0; //@line 607
 }
 return 0; //@line 609
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9497
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 9499
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 9505
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9506
 FUNCTION_TABLE_vi[$5 & 511]($0); //@line 9507
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 9510
  sp = STACKTOP; //@line 9511
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9514
 return;
}
function __ZN17EthernetInterface11get_netmaskEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 103
 $2 = _emscripten_asm_const_ii(2, 0) | 0; //@line 105
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 106
 _wait_ms(1); //@line 107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 28; //@line 110
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 112
  sp = STACKTOP; //@line 113
  return 0; //@line 114
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 116
  return $2 | 0; //@line 117
 }
 return 0; //@line 119
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 23424
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 23426
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 23433
  } else {
   $$0 = $3; //@line 23435
  }
 }
 $8 = _malloc($$0) | 0; //@line 23438
 if (!$8) {
  return $8 | 0; //@line 23441
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 23448
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 23450
 return $8 | 0; //@line 23451
}
function _mbed_die__async_cb_79($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 12995
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12997
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12999
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 13000
 _wait_ms(150); //@line 13001
 if (!___async) {
  ___async_unwind = 0; //@line 13004
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 281; //@line 13006
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 13008
 sp = STACKTOP; //@line 13009
 return;
}
function __ZN17EthernetInterface15get_mac_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 61
 $2 = _emscripten_asm_const_ii(0, 0) | 0; //@line 63
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 64
 _wait_ms(1); //@line 65
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 26; //@line 68
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 70
  sp = STACKTOP; //@line 71
  return 0; //@line 72
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 74
  return $2 | 0; //@line 75
 }
 return 0; //@line 77
}
function __ZN17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 82
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 84
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _wait_ms(1); //@line 86
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 27; //@line 89
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 91
  sp = STACKTOP; //@line 92
  return 0; //@line 93
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 95
  return $2 | 0; //@line 96
 }
 return 0; //@line 98
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 12625
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12627
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12629
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 12630
 _wait_ms(150); //@line 12631
 if (!___async) {
  ___async_unwind = 0; //@line 12634
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 280; //@line 12636
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 12638
 sp = STACKTOP; //@line 12639
 return;
}
function ___fflush_unlocked__async_cb_20($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11992
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11994
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11996
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11998
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 12000
 HEAP32[$4 >> 2] = 0; //@line 12001
 HEAP32[$6 >> 2] = 0; //@line 12002
 HEAP32[$8 >> 2] = 0; //@line 12003
 HEAP32[$10 >> 2] = 0; //@line 12004
 HEAP32[___async_retval >> 2] = 0; //@line 12006
 return;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10243
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10244
 $2 = __Z28nsapi_dns_query_async_canceli($1) | 0; //@line 10245
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 110; //@line 10248
  sp = STACKTOP; //@line 10249
  return 0; //@line 10250
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10252
  return $2 | 0; //@line 10253
 }
 return 0; //@line 10255
}
function _mbed_vtracef__async_cb_85($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14290
 $1 = HEAP32[130] | 0; //@line 14291
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 14292
 FUNCTION_TABLE_vi[$1 & 511](5635); //@line 14293
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 76; //@line 14296
  sp = STACKTOP; //@line 14297
  return;
 }
 ___async_unwind = 0; //@line 14300
 HEAP32[$ReallocAsyncCtx3 >> 2] = 76; //@line 14301
 sp = STACKTOP; //@line 14302
 return;
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 3170
 STACKTOP = STACKTOP + 16 | 0; //@line 3171
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3171
 $1 = sp; //@line 3172
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 31]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 3183
  } else {
   $$0 = -1; //@line 3185
  }
 } else {
  $$0 = -1; //@line 3188
 }
 STACKTOP = sp; //@line 3190
 return $$0 | 0; //@line 3190
}
function __Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19798
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19799
 _puts(6061) | 0; //@line 19800
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 306; //@line 19803
  sp = STACKTOP; //@line 19804
  return 0; //@line 19805
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19807
  return 0; //@line 19808
 }
 return 0; //@line 19810
}
function _serial_putc__async_cb_63($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12554
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12556
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 12557
 _fflush($2) | 0; //@line 12558
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 301; //@line 12561
  sp = STACKTOP; //@line 12562
  return;
 }
 ___async_unwind = 0; //@line 12565
 HEAP32[$ReallocAsyncCtx >> 2] = 301; //@line 12566
 sp = STACKTOP; //@line 12567
 return;
}
function __Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19817
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19818
 _puts(6072) | 0; //@line 19819
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 307; //@line 19822
  sp = STACKTOP; //@line 19823
  return 0; //@line 19824
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19826
  return 0; //@line 19827
 }
 return 0; //@line 19829
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 133
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 134
 _puts(2235) | 0; //@line 135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 29; //@line 138
  sp = STACKTOP; //@line 139
  return 0; //@line 140
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 142
  return 0; //@line 143
 }
 return 0; //@line 145
}
function __ZN13SocketAddressC2E10nsapi_addrt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP8[$0 >> 0] = 0; //@line 11379
 $3 = $0 + 40 | 0; //@line 11380
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2]; //@line 11381
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11381
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11381
 HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 11381
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 11381
 HEAP16[$0 + 60 >> 1] = $2; //@line 11383
 return;
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7038
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7039
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 7040
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 334; //@line 7043
  sp = STACKTOP; //@line 7044
  return 0; //@line 7045
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7047
  return $3 | 0; //@line 7048
 }
 return 0; //@line 7050
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 3151
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 3151
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 3152
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 3153
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 3157
 HEAP32[tempDoublePtr >> 2] = $2; //@line 3158
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 3158
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function _emscripten_async_resume() {
 ___async = 0; //@line 32949
 ___async_unwind = 1; //@line 32950
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 32956
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 32960
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 32964
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 32966
 }
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 24676
 STACKTOP = STACKTOP + 16 | 0; //@line 24677
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 24677
 $vararg_buffer = sp; //@line 24678
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 24682
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 24684
 STACKTOP = sp; //@line 24685
 return $5 | 0; //@line 24685
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18959
 $1 = HEAP32[$0 >> 2] | 0; //@line 18960
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18961
 FUNCTION_TABLE_v[$1 & 7](); //@line 18962
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 275; //@line 18965
  sp = STACKTOP; //@line 18966
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18969
  return;
 }
}
function _main__async_cb_195($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28536
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28538
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 28539
 _wait(4294967296.0); //@line 28540
 if (!___async) {
  ___async_unwind = 0; //@line 28543
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 320; //@line 28545
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 28547
 sp = STACKTOP; //@line 28548
 return;
}
function __ZnwjRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7375
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7376
 $2 = __Znwj($0) | 0; //@line 7377
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 340; //@line 7380
  sp = STACKTOP; //@line 7381
  return 0; //@line 7382
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7384
  return $2 | 0; //@line 7385
 }
 return 0; //@line 7387
}
function __ZnajRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7410
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7411
 $2 = __Znaj($0) | 0; //@line 7412
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 342; //@line 7415
  sp = STACKTOP; //@line 7416
  return 0; //@line 7417
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7419
  return $2 | 0; //@line 7420
 }
 return 0; //@line 7422
}
function __ZN9UDPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11994
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11995
 __ZN9UDPSocketD2Ev($0); //@line 11996
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 148; //@line 11999
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12001
  sp = STACKTOP; //@line 12002
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12005
  __ZdlPv($0); //@line 12006
  return;
 }
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 32891
 STACKTOP = STACKTOP + 16 | 0; //@line 32892
 $rem = __stackBase__ | 0; //@line 32893
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 32894
 STACKTOP = __stackBase__; //@line 32895
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 32896
}
function __ZN17EthernetInterface8set_dhcpEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 151
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 152
 _puts(2190) | 0; //@line 153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 30; //@line 156
  sp = STACKTOP; //@line 157
  return 0; //@line 158
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 160
  return 0; //@line 161
 }
 return 0; //@line 163
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 32661
 if ((ret | 0) < 8) return ret | 0; //@line 32662
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 32663
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 32664
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 32665
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 32666
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 32667
}
function __ZN13SocketAddress8set_addrE10nsapi_addr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP8[$0 >> 0] = 0; //@line 11391
 $2 = $0 + 40 | 0; //@line 11392
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2]; //@line 11393
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11393
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11393
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 11393
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 11393
 return;
}
function __ZThn4_N17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28759
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28761
 HEAP8[$2 + 8 >> 0] = 0; //@line 28763
 if (!$2) {
  $7 = ___async_retval; //@line 28766
  HEAP32[$7 >> 2] = $4; //@line 28767
  return;
 }
 __ZdlPv($2); //@line 28770
 $7 = ___async_retval; //@line 28771
 HEAP32[$7 >> 2] = $4; //@line 28772
 return;
}
function __Znaj($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7392
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7393
 $1 = __Znwj($0) | 0; //@line 7394
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 341; //@line 7397
  sp = STACKTOP; //@line 7398
  return 0; //@line 7399
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7401
  return $1 | 0; //@line 7402
 }
 return 0; //@line 7404
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 7567
 STACKTOP = STACKTOP + 16 | 0; //@line 7568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7568
 if (!(_pthread_once(10708, 4) | 0)) {
  $3 = _pthread_getspecific(HEAP32[2678] | 0) | 0; //@line 7574
  STACKTOP = sp; //@line 7575
  return $3 | 0; //@line 7575
 } else {
  _abort_message(9465, sp); //@line 7577
 }
 return 0; //@line 7580
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 7735
 }
 return;
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 25891
 STACKTOP = STACKTOP + 16 | 0; //@line 25892
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25892
 $2 = sp; //@line 25893
 HEAP32[$2 >> 2] = $varargs; //@line 25894
 $3 = _vsscanf($0, $1, $2) | 0; //@line 25895
 STACKTOP = sp; //@line 25896
 return $3 | 0; //@line 25896
}
function __ZL25default_terminate_handlerv__async_cb_132($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23919
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23921
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23923
 HEAP32[$2 >> 2] = 9326; //@line 23924
 HEAP32[$2 + 4 >> 2] = $4; //@line 23926
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 23928
 _abort_message(9190, $2); //@line 23929
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 1100
 HEAP32[$3 >> 2] = 0; //@line 1101
 HEAP32[$3 + 4 >> 2] = 0; //@line 1101
 HEAP32[$3 + 8 >> 2] = 0; //@line 1101
 HEAP32[$3 + 12 >> 2] = 0; //@line 1101
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 1104
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 1107
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26767
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26769
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26770
 _fputc(10, $2) | 0; //@line 26771
 if (!___async) {
  ___async_unwind = 0; //@line 26774
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 346; //@line 26776
 sp = STACKTOP; //@line 26777
 return;
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 6888
 $6 = HEAP32[$5 >> 2] | 0; //@line 6889
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 6890
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 6892
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 6894
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 6897
 return $2 | 0; //@line 6898
}
function _wait($0) {
 $0 = +$0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19739
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19743
 _emscripten_sleep((~~($0 * 1.0e6) | 0) / 1e3 | 0 | 0); //@line 19744
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 304; //@line 19747
  sp = STACKTOP; //@line 19748
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19751
  return;
 }
}
function __ZNK13SocketAddress8get_addrEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1 + 40 | 0; //@line 11643
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 11644
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 11644
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 11644
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 11644
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 11644
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27263
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 27266
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 27271
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 27274
 return;
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 19625
 HEAP32[$0 >> 2] = $1; //@line 19626
 HEAP32[2514] = 1; //@line 19627
 $4 = $0; //@line 19628
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 19633
 $10 = 10060; //@line 19634
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 19636
 HEAP32[$10 + 4 >> 2] = $9; //@line 19639
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9286
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 9297
  $$0 = 1; //@line 9298
 } else {
  $$0 = 0; //@line 9300
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 9304
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 8329
 STACKTOP = STACKTOP + 16 | 0; //@line 8330
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8330
 _free($0); //@line 8332
 if (!(_pthread_setspecific(HEAP32[2678] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 8337
  return;
 } else {
  _abort_message(9564, sp); //@line 8339
 }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 7811
 }
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19758
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19759
 _emscripten_sleep($0 | 0); //@line 19760
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 305; //@line 19763
  sp = STACKTOP; //@line 19764
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19767
  return;
 }
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8479
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8480
 _puts($0) | 0; //@line 8481
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 71; //@line 8484
  sp = STACKTOP; //@line 8485
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8488
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 1633
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 1637
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 1641
   $$0 = 0; //@line 1642
  } else {
   $$0 = $4; //@line 1644
  }
 } else {
  $$0 = $1; //@line 1647
 }
 return $$0 | 0; //@line 1649
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 1596
 STACKTOP = STACKTOP + 16 | 0; //@line 1597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1597
 $0 = sp; //@line 1598
 _gettimeofday($0 | 0, 0) | 0; //@line 1599
 STACKTOP = sp; //@line 1606
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 1606
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 6
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 10
 $7 = $4 - $6 | 0; //@line 11
 HEAP32[$0 + 108 >> 2] = $7; //@line 13
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 22
 return;
}
function _nsapi_dns_add_server($0) {
 $0 = $0 | 0;
 _memmove(628, 608, 80) | 0; //@line 12306
 HEAP32[152] = HEAP32[$0 >> 2]; //@line 12307
 HEAP32[153] = HEAP32[$0 + 4 >> 2]; //@line 12307
 HEAP32[154] = HEAP32[$0 + 8 >> 2]; //@line 12307
 HEAP32[155] = HEAP32[$0 + 12 >> 2]; //@line 12307
 HEAP32[156] = HEAP32[$0 + 16 >> 2]; //@line 12307
 return 0; //@line 12308
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 18436
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 18441
 $8 = $0; //@line 18442
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 18444
 HEAP32[$8 + 4 >> 2] = $7; //@line 18447
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 7875
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 7879
  }
 }
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 32925
 HEAP32[new_frame + 4 >> 2] = sp; //@line 32927
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 32929
 ___async_cur_frame = new_frame; //@line 32930
 return ___async_cur_frame + 8 | 0; //@line 32931
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 8314
 STACKTOP = STACKTOP + 16 | 0; //@line 8315
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8315
 if (!(_pthread_key_create(10712, 355) | 0)) {
  STACKTOP = sp; //@line 8320
  return;
 } else {
  _abort_message(9514, sp); //@line 8322
 }
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 16854
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 16859
 $8 = $0; //@line 16860
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 16862
 HEAP32[$8 + 4 >> 2] = $7; //@line 16865
 return;
}
function __ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + -4 | 0; //@line 980
 $5 = HEAP32[$1 >> 2] | 0; //@line 981
 HEAP32[$4 + 60 + ($5 << 3) >> 2] = $2; //@line 983
 HEAP32[$4 + 60 + ($5 << 3) + 4 >> 2] = $3; //@line 985
 return;
}
function __ZN17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15980
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15982
 HEAP8[$2 + 8 >> 0] = 0; //@line 15984
 if ($2 | 0) {
  __ZdlPv($2); //@line 15987
 }
 HEAP32[___async_retval >> 2] = $4; //@line 15990
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 10821
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10821
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 10821
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 15048
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15052
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 15055
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 32914
  return low << bits; //@line 32915
 }
 tempRet0 = low << bits - 32; //@line 32917
 return 0; //@line 32918
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 32903
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 32904
 }
 tempRet0 = 0; //@line 32906
 return high >>> bits - 32 | 0; //@line 32907
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 11210
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11210
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11210
 return;
}
function __ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 569
 HEAP32[$0 + 60 + ($4 << 3) >> 2] = $2; //@line 571
 HEAP32[$0 + 60 + ($4 << 3) + 4 >> 2] = $3; //@line 573
 return;
}
function _fflush__async_cb_42($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10376
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 10378
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10381
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_216($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 31557
 HEAP32[___async_retval >> 2] = -3007; //@line 31559
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25412
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 25414
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 25416
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 10485
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 10488
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 10491
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 27217
 } else {
  $$0 = -1; //@line 27219
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 27222
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 33194
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_49($0) {
 $0 = $0 | 0;
 var $$06 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$06 = -3007; //@line 10675
 } else {
  $$06 = 0; //@line 10677
 }
 HEAP32[___async_retval >> 2] = $$06; //@line 10680
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_46($0) {
 $0 = $0 | 0;
 var $$06 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$06 = -3007; //@line 10585
 } else {
  $$06 = 0; //@line 10587
 }
 HEAP32[___async_retval >> 2] = $$06; //@line 10590
 return;
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 25394
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 25400
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 25404
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_219($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 32344
 return;
}
function __ZN12NetworkStack20get_call_in_callbackEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 100; //@line 10326
 HEAP32[$0 + 4 >> 2] = 1; //@line 10328
 HEAP32[$0 + 8 >> 2] = $1; //@line 10330
 HEAP32[$0 + 12 >> 2] = 536; //@line 10331
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 33243
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 32937
 stackRestore(___async_cur_frame | 0); //@line 32938
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 32939
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12016
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 12017
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12019
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28450
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 28451
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28453
 return;
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 19601
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 19607
 _emscripten_asm_const_iii(10, $0 | 0, $1 | 0) | 0; //@line 19608
 return;
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 24842
  $$0 = -1; //@line 24843
 } else {
  $$0 = $0; //@line 24845
 }
 return $$0 | 0; //@line 24847
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 5887
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 5887
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 5889
 return $1 | 0; //@line 5890
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 3141
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 3141
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 3143
 return $1 | 0; //@line 3144
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1655
 HEAP8[$0 + 76 >> 0] = 1; //@line 1657
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 1659
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1660
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 32654
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 32655
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 32656
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_99($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15382
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 15383
 HEAP32[10036 + ($4 << 2) >> 2] = 0; //@line 15385
 return;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 33187
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_179($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27578
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23968
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 23969
 HEAP32[___async_retval >> 2] = $4; //@line 23971
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1002
 ___cxa_begin_catch($0 | 0) | 0; //@line 1003
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1004
 __ZSt9terminatev(); //@line 1005
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 33236
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1019
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_38($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10086
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 29174
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 9191
 } else {
  HEAP8[$0 >> 0] = 1; //@line 9193
  $$0 = 1; //@line 9194
 }
 return $$0 | 0; //@line 9196
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 11102
 HEAP32[___async_retval >> 2] = 0; //@line 11104
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 10096
 HEAP32[___async_retval >> 2] = 0; //@line 10098
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_41($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10286
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 33180
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_150($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 25239
 return;
}
function __ZN4mbed16mbed_event_queueEv() {
 if (!(HEAP8[9768] | 0)) {
  if (___cxa_guard_acquire(9768) | 0) {
   __ZN6events10EventQueueC2EjPh(9800, 256, 10720); //@line 1120
  }
 }
 return 9800; //@line 1123
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 32646
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 32648
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 33229
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_55($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11092
 return;
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 25539
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 25544
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_106($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15932
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_80($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13078
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_203($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28871
 if ($4 | 0) {
  __ZdaPv($4); //@line 28874
 }
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_5($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 10715
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 4947
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 4950
 }
 return $$0 | 0; //@line 4952
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 24668
 return;
}
function _common_write_16_bit($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$1 >> 0] = ($0 & 65535) >>> 8; //@line 9199
 HEAP8[$1 + 1 >> 0] = $0; //@line 9202
 return $1 + 2 | 0; //@line 9203
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_103($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15831
 return;
}
function __ZN17EthernetInterfaceC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 224; //@line 993
 HEAP32[$0 + 4 >> 2] = 368; //@line 994
 _memset($0 + 60 | 0, 0, 800) | 0; //@line 996
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 33173
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_96($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 15033
 return;
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 25034
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 25038
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 32883
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 26692
 return;
}
function b51(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 33379
 return 0; //@line 33379
}
function b50(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 33376
 return 0; //@line 33376
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_19($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11910
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_109($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16072
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 32944
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 32945
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_22($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12347
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_129($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 23728
 return;
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 350
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 355
 }
 return $4 | 0; //@line 357
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 0](a1 | 0, a2 | 0, a3 | 0); //@line 33222
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_64($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12619
 return;
}
function __ZN12NetworkStack10getsockoptEPviiS0_Pj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN12NetworkStack10setsockoptEPviiPKvj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_107($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 15940
 return;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 24658
 return;
}
function __ZN9UDPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 12052
 HEAP32[$0 >> 2] = 592; //@line 12053
 HEAP32[$0 + 52 >> 2] = 0; //@line 12055
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 25530
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 25532
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_104($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 15839
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 8414
 __ZdlPv($0); //@line 8415
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 8097
 __ZdlPv($0); //@line 8098
 return;
}
function b48(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 33373
 return 0; //@line 33373
}
function b47(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 33370
 return 0; //@line 33370
}
function __ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13691
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13029
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_182($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 27763
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_191($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 28352
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 7625
 __ZdlPv($0); //@line 7626
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 16002
 return;
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 25426
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 4432
 }
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_127($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23680
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 33166
}
function __ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 18979
 return;
}
function __ZN17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13019
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14989
 return;
}
function b211(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 370
}
function __ZN17EthernetInterface15get_mac_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13535
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_181($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 27703
 return;
}
function __ZN17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12039
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 7822
}
function _sn_coap_builder_calc_needed_packet_data_size($0) {
 $0 = $0 | 0;
 return _sn_coap_builder_calc_needed_packet_data_size_2($0, 0) | 0; //@line 5303
}
function __ZN12NetworkStack11setstackoptEiiPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN12NetworkStack11getstackoptEiiPvPj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN17EthernetInterface11get_netmaskEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10472
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[2679] | 0; //@line 9213
 HEAP32[2679] = $0 + 0; //@line 9215
 return $0 | 0; //@line 9217
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[406] | 0; //@line 8404
 HEAP32[406] = $0 + 0; //@line 8406
 return $0 | 0; //@line 8408
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0); //@line 33215
}
function b45(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(15); //@line 33367
 return 0; //@line 33367
}
function b44(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(14); //@line 33364
 return 0; //@line 33364
}
function b43(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(13); //@line 33361
 return 0; //@line 33361
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b42(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 33358
 return 0; //@line 33358
}
function __ZN6Socket11set_timeoutEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 12 >> 2] = ($1 | 0) > -1 ? $1 : -1; //@line 11302
 return;
}
function __ZnwjRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14979
 return;
}
function __ZnajRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15065
 return;
}
function __Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 16028
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 13492
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 32971
}
function __ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_176($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b209(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 367
}
function __ZN6Socket5closeEv__async_cb_184($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27843
 return;
}
function __ZN17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __Z28nsapi_dns_query_async_canceli__async_cb_138($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 24226
 return;
}
function _fflush__async_cb_43($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10391
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11920
 return;
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 4895
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10110
 return;
}
function _putc__async_cb_193($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28463
 return;
}
function _fputc__async_cb_21($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12029
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_143($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 24648
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12542
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack14get_dns_serverEiP13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_13($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 8 >> 2] | 0); //@line 11443
 return;
}
function __Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 15767
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0; //@line 33159
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27286
 return;
}
function __ZN17EthernetInterface8set_dhcpEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 13675
 return;
}
function __Znaj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13667
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN13SocketAddress8set_portEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP16[$0 + 60 >> 1] = $1; //@line 11402
 return;
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 33355
 return 0; //@line 33355
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 33352
 return 0; //@line 33352
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 33349
 return 0; //@line 33349
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 33346
 return 0; //@line 33346
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 33343
 return 0; //@line 33343
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 33340
 return 0; //@line 33340
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 33337
 return 0; //@line 33337
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 33334
 return 0; //@line 33334
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 33331
 return 0; //@line 33331
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 33328
 return 0; //@line 33328
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 33325
 return 0; //@line 33325
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 33322
 return 0; //@line 33322
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 33319
 return 0; //@line 33319
}
function _ns_list_init_($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 9209
 HEAP32[$0 + 4 >> 2] = $0; //@line 9211
 return;
}
function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 25925
}
function __ZThn4_N17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 33316
 return 0; //@line 33316
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(9617, HEAP32[$0 + 4 >> 2] | 0); //@line 16020
}
function __ZN17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 511](a1 | 0); //@line 33208
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function _strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 ___stpcpy($0, $1) | 0; //@line 6905
 return $0 | 0; //@line 6906
}
function b207(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 364
}
function b206(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 361
}
function b205(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 358
}
function _sn_coap_builder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _sn_coap_builder_2($0, $1, 0) | 0; //@line 1844
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 1582
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 1591
 return;
}
function __ZNK13SocketAddress14get_ip_versionEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0; //@line 11721
}
function __ZN9UDPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 16011
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 24952
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15); //@line 33313
 return 0; //@line 33313
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14); //@line 33310
 return 0; //@line 33310
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(13); //@line 33307
 return 0; //@line 33307
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(12); //@line 33304
 return 0; //@line 33304
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(11); //@line 33301
 return 0; //@line 33301
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(10); //@line 33298
 return 0; //@line 33298
}
function __ZNK13SocketAddress8get_portEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 60 >> 1] | 0; //@line 11653
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(9); //@line 33295
 return 0; //@line 33295
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 33292
 return 0; //@line 33292
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1626
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 6140
}
function _main__async_cb_201($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 28751
 return;
}
function _main__async_cb_197($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 1; //@line 28600
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 1613
}
function __ZThn4_N17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0 + -4 | 0); //@line 587
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 0]() | 0; //@line 33152
}
function __ZdlPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdlPv($0); //@line 7436
 return;
}
function __ZdaPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdaPv($0); //@line 7451
 return;
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1619
 return;
}
function b203(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 355
}
function __ZN16NetworkInterface12set_blockingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __Z18nsapi_create_stackP12NetworkStack($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 10834
}
function __ZN17EthernetInterface9get_stackEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 212
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_33($0) {
 $0 = $0 | 0;
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_135($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 33201
}
function __ZN12NetworkStack19onboardNetworkStackEv($0) {
 $0 = $0 | 0;
 return 0; //@line 615
}
function __Z11coap_malloct($0) {
 $0 = $0 | 0;
 return _malloc($0 & 65535) | 0; //@line 19783
}
function __ZNK16NetworkInterface21get_connection_statusEv($0) {
 $0 = $0 | 0;
 return -3002;
}
function __ZN16NetworkInterface13wifiInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 187
}
function __ZN16NetworkInterface13meshInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 193
}
function __ZN16NetworkInterface13emacInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 205
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 24900
}
function __ZN17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 55
 return;
}
function __ZN17EthernetInterface11get_gatewayEv($0) {
 $0 = $0 | 0;
 return 0; //@line 125
}
function __ZN16NetworkInterface12ethInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 181
}
function __ZN16NetworkInterface12cellularBaseEv($0) {
 $0 = $0 | 0;
 return 0; //@line 199
}
function b16(p0) {
 p0 = p0 | 0;
 nullFunc_ii(31); //@line 33289
 return 0; //@line 33289
}
function b15(p0) {
 p0 = p0 | 0;
 nullFunc_ii(30); //@line 33286
 return 0; //@line 33286
}
function b14(p0) {
 p0 = p0 | 0;
 nullFunc_ii(29); //@line 33283
 return 0; //@line 33283
}
function b13(p0) {
 p0 = p0 | 0;
 nullFunc_ii(28); //@line 33280
 return 0; //@line 33280
}
function b12(p0) {
 p0 = p0 | 0;
 nullFunc_ii(27); //@line 33277
 return 0; //@line 33277
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(26); //@line 33274
 return 0; //@line 33274
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(25); //@line 33271
 return 0; //@line 33271
}
function __ZN17EthernetInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 175
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(24); //@line 33268
 return 0; //@line 33268
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(23); //@line 33265
 return 0; //@line 33265
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(22); //@line 33262
 return 0; //@line 33262
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(21); //@line 33259
 return 0; //@line 33259
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(20); //@line 33256
 return 0; //@line 33256
}
function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(19); //@line 33253
 return 0; //@line 33253
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_117($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_164($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_158($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_154($0) {
 $0 = $0 | 0;
 return;
}
function __GLOBAL__sub_I_main_cpp() {
 __ZN9UDPSocketC2Ev(10068); //@line 19774
 return;
}
function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 33250
 return 0; //@line 33250
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface7connectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 169
}
function ___ofl_lock() {
 ___lock(10692); //@line 25549
 return 10700; //@line 25550
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_9($0) {
 $0 = $0 | 0;
 return;
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function _abort_message__async_cb_172($0) {
 $0 = $0 | 0;
 _abort(); //@line 26784
}
function b201(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 352
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 1; //@line 12014
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 33385
}
function __Z9coap_freePv($0) {
 $0 = $0 | 0;
 _free($0); //@line 19789
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_913() {
 return _pthread_self() | 0; //@line 3165
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 6061
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 6067
}
function __ZN6SocketD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 10903
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 33118
}
function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 7443
 return;
}
function b1() {
 nullFunc_i(0); //@line 33247
 return 0; //@line 33247
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 33114
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 7428
 return;
}
function __ZThn4_N17EthernetInterfaceD1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_186($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(10692); //@line 25555
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6SocketD2Ev__async_cb_84($0) {
 $0 = $0 | 0;
 return;
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(394); //@line 33469
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(393); //@line 33466
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(392); //@line 33463
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(391); //@line 33460
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(390); //@line 33457
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(389); //@line 33454
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(388); //@line 33451
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(387); //@line 33448
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(386); //@line 33445
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(385); //@line 33442
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(384); //@line 33439
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(383); //@line 33436
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(382); //@line 33433
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(381); //@line 33430
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(380); //@line 33427
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(379); //@line 33424
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(378); //@line 33421
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(377); //@line 33418
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(376); //@line 33415
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(375); //@line 33412
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(374); //@line 33409
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(373); //@line 33406
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(372); //@line 33403
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(371); //@line 33400
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 24858
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 25186
}
function __ZN17EthernetInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(511); //@line 349
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(510); //@line 346
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(509); //@line 343
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(508); //@line 340
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(507); //@line 337
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(506); //@line 334
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(505); //@line 331
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(504); //@line 328
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(503); //@line 325
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(502); //@line 322
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(501); //@line 319
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(500); //@line 316
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(499); //@line 313
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(498); //@line 310
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(497); //@line 307
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(496); //@line 304
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(495); //@line 301
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(494); //@line 298
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(493); //@line 295
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(492); //@line 292
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(491); //@line 289
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(490); //@line 286
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(489); //@line 283
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(488); //@line 280
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(487); //@line 277
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(486); //@line 274
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(485); //@line 271
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(484); //@line 268
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(483); //@line 265
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(482); //@line 262
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(481); //@line 259
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(480); //@line 256
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(479); //@line 253
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(478); //@line 250
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(477); //@line 247
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(476); //@line 244
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(475); //@line 241
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(474); //@line 238
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(473); //@line 235
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(472); //@line 232
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(471); //@line 229
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(470); //@line 226
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(469); //@line 223
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(468); //@line 220
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(467); //@line 217
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(466); //@line 214
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(465); //@line 211
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(464); //@line 208
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(463); //@line 205
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(462); //@line 202
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(461); //@line 199
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(460); //@line 196
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(459); //@line 193
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(458); //@line 190
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(457); //@line 187
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(456); //@line 184
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(455); //@line 181
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(454); //@line 178
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(453); //@line 175
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(452); //@line 172
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(451); //@line 169
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(450); //@line 166
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(449); //@line 163
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(448); //@line 160
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(447); //@line 157
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(446); //@line 154
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(445); //@line 151
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(444); //@line 148
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(443); //@line 145
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(442); //@line 142
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(441); //@line 139
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(440); //@line 136
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(439); //@line 133
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(438); //@line 130
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(437); //@line 127
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(436); //@line 124
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(435); //@line 121
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(434); //@line 118
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(433); //@line 115
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(432); //@line 112
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(431); //@line 109
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(430); //@line 106
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(429); //@line 103
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(428); //@line 100
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 33397
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(427); //@line 97
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(426); //@line 94
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(425); //@line 91
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(424); //@line 88
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(423); //@line 85
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(422); //@line 82
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(421); //@line 79
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(420); //@line 76
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(419); //@line 73
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(418); //@line 70
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(417); //@line 67
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(416); //@line 64
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(415); //@line 61
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(414); //@line 58
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(413); //@line 55
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(412); //@line 52
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(411); //@line 49
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(410); //@line 46
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(409); //@line 43
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(408); //@line 40
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(407); //@line 37
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(406); //@line 34
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(405); //@line 31
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(404); //@line 28
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(403); //@line 25
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(402); //@line 22
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(401); //@line 19
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(400); //@line 16
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(399); //@line 13
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(398); //@line 10
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(397); //@line 7
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(396); //@line 4
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(395); //@line 1
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___errno_location() {
 return 10688; //@line 24852
}
function _arm_random_seed_get() {
 return 0; //@line 19724
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt9terminatev__async_cb_81($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _pthread_self() {
 return 1216; //@line 24905
}
function _core_util_critical_section_exit() {
 return;
}
function _wait__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b56() {
 nullFunc_v(7); //@line 33394
}
function b55() {
 nullFunc_v(6); //@line 33391
}
function b54() {
 nullFunc_v(5); //@line 33388
}
function b53() {
 nullFunc_v(0); //@line 33382
}
function _arm_random_module_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1];
var FUNCTION_TABLE_ii = [b3,__ZN17EthernetInterface15get_mac_addressEv,__ZN17EthernetInterface14get_ip_addressEv,__ZN17EthernetInterface11get_netmaskEv,__ZN17EthernetInterface11get_gatewayEv,__ZN17EthernetInterface7connectEv,__ZN17EthernetInterface10disconnectEv,__ZNK16NetworkInterface21get_connection_statusEv,__ZN16NetworkInterface12ethInterfaceEv,__ZN16NetworkInterface13wifiInterfaceEv,__ZN16NetworkInterface13meshInterfaceEv,__ZN16NetworkInterface12cellularBaseEv,__ZN16NetworkInterface13emacInterfaceEv,__ZN17EthernetInterface9get_stackEv,__ZThn4_N17EthernetInterface14get_ip_addressEv,__ZN12NetworkStack19onboardNetworkStackEv,__ZN9UDPSocket9get_protoEv,___stdio_close,__Z11coap_malloct,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13
,b14,b15,b16];
var FUNCTION_TABLE_iii = [b18,__ZN16NetworkInterface26gethostbyname_async_cancelEi,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress,__ZN17EthernetInterface8set_dhcpEb,__ZN16NetworkInterface12set_blockingEb,__ZN17EthernetInterface12socket_closeEPv,__ZN12NetworkStack26gethostbyname_async_cancelEi,__ZN12NetworkStack14add_dns_serverERK13SocketAddress,__ZThn4_N17EthernetInterface12socket_closeEPv,b19,b20,b21,b22,b23,b24,b25];
var FUNCTION_TABLE_iiii = [b27,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZN17EthernetInterface13socket_listenEPvi,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack14get_dns_serverEiP13SocketAddress,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZThn4_N17EthernetInterface13socket_listenEPvi,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv,_do_read,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37
,b38,b39,b40];
var FUNCTION_TABLE_iiiii = [b42,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZN17EthernetInterface11set_networkEPKcS1_S1_,__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZN17EthernetInterface11socket_sendEPvPKvj,__ZN17EthernetInterface11socket_recvEPvS0_j,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j,__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv,b43,b44,b45];
var FUNCTION_TABLE_iiiiii = [b47,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,__ZN12NetworkStack11setstackoptEiiPKvj,__ZN12NetworkStack11getstackoptEiiPvPj,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,b48];
var FUNCTION_TABLE_iiiiiii = [b50,__ZN12NetworkStack10setsockoptEPviiPKvj,__ZN12NetworkStack10getsockoptEPviiS0_Pj,b51];
var FUNCTION_TABLE_v = [b53,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZL29nsapi_dns_query_async_timeoutv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b54,b55,b56];
var FUNCTION_TABLE_vi = [b58,__ZN17EthernetInterfaceD2Ev,__ZN17EthernetInterfaceD0Ev,__ZThn4_N17EthernetInterfaceD1Ev,__ZThn4_N17EthernetInterfaceD0Ev,_mbed_trace_default_print,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv,__ZN6SocketD2Ev,__ZN6SocketD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv,__ZN9UDPSocketD2Ev,__ZN9UDPSocketD0Ev,__ZN9UDPSocket5eventEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN17EthernetInterface15get_mac_addressEv__async_cb,__ZN17EthernetInterface14get_ip_addressEv__async_cb,__ZN17EthernetInterface11get_netmaskEv__async_cb
,__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb,__ZN17EthernetInterface8set_dhcpEb__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_181,__ZN17EthernetInterface12socket_closeEPv__async_cb,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_104,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_105,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_103,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_109,__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_182,__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_107,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_108,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_106,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_96,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb
,_sn_coap_parser__async_cb,_sn_coap_parser__async_cb_23,_sn_coap_parser__async_cb_24,_sn_coap_parser__async_cb_25,_sn_coap_parser__async_cb_31,_sn_coap_parser__async_cb_26,_sn_coap_parser__async_cb_30,_sn_coap_parser__async_cb_29,_sn_coap_parser__async_cb_28,_sn_coap_parser__async_cb_27,_sn_coap_parser_options_parse_multiple_options__async_cb,_sn_coap_protocol_init__async_cb,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_95,_mbed_vtracef__async_cb_85,_mbed_vtracef__async_cb_86,_mbed_vtracef__async_cb_87,_mbed_vtracef__async_cb_94,_mbed_vtracef__async_cb_88,_mbed_vtracef__async_cb_93,_mbed_vtracef__async_cb_89,_mbed_vtracef__async_cb_90,_mbed_vtracef__async_cb_91,_mbed_vtracef__async_cb_92,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_175,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb
,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_55,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_39,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_40,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_41,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_22,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_19,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_80,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_152,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_144,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_145,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_146,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_147,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_151,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_148,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_149,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_150,__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_53,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_45,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_51,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_46,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_47
,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_52,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_48,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_50,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_49,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_35,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_36,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_37,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_38,__ZN6SocketD2Ev__async_cb,__ZN6SocketD2Ev__async_cb_84,__ZN6Socket4openEP12NetworkStack__async_cb,__ZN6Socket4openEP12NetworkStack__async_cb_139,__ZN6Socket4openEP12NetworkStack__async_cb_140,__ZN6Socket4openEP12NetworkStack__async_cb_141,__ZN6Socket4openEP12NetworkStack__async_cb_142,__ZN4mbed8CallbackIFvvEE5thunkEPv,__ZN6Socket4openEP12NetworkStack__async_cb_143,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_133,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb,__ZN6Socket5closeEv__async_cb,__ZN6Socket5closeEv__async_cb_183,__ZN6Socket5closeEv__async_cb_184,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_64,__ZN9UDPSocketD2Ev__async_cb_187,__ZN9UDPSocketD2Ev__async_cb,__ZN9UDPSocketD2Ev__async_cb_186,__ZN9UDPSocketD0Ev__async_cb
,__ZN9UDPSocket5eventEv__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_174,__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb,__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_7,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_4,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_3,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_2,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_6,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_5,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_56,__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_177,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_180,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_178,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_179,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_221,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_217,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_218,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_208,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_209,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_210,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_211,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_212,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_220
,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_213,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_214,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_215,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_216,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_219,__ZL29nsapi_dns_query_async_timeoutv__async_cb_118,__ZL29nsapi_dns_query_async_timeoutv__async_cb_119,__ZL29nsapi_dns_query_async_timeoutv__async_cb,__ZL30nsapi_dns_query_async_responsePv,__ZL29nsapi_dns_query_async_timeoutv__async_cb_122,__ZL29nsapi_dns_query_async_timeoutv__async_cb_110,__ZL29nsapi_dns_query_async_timeoutv__async_cb_111,__ZL29nsapi_dns_query_async_timeoutv__async_cb_112,__ZL26nsapi_dns_query_async_sendPv,__ZL29nsapi_dns_query_async_timeoutv__async_cb_121,__ZL29nsapi_dns_query_async_timeoutv__async_cb_113,__ZL29nsapi_dns_query_async_timeoutv__async_cb_114,__ZL29nsapi_dns_query_async_timeoutv__async_cb_115,__ZL29nsapi_dns_query_async_timeoutv__async_cb_120,__ZL29nsapi_dns_query_async_timeoutv__async_cb_116,__ZL29nsapi_dns_query_async_timeoutv__async_cb_117,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_131,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_127,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_128,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_130,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_129,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb,__ZL28nsapi_dns_query_async_createPv,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_136
,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_134,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_135,__ZL28nsapi_dns_query_async_createPv__async_cb_163,__ZL28nsapi_dns_query_async_createPv__async_cb_170,__ZL28nsapi_dns_query_async_createPv__async_cb,__ZL28nsapi_dns_query_async_createPv__async_cb_166,__ZL28nsapi_dns_query_async_createPv__async_cb_168,__ZL28nsapi_dns_query_async_createPv__async_cb_153,__ZL28nsapi_dns_query_async_createPv__async_cb_154,__ZL28nsapi_dns_query_async_createPv__async_cb_155,__ZL28nsapi_dns_query_async_createPv__async_cb_156,__ZL28nsapi_dns_query_async_createPv__async_cb_165,__ZL28nsapi_dns_query_async_createPv__async_cb_167,__ZL28nsapi_dns_query_async_createPv__async_cb_157,__ZL28nsapi_dns_query_async_createPv__async_cb_158,__ZL28nsapi_dns_query_async_createPv__async_cb_162,__ZL28nsapi_dns_query_async_createPv__async_cb_159,__ZL28nsapi_dns_query_async_createPv__async_cb_160,__ZL37nsapi_dns_query_async_socket_callbackPv,__ZL28nsapi_dns_query_async_createPv__async_cb_169,__ZL28nsapi_dns_query_async_createPv__async_cb_161,__ZL28nsapi_dns_query_async_createPv__async_cb_164,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_100,__ZL28nsapi_dns_query_async_deletei__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_97,__ZL28nsapi_dns_query_async_deletei__async_cb_98,__ZL28nsapi_dns_query_async_deletei__async_cb_99,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack
,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_34,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_32,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_33,__ZL26nsapi_dns_query_async_sendPv__async_cb,__ZL26nsapi_dns_query_async_sendPv__async_cb_15,__ZL26nsapi_dns_query_async_sendPv__async_cb_17,__ZL26nsapi_dns_query_async_sendPv__async_cb_8,__ZL26nsapi_dns_query_async_sendPv__async_cb_9,__ZL26nsapi_dns_query_async_sendPv__async_cb_10,__ZL26nsapi_dns_query_async_sendPv__async_cb_11,__ZL26nsapi_dns_query_async_sendPv__async_cb_14,__ZL26nsapi_dns_query_async_sendPv__async_cb_16,__ZL26nsapi_dns_query_async_sendPv__async_cb_12,__ZL26nsapi_dns_query_async_sendPv__async_cb_13,__ZL26nsapi_dns_query_async_sendPv__async_cb_18,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_62,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_61,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_59,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_60,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_57,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_58,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_205,__ZL30nsapi_dns_query_async_responsePv__async_cb_204,__ZL30nsapi_dns_query_async_responsePv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_206,__ZL30nsapi_dns_query_async_responsePv__async_cb_207,__ZL30nsapi_dns_query_async_responsePv__async_cb_202,__ZL30nsapi_dns_query_async_responsePv__async_cb_203
,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_192,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_188,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_189,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_190,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_191,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb_137,__Z28nsapi_dns_query_async_canceli__async_cb_138,_mbed_assert_internal__async_cb,_mbed_die__async_cb_79,_mbed_die__async_cb_78,_mbed_die__async_cb_77,_mbed_die__async_cb_76,_mbed_die__async_cb_75,_mbed_die__async_cb_74,_mbed_die__async_cb_73,_mbed_die__async_cb_72,_mbed_die__async_cb_71,_mbed_die__async_cb_70,_mbed_die__async_cb_69,_mbed_die__async_cb_68,_mbed_die__async_cb_67,_mbed_die__async_cb_66,_mbed_die__async_cb_65,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_102
,_mbed_error_vfprintf__async_cb_101,_serial_putc__async_cb_63,_serial_putc__async_cb,_invoke_ticker__async_cb_54,_invoke_ticker__async_cb,_wait__async_cb,_wait_ms__async_cb,__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb,__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb,__Z17recv_coap_messagev__async_cb_82,__Z17recv_coap_messagev__async_cb_83,__Z17recv_coap_messagev__async_cb,_main__async_cb_197,_main__async_cb_196,_main__async_cb,_main__async_cb_199,__Z9coap_freePv,_main__async_cb_200,_main__async_cb_198,_main__async_cb_194,_main__async_cb_195,_main__async_cb_201,_putc__async_cb_193,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_43,_fflush__async_cb_42,_fflush__async_cb_44,_fflush__async_cb,___fflush_unlocked__async_cb
,___fflush_unlocked__async_cb_20,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_fputc__async_cb_21,_fputc__async_cb,_puts__async_cb,__Znwj__async_cb,__ZnwjRKSt9nothrow_t__async_cb,__Znaj__async_cb,__ZnajRKSt9nothrow_t__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_132,_abort_message__async_cb,_abort_message__async_cb_172,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_1,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_171,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_176,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_173,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb
,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_126,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_125,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_124,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_123,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_185,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76
,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106
,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136
,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166
,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196
,b197,b198,b199];
var FUNCTION_TABLE_vii = [b201,__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE,__ZN12NetworkStack20get_call_in_callbackEv,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv];
var FUNCTION_TABLE_viii = [b203];
var FUNCTION_TABLE_viiii = [b205,__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b206,b207];
var FUNCTION_TABLE_viiiii = [b209,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b211,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=coap.js.map