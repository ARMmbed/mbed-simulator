// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { return window.MbedJSHal.network.get_mac_address(); },
 function($0) { return window.MbedJSHal.network.get_ip_address(); },
 function($0) { return window.MbedJSHal.network.get_netmask(); },
 function($0) { return window.MbedJSHal.network.socket_open($0); },
 function($0) { return window.MbedJSHal.network.socket_close($0); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_connect($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_send($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_recv($0, $1, $2); },
 function() { console.log('rx_frame', Date.now()); },
 function() { return Date.now(); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 12064;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "coap.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0"];
var debug_table_ii = ["0", "__ZN17EthernetInterface15get_mac_addressEv", "__ZN17EthernetInterface14get_ip_addressEv", "__ZN17EthernetInterface11get_netmaskEv", "__ZN17EthernetInterface11get_gatewayEv", "__ZN17EthernetInterface7connectEv", "__ZN17EthernetInterface10disconnectEv", "__ZNK16NetworkInterface21get_connection_statusEv", "__ZN16NetworkInterface12ethInterfaceEv", "__ZN16NetworkInterface13wifiInterfaceEv", "__ZN16NetworkInterface13meshInterfaceEv", "__ZN16NetworkInterface12cellularBaseEv", "__ZN16NetworkInterface13emacInterfaceEv", "__ZN17EthernetInterface9get_stackEv", "__ZThn4_N17EthernetInterface14get_ip_addressEv", "__ZN12NetworkStack19onboardNetworkStackEv", "__ZN9UDPSocket9get_protoEv", "___stdio_close", "__Z11coap_malloct", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16NetworkInterface26gethostbyname_async_cancelEi", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress", "__ZN17EthernetInterface8set_dhcpEb", "__ZN16NetworkInterface12set_blockingEb", "__ZN17EthernetInterface12socket_closeEPv", "__ZN12NetworkStack26gethostbyname_async_cancelEi", "__ZN12NetworkStack14add_dns_serverERK13SocketAddress", "__ZThn4_N17EthernetInterface12socket_closeEPv", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZN17EthernetInterface13socket_listenEPvi", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack14get_dns_serverEiP13SocketAddress", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface13socket_listenEPvi", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv", "_do_read", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZN17EthernetInterface11set_networkEPKcS1_S1_", "__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZN17EthernetInterface11socket_sendEPvPKvj", "__ZN17EthernetInterface11socket_recvEPvS0_j", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j", "__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "__ZN12NetworkStack11setstackoptEiiPKvj", "__ZN12NetworkStack11getstackoptEiiPvPj", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "0"];
var debug_table_iiiiiii = ["0", "__ZN12NetworkStack10setsockoptEPviiPKvj", "__ZN12NetworkStack10getsockoptEPviiS0_Pj", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "__ZL25default_terminate_handlerv", "__Z29nsapi_dns_query_async_timeoutv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN17EthernetInterfaceD2Ev", "__ZN17EthernetInterfaceD0Ev", "__ZThn4_N17EthernetInterfaceD1Ev", "__ZThn4_N17EthernetInterfaceD0Ev", "_mbed_trace_default_print", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv", "__ZN6SocketD2Ev", "__ZN6SocketD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv", "__ZN9UDPSocketD2Ev", "__ZN9UDPSocketD0Ev", "__ZN9UDPSocket5eventEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN17EthernetInterface15get_mac_addressEv__async_cb", "__ZN17EthernetInterface14get_ip_addressEv__async_cb", "__ZN17EthernetInterface11get_netmaskEv__async_cb", "__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb", "__ZN17EthernetInterface8set_dhcpEb__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_97", "__ZN17EthernetInterface12socket_closeEPv__async_cb", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_206", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_207", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_205", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_160", "__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_75", "__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_183", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_184", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_182", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_153", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_sn_coap_parser__async_cb", "_sn_coap_parser__async_cb_161", "_sn_coap_parser__async_cb_162", "_sn_coap_parser__async_cb_163", "_sn_coap_parser__async_cb_169", "_sn_coap_parser__async_cb_164", "_sn_coap_parser__async_cb_168", "_sn_coap_parser__async_cb_167", "_sn_coap_parser__async_cb_166", "_sn_coap_parser__async_cb_165", "_sn_coap_parser_options_parse_multiple_options__async_cb", "_sn_coap_protocol_init__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_146", "_mbed_vtracef__async_cb_136", "_mbed_vtracef__async_cb_137", "_mbed_vtracef__async_cb_138", "_mbed_vtracef__async_cb_145", "_mbed_vtracef__async_cb_139", "_mbed_vtracef__async_cb_144", "_mbed_vtracef__async_cb_140", "_mbed_vtracef__async_cb_141", "_mbed_vtracef__async_cb_142", "_mbed_vtracef__async_cb_143", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_96", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_98", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_6", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_7", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_8", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_45", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_48", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_178", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_201", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_193", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_194", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_195", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_196", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_200", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_197", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_198", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_199", "__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_19", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_11", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_17", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_12", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_13", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_18", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_14", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_16", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_15", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_1", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_2", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_3", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_4", "__ZN6SocketD2Ev__async_cb", "__ZN6SocketD2Ev__async_cb_208", "__ZN6Socket4openEP12NetworkStack__async_cb", "__ZN6Socket4openEP12NetworkStack__async_cb_127", "__ZN6Socket4openEP12NetworkStack__async_cb_128", "__ZN6Socket4openEP12NetworkStack__async_cb_129", "__ZN6Socket4openEP12NetworkStack__async_cb_130", "__ZN4mbed8CallbackIFvvEE5thunkEPv", "__ZN6Socket4openEP12NetworkStack__async_cb_131", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_121", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb", "__ZN6Socket5closeEv__async_cb", "__ZN6Socket5closeEv__async_cb_53", "__ZN6Socket5closeEv__async_cb_54", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_76", "__ZN9UDPSocketD2Ev__async_cb_117", "__ZN9UDPSocketD2Ev__async_cb", "__ZN9UDPSocketD2Ev__async_cb_116", "__ZN9UDPSocketD0Ev__async_cb", "__ZN9UDPSocket5eventEv__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_61", "__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb", "__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_177", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_174", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_173", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_172", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_176", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_175", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_170", "__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_123", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_126", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_124", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_125", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_95", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_91", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_92", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_77", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_78", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_79", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_80", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_81", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_94", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_82", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_83", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_84", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_85", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_86", "__ZL28nsapi_dns_query_async_createPv", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_93", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_88", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_89", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_90", "__Z29nsapi_dns_query_async_timeoutv__async_cb", "__ZL30nsapi_dns_query_async_responsePv", "__Z29nsapi_dns_query_async_timeoutv__async_cb_110", "__Z29nsapi_dns_query_async_timeoutv__async_cb_100", "__Z29nsapi_dns_query_async_timeoutv__async_cb_101", "__Z29nsapi_dns_query_async_timeoutv__async_cb_102", "__ZL26nsapi_dns_query_async_sendPv", "__Z29nsapi_dns_query_async_timeoutv__async_cb_109", "__Z29nsapi_dns_query_async_timeoutv__async_cb_103", "__Z29nsapi_dns_query_async_timeoutv__async_cb_104", "__Z29nsapi_dns_query_async_timeoutv__async_cb_105", "__Z29nsapi_dns_query_async_timeoutv__async_cb_108", "__Z29nsapi_dns_query_async_timeoutv__async_cb_106", "__Z29nsapi_dns_query_async_timeoutv__async_cb_107", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_59", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_55", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_56", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_58", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_57", "__ZL28nsapi_dns_query_async_createPv__async_cb_66", "__ZL28nsapi_dns_query_async_createPv__async_cb_71", "__ZL28nsapi_dns_query_async_createPv__async_cb_69", "__ZL28nsapi_dns_query_async_createPv__async_cb", "__ZL28nsapi_dns_query_async_createPv__async_cb_68", "__ZL28nsapi_dns_query_async_createPv__async_cb_65", "__ZL28nsapi_dns_query_async_createPv__async_cb_62", "__ZL28nsapi_dns_query_async_createPv__async_cb_63", "__ZL37nsapi_dns_query_async_socket_callbackPv", "__ZL28nsapi_dns_query_async_createPv__async_cb_70", "__ZL28nsapi_dns_query_async_createPv__async_cb_64", "__ZL28nsapi_dns_query_async_createPv__async_cb_67", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_42", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_37", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_43", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_38", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_39", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_44", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_40", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_41", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_181", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_179", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_180", "__ZL26nsapi_dns_query_async_sendPv__async_cb_203", "__ZL26nsapi_dns_query_async_sendPv__async_cb", "__ZL26nsapi_dns_query_async_sendPv__async_cb_202", "__ZL26nsapi_dns_query_async_sendPv__async_cb_204", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_159", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_156", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_158", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_157", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_154", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_155", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_120", "__ZL30nsapi_dns_query_async_responsePv__async_cb_118", "__ZL30nsapi_dns_query_async_responsePv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_119", "__ZL28nsapi_dns_query_async_deletei__async_cb_135", "__ZL28nsapi_dns_query_async_deletei__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_132", "__ZL28nsapi_dns_query_async_deletei__async_cb_133", "__ZL28nsapi_dns_query_async_deletei__async_cb_134", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_115", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_111", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_112", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_113", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_114", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_36", "_mbed_die__async_cb_35", "_mbed_die__async_cb_34", "_mbed_die__async_cb_33", "_mbed_die__async_cb_32", "_mbed_die__async_cb_31", "_mbed_die__async_cb_30", "_mbed_die__async_cb_29", "_mbed_die__async_cb_28", "_mbed_die__async_cb_27", "_mbed_die__async_cb_26", "_mbed_die__async_cb_25", "_mbed_die__async_cb_24", "_mbed_die__async_cb_23", "_mbed_die__async_cb_22", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_21", "_mbed_error_vfprintf__async_cb_20", "_serial_putc__async_cb_150", "_serial_putc__async_cb", "_invoke_ticker__async_cb_148", "_invoke_ticker__async_cb", "_wait__async_cb", "_wait_ms__async_cb", "__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb", "__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb", "__Z17recv_coap_messagev__async_cb_9", "__Z17recv_coap_messagev__async_cb_10", "__Z17recv_coap_messagev__async_cb", "_main__async_cb_188", "_main__async_cb_187", "_main__async_cb", "_main__async_cb_190", "__Z9coap_freePv", "_main__async_cb_191", "_main__async_cb_189", "_main__async_cb_185", "_main__async_cb_186", "_main__async_cb_192", "_putc__async_cb_122", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_73", "_fflush__async_cb_72", "_fflush__async_cb_74", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_60", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_fputc__async_cb_152", "_fputc__async_cb", "_puts__async_cb", "__Znwj__async_cb", "__ZnwjRKSt9nothrow_t__async_cb", "__Znaj__async_cb", "__ZnajRKSt9nothrow_t__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_5", "_abort_message__async_cb", "_abort_message__async_cb_147", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_149", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_47", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_99", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_151", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_52", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_51", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_50", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_49", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_46", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE", "__ZN12NetworkStack20get_call_in_callbackEv", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv"];
var debug_table_viii = ["0"];
var debug_table_viiii = ["0", "__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _sn_coap_parser__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $1001 = 0, $1002 = 0, $1007 = 0, $1008 = 0, $1013 = 0, $1016 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1031 = 0, $1032 = 0, $1034 = 0, $104 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $133 = 0, $14 = 0, $147 = 0, $149 = 0, $156 = 0, $158 = 0, $161 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $24 = 0, $241 = 0, $244 = 0, $258 = 0, $263 = 0, $275 = 0, $278 = 0, $279 = 0, $28 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $36 = 0, $360 = 0, $361 = 0, $366 = 0, $369 = 0, $372 = 0, $373 = 0, $378 = 0, $38 = 0, $381 = 0, $385 = 0, $388 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $465 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $535 = 0, $538 = 0, $54 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $615 = 0, $616 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $690 = 0, $693 = 0, $694 = 0, $699 = 0, $70 = 0, $702 = 0, $704 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $859 = 0, $86 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $932 = 0, $935 = 0, $936 = 0, $94 = 0, $941 = 0, $944 = 0, $948 = 0, $951 = 0, $952 = 0, $957 = 0, $96 = 0, $960 = 0, $964 = 0, $967 = 0, $968 = 0, $973 = 0, $976 = 0, $98 = 0, $980 = 0, $981 = 0, $986 = 0, $987 = 0, $992 = 0, $995 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $378$looptemp = 0, $699$looptemp = 0, $854$looptemp = 0, $941$looptemp = 0, $957$looptemp = 0, $973$looptemp = 0, $992$looptemp = 0, $1013$looptemp = 0, $366$looptemp = 0;
 sp = STACKTOP; //@line 31081
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31085
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31087
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31089
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31091
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31093
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31095
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31099
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31101
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31103
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31105
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31109
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31111
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31113
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 31115
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 31117
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 31119
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 31121
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 31123
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 31125
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 31127
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 31129
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 31131
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 31133
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 31135
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 31137
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 31139
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 31141
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 31143
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 31145
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 31147
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 31149
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 31151
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 31153
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 31155
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 31157
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 31159
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 31163
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 31165
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 31167
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 31169
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 31171
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 31173
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 31175
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 31177
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 31179
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 31181
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 31183
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 31185
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 31187
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 31189
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 31191
 $112 = HEAP16[$0 + 224 >> 1] | 0; //@line 31193
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 31195
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 31197
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 31199
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 31201
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 31203
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 31205
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 31207
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 31209
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 31211
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31213
 if (!$AsyncRetVal) {
  _mbed_tracef(2, 3844, 3849, HEAP32[$0 + 52 >> 2] | 0); //@line 31216
  _mbed_tracef(2, 3844, 3957, $70); //@line 31217
  $$0 = 0; //@line 31218
  $1041 = ___async_retval; //@line 31219
  HEAP32[$1041 >> 2] = $$0; //@line 31220
  return;
 }
 dest = $AsyncRetVal; //@line 31223
 stop = dest + 44 | 0; //@line 31223
 do {
  HEAP32[dest >> 2] = 0; //@line 31223
  dest = dest + 4 | 0; //@line 31223
 } while ((dest | 0) < (stop | 0));
 $133 = $AsyncRetVal + 16 | 0; //@line 31224
 HEAP32[$133 >> 2] = -1; //@line 31225
 HEAP32[$120 >> 2] = HEAP8[$116 >> 0] & -64 & 255; //@line 31229
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP8[$116 >> 0] & 48; //@line 31234
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAPU8[$116 + 1 >> 0]; //@line 31239
 $147 = HEAP8[$116 + 3 >> 0] | 0; //@line 31242
 $149 = $AsyncRetVal + 20 | 0; //@line 31244
 HEAP16[$149 >> 1] = $147 & 255; //@line 31245
 HEAP16[$149 >> 1] = HEAPU8[$116 + 2 >> 0] << 8 | $147 & 255; //@line 31252
 $156 = $116 + 4 | 0; //@line 31253
 HEAP32[$86 >> 2] = $156; //@line 31254
 $158 = HEAP8[$116 >> 0] & 15; //@line 31256
 HEAP8[$AsyncRetVal >> 0] = $158; //@line 31257
 L6 : do {
  if (!($158 << 24 >> 24)) {
   $231 = $156; //@line 31261
   $232 = $112 & 65535; //@line 31262
   $233 = $116; //@line 31263
   $234 = $233 + $232 | 0; //@line 31264
   $236 = $AsyncRetVal + 40 | 0; //@line 31266
   $237 = $AsyncRetVal + 32 | 0; //@line 31267
   $238 = $AsyncRetVal + 22 | 0; //@line 31268
   $$0208$i = 0; //@line 31269
   $$sink275$i = $234 - $231 | 0; //@line 31269
   $1042 = $231; //@line 31269
   $241 = $156; //@line 31269
   L8 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 115; //@line 31274
     break;
    }
    $trunc277$i = HEAP8[$241 >> 0] | 0; //@line 31277
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 115; //@line 31280
     break;
    }
    $244 = $trunc277$i & 15; //@line 31284
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 31285
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 17; //@line 31290
      break L8;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$241 + 1 >> 0] | 0; //@line 31298
      $$sink214$i = 13; //@line 31298
      $$sink3$i = 1; //@line 31298
      label = 18; //@line 31299
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$241 + 1 >> 0] << 8) + 269 | 0; //@line 31311
      $$sink214$i = HEAPU8[$241 + 2 >> 0] | 0; //@line 31311
      $$sink3$i = 2; //@line 31311
      label = 18; //@line 31312
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 31316
      $1043 = $1042; //@line 31316
      $263 = $241; //@line 31316
     }
    }
    if ((label | 0) == 18) {
     label = 0; //@line 31320
     $258 = $241 + $$sink3$i | 0; //@line 31322
     HEAP32[$86 >> 2] = $258; //@line 31323
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 31325
     $1043 = $258; //@line 31325
     $263 = $258; //@line 31325
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 31328
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 22; //@line 31332
      break L8;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$263 + 1 >> 0] | 0; //@line 31340
      $$sink216$i = 13; //@line 31340
      $$sink8$i = 1; //@line 31340
      label = 23; //@line 31341
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$263 + 1 >> 0] << 8) + 269 | 0; //@line 31353
      $$sink216$i = HEAPU8[$263 + 2 >> 0] | 0; //@line 31353
      $$sink8$i = 2; //@line 31353
      label = 23; //@line 31354
      break;
     }
    default:
     {
      $$1202$in$i = $244; //@line 31358
      $278 = $1043; //@line 31358
      $345 = $263; //@line 31358
     }
    }
    if ((label | 0) == 23) {
     label = 0; //@line 31362
     $275 = $263 + $$sink8$i | 0; //@line 31364
     HEAP32[$86 >> 2] = $275; //@line 31365
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 31367
     $278 = $275; //@line 31367
     $345 = $275; //@line 31367
    }
    $$1202$i = $$1202$in$i & 65535; //@line 31369
    $279 = $234 - $278 & 65535; //@line 31371
    $trunc$i = $$0208$i & 65535; //@line 31372
    L24 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 70; //@line 31376
       break L8;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$236 >> 2] | 0)) {
        label = 26; //@line 31384
        break L8;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 41; //@line 31389
         break L8;
         break;
        }
       case 4:
        {
         label = 47; //@line 31394
         break L8;
         break;
        }
       case 3:
        {
         label = 50; //@line 31399
         break L8;
         break;
        }
       case 8:
        {
         label = 56; //@line 31404
         break L8;
         break;
        }
       case 20:
        {
         label = 67; //@line 31409
         break L8;
         break;
        }
       case 11:
        {
         label = 70; //@line 31414
         break L8;
         break;
        }
       case 15:
        {
         label = 79; //@line 31419
         break L8;
         break;
        }
       case 12:
        {
         label = 30; //@line 31424
         break L24;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 37; //@line 31431
          break L8;
         }
         $372 = $345 + 1 | 0; //@line 31434
         HEAP32[$86 >> 2] = $372; //@line 31435
         $373 = $$1202$in$i & 255; //@line 31436
         if (!($373 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 31439
         } else {
          $$045$i221$i = $373; //@line 31441
          $$06$i220$i = 0; //@line 31441
          $378 = $372; //@line 31441
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 31443
           $378$looptemp = $378;
           $378 = $378 + 1 | 0; //@line 31445
           HEAP32[$86 >> 2] = $378; //@line 31446
           $381 = $$06$i220$i << 8 | HEAPU8[$378$looptemp >> 0]; //@line 31449
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $381; //@line 31452
            break;
           } else {
            $$06$i220$i = $381; //@line 31455
           }
          }
         }
         HEAP32[(HEAP32[$236 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 31461
         break L24;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 63; //@line 31468
          break L8;
         }
         $690 = (HEAP32[$236 >> 2] | 0) + 28 | 0; //@line 31472
         if ((HEAP32[$690 >> 2] | 0) != -1) {
          label = 63; //@line 31476
          break L8;
         }
         $693 = $345 + 1 | 0; //@line 31479
         HEAP32[$86 >> 2] = $693; //@line 31480
         $694 = $$1202$in$i & 255; //@line 31481
         if (!($694 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 31484
         } else {
          $$045$i263$i = $694; //@line 31486
          $$06$i262$i = 0; //@line 31486
          $699 = $693; //@line 31486
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 31488
           $699$looptemp = $699;
           $699 = $699 + 1 | 0; //@line 31490
           HEAP32[$86 >> 2] = $699; //@line 31491
           $702 = $$06$i262$i << 8 | HEAPU8[$699$looptemp >> 0]; //@line 31494
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $702; //@line 31497
            break;
           } else {
            $$06$i262$i = $702; //@line 31500
           }
          }
         }
         HEAP32[$690 >> 2] = $$0$lcssa$i265$i; //@line 31504
         break L24;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 75; //@line 31511
          break L8;
         }
         $845 = (HEAP32[$236 >> 2] | 0) + 32 | 0; //@line 31515
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 75; //@line 31519
          break L8;
         }
         $848 = $345 + 1 | 0; //@line 31522
         HEAP32[$86 >> 2] = $848; //@line 31523
         $849 = $$1202$in$i & 255; //@line 31524
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 31527
         } else {
          $$045$i270$i = $849; //@line 31529
          $$06$i269$i = 0; //@line 31529
          $854 = $848; //@line 31529
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 31531
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 31533
           HEAP32[$86 >> 2] = $854; //@line 31534
           $857 = $$06$i269$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 31537
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $857; //@line 31540
            break;
           } else {
            $$06$i269$i = $857; //@line 31543
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i272$i; //@line 31547
         break L24;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 84; //@line 31554
          break L8;
         }
         $932 = (HEAP32[$236 >> 2] | 0) + 40 | 0; //@line 31558
         if ((HEAP32[$932 >> 2] | 0) != -1) {
          label = 84; //@line 31562
          break L8;
         }
         $935 = $345 + 1 | 0; //@line 31565
         HEAP32[$86 >> 2] = $935; //@line 31566
         $936 = $$1202$in$i & 255; //@line 31567
         if (!($936 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 31570
         } else {
          $$045$i256$i = $936; //@line 31572
          $$06$i255$i = 0; //@line 31572
          $941 = $935; //@line 31572
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 31574
           $941$looptemp = $941;
           $941 = $941 + 1 | 0; //@line 31576
           HEAP32[$86 >> 2] = $941; //@line 31577
           $944 = $$06$i255$i << 8 | HEAPU8[$941$looptemp >> 0]; //@line 31580
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $944; //@line 31583
            break;
           } else {
            $$06$i255$i = $944; //@line 31586
           }
          }
         }
         HEAP32[$932 >> 2] = $$0$lcssa$i258$i; //@line 31590
         break L24;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 90; //@line 31597
          break L8;
         }
         $948 = (HEAP32[$236 >> 2] | 0) + 36 | 0; //@line 31601
         if ((HEAP32[$948 >> 2] | 0) != -1) {
          label = 90; //@line 31605
          break L8;
         }
         $951 = $345 + 1 | 0; //@line 31608
         HEAP32[$86 >> 2] = $951; //@line 31609
         $952 = $$1202$in$i & 255; //@line 31610
         if (!($952 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 31613
         } else {
          $$045$i249$i = $952; //@line 31615
          $$06$i248$i = 0; //@line 31615
          $957 = $951; //@line 31615
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 31617
           $957$looptemp = $957;
           $957 = $957 + 1 | 0; //@line 31619
           HEAP32[$86 >> 2] = $957; //@line 31620
           $960 = $$06$i248$i << 8 | HEAPU8[$957$looptemp >> 0]; //@line 31623
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $960; //@line 31626
            break;
           } else {
            $$06$i248$i = $960; //@line 31629
           }
          }
         }
         HEAP32[$948 >> 2] = $$0$lcssa$i251$i; //@line 31633
         break L24;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 96; //@line 31640
          break L8;
         }
         $964 = (HEAP32[$236 >> 2] | 0) + 12 | 0; //@line 31644
         if ((HEAP32[$964 >> 2] | 0) != -1) {
          label = 96; //@line 31648
          break L8;
         }
         $967 = $345 + 1 | 0; //@line 31651
         HEAP32[$86 >> 2] = $967; //@line 31652
         $968 = $$1202$in$i & 255; //@line 31653
         if (!($968 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 31656
         } else {
          $$045$i242$i = $968; //@line 31658
          $$06$i241$i = 0; //@line 31658
          $973 = $967; //@line 31658
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 31660
           $973$looptemp = $973;
           $973 = $973 + 1 | 0; //@line 31662
           HEAP32[$86 >> 2] = $973; //@line 31663
           $976 = $$06$i241$i << 8 | HEAPU8[$973$looptemp >> 0]; //@line 31666
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $976; //@line 31669
            break;
           } else {
            $$06$i241$i = $976; //@line 31672
           }
          }
         }
         HEAP32[$964 >> 2] = $$0$lcssa$i244$i; //@line 31676
         break L24;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 102; //@line 31683
          break L8;
         }
         $980 = (HEAP32[$236 >> 2] | 0) + 1 | 0; //@line 31687
         $981 = HEAP8[$980 >> 0] | 0; //@line 31688
         if ($981 & 1) {
          label = 102; //@line 31692
          break L8;
         }
         HEAP8[$980 >> 0] = $981 | 1; //@line 31696
         $986 = (HEAP32[$86 >> 2] | 0) + 1 | 0; //@line 31698
         HEAP32[$86 >> 2] = $986; //@line 31699
         $987 = $$1202$in$i & 255; //@line 31700
         if (!($987 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 31703
         } else {
          $$045$i235$i = $987; //@line 31705
          $$06$i234$i = 0; //@line 31705
          $992 = $986; //@line 31705
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 31707
           $992$looptemp = $992;
           $992 = $992 + 1 | 0; //@line 31709
           HEAP32[$86 >> 2] = $992; //@line 31710
           $995 = $$06$i234$i << 8 | HEAPU8[$992$looptemp >> 0]; //@line 31713
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $995; //@line 31716
            break;
           } else {
            $$06$i234$i = $995; //@line 31719
           }
          }
         }
         HEAP32[(HEAP32[$236 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 31725
         break L24;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 108; //@line 31732
          break L8;
         }
         $1001 = (HEAP32[$236 >> 2] | 0) + 1 | 0; //@line 31736
         $1002 = HEAP8[$1001 >> 0] | 0; //@line 31737
         if ($1002 & 2) {
          label = 108; //@line 31741
          break L8;
         }
         HEAP8[$1001 >> 0] = $1002 | 2; //@line 31745
         $1007 = (HEAP32[$86 >> 2] | 0) + 1 | 0; //@line 31747
         HEAP32[$86 >> 2] = $1007; //@line 31748
         $1008 = $$1202$in$i & 255; //@line 31749
         if (!($1008 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 31752
         } else {
          $$045$i228$i = $1008; //@line 31754
          $$06$i227$i = 0; //@line 31754
          $1013 = $1007; //@line 31754
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 31756
           $1013$looptemp = $1013;
           $1013 = $1013 + 1 | 0; //@line 31758
           HEAP32[$86 >> 2] = $1013; //@line 31759
           $1016 = $$06$i227$i << 8 | HEAPU8[$1013$looptemp >> 0]; //@line 31762
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $1016; //@line 31765
            break;
           } else {
            $$06$i227$i = $1016; //@line 31768
           }
          }
         }
         HEAP32[(HEAP32[$236 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 31774
         break L24;
         break;
        }
       default:
        {
         label = 112; //@line 31779
         break L8;
        }
       }
       break;
      }
     case 12:
      {
       label = 30; //@line 31786
       break;
      }
     default:
      {
       label = 112; //@line 31790
       break L8;
      }
     }
    } while (0);
    if ((label | 0) == 30) {
     label = 0; //@line 31796
     if (($$1202$i & 65535) > 2) {
      label = 32; //@line 31799
      break;
     }
     if ((HEAP32[$133 >> 2] | 0) != -1) {
      label = 32; //@line 31805
      break;
     }
     $360 = $345 + 1 | 0; //@line 31808
     HEAP32[$86 >> 2] = $360; //@line 31809
     $361 = $$1202$in$i & 255; //@line 31810
     if (!($361 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 31813
     } else {
      $$045$i$i = $361; //@line 31815
      $$06$i$i = 0; //@line 31815
      $366 = $360; //@line 31815
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 31817
       $366$looptemp = $366;
       $366 = $366 + 1 | 0; //@line 31819
       HEAP32[$86 >> 2] = $366; //@line 31820
       $369 = $$06$i$i << 8 | HEAPU8[$366$looptemp >> 0]; //@line 31823
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $369; //@line 31826
        break;
       } else {
        $$06$i$i = $369; //@line 31829
       }
      }
     }
     HEAP32[$133 >> 2] = $$0$lcssa$i$i; //@line 31833
    }
    $1020 = HEAP32[$86 >> 2] | 0; //@line 31835
    $1021 = $1020 - $233 | 0; //@line 31836
    if (($1021 | 0) > ($232 | 0)) {
     break L6;
    } else {
     $$sink275$i = $232 - $1021 | 0; //@line 31843
     $1042 = $1020; //@line 31843
     $241 = $1020; //@line 31843
    }
   }
   switch (label | 0) {
   case 17:
    {
     _mbed_tracef(2, 3844, 4107, $6); //@line 31848
     break L6;
     break;
    }
   case 22:
    {
     _mbed_tracef(2, 3844, 4165, $52); //@line 31853
     break L6;
     break;
    }
   case 26:
    {
     $282 = HEAP32[$40 >> 2] | 0; //@line 31858
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 31859
     $283 = FUNCTION_TABLE_ii[$282 & 31](68) | 0; //@line 31860
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 31863
      $284 = $ReallocAsyncCtx3 + 4 | 0; //@line 31864
      HEAP32[$284 >> 2] = $4; //@line 31865
      $285 = $ReallocAsyncCtx3 + 8 | 0; //@line 31866
      HEAP32[$285 >> 2] = $8; //@line 31867
      $286 = $ReallocAsyncCtx3 + 12 | 0; //@line 31868
      HEAP32[$286 >> 2] = $233; //@line 31869
      $287 = $ReallocAsyncCtx3 + 16 | 0; //@line 31870
      HEAP32[$287 >> 2] = $6; //@line 31871
      $288 = $ReallocAsyncCtx3 + 20 | 0; //@line 31872
      HEAP32[$288 >> 2] = $10; //@line 31873
      $289 = $ReallocAsyncCtx3 + 24 | 0; //@line 31874
      HEAP32[$289 >> 2] = $12; //@line 31875
      $290 = $ReallocAsyncCtx3 + 28 | 0; //@line 31876
      HEAP16[$290 >> 1] = $trunc$i; //@line 31877
      $291 = $ReallocAsyncCtx3 + 32 | 0; //@line 31878
      HEAP32[$291 >> 2] = $18; //@line 31879
      $292 = $ReallocAsyncCtx3 + 36 | 0; //@line 31880
      HEAP32[$292 >> 2] = $232; //@line 31881
      $293 = $ReallocAsyncCtx3 + 40 | 0; //@line 31882
      HEAP32[$293 >> 2] = $22; //@line 31883
      $294 = $ReallocAsyncCtx3 + 44 | 0; //@line 31884
      HEAP32[$294 >> 2] = $24; //@line 31885
      $295 = $ReallocAsyncCtx3 + 48 | 0; //@line 31886
      HEAP32[$295 >> 2] = $AsyncRetVal; //@line 31887
      $296 = $ReallocAsyncCtx3 + 52 | 0; //@line 31888
      HEAP32[$296 >> 2] = $28; //@line 31889
      $297 = $ReallocAsyncCtx3 + 56 | 0; //@line 31890
      HEAP32[$297 >> 2] = $30; //@line 31891
      $298 = $ReallocAsyncCtx3 + 60 | 0; //@line 31892
      HEAP32[$298 >> 2] = $234; //@line 31893
      $299 = $ReallocAsyncCtx3 + 64 | 0; //@line 31894
      HEAP32[$299 >> 2] = $32; //@line 31895
      $300 = $ReallocAsyncCtx3 + 68 | 0; //@line 31896
      HEAP32[$300 >> 2] = $34; //@line 31897
      $301 = $ReallocAsyncCtx3 + 72 | 0; //@line 31898
      HEAP32[$301 >> 2] = $36; //@line 31899
      $302 = $ReallocAsyncCtx3 + 76 | 0; //@line 31900
      HEAP32[$302 >> 2] = $38; //@line 31901
      $303 = $ReallocAsyncCtx3 + 80 | 0; //@line 31902
      HEAP32[$303 >> 2] = $236; //@line 31903
      $304 = $ReallocAsyncCtx3 + 84 | 0; //@line 31904
      HEAP32[$304 >> 2] = $40; //@line 31905
      $305 = $ReallocAsyncCtx3 + 88 | 0; //@line 31906
      HEAP32[$305 >> 2] = $236; //@line 31907
      $306 = $ReallocAsyncCtx3 + 92 | 0; //@line 31908
      HEAP32[$306 >> 2] = $44; //@line 31909
      $307 = $ReallocAsyncCtx3 + 96 | 0; //@line 31910
      HEAP32[$307 >> 2] = $46; //@line 31911
      $308 = $ReallocAsyncCtx3 + 100 | 0; //@line 31912
      HEAP32[$308 >> 2] = $42; //@line 31913
      $309 = $ReallocAsyncCtx3 + 104 | 0; //@line 31914
      HEAP32[$309 >> 2] = $50; //@line 31915
      $310 = $ReallocAsyncCtx3 + 108 | 0; //@line 31916
      HEAP32[$310 >> 2] = $48; //@line 31917
      $311 = $ReallocAsyncCtx3 + 112 | 0; //@line 31918
      HEAP16[$311 >> 1] = $279; //@line 31919
      $312 = $ReallocAsyncCtx3 + 116 | 0; //@line 31920
      HEAP32[$312 >> 2] = $237; //@line 31921
      $313 = $ReallocAsyncCtx3 + 120 | 0; //@line 31922
      HEAP32[$313 >> 2] = $52; //@line 31923
      $314 = $ReallocAsyncCtx3 + 124 | 0; //@line 31924
      HEAP32[$314 >> 2] = $54; //@line 31925
      $315 = $ReallocAsyncCtx3 + 128 | 0; //@line 31926
      HEAP32[$315 >> 2] = $56; //@line 31927
      $316 = $ReallocAsyncCtx3 + 132 | 0; //@line 31928
      HEAP32[$316 >> 2] = $58; //@line 31929
      $317 = $ReallocAsyncCtx3 + 136 | 0; //@line 31930
      HEAP32[$317 >> 2] = $62; //@line 31931
      $318 = $ReallocAsyncCtx3 + 140 | 0; //@line 31932
      HEAP32[$318 >> 2] = $64; //@line 31933
      $319 = $ReallocAsyncCtx3 + 144 | 0; //@line 31934
      HEAP32[$319 >> 2] = $66; //@line 31935
      $320 = $ReallocAsyncCtx3 + 148 | 0; //@line 31936
      HEAP32[$320 >> 2] = $68; //@line 31937
      $321 = $ReallocAsyncCtx3 + 152 | 0; //@line 31938
      HEAP32[$321 >> 2] = $AsyncRetVal; //@line 31939
      $322 = $ReallocAsyncCtx3 + 156 | 0; //@line 31940
      HEAP32[$322 >> 2] = $74; //@line 31941
      $323 = $ReallocAsyncCtx3 + 160 | 0; //@line 31942
      HEAP32[$323 >> 2] = $72; //@line 31943
      $324 = $ReallocAsyncCtx3 + 164 | 0; //@line 31944
      HEAP32[$324 >> 2] = $78; //@line 31945
      $325 = $ReallocAsyncCtx3 + 168 | 0; //@line 31946
      HEAP32[$325 >> 2] = $238; //@line 31947
      $326 = $ReallocAsyncCtx3 + 172 | 0; //@line 31948
      HEAP32[$326 >> 2] = $76; //@line 31949
      $327 = $ReallocAsyncCtx3 + 176 | 0; //@line 31950
      HEAP32[$327 >> 2] = $$1202$in$i; //@line 31951
      $328 = $ReallocAsyncCtx3 + 180 | 0; //@line 31952
      HEAP32[$328 >> 2] = $82; //@line 31953
      $329 = $ReallocAsyncCtx3 + 184 | 0; //@line 31954
      HEAP32[$329 >> 2] = $84; //@line 31955
      $330 = $ReallocAsyncCtx3 + 188 | 0; //@line 31956
      HEAP32[$330 >> 2] = $86; //@line 31957
      $331 = $ReallocAsyncCtx3 + 192 | 0; //@line 31958
      HEAP32[$331 >> 2] = $88; //@line 31959
      $332 = $ReallocAsyncCtx3 + 196 | 0; //@line 31960
      HEAP16[$332 >> 1] = $$1202$i; //@line 31961
      $333 = $ReallocAsyncCtx3 + 200 | 0; //@line 31962
      HEAP32[$333 >> 2] = $90; //@line 31963
      $334 = $ReallocAsyncCtx3 + 204 | 0; //@line 31964
      HEAP32[$334 >> 2] = $94; //@line 31965
      $335 = $ReallocAsyncCtx3 + 208 | 0; //@line 31966
      HEAP32[$335 >> 2] = $96; //@line 31967
      $336 = $ReallocAsyncCtx3 + 212 | 0; //@line 31968
      HEAP32[$336 >> 2] = $92; //@line 31969
      $337 = $ReallocAsyncCtx3 + 216 | 0; //@line 31970
      HEAP32[$337 >> 2] = $100; //@line 31971
      $338 = $ReallocAsyncCtx3 + 220 | 0; //@line 31972
      HEAP32[$338 >> 2] = $98; //@line 31973
      $339 = $ReallocAsyncCtx3 + 224 | 0; //@line 31974
      HEAP32[$339 >> 2] = $102; //@line 31975
      $340 = $ReallocAsyncCtx3 + 228 | 0; //@line 31976
      HEAP32[$340 >> 2] = $104; //@line 31977
      $341 = $ReallocAsyncCtx3 + 232 | 0; //@line 31978
      HEAP32[$341 >> 2] = $106; //@line 31979
      $342 = $ReallocAsyncCtx3 + 236 | 0; //@line 31980
      HEAP32[$342 >> 2] = $108; //@line 31981
      $343 = $ReallocAsyncCtx3 + 240 | 0; //@line 31982
      HEAP32[$343 >> 2] = $110; //@line 31983
      $344 = $ReallocAsyncCtx3 + 244 | 0; //@line 31984
      HEAP32[$344 >> 2] = $345; //@line 31985
      $346 = $ReallocAsyncCtx3 + 248 | 0; //@line 31986
      HEAP32[$346 >> 2] = $86; //@line 31987
      $347 = $ReallocAsyncCtx3 + 252 | 0; //@line 31988
      HEAP32[$347 >> 2] = $114; //@line 31989
      $348 = $ReallocAsyncCtx3 + 256 | 0; //@line 31990
      HEAP32[$348 >> 2] = $118; //@line 31991
      $349 = $ReallocAsyncCtx3 + 260 | 0; //@line 31992
      HEAP32[$349 >> 2] = $133; //@line 31993
      $350 = $ReallocAsyncCtx3 + 264 | 0; //@line 31994
      HEAP32[$350 >> 2] = $$0208$i; //@line 31995
      $351 = $ReallocAsyncCtx3 + 268 | 0; //@line 31996
      HEAP32[$351 >> 2] = $122; //@line 31997
      $352 = $ReallocAsyncCtx3 + 272 | 0; //@line 31998
      HEAP32[$352 >> 2] = $124; //@line 31999
      $353 = $ReallocAsyncCtx3 + 276 | 0; //@line 32000
      HEAP32[$353 >> 2] = $126; //@line 32001
      $354 = $ReallocAsyncCtx3 + 280 | 0; //@line 32002
      HEAP32[$354 >> 2] = $128; //@line 32003
      $355 = $ReallocAsyncCtx3 + 284 | 0; //@line 32004
      HEAP32[$355 >> 2] = $130; //@line 32005
      sp = STACKTOP; //@line 32006
      return;
     }
     HEAP32[___async_retval >> 2] = $283; //@line 32010
     ___async_unwind = 0; //@line 32011
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 32012
     $284 = $ReallocAsyncCtx3 + 4 | 0; //@line 32013
     HEAP32[$284 >> 2] = $4; //@line 32014
     $285 = $ReallocAsyncCtx3 + 8 | 0; //@line 32015
     HEAP32[$285 >> 2] = $8; //@line 32016
     $286 = $ReallocAsyncCtx3 + 12 | 0; //@line 32017
     HEAP32[$286 >> 2] = $233; //@line 32018
     $287 = $ReallocAsyncCtx3 + 16 | 0; //@line 32019
     HEAP32[$287 >> 2] = $6; //@line 32020
     $288 = $ReallocAsyncCtx3 + 20 | 0; //@line 32021
     HEAP32[$288 >> 2] = $10; //@line 32022
     $289 = $ReallocAsyncCtx3 + 24 | 0; //@line 32023
     HEAP32[$289 >> 2] = $12; //@line 32024
     $290 = $ReallocAsyncCtx3 + 28 | 0; //@line 32025
     HEAP16[$290 >> 1] = $trunc$i; //@line 32026
     $291 = $ReallocAsyncCtx3 + 32 | 0; //@line 32027
     HEAP32[$291 >> 2] = $18; //@line 32028
     $292 = $ReallocAsyncCtx3 + 36 | 0; //@line 32029
     HEAP32[$292 >> 2] = $232; //@line 32030
     $293 = $ReallocAsyncCtx3 + 40 | 0; //@line 32031
     HEAP32[$293 >> 2] = $22; //@line 32032
     $294 = $ReallocAsyncCtx3 + 44 | 0; //@line 32033
     HEAP32[$294 >> 2] = $24; //@line 32034
     $295 = $ReallocAsyncCtx3 + 48 | 0; //@line 32035
     HEAP32[$295 >> 2] = $AsyncRetVal; //@line 32036
     $296 = $ReallocAsyncCtx3 + 52 | 0; //@line 32037
     HEAP32[$296 >> 2] = $28; //@line 32038
     $297 = $ReallocAsyncCtx3 + 56 | 0; //@line 32039
     HEAP32[$297 >> 2] = $30; //@line 32040
     $298 = $ReallocAsyncCtx3 + 60 | 0; //@line 32041
     HEAP32[$298 >> 2] = $234; //@line 32042
     $299 = $ReallocAsyncCtx3 + 64 | 0; //@line 32043
     HEAP32[$299 >> 2] = $32; //@line 32044
     $300 = $ReallocAsyncCtx3 + 68 | 0; //@line 32045
     HEAP32[$300 >> 2] = $34; //@line 32046
     $301 = $ReallocAsyncCtx3 + 72 | 0; //@line 32047
     HEAP32[$301 >> 2] = $36; //@line 32048
     $302 = $ReallocAsyncCtx3 + 76 | 0; //@line 32049
     HEAP32[$302 >> 2] = $38; //@line 32050
     $303 = $ReallocAsyncCtx3 + 80 | 0; //@line 32051
     HEAP32[$303 >> 2] = $236; //@line 32052
     $304 = $ReallocAsyncCtx3 + 84 | 0; //@line 32053
     HEAP32[$304 >> 2] = $40; //@line 32054
     $305 = $ReallocAsyncCtx3 + 88 | 0; //@line 32055
     HEAP32[$305 >> 2] = $236; //@line 32056
     $306 = $ReallocAsyncCtx3 + 92 | 0; //@line 32057
     HEAP32[$306 >> 2] = $44; //@line 32058
     $307 = $ReallocAsyncCtx3 + 96 | 0; //@line 32059
     HEAP32[$307 >> 2] = $46; //@line 32060
     $308 = $ReallocAsyncCtx3 + 100 | 0; //@line 32061
     HEAP32[$308 >> 2] = $42; //@line 32062
     $309 = $ReallocAsyncCtx3 + 104 | 0; //@line 32063
     HEAP32[$309 >> 2] = $50; //@line 32064
     $310 = $ReallocAsyncCtx3 + 108 | 0; //@line 32065
     HEAP32[$310 >> 2] = $48; //@line 32066
     $311 = $ReallocAsyncCtx3 + 112 | 0; //@line 32067
     HEAP16[$311 >> 1] = $279; //@line 32068
     $312 = $ReallocAsyncCtx3 + 116 | 0; //@line 32069
     HEAP32[$312 >> 2] = $237; //@line 32070
     $313 = $ReallocAsyncCtx3 + 120 | 0; //@line 32071
     HEAP32[$313 >> 2] = $52; //@line 32072
     $314 = $ReallocAsyncCtx3 + 124 | 0; //@line 32073
     HEAP32[$314 >> 2] = $54; //@line 32074
     $315 = $ReallocAsyncCtx3 + 128 | 0; //@line 32075
     HEAP32[$315 >> 2] = $56; //@line 32076
     $316 = $ReallocAsyncCtx3 + 132 | 0; //@line 32077
     HEAP32[$316 >> 2] = $58; //@line 32078
     $317 = $ReallocAsyncCtx3 + 136 | 0; //@line 32079
     HEAP32[$317 >> 2] = $62; //@line 32080
     $318 = $ReallocAsyncCtx3 + 140 | 0; //@line 32081
     HEAP32[$318 >> 2] = $64; //@line 32082
     $319 = $ReallocAsyncCtx3 + 144 | 0; //@line 32083
     HEAP32[$319 >> 2] = $66; //@line 32084
     $320 = $ReallocAsyncCtx3 + 148 | 0; //@line 32085
     HEAP32[$320 >> 2] = $68; //@line 32086
     $321 = $ReallocAsyncCtx3 + 152 | 0; //@line 32087
     HEAP32[$321 >> 2] = $AsyncRetVal; //@line 32088
     $322 = $ReallocAsyncCtx3 + 156 | 0; //@line 32089
     HEAP32[$322 >> 2] = $74; //@line 32090
     $323 = $ReallocAsyncCtx3 + 160 | 0; //@line 32091
     HEAP32[$323 >> 2] = $72; //@line 32092
     $324 = $ReallocAsyncCtx3 + 164 | 0; //@line 32093
     HEAP32[$324 >> 2] = $78; //@line 32094
     $325 = $ReallocAsyncCtx3 + 168 | 0; //@line 32095
     HEAP32[$325 >> 2] = $238; //@line 32096
     $326 = $ReallocAsyncCtx3 + 172 | 0; //@line 32097
     HEAP32[$326 >> 2] = $76; //@line 32098
     $327 = $ReallocAsyncCtx3 + 176 | 0; //@line 32099
     HEAP32[$327 >> 2] = $$1202$in$i; //@line 32100
     $328 = $ReallocAsyncCtx3 + 180 | 0; //@line 32101
     HEAP32[$328 >> 2] = $82; //@line 32102
     $329 = $ReallocAsyncCtx3 + 184 | 0; //@line 32103
     HEAP32[$329 >> 2] = $84; //@line 32104
     $330 = $ReallocAsyncCtx3 + 188 | 0; //@line 32105
     HEAP32[$330 >> 2] = $86; //@line 32106
     $331 = $ReallocAsyncCtx3 + 192 | 0; //@line 32107
     HEAP32[$331 >> 2] = $88; //@line 32108
     $332 = $ReallocAsyncCtx3 + 196 | 0; //@line 32109
     HEAP16[$332 >> 1] = $$1202$i; //@line 32110
     $333 = $ReallocAsyncCtx3 + 200 | 0; //@line 32111
     HEAP32[$333 >> 2] = $90; //@line 32112
     $334 = $ReallocAsyncCtx3 + 204 | 0; //@line 32113
     HEAP32[$334 >> 2] = $94; //@line 32114
     $335 = $ReallocAsyncCtx3 + 208 | 0; //@line 32115
     HEAP32[$335 >> 2] = $96; //@line 32116
     $336 = $ReallocAsyncCtx3 + 212 | 0; //@line 32117
     HEAP32[$336 >> 2] = $92; //@line 32118
     $337 = $ReallocAsyncCtx3 + 216 | 0; //@line 32119
     HEAP32[$337 >> 2] = $100; //@line 32120
     $338 = $ReallocAsyncCtx3 + 220 | 0; //@line 32121
     HEAP32[$338 >> 2] = $98; //@line 32122
     $339 = $ReallocAsyncCtx3 + 224 | 0; //@line 32123
     HEAP32[$339 >> 2] = $102; //@line 32124
     $340 = $ReallocAsyncCtx3 + 228 | 0; //@line 32125
     HEAP32[$340 >> 2] = $104; //@line 32126
     $341 = $ReallocAsyncCtx3 + 232 | 0; //@line 32127
     HEAP32[$341 >> 2] = $106; //@line 32128
     $342 = $ReallocAsyncCtx3 + 236 | 0; //@line 32129
     HEAP32[$342 >> 2] = $108; //@line 32130
     $343 = $ReallocAsyncCtx3 + 240 | 0; //@line 32131
     HEAP32[$343 >> 2] = $110; //@line 32132
     $344 = $ReallocAsyncCtx3 + 244 | 0; //@line 32133
     HEAP32[$344 >> 2] = $345; //@line 32134
     $346 = $ReallocAsyncCtx3 + 248 | 0; //@line 32135
     HEAP32[$346 >> 2] = $86; //@line 32136
     $347 = $ReallocAsyncCtx3 + 252 | 0; //@line 32137
     HEAP32[$347 >> 2] = $114; //@line 32138
     $348 = $ReallocAsyncCtx3 + 256 | 0; //@line 32139
     HEAP32[$348 >> 2] = $118; //@line 32140
     $349 = $ReallocAsyncCtx3 + 260 | 0; //@line 32141
     HEAP32[$349 >> 2] = $133; //@line 32142
     $350 = $ReallocAsyncCtx3 + 264 | 0; //@line 32143
     HEAP32[$350 >> 2] = $$0208$i; //@line 32144
     $351 = $ReallocAsyncCtx3 + 268 | 0; //@line 32145
     HEAP32[$351 >> 2] = $122; //@line 32146
     $352 = $ReallocAsyncCtx3 + 272 | 0; //@line 32147
     HEAP32[$352 >> 2] = $124; //@line 32148
     $353 = $ReallocAsyncCtx3 + 276 | 0; //@line 32149
     HEAP32[$353 >> 2] = $126; //@line 32150
     $354 = $ReallocAsyncCtx3 + 280 | 0; //@line 32151
     HEAP32[$354 >> 2] = $128; //@line 32152
     $355 = $ReallocAsyncCtx3 + 284 | 0; //@line 32153
     HEAP32[$355 >> 2] = $130; //@line 32154
     sp = STACKTOP; //@line 32155
     return;
    }
   case 32:
    {
     _mbed_tracef(2, 3844, 4279, $84); //@line 32160
     break L6;
     break;
    }
   case 37:
    {
     _mbed_tracef(2, 3844, 4348, $8); //@line 32165
     break L6;
     break;
    }
   case 41:
    {
     $385 = $$1202$in$i & 65535; //@line 32170
     if (($$1202$i + -1 & 65535) <= 1033) {
      $388 = HEAP32[$236 >> 2] | 0; //@line 32174
      if (!(HEAP32[$388 + 44 >> 2] | 0)) {
       HEAP16[$388 + 2 >> 1] = $$1202$i; //@line 32180
       $393 = $345 + 1 | 0; //@line 32181
       HEAP32[$86 >> 2] = $393; //@line 32182
       $394 = HEAP32[$40 >> 2] | 0; //@line 32183
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 32184
       $395 = FUNCTION_TABLE_ii[$394 & 31]($$1202$i) | 0; //@line 32185
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 32188
        $396 = $ReallocAsyncCtx4 + 4 | 0; //@line 32189
        HEAP32[$396 >> 2] = $4; //@line 32190
        $397 = $ReallocAsyncCtx4 + 8 | 0; //@line 32191
        HEAP32[$397 >> 2] = $8; //@line 32192
        $398 = $ReallocAsyncCtx4 + 12 | 0; //@line 32193
        HEAP32[$398 >> 2] = $233; //@line 32194
        $399 = $ReallocAsyncCtx4 + 16 | 0; //@line 32195
        HEAP32[$399 >> 2] = $6; //@line 32196
        $400 = $ReallocAsyncCtx4 + 20 | 0; //@line 32197
        HEAP32[$400 >> 2] = $10; //@line 32198
        $401 = $ReallocAsyncCtx4 + 24 | 0; //@line 32199
        HEAP32[$401 >> 2] = $12; //@line 32200
        $402 = $ReallocAsyncCtx4 + 28 | 0; //@line 32201
        HEAP32[$402 >> 2] = $18; //@line 32202
        $403 = $ReallocAsyncCtx4 + 32 | 0; //@line 32203
        HEAP32[$403 >> 2] = $232; //@line 32204
        $404 = $ReallocAsyncCtx4 + 36 | 0; //@line 32205
        HEAP32[$404 >> 2] = $22; //@line 32206
        $405 = $ReallocAsyncCtx4 + 40 | 0; //@line 32207
        HEAP32[$405 >> 2] = $24; //@line 32208
        $406 = $ReallocAsyncCtx4 + 44 | 0; //@line 32209
        HEAP32[$406 >> 2] = $AsyncRetVal; //@line 32210
        $407 = $ReallocAsyncCtx4 + 48 | 0; //@line 32211
        HEAP32[$407 >> 2] = $28; //@line 32212
        $408 = $ReallocAsyncCtx4 + 52 | 0; //@line 32213
        HEAP32[$408 >> 2] = $385; //@line 32214
        $409 = $ReallocAsyncCtx4 + 56 | 0; //@line 32215
        HEAP32[$409 >> 2] = $30; //@line 32216
        $410 = $ReallocAsyncCtx4 + 60 | 0; //@line 32217
        HEAP32[$410 >> 2] = $234; //@line 32218
        $411 = $ReallocAsyncCtx4 + 64 | 0; //@line 32219
        HEAP32[$411 >> 2] = $32; //@line 32220
        $412 = $ReallocAsyncCtx4 + 68 | 0; //@line 32221
        HEAP32[$412 >> 2] = $393; //@line 32222
        $413 = $ReallocAsyncCtx4 + 72 | 0; //@line 32223
        HEAP32[$413 >> 2] = $34; //@line 32224
        $414 = $ReallocAsyncCtx4 + 76 | 0; //@line 32225
        HEAP32[$414 >> 2] = $36; //@line 32226
        $415 = $ReallocAsyncCtx4 + 80 | 0; //@line 32227
        HEAP32[$415 >> 2] = $38; //@line 32228
        $416 = $ReallocAsyncCtx4 + 84 | 0; //@line 32229
        HEAP32[$416 >> 2] = $236; //@line 32230
        $417 = $ReallocAsyncCtx4 + 88 | 0; //@line 32231
        HEAP32[$417 >> 2] = $40; //@line 32232
        $418 = $ReallocAsyncCtx4 + 92 | 0; //@line 32233
        HEAP32[$418 >> 2] = $236; //@line 32234
        $419 = $ReallocAsyncCtx4 + 96 | 0; //@line 32235
        HEAP32[$419 >> 2] = $44; //@line 32236
        $420 = $ReallocAsyncCtx4 + 100 | 0; //@line 32237
        HEAP32[$420 >> 2] = $46; //@line 32238
        $421 = $ReallocAsyncCtx4 + 104 | 0; //@line 32239
        HEAP32[$421 >> 2] = $42; //@line 32240
        $422 = $ReallocAsyncCtx4 + 108 | 0; //@line 32241
        HEAP32[$422 >> 2] = $50; //@line 32242
        $423 = $ReallocAsyncCtx4 + 112 | 0; //@line 32243
        HEAP32[$423 >> 2] = $48; //@line 32244
        $424 = $ReallocAsyncCtx4 + 116 | 0; //@line 32245
        HEAP32[$424 >> 2] = $237; //@line 32246
        $425 = $ReallocAsyncCtx4 + 120 | 0; //@line 32247
        HEAP32[$425 >> 2] = $52; //@line 32248
        $426 = $ReallocAsyncCtx4 + 124 | 0; //@line 32249
        HEAP32[$426 >> 2] = $54; //@line 32250
        $427 = $ReallocAsyncCtx4 + 128 | 0; //@line 32251
        HEAP32[$427 >> 2] = $56; //@line 32252
        $428 = $ReallocAsyncCtx4 + 132 | 0; //@line 32253
        HEAP32[$428 >> 2] = $58; //@line 32254
        $429 = $ReallocAsyncCtx4 + 136 | 0; //@line 32255
        HEAP32[$429 >> 2] = $62; //@line 32256
        $430 = $ReallocAsyncCtx4 + 140 | 0; //@line 32257
        HEAP32[$430 >> 2] = $64; //@line 32258
        $431 = $ReallocAsyncCtx4 + 144 | 0; //@line 32259
        HEAP32[$431 >> 2] = $66; //@line 32260
        $432 = $ReallocAsyncCtx4 + 148 | 0; //@line 32261
        HEAP32[$432 >> 2] = $68; //@line 32262
        $433 = $ReallocAsyncCtx4 + 152 | 0; //@line 32263
        HEAP32[$433 >> 2] = $AsyncRetVal; //@line 32264
        $434 = $ReallocAsyncCtx4 + 156 | 0; //@line 32265
        HEAP32[$434 >> 2] = $74; //@line 32266
        $435 = $ReallocAsyncCtx4 + 160 | 0; //@line 32267
        HEAP32[$435 >> 2] = $72; //@line 32268
        $436 = $ReallocAsyncCtx4 + 164 | 0; //@line 32269
        HEAP32[$436 >> 2] = $78; //@line 32270
        $437 = $ReallocAsyncCtx4 + 168 | 0; //@line 32271
        HEAP32[$437 >> 2] = $238; //@line 32272
        $438 = $ReallocAsyncCtx4 + 172 | 0; //@line 32273
        HEAP32[$438 >> 2] = $76; //@line 32274
        $439 = $ReallocAsyncCtx4 + 176 | 0; //@line 32275
        HEAP32[$439 >> 2] = $82; //@line 32276
        $440 = $ReallocAsyncCtx4 + 180 | 0; //@line 32277
        HEAP32[$440 >> 2] = $84; //@line 32278
        $441 = $ReallocAsyncCtx4 + 184 | 0; //@line 32279
        HEAP32[$441 >> 2] = $86; //@line 32280
        $442 = $ReallocAsyncCtx4 + 188 | 0; //@line 32281
        HEAP32[$442 >> 2] = $88; //@line 32282
        $443 = $ReallocAsyncCtx4 + 192 | 0; //@line 32283
        HEAP32[$443 >> 2] = $90; //@line 32284
        $444 = $ReallocAsyncCtx4 + 196 | 0; //@line 32285
        HEAP32[$444 >> 2] = $92; //@line 32286
        $445 = $ReallocAsyncCtx4 + 200 | 0; //@line 32287
        HEAP32[$445 >> 2] = $94; //@line 32288
        $446 = $ReallocAsyncCtx4 + 204 | 0; //@line 32289
        HEAP32[$446 >> 2] = $96; //@line 32290
        $447 = $ReallocAsyncCtx4 + 208 | 0; //@line 32291
        HEAP32[$447 >> 2] = $98; //@line 32292
        $448 = $ReallocAsyncCtx4 + 212 | 0; //@line 32293
        HEAP32[$448 >> 2] = $100; //@line 32294
        $449 = $ReallocAsyncCtx4 + 216 | 0; //@line 32295
        HEAP32[$449 >> 2] = $102; //@line 32296
        $450 = $ReallocAsyncCtx4 + 220 | 0; //@line 32297
        HEAP32[$450 >> 2] = $104; //@line 32298
        $451 = $ReallocAsyncCtx4 + 224 | 0; //@line 32299
        HEAP32[$451 >> 2] = $106; //@line 32300
        $452 = $ReallocAsyncCtx4 + 228 | 0; //@line 32301
        HEAP32[$452 >> 2] = $108; //@line 32302
        $453 = $ReallocAsyncCtx4 + 232 | 0; //@line 32303
        HEAP32[$453 >> 2] = $110; //@line 32304
        $454 = $ReallocAsyncCtx4 + 236 | 0; //@line 32305
        HEAP32[$454 >> 2] = $86; //@line 32306
        $455 = $ReallocAsyncCtx4 + 240 | 0; //@line 32307
        HEAP32[$455 >> 2] = $114; //@line 32308
        $456 = $ReallocAsyncCtx4 + 244 | 0; //@line 32309
        HEAP32[$456 >> 2] = $118; //@line 32310
        $457 = $ReallocAsyncCtx4 + 248 | 0; //@line 32311
        HEAP32[$457 >> 2] = $133; //@line 32312
        $458 = $ReallocAsyncCtx4 + 252 | 0; //@line 32313
        HEAP32[$458 >> 2] = $$0208$i; //@line 32314
        $459 = $ReallocAsyncCtx4 + 256 | 0; //@line 32315
        HEAP32[$459 >> 2] = $122; //@line 32316
        $460 = $ReallocAsyncCtx4 + 260 | 0; //@line 32317
        HEAP32[$460 >> 2] = $124; //@line 32318
        $461 = $ReallocAsyncCtx4 + 264 | 0; //@line 32319
        HEAP32[$461 >> 2] = $126; //@line 32320
        $462 = $ReallocAsyncCtx4 + 268 | 0; //@line 32321
        HEAP32[$462 >> 2] = $128; //@line 32322
        $463 = $ReallocAsyncCtx4 + 272 | 0; //@line 32323
        HEAP32[$463 >> 2] = $130; //@line 32324
        sp = STACKTOP; //@line 32325
        return;
       }
       HEAP32[___async_retval >> 2] = $395; //@line 32329
       ___async_unwind = 0; //@line 32330
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 32331
       $396 = $ReallocAsyncCtx4 + 4 | 0; //@line 32332
       HEAP32[$396 >> 2] = $4; //@line 32333
       $397 = $ReallocAsyncCtx4 + 8 | 0; //@line 32334
       HEAP32[$397 >> 2] = $8; //@line 32335
       $398 = $ReallocAsyncCtx4 + 12 | 0; //@line 32336
       HEAP32[$398 >> 2] = $233; //@line 32337
       $399 = $ReallocAsyncCtx4 + 16 | 0; //@line 32338
       HEAP32[$399 >> 2] = $6; //@line 32339
       $400 = $ReallocAsyncCtx4 + 20 | 0; //@line 32340
       HEAP32[$400 >> 2] = $10; //@line 32341
       $401 = $ReallocAsyncCtx4 + 24 | 0; //@line 32342
       HEAP32[$401 >> 2] = $12; //@line 32343
       $402 = $ReallocAsyncCtx4 + 28 | 0; //@line 32344
       HEAP32[$402 >> 2] = $18; //@line 32345
       $403 = $ReallocAsyncCtx4 + 32 | 0; //@line 32346
       HEAP32[$403 >> 2] = $232; //@line 32347
       $404 = $ReallocAsyncCtx4 + 36 | 0; //@line 32348
       HEAP32[$404 >> 2] = $22; //@line 32349
       $405 = $ReallocAsyncCtx4 + 40 | 0; //@line 32350
       HEAP32[$405 >> 2] = $24; //@line 32351
       $406 = $ReallocAsyncCtx4 + 44 | 0; //@line 32352
       HEAP32[$406 >> 2] = $AsyncRetVal; //@line 32353
       $407 = $ReallocAsyncCtx4 + 48 | 0; //@line 32354
       HEAP32[$407 >> 2] = $28; //@line 32355
       $408 = $ReallocAsyncCtx4 + 52 | 0; //@line 32356
       HEAP32[$408 >> 2] = $385; //@line 32357
       $409 = $ReallocAsyncCtx4 + 56 | 0; //@line 32358
       HEAP32[$409 >> 2] = $30; //@line 32359
       $410 = $ReallocAsyncCtx4 + 60 | 0; //@line 32360
       HEAP32[$410 >> 2] = $234; //@line 32361
       $411 = $ReallocAsyncCtx4 + 64 | 0; //@line 32362
       HEAP32[$411 >> 2] = $32; //@line 32363
       $412 = $ReallocAsyncCtx4 + 68 | 0; //@line 32364
       HEAP32[$412 >> 2] = $393; //@line 32365
       $413 = $ReallocAsyncCtx4 + 72 | 0; //@line 32366
       HEAP32[$413 >> 2] = $34; //@line 32367
       $414 = $ReallocAsyncCtx4 + 76 | 0; //@line 32368
       HEAP32[$414 >> 2] = $36; //@line 32369
       $415 = $ReallocAsyncCtx4 + 80 | 0; //@line 32370
       HEAP32[$415 >> 2] = $38; //@line 32371
       $416 = $ReallocAsyncCtx4 + 84 | 0; //@line 32372
       HEAP32[$416 >> 2] = $236; //@line 32373
       $417 = $ReallocAsyncCtx4 + 88 | 0; //@line 32374
       HEAP32[$417 >> 2] = $40; //@line 32375
       $418 = $ReallocAsyncCtx4 + 92 | 0; //@line 32376
       HEAP32[$418 >> 2] = $236; //@line 32377
       $419 = $ReallocAsyncCtx4 + 96 | 0; //@line 32378
       HEAP32[$419 >> 2] = $44; //@line 32379
       $420 = $ReallocAsyncCtx4 + 100 | 0; //@line 32380
       HEAP32[$420 >> 2] = $46; //@line 32381
       $421 = $ReallocAsyncCtx4 + 104 | 0; //@line 32382
       HEAP32[$421 >> 2] = $42; //@line 32383
       $422 = $ReallocAsyncCtx4 + 108 | 0; //@line 32384
       HEAP32[$422 >> 2] = $50; //@line 32385
       $423 = $ReallocAsyncCtx4 + 112 | 0; //@line 32386
       HEAP32[$423 >> 2] = $48; //@line 32387
       $424 = $ReallocAsyncCtx4 + 116 | 0; //@line 32388
       HEAP32[$424 >> 2] = $237; //@line 32389
       $425 = $ReallocAsyncCtx4 + 120 | 0; //@line 32390
       HEAP32[$425 >> 2] = $52; //@line 32391
       $426 = $ReallocAsyncCtx4 + 124 | 0; //@line 32392
       HEAP32[$426 >> 2] = $54; //@line 32393
       $427 = $ReallocAsyncCtx4 + 128 | 0; //@line 32394
       HEAP32[$427 >> 2] = $56; //@line 32395
       $428 = $ReallocAsyncCtx4 + 132 | 0; //@line 32396
       HEAP32[$428 >> 2] = $58; //@line 32397
       $429 = $ReallocAsyncCtx4 + 136 | 0; //@line 32398
       HEAP32[$429 >> 2] = $62; //@line 32399
       $430 = $ReallocAsyncCtx4 + 140 | 0; //@line 32400
       HEAP32[$430 >> 2] = $64; //@line 32401
       $431 = $ReallocAsyncCtx4 + 144 | 0; //@line 32402
       HEAP32[$431 >> 2] = $66; //@line 32403
       $432 = $ReallocAsyncCtx4 + 148 | 0; //@line 32404
       HEAP32[$432 >> 2] = $68; //@line 32405
       $433 = $ReallocAsyncCtx4 + 152 | 0; //@line 32406
       HEAP32[$433 >> 2] = $AsyncRetVal; //@line 32407
       $434 = $ReallocAsyncCtx4 + 156 | 0; //@line 32408
       HEAP32[$434 >> 2] = $74; //@line 32409
       $435 = $ReallocAsyncCtx4 + 160 | 0; //@line 32410
       HEAP32[$435 >> 2] = $72; //@line 32411
       $436 = $ReallocAsyncCtx4 + 164 | 0; //@line 32412
       HEAP32[$436 >> 2] = $78; //@line 32413
       $437 = $ReallocAsyncCtx4 + 168 | 0; //@line 32414
       HEAP32[$437 >> 2] = $238; //@line 32415
       $438 = $ReallocAsyncCtx4 + 172 | 0; //@line 32416
       HEAP32[$438 >> 2] = $76; //@line 32417
       $439 = $ReallocAsyncCtx4 + 176 | 0; //@line 32418
       HEAP32[$439 >> 2] = $82; //@line 32419
       $440 = $ReallocAsyncCtx4 + 180 | 0; //@line 32420
       HEAP32[$440 >> 2] = $84; //@line 32421
       $441 = $ReallocAsyncCtx4 + 184 | 0; //@line 32422
       HEAP32[$441 >> 2] = $86; //@line 32423
       $442 = $ReallocAsyncCtx4 + 188 | 0; //@line 32424
       HEAP32[$442 >> 2] = $88; //@line 32425
       $443 = $ReallocAsyncCtx4 + 192 | 0; //@line 32426
       HEAP32[$443 >> 2] = $90; //@line 32427
       $444 = $ReallocAsyncCtx4 + 196 | 0; //@line 32428
       HEAP32[$444 >> 2] = $92; //@line 32429
       $445 = $ReallocAsyncCtx4 + 200 | 0; //@line 32430
       HEAP32[$445 >> 2] = $94; //@line 32431
       $446 = $ReallocAsyncCtx4 + 204 | 0; //@line 32432
       HEAP32[$446 >> 2] = $96; //@line 32433
       $447 = $ReallocAsyncCtx4 + 208 | 0; //@line 32434
       HEAP32[$447 >> 2] = $98; //@line 32435
       $448 = $ReallocAsyncCtx4 + 212 | 0; //@line 32436
       HEAP32[$448 >> 2] = $100; //@line 32437
       $449 = $ReallocAsyncCtx4 + 216 | 0; //@line 32438
       HEAP32[$449 >> 2] = $102; //@line 32439
       $450 = $ReallocAsyncCtx4 + 220 | 0; //@line 32440
       HEAP32[$450 >> 2] = $104; //@line 32441
       $451 = $ReallocAsyncCtx4 + 224 | 0; //@line 32442
       HEAP32[$451 >> 2] = $106; //@line 32443
       $452 = $ReallocAsyncCtx4 + 228 | 0; //@line 32444
       HEAP32[$452 >> 2] = $108; //@line 32445
       $453 = $ReallocAsyncCtx4 + 232 | 0; //@line 32446
       HEAP32[$453 >> 2] = $110; //@line 32447
       $454 = $ReallocAsyncCtx4 + 236 | 0; //@line 32448
       HEAP32[$454 >> 2] = $86; //@line 32449
       $455 = $ReallocAsyncCtx4 + 240 | 0; //@line 32450
       HEAP32[$455 >> 2] = $114; //@line 32451
       $456 = $ReallocAsyncCtx4 + 244 | 0; //@line 32452
       HEAP32[$456 >> 2] = $118; //@line 32453
       $457 = $ReallocAsyncCtx4 + 248 | 0; //@line 32454
       HEAP32[$457 >> 2] = $133; //@line 32455
       $458 = $ReallocAsyncCtx4 + 252 | 0; //@line 32456
       HEAP32[$458 >> 2] = $$0208$i; //@line 32457
       $459 = $ReallocAsyncCtx4 + 256 | 0; //@line 32458
       HEAP32[$459 >> 2] = $122; //@line 32459
       $460 = $ReallocAsyncCtx4 + 260 | 0; //@line 32460
       HEAP32[$460 >> 2] = $124; //@line 32461
       $461 = $ReallocAsyncCtx4 + 264 | 0; //@line 32462
       HEAP32[$461 >> 2] = $126; //@line 32463
       $462 = $ReallocAsyncCtx4 + 268 | 0; //@line 32464
       HEAP32[$462 >> 2] = $128; //@line 32465
       $463 = $ReallocAsyncCtx4 + 272 | 0; //@line 32466
       HEAP32[$463 >> 2] = $130; //@line 32467
       sp = STACKTOP; //@line 32468
       return;
      }
     }
     _mbed_tracef(2, 3844, 4410, $50); //@line 32472
     break L6;
     break;
    }
   case 47:
    {
     $465 = HEAP32[$236 >> 2] | 0; //@line 32477
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 32479
     $467 = _sn_coap_parser_options_parse_multiple_options($110, $86, $279, $465 + 48 | 0, $465, 4, $$1202$i) | 0; //@line 32480
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 32483
      $468 = $ReallocAsyncCtx10 + 4 | 0; //@line 32484
      HEAP32[$468 >> 2] = $4; //@line 32485
      $469 = $ReallocAsyncCtx10 + 8 | 0; //@line 32486
      HEAP32[$469 >> 2] = $8; //@line 32487
      $470 = $ReallocAsyncCtx10 + 12 | 0; //@line 32488
      HEAP32[$470 >> 2] = $233; //@line 32489
      $471 = $ReallocAsyncCtx10 + 16 | 0; //@line 32490
      HEAP32[$471 >> 2] = $6; //@line 32491
      $472 = $ReallocAsyncCtx10 + 20 | 0; //@line 32492
      HEAP32[$472 >> 2] = $18; //@line 32493
      $473 = $ReallocAsyncCtx10 + 24 | 0; //@line 32494
      HEAP32[$473 >> 2] = $12; //@line 32495
      $474 = $ReallocAsyncCtx10 + 28 | 0; //@line 32496
      HEAP32[$474 >> 2] = $130; //@line 32497
      $475 = $ReallocAsyncCtx10 + 32 | 0; //@line 32498
      HEAP32[$475 >> 2] = $232; //@line 32499
      $476 = $ReallocAsyncCtx10 + 36 | 0; //@line 32500
      HEAP32[$476 >> 2] = $22; //@line 32501
      $477 = $ReallocAsyncCtx10 + 40 | 0; //@line 32502
      HEAP32[$477 >> 2] = $24; //@line 32503
      $478 = $ReallocAsyncCtx10 + 44 | 0; //@line 32504
      HEAP32[$478 >> 2] = $AsyncRetVal; //@line 32505
      $479 = $ReallocAsyncCtx10 + 48 | 0; //@line 32506
      HEAP32[$479 >> 2] = $28; //@line 32507
      $480 = $ReallocAsyncCtx10 + 52 | 0; //@line 32508
      HEAP32[$480 >> 2] = $30; //@line 32509
      $481 = $ReallocAsyncCtx10 + 56 | 0; //@line 32510
      HEAP32[$481 >> 2] = $234; //@line 32511
      $482 = $ReallocAsyncCtx10 + 60 | 0; //@line 32512
      HEAP32[$482 >> 2] = $32; //@line 32513
      $483 = $ReallocAsyncCtx10 + 64 | 0; //@line 32514
      HEAP32[$483 >> 2] = $34; //@line 32515
      $484 = $ReallocAsyncCtx10 + 68 | 0; //@line 32516
      HEAP32[$484 >> 2] = $36; //@line 32517
      $485 = $ReallocAsyncCtx10 + 72 | 0; //@line 32518
      HEAP32[$485 >> 2] = $38; //@line 32519
      $486 = $ReallocAsyncCtx10 + 76 | 0; //@line 32520
      HEAP32[$486 >> 2] = $236; //@line 32521
      $487 = $ReallocAsyncCtx10 + 80 | 0; //@line 32522
      HEAP32[$487 >> 2] = $40; //@line 32523
      $488 = $ReallocAsyncCtx10 + 84 | 0; //@line 32524
      HEAP32[$488 >> 2] = $236; //@line 32525
      $489 = $ReallocAsyncCtx10 + 88 | 0; //@line 32526
      HEAP32[$489 >> 2] = $44; //@line 32527
      $490 = $ReallocAsyncCtx10 + 92 | 0; //@line 32528
      HEAP32[$490 >> 2] = $46; //@line 32529
      $491 = $ReallocAsyncCtx10 + 96 | 0; //@line 32530
      HEAP32[$491 >> 2] = $42; //@line 32531
      $492 = $ReallocAsyncCtx10 + 100 | 0; //@line 32532
      HEAP32[$492 >> 2] = $50; //@line 32533
      $493 = $ReallocAsyncCtx10 + 104 | 0; //@line 32534
      HEAP32[$493 >> 2] = $48; //@line 32535
      $494 = $ReallocAsyncCtx10 + 108 | 0; //@line 32536
      HEAP32[$494 >> 2] = $237; //@line 32537
      $495 = $ReallocAsyncCtx10 + 112 | 0; //@line 32538
      HEAP32[$495 >> 2] = $52; //@line 32539
      $496 = $ReallocAsyncCtx10 + 116 | 0; //@line 32540
      HEAP32[$496 >> 2] = $54; //@line 32541
      $497 = $ReallocAsyncCtx10 + 120 | 0; //@line 32542
      HEAP32[$497 >> 2] = $56; //@line 32543
      $498 = $ReallocAsyncCtx10 + 124 | 0; //@line 32544
      HEAP32[$498 >> 2] = $58; //@line 32545
      $499 = $ReallocAsyncCtx10 + 128 | 0; //@line 32546
      HEAP32[$499 >> 2] = $62; //@line 32547
      $500 = $ReallocAsyncCtx10 + 132 | 0; //@line 32548
      HEAP32[$500 >> 2] = $64; //@line 32549
      $501 = $ReallocAsyncCtx10 + 136 | 0; //@line 32550
      HEAP32[$501 >> 2] = $66; //@line 32551
      $502 = $ReallocAsyncCtx10 + 140 | 0; //@line 32552
      HEAP32[$502 >> 2] = $68; //@line 32553
      $503 = $ReallocAsyncCtx10 + 144 | 0; //@line 32554
      HEAP32[$503 >> 2] = $AsyncRetVal; //@line 32555
      $504 = $ReallocAsyncCtx10 + 148 | 0; //@line 32556
      HEAP32[$504 >> 2] = $74; //@line 32557
      $505 = $ReallocAsyncCtx10 + 152 | 0; //@line 32558
      HEAP32[$505 >> 2] = $72; //@line 32559
      $506 = $ReallocAsyncCtx10 + 156 | 0; //@line 32560
      HEAP32[$506 >> 2] = $78; //@line 32561
      $507 = $ReallocAsyncCtx10 + 160 | 0; //@line 32562
      HEAP32[$507 >> 2] = $238; //@line 32563
      $508 = $ReallocAsyncCtx10 + 164 | 0; //@line 32564
      HEAP32[$508 >> 2] = $76; //@line 32565
      $509 = $ReallocAsyncCtx10 + 168 | 0; //@line 32566
      HEAP32[$509 >> 2] = $82; //@line 32567
      $510 = $ReallocAsyncCtx10 + 172 | 0; //@line 32568
      HEAP32[$510 >> 2] = $84; //@line 32569
      $511 = $ReallocAsyncCtx10 + 176 | 0; //@line 32570
      HEAP32[$511 >> 2] = $86; //@line 32571
      $512 = $ReallocAsyncCtx10 + 180 | 0; //@line 32572
      HEAP32[$512 >> 2] = $88; //@line 32573
      $513 = $ReallocAsyncCtx10 + 184 | 0; //@line 32574
      HEAP32[$513 >> 2] = $90; //@line 32575
      $514 = $ReallocAsyncCtx10 + 188 | 0; //@line 32576
      HEAP32[$514 >> 2] = $92; //@line 32577
      $515 = $ReallocAsyncCtx10 + 192 | 0; //@line 32578
      HEAP32[$515 >> 2] = $94; //@line 32579
      $516 = $ReallocAsyncCtx10 + 196 | 0; //@line 32580
      HEAP32[$516 >> 2] = $96; //@line 32581
      $517 = $ReallocAsyncCtx10 + 200 | 0; //@line 32582
      HEAP32[$517 >> 2] = $98; //@line 32583
      $518 = $ReallocAsyncCtx10 + 204 | 0; //@line 32584
      HEAP32[$518 >> 2] = $100; //@line 32585
      $519 = $ReallocAsyncCtx10 + 208 | 0; //@line 32586
      HEAP32[$519 >> 2] = $102; //@line 32587
      $520 = $ReallocAsyncCtx10 + 212 | 0; //@line 32588
      HEAP32[$520 >> 2] = $104; //@line 32589
      $521 = $ReallocAsyncCtx10 + 216 | 0; //@line 32590
      HEAP32[$521 >> 2] = $106; //@line 32591
      $522 = $ReallocAsyncCtx10 + 220 | 0; //@line 32592
      HEAP32[$522 >> 2] = $108; //@line 32593
      $523 = $ReallocAsyncCtx10 + 224 | 0; //@line 32594
      HEAP32[$523 >> 2] = $110; //@line 32595
      $524 = $ReallocAsyncCtx10 + 228 | 0; //@line 32596
      HEAP32[$524 >> 2] = $86; //@line 32597
      $525 = $ReallocAsyncCtx10 + 232 | 0; //@line 32598
      HEAP32[$525 >> 2] = $114; //@line 32599
      $526 = $ReallocAsyncCtx10 + 236 | 0; //@line 32600
      HEAP32[$526 >> 2] = $118; //@line 32601
      $527 = $ReallocAsyncCtx10 + 240 | 0; //@line 32602
      HEAP32[$527 >> 2] = $133; //@line 32603
      $528 = $ReallocAsyncCtx10 + 244 | 0; //@line 32604
      HEAP32[$528 >> 2] = $$0208$i; //@line 32605
      $529 = $ReallocAsyncCtx10 + 248 | 0; //@line 32606
      HEAP32[$529 >> 2] = $122; //@line 32607
      $530 = $ReallocAsyncCtx10 + 252 | 0; //@line 32608
      HEAP32[$530 >> 2] = $124; //@line 32609
      $531 = $ReallocAsyncCtx10 + 256 | 0; //@line 32610
      HEAP32[$531 >> 2] = $126; //@line 32611
      $532 = $ReallocAsyncCtx10 + 260 | 0; //@line 32612
      HEAP32[$532 >> 2] = $128; //@line 32613
      $533 = $ReallocAsyncCtx10 + 264 | 0; //@line 32614
      HEAP32[$533 >> 2] = $10; //@line 32615
      sp = STACKTOP; //@line 32616
      return;
     }
     HEAP8[___async_retval >> 0] = $467; //@line 32620
     ___async_unwind = 0; //@line 32621
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 32622
     $468 = $ReallocAsyncCtx10 + 4 | 0; //@line 32623
     HEAP32[$468 >> 2] = $4; //@line 32624
     $469 = $ReallocAsyncCtx10 + 8 | 0; //@line 32625
     HEAP32[$469 >> 2] = $8; //@line 32626
     $470 = $ReallocAsyncCtx10 + 12 | 0; //@line 32627
     HEAP32[$470 >> 2] = $233; //@line 32628
     $471 = $ReallocAsyncCtx10 + 16 | 0; //@line 32629
     HEAP32[$471 >> 2] = $6; //@line 32630
     $472 = $ReallocAsyncCtx10 + 20 | 0; //@line 32631
     HEAP32[$472 >> 2] = $18; //@line 32632
     $473 = $ReallocAsyncCtx10 + 24 | 0; //@line 32633
     HEAP32[$473 >> 2] = $12; //@line 32634
     $474 = $ReallocAsyncCtx10 + 28 | 0; //@line 32635
     HEAP32[$474 >> 2] = $130; //@line 32636
     $475 = $ReallocAsyncCtx10 + 32 | 0; //@line 32637
     HEAP32[$475 >> 2] = $232; //@line 32638
     $476 = $ReallocAsyncCtx10 + 36 | 0; //@line 32639
     HEAP32[$476 >> 2] = $22; //@line 32640
     $477 = $ReallocAsyncCtx10 + 40 | 0; //@line 32641
     HEAP32[$477 >> 2] = $24; //@line 32642
     $478 = $ReallocAsyncCtx10 + 44 | 0; //@line 32643
     HEAP32[$478 >> 2] = $AsyncRetVal; //@line 32644
     $479 = $ReallocAsyncCtx10 + 48 | 0; //@line 32645
     HEAP32[$479 >> 2] = $28; //@line 32646
     $480 = $ReallocAsyncCtx10 + 52 | 0; //@line 32647
     HEAP32[$480 >> 2] = $30; //@line 32648
     $481 = $ReallocAsyncCtx10 + 56 | 0; //@line 32649
     HEAP32[$481 >> 2] = $234; //@line 32650
     $482 = $ReallocAsyncCtx10 + 60 | 0; //@line 32651
     HEAP32[$482 >> 2] = $32; //@line 32652
     $483 = $ReallocAsyncCtx10 + 64 | 0; //@line 32653
     HEAP32[$483 >> 2] = $34; //@line 32654
     $484 = $ReallocAsyncCtx10 + 68 | 0; //@line 32655
     HEAP32[$484 >> 2] = $36; //@line 32656
     $485 = $ReallocAsyncCtx10 + 72 | 0; //@line 32657
     HEAP32[$485 >> 2] = $38; //@line 32658
     $486 = $ReallocAsyncCtx10 + 76 | 0; //@line 32659
     HEAP32[$486 >> 2] = $236; //@line 32660
     $487 = $ReallocAsyncCtx10 + 80 | 0; //@line 32661
     HEAP32[$487 >> 2] = $40; //@line 32662
     $488 = $ReallocAsyncCtx10 + 84 | 0; //@line 32663
     HEAP32[$488 >> 2] = $236; //@line 32664
     $489 = $ReallocAsyncCtx10 + 88 | 0; //@line 32665
     HEAP32[$489 >> 2] = $44; //@line 32666
     $490 = $ReallocAsyncCtx10 + 92 | 0; //@line 32667
     HEAP32[$490 >> 2] = $46; //@line 32668
     $491 = $ReallocAsyncCtx10 + 96 | 0; //@line 32669
     HEAP32[$491 >> 2] = $42; //@line 32670
     $492 = $ReallocAsyncCtx10 + 100 | 0; //@line 32671
     HEAP32[$492 >> 2] = $50; //@line 32672
     $493 = $ReallocAsyncCtx10 + 104 | 0; //@line 32673
     HEAP32[$493 >> 2] = $48; //@line 32674
     $494 = $ReallocAsyncCtx10 + 108 | 0; //@line 32675
     HEAP32[$494 >> 2] = $237; //@line 32676
     $495 = $ReallocAsyncCtx10 + 112 | 0; //@line 32677
     HEAP32[$495 >> 2] = $52; //@line 32678
     $496 = $ReallocAsyncCtx10 + 116 | 0; //@line 32679
     HEAP32[$496 >> 2] = $54; //@line 32680
     $497 = $ReallocAsyncCtx10 + 120 | 0; //@line 32681
     HEAP32[$497 >> 2] = $56; //@line 32682
     $498 = $ReallocAsyncCtx10 + 124 | 0; //@line 32683
     HEAP32[$498 >> 2] = $58; //@line 32684
     $499 = $ReallocAsyncCtx10 + 128 | 0; //@line 32685
     HEAP32[$499 >> 2] = $62; //@line 32686
     $500 = $ReallocAsyncCtx10 + 132 | 0; //@line 32687
     HEAP32[$500 >> 2] = $64; //@line 32688
     $501 = $ReallocAsyncCtx10 + 136 | 0; //@line 32689
     HEAP32[$501 >> 2] = $66; //@line 32690
     $502 = $ReallocAsyncCtx10 + 140 | 0; //@line 32691
     HEAP32[$502 >> 2] = $68; //@line 32692
     $503 = $ReallocAsyncCtx10 + 144 | 0; //@line 32693
     HEAP32[$503 >> 2] = $AsyncRetVal; //@line 32694
     $504 = $ReallocAsyncCtx10 + 148 | 0; //@line 32695
     HEAP32[$504 >> 2] = $74; //@line 32696
     $505 = $ReallocAsyncCtx10 + 152 | 0; //@line 32697
     HEAP32[$505 >> 2] = $72; //@line 32698
     $506 = $ReallocAsyncCtx10 + 156 | 0; //@line 32699
     HEAP32[$506 >> 2] = $78; //@line 32700
     $507 = $ReallocAsyncCtx10 + 160 | 0; //@line 32701
     HEAP32[$507 >> 2] = $238; //@line 32702
     $508 = $ReallocAsyncCtx10 + 164 | 0; //@line 32703
     HEAP32[$508 >> 2] = $76; //@line 32704
     $509 = $ReallocAsyncCtx10 + 168 | 0; //@line 32705
     HEAP32[$509 >> 2] = $82; //@line 32706
     $510 = $ReallocAsyncCtx10 + 172 | 0; //@line 32707
     HEAP32[$510 >> 2] = $84; //@line 32708
     $511 = $ReallocAsyncCtx10 + 176 | 0; //@line 32709
     HEAP32[$511 >> 2] = $86; //@line 32710
     $512 = $ReallocAsyncCtx10 + 180 | 0; //@line 32711
     HEAP32[$512 >> 2] = $88; //@line 32712
     $513 = $ReallocAsyncCtx10 + 184 | 0; //@line 32713
     HEAP32[$513 >> 2] = $90; //@line 32714
     $514 = $ReallocAsyncCtx10 + 188 | 0; //@line 32715
     HEAP32[$514 >> 2] = $92; //@line 32716
     $515 = $ReallocAsyncCtx10 + 192 | 0; //@line 32717
     HEAP32[$515 >> 2] = $94; //@line 32718
     $516 = $ReallocAsyncCtx10 + 196 | 0; //@line 32719
     HEAP32[$516 >> 2] = $96; //@line 32720
     $517 = $ReallocAsyncCtx10 + 200 | 0; //@line 32721
     HEAP32[$517 >> 2] = $98; //@line 32722
     $518 = $ReallocAsyncCtx10 + 204 | 0; //@line 32723
     HEAP32[$518 >> 2] = $100; //@line 32724
     $519 = $ReallocAsyncCtx10 + 208 | 0; //@line 32725
     HEAP32[$519 >> 2] = $102; //@line 32726
     $520 = $ReallocAsyncCtx10 + 212 | 0; //@line 32727
     HEAP32[$520 >> 2] = $104; //@line 32728
     $521 = $ReallocAsyncCtx10 + 216 | 0; //@line 32729
     HEAP32[$521 >> 2] = $106; //@line 32730
     $522 = $ReallocAsyncCtx10 + 220 | 0; //@line 32731
     HEAP32[$522 >> 2] = $108; //@line 32732
     $523 = $ReallocAsyncCtx10 + 224 | 0; //@line 32733
     HEAP32[$523 >> 2] = $110; //@line 32734
     $524 = $ReallocAsyncCtx10 + 228 | 0; //@line 32735
     HEAP32[$524 >> 2] = $86; //@line 32736
     $525 = $ReallocAsyncCtx10 + 232 | 0; //@line 32737
     HEAP32[$525 >> 2] = $114; //@line 32738
     $526 = $ReallocAsyncCtx10 + 236 | 0; //@line 32739
     HEAP32[$526 >> 2] = $118; //@line 32740
     $527 = $ReallocAsyncCtx10 + 240 | 0; //@line 32741
     HEAP32[$527 >> 2] = $133; //@line 32742
     $528 = $ReallocAsyncCtx10 + 244 | 0; //@line 32743
     HEAP32[$528 >> 2] = $$0208$i; //@line 32744
     $529 = $ReallocAsyncCtx10 + 248 | 0; //@line 32745
     HEAP32[$529 >> 2] = $122; //@line 32746
     $530 = $ReallocAsyncCtx10 + 252 | 0; //@line 32747
     HEAP32[$530 >> 2] = $124; //@line 32748
     $531 = $ReallocAsyncCtx10 + 256 | 0; //@line 32749
     HEAP32[$531 >> 2] = $126; //@line 32750
     $532 = $ReallocAsyncCtx10 + 260 | 0; //@line 32751
     HEAP32[$532 >> 2] = $128; //@line 32752
     $533 = $ReallocAsyncCtx10 + 264 | 0; //@line 32753
     HEAP32[$533 >> 2] = $10; //@line 32754
     sp = STACKTOP; //@line 32755
     return;
    }
   case 50:
    {
     $535 = $$1202$in$i & 65535; //@line 32760
     if (($$1202$i + -1 & 65535) <= 254) {
      $538 = HEAP32[$236 >> 2] | 0; //@line 32764
      if (!(HEAP32[$538 + 52 >> 2] | 0)) {
       HEAP16[$538 + 4 >> 1] = $$1202$i; //@line 32770
       $543 = $345 + 1 | 0; //@line 32771
       HEAP32[$86 >> 2] = $543; //@line 32772
       $544 = HEAP32[$40 >> 2] | 0; //@line 32773
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 32774
       $545 = FUNCTION_TABLE_ii[$544 & 31]($$1202$i) | 0; //@line 32775
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 32778
        $546 = $ReallocAsyncCtx5 + 4 | 0; //@line 32779
        HEAP32[$546 >> 2] = $4; //@line 32780
        $547 = $ReallocAsyncCtx5 + 8 | 0; //@line 32781
        HEAP32[$547 >> 2] = $8; //@line 32782
        $548 = $ReallocAsyncCtx5 + 12 | 0; //@line 32783
        HEAP32[$548 >> 2] = $535; //@line 32784
        $549 = $ReallocAsyncCtx5 + 16 | 0; //@line 32785
        HEAP32[$549 >> 2] = $233; //@line 32786
        $550 = $ReallocAsyncCtx5 + 20 | 0; //@line 32787
        HEAP32[$550 >> 2] = $6; //@line 32788
        $551 = $ReallocAsyncCtx5 + 24 | 0; //@line 32789
        HEAP32[$551 >> 2] = $10; //@line 32790
        $552 = $ReallocAsyncCtx5 + 28 | 0; //@line 32791
        HEAP32[$552 >> 2] = $12; //@line 32792
        $553 = $ReallocAsyncCtx5 + 32 | 0; //@line 32793
        HEAP32[$553 >> 2] = $18; //@line 32794
        $554 = $ReallocAsyncCtx5 + 36 | 0; //@line 32795
        HEAP32[$554 >> 2] = $232; //@line 32796
        $555 = $ReallocAsyncCtx5 + 40 | 0; //@line 32797
        HEAP32[$555 >> 2] = $543; //@line 32798
        $556 = $ReallocAsyncCtx5 + 44 | 0; //@line 32799
        HEAP32[$556 >> 2] = $22; //@line 32800
        $557 = $ReallocAsyncCtx5 + 48 | 0; //@line 32801
        HEAP32[$557 >> 2] = $24; //@line 32802
        $558 = $ReallocAsyncCtx5 + 52 | 0; //@line 32803
        HEAP32[$558 >> 2] = $AsyncRetVal; //@line 32804
        $559 = $ReallocAsyncCtx5 + 56 | 0; //@line 32805
        HEAP32[$559 >> 2] = $28; //@line 32806
        $560 = $ReallocAsyncCtx5 + 60 | 0; //@line 32807
        HEAP32[$560 >> 2] = $30; //@line 32808
        $561 = $ReallocAsyncCtx5 + 64 | 0; //@line 32809
        HEAP32[$561 >> 2] = $234; //@line 32810
        $562 = $ReallocAsyncCtx5 + 68 | 0; //@line 32811
        HEAP32[$562 >> 2] = $32; //@line 32812
        $563 = $ReallocAsyncCtx5 + 72 | 0; //@line 32813
        HEAP32[$563 >> 2] = $34; //@line 32814
        $564 = $ReallocAsyncCtx5 + 76 | 0; //@line 32815
        HEAP32[$564 >> 2] = $36; //@line 32816
        $565 = $ReallocAsyncCtx5 + 80 | 0; //@line 32817
        HEAP32[$565 >> 2] = $38; //@line 32818
        $566 = $ReallocAsyncCtx5 + 84 | 0; //@line 32819
        HEAP32[$566 >> 2] = $236; //@line 32820
        $567 = $ReallocAsyncCtx5 + 88 | 0; //@line 32821
        HEAP32[$567 >> 2] = $40; //@line 32822
        $568 = $ReallocAsyncCtx5 + 92 | 0; //@line 32823
        HEAP32[$568 >> 2] = $236; //@line 32824
        $569 = $ReallocAsyncCtx5 + 96 | 0; //@line 32825
        HEAP32[$569 >> 2] = $44; //@line 32826
        $570 = $ReallocAsyncCtx5 + 100 | 0; //@line 32827
        HEAP32[$570 >> 2] = $46; //@line 32828
        $571 = $ReallocAsyncCtx5 + 104 | 0; //@line 32829
        HEAP32[$571 >> 2] = $42; //@line 32830
        $572 = $ReallocAsyncCtx5 + 108 | 0; //@line 32831
        HEAP32[$572 >> 2] = $50; //@line 32832
        $573 = $ReallocAsyncCtx5 + 112 | 0; //@line 32833
        HEAP32[$573 >> 2] = $48; //@line 32834
        $574 = $ReallocAsyncCtx5 + 116 | 0; //@line 32835
        HEAP32[$574 >> 2] = $237; //@line 32836
        $575 = $ReallocAsyncCtx5 + 120 | 0; //@line 32837
        HEAP32[$575 >> 2] = $52; //@line 32838
        $576 = $ReallocAsyncCtx5 + 124 | 0; //@line 32839
        HEAP32[$576 >> 2] = $54; //@line 32840
        $577 = $ReallocAsyncCtx5 + 128 | 0; //@line 32841
        HEAP32[$577 >> 2] = $56; //@line 32842
        $578 = $ReallocAsyncCtx5 + 132 | 0; //@line 32843
        HEAP32[$578 >> 2] = $58; //@line 32844
        $579 = $ReallocAsyncCtx5 + 136 | 0; //@line 32845
        HEAP32[$579 >> 2] = $62; //@line 32846
        $580 = $ReallocAsyncCtx5 + 140 | 0; //@line 32847
        HEAP32[$580 >> 2] = $64; //@line 32848
        $581 = $ReallocAsyncCtx5 + 144 | 0; //@line 32849
        HEAP32[$581 >> 2] = $66; //@line 32850
        $582 = $ReallocAsyncCtx5 + 148 | 0; //@line 32851
        HEAP32[$582 >> 2] = $68; //@line 32852
        $583 = $ReallocAsyncCtx5 + 152 | 0; //@line 32853
        HEAP32[$583 >> 2] = $AsyncRetVal; //@line 32854
        $584 = $ReallocAsyncCtx5 + 156 | 0; //@line 32855
        HEAP32[$584 >> 2] = $74; //@line 32856
        $585 = $ReallocAsyncCtx5 + 160 | 0; //@line 32857
        HEAP32[$585 >> 2] = $72; //@line 32858
        $586 = $ReallocAsyncCtx5 + 164 | 0; //@line 32859
        HEAP32[$586 >> 2] = $78; //@line 32860
        $587 = $ReallocAsyncCtx5 + 168 | 0; //@line 32861
        HEAP32[$587 >> 2] = $238; //@line 32862
        $588 = $ReallocAsyncCtx5 + 172 | 0; //@line 32863
        HEAP32[$588 >> 2] = $76; //@line 32864
        $589 = $ReallocAsyncCtx5 + 176 | 0; //@line 32865
        HEAP32[$589 >> 2] = $82; //@line 32866
        $590 = $ReallocAsyncCtx5 + 180 | 0; //@line 32867
        HEAP32[$590 >> 2] = $84; //@line 32868
        $591 = $ReallocAsyncCtx5 + 184 | 0; //@line 32869
        HEAP32[$591 >> 2] = $86; //@line 32870
        $592 = $ReallocAsyncCtx5 + 188 | 0; //@line 32871
        HEAP32[$592 >> 2] = $88; //@line 32872
        $593 = $ReallocAsyncCtx5 + 192 | 0; //@line 32873
        HEAP32[$593 >> 2] = $90; //@line 32874
        $594 = $ReallocAsyncCtx5 + 196 | 0; //@line 32875
        HEAP32[$594 >> 2] = $92; //@line 32876
        $595 = $ReallocAsyncCtx5 + 200 | 0; //@line 32877
        HEAP32[$595 >> 2] = $94; //@line 32878
        $596 = $ReallocAsyncCtx5 + 204 | 0; //@line 32879
        HEAP32[$596 >> 2] = $96; //@line 32880
        $597 = $ReallocAsyncCtx5 + 208 | 0; //@line 32881
        HEAP32[$597 >> 2] = $98; //@line 32882
        $598 = $ReallocAsyncCtx5 + 212 | 0; //@line 32883
        HEAP32[$598 >> 2] = $100; //@line 32884
        $599 = $ReallocAsyncCtx5 + 216 | 0; //@line 32885
        HEAP32[$599 >> 2] = $102; //@line 32886
        $600 = $ReallocAsyncCtx5 + 220 | 0; //@line 32887
        HEAP32[$600 >> 2] = $104; //@line 32888
        $601 = $ReallocAsyncCtx5 + 224 | 0; //@line 32889
        HEAP32[$601 >> 2] = $106; //@line 32890
        $602 = $ReallocAsyncCtx5 + 228 | 0; //@line 32891
        HEAP32[$602 >> 2] = $108; //@line 32892
        $603 = $ReallocAsyncCtx5 + 232 | 0; //@line 32893
        HEAP32[$603 >> 2] = $110; //@line 32894
        $604 = $ReallocAsyncCtx5 + 236 | 0; //@line 32895
        HEAP32[$604 >> 2] = $86; //@line 32896
        $605 = $ReallocAsyncCtx5 + 240 | 0; //@line 32897
        HEAP32[$605 >> 2] = $114; //@line 32898
        $606 = $ReallocAsyncCtx5 + 244 | 0; //@line 32899
        HEAP32[$606 >> 2] = $118; //@line 32900
        $607 = $ReallocAsyncCtx5 + 248 | 0; //@line 32901
        HEAP32[$607 >> 2] = $133; //@line 32902
        $608 = $ReallocAsyncCtx5 + 252 | 0; //@line 32903
        HEAP32[$608 >> 2] = $$0208$i; //@line 32904
        $609 = $ReallocAsyncCtx5 + 256 | 0; //@line 32905
        HEAP32[$609 >> 2] = $122; //@line 32906
        $610 = $ReallocAsyncCtx5 + 260 | 0; //@line 32907
        HEAP32[$610 >> 2] = $124; //@line 32908
        $611 = $ReallocAsyncCtx5 + 264 | 0; //@line 32909
        HEAP32[$611 >> 2] = $126; //@line 32910
        $612 = $ReallocAsyncCtx5 + 268 | 0; //@line 32911
        HEAP32[$612 >> 2] = $128; //@line 32912
        $613 = $ReallocAsyncCtx5 + 272 | 0; //@line 32913
        HEAP32[$613 >> 2] = $130; //@line 32914
        sp = STACKTOP; //@line 32915
        return;
       }
       HEAP32[___async_retval >> 2] = $545; //@line 32919
       ___async_unwind = 0; //@line 32920
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 32921
       $546 = $ReallocAsyncCtx5 + 4 | 0; //@line 32922
       HEAP32[$546 >> 2] = $4; //@line 32923
       $547 = $ReallocAsyncCtx5 + 8 | 0; //@line 32924
       HEAP32[$547 >> 2] = $8; //@line 32925
       $548 = $ReallocAsyncCtx5 + 12 | 0; //@line 32926
       HEAP32[$548 >> 2] = $535; //@line 32927
       $549 = $ReallocAsyncCtx5 + 16 | 0; //@line 32928
       HEAP32[$549 >> 2] = $233; //@line 32929
       $550 = $ReallocAsyncCtx5 + 20 | 0; //@line 32930
       HEAP32[$550 >> 2] = $6; //@line 32931
       $551 = $ReallocAsyncCtx5 + 24 | 0; //@line 32932
       HEAP32[$551 >> 2] = $10; //@line 32933
       $552 = $ReallocAsyncCtx5 + 28 | 0; //@line 32934
       HEAP32[$552 >> 2] = $12; //@line 32935
       $553 = $ReallocAsyncCtx5 + 32 | 0; //@line 32936
       HEAP32[$553 >> 2] = $18; //@line 32937
       $554 = $ReallocAsyncCtx5 + 36 | 0; //@line 32938
       HEAP32[$554 >> 2] = $232; //@line 32939
       $555 = $ReallocAsyncCtx5 + 40 | 0; //@line 32940
       HEAP32[$555 >> 2] = $543; //@line 32941
       $556 = $ReallocAsyncCtx5 + 44 | 0; //@line 32942
       HEAP32[$556 >> 2] = $22; //@line 32943
       $557 = $ReallocAsyncCtx5 + 48 | 0; //@line 32944
       HEAP32[$557 >> 2] = $24; //@line 32945
       $558 = $ReallocAsyncCtx5 + 52 | 0; //@line 32946
       HEAP32[$558 >> 2] = $AsyncRetVal; //@line 32947
       $559 = $ReallocAsyncCtx5 + 56 | 0; //@line 32948
       HEAP32[$559 >> 2] = $28; //@line 32949
       $560 = $ReallocAsyncCtx5 + 60 | 0; //@line 32950
       HEAP32[$560 >> 2] = $30; //@line 32951
       $561 = $ReallocAsyncCtx5 + 64 | 0; //@line 32952
       HEAP32[$561 >> 2] = $234; //@line 32953
       $562 = $ReallocAsyncCtx5 + 68 | 0; //@line 32954
       HEAP32[$562 >> 2] = $32; //@line 32955
       $563 = $ReallocAsyncCtx5 + 72 | 0; //@line 32956
       HEAP32[$563 >> 2] = $34; //@line 32957
       $564 = $ReallocAsyncCtx5 + 76 | 0; //@line 32958
       HEAP32[$564 >> 2] = $36; //@line 32959
       $565 = $ReallocAsyncCtx5 + 80 | 0; //@line 32960
       HEAP32[$565 >> 2] = $38; //@line 32961
       $566 = $ReallocAsyncCtx5 + 84 | 0; //@line 32962
       HEAP32[$566 >> 2] = $236; //@line 32963
       $567 = $ReallocAsyncCtx5 + 88 | 0; //@line 32964
       HEAP32[$567 >> 2] = $40; //@line 32965
       $568 = $ReallocAsyncCtx5 + 92 | 0; //@line 32966
       HEAP32[$568 >> 2] = $236; //@line 32967
       $569 = $ReallocAsyncCtx5 + 96 | 0; //@line 32968
       HEAP32[$569 >> 2] = $44; //@line 32969
       $570 = $ReallocAsyncCtx5 + 100 | 0; //@line 32970
       HEAP32[$570 >> 2] = $46; //@line 32971
       $571 = $ReallocAsyncCtx5 + 104 | 0; //@line 32972
       HEAP32[$571 >> 2] = $42; //@line 32973
       $572 = $ReallocAsyncCtx5 + 108 | 0; //@line 32974
       HEAP32[$572 >> 2] = $50; //@line 32975
       $573 = $ReallocAsyncCtx5 + 112 | 0; //@line 32976
       HEAP32[$573 >> 2] = $48; //@line 32977
       $574 = $ReallocAsyncCtx5 + 116 | 0; //@line 32978
       HEAP32[$574 >> 2] = $237; //@line 32979
       $575 = $ReallocAsyncCtx5 + 120 | 0; //@line 32980
       HEAP32[$575 >> 2] = $52; //@line 32981
       $576 = $ReallocAsyncCtx5 + 124 | 0; //@line 32982
       HEAP32[$576 >> 2] = $54; //@line 32983
       $577 = $ReallocAsyncCtx5 + 128 | 0; //@line 32984
       HEAP32[$577 >> 2] = $56; //@line 32985
       $578 = $ReallocAsyncCtx5 + 132 | 0; //@line 32986
       HEAP32[$578 >> 2] = $58; //@line 32987
       $579 = $ReallocAsyncCtx5 + 136 | 0; //@line 32988
       HEAP32[$579 >> 2] = $62; //@line 32989
       $580 = $ReallocAsyncCtx5 + 140 | 0; //@line 32990
       HEAP32[$580 >> 2] = $64; //@line 32991
       $581 = $ReallocAsyncCtx5 + 144 | 0; //@line 32992
       HEAP32[$581 >> 2] = $66; //@line 32993
       $582 = $ReallocAsyncCtx5 + 148 | 0; //@line 32994
       HEAP32[$582 >> 2] = $68; //@line 32995
       $583 = $ReallocAsyncCtx5 + 152 | 0; //@line 32996
       HEAP32[$583 >> 2] = $AsyncRetVal; //@line 32997
       $584 = $ReallocAsyncCtx5 + 156 | 0; //@line 32998
       HEAP32[$584 >> 2] = $74; //@line 32999
       $585 = $ReallocAsyncCtx5 + 160 | 0; //@line 33000
       HEAP32[$585 >> 2] = $72; //@line 33001
       $586 = $ReallocAsyncCtx5 + 164 | 0; //@line 33002
       HEAP32[$586 >> 2] = $78; //@line 33003
       $587 = $ReallocAsyncCtx5 + 168 | 0; //@line 33004
       HEAP32[$587 >> 2] = $238; //@line 33005
       $588 = $ReallocAsyncCtx5 + 172 | 0; //@line 33006
       HEAP32[$588 >> 2] = $76; //@line 33007
       $589 = $ReallocAsyncCtx5 + 176 | 0; //@line 33008
       HEAP32[$589 >> 2] = $82; //@line 33009
       $590 = $ReallocAsyncCtx5 + 180 | 0; //@line 33010
       HEAP32[$590 >> 2] = $84; //@line 33011
       $591 = $ReallocAsyncCtx5 + 184 | 0; //@line 33012
       HEAP32[$591 >> 2] = $86; //@line 33013
       $592 = $ReallocAsyncCtx5 + 188 | 0; //@line 33014
       HEAP32[$592 >> 2] = $88; //@line 33015
       $593 = $ReallocAsyncCtx5 + 192 | 0; //@line 33016
       HEAP32[$593 >> 2] = $90; //@line 33017
       $594 = $ReallocAsyncCtx5 + 196 | 0; //@line 33018
       HEAP32[$594 >> 2] = $92; //@line 33019
       $595 = $ReallocAsyncCtx5 + 200 | 0; //@line 33020
       HEAP32[$595 >> 2] = $94; //@line 33021
       $596 = $ReallocAsyncCtx5 + 204 | 0; //@line 33022
       HEAP32[$596 >> 2] = $96; //@line 33023
       $597 = $ReallocAsyncCtx5 + 208 | 0; //@line 33024
       HEAP32[$597 >> 2] = $98; //@line 33025
       $598 = $ReallocAsyncCtx5 + 212 | 0; //@line 33026
       HEAP32[$598 >> 2] = $100; //@line 33027
       $599 = $ReallocAsyncCtx5 + 216 | 0; //@line 33028
       HEAP32[$599 >> 2] = $102; //@line 33029
       $600 = $ReallocAsyncCtx5 + 220 | 0; //@line 33030
       HEAP32[$600 >> 2] = $104; //@line 33031
       $601 = $ReallocAsyncCtx5 + 224 | 0; //@line 33032
       HEAP32[$601 >> 2] = $106; //@line 33033
       $602 = $ReallocAsyncCtx5 + 228 | 0; //@line 33034
       HEAP32[$602 >> 2] = $108; //@line 33035
       $603 = $ReallocAsyncCtx5 + 232 | 0; //@line 33036
       HEAP32[$603 >> 2] = $110; //@line 33037
       $604 = $ReallocAsyncCtx5 + 236 | 0; //@line 33038
       HEAP32[$604 >> 2] = $86; //@line 33039
       $605 = $ReallocAsyncCtx5 + 240 | 0; //@line 33040
       HEAP32[$605 >> 2] = $114; //@line 33041
       $606 = $ReallocAsyncCtx5 + 244 | 0; //@line 33042
       HEAP32[$606 >> 2] = $118; //@line 33043
       $607 = $ReallocAsyncCtx5 + 248 | 0; //@line 33044
       HEAP32[$607 >> 2] = $133; //@line 33045
       $608 = $ReallocAsyncCtx5 + 252 | 0; //@line 33046
       HEAP32[$608 >> 2] = $$0208$i; //@line 33047
       $609 = $ReallocAsyncCtx5 + 256 | 0; //@line 33048
       HEAP32[$609 >> 2] = $122; //@line 33049
       $610 = $ReallocAsyncCtx5 + 260 | 0; //@line 33050
       HEAP32[$610 >> 2] = $124; //@line 33051
       $611 = $ReallocAsyncCtx5 + 264 | 0; //@line 33052
       HEAP32[$611 >> 2] = $126; //@line 33053
       $612 = $ReallocAsyncCtx5 + 268 | 0; //@line 33054
       HEAP32[$612 >> 2] = $128; //@line 33055
       $613 = $ReallocAsyncCtx5 + 272 | 0; //@line 33056
       HEAP32[$613 >> 2] = $130; //@line 33057
       sp = STACKTOP; //@line 33058
       return;
      }
     }
     _mbed_tracef(2, 3844, 4605, $54); //@line 33062
     break L6;
     break;
    }
   case 56:
    {
     $615 = HEAP32[$236 >> 2] | 0; //@line 33067
     $616 = $615 + 56 | 0; //@line 33068
     if (HEAP32[$616 >> 2] | 0) {
      _mbed_tracef(2, 3844, 4739, $32); //@line 33072
      break L6;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 33076
     $620 = _sn_coap_parser_options_parse_multiple_options($110, $86, $279, $616, $615 + 6 | 0, 8, $$1202$i) | 0; //@line 33077
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 33080
      $621 = $ReallocAsyncCtx9 + 4 | 0; //@line 33081
      HEAP32[$621 >> 2] = $4; //@line 33082
      $622 = $ReallocAsyncCtx9 + 8 | 0; //@line 33083
      HEAP32[$622 >> 2] = $8; //@line 33084
      $623 = $ReallocAsyncCtx9 + 12 | 0; //@line 33085
      HEAP32[$623 >> 2] = $233; //@line 33086
      $624 = $ReallocAsyncCtx9 + 16 | 0; //@line 33087
      HEAP32[$624 >> 2] = $6; //@line 33088
      $625 = $ReallocAsyncCtx9 + 20 | 0; //@line 33089
      HEAP32[$625 >> 2] = $18; //@line 33090
      $626 = $ReallocAsyncCtx9 + 24 | 0; //@line 33091
      HEAP32[$626 >> 2] = $12; //@line 33092
      $627 = $ReallocAsyncCtx9 + 28 | 0; //@line 33093
      HEAP32[$627 >> 2] = $130; //@line 33094
      $628 = $ReallocAsyncCtx9 + 32 | 0; //@line 33095
      HEAP32[$628 >> 2] = $232; //@line 33096
      $629 = $ReallocAsyncCtx9 + 36 | 0; //@line 33097
      HEAP32[$629 >> 2] = $22; //@line 33098
      $630 = $ReallocAsyncCtx9 + 40 | 0; //@line 33099
      HEAP32[$630 >> 2] = $24; //@line 33100
      $631 = $ReallocAsyncCtx9 + 44 | 0; //@line 33101
      HEAP32[$631 >> 2] = $AsyncRetVal; //@line 33102
      $632 = $ReallocAsyncCtx9 + 48 | 0; //@line 33103
      HEAP32[$632 >> 2] = $28; //@line 33104
      $633 = $ReallocAsyncCtx9 + 52 | 0; //@line 33105
      HEAP32[$633 >> 2] = $30; //@line 33106
      $634 = $ReallocAsyncCtx9 + 56 | 0; //@line 33107
      HEAP32[$634 >> 2] = $234; //@line 33108
      $635 = $ReallocAsyncCtx9 + 60 | 0; //@line 33109
      HEAP32[$635 >> 2] = $32; //@line 33110
      $636 = $ReallocAsyncCtx9 + 64 | 0; //@line 33111
      HEAP32[$636 >> 2] = $34; //@line 33112
      $637 = $ReallocAsyncCtx9 + 68 | 0; //@line 33113
      HEAP32[$637 >> 2] = $36; //@line 33114
      $638 = $ReallocAsyncCtx9 + 72 | 0; //@line 33115
      HEAP32[$638 >> 2] = $38; //@line 33116
      $639 = $ReallocAsyncCtx9 + 76 | 0; //@line 33117
      HEAP32[$639 >> 2] = $236; //@line 33118
      $640 = $ReallocAsyncCtx9 + 80 | 0; //@line 33119
      HEAP32[$640 >> 2] = $40; //@line 33120
      $641 = $ReallocAsyncCtx9 + 84 | 0; //@line 33121
      HEAP32[$641 >> 2] = $236; //@line 33122
      $642 = $ReallocAsyncCtx9 + 88 | 0; //@line 33123
      HEAP32[$642 >> 2] = $44; //@line 33124
      $643 = $ReallocAsyncCtx9 + 92 | 0; //@line 33125
      HEAP32[$643 >> 2] = $46; //@line 33126
      $644 = $ReallocAsyncCtx9 + 96 | 0; //@line 33127
      HEAP32[$644 >> 2] = $42; //@line 33128
      $645 = $ReallocAsyncCtx9 + 100 | 0; //@line 33129
      HEAP32[$645 >> 2] = $50; //@line 33130
      $646 = $ReallocAsyncCtx9 + 104 | 0; //@line 33131
      HEAP32[$646 >> 2] = $48; //@line 33132
      $647 = $ReallocAsyncCtx9 + 108 | 0; //@line 33133
      HEAP32[$647 >> 2] = $237; //@line 33134
      $648 = $ReallocAsyncCtx9 + 112 | 0; //@line 33135
      HEAP32[$648 >> 2] = $52; //@line 33136
      $649 = $ReallocAsyncCtx9 + 116 | 0; //@line 33137
      HEAP32[$649 >> 2] = $54; //@line 33138
      $650 = $ReallocAsyncCtx9 + 120 | 0; //@line 33139
      HEAP32[$650 >> 2] = $56; //@line 33140
      $651 = $ReallocAsyncCtx9 + 124 | 0; //@line 33141
      HEAP32[$651 >> 2] = $58; //@line 33142
      $652 = $ReallocAsyncCtx9 + 128 | 0; //@line 33143
      HEAP32[$652 >> 2] = $62; //@line 33144
      $653 = $ReallocAsyncCtx9 + 132 | 0; //@line 33145
      HEAP32[$653 >> 2] = $64; //@line 33146
      $654 = $ReallocAsyncCtx9 + 136 | 0; //@line 33147
      HEAP32[$654 >> 2] = $66; //@line 33148
      $655 = $ReallocAsyncCtx9 + 140 | 0; //@line 33149
      HEAP32[$655 >> 2] = $68; //@line 33150
      $656 = $ReallocAsyncCtx9 + 144 | 0; //@line 33151
      HEAP32[$656 >> 2] = $AsyncRetVal; //@line 33152
      $657 = $ReallocAsyncCtx9 + 148 | 0; //@line 33153
      HEAP32[$657 >> 2] = $74; //@line 33154
      $658 = $ReallocAsyncCtx9 + 152 | 0; //@line 33155
      HEAP32[$658 >> 2] = $72; //@line 33156
      $659 = $ReallocAsyncCtx9 + 156 | 0; //@line 33157
      HEAP32[$659 >> 2] = $78; //@line 33158
      $660 = $ReallocAsyncCtx9 + 160 | 0; //@line 33159
      HEAP32[$660 >> 2] = $238; //@line 33160
      $661 = $ReallocAsyncCtx9 + 164 | 0; //@line 33161
      HEAP32[$661 >> 2] = $76; //@line 33162
      $662 = $ReallocAsyncCtx9 + 168 | 0; //@line 33163
      HEAP32[$662 >> 2] = $82; //@line 33164
      $663 = $ReallocAsyncCtx9 + 172 | 0; //@line 33165
      HEAP32[$663 >> 2] = $84; //@line 33166
      $664 = $ReallocAsyncCtx9 + 176 | 0; //@line 33167
      HEAP32[$664 >> 2] = $86; //@line 33168
      $665 = $ReallocAsyncCtx9 + 180 | 0; //@line 33169
      HEAP32[$665 >> 2] = $88; //@line 33170
      $666 = $ReallocAsyncCtx9 + 184 | 0; //@line 33171
      HEAP32[$666 >> 2] = $90; //@line 33172
      $667 = $ReallocAsyncCtx9 + 188 | 0; //@line 33173
      HEAP32[$667 >> 2] = $92; //@line 33174
      $668 = $ReallocAsyncCtx9 + 192 | 0; //@line 33175
      HEAP32[$668 >> 2] = $94; //@line 33176
      $669 = $ReallocAsyncCtx9 + 196 | 0; //@line 33177
      HEAP32[$669 >> 2] = $96; //@line 33178
      $670 = $ReallocAsyncCtx9 + 200 | 0; //@line 33179
      HEAP32[$670 >> 2] = $98; //@line 33180
      $671 = $ReallocAsyncCtx9 + 204 | 0; //@line 33181
      HEAP32[$671 >> 2] = $100; //@line 33182
      $672 = $ReallocAsyncCtx9 + 208 | 0; //@line 33183
      HEAP32[$672 >> 2] = $102; //@line 33184
      $673 = $ReallocAsyncCtx9 + 212 | 0; //@line 33185
      HEAP32[$673 >> 2] = $104; //@line 33186
      $674 = $ReallocAsyncCtx9 + 216 | 0; //@line 33187
      HEAP32[$674 >> 2] = $106; //@line 33188
      $675 = $ReallocAsyncCtx9 + 220 | 0; //@line 33189
      HEAP32[$675 >> 2] = $108; //@line 33190
      $676 = $ReallocAsyncCtx9 + 224 | 0; //@line 33191
      HEAP32[$676 >> 2] = $110; //@line 33192
      $677 = $ReallocAsyncCtx9 + 228 | 0; //@line 33193
      HEAP32[$677 >> 2] = $86; //@line 33194
      $678 = $ReallocAsyncCtx9 + 232 | 0; //@line 33195
      HEAP32[$678 >> 2] = $114; //@line 33196
      $679 = $ReallocAsyncCtx9 + 236 | 0; //@line 33197
      HEAP32[$679 >> 2] = $118; //@line 33198
      $680 = $ReallocAsyncCtx9 + 240 | 0; //@line 33199
      HEAP32[$680 >> 2] = $133; //@line 33200
      $681 = $ReallocAsyncCtx9 + 244 | 0; //@line 33201
      HEAP32[$681 >> 2] = $$0208$i; //@line 33202
      $682 = $ReallocAsyncCtx9 + 248 | 0; //@line 33203
      HEAP32[$682 >> 2] = $122; //@line 33204
      $683 = $ReallocAsyncCtx9 + 252 | 0; //@line 33205
      HEAP32[$683 >> 2] = $124; //@line 33206
      $684 = $ReallocAsyncCtx9 + 256 | 0; //@line 33207
      HEAP32[$684 >> 2] = $126; //@line 33208
      $685 = $ReallocAsyncCtx9 + 260 | 0; //@line 33209
      HEAP32[$685 >> 2] = $128; //@line 33210
      $686 = $ReallocAsyncCtx9 + 264 | 0; //@line 33211
      HEAP32[$686 >> 2] = $10; //@line 33212
      sp = STACKTOP; //@line 33213
      return;
     }
     HEAP8[___async_retval >> 0] = $620; //@line 33217
     ___async_unwind = 0; //@line 33218
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 33219
     $621 = $ReallocAsyncCtx9 + 4 | 0; //@line 33220
     HEAP32[$621 >> 2] = $4; //@line 33221
     $622 = $ReallocAsyncCtx9 + 8 | 0; //@line 33222
     HEAP32[$622 >> 2] = $8; //@line 33223
     $623 = $ReallocAsyncCtx9 + 12 | 0; //@line 33224
     HEAP32[$623 >> 2] = $233; //@line 33225
     $624 = $ReallocAsyncCtx9 + 16 | 0; //@line 33226
     HEAP32[$624 >> 2] = $6; //@line 33227
     $625 = $ReallocAsyncCtx9 + 20 | 0; //@line 33228
     HEAP32[$625 >> 2] = $18; //@line 33229
     $626 = $ReallocAsyncCtx9 + 24 | 0; //@line 33230
     HEAP32[$626 >> 2] = $12; //@line 33231
     $627 = $ReallocAsyncCtx9 + 28 | 0; //@line 33232
     HEAP32[$627 >> 2] = $130; //@line 33233
     $628 = $ReallocAsyncCtx9 + 32 | 0; //@line 33234
     HEAP32[$628 >> 2] = $232; //@line 33235
     $629 = $ReallocAsyncCtx9 + 36 | 0; //@line 33236
     HEAP32[$629 >> 2] = $22; //@line 33237
     $630 = $ReallocAsyncCtx9 + 40 | 0; //@line 33238
     HEAP32[$630 >> 2] = $24; //@line 33239
     $631 = $ReallocAsyncCtx9 + 44 | 0; //@line 33240
     HEAP32[$631 >> 2] = $AsyncRetVal; //@line 33241
     $632 = $ReallocAsyncCtx9 + 48 | 0; //@line 33242
     HEAP32[$632 >> 2] = $28; //@line 33243
     $633 = $ReallocAsyncCtx9 + 52 | 0; //@line 33244
     HEAP32[$633 >> 2] = $30; //@line 33245
     $634 = $ReallocAsyncCtx9 + 56 | 0; //@line 33246
     HEAP32[$634 >> 2] = $234; //@line 33247
     $635 = $ReallocAsyncCtx9 + 60 | 0; //@line 33248
     HEAP32[$635 >> 2] = $32; //@line 33249
     $636 = $ReallocAsyncCtx9 + 64 | 0; //@line 33250
     HEAP32[$636 >> 2] = $34; //@line 33251
     $637 = $ReallocAsyncCtx9 + 68 | 0; //@line 33252
     HEAP32[$637 >> 2] = $36; //@line 33253
     $638 = $ReallocAsyncCtx9 + 72 | 0; //@line 33254
     HEAP32[$638 >> 2] = $38; //@line 33255
     $639 = $ReallocAsyncCtx9 + 76 | 0; //@line 33256
     HEAP32[$639 >> 2] = $236; //@line 33257
     $640 = $ReallocAsyncCtx9 + 80 | 0; //@line 33258
     HEAP32[$640 >> 2] = $40; //@line 33259
     $641 = $ReallocAsyncCtx9 + 84 | 0; //@line 33260
     HEAP32[$641 >> 2] = $236; //@line 33261
     $642 = $ReallocAsyncCtx9 + 88 | 0; //@line 33262
     HEAP32[$642 >> 2] = $44; //@line 33263
     $643 = $ReallocAsyncCtx9 + 92 | 0; //@line 33264
     HEAP32[$643 >> 2] = $46; //@line 33265
     $644 = $ReallocAsyncCtx9 + 96 | 0; //@line 33266
     HEAP32[$644 >> 2] = $42; //@line 33267
     $645 = $ReallocAsyncCtx9 + 100 | 0; //@line 33268
     HEAP32[$645 >> 2] = $50; //@line 33269
     $646 = $ReallocAsyncCtx9 + 104 | 0; //@line 33270
     HEAP32[$646 >> 2] = $48; //@line 33271
     $647 = $ReallocAsyncCtx9 + 108 | 0; //@line 33272
     HEAP32[$647 >> 2] = $237; //@line 33273
     $648 = $ReallocAsyncCtx9 + 112 | 0; //@line 33274
     HEAP32[$648 >> 2] = $52; //@line 33275
     $649 = $ReallocAsyncCtx9 + 116 | 0; //@line 33276
     HEAP32[$649 >> 2] = $54; //@line 33277
     $650 = $ReallocAsyncCtx9 + 120 | 0; //@line 33278
     HEAP32[$650 >> 2] = $56; //@line 33279
     $651 = $ReallocAsyncCtx9 + 124 | 0; //@line 33280
     HEAP32[$651 >> 2] = $58; //@line 33281
     $652 = $ReallocAsyncCtx9 + 128 | 0; //@line 33282
     HEAP32[$652 >> 2] = $62; //@line 33283
     $653 = $ReallocAsyncCtx9 + 132 | 0; //@line 33284
     HEAP32[$653 >> 2] = $64; //@line 33285
     $654 = $ReallocAsyncCtx9 + 136 | 0; //@line 33286
     HEAP32[$654 >> 2] = $66; //@line 33287
     $655 = $ReallocAsyncCtx9 + 140 | 0; //@line 33288
     HEAP32[$655 >> 2] = $68; //@line 33289
     $656 = $ReallocAsyncCtx9 + 144 | 0; //@line 33290
     HEAP32[$656 >> 2] = $AsyncRetVal; //@line 33291
     $657 = $ReallocAsyncCtx9 + 148 | 0; //@line 33292
     HEAP32[$657 >> 2] = $74; //@line 33293
     $658 = $ReallocAsyncCtx9 + 152 | 0; //@line 33294
     HEAP32[$658 >> 2] = $72; //@line 33295
     $659 = $ReallocAsyncCtx9 + 156 | 0; //@line 33296
     HEAP32[$659 >> 2] = $78; //@line 33297
     $660 = $ReallocAsyncCtx9 + 160 | 0; //@line 33298
     HEAP32[$660 >> 2] = $238; //@line 33299
     $661 = $ReallocAsyncCtx9 + 164 | 0; //@line 33300
     HEAP32[$661 >> 2] = $76; //@line 33301
     $662 = $ReallocAsyncCtx9 + 168 | 0; //@line 33302
     HEAP32[$662 >> 2] = $82; //@line 33303
     $663 = $ReallocAsyncCtx9 + 172 | 0; //@line 33304
     HEAP32[$663 >> 2] = $84; //@line 33305
     $664 = $ReallocAsyncCtx9 + 176 | 0; //@line 33306
     HEAP32[$664 >> 2] = $86; //@line 33307
     $665 = $ReallocAsyncCtx9 + 180 | 0; //@line 33308
     HEAP32[$665 >> 2] = $88; //@line 33309
     $666 = $ReallocAsyncCtx9 + 184 | 0; //@line 33310
     HEAP32[$666 >> 2] = $90; //@line 33311
     $667 = $ReallocAsyncCtx9 + 188 | 0; //@line 33312
     HEAP32[$667 >> 2] = $92; //@line 33313
     $668 = $ReallocAsyncCtx9 + 192 | 0; //@line 33314
     HEAP32[$668 >> 2] = $94; //@line 33315
     $669 = $ReallocAsyncCtx9 + 196 | 0; //@line 33316
     HEAP32[$669 >> 2] = $96; //@line 33317
     $670 = $ReallocAsyncCtx9 + 200 | 0; //@line 33318
     HEAP32[$670 >> 2] = $98; //@line 33319
     $671 = $ReallocAsyncCtx9 + 204 | 0; //@line 33320
     HEAP32[$671 >> 2] = $100; //@line 33321
     $672 = $ReallocAsyncCtx9 + 208 | 0; //@line 33322
     HEAP32[$672 >> 2] = $102; //@line 33323
     $673 = $ReallocAsyncCtx9 + 212 | 0; //@line 33324
     HEAP32[$673 >> 2] = $104; //@line 33325
     $674 = $ReallocAsyncCtx9 + 216 | 0; //@line 33326
     HEAP32[$674 >> 2] = $106; //@line 33327
     $675 = $ReallocAsyncCtx9 + 220 | 0; //@line 33328
     HEAP32[$675 >> 2] = $108; //@line 33329
     $676 = $ReallocAsyncCtx9 + 224 | 0; //@line 33330
     HEAP32[$676 >> 2] = $110; //@line 33331
     $677 = $ReallocAsyncCtx9 + 228 | 0; //@line 33332
     HEAP32[$677 >> 2] = $86; //@line 33333
     $678 = $ReallocAsyncCtx9 + 232 | 0; //@line 33334
     HEAP32[$678 >> 2] = $114; //@line 33335
     $679 = $ReallocAsyncCtx9 + 236 | 0; //@line 33336
     HEAP32[$679 >> 2] = $118; //@line 33337
     $680 = $ReallocAsyncCtx9 + 240 | 0; //@line 33338
     HEAP32[$680 >> 2] = $133; //@line 33339
     $681 = $ReallocAsyncCtx9 + 244 | 0; //@line 33340
     HEAP32[$681 >> 2] = $$0208$i; //@line 33341
     $682 = $ReallocAsyncCtx9 + 248 | 0; //@line 33342
     HEAP32[$682 >> 2] = $122; //@line 33343
     $683 = $ReallocAsyncCtx9 + 252 | 0; //@line 33344
     HEAP32[$683 >> 2] = $124; //@line 33345
     $684 = $ReallocAsyncCtx9 + 256 | 0; //@line 33346
     HEAP32[$684 >> 2] = $126; //@line 33347
     $685 = $ReallocAsyncCtx9 + 260 | 0; //@line 33348
     HEAP32[$685 >> 2] = $128; //@line 33349
     $686 = $ReallocAsyncCtx9 + 264 | 0; //@line 33350
     HEAP32[$686 >> 2] = $10; //@line 33351
     sp = STACKTOP; //@line 33352
     return;
    }
   case 63:
    {
     _mbed_tracef(2, 3844, 4872, $124); //@line 33357
     break L6;
     break;
    }
   case 67:
    {
     $704 = HEAP32[$236 >> 2] | 0; //@line 33362
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 33365
     $707 = _sn_coap_parser_options_parse_multiple_options($110, $86, $279, $704 + 60 | 0, $704 + 8 | 0, 20, $$1202$i) | 0; //@line 33366
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 33369
      $708 = $ReallocAsyncCtx8 + 4 | 0; //@line 33370
      HEAP32[$708 >> 2] = $4; //@line 33371
      $709 = $ReallocAsyncCtx8 + 8 | 0; //@line 33372
      HEAP32[$709 >> 2] = $8; //@line 33373
      $710 = $ReallocAsyncCtx8 + 12 | 0; //@line 33374
      HEAP32[$710 >> 2] = $233; //@line 33375
      $711 = $ReallocAsyncCtx8 + 16 | 0; //@line 33376
      HEAP32[$711 >> 2] = $6; //@line 33377
      $712 = $ReallocAsyncCtx8 + 20 | 0; //@line 33378
      HEAP32[$712 >> 2] = $18; //@line 33379
      $713 = $ReallocAsyncCtx8 + 24 | 0; //@line 33380
      HEAP32[$713 >> 2] = $12; //@line 33381
      $714 = $ReallocAsyncCtx8 + 28 | 0; //@line 33382
      HEAP32[$714 >> 2] = $130; //@line 33383
      $715 = $ReallocAsyncCtx8 + 32 | 0; //@line 33384
      HEAP32[$715 >> 2] = $232; //@line 33385
      $716 = $ReallocAsyncCtx8 + 36 | 0; //@line 33386
      HEAP32[$716 >> 2] = $22; //@line 33387
      $717 = $ReallocAsyncCtx8 + 40 | 0; //@line 33388
      HEAP32[$717 >> 2] = $24; //@line 33389
      $718 = $ReallocAsyncCtx8 + 44 | 0; //@line 33390
      HEAP32[$718 >> 2] = $AsyncRetVal; //@line 33391
      $719 = $ReallocAsyncCtx8 + 48 | 0; //@line 33392
      HEAP32[$719 >> 2] = $28; //@line 33393
      $720 = $ReallocAsyncCtx8 + 52 | 0; //@line 33394
      HEAP32[$720 >> 2] = $30; //@line 33395
      $721 = $ReallocAsyncCtx8 + 56 | 0; //@line 33396
      HEAP32[$721 >> 2] = $234; //@line 33397
      $722 = $ReallocAsyncCtx8 + 60 | 0; //@line 33398
      HEAP32[$722 >> 2] = $32; //@line 33399
      $723 = $ReallocAsyncCtx8 + 64 | 0; //@line 33400
      HEAP32[$723 >> 2] = $34; //@line 33401
      $724 = $ReallocAsyncCtx8 + 68 | 0; //@line 33402
      HEAP32[$724 >> 2] = $36; //@line 33403
      $725 = $ReallocAsyncCtx8 + 72 | 0; //@line 33404
      HEAP32[$725 >> 2] = $38; //@line 33405
      $726 = $ReallocAsyncCtx8 + 76 | 0; //@line 33406
      HEAP32[$726 >> 2] = $236; //@line 33407
      $727 = $ReallocAsyncCtx8 + 80 | 0; //@line 33408
      HEAP32[$727 >> 2] = $40; //@line 33409
      $728 = $ReallocAsyncCtx8 + 84 | 0; //@line 33410
      HEAP32[$728 >> 2] = $236; //@line 33411
      $729 = $ReallocAsyncCtx8 + 88 | 0; //@line 33412
      HEAP32[$729 >> 2] = $44; //@line 33413
      $730 = $ReallocAsyncCtx8 + 92 | 0; //@line 33414
      HEAP32[$730 >> 2] = $46; //@line 33415
      $731 = $ReallocAsyncCtx8 + 96 | 0; //@line 33416
      HEAP32[$731 >> 2] = $42; //@line 33417
      $732 = $ReallocAsyncCtx8 + 100 | 0; //@line 33418
      HEAP32[$732 >> 2] = $50; //@line 33419
      $733 = $ReallocAsyncCtx8 + 104 | 0; //@line 33420
      HEAP32[$733 >> 2] = $48; //@line 33421
      $734 = $ReallocAsyncCtx8 + 108 | 0; //@line 33422
      HEAP32[$734 >> 2] = $237; //@line 33423
      $735 = $ReallocAsyncCtx8 + 112 | 0; //@line 33424
      HEAP32[$735 >> 2] = $52; //@line 33425
      $736 = $ReallocAsyncCtx8 + 116 | 0; //@line 33426
      HEAP32[$736 >> 2] = $54; //@line 33427
      $737 = $ReallocAsyncCtx8 + 120 | 0; //@line 33428
      HEAP32[$737 >> 2] = $56; //@line 33429
      $738 = $ReallocAsyncCtx8 + 124 | 0; //@line 33430
      HEAP32[$738 >> 2] = $58; //@line 33431
      $739 = $ReallocAsyncCtx8 + 128 | 0; //@line 33432
      HEAP32[$739 >> 2] = $62; //@line 33433
      $740 = $ReallocAsyncCtx8 + 132 | 0; //@line 33434
      HEAP32[$740 >> 2] = $64; //@line 33435
      $741 = $ReallocAsyncCtx8 + 136 | 0; //@line 33436
      HEAP32[$741 >> 2] = $66; //@line 33437
      $742 = $ReallocAsyncCtx8 + 140 | 0; //@line 33438
      HEAP32[$742 >> 2] = $68; //@line 33439
      $743 = $ReallocAsyncCtx8 + 144 | 0; //@line 33440
      HEAP32[$743 >> 2] = $AsyncRetVal; //@line 33441
      $744 = $ReallocAsyncCtx8 + 148 | 0; //@line 33442
      HEAP32[$744 >> 2] = $74; //@line 33443
      $745 = $ReallocAsyncCtx8 + 152 | 0; //@line 33444
      HEAP32[$745 >> 2] = $72; //@line 33445
      $746 = $ReallocAsyncCtx8 + 156 | 0; //@line 33446
      HEAP32[$746 >> 2] = $78; //@line 33447
      $747 = $ReallocAsyncCtx8 + 160 | 0; //@line 33448
      HEAP32[$747 >> 2] = $238; //@line 33449
      $748 = $ReallocAsyncCtx8 + 164 | 0; //@line 33450
      HEAP32[$748 >> 2] = $76; //@line 33451
      $749 = $ReallocAsyncCtx8 + 168 | 0; //@line 33452
      HEAP32[$749 >> 2] = $82; //@line 33453
      $750 = $ReallocAsyncCtx8 + 172 | 0; //@line 33454
      HEAP32[$750 >> 2] = $84; //@line 33455
      $751 = $ReallocAsyncCtx8 + 176 | 0; //@line 33456
      HEAP32[$751 >> 2] = $86; //@line 33457
      $752 = $ReallocAsyncCtx8 + 180 | 0; //@line 33458
      HEAP32[$752 >> 2] = $88; //@line 33459
      $753 = $ReallocAsyncCtx8 + 184 | 0; //@line 33460
      HEAP32[$753 >> 2] = $90; //@line 33461
      $754 = $ReallocAsyncCtx8 + 188 | 0; //@line 33462
      HEAP32[$754 >> 2] = $92; //@line 33463
      $755 = $ReallocAsyncCtx8 + 192 | 0; //@line 33464
      HEAP32[$755 >> 2] = $94; //@line 33465
      $756 = $ReallocAsyncCtx8 + 196 | 0; //@line 33466
      HEAP32[$756 >> 2] = $96; //@line 33467
      $757 = $ReallocAsyncCtx8 + 200 | 0; //@line 33468
      HEAP32[$757 >> 2] = $98; //@line 33469
      $758 = $ReallocAsyncCtx8 + 204 | 0; //@line 33470
      HEAP32[$758 >> 2] = $100; //@line 33471
      $759 = $ReallocAsyncCtx8 + 208 | 0; //@line 33472
      HEAP32[$759 >> 2] = $102; //@line 33473
      $760 = $ReallocAsyncCtx8 + 212 | 0; //@line 33474
      HEAP32[$760 >> 2] = $104; //@line 33475
      $761 = $ReallocAsyncCtx8 + 216 | 0; //@line 33476
      HEAP32[$761 >> 2] = $106; //@line 33477
      $762 = $ReallocAsyncCtx8 + 220 | 0; //@line 33478
      HEAP32[$762 >> 2] = $108; //@line 33479
      $763 = $ReallocAsyncCtx8 + 224 | 0; //@line 33480
      HEAP32[$763 >> 2] = $110; //@line 33481
      $764 = $ReallocAsyncCtx8 + 228 | 0; //@line 33482
      HEAP32[$764 >> 2] = $86; //@line 33483
      $765 = $ReallocAsyncCtx8 + 232 | 0; //@line 33484
      HEAP32[$765 >> 2] = $114; //@line 33485
      $766 = $ReallocAsyncCtx8 + 236 | 0; //@line 33486
      HEAP32[$766 >> 2] = $118; //@line 33487
      $767 = $ReallocAsyncCtx8 + 240 | 0; //@line 33488
      HEAP32[$767 >> 2] = $133; //@line 33489
      $768 = $ReallocAsyncCtx8 + 244 | 0; //@line 33490
      HEAP32[$768 >> 2] = $$0208$i; //@line 33491
      $769 = $ReallocAsyncCtx8 + 248 | 0; //@line 33492
      HEAP32[$769 >> 2] = $122; //@line 33493
      $770 = $ReallocAsyncCtx8 + 252 | 0; //@line 33494
      HEAP32[$770 >> 2] = $124; //@line 33495
      $771 = $ReallocAsyncCtx8 + 256 | 0; //@line 33496
      HEAP32[$771 >> 2] = $126; //@line 33497
      $772 = $ReallocAsyncCtx8 + 260 | 0; //@line 33498
      HEAP32[$772 >> 2] = $128; //@line 33499
      $773 = $ReallocAsyncCtx8 + 264 | 0; //@line 33500
      HEAP32[$773 >> 2] = $10; //@line 33501
      sp = STACKTOP; //@line 33502
      return;
     }
     HEAP8[___async_retval >> 0] = $707; //@line 33506
     ___async_unwind = 0; //@line 33507
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 33508
     $708 = $ReallocAsyncCtx8 + 4 | 0; //@line 33509
     HEAP32[$708 >> 2] = $4; //@line 33510
     $709 = $ReallocAsyncCtx8 + 8 | 0; //@line 33511
     HEAP32[$709 >> 2] = $8; //@line 33512
     $710 = $ReallocAsyncCtx8 + 12 | 0; //@line 33513
     HEAP32[$710 >> 2] = $233; //@line 33514
     $711 = $ReallocAsyncCtx8 + 16 | 0; //@line 33515
     HEAP32[$711 >> 2] = $6; //@line 33516
     $712 = $ReallocAsyncCtx8 + 20 | 0; //@line 33517
     HEAP32[$712 >> 2] = $18; //@line 33518
     $713 = $ReallocAsyncCtx8 + 24 | 0; //@line 33519
     HEAP32[$713 >> 2] = $12; //@line 33520
     $714 = $ReallocAsyncCtx8 + 28 | 0; //@line 33521
     HEAP32[$714 >> 2] = $130; //@line 33522
     $715 = $ReallocAsyncCtx8 + 32 | 0; //@line 33523
     HEAP32[$715 >> 2] = $232; //@line 33524
     $716 = $ReallocAsyncCtx8 + 36 | 0; //@line 33525
     HEAP32[$716 >> 2] = $22; //@line 33526
     $717 = $ReallocAsyncCtx8 + 40 | 0; //@line 33527
     HEAP32[$717 >> 2] = $24; //@line 33528
     $718 = $ReallocAsyncCtx8 + 44 | 0; //@line 33529
     HEAP32[$718 >> 2] = $AsyncRetVal; //@line 33530
     $719 = $ReallocAsyncCtx8 + 48 | 0; //@line 33531
     HEAP32[$719 >> 2] = $28; //@line 33532
     $720 = $ReallocAsyncCtx8 + 52 | 0; //@line 33533
     HEAP32[$720 >> 2] = $30; //@line 33534
     $721 = $ReallocAsyncCtx8 + 56 | 0; //@line 33535
     HEAP32[$721 >> 2] = $234; //@line 33536
     $722 = $ReallocAsyncCtx8 + 60 | 0; //@line 33537
     HEAP32[$722 >> 2] = $32; //@line 33538
     $723 = $ReallocAsyncCtx8 + 64 | 0; //@line 33539
     HEAP32[$723 >> 2] = $34; //@line 33540
     $724 = $ReallocAsyncCtx8 + 68 | 0; //@line 33541
     HEAP32[$724 >> 2] = $36; //@line 33542
     $725 = $ReallocAsyncCtx8 + 72 | 0; //@line 33543
     HEAP32[$725 >> 2] = $38; //@line 33544
     $726 = $ReallocAsyncCtx8 + 76 | 0; //@line 33545
     HEAP32[$726 >> 2] = $236; //@line 33546
     $727 = $ReallocAsyncCtx8 + 80 | 0; //@line 33547
     HEAP32[$727 >> 2] = $40; //@line 33548
     $728 = $ReallocAsyncCtx8 + 84 | 0; //@line 33549
     HEAP32[$728 >> 2] = $236; //@line 33550
     $729 = $ReallocAsyncCtx8 + 88 | 0; //@line 33551
     HEAP32[$729 >> 2] = $44; //@line 33552
     $730 = $ReallocAsyncCtx8 + 92 | 0; //@line 33553
     HEAP32[$730 >> 2] = $46; //@line 33554
     $731 = $ReallocAsyncCtx8 + 96 | 0; //@line 33555
     HEAP32[$731 >> 2] = $42; //@line 33556
     $732 = $ReallocAsyncCtx8 + 100 | 0; //@line 33557
     HEAP32[$732 >> 2] = $50; //@line 33558
     $733 = $ReallocAsyncCtx8 + 104 | 0; //@line 33559
     HEAP32[$733 >> 2] = $48; //@line 33560
     $734 = $ReallocAsyncCtx8 + 108 | 0; //@line 33561
     HEAP32[$734 >> 2] = $237; //@line 33562
     $735 = $ReallocAsyncCtx8 + 112 | 0; //@line 33563
     HEAP32[$735 >> 2] = $52; //@line 33564
     $736 = $ReallocAsyncCtx8 + 116 | 0; //@line 33565
     HEAP32[$736 >> 2] = $54; //@line 33566
     $737 = $ReallocAsyncCtx8 + 120 | 0; //@line 33567
     HEAP32[$737 >> 2] = $56; //@line 33568
     $738 = $ReallocAsyncCtx8 + 124 | 0; //@line 33569
     HEAP32[$738 >> 2] = $58; //@line 33570
     $739 = $ReallocAsyncCtx8 + 128 | 0; //@line 33571
     HEAP32[$739 >> 2] = $62; //@line 33572
     $740 = $ReallocAsyncCtx8 + 132 | 0; //@line 33573
     HEAP32[$740 >> 2] = $64; //@line 33574
     $741 = $ReallocAsyncCtx8 + 136 | 0; //@line 33575
     HEAP32[$741 >> 2] = $66; //@line 33576
     $742 = $ReallocAsyncCtx8 + 140 | 0; //@line 33577
     HEAP32[$742 >> 2] = $68; //@line 33578
     $743 = $ReallocAsyncCtx8 + 144 | 0; //@line 33579
     HEAP32[$743 >> 2] = $AsyncRetVal; //@line 33580
     $744 = $ReallocAsyncCtx8 + 148 | 0; //@line 33581
     HEAP32[$744 >> 2] = $74; //@line 33582
     $745 = $ReallocAsyncCtx8 + 152 | 0; //@line 33583
     HEAP32[$745 >> 2] = $72; //@line 33584
     $746 = $ReallocAsyncCtx8 + 156 | 0; //@line 33585
     HEAP32[$746 >> 2] = $78; //@line 33586
     $747 = $ReallocAsyncCtx8 + 160 | 0; //@line 33587
     HEAP32[$747 >> 2] = $238; //@line 33588
     $748 = $ReallocAsyncCtx8 + 164 | 0; //@line 33589
     HEAP32[$748 >> 2] = $76; //@line 33590
     $749 = $ReallocAsyncCtx8 + 168 | 0; //@line 33591
     HEAP32[$749 >> 2] = $82; //@line 33592
     $750 = $ReallocAsyncCtx8 + 172 | 0; //@line 33593
     HEAP32[$750 >> 2] = $84; //@line 33594
     $751 = $ReallocAsyncCtx8 + 176 | 0; //@line 33595
     HEAP32[$751 >> 2] = $86; //@line 33596
     $752 = $ReallocAsyncCtx8 + 180 | 0; //@line 33597
     HEAP32[$752 >> 2] = $88; //@line 33598
     $753 = $ReallocAsyncCtx8 + 184 | 0; //@line 33599
     HEAP32[$753 >> 2] = $90; //@line 33600
     $754 = $ReallocAsyncCtx8 + 188 | 0; //@line 33601
     HEAP32[$754 >> 2] = $92; //@line 33602
     $755 = $ReallocAsyncCtx8 + 192 | 0; //@line 33603
     HEAP32[$755 >> 2] = $94; //@line 33604
     $756 = $ReallocAsyncCtx8 + 196 | 0; //@line 33605
     HEAP32[$756 >> 2] = $96; //@line 33606
     $757 = $ReallocAsyncCtx8 + 200 | 0; //@line 33607
     HEAP32[$757 >> 2] = $98; //@line 33608
     $758 = $ReallocAsyncCtx8 + 204 | 0; //@line 33609
     HEAP32[$758 >> 2] = $100; //@line 33610
     $759 = $ReallocAsyncCtx8 + 208 | 0; //@line 33611
     HEAP32[$759 >> 2] = $102; //@line 33612
     $760 = $ReallocAsyncCtx8 + 212 | 0; //@line 33613
     HEAP32[$760 >> 2] = $104; //@line 33614
     $761 = $ReallocAsyncCtx8 + 216 | 0; //@line 33615
     HEAP32[$761 >> 2] = $106; //@line 33616
     $762 = $ReallocAsyncCtx8 + 220 | 0; //@line 33617
     HEAP32[$762 >> 2] = $108; //@line 33618
     $763 = $ReallocAsyncCtx8 + 224 | 0; //@line 33619
     HEAP32[$763 >> 2] = $110; //@line 33620
     $764 = $ReallocAsyncCtx8 + 228 | 0; //@line 33621
     HEAP32[$764 >> 2] = $86; //@line 33622
     $765 = $ReallocAsyncCtx8 + 232 | 0; //@line 33623
     HEAP32[$765 >> 2] = $114; //@line 33624
     $766 = $ReallocAsyncCtx8 + 236 | 0; //@line 33625
     HEAP32[$766 >> 2] = $118; //@line 33626
     $767 = $ReallocAsyncCtx8 + 240 | 0; //@line 33627
     HEAP32[$767 >> 2] = $133; //@line 33628
     $768 = $ReallocAsyncCtx8 + 244 | 0; //@line 33629
     HEAP32[$768 >> 2] = $$0208$i; //@line 33630
     $769 = $ReallocAsyncCtx8 + 248 | 0; //@line 33631
     HEAP32[$769 >> 2] = $122; //@line 33632
     $770 = $ReallocAsyncCtx8 + 252 | 0; //@line 33633
     HEAP32[$770 >> 2] = $124; //@line 33634
     $771 = $ReallocAsyncCtx8 + 256 | 0; //@line 33635
     HEAP32[$771 >> 2] = $126; //@line 33636
     $772 = $ReallocAsyncCtx8 + 260 | 0; //@line 33637
     HEAP32[$772 >> 2] = $128; //@line 33638
     $773 = $ReallocAsyncCtx8 + 264 | 0; //@line 33639
     HEAP32[$773 >> 2] = $10; //@line 33640
     sp = STACKTOP; //@line 33641
     return;
    }
   case 70:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 33646
     $775 = _sn_coap_parser_options_parse_multiple_options($110, $86, $279, $237, $238, 11, $$1202$i) | 0; //@line 33647
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 33650
      $776 = $ReallocAsyncCtx7 + 4 | 0; //@line 33651
      HEAP32[$776 >> 2] = $4; //@line 33652
      $777 = $ReallocAsyncCtx7 + 8 | 0; //@line 33653
      HEAP32[$777 >> 2] = $8; //@line 33654
      $778 = $ReallocAsyncCtx7 + 12 | 0; //@line 33655
      HEAP32[$778 >> 2] = $233; //@line 33656
      $779 = $ReallocAsyncCtx7 + 16 | 0; //@line 33657
      HEAP32[$779 >> 2] = $6; //@line 33658
      $780 = $ReallocAsyncCtx7 + 20 | 0; //@line 33659
      HEAP32[$780 >> 2] = $18; //@line 33660
      $781 = $ReallocAsyncCtx7 + 24 | 0; //@line 33661
      HEAP32[$781 >> 2] = $12; //@line 33662
      $782 = $ReallocAsyncCtx7 + 28 | 0; //@line 33663
      HEAP32[$782 >> 2] = $130; //@line 33664
      $783 = $ReallocAsyncCtx7 + 32 | 0; //@line 33665
      HEAP32[$783 >> 2] = $232; //@line 33666
      $784 = $ReallocAsyncCtx7 + 36 | 0; //@line 33667
      HEAP32[$784 >> 2] = $22; //@line 33668
      $785 = $ReallocAsyncCtx7 + 40 | 0; //@line 33669
      HEAP32[$785 >> 2] = $24; //@line 33670
      $786 = $ReallocAsyncCtx7 + 44 | 0; //@line 33671
      HEAP32[$786 >> 2] = $AsyncRetVal; //@line 33672
      $787 = $ReallocAsyncCtx7 + 48 | 0; //@line 33673
      HEAP32[$787 >> 2] = $28; //@line 33674
      $788 = $ReallocAsyncCtx7 + 52 | 0; //@line 33675
      HEAP32[$788 >> 2] = $30; //@line 33676
      $789 = $ReallocAsyncCtx7 + 56 | 0; //@line 33677
      HEAP32[$789 >> 2] = $234; //@line 33678
      $790 = $ReallocAsyncCtx7 + 60 | 0; //@line 33679
      HEAP32[$790 >> 2] = $32; //@line 33680
      $791 = $ReallocAsyncCtx7 + 64 | 0; //@line 33681
      HEAP32[$791 >> 2] = $34; //@line 33682
      $792 = $ReallocAsyncCtx7 + 68 | 0; //@line 33683
      HEAP32[$792 >> 2] = $36; //@line 33684
      $793 = $ReallocAsyncCtx7 + 72 | 0; //@line 33685
      HEAP32[$793 >> 2] = $38; //@line 33686
      $794 = $ReallocAsyncCtx7 + 76 | 0; //@line 33687
      HEAP32[$794 >> 2] = $236; //@line 33688
      $795 = $ReallocAsyncCtx7 + 80 | 0; //@line 33689
      HEAP32[$795 >> 2] = $40; //@line 33690
      $796 = $ReallocAsyncCtx7 + 84 | 0; //@line 33691
      HEAP32[$796 >> 2] = $236; //@line 33692
      $797 = $ReallocAsyncCtx7 + 88 | 0; //@line 33693
      HEAP32[$797 >> 2] = $44; //@line 33694
      $798 = $ReallocAsyncCtx7 + 92 | 0; //@line 33695
      HEAP32[$798 >> 2] = $46; //@line 33696
      $799 = $ReallocAsyncCtx7 + 96 | 0; //@line 33697
      HEAP32[$799 >> 2] = $42; //@line 33698
      $800 = $ReallocAsyncCtx7 + 100 | 0; //@line 33699
      HEAP32[$800 >> 2] = $50; //@line 33700
      $801 = $ReallocAsyncCtx7 + 104 | 0; //@line 33701
      HEAP32[$801 >> 2] = $48; //@line 33702
      $802 = $ReallocAsyncCtx7 + 108 | 0; //@line 33703
      HEAP32[$802 >> 2] = $237; //@line 33704
      $803 = $ReallocAsyncCtx7 + 112 | 0; //@line 33705
      HEAP32[$803 >> 2] = $52; //@line 33706
      $804 = $ReallocAsyncCtx7 + 116 | 0; //@line 33707
      HEAP32[$804 >> 2] = $54; //@line 33708
      $805 = $ReallocAsyncCtx7 + 120 | 0; //@line 33709
      HEAP32[$805 >> 2] = $56; //@line 33710
      $806 = $ReallocAsyncCtx7 + 124 | 0; //@line 33711
      HEAP32[$806 >> 2] = $58; //@line 33712
      $807 = $ReallocAsyncCtx7 + 128 | 0; //@line 33713
      HEAP32[$807 >> 2] = $62; //@line 33714
      $808 = $ReallocAsyncCtx7 + 132 | 0; //@line 33715
      HEAP32[$808 >> 2] = $64; //@line 33716
      $809 = $ReallocAsyncCtx7 + 136 | 0; //@line 33717
      HEAP32[$809 >> 2] = $66; //@line 33718
      $810 = $ReallocAsyncCtx7 + 140 | 0; //@line 33719
      HEAP32[$810 >> 2] = $68; //@line 33720
      $811 = $ReallocAsyncCtx7 + 144 | 0; //@line 33721
      HEAP32[$811 >> 2] = $AsyncRetVal; //@line 33722
      $812 = $ReallocAsyncCtx7 + 148 | 0; //@line 33723
      HEAP32[$812 >> 2] = $74; //@line 33724
      $813 = $ReallocAsyncCtx7 + 152 | 0; //@line 33725
      HEAP32[$813 >> 2] = $72; //@line 33726
      $814 = $ReallocAsyncCtx7 + 156 | 0; //@line 33727
      HEAP32[$814 >> 2] = $78; //@line 33728
      $815 = $ReallocAsyncCtx7 + 160 | 0; //@line 33729
      HEAP32[$815 >> 2] = $238; //@line 33730
      $816 = $ReallocAsyncCtx7 + 164 | 0; //@line 33731
      HEAP32[$816 >> 2] = $76; //@line 33732
      $817 = $ReallocAsyncCtx7 + 168 | 0; //@line 33733
      HEAP32[$817 >> 2] = $82; //@line 33734
      $818 = $ReallocAsyncCtx7 + 172 | 0; //@line 33735
      HEAP32[$818 >> 2] = $84; //@line 33736
      $819 = $ReallocAsyncCtx7 + 176 | 0; //@line 33737
      HEAP32[$819 >> 2] = $86; //@line 33738
      $820 = $ReallocAsyncCtx7 + 180 | 0; //@line 33739
      HEAP32[$820 >> 2] = $88; //@line 33740
      $821 = $ReallocAsyncCtx7 + 184 | 0; //@line 33741
      HEAP32[$821 >> 2] = $90; //@line 33742
      $822 = $ReallocAsyncCtx7 + 188 | 0; //@line 33743
      HEAP32[$822 >> 2] = $92; //@line 33744
      $823 = $ReallocAsyncCtx7 + 192 | 0; //@line 33745
      HEAP32[$823 >> 2] = $94; //@line 33746
      $824 = $ReallocAsyncCtx7 + 196 | 0; //@line 33747
      HEAP32[$824 >> 2] = $96; //@line 33748
      $825 = $ReallocAsyncCtx7 + 200 | 0; //@line 33749
      HEAP32[$825 >> 2] = $98; //@line 33750
      $826 = $ReallocAsyncCtx7 + 204 | 0; //@line 33751
      HEAP32[$826 >> 2] = $100; //@line 33752
      $827 = $ReallocAsyncCtx7 + 208 | 0; //@line 33753
      HEAP32[$827 >> 2] = $102; //@line 33754
      $828 = $ReallocAsyncCtx7 + 212 | 0; //@line 33755
      HEAP32[$828 >> 2] = $104; //@line 33756
      $829 = $ReallocAsyncCtx7 + 216 | 0; //@line 33757
      HEAP32[$829 >> 2] = $106; //@line 33758
      $830 = $ReallocAsyncCtx7 + 220 | 0; //@line 33759
      HEAP32[$830 >> 2] = $108; //@line 33760
      $831 = $ReallocAsyncCtx7 + 224 | 0; //@line 33761
      HEAP32[$831 >> 2] = $110; //@line 33762
      $832 = $ReallocAsyncCtx7 + 228 | 0; //@line 33763
      HEAP32[$832 >> 2] = $86; //@line 33764
      $833 = $ReallocAsyncCtx7 + 232 | 0; //@line 33765
      HEAP32[$833 >> 2] = $114; //@line 33766
      $834 = $ReallocAsyncCtx7 + 236 | 0; //@line 33767
      HEAP32[$834 >> 2] = $118; //@line 33768
      $835 = $ReallocAsyncCtx7 + 240 | 0; //@line 33769
      HEAP32[$835 >> 2] = $133; //@line 33770
      $836 = $ReallocAsyncCtx7 + 244 | 0; //@line 33771
      HEAP32[$836 >> 2] = $$0208$i; //@line 33772
      $837 = $ReallocAsyncCtx7 + 248 | 0; //@line 33773
      HEAP32[$837 >> 2] = $122; //@line 33774
      $838 = $ReallocAsyncCtx7 + 252 | 0; //@line 33775
      HEAP32[$838 >> 2] = $124; //@line 33776
      $839 = $ReallocAsyncCtx7 + 256 | 0; //@line 33777
      HEAP32[$839 >> 2] = $126; //@line 33778
      $840 = $ReallocAsyncCtx7 + 260 | 0; //@line 33779
      HEAP32[$840 >> 2] = $128; //@line 33780
      $841 = $ReallocAsyncCtx7 + 264 | 0; //@line 33781
      HEAP32[$841 >> 2] = $10; //@line 33782
      sp = STACKTOP; //@line 33783
      return;
     }
     HEAP8[___async_retval >> 0] = $775; //@line 33787
     ___async_unwind = 0; //@line 33788
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 33789
     $776 = $ReallocAsyncCtx7 + 4 | 0; //@line 33790
     HEAP32[$776 >> 2] = $4; //@line 33791
     $777 = $ReallocAsyncCtx7 + 8 | 0; //@line 33792
     HEAP32[$777 >> 2] = $8; //@line 33793
     $778 = $ReallocAsyncCtx7 + 12 | 0; //@line 33794
     HEAP32[$778 >> 2] = $233; //@line 33795
     $779 = $ReallocAsyncCtx7 + 16 | 0; //@line 33796
     HEAP32[$779 >> 2] = $6; //@line 33797
     $780 = $ReallocAsyncCtx7 + 20 | 0; //@line 33798
     HEAP32[$780 >> 2] = $18; //@line 33799
     $781 = $ReallocAsyncCtx7 + 24 | 0; //@line 33800
     HEAP32[$781 >> 2] = $12; //@line 33801
     $782 = $ReallocAsyncCtx7 + 28 | 0; //@line 33802
     HEAP32[$782 >> 2] = $130; //@line 33803
     $783 = $ReallocAsyncCtx7 + 32 | 0; //@line 33804
     HEAP32[$783 >> 2] = $232; //@line 33805
     $784 = $ReallocAsyncCtx7 + 36 | 0; //@line 33806
     HEAP32[$784 >> 2] = $22; //@line 33807
     $785 = $ReallocAsyncCtx7 + 40 | 0; //@line 33808
     HEAP32[$785 >> 2] = $24; //@line 33809
     $786 = $ReallocAsyncCtx7 + 44 | 0; //@line 33810
     HEAP32[$786 >> 2] = $AsyncRetVal; //@line 33811
     $787 = $ReallocAsyncCtx7 + 48 | 0; //@line 33812
     HEAP32[$787 >> 2] = $28; //@line 33813
     $788 = $ReallocAsyncCtx7 + 52 | 0; //@line 33814
     HEAP32[$788 >> 2] = $30; //@line 33815
     $789 = $ReallocAsyncCtx7 + 56 | 0; //@line 33816
     HEAP32[$789 >> 2] = $234; //@line 33817
     $790 = $ReallocAsyncCtx7 + 60 | 0; //@line 33818
     HEAP32[$790 >> 2] = $32; //@line 33819
     $791 = $ReallocAsyncCtx7 + 64 | 0; //@line 33820
     HEAP32[$791 >> 2] = $34; //@line 33821
     $792 = $ReallocAsyncCtx7 + 68 | 0; //@line 33822
     HEAP32[$792 >> 2] = $36; //@line 33823
     $793 = $ReallocAsyncCtx7 + 72 | 0; //@line 33824
     HEAP32[$793 >> 2] = $38; //@line 33825
     $794 = $ReallocAsyncCtx7 + 76 | 0; //@line 33826
     HEAP32[$794 >> 2] = $236; //@line 33827
     $795 = $ReallocAsyncCtx7 + 80 | 0; //@line 33828
     HEAP32[$795 >> 2] = $40; //@line 33829
     $796 = $ReallocAsyncCtx7 + 84 | 0; //@line 33830
     HEAP32[$796 >> 2] = $236; //@line 33831
     $797 = $ReallocAsyncCtx7 + 88 | 0; //@line 33832
     HEAP32[$797 >> 2] = $44; //@line 33833
     $798 = $ReallocAsyncCtx7 + 92 | 0; //@line 33834
     HEAP32[$798 >> 2] = $46; //@line 33835
     $799 = $ReallocAsyncCtx7 + 96 | 0; //@line 33836
     HEAP32[$799 >> 2] = $42; //@line 33837
     $800 = $ReallocAsyncCtx7 + 100 | 0; //@line 33838
     HEAP32[$800 >> 2] = $50; //@line 33839
     $801 = $ReallocAsyncCtx7 + 104 | 0; //@line 33840
     HEAP32[$801 >> 2] = $48; //@line 33841
     $802 = $ReallocAsyncCtx7 + 108 | 0; //@line 33842
     HEAP32[$802 >> 2] = $237; //@line 33843
     $803 = $ReallocAsyncCtx7 + 112 | 0; //@line 33844
     HEAP32[$803 >> 2] = $52; //@line 33845
     $804 = $ReallocAsyncCtx7 + 116 | 0; //@line 33846
     HEAP32[$804 >> 2] = $54; //@line 33847
     $805 = $ReallocAsyncCtx7 + 120 | 0; //@line 33848
     HEAP32[$805 >> 2] = $56; //@line 33849
     $806 = $ReallocAsyncCtx7 + 124 | 0; //@line 33850
     HEAP32[$806 >> 2] = $58; //@line 33851
     $807 = $ReallocAsyncCtx7 + 128 | 0; //@line 33852
     HEAP32[$807 >> 2] = $62; //@line 33853
     $808 = $ReallocAsyncCtx7 + 132 | 0; //@line 33854
     HEAP32[$808 >> 2] = $64; //@line 33855
     $809 = $ReallocAsyncCtx7 + 136 | 0; //@line 33856
     HEAP32[$809 >> 2] = $66; //@line 33857
     $810 = $ReallocAsyncCtx7 + 140 | 0; //@line 33858
     HEAP32[$810 >> 2] = $68; //@line 33859
     $811 = $ReallocAsyncCtx7 + 144 | 0; //@line 33860
     HEAP32[$811 >> 2] = $AsyncRetVal; //@line 33861
     $812 = $ReallocAsyncCtx7 + 148 | 0; //@line 33862
     HEAP32[$812 >> 2] = $74; //@line 33863
     $813 = $ReallocAsyncCtx7 + 152 | 0; //@line 33864
     HEAP32[$813 >> 2] = $72; //@line 33865
     $814 = $ReallocAsyncCtx7 + 156 | 0; //@line 33866
     HEAP32[$814 >> 2] = $78; //@line 33867
     $815 = $ReallocAsyncCtx7 + 160 | 0; //@line 33868
     HEAP32[$815 >> 2] = $238; //@line 33869
     $816 = $ReallocAsyncCtx7 + 164 | 0; //@line 33870
     HEAP32[$816 >> 2] = $76; //@line 33871
     $817 = $ReallocAsyncCtx7 + 168 | 0; //@line 33872
     HEAP32[$817 >> 2] = $82; //@line 33873
     $818 = $ReallocAsyncCtx7 + 172 | 0; //@line 33874
     HEAP32[$818 >> 2] = $84; //@line 33875
     $819 = $ReallocAsyncCtx7 + 176 | 0; //@line 33876
     HEAP32[$819 >> 2] = $86; //@line 33877
     $820 = $ReallocAsyncCtx7 + 180 | 0; //@line 33878
     HEAP32[$820 >> 2] = $88; //@line 33879
     $821 = $ReallocAsyncCtx7 + 184 | 0; //@line 33880
     HEAP32[$821 >> 2] = $90; //@line 33881
     $822 = $ReallocAsyncCtx7 + 188 | 0; //@line 33882
     HEAP32[$822 >> 2] = $92; //@line 33883
     $823 = $ReallocAsyncCtx7 + 192 | 0; //@line 33884
     HEAP32[$823 >> 2] = $94; //@line 33885
     $824 = $ReallocAsyncCtx7 + 196 | 0; //@line 33886
     HEAP32[$824 >> 2] = $96; //@line 33887
     $825 = $ReallocAsyncCtx7 + 200 | 0; //@line 33888
     HEAP32[$825 >> 2] = $98; //@line 33889
     $826 = $ReallocAsyncCtx7 + 204 | 0; //@line 33890
     HEAP32[$826 >> 2] = $100; //@line 33891
     $827 = $ReallocAsyncCtx7 + 208 | 0; //@line 33892
     HEAP32[$827 >> 2] = $102; //@line 33893
     $828 = $ReallocAsyncCtx7 + 212 | 0; //@line 33894
     HEAP32[$828 >> 2] = $104; //@line 33895
     $829 = $ReallocAsyncCtx7 + 216 | 0; //@line 33896
     HEAP32[$829 >> 2] = $106; //@line 33897
     $830 = $ReallocAsyncCtx7 + 220 | 0; //@line 33898
     HEAP32[$830 >> 2] = $108; //@line 33899
     $831 = $ReallocAsyncCtx7 + 224 | 0; //@line 33900
     HEAP32[$831 >> 2] = $110; //@line 33901
     $832 = $ReallocAsyncCtx7 + 228 | 0; //@line 33902
     HEAP32[$832 >> 2] = $86; //@line 33903
     $833 = $ReallocAsyncCtx7 + 232 | 0; //@line 33904
     HEAP32[$833 >> 2] = $114; //@line 33905
     $834 = $ReallocAsyncCtx7 + 236 | 0; //@line 33906
     HEAP32[$834 >> 2] = $118; //@line 33907
     $835 = $ReallocAsyncCtx7 + 240 | 0; //@line 33908
     HEAP32[$835 >> 2] = $133; //@line 33909
     $836 = $ReallocAsyncCtx7 + 244 | 0; //@line 33910
     HEAP32[$836 >> 2] = $$0208$i; //@line 33911
     $837 = $ReallocAsyncCtx7 + 248 | 0; //@line 33912
     HEAP32[$837 >> 2] = $122; //@line 33913
     $838 = $ReallocAsyncCtx7 + 252 | 0; //@line 33914
     HEAP32[$838 >> 2] = $124; //@line 33915
     $839 = $ReallocAsyncCtx7 + 256 | 0; //@line 33916
     HEAP32[$839 >> 2] = $126; //@line 33917
     $840 = $ReallocAsyncCtx7 + 260 | 0; //@line 33918
     HEAP32[$840 >> 2] = $128; //@line 33919
     $841 = $ReallocAsyncCtx7 + 264 | 0; //@line 33920
     HEAP32[$841 >> 2] = $10; //@line 33921
     sp = STACKTOP; //@line 33922
     return;
    }
   case 75:
    {
     _mbed_tracef(2, 3844, 5067, $66); //@line 33927
     break L6;
     break;
    }
   case 79:
    {
     $859 = HEAP32[$236 >> 2] | 0; //@line 33932
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 33935
     $862 = _sn_coap_parser_options_parse_multiple_options($110, $86, $279, $859 + 64 | 0, $859 + 10 | 0, 15, $$1202$i) | 0; //@line 33936
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 33939
      $863 = $ReallocAsyncCtx6 + 4 | 0; //@line 33940
      HEAP32[$863 >> 2] = $4; //@line 33941
      $864 = $ReallocAsyncCtx6 + 8 | 0; //@line 33942
      HEAP32[$864 >> 2] = $8; //@line 33943
      $865 = $ReallocAsyncCtx6 + 12 | 0; //@line 33944
      HEAP32[$865 >> 2] = $233; //@line 33945
      $866 = $ReallocAsyncCtx6 + 16 | 0; //@line 33946
      HEAP32[$866 >> 2] = $6; //@line 33947
      $867 = $ReallocAsyncCtx6 + 20 | 0; //@line 33948
      HEAP32[$867 >> 2] = $18; //@line 33949
      $868 = $ReallocAsyncCtx6 + 24 | 0; //@line 33950
      HEAP32[$868 >> 2] = $12; //@line 33951
      $869 = $ReallocAsyncCtx6 + 28 | 0; //@line 33952
      HEAP32[$869 >> 2] = $130; //@line 33953
      $870 = $ReallocAsyncCtx6 + 32 | 0; //@line 33954
      HEAP32[$870 >> 2] = $232; //@line 33955
      $871 = $ReallocAsyncCtx6 + 36 | 0; //@line 33956
      HEAP32[$871 >> 2] = $22; //@line 33957
      $872 = $ReallocAsyncCtx6 + 40 | 0; //@line 33958
      HEAP32[$872 >> 2] = $24; //@line 33959
      $873 = $ReallocAsyncCtx6 + 44 | 0; //@line 33960
      HEAP32[$873 >> 2] = $AsyncRetVal; //@line 33961
      $874 = $ReallocAsyncCtx6 + 48 | 0; //@line 33962
      HEAP32[$874 >> 2] = $28; //@line 33963
      $875 = $ReallocAsyncCtx6 + 52 | 0; //@line 33964
      HEAP32[$875 >> 2] = $30; //@line 33965
      $876 = $ReallocAsyncCtx6 + 56 | 0; //@line 33966
      HEAP32[$876 >> 2] = $234; //@line 33967
      $877 = $ReallocAsyncCtx6 + 60 | 0; //@line 33968
      HEAP32[$877 >> 2] = $32; //@line 33969
      $878 = $ReallocAsyncCtx6 + 64 | 0; //@line 33970
      HEAP32[$878 >> 2] = $34; //@line 33971
      $879 = $ReallocAsyncCtx6 + 68 | 0; //@line 33972
      HEAP32[$879 >> 2] = $36; //@line 33973
      $880 = $ReallocAsyncCtx6 + 72 | 0; //@line 33974
      HEAP32[$880 >> 2] = $38; //@line 33975
      $881 = $ReallocAsyncCtx6 + 76 | 0; //@line 33976
      HEAP32[$881 >> 2] = $236; //@line 33977
      $882 = $ReallocAsyncCtx6 + 80 | 0; //@line 33978
      HEAP32[$882 >> 2] = $40; //@line 33979
      $883 = $ReallocAsyncCtx6 + 84 | 0; //@line 33980
      HEAP32[$883 >> 2] = $236; //@line 33981
      $884 = $ReallocAsyncCtx6 + 88 | 0; //@line 33982
      HEAP32[$884 >> 2] = $44; //@line 33983
      $885 = $ReallocAsyncCtx6 + 92 | 0; //@line 33984
      HEAP32[$885 >> 2] = $46; //@line 33985
      $886 = $ReallocAsyncCtx6 + 96 | 0; //@line 33986
      HEAP32[$886 >> 2] = $42; //@line 33987
      $887 = $ReallocAsyncCtx6 + 100 | 0; //@line 33988
      HEAP32[$887 >> 2] = $50; //@line 33989
      $888 = $ReallocAsyncCtx6 + 104 | 0; //@line 33990
      HEAP32[$888 >> 2] = $48; //@line 33991
      $889 = $ReallocAsyncCtx6 + 108 | 0; //@line 33992
      HEAP32[$889 >> 2] = $237; //@line 33993
      $890 = $ReallocAsyncCtx6 + 112 | 0; //@line 33994
      HEAP32[$890 >> 2] = $52; //@line 33995
      $891 = $ReallocAsyncCtx6 + 116 | 0; //@line 33996
      HEAP32[$891 >> 2] = $54; //@line 33997
      $892 = $ReallocAsyncCtx6 + 120 | 0; //@line 33998
      HEAP32[$892 >> 2] = $56; //@line 33999
      $893 = $ReallocAsyncCtx6 + 124 | 0; //@line 34000
      HEAP32[$893 >> 2] = $58; //@line 34001
      $894 = $ReallocAsyncCtx6 + 128 | 0; //@line 34002
      HEAP32[$894 >> 2] = $62; //@line 34003
      $895 = $ReallocAsyncCtx6 + 132 | 0; //@line 34004
      HEAP32[$895 >> 2] = $64; //@line 34005
      $896 = $ReallocAsyncCtx6 + 136 | 0; //@line 34006
      HEAP32[$896 >> 2] = $66; //@line 34007
      $897 = $ReallocAsyncCtx6 + 140 | 0; //@line 34008
      HEAP32[$897 >> 2] = $68; //@line 34009
      $898 = $ReallocAsyncCtx6 + 144 | 0; //@line 34010
      HEAP32[$898 >> 2] = $AsyncRetVal; //@line 34011
      $899 = $ReallocAsyncCtx6 + 148 | 0; //@line 34012
      HEAP32[$899 >> 2] = $74; //@line 34013
      $900 = $ReallocAsyncCtx6 + 152 | 0; //@line 34014
      HEAP32[$900 >> 2] = $72; //@line 34015
      $901 = $ReallocAsyncCtx6 + 156 | 0; //@line 34016
      HEAP32[$901 >> 2] = $78; //@line 34017
      $902 = $ReallocAsyncCtx6 + 160 | 0; //@line 34018
      HEAP32[$902 >> 2] = $238; //@line 34019
      $903 = $ReallocAsyncCtx6 + 164 | 0; //@line 34020
      HEAP32[$903 >> 2] = $76; //@line 34021
      $904 = $ReallocAsyncCtx6 + 168 | 0; //@line 34022
      HEAP32[$904 >> 2] = $82; //@line 34023
      $905 = $ReallocAsyncCtx6 + 172 | 0; //@line 34024
      HEAP32[$905 >> 2] = $84; //@line 34025
      $906 = $ReallocAsyncCtx6 + 176 | 0; //@line 34026
      HEAP32[$906 >> 2] = $86; //@line 34027
      $907 = $ReallocAsyncCtx6 + 180 | 0; //@line 34028
      HEAP32[$907 >> 2] = $88; //@line 34029
      $908 = $ReallocAsyncCtx6 + 184 | 0; //@line 34030
      HEAP32[$908 >> 2] = $90; //@line 34031
      $909 = $ReallocAsyncCtx6 + 188 | 0; //@line 34032
      HEAP32[$909 >> 2] = $92; //@line 34033
      $910 = $ReallocAsyncCtx6 + 192 | 0; //@line 34034
      HEAP32[$910 >> 2] = $94; //@line 34035
      $911 = $ReallocAsyncCtx6 + 196 | 0; //@line 34036
      HEAP32[$911 >> 2] = $96; //@line 34037
      $912 = $ReallocAsyncCtx6 + 200 | 0; //@line 34038
      HEAP32[$912 >> 2] = $98; //@line 34039
      $913 = $ReallocAsyncCtx6 + 204 | 0; //@line 34040
      HEAP32[$913 >> 2] = $100; //@line 34041
      $914 = $ReallocAsyncCtx6 + 208 | 0; //@line 34042
      HEAP32[$914 >> 2] = $102; //@line 34043
      $915 = $ReallocAsyncCtx6 + 212 | 0; //@line 34044
      HEAP32[$915 >> 2] = $104; //@line 34045
      $916 = $ReallocAsyncCtx6 + 216 | 0; //@line 34046
      HEAP32[$916 >> 2] = $106; //@line 34047
      $917 = $ReallocAsyncCtx6 + 220 | 0; //@line 34048
      HEAP32[$917 >> 2] = $108; //@line 34049
      $918 = $ReallocAsyncCtx6 + 224 | 0; //@line 34050
      HEAP32[$918 >> 2] = $110; //@line 34051
      $919 = $ReallocAsyncCtx6 + 228 | 0; //@line 34052
      HEAP32[$919 >> 2] = $86; //@line 34053
      $920 = $ReallocAsyncCtx6 + 232 | 0; //@line 34054
      HEAP32[$920 >> 2] = $114; //@line 34055
      $921 = $ReallocAsyncCtx6 + 236 | 0; //@line 34056
      HEAP32[$921 >> 2] = $118; //@line 34057
      $922 = $ReallocAsyncCtx6 + 240 | 0; //@line 34058
      HEAP32[$922 >> 2] = $133; //@line 34059
      $923 = $ReallocAsyncCtx6 + 244 | 0; //@line 34060
      HEAP32[$923 >> 2] = $$0208$i; //@line 34061
      $924 = $ReallocAsyncCtx6 + 248 | 0; //@line 34062
      HEAP32[$924 >> 2] = $122; //@line 34063
      $925 = $ReallocAsyncCtx6 + 252 | 0; //@line 34064
      HEAP32[$925 >> 2] = $124; //@line 34065
      $926 = $ReallocAsyncCtx6 + 256 | 0; //@line 34066
      HEAP32[$926 >> 2] = $126; //@line 34067
      $927 = $ReallocAsyncCtx6 + 260 | 0; //@line 34068
      HEAP32[$927 >> 2] = $128; //@line 34069
      $928 = $ReallocAsyncCtx6 + 264 | 0; //@line 34070
      HEAP32[$928 >> 2] = $10; //@line 34071
      sp = STACKTOP; //@line 34072
      return;
     }
     HEAP8[___async_retval >> 0] = $862; //@line 34076
     ___async_unwind = 0; //@line 34077
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 34078
     $863 = $ReallocAsyncCtx6 + 4 | 0; //@line 34079
     HEAP32[$863 >> 2] = $4; //@line 34080
     $864 = $ReallocAsyncCtx6 + 8 | 0; //@line 34081
     HEAP32[$864 >> 2] = $8; //@line 34082
     $865 = $ReallocAsyncCtx6 + 12 | 0; //@line 34083
     HEAP32[$865 >> 2] = $233; //@line 34084
     $866 = $ReallocAsyncCtx6 + 16 | 0; //@line 34085
     HEAP32[$866 >> 2] = $6; //@line 34086
     $867 = $ReallocAsyncCtx6 + 20 | 0; //@line 34087
     HEAP32[$867 >> 2] = $18; //@line 34088
     $868 = $ReallocAsyncCtx6 + 24 | 0; //@line 34089
     HEAP32[$868 >> 2] = $12; //@line 34090
     $869 = $ReallocAsyncCtx6 + 28 | 0; //@line 34091
     HEAP32[$869 >> 2] = $130; //@line 34092
     $870 = $ReallocAsyncCtx6 + 32 | 0; //@line 34093
     HEAP32[$870 >> 2] = $232; //@line 34094
     $871 = $ReallocAsyncCtx6 + 36 | 0; //@line 34095
     HEAP32[$871 >> 2] = $22; //@line 34096
     $872 = $ReallocAsyncCtx6 + 40 | 0; //@line 34097
     HEAP32[$872 >> 2] = $24; //@line 34098
     $873 = $ReallocAsyncCtx6 + 44 | 0; //@line 34099
     HEAP32[$873 >> 2] = $AsyncRetVal; //@line 34100
     $874 = $ReallocAsyncCtx6 + 48 | 0; //@line 34101
     HEAP32[$874 >> 2] = $28; //@line 34102
     $875 = $ReallocAsyncCtx6 + 52 | 0; //@line 34103
     HEAP32[$875 >> 2] = $30; //@line 34104
     $876 = $ReallocAsyncCtx6 + 56 | 0; //@line 34105
     HEAP32[$876 >> 2] = $234; //@line 34106
     $877 = $ReallocAsyncCtx6 + 60 | 0; //@line 34107
     HEAP32[$877 >> 2] = $32; //@line 34108
     $878 = $ReallocAsyncCtx6 + 64 | 0; //@line 34109
     HEAP32[$878 >> 2] = $34; //@line 34110
     $879 = $ReallocAsyncCtx6 + 68 | 0; //@line 34111
     HEAP32[$879 >> 2] = $36; //@line 34112
     $880 = $ReallocAsyncCtx6 + 72 | 0; //@line 34113
     HEAP32[$880 >> 2] = $38; //@line 34114
     $881 = $ReallocAsyncCtx6 + 76 | 0; //@line 34115
     HEAP32[$881 >> 2] = $236; //@line 34116
     $882 = $ReallocAsyncCtx6 + 80 | 0; //@line 34117
     HEAP32[$882 >> 2] = $40; //@line 34118
     $883 = $ReallocAsyncCtx6 + 84 | 0; //@line 34119
     HEAP32[$883 >> 2] = $236; //@line 34120
     $884 = $ReallocAsyncCtx6 + 88 | 0; //@line 34121
     HEAP32[$884 >> 2] = $44; //@line 34122
     $885 = $ReallocAsyncCtx6 + 92 | 0; //@line 34123
     HEAP32[$885 >> 2] = $46; //@line 34124
     $886 = $ReallocAsyncCtx6 + 96 | 0; //@line 34125
     HEAP32[$886 >> 2] = $42; //@line 34126
     $887 = $ReallocAsyncCtx6 + 100 | 0; //@line 34127
     HEAP32[$887 >> 2] = $50; //@line 34128
     $888 = $ReallocAsyncCtx6 + 104 | 0; //@line 34129
     HEAP32[$888 >> 2] = $48; //@line 34130
     $889 = $ReallocAsyncCtx6 + 108 | 0; //@line 34131
     HEAP32[$889 >> 2] = $237; //@line 34132
     $890 = $ReallocAsyncCtx6 + 112 | 0; //@line 34133
     HEAP32[$890 >> 2] = $52; //@line 34134
     $891 = $ReallocAsyncCtx6 + 116 | 0; //@line 34135
     HEAP32[$891 >> 2] = $54; //@line 34136
     $892 = $ReallocAsyncCtx6 + 120 | 0; //@line 34137
     HEAP32[$892 >> 2] = $56; //@line 34138
     $893 = $ReallocAsyncCtx6 + 124 | 0; //@line 34139
     HEAP32[$893 >> 2] = $58; //@line 34140
     $894 = $ReallocAsyncCtx6 + 128 | 0; //@line 34141
     HEAP32[$894 >> 2] = $62; //@line 34142
     $895 = $ReallocAsyncCtx6 + 132 | 0; //@line 34143
     HEAP32[$895 >> 2] = $64; //@line 34144
     $896 = $ReallocAsyncCtx6 + 136 | 0; //@line 34145
     HEAP32[$896 >> 2] = $66; //@line 34146
     $897 = $ReallocAsyncCtx6 + 140 | 0; //@line 34147
     HEAP32[$897 >> 2] = $68; //@line 34148
     $898 = $ReallocAsyncCtx6 + 144 | 0; //@line 34149
     HEAP32[$898 >> 2] = $AsyncRetVal; //@line 34150
     $899 = $ReallocAsyncCtx6 + 148 | 0; //@line 34151
     HEAP32[$899 >> 2] = $74; //@line 34152
     $900 = $ReallocAsyncCtx6 + 152 | 0; //@line 34153
     HEAP32[$900 >> 2] = $72; //@line 34154
     $901 = $ReallocAsyncCtx6 + 156 | 0; //@line 34155
     HEAP32[$901 >> 2] = $78; //@line 34156
     $902 = $ReallocAsyncCtx6 + 160 | 0; //@line 34157
     HEAP32[$902 >> 2] = $238; //@line 34158
     $903 = $ReallocAsyncCtx6 + 164 | 0; //@line 34159
     HEAP32[$903 >> 2] = $76; //@line 34160
     $904 = $ReallocAsyncCtx6 + 168 | 0; //@line 34161
     HEAP32[$904 >> 2] = $82; //@line 34162
     $905 = $ReallocAsyncCtx6 + 172 | 0; //@line 34163
     HEAP32[$905 >> 2] = $84; //@line 34164
     $906 = $ReallocAsyncCtx6 + 176 | 0; //@line 34165
     HEAP32[$906 >> 2] = $86; //@line 34166
     $907 = $ReallocAsyncCtx6 + 180 | 0; //@line 34167
     HEAP32[$907 >> 2] = $88; //@line 34168
     $908 = $ReallocAsyncCtx6 + 184 | 0; //@line 34169
     HEAP32[$908 >> 2] = $90; //@line 34170
     $909 = $ReallocAsyncCtx6 + 188 | 0; //@line 34171
     HEAP32[$909 >> 2] = $92; //@line 34172
     $910 = $ReallocAsyncCtx6 + 192 | 0; //@line 34173
     HEAP32[$910 >> 2] = $94; //@line 34174
     $911 = $ReallocAsyncCtx6 + 196 | 0; //@line 34175
     HEAP32[$911 >> 2] = $96; //@line 34176
     $912 = $ReallocAsyncCtx6 + 200 | 0; //@line 34177
     HEAP32[$912 >> 2] = $98; //@line 34178
     $913 = $ReallocAsyncCtx6 + 204 | 0; //@line 34179
     HEAP32[$913 >> 2] = $100; //@line 34180
     $914 = $ReallocAsyncCtx6 + 208 | 0; //@line 34181
     HEAP32[$914 >> 2] = $102; //@line 34182
     $915 = $ReallocAsyncCtx6 + 212 | 0; //@line 34183
     HEAP32[$915 >> 2] = $104; //@line 34184
     $916 = $ReallocAsyncCtx6 + 216 | 0; //@line 34185
     HEAP32[$916 >> 2] = $106; //@line 34186
     $917 = $ReallocAsyncCtx6 + 220 | 0; //@line 34187
     HEAP32[$917 >> 2] = $108; //@line 34188
     $918 = $ReallocAsyncCtx6 + 224 | 0; //@line 34189
     HEAP32[$918 >> 2] = $110; //@line 34190
     $919 = $ReallocAsyncCtx6 + 228 | 0; //@line 34191
     HEAP32[$919 >> 2] = $86; //@line 34192
     $920 = $ReallocAsyncCtx6 + 232 | 0; //@line 34193
     HEAP32[$920 >> 2] = $114; //@line 34194
     $921 = $ReallocAsyncCtx6 + 236 | 0; //@line 34195
     HEAP32[$921 >> 2] = $118; //@line 34196
     $922 = $ReallocAsyncCtx6 + 240 | 0; //@line 34197
     HEAP32[$922 >> 2] = $133; //@line 34198
     $923 = $ReallocAsyncCtx6 + 244 | 0; //@line 34199
     HEAP32[$923 >> 2] = $$0208$i; //@line 34200
     $924 = $ReallocAsyncCtx6 + 248 | 0; //@line 34201
     HEAP32[$924 >> 2] = $122; //@line 34202
     $925 = $ReallocAsyncCtx6 + 252 | 0; //@line 34203
     HEAP32[$925 >> 2] = $124; //@line 34204
     $926 = $ReallocAsyncCtx6 + 256 | 0; //@line 34205
     HEAP32[$926 >> 2] = $126; //@line 34206
     $927 = $ReallocAsyncCtx6 + 260 | 0; //@line 34207
     HEAP32[$927 >> 2] = $128; //@line 34208
     $928 = $ReallocAsyncCtx6 + 264 | 0; //@line 34209
     HEAP32[$928 >> 2] = $10; //@line 34210
     sp = STACKTOP; //@line 34211
     return;
    }
   case 84:
    {
     _mbed_tracef(2, 3844, 5193, $10); //@line 34216
     break L6;
     break;
    }
   case 90:
    {
     _mbed_tracef(2, 3844, 5254, $100); //@line 34221
     break L6;
     break;
    }
   case 96:
    {
     _mbed_tracef(2, 3844, 5315, $42); //@line 34226
     break L6;
     break;
    }
   case 102:
    {
     _mbed_tracef(2, 3844, 5376, $24); //@line 34231
     break L6;
     break;
    }
   case 108:
    {
     _mbed_tracef(2, 3844, 5436, $12); //@line 34236
     break L6;
     break;
    }
   case 112:
    {
     _mbed_tracef(2, 3844, 5496, $82); //@line 34241
     break L6;
     break;
    }
   case 115:
    {
     if (($241 - $233 | 0) >= ($232 | 0)) {
      $$0 = $AsyncRetVal; //@line 34250
      $1041 = ___async_retval; //@line 34251
      HEAP32[$1041 >> 2] = $$0; //@line 34252
      return;
     }
     if ((HEAP8[$241 >> 0] | 0) == -1) {
      $1031 = $241 + 1 | 0; //@line 34258
      HEAP32[$86 >> 2] = $1031; //@line 34259
      $1032 = $1031; //@line 34260
      $1034 = $233 - $1032 + $232 | 0; //@line 34262
      HEAP16[$AsyncRetVal + 24 >> 1] = $1034; //@line 34265
      if ($1034 & 65535 | 0) {
       HEAP32[$AsyncRetVal + 36 >> 2] = $1032; //@line 34270
       $$0 = $AsyncRetVal; //@line 34271
       $1041 = ___async_retval; //@line 34272
       HEAP32[$1041 >> 2] = $$0; //@line 34273
       return;
      }
     } else {
      _mbed_tracef(2, 3844, 5543, $30); //@line 34277
     }
     HEAP32[$AsyncRetVal + 4 >> 2] = 1; //@line 34280
     $$0 = $AsyncRetVal; //@line 34281
     $1041 = ___async_retval; //@line 34282
     HEAP32[$1041 >> 2] = $$0; //@line 34283
     return;
    }
   }
  } else {
   if (($158 & 255) <= 8) {
    $161 = $AsyncRetVal + 28 | 0; //@line 34291
    if (!(HEAP32[$161 >> 2] | 0)) {
     $164 = HEAP32[$40 >> 2] | 0; //@line 34295
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(256) | 0; //@line 34297
     $166 = FUNCTION_TABLE_ii[$164 & 31]($158 & 255) | 0; //@line 34298
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 60; //@line 34301
      $167 = $ReallocAsyncCtx2 + 4 | 0; //@line 34302
      HEAP32[$167 >> 2] = $4; //@line 34303
      $168 = $ReallocAsyncCtx2 + 8 | 0; //@line 34304
      HEAP32[$168 >> 2] = $8; //@line 34305
      $169 = $ReallocAsyncCtx2 + 12 | 0; //@line 34306
      HEAP32[$169 >> 2] = $6; //@line 34307
      $170 = $ReallocAsyncCtx2 + 16 | 0; //@line 34308
      HEAP32[$170 >> 2] = $10; //@line 34309
      $171 = $ReallocAsyncCtx2 + 20 | 0; //@line 34310
      HEAP32[$171 >> 2] = $12; //@line 34311
      $172 = $ReallocAsyncCtx2 + 24 | 0; //@line 34312
      HEAP32[$172 >> 2] = $14; //@line 34313
      $173 = $ReallocAsyncCtx2 + 28 | 0; //@line 34314
      HEAP32[$173 >> 2] = $156; //@line 34315
      $174 = $ReallocAsyncCtx2 + 32 | 0; //@line 34316
      HEAP32[$174 >> 2] = $18; //@line 34317
      $175 = $ReallocAsyncCtx2 + 36 | 0; //@line 34318
      HEAP32[$175 >> 2] = $22; //@line 34319
      $176 = $ReallocAsyncCtx2 + 40 | 0; //@line 34320
      HEAP32[$176 >> 2] = $24; //@line 34321
      $177 = $ReallocAsyncCtx2 + 44 | 0; //@line 34322
      HEAP32[$177 >> 2] = $AsyncRetVal; //@line 34323
      $178 = $ReallocAsyncCtx2 + 48 | 0; //@line 34324
      HEAP32[$178 >> 2] = $28; //@line 34325
      $179 = $ReallocAsyncCtx2 + 52 | 0; //@line 34326
      HEAP32[$179 >> 2] = $30; //@line 34327
      $180 = $ReallocAsyncCtx2 + 56 | 0; //@line 34328
      HEAP32[$180 >> 2] = $32; //@line 34329
      $181 = $ReallocAsyncCtx2 + 60 | 0; //@line 34330
      HEAP32[$181 >> 2] = $161; //@line 34331
      $182 = $ReallocAsyncCtx2 + 64 | 0; //@line 34332
      HEAP32[$182 >> 2] = $34; //@line 34333
      $183 = $ReallocAsyncCtx2 + 68 | 0; //@line 34334
      HEAP32[$183 >> 2] = $36; //@line 34335
      $184 = $ReallocAsyncCtx2 + 72 | 0; //@line 34336
      HEAP32[$184 >> 2] = $38; //@line 34337
      $185 = $ReallocAsyncCtx2 + 76 | 0; //@line 34338
      HEAP32[$185 >> 2] = $40; //@line 34339
      $186 = $ReallocAsyncCtx2 + 80 | 0; //@line 34340
      HEAP32[$186 >> 2] = $42; //@line 34341
      $187 = $ReallocAsyncCtx2 + 84 | 0; //@line 34342
      HEAP32[$187 >> 2] = $44; //@line 34343
      $188 = $ReallocAsyncCtx2 + 88 | 0; //@line 34344
      HEAP32[$188 >> 2] = $46; //@line 34345
      $189 = $ReallocAsyncCtx2 + 92 | 0; //@line 34346
      HEAP32[$189 >> 2] = $48; //@line 34347
      $190 = $ReallocAsyncCtx2 + 96 | 0; //@line 34348
      HEAP32[$190 >> 2] = $50; //@line 34349
      $191 = $ReallocAsyncCtx2 + 100 | 0; //@line 34350
      HEAP32[$191 >> 2] = $52; //@line 34351
      $192 = $ReallocAsyncCtx2 + 104 | 0; //@line 34352
      HEAP32[$192 >> 2] = $54; //@line 34353
      $193 = $ReallocAsyncCtx2 + 108 | 0; //@line 34354
      HEAP32[$193 >> 2] = $56; //@line 34355
      $194 = $ReallocAsyncCtx2 + 112 | 0; //@line 34356
      HEAP32[$194 >> 2] = $58; //@line 34357
      $195 = $ReallocAsyncCtx2 + 116 | 0; //@line 34358
      HEAP32[$195 >> 2] = $60; //@line 34359
      $196 = $ReallocAsyncCtx2 + 120 | 0; //@line 34360
      HEAP32[$196 >> 2] = $62; //@line 34361
      $197 = $ReallocAsyncCtx2 + 124 | 0; //@line 34362
      HEAP32[$197 >> 2] = $64; //@line 34363
      $198 = $ReallocAsyncCtx2 + 128 | 0; //@line 34364
      HEAP32[$198 >> 2] = $66; //@line 34365
      $199 = $ReallocAsyncCtx2 + 132 | 0; //@line 34366
      HEAP32[$199 >> 2] = $AsyncRetVal; //@line 34367
      $200 = $ReallocAsyncCtx2 + 136 | 0; //@line 34368
      HEAP32[$200 >> 2] = $68; //@line 34369
      $201 = $ReallocAsyncCtx2 + 140 | 0; //@line 34370
      HEAP32[$201 >> 2] = $74; //@line 34371
      $202 = $ReallocAsyncCtx2 + 144 | 0; //@line 34372
      HEAP32[$202 >> 2] = $72; //@line 34373
      $203 = $ReallocAsyncCtx2 + 148 | 0; //@line 34374
      HEAP32[$203 >> 2] = $78; //@line 34375
      $204 = $ReallocAsyncCtx2 + 152 | 0; //@line 34376
      HEAP32[$204 >> 2] = $76; //@line 34377
      $205 = $ReallocAsyncCtx2 + 156 | 0; //@line 34378
      HEAP32[$205 >> 2] = $82; //@line 34379
      $206 = $ReallocAsyncCtx2 + 160 | 0; //@line 34380
      HEAP32[$206 >> 2] = $84; //@line 34381
      $207 = $ReallocAsyncCtx2 + 164 | 0; //@line 34382
      HEAP32[$207 >> 2] = $86; //@line 34383
      $208 = $ReallocAsyncCtx2 + 168 | 0; //@line 34384
      HEAP32[$208 >> 2] = $88; //@line 34385
      $209 = $ReallocAsyncCtx2 + 172 | 0; //@line 34386
      HEAP32[$209 >> 2] = $90; //@line 34387
      $210 = $ReallocAsyncCtx2 + 176 | 0; //@line 34388
      HEAP32[$210 >> 2] = $92; //@line 34389
      $211 = $ReallocAsyncCtx2 + 180 | 0; //@line 34390
      HEAP32[$211 >> 2] = $94; //@line 34391
      $212 = $ReallocAsyncCtx2 + 184 | 0; //@line 34392
      HEAP32[$212 >> 2] = $96; //@line 34393
      $213 = $ReallocAsyncCtx2 + 188 | 0; //@line 34394
      HEAP32[$213 >> 2] = $98; //@line 34395
      $214 = $ReallocAsyncCtx2 + 192 | 0; //@line 34396
      HEAP32[$214 >> 2] = $100; //@line 34397
      $215 = $ReallocAsyncCtx2 + 196 | 0; //@line 34398
      HEAP32[$215 >> 2] = $102; //@line 34399
      $216 = $ReallocAsyncCtx2 + 200 | 0; //@line 34400
      HEAP32[$216 >> 2] = $104; //@line 34401
      $217 = $ReallocAsyncCtx2 + 204 | 0; //@line 34402
      HEAP32[$217 >> 2] = $106; //@line 34403
      $218 = $ReallocAsyncCtx2 + 208 | 0; //@line 34404
      HEAP32[$218 >> 2] = $108; //@line 34405
      $219 = $ReallocAsyncCtx2 + 212 | 0; //@line 34406
      HEAP32[$219 >> 2] = $110; //@line 34407
      $220 = $ReallocAsyncCtx2 + 216 | 0; //@line 34408
      HEAP16[$220 >> 1] = $112; //@line 34409
      $221 = $ReallocAsyncCtx2 + 220 | 0; //@line 34410
      HEAP32[$221 >> 2] = $114; //@line 34411
      $222 = $ReallocAsyncCtx2 + 224 | 0; //@line 34412
      HEAP32[$222 >> 2] = $116; //@line 34413
      $223 = $ReallocAsyncCtx2 + 228 | 0; //@line 34414
      HEAP32[$223 >> 2] = $133; //@line 34415
      $224 = $ReallocAsyncCtx2 + 232 | 0; //@line 34416
      HEAP32[$224 >> 2] = $118; //@line 34417
      $225 = $ReallocAsyncCtx2 + 236 | 0; //@line 34418
      HEAP32[$225 >> 2] = $122; //@line 34419
      $226 = $ReallocAsyncCtx2 + 240 | 0; //@line 34420
      HEAP32[$226 >> 2] = $124; //@line 34421
      $227 = $ReallocAsyncCtx2 + 244 | 0; //@line 34422
      HEAP32[$227 >> 2] = $126; //@line 34423
      $228 = $ReallocAsyncCtx2 + 248 | 0; //@line 34424
      HEAP32[$228 >> 2] = $128; //@line 34425
      $229 = $ReallocAsyncCtx2 + 252 | 0; //@line 34426
      HEAP32[$229 >> 2] = $130; //@line 34427
      sp = STACKTOP; //@line 34428
      return;
     }
     HEAP32[___async_retval >> 2] = $166; //@line 34432
     ___async_unwind = 0; //@line 34433
     HEAP32[$ReallocAsyncCtx2 >> 2] = 60; //@line 34434
     $167 = $ReallocAsyncCtx2 + 4 | 0; //@line 34435
     HEAP32[$167 >> 2] = $4; //@line 34436
     $168 = $ReallocAsyncCtx2 + 8 | 0; //@line 34437
     HEAP32[$168 >> 2] = $8; //@line 34438
     $169 = $ReallocAsyncCtx2 + 12 | 0; //@line 34439
     HEAP32[$169 >> 2] = $6; //@line 34440
     $170 = $ReallocAsyncCtx2 + 16 | 0; //@line 34441
     HEAP32[$170 >> 2] = $10; //@line 34442
     $171 = $ReallocAsyncCtx2 + 20 | 0; //@line 34443
     HEAP32[$171 >> 2] = $12; //@line 34444
     $172 = $ReallocAsyncCtx2 + 24 | 0; //@line 34445
     HEAP32[$172 >> 2] = $14; //@line 34446
     $173 = $ReallocAsyncCtx2 + 28 | 0; //@line 34447
     HEAP32[$173 >> 2] = $156; //@line 34448
     $174 = $ReallocAsyncCtx2 + 32 | 0; //@line 34449
     HEAP32[$174 >> 2] = $18; //@line 34450
     $175 = $ReallocAsyncCtx2 + 36 | 0; //@line 34451
     HEAP32[$175 >> 2] = $22; //@line 34452
     $176 = $ReallocAsyncCtx2 + 40 | 0; //@line 34453
     HEAP32[$176 >> 2] = $24; //@line 34454
     $177 = $ReallocAsyncCtx2 + 44 | 0; //@line 34455
     HEAP32[$177 >> 2] = $AsyncRetVal; //@line 34456
     $178 = $ReallocAsyncCtx2 + 48 | 0; //@line 34457
     HEAP32[$178 >> 2] = $28; //@line 34458
     $179 = $ReallocAsyncCtx2 + 52 | 0; //@line 34459
     HEAP32[$179 >> 2] = $30; //@line 34460
     $180 = $ReallocAsyncCtx2 + 56 | 0; //@line 34461
     HEAP32[$180 >> 2] = $32; //@line 34462
     $181 = $ReallocAsyncCtx2 + 60 | 0; //@line 34463
     HEAP32[$181 >> 2] = $161; //@line 34464
     $182 = $ReallocAsyncCtx2 + 64 | 0; //@line 34465
     HEAP32[$182 >> 2] = $34; //@line 34466
     $183 = $ReallocAsyncCtx2 + 68 | 0; //@line 34467
     HEAP32[$183 >> 2] = $36; //@line 34468
     $184 = $ReallocAsyncCtx2 + 72 | 0; //@line 34469
     HEAP32[$184 >> 2] = $38; //@line 34470
     $185 = $ReallocAsyncCtx2 + 76 | 0; //@line 34471
     HEAP32[$185 >> 2] = $40; //@line 34472
     $186 = $ReallocAsyncCtx2 + 80 | 0; //@line 34473
     HEAP32[$186 >> 2] = $42; //@line 34474
     $187 = $ReallocAsyncCtx2 + 84 | 0; //@line 34475
     HEAP32[$187 >> 2] = $44; //@line 34476
     $188 = $ReallocAsyncCtx2 + 88 | 0; //@line 34477
     HEAP32[$188 >> 2] = $46; //@line 34478
     $189 = $ReallocAsyncCtx2 + 92 | 0; //@line 34479
     HEAP32[$189 >> 2] = $48; //@line 34480
     $190 = $ReallocAsyncCtx2 + 96 | 0; //@line 34481
     HEAP32[$190 >> 2] = $50; //@line 34482
     $191 = $ReallocAsyncCtx2 + 100 | 0; //@line 34483
     HEAP32[$191 >> 2] = $52; //@line 34484
     $192 = $ReallocAsyncCtx2 + 104 | 0; //@line 34485
     HEAP32[$192 >> 2] = $54; //@line 34486
     $193 = $ReallocAsyncCtx2 + 108 | 0; //@line 34487
     HEAP32[$193 >> 2] = $56; //@line 34488
     $194 = $ReallocAsyncCtx2 + 112 | 0; //@line 34489
     HEAP32[$194 >> 2] = $58; //@line 34490
     $195 = $ReallocAsyncCtx2 + 116 | 0; //@line 34491
     HEAP32[$195 >> 2] = $60; //@line 34492
     $196 = $ReallocAsyncCtx2 + 120 | 0; //@line 34493
     HEAP32[$196 >> 2] = $62; //@line 34494
     $197 = $ReallocAsyncCtx2 + 124 | 0; //@line 34495
     HEAP32[$197 >> 2] = $64; //@line 34496
     $198 = $ReallocAsyncCtx2 + 128 | 0; //@line 34497
     HEAP32[$198 >> 2] = $66; //@line 34498
     $199 = $ReallocAsyncCtx2 + 132 | 0; //@line 34499
     HEAP32[$199 >> 2] = $AsyncRetVal; //@line 34500
     $200 = $ReallocAsyncCtx2 + 136 | 0; //@line 34501
     HEAP32[$200 >> 2] = $68; //@line 34502
     $201 = $ReallocAsyncCtx2 + 140 | 0; //@line 34503
     HEAP32[$201 >> 2] = $74; //@line 34504
     $202 = $ReallocAsyncCtx2 + 144 | 0; //@line 34505
     HEAP32[$202 >> 2] = $72; //@line 34506
     $203 = $ReallocAsyncCtx2 + 148 | 0; //@line 34507
     HEAP32[$203 >> 2] = $78; //@line 34508
     $204 = $ReallocAsyncCtx2 + 152 | 0; //@line 34509
     HEAP32[$204 >> 2] = $76; //@line 34510
     $205 = $ReallocAsyncCtx2 + 156 | 0; //@line 34511
     HEAP32[$205 >> 2] = $82; //@line 34512
     $206 = $ReallocAsyncCtx2 + 160 | 0; //@line 34513
     HEAP32[$206 >> 2] = $84; //@line 34514
     $207 = $ReallocAsyncCtx2 + 164 | 0; //@line 34515
     HEAP32[$207 >> 2] = $86; //@line 34516
     $208 = $ReallocAsyncCtx2 + 168 | 0; //@line 34517
     HEAP32[$208 >> 2] = $88; //@line 34518
     $209 = $ReallocAsyncCtx2 + 172 | 0; //@line 34519
     HEAP32[$209 >> 2] = $90; //@line 34520
     $210 = $ReallocAsyncCtx2 + 176 | 0; //@line 34521
     HEAP32[$210 >> 2] = $92; //@line 34522
     $211 = $ReallocAsyncCtx2 + 180 | 0; //@line 34523
     HEAP32[$211 >> 2] = $94; //@line 34524
     $212 = $ReallocAsyncCtx2 + 184 | 0; //@line 34525
     HEAP32[$212 >> 2] = $96; //@line 34526
     $213 = $ReallocAsyncCtx2 + 188 | 0; //@line 34527
     HEAP32[$213 >> 2] = $98; //@line 34528
     $214 = $ReallocAsyncCtx2 + 192 | 0; //@line 34529
     HEAP32[$214 >> 2] = $100; //@line 34530
     $215 = $ReallocAsyncCtx2 + 196 | 0; //@line 34531
     HEAP32[$215 >> 2] = $102; //@line 34532
     $216 = $ReallocAsyncCtx2 + 200 | 0; //@line 34533
     HEAP32[$216 >> 2] = $104; //@line 34534
     $217 = $ReallocAsyncCtx2 + 204 | 0; //@line 34535
     HEAP32[$217 >> 2] = $106; //@line 34536
     $218 = $ReallocAsyncCtx2 + 208 | 0; //@line 34537
     HEAP32[$218 >> 2] = $108; //@line 34538
     $219 = $ReallocAsyncCtx2 + 212 | 0; //@line 34539
     HEAP32[$219 >> 2] = $110; //@line 34540
     $220 = $ReallocAsyncCtx2 + 216 | 0; //@line 34541
     HEAP16[$220 >> 1] = $112; //@line 34542
     $221 = $ReallocAsyncCtx2 + 220 | 0; //@line 34543
     HEAP32[$221 >> 2] = $114; //@line 34544
     $222 = $ReallocAsyncCtx2 + 224 | 0; //@line 34545
     HEAP32[$222 >> 2] = $116; //@line 34546
     $223 = $ReallocAsyncCtx2 + 228 | 0; //@line 34547
     HEAP32[$223 >> 2] = $133; //@line 34548
     $224 = $ReallocAsyncCtx2 + 232 | 0; //@line 34549
     HEAP32[$224 >> 2] = $118; //@line 34550
     $225 = $ReallocAsyncCtx2 + 236 | 0; //@line 34551
     HEAP32[$225 >> 2] = $122; //@line 34552
     $226 = $ReallocAsyncCtx2 + 240 | 0; //@line 34553
     HEAP32[$226 >> 2] = $124; //@line 34554
     $227 = $ReallocAsyncCtx2 + 244 | 0; //@line 34555
     HEAP32[$227 >> 2] = $126; //@line 34556
     $228 = $ReallocAsyncCtx2 + 248 | 0; //@line 34557
     HEAP32[$228 >> 2] = $128; //@line 34558
     $229 = $ReallocAsyncCtx2 + 252 | 0; //@line 34559
     HEAP32[$229 >> 2] = $130; //@line 34560
     sp = STACKTOP; //@line 34561
     return;
    }
   }
   _mbed_tracef(2, 3844, 4002, $20); //@line 34565
  }
 } while (0);
 HEAP32[$AsyncRetVal + 4 >> 2] = 1; //@line 34569
 $$0 = $AsyncRetVal; //@line 34570
 $1041 = ___async_retval; //@line 34571
 HEAP32[$1041 >> 2] = $$0; //@line 34572
 return;
}
function _sn_coap_parser__async_cb_162($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$i$reg2mem$0 = 0, $$1202$i$reg2mem$1 = 0, $$1202$i$reg2mem$2 = 0, $$1202$in$i = 0, $$1202$in$i$reg2mem$0 = 0, $$1202$in$i$reg2mem$1 = 0, $$reg2mem$0 = 0, $$reg2mem$1 = 0, $$reg2mem60$0 = 0, $$reg2mem60$1 = 0, $$reg2mem71$0 = 0, $$reg2mem71$1 = 0, $$reg2mem71$2 = 0, $$reg2mem71$3 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $147 = 0, $150 = 0, $16 = 0, $164 = 0, $167 = 0, $169 = 0, $18 = 0, $181 = 0, $184 = 0, $185 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $264 = 0, $266 = 0, $272 = 0, $273 = 0, $278 = 0, $28 = 0, $281 = 0, $284 = 0, $285 = 0, $290 = 0, $293 = 0, $297 = 0, $30 = 0, $300 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $377 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $447 = 0, $450 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $527 = 0, $528 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $602 = 0, $605 = 0, $606 = 0, $611 = 0, $614 = 0, $616 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $757 = 0, $76 = 0, $760 = 0, $761 = 0, $766 = 0, $769 = 0, $771 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $844 = 0, $847 = 0, $848 = 0, $853 = 0, $856 = 0, $86 = 0, $860 = 0, $863 = 0, $864 = 0, $869 = 0, $872 = 0, $876 = 0, $879 = 0, $88 = 0, $880 = 0, $885 = 0, $888 = 0, $892 = 0, $893 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $907 = 0, $913 = 0, $914 = 0, $919 = 0, $92 = 0, $920 = 0, $925 = 0, $928 = 0, $932 = 0, $933 = 0, $94 = 0, $941 = 0, $942 = 0, $944 = 0, $951 = 0, $952 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc$i$reg2mem$0 = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $290$looptemp = 0, $611$looptemp = 0, $766$looptemp = 0, $853$looptemp = 0, $869$looptemp = 0, $885$looptemp = 0, $904$looptemp = 0, $925$looptemp = 0, $278$looptemp = 0;
 sp = STACKTOP; //@line 3281
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3283
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3285
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3287
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3289
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3291
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3293
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 3295
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3297
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3299
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3301
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3303
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3305
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3307
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 3309
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 3311
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 3313
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 3315
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 3317
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 3319
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 3321
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 3323
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 3325
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 3327
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 3329
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 3331
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 3333
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 3335
 $56 = HEAP16[$0 + 112 >> 1] | 0; //@line 3337
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 3339
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 3341
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 3343
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 3345
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 3347
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 3349
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 3351
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 3353
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 3355
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 3357
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 3359
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 3361
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 3363
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 3365
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 3367
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 3369
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 3371
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 3373
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 3375
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 3377
 $98 = HEAP16[$0 + 196 >> 1] | 0; //@line 3379
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 3381
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 3383
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 3385
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 3387
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 3389
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 3391
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 3393
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 3395
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 3397
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 3399
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 3401
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 3403
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 3405
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 3407
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 3409
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 3411
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 3413
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 3415
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 3417
 $138 = HEAP32[$0 + 276 >> 2] | 0; //@line 3419
 $140 = HEAP32[$0 + 280 >> 2] | 0; //@line 3421
 $142 = HEAP32[$0 + 284 >> 2] | 0; //@line 3423
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3425
 HEAP32[$44 >> 2] = $AsyncRetVal; //@line 3426
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3844, 3893, $106); //@line 3430
   label = 22; //@line 3431
  } else {
   dest = $AsyncRetVal; //@line 3433
   stop = dest + 68 | 0; //@line 3433
   do {
    HEAP32[dest >> 2] = 0; //@line 3433
    dest = dest + 4 | 0; //@line 3433
   } while ((dest | 0) < (stop | 0));
   $264 = HEAP32[$40 >> 2] | 0; //@line 3434
   HEAP32[$264 + 16 >> 2] = 0; //@line 3436
   $266 = $264 + 28 | 0; //@line 3437
   HEAP32[$264 + 12 >> 2] = -1; //@line 3439
   HEAP32[$266 >> 2] = -1; //@line 3440
   HEAP32[$266 + 4 >> 2] = -1; //@line 3440
   HEAP32[$266 + 8 >> 2] = -1; //@line 3440
   HEAP32[$266 + 12 >> 2] = -1; //@line 3440
   if (!$264) {
    label = 22; //@line 3443
   } else {
    $$1202$i$reg2mem$0 = $98; //@line 3445
    $$1202$in$i$reg2mem$0 = $88; //@line 3445
    $$reg2mem$0 = $56; //@line 3445
    $$reg2mem60$0 = $122; //@line 3445
    $$reg2mem71$0 = $132; //@line 3445
    $trunc$i$reg2mem$0 = $14; //@line 3445
    L5 : while (1) {
     switch ($trunc$i$reg2mem$0 << 16 >> 16) {
     case 35:
      {
       label = 35; //@line 3449
       break L5;
       break;
      }
     case 4:
      {
       label = 41; //@line 3454
       break L5;
       break;
      }
     case 3:
      {
       label = 44; //@line 3459
       break L5;
       break;
      }
     case 8:
      {
       label = 50; //@line 3464
       break L5;
       break;
      }
     case 20:
      {
       label = 61; //@line 3469
       break L5;
       break;
      }
     case 11:
      {
       $$1202$i$reg2mem$2 = $$1202$i$reg2mem$0; //@line 3474
       $$reg2mem$1 = $$reg2mem$0; //@line 3474
       $$reg2mem71$2 = $$reg2mem71$0; //@line 3474
       label = 64; //@line 3475
       break L5;
       break;
      }
     case 15:
      {
       label = 73; //@line 3480
       break L5;
       break;
      }
     case 12:
      {
       $$1202$i$reg2mem$1 = $$1202$i$reg2mem$0; //@line 3485
       $$1202$in$i$reg2mem$1 = $$1202$in$i$reg2mem$0; //@line 3485
       $$reg2mem60$1 = $$reg2mem60$0; //@line 3485
       $$reg2mem71$1 = $$reg2mem71$0; //@line 3485
       label = 24; //@line 3486
       break;
      }
     case 14:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        label = 31; //@line 3492
        break L5;
       }
       $284 = $$reg2mem60$0 + 1 | 0; //@line 3495
       HEAP32[$94 >> 2] = $284; //@line 3496
       $285 = $$1202$in$i$reg2mem$0 & 255; //@line 3497
       if (!($285 << 24 >> 24)) {
        $$0$lcssa$i223$i = 0; //@line 3500
       } else {
        $$045$i221$i = $285; //@line 3502
        $$06$i220$i = 0; //@line 3502
        $290 = $284; //@line 3502
        while (1) {
         $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 3504
         $290$looptemp = $290;
         $290 = $290 + 1 | 0; //@line 3506
         HEAP32[$94 >> 2] = $290; //@line 3507
         $293 = $$06$i220$i << 8 | HEAPU8[$290$looptemp >> 0]; //@line 3510
         if (!($$045$i221$i << 24 >> 24)) {
          $$0$lcssa$i223$i = $293; //@line 3513
          break;
         } else {
          $$06$i220$i = $293; //@line 3516
         }
        }
       }
       HEAP32[(HEAP32[$40 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 3522
       $$reg2mem71$3 = $$reg2mem71$0; //@line 3523
       break;
      }
     case 7:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        label = 57; //@line 3529
        break L5;
       }
       $602 = (HEAP32[$40 >> 2] | 0) + 28 | 0; //@line 3533
       if ((HEAP32[$602 >> 2] | 0) != -1) {
        label = 57; //@line 3537
        break L5;
       }
       $605 = $$reg2mem60$0 + 1 | 0; //@line 3540
       HEAP32[$94 >> 2] = $605; //@line 3541
       $606 = $$1202$in$i$reg2mem$0 & 255; //@line 3542
       if (!($606 << 24 >> 24)) {
        $$0$lcssa$i265$i = 0; //@line 3545
       } else {
        $$045$i263$i = $606; //@line 3547
        $$06$i262$i = 0; //@line 3547
        $611 = $605; //@line 3547
        while (1) {
         $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 3549
         $611$looptemp = $611;
         $611 = $611 + 1 | 0; //@line 3551
         HEAP32[$94 >> 2] = $611; //@line 3552
         $614 = $$06$i262$i << 8 | HEAPU8[$611$looptemp >> 0]; //@line 3555
         if (!($$045$i263$i << 24 >> 24)) {
          $$0$lcssa$i265$i = $614; //@line 3558
          break;
         } else {
          $$06$i262$i = $614; //@line 3561
         }
        }
       }
       HEAP32[$602 >> 2] = $$0$lcssa$i265$i; //@line 3565
       $$reg2mem71$3 = $$reg2mem71$0; //@line 3566
       break;
      }
     case 6:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        label = 69; //@line 3572
        break L5;
       }
       $757 = (HEAP32[$40 >> 2] | 0) + 32 | 0; //@line 3576
       if ((HEAP32[$757 >> 2] | 0) != -1) {
        label = 69; //@line 3580
        break L5;
       }
       $760 = $$reg2mem60$0 + 1 | 0; //@line 3583
       HEAP32[$94 >> 2] = $760; //@line 3584
       $761 = $$1202$in$i$reg2mem$0 & 255; //@line 3585
       if (!($761 << 24 >> 24)) {
        $$0$lcssa$i272$i = 0; //@line 3588
       } else {
        $$045$i270$i = $761; //@line 3590
        $$06$i269$i = 0; //@line 3590
        $766 = $760; //@line 3590
        while (1) {
         $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 3592
         $766$looptemp = $766;
         $766 = $766 + 1 | 0; //@line 3594
         HEAP32[$94 >> 2] = $766; //@line 3595
         $769 = $$06$i269$i << 8 | HEAPU8[$766$looptemp >> 0]; //@line 3598
         if (!($$045$i270$i << 24 >> 24)) {
          $$0$lcssa$i272$i = $769; //@line 3601
          break;
         } else {
          $$06$i269$i = $769; //@line 3604
         }
        }
       }
       HEAP32[$757 >> 2] = $$0$lcssa$i272$i; //@line 3608
       $$reg2mem71$3 = $$reg2mem71$0; //@line 3609
       break;
      }
     case 23:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 3) {
        label = 78; //@line 3615
        break L5;
       }
       $844 = (HEAP32[$40 >> 2] | 0) + 40 | 0; //@line 3619
       if ((HEAP32[$844 >> 2] | 0) != -1) {
        label = 78; //@line 3623
        break L5;
       }
       $847 = $$reg2mem60$0 + 1 | 0; //@line 3626
       HEAP32[$94 >> 2] = $847; //@line 3627
       $848 = $$1202$in$i$reg2mem$0 & 255; //@line 3628
       if (!($848 << 24 >> 24)) {
        $$0$lcssa$i258$i = 0; //@line 3631
       } else {
        $$045$i256$i = $848; //@line 3633
        $$06$i255$i = 0; //@line 3633
        $853 = $847; //@line 3633
        while (1) {
         $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 3635
         $853$looptemp = $853;
         $853 = $853 + 1 | 0; //@line 3637
         HEAP32[$94 >> 2] = $853; //@line 3638
         $856 = $$06$i255$i << 8 | HEAPU8[$853$looptemp >> 0]; //@line 3641
         if (!($$045$i256$i << 24 >> 24)) {
          $$0$lcssa$i258$i = $856; //@line 3644
          break;
         } else {
          $$06$i255$i = $856; //@line 3647
         }
        }
       }
       HEAP32[$844 >> 2] = $$0$lcssa$i258$i; //@line 3651
       $$reg2mem71$3 = $$reg2mem71$0; //@line 3652
       break;
      }
     case 27:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 3) {
        label = 84; //@line 3658
        break L5;
       }
       $860 = (HEAP32[$40 >> 2] | 0) + 36 | 0; //@line 3662
       if ((HEAP32[$860 >> 2] | 0) != -1) {
        label = 84; //@line 3666
        break L5;
       }
       $863 = $$reg2mem60$0 + 1 | 0; //@line 3669
       HEAP32[$94 >> 2] = $863; //@line 3670
       $864 = $$1202$in$i$reg2mem$0 & 255; //@line 3671
       if (!($864 << 24 >> 24)) {
        $$0$lcssa$i251$i = 0; //@line 3674
       } else {
        $$045$i249$i = $864; //@line 3676
        $$06$i248$i = 0; //@line 3676
        $869 = $863; //@line 3676
        while (1) {
         $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 3678
         $869$looptemp = $869;
         $869 = $869 + 1 | 0; //@line 3680
         HEAP32[$94 >> 2] = $869; //@line 3681
         $872 = $$06$i248$i << 8 | HEAPU8[$869$looptemp >> 0]; //@line 3684
         if (!($$045$i249$i << 24 >> 24)) {
          $$0$lcssa$i251$i = $872; //@line 3687
          break;
         } else {
          $$06$i248$i = $872; //@line 3690
         }
        }
       }
       HEAP32[$860 >> 2] = $$0$lcssa$i251$i; //@line 3694
       $$reg2mem71$3 = $$reg2mem71$0; //@line 3695
       break;
      }
     case 17:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        label = 90; //@line 3701
        break L5;
       }
       $876 = (HEAP32[$40 >> 2] | 0) + 12 | 0; //@line 3705
       if ((HEAP32[$876 >> 2] | 0) != -1) {
        label = 90; //@line 3709
        break L5;
       }
       $879 = $$reg2mem60$0 + 1 | 0; //@line 3712
       HEAP32[$94 >> 2] = $879; //@line 3713
       $880 = $$1202$in$i$reg2mem$0 & 255; //@line 3714
       if (!($880 << 24 >> 24)) {
        $$0$lcssa$i244$i = 0; //@line 3717
       } else {
        $$045$i242$i = $880; //@line 3719
        $$06$i241$i = 0; //@line 3719
        $885 = $879; //@line 3719
        while (1) {
         $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 3721
         $885$looptemp = $885;
         $885 = $885 + 1 | 0; //@line 3723
         HEAP32[$94 >> 2] = $885; //@line 3724
         $888 = $$06$i241$i << 8 | HEAPU8[$885$looptemp >> 0]; //@line 3727
         if (!($$045$i242$i << 24 >> 24)) {
          $$0$lcssa$i244$i = $888; //@line 3730
          break;
         } else {
          $$06$i241$i = $888; //@line 3733
         }
        }
       }
       HEAP32[$876 >> 2] = $$0$lcssa$i244$i; //@line 3737
       $$reg2mem71$3 = $$reg2mem71$0; //@line 3738
       break;
      }
     case 60:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        label = 96; //@line 3744
        break L5;
       }
       $892 = (HEAP32[$40 >> 2] | 0) + 1 | 0; //@line 3748
       $893 = HEAP8[$892 >> 0] | 0; //@line 3749
       if ($893 & 1) {
        label = 96; //@line 3753
        break L5;
       }
       HEAP8[$892 >> 0] = $893 | 1; //@line 3757
       $898 = (HEAP32[$94 >> 2] | 0) + 1 | 0; //@line 3759
       HEAP32[$94 >> 2] = $898; //@line 3760
       $899 = $$1202$in$i$reg2mem$0 & 255; //@line 3761
       if (!($899 << 24 >> 24)) {
        $$0$lcssa$i237$i = 0; //@line 3764
       } else {
        $$045$i235$i = $899; //@line 3766
        $$06$i234$i = 0; //@line 3766
        $904 = $898; //@line 3766
        while (1) {
         $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 3768
         $904$looptemp = $904;
         $904 = $904 + 1 | 0; //@line 3770
         HEAP32[$94 >> 2] = $904; //@line 3771
         $907 = $$06$i234$i << 8 | HEAPU8[$904$looptemp >> 0]; //@line 3774
         if (!($$045$i235$i << 24 >> 24)) {
          $$0$lcssa$i237$i = $907; //@line 3777
          break;
         } else {
          $$06$i234$i = $907; //@line 3780
         }
        }
       }
       HEAP32[(HEAP32[$40 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 3786
       $$reg2mem71$3 = $$reg2mem71$0; //@line 3787
       break;
      }
     case 28:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        label = 102; //@line 3793
        break L5;
       }
       $913 = (HEAP32[$40 >> 2] | 0) + 1 | 0; //@line 3797
       $914 = HEAP8[$913 >> 0] | 0; //@line 3798
       if ($914 & 2) {
        label = 102; //@line 3802
        break L5;
       }
       HEAP8[$913 >> 0] = $914 | 2; //@line 3806
       $919 = (HEAP32[$94 >> 2] | 0) + 1 | 0; //@line 3808
       HEAP32[$94 >> 2] = $919; //@line 3809
       $920 = $$1202$in$i$reg2mem$0 & 255; //@line 3810
       if (!($920 << 24 >> 24)) {
        $$0$lcssa$i230$i = 0; //@line 3813
       } else {
        $$045$i228$i = $920; //@line 3815
        $$06$i227$i = 0; //@line 3815
        $925 = $919; //@line 3815
        while (1) {
         $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 3817
         $925$looptemp = $925;
         $925 = $925 + 1 | 0; //@line 3819
         HEAP32[$94 >> 2] = $925; //@line 3820
         $928 = $$06$i227$i << 8 | HEAPU8[$925$looptemp >> 0]; //@line 3823
         if (!($$045$i228$i << 24 >> 24)) {
          $$0$lcssa$i230$i = $928; //@line 3826
          break;
         } else {
          $$06$i227$i = $928; //@line 3829
         }
        }
       }
       HEAP32[(HEAP32[$40 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 3835
       $$reg2mem71$3 = $$reg2mem71$0; //@line 3836
       break;
      }
     default:
      {
       label = 106; //@line 3840
       break L5;
      }
     }
     L63 : while (1) {
      if ((label | 0) == 24) {
       label = 0; //@line 3846
       if (($$1202$i$reg2mem$1 & 65535) > 2) {
        label = 26; //@line 3849
        break L5;
       }
       if ((HEAP32[$130 >> 2] | 0) != -1) {
        label = 26; //@line 3855
        break L5;
       }
       $272 = $$reg2mem60$1 + 1 | 0; //@line 3858
       HEAP32[$94 >> 2] = $272; //@line 3859
       $273 = $$1202$in$i$reg2mem$1 & 255; //@line 3860
       if (!($273 << 24 >> 24)) {
        $$0$lcssa$i$i = 0; //@line 3863
       } else {
        $$045$i$i = $273; //@line 3865
        $$06$i$i = 0; //@line 3865
        $278 = $272; //@line 3865
        while (1) {
         $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 3867
         $278$looptemp = $278;
         $278 = $278 + 1 | 0; //@line 3869
         HEAP32[$94 >> 2] = $278; //@line 3870
         $281 = $$06$i$i << 8 | HEAPU8[$278$looptemp >> 0]; //@line 3873
         if (!($$045$i$i << 24 >> 24)) {
          $$0$lcssa$i$i = $281; //@line 3876
          break;
         } else {
          $$06$i$i = $281; //@line 3879
         }
        }
       }
       HEAP32[$130 >> 2] = $$0$lcssa$i$i; //@line 3883
       $$reg2mem71$3 = $$reg2mem71$1; //@line 3884
      }
      $932 = HEAP32[$124 >> 2] | 0; //@line 3886
      $933 = $932 - $6 | 0; //@line 3887
      $147 = $932; //@line 3890
      if (($933 | 0) > ($18 | 0)) {
       break L2;
      }
      if (!(($18 - $933 & 65535) << 16 >> 16)) {
       label = 109; //@line 3897
       break L5;
      }
      $trunc277$i = HEAP8[$147 >> 0] | 0; //@line 3900
      if ($trunc277$i << 24 >> 24 == -1) {
       label = 109; //@line 3903
       break L5;
      }
      $150 = $trunc277$i & 15; //@line 3907
      $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 3908
      switch ($trunc276$i & 15) {
      case 15:
       {
        label = 7; //@line 3913
        break L5;
        break;
       }
      case 13:
       {
        $$sink$i = HEAPU8[$147 + 1 >> 0] | 0; //@line 3921
        $$sink214$i = 13; //@line 3921
        $$sink3$i = 1; //@line 3921
        label = 8; //@line 3922
        break;
       }
      case 14:
       {
        $$sink$i = (HEAPU8[$147 + 1 >> 0] << 8) + 269 | 0; //@line 3934
        $$sink214$i = HEAPU8[$147 + 2 >> 0] | 0; //@line 3934
        $$sink3$i = 2; //@line 3934
        label = 8; //@line 3935
        break;
       }
      default:
       {
        $$1$i = $trunc276$i & 255; //@line 3939
        $169 = $147; //@line 3939
        $952 = $932; //@line 3939
       }
      }
      if ((label | 0) == 8) {
       label = 0; //@line 3943
       $164 = $147 + $$sink3$i | 0; //@line 3945
       HEAP32[$94 >> 2] = $164; //@line 3946
       $$1$i = $$sink$i + $$sink214$i | 0; //@line 3948
       $169 = $164; //@line 3948
       $952 = $164; //@line 3948
      }
      $167 = $$1$i + ($$reg2mem71$3 & 255) | 0; //@line 3951
      switch ($trunc277$i & 15) {
      case 15:
       {
        label = 12; //@line 3955
        break L5;
        break;
       }
      case 13:
       {
        $$sink215$i = HEAPU8[$169 + 1 >> 0] | 0; //@line 3963
        $$sink216$i = 13; //@line 3963
        $$sink8$i = 1; //@line 3963
        label = 13; //@line 3964
        break;
       }
      case 14:
       {
        $$sink215$i = (HEAPU8[$169 + 1 >> 0] << 8) + 269 | 0; //@line 3976
        $$sink216$i = HEAPU8[$169 + 2 >> 0] | 0; //@line 3976
        $$sink8$i = 2; //@line 3976
        label = 13; //@line 3977
        break;
       }
      default:
       {
        $$1202$in$i = $150; //@line 3981
        $184 = $952; //@line 3981
        $251 = $169; //@line 3981
       }
      }
      if ((label | 0) == 13) {
       label = 0; //@line 3985
       $181 = $169 + $$sink8$i | 0; //@line 3987
       HEAP32[$94 >> 2] = $181; //@line 3988
       $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 3990
       $184 = $181; //@line 3990
       $251 = $181; //@line 3990
      }
      $$1202$i = $$1202$in$i & 65535; //@line 3992
      $185 = $30 - $184 & 65535; //@line 3994
      $trunc$i = $167 & 65535; //@line 3995
      switch ($trunc$i << 16 >> 16) {
      case 11:
       {
        $$1202$i$reg2mem$2 = $$1202$i; //@line 3998
        $$reg2mem$1 = $185; //@line 3998
        $$reg2mem71$2 = $167; //@line 3998
        label = 64; //@line 3999
        break L5;
        break;
       }
      case 12:
       {
        $$1202$i$reg2mem$1 = $$1202$i; //@line 4004
        $$1202$in$i$reg2mem$1 = $$1202$in$i; //@line 4004
        $$reg2mem60$1 = $251; //@line 4004
        $$reg2mem71$1 = $167; //@line 4004
        label = 24; //@line 4005
        break;
       }
      case 28:
      case 60:
      case 17:
      case 27:
      case 23:
      case 15:
      case 6:
      case 20:
      case 7:
      case 8:
      case 3:
      case 4:
      case 35:
      case 14:
       {
        break L63;
        break;
       }
      default:
       {
        label = 106; //@line 4013
        break L5;
       }
      }
     }
     if (!(HEAP32[$40 >> 2] | 0)) {
      label = 16; //@line 4021
      break;
     } else {
      $$1202$i$reg2mem$0 = $$1202$i; //@line 4024
      $$1202$in$i$reg2mem$0 = $$1202$in$i; //@line 4024
      $$reg2mem$0 = $185; //@line 4024
      $$reg2mem60$0 = $251; //@line 4024
      $$reg2mem71$0 = $167; //@line 4024
      $trunc$i$reg2mem$0 = $trunc$i; //@line 4024
     }
    }
    switch (label | 0) {
    case 7:
     {
      _mbed_tracef(2, 3844, 4107, $8); //@line 4029
      break L2;
      break;
     }
    case 12:
     {
      _mbed_tracef(2, 3844, 4165, $60); //@line 4034
      break L2;
      break;
     }
    case 16:
     {
      $188 = HEAP32[$42 >> 2] | 0; //@line 4039
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 4040
      $189 = FUNCTION_TABLE_ii[$188 & 31](68) | 0; //@line 4041
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 4044
       $190 = $ReallocAsyncCtx3 + 4 | 0; //@line 4045
       HEAP32[$190 >> 2] = $2; //@line 4046
       $191 = $ReallocAsyncCtx3 + 8 | 0; //@line 4047
       HEAP32[$191 >> 2] = $4; //@line 4048
       $192 = $ReallocAsyncCtx3 + 12 | 0; //@line 4049
       HEAP32[$192 >> 2] = $6; //@line 4050
       $193 = $ReallocAsyncCtx3 + 16 | 0; //@line 4051
       HEAP32[$193 >> 2] = $8; //@line 4052
       $194 = $ReallocAsyncCtx3 + 20 | 0; //@line 4053
       HEAP32[$194 >> 2] = $10; //@line 4054
       $195 = $ReallocAsyncCtx3 + 24 | 0; //@line 4055
       HEAP32[$195 >> 2] = $12; //@line 4056
       $196 = $ReallocAsyncCtx3 + 28 | 0; //@line 4057
       HEAP16[$196 >> 1] = $trunc$i; //@line 4058
       $197 = $ReallocAsyncCtx3 + 32 | 0; //@line 4059
       HEAP32[$197 >> 2] = $16; //@line 4060
       $198 = $ReallocAsyncCtx3 + 36 | 0; //@line 4061
       HEAP32[$198 >> 2] = $18; //@line 4062
       $199 = $ReallocAsyncCtx3 + 40 | 0; //@line 4063
       HEAP32[$199 >> 2] = $20; //@line 4064
       $200 = $ReallocAsyncCtx3 + 44 | 0; //@line 4065
       HEAP32[$200 >> 2] = $22; //@line 4066
       $201 = $ReallocAsyncCtx3 + 48 | 0; //@line 4067
       HEAP32[$201 >> 2] = $24; //@line 4068
       $202 = $ReallocAsyncCtx3 + 52 | 0; //@line 4069
       HEAP32[$202 >> 2] = $26; //@line 4070
       $203 = $ReallocAsyncCtx3 + 56 | 0; //@line 4071
       HEAP32[$203 >> 2] = $28; //@line 4072
       $204 = $ReallocAsyncCtx3 + 60 | 0; //@line 4073
       HEAP32[$204 >> 2] = $30; //@line 4074
       $205 = $ReallocAsyncCtx3 + 64 | 0; //@line 4075
       HEAP32[$205 >> 2] = $32; //@line 4076
       $206 = $ReallocAsyncCtx3 + 68 | 0; //@line 4077
       HEAP32[$206 >> 2] = $34; //@line 4078
       $207 = $ReallocAsyncCtx3 + 72 | 0; //@line 4079
       HEAP32[$207 >> 2] = $36; //@line 4080
       $208 = $ReallocAsyncCtx3 + 76 | 0; //@line 4081
       HEAP32[$208 >> 2] = $38; //@line 4082
       $209 = $ReallocAsyncCtx3 + 80 | 0; //@line 4083
       HEAP32[$209 >> 2] = $40; //@line 4084
       $210 = $ReallocAsyncCtx3 + 84 | 0; //@line 4085
       HEAP32[$210 >> 2] = $42; //@line 4086
       $211 = $ReallocAsyncCtx3 + 88 | 0; //@line 4087
       HEAP32[$211 >> 2] = $44; //@line 4088
       $212 = $ReallocAsyncCtx3 + 92 | 0; //@line 4089
       HEAP32[$212 >> 2] = $46; //@line 4090
       $213 = $ReallocAsyncCtx3 + 96 | 0; //@line 4091
       HEAP32[$213 >> 2] = $48; //@line 4092
       $214 = $ReallocAsyncCtx3 + 100 | 0; //@line 4093
       HEAP32[$214 >> 2] = $50; //@line 4094
       $215 = $ReallocAsyncCtx3 + 104 | 0; //@line 4095
       HEAP32[$215 >> 2] = $52; //@line 4096
       $216 = $ReallocAsyncCtx3 + 108 | 0; //@line 4097
       HEAP32[$216 >> 2] = $54; //@line 4098
       $217 = $ReallocAsyncCtx3 + 112 | 0; //@line 4099
       HEAP16[$217 >> 1] = $185; //@line 4100
       $218 = $ReallocAsyncCtx3 + 116 | 0; //@line 4101
       HEAP32[$218 >> 2] = $58; //@line 4102
       $219 = $ReallocAsyncCtx3 + 120 | 0; //@line 4103
       HEAP32[$219 >> 2] = $60; //@line 4104
       $220 = $ReallocAsyncCtx3 + 124 | 0; //@line 4105
       HEAP32[$220 >> 2] = $62; //@line 4106
       $221 = $ReallocAsyncCtx3 + 128 | 0; //@line 4107
       HEAP32[$221 >> 2] = $64; //@line 4108
       $222 = $ReallocAsyncCtx3 + 132 | 0; //@line 4109
       HEAP32[$222 >> 2] = $66; //@line 4110
       $223 = $ReallocAsyncCtx3 + 136 | 0; //@line 4111
       HEAP32[$223 >> 2] = $68; //@line 4112
       $224 = $ReallocAsyncCtx3 + 140 | 0; //@line 4113
       HEAP32[$224 >> 2] = $70; //@line 4114
       $225 = $ReallocAsyncCtx3 + 144 | 0; //@line 4115
       HEAP32[$225 >> 2] = $72; //@line 4116
       $226 = $ReallocAsyncCtx3 + 148 | 0; //@line 4117
       HEAP32[$226 >> 2] = $74; //@line 4118
       $227 = $ReallocAsyncCtx3 + 152 | 0; //@line 4119
       HEAP32[$227 >> 2] = $76; //@line 4120
       $228 = $ReallocAsyncCtx3 + 156 | 0; //@line 4121
       HEAP32[$228 >> 2] = $78; //@line 4122
       $229 = $ReallocAsyncCtx3 + 160 | 0; //@line 4123
       HEAP32[$229 >> 2] = $80; //@line 4124
       $230 = $ReallocAsyncCtx3 + 164 | 0; //@line 4125
       HEAP32[$230 >> 2] = $82; //@line 4126
       $231 = $ReallocAsyncCtx3 + 168 | 0; //@line 4127
       HEAP32[$231 >> 2] = $84; //@line 4128
       $232 = $ReallocAsyncCtx3 + 172 | 0; //@line 4129
       HEAP32[$232 >> 2] = $86; //@line 4130
       $233 = $ReallocAsyncCtx3 + 176 | 0; //@line 4131
       HEAP32[$233 >> 2] = $$1202$in$i; //@line 4132
       $234 = $ReallocAsyncCtx3 + 180 | 0; //@line 4133
       HEAP32[$234 >> 2] = $90; //@line 4134
       $235 = $ReallocAsyncCtx3 + 184 | 0; //@line 4135
       HEAP32[$235 >> 2] = $92; //@line 4136
       $236 = $ReallocAsyncCtx3 + 188 | 0; //@line 4137
       HEAP32[$236 >> 2] = $94; //@line 4138
       $237 = $ReallocAsyncCtx3 + 192 | 0; //@line 4139
       HEAP32[$237 >> 2] = $96; //@line 4140
       $238 = $ReallocAsyncCtx3 + 196 | 0; //@line 4141
       HEAP16[$238 >> 1] = $$1202$i; //@line 4142
       $239 = $ReallocAsyncCtx3 + 200 | 0; //@line 4143
       HEAP32[$239 >> 2] = $100; //@line 4144
       $240 = $ReallocAsyncCtx3 + 204 | 0; //@line 4145
       HEAP32[$240 >> 2] = $102; //@line 4146
       $241 = $ReallocAsyncCtx3 + 208 | 0; //@line 4147
       HEAP32[$241 >> 2] = $104; //@line 4148
       $242 = $ReallocAsyncCtx3 + 212 | 0; //@line 4149
       HEAP32[$242 >> 2] = $106; //@line 4150
       $243 = $ReallocAsyncCtx3 + 216 | 0; //@line 4151
       HEAP32[$243 >> 2] = $108; //@line 4152
       $244 = $ReallocAsyncCtx3 + 220 | 0; //@line 4153
       HEAP32[$244 >> 2] = $110; //@line 4154
       $245 = $ReallocAsyncCtx3 + 224 | 0; //@line 4155
       HEAP32[$245 >> 2] = $112; //@line 4156
       $246 = $ReallocAsyncCtx3 + 228 | 0; //@line 4157
       HEAP32[$246 >> 2] = $114; //@line 4158
       $247 = $ReallocAsyncCtx3 + 232 | 0; //@line 4159
       HEAP32[$247 >> 2] = $116; //@line 4160
       $248 = $ReallocAsyncCtx3 + 236 | 0; //@line 4161
       HEAP32[$248 >> 2] = $118; //@line 4162
       $249 = $ReallocAsyncCtx3 + 240 | 0; //@line 4163
       HEAP32[$249 >> 2] = $120; //@line 4164
       $250 = $ReallocAsyncCtx3 + 244 | 0; //@line 4165
       HEAP32[$250 >> 2] = $251; //@line 4166
       $252 = $ReallocAsyncCtx3 + 248 | 0; //@line 4167
       HEAP32[$252 >> 2] = $124; //@line 4168
       $253 = $ReallocAsyncCtx3 + 252 | 0; //@line 4169
       HEAP32[$253 >> 2] = $126; //@line 4170
       $254 = $ReallocAsyncCtx3 + 256 | 0; //@line 4171
       HEAP32[$254 >> 2] = $128; //@line 4172
       $255 = $ReallocAsyncCtx3 + 260 | 0; //@line 4173
       HEAP32[$255 >> 2] = $130; //@line 4174
       $256 = $ReallocAsyncCtx3 + 264 | 0; //@line 4175
       HEAP32[$256 >> 2] = $167; //@line 4176
       $257 = $ReallocAsyncCtx3 + 268 | 0; //@line 4177
       HEAP32[$257 >> 2] = $134; //@line 4178
       $258 = $ReallocAsyncCtx3 + 272 | 0; //@line 4179
       HEAP32[$258 >> 2] = $136; //@line 4180
       $259 = $ReallocAsyncCtx3 + 276 | 0; //@line 4181
       HEAP32[$259 >> 2] = $138; //@line 4182
       $260 = $ReallocAsyncCtx3 + 280 | 0; //@line 4183
       HEAP32[$260 >> 2] = $140; //@line 4184
       $261 = $ReallocAsyncCtx3 + 284 | 0; //@line 4185
       HEAP32[$261 >> 2] = $142; //@line 4186
       sp = STACKTOP; //@line 4187
       return;
      }
      HEAP32[___async_retval >> 2] = $189; //@line 4191
      ___async_unwind = 0; //@line 4192
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 4193
      $190 = $ReallocAsyncCtx3 + 4 | 0; //@line 4194
      HEAP32[$190 >> 2] = $2; //@line 4195
      $191 = $ReallocAsyncCtx3 + 8 | 0; //@line 4196
      HEAP32[$191 >> 2] = $4; //@line 4197
      $192 = $ReallocAsyncCtx3 + 12 | 0; //@line 4198
      HEAP32[$192 >> 2] = $6; //@line 4199
      $193 = $ReallocAsyncCtx3 + 16 | 0; //@line 4200
      HEAP32[$193 >> 2] = $8; //@line 4201
      $194 = $ReallocAsyncCtx3 + 20 | 0; //@line 4202
      HEAP32[$194 >> 2] = $10; //@line 4203
      $195 = $ReallocAsyncCtx3 + 24 | 0; //@line 4204
      HEAP32[$195 >> 2] = $12; //@line 4205
      $196 = $ReallocAsyncCtx3 + 28 | 0; //@line 4206
      HEAP16[$196 >> 1] = $trunc$i; //@line 4207
      $197 = $ReallocAsyncCtx3 + 32 | 0; //@line 4208
      HEAP32[$197 >> 2] = $16; //@line 4209
      $198 = $ReallocAsyncCtx3 + 36 | 0; //@line 4210
      HEAP32[$198 >> 2] = $18; //@line 4211
      $199 = $ReallocAsyncCtx3 + 40 | 0; //@line 4212
      HEAP32[$199 >> 2] = $20; //@line 4213
      $200 = $ReallocAsyncCtx3 + 44 | 0; //@line 4214
      HEAP32[$200 >> 2] = $22; //@line 4215
      $201 = $ReallocAsyncCtx3 + 48 | 0; //@line 4216
      HEAP32[$201 >> 2] = $24; //@line 4217
      $202 = $ReallocAsyncCtx3 + 52 | 0; //@line 4218
      HEAP32[$202 >> 2] = $26; //@line 4219
      $203 = $ReallocAsyncCtx3 + 56 | 0; //@line 4220
      HEAP32[$203 >> 2] = $28; //@line 4221
      $204 = $ReallocAsyncCtx3 + 60 | 0; //@line 4222
      HEAP32[$204 >> 2] = $30; //@line 4223
      $205 = $ReallocAsyncCtx3 + 64 | 0; //@line 4224
      HEAP32[$205 >> 2] = $32; //@line 4225
      $206 = $ReallocAsyncCtx3 + 68 | 0; //@line 4226
      HEAP32[$206 >> 2] = $34; //@line 4227
      $207 = $ReallocAsyncCtx3 + 72 | 0; //@line 4228
      HEAP32[$207 >> 2] = $36; //@line 4229
      $208 = $ReallocAsyncCtx3 + 76 | 0; //@line 4230
      HEAP32[$208 >> 2] = $38; //@line 4231
      $209 = $ReallocAsyncCtx3 + 80 | 0; //@line 4232
      HEAP32[$209 >> 2] = $40; //@line 4233
      $210 = $ReallocAsyncCtx3 + 84 | 0; //@line 4234
      HEAP32[$210 >> 2] = $42; //@line 4235
      $211 = $ReallocAsyncCtx3 + 88 | 0; //@line 4236
      HEAP32[$211 >> 2] = $44; //@line 4237
      $212 = $ReallocAsyncCtx3 + 92 | 0; //@line 4238
      HEAP32[$212 >> 2] = $46; //@line 4239
      $213 = $ReallocAsyncCtx3 + 96 | 0; //@line 4240
      HEAP32[$213 >> 2] = $48; //@line 4241
      $214 = $ReallocAsyncCtx3 + 100 | 0; //@line 4242
      HEAP32[$214 >> 2] = $50; //@line 4243
      $215 = $ReallocAsyncCtx3 + 104 | 0; //@line 4244
      HEAP32[$215 >> 2] = $52; //@line 4245
      $216 = $ReallocAsyncCtx3 + 108 | 0; //@line 4246
      HEAP32[$216 >> 2] = $54; //@line 4247
      $217 = $ReallocAsyncCtx3 + 112 | 0; //@line 4248
      HEAP16[$217 >> 1] = $185; //@line 4249
      $218 = $ReallocAsyncCtx3 + 116 | 0; //@line 4250
      HEAP32[$218 >> 2] = $58; //@line 4251
      $219 = $ReallocAsyncCtx3 + 120 | 0; //@line 4252
      HEAP32[$219 >> 2] = $60; //@line 4253
      $220 = $ReallocAsyncCtx3 + 124 | 0; //@line 4254
      HEAP32[$220 >> 2] = $62; //@line 4255
      $221 = $ReallocAsyncCtx3 + 128 | 0; //@line 4256
      HEAP32[$221 >> 2] = $64; //@line 4257
      $222 = $ReallocAsyncCtx3 + 132 | 0; //@line 4258
      HEAP32[$222 >> 2] = $66; //@line 4259
      $223 = $ReallocAsyncCtx3 + 136 | 0; //@line 4260
      HEAP32[$223 >> 2] = $68; //@line 4261
      $224 = $ReallocAsyncCtx3 + 140 | 0; //@line 4262
      HEAP32[$224 >> 2] = $70; //@line 4263
      $225 = $ReallocAsyncCtx3 + 144 | 0; //@line 4264
      HEAP32[$225 >> 2] = $72; //@line 4265
      $226 = $ReallocAsyncCtx3 + 148 | 0; //@line 4266
      HEAP32[$226 >> 2] = $74; //@line 4267
      $227 = $ReallocAsyncCtx3 + 152 | 0; //@line 4268
      HEAP32[$227 >> 2] = $76; //@line 4269
      $228 = $ReallocAsyncCtx3 + 156 | 0; //@line 4270
      HEAP32[$228 >> 2] = $78; //@line 4271
      $229 = $ReallocAsyncCtx3 + 160 | 0; //@line 4272
      HEAP32[$229 >> 2] = $80; //@line 4273
      $230 = $ReallocAsyncCtx3 + 164 | 0; //@line 4274
      HEAP32[$230 >> 2] = $82; //@line 4275
      $231 = $ReallocAsyncCtx3 + 168 | 0; //@line 4276
      HEAP32[$231 >> 2] = $84; //@line 4277
      $232 = $ReallocAsyncCtx3 + 172 | 0; //@line 4278
      HEAP32[$232 >> 2] = $86; //@line 4279
      $233 = $ReallocAsyncCtx3 + 176 | 0; //@line 4280
      HEAP32[$233 >> 2] = $$1202$in$i; //@line 4281
      $234 = $ReallocAsyncCtx3 + 180 | 0; //@line 4282
      HEAP32[$234 >> 2] = $90; //@line 4283
      $235 = $ReallocAsyncCtx3 + 184 | 0; //@line 4284
      HEAP32[$235 >> 2] = $92; //@line 4285
      $236 = $ReallocAsyncCtx3 + 188 | 0; //@line 4286
      HEAP32[$236 >> 2] = $94; //@line 4287
      $237 = $ReallocAsyncCtx3 + 192 | 0; //@line 4288
      HEAP32[$237 >> 2] = $96; //@line 4289
      $238 = $ReallocAsyncCtx3 + 196 | 0; //@line 4290
      HEAP16[$238 >> 1] = $$1202$i; //@line 4291
      $239 = $ReallocAsyncCtx3 + 200 | 0; //@line 4292
      HEAP32[$239 >> 2] = $100; //@line 4293
      $240 = $ReallocAsyncCtx3 + 204 | 0; //@line 4294
      HEAP32[$240 >> 2] = $102; //@line 4295
      $241 = $ReallocAsyncCtx3 + 208 | 0; //@line 4296
      HEAP32[$241 >> 2] = $104; //@line 4297
      $242 = $ReallocAsyncCtx3 + 212 | 0; //@line 4298
      HEAP32[$242 >> 2] = $106; //@line 4299
      $243 = $ReallocAsyncCtx3 + 216 | 0; //@line 4300
      HEAP32[$243 >> 2] = $108; //@line 4301
      $244 = $ReallocAsyncCtx3 + 220 | 0; //@line 4302
      HEAP32[$244 >> 2] = $110; //@line 4303
      $245 = $ReallocAsyncCtx3 + 224 | 0; //@line 4304
      HEAP32[$245 >> 2] = $112; //@line 4305
      $246 = $ReallocAsyncCtx3 + 228 | 0; //@line 4306
      HEAP32[$246 >> 2] = $114; //@line 4307
      $247 = $ReallocAsyncCtx3 + 232 | 0; //@line 4308
      HEAP32[$247 >> 2] = $116; //@line 4309
      $248 = $ReallocAsyncCtx3 + 236 | 0; //@line 4310
      HEAP32[$248 >> 2] = $118; //@line 4311
      $249 = $ReallocAsyncCtx3 + 240 | 0; //@line 4312
      HEAP32[$249 >> 2] = $120; //@line 4313
      $250 = $ReallocAsyncCtx3 + 244 | 0; //@line 4314
      HEAP32[$250 >> 2] = $251; //@line 4315
      $252 = $ReallocAsyncCtx3 + 248 | 0; //@line 4316
      HEAP32[$252 >> 2] = $124; //@line 4317
      $253 = $ReallocAsyncCtx3 + 252 | 0; //@line 4318
      HEAP32[$253 >> 2] = $126; //@line 4319
      $254 = $ReallocAsyncCtx3 + 256 | 0; //@line 4320
      HEAP32[$254 >> 2] = $128; //@line 4321
      $255 = $ReallocAsyncCtx3 + 260 | 0; //@line 4322
      HEAP32[$255 >> 2] = $130; //@line 4323
      $256 = $ReallocAsyncCtx3 + 264 | 0; //@line 4324
      HEAP32[$256 >> 2] = $167; //@line 4325
      $257 = $ReallocAsyncCtx3 + 268 | 0; //@line 4326
      HEAP32[$257 >> 2] = $134; //@line 4327
      $258 = $ReallocAsyncCtx3 + 272 | 0; //@line 4328
      HEAP32[$258 >> 2] = $136; //@line 4329
      $259 = $ReallocAsyncCtx3 + 276 | 0; //@line 4330
      HEAP32[$259 >> 2] = $138; //@line 4331
      $260 = $ReallocAsyncCtx3 + 280 | 0; //@line 4332
      HEAP32[$260 >> 2] = $140; //@line 4333
      $261 = $ReallocAsyncCtx3 + 284 | 0; //@line 4334
      HEAP32[$261 >> 2] = $142; //@line 4335
      sp = STACKTOP; //@line 4336
      return;
     }
    case 26:
     {
      _mbed_tracef(2, 3844, 4279, $92); //@line 4341
      break L2;
      break;
     }
    case 31:
     {
      _mbed_tracef(2, 3844, 4348, $4); //@line 4346
      break L2;
      break;
     }
    case 35:
     {
      $297 = $$1202$in$i$reg2mem$0 & 65535; //@line 4351
      if (($$1202$i$reg2mem$0 + -1 & 65535) <= 1033) {
       $300 = HEAP32[$40 >> 2] | 0; //@line 4355
       if (!(HEAP32[$300 + 44 >> 2] | 0)) {
        HEAP16[$300 + 2 >> 1] = $$1202$i$reg2mem$0; //@line 4361
        $305 = $$reg2mem60$0 + 1 | 0; //@line 4362
        HEAP32[$94 >> 2] = $305; //@line 4363
        $306 = HEAP32[$42 >> 2] | 0; //@line 4364
        $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 4365
        $307 = FUNCTION_TABLE_ii[$306 & 31]($$1202$i$reg2mem$0) | 0; //@line 4366
        if (___async) {
         HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 4369
         $308 = $ReallocAsyncCtx4 + 4 | 0; //@line 4370
         HEAP32[$308 >> 2] = $2; //@line 4371
         $309 = $ReallocAsyncCtx4 + 8 | 0; //@line 4372
         HEAP32[$309 >> 2] = $4; //@line 4373
         $310 = $ReallocAsyncCtx4 + 12 | 0; //@line 4374
         HEAP32[$310 >> 2] = $6; //@line 4375
         $311 = $ReallocAsyncCtx4 + 16 | 0; //@line 4376
         HEAP32[$311 >> 2] = $8; //@line 4377
         $312 = $ReallocAsyncCtx4 + 20 | 0; //@line 4378
         HEAP32[$312 >> 2] = $10; //@line 4379
         $313 = $ReallocAsyncCtx4 + 24 | 0; //@line 4380
         HEAP32[$313 >> 2] = $12; //@line 4381
         $314 = $ReallocAsyncCtx4 + 28 | 0; //@line 4382
         HEAP32[$314 >> 2] = $16; //@line 4383
         $315 = $ReallocAsyncCtx4 + 32 | 0; //@line 4384
         HEAP32[$315 >> 2] = $18; //@line 4385
         $316 = $ReallocAsyncCtx4 + 36 | 0; //@line 4386
         HEAP32[$316 >> 2] = $20; //@line 4387
         $317 = $ReallocAsyncCtx4 + 40 | 0; //@line 4388
         HEAP32[$317 >> 2] = $22; //@line 4389
         $318 = $ReallocAsyncCtx4 + 44 | 0; //@line 4390
         HEAP32[$318 >> 2] = $24; //@line 4391
         $319 = $ReallocAsyncCtx4 + 48 | 0; //@line 4392
         HEAP32[$319 >> 2] = $26; //@line 4393
         $320 = $ReallocAsyncCtx4 + 52 | 0; //@line 4394
         HEAP32[$320 >> 2] = $297; //@line 4395
         $321 = $ReallocAsyncCtx4 + 56 | 0; //@line 4396
         HEAP32[$321 >> 2] = $28; //@line 4397
         $322 = $ReallocAsyncCtx4 + 60 | 0; //@line 4398
         HEAP32[$322 >> 2] = $30; //@line 4399
         $323 = $ReallocAsyncCtx4 + 64 | 0; //@line 4400
         HEAP32[$323 >> 2] = $32; //@line 4401
         $324 = $ReallocAsyncCtx4 + 68 | 0; //@line 4402
         HEAP32[$324 >> 2] = $305; //@line 4403
         $325 = $ReallocAsyncCtx4 + 72 | 0; //@line 4404
         HEAP32[$325 >> 2] = $34; //@line 4405
         $326 = $ReallocAsyncCtx4 + 76 | 0; //@line 4406
         HEAP32[$326 >> 2] = $36; //@line 4407
         $327 = $ReallocAsyncCtx4 + 80 | 0; //@line 4408
         HEAP32[$327 >> 2] = $38; //@line 4409
         $328 = $ReallocAsyncCtx4 + 84 | 0; //@line 4410
         HEAP32[$328 >> 2] = $40; //@line 4411
         $329 = $ReallocAsyncCtx4 + 88 | 0; //@line 4412
         HEAP32[$329 >> 2] = $42; //@line 4413
         $330 = $ReallocAsyncCtx4 + 92 | 0; //@line 4414
         HEAP32[$330 >> 2] = $44; //@line 4415
         $331 = $ReallocAsyncCtx4 + 96 | 0; //@line 4416
         HEAP32[$331 >> 2] = $46; //@line 4417
         $332 = $ReallocAsyncCtx4 + 100 | 0; //@line 4418
         HEAP32[$332 >> 2] = $48; //@line 4419
         $333 = $ReallocAsyncCtx4 + 104 | 0; //@line 4420
         HEAP32[$333 >> 2] = $50; //@line 4421
         $334 = $ReallocAsyncCtx4 + 108 | 0; //@line 4422
         HEAP32[$334 >> 2] = $52; //@line 4423
         $335 = $ReallocAsyncCtx4 + 112 | 0; //@line 4424
         HEAP32[$335 >> 2] = $54; //@line 4425
         $336 = $ReallocAsyncCtx4 + 116 | 0; //@line 4426
         HEAP32[$336 >> 2] = $58; //@line 4427
         $337 = $ReallocAsyncCtx4 + 120 | 0; //@line 4428
         HEAP32[$337 >> 2] = $60; //@line 4429
         $338 = $ReallocAsyncCtx4 + 124 | 0; //@line 4430
         HEAP32[$338 >> 2] = $62; //@line 4431
         $339 = $ReallocAsyncCtx4 + 128 | 0; //@line 4432
         HEAP32[$339 >> 2] = $64; //@line 4433
         $340 = $ReallocAsyncCtx4 + 132 | 0; //@line 4434
         HEAP32[$340 >> 2] = $66; //@line 4435
         $341 = $ReallocAsyncCtx4 + 136 | 0; //@line 4436
         HEAP32[$341 >> 2] = $68; //@line 4437
         $342 = $ReallocAsyncCtx4 + 140 | 0; //@line 4438
         HEAP32[$342 >> 2] = $70; //@line 4439
         $343 = $ReallocAsyncCtx4 + 144 | 0; //@line 4440
         HEAP32[$343 >> 2] = $72; //@line 4441
         $344 = $ReallocAsyncCtx4 + 148 | 0; //@line 4442
         HEAP32[$344 >> 2] = $74; //@line 4443
         $345 = $ReallocAsyncCtx4 + 152 | 0; //@line 4444
         HEAP32[$345 >> 2] = $76; //@line 4445
         $346 = $ReallocAsyncCtx4 + 156 | 0; //@line 4446
         HEAP32[$346 >> 2] = $78; //@line 4447
         $347 = $ReallocAsyncCtx4 + 160 | 0; //@line 4448
         HEAP32[$347 >> 2] = $80; //@line 4449
         $348 = $ReallocAsyncCtx4 + 164 | 0; //@line 4450
         HEAP32[$348 >> 2] = $82; //@line 4451
         $349 = $ReallocAsyncCtx4 + 168 | 0; //@line 4452
         HEAP32[$349 >> 2] = $84; //@line 4453
         $350 = $ReallocAsyncCtx4 + 172 | 0; //@line 4454
         HEAP32[$350 >> 2] = $86; //@line 4455
         $351 = $ReallocAsyncCtx4 + 176 | 0; //@line 4456
         HEAP32[$351 >> 2] = $90; //@line 4457
         $352 = $ReallocAsyncCtx4 + 180 | 0; //@line 4458
         HEAP32[$352 >> 2] = $92; //@line 4459
         $353 = $ReallocAsyncCtx4 + 184 | 0; //@line 4460
         HEAP32[$353 >> 2] = $94; //@line 4461
         $354 = $ReallocAsyncCtx4 + 188 | 0; //@line 4462
         HEAP32[$354 >> 2] = $96; //@line 4463
         $355 = $ReallocAsyncCtx4 + 192 | 0; //@line 4464
         HEAP32[$355 >> 2] = $100; //@line 4465
         $356 = $ReallocAsyncCtx4 + 196 | 0; //@line 4466
         HEAP32[$356 >> 2] = $106; //@line 4467
         $357 = $ReallocAsyncCtx4 + 200 | 0; //@line 4468
         HEAP32[$357 >> 2] = $102; //@line 4469
         $358 = $ReallocAsyncCtx4 + 204 | 0; //@line 4470
         HEAP32[$358 >> 2] = $104; //@line 4471
         $359 = $ReallocAsyncCtx4 + 208 | 0; //@line 4472
         HEAP32[$359 >> 2] = $110; //@line 4473
         $360 = $ReallocAsyncCtx4 + 212 | 0; //@line 4474
         HEAP32[$360 >> 2] = $108; //@line 4475
         $361 = $ReallocAsyncCtx4 + 216 | 0; //@line 4476
         HEAP32[$361 >> 2] = $112; //@line 4477
         $362 = $ReallocAsyncCtx4 + 220 | 0; //@line 4478
         HEAP32[$362 >> 2] = $114; //@line 4479
         $363 = $ReallocAsyncCtx4 + 224 | 0; //@line 4480
         HEAP32[$363 >> 2] = $116; //@line 4481
         $364 = $ReallocAsyncCtx4 + 228 | 0; //@line 4482
         HEAP32[$364 >> 2] = $118; //@line 4483
         $365 = $ReallocAsyncCtx4 + 232 | 0; //@line 4484
         HEAP32[$365 >> 2] = $120; //@line 4485
         $366 = $ReallocAsyncCtx4 + 236 | 0; //@line 4486
         HEAP32[$366 >> 2] = $124; //@line 4487
         $367 = $ReallocAsyncCtx4 + 240 | 0; //@line 4488
         HEAP32[$367 >> 2] = $126; //@line 4489
         $368 = $ReallocAsyncCtx4 + 244 | 0; //@line 4490
         HEAP32[$368 >> 2] = $128; //@line 4491
         $369 = $ReallocAsyncCtx4 + 248 | 0; //@line 4492
         HEAP32[$369 >> 2] = $130; //@line 4493
         $370 = $ReallocAsyncCtx4 + 252 | 0; //@line 4494
         HEAP32[$370 >> 2] = $$reg2mem71$0; //@line 4495
         $371 = $ReallocAsyncCtx4 + 256 | 0; //@line 4496
         HEAP32[$371 >> 2] = $134; //@line 4497
         $372 = $ReallocAsyncCtx4 + 260 | 0; //@line 4498
         HEAP32[$372 >> 2] = $136; //@line 4499
         $373 = $ReallocAsyncCtx4 + 264 | 0; //@line 4500
         HEAP32[$373 >> 2] = $138; //@line 4501
         $374 = $ReallocAsyncCtx4 + 268 | 0; //@line 4502
         HEAP32[$374 >> 2] = $140; //@line 4503
         $375 = $ReallocAsyncCtx4 + 272 | 0; //@line 4504
         HEAP32[$375 >> 2] = $142; //@line 4505
         sp = STACKTOP; //@line 4506
         return;
        }
        HEAP32[___async_retval >> 2] = $307; //@line 4510
        ___async_unwind = 0; //@line 4511
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 4512
        $308 = $ReallocAsyncCtx4 + 4 | 0; //@line 4513
        HEAP32[$308 >> 2] = $2; //@line 4514
        $309 = $ReallocAsyncCtx4 + 8 | 0; //@line 4515
        HEAP32[$309 >> 2] = $4; //@line 4516
        $310 = $ReallocAsyncCtx4 + 12 | 0; //@line 4517
        HEAP32[$310 >> 2] = $6; //@line 4518
        $311 = $ReallocAsyncCtx4 + 16 | 0; //@line 4519
        HEAP32[$311 >> 2] = $8; //@line 4520
        $312 = $ReallocAsyncCtx4 + 20 | 0; //@line 4521
        HEAP32[$312 >> 2] = $10; //@line 4522
        $313 = $ReallocAsyncCtx4 + 24 | 0; //@line 4523
        HEAP32[$313 >> 2] = $12; //@line 4524
        $314 = $ReallocAsyncCtx4 + 28 | 0; //@line 4525
        HEAP32[$314 >> 2] = $16; //@line 4526
        $315 = $ReallocAsyncCtx4 + 32 | 0; //@line 4527
        HEAP32[$315 >> 2] = $18; //@line 4528
        $316 = $ReallocAsyncCtx4 + 36 | 0; //@line 4529
        HEAP32[$316 >> 2] = $20; //@line 4530
        $317 = $ReallocAsyncCtx4 + 40 | 0; //@line 4531
        HEAP32[$317 >> 2] = $22; //@line 4532
        $318 = $ReallocAsyncCtx4 + 44 | 0; //@line 4533
        HEAP32[$318 >> 2] = $24; //@line 4534
        $319 = $ReallocAsyncCtx4 + 48 | 0; //@line 4535
        HEAP32[$319 >> 2] = $26; //@line 4536
        $320 = $ReallocAsyncCtx4 + 52 | 0; //@line 4537
        HEAP32[$320 >> 2] = $297; //@line 4538
        $321 = $ReallocAsyncCtx4 + 56 | 0; //@line 4539
        HEAP32[$321 >> 2] = $28; //@line 4540
        $322 = $ReallocAsyncCtx4 + 60 | 0; //@line 4541
        HEAP32[$322 >> 2] = $30; //@line 4542
        $323 = $ReallocAsyncCtx4 + 64 | 0; //@line 4543
        HEAP32[$323 >> 2] = $32; //@line 4544
        $324 = $ReallocAsyncCtx4 + 68 | 0; //@line 4545
        HEAP32[$324 >> 2] = $305; //@line 4546
        $325 = $ReallocAsyncCtx4 + 72 | 0; //@line 4547
        HEAP32[$325 >> 2] = $34; //@line 4548
        $326 = $ReallocAsyncCtx4 + 76 | 0; //@line 4549
        HEAP32[$326 >> 2] = $36; //@line 4550
        $327 = $ReallocAsyncCtx4 + 80 | 0; //@line 4551
        HEAP32[$327 >> 2] = $38; //@line 4552
        $328 = $ReallocAsyncCtx4 + 84 | 0; //@line 4553
        HEAP32[$328 >> 2] = $40; //@line 4554
        $329 = $ReallocAsyncCtx4 + 88 | 0; //@line 4555
        HEAP32[$329 >> 2] = $42; //@line 4556
        $330 = $ReallocAsyncCtx4 + 92 | 0; //@line 4557
        HEAP32[$330 >> 2] = $44; //@line 4558
        $331 = $ReallocAsyncCtx4 + 96 | 0; //@line 4559
        HEAP32[$331 >> 2] = $46; //@line 4560
        $332 = $ReallocAsyncCtx4 + 100 | 0; //@line 4561
        HEAP32[$332 >> 2] = $48; //@line 4562
        $333 = $ReallocAsyncCtx4 + 104 | 0; //@line 4563
        HEAP32[$333 >> 2] = $50; //@line 4564
        $334 = $ReallocAsyncCtx4 + 108 | 0; //@line 4565
        HEAP32[$334 >> 2] = $52; //@line 4566
        $335 = $ReallocAsyncCtx4 + 112 | 0; //@line 4567
        HEAP32[$335 >> 2] = $54; //@line 4568
        $336 = $ReallocAsyncCtx4 + 116 | 0; //@line 4569
        HEAP32[$336 >> 2] = $58; //@line 4570
        $337 = $ReallocAsyncCtx4 + 120 | 0; //@line 4571
        HEAP32[$337 >> 2] = $60; //@line 4572
        $338 = $ReallocAsyncCtx4 + 124 | 0; //@line 4573
        HEAP32[$338 >> 2] = $62; //@line 4574
        $339 = $ReallocAsyncCtx4 + 128 | 0; //@line 4575
        HEAP32[$339 >> 2] = $64; //@line 4576
        $340 = $ReallocAsyncCtx4 + 132 | 0; //@line 4577
        HEAP32[$340 >> 2] = $66; //@line 4578
        $341 = $ReallocAsyncCtx4 + 136 | 0; //@line 4579
        HEAP32[$341 >> 2] = $68; //@line 4580
        $342 = $ReallocAsyncCtx4 + 140 | 0; //@line 4581
        HEAP32[$342 >> 2] = $70; //@line 4582
        $343 = $ReallocAsyncCtx4 + 144 | 0; //@line 4583
        HEAP32[$343 >> 2] = $72; //@line 4584
        $344 = $ReallocAsyncCtx4 + 148 | 0; //@line 4585
        HEAP32[$344 >> 2] = $74; //@line 4586
        $345 = $ReallocAsyncCtx4 + 152 | 0; //@line 4587
        HEAP32[$345 >> 2] = $76; //@line 4588
        $346 = $ReallocAsyncCtx4 + 156 | 0; //@line 4589
        HEAP32[$346 >> 2] = $78; //@line 4590
        $347 = $ReallocAsyncCtx4 + 160 | 0; //@line 4591
        HEAP32[$347 >> 2] = $80; //@line 4592
        $348 = $ReallocAsyncCtx4 + 164 | 0; //@line 4593
        HEAP32[$348 >> 2] = $82; //@line 4594
        $349 = $ReallocAsyncCtx4 + 168 | 0; //@line 4595
        HEAP32[$349 >> 2] = $84; //@line 4596
        $350 = $ReallocAsyncCtx4 + 172 | 0; //@line 4597
        HEAP32[$350 >> 2] = $86; //@line 4598
        $351 = $ReallocAsyncCtx4 + 176 | 0; //@line 4599
        HEAP32[$351 >> 2] = $90; //@line 4600
        $352 = $ReallocAsyncCtx4 + 180 | 0; //@line 4601
        HEAP32[$352 >> 2] = $92; //@line 4602
        $353 = $ReallocAsyncCtx4 + 184 | 0; //@line 4603
        HEAP32[$353 >> 2] = $94; //@line 4604
        $354 = $ReallocAsyncCtx4 + 188 | 0; //@line 4605
        HEAP32[$354 >> 2] = $96; //@line 4606
        $355 = $ReallocAsyncCtx4 + 192 | 0; //@line 4607
        HEAP32[$355 >> 2] = $100; //@line 4608
        $356 = $ReallocAsyncCtx4 + 196 | 0; //@line 4609
        HEAP32[$356 >> 2] = $106; //@line 4610
        $357 = $ReallocAsyncCtx4 + 200 | 0; //@line 4611
        HEAP32[$357 >> 2] = $102; //@line 4612
        $358 = $ReallocAsyncCtx4 + 204 | 0; //@line 4613
        HEAP32[$358 >> 2] = $104; //@line 4614
        $359 = $ReallocAsyncCtx4 + 208 | 0; //@line 4615
        HEAP32[$359 >> 2] = $110; //@line 4616
        $360 = $ReallocAsyncCtx4 + 212 | 0; //@line 4617
        HEAP32[$360 >> 2] = $108; //@line 4618
        $361 = $ReallocAsyncCtx4 + 216 | 0; //@line 4619
        HEAP32[$361 >> 2] = $112; //@line 4620
        $362 = $ReallocAsyncCtx4 + 220 | 0; //@line 4621
        HEAP32[$362 >> 2] = $114; //@line 4622
        $363 = $ReallocAsyncCtx4 + 224 | 0; //@line 4623
        HEAP32[$363 >> 2] = $116; //@line 4624
        $364 = $ReallocAsyncCtx4 + 228 | 0; //@line 4625
        HEAP32[$364 >> 2] = $118; //@line 4626
        $365 = $ReallocAsyncCtx4 + 232 | 0; //@line 4627
        HEAP32[$365 >> 2] = $120; //@line 4628
        $366 = $ReallocAsyncCtx4 + 236 | 0; //@line 4629
        HEAP32[$366 >> 2] = $124; //@line 4630
        $367 = $ReallocAsyncCtx4 + 240 | 0; //@line 4631
        HEAP32[$367 >> 2] = $126; //@line 4632
        $368 = $ReallocAsyncCtx4 + 244 | 0; //@line 4633
        HEAP32[$368 >> 2] = $128; //@line 4634
        $369 = $ReallocAsyncCtx4 + 248 | 0; //@line 4635
        HEAP32[$369 >> 2] = $130; //@line 4636
        $370 = $ReallocAsyncCtx4 + 252 | 0; //@line 4637
        HEAP32[$370 >> 2] = $$reg2mem71$0; //@line 4638
        $371 = $ReallocAsyncCtx4 + 256 | 0; //@line 4639
        HEAP32[$371 >> 2] = $134; //@line 4640
        $372 = $ReallocAsyncCtx4 + 260 | 0; //@line 4641
        HEAP32[$372 >> 2] = $136; //@line 4642
        $373 = $ReallocAsyncCtx4 + 264 | 0; //@line 4643
        HEAP32[$373 >> 2] = $138; //@line 4644
        $374 = $ReallocAsyncCtx4 + 268 | 0; //@line 4645
        HEAP32[$374 >> 2] = $140; //@line 4646
        $375 = $ReallocAsyncCtx4 + 272 | 0; //@line 4647
        HEAP32[$375 >> 2] = $142; //@line 4648
        sp = STACKTOP; //@line 4649
        return;
       }
      }
      _mbed_tracef(2, 3844, 4410, $52); //@line 4653
      break L2;
      break;
     }
    case 41:
     {
      $377 = HEAP32[$40 >> 2] | 0; //@line 4658
      $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 4660
      $379 = _sn_coap_parser_options_parse_multiple_options($120, $94, $$reg2mem$0, $377 + 48 | 0, $377, 4, $$1202$i$reg2mem$0) | 0; //@line 4661
      if (___async) {
       HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 4664
       $380 = $ReallocAsyncCtx10 + 4 | 0; //@line 4665
       HEAP32[$380 >> 2] = $2; //@line 4666
       $381 = $ReallocAsyncCtx10 + 8 | 0; //@line 4667
       HEAP32[$381 >> 2] = $4; //@line 4668
       $382 = $ReallocAsyncCtx10 + 12 | 0; //@line 4669
       HEAP32[$382 >> 2] = $6; //@line 4670
       $383 = $ReallocAsyncCtx10 + 16 | 0; //@line 4671
       HEAP32[$383 >> 2] = $8; //@line 4672
       $384 = $ReallocAsyncCtx10 + 20 | 0; //@line 4673
       HEAP32[$384 >> 2] = $16; //@line 4674
       $385 = $ReallocAsyncCtx10 + 24 | 0; //@line 4675
       HEAP32[$385 >> 2] = $12; //@line 4676
       $386 = $ReallocAsyncCtx10 + 28 | 0; //@line 4677
       HEAP32[$386 >> 2] = $142; //@line 4678
       $387 = $ReallocAsyncCtx10 + 32 | 0; //@line 4679
       HEAP32[$387 >> 2] = $18; //@line 4680
       $388 = $ReallocAsyncCtx10 + 36 | 0; //@line 4681
       HEAP32[$388 >> 2] = $20; //@line 4682
       $389 = $ReallocAsyncCtx10 + 40 | 0; //@line 4683
       HEAP32[$389 >> 2] = $22; //@line 4684
       $390 = $ReallocAsyncCtx10 + 44 | 0; //@line 4685
       HEAP32[$390 >> 2] = $24; //@line 4686
       $391 = $ReallocAsyncCtx10 + 48 | 0; //@line 4687
       HEAP32[$391 >> 2] = $26; //@line 4688
       $392 = $ReallocAsyncCtx10 + 52 | 0; //@line 4689
       HEAP32[$392 >> 2] = $28; //@line 4690
       $393 = $ReallocAsyncCtx10 + 56 | 0; //@line 4691
       HEAP32[$393 >> 2] = $30; //@line 4692
       $394 = $ReallocAsyncCtx10 + 60 | 0; //@line 4693
       HEAP32[$394 >> 2] = $32; //@line 4694
       $395 = $ReallocAsyncCtx10 + 64 | 0; //@line 4695
       HEAP32[$395 >> 2] = $34; //@line 4696
       $396 = $ReallocAsyncCtx10 + 68 | 0; //@line 4697
       HEAP32[$396 >> 2] = $36; //@line 4698
       $397 = $ReallocAsyncCtx10 + 72 | 0; //@line 4699
       HEAP32[$397 >> 2] = $38; //@line 4700
       $398 = $ReallocAsyncCtx10 + 76 | 0; //@line 4701
       HEAP32[$398 >> 2] = $40; //@line 4702
       $399 = $ReallocAsyncCtx10 + 80 | 0; //@line 4703
       HEAP32[$399 >> 2] = $42; //@line 4704
       $400 = $ReallocAsyncCtx10 + 84 | 0; //@line 4705
       HEAP32[$400 >> 2] = $44; //@line 4706
       $401 = $ReallocAsyncCtx10 + 88 | 0; //@line 4707
       HEAP32[$401 >> 2] = $46; //@line 4708
       $402 = $ReallocAsyncCtx10 + 92 | 0; //@line 4709
       HEAP32[$402 >> 2] = $48; //@line 4710
       $403 = $ReallocAsyncCtx10 + 96 | 0; //@line 4711
       HEAP32[$403 >> 2] = $50; //@line 4712
       $404 = $ReallocAsyncCtx10 + 100 | 0; //@line 4713
       HEAP32[$404 >> 2] = $52; //@line 4714
       $405 = $ReallocAsyncCtx10 + 104 | 0; //@line 4715
       HEAP32[$405 >> 2] = $54; //@line 4716
       $406 = $ReallocAsyncCtx10 + 108 | 0; //@line 4717
       HEAP32[$406 >> 2] = $58; //@line 4718
       $407 = $ReallocAsyncCtx10 + 112 | 0; //@line 4719
       HEAP32[$407 >> 2] = $60; //@line 4720
       $408 = $ReallocAsyncCtx10 + 116 | 0; //@line 4721
       HEAP32[$408 >> 2] = $62; //@line 4722
       $409 = $ReallocAsyncCtx10 + 120 | 0; //@line 4723
       HEAP32[$409 >> 2] = $64; //@line 4724
       $410 = $ReallocAsyncCtx10 + 124 | 0; //@line 4725
       HEAP32[$410 >> 2] = $66; //@line 4726
       $411 = $ReallocAsyncCtx10 + 128 | 0; //@line 4727
       HEAP32[$411 >> 2] = $68; //@line 4728
       $412 = $ReallocAsyncCtx10 + 132 | 0; //@line 4729
       HEAP32[$412 >> 2] = $70; //@line 4730
       $413 = $ReallocAsyncCtx10 + 136 | 0; //@line 4731
       HEAP32[$413 >> 2] = $72; //@line 4732
       $414 = $ReallocAsyncCtx10 + 140 | 0; //@line 4733
       HEAP32[$414 >> 2] = $74; //@line 4734
       $415 = $ReallocAsyncCtx10 + 144 | 0; //@line 4735
       HEAP32[$415 >> 2] = $76; //@line 4736
       $416 = $ReallocAsyncCtx10 + 148 | 0; //@line 4737
       HEAP32[$416 >> 2] = $78; //@line 4738
       $417 = $ReallocAsyncCtx10 + 152 | 0; //@line 4739
       HEAP32[$417 >> 2] = $80; //@line 4740
       $418 = $ReallocAsyncCtx10 + 156 | 0; //@line 4741
       HEAP32[$418 >> 2] = $82; //@line 4742
       $419 = $ReallocAsyncCtx10 + 160 | 0; //@line 4743
       HEAP32[$419 >> 2] = $84; //@line 4744
       $420 = $ReallocAsyncCtx10 + 164 | 0; //@line 4745
       HEAP32[$420 >> 2] = $86; //@line 4746
       $421 = $ReallocAsyncCtx10 + 168 | 0; //@line 4747
       HEAP32[$421 >> 2] = $90; //@line 4748
       $422 = $ReallocAsyncCtx10 + 172 | 0; //@line 4749
       HEAP32[$422 >> 2] = $92; //@line 4750
       $423 = $ReallocAsyncCtx10 + 176 | 0; //@line 4751
       HEAP32[$423 >> 2] = $94; //@line 4752
       $424 = $ReallocAsyncCtx10 + 180 | 0; //@line 4753
       HEAP32[$424 >> 2] = $96; //@line 4754
       $425 = $ReallocAsyncCtx10 + 184 | 0; //@line 4755
       HEAP32[$425 >> 2] = $100; //@line 4756
       $426 = $ReallocAsyncCtx10 + 188 | 0; //@line 4757
       HEAP32[$426 >> 2] = $106; //@line 4758
       $427 = $ReallocAsyncCtx10 + 192 | 0; //@line 4759
       HEAP32[$427 >> 2] = $102; //@line 4760
       $428 = $ReallocAsyncCtx10 + 196 | 0; //@line 4761
       HEAP32[$428 >> 2] = $104; //@line 4762
       $429 = $ReallocAsyncCtx10 + 200 | 0; //@line 4763
       HEAP32[$429 >> 2] = $110; //@line 4764
       $430 = $ReallocAsyncCtx10 + 204 | 0; //@line 4765
       HEAP32[$430 >> 2] = $108; //@line 4766
       $431 = $ReallocAsyncCtx10 + 208 | 0; //@line 4767
       HEAP32[$431 >> 2] = $112; //@line 4768
       $432 = $ReallocAsyncCtx10 + 212 | 0; //@line 4769
       HEAP32[$432 >> 2] = $114; //@line 4770
       $433 = $ReallocAsyncCtx10 + 216 | 0; //@line 4771
       HEAP32[$433 >> 2] = $116; //@line 4772
       $434 = $ReallocAsyncCtx10 + 220 | 0; //@line 4773
       HEAP32[$434 >> 2] = $118; //@line 4774
       $435 = $ReallocAsyncCtx10 + 224 | 0; //@line 4775
       HEAP32[$435 >> 2] = $120; //@line 4776
       $436 = $ReallocAsyncCtx10 + 228 | 0; //@line 4777
       HEAP32[$436 >> 2] = $124; //@line 4778
       $437 = $ReallocAsyncCtx10 + 232 | 0; //@line 4779
       HEAP32[$437 >> 2] = $126; //@line 4780
       $438 = $ReallocAsyncCtx10 + 236 | 0; //@line 4781
       HEAP32[$438 >> 2] = $128; //@line 4782
       $439 = $ReallocAsyncCtx10 + 240 | 0; //@line 4783
       HEAP32[$439 >> 2] = $130; //@line 4784
       $440 = $ReallocAsyncCtx10 + 244 | 0; //@line 4785
       HEAP32[$440 >> 2] = $$reg2mem71$0; //@line 4786
       $441 = $ReallocAsyncCtx10 + 248 | 0; //@line 4787
       HEAP32[$441 >> 2] = $134; //@line 4788
       $442 = $ReallocAsyncCtx10 + 252 | 0; //@line 4789
       HEAP32[$442 >> 2] = $136; //@line 4790
       $443 = $ReallocAsyncCtx10 + 256 | 0; //@line 4791
       HEAP32[$443 >> 2] = $138; //@line 4792
       $444 = $ReallocAsyncCtx10 + 260 | 0; //@line 4793
       HEAP32[$444 >> 2] = $140; //@line 4794
       $445 = $ReallocAsyncCtx10 + 264 | 0; //@line 4795
       HEAP32[$445 >> 2] = $10; //@line 4796
       sp = STACKTOP; //@line 4797
       return;
      }
      HEAP8[___async_retval >> 0] = $379; //@line 4801
      ___async_unwind = 0; //@line 4802
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 4803
      $380 = $ReallocAsyncCtx10 + 4 | 0; //@line 4804
      HEAP32[$380 >> 2] = $2; //@line 4805
      $381 = $ReallocAsyncCtx10 + 8 | 0; //@line 4806
      HEAP32[$381 >> 2] = $4; //@line 4807
      $382 = $ReallocAsyncCtx10 + 12 | 0; //@line 4808
      HEAP32[$382 >> 2] = $6; //@line 4809
      $383 = $ReallocAsyncCtx10 + 16 | 0; //@line 4810
      HEAP32[$383 >> 2] = $8; //@line 4811
      $384 = $ReallocAsyncCtx10 + 20 | 0; //@line 4812
      HEAP32[$384 >> 2] = $16; //@line 4813
      $385 = $ReallocAsyncCtx10 + 24 | 0; //@line 4814
      HEAP32[$385 >> 2] = $12; //@line 4815
      $386 = $ReallocAsyncCtx10 + 28 | 0; //@line 4816
      HEAP32[$386 >> 2] = $142; //@line 4817
      $387 = $ReallocAsyncCtx10 + 32 | 0; //@line 4818
      HEAP32[$387 >> 2] = $18; //@line 4819
      $388 = $ReallocAsyncCtx10 + 36 | 0; //@line 4820
      HEAP32[$388 >> 2] = $20; //@line 4821
      $389 = $ReallocAsyncCtx10 + 40 | 0; //@line 4822
      HEAP32[$389 >> 2] = $22; //@line 4823
      $390 = $ReallocAsyncCtx10 + 44 | 0; //@line 4824
      HEAP32[$390 >> 2] = $24; //@line 4825
      $391 = $ReallocAsyncCtx10 + 48 | 0; //@line 4826
      HEAP32[$391 >> 2] = $26; //@line 4827
      $392 = $ReallocAsyncCtx10 + 52 | 0; //@line 4828
      HEAP32[$392 >> 2] = $28; //@line 4829
      $393 = $ReallocAsyncCtx10 + 56 | 0; //@line 4830
      HEAP32[$393 >> 2] = $30; //@line 4831
      $394 = $ReallocAsyncCtx10 + 60 | 0; //@line 4832
      HEAP32[$394 >> 2] = $32; //@line 4833
      $395 = $ReallocAsyncCtx10 + 64 | 0; //@line 4834
      HEAP32[$395 >> 2] = $34; //@line 4835
      $396 = $ReallocAsyncCtx10 + 68 | 0; //@line 4836
      HEAP32[$396 >> 2] = $36; //@line 4837
      $397 = $ReallocAsyncCtx10 + 72 | 0; //@line 4838
      HEAP32[$397 >> 2] = $38; //@line 4839
      $398 = $ReallocAsyncCtx10 + 76 | 0; //@line 4840
      HEAP32[$398 >> 2] = $40; //@line 4841
      $399 = $ReallocAsyncCtx10 + 80 | 0; //@line 4842
      HEAP32[$399 >> 2] = $42; //@line 4843
      $400 = $ReallocAsyncCtx10 + 84 | 0; //@line 4844
      HEAP32[$400 >> 2] = $44; //@line 4845
      $401 = $ReallocAsyncCtx10 + 88 | 0; //@line 4846
      HEAP32[$401 >> 2] = $46; //@line 4847
      $402 = $ReallocAsyncCtx10 + 92 | 0; //@line 4848
      HEAP32[$402 >> 2] = $48; //@line 4849
      $403 = $ReallocAsyncCtx10 + 96 | 0; //@line 4850
      HEAP32[$403 >> 2] = $50; //@line 4851
      $404 = $ReallocAsyncCtx10 + 100 | 0; //@line 4852
      HEAP32[$404 >> 2] = $52; //@line 4853
      $405 = $ReallocAsyncCtx10 + 104 | 0; //@line 4854
      HEAP32[$405 >> 2] = $54; //@line 4855
      $406 = $ReallocAsyncCtx10 + 108 | 0; //@line 4856
      HEAP32[$406 >> 2] = $58; //@line 4857
      $407 = $ReallocAsyncCtx10 + 112 | 0; //@line 4858
      HEAP32[$407 >> 2] = $60; //@line 4859
      $408 = $ReallocAsyncCtx10 + 116 | 0; //@line 4860
      HEAP32[$408 >> 2] = $62; //@line 4861
      $409 = $ReallocAsyncCtx10 + 120 | 0; //@line 4862
      HEAP32[$409 >> 2] = $64; //@line 4863
      $410 = $ReallocAsyncCtx10 + 124 | 0; //@line 4864
      HEAP32[$410 >> 2] = $66; //@line 4865
      $411 = $ReallocAsyncCtx10 + 128 | 0; //@line 4866
      HEAP32[$411 >> 2] = $68; //@line 4867
      $412 = $ReallocAsyncCtx10 + 132 | 0; //@line 4868
      HEAP32[$412 >> 2] = $70; //@line 4869
      $413 = $ReallocAsyncCtx10 + 136 | 0; //@line 4870
      HEAP32[$413 >> 2] = $72; //@line 4871
      $414 = $ReallocAsyncCtx10 + 140 | 0; //@line 4872
      HEAP32[$414 >> 2] = $74; //@line 4873
      $415 = $ReallocAsyncCtx10 + 144 | 0; //@line 4874
      HEAP32[$415 >> 2] = $76; //@line 4875
      $416 = $ReallocAsyncCtx10 + 148 | 0; //@line 4876
      HEAP32[$416 >> 2] = $78; //@line 4877
      $417 = $ReallocAsyncCtx10 + 152 | 0; //@line 4878
      HEAP32[$417 >> 2] = $80; //@line 4879
      $418 = $ReallocAsyncCtx10 + 156 | 0; //@line 4880
      HEAP32[$418 >> 2] = $82; //@line 4881
      $419 = $ReallocAsyncCtx10 + 160 | 0; //@line 4882
      HEAP32[$419 >> 2] = $84; //@line 4883
      $420 = $ReallocAsyncCtx10 + 164 | 0; //@line 4884
      HEAP32[$420 >> 2] = $86; //@line 4885
      $421 = $ReallocAsyncCtx10 + 168 | 0; //@line 4886
      HEAP32[$421 >> 2] = $90; //@line 4887
      $422 = $ReallocAsyncCtx10 + 172 | 0; //@line 4888
      HEAP32[$422 >> 2] = $92; //@line 4889
      $423 = $ReallocAsyncCtx10 + 176 | 0; //@line 4890
      HEAP32[$423 >> 2] = $94; //@line 4891
      $424 = $ReallocAsyncCtx10 + 180 | 0; //@line 4892
      HEAP32[$424 >> 2] = $96; //@line 4893
      $425 = $ReallocAsyncCtx10 + 184 | 0; //@line 4894
      HEAP32[$425 >> 2] = $100; //@line 4895
      $426 = $ReallocAsyncCtx10 + 188 | 0; //@line 4896
      HEAP32[$426 >> 2] = $106; //@line 4897
      $427 = $ReallocAsyncCtx10 + 192 | 0; //@line 4898
      HEAP32[$427 >> 2] = $102; //@line 4899
      $428 = $ReallocAsyncCtx10 + 196 | 0; //@line 4900
      HEAP32[$428 >> 2] = $104; //@line 4901
      $429 = $ReallocAsyncCtx10 + 200 | 0; //@line 4902
      HEAP32[$429 >> 2] = $110; //@line 4903
      $430 = $ReallocAsyncCtx10 + 204 | 0; //@line 4904
      HEAP32[$430 >> 2] = $108; //@line 4905
      $431 = $ReallocAsyncCtx10 + 208 | 0; //@line 4906
      HEAP32[$431 >> 2] = $112; //@line 4907
      $432 = $ReallocAsyncCtx10 + 212 | 0; //@line 4908
      HEAP32[$432 >> 2] = $114; //@line 4909
      $433 = $ReallocAsyncCtx10 + 216 | 0; //@line 4910
      HEAP32[$433 >> 2] = $116; //@line 4911
      $434 = $ReallocAsyncCtx10 + 220 | 0; //@line 4912
      HEAP32[$434 >> 2] = $118; //@line 4913
      $435 = $ReallocAsyncCtx10 + 224 | 0; //@line 4914
      HEAP32[$435 >> 2] = $120; //@line 4915
      $436 = $ReallocAsyncCtx10 + 228 | 0; //@line 4916
      HEAP32[$436 >> 2] = $124; //@line 4917
      $437 = $ReallocAsyncCtx10 + 232 | 0; //@line 4918
      HEAP32[$437 >> 2] = $126; //@line 4919
      $438 = $ReallocAsyncCtx10 + 236 | 0; //@line 4920
      HEAP32[$438 >> 2] = $128; //@line 4921
      $439 = $ReallocAsyncCtx10 + 240 | 0; //@line 4922
      HEAP32[$439 >> 2] = $130; //@line 4923
      $440 = $ReallocAsyncCtx10 + 244 | 0; //@line 4924
      HEAP32[$440 >> 2] = $$reg2mem71$0; //@line 4925
      $441 = $ReallocAsyncCtx10 + 248 | 0; //@line 4926
      HEAP32[$441 >> 2] = $134; //@line 4927
      $442 = $ReallocAsyncCtx10 + 252 | 0; //@line 4928
      HEAP32[$442 >> 2] = $136; //@line 4929
      $443 = $ReallocAsyncCtx10 + 256 | 0; //@line 4930
      HEAP32[$443 >> 2] = $138; //@line 4931
      $444 = $ReallocAsyncCtx10 + 260 | 0; //@line 4932
      HEAP32[$444 >> 2] = $140; //@line 4933
      $445 = $ReallocAsyncCtx10 + 264 | 0; //@line 4934
      HEAP32[$445 >> 2] = $10; //@line 4935
      sp = STACKTOP; //@line 4936
      return;
     }
    case 44:
     {
      $447 = $$1202$in$i$reg2mem$0 & 65535; //@line 4941
      if (($$1202$i$reg2mem$0 + -1 & 65535) <= 254) {
       $450 = HEAP32[$40 >> 2] | 0; //@line 4945
       if (!(HEAP32[$450 + 52 >> 2] | 0)) {
        HEAP16[$450 + 4 >> 1] = $$1202$i$reg2mem$0; //@line 4951
        $455 = $$reg2mem60$0 + 1 | 0; //@line 4952
        HEAP32[$94 >> 2] = $455; //@line 4953
        $456 = HEAP32[$42 >> 2] | 0; //@line 4954
        $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 4955
        $457 = FUNCTION_TABLE_ii[$456 & 31]($$1202$i$reg2mem$0) | 0; //@line 4956
        if (___async) {
         HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 4959
         $458 = $ReallocAsyncCtx5 + 4 | 0; //@line 4960
         HEAP32[$458 >> 2] = $2; //@line 4961
         $459 = $ReallocAsyncCtx5 + 8 | 0; //@line 4962
         HEAP32[$459 >> 2] = $4; //@line 4963
         $460 = $ReallocAsyncCtx5 + 12 | 0; //@line 4964
         HEAP32[$460 >> 2] = $447; //@line 4965
         $461 = $ReallocAsyncCtx5 + 16 | 0; //@line 4966
         HEAP32[$461 >> 2] = $6; //@line 4967
         $462 = $ReallocAsyncCtx5 + 20 | 0; //@line 4968
         HEAP32[$462 >> 2] = $8; //@line 4969
         $463 = $ReallocAsyncCtx5 + 24 | 0; //@line 4970
         HEAP32[$463 >> 2] = $10; //@line 4971
         $464 = $ReallocAsyncCtx5 + 28 | 0; //@line 4972
         HEAP32[$464 >> 2] = $12; //@line 4973
         $465 = $ReallocAsyncCtx5 + 32 | 0; //@line 4974
         HEAP32[$465 >> 2] = $16; //@line 4975
         $466 = $ReallocAsyncCtx5 + 36 | 0; //@line 4976
         HEAP32[$466 >> 2] = $18; //@line 4977
         $467 = $ReallocAsyncCtx5 + 40 | 0; //@line 4978
         HEAP32[$467 >> 2] = $455; //@line 4979
         $468 = $ReallocAsyncCtx5 + 44 | 0; //@line 4980
         HEAP32[$468 >> 2] = $20; //@line 4981
         $469 = $ReallocAsyncCtx5 + 48 | 0; //@line 4982
         HEAP32[$469 >> 2] = $22; //@line 4983
         $470 = $ReallocAsyncCtx5 + 52 | 0; //@line 4984
         HEAP32[$470 >> 2] = $24; //@line 4985
         $471 = $ReallocAsyncCtx5 + 56 | 0; //@line 4986
         HEAP32[$471 >> 2] = $26; //@line 4987
         $472 = $ReallocAsyncCtx5 + 60 | 0; //@line 4988
         HEAP32[$472 >> 2] = $28; //@line 4989
         $473 = $ReallocAsyncCtx5 + 64 | 0; //@line 4990
         HEAP32[$473 >> 2] = $30; //@line 4991
         $474 = $ReallocAsyncCtx5 + 68 | 0; //@line 4992
         HEAP32[$474 >> 2] = $32; //@line 4993
         $475 = $ReallocAsyncCtx5 + 72 | 0; //@line 4994
         HEAP32[$475 >> 2] = $34; //@line 4995
         $476 = $ReallocAsyncCtx5 + 76 | 0; //@line 4996
         HEAP32[$476 >> 2] = $36; //@line 4997
         $477 = $ReallocAsyncCtx5 + 80 | 0; //@line 4998
         HEAP32[$477 >> 2] = $38; //@line 4999
         $478 = $ReallocAsyncCtx5 + 84 | 0; //@line 5000
         HEAP32[$478 >> 2] = $40; //@line 5001
         $479 = $ReallocAsyncCtx5 + 88 | 0; //@line 5002
         HEAP32[$479 >> 2] = $42; //@line 5003
         $480 = $ReallocAsyncCtx5 + 92 | 0; //@line 5004
         HEAP32[$480 >> 2] = $44; //@line 5005
         $481 = $ReallocAsyncCtx5 + 96 | 0; //@line 5006
         HEAP32[$481 >> 2] = $46; //@line 5007
         $482 = $ReallocAsyncCtx5 + 100 | 0; //@line 5008
         HEAP32[$482 >> 2] = $48; //@line 5009
         $483 = $ReallocAsyncCtx5 + 104 | 0; //@line 5010
         HEAP32[$483 >> 2] = $50; //@line 5011
         $484 = $ReallocAsyncCtx5 + 108 | 0; //@line 5012
         HEAP32[$484 >> 2] = $52; //@line 5013
         $485 = $ReallocAsyncCtx5 + 112 | 0; //@line 5014
         HEAP32[$485 >> 2] = $54; //@line 5015
         $486 = $ReallocAsyncCtx5 + 116 | 0; //@line 5016
         HEAP32[$486 >> 2] = $58; //@line 5017
         $487 = $ReallocAsyncCtx5 + 120 | 0; //@line 5018
         HEAP32[$487 >> 2] = $60; //@line 5019
         $488 = $ReallocAsyncCtx5 + 124 | 0; //@line 5020
         HEAP32[$488 >> 2] = $62; //@line 5021
         $489 = $ReallocAsyncCtx5 + 128 | 0; //@line 5022
         HEAP32[$489 >> 2] = $64; //@line 5023
         $490 = $ReallocAsyncCtx5 + 132 | 0; //@line 5024
         HEAP32[$490 >> 2] = $66; //@line 5025
         $491 = $ReallocAsyncCtx5 + 136 | 0; //@line 5026
         HEAP32[$491 >> 2] = $68; //@line 5027
         $492 = $ReallocAsyncCtx5 + 140 | 0; //@line 5028
         HEAP32[$492 >> 2] = $70; //@line 5029
         $493 = $ReallocAsyncCtx5 + 144 | 0; //@line 5030
         HEAP32[$493 >> 2] = $72; //@line 5031
         $494 = $ReallocAsyncCtx5 + 148 | 0; //@line 5032
         HEAP32[$494 >> 2] = $74; //@line 5033
         $495 = $ReallocAsyncCtx5 + 152 | 0; //@line 5034
         HEAP32[$495 >> 2] = $76; //@line 5035
         $496 = $ReallocAsyncCtx5 + 156 | 0; //@line 5036
         HEAP32[$496 >> 2] = $78; //@line 5037
         $497 = $ReallocAsyncCtx5 + 160 | 0; //@line 5038
         HEAP32[$497 >> 2] = $80; //@line 5039
         $498 = $ReallocAsyncCtx5 + 164 | 0; //@line 5040
         HEAP32[$498 >> 2] = $82; //@line 5041
         $499 = $ReallocAsyncCtx5 + 168 | 0; //@line 5042
         HEAP32[$499 >> 2] = $84; //@line 5043
         $500 = $ReallocAsyncCtx5 + 172 | 0; //@line 5044
         HEAP32[$500 >> 2] = $86; //@line 5045
         $501 = $ReallocAsyncCtx5 + 176 | 0; //@line 5046
         HEAP32[$501 >> 2] = $90; //@line 5047
         $502 = $ReallocAsyncCtx5 + 180 | 0; //@line 5048
         HEAP32[$502 >> 2] = $92; //@line 5049
         $503 = $ReallocAsyncCtx5 + 184 | 0; //@line 5050
         HEAP32[$503 >> 2] = $94; //@line 5051
         $504 = $ReallocAsyncCtx5 + 188 | 0; //@line 5052
         HEAP32[$504 >> 2] = $96; //@line 5053
         $505 = $ReallocAsyncCtx5 + 192 | 0; //@line 5054
         HEAP32[$505 >> 2] = $100; //@line 5055
         $506 = $ReallocAsyncCtx5 + 196 | 0; //@line 5056
         HEAP32[$506 >> 2] = $106; //@line 5057
         $507 = $ReallocAsyncCtx5 + 200 | 0; //@line 5058
         HEAP32[$507 >> 2] = $102; //@line 5059
         $508 = $ReallocAsyncCtx5 + 204 | 0; //@line 5060
         HEAP32[$508 >> 2] = $104; //@line 5061
         $509 = $ReallocAsyncCtx5 + 208 | 0; //@line 5062
         HEAP32[$509 >> 2] = $110; //@line 5063
         $510 = $ReallocAsyncCtx5 + 212 | 0; //@line 5064
         HEAP32[$510 >> 2] = $108; //@line 5065
         $511 = $ReallocAsyncCtx5 + 216 | 0; //@line 5066
         HEAP32[$511 >> 2] = $112; //@line 5067
         $512 = $ReallocAsyncCtx5 + 220 | 0; //@line 5068
         HEAP32[$512 >> 2] = $114; //@line 5069
         $513 = $ReallocAsyncCtx5 + 224 | 0; //@line 5070
         HEAP32[$513 >> 2] = $116; //@line 5071
         $514 = $ReallocAsyncCtx5 + 228 | 0; //@line 5072
         HEAP32[$514 >> 2] = $118; //@line 5073
         $515 = $ReallocAsyncCtx5 + 232 | 0; //@line 5074
         HEAP32[$515 >> 2] = $120; //@line 5075
         $516 = $ReallocAsyncCtx5 + 236 | 0; //@line 5076
         HEAP32[$516 >> 2] = $124; //@line 5077
         $517 = $ReallocAsyncCtx5 + 240 | 0; //@line 5078
         HEAP32[$517 >> 2] = $126; //@line 5079
         $518 = $ReallocAsyncCtx5 + 244 | 0; //@line 5080
         HEAP32[$518 >> 2] = $128; //@line 5081
         $519 = $ReallocAsyncCtx5 + 248 | 0; //@line 5082
         HEAP32[$519 >> 2] = $130; //@line 5083
         $520 = $ReallocAsyncCtx5 + 252 | 0; //@line 5084
         HEAP32[$520 >> 2] = $$reg2mem71$0; //@line 5085
         $521 = $ReallocAsyncCtx5 + 256 | 0; //@line 5086
         HEAP32[$521 >> 2] = $134; //@line 5087
         $522 = $ReallocAsyncCtx5 + 260 | 0; //@line 5088
         HEAP32[$522 >> 2] = $136; //@line 5089
         $523 = $ReallocAsyncCtx5 + 264 | 0; //@line 5090
         HEAP32[$523 >> 2] = $138; //@line 5091
         $524 = $ReallocAsyncCtx5 + 268 | 0; //@line 5092
         HEAP32[$524 >> 2] = $140; //@line 5093
         $525 = $ReallocAsyncCtx5 + 272 | 0; //@line 5094
         HEAP32[$525 >> 2] = $142; //@line 5095
         sp = STACKTOP; //@line 5096
         return;
        }
        HEAP32[___async_retval >> 2] = $457; //@line 5100
        ___async_unwind = 0; //@line 5101
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 5102
        $458 = $ReallocAsyncCtx5 + 4 | 0; //@line 5103
        HEAP32[$458 >> 2] = $2; //@line 5104
        $459 = $ReallocAsyncCtx5 + 8 | 0; //@line 5105
        HEAP32[$459 >> 2] = $4; //@line 5106
        $460 = $ReallocAsyncCtx5 + 12 | 0; //@line 5107
        HEAP32[$460 >> 2] = $447; //@line 5108
        $461 = $ReallocAsyncCtx5 + 16 | 0; //@line 5109
        HEAP32[$461 >> 2] = $6; //@line 5110
        $462 = $ReallocAsyncCtx5 + 20 | 0; //@line 5111
        HEAP32[$462 >> 2] = $8; //@line 5112
        $463 = $ReallocAsyncCtx5 + 24 | 0; //@line 5113
        HEAP32[$463 >> 2] = $10; //@line 5114
        $464 = $ReallocAsyncCtx5 + 28 | 0; //@line 5115
        HEAP32[$464 >> 2] = $12; //@line 5116
        $465 = $ReallocAsyncCtx5 + 32 | 0; //@line 5117
        HEAP32[$465 >> 2] = $16; //@line 5118
        $466 = $ReallocAsyncCtx5 + 36 | 0; //@line 5119
        HEAP32[$466 >> 2] = $18; //@line 5120
        $467 = $ReallocAsyncCtx5 + 40 | 0; //@line 5121
        HEAP32[$467 >> 2] = $455; //@line 5122
        $468 = $ReallocAsyncCtx5 + 44 | 0; //@line 5123
        HEAP32[$468 >> 2] = $20; //@line 5124
        $469 = $ReallocAsyncCtx5 + 48 | 0; //@line 5125
        HEAP32[$469 >> 2] = $22; //@line 5126
        $470 = $ReallocAsyncCtx5 + 52 | 0; //@line 5127
        HEAP32[$470 >> 2] = $24; //@line 5128
        $471 = $ReallocAsyncCtx5 + 56 | 0; //@line 5129
        HEAP32[$471 >> 2] = $26; //@line 5130
        $472 = $ReallocAsyncCtx5 + 60 | 0; //@line 5131
        HEAP32[$472 >> 2] = $28; //@line 5132
        $473 = $ReallocAsyncCtx5 + 64 | 0; //@line 5133
        HEAP32[$473 >> 2] = $30; //@line 5134
        $474 = $ReallocAsyncCtx5 + 68 | 0; //@line 5135
        HEAP32[$474 >> 2] = $32; //@line 5136
        $475 = $ReallocAsyncCtx5 + 72 | 0; //@line 5137
        HEAP32[$475 >> 2] = $34; //@line 5138
        $476 = $ReallocAsyncCtx5 + 76 | 0; //@line 5139
        HEAP32[$476 >> 2] = $36; //@line 5140
        $477 = $ReallocAsyncCtx5 + 80 | 0; //@line 5141
        HEAP32[$477 >> 2] = $38; //@line 5142
        $478 = $ReallocAsyncCtx5 + 84 | 0; //@line 5143
        HEAP32[$478 >> 2] = $40; //@line 5144
        $479 = $ReallocAsyncCtx5 + 88 | 0; //@line 5145
        HEAP32[$479 >> 2] = $42; //@line 5146
        $480 = $ReallocAsyncCtx5 + 92 | 0; //@line 5147
        HEAP32[$480 >> 2] = $44; //@line 5148
        $481 = $ReallocAsyncCtx5 + 96 | 0; //@line 5149
        HEAP32[$481 >> 2] = $46; //@line 5150
        $482 = $ReallocAsyncCtx5 + 100 | 0; //@line 5151
        HEAP32[$482 >> 2] = $48; //@line 5152
        $483 = $ReallocAsyncCtx5 + 104 | 0; //@line 5153
        HEAP32[$483 >> 2] = $50; //@line 5154
        $484 = $ReallocAsyncCtx5 + 108 | 0; //@line 5155
        HEAP32[$484 >> 2] = $52; //@line 5156
        $485 = $ReallocAsyncCtx5 + 112 | 0; //@line 5157
        HEAP32[$485 >> 2] = $54; //@line 5158
        $486 = $ReallocAsyncCtx5 + 116 | 0; //@line 5159
        HEAP32[$486 >> 2] = $58; //@line 5160
        $487 = $ReallocAsyncCtx5 + 120 | 0; //@line 5161
        HEAP32[$487 >> 2] = $60; //@line 5162
        $488 = $ReallocAsyncCtx5 + 124 | 0; //@line 5163
        HEAP32[$488 >> 2] = $62; //@line 5164
        $489 = $ReallocAsyncCtx5 + 128 | 0; //@line 5165
        HEAP32[$489 >> 2] = $64; //@line 5166
        $490 = $ReallocAsyncCtx5 + 132 | 0; //@line 5167
        HEAP32[$490 >> 2] = $66; //@line 5168
        $491 = $ReallocAsyncCtx5 + 136 | 0; //@line 5169
        HEAP32[$491 >> 2] = $68; //@line 5170
        $492 = $ReallocAsyncCtx5 + 140 | 0; //@line 5171
        HEAP32[$492 >> 2] = $70; //@line 5172
        $493 = $ReallocAsyncCtx5 + 144 | 0; //@line 5173
        HEAP32[$493 >> 2] = $72; //@line 5174
        $494 = $ReallocAsyncCtx5 + 148 | 0; //@line 5175
        HEAP32[$494 >> 2] = $74; //@line 5176
        $495 = $ReallocAsyncCtx5 + 152 | 0; //@line 5177
        HEAP32[$495 >> 2] = $76; //@line 5178
        $496 = $ReallocAsyncCtx5 + 156 | 0; //@line 5179
        HEAP32[$496 >> 2] = $78; //@line 5180
        $497 = $ReallocAsyncCtx5 + 160 | 0; //@line 5181
        HEAP32[$497 >> 2] = $80; //@line 5182
        $498 = $ReallocAsyncCtx5 + 164 | 0; //@line 5183
        HEAP32[$498 >> 2] = $82; //@line 5184
        $499 = $ReallocAsyncCtx5 + 168 | 0; //@line 5185
        HEAP32[$499 >> 2] = $84; //@line 5186
        $500 = $ReallocAsyncCtx5 + 172 | 0; //@line 5187
        HEAP32[$500 >> 2] = $86; //@line 5188
        $501 = $ReallocAsyncCtx5 + 176 | 0; //@line 5189
        HEAP32[$501 >> 2] = $90; //@line 5190
        $502 = $ReallocAsyncCtx5 + 180 | 0; //@line 5191
        HEAP32[$502 >> 2] = $92; //@line 5192
        $503 = $ReallocAsyncCtx5 + 184 | 0; //@line 5193
        HEAP32[$503 >> 2] = $94; //@line 5194
        $504 = $ReallocAsyncCtx5 + 188 | 0; //@line 5195
        HEAP32[$504 >> 2] = $96; //@line 5196
        $505 = $ReallocAsyncCtx5 + 192 | 0; //@line 5197
        HEAP32[$505 >> 2] = $100; //@line 5198
        $506 = $ReallocAsyncCtx5 + 196 | 0; //@line 5199
        HEAP32[$506 >> 2] = $106; //@line 5200
        $507 = $ReallocAsyncCtx5 + 200 | 0; //@line 5201
        HEAP32[$507 >> 2] = $102; //@line 5202
        $508 = $ReallocAsyncCtx5 + 204 | 0; //@line 5203
        HEAP32[$508 >> 2] = $104; //@line 5204
        $509 = $ReallocAsyncCtx5 + 208 | 0; //@line 5205
        HEAP32[$509 >> 2] = $110; //@line 5206
        $510 = $ReallocAsyncCtx5 + 212 | 0; //@line 5207
        HEAP32[$510 >> 2] = $108; //@line 5208
        $511 = $ReallocAsyncCtx5 + 216 | 0; //@line 5209
        HEAP32[$511 >> 2] = $112; //@line 5210
        $512 = $ReallocAsyncCtx5 + 220 | 0; //@line 5211
        HEAP32[$512 >> 2] = $114; //@line 5212
        $513 = $ReallocAsyncCtx5 + 224 | 0; //@line 5213
        HEAP32[$513 >> 2] = $116; //@line 5214
        $514 = $ReallocAsyncCtx5 + 228 | 0; //@line 5215
        HEAP32[$514 >> 2] = $118; //@line 5216
        $515 = $ReallocAsyncCtx5 + 232 | 0; //@line 5217
        HEAP32[$515 >> 2] = $120; //@line 5218
        $516 = $ReallocAsyncCtx5 + 236 | 0; //@line 5219
        HEAP32[$516 >> 2] = $124; //@line 5220
        $517 = $ReallocAsyncCtx5 + 240 | 0; //@line 5221
        HEAP32[$517 >> 2] = $126; //@line 5222
        $518 = $ReallocAsyncCtx5 + 244 | 0; //@line 5223
        HEAP32[$518 >> 2] = $128; //@line 5224
        $519 = $ReallocAsyncCtx5 + 248 | 0; //@line 5225
        HEAP32[$519 >> 2] = $130; //@line 5226
        $520 = $ReallocAsyncCtx5 + 252 | 0; //@line 5227
        HEAP32[$520 >> 2] = $$reg2mem71$0; //@line 5228
        $521 = $ReallocAsyncCtx5 + 256 | 0; //@line 5229
        HEAP32[$521 >> 2] = $134; //@line 5230
        $522 = $ReallocAsyncCtx5 + 260 | 0; //@line 5231
        HEAP32[$522 >> 2] = $136; //@line 5232
        $523 = $ReallocAsyncCtx5 + 264 | 0; //@line 5233
        HEAP32[$523 >> 2] = $138; //@line 5234
        $524 = $ReallocAsyncCtx5 + 268 | 0; //@line 5235
        HEAP32[$524 >> 2] = $140; //@line 5236
        $525 = $ReallocAsyncCtx5 + 272 | 0; //@line 5237
        HEAP32[$525 >> 2] = $142; //@line 5238
        sp = STACKTOP; //@line 5239
        return;
       }
      }
      _mbed_tracef(2, 3844, 4605, $62); //@line 5243
      break L2;
      break;
     }
    case 50:
     {
      $527 = HEAP32[$40 >> 2] | 0; //@line 5248
      $528 = $527 + 56 | 0; //@line 5249
      if (HEAP32[$528 >> 2] | 0) {
       _mbed_tracef(2, 3844, 4739, $32); //@line 5253
       break L2;
      }
      $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 5257
      $532 = _sn_coap_parser_options_parse_multiple_options($120, $94, $$reg2mem$0, $528, $527 + 6 | 0, 8, $$1202$i$reg2mem$0) | 0; //@line 5258
      if (___async) {
       HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 5261
       $533 = $ReallocAsyncCtx9 + 4 | 0; //@line 5262
       HEAP32[$533 >> 2] = $2; //@line 5263
       $534 = $ReallocAsyncCtx9 + 8 | 0; //@line 5264
       HEAP32[$534 >> 2] = $4; //@line 5265
       $535 = $ReallocAsyncCtx9 + 12 | 0; //@line 5266
       HEAP32[$535 >> 2] = $6; //@line 5267
       $536 = $ReallocAsyncCtx9 + 16 | 0; //@line 5268
       HEAP32[$536 >> 2] = $8; //@line 5269
       $537 = $ReallocAsyncCtx9 + 20 | 0; //@line 5270
       HEAP32[$537 >> 2] = $16; //@line 5271
       $538 = $ReallocAsyncCtx9 + 24 | 0; //@line 5272
       HEAP32[$538 >> 2] = $12; //@line 5273
       $539 = $ReallocAsyncCtx9 + 28 | 0; //@line 5274
       HEAP32[$539 >> 2] = $142; //@line 5275
       $540 = $ReallocAsyncCtx9 + 32 | 0; //@line 5276
       HEAP32[$540 >> 2] = $18; //@line 5277
       $541 = $ReallocAsyncCtx9 + 36 | 0; //@line 5278
       HEAP32[$541 >> 2] = $20; //@line 5279
       $542 = $ReallocAsyncCtx9 + 40 | 0; //@line 5280
       HEAP32[$542 >> 2] = $22; //@line 5281
       $543 = $ReallocAsyncCtx9 + 44 | 0; //@line 5282
       HEAP32[$543 >> 2] = $24; //@line 5283
       $544 = $ReallocAsyncCtx9 + 48 | 0; //@line 5284
       HEAP32[$544 >> 2] = $26; //@line 5285
       $545 = $ReallocAsyncCtx9 + 52 | 0; //@line 5286
       HEAP32[$545 >> 2] = $28; //@line 5287
       $546 = $ReallocAsyncCtx9 + 56 | 0; //@line 5288
       HEAP32[$546 >> 2] = $30; //@line 5289
       $547 = $ReallocAsyncCtx9 + 60 | 0; //@line 5290
       HEAP32[$547 >> 2] = $32; //@line 5291
       $548 = $ReallocAsyncCtx9 + 64 | 0; //@line 5292
       HEAP32[$548 >> 2] = $34; //@line 5293
       $549 = $ReallocAsyncCtx9 + 68 | 0; //@line 5294
       HEAP32[$549 >> 2] = $36; //@line 5295
       $550 = $ReallocAsyncCtx9 + 72 | 0; //@line 5296
       HEAP32[$550 >> 2] = $38; //@line 5297
       $551 = $ReallocAsyncCtx9 + 76 | 0; //@line 5298
       HEAP32[$551 >> 2] = $40; //@line 5299
       $552 = $ReallocAsyncCtx9 + 80 | 0; //@line 5300
       HEAP32[$552 >> 2] = $42; //@line 5301
       $553 = $ReallocAsyncCtx9 + 84 | 0; //@line 5302
       HEAP32[$553 >> 2] = $44; //@line 5303
       $554 = $ReallocAsyncCtx9 + 88 | 0; //@line 5304
       HEAP32[$554 >> 2] = $46; //@line 5305
       $555 = $ReallocAsyncCtx9 + 92 | 0; //@line 5306
       HEAP32[$555 >> 2] = $48; //@line 5307
       $556 = $ReallocAsyncCtx9 + 96 | 0; //@line 5308
       HEAP32[$556 >> 2] = $50; //@line 5309
       $557 = $ReallocAsyncCtx9 + 100 | 0; //@line 5310
       HEAP32[$557 >> 2] = $52; //@line 5311
       $558 = $ReallocAsyncCtx9 + 104 | 0; //@line 5312
       HEAP32[$558 >> 2] = $54; //@line 5313
       $559 = $ReallocAsyncCtx9 + 108 | 0; //@line 5314
       HEAP32[$559 >> 2] = $58; //@line 5315
       $560 = $ReallocAsyncCtx9 + 112 | 0; //@line 5316
       HEAP32[$560 >> 2] = $60; //@line 5317
       $561 = $ReallocAsyncCtx9 + 116 | 0; //@line 5318
       HEAP32[$561 >> 2] = $62; //@line 5319
       $562 = $ReallocAsyncCtx9 + 120 | 0; //@line 5320
       HEAP32[$562 >> 2] = $64; //@line 5321
       $563 = $ReallocAsyncCtx9 + 124 | 0; //@line 5322
       HEAP32[$563 >> 2] = $66; //@line 5323
       $564 = $ReallocAsyncCtx9 + 128 | 0; //@line 5324
       HEAP32[$564 >> 2] = $68; //@line 5325
       $565 = $ReallocAsyncCtx9 + 132 | 0; //@line 5326
       HEAP32[$565 >> 2] = $70; //@line 5327
       $566 = $ReallocAsyncCtx9 + 136 | 0; //@line 5328
       HEAP32[$566 >> 2] = $72; //@line 5329
       $567 = $ReallocAsyncCtx9 + 140 | 0; //@line 5330
       HEAP32[$567 >> 2] = $74; //@line 5331
       $568 = $ReallocAsyncCtx9 + 144 | 0; //@line 5332
       HEAP32[$568 >> 2] = $76; //@line 5333
       $569 = $ReallocAsyncCtx9 + 148 | 0; //@line 5334
       HEAP32[$569 >> 2] = $78; //@line 5335
       $570 = $ReallocAsyncCtx9 + 152 | 0; //@line 5336
       HEAP32[$570 >> 2] = $80; //@line 5337
       $571 = $ReallocAsyncCtx9 + 156 | 0; //@line 5338
       HEAP32[$571 >> 2] = $82; //@line 5339
       $572 = $ReallocAsyncCtx9 + 160 | 0; //@line 5340
       HEAP32[$572 >> 2] = $84; //@line 5341
       $573 = $ReallocAsyncCtx9 + 164 | 0; //@line 5342
       HEAP32[$573 >> 2] = $86; //@line 5343
       $574 = $ReallocAsyncCtx9 + 168 | 0; //@line 5344
       HEAP32[$574 >> 2] = $90; //@line 5345
       $575 = $ReallocAsyncCtx9 + 172 | 0; //@line 5346
       HEAP32[$575 >> 2] = $92; //@line 5347
       $576 = $ReallocAsyncCtx9 + 176 | 0; //@line 5348
       HEAP32[$576 >> 2] = $94; //@line 5349
       $577 = $ReallocAsyncCtx9 + 180 | 0; //@line 5350
       HEAP32[$577 >> 2] = $96; //@line 5351
       $578 = $ReallocAsyncCtx9 + 184 | 0; //@line 5352
       HEAP32[$578 >> 2] = $100; //@line 5353
       $579 = $ReallocAsyncCtx9 + 188 | 0; //@line 5354
       HEAP32[$579 >> 2] = $106; //@line 5355
       $580 = $ReallocAsyncCtx9 + 192 | 0; //@line 5356
       HEAP32[$580 >> 2] = $102; //@line 5357
       $581 = $ReallocAsyncCtx9 + 196 | 0; //@line 5358
       HEAP32[$581 >> 2] = $104; //@line 5359
       $582 = $ReallocAsyncCtx9 + 200 | 0; //@line 5360
       HEAP32[$582 >> 2] = $110; //@line 5361
       $583 = $ReallocAsyncCtx9 + 204 | 0; //@line 5362
       HEAP32[$583 >> 2] = $108; //@line 5363
       $584 = $ReallocAsyncCtx9 + 208 | 0; //@line 5364
       HEAP32[$584 >> 2] = $112; //@line 5365
       $585 = $ReallocAsyncCtx9 + 212 | 0; //@line 5366
       HEAP32[$585 >> 2] = $114; //@line 5367
       $586 = $ReallocAsyncCtx9 + 216 | 0; //@line 5368
       HEAP32[$586 >> 2] = $116; //@line 5369
       $587 = $ReallocAsyncCtx9 + 220 | 0; //@line 5370
       HEAP32[$587 >> 2] = $118; //@line 5371
       $588 = $ReallocAsyncCtx9 + 224 | 0; //@line 5372
       HEAP32[$588 >> 2] = $120; //@line 5373
       $589 = $ReallocAsyncCtx9 + 228 | 0; //@line 5374
       HEAP32[$589 >> 2] = $124; //@line 5375
       $590 = $ReallocAsyncCtx9 + 232 | 0; //@line 5376
       HEAP32[$590 >> 2] = $126; //@line 5377
       $591 = $ReallocAsyncCtx9 + 236 | 0; //@line 5378
       HEAP32[$591 >> 2] = $128; //@line 5379
       $592 = $ReallocAsyncCtx9 + 240 | 0; //@line 5380
       HEAP32[$592 >> 2] = $130; //@line 5381
       $593 = $ReallocAsyncCtx9 + 244 | 0; //@line 5382
       HEAP32[$593 >> 2] = $$reg2mem71$0; //@line 5383
       $594 = $ReallocAsyncCtx9 + 248 | 0; //@line 5384
       HEAP32[$594 >> 2] = $134; //@line 5385
       $595 = $ReallocAsyncCtx9 + 252 | 0; //@line 5386
       HEAP32[$595 >> 2] = $136; //@line 5387
       $596 = $ReallocAsyncCtx9 + 256 | 0; //@line 5388
       HEAP32[$596 >> 2] = $138; //@line 5389
       $597 = $ReallocAsyncCtx9 + 260 | 0; //@line 5390
       HEAP32[$597 >> 2] = $140; //@line 5391
       $598 = $ReallocAsyncCtx9 + 264 | 0; //@line 5392
       HEAP32[$598 >> 2] = $10; //@line 5393
       sp = STACKTOP; //@line 5394
       return;
      }
      HEAP8[___async_retval >> 0] = $532; //@line 5398
      ___async_unwind = 0; //@line 5399
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 5400
      $533 = $ReallocAsyncCtx9 + 4 | 0; //@line 5401
      HEAP32[$533 >> 2] = $2; //@line 5402
      $534 = $ReallocAsyncCtx9 + 8 | 0; //@line 5403
      HEAP32[$534 >> 2] = $4; //@line 5404
      $535 = $ReallocAsyncCtx9 + 12 | 0; //@line 5405
      HEAP32[$535 >> 2] = $6; //@line 5406
      $536 = $ReallocAsyncCtx9 + 16 | 0; //@line 5407
      HEAP32[$536 >> 2] = $8; //@line 5408
      $537 = $ReallocAsyncCtx9 + 20 | 0; //@line 5409
      HEAP32[$537 >> 2] = $16; //@line 5410
      $538 = $ReallocAsyncCtx9 + 24 | 0; //@line 5411
      HEAP32[$538 >> 2] = $12; //@line 5412
      $539 = $ReallocAsyncCtx9 + 28 | 0; //@line 5413
      HEAP32[$539 >> 2] = $142; //@line 5414
      $540 = $ReallocAsyncCtx9 + 32 | 0; //@line 5415
      HEAP32[$540 >> 2] = $18; //@line 5416
      $541 = $ReallocAsyncCtx9 + 36 | 0; //@line 5417
      HEAP32[$541 >> 2] = $20; //@line 5418
      $542 = $ReallocAsyncCtx9 + 40 | 0; //@line 5419
      HEAP32[$542 >> 2] = $22; //@line 5420
      $543 = $ReallocAsyncCtx9 + 44 | 0; //@line 5421
      HEAP32[$543 >> 2] = $24; //@line 5422
      $544 = $ReallocAsyncCtx9 + 48 | 0; //@line 5423
      HEAP32[$544 >> 2] = $26; //@line 5424
      $545 = $ReallocAsyncCtx9 + 52 | 0; //@line 5425
      HEAP32[$545 >> 2] = $28; //@line 5426
      $546 = $ReallocAsyncCtx9 + 56 | 0; //@line 5427
      HEAP32[$546 >> 2] = $30; //@line 5428
      $547 = $ReallocAsyncCtx9 + 60 | 0; //@line 5429
      HEAP32[$547 >> 2] = $32; //@line 5430
      $548 = $ReallocAsyncCtx9 + 64 | 0; //@line 5431
      HEAP32[$548 >> 2] = $34; //@line 5432
      $549 = $ReallocAsyncCtx9 + 68 | 0; //@line 5433
      HEAP32[$549 >> 2] = $36; //@line 5434
      $550 = $ReallocAsyncCtx9 + 72 | 0; //@line 5435
      HEAP32[$550 >> 2] = $38; //@line 5436
      $551 = $ReallocAsyncCtx9 + 76 | 0; //@line 5437
      HEAP32[$551 >> 2] = $40; //@line 5438
      $552 = $ReallocAsyncCtx9 + 80 | 0; //@line 5439
      HEAP32[$552 >> 2] = $42; //@line 5440
      $553 = $ReallocAsyncCtx9 + 84 | 0; //@line 5441
      HEAP32[$553 >> 2] = $44; //@line 5442
      $554 = $ReallocAsyncCtx9 + 88 | 0; //@line 5443
      HEAP32[$554 >> 2] = $46; //@line 5444
      $555 = $ReallocAsyncCtx9 + 92 | 0; //@line 5445
      HEAP32[$555 >> 2] = $48; //@line 5446
      $556 = $ReallocAsyncCtx9 + 96 | 0; //@line 5447
      HEAP32[$556 >> 2] = $50; //@line 5448
      $557 = $ReallocAsyncCtx9 + 100 | 0; //@line 5449
      HEAP32[$557 >> 2] = $52; //@line 5450
      $558 = $ReallocAsyncCtx9 + 104 | 0; //@line 5451
      HEAP32[$558 >> 2] = $54; //@line 5452
      $559 = $ReallocAsyncCtx9 + 108 | 0; //@line 5453
      HEAP32[$559 >> 2] = $58; //@line 5454
      $560 = $ReallocAsyncCtx9 + 112 | 0; //@line 5455
      HEAP32[$560 >> 2] = $60; //@line 5456
      $561 = $ReallocAsyncCtx9 + 116 | 0; //@line 5457
      HEAP32[$561 >> 2] = $62; //@line 5458
      $562 = $ReallocAsyncCtx9 + 120 | 0; //@line 5459
      HEAP32[$562 >> 2] = $64; //@line 5460
      $563 = $ReallocAsyncCtx9 + 124 | 0; //@line 5461
      HEAP32[$563 >> 2] = $66; //@line 5462
      $564 = $ReallocAsyncCtx9 + 128 | 0; //@line 5463
      HEAP32[$564 >> 2] = $68; //@line 5464
      $565 = $ReallocAsyncCtx9 + 132 | 0; //@line 5465
      HEAP32[$565 >> 2] = $70; //@line 5466
      $566 = $ReallocAsyncCtx9 + 136 | 0; //@line 5467
      HEAP32[$566 >> 2] = $72; //@line 5468
      $567 = $ReallocAsyncCtx9 + 140 | 0; //@line 5469
      HEAP32[$567 >> 2] = $74; //@line 5470
      $568 = $ReallocAsyncCtx9 + 144 | 0; //@line 5471
      HEAP32[$568 >> 2] = $76; //@line 5472
      $569 = $ReallocAsyncCtx9 + 148 | 0; //@line 5473
      HEAP32[$569 >> 2] = $78; //@line 5474
      $570 = $ReallocAsyncCtx9 + 152 | 0; //@line 5475
      HEAP32[$570 >> 2] = $80; //@line 5476
      $571 = $ReallocAsyncCtx9 + 156 | 0; //@line 5477
      HEAP32[$571 >> 2] = $82; //@line 5478
      $572 = $ReallocAsyncCtx9 + 160 | 0; //@line 5479
      HEAP32[$572 >> 2] = $84; //@line 5480
      $573 = $ReallocAsyncCtx9 + 164 | 0; //@line 5481
      HEAP32[$573 >> 2] = $86; //@line 5482
      $574 = $ReallocAsyncCtx9 + 168 | 0; //@line 5483
      HEAP32[$574 >> 2] = $90; //@line 5484
      $575 = $ReallocAsyncCtx9 + 172 | 0; //@line 5485
      HEAP32[$575 >> 2] = $92; //@line 5486
      $576 = $ReallocAsyncCtx9 + 176 | 0; //@line 5487
      HEAP32[$576 >> 2] = $94; //@line 5488
      $577 = $ReallocAsyncCtx9 + 180 | 0; //@line 5489
      HEAP32[$577 >> 2] = $96; //@line 5490
      $578 = $ReallocAsyncCtx9 + 184 | 0; //@line 5491
      HEAP32[$578 >> 2] = $100; //@line 5492
      $579 = $ReallocAsyncCtx9 + 188 | 0; //@line 5493
      HEAP32[$579 >> 2] = $106; //@line 5494
      $580 = $ReallocAsyncCtx9 + 192 | 0; //@line 5495
      HEAP32[$580 >> 2] = $102; //@line 5496
      $581 = $ReallocAsyncCtx9 + 196 | 0; //@line 5497
      HEAP32[$581 >> 2] = $104; //@line 5498
      $582 = $ReallocAsyncCtx9 + 200 | 0; //@line 5499
      HEAP32[$582 >> 2] = $110; //@line 5500
      $583 = $ReallocAsyncCtx9 + 204 | 0; //@line 5501
      HEAP32[$583 >> 2] = $108; //@line 5502
      $584 = $ReallocAsyncCtx9 + 208 | 0; //@line 5503
      HEAP32[$584 >> 2] = $112; //@line 5504
      $585 = $ReallocAsyncCtx9 + 212 | 0; //@line 5505
      HEAP32[$585 >> 2] = $114; //@line 5506
      $586 = $ReallocAsyncCtx9 + 216 | 0; //@line 5507
      HEAP32[$586 >> 2] = $116; //@line 5508
      $587 = $ReallocAsyncCtx9 + 220 | 0; //@line 5509
      HEAP32[$587 >> 2] = $118; //@line 5510
      $588 = $ReallocAsyncCtx9 + 224 | 0; //@line 5511
      HEAP32[$588 >> 2] = $120; //@line 5512
      $589 = $ReallocAsyncCtx9 + 228 | 0; //@line 5513
      HEAP32[$589 >> 2] = $124; //@line 5514
      $590 = $ReallocAsyncCtx9 + 232 | 0; //@line 5515
      HEAP32[$590 >> 2] = $126; //@line 5516
      $591 = $ReallocAsyncCtx9 + 236 | 0; //@line 5517
      HEAP32[$591 >> 2] = $128; //@line 5518
      $592 = $ReallocAsyncCtx9 + 240 | 0; //@line 5519
      HEAP32[$592 >> 2] = $130; //@line 5520
      $593 = $ReallocAsyncCtx9 + 244 | 0; //@line 5521
      HEAP32[$593 >> 2] = $$reg2mem71$0; //@line 5522
      $594 = $ReallocAsyncCtx9 + 248 | 0; //@line 5523
      HEAP32[$594 >> 2] = $134; //@line 5524
      $595 = $ReallocAsyncCtx9 + 252 | 0; //@line 5525
      HEAP32[$595 >> 2] = $136; //@line 5526
      $596 = $ReallocAsyncCtx9 + 256 | 0; //@line 5527
      HEAP32[$596 >> 2] = $138; //@line 5528
      $597 = $ReallocAsyncCtx9 + 260 | 0; //@line 5529
      HEAP32[$597 >> 2] = $140; //@line 5530
      $598 = $ReallocAsyncCtx9 + 264 | 0; //@line 5531
      HEAP32[$598 >> 2] = $10; //@line 5532
      sp = STACKTOP; //@line 5533
      return;
     }
    case 57:
     {
      _mbed_tracef(2, 3844, 4872, $136); //@line 5538
      break L2;
      break;
     }
    case 61:
     {
      $616 = HEAP32[$40 >> 2] | 0; //@line 5543
      $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 5546
      $619 = _sn_coap_parser_options_parse_multiple_options($120, $94, $$reg2mem$0, $616 + 60 | 0, $616 + 8 | 0, 20, $$1202$i$reg2mem$0) | 0; //@line 5547
      if (___async) {
       HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 5550
       $620 = $ReallocAsyncCtx8 + 4 | 0; //@line 5551
       HEAP32[$620 >> 2] = $2; //@line 5552
       $621 = $ReallocAsyncCtx8 + 8 | 0; //@line 5553
       HEAP32[$621 >> 2] = $4; //@line 5554
       $622 = $ReallocAsyncCtx8 + 12 | 0; //@line 5555
       HEAP32[$622 >> 2] = $6; //@line 5556
       $623 = $ReallocAsyncCtx8 + 16 | 0; //@line 5557
       HEAP32[$623 >> 2] = $8; //@line 5558
       $624 = $ReallocAsyncCtx8 + 20 | 0; //@line 5559
       HEAP32[$624 >> 2] = $16; //@line 5560
       $625 = $ReallocAsyncCtx8 + 24 | 0; //@line 5561
       HEAP32[$625 >> 2] = $12; //@line 5562
       $626 = $ReallocAsyncCtx8 + 28 | 0; //@line 5563
       HEAP32[$626 >> 2] = $142; //@line 5564
       $627 = $ReallocAsyncCtx8 + 32 | 0; //@line 5565
       HEAP32[$627 >> 2] = $18; //@line 5566
       $628 = $ReallocAsyncCtx8 + 36 | 0; //@line 5567
       HEAP32[$628 >> 2] = $20; //@line 5568
       $629 = $ReallocAsyncCtx8 + 40 | 0; //@line 5569
       HEAP32[$629 >> 2] = $22; //@line 5570
       $630 = $ReallocAsyncCtx8 + 44 | 0; //@line 5571
       HEAP32[$630 >> 2] = $24; //@line 5572
       $631 = $ReallocAsyncCtx8 + 48 | 0; //@line 5573
       HEAP32[$631 >> 2] = $26; //@line 5574
       $632 = $ReallocAsyncCtx8 + 52 | 0; //@line 5575
       HEAP32[$632 >> 2] = $28; //@line 5576
       $633 = $ReallocAsyncCtx8 + 56 | 0; //@line 5577
       HEAP32[$633 >> 2] = $30; //@line 5578
       $634 = $ReallocAsyncCtx8 + 60 | 0; //@line 5579
       HEAP32[$634 >> 2] = $32; //@line 5580
       $635 = $ReallocAsyncCtx8 + 64 | 0; //@line 5581
       HEAP32[$635 >> 2] = $34; //@line 5582
       $636 = $ReallocAsyncCtx8 + 68 | 0; //@line 5583
       HEAP32[$636 >> 2] = $36; //@line 5584
       $637 = $ReallocAsyncCtx8 + 72 | 0; //@line 5585
       HEAP32[$637 >> 2] = $38; //@line 5586
       $638 = $ReallocAsyncCtx8 + 76 | 0; //@line 5587
       HEAP32[$638 >> 2] = $40; //@line 5588
       $639 = $ReallocAsyncCtx8 + 80 | 0; //@line 5589
       HEAP32[$639 >> 2] = $42; //@line 5590
       $640 = $ReallocAsyncCtx8 + 84 | 0; //@line 5591
       HEAP32[$640 >> 2] = $44; //@line 5592
       $641 = $ReallocAsyncCtx8 + 88 | 0; //@line 5593
       HEAP32[$641 >> 2] = $46; //@line 5594
       $642 = $ReallocAsyncCtx8 + 92 | 0; //@line 5595
       HEAP32[$642 >> 2] = $48; //@line 5596
       $643 = $ReallocAsyncCtx8 + 96 | 0; //@line 5597
       HEAP32[$643 >> 2] = $50; //@line 5598
       $644 = $ReallocAsyncCtx8 + 100 | 0; //@line 5599
       HEAP32[$644 >> 2] = $52; //@line 5600
       $645 = $ReallocAsyncCtx8 + 104 | 0; //@line 5601
       HEAP32[$645 >> 2] = $54; //@line 5602
       $646 = $ReallocAsyncCtx8 + 108 | 0; //@line 5603
       HEAP32[$646 >> 2] = $58; //@line 5604
       $647 = $ReallocAsyncCtx8 + 112 | 0; //@line 5605
       HEAP32[$647 >> 2] = $60; //@line 5606
       $648 = $ReallocAsyncCtx8 + 116 | 0; //@line 5607
       HEAP32[$648 >> 2] = $62; //@line 5608
       $649 = $ReallocAsyncCtx8 + 120 | 0; //@line 5609
       HEAP32[$649 >> 2] = $64; //@line 5610
       $650 = $ReallocAsyncCtx8 + 124 | 0; //@line 5611
       HEAP32[$650 >> 2] = $66; //@line 5612
       $651 = $ReallocAsyncCtx8 + 128 | 0; //@line 5613
       HEAP32[$651 >> 2] = $68; //@line 5614
       $652 = $ReallocAsyncCtx8 + 132 | 0; //@line 5615
       HEAP32[$652 >> 2] = $70; //@line 5616
       $653 = $ReallocAsyncCtx8 + 136 | 0; //@line 5617
       HEAP32[$653 >> 2] = $72; //@line 5618
       $654 = $ReallocAsyncCtx8 + 140 | 0; //@line 5619
       HEAP32[$654 >> 2] = $74; //@line 5620
       $655 = $ReallocAsyncCtx8 + 144 | 0; //@line 5621
       HEAP32[$655 >> 2] = $76; //@line 5622
       $656 = $ReallocAsyncCtx8 + 148 | 0; //@line 5623
       HEAP32[$656 >> 2] = $78; //@line 5624
       $657 = $ReallocAsyncCtx8 + 152 | 0; //@line 5625
       HEAP32[$657 >> 2] = $80; //@line 5626
       $658 = $ReallocAsyncCtx8 + 156 | 0; //@line 5627
       HEAP32[$658 >> 2] = $82; //@line 5628
       $659 = $ReallocAsyncCtx8 + 160 | 0; //@line 5629
       HEAP32[$659 >> 2] = $84; //@line 5630
       $660 = $ReallocAsyncCtx8 + 164 | 0; //@line 5631
       HEAP32[$660 >> 2] = $86; //@line 5632
       $661 = $ReallocAsyncCtx8 + 168 | 0; //@line 5633
       HEAP32[$661 >> 2] = $90; //@line 5634
       $662 = $ReallocAsyncCtx8 + 172 | 0; //@line 5635
       HEAP32[$662 >> 2] = $92; //@line 5636
       $663 = $ReallocAsyncCtx8 + 176 | 0; //@line 5637
       HEAP32[$663 >> 2] = $94; //@line 5638
       $664 = $ReallocAsyncCtx8 + 180 | 0; //@line 5639
       HEAP32[$664 >> 2] = $96; //@line 5640
       $665 = $ReallocAsyncCtx8 + 184 | 0; //@line 5641
       HEAP32[$665 >> 2] = $100; //@line 5642
       $666 = $ReallocAsyncCtx8 + 188 | 0; //@line 5643
       HEAP32[$666 >> 2] = $106; //@line 5644
       $667 = $ReallocAsyncCtx8 + 192 | 0; //@line 5645
       HEAP32[$667 >> 2] = $102; //@line 5646
       $668 = $ReallocAsyncCtx8 + 196 | 0; //@line 5647
       HEAP32[$668 >> 2] = $104; //@line 5648
       $669 = $ReallocAsyncCtx8 + 200 | 0; //@line 5649
       HEAP32[$669 >> 2] = $110; //@line 5650
       $670 = $ReallocAsyncCtx8 + 204 | 0; //@line 5651
       HEAP32[$670 >> 2] = $108; //@line 5652
       $671 = $ReallocAsyncCtx8 + 208 | 0; //@line 5653
       HEAP32[$671 >> 2] = $112; //@line 5654
       $672 = $ReallocAsyncCtx8 + 212 | 0; //@line 5655
       HEAP32[$672 >> 2] = $114; //@line 5656
       $673 = $ReallocAsyncCtx8 + 216 | 0; //@line 5657
       HEAP32[$673 >> 2] = $116; //@line 5658
       $674 = $ReallocAsyncCtx8 + 220 | 0; //@line 5659
       HEAP32[$674 >> 2] = $118; //@line 5660
       $675 = $ReallocAsyncCtx8 + 224 | 0; //@line 5661
       HEAP32[$675 >> 2] = $120; //@line 5662
       $676 = $ReallocAsyncCtx8 + 228 | 0; //@line 5663
       HEAP32[$676 >> 2] = $124; //@line 5664
       $677 = $ReallocAsyncCtx8 + 232 | 0; //@line 5665
       HEAP32[$677 >> 2] = $126; //@line 5666
       $678 = $ReallocAsyncCtx8 + 236 | 0; //@line 5667
       HEAP32[$678 >> 2] = $128; //@line 5668
       $679 = $ReallocAsyncCtx8 + 240 | 0; //@line 5669
       HEAP32[$679 >> 2] = $130; //@line 5670
       $680 = $ReallocAsyncCtx8 + 244 | 0; //@line 5671
       HEAP32[$680 >> 2] = $$reg2mem71$0; //@line 5672
       $681 = $ReallocAsyncCtx8 + 248 | 0; //@line 5673
       HEAP32[$681 >> 2] = $134; //@line 5674
       $682 = $ReallocAsyncCtx8 + 252 | 0; //@line 5675
       HEAP32[$682 >> 2] = $136; //@line 5676
       $683 = $ReallocAsyncCtx8 + 256 | 0; //@line 5677
       HEAP32[$683 >> 2] = $138; //@line 5678
       $684 = $ReallocAsyncCtx8 + 260 | 0; //@line 5679
       HEAP32[$684 >> 2] = $140; //@line 5680
       $685 = $ReallocAsyncCtx8 + 264 | 0; //@line 5681
       HEAP32[$685 >> 2] = $10; //@line 5682
       sp = STACKTOP; //@line 5683
       return;
      }
      HEAP8[___async_retval >> 0] = $619; //@line 5687
      ___async_unwind = 0; //@line 5688
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 5689
      $620 = $ReallocAsyncCtx8 + 4 | 0; //@line 5690
      HEAP32[$620 >> 2] = $2; //@line 5691
      $621 = $ReallocAsyncCtx8 + 8 | 0; //@line 5692
      HEAP32[$621 >> 2] = $4; //@line 5693
      $622 = $ReallocAsyncCtx8 + 12 | 0; //@line 5694
      HEAP32[$622 >> 2] = $6; //@line 5695
      $623 = $ReallocAsyncCtx8 + 16 | 0; //@line 5696
      HEAP32[$623 >> 2] = $8; //@line 5697
      $624 = $ReallocAsyncCtx8 + 20 | 0; //@line 5698
      HEAP32[$624 >> 2] = $16; //@line 5699
      $625 = $ReallocAsyncCtx8 + 24 | 0; //@line 5700
      HEAP32[$625 >> 2] = $12; //@line 5701
      $626 = $ReallocAsyncCtx8 + 28 | 0; //@line 5702
      HEAP32[$626 >> 2] = $142; //@line 5703
      $627 = $ReallocAsyncCtx8 + 32 | 0; //@line 5704
      HEAP32[$627 >> 2] = $18; //@line 5705
      $628 = $ReallocAsyncCtx8 + 36 | 0; //@line 5706
      HEAP32[$628 >> 2] = $20; //@line 5707
      $629 = $ReallocAsyncCtx8 + 40 | 0; //@line 5708
      HEAP32[$629 >> 2] = $22; //@line 5709
      $630 = $ReallocAsyncCtx8 + 44 | 0; //@line 5710
      HEAP32[$630 >> 2] = $24; //@line 5711
      $631 = $ReallocAsyncCtx8 + 48 | 0; //@line 5712
      HEAP32[$631 >> 2] = $26; //@line 5713
      $632 = $ReallocAsyncCtx8 + 52 | 0; //@line 5714
      HEAP32[$632 >> 2] = $28; //@line 5715
      $633 = $ReallocAsyncCtx8 + 56 | 0; //@line 5716
      HEAP32[$633 >> 2] = $30; //@line 5717
      $634 = $ReallocAsyncCtx8 + 60 | 0; //@line 5718
      HEAP32[$634 >> 2] = $32; //@line 5719
      $635 = $ReallocAsyncCtx8 + 64 | 0; //@line 5720
      HEAP32[$635 >> 2] = $34; //@line 5721
      $636 = $ReallocAsyncCtx8 + 68 | 0; //@line 5722
      HEAP32[$636 >> 2] = $36; //@line 5723
      $637 = $ReallocAsyncCtx8 + 72 | 0; //@line 5724
      HEAP32[$637 >> 2] = $38; //@line 5725
      $638 = $ReallocAsyncCtx8 + 76 | 0; //@line 5726
      HEAP32[$638 >> 2] = $40; //@line 5727
      $639 = $ReallocAsyncCtx8 + 80 | 0; //@line 5728
      HEAP32[$639 >> 2] = $42; //@line 5729
      $640 = $ReallocAsyncCtx8 + 84 | 0; //@line 5730
      HEAP32[$640 >> 2] = $44; //@line 5731
      $641 = $ReallocAsyncCtx8 + 88 | 0; //@line 5732
      HEAP32[$641 >> 2] = $46; //@line 5733
      $642 = $ReallocAsyncCtx8 + 92 | 0; //@line 5734
      HEAP32[$642 >> 2] = $48; //@line 5735
      $643 = $ReallocAsyncCtx8 + 96 | 0; //@line 5736
      HEAP32[$643 >> 2] = $50; //@line 5737
      $644 = $ReallocAsyncCtx8 + 100 | 0; //@line 5738
      HEAP32[$644 >> 2] = $52; //@line 5739
      $645 = $ReallocAsyncCtx8 + 104 | 0; //@line 5740
      HEAP32[$645 >> 2] = $54; //@line 5741
      $646 = $ReallocAsyncCtx8 + 108 | 0; //@line 5742
      HEAP32[$646 >> 2] = $58; //@line 5743
      $647 = $ReallocAsyncCtx8 + 112 | 0; //@line 5744
      HEAP32[$647 >> 2] = $60; //@line 5745
      $648 = $ReallocAsyncCtx8 + 116 | 0; //@line 5746
      HEAP32[$648 >> 2] = $62; //@line 5747
      $649 = $ReallocAsyncCtx8 + 120 | 0; //@line 5748
      HEAP32[$649 >> 2] = $64; //@line 5749
      $650 = $ReallocAsyncCtx8 + 124 | 0; //@line 5750
      HEAP32[$650 >> 2] = $66; //@line 5751
      $651 = $ReallocAsyncCtx8 + 128 | 0; //@line 5752
      HEAP32[$651 >> 2] = $68; //@line 5753
      $652 = $ReallocAsyncCtx8 + 132 | 0; //@line 5754
      HEAP32[$652 >> 2] = $70; //@line 5755
      $653 = $ReallocAsyncCtx8 + 136 | 0; //@line 5756
      HEAP32[$653 >> 2] = $72; //@line 5757
      $654 = $ReallocAsyncCtx8 + 140 | 0; //@line 5758
      HEAP32[$654 >> 2] = $74; //@line 5759
      $655 = $ReallocAsyncCtx8 + 144 | 0; //@line 5760
      HEAP32[$655 >> 2] = $76; //@line 5761
      $656 = $ReallocAsyncCtx8 + 148 | 0; //@line 5762
      HEAP32[$656 >> 2] = $78; //@line 5763
      $657 = $ReallocAsyncCtx8 + 152 | 0; //@line 5764
      HEAP32[$657 >> 2] = $80; //@line 5765
      $658 = $ReallocAsyncCtx8 + 156 | 0; //@line 5766
      HEAP32[$658 >> 2] = $82; //@line 5767
      $659 = $ReallocAsyncCtx8 + 160 | 0; //@line 5768
      HEAP32[$659 >> 2] = $84; //@line 5769
      $660 = $ReallocAsyncCtx8 + 164 | 0; //@line 5770
      HEAP32[$660 >> 2] = $86; //@line 5771
      $661 = $ReallocAsyncCtx8 + 168 | 0; //@line 5772
      HEAP32[$661 >> 2] = $90; //@line 5773
      $662 = $ReallocAsyncCtx8 + 172 | 0; //@line 5774
      HEAP32[$662 >> 2] = $92; //@line 5775
      $663 = $ReallocAsyncCtx8 + 176 | 0; //@line 5776
      HEAP32[$663 >> 2] = $94; //@line 5777
      $664 = $ReallocAsyncCtx8 + 180 | 0; //@line 5778
      HEAP32[$664 >> 2] = $96; //@line 5779
      $665 = $ReallocAsyncCtx8 + 184 | 0; //@line 5780
      HEAP32[$665 >> 2] = $100; //@line 5781
      $666 = $ReallocAsyncCtx8 + 188 | 0; //@line 5782
      HEAP32[$666 >> 2] = $106; //@line 5783
      $667 = $ReallocAsyncCtx8 + 192 | 0; //@line 5784
      HEAP32[$667 >> 2] = $102; //@line 5785
      $668 = $ReallocAsyncCtx8 + 196 | 0; //@line 5786
      HEAP32[$668 >> 2] = $104; //@line 5787
      $669 = $ReallocAsyncCtx8 + 200 | 0; //@line 5788
      HEAP32[$669 >> 2] = $110; //@line 5789
      $670 = $ReallocAsyncCtx8 + 204 | 0; //@line 5790
      HEAP32[$670 >> 2] = $108; //@line 5791
      $671 = $ReallocAsyncCtx8 + 208 | 0; //@line 5792
      HEAP32[$671 >> 2] = $112; //@line 5793
      $672 = $ReallocAsyncCtx8 + 212 | 0; //@line 5794
      HEAP32[$672 >> 2] = $114; //@line 5795
      $673 = $ReallocAsyncCtx8 + 216 | 0; //@line 5796
      HEAP32[$673 >> 2] = $116; //@line 5797
      $674 = $ReallocAsyncCtx8 + 220 | 0; //@line 5798
      HEAP32[$674 >> 2] = $118; //@line 5799
      $675 = $ReallocAsyncCtx8 + 224 | 0; //@line 5800
      HEAP32[$675 >> 2] = $120; //@line 5801
      $676 = $ReallocAsyncCtx8 + 228 | 0; //@line 5802
      HEAP32[$676 >> 2] = $124; //@line 5803
      $677 = $ReallocAsyncCtx8 + 232 | 0; //@line 5804
      HEAP32[$677 >> 2] = $126; //@line 5805
      $678 = $ReallocAsyncCtx8 + 236 | 0; //@line 5806
      HEAP32[$678 >> 2] = $128; //@line 5807
      $679 = $ReallocAsyncCtx8 + 240 | 0; //@line 5808
      HEAP32[$679 >> 2] = $130; //@line 5809
      $680 = $ReallocAsyncCtx8 + 244 | 0; //@line 5810
      HEAP32[$680 >> 2] = $$reg2mem71$0; //@line 5811
      $681 = $ReallocAsyncCtx8 + 248 | 0; //@line 5812
      HEAP32[$681 >> 2] = $134; //@line 5813
      $682 = $ReallocAsyncCtx8 + 252 | 0; //@line 5814
      HEAP32[$682 >> 2] = $136; //@line 5815
      $683 = $ReallocAsyncCtx8 + 256 | 0; //@line 5816
      HEAP32[$683 >> 2] = $138; //@line 5817
      $684 = $ReallocAsyncCtx8 + 260 | 0; //@line 5818
      HEAP32[$684 >> 2] = $140; //@line 5819
      $685 = $ReallocAsyncCtx8 + 264 | 0; //@line 5820
      HEAP32[$685 >> 2] = $10; //@line 5821
      sp = STACKTOP; //@line 5822
      return;
     }
    case 64:
     {
      $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 5827
      $687 = _sn_coap_parser_options_parse_multiple_options($120, $94, $$reg2mem$1, $58, $84, 11, $$1202$i$reg2mem$2) | 0; //@line 5828
      if (___async) {
       HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 5831
       $688 = $ReallocAsyncCtx7 + 4 | 0; //@line 5832
       HEAP32[$688 >> 2] = $2; //@line 5833
       $689 = $ReallocAsyncCtx7 + 8 | 0; //@line 5834
       HEAP32[$689 >> 2] = $4; //@line 5835
       $690 = $ReallocAsyncCtx7 + 12 | 0; //@line 5836
       HEAP32[$690 >> 2] = $6; //@line 5837
       $691 = $ReallocAsyncCtx7 + 16 | 0; //@line 5838
       HEAP32[$691 >> 2] = $8; //@line 5839
       $692 = $ReallocAsyncCtx7 + 20 | 0; //@line 5840
       HEAP32[$692 >> 2] = $16; //@line 5841
       $693 = $ReallocAsyncCtx7 + 24 | 0; //@line 5842
       HEAP32[$693 >> 2] = $12; //@line 5843
       $694 = $ReallocAsyncCtx7 + 28 | 0; //@line 5844
       HEAP32[$694 >> 2] = $142; //@line 5845
       $695 = $ReallocAsyncCtx7 + 32 | 0; //@line 5846
       HEAP32[$695 >> 2] = $18; //@line 5847
       $696 = $ReallocAsyncCtx7 + 36 | 0; //@line 5848
       HEAP32[$696 >> 2] = $20; //@line 5849
       $697 = $ReallocAsyncCtx7 + 40 | 0; //@line 5850
       HEAP32[$697 >> 2] = $22; //@line 5851
       $698 = $ReallocAsyncCtx7 + 44 | 0; //@line 5852
       HEAP32[$698 >> 2] = $24; //@line 5853
       $699 = $ReallocAsyncCtx7 + 48 | 0; //@line 5854
       HEAP32[$699 >> 2] = $26; //@line 5855
       $700 = $ReallocAsyncCtx7 + 52 | 0; //@line 5856
       HEAP32[$700 >> 2] = $28; //@line 5857
       $701 = $ReallocAsyncCtx7 + 56 | 0; //@line 5858
       HEAP32[$701 >> 2] = $30; //@line 5859
       $702 = $ReallocAsyncCtx7 + 60 | 0; //@line 5860
       HEAP32[$702 >> 2] = $32; //@line 5861
       $703 = $ReallocAsyncCtx7 + 64 | 0; //@line 5862
       HEAP32[$703 >> 2] = $34; //@line 5863
       $704 = $ReallocAsyncCtx7 + 68 | 0; //@line 5864
       HEAP32[$704 >> 2] = $36; //@line 5865
       $705 = $ReallocAsyncCtx7 + 72 | 0; //@line 5866
       HEAP32[$705 >> 2] = $38; //@line 5867
       $706 = $ReallocAsyncCtx7 + 76 | 0; //@line 5868
       HEAP32[$706 >> 2] = $40; //@line 5869
       $707 = $ReallocAsyncCtx7 + 80 | 0; //@line 5870
       HEAP32[$707 >> 2] = $42; //@line 5871
       $708 = $ReallocAsyncCtx7 + 84 | 0; //@line 5872
       HEAP32[$708 >> 2] = $44; //@line 5873
       $709 = $ReallocAsyncCtx7 + 88 | 0; //@line 5874
       HEAP32[$709 >> 2] = $46; //@line 5875
       $710 = $ReallocAsyncCtx7 + 92 | 0; //@line 5876
       HEAP32[$710 >> 2] = $48; //@line 5877
       $711 = $ReallocAsyncCtx7 + 96 | 0; //@line 5878
       HEAP32[$711 >> 2] = $50; //@line 5879
       $712 = $ReallocAsyncCtx7 + 100 | 0; //@line 5880
       HEAP32[$712 >> 2] = $52; //@line 5881
       $713 = $ReallocAsyncCtx7 + 104 | 0; //@line 5882
       HEAP32[$713 >> 2] = $54; //@line 5883
       $714 = $ReallocAsyncCtx7 + 108 | 0; //@line 5884
       HEAP32[$714 >> 2] = $58; //@line 5885
       $715 = $ReallocAsyncCtx7 + 112 | 0; //@line 5886
       HEAP32[$715 >> 2] = $60; //@line 5887
       $716 = $ReallocAsyncCtx7 + 116 | 0; //@line 5888
       HEAP32[$716 >> 2] = $62; //@line 5889
       $717 = $ReallocAsyncCtx7 + 120 | 0; //@line 5890
       HEAP32[$717 >> 2] = $64; //@line 5891
       $718 = $ReallocAsyncCtx7 + 124 | 0; //@line 5892
       HEAP32[$718 >> 2] = $66; //@line 5893
       $719 = $ReallocAsyncCtx7 + 128 | 0; //@line 5894
       HEAP32[$719 >> 2] = $68; //@line 5895
       $720 = $ReallocAsyncCtx7 + 132 | 0; //@line 5896
       HEAP32[$720 >> 2] = $70; //@line 5897
       $721 = $ReallocAsyncCtx7 + 136 | 0; //@line 5898
       HEAP32[$721 >> 2] = $72; //@line 5899
       $722 = $ReallocAsyncCtx7 + 140 | 0; //@line 5900
       HEAP32[$722 >> 2] = $74; //@line 5901
       $723 = $ReallocAsyncCtx7 + 144 | 0; //@line 5902
       HEAP32[$723 >> 2] = $76; //@line 5903
       $724 = $ReallocAsyncCtx7 + 148 | 0; //@line 5904
       HEAP32[$724 >> 2] = $78; //@line 5905
       $725 = $ReallocAsyncCtx7 + 152 | 0; //@line 5906
       HEAP32[$725 >> 2] = $80; //@line 5907
       $726 = $ReallocAsyncCtx7 + 156 | 0; //@line 5908
       HEAP32[$726 >> 2] = $82; //@line 5909
       $727 = $ReallocAsyncCtx7 + 160 | 0; //@line 5910
       HEAP32[$727 >> 2] = $84; //@line 5911
       $728 = $ReallocAsyncCtx7 + 164 | 0; //@line 5912
       HEAP32[$728 >> 2] = $86; //@line 5913
       $729 = $ReallocAsyncCtx7 + 168 | 0; //@line 5914
       HEAP32[$729 >> 2] = $90; //@line 5915
       $730 = $ReallocAsyncCtx7 + 172 | 0; //@line 5916
       HEAP32[$730 >> 2] = $92; //@line 5917
       $731 = $ReallocAsyncCtx7 + 176 | 0; //@line 5918
       HEAP32[$731 >> 2] = $94; //@line 5919
       $732 = $ReallocAsyncCtx7 + 180 | 0; //@line 5920
       HEAP32[$732 >> 2] = $96; //@line 5921
       $733 = $ReallocAsyncCtx7 + 184 | 0; //@line 5922
       HEAP32[$733 >> 2] = $100; //@line 5923
       $734 = $ReallocAsyncCtx7 + 188 | 0; //@line 5924
       HEAP32[$734 >> 2] = $106; //@line 5925
       $735 = $ReallocAsyncCtx7 + 192 | 0; //@line 5926
       HEAP32[$735 >> 2] = $102; //@line 5927
       $736 = $ReallocAsyncCtx7 + 196 | 0; //@line 5928
       HEAP32[$736 >> 2] = $104; //@line 5929
       $737 = $ReallocAsyncCtx7 + 200 | 0; //@line 5930
       HEAP32[$737 >> 2] = $110; //@line 5931
       $738 = $ReallocAsyncCtx7 + 204 | 0; //@line 5932
       HEAP32[$738 >> 2] = $108; //@line 5933
       $739 = $ReallocAsyncCtx7 + 208 | 0; //@line 5934
       HEAP32[$739 >> 2] = $112; //@line 5935
       $740 = $ReallocAsyncCtx7 + 212 | 0; //@line 5936
       HEAP32[$740 >> 2] = $114; //@line 5937
       $741 = $ReallocAsyncCtx7 + 216 | 0; //@line 5938
       HEAP32[$741 >> 2] = $116; //@line 5939
       $742 = $ReallocAsyncCtx7 + 220 | 0; //@line 5940
       HEAP32[$742 >> 2] = $118; //@line 5941
       $743 = $ReallocAsyncCtx7 + 224 | 0; //@line 5942
       HEAP32[$743 >> 2] = $120; //@line 5943
       $744 = $ReallocAsyncCtx7 + 228 | 0; //@line 5944
       HEAP32[$744 >> 2] = $124; //@line 5945
       $745 = $ReallocAsyncCtx7 + 232 | 0; //@line 5946
       HEAP32[$745 >> 2] = $126; //@line 5947
       $746 = $ReallocAsyncCtx7 + 236 | 0; //@line 5948
       HEAP32[$746 >> 2] = $128; //@line 5949
       $747 = $ReallocAsyncCtx7 + 240 | 0; //@line 5950
       HEAP32[$747 >> 2] = $130; //@line 5951
       $748 = $ReallocAsyncCtx7 + 244 | 0; //@line 5952
       HEAP32[$748 >> 2] = $$reg2mem71$2; //@line 5953
       $749 = $ReallocAsyncCtx7 + 248 | 0; //@line 5954
       HEAP32[$749 >> 2] = $134; //@line 5955
       $750 = $ReallocAsyncCtx7 + 252 | 0; //@line 5956
       HEAP32[$750 >> 2] = $136; //@line 5957
       $751 = $ReallocAsyncCtx7 + 256 | 0; //@line 5958
       HEAP32[$751 >> 2] = $138; //@line 5959
       $752 = $ReallocAsyncCtx7 + 260 | 0; //@line 5960
       HEAP32[$752 >> 2] = $140; //@line 5961
       $753 = $ReallocAsyncCtx7 + 264 | 0; //@line 5962
       HEAP32[$753 >> 2] = $10; //@line 5963
       sp = STACKTOP; //@line 5964
       return;
      }
      HEAP8[___async_retval >> 0] = $687; //@line 5968
      ___async_unwind = 0; //@line 5969
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 5970
      $688 = $ReallocAsyncCtx7 + 4 | 0; //@line 5971
      HEAP32[$688 >> 2] = $2; //@line 5972
      $689 = $ReallocAsyncCtx7 + 8 | 0; //@line 5973
      HEAP32[$689 >> 2] = $4; //@line 5974
      $690 = $ReallocAsyncCtx7 + 12 | 0; //@line 5975
      HEAP32[$690 >> 2] = $6; //@line 5976
      $691 = $ReallocAsyncCtx7 + 16 | 0; //@line 5977
      HEAP32[$691 >> 2] = $8; //@line 5978
      $692 = $ReallocAsyncCtx7 + 20 | 0; //@line 5979
      HEAP32[$692 >> 2] = $16; //@line 5980
      $693 = $ReallocAsyncCtx7 + 24 | 0; //@line 5981
      HEAP32[$693 >> 2] = $12; //@line 5982
      $694 = $ReallocAsyncCtx7 + 28 | 0; //@line 5983
      HEAP32[$694 >> 2] = $142; //@line 5984
      $695 = $ReallocAsyncCtx7 + 32 | 0; //@line 5985
      HEAP32[$695 >> 2] = $18; //@line 5986
      $696 = $ReallocAsyncCtx7 + 36 | 0; //@line 5987
      HEAP32[$696 >> 2] = $20; //@line 5988
      $697 = $ReallocAsyncCtx7 + 40 | 0; //@line 5989
      HEAP32[$697 >> 2] = $22; //@line 5990
      $698 = $ReallocAsyncCtx7 + 44 | 0; //@line 5991
      HEAP32[$698 >> 2] = $24; //@line 5992
      $699 = $ReallocAsyncCtx7 + 48 | 0; //@line 5993
      HEAP32[$699 >> 2] = $26; //@line 5994
      $700 = $ReallocAsyncCtx7 + 52 | 0; //@line 5995
      HEAP32[$700 >> 2] = $28; //@line 5996
      $701 = $ReallocAsyncCtx7 + 56 | 0; //@line 5997
      HEAP32[$701 >> 2] = $30; //@line 5998
      $702 = $ReallocAsyncCtx7 + 60 | 0; //@line 5999
      HEAP32[$702 >> 2] = $32; //@line 6000
      $703 = $ReallocAsyncCtx7 + 64 | 0; //@line 6001
      HEAP32[$703 >> 2] = $34; //@line 6002
      $704 = $ReallocAsyncCtx7 + 68 | 0; //@line 6003
      HEAP32[$704 >> 2] = $36; //@line 6004
      $705 = $ReallocAsyncCtx7 + 72 | 0; //@line 6005
      HEAP32[$705 >> 2] = $38; //@line 6006
      $706 = $ReallocAsyncCtx7 + 76 | 0; //@line 6007
      HEAP32[$706 >> 2] = $40; //@line 6008
      $707 = $ReallocAsyncCtx7 + 80 | 0; //@line 6009
      HEAP32[$707 >> 2] = $42; //@line 6010
      $708 = $ReallocAsyncCtx7 + 84 | 0; //@line 6011
      HEAP32[$708 >> 2] = $44; //@line 6012
      $709 = $ReallocAsyncCtx7 + 88 | 0; //@line 6013
      HEAP32[$709 >> 2] = $46; //@line 6014
      $710 = $ReallocAsyncCtx7 + 92 | 0; //@line 6015
      HEAP32[$710 >> 2] = $48; //@line 6016
      $711 = $ReallocAsyncCtx7 + 96 | 0; //@line 6017
      HEAP32[$711 >> 2] = $50; //@line 6018
      $712 = $ReallocAsyncCtx7 + 100 | 0; //@line 6019
      HEAP32[$712 >> 2] = $52; //@line 6020
      $713 = $ReallocAsyncCtx7 + 104 | 0; //@line 6021
      HEAP32[$713 >> 2] = $54; //@line 6022
      $714 = $ReallocAsyncCtx7 + 108 | 0; //@line 6023
      HEAP32[$714 >> 2] = $58; //@line 6024
      $715 = $ReallocAsyncCtx7 + 112 | 0; //@line 6025
      HEAP32[$715 >> 2] = $60; //@line 6026
      $716 = $ReallocAsyncCtx7 + 116 | 0; //@line 6027
      HEAP32[$716 >> 2] = $62; //@line 6028
      $717 = $ReallocAsyncCtx7 + 120 | 0; //@line 6029
      HEAP32[$717 >> 2] = $64; //@line 6030
      $718 = $ReallocAsyncCtx7 + 124 | 0; //@line 6031
      HEAP32[$718 >> 2] = $66; //@line 6032
      $719 = $ReallocAsyncCtx7 + 128 | 0; //@line 6033
      HEAP32[$719 >> 2] = $68; //@line 6034
      $720 = $ReallocAsyncCtx7 + 132 | 0; //@line 6035
      HEAP32[$720 >> 2] = $70; //@line 6036
      $721 = $ReallocAsyncCtx7 + 136 | 0; //@line 6037
      HEAP32[$721 >> 2] = $72; //@line 6038
      $722 = $ReallocAsyncCtx7 + 140 | 0; //@line 6039
      HEAP32[$722 >> 2] = $74; //@line 6040
      $723 = $ReallocAsyncCtx7 + 144 | 0; //@line 6041
      HEAP32[$723 >> 2] = $76; //@line 6042
      $724 = $ReallocAsyncCtx7 + 148 | 0; //@line 6043
      HEAP32[$724 >> 2] = $78; //@line 6044
      $725 = $ReallocAsyncCtx7 + 152 | 0; //@line 6045
      HEAP32[$725 >> 2] = $80; //@line 6046
      $726 = $ReallocAsyncCtx7 + 156 | 0; //@line 6047
      HEAP32[$726 >> 2] = $82; //@line 6048
      $727 = $ReallocAsyncCtx7 + 160 | 0; //@line 6049
      HEAP32[$727 >> 2] = $84; //@line 6050
      $728 = $ReallocAsyncCtx7 + 164 | 0; //@line 6051
      HEAP32[$728 >> 2] = $86; //@line 6052
      $729 = $ReallocAsyncCtx7 + 168 | 0; //@line 6053
      HEAP32[$729 >> 2] = $90; //@line 6054
      $730 = $ReallocAsyncCtx7 + 172 | 0; //@line 6055
      HEAP32[$730 >> 2] = $92; //@line 6056
      $731 = $ReallocAsyncCtx7 + 176 | 0; //@line 6057
      HEAP32[$731 >> 2] = $94; //@line 6058
      $732 = $ReallocAsyncCtx7 + 180 | 0; //@line 6059
      HEAP32[$732 >> 2] = $96; //@line 6060
      $733 = $ReallocAsyncCtx7 + 184 | 0; //@line 6061
      HEAP32[$733 >> 2] = $100; //@line 6062
      $734 = $ReallocAsyncCtx7 + 188 | 0; //@line 6063
      HEAP32[$734 >> 2] = $106; //@line 6064
      $735 = $ReallocAsyncCtx7 + 192 | 0; //@line 6065
      HEAP32[$735 >> 2] = $102; //@line 6066
      $736 = $ReallocAsyncCtx7 + 196 | 0; //@line 6067
      HEAP32[$736 >> 2] = $104; //@line 6068
      $737 = $ReallocAsyncCtx7 + 200 | 0; //@line 6069
      HEAP32[$737 >> 2] = $110; //@line 6070
      $738 = $ReallocAsyncCtx7 + 204 | 0; //@line 6071
      HEAP32[$738 >> 2] = $108; //@line 6072
      $739 = $ReallocAsyncCtx7 + 208 | 0; //@line 6073
      HEAP32[$739 >> 2] = $112; //@line 6074
      $740 = $ReallocAsyncCtx7 + 212 | 0; //@line 6075
      HEAP32[$740 >> 2] = $114; //@line 6076
      $741 = $ReallocAsyncCtx7 + 216 | 0; //@line 6077
      HEAP32[$741 >> 2] = $116; //@line 6078
      $742 = $ReallocAsyncCtx7 + 220 | 0; //@line 6079
      HEAP32[$742 >> 2] = $118; //@line 6080
      $743 = $ReallocAsyncCtx7 + 224 | 0; //@line 6081
      HEAP32[$743 >> 2] = $120; //@line 6082
      $744 = $ReallocAsyncCtx7 + 228 | 0; //@line 6083
      HEAP32[$744 >> 2] = $124; //@line 6084
      $745 = $ReallocAsyncCtx7 + 232 | 0; //@line 6085
      HEAP32[$745 >> 2] = $126; //@line 6086
      $746 = $ReallocAsyncCtx7 + 236 | 0; //@line 6087
      HEAP32[$746 >> 2] = $128; //@line 6088
      $747 = $ReallocAsyncCtx7 + 240 | 0; //@line 6089
      HEAP32[$747 >> 2] = $130; //@line 6090
      $748 = $ReallocAsyncCtx7 + 244 | 0; //@line 6091
      HEAP32[$748 >> 2] = $$reg2mem71$2; //@line 6092
      $749 = $ReallocAsyncCtx7 + 248 | 0; //@line 6093
      HEAP32[$749 >> 2] = $134; //@line 6094
      $750 = $ReallocAsyncCtx7 + 252 | 0; //@line 6095
      HEAP32[$750 >> 2] = $136; //@line 6096
      $751 = $ReallocAsyncCtx7 + 256 | 0; //@line 6097
      HEAP32[$751 >> 2] = $138; //@line 6098
      $752 = $ReallocAsyncCtx7 + 260 | 0; //@line 6099
      HEAP32[$752 >> 2] = $140; //@line 6100
      $753 = $ReallocAsyncCtx7 + 264 | 0; //@line 6101
      HEAP32[$753 >> 2] = $10; //@line 6102
      sp = STACKTOP; //@line 6103
      return;
     }
    case 69:
     {
      _mbed_tracef(2, 3844, 5067, $72); //@line 6108
      break L2;
      break;
     }
    case 73:
     {
      $771 = HEAP32[$40 >> 2] | 0; //@line 6113
      $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 6116
      $774 = _sn_coap_parser_options_parse_multiple_options($120, $94, $$reg2mem$0, $771 + 64 | 0, $771 + 10 | 0, 15, $$1202$i$reg2mem$0) | 0; //@line 6117
      if (___async) {
       HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 6120
       $775 = $ReallocAsyncCtx6 + 4 | 0; //@line 6121
       HEAP32[$775 >> 2] = $2; //@line 6122
       $776 = $ReallocAsyncCtx6 + 8 | 0; //@line 6123
       HEAP32[$776 >> 2] = $4; //@line 6124
       $777 = $ReallocAsyncCtx6 + 12 | 0; //@line 6125
       HEAP32[$777 >> 2] = $6; //@line 6126
       $778 = $ReallocAsyncCtx6 + 16 | 0; //@line 6127
       HEAP32[$778 >> 2] = $8; //@line 6128
       $779 = $ReallocAsyncCtx6 + 20 | 0; //@line 6129
       HEAP32[$779 >> 2] = $16; //@line 6130
       $780 = $ReallocAsyncCtx6 + 24 | 0; //@line 6131
       HEAP32[$780 >> 2] = $12; //@line 6132
       $781 = $ReallocAsyncCtx6 + 28 | 0; //@line 6133
       HEAP32[$781 >> 2] = $142; //@line 6134
       $782 = $ReallocAsyncCtx6 + 32 | 0; //@line 6135
       HEAP32[$782 >> 2] = $18; //@line 6136
       $783 = $ReallocAsyncCtx6 + 36 | 0; //@line 6137
       HEAP32[$783 >> 2] = $20; //@line 6138
       $784 = $ReallocAsyncCtx6 + 40 | 0; //@line 6139
       HEAP32[$784 >> 2] = $22; //@line 6140
       $785 = $ReallocAsyncCtx6 + 44 | 0; //@line 6141
       HEAP32[$785 >> 2] = $24; //@line 6142
       $786 = $ReallocAsyncCtx6 + 48 | 0; //@line 6143
       HEAP32[$786 >> 2] = $26; //@line 6144
       $787 = $ReallocAsyncCtx6 + 52 | 0; //@line 6145
       HEAP32[$787 >> 2] = $28; //@line 6146
       $788 = $ReallocAsyncCtx6 + 56 | 0; //@line 6147
       HEAP32[$788 >> 2] = $30; //@line 6148
       $789 = $ReallocAsyncCtx6 + 60 | 0; //@line 6149
       HEAP32[$789 >> 2] = $32; //@line 6150
       $790 = $ReallocAsyncCtx6 + 64 | 0; //@line 6151
       HEAP32[$790 >> 2] = $34; //@line 6152
       $791 = $ReallocAsyncCtx6 + 68 | 0; //@line 6153
       HEAP32[$791 >> 2] = $36; //@line 6154
       $792 = $ReallocAsyncCtx6 + 72 | 0; //@line 6155
       HEAP32[$792 >> 2] = $38; //@line 6156
       $793 = $ReallocAsyncCtx6 + 76 | 0; //@line 6157
       HEAP32[$793 >> 2] = $40; //@line 6158
       $794 = $ReallocAsyncCtx6 + 80 | 0; //@line 6159
       HEAP32[$794 >> 2] = $42; //@line 6160
       $795 = $ReallocAsyncCtx6 + 84 | 0; //@line 6161
       HEAP32[$795 >> 2] = $44; //@line 6162
       $796 = $ReallocAsyncCtx6 + 88 | 0; //@line 6163
       HEAP32[$796 >> 2] = $46; //@line 6164
       $797 = $ReallocAsyncCtx6 + 92 | 0; //@line 6165
       HEAP32[$797 >> 2] = $48; //@line 6166
       $798 = $ReallocAsyncCtx6 + 96 | 0; //@line 6167
       HEAP32[$798 >> 2] = $50; //@line 6168
       $799 = $ReallocAsyncCtx6 + 100 | 0; //@line 6169
       HEAP32[$799 >> 2] = $52; //@line 6170
       $800 = $ReallocAsyncCtx6 + 104 | 0; //@line 6171
       HEAP32[$800 >> 2] = $54; //@line 6172
       $801 = $ReallocAsyncCtx6 + 108 | 0; //@line 6173
       HEAP32[$801 >> 2] = $58; //@line 6174
       $802 = $ReallocAsyncCtx6 + 112 | 0; //@line 6175
       HEAP32[$802 >> 2] = $60; //@line 6176
       $803 = $ReallocAsyncCtx6 + 116 | 0; //@line 6177
       HEAP32[$803 >> 2] = $62; //@line 6178
       $804 = $ReallocAsyncCtx6 + 120 | 0; //@line 6179
       HEAP32[$804 >> 2] = $64; //@line 6180
       $805 = $ReallocAsyncCtx6 + 124 | 0; //@line 6181
       HEAP32[$805 >> 2] = $66; //@line 6182
       $806 = $ReallocAsyncCtx6 + 128 | 0; //@line 6183
       HEAP32[$806 >> 2] = $68; //@line 6184
       $807 = $ReallocAsyncCtx6 + 132 | 0; //@line 6185
       HEAP32[$807 >> 2] = $70; //@line 6186
       $808 = $ReallocAsyncCtx6 + 136 | 0; //@line 6187
       HEAP32[$808 >> 2] = $72; //@line 6188
       $809 = $ReallocAsyncCtx6 + 140 | 0; //@line 6189
       HEAP32[$809 >> 2] = $74; //@line 6190
       $810 = $ReallocAsyncCtx6 + 144 | 0; //@line 6191
       HEAP32[$810 >> 2] = $76; //@line 6192
       $811 = $ReallocAsyncCtx6 + 148 | 0; //@line 6193
       HEAP32[$811 >> 2] = $78; //@line 6194
       $812 = $ReallocAsyncCtx6 + 152 | 0; //@line 6195
       HEAP32[$812 >> 2] = $80; //@line 6196
       $813 = $ReallocAsyncCtx6 + 156 | 0; //@line 6197
       HEAP32[$813 >> 2] = $82; //@line 6198
       $814 = $ReallocAsyncCtx6 + 160 | 0; //@line 6199
       HEAP32[$814 >> 2] = $84; //@line 6200
       $815 = $ReallocAsyncCtx6 + 164 | 0; //@line 6201
       HEAP32[$815 >> 2] = $86; //@line 6202
       $816 = $ReallocAsyncCtx6 + 168 | 0; //@line 6203
       HEAP32[$816 >> 2] = $90; //@line 6204
       $817 = $ReallocAsyncCtx6 + 172 | 0; //@line 6205
       HEAP32[$817 >> 2] = $92; //@line 6206
       $818 = $ReallocAsyncCtx6 + 176 | 0; //@line 6207
       HEAP32[$818 >> 2] = $94; //@line 6208
       $819 = $ReallocAsyncCtx6 + 180 | 0; //@line 6209
       HEAP32[$819 >> 2] = $96; //@line 6210
       $820 = $ReallocAsyncCtx6 + 184 | 0; //@line 6211
       HEAP32[$820 >> 2] = $100; //@line 6212
       $821 = $ReallocAsyncCtx6 + 188 | 0; //@line 6213
       HEAP32[$821 >> 2] = $106; //@line 6214
       $822 = $ReallocAsyncCtx6 + 192 | 0; //@line 6215
       HEAP32[$822 >> 2] = $102; //@line 6216
       $823 = $ReallocAsyncCtx6 + 196 | 0; //@line 6217
       HEAP32[$823 >> 2] = $104; //@line 6218
       $824 = $ReallocAsyncCtx6 + 200 | 0; //@line 6219
       HEAP32[$824 >> 2] = $110; //@line 6220
       $825 = $ReallocAsyncCtx6 + 204 | 0; //@line 6221
       HEAP32[$825 >> 2] = $108; //@line 6222
       $826 = $ReallocAsyncCtx6 + 208 | 0; //@line 6223
       HEAP32[$826 >> 2] = $112; //@line 6224
       $827 = $ReallocAsyncCtx6 + 212 | 0; //@line 6225
       HEAP32[$827 >> 2] = $114; //@line 6226
       $828 = $ReallocAsyncCtx6 + 216 | 0; //@line 6227
       HEAP32[$828 >> 2] = $116; //@line 6228
       $829 = $ReallocAsyncCtx6 + 220 | 0; //@line 6229
       HEAP32[$829 >> 2] = $118; //@line 6230
       $830 = $ReallocAsyncCtx6 + 224 | 0; //@line 6231
       HEAP32[$830 >> 2] = $120; //@line 6232
       $831 = $ReallocAsyncCtx6 + 228 | 0; //@line 6233
       HEAP32[$831 >> 2] = $124; //@line 6234
       $832 = $ReallocAsyncCtx6 + 232 | 0; //@line 6235
       HEAP32[$832 >> 2] = $126; //@line 6236
       $833 = $ReallocAsyncCtx6 + 236 | 0; //@line 6237
       HEAP32[$833 >> 2] = $128; //@line 6238
       $834 = $ReallocAsyncCtx6 + 240 | 0; //@line 6239
       HEAP32[$834 >> 2] = $130; //@line 6240
       $835 = $ReallocAsyncCtx6 + 244 | 0; //@line 6241
       HEAP32[$835 >> 2] = $$reg2mem71$0; //@line 6242
       $836 = $ReallocAsyncCtx6 + 248 | 0; //@line 6243
       HEAP32[$836 >> 2] = $134; //@line 6244
       $837 = $ReallocAsyncCtx6 + 252 | 0; //@line 6245
       HEAP32[$837 >> 2] = $136; //@line 6246
       $838 = $ReallocAsyncCtx6 + 256 | 0; //@line 6247
       HEAP32[$838 >> 2] = $138; //@line 6248
       $839 = $ReallocAsyncCtx6 + 260 | 0; //@line 6249
       HEAP32[$839 >> 2] = $140; //@line 6250
       $840 = $ReallocAsyncCtx6 + 264 | 0; //@line 6251
       HEAP32[$840 >> 2] = $10; //@line 6252
       sp = STACKTOP; //@line 6253
       return;
      }
      HEAP8[___async_retval >> 0] = $774; //@line 6257
      ___async_unwind = 0; //@line 6258
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 6259
      $775 = $ReallocAsyncCtx6 + 4 | 0; //@line 6260
      HEAP32[$775 >> 2] = $2; //@line 6261
      $776 = $ReallocAsyncCtx6 + 8 | 0; //@line 6262
      HEAP32[$776 >> 2] = $4; //@line 6263
      $777 = $ReallocAsyncCtx6 + 12 | 0; //@line 6264
      HEAP32[$777 >> 2] = $6; //@line 6265
      $778 = $ReallocAsyncCtx6 + 16 | 0; //@line 6266
      HEAP32[$778 >> 2] = $8; //@line 6267
      $779 = $ReallocAsyncCtx6 + 20 | 0; //@line 6268
      HEAP32[$779 >> 2] = $16; //@line 6269
      $780 = $ReallocAsyncCtx6 + 24 | 0; //@line 6270
      HEAP32[$780 >> 2] = $12; //@line 6271
      $781 = $ReallocAsyncCtx6 + 28 | 0; //@line 6272
      HEAP32[$781 >> 2] = $142; //@line 6273
      $782 = $ReallocAsyncCtx6 + 32 | 0; //@line 6274
      HEAP32[$782 >> 2] = $18; //@line 6275
      $783 = $ReallocAsyncCtx6 + 36 | 0; //@line 6276
      HEAP32[$783 >> 2] = $20; //@line 6277
      $784 = $ReallocAsyncCtx6 + 40 | 0; //@line 6278
      HEAP32[$784 >> 2] = $22; //@line 6279
      $785 = $ReallocAsyncCtx6 + 44 | 0; //@line 6280
      HEAP32[$785 >> 2] = $24; //@line 6281
      $786 = $ReallocAsyncCtx6 + 48 | 0; //@line 6282
      HEAP32[$786 >> 2] = $26; //@line 6283
      $787 = $ReallocAsyncCtx6 + 52 | 0; //@line 6284
      HEAP32[$787 >> 2] = $28; //@line 6285
      $788 = $ReallocAsyncCtx6 + 56 | 0; //@line 6286
      HEAP32[$788 >> 2] = $30; //@line 6287
      $789 = $ReallocAsyncCtx6 + 60 | 0; //@line 6288
      HEAP32[$789 >> 2] = $32; //@line 6289
      $790 = $ReallocAsyncCtx6 + 64 | 0; //@line 6290
      HEAP32[$790 >> 2] = $34; //@line 6291
      $791 = $ReallocAsyncCtx6 + 68 | 0; //@line 6292
      HEAP32[$791 >> 2] = $36; //@line 6293
      $792 = $ReallocAsyncCtx6 + 72 | 0; //@line 6294
      HEAP32[$792 >> 2] = $38; //@line 6295
      $793 = $ReallocAsyncCtx6 + 76 | 0; //@line 6296
      HEAP32[$793 >> 2] = $40; //@line 6297
      $794 = $ReallocAsyncCtx6 + 80 | 0; //@line 6298
      HEAP32[$794 >> 2] = $42; //@line 6299
      $795 = $ReallocAsyncCtx6 + 84 | 0; //@line 6300
      HEAP32[$795 >> 2] = $44; //@line 6301
      $796 = $ReallocAsyncCtx6 + 88 | 0; //@line 6302
      HEAP32[$796 >> 2] = $46; //@line 6303
      $797 = $ReallocAsyncCtx6 + 92 | 0; //@line 6304
      HEAP32[$797 >> 2] = $48; //@line 6305
      $798 = $ReallocAsyncCtx6 + 96 | 0; //@line 6306
      HEAP32[$798 >> 2] = $50; //@line 6307
      $799 = $ReallocAsyncCtx6 + 100 | 0; //@line 6308
      HEAP32[$799 >> 2] = $52; //@line 6309
      $800 = $ReallocAsyncCtx6 + 104 | 0; //@line 6310
      HEAP32[$800 >> 2] = $54; //@line 6311
      $801 = $ReallocAsyncCtx6 + 108 | 0; //@line 6312
      HEAP32[$801 >> 2] = $58; //@line 6313
      $802 = $ReallocAsyncCtx6 + 112 | 0; //@line 6314
      HEAP32[$802 >> 2] = $60; //@line 6315
      $803 = $ReallocAsyncCtx6 + 116 | 0; //@line 6316
      HEAP32[$803 >> 2] = $62; //@line 6317
      $804 = $ReallocAsyncCtx6 + 120 | 0; //@line 6318
      HEAP32[$804 >> 2] = $64; //@line 6319
      $805 = $ReallocAsyncCtx6 + 124 | 0; //@line 6320
      HEAP32[$805 >> 2] = $66; //@line 6321
      $806 = $ReallocAsyncCtx6 + 128 | 0; //@line 6322
      HEAP32[$806 >> 2] = $68; //@line 6323
      $807 = $ReallocAsyncCtx6 + 132 | 0; //@line 6324
      HEAP32[$807 >> 2] = $70; //@line 6325
      $808 = $ReallocAsyncCtx6 + 136 | 0; //@line 6326
      HEAP32[$808 >> 2] = $72; //@line 6327
      $809 = $ReallocAsyncCtx6 + 140 | 0; //@line 6328
      HEAP32[$809 >> 2] = $74; //@line 6329
      $810 = $ReallocAsyncCtx6 + 144 | 0; //@line 6330
      HEAP32[$810 >> 2] = $76; //@line 6331
      $811 = $ReallocAsyncCtx6 + 148 | 0; //@line 6332
      HEAP32[$811 >> 2] = $78; //@line 6333
      $812 = $ReallocAsyncCtx6 + 152 | 0; //@line 6334
      HEAP32[$812 >> 2] = $80; //@line 6335
      $813 = $ReallocAsyncCtx6 + 156 | 0; //@line 6336
      HEAP32[$813 >> 2] = $82; //@line 6337
      $814 = $ReallocAsyncCtx6 + 160 | 0; //@line 6338
      HEAP32[$814 >> 2] = $84; //@line 6339
      $815 = $ReallocAsyncCtx6 + 164 | 0; //@line 6340
      HEAP32[$815 >> 2] = $86; //@line 6341
      $816 = $ReallocAsyncCtx6 + 168 | 0; //@line 6342
      HEAP32[$816 >> 2] = $90; //@line 6343
      $817 = $ReallocAsyncCtx6 + 172 | 0; //@line 6344
      HEAP32[$817 >> 2] = $92; //@line 6345
      $818 = $ReallocAsyncCtx6 + 176 | 0; //@line 6346
      HEAP32[$818 >> 2] = $94; //@line 6347
      $819 = $ReallocAsyncCtx6 + 180 | 0; //@line 6348
      HEAP32[$819 >> 2] = $96; //@line 6349
      $820 = $ReallocAsyncCtx6 + 184 | 0; //@line 6350
      HEAP32[$820 >> 2] = $100; //@line 6351
      $821 = $ReallocAsyncCtx6 + 188 | 0; //@line 6352
      HEAP32[$821 >> 2] = $106; //@line 6353
      $822 = $ReallocAsyncCtx6 + 192 | 0; //@line 6354
      HEAP32[$822 >> 2] = $102; //@line 6355
      $823 = $ReallocAsyncCtx6 + 196 | 0; //@line 6356
      HEAP32[$823 >> 2] = $104; //@line 6357
      $824 = $ReallocAsyncCtx6 + 200 | 0; //@line 6358
      HEAP32[$824 >> 2] = $110; //@line 6359
      $825 = $ReallocAsyncCtx6 + 204 | 0; //@line 6360
      HEAP32[$825 >> 2] = $108; //@line 6361
      $826 = $ReallocAsyncCtx6 + 208 | 0; //@line 6362
      HEAP32[$826 >> 2] = $112; //@line 6363
      $827 = $ReallocAsyncCtx6 + 212 | 0; //@line 6364
      HEAP32[$827 >> 2] = $114; //@line 6365
      $828 = $ReallocAsyncCtx6 + 216 | 0; //@line 6366
      HEAP32[$828 >> 2] = $116; //@line 6367
      $829 = $ReallocAsyncCtx6 + 220 | 0; //@line 6368
      HEAP32[$829 >> 2] = $118; //@line 6369
      $830 = $ReallocAsyncCtx6 + 224 | 0; //@line 6370
      HEAP32[$830 >> 2] = $120; //@line 6371
      $831 = $ReallocAsyncCtx6 + 228 | 0; //@line 6372
      HEAP32[$831 >> 2] = $124; //@line 6373
      $832 = $ReallocAsyncCtx6 + 232 | 0; //@line 6374
      HEAP32[$832 >> 2] = $126; //@line 6375
      $833 = $ReallocAsyncCtx6 + 236 | 0; //@line 6376
      HEAP32[$833 >> 2] = $128; //@line 6377
      $834 = $ReallocAsyncCtx6 + 240 | 0; //@line 6378
      HEAP32[$834 >> 2] = $130; //@line 6379
      $835 = $ReallocAsyncCtx6 + 244 | 0; //@line 6380
      HEAP32[$835 >> 2] = $$reg2mem71$0; //@line 6381
      $836 = $ReallocAsyncCtx6 + 248 | 0; //@line 6382
      HEAP32[$836 >> 2] = $134; //@line 6383
      $837 = $ReallocAsyncCtx6 + 252 | 0; //@line 6384
      HEAP32[$837 >> 2] = $136; //@line 6385
      $838 = $ReallocAsyncCtx6 + 256 | 0; //@line 6386
      HEAP32[$838 >> 2] = $138; //@line 6387
      $839 = $ReallocAsyncCtx6 + 260 | 0; //@line 6388
      HEAP32[$839 >> 2] = $140; //@line 6389
      $840 = $ReallocAsyncCtx6 + 264 | 0; //@line 6390
      HEAP32[$840 >> 2] = $10; //@line 6391
      sp = STACKTOP; //@line 6392
      return;
     }
    case 78:
     {
      _mbed_tracef(2, 3844, 5193, $10); //@line 6397
      break L2;
      break;
     }
    case 84:
     {
      _mbed_tracef(2, 3844, 5254, $108); //@line 6402
      break L2;
      break;
     }
    case 90:
     {
      _mbed_tracef(2, 3844, 5315, $50); //@line 6407
      break L2;
      break;
     }
    case 96:
     {
      _mbed_tracef(2, 3844, 5376, $22); //@line 6412
      break L2;
      break;
     }
    case 102:
     {
      _mbed_tracef(2, 3844, 5436, $12); //@line 6417
      break L2;
      break;
     }
    case 106:
     {
      _mbed_tracef(2, 3844, 5496, $90); //@line 6422
      break L2;
      break;
     }
    case 109:
     {
      if (($147 - $6 | 0) >= ($18 | 0)) {
       $951 = ___async_retval; //@line 6431
       HEAP32[$951 >> 2] = $24; //@line 6432
       return;
      }
      if ((HEAP8[$147 >> 0] | 0) == -1) {
       $941 = $147 + 1 | 0; //@line 6438
       HEAP32[$94 >> 2] = $941; //@line 6439
       $942 = $941; //@line 6440
       $944 = $6 - $942 + $18 | 0; //@line 6442
       HEAP16[$76 + 24 >> 1] = $944; //@line 6445
       if ($944 & 65535 | 0) {
        HEAP32[$76 + 36 >> 2] = $942; //@line 6450
        $951 = ___async_retval; //@line 6451
        HEAP32[$951 >> 2] = $24; //@line 6452
        return;
       }
      } else {
       _mbed_tracef(2, 3844, 5543, $28); //@line 6456
      }
      HEAP32[$76 + 4 >> 2] = 1; //@line 6459
      $951 = ___async_retval; //@line 6460
      HEAP32[$951 >> 2] = $24; //@line 6461
      return;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 22) {
  _mbed_tracef(2, 3844, 4220, $20); //@line 6470
 }
 HEAP32[$76 + 4 >> 2] = 1; //@line 6473
 $951 = ___async_retval; //@line 6474
 HEAP32[$951 >> 2] = $24; //@line 6475
 return;
}
function _sn_coap_parser__async_cb_164($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem28$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $260 = 0, $261 = 0, $266 = 0, $269 = 0, $272 = 0, $273 = 0, $278 = 0, $28 = 0, $281 = 0, $285 = 0, $288 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $365 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $435 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $519 = 0, $52 = 0, $520 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $594 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $603 = 0, $606 = 0, $608 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $749 = 0, $752 = 0, $753 = 0, $758 = 0, $76 = 0, $761 = 0, $763 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $845 = 0, $848 = 0, $852 = 0, $855 = 0, $856 = 0, $86 = 0, $861 = 0, $864 = 0, $868 = 0, $871 = 0, $872 = 0, $877 = 0, $88 = 0, $880 = 0, $884 = 0, $885 = 0, $890 = 0, $891 = 0, $896 = 0, $899 = 0, $90 = 0, $905 = 0, $906 = 0, $911 = 0, $912 = 0, $917 = 0, $92 = 0, $920 = 0, $924 = 0, $925 = 0, $933 = 0, $934 = 0, $936 = 0, $94 = 0, $943 = 0, $944 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $278$looptemp = 0, $603$looptemp = 0, $758$looptemp = 0, $845$looptemp = 0, $861$looptemp = 0, $877$looptemp = 0, $896$looptemp = 0, $917$looptemp = 0, $266$looptemp = 0;
 sp = STACKTOP; //@line 9760
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9762
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9764
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9766
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9768
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9770
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9772
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9774
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9776
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9778
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9780
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9782
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9784
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9786
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9788
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9790
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9792
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9794
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9796
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9798
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9800
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9802
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9804
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9806
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 9808
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 9810
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 9812
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 9814
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 9816
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 9818
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 9820
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 9822
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 9824
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 9826
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 9828
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 9830
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 9832
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 9834
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 9836
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 9838
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 9840
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 9842
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 9844
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 9846
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 9848
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 9850
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 9852
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 9854
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 9856
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 9858
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 9860
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 9862
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 9864
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 9866
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 9868
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 9870
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 9872
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 9874
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 9876
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 9878
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 9880
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 9882
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 9884
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 9886
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 9888
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 9890
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 9892
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 9894
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 9896
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9898
 HEAP32[(HEAP32[$42 >> 2] | 0) + 52 >> 2] = $AsyncRetVal; //@line 9901
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3844, 4668, $74); //@line 9905
  } else {
   _memcpy($AsyncRetVal | 0, $20 | 0, $6 | 0) | 0; //@line 9907
   HEAP32[$92 >> 2] = $20 + $6; //@line 9909
   $$reg2mem28$0 = $126; //@line 9910
   L5 : while (1) {
    $924 = HEAP32[$118 >> 2] | 0; //@line 9912
    $925 = $924 - $8 | 0; //@line 9913
    $141 = $924; //@line 9916
    if (($925 | 0) > ($18 | 0)) {
     break L2;
    }
    if (!(($18 - $925 & 65535) << 16 >> 16)) {
     label = 108; //@line 9923
     break;
    }
    $trunc277$i = HEAP8[$141 >> 0] | 0; //@line 9926
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 108; //@line 9929
     break;
    }
    $144 = $trunc277$i & 15; //@line 9933
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 9934
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 9939
      break L5;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$141 + 1 >> 0] | 0; //@line 9947
      $$sink214$i = 13; //@line 9947
      $$sink3$i = 1; //@line 9947
      label = 8; //@line 9948
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$141 + 1 >> 0] << 8) + 269 | 0; //@line 9960
      $$sink214$i = HEAPU8[$141 + 2 >> 0] | 0; //@line 9960
      $$sink3$i = 2; //@line 9960
      label = 8; //@line 9961
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 9965
      $163 = $141; //@line 9965
      $944 = $924; //@line 9965
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 9969
     $158 = $141 + $$sink3$i | 0; //@line 9971
     HEAP32[$92 >> 2] = $158; //@line 9972
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 9974
     $163 = $158; //@line 9974
     $944 = $158; //@line 9974
    }
    $161 = $$1$i + ($$reg2mem28$0 & 255) | 0; //@line 9977
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 9981
      break L5;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$163 + 1 >> 0] | 0; //@line 9989
      $$sink216$i = 13; //@line 9989
      $$sink8$i = 1; //@line 9989
      label = 13; //@line 9990
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$163 + 1 >> 0] << 8) + 269 | 0; //@line 10002
      $$sink216$i = HEAPU8[$163 + 2 >> 0] | 0; //@line 10002
      $$sink8$i = 2; //@line 10002
      label = 13; //@line 10003
      break;
     }
    default:
     {
      $$1202$in$i = $144; //@line 10007
      $178 = $944; //@line 10007
      $245 = $163; //@line 10007
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 10011
     $175 = $163 + $$sink8$i | 0; //@line 10013
     HEAP32[$92 >> 2] = $175; //@line 10014
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 10016
     $178 = $175; //@line 10016
     $245 = $175; //@line 10016
    }
    $$1202$i = $$1202$in$i & 65535; //@line 10018
    $179 = $32 - $178 & 65535; //@line 10020
    $trunc$i = $161 & 65535; //@line 10021
    L22 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 63; //@line 10025
       break L5;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$42 >> 2] | 0)) {
        label = 16; //@line 10033
        break L5;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 10038
         break L5;
         break;
        }
       case 4:
        {
         label = 37; //@line 10043
         break L5;
         break;
        }
       case 3:
        {
         label = 40; //@line 10048
         break L5;
         break;
        }
       case 8:
        {
         label = 49; //@line 10053
         break L5;
         break;
        }
       case 20:
        {
         label = 60; //@line 10058
         break L5;
         break;
        }
       case 11:
        {
         label = 63; //@line 10063
         break L5;
         break;
        }
       case 15:
        {
         label = 72; //@line 10068
         break L5;
         break;
        }
       case 12:
        {
         break L22;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 10079
          break L5;
         }
         $272 = $245 + 1 | 0; //@line 10082
         HEAP32[$92 >> 2] = $272; //@line 10083
         $273 = $$1202$in$i & 255; //@line 10084
         if (!($273 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 10087
         } else {
          $$045$i221$i = $273; //@line 10089
          $$06$i220$i = 0; //@line 10089
          $278 = $272; //@line 10089
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 10091
           $278$looptemp = $278;
           $278 = $278 + 1 | 0; //@line 10093
           HEAP32[$92 >> 2] = $278; //@line 10094
           $281 = $$06$i220$i << 8 | HEAPU8[$278$looptemp >> 0]; //@line 10097
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $281; //@line 10100
            break;
           } else {
            $$06$i220$i = $281; //@line 10103
           }
          }
         }
         HEAP32[(HEAP32[$42 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 10109
         $$reg2mem28$0 = $161; //@line 10110
         continue L5;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 56; //@line 10117
          break L5;
         }
         $594 = (HEAP32[$42 >> 2] | 0) + 28 | 0; //@line 10121
         if ((HEAP32[$594 >> 2] | 0) != -1) {
          label = 56; //@line 10125
          break L5;
         }
         $597 = $245 + 1 | 0; //@line 10128
         HEAP32[$92 >> 2] = $597; //@line 10129
         $598 = $$1202$in$i & 255; //@line 10130
         if (!($598 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 10133
         } else {
          $$045$i263$i = $598; //@line 10135
          $$06$i262$i = 0; //@line 10135
          $603 = $597; //@line 10135
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 10137
           $603$looptemp = $603;
           $603 = $603 + 1 | 0; //@line 10139
           HEAP32[$92 >> 2] = $603; //@line 10140
           $606 = $$06$i262$i << 8 | HEAPU8[$603$looptemp >> 0]; //@line 10143
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $606; //@line 10146
            break;
           } else {
            $$06$i262$i = $606; //@line 10149
           }
          }
         }
         HEAP32[$594 >> 2] = $$0$lcssa$i265$i; //@line 10153
         $$reg2mem28$0 = $161; //@line 10154
         continue L5;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 68; //@line 10161
          break L5;
         }
         $749 = (HEAP32[$42 >> 2] | 0) + 32 | 0; //@line 10165
         if ((HEAP32[$749 >> 2] | 0) != -1) {
          label = 68; //@line 10169
          break L5;
         }
         $752 = $245 + 1 | 0; //@line 10172
         HEAP32[$92 >> 2] = $752; //@line 10173
         $753 = $$1202$in$i & 255; //@line 10174
         if (!($753 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 10177
         } else {
          $$045$i270$i = $753; //@line 10179
          $$06$i269$i = 0; //@line 10179
          $758 = $752; //@line 10179
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 10181
           $758$looptemp = $758;
           $758 = $758 + 1 | 0; //@line 10183
           HEAP32[$92 >> 2] = $758; //@line 10184
           $761 = $$06$i269$i << 8 | HEAPU8[$758$looptemp >> 0]; //@line 10187
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $761; //@line 10190
            break;
           } else {
            $$06$i269$i = $761; //@line 10193
           }
          }
         }
         HEAP32[$749 >> 2] = $$0$lcssa$i272$i; //@line 10197
         $$reg2mem28$0 = $161; //@line 10198
         continue L5;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 77; //@line 10205
          break L5;
         }
         $836 = (HEAP32[$42 >> 2] | 0) + 40 | 0; //@line 10209
         if ((HEAP32[$836 >> 2] | 0) != -1) {
          label = 77; //@line 10213
          break L5;
         }
         $839 = $245 + 1 | 0; //@line 10216
         HEAP32[$92 >> 2] = $839; //@line 10217
         $840 = $$1202$in$i & 255; //@line 10218
         if (!($840 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 10221
         } else {
          $$045$i256$i = $840; //@line 10223
          $$06$i255$i = 0; //@line 10223
          $845 = $839; //@line 10223
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 10225
           $845$looptemp = $845;
           $845 = $845 + 1 | 0; //@line 10227
           HEAP32[$92 >> 2] = $845; //@line 10228
           $848 = $$06$i255$i << 8 | HEAPU8[$845$looptemp >> 0]; //@line 10231
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $848; //@line 10234
            break;
           } else {
            $$06$i255$i = $848; //@line 10237
           }
          }
         }
         HEAP32[$836 >> 2] = $$0$lcssa$i258$i; //@line 10241
         $$reg2mem28$0 = $161; //@line 10242
         continue L5;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 83; //@line 10249
          break L5;
         }
         $852 = (HEAP32[$42 >> 2] | 0) + 36 | 0; //@line 10253
         if ((HEAP32[$852 >> 2] | 0) != -1) {
          label = 83; //@line 10257
          break L5;
         }
         $855 = $245 + 1 | 0; //@line 10260
         HEAP32[$92 >> 2] = $855; //@line 10261
         $856 = $$1202$in$i & 255; //@line 10262
         if (!($856 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 10265
         } else {
          $$045$i249$i = $856; //@line 10267
          $$06$i248$i = 0; //@line 10267
          $861 = $855; //@line 10267
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 10269
           $861$looptemp = $861;
           $861 = $861 + 1 | 0; //@line 10271
           HEAP32[$92 >> 2] = $861; //@line 10272
           $864 = $$06$i248$i << 8 | HEAPU8[$861$looptemp >> 0]; //@line 10275
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $864; //@line 10278
            break;
           } else {
            $$06$i248$i = $864; //@line 10281
           }
          }
         }
         HEAP32[$852 >> 2] = $$0$lcssa$i251$i; //@line 10285
         $$reg2mem28$0 = $161; //@line 10286
         continue L5;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 89; //@line 10293
          break L5;
         }
         $868 = (HEAP32[$42 >> 2] | 0) + 12 | 0; //@line 10297
         if ((HEAP32[$868 >> 2] | 0) != -1) {
          label = 89; //@line 10301
          break L5;
         }
         $871 = $245 + 1 | 0; //@line 10304
         HEAP32[$92 >> 2] = $871; //@line 10305
         $872 = $$1202$in$i & 255; //@line 10306
         if (!($872 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 10309
         } else {
          $$045$i242$i = $872; //@line 10311
          $$06$i241$i = 0; //@line 10311
          $877 = $871; //@line 10311
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 10313
           $877$looptemp = $877;
           $877 = $877 + 1 | 0; //@line 10315
           HEAP32[$92 >> 2] = $877; //@line 10316
           $880 = $$06$i241$i << 8 | HEAPU8[$877$looptemp >> 0]; //@line 10319
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $880; //@line 10322
            break;
           } else {
            $$06$i241$i = $880; //@line 10325
           }
          }
         }
         HEAP32[$868 >> 2] = $$0$lcssa$i244$i; //@line 10329
         $$reg2mem28$0 = $161; //@line 10330
         continue L5;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 95; //@line 10337
          break L5;
         }
         $884 = (HEAP32[$42 >> 2] | 0) + 1 | 0; //@line 10341
         $885 = HEAP8[$884 >> 0] | 0; //@line 10342
         if ($885 & 1) {
          label = 95; //@line 10346
          break L5;
         }
         HEAP8[$884 >> 0] = $885 | 1; //@line 10350
         $890 = (HEAP32[$92 >> 2] | 0) + 1 | 0; //@line 10352
         HEAP32[$92 >> 2] = $890; //@line 10353
         $891 = $$1202$in$i & 255; //@line 10354
         if (!($891 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 10357
         } else {
          $$045$i235$i = $891; //@line 10359
          $$06$i234$i = 0; //@line 10359
          $896 = $890; //@line 10359
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 10361
           $896$looptemp = $896;
           $896 = $896 + 1 | 0; //@line 10363
           HEAP32[$92 >> 2] = $896; //@line 10364
           $899 = $$06$i234$i << 8 | HEAPU8[$896$looptemp >> 0]; //@line 10367
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $899; //@line 10370
            break;
           } else {
            $$06$i234$i = $899; //@line 10373
           }
          }
         }
         HEAP32[(HEAP32[$42 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 10379
         $$reg2mem28$0 = $161; //@line 10380
         continue L5;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 101; //@line 10387
          break L5;
         }
         $905 = (HEAP32[$42 >> 2] | 0) + 1 | 0; //@line 10391
         $906 = HEAP8[$905 >> 0] | 0; //@line 10392
         if ($906 & 2) {
          label = 101; //@line 10396
          break L5;
         }
         HEAP8[$905 >> 0] = $906 | 2; //@line 10400
         $911 = (HEAP32[$92 >> 2] | 0) + 1 | 0; //@line 10402
         HEAP32[$92 >> 2] = $911; //@line 10403
         $912 = $$1202$in$i & 255; //@line 10404
         if (!($912 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 10407
         } else {
          $$045$i228$i = $912; //@line 10409
          $$06$i227$i = 0; //@line 10409
          $917 = $911; //@line 10409
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 10411
           $917$looptemp = $917;
           $917 = $917 + 1 | 0; //@line 10413
           HEAP32[$92 >> 2] = $917; //@line 10414
           $920 = $$06$i227$i << 8 | HEAPU8[$917$looptemp >> 0]; //@line 10417
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $920; //@line 10420
            break;
           } else {
            $$06$i227$i = $920; //@line 10423
           }
          }
         }
         HEAP32[(HEAP32[$42 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 10429
         $$reg2mem28$0 = $161; //@line 10430
         continue L5;
         break;
        }
       default:
        {
         label = 105; //@line 10435
         break L5;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 105; //@line 10445
       break L5;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 10452
     break;
    }
    if ((HEAP32[$124 >> 2] | 0) != -1) {
     label = 22; //@line 10458
     break;
    }
    $260 = $245 + 1 | 0; //@line 10461
    HEAP32[$92 >> 2] = $260; //@line 10462
    $261 = $$1202$in$i & 255; //@line 10463
    if (!($261 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 10466
    } else {
     $$045$i$i = $261; //@line 10468
     $$06$i$i = 0; //@line 10468
     $266 = $260; //@line 10468
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 10470
      $266$looptemp = $266;
      $266 = $266 + 1 | 0; //@line 10472
      HEAP32[$92 >> 2] = $266; //@line 10473
      $269 = $$06$i$i << 8 | HEAPU8[$266$looptemp >> 0]; //@line 10476
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $269; //@line 10479
       break;
      } else {
       $$06$i$i = $269; //@line 10482
      }
     }
    }
    HEAP32[$124 >> 2] = $$0$lcssa$i$i; //@line 10486
    $$reg2mem28$0 = $161; //@line 10487
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3844, 4107, $10); //@line 10491
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3844, 4165, $60); //@line 10496
     break L2;
     break;
    }
   case 16:
    {
     $182 = HEAP32[$44 >> 2] | 0; //@line 10501
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 10502
     $183 = FUNCTION_TABLE_ii[$182 & 31](68) | 0; //@line 10503
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 10506
      $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 10507
      HEAP32[$184 >> 2] = $2; //@line 10508
      $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 10509
      HEAP32[$185 >> 2] = $4; //@line 10510
      $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 10511
      HEAP32[$186 >> 2] = $8; //@line 10512
      $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 10513
      HEAP32[$187 >> 2] = $10; //@line 10514
      $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 10515
      HEAP32[$188 >> 2] = $12; //@line 10516
      $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 10517
      HEAP32[$189 >> 2] = $14; //@line 10518
      $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 10519
      HEAP16[$190 >> 1] = $trunc$i; //@line 10520
      $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 10521
      HEAP32[$191 >> 2] = $16; //@line 10522
      $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 10523
      HEAP32[$192 >> 2] = $18; //@line 10524
      $193 = $ReallocAsyncCtx3 + 40 | 0; //@line 10525
      HEAP32[$193 >> 2] = $22; //@line 10526
      $194 = $ReallocAsyncCtx3 + 44 | 0; //@line 10527
      HEAP32[$194 >> 2] = $24; //@line 10528
      $195 = $ReallocAsyncCtx3 + 48 | 0; //@line 10529
      HEAP32[$195 >> 2] = $26; //@line 10530
      $196 = $ReallocAsyncCtx3 + 52 | 0; //@line 10531
      HEAP32[$196 >> 2] = $28; //@line 10532
      $197 = $ReallocAsyncCtx3 + 56 | 0; //@line 10533
      HEAP32[$197 >> 2] = $30; //@line 10534
      $198 = $ReallocAsyncCtx3 + 60 | 0; //@line 10535
      HEAP32[$198 >> 2] = $32; //@line 10536
      $199 = $ReallocAsyncCtx3 + 64 | 0; //@line 10537
      HEAP32[$199 >> 2] = $34; //@line 10538
      $200 = $ReallocAsyncCtx3 + 68 | 0; //@line 10539
      HEAP32[$200 >> 2] = $36; //@line 10540
      $201 = $ReallocAsyncCtx3 + 72 | 0; //@line 10541
      HEAP32[$201 >> 2] = $38; //@line 10542
      $202 = $ReallocAsyncCtx3 + 76 | 0; //@line 10543
      HEAP32[$202 >> 2] = $40; //@line 10544
      $203 = $ReallocAsyncCtx3 + 80 | 0; //@line 10545
      HEAP32[$203 >> 2] = $42; //@line 10546
      $204 = $ReallocAsyncCtx3 + 84 | 0; //@line 10547
      HEAP32[$204 >> 2] = $44; //@line 10548
      $205 = $ReallocAsyncCtx3 + 88 | 0; //@line 10549
      HEAP32[$205 >> 2] = $46; //@line 10550
      $206 = $ReallocAsyncCtx3 + 92 | 0; //@line 10551
      HEAP32[$206 >> 2] = $48; //@line 10552
      $207 = $ReallocAsyncCtx3 + 96 | 0; //@line 10553
      HEAP32[$207 >> 2] = $50; //@line 10554
      $208 = $ReallocAsyncCtx3 + 100 | 0; //@line 10555
      HEAP32[$208 >> 2] = $52; //@line 10556
      $209 = $ReallocAsyncCtx3 + 104 | 0; //@line 10557
      HEAP32[$209 >> 2] = $54; //@line 10558
      $210 = $ReallocAsyncCtx3 + 108 | 0; //@line 10559
      HEAP32[$210 >> 2] = $56; //@line 10560
      $211 = $ReallocAsyncCtx3 + 112 | 0; //@line 10561
      HEAP16[$211 >> 1] = $179; //@line 10562
      $212 = $ReallocAsyncCtx3 + 116 | 0; //@line 10563
      HEAP32[$212 >> 2] = $58; //@line 10564
      $213 = $ReallocAsyncCtx3 + 120 | 0; //@line 10565
      HEAP32[$213 >> 2] = $60; //@line 10566
      $214 = $ReallocAsyncCtx3 + 124 | 0; //@line 10567
      HEAP32[$214 >> 2] = $62; //@line 10568
      $215 = $ReallocAsyncCtx3 + 128 | 0; //@line 10569
      HEAP32[$215 >> 2] = $64; //@line 10570
      $216 = $ReallocAsyncCtx3 + 132 | 0; //@line 10571
      HEAP32[$216 >> 2] = $66; //@line 10572
      $217 = $ReallocAsyncCtx3 + 136 | 0; //@line 10573
      HEAP32[$217 >> 2] = $68; //@line 10574
      $218 = $ReallocAsyncCtx3 + 140 | 0; //@line 10575
      HEAP32[$218 >> 2] = $70; //@line 10576
      $219 = $ReallocAsyncCtx3 + 144 | 0; //@line 10577
      HEAP32[$219 >> 2] = $72; //@line 10578
      $220 = $ReallocAsyncCtx3 + 148 | 0; //@line 10579
      HEAP32[$220 >> 2] = $74; //@line 10580
      $221 = $ReallocAsyncCtx3 + 152 | 0; //@line 10581
      HEAP32[$221 >> 2] = $76; //@line 10582
      $222 = $ReallocAsyncCtx3 + 156 | 0; //@line 10583
      HEAP32[$222 >> 2] = $78; //@line 10584
      $223 = $ReallocAsyncCtx3 + 160 | 0; //@line 10585
      HEAP32[$223 >> 2] = $80; //@line 10586
      $224 = $ReallocAsyncCtx3 + 164 | 0; //@line 10587
      HEAP32[$224 >> 2] = $82; //@line 10588
      $225 = $ReallocAsyncCtx3 + 168 | 0; //@line 10589
      HEAP32[$225 >> 2] = $84; //@line 10590
      $226 = $ReallocAsyncCtx3 + 172 | 0; //@line 10591
      HEAP32[$226 >> 2] = $86; //@line 10592
      $227 = $ReallocAsyncCtx3 + 176 | 0; //@line 10593
      HEAP32[$227 >> 2] = $$1202$in$i; //@line 10594
      $228 = $ReallocAsyncCtx3 + 180 | 0; //@line 10595
      HEAP32[$228 >> 2] = $88; //@line 10596
      $229 = $ReallocAsyncCtx3 + 184 | 0; //@line 10597
      HEAP32[$229 >> 2] = $90; //@line 10598
      $230 = $ReallocAsyncCtx3 + 188 | 0; //@line 10599
      HEAP32[$230 >> 2] = $92; //@line 10600
      $231 = $ReallocAsyncCtx3 + 192 | 0; //@line 10601
      HEAP32[$231 >> 2] = $94; //@line 10602
      $232 = $ReallocAsyncCtx3 + 196 | 0; //@line 10603
      HEAP16[$232 >> 1] = $$1202$i; //@line 10604
      $233 = $ReallocAsyncCtx3 + 200 | 0; //@line 10605
      HEAP32[$233 >> 2] = $96; //@line 10606
      $234 = $ReallocAsyncCtx3 + 204 | 0; //@line 10607
      HEAP32[$234 >> 2] = $100; //@line 10608
      $235 = $ReallocAsyncCtx3 + 208 | 0; //@line 10609
      HEAP32[$235 >> 2] = $102; //@line 10610
      $236 = $ReallocAsyncCtx3 + 212 | 0; //@line 10611
      HEAP32[$236 >> 2] = $98; //@line 10612
      $237 = $ReallocAsyncCtx3 + 216 | 0; //@line 10613
      HEAP32[$237 >> 2] = $106; //@line 10614
      $238 = $ReallocAsyncCtx3 + 220 | 0; //@line 10615
      HEAP32[$238 >> 2] = $104; //@line 10616
      $239 = $ReallocAsyncCtx3 + 224 | 0; //@line 10617
      HEAP32[$239 >> 2] = $108; //@line 10618
      $240 = $ReallocAsyncCtx3 + 228 | 0; //@line 10619
      HEAP32[$240 >> 2] = $110; //@line 10620
      $241 = $ReallocAsyncCtx3 + 232 | 0; //@line 10621
      HEAP32[$241 >> 2] = $112; //@line 10622
      $242 = $ReallocAsyncCtx3 + 236 | 0; //@line 10623
      HEAP32[$242 >> 2] = $114; //@line 10624
      $243 = $ReallocAsyncCtx3 + 240 | 0; //@line 10625
      HEAP32[$243 >> 2] = $116; //@line 10626
      $244 = $ReallocAsyncCtx3 + 244 | 0; //@line 10627
      HEAP32[$244 >> 2] = $245; //@line 10628
      $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 10629
      HEAP32[$246 >> 2] = $118; //@line 10630
      $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 10631
      HEAP32[$247 >> 2] = $120; //@line 10632
      $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 10633
      HEAP32[$248 >> 2] = $122; //@line 10634
      $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 10635
      HEAP32[$249 >> 2] = $124; //@line 10636
      $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 10637
      HEAP32[$250 >> 2] = $161; //@line 10638
      $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 10639
      HEAP32[$251 >> 2] = $128; //@line 10640
      $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 10641
      HEAP32[$252 >> 2] = $130; //@line 10642
      $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 10643
      HEAP32[$253 >> 2] = $132; //@line 10644
      $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 10645
      HEAP32[$254 >> 2] = $134; //@line 10646
      $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 10647
      HEAP32[$255 >> 2] = $136; //@line 10648
      sp = STACKTOP; //@line 10649
      return;
     }
     HEAP32[___async_retval >> 2] = $183; //@line 10653
     ___async_unwind = 0; //@line 10654
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 10655
     $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 10656
     HEAP32[$184 >> 2] = $2; //@line 10657
     $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 10658
     HEAP32[$185 >> 2] = $4; //@line 10659
     $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 10660
     HEAP32[$186 >> 2] = $8; //@line 10661
     $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 10662
     HEAP32[$187 >> 2] = $10; //@line 10663
     $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 10664
     HEAP32[$188 >> 2] = $12; //@line 10665
     $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 10666
     HEAP32[$189 >> 2] = $14; //@line 10667
     $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 10668
     HEAP16[$190 >> 1] = $trunc$i; //@line 10669
     $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 10670
     HEAP32[$191 >> 2] = $16; //@line 10671
     $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 10672
     HEAP32[$192 >> 2] = $18; //@line 10673
     $193 = $ReallocAsyncCtx3 + 40 | 0; //@line 10674
     HEAP32[$193 >> 2] = $22; //@line 10675
     $194 = $ReallocAsyncCtx3 + 44 | 0; //@line 10676
     HEAP32[$194 >> 2] = $24; //@line 10677
     $195 = $ReallocAsyncCtx3 + 48 | 0; //@line 10678
     HEAP32[$195 >> 2] = $26; //@line 10679
     $196 = $ReallocAsyncCtx3 + 52 | 0; //@line 10680
     HEAP32[$196 >> 2] = $28; //@line 10681
     $197 = $ReallocAsyncCtx3 + 56 | 0; //@line 10682
     HEAP32[$197 >> 2] = $30; //@line 10683
     $198 = $ReallocAsyncCtx3 + 60 | 0; //@line 10684
     HEAP32[$198 >> 2] = $32; //@line 10685
     $199 = $ReallocAsyncCtx3 + 64 | 0; //@line 10686
     HEAP32[$199 >> 2] = $34; //@line 10687
     $200 = $ReallocAsyncCtx3 + 68 | 0; //@line 10688
     HEAP32[$200 >> 2] = $36; //@line 10689
     $201 = $ReallocAsyncCtx3 + 72 | 0; //@line 10690
     HEAP32[$201 >> 2] = $38; //@line 10691
     $202 = $ReallocAsyncCtx3 + 76 | 0; //@line 10692
     HEAP32[$202 >> 2] = $40; //@line 10693
     $203 = $ReallocAsyncCtx3 + 80 | 0; //@line 10694
     HEAP32[$203 >> 2] = $42; //@line 10695
     $204 = $ReallocAsyncCtx3 + 84 | 0; //@line 10696
     HEAP32[$204 >> 2] = $44; //@line 10697
     $205 = $ReallocAsyncCtx3 + 88 | 0; //@line 10698
     HEAP32[$205 >> 2] = $46; //@line 10699
     $206 = $ReallocAsyncCtx3 + 92 | 0; //@line 10700
     HEAP32[$206 >> 2] = $48; //@line 10701
     $207 = $ReallocAsyncCtx3 + 96 | 0; //@line 10702
     HEAP32[$207 >> 2] = $50; //@line 10703
     $208 = $ReallocAsyncCtx3 + 100 | 0; //@line 10704
     HEAP32[$208 >> 2] = $52; //@line 10705
     $209 = $ReallocAsyncCtx3 + 104 | 0; //@line 10706
     HEAP32[$209 >> 2] = $54; //@line 10707
     $210 = $ReallocAsyncCtx3 + 108 | 0; //@line 10708
     HEAP32[$210 >> 2] = $56; //@line 10709
     $211 = $ReallocAsyncCtx3 + 112 | 0; //@line 10710
     HEAP16[$211 >> 1] = $179; //@line 10711
     $212 = $ReallocAsyncCtx3 + 116 | 0; //@line 10712
     HEAP32[$212 >> 2] = $58; //@line 10713
     $213 = $ReallocAsyncCtx3 + 120 | 0; //@line 10714
     HEAP32[$213 >> 2] = $60; //@line 10715
     $214 = $ReallocAsyncCtx3 + 124 | 0; //@line 10716
     HEAP32[$214 >> 2] = $62; //@line 10717
     $215 = $ReallocAsyncCtx3 + 128 | 0; //@line 10718
     HEAP32[$215 >> 2] = $64; //@line 10719
     $216 = $ReallocAsyncCtx3 + 132 | 0; //@line 10720
     HEAP32[$216 >> 2] = $66; //@line 10721
     $217 = $ReallocAsyncCtx3 + 136 | 0; //@line 10722
     HEAP32[$217 >> 2] = $68; //@line 10723
     $218 = $ReallocAsyncCtx3 + 140 | 0; //@line 10724
     HEAP32[$218 >> 2] = $70; //@line 10725
     $219 = $ReallocAsyncCtx3 + 144 | 0; //@line 10726
     HEAP32[$219 >> 2] = $72; //@line 10727
     $220 = $ReallocAsyncCtx3 + 148 | 0; //@line 10728
     HEAP32[$220 >> 2] = $74; //@line 10729
     $221 = $ReallocAsyncCtx3 + 152 | 0; //@line 10730
     HEAP32[$221 >> 2] = $76; //@line 10731
     $222 = $ReallocAsyncCtx3 + 156 | 0; //@line 10732
     HEAP32[$222 >> 2] = $78; //@line 10733
     $223 = $ReallocAsyncCtx3 + 160 | 0; //@line 10734
     HEAP32[$223 >> 2] = $80; //@line 10735
     $224 = $ReallocAsyncCtx3 + 164 | 0; //@line 10736
     HEAP32[$224 >> 2] = $82; //@line 10737
     $225 = $ReallocAsyncCtx3 + 168 | 0; //@line 10738
     HEAP32[$225 >> 2] = $84; //@line 10739
     $226 = $ReallocAsyncCtx3 + 172 | 0; //@line 10740
     HEAP32[$226 >> 2] = $86; //@line 10741
     $227 = $ReallocAsyncCtx3 + 176 | 0; //@line 10742
     HEAP32[$227 >> 2] = $$1202$in$i; //@line 10743
     $228 = $ReallocAsyncCtx3 + 180 | 0; //@line 10744
     HEAP32[$228 >> 2] = $88; //@line 10745
     $229 = $ReallocAsyncCtx3 + 184 | 0; //@line 10746
     HEAP32[$229 >> 2] = $90; //@line 10747
     $230 = $ReallocAsyncCtx3 + 188 | 0; //@line 10748
     HEAP32[$230 >> 2] = $92; //@line 10749
     $231 = $ReallocAsyncCtx3 + 192 | 0; //@line 10750
     HEAP32[$231 >> 2] = $94; //@line 10751
     $232 = $ReallocAsyncCtx3 + 196 | 0; //@line 10752
     HEAP16[$232 >> 1] = $$1202$i; //@line 10753
     $233 = $ReallocAsyncCtx3 + 200 | 0; //@line 10754
     HEAP32[$233 >> 2] = $96; //@line 10755
     $234 = $ReallocAsyncCtx3 + 204 | 0; //@line 10756
     HEAP32[$234 >> 2] = $100; //@line 10757
     $235 = $ReallocAsyncCtx3 + 208 | 0; //@line 10758
     HEAP32[$235 >> 2] = $102; //@line 10759
     $236 = $ReallocAsyncCtx3 + 212 | 0; //@line 10760
     HEAP32[$236 >> 2] = $98; //@line 10761
     $237 = $ReallocAsyncCtx3 + 216 | 0; //@line 10762
     HEAP32[$237 >> 2] = $106; //@line 10763
     $238 = $ReallocAsyncCtx3 + 220 | 0; //@line 10764
     HEAP32[$238 >> 2] = $104; //@line 10765
     $239 = $ReallocAsyncCtx3 + 224 | 0; //@line 10766
     HEAP32[$239 >> 2] = $108; //@line 10767
     $240 = $ReallocAsyncCtx3 + 228 | 0; //@line 10768
     HEAP32[$240 >> 2] = $110; //@line 10769
     $241 = $ReallocAsyncCtx3 + 232 | 0; //@line 10770
     HEAP32[$241 >> 2] = $112; //@line 10771
     $242 = $ReallocAsyncCtx3 + 236 | 0; //@line 10772
     HEAP32[$242 >> 2] = $114; //@line 10773
     $243 = $ReallocAsyncCtx3 + 240 | 0; //@line 10774
     HEAP32[$243 >> 2] = $116; //@line 10775
     $244 = $ReallocAsyncCtx3 + 244 | 0; //@line 10776
     HEAP32[$244 >> 2] = $245; //@line 10777
     $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 10778
     HEAP32[$246 >> 2] = $118; //@line 10779
     $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 10780
     HEAP32[$247 >> 2] = $120; //@line 10781
     $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 10782
     HEAP32[$248 >> 2] = $122; //@line 10783
     $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 10784
     HEAP32[$249 >> 2] = $124; //@line 10785
     $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 10786
     HEAP32[$250 >> 2] = $161; //@line 10787
     $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 10788
     HEAP32[$251 >> 2] = $128; //@line 10789
     $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 10790
     HEAP32[$252 >> 2] = $130; //@line 10791
     $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 10792
     HEAP32[$253 >> 2] = $132; //@line 10793
     $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 10794
     HEAP32[$254 >> 2] = $134; //@line 10795
     $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 10796
     HEAP32[$255 >> 2] = $136; //@line 10797
     sp = STACKTOP; //@line 10798
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3844, 4279, $90); //@line 10803
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3844, 4348, $4); //@line 10808
     break L2;
     break;
    }
   case 31:
    {
     $285 = $$1202$in$i & 65535; //@line 10813
     if (($$1202$i + -1 & 65535) <= 1033) {
      $288 = HEAP32[$42 >> 2] | 0; //@line 10817
      if (!(HEAP32[$288 + 44 >> 2] | 0)) {
       HEAP16[$288 + 2 >> 1] = $$1202$i; //@line 10823
       $293 = $245 + 1 | 0; //@line 10824
       HEAP32[$92 >> 2] = $293; //@line 10825
       $294 = HEAP32[$44 >> 2] | 0; //@line 10826
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 10827
       $295 = FUNCTION_TABLE_ii[$294 & 31]($$1202$i) | 0; //@line 10828
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 10831
        $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 10832
        HEAP32[$296 >> 2] = $2; //@line 10833
        $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 10834
        HEAP32[$297 >> 2] = $4; //@line 10835
        $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 10836
        HEAP32[$298 >> 2] = $8; //@line 10837
        $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 10838
        HEAP32[$299 >> 2] = $10; //@line 10839
        $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 10840
        HEAP32[$300 >> 2] = $12; //@line 10841
        $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 10842
        HEAP32[$301 >> 2] = $14; //@line 10843
        $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 10844
        HEAP32[$302 >> 2] = $16; //@line 10845
        $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 10846
        HEAP32[$303 >> 2] = $18; //@line 10847
        $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 10848
        HEAP32[$304 >> 2] = $22; //@line 10849
        $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 10850
        HEAP32[$305 >> 2] = $24; //@line 10851
        $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 10852
        HEAP32[$306 >> 2] = $26; //@line 10853
        $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 10854
        HEAP32[$307 >> 2] = $28; //@line 10855
        $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 10856
        HEAP32[$308 >> 2] = $285; //@line 10857
        $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 10858
        HEAP32[$309 >> 2] = $30; //@line 10859
        $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 10860
        HEAP32[$310 >> 2] = $32; //@line 10861
        $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 10862
        HEAP32[$311 >> 2] = $34; //@line 10863
        $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 10864
        HEAP32[$312 >> 2] = $293; //@line 10865
        $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 10866
        HEAP32[$313 >> 2] = $36; //@line 10867
        $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 10868
        HEAP32[$314 >> 2] = $38; //@line 10869
        $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 10870
        HEAP32[$315 >> 2] = $40; //@line 10871
        $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 10872
        HEAP32[$316 >> 2] = $42; //@line 10873
        $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 10874
        HEAP32[$317 >> 2] = $44; //@line 10875
        $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 10876
        HEAP32[$318 >> 2] = $46; //@line 10877
        $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 10878
        HEAP32[$319 >> 2] = $48; //@line 10879
        $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 10880
        HEAP32[$320 >> 2] = $50; //@line 10881
        $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 10882
        HEAP32[$321 >> 2] = $52; //@line 10883
        $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 10884
        HEAP32[$322 >> 2] = $54; //@line 10885
        $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 10886
        HEAP32[$323 >> 2] = $56; //@line 10887
        $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 10888
        HEAP32[$324 >> 2] = $58; //@line 10889
        $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 10890
        HEAP32[$325 >> 2] = $60; //@line 10891
        $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 10892
        HEAP32[$326 >> 2] = $62; //@line 10893
        $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 10894
        HEAP32[$327 >> 2] = $64; //@line 10895
        $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 10896
        HEAP32[$328 >> 2] = $66; //@line 10897
        $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 10898
        HEAP32[$329 >> 2] = $68; //@line 10899
        $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 10900
        HEAP32[$330 >> 2] = $70; //@line 10901
        $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 10902
        HEAP32[$331 >> 2] = $72; //@line 10903
        $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 10904
        HEAP32[$332 >> 2] = $74; //@line 10905
        $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 10906
        HEAP32[$333 >> 2] = $76; //@line 10907
        $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 10908
        HEAP32[$334 >> 2] = $78; //@line 10909
        $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 10910
        HEAP32[$335 >> 2] = $80; //@line 10911
        $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 10912
        HEAP32[$336 >> 2] = $82; //@line 10913
        $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 10914
        HEAP32[$337 >> 2] = $84; //@line 10915
        $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 10916
        HEAP32[$338 >> 2] = $86; //@line 10917
        $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 10918
        HEAP32[$339 >> 2] = $88; //@line 10919
        $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 10920
        HEAP32[$340 >> 2] = $90; //@line 10921
        $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 10922
        HEAP32[$341 >> 2] = $92; //@line 10923
        $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 10924
        HEAP32[$342 >> 2] = $94; //@line 10925
        $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 10926
        HEAP32[$343 >> 2] = $96; //@line 10927
        $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 10928
        HEAP32[$344 >> 2] = $98; //@line 10929
        $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 10930
        HEAP32[$345 >> 2] = $100; //@line 10931
        $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 10932
        HEAP32[$346 >> 2] = $102; //@line 10933
        $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 10934
        HEAP32[$347 >> 2] = $104; //@line 10935
        $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 10936
        HEAP32[$348 >> 2] = $106; //@line 10937
        $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 10938
        HEAP32[$349 >> 2] = $108; //@line 10939
        $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 10940
        HEAP32[$350 >> 2] = $110; //@line 10941
        $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 10942
        HEAP32[$351 >> 2] = $112; //@line 10943
        $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 10944
        HEAP32[$352 >> 2] = $114; //@line 10945
        $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 10946
        HEAP32[$353 >> 2] = $116; //@line 10947
        $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 10948
        HEAP32[$354 >> 2] = $118; //@line 10949
        $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 10950
        HEAP32[$355 >> 2] = $120; //@line 10951
        $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 10952
        HEAP32[$356 >> 2] = $122; //@line 10953
        $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 10954
        HEAP32[$357 >> 2] = $124; //@line 10955
        $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 10956
        HEAP32[$358 >> 2] = $161; //@line 10957
        $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 10958
        HEAP32[$359 >> 2] = $128; //@line 10959
        $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 10960
        HEAP32[$360 >> 2] = $130; //@line 10961
        $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 10962
        HEAP32[$361 >> 2] = $132; //@line 10963
        $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 10964
        HEAP32[$362 >> 2] = $134; //@line 10965
        $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 10966
        HEAP32[$363 >> 2] = $136; //@line 10967
        sp = STACKTOP; //@line 10968
        return;
       }
       HEAP32[___async_retval >> 2] = $295; //@line 10972
       ___async_unwind = 0; //@line 10973
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 10974
       $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 10975
       HEAP32[$296 >> 2] = $2; //@line 10976
       $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 10977
       HEAP32[$297 >> 2] = $4; //@line 10978
       $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 10979
       HEAP32[$298 >> 2] = $8; //@line 10980
       $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 10981
       HEAP32[$299 >> 2] = $10; //@line 10982
       $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 10983
       HEAP32[$300 >> 2] = $12; //@line 10984
       $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 10985
       HEAP32[$301 >> 2] = $14; //@line 10986
       $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 10987
       HEAP32[$302 >> 2] = $16; //@line 10988
       $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 10989
       HEAP32[$303 >> 2] = $18; //@line 10990
       $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 10991
       HEAP32[$304 >> 2] = $22; //@line 10992
       $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 10993
       HEAP32[$305 >> 2] = $24; //@line 10994
       $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 10995
       HEAP32[$306 >> 2] = $26; //@line 10996
       $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 10997
       HEAP32[$307 >> 2] = $28; //@line 10998
       $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 10999
       HEAP32[$308 >> 2] = $285; //@line 11000
       $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 11001
       HEAP32[$309 >> 2] = $30; //@line 11002
       $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 11003
       HEAP32[$310 >> 2] = $32; //@line 11004
       $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 11005
       HEAP32[$311 >> 2] = $34; //@line 11006
       $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 11007
       HEAP32[$312 >> 2] = $293; //@line 11008
       $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 11009
       HEAP32[$313 >> 2] = $36; //@line 11010
       $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 11011
       HEAP32[$314 >> 2] = $38; //@line 11012
       $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 11013
       HEAP32[$315 >> 2] = $40; //@line 11014
       $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 11015
       HEAP32[$316 >> 2] = $42; //@line 11016
       $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 11017
       HEAP32[$317 >> 2] = $44; //@line 11018
       $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 11019
       HEAP32[$318 >> 2] = $46; //@line 11020
       $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 11021
       HEAP32[$319 >> 2] = $48; //@line 11022
       $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 11023
       HEAP32[$320 >> 2] = $50; //@line 11024
       $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 11025
       HEAP32[$321 >> 2] = $52; //@line 11026
       $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 11027
       HEAP32[$322 >> 2] = $54; //@line 11028
       $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 11029
       HEAP32[$323 >> 2] = $56; //@line 11030
       $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 11031
       HEAP32[$324 >> 2] = $58; //@line 11032
       $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 11033
       HEAP32[$325 >> 2] = $60; //@line 11034
       $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 11035
       HEAP32[$326 >> 2] = $62; //@line 11036
       $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 11037
       HEAP32[$327 >> 2] = $64; //@line 11038
       $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 11039
       HEAP32[$328 >> 2] = $66; //@line 11040
       $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 11041
       HEAP32[$329 >> 2] = $68; //@line 11042
       $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 11043
       HEAP32[$330 >> 2] = $70; //@line 11044
       $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 11045
       HEAP32[$331 >> 2] = $72; //@line 11046
       $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 11047
       HEAP32[$332 >> 2] = $74; //@line 11048
       $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 11049
       HEAP32[$333 >> 2] = $76; //@line 11050
       $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 11051
       HEAP32[$334 >> 2] = $78; //@line 11052
       $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 11053
       HEAP32[$335 >> 2] = $80; //@line 11054
       $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 11055
       HEAP32[$336 >> 2] = $82; //@line 11056
       $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 11057
       HEAP32[$337 >> 2] = $84; //@line 11058
       $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 11059
       HEAP32[$338 >> 2] = $86; //@line 11060
       $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 11061
       HEAP32[$339 >> 2] = $88; //@line 11062
       $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 11063
       HEAP32[$340 >> 2] = $90; //@line 11064
       $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 11065
       HEAP32[$341 >> 2] = $92; //@line 11066
       $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 11067
       HEAP32[$342 >> 2] = $94; //@line 11068
       $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 11069
       HEAP32[$343 >> 2] = $96; //@line 11070
       $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 11071
       HEAP32[$344 >> 2] = $98; //@line 11072
       $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 11073
       HEAP32[$345 >> 2] = $100; //@line 11074
       $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 11075
       HEAP32[$346 >> 2] = $102; //@line 11076
       $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 11077
       HEAP32[$347 >> 2] = $104; //@line 11078
       $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 11079
       HEAP32[$348 >> 2] = $106; //@line 11080
       $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 11081
       HEAP32[$349 >> 2] = $108; //@line 11082
       $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 11083
       HEAP32[$350 >> 2] = $110; //@line 11084
       $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 11085
       HEAP32[$351 >> 2] = $112; //@line 11086
       $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 11087
       HEAP32[$352 >> 2] = $114; //@line 11088
       $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 11089
       HEAP32[$353 >> 2] = $116; //@line 11090
       $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 11091
       HEAP32[$354 >> 2] = $118; //@line 11092
       $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 11093
       HEAP32[$355 >> 2] = $120; //@line 11094
       $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 11095
       HEAP32[$356 >> 2] = $122; //@line 11096
       $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 11097
       HEAP32[$357 >> 2] = $124; //@line 11098
       $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 11099
       HEAP32[$358 >> 2] = $161; //@line 11100
       $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 11101
       HEAP32[$359 >> 2] = $128; //@line 11102
       $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 11103
       HEAP32[$360 >> 2] = $130; //@line 11104
       $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 11105
       HEAP32[$361 >> 2] = $132; //@line 11106
       $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 11107
       HEAP32[$362 >> 2] = $134; //@line 11108
       $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 11109
       HEAP32[$363 >> 2] = $136; //@line 11110
       sp = STACKTOP; //@line 11111
       return;
      }
     }
     _mbed_tracef(2, 3844, 4410, $54); //@line 11115
     break L2;
     break;
    }
   case 37:
    {
     $365 = HEAP32[$42 >> 2] | 0; //@line 11120
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 11122
     $367 = _sn_coap_parser_options_parse_multiple_options($116, $92, $179, $365 + 48 | 0, $365, 4, $$1202$i) | 0; //@line 11123
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 11126
      $368 = $ReallocAsyncCtx10 + 4 | 0; //@line 11127
      HEAP32[$368 >> 2] = $2; //@line 11128
      $369 = $ReallocAsyncCtx10 + 8 | 0; //@line 11129
      HEAP32[$369 >> 2] = $4; //@line 11130
      $370 = $ReallocAsyncCtx10 + 12 | 0; //@line 11131
      HEAP32[$370 >> 2] = $8; //@line 11132
      $371 = $ReallocAsyncCtx10 + 16 | 0; //@line 11133
      HEAP32[$371 >> 2] = $10; //@line 11134
      $372 = $ReallocAsyncCtx10 + 20 | 0; //@line 11135
      HEAP32[$372 >> 2] = $16; //@line 11136
      $373 = $ReallocAsyncCtx10 + 24 | 0; //@line 11137
      HEAP32[$373 >> 2] = $14; //@line 11138
      $374 = $ReallocAsyncCtx10 + 28 | 0; //@line 11139
      HEAP32[$374 >> 2] = $136; //@line 11140
      $375 = $ReallocAsyncCtx10 + 32 | 0; //@line 11141
      HEAP32[$375 >> 2] = $18; //@line 11142
      $376 = $ReallocAsyncCtx10 + 36 | 0; //@line 11143
      HEAP32[$376 >> 2] = $22; //@line 11144
      $377 = $ReallocAsyncCtx10 + 40 | 0; //@line 11145
      HEAP32[$377 >> 2] = $24; //@line 11146
      $378 = $ReallocAsyncCtx10 + 44 | 0; //@line 11147
      HEAP32[$378 >> 2] = $26; //@line 11148
      $379 = $ReallocAsyncCtx10 + 48 | 0; //@line 11149
      HEAP32[$379 >> 2] = $28; //@line 11150
      $380 = $ReallocAsyncCtx10 + 52 | 0; //@line 11151
      HEAP32[$380 >> 2] = $30; //@line 11152
      $381 = $ReallocAsyncCtx10 + 56 | 0; //@line 11153
      HEAP32[$381 >> 2] = $32; //@line 11154
      $382 = $ReallocAsyncCtx10 + 60 | 0; //@line 11155
      HEAP32[$382 >> 2] = $34; //@line 11156
      $383 = $ReallocAsyncCtx10 + 64 | 0; //@line 11157
      HEAP32[$383 >> 2] = $36; //@line 11158
      $384 = $ReallocAsyncCtx10 + 68 | 0; //@line 11159
      HEAP32[$384 >> 2] = $38; //@line 11160
      $385 = $ReallocAsyncCtx10 + 72 | 0; //@line 11161
      HEAP32[$385 >> 2] = $40; //@line 11162
      $386 = $ReallocAsyncCtx10 + 76 | 0; //@line 11163
      HEAP32[$386 >> 2] = $42; //@line 11164
      $387 = $ReallocAsyncCtx10 + 80 | 0; //@line 11165
      HEAP32[$387 >> 2] = $44; //@line 11166
      $388 = $ReallocAsyncCtx10 + 84 | 0; //@line 11167
      HEAP32[$388 >> 2] = $46; //@line 11168
      $389 = $ReallocAsyncCtx10 + 88 | 0; //@line 11169
      HEAP32[$389 >> 2] = $48; //@line 11170
      $390 = $ReallocAsyncCtx10 + 92 | 0; //@line 11171
      HEAP32[$390 >> 2] = $50; //@line 11172
      $391 = $ReallocAsyncCtx10 + 96 | 0; //@line 11173
      HEAP32[$391 >> 2] = $52; //@line 11174
      $392 = $ReallocAsyncCtx10 + 100 | 0; //@line 11175
      HEAP32[$392 >> 2] = $54; //@line 11176
      $393 = $ReallocAsyncCtx10 + 104 | 0; //@line 11177
      HEAP32[$393 >> 2] = $56; //@line 11178
      $394 = $ReallocAsyncCtx10 + 108 | 0; //@line 11179
      HEAP32[$394 >> 2] = $58; //@line 11180
      $395 = $ReallocAsyncCtx10 + 112 | 0; //@line 11181
      HEAP32[$395 >> 2] = $60; //@line 11182
      $396 = $ReallocAsyncCtx10 + 116 | 0; //@line 11183
      HEAP32[$396 >> 2] = $62; //@line 11184
      $397 = $ReallocAsyncCtx10 + 120 | 0; //@line 11185
      HEAP32[$397 >> 2] = $64; //@line 11186
      $398 = $ReallocAsyncCtx10 + 124 | 0; //@line 11187
      HEAP32[$398 >> 2] = $66; //@line 11188
      $399 = $ReallocAsyncCtx10 + 128 | 0; //@line 11189
      HEAP32[$399 >> 2] = $68; //@line 11190
      $400 = $ReallocAsyncCtx10 + 132 | 0; //@line 11191
      HEAP32[$400 >> 2] = $70; //@line 11192
      $401 = $ReallocAsyncCtx10 + 136 | 0; //@line 11193
      HEAP32[$401 >> 2] = $72; //@line 11194
      $402 = $ReallocAsyncCtx10 + 140 | 0; //@line 11195
      HEAP32[$402 >> 2] = $74; //@line 11196
      $403 = $ReallocAsyncCtx10 + 144 | 0; //@line 11197
      HEAP32[$403 >> 2] = $76; //@line 11198
      $404 = $ReallocAsyncCtx10 + 148 | 0; //@line 11199
      HEAP32[$404 >> 2] = $78; //@line 11200
      $405 = $ReallocAsyncCtx10 + 152 | 0; //@line 11201
      HEAP32[$405 >> 2] = $80; //@line 11202
      $406 = $ReallocAsyncCtx10 + 156 | 0; //@line 11203
      HEAP32[$406 >> 2] = $82; //@line 11204
      $407 = $ReallocAsyncCtx10 + 160 | 0; //@line 11205
      HEAP32[$407 >> 2] = $84; //@line 11206
      $408 = $ReallocAsyncCtx10 + 164 | 0; //@line 11207
      HEAP32[$408 >> 2] = $86; //@line 11208
      $409 = $ReallocAsyncCtx10 + 168 | 0; //@line 11209
      HEAP32[$409 >> 2] = $88; //@line 11210
      $410 = $ReallocAsyncCtx10 + 172 | 0; //@line 11211
      HEAP32[$410 >> 2] = $90; //@line 11212
      $411 = $ReallocAsyncCtx10 + 176 | 0; //@line 11213
      HEAP32[$411 >> 2] = $92; //@line 11214
      $412 = $ReallocAsyncCtx10 + 180 | 0; //@line 11215
      HEAP32[$412 >> 2] = $94; //@line 11216
      $413 = $ReallocAsyncCtx10 + 184 | 0; //@line 11217
      HEAP32[$413 >> 2] = $96; //@line 11218
      $414 = $ReallocAsyncCtx10 + 188 | 0; //@line 11219
      HEAP32[$414 >> 2] = $98; //@line 11220
      $415 = $ReallocAsyncCtx10 + 192 | 0; //@line 11221
      HEAP32[$415 >> 2] = $100; //@line 11222
      $416 = $ReallocAsyncCtx10 + 196 | 0; //@line 11223
      HEAP32[$416 >> 2] = $102; //@line 11224
      $417 = $ReallocAsyncCtx10 + 200 | 0; //@line 11225
      HEAP32[$417 >> 2] = $104; //@line 11226
      $418 = $ReallocAsyncCtx10 + 204 | 0; //@line 11227
      HEAP32[$418 >> 2] = $106; //@line 11228
      $419 = $ReallocAsyncCtx10 + 208 | 0; //@line 11229
      HEAP32[$419 >> 2] = $108; //@line 11230
      $420 = $ReallocAsyncCtx10 + 212 | 0; //@line 11231
      HEAP32[$420 >> 2] = $110; //@line 11232
      $421 = $ReallocAsyncCtx10 + 216 | 0; //@line 11233
      HEAP32[$421 >> 2] = $112; //@line 11234
      $422 = $ReallocAsyncCtx10 + 220 | 0; //@line 11235
      HEAP32[$422 >> 2] = $114; //@line 11236
      $423 = $ReallocAsyncCtx10 + 224 | 0; //@line 11237
      HEAP32[$423 >> 2] = $116; //@line 11238
      $424 = $ReallocAsyncCtx10 + 228 | 0; //@line 11239
      HEAP32[$424 >> 2] = $118; //@line 11240
      $425 = $ReallocAsyncCtx10 + 232 | 0; //@line 11241
      HEAP32[$425 >> 2] = $120; //@line 11242
      $426 = $ReallocAsyncCtx10 + 236 | 0; //@line 11243
      HEAP32[$426 >> 2] = $122; //@line 11244
      $427 = $ReallocAsyncCtx10 + 240 | 0; //@line 11245
      HEAP32[$427 >> 2] = $124; //@line 11246
      $428 = $ReallocAsyncCtx10 + 244 | 0; //@line 11247
      HEAP32[$428 >> 2] = $161; //@line 11248
      $429 = $ReallocAsyncCtx10 + 248 | 0; //@line 11249
      HEAP32[$429 >> 2] = $128; //@line 11250
      $430 = $ReallocAsyncCtx10 + 252 | 0; //@line 11251
      HEAP32[$430 >> 2] = $130; //@line 11252
      $431 = $ReallocAsyncCtx10 + 256 | 0; //@line 11253
      HEAP32[$431 >> 2] = $132; //@line 11254
      $432 = $ReallocAsyncCtx10 + 260 | 0; //@line 11255
      HEAP32[$432 >> 2] = $134; //@line 11256
      $433 = $ReallocAsyncCtx10 + 264 | 0; //@line 11257
      HEAP32[$433 >> 2] = $12; //@line 11258
      sp = STACKTOP; //@line 11259
      return;
     }
     HEAP8[___async_retval >> 0] = $367; //@line 11263
     ___async_unwind = 0; //@line 11264
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 11265
     $368 = $ReallocAsyncCtx10 + 4 | 0; //@line 11266
     HEAP32[$368 >> 2] = $2; //@line 11267
     $369 = $ReallocAsyncCtx10 + 8 | 0; //@line 11268
     HEAP32[$369 >> 2] = $4; //@line 11269
     $370 = $ReallocAsyncCtx10 + 12 | 0; //@line 11270
     HEAP32[$370 >> 2] = $8; //@line 11271
     $371 = $ReallocAsyncCtx10 + 16 | 0; //@line 11272
     HEAP32[$371 >> 2] = $10; //@line 11273
     $372 = $ReallocAsyncCtx10 + 20 | 0; //@line 11274
     HEAP32[$372 >> 2] = $16; //@line 11275
     $373 = $ReallocAsyncCtx10 + 24 | 0; //@line 11276
     HEAP32[$373 >> 2] = $14; //@line 11277
     $374 = $ReallocAsyncCtx10 + 28 | 0; //@line 11278
     HEAP32[$374 >> 2] = $136; //@line 11279
     $375 = $ReallocAsyncCtx10 + 32 | 0; //@line 11280
     HEAP32[$375 >> 2] = $18; //@line 11281
     $376 = $ReallocAsyncCtx10 + 36 | 0; //@line 11282
     HEAP32[$376 >> 2] = $22; //@line 11283
     $377 = $ReallocAsyncCtx10 + 40 | 0; //@line 11284
     HEAP32[$377 >> 2] = $24; //@line 11285
     $378 = $ReallocAsyncCtx10 + 44 | 0; //@line 11286
     HEAP32[$378 >> 2] = $26; //@line 11287
     $379 = $ReallocAsyncCtx10 + 48 | 0; //@line 11288
     HEAP32[$379 >> 2] = $28; //@line 11289
     $380 = $ReallocAsyncCtx10 + 52 | 0; //@line 11290
     HEAP32[$380 >> 2] = $30; //@line 11291
     $381 = $ReallocAsyncCtx10 + 56 | 0; //@line 11292
     HEAP32[$381 >> 2] = $32; //@line 11293
     $382 = $ReallocAsyncCtx10 + 60 | 0; //@line 11294
     HEAP32[$382 >> 2] = $34; //@line 11295
     $383 = $ReallocAsyncCtx10 + 64 | 0; //@line 11296
     HEAP32[$383 >> 2] = $36; //@line 11297
     $384 = $ReallocAsyncCtx10 + 68 | 0; //@line 11298
     HEAP32[$384 >> 2] = $38; //@line 11299
     $385 = $ReallocAsyncCtx10 + 72 | 0; //@line 11300
     HEAP32[$385 >> 2] = $40; //@line 11301
     $386 = $ReallocAsyncCtx10 + 76 | 0; //@line 11302
     HEAP32[$386 >> 2] = $42; //@line 11303
     $387 = $ReallocAsyncCtx10 + 80 | 0; //@line 11304
     HEAP32[$387 >> 2] = $44; //@line 11305
     $388 = $ReallocAsyncCtx10 + 84 | 0; //@line 11306
     HEAP32[$388 >> 2] = $46; //@line 11307
     $389 = $ReallocAsyncCtx10 + 88 | 0; //@line 11308
     HEAP32[$389 >> 2] = $48; //@line 11309
     $390 = $ReallocAsyncCtx10 + 92 | 0; //@line 11310
     HEAP32[$390 >> 2] = $50; //@line 11311
     $391 = $ReallocAsyncCtx10 + 96 | 0; //@line 11312
     HEAP32[$391 >> 2] = $52; //@line 11313
     $392 = $ReallocAsyncCtx10 + 100 | 0; //@line 11314
     HEAP32[$392 >> 2] = $54; //@line 11315
     $393 = $ReallocAsyncCtx10 + 104 | 0; //@line 11316
     HEAP32[$393 >> 2] = $56; //@line 11317
     $394 = $ReallocAsyncCtx10 + 108 | 0; //@line 11318
     HEAP32[$394 >> 2] = $58; //@line 11319
     $395 = $ReallocAsyncCtx10 + 112 | 0; //@line 11320
     HEAP32[$395 >> 2] = $60; //@line 11321
     $396 = $ReallocAsyncCtx10 + 116 | 0; //@line 11322
     HEAP32[$396 >> 2] = $62; //@line 11323
     $397 = $ReallocAsyncCtx10 + 120 | 0; //@line 11324
     HEAP32[$397 >> 2] = $64; //@line 11325
     $398 = $ReallocAsyncCtx10 + 124 | 0; //@line 11326
     HEAP32[$398 >> 2] = $66; //@line 11327
     $399 = $ReallocAsyncCtx10 + 128 | 0; //@line 11328
     HEAP32[$399 >> 2] = $68; //@line 11329
     $400 = $ReallocAsyncCtx10 + 132 | 0; //@line 11330
     HEAP32[$400 >> 2] = $70; //@line 11331
     $401 = $ReallocAsyncCtx10 + 136 | 0; //@line 11332
     HEAP32[$401 >> 2] = $72; //@line 11333
     $402 = $ReallocAsyncCtx10 + 140 | 0; //@line 11334
     HEAP32[$402 >> 2] = $74; //@line 11335
     $403 = $ReallocAsyncCtx10 + 144 | 0; //@line 11336
     HEAP32[$403 >> 2] = $76; //@line 11337
     $404 = $ReallocAsyncCtx10 + 148 | 0; //@line 11338
     HEAP32[$404 >> 2] = $78; //@line 11339
     $405 = $ReallocAsyncCtx10 + 152 | 0; //@line 11340
     HEAP32[$405 >> 2] = $80; //@line 11341
     $406 = $ReallocAsyncCtx10 + 156 | 0; //@line 11342
     HEAP32[$406 >> 2] = $82; //@line 11343
     $407 = $ReallocAsyncCtx10 + 160 | 0; //@line 11344
     HEAP32[$407 >> 2] = $84; //@line 11345
     $408 = $ReallocAsyncCtx10 + 164 | 0; //@line 11346
     HEAP32[$408 >> 2] = $86; //@line 11347
     $409 = $ReallocAsyncCtx10 + 168 | 0; //@line 11348
     HEAP32[$409 >> 2] = $88; //@line 11349
     $410 = $ReallocAsyncCtx10 + 172 | 0; //@line 11350
     HEAP32[$410 >> 2] = $90; //@line 11351
     $411 = $ReallocAsyncCtx10 + 176 | 0; //@line 11352
     HEAP32[$411 >> 2] = $92; //@line 11353
     $412 = $ReallocAsyncCtx10 + 180 | 0; //@line 11354
     HEAP32[$412 >> 2] = $94; //@line 11355
     $413 = $ReallocAsyncCtx10 + 184 | 0; //@line 11356
     HEAP32[$413 >> 2] = $96; //@line 11357
     $414 = $ReallocAsyncCtx10 + 188 | 0; //@line 11358
     HEAP32[$414 >> 2] = $98; //@line 11359
     $415 = $ReallocAsyncCtx10 + 192 | 0; //@line 11360
     HEAP32[$415 >> 2] = $100; //@line 11361
     $416 = $ReallocAsyncCtx10 + 196 | 0; //@line 11362
     HEAP32[$416 >> 2] = $102; //@line 11363
     $417 = $ReallocAsyncCtx10 + 200 | 0; //@line 11364
     HEAP32[$417 >> 2] = $104; //@line 11365
     $418 = $ReallocAsyncCtx10 + 204 | 0; //@line 11366
     HEAP32[$418 >> 2] = $106; //@line 11367
     $419 = $ReallocAsyncCtx10 + 208 | 0; //@line 11368
     HEAP32[$419 >> 2] = $108; //@line 11369
     $420 = $ReallocAsyncCtx10 + 212 | 0; //@line 11370
     HEAP32[$420 >> 2] = $110; //@line 11371
     $421 = $ReallocAsyncCtx10 + 216 | 0; //@line 11372
     HEAP32[$421 >> 2] = $112; //@line 11373
     $422 = $ReallocAsyncCtx10 + 220 | 0; //@line 11374
     HEAP32[$422 >> 2] = $114; //@line 11375
     $423 = $ReallocAsyncCtx10 + 224 | 0; //@line 11376
     HEAP32[$423 >> 2] = $116; //@line 11377
     $424 = $ReallocAsyncCtx10 + 228 | 0; //@line 11378
     HEAP32[$424 >> 2] = $118; //@line 11379
     $425 = $ReallocAsyncCtx10 + 232 | 0; //@line 11380
     HEAP32[$425 >> 2] = $120; //@line 11381
     $426 = $ReallocAsyncCtx10 + 236 | 0; //@line 11382
     HEAP32[$426 >> 2] = $122; //@line 11383
     $427 = $ReallocAsyncCtx10 + 240 | 0; //@line 11384
     HEAP32[$427 >> 2] = $124; //@line 11385
     $428 = $ReallocAsyncCtx10 + 244 | 0; //@line 11386
     HEAP32[$428 >> 2] = $161; //@line 11387
     $429 = $ReallocAsyncCtx10 + 248 | 0; //@line 11388
     HEAP32[$429 >> 2] = $128; //@line 11389
     $430 = $ReallocAsyncCtx10 + 252 | 0; //@line 11390
     HEAP32[$430 >> 2] = $130; //@line 11391
     $431 = $ReallocAsyncCtx10 + 256 | 0; //@line 11392
     HEAP32[$431 >> 2] = $132; //@line 11393
     $432 = $ReallocAsyncCtx10 + 260 | 0; //@line 11394
     HEAP32[$432 >> 2] = $134; //@line 11395
     $433 = $ReallocAsyncCtx10 + 264 | 0; //@line 11396
     HEAP32[$433 >> 2] = $12; //@line 11397
     sp = STACKTOP; //@line 11398
     return;
    }
   case 40:
    {
     $435 = $$1202$in$i & 65535; //@line 11403
     if (($$1202$i + -1 & 65535) <= 254) {
      $438 = HEAP32[$42 >> 2] | 0; //@line 11407
      if (!(HEAP32[$438 + 52 >> 2] | 0)) {
       HEAP16[$438 + 4 >> 1] = $$1202$i; //@line 11413
       $443 = $245 + 1 | 0; //@line 11414
       HEAP32[$92 >> 2] = $443; //@line 11415
       $444 = HEAP32[$44 >> 2] | 0; //@line 11416
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 11417
       $445 = FUNCTION_TABLE_ii[$444 & 31]($$1202$i) | 0; //@line 11418
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 11421
        $446 = $ReallocAsyncCtx5 + 4 | 0; //@line 11422
        HEAP32[$446 >> 2] = $2; //@line 11423
        $447 = $ReallocAsyncCtx5 + 8 | 0; //@line 11424
        HEAP32[$447 >> 2] = $4; //@line 11425
        $448 = $ReallocAsyncCtx5 + 12 | 0; //@line 11426
        HEAP32[$448 >> 2] = $435; //@line 11427
        $449 = $ReallocAsyncCtx5 + 16 | 0; //@line 11428
        HEAP32[$449 >> 2] = $8; //@line 11429
        $450 = $ReallocAsyncCtx5 + 20 | 0; //@line 11430
        HEAP32[$450 >> 2] = $10; //@line 11431
        $451 = $ReallocAsyncCtx5 + 24 | 0; //@line 11432
        HEAP32[$451 >> 2] = $12; //@line 11433
        $452 = $ReallocAsyncCtx5 + 28 | 0; //@line 11434
        HEAP32[$452 >> 2] = $14; //@line 11435
        $453 = $ReallocAsyncCtx5 + 32 | 0; //@line 11436
        HEAP32[$453 >> 2] = $16; //@line 11437
        $454 = $ReallocAsyncCtx5 + 36 | 0; //@line 11438
        HEAP32[$454 >> 2] = $18; //@line 11439
        $455 = $ReallocAsyncCtx5 + 40 | 0; //@line 11440
        HEAP32[$455 >> 2] = $443; //@line 11441
        $456 = $ReallocAsyncCtx5 + 44 | 0; //@line 11442
        HEAP32[$456 >> 2] = $22; //@line 11443
        $457 = $ReallocAsyncCtx5 + 48 | 0; //@line 11444
        HEAP32[$457 >> 2] = $24; //@line 11445
        $458 = $ReallocAsyncCtx5 + 52 | 0; //@line 11446
        HEAP32[$458 >> 2] = $26; //@line 11447
        $459 = $ReallocAsyncCtx5 + 56 | 0; //@line 11448
        HEAP32[$459 >> 2] = $28; //@line 11449
        $460 = $ReallocAsyncCtx5 + 60 | 0; //@line 11450
        HEAP32[$460 >> 2] = $30; //@line 11451
        $461 = $ReallocAsyncCtx5 + 64 | 0; //@line 11452
        HEAP32[$461 >> 2] = $32; //@line 11453
        $462 = $ReallocAsyncCtx5 + 68 | 0; //@line 11454
        HEAP32[$462 >> 2] = $34; //@line 11455
        $463 = $ReallocAsyncCtx5 + 72 | 0; //@line 11456
        HEAP32[$463 >> 2] = $36; //@line 11457
        $464 = $ReallocAsyncCtx5 + 76 | 0; //@line 11458
        HEAP32[$464 >> 2] = $38; //@line 11459
        $465 = $ReallocAsyncCtx5 + 80 | 0; //@line 11460
        HEAP32[$465 >> 2] = $40; //@line 11461
        $466 = $ReallocAsyncCtx5 + 84 | 0; //@line 11462
        HEAP32[$466 >> 2] = $42; //@line 11463
        $467 = $ReallocAsyncCtx5 + 88 | 0; //@line 11464
        HEAP32[$467 >> 2] = $44; //@line 11465
        $468 = $ReallocAsyncCtx5 + 92 | 0; //@line 11466
        HEAP32[$468 >> 2] = $46; //@line 11467
        $469 = $ReallocAsyncCtx5 + 96 | 0; //@line 11468
        HEAP32[$469 >> 2] = $48; //@line 11469
        $470 = $ReallocAsyncCtx5 + 100 | 0; //@line 11470
        HEAP32[$470 >> 2] = $50; //@line 11471
        $471 = $ReallocAsyncCtx5 + 104 | 0; //@line 11472
        HEAP32[$471 >> 2] = $52; //@line 11473
        $472 = $ReallocAsyncCtx5 + 108 | 0; //@line 11474
        HEAP32[$472 >> 2] = $54; //@line 11475
        $473 = $ReallocAsyncCtx5 + 112 | 0; //@line 11476
        HEAP32[$473 >> 2] = $56; //@line 11477
        $474 = $ReallocAsyncCtx5 + 116 | 0; //@line 11478
        HEAP32[$474 >> 2] = $58; //@line 11479
        $475 = $ReallocAsyncCtx5 + 120 | 0; //@line 11480
        HEAP32[$475 >> 2] = $60; //@line 11481
        $476 = $ReallocAsyncCtx5 + 124 | 0; //@line 11482
        HEAP32[$476 >> 2] = $62; //@line 11483
        $477 = $ReallocAsyncCtx5 + 128 | 0; //@line 11484
        HEAP32[$477 >> 2] = $64; //@line 11485
        $478 = $ReallocAsyncCtx5 + 132 | 0; //@line 11486
        HEAP32[$478 >> 2] = $66; //@line 11487
        $479 = $ReallocAsyncCtx5 + 136 | 0; //@line 11488
        HEAP32[$479 >> 2] = $68; //@line 11489
        $480 = $ReallocAsyncCtx5 + 140 | 0; //@line 11490
        HEAP32[$480 >> 2] = $70; //@line 11491
        $481 = $ReallocAsyncCtx5 + 144 | 0; //@line 11492
        HEAP32[$481 >> 2] = $72; //@line 11493
        $482 = $ReallocAsyncCtx5 + 148 | 0; //@line 11494
        HEAP32[$482 >> 2] = $74; //@line 11495
        $483 = $ReallocAsyncCtx5 + 152 | 0; //@line 11496
        HEAP32[$483 >> 2] = $76; //@line 11497
        $484 = $ReallocAsyncCtx5 + 156 | 0; //@line 11498
        HEAP32[$484 >> 2] = $78; //@line 11499
        $485 = $ReallocAsyncCtx5 + 160 | 0; //@line 11500
        HEAP32[$485 >> 2] = $80; //@line 11501
        $486 = $ReallocAsyncCtx5 + 164 | 0; //@line 11502
        HEAP32[$486 >> 2] = $82; //@line 11503
        $487 = $ReallocAsyncCtx5 + 168 | 0; //@line 11504
        HEAP32[$487 >> 2] = $84; //@line 11505
        $488 = $ReallocAsyncCtx5 + 172 | 0; //@line 11506
        HEAP32[$488 >> 2] = $86; //@line 11507
        $489 = $ReallocAsyncCtx5 + 176 | 0; //@line 11508
        HEAP32[$489 >> 2] = $88; //@line 11509
        $490 = $ReallocAsyncCtx5 + 180 | 0; //@line 11510
        HEAP32[$490 >> 2] = $90; //@line 11511
        $491 = $ReallocAsyncCtx5 + 184 | 0; //@line 11512
        HEAP32[$491 >> 2] = $92; //@line 11513
        $492 = $ReallocAsyncCtx5 + 188 | 0; //@line 11514
        HEAP32[$492 >> 2] = $94; //@line 11515
        $493 = $ReallocAsyncCtx5 + 192 | 0; //@line 11516
        HEAP32[$493 >> 2] = $96; //@line 11517
        $494 = $ReallocAsyncCtx5 + 196 | 0; //@line 11518
        HEAP32[$494 >> 2] = $98; //@line 11519
        $495 = $ReallocAsyncCtx5 + 200 | 0; //@line 11520
        HEAP32[$495 >> 2] = $100; //@line 11521
        $496 = $ReallocAsyncCtx5 + 204 | 0; //@line 11522
        HEAP32[$496 >> 2] = $102; //@line 11523
        $497 = $ReallocAsyncCtx5 + 208 | 0; //@line 11524
        HEAP32[$497 >> 2] = $104; //@line 11525
        $498 = $ReallocAsyncCtx5 + 212 | 0; //@line 11526
        HEAP32[$498 >> 2] = $106; //@line 11527
        $499 = $ReallocAsyncCtx5 + 216 | 0; //@line 11528
        HEAP32[$499 >> 2] = $108; //@line 11529
        $500 = $ReallocAsyncCtx5 + 220 | 0; //@line 11530
        HEAP32[$500 >> 2] = $110; //@line 11531
        $501 = $ReallocAsyncCtx5 + 224 | 0; //@line 11532
        HEAP32[$501 >> 2] = $112; //@line 11533
        $502 = $ReallocAsyncCtx5 + 228 | 0; //@line 11534
        HEAP32[$502 >> 2] = $114; //@line 11535
        $503 = $ReallocAsyncCtx5 + 232 | 0; //@line 11536
        HEAP32[$503 >> 2] = $116; //@line 11537
        $504 = $ReallocAsyncCtx5 + 236 | 0; //@line 11538
        HEAP32[$504 >> 2] = $118; //@line 11539
        $505 = $ReallocAsyncCtx5 + 240 | 0; //@line 11540
        HEAP32[$505 >> 2] = $120; //@line 11541
        $506 = $ReallocAsyncCtx5 + 244 | 0; //@line 11542
        HEAP32[$506 >> 2] = $122; //@line 11543
        $507 = $ReallocAsyncCtx5 + 248 | 0; //@line 11544
        HEAP32[$507 >> 2] = $124; //@line 11545
        $508 = $ReallocAsyncCtx5 + 252 | 0; //@line 11546
        HEAP32[$508 >> 2] = $161; //@line 11547
        $509 = $ReallocAsyncCtx5 + 256 | 0; //@line 11548
        HEAP32[$509 >> 2] = $128; //@line 11549
        $510 = $ReallocAsyncCtx5 + 260 | 0; //@line 11550
        HEAP32[$510 >> 2] = $130; //@line 11551
        $511 = $ReallocAsyncCtx5 + 264 | 0; //@line 11552
        HEAP32[$511 >> 2] = $132; //@line 11553
        $512 = $ReallocAsyncCtx5 + 268 | 0; //@line 11554
        HEAP32[$512 >> 2] = $134; //@line 11555
        $513 = $ReallocAsyncCtx5 + 272 | 0; //@line 11556
        HEAP32[$513 >> 2] = $136; //@line 11557
        sp = STACKTOP; //@line 11558
        return;
       }
       HEAP32[___async_retval >> 2] = $445; //@line 11562
       ___async_unwind = 0; //@line 11563
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 11564
       $446 = $ReallocAsyncCtx5 + 4 | 0; //@line 11565
       HEAP32[$446 >> 2] = $2; //@line 11566
       $447 = $ReallocAsyncCtx5 + 8 | 0; //@line 11567
       HEAP32[$447 >> 2] = $4; //@line 11568
       $448 = $ReallocAsyncCtx5 + 12 | 0; //@line 11569
       HEAP32[$448 >> 2] = $435; //@line 11570
       $449 = $ReallocAsyncCtx5 + 16 | 0; //@line 11571
       HEAP32[$449 >> 2] = $8; //@line 11572
       $450 = $ReallocAsyncCtx5 + 20 | 0; //@line 11573
       HEAP32[$450 >> 2] = $10; //@line 11574
       $451 = $ReallocAsyncCtx5 + 24 | 0; //@line 11575
       HEAP32[$451 >> 2] = $12; //@line 11576
       $452 = $ReallocAsyncCtx5 + 28 | 0; //@line 11577
       HEAP32[$452 >> 2] = $14; //@line 11578
       $453 = $ReallocAsyncCtx5 + 32 | 0; //@line 11579
       HEAP32[$453 >> 2] = $16; //@line 11580
       $454 = $ReallocAsyncCtx5 + 36 | 0; //@line 11581
       HEAP32[$454 >> 2] = $18; //@line 11582
       $455 = $ReallocAsyncCtx5 + 40 | 0; //@line 11583
       HEAP32[$455 >> 2] = $443; //@line 11584
       $456 = $ReallocAsyncCtx5 + 44 | 0; //@line 11585
       HEAP32[$456 >> 2] = $22; //@line 11586
       $457 = $ReallocAsyncCtx5 + 48 | 0; //@line 11587
       HEAP32[$457 >> 2] = $24; //@line 11588
       $458 = $ReallocAsyncCtx5 + 52 | 0; //@line 11589
       HEAP32[$458 >> 2] = $26; //@line 11590
       $459 = $ReallocAsyncCtx5 + 56 | 0; //@line 11591
       HEAP32[$459 >> 2] = $28; //@line 11592
       $460 = $ReallocAsyncCtx5 + 60 | 0; //@line 11593
       HEAP32[$460 >> 2] = $30; //@line 11594
       $461 = $ReallocAsyncCtx5 + 64 | 0; //@line 11595
       HEAP32[$461 >> 2] = $32; //@line 11596
       $462 = $ReallocAsyncCtx5 + 68 | 0; //@line 11597
       HEAP32[$462 >> 2] = $34; //@line 11598
       $463 = $ReallocAsyncCtx5 + 72 | 0; //@line 11599
       HEAP32[$463 >> 2] = $36; //@line 11600
       $464 = $ReallocAsyncCtx5 + 76 | 0; //@line 11601
       HEAP32[$464 >> 2] = $38; //@line 11602
       $465 = $ReallocAsyncCtx5 + 80 | 0; //@line 11603
       HEAP32[$465 >> 2] = $40; //@line 11604
       $466 = $ReallocAsyncCtx5 + 84 | 0; //@line 11605
       HEAP32[$466 >> 2] = $42; //@line 11606
       $467 = $ReallocAsyncCtx5 + 88 | 0; //@line 11607
       HEAP32[$467 >> 2] = $44; //@line 11608
       $468 = $ReallocAsyncCtx5 + 92 | 0; //@line 11609
       HEAP32[$468 >> 2] = $46; //@line 11610
       $469 = $ReallocAsyncCtx5 + 96 | 0; //@line 11611
       HEAP32[$469 >> 2] = $48; //@line 11612
       $470 = $ReallocAsyncCtx5 + 100 | 0; //@line 11613
       HEAP32[$470 >> 2] = $50; //@line 11614
       $471 = $ReallocAsyncCtx5 + 104 | 0; //@line 11615
       HEAP32[$471 >> 2] = $52; //@line 11616
       $472 = $ReallocAsyncCtx5 + 108 | 0; //@line 11617
       HEAP32[$472 >> 2] = $54; //@line 11618
       $473 = $ReallocAsyncCtx5 + 112 | 0; //@line 11619
       HEAP32[$473 >> 2] = $56; //@line 11620
       $474 = $ReallocAsyncCtx5 + 116 | 0; //@line 11621
       HEAP32[$474 >> 2] = $58; //@line 11622
       $475 = $ReallocAsyncCtx5 + 120 | 0; //@line 11623
       HEAP32[$475 >> 2] = $60; //@line 11624
       $476 = $ReallocAsyncCtx5 + 124 | 0; //@line 11625
       HEAP32[$476 >> 2] = $62; //@line 11626
       $477 = $ReallocAsyncCtx5 + 128 | 0; //@line 11627
       HEAP32[$477 >> 2] = $64; //@line 11628
       $478 = $ReallocAsyncCtx5 + 132 | 0; //@line 11629
       HEAP32[$478 >> 2] = $66; //@line 11630
       $479 = $ReallocAsyncCtx5 + 136 | 0; //@line 11631
       HEAP32[$479 >> 2] = $68; //@line 11632
       $480 = $ReallocAsyncCtx5 + 140 | 0; //@line 11633
       HEAP32[$480 >> 2] = $70; //@line 11634
       $481 = $ReallocAsyncCtx5 + 144 | 0; //@line 11635
       HEAP32[$481 >> 2] = $72; //@line 11636
       $482 = $ReallocAsyncCtx5 + 148 | 0; //@line 11637
       HEAP32[$482 >> 2] = $74; //@line 11638
       $483 = $ReallocAsyncCtx5 + 152 | 0; //@line 11639
       HEAP32[$483 >> 2] = $76; //@line 11640
       $484 = $ReallocAsyncCtx5 + 156 | 0; //@line 11641
       HEAP32[$484 >> 2] = $78; //@line 11642
       $485 = $ReallocAsyncCtx5 + 160 | 0; //@line 11643
       HEAP32[$485 >> 2] = $80; //@line 11644
       $486 = $ReallocAsyncCtx5 + 164 | 0; //@line 11645
       HEAP32[$486 >> 2] = $82; //@line 11646
       $487 = $ReallocAsyncCtx5 + 168 | 0; //@line 11647
       HEAP32[$487 >> 2] = $84; //@line 11648
       $488 = $ReallocAsyncCtx5 + 172 | 0; //@line 11649
       HEAP32[$488 >> 2] = $86; //@line 11650
       $489 = $ReallocAsyncCtx5 + 176 | 0; //@line 11651
       HEAP32[$489 >> 2] = $88; //@line 11652
       $490 = $ReallocAsyncCtx5 + 180 | 0; //@line 11653
       HEAP32[$490 >> 2] = $90; //@line 11654
       $491 = $ReallocAsyncCtx5 + 184 | 0; //@line 11655
       HEAP32[$491 >> 2] = $92; //@line 11656
       $492 = $ReallocAsyncCtx5 + 188 | 0; //@line 11657
       HEAP32[$492 >> 2] = $94; //@line 11658
       $493 = $ReallocAsyncCtx5 + 192 | 0; //@line 11659
       HEAP32[$493 >> 2] = $96; //@line 11660
       $494 = $ReallocAsyncCtx5 + 196 | 0; //@line 11661
       HEAP32[$494 >> 2] = $98; //@line 11662
       $495 = $ReallocAsyncCtx5 + 200 | 0; //@line 11663
       HEAP32[$495 >> 2] = $100; //@line 11664
       $496 = $ReallocAsyncCtx5 + 204 | 0; //@line 11665
       HEAP32[$496 >> 2] = $102; //@line 11666
       $497 = $ReallocAsyncCtx5 + 208 | 0; //@line 11667
       HEAP32[$497 >> 2] = $104; //@line 11668
       $498 = $ReallocAsyncCtx5 + 212 | 0; //@line 11669
       HEAP32[$498 >> 2] = $106; //@line 11670
       $499 = $ReallocAsyncCtx5 + 216 | 0; //@line 11671
       HEAP32[$499 >> 2] = $108; //@line 11672
       $500 = $ReallocAsyncCtx5 + 220 | 0; //@line 11673
       HEAP32[$500 >> 2] = $110; //@line 11674
       $501 = $ReallocAsyncCtx5 + 224 | 0; //@line 11675
       HEAP32[$501 >> 2] = $112; //@line 11676
       $502 = $ReallocAsyncCtx5 + 228 | 0; //@line 11677
       HEAP32[$502 >> 2] = $114; //@line 11678
       $503 = $ReallocAsyncCtx5 + 232 | 0; //@line 11679
       HEAP32[$503 >> 2] = $116; //@line 11680
       $504 = $ReallocAsyncCtx5 + 236 | 0; //@line 11681
       HEAP32[$504 >> 2] = $118; //@line 11682
       $505 = $ReallocAsyncCtx5 + 240 | 0; //@line 11683
       HEAP32[$505 >> 2] = $120; //@line 11684
       $506 = $ReallocAsyncCtx5 + 244 | 0; //@line 11685
       HEAP32[$506 >> 2] = $122; //@line 11686
       $507 = $ReallocAsyncCtx5 + 248 | 0; //@line 11687
       HEAP32[$507 >> 2] = $124; //@line 11688
       $508 = $ReallocAsyncCtx5 + 252 | 0; //@line 11689
       HEAP32[$508 >> 2] = $161; //@line 11690
       $509 = $ReallocAsyncCtx5 + 256 | 0; //@line 11691
       HEAP32[$509 >> 2] = $128; //@line 11692
       $510 = $ReallocAsyncCtx5 + 260 | 0; //@line 11693
       HEAP32[$510 >> 2] = $130; //@line 11694
       $511 = $ReallocAsyncCtx5 + 264 | 0; //@line 11695
       HEAP32[$511 >> 2] = $132; //@line 11696
       $512 = $ReallocAsyncCtx5 + 268 | 0; //@line 11697
       HEAP32[$512 >> 2] = $134; //@line 11698
       $513 = $ReallocAsyncCtx5 + 272 | 0; //@line 11699
       HEAP32[$513 >> 2] = $136; //@line 11700
       sp = STACKTOP; //@line 11701
       return;
      }
     }
     _mbed_tracef(2, 3844, 4605, $62); //@line 11705
     break L2;
     break;
    }
   case 49:
    {
     $519 = HEAP32[$42 >> 2] | 0; //@line 11710
     $520 = $519 + 56 | 0; //@line 11711
     if (HEAP32[$520 >> 2] | 0) {
      _mbed_tracef(2, 3844, 4739, $34); //@line 11715
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 11719
     $524 = _sn_coap_parser_options_parse_multiple_options($116, $92, $179, $520, $519 + 6 | 0, 8, $$1202$i) | 0; //@line 11720
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 11723
      $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 11724
      HEAP32[$525 >> 2] = $2; //@line 11725
      $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 11726
      HEAP32[$526 >> 2] = $4; //@line 11727
      $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 11728
      HEAP32[$527 >> 2] = $8; //@line 11729
      $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 11730
      HEAP32[$528 >> 2] = $10; //@line 11731
      $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 11732
      HEAP32[$529 >> 2] = $16; //@line 11733
      $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 11734
      HEAP32[$530 >> 2] = $14; //@line 11735
      $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 11736
      HEAP32[$531 >> 2] = $136; //@line 11737
      $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 11738
      HEAP32[$532 >> 2] = $18; //@line 11739
      $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 11740
      HEAP32[$533 >> 2] = $22; //@line 11741
      $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 11742
      HEAP32[$534 >> 2] = $24; //@line 11743
      $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 11744
      HEAP32[$535 >> 2] = $26; //@line 11745
      $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 11746
      HEAP32[$536 >> 2] = $28; //@line 11747
      $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 11748
      HEAP32[$537 >> 2] = $30; //@line 11749
      $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 11750
      HEAP32[$538 >> 2] = $32; //@line 11751
      $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 11752
      HEAP32[$539 >> 2] = $34; //@line 11753
      $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 11754
      HEAP32[$540 >> 2] = $36; //@line 11755
      $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 11756
      HEAP32[$541 >> 2] = $38; //@line 11757
      $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 11758
      HEAP32[$542 >> 2] = $40; //@line 11759
      $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 11760
      HEAP32[$543 >> 2] = $42; //@line 11761
      $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 11762
      HEAP32[$544 >> 2] = $44; //@line 11763
      $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 11764
      HEAP32[$545 >> 2] = $46; //@line 11765
      $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 11766
      HEAP32[$546 >> 2] = $48; //@line 11767
      $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 11768
      HEAP32[$547 >> 2] = $50; //@line 11769
      $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 11770
      HEAP32[$548 >> 2] = $52; //@line 11771
      $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 11772
      HEAP32[$549 >> 2] = $54; //@line 11773
      $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 11774
      HEAP32[$550 >> 2] = $56; //@line 11775
      $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 11776
      HEAP32[$551 >> 2] = $58; //@line 11777
      $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 11778
      HEAP32[$552 >> 2] = $60; //@line 11779
      $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 11780
      HEAP32[$553 >> 2] = $62; //@line 11781
      $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 11782
      HEAP32[$554 >> 2] = $64; //@line 11783
      $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 11784
      HEAP32[$555 >> 2] = $66; //@line 11785
      $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 11786
      HEAP32[$556 >> 2] = $68; //@line 11787
      $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 11788
      HEAP32[$557 >> 2] = $70; //@line 11789
      $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 11790
      HEAP32[$558 >> 2] = $72; //@line 11791
      $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 11792
      HEAP32[$559 >> 2] = $74; //@line 11793
      $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 11794
      HEAP32[$560 >> 2] = $76; //@line 11795
      $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 11796
      HEAP32[$561 >> 2] = $78; //@line 11797
      $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 11798
      HEAP32[$562 >> 2] = $80; //@line 11799
      $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 11800
      HEAP32[$563 >> 2] = $82; //@line 11801
      $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 11802
      HEAP32[$564 >> 2] = $84; //@line 11803
      $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 11804
      HEAP32[$565 >> 2] = $86; //@line 11805
      $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 11806
      HEAP32[$566 >> 2] = $88; //@line 11807
      $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 11808
      HEAP32[$567 >> 2] = $90; //@line 11809
      $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 11810
      HEAP32[$568 >> 2] = $92; //@line 11811
      $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 11812
      HEAP32[$569 >> 2] = $94; //@line 11813
      $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 11814
      HEAP32[$570 >> 2] = $96; //@line 11815
      $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 11816
      HEAP32[$571 >> 2] = $98; //@line 11817
      $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 11818
      HEAP32[$572 >> 2] = $100; //@line 11819
      $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 11820
      HEAP32[$573 >> 2] = $102; //@line 11821
      $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 11822
      HEAP32[$574 >> 2] = $104; //@line 11823
      $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 11824
      HEAP32[$575 >> 2] = $106; //@line 11825
      $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 11826
      HEAP32[$576 >> 2] = $108; //@line 11827
      $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 11828
      HEAP32[$577 >> 2] = $110; //@line 11829
      $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 11830
      HEAP32[$578 >> 2] = $112; //@line 11831
      $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 11832
      HEAP32[$579 >> 2] = $114; //@line 11833
      $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 11834
      HEAP32[$580 >> 2] = $116; //@line 11835
      $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 11836
      HEAP32[$581 >> 2] = $118; //@line 11837
      $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 11838
      HEAP32[$582 >> 2] = $120; //@line 11839
      $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 11840
      HEAP32[$583 >> 2] = $122; //@line 11841
      $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 11842
      HEAP32[$584 >> 2] = $124; //@line 11843
      $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 11844
      HEAP32[$585 >> 2] = $161; //@line 11845
      $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 11846
      HEAP32[$586 >> 2] = $128; //@line 11847
      $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 11848
      HEAP32[$587 >> 2] = $130; //@line 11849
      $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 11850
      HEAP32[$588 >> 2] = $132; //@line 11851
      $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 11852
      HEAP32[$589 >> 2] = $134; //@line 11853
      $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 11854
      HEAP32[$590 >> 2] = $12; //@line 11855
      sp = STACKTOP; //@line 11856
      return;
     }
     HEAP8[___async_retval >> 0] = $524; //@line 11860
     ___async_unwind = 0; //@line 11861
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 11862
     $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 11863
     HEAP32[$525 >> 2] = $2; //@line 11864
     $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 11865
     HEAP32[$526 >> 2] = $4; //@line 11866
     $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 11867
     HEAP32[$527 >> 2] = $8; //@line 11868
     $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 11869
     HEAP32[$528 >> 2] = $10; //@line 11870
     $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 11871
     HEAP32[$529 >> 2] = $16; //@line 11872
     $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 11873
     HEAP32[$530 >> 2] = $14; //@line 11874
     $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 11875
     HEAP32[$531 >> 2] = $136; //@line 11876
     $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 11877
     HEAP32[$532 >> 2] = $18; //@line 11878
     $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 11879
     HEAP32[$533 >> 2] = $22; //@line 11880
     $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 11881
     HEAP32[$534 >> 2] = $24; //@line 11882
     $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 11883
     HEAP32[$535 >> 2] = $26; //@line 11884
     $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 11885
     HEAP32[$536 >> 2] = $28; //@line 11886
     $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 11887
     HEAP32[$537 >> 2] = $30; //@line 11888
     $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 11889
     HEAP32[$538 >> 2] = $32; //@line 11890
     $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 11891
     HEAP32[$539 >> 2] = $34; //@line 11892
     $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 11893
     HEAP32[$540 >> 2] = $36; //@line 11894
     $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 11895
     HEAP32[$541 >> 2] = $38; //@line 11896
     $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 11897
     HEAP32[$542 >> 2] = $40; //@line 11898
     $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 11899
     HEAP32[$543 >> 2] = $42; //@line 11900
     $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 11901
     HEAP32[$544 >> 2] = $44; //@line 11902
     $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 11903
     HEAP32[$545 >> 2] = $46; //@line 11904
     $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 11905
     HEAP32[$546 >> 2] = $48; //@line 11906
     $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 11907
     HEAP32[$547 >> 2] = $50; //@line 11908
     $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 11909
     HEAP32[$548 >> 2] = $52; //@line 11910
     $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 11911
     HEAP32[$549 >> 2] = $54; //@line 11912
     $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 11913
     HEAP32[$550 >> 2] = $56; //@line 11914
     $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 11915
     HEAP32[$551 >> 2] = $58; //@line 11916
     $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 11917
     HEAP32[$552 >> 2] = $60; //@line 11918
     $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 11919
     HEAP32[$553 >> 2] = $62; //@line 11920
     $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 11921
     HEAP32[$554 >> 2] = $64; //@line 11922
     $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 11923
     HEAP32[$555 >> 2] = $66; //@line 11924
     $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 11925
     HEAP32[$556 >> 2] = $68; //@line 11926
     $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 11927
     HEAP32[$557 >> 2] = $70; //@line 11928
     $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 11929
     HEAP32[$558 >> 2] = $72; //@line 11930
     $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 11931
     HEAP32[$559 >> 2] = $74; //@line 11932
     $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 11933
     HEAP32[$560 >> 2] = $76; //@line 11934
     $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 11935
     HEAP32[$561 >> 2] = $78; //@line 11936
     $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 11937
     HEAP32[$562 >> 2] = $80; //@line 11938
     $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 11939
     HEAP32[$563 >> 2] = $82; //@line 11940
     $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 11941
     HEAP32[$564 >> 2] = $84; //@line 11942
     $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 11943
     HEAP32[$565 >> 2] = $86; //@line 11944
     $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 11945
     HEAP32[$566 >> 2] = $88; //@line 11946
     $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 11947
     HEAP32[$567 >> 2] = $90; //@line 11948
     $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 11949
     HEAP32[$568 >> 2] = $92; //@line 11950
     $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 11951
     HEAP32[$569 >> 2] = $94; //@line 11952
     $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 11953
     HEAP32[$570 >> 2] = $96; //@line 11954
     $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 11955
     HEAP32[$571 >> 2] = $98; //@line 11956
     $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 11957
     HEAP32[$572 >> 2] = $100; //@line 11958
     $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 11959
     HEAP32[$573 >> 2] = $102; //@line 11960
     $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 11961
     HEAP32[$574 >> 2] = $104; //@line 11962
     $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 11963
     HEAP32[$575 >> 2] = $106; //@line 11964
     $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 11965
     HEAP32[$576 >> 2] = $108; //@line 11966
     $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 11967
     HEAP32[$577 >> 2] = $110; //@line 11968
     $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 11969
     HEAP32[$578 >> 2] = $112; //@line 11970
     $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 11971
     HEAP32[$579 >> 2] = $114; //@line 11972
     $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 11973
     HEAP32[$580 >> 2] = $116; //@line 11974
     $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 11975
     HEAP32[$581 >> 2] = $118; //@line 11976
     $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 11977
     HEAP32[$582 >> 2] = $120; //@line 11978
     $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 11979
     HEAP32[$583 >> 2] = $122; //@line 11980
     $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 11981
     HEAP32[$584 >> 2] = $124; //@line 11982
     $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 11983
     HEAP32[$585 >> 2] = $161; //@line 11984
     $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 11985
     HEAP32[$586 >> 2] = $128; //@line 11986
     $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 11987
     HEAP32[$587 >> 2] = $130; //@line 11988
     $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 11989
     HEAP32[$588 >> 2] = $132; //@line 11990
     $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 11991
     HEAP32[$589 >> 2] = $134; //@line 11992
     $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 11993
     HEAP32[$590 >> 2] = $12; //@line 11994
     sp = STACKTOP; //@line 11995
     return;
    }
   case 56:
    {
     _mbed_tracef(2, 3844, 4872, $130); //@line 12000
     break L2;
     break;
    }
   case 60:
    {
     $608 = HEAP32[$42 >> 2] | 0; //@line 12005
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 12008
     $611 = _sn_coap_parser_options_parse_multiple_options($116, $92, $179, $608 + 60 | 0, $608 + 8 | 0, 20, $$1202$i) | 0; //@line 12009
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 12012
      $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 12013
      HEAP32[$612 >> 2] = $2; //@line 12014
      $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 12015
      HEAP32[$613 >> 2] = $4; //@line 12016
      $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 12017
      HEAP32[$614 >> 2] = $8; //@line 12018
      $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 12019
      HEAP32[$615 >> 2] = $10; //@line 12020
      $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 12021
      HEAP32[$616 >> 2] = $16; //@line 12022
      $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 12023
      HEAP32[$617 >> 2] = $14; //@line 12024
      $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 12025
      HEAP32[$618 >> 2] = $136; //@line 12026
      $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 12027
      HEAP32[$619 >> 2] = $18; //@line 12028
      $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 12029
      HEAP32[$620 >> 2] = $22; //@line 12030
      $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 12031
      HEAP32[$621 >> 2] = $24; //@line 12032
      $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 12033
      HEAP32[$622 >> 2] = $26; //@line 12034
      $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 12035
      HEAP32[$623 >> 2] = $28; //@line 12036
      $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 12037
      HEAP32[$624 >> 2] = $30; //@line 12038
      $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 12039
      HEAP32[$625 >> 2] = $32; //@line 12040
      $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 12041
      HEAP32[$626 >> 2] = $34; //@line 12042
      $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 12043
      HEAP32[$627 >> 2] = $36; //@line 12044
      $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 12045
      HEAP32[$628 >> 2] = $38; //@line 12046
      $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 12047
      HEAP32[$629 >> 2] = $40; //@line 12048
      $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 12049
      HEAP32[$630 >> 2] = $42; //@line 12050
      $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 12051
      HEAP32[$631 >> 2] = $44; //@line 12052
      $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 12053
      HEAP32[$632 >> 2] = $46; //@line 12054
      $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 12055
      HEAP32[$633 >> 2] = $48; //@line 12056
      $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 12057
      HEAP32[$634 >> 2] = $50; //@line 12058
      $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 12059
      HEAP32[$635 >> 2] = $52; //@line 12060
      $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 12061
      HEAP32[$636 >> 2] = $54; //@line 12062
      $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 12063
      HEAP32[$637 >> 2] = $56; //@line 12064
      $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 12065
      HEAP32[$638 >> 2] = $58; //@line 12066
      $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 12067
      HEAP32[$639 >> 2] = $60; //@line 12068
      $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 12069
      HEAP32[$640 >> 2] = $62; //@line 12070
      $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 12071
      HEAP32[$641 >> 2] = $64; //@line 12072
      $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 12073
      HEAP32[$642 >> 2] = $66; //@line 12074
      $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 12075
      HEAP32[$643 >> 2] = $68; //@line 12076
      $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 12077
      HEAP32[$644 >> 2] = $70; //@line 12078
      $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 12079
      HEAP32[$645 >> 2] = $72; //@line 12080
      $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 12081
      HEAP32[$646 >> 2] = $74; //@line 12082
      $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 12083
      HEAP32[$647 >> 2] = $76; //@line 12084
      $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 12085
      HEAP32[$648 >> 2] = $78; //@line 12086
      $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 12087
      HEAP32[$649 >> 2] = $80; //@line 12088
      $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 12089
      HEAP32[$650 >> 2] = $82; //@line 12090
      $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 12091
      HEAP32[$651 >> 2] = $84; //@line 12092
      $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 12093
      HEAP32[$652 >> 2] = $86; //@line 12094
      $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 12095
      HEAP32[$653 >> 2] = $88; //@line 12096
      $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 12097
      HEAP32[$654 >> 2] = $90; //@line 12098
      $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 12099
      HEAP32[$655 >> 2] = $92; //@line 12100
      $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 12101
      HEAP32[$656 >> 2] = $94; //@line 12102
      $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 12103
      HEAP32[$657 >> 2] = $96; //@line 12104
      $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 12105
      HEAP32[$658 >> 2] = $98; //@line 12106
      $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 12107
      HEAP32[$659 >> 2] = $100; //@line 12108
      $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 12109
      HEAP32[$660 >> 2] = $102; //@line 12110
      $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 12111
      HEAP32[$661 >> 2] = $104; //@line 12112
      $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 12113
      HEAP32[$662 >> 2] = $106; //@line 12114
      $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 12115
      HEAP32[$663 >> 2] = $108; //@line 12116
      $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 12117
      HEAP32[$664 >> 2] = $110; //@line 12118
      $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 12119
      HEAP32[$665 >> 2] = $112; //@line 12120
      $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 12121
      HEAP32[$666 >> 2] = $114; //@line 12122
      $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 12123
      HEAP32[$667 >> 2] = $116; //@line 12124
      $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 12125
      HEAP32[$668 >> 2] = $118; //@line 12126
      $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 12127
      HEAP32[$669 >> 2] = $120; //@line 12128
      $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 12129
      HEAP32[$670 >> 2] = $122; //@line 12130
      $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 12131
      HEAP32[$671 >> 2] = $124; //@line 12132
      $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 12133
      HEAP32[$672 >> 2] = $161; //@line 12134
      $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 12135
      HEAP32[$673 >> 2] = $128; //@line 12136
      $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 12137
      HEAP32[$674 >> 2] = $130; //@line 12138
      $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 12139
      HEAP32[$675 >> 2] = $132; //@line 12140
      $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 12141
      HEAP32[$676 >> 2] = $134; //@line 12142
      $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 12143
      HEAP32[$677 >> 2] = $12; //@line 12144
      sp = STACKTOP; //@line 12145
      return;
     }
     HEAP8[___async_retval >> 0] = $611; //@line 12149
     ___async_unwind = 0; //@line 12150
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 12151
     $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 12152
     HEAP32[$612 >> 2] = $2; //@line 12153
     $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 12154
     HEAP32[$613 >> 2] = $4; //@line 12155
     $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 12156
     HEAP32[$614 >> 2] = $8; //@line 12157
     $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 12158
     HEAP32[$615 >> 2] = $10; //@line 12159
     $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 12160
     HEAP32[$616 >> 2] = $16; //@line 12161
     $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 12162
     HEAP32[$617 >> 2] = $14; //@line 12163
     $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 12164
     HEAP32[$618 >> 2] = $136; //@line 12165
     $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 12166
     HEAP32[$619 >> 2] = $18; //@line 12167
     $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 12168
     HEAP32[$620 >> 2] = $22; //@line 12169
     $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 12170
     HEAP32[$621 >> 2] = $24; //@line 12171
     $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 12172
     HEAP32[$622 >> 2] = $26; //@line 12173
     $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 12174
     HEAP32[$623 >> 2] = $28; //@line 12175
     $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 12176
     HEAP32[$624 >> 2] = $30; //@line 12177
     $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 12178
     HEAP32[$625 >> 2] = $32; //@line 12179
     $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 12180
     HEAP32[$626 >> 2] = $34; //@line 12181
     $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 12182
     HEAP32[$627 >> 2] = $36; //@line 12183
     $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 12184
     HEAP32[$628 >> 2] = $38; //@line 12185
     $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 12186
     HEAP32[$629 >> 2] = $40; //@line 12187
     $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 12188
     HEAP32[$630 >> 2] = $42; //@line 12189
     $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 12190
     HEAP32[$631 >> 2] = $44; //@line 12191
     $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 12192
     HEAP32[$632 >> 2] = $46; //@line 12193
     $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 12194
     HEAP32[$633 >> 2] = $48; //@line 12195
     $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 12196
     HEAP32[$634 >> 2] = $50; //@line 12197
     $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 12198
     HEAP32[$635 >> 2] = $52; //@line 12199
     $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 12200
     HEAP32[$636 >> 2] = $54; //@line 12201
     $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 12202
     HEAP32[$637 >> 2] = $56; //@line 12203
     $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 12204
     HEAP32[$638 >> 2] = $58; //@line 12205
     $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 12206
     HEAP32[$639 >> 2] = $60; //@line 12207
     $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 12208
     HEAP32[$640 >> 2] = $62; //@line 12209
     $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 12210
     HEAP32[$641 >> 2] = $64; //@line 12211
     $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 12212
     HEAP32[$642 >> 2] = $66; //@line 12213
     $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 12214
     HEAP32[$643 >> 2] = $68; //@line 12215
     $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 12216
     HEAP32[$644 >> 2] = $70; //@line 12217
     $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 12218
     HEAP32[$645 >> 2] = $72; //@line 12219
     $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 12220
     HEAP32[$646 >> 2] = $74; //@line 12221
     $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 12222
     HEAP32[$647 >> 2] = $76; //@line 12223
     $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 12224
     HEAP32[$648 >> 2] = $78; //@line 12225
     $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 12226
     HEAP32[$649 >> 2] = $80; //@line 12227
     $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 12228
     HEAP32[$650 >> 2] = $82; //@line 12229
     $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 12230
     HEAP32[$651 >> 2] = $84; //@line 12231
     $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 12232
     HEAP32[$652 >> 2] = $86; //@line 12233
     $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 12234
     HEAP32[$653 >> 2] = $88; //@line 12235
     $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 12236
     HEAP32[$654 >> 2] = $90; //@line 12237
     $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 12238
     HEAP32[$655 >> 2] = $92; //@line 12239
     $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 12240
     HEAP32[$656 >> 2] = $94; //@line 12241
     $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 12242
     HEAP32[$657 >> 2] = $96; //@line 12243
     $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 12244
     HEAP32[$658 >> 2] = $98; //@line 12245
     $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 12246
     HEAP32[$659 >> 2] = $100; //@line 12247
     $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 12248
     HEAP32[$660 >> 2] = $102; //@line 12249
     $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 12250
     HEAP32[$661 >> 2] = $104; //@line 12251
     $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 12252
     HEAP32[$662 >> 2] = $106; //@line 12253
     $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 12254
     HEAP32[$663 >> 2] = $108; //@line 12255
     $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 12256
     HEAP32[$664 >> 2] = $110; //@line 12257
     $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 12258
     HEAP32[$665 >> 2] = $112; //@line 12259
     $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 12260
     HEAP32[$666 >> 2] = $114; //@line 12261
     $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 12262
     HEAP32[$667 >> 2] = $116; //@line 12263
     $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 12264
     HEAP32[$668 >> 2] = $118; //@line 12265
     $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 12266
     HEAP32[$669 >> 2] = $120; //@line 12267
     $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 12268
     HEAP32[$670 >> 2] = $122; //@line 12269
     $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 12270
     HEAP32[$671 >> 2] = $124; //@line 12271
     $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 12272
     HEAP32[$672 >> 2] = $161; //@line 12273
     $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 12274
     HEAP32[$673 >> 2] = $128; //@line 12275
     $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 12276
     HEAP32[$674 >> 2] = $130; //@line 12277
     $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 12278
     HEAP32[$675 >> 2] = $132; //@line 12279
     $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 12280
     HEAP32[$676 >> 2] = $134; //@line 12281
     $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 12282
     HEAP32[$677 >> 2] = $12; //@line 12283
     sp = STACKTOP; //@line 12284
     return;
    }
   case 63:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 12289
     $679 = _sn_coap_parser_options_parse_multiple_options($116, $92, $179, $58, $84, 11, $$1202$i) | 0; //@line 12290
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 12293
      $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 12294
      HEAP32[$680 >> 2] = $2; //@line 12295
      $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 12296
      HEAP32[$681 >> 2] = $4; //@line 12297
      $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 12298
      HEAP32[$682 >> 2] = $8; //@line 12299
      $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 12300
      HEAP32[$683 >> 2] = $10; //@line 12301
      $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 12302
      HEAP32[$684 >> 2] = $16; //@line 12303
      $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 12304
      HEAP32[$685 >> 2] = $14; //@line 12305
      $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 12306
      HEAP32[$686 >> 2] = $136; //@line 12307
      $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 12308
      HEAP32[$687 >> 2] = $18; //@line 12309
      $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 12310
      HEAP32[$688 >> 2] = $22; //@line 12311
      $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 12312
      HEAP32[$689 >> 2] = $24; //@line 12313
      $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 12314
      HEAP32[$690 >> 2] = $26; //@line 12315
      $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 12316
      HEAP32[$691 >> 2] = $28; //@line 12317
      $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 12318
      HEAP32[$692 >> 2] = $30; //@line 12319
      $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 12320
      HEAP32[$693 >> 2] = $32; //@line 12321
      $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 12322
      HEAP32[$694 >> 2] = $34; //@line 12323
      $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 12324
      HEAP32[$695 >> 2] = $36; //@line 12325
      $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 12326
      HEAP32[$696 >> 2] = $38; //@line 12327
      $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 12328
      HEAP32[$697 >> 2] = $40; //@line 12329
      $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 12330
      HEAP32[$698 >> 2] = $42; //@line 12331
      $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 12332
      HEAP32[$699 >> 2] = $44; //@line 12333
      $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 12334
      HEAP32[$700 >> 2] = $46; //@line 12335
      $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 12336
      HEAP32[$701 >> 2] = $48; //@line 12337
      $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 12338
      HEAP32[$702 >> 2] = $50; //@line 12339
      $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 12340
      HEAP32[$703 >> 2] = $52; //@line 12341
      $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 12342
      HEAP32[$704 >> 2] = $54; //@line 12343
      $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 12344
      HEAP32[$705 >> 2] = $56; //@line 12345
      $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 12346
      HEAP32[$706 >> 2] = $58; //@line 12347
      $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 12348
      HEAP32[$707 >> 2] = $60; //@line 12349
      $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 12350
      HEAP32[$708 >> 2] = $62; //@line 12351
      $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 12352
      HEAP32[$709 >> 2] = $64; //@line 12353
      $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 12354
      HEAP32[$710 >> 2] = $66; //@line 12355
      $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 12356
      HEAP32[$711 >> 2] = $68; //@line 12357
      $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 12358
      HEAP32[$712 >> 2] = $70; //@line 12359
      $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 12360
      HEAP32[$713 >> 2] = $72; //@line 12361
      $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 12362
      HEAP32[$714 >> 2] = $74; //@line 12363
      $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 12364
      HEAP32[$715 >> 2] = $76; //@line 12365
      $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 12366
      HEAP32[$716 >> 2] = $78; //@line 12367
      $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 12368
      HEAP32[$717 >> 2] = $80; //@line 12369
      $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 12370
      HEAP32[$718 >> 2] = $82; //@line 12371
      $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 12372
      HEAP32[$719 >> 2] = $84; //@line 12373
      $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 12374
      HEAP32[$720 >> 2] = $86; //@line 12375
      $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 12376
      HEAP32[$721 >> 2] = $88; //@line 12377
      $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 12378
      HEAP32[$722 >> 2] = $90; //@line 12379
      $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 12380
      HEAP32[$723 >> 2] = $92; //@line 12381
      $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 12382
      HEAP32[$724 >> 2] = $94; //@line 12383
      $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 12384
      HEAP32[$725 >> 2] = $96; //@line 12385
      $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 12386
      HEAP32[$726 >> 2] = $98; //@line 12387
      $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 12388
      HEAP32[$727 >> 2] = $100; //@line 12389
      $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 12390
      HEAP32[$728 >> 2] = $102; //@line 12391
      $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 12392
      HEAP32[$729 >> 2] = $104; //@line 12393
      $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 12394
      HEAP32[$730 >> 2] = $106; //@line 12395
      $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 12396
      HEAP32[$731 >> 2] = $108; //@line 12397
      $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 12398
      HEAP32[$732 >> 2] = $110; //@line 12399
      $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 12400
      HEAP32[$733 >> 2] = $112; //@line 12401
      $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 12402
      HEAP32[$734 >> 2] = $114; //@line 12403
      $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 12404
      HEAP32[$735 >> 2] = $116; //@line 12405
      $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 12406
      HEAP32[$736 >> 2] = $118; //@line 12407
      $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 12408
      HEAP32[$737 >> 2] = $120; //@line 12409
      $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 12410
      HEAP32[$738 >> 2] = $122; //@line 12411
      $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 12412
      HEAP32[$739 >> 2] = $124; //@line 12413
      $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 12414
      HEAP32[$740 >> 2] = $161; //@line 12415
      $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 12416
      HEAP32[$741 >> 2] = $128; //@line 12417
      $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 12418
      HEAP32[$742 >> 2] = $130; //@line 12419
      $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 12420
      HEAP32[$743 >> 2] = $132; //@line 12421
      $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 12422
      HEAP32[$744 >> 2] = $134; //@line 12423
      $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 12424
      HEAP32[$745 >> 2] = $12; //@line 12425
      sp = STACKTOP; //@line 12426
      return;
     }
     HEAP8[___async_retval >> 0] = $679; //@line 12430
     ___async_unwind = 0; //@line 12431
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 12432
     $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 12433
     HEAP32[$680 >> 2] = $2; //@line 12434
     $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 12435
     HEAP32[$681 >> 2] = $4; //@line 12436
     $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 12437
     HEAP32[$682 >> 2] = $8; //@line 12438
     $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 12439
     HEAP32[$683 >> 2] = $10; //@line 12440
     $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 12441
     HEAP32[$684 >> 2] = $16; //@line 12442
     $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 12443
     HEAP32[$685 >> 2] = $14; //@line 12444
     $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 12445
     HEAP32[$686 >> 2] = $136; //@line 12446
     $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 12447
     HEAP32[$687 >> 2] = $18; //@line 12448
     $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 12449
     HEAP32[$688 >> 2] = $22; //@line 12450
     $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 12451
     HEAP32[$689 >> 2] = $24; //@line 12452
     $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 12453
     HEAP32[$690 >> 2] = $26; //@line 12454
     $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 12455
     HEAP32[$691 >> 2] = $28; //@line 12456
     $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 12457
     HEAP32[$692 >> 2] = $30; //@line 12458
     $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 12459
     HEAP32[$693 >> 2] = $32; //@line 12460
     $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 12461
     HEAP32[$694 >> 2] = $34; //@line 12462
     $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 12463
     HEAP32[$695 >> 2] = $36; //@line 12464
     $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 12465
     HEAP32[$696 >> 2] = $38; //@line 12466
     $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 12467
     HEAP32[$697 >> 2] = $40; //@line 12468
     $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 12469
     HEAP32[$698 >> 2] = $42; //@line 12470
     $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 12471
     HEAP32[$699 >> 2] = $44; //@line 12472
     $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 12473
     HEAP32[$700 >> 2] = $46; //@line 12474
     $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 12475
     HEAP32[$701 >> 2] = $48; //@line 12476
     $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 12477
     HEAP32[$702 >> 2] = $50; //@line 12478
     $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 12479
     HEAP32[$703 >> 2] = $52; //@line 12480
     $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 12481
     HEAP32[$704 >> 2] = $54; //@line 12482
     $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 12483
     HEAP32[$705 >> 2] = $56; //@line 12484
     $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 12485
     HEAP32[$706 >> 2] = $58; //@line 12486
     $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 12487
     HEAP32[$707 >> 2] = $60; //@line 12488
     $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 12489
     HEAP32[$708 >> 2] = $62; //@line 12490
     $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 12491
     HEAP32[$709 >> 2] = $64; //@line 12492
     $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 12493
     HEAP32[$710 >> 2] = $66; //@line 12494
     $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 12495
     HEAP32[$711 >> 2] = $68; //@line 12496
     $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 12497
     HEAP32[$712 >> 2] = $70; //@line 12498
     $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 12499
     HEAP32[$713 >> 2] = $72; //@line 12500
     $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 12501
     HEAP32[$714 >> 2] = $74; //@line 12502
     $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 12503
     HEAP32[$715 >> 2] = $76; //@line 12504
     $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 12505
     HEAP32[$716 >> 2] = $78; //@line 12506
     $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 12507
     HEAP32[$717 >> 2] = $80; //@line 12508
     $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 12509
     HEAP32[$718 >> 2] = $82; //@line 12510
     $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 12511
     HEAP32[$719 >> 2] = $84; //@line 12512
     $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 12513
     HEAP32[$720 >> 2] = $86; //@line 12514
     $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 12515
     HEAP32[$721 >> 2] = $88; //@line 12516
     $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 12517
     HEAP32[$722 >> 2] = $90; //@line 12518
     $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 12519
     HEAP32[$723 >> 2] = $92; //@line 12520
     $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 12521
     HEAP32[$724 >> 2] = $94; //@line 12522
     $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 12523
     HEAP32[$725 >> 2] = $96; //@line 12524
     $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 12525
     HEAP32[$726 >> 2] = $98; //@line 12526
     $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 12527
     HEAP32[$727 >> 2] = $100; //@line 12528
     $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 12529
     HEAP32[$728 >> 2] = $102; //@line 12530
     $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 12531
     HEAP32[$729 >> 2] = $104; //@line 12532
     $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 12533
     HEAP32[$730 >> 2] = $106; //@line 12534
     $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 12535
     HEAP32[$731 >> 2] = $108; //@line 12536
     $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 12537
     HEAP32[$732 >> 2] = $110; //@line 12538
     $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 12539
     HEAP32[$733 >> 2] = $112; //@line 12540
     $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 12541
     HEAP32[$734 >> 2] = $114; //@line 12542
     $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 12543
     HEAP32[$735 >> 2] = $116; //@line 12544
     $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 12545
     HEAP32[$736 >> 2] = $118; //@line 12546
     $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 12547
     HEAP32[$737 >> 2] = $120; //@line 12548
     $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 12549
     HEAP32[$738 >> 2] = $122; //@line 12550
     $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 12551
     HEAP32[$739 >> 2] = $124; //@line 12552
     $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 12553
     HEAP32[$740 >> 2] = $161; //@line 12554
     $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 12555
     HEAP32[$741 >> 2] = $128; //@line 12556
     $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 12557
     HEAP32[$742 >> 2] = $130; //@line 12558
     $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 12559
     HEAP32[$743 >> 2] = $132; //@line 12560
     $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 12561
     HEAP32[$744 >> 2] = $134; //@line 12562
     $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 12563
     HEAP32[$745 >> 2] = $12; //@line 12564
     sp = STACKTOP; //@line 12565
     return;
    }
   case 68:
    {
     _mbed_tracef(2, 3844, 5067, $72); //@line 12570
     break L2;
     break;
    }
   case 72:
    {
     $763 = HEAP32[$42 >> 2] | 0; //@line 12575
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 12578
     $766 = _sn_coap_parser_options_parse_multiple_options($116, $92, $179, $763 + 64 | 0, $763 + 10 | 0, 15, $$1202$i) | 0; //@line 12579
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 12582
      $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 12583
      HEAP32[$767 >> 2] = $2; //@line 12584
      $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 12585
      HEAP32[$768 >> 2] = $4; //@line 12586
      $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 12587
      HEAP32[$769 >> 2] = $8; //@line 12588
      $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 12589
      HEAP32[$770 >> 2] = $10; //@line 12590
      $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 12591
      HEAP32[$771 >> 2] = $16; //@line 12592
      $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 12593
      HEAP32[$772 >> 2] = $14; //@line 12594
      $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 12595
      HEAP32[$773 >> 2] = $136; //@line 12596
      $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 12597
      HEAP32[$774 >> 2] = $18; //@line 12598
      $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 12599
      HEAP32[$775 >> 2] = $22; //@line 12600
      $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 12601
      HEAP32[$776 >> 2] = $24; //@line 12602
      $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 12603
      HEAP32[$777 >> 2] = $26; //@line 12604
      $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 12605
      HEAP32[$778 >> 2] = $28; //@line 12606
      $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 12607
      HEAP32[$779 >> 2] = $30; //@line 12608
      $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 12609
      HEAP32[$780 >> 2] = $32; //@line 12610
      $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 12611
      HEAP32[$781 >> 2] = $34; //@line 12612
      $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 12613
      HEAP32[$782 >> 2] = $36; //@line 12614
      $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 12615
      HEAP32[$783 >> 2] = $38; //@line 12616
      $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 12617
      HEAP32[$784 >> 2] = $40; //@line 12618
      $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 12619
      HEAP32[$785 >> 2] = $42; //@line 12620
      $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 12621
      HEAP32[$786 >> 2] = $44; //@line 12622
      $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 12623
      HEAP32[$787 >> 2] = $46; //@line 12624
      $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 12625
      HEAP32[$788 >> 2] = $48; //@line 12626
      $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 12627
      HEAP32[$789 >> 2] = $50; //@line 12628
      $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 12629
      HEAP32[$790 >> 2] = $52; //@line 12630
      $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 12631
      HEAP32[$791 >> 2] = $54; //@line 12632
      $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 12633
      HEAP32[$792 >> 2] = $56; //@line 12634
      $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 12635
      HEAP32[$793 >> 2] = $58; //@line 12636
      $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 12637
      HEAP32[$794 >> 2] = $60; //@line 12638
      $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 12639
      HEAP32[$795 >> 2] = $62; //@line 12640
      $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 12641
      HEAP32[$796 >> 2] = $64; //@line 12642
      $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 12643
      HEAP32[$797 >> 2] = $66; //@line 12644
      $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 12645
      HEAP32[$798 >> 2] = $68; //@line 12646
      $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 12647
      HEAP32[$799 >> 2] = $70; //@line 12648
      $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 12649
      HEAP32[$800 >> 2] = $72; //@line 12650
      $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 12651
      HEAP32[$801 >> 2] = $74; //@line 12652
      $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 12653
      HEAP32[$802 >> 2] = $76; //@line 12654
      $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 12655
      HEAP32[$803 >> 2] = $78; //@line 12656
      $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 12657
      HEAP32[$804 >> 2] = $80; //@line 12658
      $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 12659
      HEAP32[$805 >> 2] = $82; //@line 12660
      $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 12661
      HEAP32[$806 >> 2] = $84; //@line 12662
      $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 12663
      HEAP32[$807 >> 2] = $86; //@line 12664
      $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 12665
      HEAP32[$808 >> 2] = $88; //@line 12666
      $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 12667
      HEAP32[$809 >> 2] = $90; //@line 12668
      $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 12669
      HEAP32[$810 >> 2] = $92; //@line 12670
      $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 12671
      HEAP32[$811 >> 2] = $94; //@line 12672
      $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 12673
      HEAP32[$812 >> 2] = $96; //@line 12674
      $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 12675
      HEAP32[$813 >> 2] = $98; //@line 12676
      $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 12677
      HEAP32[$814 >> 2] = $100; //@line 12678
      $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 12679
      HEAP32[$815 >> 2] = $102; //@line 12680
      $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 12681
      HEAP32[$816 >> 2] = $104; //@line 12682
      $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 12683
      HEAP32[$817 >> 2] = $106; //@line 12684
      $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 12685
      HEAP32[$818 >> 2] = $108; //@line 12686
      $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 12687
      HEAP32[$819 >> 2] = $110; //@line 12688
      $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 12689
      HEAP32[$820 >> 2] = $112; //@line 12690
      $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 12691
      HEAP32[$821 >> 2] = $114; //@line 12692
      $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 12693
      HEAP32[$822 >> 2] = $116; //@line 12694
      $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 12695
      HEAP32[$823 >> 2] = $118; //@line 12696
      $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 12697
      HEAP32[$824 >> 2] = $120; //@line 12698
      $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 12699
      HEAP32[$825 >> 2] = $122; //@line 12700
      $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 12701
      HEAP32[$826 >> 2] = $124; //@line 12702
      $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 12703
      HEAP32[$827 >> 2] = $161; //@line 12704
      $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 12705
      HEAP32[$828 >> 2] = $128; //@line 12706
      $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 12707
      HEAP32[$829 >> 2] = $130; //@line 12708
      $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 12709
      HEAP32[$830 >> 2] = $132; //@line 12710
      $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 12711
      HEAP32[$831 >> 2] = $134; //@line 12712
      $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 12713
      HEAP32[$832 >> 2] = $12; //@line 12714
      sp = STACKTOP; //@line 12715
      return;
     }
     HEAP8[___async_retval >> 0] = $766; //@line 12719
     ___async_unwind = 0; //@line 12720
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 12721
     $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 12722
     HEAP32[$767 >> 2] = $2; //@line 12723
     $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 12724
     HEAP32[$768 >> 2] = $4; //@line 12725
     $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 12726
     HEAP32[$769 >> 2] = $8; //@line 12727
     $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 12728
     HEAP32[$770 >> 2] = $10; //@line 12729
     $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 12730
     HEAP32[$771 >> 2] = $16; //@line 12731
     $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 12732
     HEAP32[$772 >> 2] = $14; //@line 12733
     $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 12734
     HEAP32[$773 >> 2] = $136; //@line 12735
     $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 12736
     HEAP32[$774 >> 2] = $18; //@line 12737
     $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 12738
     HEAP32[$775 >> 2] = $22; //@line 12739
     $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 12740
     HEAP32[$776 >> 2] = $24; //@line 12741
     $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 12742
     HEAP32[$777 >> 2] = $26; //@line 12743
     $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 12744
     HEAP32[$778 >> 2] = $28; //@line 12745
     $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 12746
     HEAP32[$779 >> 2] = $30; //@line 12747
     $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 12748
     HEAP32[$780 >> 2] = $32; //@line 12749
     $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 12750
     HEAP32[$781 >> 2] = $34; //@line 12751
     $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 12752
     HEAP32[$782 >> 2] = $36; //@line 12753
     $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 12754
     HEAP32[$783 >> 2] = $38; //@line 12755
     $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 12756
     HEAP32[$784 >> 2] = $40; //@line 12757
     $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 12758
     HEAP32[$785 >> 2] = $42; //@line 12759
     $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 12760
     HEAP32[$786 >> 2] = $44; //@line 12761
     $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 12762
     HEAP32[$787 >> 2] = $46; //@line 12763
     $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 12764
     HEAP32[$788 >> 2] = $48; //@line 12765
     $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 12766
     HEAP32[$789 >> 2] = $50; //@line 12767
     $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 12768
     HEAP32[$790 >> 2] = $52; //@line 12769
     $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 12770
     HEAP32[$791 >> 2] = $54; //@line 12771
     $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 12772
     HEAP32[$792 >> 2] = $56; //@line 12773
     $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 12774
     HEAP32[$793 >> 2] = $58; //@line 12775
     $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 12776
     HEAP32[$794 >> 2] = $60; //@line 12777
     $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 12778
     HEAP32[$795 >> 2] = $62; //@line 12779
     $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 12780
     HEAP32[$796 >> 2] = $64; //@line 12781
     $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 12782
     HEAP32[$797 >> 2] = $66; //@line 12783
     $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 12784
     HEAP32[$798 >> 2] = $68; //@line 12785
     $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 12786
     HEAP32[$799 >> 2] = $70; //@line 12787
     $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 12788
     HEAP32[$800 >> 2] = $72; //@line 12789
     $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 12790
     HEAP32[$801 >> 2] = $74; //@line 12791
     $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 12792
     HEAP32[$802 >> 2] = $76; //@line 12793
     $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 12794
     HEAP32[$803 >> 2] = $78; //@line 12795
     $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 12796
     HEAP32[$804 >> 2] = $80; //@line 12797
     $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 12798
     HEAP32[$805 >> 2] = $82; //@line 12799
     $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 12800
     HEAP32[$806 >> 2] = $84; //@line 12801
     $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 12802
     HEAP32[$807 >> 2] = $86; //@line 12803
     $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 12804
     HEAP32[$808 >> 2] = $88; //@line 12805
     $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 12806
     HEAP32[$809 >> 2] = $90; //@line 12807
     $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 12808
     HEAP32[$810 >> 2] = $92; //@line 12809
     $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 12810
     HEAP32[$811 >> 2] = $94; //@line 12811
     $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 12812
     HEAP32[$812 >> 2] = $96; //@line 12813
     $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 12814
     HEAP32[$813 >> 2] = $98; //@line 12815
     $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 12816
     HEAP32[$814 >> 2] = $100; //@line 12817
     $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 12818
     HEAP32[$815 >> 2] = $102; //@line 12819
     $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 12820
     HEAP32[$816 >> 2] = $104; //@line 12821
     $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 12822
     HEAP32[$817 >> 2] = $106; //@line 12823
     $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 12824
     HEAP32[$818 >> 2] = $108; //@line 12825
     $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 12826
     HEAP32[$819 >> 2] = $110; //@line 12827
     $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 12828
     HEAP32[$820 >> 2] = $112; //@line 12829
     $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 12830
     HEAP32[$821 >> 2] = $114; //@line 12831
     $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 12832
     HEAP32[$822 >> 2] = $116; //@line 12833
     $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 12834
     HEAP32[$823 >> 2] = $118; //@line 12835
     $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 12836
     HEAP32[$824 >> 2] = $120; //@line 12837
     $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 12838
     HEAP32[$825 >> 2] = $122; //@line 12839
     $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 12840
     HEAP32[$826 >> 2] = $124; //@line 12841
     $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 12842
     HEAP32[$827 >> 2] = $161; //@line 12843
     $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 12844
     HEAP32[$828 >> 2] = $128; //@line 12845
     $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 12846
     HEAP32[$829 >> 2] = $130; //@line 12847
     $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 12848
     HEAP32[$830 >> 2] = $132; //@line 12849
     $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 12850
     HEAP32[$831 >> 2] = $134; //@line 12851
     $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 12852
     HEAP32[$832 >> 2] = $12; //@line 12853
     sp = STACKTOP; //@line 12854
     return;
    }
   case 77:
    {
     _mbed_tracef(2, 3844, 5193, $12); //@line 12859
     break L2;
     break;
    }
   case 83:
    {
     _mbed_tracef(2, 3844, 5254, $106); //@line 12864
     break L2;
     break;
    }
   case 89:
    {
     _mbed_tracef(2, 3844, 5315, $52); //@line 12869
     break L2;
     break;
    }
   case 95:
    {
     _mbed_tracef(2, 3844, 5376, $24); //@line 12874
     break L2;
     break;
    }
   case 101:
    {
     _mbed_tracef(2, 3844, 5436, $14); //@line 12879
     break L2;
     break;
    }
   case 105:
    {
     _mbed_tracef(2, 3844, 5496, $88); //@line 12884
     break L2;
     break;
    }
   case 108:
    {
     if (($141 - $8 | 0) >= ($18 | 0)) {
      $943 = ___async_retval; //@line 12893
      HEAP32[$943 >> 2] = $26; //@line 12894
      return;
     }
     if ((HEAP8[$141 >> 0] | 0) == -1) {
      $933 = $141 + 1 | 0; //@line 12900
      HEAP32[$92 >> 2] = $933; //@line 12901
      $934 = $933; //@line 12902
      $936 = $8 - $934 + $18 | 0; //@line 12904
      HEAP16[$76 + 24 >> 1] = $936; //@line 12907
      if ($936 & 65535 | 0) {
       HEAP32[$76 + 36 >> 2] = $934; //@line 12912
       $943 = ___async_retval; //@line 12913
       HEAP32[$943 >> 2] = $26; //@line 12914
       return;
      }
     } else {
      _mbed_tracef(2, 3844, 5543, $30); //@line 12918
     }
     HEAP32[$76 + 4 >> 2] = 1; //@line 12921
     $943 = ___async_retval; //@line 12922
     HEAP32[$943 >> 2] = $26; //@line 12923
     return;
    }
   }
  }
 } while (0);
 HEAP32[$76 + 4 >> 2] = 1; //@line 12931
 $943 = ___async_retval; //@line 12932
 HEAP32[$943 >> 2] = $26; //@line 12933
 return;
}
function _sn_coap_parser__async_cb_166($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $586 = 0, $589 = 0, $590 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $595$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 16206
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16208
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16210
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16212
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16214
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16216
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16218
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16220
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16222
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16224
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16226
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16228
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16230
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16232
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16234
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16236
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16238
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16240
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16242
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16244
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16246
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16248
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 16250
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16252
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16254
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16256
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 16258
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 16260
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 16262
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 16264
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 16266
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 16268
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 16270
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 16272
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 16274
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 16276
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 16278
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 16280
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 16282
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 16284
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 16286
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 16288
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 16290
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 16292
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 16294
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 16296
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 16298
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 16300
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 16302
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 16304
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 16306
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 16308
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 16310
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 16312
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 16314
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 16316
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 16318
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 16320
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 16322
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 16324
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 16326
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 16330
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 16332
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 16334
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 16336
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 16338
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 244 >> 2] | 0; //@line 16344
   L3 : while (1) {
    $917 = HEAP32[$114 >> 2] | 0; //@line 16346
    $918 = $917 - $6 | 0; //@line 16347
    $137 = $917; //@line 16350
    if (($918 | 0) > ($16 | 0)) {
     break L2;
    }
    if (!(($16 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 16357
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 16360
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 16363
     break;
    }
    $140 = $trunc277$i & 15; //@line 16367
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 16368
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 16373
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 16381
      $$sink214$i = 13; //@line 16381
      $$sink3$i = 1; //@line 16381
      label = 8; //@line 16382
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 16394
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 16394
      $$sink3$i = 2; //@line 16394
      label = 8; //@line 16395
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 16399
      $159 = $137; //@line 16399
      $937 = $917; //@line 16399
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 16403
     $154 = $137 + $$sink3$i | 0; //@line 16405
     HEAP32[$88 >> 2] = $154; //@line 16406
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 16408
     $159 = $154; //@line 16408
     $937 = $154; //@line 16408
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 16411
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 16415
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 16423
      $$sink216$i = 13; //@line 16423
      $$sink8$i = 1; //@line 16423
      label = 13; //@line 16424
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 16436
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 16436
      $$sink8$i = 2; //@line 16436
      label = 13; //@line 16437
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 16441
      $174 = $937; //@line 16441
      $241 = $159; //@line 16441
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 16445
     $171 = $159 + $$sink8$i | 0; //@line 16447
     HEAP32[$88 >> 2] = $171; //@line 16448
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 16450
     $174 = $171; //@line 16450
     $241 = $171; //@line 16450
    }
    $$1202$i = $$1202$in$i & 65535; //@line 16452
    $175 = $28 - $174 & 65535; //@line 16454
    $trunc$i = $157 & 65535; //@line 16455
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 60; //@line 16459
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$38 >> 2] | 0)) {
        label = 16; //@line 16467
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 16472
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 16477
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 16482
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 16487
         break L3;
         break;
        }
       case 20:
        {
         label = 57; //@line 16492
         break L3;
         break;
        }
       case 11:
        {
         label = 60; //@line 16497
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 16502
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 16513
          break L3;
         }
         $268 = $241 + 1 | 0; //@line 16516
         HEAP32[$88 >> 2] = $268; //@line 16517
         $269 = $$1202$in$i & 255; //@line 16518
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 16521
         } else {
          $$045$i221$i = $269; //@line 16523
          $$06$i220$i = 0; //@line 16523
          $274 = $268; //@line 16523
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 16525
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 16527
           HEAP32[$88 >> 2] = $274; //@line 16528
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 16531
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 16534
            break;
           } else {
            $$06$i220$i = $277; //@line 16537
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 16543
         $$reg2mem$0 = $157; //@line 16544
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 53; //@line 16551
          break L3;
         }
         $586 = (HEAP32[$38 >> 2] | 0) + 28 | 0; //@line 16555
         if ((HEAP32[$586 >> 2] | 0) != -1) {
          label = 53; //@line 16559
          break L3;
         }
         $589 = $241 + 1 | 0; //@line 16562
         HEAP32[$88 >> 2] = $589; //@line 16563
         $590 = $$1202$in$i & 255; //@line 16564
         if (!($590 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 16567
         } else {
          $$045$i263$i = $590; //@line 16569
          $$06$i262$i = 0; //@line 16569
          $595 = $589; //@line 16569
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 16571
           $595$looptemp = $595;
           $595 = $595 + 1 | 0; //@line 16573
           HEAP32[$88 >> 2] = $595; //@line 16574
           $598 = $$06$i262$i << 8 | HEAPU8[$595$looptemp >> 0]; //@line 16577
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $598; //@line 16580
            break;
           } else {
            $$06$i262$i = $598; //@line 16583
           }
          }
         }
         HEAP32[$586 >> 2] = $$0$lcssa$i265$i; //@line 16587
         $$reg2mem$0 = $157; //@line 16588
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 16595
          break L3;
         }
         $742 = (HEAP32[$38 >> 2] | 0) + 32 | 0; //@line 16599
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 16603
          break L3;
         }
         $745 = $241 + 1 | 0; //@line 16606
         HEAP32[$88 >> 2] = $745; //@line 16607
         $746 = $$1202$in$i & 255; //@line 16608
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 16611
         } else {
          $$045$i270$i = $746; //@line 16613
          $$06$i269$i = 0; //@line 16613
          $751 = $745; //@line 16613
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 16615
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 16617
           HEAP32[$88 >> 2] = $751; //@line 16618
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 16621
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 16624
            break;
           } else {
            $$06$i269$i = $754; //@line 16627
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 16631
         $$reg2mem$0 = $157; //@line 16632
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 16639
          break L3;
         }
         $829 = (HEAP32[$38 >> 2] | 0) + 40 | 0; //@line 16643
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 16647
          break L3;
         }
         $832 = $241 + 1 | 0; //@line 16650
         HEAP32[$88 >> 2] = $832; //@line 16651
         $833 = $$1202$in$i & 255; //@line 16652
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 16655
         } else {
          $$045$i256$i = $833; //@line 16657
          $$06$i255$i = 0; //@line 16657
          $838 = $832; //@line 16657
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 16659
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 16661
           HEAP32[$88 >> 2] = $838; //@line 16662
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 16665
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 16668
            break;
           } else {
            $$06$i255$i = $841; //@line 16671
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 16675
         $$reg2mem$0 = $157; //@line 16676
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 16683
          break L3;
         }
         $845 = (HEAP32[$38 >> 2] | 0) + 36 | 0; //@line 16687
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 16691
          break L3;
         }
         $848 = $241 + 1 | 0; //@line 16694
         HEAP32[$88 >> 2] = $848; //@line 16695
         $849 = $$1202$in$i & 255; //@line 16696
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 16699
         } else {
          $$045$i249$i = $849; //@line 16701
          $$06$i248$i = 0; //@line 16701
          $854 = $848; //@line 16701
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 16703
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 16705
           HEAP32[$88 >> 2] = $854; //@line 16706
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 16709
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 16712
            break;
           } else {
            $$06$i248$i = $857; //@line 16715
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 16719
         $$reg2mem$0 = $157; //@line 16720
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 16727
          break L3;
         }
         $861 = (HEAP32[$38 >> 2] | 0) + 12 | 0; //@line 16731
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 16735
          break L3;
         }
         $864 = $241 + 1 | 0; //@line 16738
         HEAP32[$88 >> 2] = $864; //@line 16739
         $865 = $$1202$in$i & 255; //@line 16740
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 16743
         } else {
          $$045$i242$i = $865; //@line 16745
          $$06$i241$i = 0; //@line 16745
          $870 = $864; //@line 16745
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 16747
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 16749
           HEAP32[$88 >> 2] = $870; //@line 16750
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 16753
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 16756
            break;
           } else {
            $$06$i241$i = $873; //@line 16759
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 16763
         $$reg2mem$0 = $157; //@line 16764
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 16771
          break L3;
         }
         $877 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 16775
         $878 = HEAP8[$877 >> 0] | 0; //@line 16776
         if ($878 & 1) {
          label = 94; //@line 16780
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 16784
         $883 = (HEAP32[$88 >> 2] | 0) + 1 | 0; //@line 16786
         HEAP32[$88 >> 2] = $883; //@line 16787
         $884 = $$1202$in$i & 255; //@line 16788
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 16791
         } else {
          $$045$i235$i = $884; //@line 16793
          $$06$i234$i = 0; //@line 16793
          $889 = $883; //@line 16793
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 16795
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 16797
           HEAP32[$88 >> 2] = $889; //@line 16798
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 16801
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 16804
            break;
           } else {
            $$06$i234$i = $892; //@line 16807
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 16813
         $$reg2mem$0 = $157; //@line 16814
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 16821
          break L3;
         }
         $898 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 16825
         $899 = HEAP8[$898 >> 0] | 0; //@line 16826
         if ($899 & 2) {
          label = 100; //@line 16830
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 16834
         $904 = (HEAP32[$88 >> 2] | 0) + 1 | 0; //@line 16836
         HEAP32[$88 >> 2] = $904; //@line 16837
         $905 = $$1202$in$i & 255; //@line 16838
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 16841
         } else {
          $$045$i228$i = $905; //@line 16843
          $$06$i227$i = 0; //@line 16843
          $910 = $904; //@line 16843
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 16845
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 16847
           HEAP32[$88 >> 2] = $910; //@line 16848
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 16851
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 16854
            break;
           } else {
            $$06$i227$i = $913; //@line 16857
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 16863
         $$reg2mem$0 = $157; //@line 16864
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 16869
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 16879
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 16886
     break;
    }
    if ((HEAP32[$120 >> 2] | 0) != -1) {
     label = 22; //@line 16892
     break;
    }
    $256 = $241 + 1 | 0; //@line 16895
    HEAP32[$88 >> 2] = $256; //@line 16896
    $257 = $$1202$in$i & 255; //@line 16897
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 16900
    } else {
     $$045$i$i = $257; //@line 16902
     $$06$i$i = 0; //@line 16902
     $262 = $256; //@line 16902
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 16904
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 16906
      HEAP32[$88 >> 2] = $262; //@line 16907
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 16910
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 16913
       break;
      } else {
       $$06$i$i = $265; //@line 16916
      }
     }
    }
    HEAP32[$120 >> 2] = $$0$lcssa$i$i; //@line 16920
    $$reg2mem$0 = $157; //@line 16921
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3844, 4107, $8); //@line 16925
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3844, 4165, $56); //@line 16930
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$40 >> 2] | 0; //@line 16935
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 16936
     $179 = FUNCTION_TABLE_ii[$178 & 31](68) | 0; //@line 16937
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 16940
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 16941
      HEAP32[$180 >> 2] = $2; //@line 16942
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 16943
      HEAP32[$181 >> 2] = $4; //@line 16944
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 16945
      HEAP32[$182 >> 2] = $6; //@line 16946
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 16947
      HEAP32[$183 >> 2] = $8; //@line 16948
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 16949
      HEAP32[$184 >> 2] = $132; //@line 16950
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 16951
      HEAP32[$185 >> 2] = $12; //@line 16952
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 16953
      HEAP16[$186 >> 1] = $trunc$i; //@line 16954
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 16955
      HEAP32[$187 >> 2] = $10; //@line 16956
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 16957
      HEAP32[$188 >> 2] = $16; //@line 16958
      $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 16959
      HEAP32[$189 >> 2] = $18; //@line 16960
      $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 16961
      HEAP32[$190 >> 2] = $20; //@line 16962
      $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 16963
      HEAP32[$191 >> 2] = $22; //@line 16964
      $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 16965
      HEAP32[$192 >> 2] = $24; //@line 16966
      $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 16967
      HEAP32[$193 >> 2] = $26; //@line 16968
      $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 16969
      HEAP32[$194 >> 2] = $28; //@line 16970
      $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 16971
      HEAP32[$195 >> 2] = $30; //@line 16972
      $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 16973
      HEAP32[$196 >> 2] = $32; //@line 16974
      $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 16975
      HEAP32[$197 >> 2] = $34; //@line 16976
      $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 16977
      HEAP32[$198 >> 2] = $36; //@line 16978
      $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 16979
      HEAP32[$199 >> 2] = $38; //@line 16980
      $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 16981
      HEAP32[$200 >> 2] = $40; //@line 16982
      $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 16983
      HEAP32[$201 >> 2] = $42; //@line 16984
      $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 16985
      HEAP32[$202 >> 2] = $44; //@line 16986
      $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 16987
      HEAP32[$203 >> 2] = $46; //@line 16988
      $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 16989
      HEAP32[$204 >> 2] = $48; //@line 16990
      $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 16991
      HEAP32[$205 >> 2] = $50; //@line 16992
      $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 16993
      HEAP32[$206 >> 2] = $52; //@line 16994
      $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 16995
      HEAP16[$207 >> 1] = $175; //@line 16996
      $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 16997
      HEAP32[$208 >> 2] = $54; //@line 16998
      $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 16999
      HEAP32[$209 >> 2] = $56; //@line 17000
      $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 17001
      HEAP32[$210 >> 2] = $58; //@line 17002
      $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 17003
      HEAP32[$211 >> 2] = $60; //@line 17004
      $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 17005
      HEAP32[$212 >> 2] = $62; //@line 17006
      $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 17007
      HEAP32[$213 >> 2] = $64; //@line 17008
      $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 17009
      HEAP32[$214 >> 2] = $66; //@line 17010
      $215 = $ReallocAsyncCtx3 + 144 | 0; //@line 17011
      HEAP32[$215 >> 2] = $68; //@line 17012
      $216 = $ReallocAsyncCtx3 + 148 | 0; //@line 17013
      HEAP32[$216 >> 2] = $70; //@line 17014
      $217 = $ReallocAsyncCtx3 + 152 | 0; //@line 17015
      HEAP32[$217 >> 2] = $72; //@line 17016
      $218 = $ReallocAsyncCtx3 + 156 | 0; //@line 17017
      HEAP32[$218 >> 2] = $74; //@line 17018
      $219 = $ReallocAsyncCtx3 + 160 | 0; //@line 17019
      HEAP32[$219 >> 2] = $76; //@line 17020
      $220 = $ReallocAsyncCtx3 + 164 | 0; //@line 17021
      HEAP32[$220 >> 2] = $78; //@line 17022
      $221 = $ReallocAsyncCtx3 + 168 | 0; //@line 17023
      HEAP32[$221 >> 2] = $80; //@line 17024
      $222 = $ReallocAsyncCtx3 + 172 | 0; //@line 17025
      HEAP32[$222 >> 2] = $82; //@line 17026
      $223 = $ReallocAsyncCtx3 + 176 | 0; //@line 17027
      HEAP32[$223 >> 2] = $$1202$in$i; //@line 17028
      $224 = $ReallocAsyncCtx3 + 180 | 0; //@line 17029
      HEAP32[$224 >> 2] = $84; //@line 17030
      $225 = $ReallocAsyncCtx3 + 184 | 0; //@line 17031
      HEAP32[$225 >> 2] = $86; //@line 17032
      $226 = $ReallocAsyncCtx3 + 188 | 0; //@line 17033
      HEAP32[$226 >> 2] = $88; //@line 17034
      $227 = $ReallocAsyncCtx3 + 192 | 0; //@line 17035
      HEAP32[$227 >> 2] = $90; //@line 17036
      $228 = $ReallocAsyncCtx3 + 196 | 0; //@line 17037
      HEAP16[$228 >> 1] = $$1202$i; //@line 17038
      $229 = $ReallocAsyncCtx3 + 200 | 0; //@line 17039
      HEAP32[$229 >> 2] = $92; //@line 17040
      $230 = $ReallocAsyncCtx3 + 204 | 0; //@line 17041
      HEAP32[$230 >> 2] = $96; //@line 17042
      $231 = $ReallocAsyncCtx3 + 208 | 0; //@line 17043
      HEAP32[$231 >> 2] = $98; //@line 17044
      $232 = $ReallocAsyncCtx3 + 212 | 0; //@line 17045
      HEAP32[$232 >> 2] = $94; //@line 17046
      $233 = $ReallocAsyncCtx3 + 216 | 0; //@line 17047
      HEAP32[$233 >> 2] = $102; //@line 17048
      $234 = $ReallocAsyncCtx3 + 220 | 0; //@line 17049
      HEAP32[$234 >> 2] = $100; //@line 17050
      $235 = $ReallocAsyncCtx3 + 224 | 0; //@line 17051
      HEAP32[$235 >> 2] = $104; //@line 17052
      $236 = $ReallocAsyncCtx3 + 228 | 0; //@line 17053
      HEAP32[$236 >> 2] = $106; //@line 17054
      $237 = $ReallocAsyncCtx3 + 232 | 0; //@line 17055
      HEAP32[$237 >> 2] = $108; //@line 17056
      $238 = $ReallocAsyncCtx3 + 236 | 0; //@line 17057
      HEAP32[$238 >> 2] = $110; //@line 17058
      $239 = $ReallocAsyncCtx3 + 240 | 0; //@line 17059
      HEAP32[$239 >> 2] = $112; //@line 17060
      $240 = $ReallocAsyncCtx3 + 244 | 0; //@line 17061
      HEAP32[$240 >> 2] = $241; //@line 17062
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 17063
      HEAP32[$242 >> 2] = $114; //@line 17064
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 17065
      HEAP32[$243 >> 2] = $116; //@line 17066
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 17067
      HEAP32[$244 >> 2] = $118; //@line 17068
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 17069
      HEAP32[$245 >> 2] = $120; //@line 17070
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 17071
      HEAP32[$246 >> 2] = $157; //@line 17072
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 17073
      HEAP32[$247 >> 2] = $124; //@line 17074
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 17075
      HEAP32[$248 >> 2] = $126; //@line 17076
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 17077
      HEAP32[$249 >> 2] = $128; //@line 17078
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 17079
      HEAP32[$250 >> 2] = $130; //@line 17080
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 17081
      HEAP32[$251 >> 2] = $14; //@line 17082
      sp = STACKTOP; //@line 17083
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 17087
     ___async_unwind = 0; //@line 17088
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 17089
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 17090
     HEAP32[$180 >> 2] = $2; //@line 17091
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 17092
     HEAP32[$181 >> 2] = $4; //@line 17093
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 17094
     HEAP32[$182 >> 2] = $6; //@line 17095
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 17096
     HEAP32[$183 >> 2] = $8; //@line 17097
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 17098
     HEAP32[$184 >> 2] = $132; //@line 17099
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 17100
     HEAP32[$185 >> 2] = $12; //@line 17101
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 17102
     HEAP16[$186 >> 1] = $trunc$i; //@line 17103
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 17104
     HEAP32[$187 >> 2] = $10; //@line 17105
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 17106
     HEAP32[$188 >> 2] = $16; //@line 17107
     $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 17108
     HEAP32[$189 >> 2] = $18; //@line 17109
     $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 17110
     HEAP32[$190 >> 2] = $20; //@line 17111
     $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 17112
     HEAP32[$191 >> 2] = $22; //@line 17113
     $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 17114
     HEAP32[$192 >> 2] = $24; //@line 17115
     $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 17116
     HEAP32[$193 >> 2] = $26; //@line 17117
     $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 17118
     HEAP32[$194 >> 2] = $28; //@line 17119
     $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 17120
     HEAP32[$195 >> 2] = $30; //@line 17121
     $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 17122
     HEAP32[$196 >> 2] = $32; //@line 17123
     $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 17124
     HEAP32[$197 >> 2] = $34; //@line 17125
     $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 17126
     HEAP32[$198 >> 2] = $36; //@line 17127
     $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 17128
     HEAP32[$199 >> 2] = $38; //@line 17129
     $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 17130
     HEAP32[$200 >> 2] = $40; //@line 17131
     $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 17132
     HEAP32[$201 >> 2] = $42; //@line 17133
     $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 17134
     HEAP32[$202 >> 2] = $44; //@line 17135
     $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 17136
     HEAP32[$203 >> 2] = $46; //@line 17137
     $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 17138
     HEAP32[$204 >> 2] = $48; //@line 17139
     $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 17140
     HEAP32[$205 >> 2] = $50; //@line 17141
     $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 17142
     HEAP32[$206 >> 2] = $52; //@line 17143
     $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 17144
     HEAP16[$207 >> 1] = $175; //@line 17145
     $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 17146
     HEAP32[$208 >> 2] = $54; //@line 17147
     $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 17148
     HEAP32[$209 >> 2] = $56; //@line 17149
     $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 17150
     HEAP32[$210 >> 2] = $58; //@line 17151
     $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 17152
     HEAP32[$211 >> 2] = $60; //@line 17153
     $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 17154
     HEAP32[$212 >> 2] = $62; //@line 17155
     $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 17156
     HEAP32[$213 >> 2] = $64; //@line 17157
     $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 17158
     HEAP32[$214 >> 2] = $66; //@line 17159
     $215 = $ReallocAsyncCtx3 + 144 | 0; //@line 17160
     HEAP32[$215 >> 2] = $68; //@line 17161
     $216 = $ReallocAsyncCtx3 + 148 | 0; //@line 17162
     HEAP32[$216 >> 2] = $70; //@line 17163
     $217 = $ReallocAsyncCtx3 + 152 | 0; //@line 17164
     HEAP32[$217 >> 2] = $72; //@line 17165
     $218 = $ReallocAsyncCtx3 + 156 | 0; //@line 17166
     HEAP32[$218 >> 2] = $74; //@line 17167
     $219 = $ReallocAsyncCtx3 + 160 | 0; //@line 17168
     HEAP32[$219 >> 2] = $76; //@line 17169
     $220 = $ReallocAsyncCtx3 + 164 | 0; //@line 17170
     HEAP32[$220 >> 2] = $78; //@line 17171
     $221 = $ReallocAsyncCtx3 + 168 | 0; //@line 17172
     HEAP32[$221 >> 2] = $80; //@line 17173
     $222 = $ReallocAsyncCtx3 + 172 | 0; //@line 17174
     HEAP32[$222 >> 2] = $82; //@line 17175
     $223 = $ReallocAsyncCtx3 + 176 | 0; //@line 17176
     HEAP32[$223 >> 2] = $$1202$in$i; //@line 17177
     $224 = $ReallocAsyncCtx3 + 180 | 0; //@line 17178
     HEAP32[$224 >> 2] = $84; //@line 17179
     $225 = $ReallocAsyncCtx3 + 184 | 0; //@line 17180
     HEAP32[$225 >> 2] = $86; //@line 17181
     $226 = $ReallocAsyncCtx3 + 188 | 0; //@line 17182
     HEAP32[$226 >> 2] = $88; //@line 17183
     $227 = $ReallocAsyncCtx3 + 192 | 0; //@line 17184
     HEAP32[$227 >> 2] = $90; //@line 17185
     $228 = $ReallocAsyncCtx3 + 196 | 0; //@line 17186
     HEAP16[$228 >> 1] = $$1202$i; //@line 17187
     $229 = $ReallocAsyncCtx3 + 200 | 0; //@line 17188
     HEAP32[$229 >> 2] = $92; //@line 17189
     $230 = $ReallocAsyncCtx3 + 204 | 0; //@line 17190
     HEAP32[$230 >> 2] = $96; //@line 17191
     $231 = $ReallocAsyncCtx3 + 208 | 0; //@line 17192
     HEAP32[$231 >> 2] = $98; //@line 17193
     $232 = $ReallocAsyncCtx3 + 212 | 0; //@line 17194
     HEAP32[$232 >> 2] = $94; //@line 17195
     $233 = $ReallocAsyncCtx3 + 216 | 0; //@line 17196
     HEAP32[$233 >> 2] = $102; //@line 17197
     $234 = $ReallocAsyncCtx3 + 220 | 0; //@line 17198
     HEAP32[$234 >> 2] = $100; //@line 17199
     $235 = $ReallocAsyncCtx3 + 224 | 0; //@line 17200
     HEAP32[$235 >> 2] = $104; //@line 17201
     $236 = $ReallocAsyncCtx3 + 228 | 0; //@line 17202
     HEAP32[$236 >> 2] = $106; //@line 17203
     $237 = $ReallocAsyncCtx3 + 232 | 0; //@line 17204
     HEAP32[$237 >> 2] = $108; //@line 17205
     $238 = $ReallocAsyncCtx3 + 236 | 0; //@line 17206
     HEAP32[$238 >> 2] = $110; //@line 17207
     $239 = $ReallocAsyncCtx3 + 240 | 0; //@line 17208
     HEAP32[$239 >> 2] = $112; //@line 17209
     $240 = $ReallocAsyncCtx3 + 244 | 0; //@line 17210
     HEAP32[$240 >> 2] = $241; //@line 17211
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 17212
     HEAP32[$242 >> 2] = $114; //@line 17213
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 17214
     HEAP32[$243 >> 2] = $116; //@line 17215
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 17216
     HEAP32[$244 >> 2] = $118; //@line 17217
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 17218
     HEAP32[$245 >> 2] = $120; //@line 17219
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 17220
     HEAP32[$246 >> 2] = $157; //@line 17221
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 17222
     HEAP32[$247 >> 2] = $124; //@line 17223
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 17224
     HEAP32[$248 >> 2] = $126; //@line 17225
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 17226
     HEAP32[$249 >> 2] = $128; //@line 17227
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 17228
     HEAP32[$250 >> 2] = $130; //@line 17229
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 17230
     HEAP32[$251 >> 2] = $14; //@line 17231
     sp = STACKTOP; //@line 17232
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3844, 4279, $86); //@line 17237
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3844, 4348, $4); //@line 17242
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 17247
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$38 >> 2] | 0; //@line 17251
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 17257
       $289 = $241 + 1 | 0; //@line 17258
       HEAP32[$88 >> 2] = $289; //@line 17259
       $290 = HEAP32[$40 >> 2] | 0; //@line 17260
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 17261
       $291 = FUNCTION_TABLE_ii[$290 & 31]($$1202$i) | 0; //@line 17262
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 17265
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 17266
        HEAP32[$292 >> 2] = $2; //@line 17267
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 17268
        HEAP32[$293 >> 2] = $4; //@line 17269
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 17270
        HEAP32[$294 >> 2] = $6; //@line 17271
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 17272
        HEAP32[$295 >> 2] = $8; //@line 17273
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 17274
        HEAP32[$296 >> 2] = $132; //@line 17275
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 17276
        HEAP32[$297 >> 2] = $12; //@line 17277
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 17278
        HEAP32[$298 >> 2] = $10; //@line 17279
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 17280
        HEAP32[$299 >> 2] = $16; //@line 17281
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 17282
        HEAP32[$300 >> 2] = $18; //@line 17283
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 17284
        HEAP32[$301 >> 2] = $20; //@line 17285
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 17286
        HEAP32[$302 >> 2] = $22; //@line 17287
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 17288
        HEAP32[$303 >> 2] = $24; //@line 17289
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 17290
        HEAP32[$304 >> 2] = $281; //@line 17291
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 17292
        HEAP32[$305 >> 2] = $26; //@line 17293
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 17294
        HEAP32[$306 >> 2] = $28; //@line 17295
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 17296
        HEAP32[$307 >> 2] = $30; //@line 17297
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 17298
        HEAP32[$308 >> 2] = $289; //@line 17299
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 17300
        HEAP32[$309 >> 2] = $32; //@line 17301
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 17302
        HEAP32[$310 >> 2] = $34; //@line 17303
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 17304
        HEAP32[$311 >> 2] = $36; //@line 17305
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 17306
        HEAP32[$312 >> 2] = $38; //@line 17307
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 17308
        HEAP32[$313 >> 2] = $40; //@line 17309
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 17310
        HEAP32[$314 >> 2] = $42; //@line 17311
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 17312
        HEAP32[$315 >> 2] = $44; //@line 17313
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 17314
        HEAP32[$316 >> 2] = $46; //@line 17315
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 17316
        HEAP32[$317 >> 2] = $48; //@line 17317
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 17318
        HEAP32[$318 >> 2] = $50; //@line 17319
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 17320
        HEAP32[$319 >> 2] = $52; //@line 17321
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 17322
        HEAP32[$320 >> 2] = $54; //@line 17323
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 17324
        HEAP32[$321 >> 2] = $56; //@line 17325
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 17326
        HEAP32[$322 >> 2] = $58; //@line 17327
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 17328
        HEAP32[$323 >> 2] = $60; //@line 17329
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 17330
        HEAP32[$324 >> 2] = $62; //@line 17331
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 17332
        HEAP32[$325 >> 2] = $64; //@line 17333
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 17334
        HEAP32[$326 >> 2] = $66; //@line 17335
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 17336
        HEAP32[$327 >> 2] = $68; //@line 17337
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 17338
        HEAP32[$328 >> 2] = $70; //@line 17339
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 17340
        HEAP32[$329 >> 2] = $72; //@line 17341
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 17342
        HEAP32[$330 >> 2] = $74; //@line 17343
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 17344
        HEAP32[$331 >> 2] = $76; //@line 17345
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 17346
        HEAP32[$332 >> 2] = $78; //@line 17347
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 17348
        HEAP32[$333 >> 2] = $80; //@line 17349
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 17350
        HEAP32[$334 >> 2] = $82; //@line 17351
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 17352
        HEAP32[$335 >> 2] = $84; //@line 17353
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 17354
        HEAP32[$336 >> 2] = $86; //@line 17355
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 17356
        HEAP32[$337 >> 2] = $88; //@line 17357
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 17358
        HEAP32[$338 >> 2] = $90; //@line 17359
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 17360
        HEAP32[$339 >> 2] = $92; //@line 17361
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 17362
        HEAP32[$340 >> 2] = $94; //@line 17363
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 17364
        HEAP32[$341 >> 2] = $96; //@line 17365
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 17366
        HEAP32[$342 >> 2] = $98; //@line 17367
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 17368
        HEAP32[$343 >> 2] = $100; //@line 17369
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 17370
        HEAP32[$344 >> 2] = $102; //@line 17371
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 17372
        HEAP32[$345 >> 2] = $104; //@line 17373
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 17374
        HEAP32[$346 >> 2] = $106; //@line 17375
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 17376
        HEAP32[$347 >> 2] = $108; //@line 17377
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 17378
        HEAP32[$348 >> 2] = $110; //@line 17379
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 17380
        HEAP32[$349 >> 2] = $112; //@line 17381
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 17382
        HEAP32[$350 >> 2] = $114; //@line 17383
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 17384
        HEAP32[$351 >> 2] = $116; //@line 17385
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 17386
        HEAP32[$352 >> 2] = $118; //@line 17387
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 17388
        HEAP32[$353 >> 2] = $120; //@line 17389
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 17390
        HEAP32[$354 >> 2] = $157; //@line 17391
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 17392
        HEAP32[$355 >> 2] = $124; //@line 17393
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 17394
        HEAP32[$356 >> 2] = $126; //@line 17395
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 17396
        HEAP32[$357 >> 2] = $128; //@line 17397
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 17398
        HEAP32[$358 >> 2] = $130; //@line 17399
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 17400
        HEAP32[$359 >> 2] = $14; //@line 17401
        sp = STACKTOP; //@line 17402
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 17406
       ___async_unwind = 0; //@line 17407
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 17408
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 17409
       HEAP32[$292 >> 2] = $2; //@line 17410
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 17411
       HEAP32[$293 >> 2] = $4; //@line 17412
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 17413
       HEAP32[$294 >> 2] = $6; //@line 17414
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 17415
       HEAP32[$295 >> 2] = $8; //@line 17416
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 17417
       HEAP32[$296 >> 2] = $132; //@line 17418
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 17419
       HEAP32[$297 >> 2] = $12; //@line 17420
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 17421
       HEAP32[$298 >> 2] = $10; //@line 17422
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 17423
       HEAP32[$299 >> 2] = $16; //@line 17424
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 17425
       HEAP32[$300 >> 2] = $18; //@line 17426
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 17427
       HEAP32[$301 >> 2] = $20; //@line 17428
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 17429
       HEAP32[$302 >> 2] = $22; //@line 17430
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 17431
       HEAP32[$303 >> 2] = $24; //@line 17432
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 17433
       HEAP32[$304 >> 2] = $281; //@line 17434
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 17435
       HEAP32[$305 >> 2] = $26; //@line 17436
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 17437
       HEAP32[$306 >> 2] = $28; //@line 17438
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 17439
       HEAP32[$307 >> 2] = $30; //@line 17440
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 17441
       HEAP32[$308 >> 2] = $289; //@line 17442
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 17443
       HEAP32[$309 >> 2] = $32; //@line 17444
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 17445
       HEAP32[$310 >> 2] = $34; //@line 17446
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 17447
       HEAP32[$311 >> 2] = $36; //@line 17448
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 17449
       HEAP32[$312 >> 2] = $38; //@line 17450
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 17451
       HEAP32[$313 >> 2] = $40; //@line 17452
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 17453
       HEAP32[$314 >> 2] = $42; //@line 17454
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 17455
       HEAP32[$315 >> 2] = $44; //@line 17456
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 17457
       HEAP32[$316 >> 2] = $46; //@line 17458
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 17459
       HEAP32[$317 >> 2] = $48; //@line 17460
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 17461
       HEAP32[$318 >> 2] = $50; //@line 17462
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 17463
       HEAP32[$319 >> 2] = $52; //@line 17464
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 17465
       HEAP32[$320 >> 2] = $54; //@line 17466
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 17467
       HEAP32[$321 >> 2] = $56; //@line 17468
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 17469
       HEAP32[$322 >> 2] = $58; //@line 17470
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 17471
       HEAP32[$323 >> 2] = $60; //@line 17472
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 17473
       HEAP32[$324 >> 2] = $62; //@line 17474
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 17475
       HEAP32[$325 >> 2] = $64; //@line 17476
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 17477
       HEAP32[$326 >> 2] = $66; //@line 17478
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 17479
       HEAP32[$327 >> 2] = $68; //@line 17480
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 17481
       HEAP32[$328 >> 2] = $70; //@line 17482
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 17483
       HEAP32[$329 >> 2] = $72; //@line 17484
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 17485
       HEAP32[$330 >> 2] = $74; //@line 17486
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 17487
       HEAP32[$331 >> 2] = $76; //@line 17488
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 17489
       HEAP32[$332 >> 2] = $78; //@line 17490
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 17491
       HEAP32[$333 >> 2] = $80; //@line 17492
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 17493
       HEAP32[$334 >> 2] = $82; //@line 17494
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 17495
       HEAP32[$335 >> 2] = $84; //@line 17496
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 17497
       HEAP32[$336 >> 2] = $86; //@line 17498
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 17499
       HEAP32[$337 >> 2] = $88; //@line 17500
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 17501
       HEAP32[$338 >> 2] = $90; //@line 17502
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 17503
       HEAP32[$339 >> 2] = $92; //@line 17504
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 17505
       HEAP32[$340 >> 2] = $94; //@line 17506
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 17507
       HEAP32[$341 >> 2] = $96; //@line 17508
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 17509
       HEAP32[$342 >> 2] = $98; //@line 17510
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 17511
       HEAP32[$343 >> 2] = $100; //@line 17512
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 17513
       HEAP32[$344 >> 2] = $102; //@line 17514
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 17515
       HEAP32[$345 >> 2] = $104; //@line 17516
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 17517
       HEAP32[$346 >> 2] = $106; //@line 17518
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 17519
       HEAP32[$347 >> 2] = $108; //@line 17520
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 17521
       HEAP32[$348 >> 2] = $110; //@line 17522
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 17523
       HEAP32[$349 >> 2] = $112; //@line 17524
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 17525
       HEAP32[$350 >> 2] = $114; //@line 17526
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 17527
       HEAP32[$351 >> 2] = $116; //@line 17528
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 17529
       HEAP32[$352 >> 2] = $118; //@line 17530
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 17531
       HEAP32[$353 >> 2] = $120; //@line 17532
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 17533
       HEAP32[$354 >> 2] = $157; //@line 17534
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 17535
       HEAP32[$355 >> 2] = $124; //@line 17536
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 17537
       HEAP32[$356 >> 2] = $126; //@line 17538
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 17539
       HEAP32[$357 >> 2] = $128; //@line 17540
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 17541
       HEAP32[$358 >> 2] = $130; //@line 17542
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 17543
       HEAP32[$359 >> 2] = $14; //@line 17544
       sp = STACKTOP; //@line 17545
       return;
      }
     }
     _mbed_tracef(2, 3844, 4410, $50); //@line 17549
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$38 >> 2] | 0; //@line 17554
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 17556
     $363 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 17557
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 17560
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 17561
      HEAP32[$364 >> 2] = $2; //@line 17562
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 17563
      HEAP32[$365 >> 2] = $4; //@line 17564
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 17565
      HEAP32[$366 >> 2] = $6; //@line 17566
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 17567
      HEAP32[$367 >> 2] = $8; //@line 17568
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 17569
      HEAP32[$368 >> 2] = $10; //@line 17570
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 17571
      HEAP32[$369 >> 2] = $12; //@line 17572
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 17573
      HEAP32[$370 >> 2] = $14; //@line 17574
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 17575
      HEAP32[$371 >> 2] = $16; //@line 17576
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 17577
      HEAP32[$372 >> 2] = $18; //@line 17578
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 17579
      HEAP32[$373 >> 2] = $20; //@line 17580
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 17581
      HEAP32[$374 >> 2] = $22; //@line 17582
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 17583
      HEAP32[$375 >> 2] = $24; //@line 17584
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 17585
      HEAP32[$376 >> 2] = $26; //@line 17586
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 17587
      HEAP32[$377 >> 2] = $28; //@line 17588
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 17589
      HEAP32[$378 >> 2] = $30; //@line 17590
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 17591
      HEAP32[$379 >> 2] = $32; //@line 17592
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 17593
      HEAP32[$380 >> 2] = $34; //@line 17594
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 17595
      HEAP32[$381 >> 2] = $36; //@line 17596
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 17597
      HEAP32[$382 >> 2] = $38; //@line 17598
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 17599
      HEAP32[$383 >> 2] = $40; //@line 17600
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 17601
      HEAP32[$384 >> 2] = $42; //@line 17602
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 17603
      HEAP32[$385 >> 2] = $44; //@line 17604
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 17605
      HEAP32[$386 >> 2] = $46; //@line 17606
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 17607
      HEAP32[$387 >> 2] = $48; //@line 17608
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 17609
      HEAP32[$388 >> 2] = $50; //@line 17610
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 17611
      HEAP32[$389 >> 2] = $52; //@line 17612
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 17613
      HEAP32[$390 >> 2] = $54; //@line 17614
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 17615
      HEAP32[$391 >> 2] = $56; //@line 17616
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 17617
      HEAP32[$392 >> 2] = $58; //@line 17618
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 17619
      HEAP32[$393 >> 2] = $60; //@line 17620
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 17621
      HEAP32[$394 >> 2] = $62; //@line 17622
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 17623
      HEAP32[$395 >> 2] = $64; //@line 17624
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 17625
      HEAP32[$396 >> 2] = $66; //@line 17626
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 17627
      HEAP32[$397 >> 2] = $68; //@line 17628
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 17629
      HEAP32[$398 >> 2] = $70; //@line 17630
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 17631
      HEAP32[$399 >> 2] = $72; //@line 17632
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 17633
      HEAP32[$400 >> 2] = $74; //@line 17634
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 17635
      HEAP32[$401 >> 2] = $76; //@line 17636
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 17637
      HEAP32[$402 >> 2] = $78; //@line 17638
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 17639
      HEAP32[$403 >> 2] = $80; //@line 17640
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 17641
      HEAP32[$404 >> 2] = $82; //@line 17642
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 17643
      HEAP32[$405 >> 2] = $84; //@line 17644
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 17645
      HEAP32[$406 >> 2] = $86; //@line 17646
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 17647
      HEAP32[$407 >> 2] = $88; //@line 17648
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 17649
      HEAP32[$408 >> 2] = $90; //@line 17650
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 17651
      HEAP32[$409 >> 2] = $92; //@line 17652
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 17653
      HEAP32[$410 >> 2] = $94; //@line 17654
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 17655
      HEAP32[$411 >> 2] = $96; //@line 17656
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 17657
      HEAP32[$412 >> 2] = $98; //@line 17658
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 17659
      HEAP32[$413 >> 2] = $100; //@line 17660
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 17661
      HEAP32[$414 >> 2] = $102; //@line 17662
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 17663
      HEAP32[$415 >> 2] = $104; //@line 17664
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 17665
      HEAP32[$416 >> 2] = $106; //@line 17666
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 17667
      HEAP32[$417 >> 2] = $108; //@line 17668
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 17669
      HEAP32[$418 >> 2] = $110; //@line 17670
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 17671
      HEAP32[$419 >> 2] = $112; //@line 17672
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 17673
      HEAP32[$420 >> 2] = $114; //@line 17674
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 17675
      HEAP32[$421 >> 2] = $116; //@line 17676
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 17677
      HEAP32[$422 >> 2] = $118; //@line 17678
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 17679
      HEAP32[$423 >> 2] = $120; //@line 17680
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 17681
      HEAP32[$424 >> 2] = $157; //@line 17682
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 17683
      HEAP32[$425 >> 2] = $124; //@line 17684
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 17685
      HEAP32[$426 >> 2] = $126; //@line 17686
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 17687
      HEAP32[$427 >> 2] = $128; //@line 17688
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 17689
      HEAP32[$428 >> 2] = $130; //@line 17690
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 17691
      HEAP32[$429 >> 2] = $132; //@line 17692
      sp = STACKTOP; //@line 17693
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 17697
     ___async_unwind = 0; //@line 17698
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 17699
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 17700
     HEAP32[$364 >> 2] = $2; //@line 17701
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 17702
     HEAP32[$365 >> 2] = $4; //@line 17703
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 17704
     HEAP32[$366 >> 2] = $6; //@line 17705
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 17706
     HEAP32[$367 >> 2] = $8; //@line 17707
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 17708
     HEAP32[$368 >> 2] = $10; //@line 17709
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 17710
     HEAP32[$369 >> 2] = $12; //@line 17711
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 17712
     HEAP32[$370 >> 2] = $14; //@line 17713
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 17714
     HEAP32[$371 >> 2] = $16; //@line 17715
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 17716
     HEAP32[$372 >> 2] = $18; //@line 17717
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 17718
     HEAP32[$373 >> 2] = $20; //@line 17719
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 17720
     HEAP32[$374 >> 2] = $22; //@line 17721
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 17722
     HEAP32[$375 >> 2] = $24; //@line 17723
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 17724
     HEAP32[$376 >> 2] = $26; //@line 17725
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 17726
     HEAP32[$377 >> 2] = $28; //@line 17727
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 17728
     HEAP32[$378 >> 2] = $30; //@line 17729
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 17730
     HEAP32[$379 >> 2] = $32; //@line 17731
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 17732
     HEAP32[$380 >> 2] = $34; //@line 17733
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 17734
     HEAP32[$381 >> 2] = $36; //@line 17735
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 17736
     HEAP32[$382 >> 2] = $38; //@line 17737
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 17738
     HEAP32[$383 >> 2] = $40; //@line 17739
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 17740
     HEAP32[$384 >> 2] = $42; //@line 17741
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 17742
     HEAP32[$385 >> 2] = $44; //@line 17743
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 17744
     HEAP32[$386 >> 2] = $46; //@line 17745
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 17746
     HEAP32[$387 >> 2] = $48; //@line 17747
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 17748
     HEAP32[$388 >> 2] = $50; //@line 17749
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 17750
     HEAP32[$389 >> 2] = $52; //@line 17751
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 17752
     HEAP32[$390 >> 2] = $54; //@line 17753
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 17754
     HEAP32[$391 >> 2] = $56; //@line 17755
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 17756
     HEAP32[$392 >> 2] = $58; //@line 17757
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 17758
     HEAP32[$393 >> 2] = $60; //@line 17759
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 17760
     HEAP32[$394 >> 2] = $62; //@line 17761
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 17762
     HEAP32[$395 >> 2] = $64; //@line 17763
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 17764
     HEAP32[$396 >> 2] = $66; //@line 17765
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 17766
     HEAP32[$397 >> 2] = $68; //@line 17767
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 17768
     HEAP32[$398 >> 2] = $70; //@line 17769
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 17770
     HEAP32[$399 >> 2] = $72; //@line 17771
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 17772
     HEAP32[$400 >> 2] = $74; //@line 17773
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 17774
     HEAP32[$401 >> 2] = $76; //@line 17775
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 17776
     HEAP32[$402 >> 2] = $78; //@line 17777
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 17778
     HEAP32[$403 >> 2] = $80; //@line 17779
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 17780
     HEAP32[$404 >> 2] = $82; //@line 17781
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 17782
     HEAP32[$405 >> 2] = $84; //@line 17783
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 17784
     HEAP32[$406 >> 2] = $86; //@line 17785
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 17786
     HEAP32[$407 >> 2] = $88; //@line 17787
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 17788
     HEAP32[$408 >> 2] = $90; //@line 17789
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 17790
     HEAP32[$409 >> 2] = $92; //@line 17791
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 17792
     HEAP32[$410 >> 2] = $94; //@line 17793
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 17794
     HEAP32[$411 >> 2] = $96; //@line 17795
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 17796
     HEAP32[$412 >> 2] = $98; //@line 17797
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 17798
     HEAP32[$413 >> 2] = $100; //@line 17799
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 17800
     HEAP32[$414 >> 2] = $102; //@line 17801
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 17802
     HEAP32[$415 >> 2] = $104; //@line 17803
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 17804
     HEAP32[$416 >> 2] = $106; //@line 17805
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 17806
     HEAP32[$417 >> 2] = $108; //@line 17807
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 17808
     HEAP32[$418 >> 2] = $110; //@line 17809
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 17810
     HEAP32[$419 >> 2] = $112; //@line 17811
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 17812
     HEAP32[$420 >> 2] = $114; //@line 17813
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 17814
     HEAP32[$421 >> 2] = $116; //@line 17815
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 17816
     HEAP32[$422 >> 2] = $118; //@line 17817
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 17818
     HEAP32[$423 >> 2] = $120; //@line 17819
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 17820
     HEAP32[$424 >> 2] = $157; //@line 17821
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 17822
     HEAP32[$425 >> 2] = $124; //@line 17823
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 17824
     HEAP32[$426 >> 2] = $126; //@line 17825
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 17826
     HEAP32[$427 >> 2] = $128; //@line 17827
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 17828
     HEAP32[$428 >> 2] = $130; //@line 17829
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 17830
     HEAP32[$429 >> 2] = $132; //@line 17831
     sp = STACKTOP; //@line 17832
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 17837
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$38 >> 2] | 0; //@line 17841
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 17847
       $439 = $241 + 1 | 0; //@line 17848
       HEAP32[$88 >> 2] = $439; //@line 17849
       $440 = HEAP32[$40 >> 2] | 0; //@line 17850
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 17851
       $441 = FUNCTION_TABLE_ii[$440 & 31]($$1202$i) | 0; //@line 17852
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 17855
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 17856
        HEAP32[$442 >> 2] = $2; //@line 17857
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 17858
        HEAP32[$443 >> 2] = $4; //@line 17859
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 17860
        HEAP32[$444 >> 2] = $431; //@line 17861
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 17862
        HEAP32[$445 >> 2] = $6; //@line 17863
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 17864
        HEAP32[$446 >> 2] = $8; //@line 17865
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 17866
        HEAP32[$447 >> 2] = $132; //@line 17867
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 17868
        HEAP32[$448 >> 2] = $12; //@line 17869
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 17870
        HEAP32[$449 >> 2] = $10; //@line 17871
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 17872
        HEAP32[$450 >> 2] = $16; //@line 17873
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 17874
        HEAP32[$451 >> 2] = $439; //@line 17875
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 17876
        HEAP32[$452 >> 2] = $18; //@line 17877
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 17878
        HEAP32[$453 >> 2] = $20; //@line 17879
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 17880
        HEAP32[$454 >> 2] = $22; //@line 17881
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 17882
        HEAP32[$455 >> 2] = $24; //@line 17883
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 17884
        HEAP32[$456 >> 2] = $26; //@line 17885
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 17886
        HEAP32[$457 >> 2] = $28; //@line 17887
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 17888
        HEAP32[$458 >> 2] = $30; //@line 17889
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 17890
        HEAP32[$459 >> 2] = $32; //@line 17891
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 17892
        HEAP32[$460 >> 2] = $34; //@line 17893
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 17894
        HEAP32[$461 >> 2] = $36; //@line 17895
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 17896
        HEAP32[$462 >> 2] = $38; //@line 17897
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 17898
        HEAP32[$463 >> 2] = $40; //@line 17899
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 17900
        HEAP32[$464 >> 2] = $42; //@line 17901
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 17902
        HEAP32[$465 >> 2] = $44; //@line 17903
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 17904
        HEAP32[$466 >> 2] = $46; //@line 17905
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 17906
        HEAP32[$467 >> 2] = $48; //@line 17907
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 17908
        HEAP32[$468 >> 2] = $50; //@line 17909
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 17910
        HEAP32[$469 >> 2] = $52; //@line 17911
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 17912
        HEAP32[$470 >> 2] = $54; //@line 17913
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 17914
        HEAP32[$471 >> 2] = $56; //@line 17915
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 17916
        HEAP32[$472 >> 2] = $58; //@line 17917
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 17918
        HEAP32[$473 >> 2] = $60; //@line 17919
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 17920
        HEAP32[$474 >> 2] = $62; //@line 17921
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 17922
        HEAP32[$475 >> 2] = $64; //@line 17923
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 17924
        HEAP32[$476 >> 2] = $66; //@line 17925
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 17926
        HEAP32[$477 >> 2] = $68; //@line 17927
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 17928
        HEAP32[$478 >> 2] = $70; //@line 17929
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 17930
        HEAP32[$479 >> 2] = $72; //@line 17931
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 17932
        HEAP32[$480 >> 2] = $74; //@line 17933
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 17934
        HEAP32[$481 >> 2] = $76; //@line 17935
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 17936
        HEAP32[$482 >> 2] = $78; //@line 17937
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 17938
        HEAP32[$483 >> 2] = $80; //@line 17939
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 17940
        HEAP32[$484 >> 2] = $82; //@line 17941
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 17942
        HEAP32[$485 >> 2] = $84; //@line 17943
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 17944
        HEAP32[$486 >> 2] = $86; //@line 17945
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 17946
        HEAP32[$487 >> 2] = $88; //@line 17947
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 17948
        HEAP32[$488 >> 2] = $90; //@line 17949
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 17950
        HEAP32[$489 >> 2] = $92; //@line 17951
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 17952
        HEAP32[$490 >> 2] = $94; //@line 17953
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 17954
        HEAP32[$491 >> 2] = $96; //@line 17955
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 17956
        HEAP32[$492 >> 2] = $98; //@line 17957
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 17958
        HEAP32[$493 >> 2] = $100; //@line 17959
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 17960
        HEAP32[$494 >> 2] = $102; //@line 17961
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 17962
        HEAP32[$495 >> 2] = $104; //@line 17963
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 17964
        HEAP32[$496 >> 2] = $106; //@line 17965
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 17966
        HEAP32[$497 >> 2] = $108; //@line 17967
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 17968
        HEAP32[$498 >> 2] = $110; //@line 17969
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 17970
        HEAP32[$499 >> 2] = $112; //@line 17971
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 17972
        HEAP32[$500 >> 2] = $114; //@line 17973
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 17974
        HEAP32[$501 >> 2] = $116; //@line 17975
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 17976
        HEAP32[$502 >> 2] = $118; //@line 17977
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 17978
        HEAP32[$503 >> 2] = $120; //@line 17979
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 17980
        HEAP32[$504 >> 2] = $157; //@line 17981
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 17982
        HEAP32[$505 >> 2] = $124; //@line 17983
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 17984
        HEAP32[$506 >> 2] = $126; //@line 17985
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 17986
        HEAP32[$507 >> 2] = $128; //@line 17987
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 17988
        HEAP32[$508 >> 2] = $130; //@line 17989
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 17990
        HEAP32[$509 >> 2] = $14; //@line 17991
        sp = STACKTOP; //@line 17992
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 17996
       ___async_unwind = 0; //@line 17997
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 17998
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 17999
       HEAP32[$442 >> 2] = $2; //@line 18000
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 18001
       HEAP32[$443 >> 2] = $4; //@line 18002
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 18003
       HEAP32[$444 >> 2] = $431; //@line 18004
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 18005
       HEAP32[$445 >> 2] = $6; //@line 18006
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 18007
       HEAP32[$446 >> 2] = $8; //@line 18008
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 18009
       HEAP32[$447 >> 2] = $132; //@line 18010
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 18011
       HEAP32[$448 >> 2] = $12; //@line 18012
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 18013
       HEAP32[$449 >> 2] = $10; //@line 18014
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 18015
       HEAP32[$450 >> 2] = $16; //@line 18016
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 18017
       HEAP32[$451 >> 2] = $439; //@line 18018
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 18019
       HEAP32[$452 >> 2] = $18; //@line 18020
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 18021
       HEAP32[$453 >> 2] = $20; //@line 18022
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 18023
       HEAP32[$454 >> 2] = $22; //@line 18024
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 18025
       HEAP32[$455 >> 2] = $24; //@line 18026
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 18027
       HEAP32[$456 >> 2] = $26; //@line 18028
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 18029
       HEAP32[$457 >> 2] = $28; //@line 18030
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 18031
       HEAP32[$458 >> 2] = $30; //@line 18032
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 18033
       HEAP32[$459 >> 2] = $32; //@line 18034
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 18035
       HEAP32[$460 >> 2] = $34; //@line 18036
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 18037
       HEAP32[$461 >> 2] = $36; //@line 18038
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 18039
       HEAP32[$462 >> 2] = $38; //@line 18040
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 18041
       HEAP32[$463 >> 2] = $40; //@line 18042
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 18043
       HEAP32[$464 >> 2] = $42; //@line 18044
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 18045
       HEAP32[$465 >> 2] = $44; //@line 18046
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 18047
       HEAP32[$466 >> 2] = $46; //@line 18048
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 18049
       HEAP32[$467 >> 2] = $48; //@line 18050
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 18051
       HEAP32[$468 >> 2] = $50; //@line 18052
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 18053
       HEAP32[$469 >> 2] = $52; //@line 18054
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 18055
       HEAP32[$470 >> 2] = $54; //@line 18056
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 18057
       HEAP32[$471 >> 2] = $56; //@line 18058
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 18059
       HEAP32[$472 >> 2] = $58; //@line 18060
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 18061
       HEAP32[$473 >> 2] = $60; //@line 18062
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 18063
       HEAP32[$474 >> 2] = $62; //@line 18064
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 18065
       HEAP32[$475 >> 2] = $64; //@line 18066
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 18067
       HEAP32[$476 >> 2] = $66; //@line 18068
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 18069
       HEAP32[$477 >> 2] = $68; //@line 18070
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 18071
       HEAP32[$478 >> 2] = $70; //@line 18072
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 18073
       HEAP32[$479 >> 2] = $72; //@line 18074
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 18075
       HEAP32[$480 >> 2] = $74; //@line 18076
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 18077
       HEAP32[$481 >> 2] = $76; //@line 18078
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 18079
       HEAP32[$482 >> 2] = $78; //@line 18080
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 18081
       HEAP32[$483 >> 2] = $80; //@line 18082
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 18083
       HEAP32[$484 >> 2] = $82; //@line 18084
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 18085
       HEAP32[$485 >> 2] = $84; //@line 18086
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 18087
       HEAP32[$486 >> 2] = $86; //@line 18088
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 18089
       HEAP32[$487 >> 2] = $88; //@line 18090
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 18091
       HEAP32[$488 >> 2] = $90; //@line 18092
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 18093
       HEAP32[$489 >> 2] = $92; //@line 18094
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 18095
       HEAP32[$490 >> 2] = $94; //@line 18096
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 18097
       HEAP32[$491 >> 2] = $96; //@line 18098
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 18099
       HEAP32[$492 >> 2] = $98; //@line 18100
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 18101
       HEAP32[$493 >> 2] = $100; //@line 18102
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 18103
       HEAP32[$494 >> 2] = $102; //@line 18104
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 18105
       HEAP32[$495 >> 2] = $104; //@line 18106
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 18107
       HEAP32[$496 >> 2] = $106; //@line 18108
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 18109
       HEAP32[$497 >> 2] = $108; //@line 18110
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 18111
       HEAP32[$498 >> 2] = $110; //@line 18112
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 18113
       HEAP32[$499 >> 2] = $112; //@line 18114
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 18115
       HEAP32[$500 >> 2] = $114; //@line 18116
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 18117
       HEAP32[$501 >> 2] = $116; //@line 18118
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 18119
       HEAP32[$502 >> 2] = $118; //@line 18120
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 18121
       HEAP32[$503 >> 2] = $120; //@line 18122
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 18123
       HEAP32[$504 >> 2] = $157; //@line 18124
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 18125
       HEAP32[$505 >> 2] = $124; //@line 18126
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 18127
       HEAP32[$506 >> 2] = $126; //@line 18128
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 18129
       HEAP32[$507 >> 2] = $128; //@line 18130
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 18131
       HEAP32[$508 >> 2] = $130; //@line 18132
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 18133
       HEAP32[$509 >> 2] = $14; //@line 18134
       sp = STACKTOP; //@line 18135
       return;
      }
     }
     _mbed_tracef(2, 3844, 4605, $58); //@line 18139
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$38 >> 2] | 0; //@line 18144
     $512 = $511 + 56 | 0; //@line 18145
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3844, 4739, $30); //@line 18149
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 18153
     $516 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 18154
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 18157
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 18158
      HEAP32[$517 >> 2] = $2; //@line 18159
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 18160
      HEAP32[$518 >> 2] = $4; //@line 18161
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 18162
      HEAP32[$519 >> 2] = $6; //@line 18163
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 18164
      HEAP32[$520 >> 2] = $8; //@line 18165
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 18166
      HEAP32[$521 >> 2] = $10; //@line 18167
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 18168
      HEAP32[$522 >> 2] = $12; //@line 18169
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 18170
      HEAP32[$523 >> 2] = $14; //@line 18171
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 18172
      HEAP32[$524 >> 2] = $16; //@line 18173
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 18174
      HEAP32[$525 >> 2] = $18; //@line 18175
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 18176
      HEAP32[$526 >> 2] = $20; //@line 18177
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 18178
      HEAP32[$527 >> 2] = $22; //@line 18179
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 18180
      HEAP32[$528 >> 2] = $24; //@line 18181
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 18182
      HEAP32[$529 >> 2] = $26; //@line 18183
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 18184
      HEAP32[$530 >> 2] = $28; //@line 18185
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 18186
      HEAP32[$531 >> 2] = $30; //@line 18187
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 18188
      HEAP32[$532 >> 2] = $32; //@line 18189
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 18190
      HEAP32[$533 >> 2] = $34; //@line 18191
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 18192
      HEAP32[$534 >> 2] = $36; //@line 18193
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 18194
      HEAP32[$535 >> 2] = $38; //@line 18195
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 18196
      HEAP32[$536 >> 2] = $40; //@line 18197
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 18198
      HEAP32[$537 >> 2] = $42; //@line 18199
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 18200
      HEAP32[$538 >> 2] = $44; //@line 18201
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 18202
      HEAP32[$539 >> 2] = $46; //@line 18203
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 18204
      HEAP32[$540 >> 2] = $48; //@line 18205
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 18206
      HEAP32[$541 >> 2] = $50; //@line 18207
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 18208
      HEAP32[$542 >> 2] = $52; //@line 18209
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 18210
      HEAP32[$543 >> 2] = $54; //@line 18211
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 18212
      HEAP32[$544 >> 2] = $56; //@line 18213
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 18214
      HEAP32[$545 >> 2] = $58; //@line 18215
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 18216
      HEAP32[$546 >> 2] = $60; //@line 18217
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 18218
      HEAP32[$547 >> 2] = $62; //@line 18219
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 18220
      HEAP32[$548 >> 2] = $64; //@line 18221
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 18222
      HEAP32[$549 >> 2] = $66; //@line 18223
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 18224
      HEAP32[$550 >> 2] = $68; //@line 18225
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 18226
      HEAP32[$551 >> 2] = $70; //@line 18227
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 18228
      HEAP32[$552 >> 2] = $72; //@line 18229
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 18230
      HEAP32[$553 >> 2] = $74; //@line 18231
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 18232
      HEAP32[$554 >> 2] = $76; //@line 18233
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 18234
      HEAP32[$555 >> 2] = $78; //@line 18235
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 18236
      HEAP32[$556 >> 2] = $80; //@line 18237
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 18238
      HEAP32[$557 >> 2] = $82; //@line 18239
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 18240
      HEAP32[$558 >> 2] = $84; //@line 18241
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 18242
      HEAP32[$559 >> 2] = $86; //@line 18243
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 18244
      HEAP32[$560 >> 2] = $88; //@line 18245
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 18246
      HEAP32[$561 >> 2] = $90; //@line 18247
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 18248
      HEAP32[$562 >> 2] = $92; //@line 18249
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 18250
      HEAP32[$563 >> 2] = $94; //@line 18251
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 18252
      HEAP32[$564 >> 2] = $96; //@line 18253
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 18254
      HEAP32[$565 >> 2] = $98; //@line 18255
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 18256
      HEAP32[$566 >> 2] = $100; //@line 18257
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 18258
      HEAP32[$567 >> 2] = $102; //@line 18259
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 18260
      HEAP32[$568 >> 2] = $104; //@line 18261
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 18262
      HEAP32[$569 >> 2] = $106; //@line 18263
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 18264
      HEAP32[$570 >> 2] = $108; //@line 18265
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 18266
      HEAP32[$571 >> 2] = $110; //@line 18267
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 18268
      HEAP32[$572 >> 2] = $112; //@line 18269
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 18270
      HEAP32[$573 >> 2] = $114; //@line 18271
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 18272
      HEAP32[$574 >> 2] = $116; //@line 18273
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 18274
      HEAP32[$575 >> 2] = $118; //@line 18275
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 18276
      HEAP32[$576 >> 2] = $120; //@line 18277
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 18278
      HEAP32[$577 >> 2] = $157; //@line 18279
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 18280
      HEAP32[$578 >> 2] = $124; //@line 18281
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 18282
      HEAP32[$579 >> 2] = $126; //@line 18283
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 18284
      HEAP32[$580 >> 2] = $128; //@line 18285
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 18286
      HEAP32[$581 >> 2] = $130; //@line 18287
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 18288
      HEAP32[$582 >> 2] = $132; //@line 18289
      sp = STACKTOP; //@line 18290
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 18294
     ___async_unwind = 0; //@line 18295
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 18296
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 18297
     HEAP32[$517 >> 2] = $2; //@line 18298
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 18299
     HEAP32[$518 >> 2] = $4; //@line 18300
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 18301
     HEAP32[$519 >> 2] = $6; //@line 18302
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 18303
     HEAP32[$520 >> 2] = $8; //@line 18304
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 18305
     HEAP32[$521 >> 2] = $10; //@line 18306
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 18307
     HEAP32[$522 >> 2] = $12; //@line 18308
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 18309
     HEAP32[$523 >> 2] = $14; //@line 18310
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 18311
     HEAP32[$524 >> 2] = $16; //@line 18312
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 18313
     HEAP32[$525 >> 2] = $18; //@line 18314
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 18315
     HEAP32[$526 >> 2] = $20; //@line 18316
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 18317
     HEAP32[$527 >> 2] = $22; //@line 18318
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 18319
     HEAP32[$528 >> 2] = $24; //@line 18320
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 18321
     HEAP32[$529 >> 2] = $26; //@line 18322
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 18323
     HEAP32[$530 >> 2] = $28; //@line 18324
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 18325
     HEAP32[$531 >> 2] = $30; //@line 18326
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 18327
     HEAP32[$532 >> 2] = $32; //@line 18328
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 18329
     HEAP32[$533 >> 2] = $34; //@line 18330
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 18331
     HEAP32[$534 >> 2] = $36; //@line 18332
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 18333
     HEAP32[$535 >> 2] = $38; //@line 18334
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 18335
     HEAP32[$536 >> 2] = $40; //@line 18336
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 18337
     HEAP32[$537 >> 2] = $42; //@line 18338
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 18339
     HEAP32[$538 >> 2] = $44; //@line 18340
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 18341
     HEAP32[$539 >> 2] = $46; //@line 18342
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 18343
     HEAP32[$540 >> 2] = $48; //@line 18344
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 18345
     HEAP32[$541 >> 2] = $50; //@line 18346
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 18347
     HEAP32[$542 >> 2] = $52; //@line 18348
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 18349
     HEAP32[$543 >> 2] = $54; //@line 18350
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 18351
     HEAP32[$544 >> 2] = $56; //@line 18352
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 18353
     HEAP32[$545 >> 2] = $58; //@line 18354
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 18355
     HEAP32[$546 >> 2] = $60; //@line 18356
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 18357
     HEAP32[$547 >> 2] = $62; //@line 18358
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 18359
     HEAP32[$548 >> 2] = $64; //@line 18360
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 18361
     HEAP32[$549 >> 2] = $66; //@line 18362
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 18363
     HEAP32[$550 >> 2] = $68; //@line 18364
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 18365
     HEAP32[$551 >> 2] = $70; //@line 18366
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 18367
     HEAP32[$552 >> 2] = $72; //@line 18368
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 18369
     HEAP32[$553 >> 2] = $74; //@line 18370
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 18371
     HEAP32[$554 >> 2] = $76; //@line 18372
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 18373
     HEAP32[$555 >> 2] = $78; //@line 18374
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 18375
     HEAP32[$556 >> 2] = $80; //@line 18376
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 18377
     HEAP32[$557 >> 2] = $82; //@line 18378
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 18379
     HEAP32[$558 >> 2] = $84; //@line 18380
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 18381
     HEAP32[$559 >> 2] = $86; //@line 18382
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 18383
     HEAP32[$560 >> 2] = $88; //@line 18384
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 18385
     HEAP32[$561 >> 2] = $90; //@line 18386
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 18387
     HEAP32[$562 >> 2] = $92; //@line 18388
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 18389
     HEAP32[$563 >> 2] = $94; //@line 18390
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 18391
     HEAP32[$564 >> 2] = $96; //@line 18392
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 18393
     HEAP32[$565 >> 2] = $98; //@line 18394
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 18395
     HEAP32[$566 >> 2] = $100; //@line 18396
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 18397
     HEAP32[$567 >> 2] = $102; //@line 18398
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 18399
     HEAP32[$568 >> 2] = $104; //@line 18400
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 18401
     HEAP32[$569 >> 2] = $106; //@line 18402
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 18403
     HEAP32[$570 >> 2] = $108; //@line 18404
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 18405
     HEAP32[$571 >> 2] = $110; //@line 18406
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 18407
     HEAP32[$572 >> 2] = $112; //@line 18408
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 18409
     HEAP32[$573 >> 2] = $114; //@line 18410
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 18411
     HEAP32[$574 >> 2] = $116; //@line 18412
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 18413
     HEAP32[$575 >> 2] = $118; //@line 18414
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 18415
     HEAP32[$576 >> 2] = $120; //@line 18416
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 18417
     HEAP32[$577 >> 2] = $157; //@line 18418
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 18419
     HEAP32[$578 >> 2] = $124; //@line 18420
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 18421
     HEAP32[$579 >> 2] = $126; //@line 18422
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 18423
     HEAP32[$580 >> 2] = $128; //@line 18424
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 18425
     HEAP32[$581 >> 2] = $130; //@line 18426
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 18427
     HEAP32[$582 >> 2] = $132; //@line 18428
     sp = STACKTOP; //@line 18429
     return;
    }
   case 53:
    {
     _mbed_tracef(2, 3844, 4872, $126); //@line 18434
     break L2;
     break;
    }
   case 57:
    {
     $600 = HEAP32[$38 >> 2] | 0; //@line 18439
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 18442
     $603 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $600 + 60 | 0, $600 + 8 | 0, 20, $$1202$i) | 0; //@line 18443
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 18446
      $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 18447
      HEAP32[$604 >> 2] = $2; //@line 18448
      $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 18449
      HEAP32[$605 >> 2] = $4; //@line 18450
      $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 18451
      HEAP32[$606 >> 2] = $6; //@line 18452
      $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 18453
      HEAP32[$607 >> 2] = $8; //@line 18454
      $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 18455
      HEAP32[$608 >> 2] = $10; //@line 18456
      $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 18457
      HEAP32[$609 >> 2] = $12; //@line 18458
      $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 18459
      HEAP32[$610 >> 2] = $14; //@line 18460
      $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 18461
      HEAP32[$611 >> 2] = $16; //@line 18462
      $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 18463
      HEAP32[$612 >> 2] = $18; //@line 18464
      $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 18465
      HEAP32[$613 >> 2] = $20; //@line 18466
      $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 18467
      HEAP32[$614 >> 2] = $22; //@line 18468
      $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 18469
      HEAP32[$615 >> 2] = $24; //@line 18470
      $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 18471
      HEAP32[$616 >> 2] = $26; //@line 18472
      $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 18473
      HEAP32[$617 >> 2] = $28; //@line 18474
      $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 18475
      HEAP32[$618 >> 2] = $30; //@line 18476
      $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 18477
      HEAP32[$619 >> 2] = $32; //@line 18478
      $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 18479
      HEAP32[$620 >> 2] = $34; //@line 18480
      $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 18481
      HEAP32[$621 >> 2] = $36; //@line 18482
      $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 18483
      HEAP32[$622 >> 2] = $38; //@line 18484
      $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 18485
      HEAP32[$623 >> 2] = $40; //@line 18486
      $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 18487
      HEAP32[$624 >> 2] = $42; //@line 18488
      $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 18489
      HEAP32[$625 >> 2] = $44; //@line 18490
      $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 18491
      HEAP32[$626 >> 2] = $46; //@line 18492
      $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 18493
      HEAP32[$627 >> 2] = $48; //@line 18494
      $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 18495
      HEAP32[$628 >> 2] = $50; //@line 18496
      $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 18497
      HEAP32[$629 >> 2] = $52; //@line 18498
      $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 18499
      HEAP32[$630 >> 2] = $54; //@line 18500
      $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 18501
      HEAP32[$631 >> 2] = $56; //@line 18502
      $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 18503
      HEAP32[$632 >> 2] = $58; //@line 18504
      $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 18505
      HEAP32[$633 >> 2] = $60; //@line 18506
      $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 18507
      HEAP32[$634 >> 2] = $62; //@line 18508
      $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 18509
      HEAP32[$635 >> 2] = $64; //@line 18510
      $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 18511
      HEAP32[$636 >> 2] = $66; //@line 18512
      $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 18513
      HEAP32[$637 >> 2] = $68; //@line 18514
      $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 18515
      HEAP32[$638 >> 2] = $70; //@line 18516
      $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 18517
      HEAP32[$639 >> 2] = $72; //@line 18518
      $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 18519
      HEAP32[$640 >> 2] = $74; //@line 18520
      $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 18521
      HEAP32[$641 >> 2] = $76; //@line 18522
      $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 18523
      HEAP32[$642 >> 2] = $78; //@line 18524
      $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 18525
      HEAP32[$643 >> 2] = $80; //@line 18526
      $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 18527
      HEAP32[$644 >> 2] = $82; //@line 18528
      $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 18529
      HEAP32[$645 >> 2] = $84; //@line 18530
      $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 18531
      HEAP32[$646 >> 2] = $86; //@line 18532
      $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 18533
      HEAP32[$647 >> 2] = $88; //@line 18534
      $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 18535
      HEAP32[$648 >> 2] = $90; //@line 18536
      $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 18537
      HEAP32[$649 >> 2] = $92; //@line 18538
      $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 18539
      HEAP32[$650 >> 2] = $94; //@line 18540
      $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 18541
      HEAP32[$651 >> 2] = $96; //@line 18542
      $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 18543
      HEAP32[$652 >> 2] = $98; //@line 18544
      $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 18545
      HEAP32[$653 >> 2] = $100; //@line 18546
      $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 18547
      HEAP32[$654 >> 2] = $102; //@line 18548
      $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 18549
      HEAP32[$655 >> 2] = $104; //@line 18550
      $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 18551
      HEAP32[$656 >> 2] = $106; //@line 18552
      $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 18553
      HEAP32[$657 >> 2] = $108; //@line 18554
      $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 18555
      HEAP32[$658 >> 2] = $110; //@line 18556
      $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 18557
      HEAP32[$659 >> 2] = $112; //@line 18558
      $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 18559
      HEAP32[$660 >> 2] = $114; //@line 18560
      $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 18561
      HEAP32[$661 >> 2] = $116; //@line 18562
      $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 18563
      HEAP32[$662 >> 2] = $118; //@line 18564
      $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 18565
      HEAP32[$663 >> 2] = $120; //@line 18566
      $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 18567
      HEAP32[$664 >> 2] = $157; //@line 18568
      $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 18569
      HEAP32[$665 >> 2] = $124; //@line 18570
      $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 18571
      HEAP32[$666 >> 2] = $126; //@line 18572
      $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 18573
      HEAP32[$667 >> 2] = $128; //@line 18574
      $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 18575
      HEAP32[$668 >> 2] = $130; //@line 18576
      $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 18577
      HEAP32[$669 >> 2] = $132; //@line 18578
      sp = STACKTOP; //@line 18579
      return;
     }
     HEAP8[___async_retval >> 0] = $603; //@line 18583
     ___async_unwind = 0; //@line 18584
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 18585
     $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 18586
     HEAP32[$604 >> 2] = $2; //@line 18587
     $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 18588
     HEAP32[$605 >> 2] = $4; //@line 18589
     $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 18590
     HEAP32[$606 >> 2] = $6; //@line 18591
     $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 18592
     HEAP32[$607 >> 2] = $8; //@line 18593
     $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 18594
     HEAP32[$608 >> 2] = $10; //@line 18595
     $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 18596
     HEAP32[$609 >> 2] = $12; //@line 18597
     $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 18598
     HEAP32[$610 >> 2] = $14; //@line 18599
     $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 18600
     HEAP32[$611 >> 2] = $16; //@line 18601
     $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 18602
     HEAP32[$612 >> 2] = $18; //@line 18603
     $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 18604
     HEAP32[$613 >> 2] = $20; //@line 18605
     $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 18606
     HEAP32[$614 >> 2] = $22; //@line 18607
     $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 18608
     HEAP32[$615 >> 2] = $24; //@line 18609
     $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 18610
     HEAP32[$616 >> 2] = $26; //@line 18611
     $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 18612
     HEAP32[$617 >> 2] = $28; //@line 18613
     $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 18614
     HEAP32[$618 >> 2] = $30; //@line 18615
     $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 18616
     HEAP32[$619 >> 2] = $32; //@line 18617
     $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 18618
     HEAP32[$620 >> 2] = $34; //@line 18619
     $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 18620
     HEAP32[$621 >> 2] = $36; //@line 18621
     $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 18622
     HEAP32[$622 >> 2] = $38; //@line 18623
     $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 18624
     HEAP32[$623 >> 2] = $40; //@line 18625
     $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 18626
     HEAP32[$624 >> 2] = $42; //@line 18627
     $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 18628
     HEAP32[$625 >> 2] = $44; //@line 18629
     $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 18630
     HEAP32[$626 >> 2] = $46; //@line 18631
     $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 18632
     HEAP32[$627 >> 2] = $48; //@line 18633
     $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 18634
     HEAP32[$628 >> 2] = $50; //@line 18635
     $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 18636
     HEAP32[$629 >> 2] = $52; //@line 18637
     $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 18638
     HEAP32[$630 >> 2] = $54; //@line 18639
     $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 18640
     HEAP32[$631 >> 2] = $56; //@line 18641
     $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 18642
     HEAP32[$632 >> 2] = $58; //@line 18643
     $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 18644
     HEAP32[$633 >> 2] = $60; //@line 18645
     $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 18646
     HEAP32[$634 >> 2] = $62; //@line 18647
     $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 18648
     HEAP32[$635 >> 2] = $64; //@line 18649
     $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 18650
     HEAP32[$636 >> 2] = $66; //@line 18651
     $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 18652
     HEAP32[$637 >> 2] = $68; //@line 18653
     $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 18654
     HEAP32[$638 >> 2] = $70; //@line 18655
     $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 18656
     HEAP32[$639 >> 2] = $72; //@line 18657
     $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 18658
     HEAP32[$640 >> 2] = $74; //@line 18659
     $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 18660
     HEAP32[$641 >> 2] = $76; //@line 18661
     $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 18662
     HEAP32[$642 >> 2] = $78; //@line 18663
     $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 18664
     HEAP32[$643 >> 2] = $80; //@line 18665
     $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 18666
     HEAP32[$644 >> 2] = $82; //@line 18667
     $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 18668
     HEAP32[$645 >> 2] = $84; //@line 18669
     $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 18670
     HEAP32[$646 >> 2] = $86; //@line 18671
     $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 18672
     HEAP32[$647 >> 2] = $88; //@line 18673
     $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 18674
     HEAP32[$648 >> 2] = $90; //@line 18675
     $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 18676
     HEAP32[$649 >> 2] = $92; //@line 18677
     $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 18678
     HEAP32[$650 >> 2] = $94; //@line 18679
     $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 18680
     HEAP32[$651 >> 2] = $96; //@line 18681
     $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 18682
     HEAP32[$652 >> 2] = $98; //@line 18683
     $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 18684
     HEAP32[$653 >> 2] = $100; //@line 18685
     $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 18686
     HEAP32[$654 >> 2] = $102; //@line 18687
     $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 18688
     HEAP32[$655 >> 2] = $104; //@line 18689
     $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 18690
     HEAP32[$656 >> 2] = $106; //@line 18691
     $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 18692
     HEAP32[$657 >> 2] = $108; //@line 18693
     $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 18694
     HEAP32[$658 >> 2] = $110; //@line 18695
     $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 18696
     HEAP32[$659 >> 2] = $112; //@line 18697
     $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 18698
     HEAP32[$660 >> 2] = $114; //@line 18699
     $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 18700
     HEAP32[$661 >> 2] = $116; //@line 18701
     $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 18702
     HEAP32[$662 >> 2] = $118; //@line 18703
     $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 18704
     HEAP32[$663 >> 2] = $120; //@line 18705
     $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 18706
     HEAP32[$664 >> 2] = $157; //@line 18707
     $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 18708
     HEAP32[$665 >> 2] = $124; //@line 18709
     $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 18710
     HEAP32[$666 >> 2] = $126; //@line 18711
     $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 18712
     HEAP32[$667 >> 2] = $128; //@line 18713
     $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 18714
     HEAP32[$668 >> 2] = $130; //@line 18715
     $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 18716
     HEAP32[$669 >> 2] = $132; //@line 18717
     sp = STACKTOP; //@line 18718
     return;
    }
   case 60:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 18723
     $671 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $54, $80, 11, $$1202$i) | 0; //@line 18724
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 18727
      $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 18728
      HEAP32[$672 >> 2] = $2; //@line 18729
      $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 18730
      HEAP32[$673 >> 2] = $4; //@line 18731
      $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 18732
      HEAP32[$674 >> 2] = $6; //@line 18733
      $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 18734
      HEAP32[$675 >> 2] = $8; //@line 18735
      $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 18736
      HEAP32[$676 >> 2] = $10; //@line 18737
      $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 18738
      HEAP32[$677 >> 2] = $12; //@line 18739
      $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 18740
      HEAP32[$678 >> 2] = $14; //@line 18741
      $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 18742
      HEAP32[$679 >> 2] = $16; //@line 18743
      $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 18744
      HEAP32[$680 >> 2] = $18; //@line 18745
      $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 18746
      HEAP32[$681 >> 2] = $20; //@line 18747
      $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 18748
      HEAP32[$682 >> 2] = $22; //@line 18749
      $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 18750
      HEAP32[$683 >> 2] = $24; //@line 18751
      $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 18752
      HEAP32[$684 >> 2] = $26; //@line 18753
      $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 18754
      HEAP32[$685 >> 2] = $28; //@line 18755
      $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 18756
      HEAP32[$686 >> 2] = $30; //@line 18757
      $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 18758
      HEAP32[$687 >> 2] = $32; //@line 18759
      $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 18760
      HEAP32[$688 >> 2] = $34; //@line 18761
      $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 18762
      HEAP32[$689 >> 2] = $36; //@line 18763
      $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 18764
      HEAP32[$690 >> 2] = $38; //@line 18765
      $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 18766
      HEAP32[$691 >> 2] = $40; //@line 18767
      $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 18768
      HEAP32[$692 >> 2] = $42; //@line 18769
      $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 18770
      HEAP32[$693 >> 2] = $44; //@line 18771
      $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 18772
      HEAP32[$694 >> 2] = $46; //@line 18773
      $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 18774
      HEAP32[$695 >> 2] = $48; //@line 18775
      $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 18776
      HEAP32[$696 >> 2] = $50; //@line 18777
      $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 18778
      HEAP32[$697 >> 2] = $52; //@line 18779
      $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 18780
      HEAP32[$698 >> 2] = $54; //@line 18781
      $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 18782
      HEAP32[$699 >> 2] = $56; //@line 18783
      $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 18784
      HEAP32[$700 >> 2] = $58; //@line 18785
      $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 18786
      HEAP32[$701 >> 2] = $60; //@line 18787
      $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 18788
      HEAP32[$702 >> 2] = $62; //@line 18789
      $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 18790
      HEAP32[$703 >> 2] = $64; //@line 18791
      $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 18792
      HEAP32[$704 >> 2] = $66; //@line 18793
      $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 18794
      HEAP32[$705 >> 2] = $68; //@line 18795
      $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 18796
      HEAP32[$706 >> 2] = $70; //@line 18797
      $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 18798
      HEAP32[$707 >> 2] = $72; //@line 18799
      $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 18800
      HEAP32[$708 >> 2] = $74; //@line 18801
      $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 18802
      HEAP32[$709 >> 2] = $76; //@line 18803
      $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 18804
      HEAP32[$710 >> 2] = $78; //@line 18805
      $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 18806
      HEAP32[$711 >> 2] = $80; //@line 18807
      $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 18808
      HEAP32[$712 >> 2] = $82; //@line 18809
      $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 18810
      HEAP32[$713 >> 2] = $84; //@line 18811
      $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 18812
      HEAP32[$714 >> 2] = $86; //@line 18813
      $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 18814
      HEAP32[$715 >> 2] = $88; //@line 18815
      $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 18816
      HEAP32[$716 >> 2] = $90; //@line 18817
      $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 18818
      HEAP32[$717 >> 2] = $92; //@line 18819
      $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 18820
      HEAP32[$718 >> 2] = $94; //@line 18821
      $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 18822
      HEAP32[$719 >> 2] = $96; //@line 18823
      $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 18824
      HEAP32[$720 >> 2] = $98; //@line 18825
      $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 18826
      HEAP32[$721 >> 2] = $100; //@line 18827
      $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 18828
      HEAP32[$722 >> 2] = $102; //@line 18829
      $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 18830
      HEAP32[$723 >> 2] = $104; //@line 18831
      $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 18832
      HEAP32[$724 >> 2] = $106; //@line 18833
      $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 18834
      HEAP32[$725 >> 2] = $108; //@line 18835
      $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 18836
      HEAP32[$726 >> 2] = $110; //@line 18837
      $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 18838
      HEAP32[$727 >> 2] = $112; //@line 18839
      $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 18840
      HEAP32[$728 >> 2] = $114; //@line 18841
      $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 18842
      HEAP32[$729 >> 2] = $116; //@line 18843
      $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 18844
      HEAP32[$730 >> 2] = $118; //@line 18845
      $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 18846
      HEAP32[$731 >> 2] = $120; //@line 18847
      $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 18848
      HEAP32[$732 >> 2] = $157; //@line 18849
      $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 18850
      HEAP32[$733 >> 2] = $124; //@line 18851
      $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 18852
      HEAP32[$734 >> 2] = $126; //@line 18853
      $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 18854
      HEAP32[$735 >> 2] = $128; //@line 18855
      $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 18856
      HEAP32[$736 >> 2] = $130; //@line 18857
      $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 18858
      HEAP32[$737 >> 2] = $132; //@line 18859
      sp = STACKTOP; //@line 18860
      return;
     }
     HEAP8[___async_retval >> 0] = $671; //@line 18864
     ___async_unwind = 0; //@line 18865
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 18866
     $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 18867
     HEAP32[$672 >> 2] = $2; //@line 18868
     $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 18869
     HEAP32[$673 >> 2] = $4; //@line 18870
     $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 18871
     HEAP32[$674 >> 2] = $6; //@line 18872
     $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 18873
     HEAP32[$675 >> 2] = $8; //@line 18874
     $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 18875
     HEAP32[$676 >> 2] = $10; //@line 18876
     $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 18877
     HEAP32[$677 >> 2] = $12; //@line 18878
     $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 18879
     HEAP32[$678 >> 2] = $14; //@line 18880
     $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 18881
     HEAP32[$679 >> 2] = $16; //@line 18882
     $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 18883
     HEAP32[$680 >> 2] = $18; //@line 18884
     $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 18885
     HEAP32[$681 >> 2] = $20; //@line 18886
     $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 18887
     HEAP32[$682 >> 2] = $22; //@line 18888
     $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 18889
     HEAP32[$683 >> 2] = $24; //@line 18890
     $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 18891
     HEAP32[$684 >> 2] = $26; //@line 18892
     $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 18893
     HEAP32[$685 >> 2] = $28; //@line 18894
     $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 18895
     HEAP32[$686 >> 2] = $30; //@line 18896
     $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 18897
     HEAP32[$687 >> 2] = $32; //@line 18898
     $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 18899
     HEAP32[$688 >> 2] = $34; //@line 18900
     $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 18901
     HEAP32[$689 >> 2] = $36; //@line 18902
     $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 18903
     HEAP32[$690 >> 2] = $38; //@line 18904
     $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 18905
     HEAP32[$691 >> 2] = $40; //@line 18906
     $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 18907
     HEAP32[$692 >> 2] = $42; //@line 18908
     $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 18909
     HEAP32[$693 >> 2] = $44; //@line 18910
     $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 18911
     HEAP32[$694 >> 2] = $46; //@line 18912
     $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 18913
     HEAP32[$695 >> 2] = $48; //@line 18914
     $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 18915
     HEAP32[$696 >> 2] = $50; //@line 18916
     $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 18917
     HEAP32[$697 >> 2] = $52; //@line 18918
     $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 18919
     HEAP32[$698 >> 2] = $54; //@line 18920
     $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 18921
     HEAP32[$699 >> 2] = $56; //@line 18922
     $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 18923
     HEAP32[$700 >> 2] = $58; //@line 18924
     $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 18925
     HEAP32[$701 >> 2] = $60; //@line 18926
     $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 18927
     HEAP32[$702 >> 2] = $62; //@line 18928
     $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 18929
     HEAP32[$703 >> 2] = $64; //@line 18930
     $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 18931
     HEAP32[$704 >> 2] = $66; //@line 18932
     $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 18933
     HEAP32[$705 >> 2] = $68; //@line 18934
     $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 18935
     HEAP32[$706 >> 2] = $70; //@line 18936
     $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 18937
     HEAP32[$707 >> 2] = $72; //@line 18938
     $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 18939
     HEAP32[$708 >> 2] = $74; //@line 18940
     $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 18941
     HEAP32[$709 >> 2] = $76; //@line 18942
     $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 18943
     HEAP32[$710 >> 2] = $78; //@line 18944
     $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 18945
     HEAP32[$711 >> 2] = $80; //@line 18946
     $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 18947
     HEAP32[$712 >> 2] = $82; //@line 18948
     $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 18949
     HEAP32[$713 >> 2] = $84; //@line 18950
     $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 18951
     HEAP32[$714 >> 2] = $86; //@line 18952
     $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 18953
     HEAP32[$715 >> 2] = $88; //@line 18954
     $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 18955
     HEAP32[$716 >> 2] = $90; //@line 18956
     $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 18957
     HEAP32[$717 >> 2] = $92; //@line 18958
     $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 18959
     HEAP32[$718 >> 2] = $94; //@line 18960
     $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 18961
     HEAP32[$719 >> 2] = $96; //@line 18962
     $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 18963
     HEAP32[$720 >> 2] = $98; //@line 18964
     $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 18965
     HEAP32[$721 >> 2] = $100; //@line 18966
     $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 18967
     HEAP32[$722 >> 2] = $102; //@line 18968
     $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 18969
     HEAP32[$723 >> 2] = $104; //@line 18970
     $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 18971
     HEAP32[$724 >> 2] = $106; //@line 18972
     $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 18973
     HEAP32[$725 >> 2] = $108; //@line 18974
     $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 18975
     HEAP32[$726 >> 2] = $110; //@line 18976
     $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 18977
     HEAP32[$727 >> 2] = $112; //@line 18978
     $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 18979
     HEAP32[$728 >> 2] = $114; //@line 18980
     $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 18981
     HEAP32[$729 >> 2] = $116; //@line 18982
     $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 18983
     HEAP32[$730 >> 2] = $118; //@line 18984
     $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 18985
     HEAP32[$731 >> 2] = $120; //@line 18986
     $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 18987
     HEAP32[$732 >> 2] = $157; //@line 18988
     $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 18989
     HEAP32[$733 >> 2] = $124; //@line 18990
     $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 18991
     HEAP32[$734 >> 2] = $126; //@line 18992
     $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 18993
     HEAP32[$735 >> 2] = $128; //@line 18994
     $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 18995
     HEAP32[$736 >> 2] = $130; //@line 18996
     $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 18997
     HEAP32[$737 >> 2] = $132; //@line 18998
     sp = STACKTOP; //@line 18999
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3844, 5067, $68); //@line 19004
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$38 >> 2] | 0; //@line 19009
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 19012
     $759 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 19013
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 19016
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 19017
      HEAP32[$760 >> 2] = $2; //@line 19018
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 19019
      HEAP32[$761 >> 2] = $4; //@line 19020
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 19021
      HEAP32[$762 >> 2] = $6; //@line 19022
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 19023
      HEAP32[$763 >> 2] = $8; //@line 19024
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 19025
      HEAP32[$764 >> 2] = $10; //@line 19026
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 19027
      HEAP32[$765 >> 2] = $12; //@line 19028
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 19029
      HEAP32[$766 >> 2] = $14; //@line 19030
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 19031
      HEAP32[$767 >> 2] = $16; //@line 19032
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 19033
      HEAP32[$768 >> 2] = $18; //@line 19034
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 19035
      HEAP32[$769 >> 2] = $20; //@line 19036
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 19037
      HEAP32[$770 >> 2] = $22; //@line 19038
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 19039
      HEAP32[$771 >> 2] = $24; //@line 19040
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 19041
      HEAP32[$772 >> 2] = $26; //@line 19042
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 19043
      HEAP32[$773 >> 2] = $28; //@line 19044
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 19045
      HEAP32[$774 >> 2] = $30; //@line 19046
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 19047
      HEAP32[$775 >> 2] = $32; //@line 19048
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 19049
      HEAP32[$776 >> 2] = $34; //@line 19050
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 19051
      HEAP32[$777 >> 2] = $36; //@line 19052
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 19053
      HEAP32[$778 >> 2] = $38; //@line 19054
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 19055
      HEAP32[$779 >> 2] = $40; //@line 19056
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 19057
      HEAP32[$780 >> 2] = $42; //@line 19058
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 19059
      HEAP32[$781 >> 2] = $44; //@line 19060
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 19061
      HEAP32[$782 >> 2] = $46; //@line 19062
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 19063
      HEAP32[$783 >> 2] = $48; //@line 19064
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 19065
      HEAP32[$784 >> 2] = $50; //@line 19066
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 19067
      HEAP32[$785 >> 2] = $52; //@line 19068
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 19069
      HEAP32[$786 >> 2] = $54; //@line 19070
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 19071
      HEAP32[$787 >> 2] = $56; //@line 19072
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 19073
      HEAP32[$788 >> 2] = $58; //@line 19074
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 19075
      HEAP32[$789 >> 2] = $60; //@line 19076
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 19077
      HEAP32[$790 >> 2] = $62; //@line 19078
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 19079
      HEAP32[$791 >> 2] = $64; //@line 19080
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 19081
      HEAP32[$792 >> 2] = $66; //@line 19082
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 19083
      HEAP32[$793 >> 2] = $68; //@line 19084
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 19085
      HEAP32[$794 >> 2] = $70; //@line 19086
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 19087
      HEAP32[$795 >> 2] = $72; //@line 19088
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 19089
      HEAP32[$796 >> 2] = $74; //@line 19090
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 19091
      HEAP32[$797 >> 2] = $76; //@line 19092
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 19093
      HEAP32[$798 >> 2] = $78; //@line 19094
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 19095
      HEAP32[$799 >> 2] = $80; //@line 19096
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 19097
      HEAP32[$800 >> 2] = $82; //@line 19098
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 19099
      HEAP32[$801 >> 2] = $84; //@line 19100
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 19101
      HEAP32[$802 >> 2] = $86; //@line 19102
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 19103
      HEAP32[$803 >> 2] = $88; //@line 19104
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 19105
      HEAP32[$804 >> 2] = $90; //@line 19106
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 19107
      HEAP32[$805 >> 2] = $92; //@line 19108
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 19109
      HEAP32[$806 >> 2] = $94; //@line 19110
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 19111
      HEAP32[$807 >> 2] = $96; //@line 19112
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 19113
      HEAP32[$808 >> 2] = $98; //@line 19114
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 19115
      HEAP32[$809 >> 2] = $100; //@line 19116
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 19117
      HEAP32[$810 >> 2] = $102; //@line 19118
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 19119
      HEAP32[$811 >> 2] = $104; //@line 19120
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 19121
      HEAP32[$812 >> 2] = $106; //@line 19122
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 19123
      HEAP32[$813 >> 2] = $108; //@line 19124
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 19125
      HEAP32[$814 >> 2] = $110; //@line 19126
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 19127
      HEAP32[$815 >> 2] = $112; //@line 19128
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 19129
      HEAP32[$816 >> 2] = $114; //@line 19130
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 19131
      HEAP32[$817 >> 2] = $116; //@line 19132
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 19133
      HEAP32[$818 >> 2] = $118; //@line 19134
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 19135
      HEAP32[$819 >> 2] = $120; //@line 19136
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 19137
      HEAP32[$820 >> 2] = $157; //@line 19138
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 19139
      HEAP32[$821 >> 2] = $124; //@line 19140
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 19141
      HEAP32[$822 >> 2] = $126; //@line 19142
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 19143
      HEAP32[$823 >> 2] = $128; //@line 19144
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 19145
      HEAP32[$824 >> 2] = $130; //@line 19146
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 19147
      HEAP32[$825 >> 2] = $132; //@line 19148
      sp = STACKTOP; //@line 19149
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 19153
     ___async_unwind = 0; //@line 19154
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 19155
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 19156
     HEAP32[$760 >> 2] = $2; //@line 19157
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 19158
     HEAP32[$761 >> 2] = $4; //@line 19159
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 19160
     HEAP32[$762 >> 2] = $6; //@line 19161
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 19162
     HEAP32[$763 >> 2] = $8; //@line 19163
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 19164
     HEAP32[$764 >> 2] = $10; //@line 19165
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 19166
     HEAP32[$765 >> 2] = $12; //@line 19167
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 19168
     HEAP32[$766 >> 2] = $14; //@line 19169
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 19170
     HEAP32[$767 >> 2] = $16; //@line 19171
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 19172
     HEAP32[$768 >> 2] = $18; //@line 19173
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 19174
     HEAP32[$769 >> 2] = $20; //@line 19175
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 19176
     HEAP32[$770 >> 2] = $22; //@line 19177
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 19178
     HEAP32[$771 >> 2] = $24; //@line 19179
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 19180
     HEAP32[$772 >> 2] = $26; //@line 19181
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 19182
     HEAP32[$773 >> 2] = $28; //@line 19183
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 19184
     HEAP32[$774 >> 2] = $30; //@line 19185
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 19186
     HEAP32[$775 >> 2] = $32; //@line 19187
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 19188
     HEAP32[$776 >> 2] = $34; //@line 19189
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 19190
     HEAP32[$777 >> 2] = $36; //@line 19191
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 19192
     HEAP32[$778 >> 2] = $38; //@line 19193
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 19194
     HEAP32[$779 >> 2] = $40; //@line 19195
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 19196
     HEAP32[$780 >> 2] = $42; //@line 19197
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 19198
     HEAP32[$781 >> 2] = $44; //@line 19199
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 19200
     HEAP32[$782 >> 2] = $46; //@line 19201
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 19202
     HEAP32[$783 >> 2] = $48; //@line 19203
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 19204
     HEAP32[$784 >> 2] = $50; //@line 19205
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 19206
     HEAP32[$785 >> 2] = $52; //@line 19207
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 19208
     HEAP32[$786 >> 2] = $54; //@line 19209
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 19210
     HEAP32[$787 >> 2] = $56; //@line 19211
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 19212
     HEAP32[$788 >> 2] = $58; //@line 19213
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 19214
     HEAP32[$789 >> 2] = $60; //@line 19215
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 19216
     HEAP32[$790 >> 2] = $62; //@line 19217
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 19218
     HEAP32[$791 >> 2] = $64; //@line 19219
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 19220
     HEAP32[$792 >> 2] = $66; //@line 19221
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 19222
     HEAP32[$793 >> 2] = $68; //@line 19223
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 19224
     HEAP32[$794 >> 2] = $70; //@line 19225
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 19226
     HEAP32[$795 >> 2] = $72; //@line 19227
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 19228
     HEAP32[$796 >> 2] = $74; //@line 19229
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 19230
     HEAP32[$797 >> 2] = $76; //@line 19231
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 19232
     HEAP32[$798 >> 2] = $78; //@line 19233
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 19234
     HEAP32[$799 >> 2] = $80; //@line 19235
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 19236
     HEAP32[$800 >> 2] = $82; //@line 19237
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 19238
     HEAP32[$801 >> 2] = $84; //@line 19239
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 19240
     HEAP32[$802 >> 2] = $86; //@line 19241
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 19242
     HEAP32[$803 >> 2] = $88; //@line 19243
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 19244
     HEAP32[$804 >> 2] = $90; //@line 19245
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 19246
     HEAP32[$805 >> 2] = $92; //@line 19247
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 19248
     HEAP32[$806 >> 2] = $94; //@line 19249
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 19250
     HEAP32[$807 >> 2] = $96; //@line 19251
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 19252
     HEAP32[$808 >> 2] = $98; //@line 19253
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 19254
     HEAP32[$809 >> 2] = $100; //@line 19255
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 19256
     HEAP32[$810 >> 2] = $102; //@line 19257
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 19258
     HEAP32[$811 >> 2] = $104; //@line 19259
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 19260
     HEAP32[$812 >> 2] = $106; //@line 19261
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 19262
     HEAP32[$813 >> 2] = $108; //@line 19263
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 19264
     HEAP32[$814 >> 2] = $110; //@line 19265
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 19266
     HEAP32[$815 >> 2] = $112; //@line 19267
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 19268
     HEAP32[$816 >> 2] = $114; //@line 19269
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 19270
     HEAP32[$817 >> 2] = $116; //@line 19271
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 19272
     HEAP32[$818 >> 2] = $118; //@line 19273
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 19274
     HEAP32[$819 >> 2] = $120; //@line 19275
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 19276
     HEAP32[$820 >> 2] = $157; //@line 19277
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 19278
     HEAP32[$821 >> 2] = $124; //@line 19279
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 19280
     HEAP32[$822 >> 2] = $126; //@line 19281
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 19282
     HEAP32[$823 >> 2] = $128; //@line 19283
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 19284
     HEAP32[$824 >> 2] = $130; //@line 19285
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 19286
     HEAP32[$825 >> 2] = $132; //@line 19287
     sp = STACKTOP; //@line 19288
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3844, 5193, $132); //@line 19293
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3844, 5254, $102); //@line 19298
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3844, 5315, $48); //@line 19303
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3844, 5376, $20); //@line 19308
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3844, 5436, $12); //@line 19313
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3844, 5496, $84); //@line 19318
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $6 | 0) >= ($16 | 0)) {
      $936 = ___async_retval; //@line 19327
      HEAP32[$936 >> 2] = $22; //@line 19328
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 19334
      HEAP32[$88 >> 2] = $926; //@line 19335
      $927 = $926; //@line 19336
      $929 = $6 - $927 + $16 | 0; //@line 19338
      HEAP16[$72 + 24 >> 1] = $929; //@line 19341
      if ($929 & 65535 | 0) {
       HEAP32[$72 + 36 >> 2] = $927; //@line 19346
       $936 = ___async_retval; //@line 19347
       HEAP32[$936 >> 2] = $22; //@line 19348
       return;
      }
     } else {
      _mbed_tracef(2, 3844, 5543, $26); //@line 19352
     }
     HEAP32[$72 + 4 >> 2] = 1; //@line 19355
     $936 = ___async_retval; //@line 19356
     HEAP32[$936 >> 2] = $22; //@line 19357
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3844, 5004, $106); //@line 19363
  }
 } while (0);
 HEAP32[$72 + 4 >> 2] = 1; //@line 19367
 $936 = ___async_retval; //@line 19368
 HEAP32[$936 >> 2] = $22; //@line 19369
 return;
}
function _sn_coap_parser__async_cb_169($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $432 = 0, $435 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $512 = 0, $513 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $587 = 0, $590 = 0, $591 = 0, $596 = 0, $599 = 0, $6 = 0, $60 = 0, $601 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $596$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 25860
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25862
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25864
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25866
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25868
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25870
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25872
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25874
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25876
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25878
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25880
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25882
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25884
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25886
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25888
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25890
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25892
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25894
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 25896
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 25898
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 25900
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 25902
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 25904
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 25906
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 25908
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 25910
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 25912
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 25914
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 25916
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 25918
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 25920
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 25922
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 25924
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 25926
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 25928
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 25930
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 25932
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 25934
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 25936
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 25938
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 25940
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 25942
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 25944
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 25946
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 25948
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 25950
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 25952
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 25954
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 25956
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 25958
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 25960
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 25962
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 25964
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 25966
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 25968
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 25970
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 25972
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 25974
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 25976
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 25978
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 25980
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 25984
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 25986
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 25988
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 25990
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 25992
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 244 >> 2] | 0; //@line 25998
   L3 : while (1) {
    $917 = HEAP32[$114 >> 2] | 0; //@line 26000
    $918 = $917 - $6 | 0; //@line 26001
    $137 = $917; //@line 26004
    if (($918 | 0) > ($16 | 0)) {
     break L2;
    }
    if (!(($16 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 26011
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 26014
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 26017
     break;
    }
    $140 = $trunc277$i & 15; //@line 26021
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 26022
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 26027
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 26035
      $$sink214$i = 13; //@line 26035
      $$sink3$i = 1; //@line 26035
      label = 8; //@line 26036
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 26048
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 26048
      $$sink3$i = 2; //@line 26048
      label = 8; //@line 26049
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 26053
      $159 = $137; //@line 26053
      $937 = $917; //@line 26053
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 26057
     $154 = $137 + $$sink3$i | 0; //@line 26059
     HEAP32[$88 >> 2] = $154; //@line 26060
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 26062
     $159 = $154; //@line 26062
     $937 = $154; //@line 26062
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 26065
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 26069
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 26077
      $$sink216$i = 13; //@line 26077
      $$sink8$i = 1; //@line 26077
      label = 13; //@line 26078
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 26090
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 26090
      $$sink8$i = 2; //@line 26090
      label = 13; //@line 26091
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 26095
      $174 = $937; //@line 26095
      $241 = $159; //@line 26095
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 26099
     $171 = $159 + $$sink8$i | 0; //@line 26101
     HEAP32[$88 >> 2] = $171; //@line 26102
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 26104
     $174 = $171; //@line 26104
     $241 = $171; //@line 26104
    }
    $$1202$i = $$1202$in$i & 65535; //@line 26106
    $175 = $28 - $174 & 65535; //@line 26108
    $trunc$i = $157 & 65535; //@line 26109
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 62; //@line 26113
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$38 >> 2] | 0)) {
        label = 16; //@line 26121
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 26126
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 26131
         break L3;
         break;
        }
       case 3:
        {
         label = 42; //@line 26136
         break L3;
         break;
        }
       case 8:
        {
         label = 48; //@line 26141
         break L3;
         break;
        }
       case 20:
        {
         label = 59; //@line 26146
         break L3;
         break;
        }
       case 11:
        {
         label = 62; //@line 26151
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 26156
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 26167
          break L3;
         }
         $268 = $241 + 1 | 0; //@line 26170
         HEAP32[$88 >> 2] = $268; //@line 26171
         $269 = $$1202$in$i & 255; //@line 26172
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 26175
         } else {
          $$045$i221$i = $269; //@line 26177
          $$06$i220$i = 0; //@line 26177
          $274 = $268; //@line 26177
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 26179
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 26181
           HEAP32[$88 >> 2] = $274; //@line 26182
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 26185
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 26188
            break;
           } else {
            $$06$i220$i = $277; //@line 26191
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 26197
         $$reg2mem$0 = $157; //@line 26198
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 55; //@line 26205
          break L3;
         }
         $587 = (HEAP32[$38 >> 2] | 0) + 28 | 0; //@line 26209
         if ((HEAP32[$587 >> 2] | 0) != -1) {
          label = 55; //@line 26213
          break L3;
         }
         $590 = $241 + 1 | 0; //@line 26216
         HEAP32[$88 >> 2] = $590; //@line 26217
         $591 = $$1202$in$i & 255; //@line 26218
         if (!($591 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 26221
         } else {
          $$045$i263$i = $591; //@line 26223
          $$06$i262$i = 0; //@line 26223
          $596 = $590; //@line 26223
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 26225
           $596$looptemp = $596;
           $596 = $596 + 1 | 0; //@line 26227
           HEAP32[$88 >> 2] = $596; //@line 26228
           $599 = $$06$i262$i << 8 | HEAPU8[$596$looptemp >> 0]; //@line 26231
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $599; //@line 26234
            break;
           } else {
            $$06$i262$i = $599; //@line 26237
           }
          }
         }
         HEAP32[$587 >> 2] = $$0$lcssa$i265$i; //@line 26241
         $$reg2mem$0 = $157; //@line 26242
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 26249
          break L3;
         }
         $742 = (HEAP32[$38 >> 2] | 0) + 32 | 0; //@line 26253
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 26257
          break L3;
         }
         $745 = $241 + 1 | 0; //@line 26260
         HEAP32[$88 >> 2] = $745; //@line 26261
         $746 = $$1202$in$i & 255; //@line 26262
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 26265
         } else {
          $$045$i270$i = $746; //@line 26267
          $$06$i269$i = 0; //@line 26267
          $751 = $745; //@line 26267
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 26269
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 26271
           HEAP32[$88 >> 2] = $751; //@line 26272
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 26275
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 26278
            break;
           } else {
            $$06$i269$i = $754; //@line 26281
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 26285
         $$reg2mem$0 = $157; //@line 26286
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 26293
          break L3;
         }
         $829 = (HEAP32[$38 >> 2] | 0) + 40 | 0; //@line 26297
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 26301
          break L3;
         }
         $832 = $241 + 1 | 0; //@line 26304
         HEAP32[$88 >> 2] = $832; //@line 26305
         $833 = $$1202$in$i & 255; //@line 26306
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 26309
         } else {
          $$045$i256$i = $833; //@line 26311
          $$06$i255$i = 0; //@line 26311
          $838 = $832; //@line 26311
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 26313
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 26315
           HEAP32[$88 >> 2] = $838; //@line 26316
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 26319
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 26322
            break;
           } else {
            $$06$i255$i = $841; //@line 26325
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 26329
         $$reg2mem$0 = $157; //@line 26330
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 26337
          break L3;
         }
         $845 = (HEAP32[$38 >> 2] | 0) + 36 | 0; //@line 26341
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 26345
          break L3;
         }
         $848 = $241 + 1 | 0; //@line 26348
         HEAP32[$88 >> 2] = $848; //@line 26349
         $849 = $$1202$in$i & 255; //@line 26350
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 26353
         } else {
          $$045$i249$i = $849; //@line 26355
          $$06$i248$i = 0; //@line 26355
          $854 = $848; //@line 26355
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 26357
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 26359
           HEAP32[$88 >> 2] = $854; //@line 26360
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 26363
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 26366
            break;
           } else {
            $$06$i248$i = $857; //@line 26369
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 26373
         $$reg2mem$0 = $157; //@line 26374
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 26381
          break L3;
         }
         $861 = (HEAP32[$38 >> 2] | 0) + 12 | 0; //@line 26385
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 26389
          break L3;
         }
         $864 = $241 + 1 | 0; //@line 26392
         HEAP32[$88 >> 2] = $864; //@line 26393
         $865 = $$1202$in$i & 255; //@line 26394
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 26397
         } else {
          $$045$i242$i = $865; //@line 26399
          $$06$i241$i = 0; //@line 26399
          $870 = $864; //@line 26399
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 26401
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 26403
           HEAP32[$88 >> 2] = $870; //@line 26404
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 26407
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 26410
            break;
           } else {
            $$06$i241$i = $873; //@line 26413
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 26417
         $$reg2mem$0 = $157; //@line 26418
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 26425
          break L3;
         }
         $877 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 26429
         $878 = HEAP8[$877 >> 0] | 0; //@line 26430
         if ($878 & 1) {
          label = 94; //@line 26434
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 26438
         $883 = (HEAP32[$88 >> 2] | 0) + 1 | 0; //@line 26440
         HEAP32[$88 >> 2] = $883; //@line 26441
         $884 = $$1202$in$i & 255; //@line 26442
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 26445
         } else {
          $$045$i235$i = $884; //@line 26447
          $$06$i234$i = 0; //@line 26447
          $889 = $883; //@line 26447
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 26449
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 26451
           HEAP32[$88 >> 2] = $889; //@line 26452
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 26455
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 26458
            break;
           } else {
            $$06$i234$i = $892; //@line 26461
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 26467
         $$reg2mem$0 = $157; //@line 26468
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 26475
          break L3;
         }
         $898 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 26479
         $899 = HEAP8[$898 >> 0] | 0; //@line 26480
         if ($899 & 2) {
          label = 100; //@line 26484
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 26488
         $904 = (HEAP32[$88 >> 2] | 0) + 1 | 0; //@line 26490
         HEAP32[$88 >> 2] = $904; //@line 26491
         $905 = $$1202$in$i & 255; //@line 26492
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 26495
         } else {
          $$045$i228$i = $905; //@line 26497
          $$06$i227$i = 0; //@line 26497
          $910 = $904; //@line 26497
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 26499
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 26501
           HEAP32[$88 >> 2] = $910; //@line 26502
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 26505
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 26508
            break;
           } else {
            $$06$i227$i = $913; //@line 26511
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 26517
         $$reg2mem$0 = $157; //@line 26518
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 26523
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 26533
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 26540
     break;
    }
    if ((HEAP32[$120 >> 2] | 0) != -1) {
     label = 22; //@line 26546
     break;
    }
    $256 = $241 + 1 | 0; //@line 26549
    HEAP32[$88 >> 2] = $256; //@line 26550
    $257 = $$1202$in$i & 255; //@line 26551
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 26554
    } else {
     $$045$i$i = $257; //@line 26556
     $$06$i$i = 0; //@line 26556
     $262 = $256; //@line 26556
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 26558
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 26560
      HEAP32[$88 >> 2] = $262; //@line 26561
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 26564
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 26567
       break;
      } else {
       $$06$i$i = $265; //@line 26570
      }
     }
    }
    HEAP32[$120 >> 2] = $$0$lcssa$i$i; //@line 26574
    $$reg2mem$0 = $157; //@line 26575
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3844, 4107, $8); //@line 26579
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3844, 4165, $56); //@line 26584
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$40 >> 2] | 0; //@line 26589
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 26590
     $179 = FUNCTION_TABLE_ii[$178 & 31](68) | 0; //@line 26591
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 26594
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 26595
      HEAP32[$180 >> 2] = $2; //@line 26596
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 26597
      HEAP32[$181 >> 2] = $4; //@line 26598
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 26599
      HEAP32[$182 >> 2] = $6; //@line 26600
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 26601
      HEAP32[$183 >> 2] = $8; //@line 26602
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 26603
      HEAP32[$184 >> 2] = $132; //@line 26604
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 26605
      HEAP32[$185 >> 2] = $12; //@line 26606
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 26607
      HEAP16[$186 >> 1] = $trunc$i; //@line 26608
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 26609
      HEAP32[$187 >> 2] = $10; //@line 26610
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 26611
      HEAP32[$188 >> 2] = $16; //@line 26612
      $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 26613
      HEAP32[$189 >> 2] = $18; //@line 26614
      $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 26615
      HEAP32[$190 >> 2] = $20; //@line 26616
      $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 26617
      HEAP32[$191 >> 2] = $22; //@line 26618
      $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 26619
      HEAP32[$192 >> 2] = $24; //@line 26620
      $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 26621
      HEAP32[$193 >> 2] = $26; //@line 26622
      $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 26623
      HEAP32[$194 >> 2] = $28; //@line 26624
      $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 26625
      HEAP32[$195 >> 2] = $30; //@line 26626
      $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 26627
      HEAP32[$196 >> 2] = $32; //@line 26628
      $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 26629
      HEAP32[$197 >> 2] = $34; //@line 26630
      $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 26631
      HEAP32[$198 >> 2] = $36; //@line 26632
      $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 26633
      HEAP32[$199 >> 2] = $38; //@line 26634
      $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 26635
      HEAP32[$200 >> 2] = $40; //@line 26636
      $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 26637
      HEAP32[$201 >> 2] = $42; //@line 26638
      $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 26639
      HEAP32[$202 >> 2] = $44; //@line 26640
      $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 26641
      HEAP32[$203 >> 2] = $46; //@line 26642
      $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 26643
      HEAP32[$204 >> 2] = $48; //@line 26644
      $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 26645
      HEAP32[$205 >> 2] = $50; //@line 26646
      $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 26647
      HEAP32[$206 >> 2] = $52; //@line 26648
      $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 26649
      HEAP16[$207 >> 1] = $175; //@line 26650
      $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 26651
      HEAP32[$208 >> 2] = $54; //@line 26652
      $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 26653
      HEAP32[$209 >> 2] = $56; //@line 26654
      $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 26655
      HEAP32[$210 >> 2] = $58; //@line 26656
      $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 26657
      HEAP32[$211 >> 2] = $60; //@line 26658
      $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 26659
      HEAP32[$212 >> 2] = $62; //@line 26660
      $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 26661
      HEAP32[$213 >> 2] = $64; //@line 26662
      $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 26663
      HEAP32[$214 >> 2] = $66; //@line 26664
      $215 = $ReallocAsyncCtx3 + 144 | 0; //@line 26665
      HEAP32[$215 >> 2] = $68; //@line 26666
      $216 = $ReallocAsyncCtx3 + 148 | 0; //@line 26667
      HEAP32[$216 >> 2] = $70; //@line 26668
      $217 = $ReallocAsyncCtx3 + 152 | 0; //@line 26669
      HEAP32[$217 >> 2] = $72; //@line 26670
      $218 = $ReallocAsyncCtx3 + 156 | 0; //@line 26671
      HEAP32[$218 >> 2] = $74; //@line 26672
      $219 = $ReallocAsyncCtx3 + 160 | 0; //@line 26673
      HEAP32[$219 >> 2] = $76; //@line 26674
      $220 = $ReallocAsyncCtx3 + 164 | 0; //@line 26675
      HEAP32[$220 >> 2] = $78; //@line 26676
      $221 = $ReallocAsyncCtx3 + 168 | 0; //@line 26677
      HEAP32[$221 >> 2] = $80; //@line 26678
      $222 = $ReallocAsyncCtx3 + 172 | 0; //@line 26679
      HEAP32[$222 >> 2] = $82; //@line 26680
      $223 = $ReallocAsyncCtx3 + 176 | 0; //@line 26681
      HEAP32[$223 >> 2] = $$1202$in$i; //@line 26682
      $224 = $ReallocAsyncCtx3 + 180 | 0; //@line 26683
      HEAP32[$224 >> 2] = $84; //@line 26684
      $225 = $ReallocAsyncCtx3 + 184 | 0; //@line 26685
      HEAP32[$225 >> 2] = $86; //@line 26686
      $226 = $ReallocAsyncCtx3 + 188 | 0; //@line 26687
      HEAP32[$226 >> 2] = $88; //@line 26688
      $227 = $ReallocAsyncCtx3 + 192 | 0; //@line 26689
      HEAP32[$227 >> 2] = $90; //@line 26690
      $228 = $ReallocAsyncCtx3 + 196 | 0; //@line 26691
      HEAP16[$228 >> 1] = $$1202$i; //@line 26692
      $229 = $ReallocAsyncCtx3 + 200 | 0; //@line 26693
      HEAP32[$229 >> 2] = $92; //@line 26694
      $230 = $ReallocAsyncCtx3 + 204 | 0; //@line 26695
      HEAP32[$230 >> 2] = $96; //@line 26696
      $231 = $ReallocAsyncCtx3 + 208 | 0; //@line 26697
      HEAP32[$231 >> 2] = $98; //@line 26698
      $232 = $ReallocAsyncCtx3 + 212 | 0; //@line 26699
      HEAP32[$232 >> 2] = $94; //@line 26700
      $233 = $ReallocAsyncCtx3 + 216 | 0; //@line 26701
      HEAP32[$233 >> 2] = $102; //@line 26702
      $234 = $ReallocAsyncCtx3 + 220 | 0; //@line 26703
      HEAP32[$234 >> 2] = $100; //@line 26704
      $235 = $ReallocAsyncCtx3 + 224 | 0; //@line 26705
      HEAP32[$235 >> 2] = $104; //@line 26706
      $236 = $ReallocAsyncCtx3 + 228 | 0; //@line 26707
      HEAP32[$236 >> 2] = $106; //@line 26708
      $237 = $ReallocAsyncCtx3 + 232 | 0; //@line 26709
      HEAP32[$237 >> 2] = $108; //@line 26710
      $238 = $ReallocAsyncCtx3 + 236 | 0; //@line 26711
      HEAP32[$238 >> 2] = $110; //@line 26712
      $239 = $ReallocAsyncCtx3 + 240 | 0; //@line 26713
      HEAP32[$239 >> 2] = $112; //@line 26714
      $240 = $ReallocAsyncCtx3 + 244 | 0; //@line 26715
      HEAP32[$240 >> 2] = $241; //@line 26716
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 26717
      HEAP32[$242 >> 2] = $114; //@line 26718
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 26719
      HEAP32[$243 >> 2] = $116; //@line 26720
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 26721
      HEAP32[$244 >> 2] = $118; //@line 26722
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 26723
      HEAP32[$245 >> 2] = $120; //@line 26724
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 26725
      HEAP32[$246 >> 2] = $157; //@line 26726
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 26727
      HEAP32[$247 >> 2] = $124; //@line 26728
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 26729
      HEAP32[$248 >> 2] = $126; //@line 26730
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 26731
      HEAP32[$249 >> 2] = $128; //@line 26732
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 26733
      HEAP32[$250 >> 2] = $130; //@line 26734
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 26735
      HEAP32[$251 >> 2] = $14; //@line 26736
      sp = STACKTOP; //@line 26737
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 26741
     ___async_unwind = 0; //@line 26742
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 26743
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 26744
     HEAP32[$180 >> 2] = $2; //@line 26745
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 26746
     HEAP32[$181 >> 2] = $4; //@line 26747
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 26748
     HEAP32[$182 >> 2] = $6; //@line 26749
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 26750
     HEAP32[$183 >> 2] = $8; //@line 26751
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 26752
     HEAP32[$184 >> 2] = $132; //@line 26753
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 26754
     HEAP32[$185 >> 2] = $12; //@line 26755
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 26756
     HEAP16[$186 >> 1] = $trunc$i; //@line 26757
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 26758
     HEAP32[$187 >> 2] = $10; //@line 26759
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 26760
     HEAP32[$188 >> 2] = $16; //@line 26761
     $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 26762
     HEAP32[$189 >> 2] = $18; //@line 26763
     $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 26764
     HEAP32[$190 >> 2] = $20; //@line 26765
     $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 26766
     HEAP32[$191 >> 2] = $22; //@line 26767
     $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 26768
     HEAP32[$192 >> 2] = $24; //@line 26769
     $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 26770
     HEAP32[$193 >> 2] = $26; //@line 26771
     $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 26772
     HEAP32[$194 >> 2] = $28; //@line 26773
     $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 26774
     HEAP32[$195 >> 2] = $30; //@line 26775
     $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 26776
     HEAP32[$196 >> 2] = $32; //@line 26777
     $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 26778
     HEAP32[$197 >> 2] = $34; //@line 26779
     $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 26780
     HEAP32[$198 >> 2] = $36; //@line 26781
     $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 26782
     HEAP32[$199 >> 2] = $38; //@line 26783
     $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 26784
     HEAP32[$200 >> 2] = $40; //@line 26785
     $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 26786
     HEAP32[$201 >> 2] = $42; //@line 26787
     $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 26788
     HEAP32[$202 >> 2] = $44; //@line 26789
     $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 26790
     HEAP32[$203 >> 2] = $46; //@line 26791
     $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 26792
     HEAP32[$204 >> 2] = $48; //@line 26793
     $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 26794
     HEAP32[$205 >> 2] = $50; //@line 26795
     $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 26796
     HEAP32[$206 >> 2] = $52; //@line 26797
     $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 26798
     HEAP16[$207 >> 1] = $175; //@line 26799
     $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 26800
     HEAP32[$208 >> 2] = $54; //@line 26801
     $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 26802
     HEAP32[$209 >> 2] = $56; //@line 26803
     $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 26804
     HEAP32[$210 >> 2] = $58; //@line 26805
     $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 26806
     HEAP32[$211 >> 2] = $60; //@line 26807
     $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 26808
     HEAP32[$212 >> 2] = $62; //@line 26809
     $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 26810
     HEAP32[$213 >> 2] = $64; //@line 26811
     $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 26812
     HEAP32[$214 >> 2] = $66; //@line 26813
     $215 = $ReallocAsyncCtx3 + 144 | 0; //@line 26814
     HEAP32[$215 >> 2] = $68; //@line 26815
     $216 = $ReallocAsyncCtx3 + 148 | 0; //@line 26816
     HEAP32[$216 >> 2] = $70; //@line 26817
     $217 = $ReallocAsyncCtx3 + 152 | 0; //@line 26818
     HEAP32[$217 >> 2] = $72; //@line 26819
     $218 = $ReallocAsyncCtx3 + 156 | 0; //@line 26820
     HEAP32[$218 >> 2] = $74; //@line 26821
     $219 = $ReallocAsyncCtx3 + 160 | 0; //@line 26822
     HEAP32[$219 >> 2] = $76; //@line 26823
     $220 = $ReallocAsyncCtx3 + 164 | 0; //@line 26824
     HEAP32[$220 >> 2] = $78; //@line 26825
     $221 = $ReallocAsyncCtx3 + 168 | 0; //@line 26826
     HEAP32[$221 >> 2] = $80; //@line 26827
     $222 = $ReallocAsyncCtx3 + 172 | 0; //@line 26828
     HEAP32[$222 >> 2] = $82; //@line 26829
     $223 = $ReallocAsyncCtx3 + 176 | 0; //@line 26830
     HEAP32[$223 >> 2] = $$1202$in$i; //@line 26831
     $224 = $ReallocAsyncCtx3 + 180 | 0; //@line 26832
     HEAP32[$224 >> 2] = $84; //@line 26833
     $225 = $ReallocAsyncCtx3 + 184 | 0; //@line 26834
     HEAP32[$225 >> 2] = $86; //@line 26835
     $226 = $ReallocAsyncCtx3 + 188 | 0; //@line 26836
     HEAP32[$226 >> 2] = $88; //@line 26837
     $227 = $ReallocAsyncCtx3 + 192 | 0; //@line 26838
     HEAP32[$227 >> 2] = $90; //@line 26839
     $228 = $ReallocAsyncCtx3 + 196 | 0; //@line 26840
     HEAP16[$228 >> 1] = $$1202$i; //@line 26841
     $229 = $ReallocAsyncCtx3 + 200 | 0; //@line 26842
     HEAP32[$229 >> 2] = $92; //@line 26843
     $230 = $ReallocAsyncCtx3 + 204 | 0; //@line 26844
     HEAP32[$230 >> 2] = $96; //@line 26845
     $231 = $ReallocAsyncCtx3 + 208 | 0; //@line 26846
     HEAP32[$231 >> 2] = $98; //@line 26847
     $232 = $ReallocAsyncCtx3 + 212 | 0; //@line 26848
     HEAP32[$232 >> 2] = $94; //@line 26849
     $233 = $ReallocAsyncCtx3 + 216 | 0; //@line 26850
     HEAP32[$233 >> 2] = $102; //@line 26851
     $234 = $ReallocAsyncCtx3 + 220 | 0; //@line 26852
     HEAP32[$234 >> 2] = $100; //@line 26853
     $235 = $ReallocAsyncCtx3 + 224 | 0; //@line 26854
     HEAP32[$235 >> 2] = $104; //@line 26855
     $236 = $ReallocAsyncCtx3 + 228 | 0; //@line 26856
     HEAP32[$236 >> 2] = $106; //@line 26857
     $237 = $ReallocAsyncCtx3 + 232 | 0; //@line 26858
     HEAP32[$237 >> 2] = $108; //@line 26859
     $238 = $ReallocAsyncCtx3 + 236 | 0; //@line 26860
     HEAP32[$238 >> 2] = $110; //@line 26861
     $239 = $ReallocAsyncCtx3 + 240 | 0; //@line 26862
     HEAP32[$239 >> 2] = $112; //@line 26863
     $240 = $ReallocAsyncCtx3 + 244 | 0; //@line 26864
     HEAP32[$240 >> 2] = $241; //@line 26865
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 26866
     HEAP32[$242 >> 2] = $114; //@line 26867
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 26868
     HEAP32[$243 >> 2] = $116; //@line 26869
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 26870
     HEAP32[$244 >> 2] = $118; //@line 26871
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 26872
     HEAP32[$245 >> 2] = $120; //@line 26873
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 26874
     HEAP32[$246 >> 2] = $157; //@line 26875
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 26876
     HEAP32[$247 >> 2] = $124; //@line 26877
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 26878
     HEAP32[$248 >> 2] = $126; //@line 26879
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 26880
     HEAP32[$249 >> 2] = $128; //@line 26881
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 26882
     HEAP32[$250 >> 2] = $130; //@line 26883
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 26884
     HEAP32[$251 >> 2] = $14; //@line 26885
     sp = STACKTOP; //@line 26886
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3844, 4279, $86); //@line 26891
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3844, 4348, $4); //@line 26896
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 26901
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$38 >> 2] | 0; //@line 26905
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 26911
       $289 = $241 + 1 | 0; //@line 26912
       HEAP32[$88 >> 2] = $289; //@line 26913
       $290 = HEAP32[$40 >> 2] | 0; //@line 26914
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 26915
       $291 = FUNCTION_TABLE_ii[$290 & 31]($$1202$i) | 0; //@line 26916
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 26919
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 26920
        HEAP32[$292 >> 2] = $2; //@line 26921
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 26922
        HEAP32[$293 >> 2] = $4; //@line 26923
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 26924
        HEAP32[$294 >> 2] = $6; //@line 26925
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 26926
        HEAP32[$295 >> 2] = $8; //@line 26927
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 26928
        HEAP32[$296 >> 2] = $132; //@line 26929
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 26930
        HEAP32[$297 >> 2] = $12; //@line 26931
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 26932
        HEAP32[$298 >> 2] = $10; //@line 26933
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 26934
        HEAP32[$299 >> 2] = $16; //@line 26935
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 26936
        HEAP32[$300 >> 2] = $18; //@line 26937
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 26938
        HEAP32[$301 >> 2] = $20; //@line 26939
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 26940
        HEAP32[$302 >> 2] = $22; //@line 26941
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 26942
        HEAP32[$303 >> 2] = $24; //@line 26943
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 26944
        HEAP32[$304 >> 2] = $281; //@line 26945
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 26946
        HEAP32[$305 >> 2] = $26; //@line 26947
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 26948
        HEAP32[$306 >> 2] = $28; //@line 26949
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 26950
        HEAP32[$307 >> 2] = $30; //@line 26951
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 26952
        HEAP32[$308 >> 2] = $289; //@line 26953
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 26954
        HEAP32[$309 >> 2] = $32; //@line 26955
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 26956
        HEAP32[$310 >> 2] = $34; //@line 26957
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 26958
        HEAP32[$311 >> 2] = $36; //@line 26959
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 26960
        HEAP32[$312 >> 2] = $38; //@line 26961
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 26962
        HEAP32[$313 >> 2] = $40; //@line 26963
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 26964
        HEAP32[$314 >> 2] = $42; //@line 26965
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 26966
        HEAP32[$315 >> 2] = $44; //@line 26967
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 26968
        HEAP32[$316 >> 2] = $46; //@line 26969
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 26970
        HEAP32[$317 >> 2] = $48; //@line 26971
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 26972
        HEAP32[$318 >> 2] = $50; //@line 26973
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 26974
        HEAP32[$319 >> 2] = $52; //@line 26975
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 26976
        HEAP32[$320 >> 2] = $54; //@line 26977
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 26978
        HEAP32[$321 >> 2] = $56; //@line 26979
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 26980
        HEAP32[$322 >> 2] = $58; //@line 26981
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 26982
        HEAP32[$323 >> 2] = $60; //@line 26983
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 26984
        HEAP32[$324 >> 2] = $62; //@line 26985
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 26986
        HEAP32[$325 >> 2] = $64; //@line 26987
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 26988
        HEAP32[$326 >> 2] = $66; //@line 26989
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 26990
        HEAP32[$327 >> 2] = $68; //@line 26991
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 26992
        HEAP32[$328 >> 2] = $70; //@line 26993
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 26994
        HEAP32[$329 >> 2] = $72; //@line 26995
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 26996
        HEAP32[$330 >> 2] = $74; //@line 26997
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 26998
        HEAP32[$331 >> 2] = $76; //@line 26999
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 27000
        HEAP32[$332 >> 2] = $78; //@line 27001
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 27002
        HEAP32[$333 >> 2] = $80; //@line 27003
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 27004
        HEAP32[$334 >> 2] = $82; //@line 27005
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 27006
        HEAP32[$335 >> 2] = $84; //@line 27007
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 27008
        HEAP32[$336 >> 2] = $86; //@line 27009
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 27010
        HEAP32[$337 >> 2] = $88; //@line 27011
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 27012
        HEAP32[$338 >> 2] = $90; //@line 27013
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 27014
        HEAP32[$339 >> 2] = $92; //@line 27015
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 27016
        HEAP32[$340 >> 2] = $94; //@line 27017
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 27018
        HEAP32[$341 >> 2] = $96; //@line 27019
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 27020
        HEAP32[$342 >> 2] = $98; //@line 27021
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 27022
        HEAP32[$343 >> 2] = $100; //@line 27023
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 27024
        HEAP32[$344 >> 2] = $102; //@line 27025
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 27026
        HEAP32[$345 >> 2] = $104; //@line 27027
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 27028
        HEAP32[$346 >> 2] = $106; //@line 27029
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 27030
        HEAP32[$347 >> 2] = $108; //@line 27031
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 27032
        HEAP32[$348 >> 2] = $110; //@line 27033
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 27034
        HEAP32[$349 >> 2] = $112; //@line 27035
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 27036
        HEAP32[$350 >> 2] = $114; //@line 27037
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 27038
        HEAP32[$351 >> 2] = $116; //@line 27039
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 27040
        HEAP32[$352 >> 2] = $118; //@line 27041
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 27042
        HEAP32[$353 >> 2] = $120; //@line 27043
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 27044
        HEAP32[$354 >> 2] = $157; //@line 27045
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 27046
        HEAP32[$355 >> 2] = $124; //@line 27047
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 27048
        HEAP32[$356 >> 2] = $126; //@line 27049
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 27050
        HEAP32[$357 >> 2] = $128; //@line 27051
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 27052
        HEAP32[$358 >> 2] = $130; //@line 27053
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 27054
        HEAP32[$359 >> 2] = $14; //@line 27055
        sp = STACKTOP; //@line 27056
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 27060
       ___async_unwind = 0; //@line 27061
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 27062
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 27063
       HEAP32[$292 >> 2] = $2; //@line 27064
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 27065
       HEAP32[$293 >> 2] = $4; //@line 27066
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 27067
       HEAP32[$294 >> 2] = $6; //@line 27068
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 27069
       HEAP32[$295 >> 2] = $8; //@line 27070
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 27071
       HEAP32[$296 >> 2] = $132; //@line 27072
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 27073
       HEAP32[$297 >> 2] = $12; //@line 27074
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 27075
       HEAP32[$298 >> 2] = $10; //@line 27076
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 27077
       HEAP32[$299 >> 2] = $16; //@line 27078
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 27079
       HEAP32[$300 >> 2] = $18; //@line 27080
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 27081
       HEAP32[$301 >> 2] = $20; //@line 27082
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 27083
       HEAP32[$302 >> 2] = $22; //@line 27084
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 27085
       HEAP32[$303 >> 2] = $24; //@line 27086
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 27087
       HEAP32[$304 >> 2] = $281; //@line 27088
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 27089
       HEAP32[$305 >> 2] = $26; //@line 27090
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 27091
       HEAP32[$306 >> 2] = $28; //@line 27092
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 27093
       HEAP32[$307 >> 2] = $30; //@line 27094
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 27095
       HEAP32[$308 >> 2] = $289; //@line 27096
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 27097
       HEAP32[$309 >> 2] = $32; //@line 27098
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 27099
       HEAP32[$310 >> 2] = $34; //@line 27100
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 27101
       HEAP32[$311 >> 2] = $36; //@line 27102
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 27103
       HEAP32[$312 >> 2] = $38; //@line 27104
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 27105
       HEAP32[$313 >> 2] = $40; //@line 27106
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 27107
       HEAP32[$314 >> 2] = $42; //@line 27108
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 27109
       HEAP32[$315 >> 2] = $44; //@line 27110
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 27111
       HEAP32[$316 >> 2] = $46; //@line 27112
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 27113
       HEAP32[$317 >> 2] = $48; //@line 27114
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 27115
       HEAP32[$318 >> 2] = $50; //@line 27116
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 27117
       HEAP32[$319 >> 2] = $52; //@line 27118
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 27119
       HEAP32[$320 >> 2] = $54; //@line 27120
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 27121
       HEAP32[$321 >> 2] = $56; //@line 27122
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 27123
       HEAP32[$322 >> 2] = $58; //@line 27124
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 27125
       HEAP32[$323 >> 2] = $60; //@line 27126
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 27127
       HEAP32[$324 >> 2] = $62; //@line 27128
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 27129
       HEAP32[$325 >> 2] = $64; //@line 27130
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 27131
       HEAP32[$326 >> 2] = $66; //@line 27132
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 27133
       HEAP32[$327 >> 2] = $68; //@line 27134
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 27135
       HEAP32[$328 >> 2] = $70; //@line 27136
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 27137
       HEAP32[$329 >> 2] = $72; //@line 27138
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 27139
       HEAP32[$330 >> 2] = $74; //@line 27140
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 27141
       HEAP32[$331 >> 2] = $76; //@line 27142
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 27143
       HEAP32[$332 >> 2] = $78; //@line 27144
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 27145
       HEAP32[$333 >> 2] = $80; //@line 27146
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 27147
       HEAP32[$334 >> 2] = $82; //@line 27148
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 27149
       HEAP32[$335 >> 2] = $84; //@line 27150
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 27151
       HEAP32[$336 >> 2] = $86; //@line 27152
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 27153
       HEAP32[$337 >> 2] = $88; //@line 27154
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 27155
       HEAP32[$338 >> 2] = $90; //@line 27156
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 27157
       HEAP32[$339 >> 2] = $92; //@line 27158
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 27159
       HEAP32[$340 >> 2] = $94; //@line 27160
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 27161
       HEAP32[$341 >> 2] = $96; //@line 27162
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 27163
       HEAP32[$342 >> 2] = $98; //@line 27164
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 27165
       HEAP32[$343 >> 2] = $100; //@line 27166
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 27167
       HEAP32[$344 >> 2] = $102; //@line 27168
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 27169
       HEAP32[$345 >> 2] = $104; //@line 27170
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 27171
       HEAP32[$346 >> 2] = $106; //@line 27172
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 27173
       HEAP32[$347 >> 2] = $108; //@line 27174
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 27175
       HEAP32[$348 >> 2] = $110; //@line 27176
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 27177
       HEAP32[$349 >> 2] = $112; //@line 27178
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 27179
       HEAP32[$350 >> 2] = $114; //@line 27180
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 27181
       HEAP32[$351 >> 2] = $116; //@line 27182
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 27183
       HEAP32[$352 >> 2] = $118; //@line 27184
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 27185
       HEAP32[$353 >> 2] = $120; //@line 27186
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 27187
       HEAP32[$354 >> 2] = $157; //@line 27188
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 27189
       HEAP32[$355 >> 2] = $124; //@line 27190
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 27191
       HEAP32[$356 >> 2] = $126; //@line 27192
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 27193
       HEAP32[$357 >> 2] = $128; //@line 27194
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 27195
       HEAP32[$358 >> 2] = $130; //@line 27196
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 27197
       HEAP32[$359 >> 2] = $14; //@line 27198
       sp = STACKTOP; //@line 27199
       return;
      }
     }
     _mbed_tracef(2, 3844, 4410, $50); //@line 27203
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$38 >> 2] | 0; //@line 27208
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 27210
     $363 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 27211
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 27214
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 27215
      HEAP32[$364 >> 2] = $2; //@line 27216
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 27217
      HEAP32[$365 >> 2] = $4; //@line 27218
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 27219
      HEAP32[$366 >> 2] = $6; //@line 27220
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 27221
      HEAP32[$367 >> 2] = $8; //@line 27222
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 27223
      HEAP32[$368 >> 2] = $10; //@line 27224
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 27225
      HEAP32[$369 >> 2] = $12; //@line 27226
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 27227
      HEAP32[$370 >> 2] = $14; //@line 27228
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 27229
      HEAP32[$371 >> 2] = $16; //@line 27230
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 27231
      HEAP32[$372 >> 2] = $18; //@line 27232
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 27233
      HEAP32[$373 >> 2] = $20; //@line 27234
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 27235
      HEAP32[$374 >> 2] = $22; //@line 27236
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 27237
      HEAP32[$375 >> 2] = $24; //@line 27238
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 27239
      HEAP32[$376 >> 2] = $26; //@line 27240
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 27241
      HEAP32[$377 >> 2] = $28; //@line 27242
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 27243
      HEAP32[$378 >> 2] = $30; //@line 27244
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 27245
      HEAP32[$379 >> 2] = $32; //@line 27246
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 27247
      HEAP32[$380 >> 2] = $34; //@line 27248
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 27249
      HEAP32[$381 >> 2] = $36; //@line 27250
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 27251
      HEAP32[$382 >> 2] = $38; //@line 27252
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 27253
      HEAP32[$383 >> 2] = $40; //@line 27254
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 27255
      HEAP32[$384 >> 2] = $42; //@line 27256
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 27257
      HEAP32[$385 >> 2] = $44; //@line 27258
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 27259
      HEAP32[$386 >> 2] = $46; //@line 27260
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 27261
      HEAP32[$387 >> 2] = $48; //@line 27262
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 27263
      HEAP32[$388 >> 2] = $50; //@line 27264
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 27265
      HEAP32[$389 >> 2] = $52; //@line 27266
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 27267
      HEAP32[$390 >> 2] = $54; //@line 27268
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 27269
      HEAP32[$391 >> 2] = $56; //@line 27270
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 27271
      HEAP32[$392 >> 2] = $58; //@line 27272
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 27273
      HEAP32[$393 >> 2] = $60; //@line 27274
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 27275
      HEAP32[$394 >> 2] = $62; //@line 27276
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 27277
      HEAP32[$395 >> 2] = $64; //@line 27278
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 27279
      HEAP32[$396 >> 2] = $66; //@line 27280
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 27281
      HEAP32[$397 >> 2] = $68; //@line 27282
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 27283
      HEAP32[$398 >> 2] = $70; //@line 27284
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 27285
      HEAP32[$399 >> 2] = $72; //@line 27286
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 27287
      HEAP32[$400 >> 2] = $74; //@line 27288
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 27289
      HEAP32[$401 >> 2] = $76; //@line 27290
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 27291
      HEAP32[$402 >> 2] = $78; //@line 27292
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 27293
      HEAP32[$403 >> 2] = $80; //@line 27294
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 27295
      HEAP32[$404 >> 2] = $82; //@line 27296
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 27297
      HEAP32[$405 >> 2] = $84; //@line 27298
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 27299
      HEAP32[$406 >> 2] = $86; //@line 27300
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 27301
      HEAP32[$407 >> 2] = $88; //@line 27302
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 27303
      HEAP32[$408 >> 2] = $90; //@line 27304
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 27305
      HEAP32[$409 >> 2] = $92; //@line 27306
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 27307
      HEAP32[$410 >> 2] = $94; //@line 27308
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 27309
      HEAP32[$411 >> 2] = $96; //@line 27310
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 27311
      HEAP32[$412 >> 2] = $98; //@line 27312
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 27313
      HEAP32[$413 >> 2] = $100; //@line 27314
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 27315
      HEAP32[$414 >> 2] = $102; //@line 27316
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 27317
      HEAP32[$415 >> 2] = $104; //@line 27318
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 27319
      HEAP32[$416 >> 2] = $106; //@line 27320
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 27321
      HEAP32[$417 >> 2] = $108; //@line 27322
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 27323
      HEAP32[$418 >> 2] = $110; //@line 27324
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 27325
      HEAP32[$419 >> 2] = $112; //@line 27326
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 27327
      HEAP32[$420 >> 2] = $114; //@line 27328
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 27329
      HEAP32[$421 >> 2] = $116; //@line 27330
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 27331
      HEAP32[$422 >> 2] = $118; //@line 27332
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 27333
      HEAP32[$423 >> 2] = $120; //@line 27334
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 27335
      HEAP32[$424 >> 2] = $157; //@line 27336
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 27337
      HEAP32[$425 >> 2] = $124; //@line 27338
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 27339
      HEAP32[$426 >> 2] = $126; //@line 27340
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 27341
      HEAP32[$427 >> 2] = $128; //@line 27342
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 27343
      HEAP32[$428 >> 2] = $130; //@line 27344
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 27345
      HEAP32[$429 >> 2] = $132; //@line 27346
      sp = STACKTOP; //@line 27347
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 27351
     ___async_unwind = 0; //@line 27352
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 27353
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 27354
     HEAP32[$364 >> 2] = $2; //@line 27355
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 27356
     HEAP32[$365 >> 2] = $4; //@line 27357
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 27358
     HEAP32[$366 >> 2] = $6; //@line 27359
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 27360
     HEAP32[$367 >> 2] = $8; //@line 27361
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 27362
     HEAP32[$368 >> 2] = $10; //@line 27363
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 27364
     HEAP32[$369 >> 2] = $12; //@line 27365
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 27366
     HEAP32[$370 >> 2] = $14; //@line 27367
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 27368
     HEAP32[$371 >> 2] = $16; //@line 27369
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 27370
     HEAP32[$372 >> 2] = $18; //@line 27371
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 27372
     HEAP32[$373 >> 2] = $20; //@line 27373
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 27374
     HEAP32[$374 >> 2] = $22; //@line 27375
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 27376
     HEAP32[$375 >> 2] = $24; //@line 27377
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 27378
     HEAP32[$376 >> 2] = $26; //@line 27379
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 27380
     HEAP32[$377 >> 2] = $28; //@line 27381
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 27382
     HEAP32[$378 >> 2] = $30; //@line 27383
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 27384
     HEAP32[$379 >> 2] = $32; //@line 27385
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 27386
     HEAP32[$380 >> 2] = $34; //@line 27387
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 27388
     HEAP32[$381 >> 2] = $36; //@line 27389
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 27390
     HEAP32[$382 >> 2] = $38; //@line 27391
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 27392
     HEAP32[$383 >> 2] = $40; //@line 27393
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 27394
     HEAP32[$384 >> 2] = $42; //@line 27395
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 27396
     HEAP32[$385 >> 2] = $44; //@line 27397
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 27398
     HEAP32[$386 >> 2] = $46; //@line 27399
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 27400
     HEAP32[$387 >> 2] = $48; //@line 27401
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 27402
     HEAP32[$388 >> 2] = $50; //@line 27403
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 27404
     HEAP32[$389 >> 2] = $52; //@line 27405
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 27406
     HEAP32[$390 >> 2] = $54; //@line 27407
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 27408
     HEAP32[$391 >> 2] = $56; //@line 27409
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 27410
     HEAP32[$392 >> 2] = $58; //@line 27411
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 27412
     HEAP32[$393 >> 2] = $60; //@line 27413
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 27414
     HEAP32[$394 >> 2] = $62; //@line 27415
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 27416
     HEAP32[$395 >> 2] = $64; //@line 27417
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 27418
     HEAP32[$396 >> 2] = $66; //@line 27419
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 27420
     HEAP32[$397 >> 2] = $68; //@line 27421
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 27422
     HEAP32[$398 >> 2] = $70; //@line 27423
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 27424
     HEAP32[$399 >> 2] = $72; //@line 27425
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 27426
     HEAP32[$400 >> 2] = $74; //@line 27427
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 27428
     HEAP32[$401 >> 2] = $76; //@line 27429
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 27430
     HEAP32[$402 >> 2] = $78; //@line 27431
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 27432
     HEAP32[$403 >> 2] = $80; //@line 27433
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 27434
     HEAP32[$404 >> 2] = $82; //@line 27435
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 27436
     HEAP32[$405 >> 2] = $84; //@line 27437
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 27438
     HEAP32[$406 >> 2] = $86; //@line 27439
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 27440
     HEAP32[$407 >> 2] = $88; //@line 27441
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 27442
     HEAP32[$408 >> 2] = $90; //@line 27443
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 27444
     HEAP32[$409 >> 2] = $92; //@line 27445
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 27446
     HEAP32[$410 >> 2] = $94; //@line 27447
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 27448
     HEAP32[$411 >> 2] = $96; //@line 27449
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 27450
     HEAP32[$412 >> 2] = $98; //@line 27451
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 27452
     HEAP32[$413 >> 2] = $100; //@line 27453
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 27454
     HEAP32[$414 >> 2] = $102; //@line 27455
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 27456
     HEAP32[$415 >> 2] = $104; //@line 27457
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 27458
     HEAP32[$416 >> 2] = $106; //@line 27459
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 27460
     HEAP32[$417 >> 2] = $108; //@line 27461
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 27462
     HEAP32[$418 >> 2] = $110; //@line 27463
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 27464
     HEAP32[$419 >> 2] = $112; //@line 27465
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 27466
     HEAP32[$420 >> 2] = $114; //@line 27467
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 27468
     HEAP32[$421 >> 2] = $116; //@line 27469
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 27470
     HEAP32[$422 >> 2] = $118; //@line 27471
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 27472
     HEAP32[$423 >> 2] = $120; //@line 27473
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 27474
     HEAP32[$424 >> 2] = $157; //@line 27475
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 27476
     HEAP32[$425 >> 2] = $124; //@line 27477
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 27478
     HEAP32[$426 >> 2] = $126; //@line 27479
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 27480
     HEAP32[$427 >> 2] = $128; //@line 27481
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 27482
     HEAP32[$428 >> 2] = $130; //@line 27483
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 27484
     HEAP32[$429 >> 2] = $132; //@line 27485
     sp = STACKTOP; //@line 27486
     return;
    }
   case 42:
    {
     $432 = $$1202$in$i & 65535; //@line 27491
     if (($$1202$i + -1 & 65535) <= 254) {
      $435 = HEAP32[$38 >> 2] | 0; //@line 27495
      if (!(HEAP32[$435 + 52 >> 2] | 0)) {
       HEAP16[$435 + 4 >> 1] = $$1202$i; //@line 27501
       $440 = $241 + 1 | 0; //@line 27502
       HEAP32[$88 >> 2] = $440; //@line 27503
       $441 = HEAP32[$40 >> 2] | 0; //@line 27504
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 27505
       $442 = FUNCTION_TABLE_ii[$441 & 31]($$1202$i) | 0; //@line 27506
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 27509
        $443 = $ReallocAsyncCtx5 + 4 | 0; //@line 27510
        HEAP32[$443 >> 2] = $2; //@line 27511
        $444 = $ReallocAsyncCtx5 + 8 | 0; //@line 27512
        HEAP32[$444 >> 2] = $4; //@line 27513
        $445 = $ReallocAsyncCtx5 + 12 | 0; //@line 27514
        HEAP32[$445 >> 2] = $432; //@line 27515
        $446 = $ReallocAsyncCtx5 + 16 | 0; //@line 27516
        HEAP32[$446 >> 2] = $6; //@line 27517
        $447 = $ReallocAsyncCtx5 + 20 | 0; //@line 27518
        HEAP32[$447 >> 2] = $8; //@line 27519
        $448 = $ReallocAsyncCtx5 + 24 | 0; //@line 27520
        HEAP32[$448 >> 2] = $132; //@line 27521
        $449 = $ReallocAsyncCtx5 + 28 | 0; //@line 27522
        HEAP32[$449 >> 2] = $12; //@line 27523
        $450 = $ReallocAsyncCtx5 + 32 | 0; //@line 27524
        HEAP32[$450 >> 2] = $10; //@line 27525
        $451 = $ReallocAsyncCtx5 + 36 | 0; //@line 27526
        HEAP32[$451 >> 2] = $16; //@line 27527
        $452 = $ReallocAsyncCtx5 + 40 | 0; //@line 27528
        HEAP32[$452 >> 2] = $440; //@line 27529
        $453 = $ReallocAsyncCtx5 + 44 | 0; //@line 27530
        HEAP32[$453 >> 2] = $18; //@line 27531
        $454 = $ReallocAsyncCtx5 + 48 | 0; //@line 27532
        HEAP32[$454 >> 2] = $20; //@line 27533
        $455 = $ReallocAsyncCtx5 + 52 | 0; //@line 27534
        HEAP32[$455 >> 2] = $22; //@line 27535
        $456 = $ReallocAsyncCtx5 + 56 | 0; //@line 27536
        HEAP32[$456 >> 2] = $24; //@line 27537
        $457 = $ReallocAsyncCtx5 + 60 | 0; //@line 27538
        HEAP32[$457 >> 2] = $26; //@line 27539
        $458 = $ReallocAsyncCtx5 + 64 | 0; //@line 27540
        HEAP32[$458 >> 2] = $28; //@line 27541
        $459 = $ReallocAsyncCtx5 + 68 | 0; //@line 27542
        HEAP32[$459 >> 2] = $30; //@line 27543
        $460 = $ReallocAsyncCtx5 + 72 | 0; //@line 27544
        HEAP32[$460 >> 2] = $32; //@line 27545
        $461 = $ReallocAsyncCtx5 + 76 | 0; //@line 27546
        HEAP32[$461 >> 2] = $34; //@line 27547
        $462 = $ReallocAsyncCtx5 + 80 | 0; //@line 27548
        HEAP32[$462 >> 2] = $36; //@line 27549
        $463 = $ReallocAsyncCtx5 + 84 | 0; //@line 27550
        HEAP32[$463 >> 2] = $38; //@line 27551
        $464 = $ReallocAsyncCtx5 + 88 | 0; //@line 27552
        HEAP32[$464 >> 2] = $40; //@line 27553
        $465 = $ReallocAsyncCtx5 + 92 | 0; //@line 27554
        HEAP32[$465 >> 2] = $42; //@line 27555
        $466 = $ReallocAsyncCtx5 + 96 | 0; //@line 27556
        HEAP32[$466 >> 2] = $44; //@line 27557
        $467 = $ReallocAsyncCtx5 + 100 | 0; //@line 27558
        HEAP32[$467 >> 2] = $46; //@line 27559
        $468 = $ReallocAsyncCtx5 + 104 | 0; //@line 27560
        HEAP32[$468 >> 2] = $48; //@line 27561
        $469 = $ReallocAsyncCtx5 + 108 | 0; //@line 27562
        HEAP32[$469 >> 2] = $50; //@line 27563
        $470 = $ReallocAsyncCtx5 + 112 | 0; //@line 27564
        HEAP32[$470 >> 2] = $52; //@line 27565
        $471 = $ReallocAsyncCtx5 + 116 | 0; //@line 27566
        HEAP32[$471 >> 2] = $54; //@line 27567
        $472 = $ReallocAsyncCtx5 + 120 | 0; //@line 27568
        HEAP32[$472 >> 2] = $56; //@line 27569
        $473 = $ReallocAsyncCtx5 + 124 | 0; //@line 27570
        HEAP32[$473 >> 2] = $58; //@line 27571
        $474 = $ReallocAsyncCtx5 + 128 | 0; //@line 27572
        HEAP32[$474 >> 2] = $60; //@line 27573
        $475 = $ReallocAsyncCtx5 + 132 | 0; //@line 27574
        HEAP32[$475 >> 2] = $62; //@line 27575
        $476 = $ReallocAsyncCtx5 + 136 | 0; //@line 27576
        HEAP32[$476 >> 2] = $64; //@line 27577
        $477 = $ReallocAsyncCtx5 + 140 | 0; //@line 27578
        HEAP32[$477 >> 2] = $66; //@line 27579
        $478 = $ReallocAsyncCtx5 + 144 | 0; //@line 27580
        HEAP32[$478 >> 2] = $68; //@line 27581
        $479 = $ReallocAsyncCtx5 + 148 | 0; //@line 27582
        HEAP32[$479 >> 2] = $70; //@line 27583
        $480 = $ReallocAsyncCtx5 + 152 | 0; //@line 27584
        HEAP32[$480 >> 2] = $72; //@line 27585
        $481 = $ReallocAsyncCtx5 + 156 | 0; //@line 27586
        HEAP32[$481 >> 2] = $74; //@line 27587
        $482 = $ReallocAsyncCtx5 + 160 | 0; //@line 27588
        HEAP32[$482 >> 2] = $76; //@line 27589
        $483 = $ReallocAsyncCtx5 + 164 | 0; //@line 27590
        HEAP32[$483 >> 2] = $78; //@line 27591
        $484 = $ReallocAsyncCtx5 + 168 | 0; //@line 27592
        HEAP32[$484 >> 2] = $80; //@line 27593
        $485 = $ReallocAsyncCtx5 + 172 | 0; //@line 27594
        HEAP32[$485 >> 2] = $82; //@line 27595
        $486 = $ReallocAsyncCtx5 + 176 | 0; //@line 27596
        HEAP32[$486 >> 2] = $84; //@line 27597
        $487 = $ReallocAsyncCtx5 + 180 | 0; //@line 27598
        HEAP32[$487 >> 2] = $86; //@line 27599
        $488 = $ReallocAsyncCtx5 + 184 | 0; //@line 27600
        HEAP32[$488 >> 2] = $88; //@line 27601
        $489 = $ReallocAsyncCtx5 + 188 | 0; //@line 27602
        HEAP32[$489 >> 2] = $90; //@line 27603
        $490 = $ReallocAsyncCtx5 + 192 | 0; //@line 27604
        HEAP32[$490 >> 2] = $92; //@line 27605
        $491 = $ReallocAsyncCtx5 + 196 | 0; //@line 27606
        HEAP32[$491 >> 2] = $94; //@line 27607
        $492 = $ReallocAsyncCtx5 + 200 | 0; //@line 27608
        HEAP32[$492 >> 2] = $96; //@line 27609
        $493 = $ReallocAsyncCtx5 + 204 | 0; //@line 27610
        HEAP32[$493 >> 2] = $98; //@line 27611
        $494 = $ReallocAsyncCtx5 + 208 | 0; //@line 27612
        HEAP32[$494 >> 2] = $100; //@line 27613
        $495 = $ReallocAsyncCtx5 + 212 | 0; //@line 27614
        HEAP32[$495 >> 2] = $102; //@line 27615
        $496 = $ReallocAsyncCtx5 + 216 | 0; //@line 27616
        HEAP32[$496 >> 2] = $104; //@line 27617
        $497 = $ReallocAsyncCtx5 + 220 | 0; //@line 27618
        HEAP32[$497 >> 2] = $106; //@line 27619
        $498 = $ReallocAsyncCtx5 + 224 | 0; //@line 27620
        HEAP32[$498 >> 2] = $108; //@line 27621
        $499 = $ReallocAsyncCtx5 + 228 | 0; //@line 27622
        HEAP32[$499 >> 2] = $110; //@line 27623
        $500 = $ReallocAsyncCtx5 + 232 | 0; //@line 27624
        HEAP32[$500 >> 2] = $112; //@line 27625
        $501 = $ReallocAsyncCtx5 + 236 | 0; //@line 27626
        HEAP32[$501 >> 2] = $114; //@line 27627
        $502 = $ReallocAsyncCtx5 + 240 | 0; //@line 27628
        HEAP32[$502 >> 2] = $116; //@line 27629
        $503 = $ReallocAsyncCtx5 + 244 | 0; //@line 27630
        HEAP32[$503 >> 2] = $118; //@line 27631
        $504 = $ReallocAsyncCtx5 + 248 | 0; //@line 27632
        HEAP32[$504 >> 2] = $120; //@line 27633
        $505 = $ReallocAsyncCtx5 + 252 | 0; //@line 27634
        HEAP32[$505 >> 2] = $157; //@line 27635
        $506 = $ReallocAsyncCtx5 + 256 | 0; //@line 27636
        HEAP32[$506 >> 2] = $124; //@line 27637
        $507 = $ReallocAsyncCtx5 + 260 | 0; //@line 27638
        HEAP32[$507 >> 2] = $126; //@line 27639
        $508 = $ReallocAsyncCtx5 + 264 | 0; //@line 27640
        HEAP32[$508 >> 2] = $128; //@line 27641
        $509 = $ReallocAsyncCtx5 + 268 | 0; //@line 27642
        HEAP32[$509 >> 2] = $130; //@line 27643
        $510 = $ReallocAsyncCtx5 + 272 | 0; //@line 27644
        HEAP32[$510 >> 2] = $14; //@line 27645
        sp = STACKTOP; //@line 27646
        return;
       }
       HEAP32[___async_retval >> 2] = $442; //@line 27650
       ___async_unwind = 0; //@line 27651
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 27652
       $443 = $ReallocAsyncCtx5 + 4 | 0; //@line 27653
       HEAP32[$443 >> 2] = $2; //@line 27654
       $444 = $ReallocAsyncCtx5 + 8 | 0; //@line 27655
       HEAP32[$444 >> 2] = $4; //@line 27656
       $445 = $ReallocAsyncCtx5 + 12 | 0; //@line 27657
       HEAP32[$445 >> 2] = $432; //@line 27658
       $446 = $ReallocAsyncCtx5 + 16 | 0; //@line 27659
       HEAP32[$446 >> 2] = $6; //@line 27660
       $447 = $ReallocAsyncCtx5 + 20 | 0; //@line 27661
       HEAP32[$447 >> 2] = $8; //@line 27662
       $448 = $ReallocAsyncCtx5 + 24 | 0; //@line 27663
       HEAP32[$448 >> 2] = $132; //@line 27664
       $449 = $ReallocAsyncCtx5 + 28 | 0; //@line 27665
       HEAP32[$449 >> 2] = $12; //@line 27666
       $450 = $ReallocAsyncCtx5 + 32 | 0; //@line 27667
       HEAP32[$450 >> 2] = $10; //@line 27668
       $451 = $ReallocAsyncCtx5 + 36 | 0; //@line 27669
       HEAP32[$451 >> 2] = $16; //@line 27670
       $452 = $ReallocAsyncCtx5 + 40 | 0; //@line 27671
       HEAP32[$452 >> 2] = $440; //@line 27672
       $453 = $ReallocAsyncCtx5 + 44 | 0; //@line 27673
       HEAP32[$453 >> 2] = $18; //@line 27674
       $454 = $ReallocAsyncCtx5 + 48 | 0; //@line 27675
       HEAP32[$454 >> 2] = $20; //@line 27676
       $455 = $ReallocAsyncCtx5 + 52 | 0; //@line 27677
       HEAP32[$455 >> 2] = $22; //@line 27678
       $456 = $ReallocAsyncCtx5 + 56 | 0; //@line 27679
       HEAP32[$456 >> 2] = $24; //@line 27680
       $457 = $ReallocAsyncCtx5 + 60 | 0; //@line 27681
       HEAP32[$457 >> 2] = $26; //@line 27682
       $458 = $ReallocAsyncCtx5 + 64 | 0; //@line 27683
       HEAP32[$458 >> 2] = $28; //@line 27684
       $459 = $ReallocAsyncCtx5 + 68 | 0; //@line 27685
       HEAP32[$459 >> 2] = $30; //@line 27686
       $460 = $ReallocAsyncCtx5 + 72 | 0; //@line 27687
       HEAP32[$460 >> 2] = $32; //@line 27688
       $461 = $ReallocAsyncCtx5 + 76 | 0; //@line 27689
       HEAP32[$461 >> 2] = $34; //@line 27690
       $462 = $ReallocAsyncCtx5 + 80 | 0; //@line 27691
       HEAP32[$462 >> 2] = $36; //@line 27692
       $463 = $ReallocAsyncCtx5 + 84 | 0; //@line 27693
       HEAP32[$463 >> 2] = $38; //@line 27694
       $464 = $ReallocAsyncCtx5 + 88 | 0; //@line 27695
       HEAP32[$464 >> 2] = $40; //@line 27696
       $465 = $ReallocAsyncCtx5 + 92 | 0; //@line 27697
       HEAP32[$465 >> 2] = $42; //@line 27698
       $466 = $ReallocAsyncCtx5 + 96 | 0; //@line 27699
       HEAP32[$466 >> 2] = $44; //@line 27700
       $467 = $ReallocAsyncCtx5 + 100 | 0; //@line 27701
       HEAP32[$467 >> 2] = $46; //@line 27702
       $468 = $ReallocAsyncCtx5 + 104 | 0; //@line 27703
       HEAP32[$468 >> 2] = $48; //@line 27704
       $469 = $ReallocAsyncCtx5 + 108 | 0; //@line 27705
       HEAP32[$469 >> 2] = $50; //@line 27706
       $470 = $ReallocAsyncCtx5 + 112 | 0; //@line 27707
       HEAP32[$470 >> 2] = $52; //@line 27708
       $471 = $ReallocAsyncCtx5 + 116 | 0; //@line 27709
       HEAP32[$471 >> 2] = $54; //@line 27710
       $472 = $ReallocAsyncCtx5 + 120 | 0; //@line 27711
       HEAP32[$472 >> 2] = $56; //@line 27712
       $473 = $ReallocAsyncCtx5 + 124 | 0; //@line 27713
       HEAP32[$473 >> 2] = $58; //@line 27714
       $474 = $ReallocAsyncCtx5 + 128 | 0; //@line 27715
       HEAP32[$474 >> 2] = $60; //@line 27716
       $475 = $ReallocAsyncCtx5 + 132 | 0; //@line 27717
       HEAP32[$475 >> 2] = $62; //@line 27718
       $476 = $ReallocAsyncCtx5 + 136 | 0; //@line 27719
       HEAP32[$476 >> 2] = $64; //@line 27720
       $477 = $ReallocAsyncCtx5 + 140 | 0; //@line 27721
       HEAP32[$477 >> 2] = $66; //@line 27722
       $478 = $ReallocAsyncCtx5 + 144 | 0; //@line 27723
       HEAP32[$478 >> 2] = $68; //@line 27724
       $479 = $ReallocAsyncCtx5 + 148 | 0; //@line 27725
       HEAP32[$479 >> 2] = $70; //@line 27726
       $480 = $ReallocAsyncCtx5 + 152 | 0; //@line 27727
       HEAP32[$480 >> 2] = $72; //@line 27728
       $481 = $ReallocAsyncCtx5 + 156 | 0; //@line 27729
       HEAP32[$481 >> 2] = $74; //@line 27730
       $482 = $ReallocAsyncCtx5 + 160 | 0; //@line 27731
       HEAP32[$482 >> 2] = $76; //@line 27732
       $483 = $ReallocAsyncCtx5 + 164 | 0; //@line 27733
       HEAP32[$483 >> 2] = $78; //@line 27734
       $484 = $ReallocAsyncCtx5 + 168 | 0; //@line 27735
       HEAP32[$484 >> 2] = $80; //@line 27736
       $485 = $ReallocAsyncCtx5 + 172 | 0; //@line 27737
       HEAP32[$485 >> 2] = $82; //@line 27738
       $486 = $ReallocAsyncCtx5 + 176 | 0; //@line 27739
       HEAP32[$486 >> 2] = $84; //@line 27740
       $487 = $ReallocAsyncCtx5 + 180 | 0; //@line 27741
       HEAP32[$487 >> 2] = $86; //@line 27742
       $488 = $ReallocAsyncCtx5 + 184 | 0; //@line 27743
       HEAP32[$488 >> 2] = $88; //@line 27744
       $489 = $ReallocAsyncCtx5 + 188 | 0; //@line 27745
       HEAP32[$489 >> 2] = $90; //@line 27746
       $490 = $ReallocAsyncCtx5 + 192 | 0; //@line 27747
       HEAP32[$490 >> 2] = $92; //@line 27748
       $491 = $ReallocAsyncCtx5 + 196 | 0; //@line 27749
       HEAP32[$491 >> 2] = $94; //@line 27750
       $492 = $ReallocAsyncCtx5 + 200 | 0; //@line 27751
       HEAP32[$492 >> 2] = $96; //@line 27752
       $493 = $ReallocAsyncCtx5 + 204 | 0; //@line 27753
       HEAP32[$493 >> 2] = $98; //@line 27754
       $494 = $ReallocAsyncCtx5 + 208 | 0; //@line 27755
       HEAP32[$494 >> 2] = $100; //@line 27756
       $495 = $ReallocAsyncCtx5 + 212 | 0; //@line 27757
       HEAP32[$495 >> 2] = $102; //@line 27758
       $496 = $ReallocAsyncCtx5 + 216 | 0; //@line 27759
       HEAP32[$496 >> 2] = $104; //@line 27760
       $497 = $ReallocAsyncCtx5 + 220 | 0; //@line 27761
       HEAP32[$497 >> 2] = $106; //@line 27762
       $498 = $ReallocAsyncCtx5 + 224 | 0; //@line 27763
       HEAP32[$498 >> 2] = $108; //@line 27764
       $499 = $ReallocAsyncCtx5 + 228 | 0; //@line 27765
       HEAP32[$499 >> 2] = $110; //@line 27766
       $500 = $ReallocAsyncCtx5 + 232 | 0; //@line 27767
       HEAP32[$500 >> 2] = $112; //@line 27768
       $501 = $ReallocAsyncCtx5 + 236 | 0; //@line 27769
       HEAP32[$501 >> 2] = $114; //@line 27770
       $502 = $ReallocAsyncCtx5 + 240 | 0; //@line 27771
       HEAP32[$502 >> 2] = $116; //@line 27772
       $503 = $ReallocAsyncCtx5 + 244 | 0; //@line 27773
       HEAP32[$503 >> 2] = $118; //@line 27774
       $504 = $ReallocAsyncCtx5 + 248 | 0; //@line 27775
       HEAP32[$504 >> 2] = $120; //@line 27776
       $505 = $ReallocAsyncCtx5 + 252 | 0; //@line 27777
       HEAP32[$505 >> 2] = $157; //@line 27778
       $506 = $ReallocAsyncCtx5 + 256 | 0; //@line 27779
       HEAP32[$506 >> 2] = $124; //@line 27780
       $507 = $ReallocAsyncCtx5 + 260 | 0; //@line 27781
       HEAP32[$507 >> 2] = $126; //@line 27782
       $508 = $ReallocAsyncCtx5 + 264 | 0; //@line 27783
       HEAP32[$508 >> 2] = $128; //@line 27784
       $509 = $ReallocAsyncCtx5 + 268 | 0; //@line 27785
       HEAP32[$509 >> 2] = $130; //@line 27786
       $510 = $ReallocAsyncCtx5 + 272 | 0; //@line 27787
       HEAP32[$510 >> 2] = $14; //@line 27788
       sp = STACKTOP; //@line 27789
       return;
      }
     }
     _mbed_tracef(2, 3844, 4605, $58); //@line 27793
     break L2;
     break;
    }
   case 48:
    {
     $512 = HEAP32[$38 >> 2] | 0; //@line 27798
     $513 = $512 + 56 | 0; //@line 27799
     if (HEAP32[$513 >> 2] | 0) {
      _mbed_tracef(2, 3844, 4739, $30); //@line 27803
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 27807
     $517 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $513, $512 + 6 | 0, 8, $$1202$i) | 0; //@line 27808
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 27811
      $518 = $ReallocAsyncCtx9 + 4 | 0; //@line 27812
      HEAP32[$518 >> 2] = $2; //@line 27813
      $519 = $ReallocAsyncCtx9 + 8 | 0; //@line 27814
      HEAP32[$519 >> 2] = $4; //@line 27815
      $520 = $ReallocAsyncCtx9 + 12 | 0; //@line 27816
      HEAP32[$520 >> 2] = $6; //@line 27817
      $521 = $ReallocAsyncCtx9 + 16 | 0; //@line 27818
      HEAP32[$521 >> 2] = $8; //@line 27819
      $522 = $ReallocAsyncCtx9 + 20 | 0; //@line 27820
      HEAP32[$522 >> 2] = $10; //@line 27821
      $523 = $ReallocAsyncCtx9 + 24 | 0; //@line 27822
      HEAP32[$523 >> 2] = $12; //@line 27823
      $524 = $ReallocAsyncCtx9 + 28 | 0; //@line 27824
      HEAP32[$524 >> 2] = $14; //@line 27825
      $525 = $ReallocAsyncCtx9 + 32 | 0; //@line 27826
      HEAP32[$525 >> 2] = $16; //@line 27827
      $526 = $ReallocAsyncCtx9 + 36 | 0; //@line 27828
      HEAP32[$526 >> 2] = $18; //@line 27829
      $527 = $ReallocAsyncCtx9 + 40 | 0; //@line 27830
      HEAP32[$527 >> 2] = $20; //@line 27831
      $528 = $ReallocAsyncCtx9 + 44 | 0; //@line 27832
      HEAP32[$528 >> 2] = $22; //@line 27833
      $529 = $ReallocAsyncCtx9 + 48 | 0; //@line 27834
      HEAP32[$529 >> 2] = $24; //@line 27835
      $530 = $ReallocAsyncCtx9 + 52 | 0; //@line 27836
      HEAP32[$530 >> 2] = $26; //@line 27837
      $531 = $ReallocAsyncCtx9 + 56 | 0; //@line 27838
      HEAP32[$531 >> 2] = $28; //@line 27839
      $532 = $ReallocAsyncCtx9 + 60 | 0; //@line 27840
      HEAP32[$532 >> 2] = $30; //@line 27841
      $533 = $ReallocAsyncCtx9 + 64 | 0; //@line 27842
      HEAP32[$533 >> 2] = $32; //@line 27843
      $534 = $ReallocAsyncCtx9 + 68 | 0; //@line 27844
      HEAP32[$534 >> 2] = $34; //@line 27845
      $535 = $ReallocAsyncCtx9 + 72 | 0; //@line 27846
      HEAP32[$535 >> 2] = $36; //@line 27847
      $536 = $ReallocAsyncCtx9 + 76 | 0; //@line 27848
      HEAP32[$536 >> 2] = $38; //@line 27849
      $537 = $ReallocAsyncCtx9 + 80 | 0; //@line 27850
      HEAP32[$537 >> 2] = $40; //@line 27851
      $538 = $ReallocAsyncCtx9 + 84 | 0; //@line 27852
      HEAP32[$538 >> 2] = $42; //@line 27853
      $539 = $ReallocAsyncCtx9 + 88 | 0; //@line 27854
      HEAP32[$539 >> 2] = $44; //@line 27855
      $540 = $ReallocAsyncCtx9 + 92 | 0; //@line 27856
      HEAP32[$540 >> 2] = $46; //@line 27857
      $541 = $ReallocAsyncCtx9 + 96 | 0; //@line 27858
      HEAP32[$541 >> 2] = $48; //@line 27859
      $542 = $ReallocAsyncCtx9 + 100 | 0; //@line 27860
      HEAP32[$542 >> 2] = $50; //@line 27861
      $543 = $ReallocAsyncCtx9 + 104 | 0; //@line 27862
      HEAP32[$543 >> 2] = $52; //@line 27863
      $544 = $ReallocAsyncCtx9 + 108 | 0; //@line 27864
      HEAP32[$544 >> 2] = $54; //@line 27865
      $545 = $ReallocAsyncCtx9 + 112 | 0; //@line 27866
      HEAP32[$545 >> 2] = $56; //@line 27867
      $546 = $ReallocAsyncCtx9 + 116 | 0; //@line 27868
      HEAP32[$546 >> 2] = $58; //@line 27869
      $547 = $ReallocAsyncCtx9 + 120 | 0; //@line 27870
      HEAP32[$547 >> 2] = $60; //@line 27871
      $548 = $ReallocAsyncCtx9 + 124 | 0; //@line 27872
      HEAP32[$548 >> 2] = $62; //@line 27873
      $549 = $ReallocAsyncCtx9 + 128 | 0; //@line 27874
      HEAP32[$549 >> 2] = $64; //@line 27875
      $550 = $ReallocAsyncCtx9 + 132 | 0; //@line 27876
      HEAP32[$550 >> 2] = $66; //@line 27877
      $551 = $ReallocAsyncCtx9 + 136 | 0; //@line 27878
      HEAP32[$551 >> 2] = $68; //@line 27879
      $552 = $ReallocAsyncCtx9 + 140 | 0; //@line 27880
      HEAP32[$552 >> 2] = $70; //@line 27881
      $553 = $ReallocAsyncCtx9 + 144 | 0; //@line 27882
      HEAP32[$553 >> 2] = $72; //@line 27883
      $554 = $ReallocAsyncCtx9 + 148 | 0; //@line 27884
      HEAP32[$554 >> 2] = $74; //@line 27885
      $555 = $ReallocAsyncCtx9 + 152 | 0; //@line 27886
      HEAP32[$555 >> 2] = $76; //@line 27887
      $556 = $ReallocAsyncCtx9 + 156 | 0; //@line 27888
      HEAP32[$556 >> 2] = $78; //@line 27889
      $557 = $ReallocAsyncCtx9 + 160 | 0; //@line 27890
      HEAP32[$557 >> 2] = $80; //@line 27891
      $558 = $ReallocAsyncCtx9 + 164 | 0; //@line 27892
      HEAP32[$558 >> 2] = $82; //@line 27893
      $559 = $ReallocAsyncCtx9 + 168 | 0; //@line 27894
      HEAP32[$559 >> 2] = $84; //@line 27895
      $560 = $ReallocAsyncCtx9 + 172 | 0; //@line 27896
      HEAP32[$560 >> 2] = $86; //@line 27897
      $561 = $ReallocAsyncCtx9 + 176 | 0; //@line 27898
      HEAP32[$561 >> 2] = $88; //@line 27899
      $562 = $ReallocAsyncCtx9 + 180 | 0; //@line 27900
      HEAP32[$562 >> 2] = $90; //@line 27901
      $563 = $ReallocAsyncCtx9 + 184 | 0; //@line 27902
      HEAP32[$563 >> 2] = $92; //@line 27903
      $564 = $ReallocAsyncCtx9 + 188 | 0; //@line 27904
      HEAP32[$564 >> 2] = $94; //@line 27905
      $565 = $ReallocAsyncCtx9 + 192 | 0; //@line 27906
      HEAP32[$565 >> 2] = $96; //@line 27907
      $566 = $ReallocAsyncCtx9 + 196 | 0; //@line 27908
      HEAP32[$566 >> 2] = $98; //@line 27909
      $567 = $ReallocAsyncCtx9 + 200 | 0; //@line 27910
      HEAP32[$567 >> 2] = $100; //@line 27911
      $568 = $ReallocAsyncCtx9 + 204 | 0; //@line 27912
      HEAP32[$568 >> 2] = $102; //@line 27913
      $569 = $ReallocAsyncCtx9 + 208 | 0; //@line 27914
      HEAP32[$569 >> 2] = $104; //@line 27915
      $570 = $ReallocAsyncCtx9 + 212 | 0; //@line 27916
      HEAP32[$570 >> 2] = $106; //@line 27917
      $571 = $ReallocAsyncCtx9 + 216 | 0; //@line 27918
      HEAP32[$571 >> 2] = $108; //@line 27919
      $572 = $ReallocAsyncCtx9 + 220 | 0; //@line 27920
      HEAP32[$572 >> 2] = $110; //@line 27921
      $573 = $ReallocAsyncCtx9 + 224 | 0; //@line 27922
      HEAP32[$573 >> 2] = $112; //@line 27923
      $574 = $ReallocAsyncCtx9 + 228 | 0; //@line 27924
      HEAP32[$574 >> 2] = $114; //@line 27925
      $575 = $ReallocAsyncCtx9 + 232 | 0; //@line 27926
      HEAP32[$575 >> 2] = $116; //@line 27927
      $576 = $ReallocAsyncCtx9 + 236 | 0; //@line 27928
      HEAP32[$576 >> 2] = $118; //@line 27929
      $577 = $ReallocAsyncCtx9 + 240 | 0; //@line 27930
      HEAP32[$577 >> 2] = $120; //@line 27931
      $578 = $ReallocAsyncCtx9 + 244 | 0; //@line 27932
      HEAP32[$578 >> 2] = $157; //@line 27933
      $579 = $ReallocAsyncCtx9 + 248 | 0; //@line 27934
      HEAP32[$579 >> 2] = $124; //@line 27935
      $580 = $ReallocAsyncCtx9 + 252 | 0; //@line 27936
      HEAP32[$580 >> 2] = $126; //@line 27937
      $581 = $ReallocAsyncCtx9 + 256 | 0; //@line 27938
      HEAP32[$581 >> 2] = $128; //@line 27939
      $582 = $ReallocAsyncCtx9 + 260 | 0; //@line 27940
      HEAP32[$582 >> 2] = $130; //@line 27941
      $583 = $ReallocAsyncCtx9 + 264 | 0; //@line 27942
      HEAP32[$583 >> 2] = $132; //@line 27943
      sp = STACKTOP; //@line 27944
      return;
     }
     HEAP8[___async_retval >> 0] = $517; //@line 27948
     ___async_unwind = 0; //@line 27949
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 27950
     $518 = $ReallocAsyncCtx9 + 4 | 0; //@line 27951
     HEAP32[$518 >> 2] = $2; //@line 27952
     $519 = $ReallocAsyncCtx9 + 8 | 0; //@line 27953
     HEAP32[$519 >> 2] = $4; //@line 27954
     $520 = $ReallocAsyncCtx9 + 12 | 0; //@line 27955
     HEAP32[$520 >> 2] = $6; //@line 27956
     $521 = $ReallocAsyncCtx9 + 16 | 0; //@line 27957
     HEAP32[$521 >> 2] = $8; //@line 27958
     $522 = $ReallocAsyncCtx9 + 20 | 0; //@line 27959
     HEAP32[$522 >> 2] = $10; //@line 27960
     $523 = $ReallocAsyncCtx9 + 24 | 0; //@line 27961
     HEAP32[$523 >> 2] = $12; //@line 27962
     $524 = $ReallocAsyncCtx9 + 28 | 0; //@line 27963
     HEAP32[$524 >> 2] = $14; //@line 27964
     $525 = $ReallocAsyncCtx9 + 32 | 0; //@line 27965
     HEAP32[$525 >> 2] = $16; //@line 27966
     $526 = $ReallocAsyncCtx9 + 36 | 0; //@line 27967
     HEAP32[$526 >> 2] = $18; //@line 27968
     $527 = $ReallocAsyncCtx9 + 40 | 0; //@line 27969
     HEAP32[$527 >> 2] = $20; //@line 27970
     $528 = $ReallocAsyncCtx9 + 44 | 0; //@line 27971
     HEAP32[$528 >> 2] = $22; //@line 27972
     $529 = $ReallocAsyncCtx9 + 48 | 0; //@line 27973
     HEAP32[$529 >> 2] = $24; //@line 27974
     $530 = $ReallocAsyncCtx9 + 52 | 0; //@line 27975
     HEAP32[$530 >> 2] = $26; //@line 27976
     $531 = $ReallocAsyncCtx9 + 56 | 0; //@line 27977
     HEAP32[$531 >> 2] = $28; //@line 27978
     $532 = $ReallocAsyncCtx9 + 60 | 0; //@line 27979
     HEAP32[$532 >> 2] = $30; //@line 27980
     $533 = $ReallocAsyncCtx9 + 64 | 0; //@line 27981
     HEAP32[$533 >> 2] = $32; //@line 27982
     $534 = $ReallocAsyncCtx9 + 68 | 0; //@line 27983
     HEAP32[$534 >> 2] = $34; //@line 27984
     $535 = $ReallocAsyncCtx9 + 72 | 0; //@line 27985
     HEAP32[$535 >> 2] = $36; //@line 27986
     $536 = $ReallocAsyncCtx9 + 76 | 0; //@line 27987
     HEAP32[$536 >> 2] = $38; //@line 27988
     $537 = $ReallocAsyncCtx9 + 80 | 0; //@line 27989
     HEAP32[$537 >> 2] = $40; //@line 27990
     $538 = $ReallocAsyncCtx9 + 84 | 0; //@line 27991
     HEAP32[$538 >> 2] = $42; //@line 27992
     $539 = $ReallocAsyncCtx9 + 88 | 0; //@line 27993
     HEAP32[$539 >> 2] = $44; //@line 27994
     $540 = $ReallocAsyncCtx9 + 92 | 0; //@line 27995
     HEAP32[$540 >> 2] = $46; //@line 27996
     $541 = $ReallocAsyncCtx9 + 96 | 0; //@line 27997
     HEAP32[$541 >> 2] = $48; //@line 27998
     $542 = $ReallocAsyncCtx9 + 100 | 0; //@line 27999
     HEAP32[$542 >> 2] = $50; //@line 28000
     $543 = $ReallocAsyncCtx9 + 104 | 0; //@line 28001
     HEAP32[$543 >> 2] = $52; //@line 28002
     $544 = $ReallocAsyncCtx9 + 108 | 0; //@line 28003
     HEAP32[$544 >> 2] = $54; //@line 28004
     $545 = $ReallocAsyncCtx9 + 112 | 0; //@line 28005
     HEAP32[$545 >> 2] = $56; //@line 28006
     $546 = $ReallocAsyncCtx9 + 116 | 0; //@line 28007
     HEAP32[$546 >> 2] = $58; //@line 28008
     $547 = $ReallocAsyncCtx9 + 120 | 0; //@line 28009
     HEAP32[$547 >> 2] = $60; //@line 28010
     $548 = $ReallocAsyncCtx9 + 124 | 0; //@line 28011
     HEAP32[$548 >> 2] = $62; //@line 28012
     $549 = $ReallocAsyncCtx9 + 128 | 0; //@line 28013
     HEAP32[$549 >> 2] = $64; //@line 28014
     $550 = $ReallocAsyncCtx9 + 132 | 0; //@line 28015
     HEAP32[$550 >> 2] = $66; //@line 28016
     $551 = $ReallocAsyncCtx9 + 136 | 0; //@line 28017
     HEAP32[$551 >> 2] = $68; //@line 28018
     $552 = $ReallocAsyncCtx9 + 140 | 0; //@line 28019
     HEAP32[$552 >> 2] = $70; //@line 28020
     $553 = $ReallocAsyncCtx9 + 144 | 0; //@line 28021
     HEAP32[$553 >> 2] = $72; //@line 28022
     $554 = $ReallocAsyncCtx9 + 148 | 0; //@line 28023
     HEAP32[$554 >> 2] = $74; //@line 28024
     $555 = $ReallocAsyncCtx9 + 152 | 0; //@line 28025
     HEAP32[$555 >> 2] = $76; //@line 28026
     $556 = $ReallocAsyncCtx9 + 156 | 0; //@line 28027
     HEAP32[$556 >> 2] = $78; //@line 28028
     $557 = $ReallocAsyncCtx9 + 160 | 0; //@line 28029
     HEAP32[$557 >> 2] = $80; //@line 28030
     $558 = $ReallocAsyncCtx9 + 164 | 0; //@line 28031
     HEAP32[$558 >> 2] = $82; //@line 28032
     $559 = $ReallocAsyncCtx9 + 168 | 0; //@line 28033
     HEAP32[$559 >> 2] = $84; //@line 28034
     $560 = $ReallocAsyncCtx9 + 172 | 0; //@line 28035
     HEAP32[$560 >> 2] = $86; //@line 28036
     $561 = $ReallocAsyncCtx9 + 176 | 0; //@line 28037
     HEAP32[$561 >> 2] = $88; //@line 28038
     $562 = $ReallocAsyncCtx9 + 180 | 0; //@line 28039
     HEAP32[$562 >> 2] = $90; //@line 28040
     $563 = $ReallocAsyncCtx9 + 184 | 0; //@line 28041
     HEAP32[$563 >> 2] = $92; //@line 28042
     $564 = $ReallocAsyncCtx9 + 188 | 0; //@line 28043
     HEAP32[$564 >> 2] = $94; //@line 28044
     $565 = $ReallocAsyncCtx9 + 192 | 0; //@line 28045
     HEAP32[$565 >> 2] = $96; //@line 28046
     $566 = $ReallocAsyncCtx9 + 196 | 0; //@line 28047
     HEAP32[$566 >> 2] = $98; //@line 28048
     $567 = $ReallocAsyncCtx9 + 200 | 0; //@line 28049
     HEAP32[$567 >> 2] = $100; //@line 28050
     $568 = $ReallocAsyncCtx9 + 204 | 0; //@line 28051
     HEAP32[$568 >> 2] = $102; //@line 28052
     $569 = $ReallocAsyncCtx9 + 208 | 0; //@line 28053
     HEAP32[$569 >> 2] = $104; //@line 28054
     $570 = $ReallocAsyncCtx9 + 212 | 0; //@line 28055
     HEAP32[$570 >> 2] = $106; //@line 28056
     $571 = $ReallocAsyncCtx9 + 216 | 0; //@line 28057
     HEAP32[$571 >> 2] = $108; //@line 28058
     $572 = $ReallocAsyncCtx9 + 220 | 0; //@line 28059
     HEAP32[$572 >> 2] = $110; //@line 28060
     $573 = $ReallocAsyncCtx9 + 224 | 0; //@line 28061
     HEAP32[$573 >> 2] = $112; //@line 28062
     $574 = $ReallocAsyncCtx9 + 228 | 0; //@line 28063
     HEAP32[$574 >> 2] = $114; //@line 28064
     $575 = $ReallocAsyncCtx9 + 232 | 0; //@line 28065
     HEAP32[$575 >> 2] = $116; //@line 28066
     $576 = $ReallocAsyncCtx9 + 236 | 0; //@line 28067
     HEAP32[$576 >> 2] = $118; //@line 28068
     $577 = $ReallocAsyncCtx9 + 240 | 0; //@line 28069
     HEAP32[$577 >> 2] = $120; //@line 28070
     $578 = $ReallocAsyncCtx9 + 244 | 0; //@line 28071
     HEAP32[$578 >> 2] = $157; //@line 28072
     $579 = $ReallocAsyncCtx9 + 248 | 0; //@line 28073
     HEAP32[$579 >> 2] = $124; //@line 28074
     $580 = $ReallocAsyncCtx9 + 252 | 0; //@line 28075
     HEAP32[$580 >> 2] = $126; //@line 28076
     $581 = $ReallocAsyncCtx9 + 256 | 0; //@line 28077
     HEAP32[$581 >> 2] = $128; //@line 28078
     $582 = $ReallocAsyncCtx9 + 260 | 0; //@line 28079
     HEAP32[$582 >> 2] = $130; //@line 28080
     $583 = $ReallocAsyncCtx9 + 264 | 0; //@line 28081
     HEAP32[$583 >> 2] = $132; //@line 28082
     sp = STACKTOP; //@line 28083
     return;
    }
   case 55:
    {
     _mbed_tracef(2, 3844, 4872, $126); //@line 28088
     break L2;
     break;
    }
   case 59:
    {
     $601 = HEAP32[$38 >> 2] | 0; //@line 28093
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 28096
     $604 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $601 + 60 | 0, $601 + 8 | 0, 20, $$1202$i) | 0; //@line 28097
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 28100
      $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 28101
      HEAP32[$605 >> 2] = $2; //@line 28102
      $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 28103
      HEAP32[$606 >> 2] = $4; //@line 28104
      $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 28105
      HEAP32[$607 >> 2] = $6; //@line 28106
      $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 28107
      HEAP32[$608 >> 2] = $8; //@line 28108
      $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 28109
      HEAP32[$609 >> 2] = $10; //@line 28110
      $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 28111
      HEAP32[$610 >> 2] = $12; //@line 28112
      $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 28113
      HEAP32[$611 >> 2] = $14; //@line 28114
      $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 28115
      HEAP32[$612 >> 2] = $16; //@line 28116
      $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 28117
      HEAP32[$613 >> 2] = $18; //@line 28118
      $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 28119
      HEAP32[$614 >> 2] = $20; //@line 28120
      $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 28121
      HEAP32[$615 >> 2] = $22; //@line 28122
      $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 28123
      HEAP32[$616 >> 2] = $24; //@line 28124
      $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 28125
      HEAP32[$617 >> 2] = $26; //@line 28126
      $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 28127
      HEAP32[$618 >> 2] = $28; //@line 28128
      $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 28129
      HEAP32[$619 >> 2] = $30; //@line 28130
      $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 28131
      HEAP32[$620 >> 2] = $32; //@line 28132
      $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 28133
      HEAP32[$621 >> 2] = $34; //@line 28134
      $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 28135
      HEAP32[$622 >> 2] = $36; //@line 28136
      $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 28137
      HEAP32[$623 >> 2] = $38; //@line 28138
      $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 28139
      HEAP32[$624 >> 2] = $40; //@line 28140
      $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 28141
      HEAP32[$625 >> 2] = $42; //@line 28142
      $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 28143
      HEAP32[$626 >> 2] = $44; //@line 28144
      $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 28145
      HEAP32[$627 >> 2] = $46; //@line 28146
      $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 28147
      HEAP32[$628 >> 2] = $48; //@line 28148
      $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 28149
      HEAP32[$629 >> 2] = $50; //@line 28150
      $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 28151
      HEAP32[$630 >> 2] = $52; //@line 28152
      $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 28153
      HEAP32[$631 >> 2] = $54; //@line 28154
      $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 28155
      HEAP32[$632 >> 2] = $56; //@line 28156
      $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 28157
      HEAP32[$633 >> 2] = $58; //@line 28158
      $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 28159
      HEAP32[$634 >> 2] = $60; //@line 28160
      $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 28161
      HEAP32[$635 >> 2] = $62; //@line 28162
      $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 28163
      HEAP32[$636 >> 2] = $64; //@line 28164
      $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 28165
      HEAP32[$637 >> 2] = $66; //@line 28166
      $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 28167
      HEAP32[$638 >> 2] = $68; //@line 28168
      $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 28169
      HEAP32[$639 >> 2] = $70; //@line 28170
      $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 28171
      HEAP32[$640 >> 2] = $72; //@line 28172
      $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 28173
      HEAP32[$641 >> 2] = $74; //@line 28174
      $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 28175
      HEAP32[$642 >> 2] = $76; //@line 28176
      $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 28177
      HEAP32[$643 >> 2] = $78; //@line 28178
      $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 28179
      HEAP32[$644 >> 2] = $80; //@line 28180
      $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 28181
      HEAP32[$645 >> 2] = $82; //@line 28182
      $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 28183
      HEAP32[$646 >> 2] = $84; //@line 28184
      $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 28185
      HEAP32[$647 >> 2] = $86; //@line 28186
      $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 28187
      HEAP32[$648 >> 2] = $88; //@line 28188
      $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 28189
      HEAP32[$649 >> 2] = $90; //@line 28190
      $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 28191
      HEAP32[$650 >> 2] = $92; //@line 28192
      $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 28193
      HEAP32[$651 >> 2] = $94; //@line 28194
      $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 28195
      HEAP32[$652 >> 2] = $96; //@line 28196
      $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 28197
      HEAP32[$653 >> 2] = $98; //@line 28198
      $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 28199
      HEAP32[$654 >> 2] = $100; //@line 28200
      $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 28201
      HEAP32[$655 >> 2] = $102; //@line 28202
      $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 28203
      HEAP32[$656 >> 2] = $104; //@line 28204
      $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 28205
      HEAP32[$657 >> 2] = $106; //@line 28206
      $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 28207
      HEAP32[$658 >> 2] = $108; //@line 28208
      $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 28209
      HEAP32[$659 >> 2] = $110; //@line 28210
      $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 28211
      HEAP32[$660 >> 2] = $112; //@line 28212
      $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 28213
      HEAP32[$661 >> 2] = $114; //@line 28214
      $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 28215
      HEAP32[$662 >> 2] = $116; //@line 28216
      $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 28217
      HEAP32[$663 >> 2] = $118; //@line 28218
      $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 28219
      HEAP32[$664 >> 2] = $120; //@line 28220
      $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 28221
      HEAP32[$665 >> 2] = $157; //@line 28222
      $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 28223
      HEAP32[$666 >> 2] = $124; //@line 28224
      $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 28225
      HEAP32[$667 >> 2] = $126; //@line 28226
      $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 28227
      HEAP32[$668 >> 2] = $128; //@line 28228
      $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 28229
      HEAP32[$669 >> 2] = $130; //@line 28230
      $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 28231
      HEAP32[$670 >> 2] = $132; //@line 28232
      sp = STACKTOP; //@line 28233
      return;
     }
     HEAP8[___async_retval >> 0] = $604; //@line 28237
     ___async_unwind = 0; //@line 28238
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 28239
     $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 28240
     HEAP32[$605 >> 2] = $2; //@line 28241
     $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 28242
     HEAP32[$606 >> 2] = $4; //@line 28243
     $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 28244
     HEAP32[$607 >> 2] = $6; //@line 28245
     $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 28246
     HEAP32[$608 >> 2] = $8; //@line 28247
     $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 28248
     HEAP32[$609 >> 2] = $10; //@line 28249
     $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 28250
     HEAP32[$610 >> 2] = $12; //@line 28251
     $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 28252
     HEAP32[$611 >> 2] = $14; //@line 28253
     $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 28254
     HEAP32[$612 >> 2] = $16; //@line 28255
     $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 28256
     HEAP32[$613 >> 2] = $18; //@line 28257
     $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 28258
     HEAP32[$614 >> 2] = $20; //@line 28259
     $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 28260
     HEAP32[$615 >> 2] = $22; //@line 28261
     $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 28262
     HEAP32[$616 >> 2] = $24; //@line 28263
     $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 28264
     HEAP32[$617 >> 2] = $26; //@line 28265
     $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 28266
     HEAP32[$618 >> 2] = $28; //@line 28267
     $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 28268
     HEAP32[$619 >> 2] = $30; //@line 28269
     $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 28270
     HEAP32[$620 >> 2] = $32; //@line 28271
     $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 28272
     HEAP32[$621 >> 2] = $34; //@line 28273
     $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 28274
     HEAP32[$622 >> 2] = $36; //@line 28275
     $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 28276
     HEAP32[$623 >> 2] = $38; //@line 28277
     $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 28278
     HEAP32[$624 >> 2] = $40; //@line 28279
     $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 28280
     HEAP32[$625 >> 2] = $42; //@line 28281
     $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 28282
     HEAP32[$626 >> 2] = $44; //@line 28283
     $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 28284
     HEAP32[$627 >> 2] = $46; //@line 28285
     $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 28286
     HEAP32[$628 >> 2] = $48; //@line 28287
     $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 28288
     HEAP32[$629 >> 2] = $50; //@line 28289
     $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 28290
     HEAP32[$630 >> 2] = $52; //@line 28291
     $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 28292
     HEAP32[$631 >> 2] = $54; //@line 28293
     $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 28294
     HEAP32[$632 >> 2] = $56; //@line 28295
     $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 28296
     HEAP32[$633 >> 2] = $58; //@line 28297
     $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 28298
     HEAP32[$634 >> 2] = $60; //@line 28299
     $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 28300
     HEAP32[$635 >> 2] = $62; //@line 28301
     $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 28302
     HEAP32[$636 >> 2] = $64; //@line 28303
     $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 28304
     HEAP32[$637 >> 2] = $66; //@line 28305
     $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 28306
     HEAP32[$638 >> 2] = $68; //@line 28307
     $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 28308
     HEAP32[$639 >> 2] = $70; //@line 28309
     $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 28310
     HEAP32[$640 >> 2] = $72; //@line 28311
     $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 28312
     HEAP32[$641 >> 2] = $74; //@line 28313
     $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 28314
     HEAP32[$642 >> 2] = $76; //@line 28315
     $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 28316
     HEAP32[$643 >> 2] = $78; //@line 28317
     $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 28318
     HEAP32[$644 >> 2] = $80; //@line 28319
     $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 28320
     HEAP32[$645 >> 2] = $82; //@line 28321
     $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 28322
     HEAP32[$646 >> 2] = $84; //@line 28323
     $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 28324
     HEAP32[$647 >> 2] = $86; //@line 28325
     $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 28326
     HEAP32[$648 >> 2] = $88; //@line 28327
     $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 28328
     HEAP32[$649 >> 2] = $90; //@line 28329
     $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 28330
     HEAP32[$650 >> 2] = $92; //@line 28331
     $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 28332
     HEAP32[$651 >> 2] = $94; //@line 28333
     $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 28334
     HEAP32[$652 >> 2] = $96; //@line 28335
     $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 28336
     HEAP32[$653 >> 2] = $98; //@line 28337
     $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 28338
     HEAP32[$654 >> 2] = $100; //@line 28339
     $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 28340
     HEAP32[$655 >> 2] = $102; //@line 28341
     $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 28342
     HEAP32[$656 >> 2] = $104; //@line 28343
     $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 28344
     HEAP32[$657 >> 2] = $106; //@line 28345
     $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 28346
     HEAP32[$658 >> 2] = $108; //@line 28347
     $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 28348
     HEAP32[$659 >> 2] = $110; //@line 28349
     $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 28350
     HEAP32[$660 >> 2] = $112; //@line 28351
     $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 28352
     HEAP32[$661 >> 2] = $114; //@line 28353
     $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 28354
     HEAP32[$662 >> 2] = $116; //@line 28355
     $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 28356
     HEAP32[$663 >> 2] = $118; //@line 28357
     $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 28358
     HEAP32[$664 >> 2] = $120; //@line 28359
     $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 28360
     HEAP32[$665 >> 2] = $157; //@line 28361
     $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 28362
     HEAP32[$666 >> 2] = $124; //@line 28363
     $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 28364
     HEAP32[$667 >> 2] = $126; //@line 28365
     $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 28366
     HEAP32[$668 >> 2] = $128; //@line 28367
     $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 28368
     HEAP32[$669 >> 2] = $130; //@line 28369
     $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 28370
     HEAP32[$670 >> 2] = $132; //@line 28371
     sp = STACKTOP; //@line 28372
     return;
    }
   case 62:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 28377
     $672 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $54, $80, 11, $$1202$i) | 0; //@line 28378
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 28381
      $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 28382
      HEAP32[$673 >> 2] = $2; //@line 28383
      $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 28384
      HEAP32[$674 >> 2] = $4; //@line 28385
      $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 28386
      HEAP32[$675 >> 2] = $6; //@line 28387
      $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 28388
      HEAP32[$676 >> 2] = $8; //@line 28389
      $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 28390
      HEAP32[$677 >> 2] = $10; //@line 28391
      $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 28392
      HEAP32[$678 >> 2] = $12; //@line 28393
      $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 28394
      HEAP32[$679 >> 2] = $14; //@line 28395
      $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 28396
      HEAP32[$680 >> 2] = $16; //@line 28397
      $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 28398
      HEAP32[$681 >> 2] = $18; //@line 28399
      $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 28400
      HEAP32[$682 >> 2] = $20; //@line 28401
      $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 28402
      HEAP32[$683 >> 2] = $22; //@line 28403
      $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 28404
      HEAP32[$684 >> 2] = $24; //@line 28405
      $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 28406
      HEAP32[$685 >> 2] = $26; //@line 28407
      $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 28408
      HEAP32[$686 >> 2] = $28; //@line 28409
      $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 28410
      HEAP32[$687 >> 2] = $30; //@line 28411
      $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 28412
      HEAP32[$688 >> 2] = $32; //@line 28413
      $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 28414
      HEAP32[$689 >> 2] = $34; //@line 28415
      $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 28416
      HEAP32[$690 >> 2] = $36; //@line 28417
      $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 28418
      HEAP32[$691 >> 2] = $38; //@line 28419
      $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 28420
      HEAP32[$692 >> 2] = $40; //@line 28421
      $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 28422
      HEAP32[$693 >> 2] = $42; //@line 28423
      $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 28424
      HEAP32[$694 >> 2] = $44; //@line 28425
      $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 28426
      HEAP32[$695 >> 2] = $46; //@line 28427
      $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 28428
      HEAP32[$696 >> 2] = $48; //@line 28429
      $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 28430
      HEAP32[$697 >> 2] = $50; //@line 28431
      $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 28432
      HEAP32[$698 >> 2] = $52; //@line 28433
      $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 28434
      HEAP32[$699 >> 2] = $54; //@line 28435
      $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 28436
      HEAP32[$700 >> 2] = $56; //@line 28437
      $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 28438
      HEAP32[$701 >> 2] = $58; //@line 28439
      $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 28440
      HEAP32[$702 >> 2] = $60; //@line 28441
      $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 28442
      HEAP32[$703 >> 2] = $62; //@line 28443
      $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 28444
      HEAP32[$704 >> 2] = $64; //@line 28445
      $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 28446
      HEAP32[$705 >> 2] = $66; //@line 28447
      $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 28448
      HEAP32[$706 >> 2] = $68; //@line 28449
      $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 28450
      HEAP32[$707 >> 2] = $70; //@line 28451
      $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 28452
      HEAP32[$708 >> 2] = $72; //@line 28453
      $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 28454
      HEAP32[$709 >> 2] = $74; //@line 28455
      $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 28456
      HEAP32[$710 >> 2] = $76; //@line 28457
      $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 28458
      HEAP32[$711 >> 2] = $78; //@line 28459
      $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 28460
      HEAP32[$712 >> 2] = $80; //@line 28461
      $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 28462
      HEAP32[$713 >> 2] = $82; //@line 28463
      $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 28464
      HEAP32[$714 >> 2] = $84; //@line 28465
      $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 28466
      HEAP32[$715 >> 2] = $86; //@line 28467
      $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 28468
      HEAP32[$716 >> 2] = $88; //@line 28469
      $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 28470
      HEAP32[$717 >> 2] = $90; //@line 28471
      $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 28472
      HEAP32[$718 >> 2] = $92; //@line 28473
      $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 28474
      HEAP32[$719 >> 2] = $94; //@line 28475
      $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 28476
      HEAP32[$720 >> 2] = $96; //@line 28477
      $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 28478
      HEAP32[$721 >> 2] = $98; //@line 28479
      $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 28480
      HEAP32[$722 >> 2] = $100; //@line 28481
      $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 28482
      HEAP32[$723 >> 2] = $102; //@line 28483
      $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 28484
      HEAP32[$724 >> 2] = $104; //@line 28485
      $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 28486
      HEAP32[$725 >> 2] = $106; //@line 28487
      $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 28488
      HEAP32[$726 >> 2] = $108; //@line 28489
      $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 28490
      HEAP32[$727 >> 2] = $110; //@line 28491
      $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 28492
      HEAP32[$728 >> 2] = $112; //@line 28493
      $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 28494
      HEAP32[$729 >> 2] = $114; //@line 28495
      $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 28496
      HEAP32[$730 >> 2] = $116; //@line 28497
      $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 28498
      HEAP32[$731 >> 2] = $118; //@line 28499
      $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 28500
      HEAP32[$732 >> 2] = $120; //@line 28501
      $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 28502
      HEAP32[$733 >> 2] = $157; //@line 28503
      $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 28504
      HEAP32[$734 >> 2] = $124; //@line 28505
      $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 28506
      HEAP32[$735 >> 2] = $126; //@line 28507
      $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 28508
      HEAP32[$736 >> 2] = $128; //@line 28509
      $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 28510
      HEAP32[$737 >> 2] = $130; //@line 28511
      $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 28512
      HEAP32[$738 >> 2] = $132; //@line 28513
      sp = STACKTOP; //@line 28514
      return;
     }
     HEAP8[___async_retval >> 0] = $672; //@line 28518
     ___async_unwind = 0; //@line 28519
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 28520
     $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 28521
     HEAP32[$673 >> 2] = $2; //@line 28522
     $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 28523
     HEAP32[$674 >> 2] = $4; //@line 28524
     $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 28525
     HEAP32[$675 >> 2] = $6; //@line 28526
     $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 28527
     HEAP32[$676 >> 2] = $8; //@line 28528
     $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 28529
     HEAP32[$677 >> 2] = $10; //@line 28530
     $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 28531
     HEAP32[$678 >> 2] = $12; //@line 28532
     $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 28533
     HEAP32[$679 >> 2] = $14; //@line 28534
     $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 28535
     HEAP32[$680 >> 2] = $16; //@line 28536
     $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 28537
     HEAP32[$681 >> 2] = $18; //@line 28538
     $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 28539
     HEAP32[$682 >> 2] = $20; //@line 28540
     $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 28541
     HEAP32[$683 >> 2] = $22; //@line 28542
     $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 28543
     HEAP32[$684 >> 2] = $24; //@line 28544
     $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 28545
     HEAP32[$685 >> 2] = $26; //@line 28546
     $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 28547
     HEAP32[$686 >> 2] = $28; //@line 28548
     $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 28549
     HEAP32[$687 >> 2] = $30; //@line 28550
     $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 28551
     HEAP32[$688 >> 2] = $32; //@line 28552
     $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 28553
     HEAP32[$689 >> 2] = $34; //@line 28554
     $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 28555
     HEAP32[$690 >> 2] = $36; //@line 28556
     $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 28557
     HEAP32[$691 >> 2] = $38; //@line 28558
     $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 28559
     HEAP32[$692 >> 2] = $40; //@line 28560
     $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 28561
     HEAP32[$693 >> 2] = $42; //@line 28562
     $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 28563
     HEAP32[$694 >> 2] = $44; //@line 28564
     $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 28565
     HEAP32[$695 >> 2] = $46; //@line 28566
     $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 28567
     HEAP32[$696 >> 2] = $48; //@line 28568
     $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 28569
     HEAP32[$697 >> 2] = $50; //@line 28570
     $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 28571
     HEAP32[$698 >> 2] = $52; //@line 28572
     $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 28573
     HEAP32[$699 >> 2] = $54; //@line 28574
     $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 28575
     HEAP32[$700 >> 2] = $56; //@line 28576
     $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 28577
     HEAP32[$701 >> 2] = $58; //@line 28578
     $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 28579
     HEAP32[$702 >> 2] = $60; //@line 28580
     $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 28581
     HEAP32[$703 >> 2] = $62; //@line 28582
     $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 28583
     HEAP32[$704 >> 2] = $64; //@line 28584
     $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 28585
     HEAP32[$705 >> 2] = $66; //@line 28586
     $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 28587
     HEAP32[$706 >> 2] = $68; //@line 28588
     $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 28589
     HEAP32[$707 >> 2] = $70; //@line 28590
     $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 28591
     HEAP32[$708 >> 2] = $72; //@line 28592
     $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 28593
     HEAP32[$709 >> 2] = $74; //@line 28594
     $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 28595
     HEAP32[$710 >> 2] = $76; //@line 28596
     $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 28597
     HEAP32[$711 >> 2] = $78; //@line 28598
     $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 28599
     HEAP32[$712 >> 2] = $80; //@line 28600
     $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 28601
     HEAP32[$713 >> 2] = $82; //@line 28602
     $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 28603
     HEAP32[$714 >> 2] = $84; //@line 28604
     $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 28605
     HEAP32[$715 >> 2] = $86; //@line 28606
     $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 28607
     HEAP32[$716 >> 2] = $88; //@line 28608
     $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 28609
     HEAP32[$717 >> 2] = $90; //@line 28610
     $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 28611
     HEAP32[$718 >> 2] = $92; //@line 28612
     $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 28613
     HEAP32[$719 >> 2] = $94; //@line 28614
     $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 28615
     HEAP32[$720 >> 2] = $96; //@line 28616
     $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 28617
     HEAP32[$721 >> 2] = $98; //@line 28618
     $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 28619
     HEAP32[$722 >> 2] = $100; //@line 28620
     $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 28621
     HEAP32[$723 >> 2] = $102; //@line 28622
     $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 28623
     HEAP32[$724 >> 2] = $104; //@line 28624
     $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 28625
     HEAP32[$725 >> 2] = $106; //@line 28626
     $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 28627
     HEAP32[$726 >> 2] = $108; //@line 28628
     $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 28629
     HEAP32[$727 >> 2] = $110; //@line 28630
     $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 28631
     HEAP32[$728 >> 2] = $112; //@line 28632
     $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 28633
     HEAP32[$729 >> 2] = $114; //@line 28634
     $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 28635
     HEAP32[$730 >> 2] = $116; //@line 28636
     $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 28637
     HEAP32[$731 >> 2] = $118; //@line 28638
     $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 28639
     HEAP32[$732 >> 2] = $120; //@line 28640
     $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 28641
     HEAP32[$733 >> 2] = $157; //@line 28642
     $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 28643
     HEAP32[$734 >> 2] = $124; //@line 28644
     $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 28645
     HEAP32[$735 >> 2] = $126; //@line 28646
     $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 28647
     HEAP32[$736 >> 2] = $128; //@line 28648
     $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 28649
     HEAP32[$737 >> 2] = $130; //@line 28650
     $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 28651
     HEAP32[$738 >> 2] = $132; //@line 28652
     sp = STACKTOP; //@line 28653
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3844, 5067, $68); //@line 28658
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$38 >> 2] | 0; //@line 28663
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 28666
     $759 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 28667
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 28670
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 28671
      HEAP32[$760 >> 2] = $2; //@line 28672
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 28673
      HEAP32[$761 >> 2] = $4; //@line 28674
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 28675
      HEAP32[$762 >> 2] = $6; //@line 28676
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 28677
      HEAP32[$763 >> 2] = $8; //@line 28678
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 28679
      HEAP32[$764 >> 2] = $10; //@line 28680
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 28681
      HEAP32[$765 >> 2] = $12; //@line 28682
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 28683
      HEAP32[$766 >> 2] = $14; //@line 28684
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 28685
      HEAP32[$767 >> 2] = $16; //@line 28686
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 28687
      HEAP32[$768 >> 2] = $18; //@line 28688
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 28689
      HEAP32[$769 >> 2] = $20; //@line 28690
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 28691
      HEAP32[$770 >> 2] = $22; //@line 28692
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 28693
      HEAP32[$771 >> 2] = $24; //@line 28694
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 28695
      HEAP32[$772 >> 2] = $26; //@line 28696
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 28697
      HEAP32[$773 >> 2] = $28; //@line 28698
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 28699
      HEAP32[$774 >> 2] = $30; //@line 28700
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 28701
      HEAP32[$775 >> 2] = $32; //@line 28702
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 28703
      HEAP32[$776 >> 2] = $34; //@line 28704
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 28705
      HEAP32[$777 >> 2] = $36; //@line 28706
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 28707
      HEAP32[$778 >> 2] = $38; //@line 28708
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 28709
      HEAP32[$779 >> 2] = $40; //@line 28710
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 28711
      HEAP32[$780 >> 2] = $42; //@line 28712
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 28713
      HEAP32[$781 >> 2] = $44; //@line 28714
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 28715
      HEAP32[$782 >> 2] = $46; //@line 28716
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 28717
      HEAP32[$783 >> 2] = $48; //@line 28718
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 28719
      HEAP32[$784 >> 2] = $50; //@line 28720
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 28721
      HEAP32[$785 >> 2] = $52; //@line 28722
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 28723
      HEAP32[$786 >> 2] = $54; //@line 28724
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 28725
      HEAP32[$787 >> 2] = $56; //@line 28726
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 28727
      HEAP32[$788 >> 2] = $58; //@line 28728
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 28729
      HEAP32[$789 >> 2] = $60; //@line 28730
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 28731
      HEAP32[$790 >> 2] = $62; //@line 28732
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 28733
      HEAP32[$791 >> 2] = $64; //@line 28734
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 28735
      HEAP32[$792 >> 2] = $66; //@line 28736
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 28737
      HEAP32[$793 >> 2] = $68; //@line 28738
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 28739
      HEAP32[$794 >> 2] = $70; //@line 28740
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 28741
      HEAP32[$795 >> 2] = $72; //@line 28742
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 28743
      HEAP32[$796 >> 2] = $74; //@line 28744
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 28745
      HEAP32[$797 >> 2] = $76; //@line 28746
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 28747
      HEAP32[$798 >> 2] = $78; //@line 28748
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 28749
      HEAP32[$799 >> 2] = $80; //@line 28750
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 28751
      HEAP32[$800 >> 2] = $82; //@line 28752
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 28753
      HEAP32[$801 >> 2] = $84; //@line 28754
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 28755
      HEAP32[$802 >> 2] = $86; //@line 28756
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 28757
      HEAP32[$803 >> 2] = $88; //@line 28758
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 28759
      HEAP32[$804 >> 2] = $90; //@line 28760
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 28761
      HEAP32[$805 >> 2] = $92; //@line 28762
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 28763
      HEAP32[$806 >> 2] = $94; //@line 28764
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 28765
      HEAP32[$807 >> 2] = $96; //@line 28766
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 28767
      HEAP32[$808 >> 2] = $98; //@line 28768
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 28769
      HEAP32[$809 >> 2] = $100; //@line 28770
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 28771
      HEAP32[$810 >> 2] = $102; //@line 28772
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 28773
      HEAP32[$811 >> 2] = $104; //@line 28774
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 28775
      HEAP32[$812 >> 2] = $106; //@line 28776
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 28777
      HEAP32[$813 >> 2] = $108; //@line 28778
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 28779
      HEAP32[$814 >> 2] = $110; //@line 28780
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 28781
      HEAP32[$815 >> 2] = $112; //@line 28782
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 28783
      HEAP32[$816 >> 2] = $114; //@line 28784
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 28785
      HEAP32[$817 >> 2] = $116; //@line 28786
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 28787
      HEAP32[$818 >> 2] = $118; //@line 28788
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 28789
      HEAP32[$819 >> 2] = $120; //@line 28790
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 28791
      HEAP32[$820 >> 2] = $157; //@line 28792
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 28793
      HEAP32[$821 >> 2] = $124; //@line 28794
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 28795
      HEAP32[$822 >> 2] = $126; //@line 28796
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 28797
      HEAP32[$823 >> 2] = $128; //@line 28798
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 28799
      HEAP32[$824 >> 2] = $130; //@line 28800
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 28801
      HEAP32[$825 >> 2] = $132; //@line 28802
      sp = STACKTOP; //@line 28803
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 28807
     ___async_unwind = 0; //@line 28808
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 28809
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 28810
     HEAP32[$760 >> 2] = $2; //@line 28811
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 28812
     HEAP32[$761 >> 2] = $4; //@line 28813
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 28814
     HEAP32[$762 >> 2] = $6; //@line 28815
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 28816
     HEAP32[$763 >> 2] = $8; //@line 28817
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 28818
     HEAP32[$764 >> 2] = $10; //@line 28819
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 28820
     HEAP32[$765 >> 2] = $12; //@line 28821
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 28822
     HEAP32[$766 >> 2] = $14; //@line 28823
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 28824
     HEAP32[$767 >> 2] = $16; //@line 28825
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 28826
     HEAP32[$768 >> 2] = $18; //@line 28827
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 28828
     HEAP32[$769 >> 2] = $20; //@line 28829
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 28830
     HEAP32[$770 >> 2] = $22; //@line 28831
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 28832
     HEAP32[$771 >> 2] = $24; //@line 28833
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 28834
     HEAP32[$772 >> 2] = $26; //@line 28835
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 28836
     HEAP32[$773 >> 2] = $28; //@line 28837
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 28838
     HEAP32[$774 >> 2] = $30; //@line 28839
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 28840
     HEAP32[$775 >> 2] = $32; //@line 28841
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 28842
     HEAP32[$776 >> 2] = $34; //@line 28843
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 28844
     HEAP32[$777 >> 2] = $36; //@line 28845
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 28846
     HEAP32[$778 >> 2] = $38; //@line 28847
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 28848
     HEAP32[$779 >> 2] = $40; //@line 28849
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 28850
     HEAP32[$780 >> 2] = $42; //@line 28851
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 28852
     HEAP32[$781 >> 2] = $44; //@line 28853
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 28854
     HEAP32[$782 >> 2] = $46; //@line 28855
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 28856
     HEAP32[$783 >> 2] = $48; //@line 28857
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 28858
     HEAP32[$784 >> 2] = $50; //@line 28859
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 28860
     HEAP32[$785 >> 2] = $52; //@line 28861
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 28862
     HEAP32[$786 >> 2] = $54; //@line 28863
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 28864
     HEAP32[$787 >> 2] = $56; //@line 28865
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 28866
     HEAP32[$788 >> 2] = $58; //@line 28867
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 28868
     HEAP32[$789 >> 2] = $60; //@line 28869
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 28870
     HEAP32[$790 >> 2] = $62; //@line 28871
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 28872
     HEAP32[$791 >> 2] = $64; //@line 28873
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 28874
     HEAP32[$792 >> 2] = $66; //@line 28875
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 28876
     HEAP32[$793 >> 2] = $68; //@line 28877
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 28878
     HEAP32[$794 >> 2] = $70; //@line 28879
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 28880
     HEAP32[$795 >> 2] = $72; //@line 28881
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 28882
     HEAP32[$796 >> 2] = $74; //@line 28883
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 28884
     HEAP32[$797 >> 2] = $76; //@line 28885
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 28886
     HEAP32[$798 >> 2] = $78; //@line 28887
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 28888
     HEAP32[$799 >> 2] = $80; //@line 28889
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 28890
     HEAP32[$800 >> 2] = $82; //@line 28891
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 28892
     HEAP32[$801 >> 2] = $84; //@line 28893
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 28894
     HEAP32[$802 >> 2] = $86; //@line 28895
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 28896
     HEAP32[$803 >> 2] = $88; //@line 28897
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 28898
     HEAP32[$804 >> 2] = $90; //@line 28899
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 28900
     HEAP32[$805 >> 2] = $92; //@line 28901
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 28902
     HEAP32[$806 >> 2] = $94; //@line 28903
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 28904
     HEAP32[$807 >> 2] = $96; //@line 28905
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 28906
     HEAP32[$808 >> 2] = $98; //@line 28907
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 28908
     HEAP32[$809 >> 2] = $100; //@line 28909
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 28910
     HEAP32[$810 >> 2] = $102; //@line 28911
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 28912
     HEAP32[$811 >> 2] = $104; //@line 28913
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 28914
     HEAP32[$812 >> 2] = $106; //@line 28915
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 28916
     HEAP32[$813 >> 2] = $108; //@line 28917
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 28918
     HEAP32[$814 >> 2] = $110; //@line 28919
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 28920
     HEAP32[$815 >> 2] = $112; //@line 28921
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 28922
     HEAP32[$816 >> 2] = $114; //@line 28923
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 28924
     HEAP32[$817 >> 2] = $116; //@line 28925
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 28926
     HEAP32[$818 >> 2] = $118; //@line 28927
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 28928
     HEAP32[$819 >> 2] = $120; //@line 28929
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 28930
     HEAP32[$820 >> 2] = $157; //@line 28931
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 28932
     HEAP32[$821 >> 2] = $124; //@line 28933
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 28934
     HEAP32[$822 >> 2] = $126; //@line 28935
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 28936
     HEAP32[$823 >> 2] = $128; //@line 28937
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 28938
     HEAP32[$824 >> 2] = $130; //@line 28939
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 28940
     HEAP32[$825 >> 2] = $132; //@line 28941
     sp = STACKTOP; //@line 28942
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3844, 5193, $132); //@line 28947
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3844, 5254, $102); //@line 28952
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3844, 5315, $48); //@line 28957
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3844, 5376, $20); //@line 28962
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3844, 5436, $12); //@line 28967
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3844, 5496, $84); //@line 28972
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $6 | 0) >= ($16 | 0)) {
      $936 = ___async_retval; //@line 28981
      HEAP32[$936 >> 2] = $22; //@line 28982
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 28988
      HEAP32[$88 >> 2] = $926; //@line 28989
      $927 = $926; //@line 28990
      $929 = $6 - $927 + $16 | 0; //@line 28992
      HEAP16[$72 + 24 >> 1] = $929; //@line 28995
      if ($929 & 65535 | 0) {
       HEAP32[$72 + 36 >> 2] = $927; //@line 29000
       $936 = ___async_retval; //@line 29001
       HEAP32[$936 >> 2] = $22; //@line 29002
       return;
      }
     } else {
      _mbed_tracef(2, 3844, 5543, $26); //@line 29006
     }
     HEAP32[$72 + 4 >> 2] = 1; //@line 29009
     $936 = ___async_retval; //@line 29010
     HEAP32[$936 >> 2] = $22; //@line 29011
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3844, 4546, $96); //@line 29017
  }
 } while (0);
 HEAP32[$72 + 4 >> 2] = 1; //@line 29021
 $936 = ___async_retval; //@line 29022
 HEAP32[$936 >> 2] = $22; //@line 29023
 return;
}
function _sn_coap_parser__async_cb_168($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $587 = 0, $590 = 0, $591 = 0, $596 = 0, $599 = 0, $6 = 0, $60 = 0, $601 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $596$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 22642
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22644
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22646
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22648
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22650
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22652
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22654
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22656
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22658
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22660
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22662
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22664
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22666
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22668
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22670
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22672
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22674
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22676
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22678
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22680
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 22682
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 22684
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 22686
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 22688
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 22690
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 22692
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 22694
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 22696
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 22698
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 22700
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 22702
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 22704
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 22706
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 22708
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 22710
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 22712
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 22714
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 22716
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 22718
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 22720
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 22722
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 22724
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 22726
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 22728
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 22730
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 22732
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 22734
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 22736
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 22738
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 22740
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 22742
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 22744
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 22746
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 22748
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 22750
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 22752
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 22754
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 22756
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 22758
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 22760
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 22762
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 22766
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 22768
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 22770
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 22772
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 22774
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 244 >> 2] | 0; //@line 22780
   L3 : while (1) {
    $917 = HEAP32[$114 >> 2] | 0; //@line 22782
    $918 = $917 - $6 | 0; //@line 22783
    $137 = $917; //@line 22786
    if (($918 | 0) > ($16 | 0)) {
     break L2;
    }
    if (!(($16 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 22793
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 22796
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 22799
     break;
    }
    $140 = $trunc277$i & 15; //@line 22803
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 22804
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 22809
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 22817
      $$sink214$i = 13; //@line 22817
      $$sink3$i = 1; //@line 22817
      label = 8; //@line 22818
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 22830
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 22830
      $$sink3$i = 2; //@line 22830
      label = 8; //@line 22831
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 22835
      $159 = $137; //@line 22835
      $937 = $917; //@line 22835
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 22839
     $154 = $137 + $$sink3$i | 0; //@line 22841
     HEAP32[$88 >> 2] = $154; //@line 22842
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 22844
     $159 = $154; //@line 22844
     $937 = $154; //@line 22844
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 22847
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 22851
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 22859
      $$sink216$i = 13; //@line 22859
      $$sink8$i = 1; //@line 22859
      label = 13; //@line 22860
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 22872
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 22872
      $$sink8$i = 2; //@line 22872
      label = 13; //@line 22873
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 22877
      $174 = $937; //@line 22877
      $241 = $159; //@line 22877
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 22881
     $171 = $159 + $$sink8$i | 0; //@line 22883
     HEAP32[$88 >> 2] = $171; //@line 22884
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 22886
     $174 = $171; //@line 22886
     $241 = $171; //@line 22886
    }
    $$1202$i = $$1202$in$i & 65535; //@line 22888
    $175 = $28 - $174 & 65535; //@line 22890
    $trunc$i = $157 & 65535; //@line 22891
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 62; //@line 22895
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$38 >> 2] | 0)) {
        label = 16; //@line 22903
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 22908
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 22913
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 22918
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 22923
         break L3;
         break;
        }
       case 20:
        {
         label = 59; //@line 22928
         break L3;
         break;
        }
       case 11:
        {
         label = 62; //@line 22933
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 22938
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 22949
          break L3;
         }
         $268 = $241 + 1 | 0; //@line 22952
         HEAP32[$88 >> 2] = $268; //@line 22953
         $269 = $$1202$in$i & 255; //@line 22954
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 22957
         } else {
          $$045$i221$i = $269; //@line 22959
          $$06$i220$i = 0; //@line 22959
          $274 = $268; //@line 22959
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 22961
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 22963
           HEAP32[$88 >> 2] = $274; //@line 22964
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 22967
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 22970
            break;
           } else {
            $$06$i220$i = $277; //@line 22973
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 22979
         $$reg2mem$0 = $157; //@line 22980
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 55; //@line 22987
          break L3;
         }
         $587 = (HEAP32[$38 >> 2] | 0) + 28 | 0; //@line 22991
         if ((HEAP32[$587 >> 2] | 0) != -1) {
          label = 55; //@line 22995
          break L3;
         }
         $590 = $241 + 1 | 0; //@line 22998
         HEAP32[$88 >> 2] = $590; //@line 22999
         $591 = $$1202$in$i & 255; //@line 23000
         if (!($591 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 23003
         } else {
          $$045$i263$i = $591; //@line 23005
          $$06$i262$i = 0; //@line 23005
          $596 = $590; //@line 23005
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 23007
           $596$looptemp = $596;
           $596 = $596 + 1 | 0; //@line 23009
           HEAP32[$88 >> 2] = $596; //@line 23010
           $599 = $$06$i262$i << 8 | HEAPU8[$596$looptemp >> 0]; //@line 23013
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $599; //@line 23016
            break;
           } else {
            $$06$i262$i = $599; //@line 23019
           }
          }
         }
         HEAP32[$587 >> 2] = $$0$lcssa$i265$i; //@line 23023
         $$reg2mem$0 = $157; //@line 23024
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 23031
          break L3;
         }
         $742 = (HEAP32[$38 >> 2] | 0) + 32 | 0; //@line 23035
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 23039
          break L3;
         }
         $745 = $241 + 1 | 0; //@line 23042
         HEAP32[$88 >> 2] = $745; //@line 23043
         $746 = $$1202$in$i & 255; //@line 23044
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 23047
         } else {
          $$045$i270$i = $746; //@line 23049
          $$06$i269$i = 0; //@line 23049
          $751 = $745; //@line 23049
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 23051
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 23053
           HEAP32[$88 >> 2] = $751; //@line 23054
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 23057
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 23060
            break;
           } else {
            $$06$i269$i = $754; //@line 23063
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 23067
         $$reg2mem$0 = $157; //@line 23068
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 23075
          break L3;
         }
         $829 = (HEAP32[$38 >> 2] | 0) + 40 | 0; //@line 23079
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 23083
          break L3;
         }
         $832 = $241 + 1 | 0; //@line 23086
         HEAP32[$88 >> 2] = $832; //@line 23087
         $833 = $$1202$in$i & 255; //@line 23088
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 23091
         } else {
          $$045$i256$i = $833; //@line 23093
          $$06$i255$i = 0; //@line 23093
          $838 = $832; //@line 23093
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 23095
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 23097
           HEAP32[$88 >> 2] = $838; //@line 23098
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 23101
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 23104
            break;
           } else {
            $$06$i255$i = $841; //@line 23107
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 23111
         $$reg2mem$0 = $157; //@line 23112
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 23119
          break L3;
         }
         $845 = (HEAP32[$38 >> 2] | 0) + 36 | 0; //@line 23123
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 23127
          break L3;
         }
         $848 = $241 + 1 | 0; //@line 23130
         HEAP32[$88 >> 2] = $848; //@line 23131
         $849 = $$1202$in$i & 255; //@line 23132
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 23135
         } else {
          $$045$i249$i = $849; //@line 23137
          $$06$i248$i = 0; //@line 23137
          $854 = $848; //@line 23137
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 23139
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 23141
           HEAP32[$88 >> 2] = $854; //@line 23142
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 23145
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 23148
            break;
           } else {
            $$06$i248$i = $857; //@line 23151
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 23155
         $$reg2mem$0 = $157; //@line 23156
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 23163
          break L3;
         }
         $861 = (HEAP32[$38 >> 2] | 0) + 12 | 0; //@line 23167
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 23171
          break L3;
         }
         $864 = $241 + 1 | 0; //@line 23174
         HEAP32[$88 >> 2] = $864; //@line 23175
         $865 = $$1202$in$i & 255; //@line 23176
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 23179
         } else {
          $$045$i242$i = $865; //@line 23181
          $$06$i241$i = 0; //@line 23181
          $870 = $864; //@line 23181
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 23183
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 23185
           HEAP32[$88 >> 2] = $870; //@line 23186
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 23189
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 23192
            break;
           } else {
            $$06$i241$i = $873; //@line 23195
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 23199
         $$reg2mem$0 = $157; //@line 23200
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 23207
          break L3;
         }
         $877 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 23211
         $878 = HEAP8[$877 >> 0] | 0; //@line 23212
         if ($878 & 1) {
          label = 94; //@line 23216
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 23220
         $883 = (HEAP32[$88 >> 2] | 0) + 1 | 0; //@line 23222
         HEAP32[$88 >> 2] = $883; //@line 23223
         $884 = $$1202$in$i & 255; //@line 23224
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 23227
         } else {
          $$045$i235$i = $884; //@line 23229
          $$06$i234$i = 0; //@line 23229
          $889 = $883; //@line 23229
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 23231
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 23233
           HEAP32[$88 >> 2] = $889; //@line 23234
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 23237
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 23240
            break;
           } else {
            $$06$i234$i = $892; //@line 23243
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 23249
         $$reg2mem$0 = $157; //@line 23250
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 23257
          break L3;
         }
         $898 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 23261
         $899 = HEAP8[$898 >> 0] | 0; //@line 23262
         if ($899 & 2) {
          label = 100; //@line 23266
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 23270
         $904 = (HEAP32[$88 >> 2] | 0) + 1 | 0; //@line 23272
         HEAP32[$88 >> 2] = $904; //@line 23273
         $905 = $$1202$in$i & 255; //@line 23274
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 23277
         } else {
          $$045$i228$i = $905; //@line 23279
          $$06$i227$i = 0; //@line 23279
          $910 = $904; //@line 23279
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 23281
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 23283
           HEAP32[$88 >> 2] = $910; //@line 23284
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 23287
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 23290
            break;
           } else {
            $$06$i227$i = $913; //@line 23293
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 23299
         $$reg2mem$0 = $157; //@line 23300
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 23305
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 23315
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 23322
     break;
    }
    if ((HEAP32[$120 >> 2] | 0) != -1) {
     label = 22; //@line 23328
     break;
    }
    $256 = $241 + 1 | 0; //@line 23331
    HEAP32[$88 >> 2] = $256; //@line 23332
    $257 = $$1202$in$i & 255; //@line 23333
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 23336
    } else {
     $$045$i$i = $257; //@line 23338
     $$06$i$i = 0; //@line 23338
     $262 = $256; //@line 23338
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 23340
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 23342
      HEAP32[$88 >> 2] = $262; //@line 23343
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 23346
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 23349
       break;
      } else {
       $$06$i$i = $265; //@line 23352
      }
     }
    }
    HEAP32[$120 >> 2] = $$0$lcssa$i$i; //@line 23356
    $$reg2mem$0 = $157; //@line 23357
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3844, 4107, $8); //@line 23361
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3844, 4165, $56); //@line 23366
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$40 >> 2] | 0; //@line 23371
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 23372
     $179 = FUNCTION_TABLE_ii[$178 & 31](68) | 0; //@line 23373
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 23376
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 23377
      HEAP32[$180 >> 2] = $2; //@line 23378
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 23379
      HEAP32[$181 >> 2] = $4; //@line 23380
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 23381
      HEAP32[$182 >> 2] = $6; //@line 23382
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 23383
      HEAP32[$183 >> 2] = $8; //@line 23384
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 23385
      HEAP32[$184 >> 2] = $132; //@line 23386
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 23387
      HEAP32[$185 >> 2] = $12; //@line 23388
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 23389
      HEAP16[$186 >> 1] = $trunc$i; //@line 23390
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 23391
      HEAP32[$187 >> 2] = $10; //@line 23392
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 23393
      HEAP32[$188 >> 2] = $16; //@line 23394
      $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 23395
      HEAP32[$189 >> 2] = $18; //@line 23396
      $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 23397
      HEAP32[$190 >> 2] = $20; //@line 23398
      $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 23399
      HEAP32[$191 >> 2] = $22; //@line 23400
      $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 23401
      HEAP32[$192 >> 2] = $24; //@line 23402
      $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 23403
      HEAP32[$193 >> 2] = $26; //@line 23404
      $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 23405
      HEAP32[$194 >> 2] = $28; //@line 23406
      $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 23407
      HEAP32[$195 >> 2] = $30; //@line 23408
      $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 23409
      HEAP32[$196 >> 2] = $32; //@line 23410
      $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 23411
      HEAP32[$197 >> 2] = $34; //@line 23412
      $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 23413
      HEAP32[$198 >> 2] = $36; //@line 23414
      $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 23415
      HEAP32[$199 >> 2] = $38; //@line 23416
      $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 23417
      HEAP32[$200 >> 2] = $40; //@line 23418
      $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 23419
      HEAP32[$201 >> 2] = $42; //@line 23420
      $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 23421
      HEAP32[$202 >> 2] = $44; //@line 23422
      $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 23423
      HEAP32[$203 >> 2] = $46; //@line 23424
      $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 23425
      HEAP32[$204 >> 2] = $48; //@line 23426
      $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 23427
      HEAP32[$205 >> 2] = $50; //@line 23428
      $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 23429
      HEAP32[$206 >> 2] = $52; //@line 23430
      $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 23431
      HEAP16[$207 >> 1] = $175; //@line 23432
      $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 23433
      HEAP32[$208 >> 2] = $54; //@line 23434
      $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 23435
      HEAP32[$209 >> 2] = $56; //@line 23436
      $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 23437
      HEAP32[$210 >> 2] = $58; //@line 23438
      $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 23439
      HEAP32[$211 >> 2] = $60; //@line 23440
      $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 23441
      HEAP32[$212 >> 2] = $62; //@line 23442
      $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 23443
      HEAP32[$213 >> 2] = $64; //@line 23444
      $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 23445
      HEAP32[$214 >> 2] = $66; //@line 23446
      $215 = $ReallocAsyncCtx3 + 144 | 0; //@line 23447
      HEAP32[$215 >> 2] = $68; //@line 23448
      $216 = $ReallocAsyncCtx3 + 148 | 0; //@line 23449
      HEAP32[$216 >> 2] = $70; //@line 23450
      $217 = $ReallocAsyncCtx3 + 152 | 0; //@line 23451
      HEAP32[$217 >> 2] = $72; //@line 23452
      $218 = $ReallocAsyncCtx3 + 156 | 0; //@line 23453
      HEAP32[$218 >> 2] = $74; //@line 23454
      $219 = $ReallocAsyncCtx3 + 160 | 0; //@line 23455
      HEAP32[$219 >> 2] = $76; //@line 23456
      $220 = $ReallocAsyncCtx3 + 164 | 0; //@line 23457
      HEAP32[$220 >> 2] = $78; //@line 23458
      $221 = $ReallocAsyncCtx3 + 168 | 0; //@line 23459
      HEAP32[$221 >> 2] = $80; //@line 23460
      $222 = $ReallocAsyncCtx3 + 172 | 0; //@line 23461
      HEAP32[$222 >> 2] = $82; //@line 23462
      $223 = $ReallocAsyncCtx3 + 176 | 0; //@line 23463
      HEAP32[$223 >> 2] = $$1202$in$i; //@line 23464
      $224 = $ReallocAsyncCtx3 + 180 | 0; //@line 23465
      HEAP32[$224 >> 2] = $84; //@line 23466
      $225 = $ReallocAsyncCtx3 + 184 | 0; //@line 23467
      HEAP32[$225 >> 2] = $86; //@line 23468
      $226 = $ReallocAsyncCtx3 + 188 | 0; //@line 23469
      HEAP32[$226 >> 2] = $88; //@line 23470
      $227 = $ReallocAsyncCtx3 + 192 | 0; //@line 23471
      HEAP32[$227 >> 2] = $90; //@line 23472
      $228 = $ReallocAsyncCtx3 + 196 | 0; //@line 23473
      HEAP16[$228 >> 1] = $$1202$i; //@line 23474
      $229 = $ReallocAsyncCtx3 + 200 | 0; //@line 23475
      HEAP32[$229 >> 2] = $92; //@line 23476
      $230 = $ReallocAsyncCtx3 + 204 | 0; //@line 23477
      HEAP32[$230 >> 2] = $96; //@line 23478
      $231 = $ReallocAsyncCtx3 + 208 | 0; //@line 23479
      HEAP32[$231 >> 2] = $98; //@line 23480
      $232 = $ReallocAsyncCtx3 + 212 | 0; //@line 23481
      HEAP32[$232 >> 2] = $94; //@line 23482
      $233 = $ReallocAsyncCtx3 + 216 | 0; //@line 23483
      HEAP32[$233 >> 2] = $102; //@line 23484
      $234 = $ReallocAsyncCtx3 + 220 | 0; //@line 23485
      HEAP32[$234 >> 2] = $100; //@line 23486
      $235 = $ReallocAsyncCtx3 + 224 | 0; //@line 23487
      HEAP32[$235 >> 2] = $104; //@line 23488
      $236 = $ReallocAsyncCtx3 + 228 | 0; //@line 23489
      HEAP32[$236 >> 2] = $106; //@line 23490
      $237 = $ReallocAsyncCtx3 + 232 | 0; //@line 23491
      HEAP32[$237 >> 2] = $108; //@line 23492
      $238 = $ReallocAsyncCtx3 + 236 | 0; //@line 23493
      HEAP32[$238 >> 2] = $110; //@line 23494
      $239 = $ReallocAsyncCtx3 + 240 | 0; //@line 23495
      HEAP32[$239 >> 2] = $112; //@line 23496
      $240 = $ReallocAsyncCtx3 + 244 | 0; //@line 23497
      HEAP32[$240 >> 2] = $241; //@line 23498
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 23499
      HEAP32[$242 >> 2] = $114; //@line 23500
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 23501
      HEAP32[$243 >> 2] = $116; //@line 23502
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 23503
      HEAP32[$244 >> 2] = $118; //@line 23504
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 23505
      HEAP32[$245 >> 2] = $120; //@line 23506
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 23507
      HEAP32[$246 >> 2] = $157; //@line 23508
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 23509
      HEAP32[$247 >> 2] = $124; //@line 23510
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 23511
      HEAP32[$248 >> 2] = $126; //@line 23512
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 23513
      HEAP32[$249 >> 2] = $128; //@line 23514
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 23515
      HEAP32[$250 >> 2] = $130; //@line 23516
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 23517
      HEAP32[$251 >> 2] = $14; //@line 23518
      sp = STACKTOP; //@line 23519
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 23523
     ___async_unwind = 0; //@line 23524
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 23525
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 23526
     HEAP32[$180 >> 2] = $2; //@line 23527
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 23528
     HEAP32[$181 >> 2] = $4; //@line 23529
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 23530
     HEAP32[$182 >> 2] = $6; //@line 23531
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 23532
     HEAP32[$183 >> 2] = $8; //@line 23533
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 23534
     HEAP32[$184 >> 2] = $132; //@line 23535
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 23536
     HEAP32[$185 >> 2] = $12; //@line 23537
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 23538
     HEAP16[$186 >> 1] = $trunc$i; //@line 23539
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 23540
     HEAP32[$187 >> 2] = $10; //@line 23541
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 23542
     HEAP32[$188 >> 2] = $16; //@line 23543
     $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 23544
     HEAP32[$189 >> 2] = $18; //@line 23545
     $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 23546
     HEAP32[$190 >> 2] = $20; //@line 23547
     $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 23548
     HEAP32[$191 >> 2] = $22; //@line 23549
     $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 23550
     HEAP32[$192 >> 2] = $24; //@line 23551
     $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 23552
     HEAP32[$193 >> 2] = $26; //@line 23553
     $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 23554
     HEAP32[$194 >> 2] = $28; //@line 23555
     $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 23556
     HEAP32[$195 >> 2] = $30; //@line 23557
     $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 23558
     HEAP32[$196 >> 2] = $32; //@line 23559
     $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 23560
     HEAP32[$197 >> 2] = $34; //@line 23561
     $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 23562
     HEAP32[$198 >> 2] = $36; //@line 23563
     $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 23564
     HEAP32[$199 >> 2] = $38; //@line 23565
     $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 23566
     HEAP32[$200 >> 2] = $40; //@line 23567
     $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 23568
     HEAP32[$201 >> 2] = $42; //@line 23569
     $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 23570
     HEAP32[$202 >> 2] = $44; //@line 23571
     $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 23572
     HEAP32[$203 >> 2] = $46; //@line 23573
     $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 23574
     HEAP32[$204 >> 2] = $48; //@line 23575
     $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 23576
     HEAP32[$205 >> 2] = $50; //@line 23577
     $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 23578
     HEAP32[$206 >> 2] = $52; //@line 23579
     $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 23580
     HEAP16[$207 >> 1] = $175; //@line 23581
     $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 23582
     HEAP32[$208 >> 2] = $54; //@line 23583
     $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 23584
     HEAP32[$209 >> 2] = $56; //@line 23585
     $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 23586
     HEAP32[$210 >> 2] = $58; //@line 23587
     $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 23588
     HEAP32[$211 >> 2] = $60; //@line 23589
     $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 23590
     HEAP32[$212 >> 2] = $62; //@line 23591
     $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 23592
     HEAP32[$213 >> 2] = $64; //@line 23593
     $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 23594
     HEAP32[$214 >> 2] = $66; //@line 23595
     $215 = $ReallocAsyncCtx3 + 144 | 0; //@line 23596
     HEAP32[$215 >> 2] = $68; //@line 23597
     $216 = $ReallocAsyncCtx3 + 148 | 0; //@line 23598
     HEAP32[$216 >> 2] = $70; //@line 23599
     $217 = $ReallocAsyncCtx3 + 152 | 0; //@line 23600
     HEAP32[$217 >> 2] = $72; //@line 23601
     $218 = $ReallocAsyncCtx3 + 156 | 0; //@line 23602
     HEAP32[$218 >> 2] = $74; //@line 23603
     $219 = $ReallocAsyncCtx3 + 160 | 0; //@line 23604
     HEAP32[$219 >> 2] = $76; //@line 23605
     $220 = $ReallocAsyncCtx3 + 164 | 0; //@line 23606
     HEAP32[$220 >> 2] = $78; //@line 23607
     $221 = $ReallocAsyncCtx3 + 168 | 0; //@line 23608
     HEAP32[$221 >> 2] = $80; //@line 23609
     $222 = $ReallocAsyncCtx3 + 172 | 0; //@line 23610
     HEAP32[$222 >> 2] = $82; //@line 23611
     $223 = $ReallocAsyncCtx3 + 176 | 0; //@line 23612
     HEAP32[$223 >> 2] = $$1202$in$i; //@line 23613
     $224 = $ReallocAsyncCtx3 + 180 | 0; //@line 23614
     HEAP32[$224 >> 2] = $84; //@line 23615
     $225 = $ReallocAsyncCtx3 + 184 | 0; //@line 23616
     HEAP32[$225 >> 2] = $86; //@line 23617
     $226 = $ReallocAsyncCtx3 + 188 | 0; //@line 23618
     HEAP32[$226 >> 2] = $88; //@line 23619
     $227 = $ReallocAsyncCtx3 + 192 | 0; //@line 23620
     HEAP32[$227 >> 2] = $90; //@line 23621
     $228 = $ReallocAsyncCtx3 + 196 | 0; //@line 23622
     HEAP16[$228 >> 1] = $$1202$i; //@line 23623
     $229 = $ReallocAsyncCtx3 + 200 | 0; //@line 23624
     HEAP32[$229 >> 2] = $92; //@line 23625
     $230 = $ReallocAsyncCtx3 + 204 | 0; //@line 23626
     HEAP32[$230 >> 2] = $96; //@line 23627
     $231 = $ReallocAsyncCtx3 + 208 | 0; //@line 23628
     HEAP32[$231 >> 2] = $98; //@line 23629
     $232 = $ReallocAsyncCtx3 + 212 | 0; //@line 23630
     HEAP32[$232 >> 2] = $94; //@line 23631
     $233 = $ReallocAsyncCtx3 + 216 | 0; //@line 23632
     HEAP32[$233 >> 2] = $102; //@line 23633
     $234 = $ReallocAsyncCtx3 + 220 | 0; //@line 23634
     HEAP32[$234 >> 2] = $100; //@line 23635
     $235 = $ReallocAsyncCtx3 + 224 | 0; //@line 23636
     HEAP32[$235 >> 2] = $104; //@line 23637
     $236 = $ReallocAsyncCtx3 + 228 | 0; //@line 23638
     HEAP32[$236 >> 2] = $106; //@line 23639
     $237 = $ReallocAsyncCtx3 + 232 | 0; //@line 23640
     HEAP32[$237 >> 2] = $108; //@line 23641
     $238 = $ReallocAsyncCtx3 + 236 | 0; //@line 23642
     HEAP32[$238 >> 2] = $110; //@line 23643
     $239 = $ReallocAsyncCtx3 + 240 | 0; //@line 23644
     HEAP32[$239 >> 2] = $112; //@line 23645
     $240 = $ReallocAsyncCtx3 + 244 | 0; //@line 23646
     HEAP32[$240 >> 2] = $241; //@line 23647
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 23648
     HEAP32[$242 >> 2] = $114; //@line 23649
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 23650
     HEAP32[$243 >> 2] = $116; //@line 23651
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 23652
     HEAP32[$244 >> 2] = $118; //@line 23653
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 23654
     HEAP32[$245 >> 2] = $120; //@line 23655
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 23656
     HEAP32[$246 >> 2] = $157; //@line 23657
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 23658
     HEAP32[$247 >> 2] = $124; //@line 23659
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 23660
     HEAP32[$248 >> 2] = $126; //@line 23661
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 23662
     HEAP32[$249 >> 2] = $128; //@line 23663
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 23664
     HEAP32[$250 >> 2] = $130; //@line 23665
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 23666
     HEAP32[$251 >> 2] = $14; //@line 23667
     sp = STACKTOP; //@line 23668
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3844, 4279, $86); //@line 23673
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3844, 4348, $4); //@line 23678
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 23683
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$38 >> 2] | 0; //@line 23687
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 23693
       $289 = $241 + 1 | 0; //@line 23694
       HEAP32[$88 >> 2] = $289; //@line 23695
       $290 = HEAP32[$40 >> 2] | 0; //@line 23696
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 23697
       $291 = FUNCTION_TABLE_ii[$290 & 31]($$1202$i) | 0; //@line 23698
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 23701
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 23702
        HEAP32[$292 >> 2] = $2; //@line 23703
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 23704
        HEAP32[$293 >> 2] = $4; //@line 23705
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 23706
        HEAP32[$294 >> 2] = $6; //@line 23707
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 23708
        HEAP32[$295 >> 2] = $8; //@line 23709
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 23710
        HEAP32[$296 >> 2] = $132; //@line 23711
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 23712
        HEAP32[$297 >> 2] = $12; //@line 23713
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 23714
        HEAP32[$298 >> 2] = $10; //@line 23715
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 23716
        HEAP32[$299 >> 2] = $16; //@line 23717
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 23718
        HEAP32[$300 >> 2] = $18; //@line 23719
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 23720
        HEAP32[$301 >> 2] = $20; //@line 23721
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 23722
        HEAP32[$302 >> 2] = $22; //@line 23723
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 23724
        HEAP32[$303 >> 2] = $24; //@line 23725
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 23726
        HEAP32[$304 >> 2] = $281; //@line 23727
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 23728
        HEAP32[$305 >> 2] = $26; //@line 23729
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 23730
        HEAP32[$306 >> 2] = $28; //@line 23731
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 23732
        HEAP32[$307 >> 2] = $30; //@line 23733
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 23734
        HEAP32[$308 >> 2] = $289; //@line 23735
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 23736
        HEAP32[$309 >> 2] = $32; //@line 23737
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 23738
        HEAP32[$310 >> 2] = $34; //@line 23739
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 23740
        HEAP32[$311 >> 2] = $36; //@line 23741
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 23742
        HEAP32[$312 >> 2] = $38; //@line 23743
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 23744
        HEAP32[$313 >> 2] = $40; //@line 23745
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 23746
        HEAP32[$314 >> 2] = $42; //@line 23747
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 23748
        HEAP32[$315 >> 2] = $44; //@line 23749
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 23750
        HEAP32[$316 >> 2] = $46; //@line 23751
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 23752
        HEAP32[$317 >> 2] = $48; //@line 23753
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 23754
        HEAP32[$318 >> 2] = $50; //@line 23755
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 23756
        HEAP32[$319 >> 2] = $52; //@line 23757
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 23758
        HEAP32[$320 >> 2] = $54; //@line 23759
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 23760
        HEAP32[$321 >> 2] = $56; //@line 23761
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 23762
        HEAP32[$322 >> 2] = $58; //@line 23763
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 23764
        HEAP32[$323 >> 2] = $60; //@line 23765
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 23766
        HEAP32[$324 >> 2] = $62; //@line 23767
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 23768
        HEAP32[$325 >> 2] = $64; //@line 23769
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 23770
        HEAP32[$326 >> 2] = $66; //@line 23771
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 23772
        HEAP32[$327 >> 2] = $68; //@line 23773
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 23774
        HEAP32[$328 >> 2] = $70; //@line 23775
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 23776
        HEAP32[$329 >> 2] = $72; //@line 23777
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 23778
        HEAP32[$330 >> 2] = $74; //@line 23779
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 23780
        HEAP32[$331 >> 2] = $76; //@line 23781
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 23782
        HEAP32[$332 >> 2] = $78; //@line 23783
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 23784
        HEAP32[$333 >> 2] = $80; //@line 23785
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 23786
        HEAP32[$334 >> 2] = $82; //@line 23787
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 23788
        HEAP32[$335 >> 2] = $84; //@line 23789
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 23790
        HEAP32[$336 >> 2] = $86; //@line 23791
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 23792
        HEAP32[$337 >> 2] = $88; //@line 23793
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 23794
        HEAP32[$338 >> 2] = $90; //@line 23795
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 23796
        HEAP32[$339 >> 2] = $92; //@line 23797
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 23798
        HEAP32[$340 >> 2] = $94; //@line 23799
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 23800
        HEAP32[$341 >> 2] = $96; //@line 23801
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 23802
        HEAP32[$342 >> 2] = $98; //@line 23803
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 23804
        HEAP32[$343 >> 2] = $100; //@line 23805
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 23806
        HEAP32[$344 >> 2] = $102; //@line 23807
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 23808
        HEAP32[$345 >> 2] = $104; //@line 23809
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 23810
        HEAP32[$346 >> 2] = $106; //@line 23811
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 23812
        HEAP32[$347 >> 2] = $108; //@line 23813
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 23814
        HEAP32[$348 >> 2] = $110; //@line 23815
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 23816
        HEAP32[$349 >> 2] = $112; //@line 23817
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 23818
        HEAP32[$350 >> 2] = $114; //@line 23819
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 23820
        HEAP32[$351 >> 2] = $116; //@line 23821
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 23822
        HEAP32[$352 >> 2] = $118; //@line 23823
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 23824
        HEAP32[$353 >> 2] = $120; //@line 23825
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 23826
        HEAP32[$354 >> 2] = $157; //@line 23827
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 23828
        HEAP32[$355 >> 2] = $124; //@line 23829
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 23830
        HEAP32[$356 >> 2] = $126; //@line 23831
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 23832
        HEAP32[$357 >> 2] = $128; //@line 23833
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 23834
        HEAP32[$358 >> 2] = $130; //@line 23835
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 23836
        HEAP32[$359 >> 2] = $14; //@line 23837
        sp = STACKTOP; //@line 23838
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 23842
       ___async_unwind = 0; //@line 23843
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 23844
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 23845
       HEAP32[$292 >> 2] = $2; //@line 23846
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 23847
       HEAP32[$293 >> 2] = $4; //@line 23848
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 23849
       HEAP32[$294 >> 2] = $6; //@line 23850
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 23851
       HEAP32[$295 >> 2] = $8; //@line 23852
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 23853
       HEAP32[$296 >> 2] = $132; //@line 23854
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 23855
       HEAP32[$297 >> 2] = $12; //@line 23856
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 23857
       HEAP32[$298 >> 2] = $10; //@line 23858
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 23859
       HEAP32[$299 >> 2] = $16; //@line 23860
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 23861
       HEAP32[$300 >> 2] = $18; //@line 23862
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 23863
       HEAP32[$301 >> 2] = $20; //@line 23864
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 23865
       HEAP32[$302 >> 2] = $22; //@line 23866
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 23867
       HEAP32[$303 >> 2] = $24; //@line 23868
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 23869
       HEAP32[$304 >> 2] = $281; //@line 23870
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 23871
       HEAP32[$305 >> 2] = $26; //@line 23872
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 23873
       HEAP32[$306 >> 2] = $28; //@line 23874
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 23875
       HEAP32[$307 >> 2] = $30; //@line 23876
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 23877
       HEAP32[$308 >> 2] = $289; //@line 23878
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 23879
       HEAP32[$309 >> 2] = $32; //@line 23880
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 23881
       HEAP32[$310 >> 2] = $34; //@line 23882
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 23883
       HEAP32[$311 >> 2] = $36; //@line 23884
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 23885
       HEAP32[$312 >> 2] = $38; //@line 23886
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 23887
       HEAP32[$313 >> 2] = $40; //@line 23888
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 23889
       HEAP32[$314 >> 2] = $42; //@line 23890
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 23891
       HEAP32[$315 >> 2] = $44; //@line 23892
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 23893
       HEAP32[$316 >> 2] = $46; //@line 23894
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 23895
       HEAP32[$317 >> 2] = $48; //@line 23896
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 23897
       HEAP32[$318 >> 2] = $50; //@line 23898
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 23899
       HEAP32[$319 >> 2] = $52; //@line 23900
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 23901
       HEAP32[$320 >> 2] = $54; //@line 23902
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 23903
       HEAP32[$321 >> 2] = $56; //@line 23904
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 23905
       HEAP32[$322 >> 2] = $58; //@line 23906
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 23907
       HEAP32[$323 >> 2] = $60; //@line 23908
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 23909
       HEAP32[$324 >> 2] = $62; //@line 23910
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 23911
       HEAP32[$325 >> 2] = $64; //@line 23912
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 23913
       HEAP32[$326 >> 2] = $66; //@line 23914
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 23915
       HEAP32[$327 >> 2] = $68; //@line 23916
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 23917
       HEAP32[$328 >> 2] = $70; //@line 23918
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 23919
       HEAP32[$329 >> 2] = $72; //@line 23920
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 23921
       HEAP32[$330 >> 2] = $74; //@line 23922
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 23923
       HEAP32[$331 >> 2] = $76; //@line 23924
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 23925
       HEAP32[$332 >> 2] = $78; //@line 23926
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 23927
       HEAP32[$333 >> 2] = $80; //@line 23928
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 23929
       HEAP32[$334 >> 2] = $82; //@line 23930
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 23931
       HEAP32[$335 >> 2] = $84; //@line 23932
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 23933
       HEAP32[$336 >> 2] = $86; //@line 23934
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 23935
       HEAP32[$337 >> 2] = $88; //@line 23936
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 23937
       HEAP32[$338 >> 2] = $90; //@line 23938
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 23939
       HEAP32[$339 >> 2] = $92; //@line 23940
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 23941
       HEAP32[$340 >> 2] = $94; //@line 23942
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 23943
       HEAP32[$341 >> 2] = $96; //@line 23944
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 23945
       HEAP32[$342 >> 2] = $98; //@line 23946
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 23947
       HEAP32[$343 >> 2] = $100; //@line 23948
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 23949
       HEAP32[$344 >> 2] = $102; //@line 23950
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 23951
       HEAP32[$345 >> 2] = $104; //@line 23952
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 23953
       HEAP32[$346 >> 2] = $106; //@line 23954
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 23955
       HEAP32[$347 >> 2] = $108; //@line 23956
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 23957
       HEAP32[$348 >> 2] = $110; //@line 23958
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 23959
       HEAP32[$349 >> 2] = $112; //@line 23960
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 23961
       HEAP32[$350 >> 2] = $114; //@line 23962
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 23963
       HEAP32[$351 >> 2] = $116; //@line 23964
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 23965
       HEAP32[$352 >> 2] = $118; //@line 23966
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 23967
       HEAP32[$353 >> 2] = $120; //@line 23968
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 23969
       HEAP32[$354 >> 2] = $157; //@line 23970
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 23971
       HEAP32[$355 >> 2] = $124; //@line 23972
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 23973
       HEAP32[$356 >> 2] = $126; //@line 23974
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 23975
       HEAP32[$357 >> 2] = $128; //@line 23976
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 23977
       HEAP32[$358 >> 2] = $130; //@line 23978
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 23979
       HEAP32[$359 >> 2] = $14; //@line 23980
       sp = STACKTOP; //@line 23981
       return;
      }
     }
     _mbed_tracef(2, 3844, 4410, $50); //@line 23985
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$38 >> 2] | 0; //@line 23990
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 23992
     $363 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 23993
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 23996
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 23997
      HEAP32[$364 >> 2] = $2; //@line 23998
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 23999
      HEAP32[$365 >> 2] = $4; //@line 24000
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 24001
      HEAP32[$366 >> 2] = $6; //@line 24002
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 24003
      HEAP32[$367 >> 2] = $8; //@line 24004
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 24005
      HEAP32[$368 >> 2] = $10; //@line 24006
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 24007
      HEAP32[$369 >> 2] = $12; //@line 24008
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 24009
      HEAP32[$370 >> 2] = $14; //@line 24010
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 24011
      HEAP32[$371 >> 2] = $16; //@line 24012
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 24013
      HEAP32[$372 >> 2] = $18; //@line 24014
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 24015
      HEAP32[$373 >> 2] = $20; //@line 24016
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 24017
      HEAP32[$374 >> 2] = $22; //@line 24018
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 24019
      HEAP32[$375 >> 2] = $24; //@line 24020
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 24021
      HEAP32[$376 >> 2] = $26; //@line 24022
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 24023
      HEAP32[$377 >> 2] = $28; //@line 24024
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 24025
      HEAP32[$378 >> 2] = $30; //@line 24026
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 24027
      HEAP32[$379 >> 2] = $32; //@line 24028
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 24029
      HEAP32[$380 >> 2] = $34; //@line 24030
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 24031
      HEAP32[$381 >> 2] = $36; //@line 24032
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 24033
      HEAP32[$382 >> 2] = $38; //@line 24034
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 24035
      HEAP32[$383 >> 2] = $40; //@line 24036
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 24037
      HEAP32[$384 >> 2] = $42; //@line 24038
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 24039
      HEAP32[$385 >> 2] = $44; //@line 24040
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 24041
      HEAP32[$386 >> 2] = $46; //@line 24042
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 24043
      HEAP32[$387 >> 2] = $48; //@line 24044
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 24045
      HEAP32[$388 >> 2] = $50; //@line 24046
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 24047
      HEAP32[$389 >> 2] = $52; //@line 24048
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 24049
      HEAP32[$390 >> 2] = $54; //@line 24050
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 24051
      HEAP32[$391 >> 2] = $56; //@line 24052
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 24053
      HEAP32[$392 >> 2] = $58; //@line 24054
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 24055
      HEAP32[$393 >> 2] = $60; //@line 24056
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 24057
      HEAP32[$394 >> 2] = $62; //@line 24058
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 24059
      HEAP32[$395 >> 2] = $64; //@line 24060
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 24061
      HEAP32[$396 >> 2] = $66; //@line 24062
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 24063
      HEAP32[$397 >> 2] = $68; //@line 24064
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 24065
      HEAP32[$398 >> 2] = $70; //@line 24066
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 24067
      HEAP32[$399 >> 2] = $72; //@line 24068
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 24069
      HEAP32[$400 >> 2] = $74; //@line 24070
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 24071
      HEAP32[$401 >> 2] = $76; //@line 24072
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 24073
      HEAP32[$402 >> 2] = $78; //@line 24074
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 24075
      HEAP32[$403 >> 2] = $80; //@line 24076
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 24077
      HEAP32[$404 >> 2] = $82; //@line 24078
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 24079
      HEAP32[$405 >> 2] = $84; //@line 24080
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 24081
      HEAP32[$406 >> 2] = $86; //@line 24082
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 24083
      HEAP32[$407 >> 2] = $88; //@line 24084
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 24085
      HEAP32[$408 >> 2] = $90; //@line 24086
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 24087
      HEAP32[$409 >> 2] = $92; //@line 24088
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 24089
      HEAP32[$410 >> 2] = $94; //@line 24090
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 24091
      HEAP32[$411 >> 2] = $96; //@line 24092
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 24093
      HEAP32[$412 >> 2] = $98; //@line 24094
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 24095
      HEAP32[$413 >> 2] = $100; //@line 24096
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 24097
      HEAP32[$414 >> 2] = $102; //@line 24098
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 24099
      HEAP32[$415 >> 2] = $104; //@line 24100
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 24101
      HEAP32[$416 >> 2] = $106; //@line 24102
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 24103
      HEAP32[$417 >> 2] = $108; //@line 24104
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 24105
      HEAP32[$418 >> 2] = $110; //@line 24106
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 24107
      HEAP32[$419 >> 2] = $112; //@line 24108
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 24109
      HEAP32[$420 >> 2] = $114; //@line 24110
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 24111
      HEAP32[$421 >> 2] = $116; //@line 24112
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 24113
      HEAP32[$422 >> 2] = $118; //@line 24114
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 24115
      HEAP32[$423 >> 2] = $120; //@line 24116
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 24117
      HEAP32[$424 >> 2] = $157; //@line 24118
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 24119
      HEAP32[$425 >> 2] = $124; //@line 24120
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 24121
      HEAP32[$426 >> 2] = $126; //@line 24122
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 24123
      HEAP32[$427 >> 2] = $128; //@line 24124
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 24125
      HEAP32[$428 >> 2] = $130; //@line 24126
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 24127
      HEAP32[$429 >> 2] = $132; //@line 24128
      sp = STACKTOP; //@line 24129
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 24133
     ___async_unwind = 0; //@line 24134
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 24135
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 24136
     HEAP32[$364 >> 2] = $2; //@line 24137
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 24138
     HEAP32[$365 >> 2] = $4; //@line 24139
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 24140
     HEAP32[$366 >> 2] = $6; //@line 24141
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 24142
     HEAP32[$367 >> 2] = $8; //@line 24143
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 24144
     HEAP32[$368 >> 2] = $10; //@line 24145
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 24146
     HEAP32[$369 >> 2] = $12; //@line 24147
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 24148
     HEAP32[$370 >> 2] = $14; //@line 24149
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 24150
     HEAP32[$371 >> 2] = $16; //@line 24151
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 24152
     HEAP32[$372 >> 2] = $18; //@line 24153
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 24154
     HEAP32[$373 >> 2] = $20; //@line 24155
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 24156
     HEAP32[$374 >> 2] = $22; //@line 24157
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 24158
     HEAP32[$375 >> 2] = $24; //@line 24159
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 24160
     HEAP32[$376 >> 2] = $26; //@line 24161
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 24162
     HEAP32[$377 >> 2] = $28; //@line 24163
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 24164
     HEAP32[$378 >> 2] = $30; //@line 24165
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 24166
     HEAP32[$379 >> 2] = $32; //@line 24167
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 24168
     HEAP32[$380 >> 2] = $34; //@line 24169
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 24170
     HEAP32[$381 >> 2] = $36; //@line 24171
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 24172
     HEAP32[$382 >> 2] = $38; //@line 24173
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 24174
     HEAP32[$383 >> 2] = $40; //@line 24175
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 24176
     HEAP32[$384 >> 2] = $42; //@line 24177
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 24178
     HEAP32[$385 >> 2] = $44; //@line 24179
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 24180
     HEAP32[$386 >> 2] = $46; //@line 24181
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 24182
     HEAP32[$387 >> 2] = $48; //@line 24183
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 24184
     HEAP32[$388 >> 2] = $50; //@line 24185
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 24186
     HEAP32[$389 >> 2] = $52; //@line 24187
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 24188
     HEAP32[$390 >> 2] = $54; //@line 24189
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 24190
     HEAP32[$391 >> 2] = $56; //@line 24191
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 24192
     HEAP32[$392 >> 2] = $58; //@line 24193
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 24194
     HEAP32[$393 >> 2] = $60; //@line 24195
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 24196
     HEAP32[$394 >> 2] = $62; //@line 24197
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 24198
     HEAP32[$395 >> 2] = $64; //@line 24199
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 24200
     HEAP32[$396 >> 2] = $66; //@line 24201
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 24202
     HEAP32[$397 >> 2] = $68; //@line 24203
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 24204
     HEAP32[$398 >> 2] = $70; //@line 24205
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 24206
     HEAP32[$399 >> 2] = $72; //@line 24207
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 24208
     HEAP32[$400 >> 2] = $74; //@line 24209
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 24210
     HEAP32[$401 >> 2] = $76; //@line 24211
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 24212
     HEAP32[$402 >> 2] = $78; //@line 24213
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 24214
     HEAP32[$403 >> 2] = $80; //@line 24215
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 24216
     HEAP32[$404 >> 2] = $82; //@line 24217
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 24218
     HEAP32[$405 >> 2] = $84; //@line 24219
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 24220
     HEAP32[$406 >> 2] = $86; //@line 24221
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 24222
     HEAP32[$407 >> 2] = $88; //@line 24223
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 24224
     HEAP32[$408 >> 2] = $90; //@line 24225
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 24226
     HEAP32[$409 >> 2] = $92; //@line 24227
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 24228
     HEAP32[$410 >> 2] = $94; //@line 24229
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 24230
     HEAP32[$411 >> 2] = $96; //@line 24231
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 24232
     HEAP32[$412 >> 2] = $98; //@line 24233
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 24234
     HEAP32[$413 >> 2] = $100; //@line 24235
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 24236
     HEAP32[$414 >> 2] = $102; //@line 24237
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 24238
     HEAP32[$415 >> 2] = $104; //@line 24239
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 24240
     HEAP32[$416 >> 2] = $106; //@line 24241
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 24242
     HEAP32[$417 >> 2] = $108; //@line 24243
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 24244
     HEAP32[$418 >> 2] = $110; //@line 24245
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 24246
     HEAP32[$419 >> 2] = $112; //@line 24247
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 24248
     HEAP32[$420 >> 2] = $114; //@line 24249
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 24250
     HEAP32[$421 >> 2] = $116; //@line 24251
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 24252
     HEAP32[$422 >> 2] = $118; //@line 24253
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 24254
     HEAP32[$423 >> 2] = $120; //@line 24255
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 24256
     HEAP32[$424 >> 2] = $157; //@line 24257
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 24258
     HEAP32[$425 >> 2] = $124; //@line 24259
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 24260
     HEAP32[$426 >> 2] = $126; //@line 24261
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 24262
     HEAP32[$427 >> 2] = $128; //@line 24263
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 24264
     HEAP32[$428 >> 2] = $130; //@line 24265
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 24266
     HEAP32[$429 >> 2] = $132; //@line 24267
     sp = STACKTOP; //@line 24268
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 24273
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$38 >> 2] | 0; //@line 24277
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 24283
       $439 = $241 + 1 | 0; //@line 24284
       HEAP32[$88 >> 2] = $439; //@line 24285
       $440 = HEAP32[$40 >> 2] | 0; //@line 24286
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 24287
       $441 = FUNCTION_TABLE_ii[$440 & 31]($$1202$i) | 0; //@line 24288
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 24291
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 24292
        HEAP32[$442 >> 2] = $2; //@line 24293
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 24294
        HEAP32[$443 >> 2] = $4; //@line 24295
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 24296
        HEAP32[$444 >> 2] = $431; //@line 24297
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 24298
        HEAP32[$445 >> 2] = $6; //@line 24299
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 24300
        HEAP32[$446 >> 2] = $8; //@line 24301
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 24302
        HEAP32[$447 >> 2] = $132; //@line 24303
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 24304
        HEAP32[$448 >> 2] = $12; //@line 24305
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 24306
        HEAP32[$449 >> 2] = $10; //@line 24307
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 24308
        HEAP32[$450 >> 2] = $16; //@line 24309
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 24310
        HEAP32[$451 >> 2] = $439; //@line 24311
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 24312
        HEAP32[$452 >> 2] = $18; //@line 24313
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 24314
        HEAP32[$453 >> 2] = $20; //@line 24315
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 24316
        HEAP32[$454 >> 2] = $22; //@line 24317
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 24318
        HEAP32[$455 >> 2] = $24; //@line 24319
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 24320
        HEAP32[$456 >> 2] = $26; //@line 24321
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 24322
        HEAP32[$457 >> 2] = $28; //@line 24323
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 24324
        HEAP32[$458 >> 2] = $30; //@line 24325
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 24326
        HEAP32[$459 >> 2] = $32; //@line 24327
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 24328
        HEAP32[$460 >> 2] = $34; //@line 24329
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 24330
        HEAP32[$461 >> 2] = $36; //@line 24331
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 24332
        HEAP32[$462 >> 2] = $38; //@line 24333
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 24334
        HEAP32[$463 >> 2] = $40; //@line 24335
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 24336
        HEAP32[$464 >> 2] = $42; //@line 24337
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 24338
        HEAP32[$465 >> 2] = $44; //@line 24339
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 24340
        HEAP32[$466 >> 2] = $46; //@line 24341
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 24342
        HEAP32[$467 >> 2] = $48; //@line 24343
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 24344
        HEAP32[$468 >> 2] = $50; //@line 24345
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 24346
        HEAP32[$469 >> 2] = $52; //@line 24347
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 24348
        HEAP32[$470 >> 2] = $54; //@line 24349
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 24350
        HEAP32[$471 >> 2] = $56; //@line 24351
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 24352
        HEAP32[$472 >> 2] = $58; //@line 24353
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 24354
        HEAP32[$473 >> 2] = $60; //@line 24355
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 24356
        HEAP32[$474 >> 2] = $62; //@line 24357
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 24358
        HEAP32[$475 >> 2] = $64; //@line 24359
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 24360
        HEAP32[$476 >> 2] = $66; //@line 24361
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 24362
        HEAP32[$477 >> 2] = $68; //@line 24363
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 24364
        HEAP32[$478 >> 2] = $70; //@line 24365
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 24366
        HEAP32[$479 >> 2] = $72; //@line 24367
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 24368
        HEAP32[$480 >> 2] = $74; //@line 24369
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 24370
        HEAP32[$481 >> 2] = $76; //@line 24371
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 24372
        HEAP32[$482 >> 2] = $78; //@line 24373
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 24374
        HEAP32[$483 >> 2] = $80; //@line 24375
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 24376
        HEAP32[$484 >> 2] = $82; //@line 24377
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 24378
        HEAP32[$485 >> 2] = $84; //@line 24379
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 24380
        HEAP32[$486 >> 2] = $86; //@line 24381
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 24382
        HEAP32[$487 >> 2] = $88; //@line 24383
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 24384
        HEAP32[$488 >> 2] = $90; //@line 24385
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 24386
        HEAP32[$489 >> 2] = $92; //@line 24387
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 24388
        HEAP32[$490 >> 2] = $94; //@line 24389
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 24390
        HEAP32[$491 >> 2] = $96; //@line 24391
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 24392
        HEAP32[$492 >> 2] = $98; //@line 24393
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 24394
        HEAP32[$493 >> 2] = $100; //@line 24395
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 24396
        HEAP32[$494 >> 2] = $102; //@line 24397
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 24398
        HEAP32[$495 >> 2] = $104; //@line 24399
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 24400
        HEAP32[$496 >> 2] = $106; //@line 24401
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 24402
        HEAP32[$497 >> 2] = $108; //@line 24403
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 24404
        HEAP32[$498 >> 2] = $110; //@line 24405
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 24406
        HEAP32[$499 >> 2] = $112; //@line 24407
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 24408
        HEAP32[$500 >> 2] = $114; //@line 24409
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 24410
        HEAP32[$501 >> 2] = $116; //@line 24411
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 24412
        HEAP32[$502 >> 2] = $118; //@line 24413
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 24414
        HEAP32[$503 >> 2] = $120; //@line 24415
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 24416
        HEAP32[$504 >> 2] = $157; //@line 24417
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 24418
        HEAP32[$505 >> 2] = $124; //@line 24419
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 24420
        HEAP32[$506 >> 2] = $126; //@line 24421
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 24422
        HEAP32[$507 >> 2] = $128; //@line 24423
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 24424
        HEAP32[$508 >> 2] = $130; //@line 24425
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 24426
        HEAP32[$509 >> 2] = $14; //@line 24427
        sp = STACKTOP; //@line 24428
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 24432
       ___async_unwind = 0; //@line 24433
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 24434
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 24435
       HEAP32[$442 >> 2] = $2; //@line 24436
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 24437
       HEAP32[$443 >> 2] = $4; //@line 24438
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 24439
       HEAP32[$444 >> 2] = $431; //@line 24440
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 24441
       HEAP32[$445 >> 2] = $6; //@line 24442
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 24443
       HEAP32[$446 >> 2] = $8; //@line 24444
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 24445
       HEAP32[$447 >> 2] = $132; //@line 24446
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 24447
       HEAP32[$448 >> 2] = $12; //@line 24448
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 24449
       HEAP32[$449 >> 2] = $10; //@line 24450
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 24451
       HEAP32[$450 >> 2] = $16; //@line 24452
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 24453
       HEAP32[$451 >> 2] = $439; //@line 24454
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 24455
       HEAP32[$452 >> 2] = $18; //@line 24456
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 24457
       HEAP32[$453 >> 2] = $20; //@line 24458
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 24459
       HEAP32[$454 >> 2] = $22; //@line 24460
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 24461
       HEAP32[$455 >> 2] = $24; //@line 24462
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 24463
       HEAP32[$456 >> 2] = $26; //@line 24464
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 24465
       HEAP32[$457 >> 2] = $28; //@line 24466
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 24467
       HEAP32[$458 >> 2] = $30; //@line 24468
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 24469
       HEAP32[$459 >> 2] = $32; //@line 24470
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 24471
       HEAP32[$460 >> 2] = $34; //@line 24472
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 24473
       HEAP32[$461 >> 2] = $36; //@line 24474
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 24475
       HEAP32[$462 >> 2] = $38; //@line 24476
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 24477
       HEAP32[$463 >> 2] = $40; //@line 24478
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 24479
       HEAP32[$464 >> 2] = $42; //@line 24480
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 24481
       HEAP32[$465 >> 2] = $44; //@line 24482
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 24483
       HEAP32[$466 >> 2] = $46; //@line 24484
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 24485
       HEAP32[$467 >> 2] = $48; //@line 24486
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 24487
       HEAP32[$468 >> 2] = $50; //@line 24488
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 24489
       HEAP32[$469 >> 2] = $52; //@line 24490
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 24491
       HEAP32[$470 >> 2] = $54; //@line 24492
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 24493
       HEAP32[$471 >> 2] = $56; //@line 24494
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 24495
       HEAP32[$472 >> 2] = $58; //@line 24496
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 24497
       HEAP32[$473 >> 2] = $60; //@line 24498
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 24499
       HEAP32[$474 >> 2] = $62; //@line 24500
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 24501
       HEAP32[$475 >> 2] = $64; //@line 24502
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 24503
       HEAP32[$476 >> 2] = $66; //@line 24504
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 24505
       HEAP32[$477 >> 2] = $68; //@line 24506
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 24507
       HEAP32[$478 >> 2] = $70; //@line 24508
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 24509
       HEAP32[$479 >> 2] = $72; //@line 24510
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 24511
       HEAP32[$480 >> 2] = $74; //@line 24512
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 24513
       HEAP32[$481 >> 2] = $76; //@line 24514
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 24515
       HEAP32[$482 >> 2] = $78; //@line 24516
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 24517
       HEAP32[$483 >> 2] = $80; //@line 24518
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 24519
       HEAP32[$484 >> 2] = $82; //@line 24520
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 24521
       HEAP32[$485 >> 2] = $84; //@line 24522
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 24523
       HEAP32[$486 >> 2] = $86; //@line 24524
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 24525
       HEAP32[$487 >> 2] = $88; //@line 24526
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 24527
       HEAP32[$488 >> 2] = $90; //@line 24528
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 24529
       HEAP32[$489 >> 2] = $92; //@line 24530
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 24531
       HEAP32[$490 >> 2] = $94; //@line 24532
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 24533
       HEAP32[$491 >> 2] = $96; //@line 24534
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 24535
       HEAP32[$492 >> 2] = $98; //@line 24536
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 24537
       HEAP32[$493 >> 2] = $100; //@line 24538
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 24539
       HEAP32[$494 >> 2] = $102; //@line 24540
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 24541
       HEAP32[$495 >> 2] = $104; //@line 24542
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 24543
       HEAP32[$496 >> 2] = $106; //@line 24544
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 24545
       HEAP32[$497 >> 2] = $108; //@line 24546
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 24547
       HEAP32[$498 >> 2] = $110; //@line 24548
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 24549
       HEAP32[$499 >> 2] = $112; //@line 24550
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 24551
       HEAP32[$500 >> 2] = $114; //@line 24552
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 24553
       HEAP32[$501 >> 2] = $116; //@line 24554
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 24555
       HEAP32[$502 >> 2] = $118; //@line 24556
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 24557
       HEAP32[$503 >> 2] = $120; //@line 24558
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 24559
       HEAP32[$504 >> 2] = $157; //@line 24560
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 24561
       HEAP32[$505 >> 2] = $124; //@line 24562
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 24563
       HEAP32[$506 >> 2] = $126; //@line 24564
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 24565
       HEAP32[$507 >> 2] = $128; //@line 24566
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 24567
       HEAP32[$508 >> 2] = $130; //@line 24568
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 24569
       HEAP32[$509 >> 2] = $14; //@line 24570
       sp = STACKTOP; //@line 24571
       return;
      }
     }
     _mbed_tracef(2, 3844, 4605, $58); //@line 24575
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$38 >> 2] | 0; //@line 24580
     $512 = $511 + 56 | 0; //@line 24581
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3844, 4739, $30); //@line 24585
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 24589
     $516 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 24590
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 24593
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 24594
      HEAP32[$517 >> 2] = $2; //@line 24595
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 24596
      HEAP32[$518 >> 2] = $4; //@line 24597
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 24598
      HEAP32[$519 >> 2] = $6; //@line 24599
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 24600
      HEAP32[$520 >> 2] = $8; //@line 24601
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 24602
      HEAP32[$521 >> 2] = $10; //@line 24603
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 24604
      HEAP32[$522 >> 2] = $12; //@line 24605
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 24606
      HEAP32[$523 >> 2] = $14; //@line 24607
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 24608
      HEAP32[$524 >> 2] = $16; //@line 24609
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 24610
      HEAP32[$525 >> 2] = $18; //@line 24611
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 24612
      HEAP32[$526 >> 2] = $20; //@line 24613
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 24614
      HEAP32[$527 >> 2] = $22; //@line 24615
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 24616
      HEAP32[$528 >> 2] = $24; //@line 24617
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 24618
      HEAP32[$529 >> 2] = $26; //@line 24619
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 24620
      HEAP32[$530 >> 2] = $28; //@line 24621
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 24622
      HEAP32[$531 >> 2] = $30; //@line 24623
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 24624
      HEAP32[$532 >> 2] = $32; //@line 24625
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 24626
      HEAP32[$533 >> 2] = $34; //@line 24627
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 24628
      HEAP32[$534 >> 2] = $36; //@line 24629
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 24630
      HEAP32[$535 >> 2] = $38; //@line 24631
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 24632
      HEAP32[$536 >> 2] = $40; //@line 24633
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 24634
      HEAP32[$537 >> 2] = $42; //@line 24635
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 24636
      HEAP32[$538 >> 2] = $44; //@line 24637
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 24638
      HEAP32[$539 >> 2] = $46; //@line 24639
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 24640
      HEAP32[$540 >> 2] = $48; //@line 24641
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 24642
      HEAP32[$541 >> 2] = $50; //@line 24643
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 24644
      HEAP32[$542 >> 2] = $52; //@line 24645
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 24646
      HEAP32[$543 >> 2] = $54; //@line 24647
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 24648
      HEAP32[$544 >> 2] = $56; //@line 24649
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 24650
      HEAP32[$545 >> 2] = $58; //@line 24651
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 24652
      HEAP32[$546 >> 2] = $60; //@line 24653
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 24654
      HEAP32[$547 >> 2] = $62; //@line 24655
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 24656
      HEAP32[$548 >> 2] = $64; //@line 24657
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 24658
      HEAP32[$549 >> 2] = $66; //@line 24659
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 24660
      HEAP32[$550 >> 2] = $68; //@line 24661
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 24662
      HEAP32[$551 >> 2] = $70; //@line 24663
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 24664
      HEAP32[$552 >> 2] = $72; //@line 24665
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 24666
      HEAP32[$553 >> 2] = $74; //@line 24667
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 24668
      HEAP32[$554 >> 2] = $76; //@line 24669
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 24670
      HEAP32[$555 >> 2] = $78; //@line 24671
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 24672
      HEAP32[$556 >> 2] = $80; //@line 24673
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 24674
      HEAP32[$557 >> 2] = $82; //@line 24675
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 24676
      HEAP32[$558 >> 2] = $84; //@line 24677
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 24678
      HEAP32[$559 >> 2] = $86; //@line 24679
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 24680
      HEAP32[$560 >> 2] = $88; //@line 24681
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 24682
      HEAP32[$561 >> 2] = $90; //@line 24683
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 24684
      HEAP32[$562 >> 2] = $92; //@line 24685
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 24686
      HEAP32[$563 >> 2] = $94; //@line 24687
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 24688
      HEAP32[$564 >> 2] = $96; //@line 24689
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 24690
      HEAP32[$565 >> 2] = $98; //@line 24691
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 24692
      HEAP32[$566 >> 2] = $100; //@line 24693
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 24694
      HEAP32[$567 >> 2] = $102; //@line 24695
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 24696
      HEAP32[$568 >> 2] = $104; //@line 24697
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 24698
      HEAP32[$569 >> 2] = $106; //@line 24699
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 24700
      HEAP32[$570 >> 2] = $108; //@line 24701
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 24702
      HEAP32[$571 >> 2] = $110; //@line 24703
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 24704
      HEAP32[$572 >> 2] = $112; //@line 24705
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 24706
      HEAP32[$573 >> 2] = $114; //@line 24707
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 24708
      HEAP32[$574 >> 2] = $116; //@line 24709
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 24710
      HEAP32[$575 >> 2] = $118; //@line 24711
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 24712
      HEAP32[$576 >> 2] = $120; //@line 24713
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 24714
      HEAP32[$577 >> 2] = $157; //@line 24715
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 24716
      HEAP32[$578 >> 2] = $124; //@line 24717
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 24718
      HEAP32[$579 >> 2] = $126; //@line 24719
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 24720
      HEAP32[$580 >> 2] = $128; //@line 24721
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 24722
      HEAP32[$581 >> 2] = $130; //@line 24723
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 24724
      HEAP32[$582 >> 2] = $132; //@line 24725
      sp = STACKTOP; //@line 24726
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 24730
     ___async_unwind = 0; //@line 24731
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 24732
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 24733
     HEAP32[$517 >> 2] = $2; //@line 24734
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 24735
     HEAP32[$518 >> 2] = $4; //@line 24736
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 24737
     HEAP32[$519 >> 2] = $6; //@line 24738
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 24739
     HEAP32[$520 >> 2] = $8; //@line 24740
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 24741
     HEAP32[$521 >> 2] = $10; //@line 24742
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 24743
     HEAP32[$522 >> 2] = $12; //@line 24744
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 24745
     HEAP32[$523 >> 2] = $14; //@line 24746
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 24747
     HEAP32[$524 >> 2] = $16; //@line 24748
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 24749
     HEAP32[$525 >> 2] = $18; //@line 24750
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 24751
     HEAP32[$526 >> 2] = $20; //@line 24752
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 24753
     HEAP32[$527 >> 2] = $22; //@line 24754
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 24755
     HEAP32[$528 >> 2] = $24; //@line 24756
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 24757
     HEAP32[$529 >> 2] = $26; //@line 24758
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 24759
     HEAP32[$530 >> 2] = $28; //@line 24760
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 24761
     HEAP32[$531 >> 2] = $30; //@line 24762
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 24763
     HEAP32[$532 >> 2] = $32; //@line 24764
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 24765
     HEAP32[$533 >> 2] = $34; //@line 24766
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 24767
     HEAP32[$534 >> 2] = $36; //@line 24768
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 24769
     HEAP32[$535 >> 2] = $38; //@line 24770
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 24771
     HEAP32[$536 >> 2] = $40; //@line 24772
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 24773
     HEAP32[$537 >> 2] = $42; //@line 24774
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 24775
     HEAP32[$538 >> 2] = $44; //@line 24776
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 24777
     HEAP32[$539 >> 2] = $46; //@line 24778
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 24779
     HEAP32[$540 >> 2] = $48; //@line 24780
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 24781
     HEAP32[$541 >> 2] = $50; //@line 24782
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 24783
     HEAP32[$542 >> 2] = $52; //@line 24784
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 24785
     HEAP32[$543 >> 2] = $54; //@line 24786
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 24787
     HEAP32[$544 >> 2] = $56; //@line 24788
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 24789
     HEAP32[$545 >> 2] = $58; //@line 24790
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 24791
     HEAP32[$546 >> 2] = $60; //@line 24792
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 24793
     HEAP32[$547 >> 2] = $62; //@line 24794
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 24795
     HEAP32[$548 >> 2] = $64; //@line 24796
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 24797
     HEAP32[$549 >> 2] = $66; //@line 24798
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 24799
     HEAP32[$550 >> 2] = $68; //@line 24800
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 24801
     HEAP32[$551 >> 2] = $70; //@line 24802
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 24803
     HEAP32[$552 >> 2] = $72; //@line 24804
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 24805
     HEAP32[$553 >> 2] = $74; //@line 24806
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 24807
     HEAP32[$554 >> 2] = $76; //@line 24808
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 24809
     HEAP32[$555 >> 2] = $78; //@line 24810
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 24811
     HEAP32[$556 >> 2] = $80; //@line 24812
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 24813
     HEAP32[$557 >> 2] = $82; //@line 24814
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 24815
     HEAP32[$558 >> 2] = $84; //@line 24816
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 24817
     HEAP32[$559 >> 2] = $86; //@line 24818
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 24819
     HEAP32[$560 >> 2] = $88; //@line 24820
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 24821
     HEAP32[$561 >> 2] = $90; //@line 24822
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 24823
     HEAP32[$562 >> 2] = $92; //@line 24824
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 24825
     HEAP32[$563 >> 2] = $94; //@line 24826
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 24827
     HEAP32[$564 >> 2] = $96; //@line 24828
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 24829
     HEAP32[$565 >> 2] = $98; //@line 24830
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 24831
     HEAP32[$566 >> 2] = $100; //@line 24832
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 24833
     HEAP32[$567 >> 2] = $102; //@line 24834
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 24835
     HEAP32[$568 >> 2] = $104; //@line 24836
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 24837
     HEAP32[$569 >> 2] = $106; //@line 24838
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 24839
     HEAP32[$570 >> 2] = $108; //@line 24840
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 24841
     HEAP32[$571 >> 2] = $110; //@line 24842
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 24843
     HEAP32[$572 >> 2] = $112; //@line 24844
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 24845
     HEAP32[$573 >> 2] = $114; //@line 24846
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 24847
     HEAP32[$574 >> 2] = $116; //@line 24848
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 24849
     HEAP32[$575 >> 2] = $118; //@line 24850
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 24851
     HEAP32[$576 >> 2] = $120; //@line 24852
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 24853
     HEAP32[$577 >> 2] = $157; //@line 24854
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 24855
     HEAP32[$578 >> 2] = $124; //@line 24856
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 24857
     HEAP32[$579 >> 2] = $126; //@line 24858
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 24859
     HEAP32[$580 >> 2] = $128; //@line 24860
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 24861
     HEAP32[$581 >> 2] = $130; //@line 24862
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 24863
     HEAP32[$582 >> 2] = $132; //@line 24864
     sp = STACKTOP; //@line 24865
     return;
    }
   case 55:
    {
     _mbed_tracef(2, 3844, 4872, $126); //@line 24870
     break L2;
     break;
    }
   case 59:
    {
     $601 = HEAP32[$38 >> 2] | 0; //@line 24875
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 24878
     $604 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $601 + 60 | 0, $601 + 8 | 0, 20, $$1202$i) | 0; //@line 24879
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 24882
      $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 24883
      HEAP32[$605 >> 2] = $2; //@line 24884
      $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 24885
      HEAP32[$606 >> 2] = $4; //@line 24886
      $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 24887
      HEAP32[$607 >> 2] = $6; //@line 24888
      $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 24889
      HEAP32[$608 >> 2] = $8; //@line 24890
      $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 24891
      HEAP32[$609 >> 2] = $10; //@line 24892
      $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 24893
      HEAP32[$610 >> 2] = $12; //@line 24894
      $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 24895
      HEAP32[$611 >> 2] = $14; //@line 24896
      $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 24897
      HEAP32[$612 >> 2] = $16; //@line 24898
      $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 24899
      HEAP32[$613 >> 2] = $18; //@line 24900
      $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 24901
      HEAP32[$614 >> 2] = $20; //@line 24902
      $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 24903
      HEAP32[$615 >> 2] = $22; //@line 24904
      $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 24905
      HEAP32[$616 >> 2] = $24; //@line 24906
      $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 24907
      HEAP32[$617 >> 2] = $26; //@line 24908
      $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 24909
      HEAP32[$618 >> 2] = $28; //@line 24910
      $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 24911
      HEAP32[$619 >> 2] = $30; //@line 24912
      $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 24913
      HEAP32[$620 >> 2] = $32; //@line 24914
      $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 24915
      HEAP32[$621 >> 2] = $34; //@line 24916
      $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 24917
      HEAP32[$622 >> 2] = $36; //@line 24918
      $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 24919
      HEAP32[$623 >> 2] = $38; //@line 24920
      $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 24921
      HEAP32[$624 >> 2] = $40; //@line 24922
      $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 24923
      HEAP32[$625 >> 2] = $42; //@line 24924
      $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 24925
      HEAP32[$626 >> 2] = $44; //@line 24926
      $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 24927
      HEAP32[$627 >> 2] = $46; //@line 24928
      $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 24929
      HEAP32[$628 >> 2] = $48; //@line 24930
      $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 24931
      HEAP32[$629 >> 2] = $50; //@line 24932
      $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 24933
      HEAP32[$630 >> 2] = $52; //@line 24934
      $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 24935
      HEAP32[$631 >> 2] = $54; //@line 24936
      $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 24937
      HEAP32[$632 >> 2] = $56; //@line 24938
      $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 24939
      HEAP32[$633 >> 2] = $58; //@line 24940
      $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 24941
      HEAP32[$634 >> 2] = $60; //@line 24942
      $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 24943
      HEAP32[$635 >> 2] = $62; //@line 24944
      $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 24945
      HEAP32[$636 >> 2] = $64; //@line 24946
      $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 24947
      HEAP32[$637 >> 2] = $66; //@line 24948
      $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 24949
      HEAP32[$638 >> 2] = $68; //@line 24950
      $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 24951
      HEAP32[$639 >> 2] = $70; //@line 24952
      $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 24953
      HEAP32[$640 >> 2] = $72; //@line 24954
      $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 24955
      HEAP32[$641 >> 2] = $74; //@line 24956
      $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 24957
      HEAP32[$642 >> 2] = $76; //@line 24958
      $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 24959
      HEAP32[$643 >> 2] = $78; //@line 24960
      $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 24961
      HEAP32[$644 >> 2] = $80; //@line 24962
      $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 24963
      HEAP32[$645 >> 2] = $82; //@line 24964
      $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 24965
      HEAP32[$646 >> 2] = $84; //@line 24966
      $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 24967
      HEAP32[$647 >> 2] = $86; //@line 24968
      $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 24969
      HEAP32[$648 >> 2] = $88; //@line 24970
      $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 24971
      HEAP32[$649 >> 2] = $90; //@line 24972
      $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 24973
      HEAP32[$650 >> 2] = $92; //@line 24974
      $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 24975
      HEAP32[$651 >> 2] = $94; //@line 24976
      $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 24977
      HEAP32[$652 >> 2] = $96; //@line 24978
      $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 24979
      HEAP32[$653 >> 2] = $98; //@line 24980
      $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 24981
      HEAP32[$654 >> 2] = $100; //@line 24982
      $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 24983
      HEAP32[$655 >> 2] = $102; //@line 24984
      $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 24985
      HEAP32[$656 >> 2] = $104; //@line 24986
      $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 24987
      HEAP32[$657 >> 2] = $106; //@line 24988
      $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 24989
      HEAP32[$658 >> 2] = $108; //@line 24990
      $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 24991
      HEAP32[$659 >> 2] = $110; //@line 24992
      $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 24993
      HEAP32[$660 >> 2] = $112; //@line 24994
      $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 24995
      HEAP32[$661 >> 2] = $114; //@line 24996
      $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 24997
      HEAP32[$662 >> 2] = $116; //@line 24998
      $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 24999
      HEAP32[$663 >> 2] = $118; //@line 25000
      $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 25001
      HEAP32[$664 >> 2] = $120; //@line 25002
      $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 25003
      HEAP32[$665 >> 2] = $157; //@line 25004
      $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 25005
      HEAP32[$666 >> 2] = $124; //@line 25006
      $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 25007
      HEAP32[$667 >> 2] = $126; //@line 25008
      $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 25009
      HEAP32[$668 >> 2] = $128; //@line 25010
      $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 25011
      HEAP32[$669 >> 2] = $130; //@line 25012
      $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 25013
      HEAP32[$670 >> 2] = $132; //@line 25014
      sp = STACKTOP; //@line 25015
      return;
     }
     HEAP8[___async_retval >> 0] = $604; //@line 25019
     ___async_unwind = 0; //@line 25020
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 25021
     $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 25022
     HEAP32[$605 >> 2] = $2; //@line 25023
     $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 25024
     HEAP32[$606 >> 2] = $4; //@line 25025
     $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 25026
     HEAP32[$607 >> 2] = $6; //@line 25027
     $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 25028
     HEAP32[$608 >> 2] = $8; //@line 25029
     $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 25030
     HEAP32[$609 >> 2] = $10; //@line 25031
     $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 25032
     HEAP32[$610 >> 2] = $12; //@line 25033
     $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 25034
     HEAP32[$611 >> 2] = $14; //@line 25035
     $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 25036
     HEAP32[$612 >> 2] = $16; //@line 25037
     $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 25038
     HEAP32[$613 >> 2] = $18; //@line 25039
     $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 25040
     HEAP32[$614 >> 2] = $20; //@line 25041
     $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 25042
     HEAP32[$615 >> 2] = $22; //@line 25043
     $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 25044
     HEAP32[$616 >> 2] = $24; //@line 25045
     $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 25046
     HEAP32[$617 >> 2] = $26; //@line 25047
     $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 25048
     HEAP32[$618 >> 2] = $28; //@line 25049
     $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 25050
     HEAP32[$619 >> 2] = $30; //@line 25051
     $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 25052
     HEAP32[$620 >> 2] = $32; //@line 25053
     $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 25054
     HEAP32[$621 >> 2] = $34; //@line 25055
     $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 25056
     HEAP32[$622 >> 2] = $36; //@line 25057
     $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 25058
     HEAP32[$623 >> 2] = $38; //@line 25059
     $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 25060
     HEAP32[$624 >> 2] = $40; //@line 25061
     $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 25062
     HEAP32[$625 >> 2] = $42; //@line 25063
     $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 25064
     HEAP32[$626 >> 2] = $44; //@line 25065
     $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 25066
     HEAP32[$627 >> 2] = $46; //@line 25067
     $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 25068
     HEAP32[$628 >> 2] = $48; //@line 25069
     $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 25070
     HEAP32[$629 >> 2] = $50; //@line 25071
     $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 25072
     HEAP32[$630 >> 2] = $52; //@line 25073
     $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 25074
     HEAP32[$631 >> 2] = $54; //@line 25075
     $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 25076
     HEAP32[$632 >> 2] = $56; //@line 25077
     $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 25078
     HEAP32[$633 >> 2] = $58; //@line 25079
     $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 25080
     HEAP32[$634 >> 2] = $60; //@line 25081
     $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 25082
     HEAP32[$635 >> 2] = $62; //@line 25083
     $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 25084
     HEAP32[$636 >> 2] = $64; //@line 25085
     $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 25086
     HEAP32[$637 >> 2] = $66; //@line 25087
     $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 25088
     HEAP32[$638 >> 2] = $68; //@line 25089
     $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 25090
     HEAP32[$639 >> 2] = $70; //@line 25091
     $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 25092
     HEAP32[$640 >> 2] = $72; //@line 25093
     $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 25094
     HEAP32[$641 >> 2] = $74; //@line 25095
     $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 25096
     HEAP32[$642 >> 2] = $76; //@line 25097
     $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 25098
     HEAP32[$643 >> 2] = $78; //@line 25099
     $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 25100
     HEAP32[$644 >> 2] = $80; //@line 25101
     $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 25102
     HEAP32[$645 >> 2] = $82; //@line 25103
     $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 25104
     HEAP32[$646 >> 2] = $84; //@line 25105
     $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 25106
     HEAP32[$647 >> 2] = $86; //@line 25107
     $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 25108
     HEAP32[$648 >> 2] = $88; //@line 25109
     $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 25110
     HEAP32[$649 >> 2] = $90; //@line 25111
     $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 25112
     HEAP32[$650 >> 2] = $92; //@line 25113
     $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 25114
     HEAP32[$651 >> 2] = $94; //@line 25115
     $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 25116
     HEAP32[$652 >> 2] = $96; //@line 25117
     $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 25118
     HEAP32[$653 >> 2] = $98; //@line 25119
     $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 25120
     HEAP32[$654 >> 2] = $100; //@line 25121
     $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 25122
     HEAP32[$655 >> 2] = $102; //@line 25123
     $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 25124
     HEAP32[$656 >> 2] = $104; //@line 25125
     $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 25126
     HEAP32[$657 >> 2] = $106; //@line 25127
     $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 25128
     HEAP32[$658 >> 2] = $108; //@line 25129
     $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 25130
     HEAP32[$659 >> 2] = $110; //@line 25131
     $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 25132
     HEAP32[$660 >> 2] = $112; //@line 25133
     $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 25134
     HEAP32[$661 >> 2] = $114; //@line 25135
     $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 25136
     HEAP32[$662 >> 2] = $116; //@line 25137
     $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 25138
     HEAP32[$663 >> 2] = $118; //@line 25139
     $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 25140
     HEAP32[$664 >> 2] = $120; //@line 25141
     $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 25142
     HEAP32[$665 >> 2] = $157; //@line 25143
     $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 25144
     HEAP32[$666 >> 2] = $124; //@line 25145
     $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 25146
     HEAP32[$667 >> 2] = $126; //@line 25147
     $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 25148
     HEAP32[$668 >> 2] = $128; //@line 25149
     $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 25150
     HEAP32[$669 >> 2] = $130; //@line 25151
     $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 25152
     HEAP32[$670 >> 2] = $132; //@line 25153
     sp = STACKTOP; //@line 25154
     return;
    }
   case 62:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 25159
     $672 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $54, $80, 11, $$1202$i) | 0; //@line 25160
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 25163
      $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 25164
      HEAP32[$673 >> 2] = $2; //@line 25165
      $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 25166
      HEAP32[$674 >> 2] = $4; //@line 25167
      $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 25168
      HEAP32[$675 >> 2] = $6; //@line 25169
      $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 25170
      HEAP32[$676 >> 2] = $8; //@line 25171
      $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 25172
      HEAP32[$677 >> 2] = $10; //@line 25173
      $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 25174
      HEAP32[$678 >> 2] = $12; //@line 25175
      $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 25176
      HEAP32[$679 >> 2] = $14; //@line 25177
      $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 25178
      HEAP32[$680 >> 2] = $16; //@line 25179
      $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 25180
      HEAP32[$681 >> 2] = $18; //@line 25181
      $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 25182
      HEAP32[$682 >> 2] = $20; //@line 25183
      $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 25184
      HEAP32[$683 >> 2] = $22; //@line 25185
      $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 25186
      HEAP32[$684 >> 2] = $24; //@line 25187
      $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 25188
      HEAP32[$685 >> 2] = $26; //@line 25189
      $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 25190
      HEAP32[$686 >> 2] = $28; //@line 25191
      $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 25192
      HEAP32[$687 >> 2] = $30; //@line 25193
      $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 25194
      HEAP32[$688 >> 2] = $32; //@line 25195
      $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 25196
      HEAP32[$689 >> 2] = $34; //@line 25197
      $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 25198
      HEAP32[$690 >> 2] = $36; //@line 25199
      $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 25200
      HEAP32[$691 >> 2] = $38; //@line 25201
      $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 25202
      HEAP32[$692 >> 2] = $40; //@line 25203
      $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 25204
      HEAP32[$693 >> 2] = $42; //@line 25205
      $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 25206
      HEAP32[$694 >> 2] = $44; //@line 25207
      $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 25208
      HEAP32[$695 >> 2] = $46; //@line 25209
      $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 25210
      HEAP32[$696 >> 2] = $48; //@line 25211
      $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 25212
      HEAP32[$697 >> 2] = $50; //@line 25213
      $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 25214
      HEAP32[$698 >> 2] = $52; //@line 25215
      $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 25216
      HEAP32[$699 >> 2] = $54; //@line 25217
      $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 25218
      HEAP32[$700 >> 2] = $56; //@line 25219
      $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 25220
      HEAP32[$701 >> 2] = $58; //@line 25221
      $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 25222
      HEAP32[$702 >> 2] = $60; //@line 25223
      $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 25224
      HEAP32[$703 >> 2] = $62; //@line 25225
      $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 25226
      HEAP32[$704 >> 2] = $64; //@line 25227
      $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 25228
      HEAP32[$705 >> 2] = $66; //@line 25229
      $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 25230
      HEAP32[$706 >> 2] = $68; //@line 25231
      $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 25232
      HEAP32[$707 >> 2] = $70; //@line 25233
      $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 25234
      HEAP32[$708 >> 2] = $72; //@line 25235
      $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 25236
      HEAP32[$709 >> 2] = $74; //@line 25237
      $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 25238
      HEAP32[$710 >> 2] = $76; //@line 25239
      $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 25240
      HEAP32[$711 >> 2] = $78; //@line 25241
      $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 25242
      HEAP32[$712 >> 2] = $80; //@line 25243
      $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 25244
      HEAP32[$713 >> 2] = $82; //@line 25245
      $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 25246
      HEAP32[$714 >> 2] = $84; //@line 25247
      $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 25248
      HEAP32[$715 >> 2] = $86; //@line 25249
      $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 25250
      HEAP32[$716 >> 2] = $88; //@line 25251
      $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 25252
      HEAP32[$717 >> 2] = $90; //@line 25253
      $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 25254
      HEAP32[$718 >> 2] = $92; //@line 25255
      $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 25256
      HEAP32[$719 >> 2] = $94; //@line 25257
      $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 25258
      HEAP32[$720 >> 2] = $96; //@line 25259
      $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 25260
      HEAP32[$721 >> 2] = $98; //@line 25261
      $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 25262
      HEAP32[$722 >> 2] = $100; //@line 25263
      $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 25264
      HEAP32[$723 >> 2] = $102; //@line 25265
      $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 25266
      HEAP32[$724 >> 2] = $104; //@line 25267
      $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 25268
      HEAP32[$725 >> 2] = $106; //@line 25269
      $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 25270
      HEAP32[$726 >> 2] = $108; //@line 25271
      $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 25272
      HEAP32[$727 >> 2] = $110; //@line 25273
      $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 25274
      HEAP32[$728 >> 2] = $112; //@line 25275
      $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 25276
      HEAP32[$729 >> 2] = $114; //@line 25277
      $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 25278
      HEAP32[$730 >> 2] = $116; //@line 25279
      $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 25280
      HEAP32[$731 >> 2] = $118; //@line 25281
      $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 25282
      HEAP32[$732 >> 2] = $120; //@line 25283
      $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 25284
      HEAP32[$733 >> 2] = $157; //@line 25285
      $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 25286
      HEAP32[$734 >> 2] = $124; //@line 25287
      $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 25288
      HEAP32[$735 >> 2] = $126; //@line 25289
      $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 25290
      HEAP32[$736 >> 2] = $128; //@line 25291
      $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 25292
      HEAP32[$737 >> 2] = $130; //@line 25293
      $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 25294
      HEAP32[$738 >> 2] = $132; //@line 25295
      sp = STACKTOP; //@line 25296
      return;
     }
     HEAP8[___async_retval >> 0] = $672; //@line 25300
     ___async_unwind = 0; //@line 25301
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 25302
     $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 25303
     HEAP32[$673 >> 2] = $2; //@line 25304
     $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 25305
     HEAP32[$674 >> 2] = $4; //@line 25306
     $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 25307
     HEAP32[$675 >> 2] = $6; //@line 25308
     $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 25309
     HEAP32[$676 >> 2] = $8; //@line 25310
     $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 25311
     HEAP32[$677 >> 2] = $10; //@line 25312
     $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 25313
     HEAP32[$678 >> 2] = $12; //@line 25314
     $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 25315
     HEAP32[$679 >> 2] = $14; //@line 25316
     $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 25317
     HEAP32[$680 >> 2] = $16; //@line 25318
     $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 25319
     HEAP32[$681 >> 2] = $18; //@line 25320
     $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 25321
     HEAP32[$682 >> 2] = $20; //@line 25322
     $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 25323
     HEAP32[$683 >> 2] = $22; //@line 25324
     $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 25325
     HEAP32[$684 >> 2] = $24; //@line 25326
     $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 25327
     HEAP32[$685 >> 2] = $26; //@line 25328
     $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 25329
     HEAP32[$686 >> 2] = $28; //@line 25330
     $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 25331
     HEAP32[$687 >> 2] = $30; //@line 25332
     $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 25333
     HEAP32[$688 >> 2] = $32; //@line 25334
     $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 25335
     HEAP32[$689 >> 2] = $34; //@line 25336
     $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 25337
     HEAP32[$690 >> 2] = $36; //@line 25338
     $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 25339
     HEAP32[$691 >> 2] = $38; //@line 25340
     $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 25341
     HEAP32[$692 >> 2] = $40; //@line 25342
     $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 25343
     HEAP32[$693 >> 2] = $42; //@line 25344
     $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 25345
     HEAP32[$694 >> 2] = $44; //@line 25346
     $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 25347
     HEAP32[$695 >> 2] = $46; //@line 25348
     $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 25349
     HEAP32[$696 >> 2] = $48; //@line 25350
     $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 25351
     HEAP32[$697 >> 2] = $50; //@line 25352
     $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 25353
     HEAP32[$698 >> 2] = $52; //@line 25354
     $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 25355
     HEAP32[$699 >> 2] = $54; //@line 25356
     $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 25357
     HEAP32[$700 >> 2] = $56; //@line 25358
     $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 25359
     HEAP32[$701 >> 2] = $58; //@line 25360
     $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 25361
     HEAP32[$702 >> 2] = $60; //@line 25362
     $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 25363
     HEAP32[$703 >> 2] = $62; //@line 25364
     $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 25365
     HEAP32[$704 >> 2] = $64; //@line 25366
     $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 25367
     HEAP32[$705 >> 2] = $66; //@line 25368
     $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 25369
     HEAP32[$706 >> 2] = $68; //@line 25370
     $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 25371
     HEAP32[$707 >> 2] = $70; //@line 25372
     $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 25373
     HEAP32[$708 >> 2] = $72; //@line 25374
     $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 25375
     HEAP32[$709 >> 2] = $74; //@line 25376
     $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 25377
     HEAP32[$710 >> 2] = $76; //@line 25378
     $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 25379
     HEAP32[$711 >> 2] = $78; //@line 25380
     $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 25381
     HEAP32[$712 >> 2] = $80; //@line 25382
     $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 25383
     HEAP32[$713 >> 2] = $82; //@line 25384
     $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 25385
     HEAP32[$714 >> 2] = $84; //@line 25386
     $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 25387
     HEAP32[$715 >> 2] = $86; //@line 25388
     $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 25389
     HEAP32[$716 >> 2] = $88; //@line 25390
     $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 25391
     HEAP32[$717 >> 2] = $90; //@line 25392
     $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 25393
     HEAP32[$718 >> 2] = $92; //@line 25394
     $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 25395
     HEAP32[$719 >> 2] = $94; //@line 25396
     $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 25397
     HEAP32[$720 >> 2] = $96; //@line 25398
     $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 25399
     HEAP32[$721 >> 2] = $98; //@line 25400
     $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 25401
     HEAP32[$722 >> 2] = $100; //@line 25402
     $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 25403
     HEAP32[$723 >> 2] = $102; //@line 25404
     $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 25405
     HEAP32[$724 >> 2] = $104; //@line 25406
     $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 25407
     HEAP32[$725 >> 2] = $106; //@line 25408
     $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 25409
     HEAP32[$726 >> 2] = $108; //@line 25410
     $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 25411
     HEAP32[$727 >> 2] = $110; //@line 25412
     $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 25413
     HEAP32[$728 >> 2] = $112; //@line 25414
     $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 25415
     HEAP32[$729 >> 2] = $114; //@line 25416
     $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 25417
     HEAP32[$730 >> 2] = $116; //@line 25418
     $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 25419
     HEAP32[$731 >> 2] = $118; //@line 25420
     $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 25421
     HEAP32[$732 >> 2] = $120; //@line 25422
     $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 25423
     HEAP32[$733 >> 2] = $157; //@line 25424
     $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 25425
     HEAP32[$734 >> 2] = $124; //@line 25426
     $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 25427
     HEAP32[$735 >> 2] = $126; //@line 25428
     $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 25429
     HEAP32[$736 >> 2] = $128; //@line 25430
     $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 25431
     HEAP32[$737 >> 2] = $130; //@line 25432
     $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 25433
     HEAP32[$738 >> 2] = $132; //@line 25434
     sp = STACKTOP; //@line 25435
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3844, 5067, $68); //@line 25440
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$38 >> 2] | 0; //@line 25445
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 25448
     $759 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 25449
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 25452
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 25453
      HEAP32[$760 >> 2] = $2; //@line 25454
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 25455
      HEAP32[$761 >> 2] = $4; //@line 25456
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 25457
      HEAP32[$762 >> 2] = $6; //@line 25458
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 25459
      HEAP32[$763 >> 2] = $8; //@line 25460
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 25461
      HEAP32[$764 >> 2] = $10; //@line 25462
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 25463
      HEAP32[$765 >> 2] = $12; //@line 25464
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 25465
      HEAP32[$766 >> 2] = $14; //@line 25466
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 25467
      HEAP32[$767 >> 2] = $16; //@line 25468
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 25469
      HEAP32[$768 >> 2] = $18; //@line 25470
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 25471
      HEAP32[$769 >> 2] = $20; //@line 25472
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 25473
      HEAP32[$770 >> 2] = $22; //@line 25474
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 25475
      HEAP32[$771 >> 2] = $24; //@line 25476
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 25477
      HEAP32[$772 >> 2] = $26; //@line 25478
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 25479
      HEAP32[$773 >> 2] = $28; //@line 25480
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 25481
      HEAP32[$774 >> 2] = $30; //@line 25482
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 25483
      HEAP32[$775 >> 2] = $32; //@line 25484
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 25485
      HEAP32[$776 >> 2] = $34; //@line 25486
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 25487
      HEAP32[$777 >> 2] = $36; //@line 25488
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 25489
      HEAP32[$778 >> 2] = $38; //@line 25490
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 25491
      HEAP32[$779 >> 2] = $40; //@line 25492
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 25493
      HEAP32[$780 >> 2] = $42; //@line 25494
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 25495
      HEAP32[$781 >> 2] = $44; //@line 25496
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 25497
      HEAP32[$782 >> 2] = $46; //@line 25498
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 25499
      HEAP32[$783 >> 2] = $48; //@line 25500
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 25501
      HEAP32[$784 >> 2] = $50; //@line 25502
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 25503
      HEAP32[$785 >> 2] = $52; //@line 25504
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 25505
      HEAP32[$786 >> 2] = $54; //@line 25506
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 25507
      HEAP32[$787 >> 2] = $56; //@line 25508
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 25509
      HEAP32[$788 >> 2] = $58; //@line 25510
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 25511
      HEAP32[$789 >> 2] = $60; //@line 25512
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 25513
      HEAP32[$790 >> 2] = $62; //@line 25514
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 25515
      HEAP32[$791 >> 2] = $64; //@line 25516
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 25517
      HEAP32[$792 >> 2] = $66; //@line 25518
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 25519
      HEAP32[$793 >> 2] = $68; //@line 25520
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 25521
      HEAP32[$794 >> 2] = $70; //@line 25522
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 25523
      HEAP32[$795 >> 2] = $72; //@line 25524
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 25525
      HEAP32[$796 >> 2] = $74; //@line 25526
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 25527
      HEAP32[$797 >> 2] = $76; //@line 25528
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 25529
      HEAP32[$798 >> 2] = $78; //@line 25530
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 25531
      HEAP32[$799 >> 2] = $80; //@line 25532
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 25533
      HEAP32[$800 >> 2] = $82; //@line 25534
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 25535
      HEAP32[$801 >> 2] = $84; //@line 25536
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 25537
      HEAP32[$802 >> 2] = $86; //@line 25538
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 25539
      HEAP32[$803 >> 2] = $88; //@line 25540
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 25541
      HEAP32[$804 >> 2] = $90; //@line 25542
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 25543
      HEAP32[$805 >> 2] = $92; //@line 25544
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 25545
      HEAP32[$806 >> 2] = $94; //@line 25546
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 25547
      HEAP32[$807 >> 2] = $96; //@line 25548
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 25549
      HEAP32[$808 >> 2] = $98; //@line 25550
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 25551
      HEAP32[$809 >> 2] = $100; //@line 25552
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 25553
      HEAP32[$810 >> 2] = $102; //@line 25554
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 25555
      HEAP32[$811 >> 2] = $104; //@line 25556
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 25557
      HEAP32[$812 >> 2] = $106; //@line 25558
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 25559
      HEAP32[$813 >> 2] = $108; //@line 25560
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 25561
      HEAP32[$814 >> 2] = $110; //@line 25562
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 25563
      HEAP32[$815 >> 2] = $112; //@line 25564
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 25565
      HEAP32[$816 >> 2] = $114; //@line 25566
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 25567
      HEAP32[$817 >> 2] = $116; //@line 25568
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 25569
      HEAP32[$818 >> 2] = $118; //@line 25570
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 25571
      HEAP32[$819 >> 2] = $120; //@line 25572
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 25573
      HEAP32[$820 >> 2] = $157; //@line 25574
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 25575
      HEAP32[$821 >> 2] = $124; //@line 25576
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 25577
      HEAP32[$822 >> 2] = $126; //@line 25578
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 25579
      HEAP32[$823 >> 2] = $128; //@line 25580
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 25581
      HEAP32[$824 >> 2] = $130; //@line 25582
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 25583
      HEAP32[$825 >> 2] = $132; //@line 25584
      sp = STACKTOP; //@line 25585
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 25589
     ___async_unwind = 0; //@line 25590
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 25591
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 25592
     HEAP32[$760 >> 2] = $2; //@line 25593
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 25594
     HEAP32[$761 >> 2] = $4; //@line 25595
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 25596
     HEAP32[$762 >> 2] = $6; //@line 25597
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 25598
     HEAP32[$763 >> 2] = $8; //@line 25599
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 25600
     HEAP32[$764 >> 2] = $10; //@line 25601
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 25602
     HEAP32[$765 >> 2] = $12; //@line 25603
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 25604
     HEAP32[$766 >> 2] = $14; //@line 25605
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 25606
     HEAP32[$767 >> 2] = $16; //@line 25607
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 25608
     HEAP32[$768 >> 2] = $18; //@line 25609
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 25610
     HEAP32[$769 >> 2] = $20; //@line 25611
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 25612
     HEAP32[$770 >> 2] = $22; //@line 25613
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 25614
     HEAP32[$771 >> 2] = $24; //@line 25615
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 25616
     HEAP32[$772 >> 2] = $26; //@line 25617
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 25618
     HEAP32[$773 >> 2] = $28; //@line 25619
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 25620
     HEAP32[$774 >> 2] = $30; //@line 25621
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 25622
     HEAP32[$775 >> 2] = $32; //@line 25623
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 25624
     HEAP32[$776 >> 2] = $34; //@line 25625
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 25626
     HEAP32[$777 >> 2] = $36; //@line 25627
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 25628
     HEAP32[$778 >> 2] = $38; //@line 25629
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 25630
     HEAP32[$779 >> 2] = $40; //@line 25631
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 25632
     HEAP32[$780 >> 2] = $42; //@line 25633
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 25634
     HEAP32[$781 >> 2] = $44; //@line 25635
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 25636
     HEAP32[$782 >> 2] = $46; //@line 25637
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 25638
     HEAP32[$783 >> 2] = $48; //@line 25639
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 25640
     HEAP32[$784 >> 2] = $50; //@line 25641
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 25642
     HEAP32[$785 >> 2] = $52; //@line 25643
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 25644
     HEAP32[$786 >> 2] = $54; //@line 25645
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 25646
     HEAP32[$787 >> 2] = $56; //@line 25647
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 25648
     HEAP32[$788 >> 2] = $58; //@line 25649
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 25650
     HEAP32[$789 >> 2] = $60; //@line 25651
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 25652
     HEAP32[$790 >> 2] = $62; //@line 25653
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 25654
     HEAP32[$791 >> 2] = $64; //@line 25655
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 25656
     HEAP32[$792 >> 2] = $66; //@line 25657
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 25658
     HEAP32[$793 >> 2] = $68; //@line 25659
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 25660
     HEAP32[$794 >> 2] = $70; //@line 25661
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 25662
     HEAP32[$795 >> 2] = $72; //@line 25663
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 25664
     HEAP32[$796 >> 2] = $74; //@line 25665
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 25666
     HEAP32[$797 >> 2] = $76; //@line 25667
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 25668
     HEAP32[$798 >> 2] = $78; //@line 25669
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 25670
     HEAP32[$799 >> 2] = $80; //@line 25671
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 25672
     HEAP32[$800 >> 2] = $82; //@line 25673
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 25674
     HEAP32[$801 >> 2] = $84; //@line 25675
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 25676
     HEAP32[$802 >> 2] = $86; //@line 25677
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 25678
     HEAP32[$803 >> 2] = $88; //@line 25679
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 25680
     HEAP32[$804 >> 2] = $90; //@line 25681
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 25682
     HEAP32[$805 >> 2] = $92; //@line 25683
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 25684
     HEAP32[$806 >> 2] = $94; //@line 25685
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 25686
     HEAP32[$807 >> 2] = $96; //@line 25687
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 25688
     HEAP32[$808 >> 2] = $98; //@line 25689
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 25690
     HEAP32[$809 >> 2] = $100; //@line 25691
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 25692
     HEAP32[$810 >> 2] = $102; //@line 25693
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 25694
     HEAP32[$811 >> 2] = $104; //@line 25695
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 25696
     HEAP32[$812 >> 2] = $106; //@line 25697
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 25698
     HEAP32[$813 >> 2] = $108; //@line 25699
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 25700
     HEAP32[$814 >> 2] = $110; //@line 25701
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 25702
     HEAP32[$815 >> 2] = $112; //@line 25703
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 25704
     HEAP32[$816 >> 2] = $114; //@line 25705
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 25706
     HEAP32[$817 >> 2] = $116; //@line 25707
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 25708
     HEAP32[$818 >> 2] = $118; //@line 25709
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 25710
     HEAP32[$819 >> 2] = $120; //@line 25711
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 25712
     HEAP32[$820 >> 2] = $157; //@line 25713
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 25714
     HEAP32[$821 >> 2] = $124; //@line 25715
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 25716
     HEAP32[$822 >> 2] = $126; //@line 25717
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 25718
     HEAP32[$823 >> 2] = $128; //@line 25719
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 25720
     HEAP32[$824 >> 2] = $130; //@line 25721
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 25722
     HEAP32[$825 >> 2] = $132; //@line 25723
     sp = STACKTOP; //@line 25724
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3844, 5193, $132); //@line 25729
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3844, 5254, $102); //@line 25734
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3844, 5315, $48); //@line 25739
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3844, 5376, $20); //@line 25744
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3844, 5436, $12); //@line 25749
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3844, 5496, $84); //@line 25754
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $6 | 0) >= ($16 | 0)) {
      $936 = ___async_retval; //@line 25763
      HEAP32[$936 >> 2] = $22; //@line 25764
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 25770
      HEAP32[$88 >> 2] = $926; //@line 25771
      $927 = $926; //@line 25772
      $929 = $6 - $927 + $16 | 0; //@line 25774
      HEAP16[$72 + 24 >> 1] = $929; //@line 25777
      if ($929 & 65535 | 0) {
       HEAP32[$72 + 36 >> 2] = $927; //@line 25782
       $936 = ___async_retval; //@line 25783
       HEAP32[$936 >> 2] = $22; //@line 25784
       return;
      }
     } else {
      _mbed_tracef(2, 3844, 5543, $26); //@line 25788
     }
     HEAP32[$72 + 4 >> 2] = 1; //@line 25791
     $936 = ___async_retval; //@line 25792
     HEAP32[$936 >> 2] = $22; //@line 25793
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3844, 4804, $74); //@line 25799
  }
 } while (0);
 HEAP32[$72 + 4 >> 2] = 1; //@line 25803
 $936 = ___async_retval; //@line 25804
 HEAP32[$936 >> 2] = $22; //@line 25805
 return;
}
function _sn_coap_parser__async_cb_167($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $586 = 0, $589 = 0, $590 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $595$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 19424
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19426
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19428
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19430
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19432
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19434
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19436
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19438
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19440
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19442
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19444
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19446
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19448
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19450
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19452
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19454
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19456
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19458
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19460
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19462
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19464
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19466
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19468
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 19470
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 19472
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 19474
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 19476
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 19478
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 19480
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 19482
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 19484
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 19486
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 19488
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 19490
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 19492
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 19494
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 19496
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 19498
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 19500
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 19502
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 19504
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 19506
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 19508
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 19510
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 19512
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 19514
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 19516
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 19518
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 19520
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 19522
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 19524
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 19526
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 19528
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 19530
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 19532
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 19534
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 19536
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 19538
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 19540
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 19542
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 19544
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 19548
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 19550
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 19552
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 19554
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 19556
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 244 >> 2] | 0; //@line 19562
   L3 : while (1) {
    $917 = HEAP32[$114 >> 2] | 0; //@line 19564
    $918 = $917 - $6 | 0; //@line 19565
    $137 = $917; //@line 19568
    if (($918 | 0) > ($16 | 0)) {
     break L2;
    }
    if (!(($16 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 19575
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 19578
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 19581
     break;
    }
    $140 = $trunc277$i & 15; //@line 19585
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 19586
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 19591
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 19599
      $$sink214$i = 13; //@line 19599
      $$sink3$i = 1; //@line 19599
      label = 8; //@line 19600
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 19612
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 19612
      $$sink3$i = 2; //@line 19612
      label = 8; //@line 19613
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 19617
      $159 = $137; //@line 19617
      $937 = $917; //@line 19617
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 19621
     $154 = $137 + $$sink3$i | 0; //@line 19623
     HEAP32[$88 >> 2] = $154; //@line 19624
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 19626
     $159 = $154; //@line 19626
     $937 = $154; //@line 19626
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 19629
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 19633
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 19641
      $$sink216$i = 13; //@line 19641
      $$sink8$i = 1; //@line 19641
      label = 13; //@line 19642
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 19654
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 19654
      $$sink8$i = 2; //@line 19654
      label = 13; //@line 19655
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 19659
      $174 = $937; //@line 19659
      $241 = $159; //@line 19659
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 19663
     $171 = $159 + $$sink8$i | 0; //@line 19665
     HEAP32[$88 >> 2] = $171; //@line 19666
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 19668
     $174 = $171; //@line 19668
     $241 = $171; //@line 19668
    }
    $$1202$i = $$1202$in$i & 65535; //@line 19670
    $175 = $28 - $174 & 65535; //@line 19672
    $trunc$i = $157 & 65535; //@line 19673
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 62; //@line 19677
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$38 >> 2] | 0)) {
        label = 16; //@line 19685
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 19690
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 19695
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 19700
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 19705
         break L3;
         break;
        }
       case 20:
        {
         label = 57; //@line 19710
         break L3;
         break;
        }
       case 11:
        {
         label = 62; //@line 19715
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 19720
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 19731
          break L3;
         }
         $268 = $241 + 1 | 0; //@line 19734
         HEAP32[$88 >> 2] = $268; //@line 19735
         $269 = $$1202$in$i & 255; //@line 19736
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 19739
         } else {
          $$045$i221$i = $269; //@line 19741
          $$06$i220$i = 0; //@line 19741
          $274 = $268; //@line 19741
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 19743
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 19745
           HEAP32[$88 >> 2] = $274; //@line 19746
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 19749
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 19752
            break;
           } else {
            $$06$i220$i = $277; //@line 19755
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 19761
         $$reg2mem$0 = $157; //@line 19762
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 53; //@line 19769
          break L3;
         }
         $586 = (HEAP32[$38 >> 2] | 0) + 28 | 0; //@line 19773
         if ((HEAP32[$586 >> 2] | 0) != -1) {
          label = 53; //@line 19777
          break L3;
         }
         $589 = $241 + 1 | 0; //@line 19780
         HEAP32[$88 >> 2] = $589; //@line 19781
         $590 = $$1202$in$i & 255; //@line 19782
         if (!($590 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 19785
         } else {
          $$045$i263$i = $590; //@line 19787
          $$06$i262$i = 0; //@line 19787
          $595 = $589; //@line 19787
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 19789
           $595$looptemp = $595;
           $595 = $595 + 1 | 0; //@line 19791
           HEAP32[$88 >> 2] = $595; //@line 19792
           $598 = $$06$i262$i << 8 | HEAPU8[$595$looptemp >> 0]; //@line 19795
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $598; //@line 19798
            break;
           } else {
            $$06$i262$i = $598; //@line 19801
           }
          }
         }
         HEAP32[$586 >> 2] = $$0$lcssa$i265$i; //@line 19805
         $$reg2mem$0 = $157; //@line 19806
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 19813
          break L3;
         }
         $742 = (HEAP32[$38 >> 2] | 0) + 32 | 0; //@line 19817
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 19821
          break L3;
         }
         $745 = $241 + 1 | 0; //@line 19824
         HEAP32[$88 >> 2] = $745; //@line 19825
         $746 = $$1202$in$i & 255; //@line 19826
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 19829
         } else {
          $$045$i270$i = $746; //@line 19831
          $$06$i269$i = 0; //@line 19831
          $751 = $745; //@line 19831
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 19833
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 19835
           HEAP32[$88 >> 2] = $751; //@line 19836
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 19839
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 19842
            break;
           } else {
            $$06$i269$i = $754; //@line 19845
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 19849
         $$reg2mem$0 = $157; //@line 19850
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 19857
          break L3;
         }
         $829 = (HEAP32[$38 >> 2] | 0) + 40 | 0; //@line 19861
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 19865
          break L3;
         }
         $832 = $241 + 1 | 0; //@line 19868
         HEAP32[$88 >> 2] = $832; //@line 19869
         $833 = $$1202$in$i & 255; //@line 19870
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 19873
         } else {
          $$045$i256$i = $833; //@line 19875
          $$06$i255$i = 0; //@line 19875
          $838 = $832; //@line 19875
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 19877
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 19879
           HEAP32[$88 >> 2] = $838; //@line 19880
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 19883
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 19886
            break;
           } else {
            $$06$i255$i = $841; //@line 19889
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 19893
         $$reg2mem$0 = $157; //@line 19894
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 19901
          break L3;
         }
         $845 = (HEAP32[$38 >> 2] | 0) + 36 | 0; //@line 19905
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 19909
          break L3;
         }
         $848 = $241 + 1 | 0; //@line 19912
         HEAP32[$88 >> 2] = $848; //@line 19913
         $849 = $$1202$in$i & 255; //@line 19914
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 19917
         } else {
          $$045$i249$i = $849; //@line 19919
          $$06$i248$i = 0; //@line 19919
          $854 = $848; //@line 19919
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 19921
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 19923
           HEAP32[$88 >> 2] = $854; //@line 19924
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 19927
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 19930
            break;
           } else {
            $$06$i248$i = $857; //@line 19933
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 19937
         $$reg2mem$0 = $157; //@line 19938
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 19945
          break L3;
         }
         $861 = (HEAP32[$38 >> 2] | 0) + 12 | 0; //@line 19949
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 19953
          break L3;
         }
         $864 = $241 + 1 | 0; //@line 19956
         HEAP32[$88 >> 2] = $864; //@line 19957
         $865 = $$1202$in$i & 255; //@line 19958
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 19961
         } else {
          $$045$i242$i = $865; //@line 19963
          $$06$i241$i = 0; //@line 19963
          $870 = $864; //@line 19963
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 19965
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 19967
           HEAP32[$88 >> 2] = $870; //@line 19968
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 19971
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 19974
            break;
           } else {
            $$06$i241$i = $873; //@line 19977
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 19981
         $$reg2mem$0 = $157; //@line 19982
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 19989
          break L3;
         }
         $877 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 19993
         $878 = HEAP8[$877 >> 0] | 0; //@line 19994
         if ($878 & 1) {
          label = 94; //@line 19998
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 20002
         $883 = (HEAP32[$88 >> 2] | 0) + 1 | 0; //@line 20004
         HEAP32[$88 >> 2] = $883; //@line 20005
         $884 = $$1202$in$i & 255; //@line 20006
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 20009
         } else {
          $$045$i235$i = $884; //@line 20011
          $$06$i234$i = 0; //@line 20011
          $889 = $883; //@line 20011
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 20013
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 20015
           HEAP32[$88 >> 2] = $889; //@line 20016
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 20019
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 20022
            break;
           } else {
            $$06$i234$i = $892; //@line 20025
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 20031
         $$reg2mem$0 = $157; //@line 20032
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 20039
          break L3;
         }
         $898 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 20043
         $899 = HEAP8[$898 >> 0] | 0; //@line 20044
         if ($899 & 2) {
          label = 100; //@line 20048
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 20052
         $904 = (HEAP32[$88 >> 2] | 0) + 1 | 0; //@line 20054
         HEAP32[$88 >> 2] = $904; //@line 20055
         $905 = $$1202$in$i & 255; //@line 20056
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 20059
         } else {
          $$045$i228$i = $905; //@line 20061
          $$06$i227$i = 0; //@line 20061
          $910 = $904; //@line 20061
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 20063
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 20065
           HEAP32[$88 >> 2] = $910; //@line 20066
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 20069
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 20072
            break;
           } else {
            $$06$i227$i = $913; //@line 20075
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 20081
         $$reg2mem$0 = $157; //@line 20082
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 20087
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 20097
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 20104
     break;
    }
    if ((HEAP32[$120 >> 2] | 0) != -1) {
     label = 22; //@line 20110
     break;
    }
    $256 = $241 + 1 | 0; //@line 20113
    HEAP32[$88 >> 2] = $256; //@line 20114
    $257 = $$1202$in$i & 255; //@line 20115
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 20118
    } else {
     $$045$i$i = $257; //@line 20120
     $$06$i$i = 0; //@line 20120
     $262 = $256; //@line 20120
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 20122
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 20124
      HEAP32[$88 >> 2] = $262; //@line 20125
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 20128
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 20131
       break;
      } else {
       $$06$i$i = $265; //@line 20134
      }
     }
    }
    HEAP32[$120 >> 2] = $$0$lcssa$i$i; //@line 20138
    $$reg2mem$0 = $157; //@line 20139
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3844, 4107, $8); //@line 20143
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3844, 4165, $56); //@line 20148
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$40 >> 2] | 0; //@line 20153
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 20154
     $179 = FUNCTION_TABLE_ii[$178 & 31](68) | 0; //@line 20155
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 20158
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 20159
      HEAP32[$180 >> 2] = $2; //@line 20160
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 20161
      HEAP32[$181 >> 2] = $4; //@line 20162
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 20163
      HEAP32[$182 >> 2] = $6; //@line 20164
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 20165
      HEAP32[$183 >> 2] = $8; //@line 20166
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 20167
      HEAP32[$184 >> 2] = $132; //@line 20168
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 20169
      HEAP32[$185 >> 2] = $12; //@line 20170
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 20171
      HEAP16[$186 >> 1] = $trunc$i; //@line 20172
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 20173
      HEAP32[$187 >> 2] = $10; //@line 20174
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 20175
      HEAP32[$188 >> 2] = $16; //@line 20176
      $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 20177
      HEAP32[$189 >> 2] = $18; //@line 20178
      $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 20179
      HEAP32[$190 >> 2] = $20; //@line 20180
      $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 20181
      HEAP32[$191 >> 2] = $22; //@line 20182
      $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 20183
      HEAP32[$192 >> 2] = $24; //@line 20184
      $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 20185
      HEAP32[$193 >> 2] = $26; //@line 20186
      $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 20187
      HEAP32[$194 >> 2] = $28; //@line 20188
      $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 20189
      HEAP32[$195 >> 2] = $30; //@line 20190
      $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 20191
      HEAP32[$196 >> 2] = $32; //@line 20192
      $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 20193
      HEAP32[$197 >> 2] = $34; //@line 20194
      $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 20195
      HEAP32[$198 >> 2] = $36; //@line 20196
      $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 20197
      HEAP32[$199 >> 2] = $38; //@line 20198
      $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 20199
      HEAP32[$200 >> 2] = $40; //@line 20200
      $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 20201
      HEAP32[$201 >> 2] = $42; //@line 20202
      $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 20203
      HEAP32[$202 >> 2] = $44; //@line 20204
      $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 20205
      HEAP32[$203 >> 2] = $46; //@line 20206
      $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 20207
      HEAP32[$204 >> 2] = $48; //@line 20208
      $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 20209
      HEAP32[$205 >> 2] = $50; //@line 20210
      $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 20211
      HEAP32[$206 >> 2] = $52; //@line 20212
      $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 20213
      HEAP16[$207 >> 1] = $175; //@line 20214
      $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 20215
      HEAP32[$208 >> 2] = $54; //@line 20216
      $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 20217
      HEAP32[$209 >> 2] = $56; //@line 20218
      $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 20219
      HEAP32[$210 >> 2] = $58; //@line 20220
      $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 20221
      HEAP32[$211 >> 2] = $60; //@line 20222
      $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 20223
      HEAP32[$212 >> 2] = $62; //@line 20224
      $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 20225
      HEAP32[$213 >> 2] = $64; //@line 20226
      $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 20227
      HEAP32[$214 >> 2] = $66; //@line 20228
      $215 = $ReallocAsyncCtx3 + 144 | 0; //@line 20229
      HEAP32[$215 >> 2] = $68; //@line 20230
      $216 = $ReallocAsyncCtx3 + 148 | 0; //@line 20231
      HEAP32[$216 >> 2] = $70; //@line 20232
      $217 = $ReallocAsyncCtx3 + 152 | 0; //@line 20233
      HEAP32[$217 >> 2] = $72; //@line 20234
      $218 = $ReallocAsyncCtx3 + 156 | 0; //@line 20235
      HEAP32[$218 >> 2] = $74; //@line 20236
      $219 = $ReallocAsyncCtx3 + 160 | 0; //@line 20237
      HEAP32[$219 >> 2] = $76; //@line 20238
      $220 = $ReallocAsyncCtx3 + 164 | 0; //@line 20239
      HEAP32[$220 >> 2] = $78; //@line 20240
      $221 = $ReallocAsyncCtx3 + 168 | 0; //@line 20241
      HEAP32[$221 >> 2] = $80; //@line 20242
      $222 = $ReallocAsyncCtx3 + 172 | 0; //@line 20243
      HEAP32[$222 >> 2] = $82; //@line 20244
      $223 = $ReallocAsyncCtx3 + 176 | 0; //@line 20245
      HEAP32[$223 >> 2] = $$1202$in$i; //@line 20246
      $224 = $ReallocAsyncCtx3 + 180 | 0; //@line 20247
      HEAP32[$224 >> 2] = $84; //@line 20248
      $225 = $ReallocAsyncCtx3 + 184 | 0; //@line 20249
      HEAP32[$225 >> 2] = $86; //@line 20250
      $226 = $ReallocAsyncCtx3 + 188 | 0; //@line 20251
      HEAP32[$226 >> 2] = $88; //@line 20252
      $227 = $ReallocAsyncCtx3 + 192 | 0; //@line 20253
      HEAP32[$227 >> 2] = $90; //@line 20254
      $228 = $ReallocAsyncCtx3 + 196 | 0; //@line 20255
      HEAP16[$228 >> 1] = $$1202$i; //@line 20256
      $229 = $ReallocAsyncCtx3 + 200 | 0; //@line 20257
      HEAP32[$229 >> 2] = $92; //@line 20258
      $230 = $ReallocAsyncCtx3 + 204 | 0; //@line 20259
      HEAP32[$230 >> 2] = $96; //@line 20260
      $231 = $ReallocAsyncCtx3 + 208 | 0; //@line 20261
      HEAP32[$231 >> 2] = $98; //@line 20262
      $232 = $ReallocAsyncCtx3 + 212 | 0; //@line 20263
      HEAP32[$232 >> 2] = $94; //@line 20264
      $233 = $ReallocAsyncCtx3 + 216 | 0; //@line 20265
      HEAP32[$233 >> 2] = $102; //@line 20266
      $234 = $ReallocAsyncCtx3 + 220 | 0; //@line 20267
      HEAP32[$234 >> 2] = $100; //@line 20268
      $235 = $ReallocAsyncCtx3 + 224 | 0; //@line 20269
      HEAP32[$235 >> 2] = $104; //@line 20270
      $236 = $ReallocAsyncCtx3 + 228 | 0; //@line 20271
      HEAP32[$236 >> 2] = $106; //@line 20272
      $237 = $ReallocAsyncCtx3 + 232 | 0; //@line 20273
      HEAP32[$237 >> 2] = $108; //@line 20274
      $238 = $ReallocAsyncCtx3 + 236 | 0; //@line 20275
      HEAP32[$238 >> 2] = $110; //@line 20276
      $239 = $ReallocAsyncCtx3 + 240 | 0; //@line 20277
      HEAP32[$239 >> 2] = $112; //@line 20278
      $240 = $ReallocAsyncCtx3 + 244 | 0; //@line 20279
      HEAP32[$240 >> 2] = $241; //@line 20280
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 20281
      HEAP32[$242 >> 2] = $114; //@line 20282
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 20283
      HEAP32[$243 >> 2] = $116; //@line 20284
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 20285
      HEAP32[$244 >> 2] = $118; //@line 20286
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 20287
      HEAP32[$245 >> 2] = $120; //@line 20288
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 20289
      HEAP32[$246 >> 2] = $157; //@line 20290
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 20291
      HEAP32[$247 >> 2] = $124; //@line 20292
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 20293
      HEAP32[$248 >> 2] = $126; //@line 20294
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 20295
      HEAP32[$249 >> 2] = $128; //@line 20296
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 20297
      HEAP32[$250 >> 2] = $130; //@line 20298
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 20299
      HEAP32[$251 >> 2] = $14; //@line 20300
      sp = STACKTOP; //@line 20301
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 20305
     ___async_unwind = 0; //@line 20306
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 20307
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 20308
     HEAP32[$180 >> 2] = $2; //@line 20309
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 20310
     HEAP32[$181 >> 2] = $4; //@line 20311
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 20312
     HEAP32[$182 >> 2] = $6; //@line 20313
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 20314
     HEAP32[$183 >> 2] = $8; //@line 20315
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 20316
     HEAP32[$184 >> 2] = $132; //@line 20317
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 20318
     HEAP32[$185 >> 2] = $12; //@line 20319
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 20320
     HEAP16[$186 >> 1] = $trunc$i; //@line 20321
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 20322
     HEAP32[$187 >> 2] = $10; //@line 20323
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 20324
     HEAP32[$188 >> 2] = $16; //@line 20325
     $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 20326
     HEAP32[$189 >> 2] = $18; //@line 20327
     $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 20328
     HEAP32[$190 >> 2] = $20; //@line 20329
     $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 20330
     HEAP32[$191 >> 2] = $22; //@line 20331
     $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 20332
     HEAP32[$192 >> 2] = $24; //@line 20333
     $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 20334
     HEAP32[$193 >> 2] = $26; //@line 20335
     $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 20336
     HEAP32[$194 >> 2] = $28; //@line 20337
     $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 20338
     HEAP32[$195 >> 2] = $30; //@line 20339
     $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 20340
     HEAP32[$196 >> 2] = $32; //@line 20341
     $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 20342
     HEAP32[$197 >> 2] = $34; //@line 20343
     $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 20344
     HEAP32[$198 >> 2] = $36; //@line 20345
     $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 20346
     HEAP32[$199 >> 2] = $38; //@line 20347
     $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 20348
     HEAP32[$200 >> 2] = $40; //@line 20349
     $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 20350
     HEAP32[$201 >> 2] = $42; //@line 20351
     $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 20352
     HEAP32[$202 >> 2] = $44; //@line 20353
     $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 20354
     HEAP32[$203 >> 2] = $46; //@line 20355
     $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 20356
     HEAP32[$204 >> 2] = $48; //@line 20357
     $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 20358
     HEAP32[$205 >> 2] = $50; //@line 20359
     $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 20360
     HEAP32[$206 >> 2] = $52; //@line 20361
     $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 20362
     HEAP16[$207 >> 1] = $175; //@line 20363
     $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 20364
     HEAP32[$208 >> 2] = $54; //@line 20365
     $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 20366
     HEAP32[$209 >> 2] = $56; //@line 20367
     $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 20368
     HEAP32[$210 >> 2] = $58; //@line 20369
     $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 20370
     HEAP32[$211 >> 2] = $60; //@line 20371
     $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 20372
     HEAP32[$212 >> 2] = $62; //@line 20373
     $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 20374
     HEAP32[$213 >> 2] = $64; //@line 20375
     $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 20376
     HEAP32[$214 >> 2] = $66; //@line 20377
     $215 = $ReallocAsyncCtx3 + 144 | 0; //@line 20378
     HEAP32[$215 >> 2] = $68; //@line 20379
     $216 = $ReallocAsyncCtx3 + 148 | 0; //@line 20380
     HEAP32[$216 >> 2] = $70; //@line 20381
     $217 = $ReallocAsyncCtx3 + 152 | 0; //@line 20382
     HEAP32[$217 >> 2] = $72; //@line 20383
     $218 = $ReallocAsyncCtx3 + 156 | 0; //@line 20384
     HEAP32[$218 >> 2] = $74; //@line 20385
     $219 = $ReallocAsyncCtx3 + 160 | 0; //@line 20386
     HEAP32[$219 >> 2] = $76; //@line 20387
     $220 = $ReallocAsyncCtx3 + 164 | 0; //@line 20388
     HEAP32[$220 >> 2] = $78; //@line 20389
     $221 = $ReallocAsyncCtx3 + 168 | 0; //@line 20390
     HEAP32[$221 >> 2] = $80; //@line 20391
     $222 = $ReallocAsyncCtx3 + 172 | 0; //@line 20392
     HEAP32[$222 >> 2] = $82; //@line 20393
     $223 = $ReallocAsyncCtx3 + 176 | 0; //@line 20394
     HEAP32[$223 >> 2] = $$1202$in$i; //@line 20395
     $224 = $ReallocAsyncCtx3 + 180 | 0; //@line 20396
     HEAP32[$224 >> 2] = $84; //@line 20397
     $225 = $ReallocAsyncCtx3 + 184 | 0; //@line 20398
     HEAP32[$225 >> 2] = $86; //@line 20399
     $226 = $ReallocAsyncCtx3 + 188 | 0; //@line 20400
     HEAP32[$226 >> 2] = $88; //@line 20401
     $227 = $ReallocAsyncCtx3 + 192 | 0; //@line 20402
     HEAP32[$227 >> 2] = $90; //@line 20403
     $228 = $ReallocAsyncCtx3 + 196 | 0; //@line 20404
     HEAP16[$228 >> 1] = $$1202$i; //@line 20405
     $229 = $ReallocAsyncCtx3 + 200 | 0; //@line 20406
     HEAP32[$229 >> 2] = $92; //@line 20407
     $230 = $ReallocAsyncCtx3 + 204 | 0; //@line 20408
     HEAP32[$230 >> 2] = $96; //@line 20409
     $231 = $ReallocAsyncCtx3 + 208 | 0; //@line 20410
     HEAP32[$231 >> 2] = $98; //@line 20411
     $232 = $ReallocAsyncCtx3 + 212 | 0; //@line 20412
     HEAP32[$232 >> 2] = $94; //@line 20413
     $233 = $ReallocAsyncCtx3 + 216 | 0; //@line 20414
     HEAP32[$233 >> 2] = $102; //@line 20415
     $234 = $ReallocAsyncCtx3 + 220 | 0; //@line 20416
     HEAP32[$234 >> 2] = $100; //@line 20417
     $235 = $ReallocAsyncCtx3 + 224 | 0; //@line 20418
     HEAP32[$235 >> 2] = $104; //@line 20419
     $236 = $ReallocAsyncCtx3 + 228 | 0; //@line 20420
     HEAP32[$236 >> 2] = $106; //@line 20421
     $237 = $ReallocAsyncCtx3 + 232 | 0; //@line 20422
     HEAP32[$237 >> 2] = $108; //@line 20423
     $238 = $ReallocAsyncCtx3 + 236 | 0; //@line 20424
     HEAP32[$238 >> 2] = $110; //@line 20425
     $239 = $ReallocAsyncCtx3 + 240 | 0; //@line 20426
     HEAP32[$239 >> 2] = $112; //@line 20427
     $240 = $ReallocAsyncCtx3 + 244 | 0; //@line 20428
     HEAP32[$240 >> 2] = $241; //@line 20429
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 20430
     HEAP32[$242 >> 2] = $114; //@line 20431
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 20432
     HEAP32[$243 >> 2] = $116; //@line 20433
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 20434
     HEAP32[$244 >> 2] = $118; //@line 20435
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 20436
     HEAP32[$245 >> 2] = $120; //@line 20437
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 20438
     HEAP32[$246 >> 2] = $157; //@line 20439
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 20440
     HEAP32[$247 >> 2] = $124; //@line 20441
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 20442
     HEAP32[$248 >> 2] = $126; //@line 20443
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 20444
     HEAP32[$249 >> 2] = $128; //@line 20445
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 20446
     HEAP32[$250 >> 2] = $130; //@line 20447
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 20448
     HEAP32[$251 >> 2] = $14; //@line 20449
     sp = STACKTOP; //@line 20450
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3844, 4279, $86); //@line 20455
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3844, 4348, $4); //@line 20460
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 20465
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$38 >> 2] | 0; //@line 20469
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 20475
       $289 = $241 + 1 | 0; //@line 20476
       HEAP32[$88 >> 2] = $289; //@line 20477
       $290 = HEAP32[$40 >> 2] | 0; //@line 20478
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 20479
       $291 = FUNCTION_TABLE_ii[$290 & 31]($$1202$i) | 0; //@line 20480
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 20483
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 20484
        HEAP32[$292 >> 2] = $2; //@line 20485
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 20486
        HEAP32[$293 >> 2] = $4; //@line 20487
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 20488
        HEAP32[$294 >> 2] = $6; //@line 20489
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 20490
        HEAP32[$295 >> 2] = $8; //@line 20491
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 20492
        HEAP32[$296 >> 2] = $132; //@line 20493
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 20494
        HEAP32[$297 >> 2] = $12; //@line 20495
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 20496
        HEAP32[$298 >> 2] = $10; //@line 20497
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 20498
        HEAP32[$299 >> 2] = $16; //@line 20499
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 20500
        HEAP32[$300 >> 2] = $18; //@line 20501
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 20502
        HEAP32[$301 >> 2] = $20; //@line 20503
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 20504
        HEAP32[$302 >> 2] = $22; //@line 20505
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 20506
        HEAP32[$303 >> 2] = $24; //@line 20507
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 20508
        HEAP32[$304 >> 2] = $281; //@line 20509
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 20510
        HEAP32[$305 >> 2] = $26; //@line 20511
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 20512
        HEAP32[$306 >> 2] = $28; //@line 20513
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 20514
        HEAP32[$307 >> 2] = $30; //@line 20515
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 20516
        HEAP32[$308 >> 2] = $289; //@line 20517
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 20518
        HEAP32[$309 >> 2] = $32; //@line 20519
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 20520
        HEAP32[$310 >> 2] = $34; //@line 20521
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 20522
        HEAP32[$311 >> 2] = $36; //@line 20523
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 20524
        HEAP32[$312 >> 2] = $38; //@line 20525
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 20526
        HEAP32[$313 >> 2] = $40; //@line 20527
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 20528
        HEAP32[$314 >> 2] = $42; //@line 20529
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 20530
        HEAP32[$315 >> 2] = $44; //@line 20531
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 20532
        HEAP32[$316 >> 2] = $46; //@line 20533
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 20534
        HEAP32[$317 >> 2] = $48; //@line 20535
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 20536
        HEAP32[$318 >> 2] = $50; //@line 20537
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 20538
        HEAP32[$319 >> 2] = $52; //@line 20539
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 20540
        HEAP32[$320 >> 2] = $54; //@line 20541
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 20542
        HEAP32[$321 >> 2] = $56; //@line 20543
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 20544
        HEAP32[$322 >> 2] = $58; //@line 20545
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 20546
        HEAP32[$323 >> 2] = $60; //@line 20547
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 20548
        HEAP32[$324 >> 2] = $62; //@line 20549
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 20550
        HEAP32[$325 >> 2] = $64; //@line 20551
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 20552
        HEAP32[$326 >> 2] = $66; //@line 20553
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 20554
        HEAP32[$327 >> 2] = $68; //@line 20555
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 20556
        HEAP32[$328 >> 2] = $70; //@line 20557
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 20558
        HEAP32[$329 >> 2] = $72; //@line 20559
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 20560
        HEAP32[$330 >> 2] = $74; //@line 20561
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 20562
        HEAP32[$331 >> 2] = $76; //@line 20563
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 20564
        HEAP32[$332 >> 2] = $78; //@line 20565
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 20566
        HEAP32[$333 >> 2] = $80; //@line 20567
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 20568
        HEAP32[$334 >> 2] = $82; //@line 20569
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 20570
        HEAP32[$335 >> 2] = $84; //@line 20571
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 20572
        HEAP32[$336 >> 2] = $86; //@line 20573
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 20574
        HEAP32[$337 >> 2] = $88; //@line 20575
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 20576
        HEAP32[$338 >> 2] = $90; //@line 20577
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 20578
        HEAP32[$339 >> 2] = $92; //@line 20579
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 20580
        HEAP32[$340 >> 2] = $94; //@line 20581
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 20582
        HEAP32[$341 >> 2] = $96; //@line 20583
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 20584
        HEAP32[$342 >> 2] = $98; //@line 20585
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 20586
        HEAP32[$343 >> 2] = $100; //@line 20587
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 20588
        HEAP32[$344 >> 2] = $102; //@line 20589
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 20590
        HEAP32[$345 >> 2] = $104; //@line 20591
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 20592
        HEAP32[$346 >> 2] = $106; //@line 20593
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 20594
        HEAP32[$347 >> 2] = $108; //@line 20595
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 20596
        HEAP32[$348 >> 2] = $110; //@line 20597
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 20598
        HEAP32[$349 >> 2] = $112; //@line 20599
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 20600
        HEAP32[$350 >> 2] = $114; //@line 20601
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 20602
        HEAP32[$351 >> 2] = $116; //@line 20603
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 20604
        HEAP32[$352 >> 2] = $118; //@line 20605
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 20606
        HEAP32[$353 >> 2] = $120; //@line 20607
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 20608
        HEAP32[$354 >> 2] = $157; //@line 20609
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 20610
        HEAP32[$355 >> 2] = $124; //@line 20611
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 20612
        HEAP32[$356 >> 2] = $126; //@line 20613
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 20614
        HEAP32[$357 >> 2] = $128; //@line 20615
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 20616
        HEAP32[$358 >> 2] = $130; //@line 20617
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 20618
        HEAP32[$359 >> 2] = $14; //@line 20619
        sp = STACKTOP; //@line 20620
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 20624
       ___async_unwind = 0; //@line 20625
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 20626
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 20627
       HEAP32[$292 >> 2] = $2; //@line 20628
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 20629
       HEAP32[$293 >> 2] = $4; //@line 20630
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 20631
       HEAP32[$294 >> 2] = $6; //@line 20632
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 20633
       HEAP32[$295 >> 2] = $8; //@line 20634
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 20635
       HEAP32[$296 >> 2] = $132; //@line 20636
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 20637
       HEAP32[$297 >> 2] = $12; //@line 20638
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 20639
       HEAP32[$298 >> 2] = $10; //@line 20640
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 20641
       HEAP32[$299 >> 2] = $16; //@line 20642
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 20643
       HEAP32[$300 >> 2] = $18; //@line 20644
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 20645
       HEAP32[$301 >> 2] = $20; //@line 20646
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 20647
       HEAP32[$302 >> 2] = $22; //@line 20648
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 20649
       HEAP32[$303 >> 2] = $24; //@line 20650
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 20651
       HEAP32[$304 >> 2] = $281; //@line 20652
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 20653
       HEAP32[$305 >> 2] = $26; //@line 20654
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 20655
       HEAP32[$306 >> 2] = $28; //@line 20656
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 20657
       HEAP32[$307 >> 2] = $30; //@line 20658
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 20659
       HEAP32[$308 >> 2] = $289; //@line 20660
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 20661
       HEAP32[$309 >> 2] = $32; //@line 20662
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 20663
       HEAP32[$310 >> 2] = $34; //@line 20664
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 20665
       HEAP32[$311 >> 2] = $36; //@line 20666
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 20667
       HEAP32[$312 >> 2] = $38; //@line 20668
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 20669
       HEAP32[$313 >> 2] = $40; //@line 20670
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 20671
       HEAP32[$314 >> 2] = $42; //@line 20672
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 20673
       HEAP32[$315 >> 2] = $44; //@line 20674
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 20675
       HEAP32[$316 >> 2] = $46; //@line 20676
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 20677
       HEAP32[$317 >> 2] = $48; //@line 20678
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 20679
       HEAP32[$318 >> 2] = $50; //@line 20680
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 20681
       HEAP32[$319 >> 2] = $52; //@line 20682
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 20683
       HEAP32[$320 >> 2] = $54; //@line 20684
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 20685
       HEAP32[$321 >> 2] = $56; //@line 20686
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 20687
       HEAP32[$322 >> 2] = $58; //@line 20688
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 20689
       HEAP32[$323 >> 2] = $60; //@line 20690
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 20691
       HEAP32[$324 >> 2] = $62; //@line 20692
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 20693
       HEAP32[$325 >> 2] = $64; //@line 20694
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 20695
       HEAP32[$326 >> 2] = $66; //@line 20696
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 20697
       HEAP32[$327 >> 2] = $68; //@line 20698
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 20699
       HEAP32[$328 >> 2] = $70; //@line 20700
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 20701
       HEAP32[$329 >> 2] = $72; //@line 20702
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 20703
       HEAP32[$330 >> 2] = $74; //@line 20704
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 20705
       HEAP32[$331 >> 2] = $76; //@line 20706
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 20707
       HEAP32[$332 >> 2] = $78; //@line 20708
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 20709
       HEAP32[$333 >> 2] = $80; //@line 20710
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 20711
       HEAP32[$334 >> 2] = $82; //@line 20712
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 20713
       HEAP32[$335 >> 2] = $84; //@line 20714
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 20715
       HEAP32[$336 >> 2] = $86; //@line 20716
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 20717
       HEAP32[$337 >> 2] = $88; //@line 20718
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 20719
       HEAP32[$338 >> 2] = $90; //@line 20720
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 20721
       HEAP32[$339 >> 2] = $92; //@line 20722
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 20723
       HEAP32[$340 >> 2] = $94; //@line 20724
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 20725
       HEAP32[$341 >> 2] = $96; //@line 20726
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 20727
       HEAP32[$342 >> 2] = $98; //@line 20728
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 20729
       HEAP32[$343 >> 2] = $100; //@line 20730
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 20731
       HEAP32[$344 >> 2] = $102; //@line 20732
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 20733
       HEAP32[$345 >> 2] = $104; //@line 20734
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 20735
       HEAP32[$346 >> 2] = $106; //@line 20736
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 20737
       HEAP32[$347 >> 2] = $108; //@line 20738
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 20739
       HEAP32[$348 >> 2] = $110; //@line 20740
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 20741
       HEAP32[$349 >> 2] = $112; //@line 20742
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 20743
       HEAP32[$350 >> 2] = $114; //@line 20744
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 20745
       HEAP32[$351 >> 2] = $116; //@line 20746
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 20747
       HEAP32[$352 >> 2] = $118; //@line 20748
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 20749
       HEAP32[$353 >> 2] = $120; //@line 20750
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 20751
       HEAP32[$354 >> 2] = $157; //@line 20752
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 20753
       HEAP32[$355 >> 2] = $124; //@line 20754
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 20755
       HEAP32[$356 >> 2] = $126; //@line 20756
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 20757
       HEAP32[$357 >> 2] = $128; //@line 20758
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 20759
       HEAP32[$358 >> 2] = $130; //@line 20760
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 20761
       HEAP32[$359 >> 2] = $14; //@line 20762
       sp = STACKTOP; //@line 20763
       return;
      }
     }
     _mbed_tracef(2, 3844, 4410, $50); //@line 20767
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$38 >> 2] | 0; //@line 20772
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 20774
     $363 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 20775
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 20778
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 20779
      HEAP32[$364 >> 2] = $2; //@line 20780
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 20781
      HEAP32[$365 >> 2] = $4; //@line 20782
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 20783
      HEAP32[$366 >> 2] = $6; //@line 20784
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 20785
      HEAP32[$367 >> 2] = $8; //@line 20786
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 20787
      HEAP32[$368 >> 2] = $10; //@line 20788
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 20789
      HEAP32[$369 >> 2] = $12; //@line 20790
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 20791
      HEAP32[$370 >> 2] = $14; //@line 20792
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 20793
      HEAP32[$371 >> 2] = $16; //@line 20794
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 20795
      HEAP32[$372 >> 2] = $18; //@line 20796
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 20797
      HEAP32[$373 >> 2] = $20; //@line 20798
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 20799
      HEAP32[$374 >> 2] = $22; //@line 20800
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 20801
      HEAP32[$375 >> 2] = $24; //@line 20802
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 20803
      HEAP32[$376 >> 2] = $26; //@line 20804
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 20805
      HEAP32[$377 >> 2] = $28; //@line 20806
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 20807
      HEAP32[$378 >> 2] = $30; //@line 20808
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 20809
      HEAP32[$379 >> 2] = $32; //@line 20810
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 20811
      HEAP32[$380 >> 2] = $34; //@line 20812
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 20813
      HEAP32[$381 >> 2] = $36; //@line 20814
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 20815
      HEAP32[$382 >> 2] = $38; //@line 20816
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 20817
      HEAP32[$383 >> 2] = $40; //@line 20818
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 20819
      HEAP32[$384 >> 2] = $42; //@line 20820
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 20821
      HEAP32[$385 >> 2] = $44; //@line 20822
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 20823
      HEAP32[$386 >> 2] = $46; //@line 20824
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 20825
      HEAP32[$387 >> 2] = $48; //@line 20826
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 20827
      HEAP32[$388 >> 2] = $50; //@line 20828
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 20829
      HEAP32[$389 >> 2] = $52; //@line 20830
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 20831
      HEAP32[$390 >> 2] = $54; //@line 20832
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 20833
      HEAP32[$391 >> 2] = $56; //@line 20834
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 20835
      HEAP32[$392 >> 2] = $58; //@line 20836
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 20837
      HEAP32[$393 >> 2] = $60; //@line 20838
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 20839
      HEAP32[$394 >> 2] = $62; //@line 20840
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 20841
      HEAP32[$395 >> 2] = $64; //@line 20842
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 20843
      HEAP32[$396 >> 2] = $66; //@line 20844
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 20845
      HEAP32[$397 >> 2] = $68; //@line 20846
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 20847
      HEAP32[$398 >> 2] = $70; //@line 20848
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 20849
      HEAP32[$399 >> 2] = $72; //@line 20850
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 20851
      HEAP32[$400 >> 2] = $74; //@line 20852
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 20853
      HEAP32[$401 >> 2] = $76; //@line 20854
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 20855
      HEAP32[$402 >> 2] = $78; //@line 20856
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 20857
      HEAP32[$403 >> 2] = $80; //@line 20858
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 20859
      HEAP32[$404 >> 2] = $82; //@line 20860
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 20861
      HEAP32[$405 >> 2] = $84; //@line 20862
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 20863
      HEAP32[$406 >> 2] = $86; //@line 20864
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 20865
      HEAP32[$407 >> 2] = $88; //@line 20866
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 20867
      HEAP32[$408 >> 2] = $90; //@line 20868
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 20869
      HEAP32[$409 >> 2] = $92; //@line 20870
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 20871
      HEAP32[$410 >> 2] = $94; //@line 20872
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 20873
      HEAP32[$411 >> 2] = $96; //@line 20874
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 20875
      HEAP32[$412 >> 2] = $98; //@line 20876
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 20877
      HEAP32[$413 >> 2] = $100; //@line 20878
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 20879
      HEAP32[$414 >> 2] = $102; //@line 20880
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 20881
      HEAP32[$415 >> 2] = $104; //@line 20882
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 20883
      HEAP32[$416 >> 2] = $106; //@line 20884
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 20885
      HEAP32[$417 >> 2] = $108; //@line 20886
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 20887
      HEAP32[$418 >> 2] = $110; //@line 20888
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 20889
      HEAP32[$419 >> 2] = $112; //@line 20890
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 20891
      HEAP32[$420 >> 2] = $114; //@line 20892
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 20893
      HEAP32[$421 >> 2] = $116; //@line 20894
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 20895
      HEAP32[$422 >> 2] = $118; //@line 20896
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 20897
      HEAP32[$423 >> 2] = $120; //@line 20898
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 20899
      HEAP32[$424 >> 2] = $157; //@line 20900
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 20901
      HEAP32[$425 >> 2] = $124; //@line 20902
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 20903
      HEAP32[$426 >> 2] = $126; //@line 20904
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 20905
      HEAP32[$427 >> 2] = $128; //@line 20906
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 20907
      HEAP32[$428 >> 2] = $130; //@line 20908
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 20909
      HEAP32[$429 >> 2] = $132; //@line 20910
      sp = STACKTOP; //@line 20911
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 20915
     ___async_unwind = 0; //@line 20916
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 20917
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 20918
     HEAP32[$364 >> 2] = $2; //@line 20919
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 20920
     HEAP32[$365 >> 2] = $4; //@line 20921
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 20922
     HEAP32[$366 >> 2] = $6; //@line 20923
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 20924
     HEAP32[$367 >> 2] = $8; //@line 20925
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 20926
     HEAP32[$368 >> 2] = $10; //@line 20927
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 20928
     HEAP32[$369 >> 2] = $12; //@line 20929
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 20930
     HEAP32[$370 >> 2] = $14; //@line 20931
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 20932
     HEAP32[$371 >> 2] = $16; //@line 20933
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 20934
     HEAP32[$372 >> 2] = $18; //@line 20935
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 20936
     HEAP32[$373 >> 2] = $20; //@line 20937
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 20938
     HEAP32[$374 >> 2] = $22; //@line 20939
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 20940
     HEAP32[$375 >> 2] = $24; //@line 20941
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 20942
     HEAP32[$376 >> 2] = $26; //@line 20943
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 20944
     HEAP32[$377 >> 2] = $28; //@line 20945
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 20946
     HEAP32[$378 >> 2] = $30; //@line 20947
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 20948
     HEAP32[$379 >> 2] = $32; //@line 20949
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 20950
     HEAP32[$380 >> 2] = $34; //@line 20951
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 20952
     HEAP32[$381 >> 2] = $36; //@line 20953
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 20954
     HEAP32[$382 >> 2] = $38; //@line 20955
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 20956
     HEAP32[$383 >> 2] = $40; //@line 20957
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 20958
     HEAP32[$384 >> 2] = $42; //@line 20959
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 20960
     HEAP32[$385 >> 2] = $44; //@line 20961
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 20962
     HEAP32[$386 >> 2] = $46; //@line 20963
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 20964
     HEAP32[$387 >> 2] = $48; //@line 20965
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 20966
     HEAP32[$388 >> 2] = $50; //@line 20967
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 20968
     HEAP32[$389 >> 2] = $52; //@line 20969
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 20970
     HEAP32[$390 >> 2] = $54; //@line 20971
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 20972
     HEAP32[$391 >> 2] = $56; //@line 20973
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 20974
     HEAP32[$392 >> 2] = $58; //@line 20975
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 20976
     HEAP32[$393 >> 2] = $60; //@line 20977
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 20978
     HEAP32[$394 >> 2] = $62; //@line 20979
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 20980
     HEAP32[$395 >> 2] = $64; //@line 20981
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 20982
     HEAP32[$396 >> 2] = $66; //@line 20983
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 20984
     HEAP32[$397 >> 2] = $68; //@line 20985
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 20986
     HEAP32[$398 >> 2] = $70; //@line 20987
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 20988
     HEAP32[$399 >> 2] = $72; //@line 20989
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 20990
     HEAP32[$400 >> 2] = $74; //@line 20991
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 20992
     HEAP32[$401 >> 2] = $76; //@line 20993
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 20994
     HEAP32[$402 >> 2] = $78; //@line 20995
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 20996
     HEAP32[$403 >> 2] = $80; //@line 20997
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 20998
     HEAP32[$404 >> 2] = $82; //@line 20999
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 21000
     HEAP32[$405 >> 2] = $84; //@line 21001
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 21002
     HEAP32[$406 >> 2] = $86; //@line 21003
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 21004
     HEAP32[$407 >> 2] = $88; //@line 21005
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 21006
     HEAP32[$408 >> 2] = $90; //@line 21007
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 21008
     HEAP32[$409 >> 2] = $92; //@line 21009
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 21010
     HEAP32[$410 >> 2] = $94; //@line 21011
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 21012
     HEAP32[$411 >> 2] = $96; //@line 21013
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 21014
     HEAP32[$412 >> 2] = $98; //@line 21015
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 21016
     HEAP32[$413 >> 2] = $100; //@line 21017
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 21018
     HEAP32[$414 >> 2] = $102; //@line 21019
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 21020
     HEAP32[$415 >> 2] = $104; //@line 21021
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 21022
     HEAP32[$416 >> 2] = $106; //@line 21023
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 21024
     HEAP32[$417 >> 2] = $108; //@line 21025
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 21026
     HEAP32[$418 >> 2] = $110; //@line 21027
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 21028
     HEAP32[$419 >> 2] = $112; //@line 21029
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 21030
     HEAP32[$420 >> 2] = $114; //@line 21031
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 21032
     HEAP32[$421 >> 2] = $116; //@line 21033
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 21034
     HEAP32[$422 >> 2] = $118; //@line 21035
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 21036
     HEAP32[$423 >> 2] = $120; //@line 21037
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 21038
     HEAP32[$424 >> 2] = $157; //@line 21039
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 21040
     HEAP32[$425 >> 2] = $124; //@line 21041
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 21042
     HEAP32[$426 >> 2] = $126; //@line 21043
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 21044
     HEAP32[$427 >> 2] = $128; //@line 21045
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 21046
     HEAP32[$428 >> 2] = $130; //@line 21047
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 21048
     HEAP32[$429 >> 2] = $132; //@line 21049
     sp = STACKTOP; //@line 21050
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 21055
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$38 >> 2] | 0; //@line 21059
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 21065
       $439 = $241 + 1 | 0; //@line 21066
       HEAP32[$88 >> 2] = $439; //@line 21067
       $440 = HEAP32[$40 >> 2] | 0; //@line 21068
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 21069
       $441 = FUNCTION_TABLE_ii[$440 & 31]($$1202$i) | 0; //@line 21070
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 21073
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 21074
        HEAP32[$442 >> 2] = $2; //@line 21075
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 21076
        HEAP32[$443 >> 2] = $4; //@line 21077
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 21078
        HEAP32[$444 >> 2] = $431; //@line 21079
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 21080
        HEAP32[$445 >> 2] = $6; //@line 21081
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 21082
        HEAP32[$446 >> 2] = $8; //@line 21083
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 21084
        HEAP32[$447 >> 2] = $132; //@line 21085
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 21086
        HEAP32[$448 >> 2] = $12; //@line 21087
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 21088
        HEAP32[$449 >> 2] = $10; //@line 21089
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 21090
        HEAP32[$450 >> 2] = $16; //@line 21091
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 21092
        HEAP32[$451 >> 2] = $439; //@line 21093
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 21094
        HEAP32[$452 >> 2] = $18; //@line 21095
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 21096
        HEAP32[$453 >> 2] = $20; //@line 21097
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 21098
        HEAP32[$454 >> 2] = $22; //@line 21099
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 21100
        HEAP32[$455 >> 2] = $24; //@line 21101
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 21102
        HEAP32[$456 >> 2] = $26; //@line 21103
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 21104
        HEAP32[$457 >> 2] = $28; //@line 21105
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 21106
        HEAP32[$458 >> 2] = $30; //@line 21107
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 21108
        HEAP32[$459 >> 2] = $32; //@line 21109
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 21110
        HEAP32[$460 >> 2] = $34; //@line 21111
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 21112
        HEAP32[$461 >> 2] = $36; //@line 21113
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 21114
        HEAP32[$462 >> 2] = $38; //@line 21115
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 21116
        HEAP32[$463 >> 2] = $40; //@line 21117
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 21118
        HEAP32[$464 >> 2] = $42; //@line 21119
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 21120
        HEAP32[$465 >> 2] = $44; //@line 21121
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 21122
        HEAP32[$466 >> 2] = $46; //@line 21123
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 21124
        HEAP32[$467 >> 2] = $48; //@line 21125
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 21126
        HEAP32[$468 >> 2] = $50; //@line 21127
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 21128
        HEAP32[$469 >> 2] = $52; //@line 21129
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 21130
        HEAP32[$470 >> 2] = $54; //@line 21131
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 21132
        HEAP32[$471 >> 2] = $56; //@line 21133
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 21134
        HEAP32[$472 >> 2] = $58; //@line 21135
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 21136
        HEAP32[$473 >> 2] = $60; //@line 21137
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 21138
        HEAP32[$474 >> 2] = $62; //@line 21139
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 21140
        HEAP32[$475 >> 2] = $64; //@line 21141
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 21142
        HEAP32[$476 >> 2] = $66; //@line 21143
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 21144
        HEAP32[$477 >> 2] = $68; //@line 21145
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 21146
        HEAP32[$478 >> 2] = $70; //@line 21147
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 21148
        HEAP32[$479 >> 2] = $72; //@line 21149
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 21150
        HEAP32[$480 >> 2] = $74; //@line 21151
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 21152
        HEAP32[$481 >> 2] = $76; //@line 21153
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 21154
        HEAP32[$482 >> 2] = $78; //@line 21155
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 21156
        HEAP32[$483 >> 2] = $80; //@line 21157
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 21158
        HEAP32[$484 >> 2] = $82; //@line 21159
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 21160
        HEAP32[$485 >> 2] = $84; //@line 21161
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 21162
        HEAP32[$486 >> 2] = $86; //@line 21163
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 21164
        HEAP32[$487 >> 2] = $88; //@line 21165
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 21166
        HEAP32[$488 >> 2] = $90; //@line 21167
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 21168
        HEAP32[$489 >> 2] = $92; //@line 21169
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 21170
        HEAP32[$490 >> 2] = $94; //@line 21171
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 21172
        HEAP32[$491 >> 2] = $96; //@line 21173
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 21174
        HEAP32[$492 >> 2] = $98; //@line 21175
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 21176
        HEAP32[$493 >> 2] = $100; //@line 21177
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 21178
        HEAP32[$494 >> 2] = $102; //@line 21179
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 21180
        HEAP32[$495 >> 2] = $104; //@line 21181
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 21182
        HEAP32[$496 >> 2] = $106; //@line 21183
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 21184
        HEAP32[$497 >> 2] = $108; //@line 21185
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 21186
        HEAP32[$498 >> 2] = $110; //@line 21187
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 21188
        HEAP32[$499 >> 2] = $112; //@line 21189
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 21190
        HEAP32[$500 >> 2] = $114; //@line 21191
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 21192
        HEAP32[$501 >> 2] = $116; //@line 21193
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 21194
        HEAP32[$502 >> 2] = $118; //@line 21195
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 21196
        HEAP32[$503 >> 2] = $120; //@line 21197
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 21198
        HEAP32[$504 >> 2] = $157; //@line 21199
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 21200
        HEAP32[$505 >> 2] = $124; //@line 21201
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 21202
        HEAP32[$506 >> 2] = $126; //@line 21203
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 21204
        HEAP32[$507 >> 2] = $128; //@line 21205
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 21206
        HEAP32[$508 >> 2] = $130; //@line 21207
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 21208
        HEAP32[$509 >> 2] = $14; //@line 21209
        sp = STACKTOP; //@line 21210
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 21214
       ___async_unwind = 0; //@line 21215
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 21216
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 21217
       HEAP32[$442 >> 2] = $2; //@line 21218
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 21219
       HEAP32[$443 >> 2] = $4; //@line 21220
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 21221
       HEAP32[$444 >> 2] = $431; //@line 21222
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 21223
       HEAP32[$445 >> 2] = $6; //@line 21224
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 21225
       HEAP32[$446 >> 2] = $8; //@line 21226
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 21227
       HEAP32[$447 >> 2] = $132; //@line 21228
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 21229
       HEAP32[$448 >> 2] = $12; //@line 21230
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 21231
       HEAP32[$449 >> 2] = $10; //@line 21232
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 21233
       HEAP32[$450 >> 2] = $16; //@line 21234
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 21235
       HEAP32[$451 >> 2] = $439; //@line 21236
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 21237
       HEAP32[$452 >> 2] = $18; //@line 21238
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 21239
       HEAP32[$453 >> 2] = $20; //@line 21240
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 21241
       HEAP32[$454 >> 2] = $22; //@line 21242
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 21243
       HEAP32[$455 >> 2] = $24; //@line 21244
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 21245
       HEAP32[$456 >> 2] = $26; //@line 21246
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 21247
       HEAP32[$457 >> 2] = $28; //@line 21248
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 21249
       HEAP32[$458 >> 2] = $30; //@line 21250
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 21251
       HEAP32[$459 >> 2] = $32; //@line 21252
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 21253
       HEAP32[$460 >> 2] = $34; //@line 21254
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 21255
       HEAP32[$461 >> 2] = $36; //@line 21256
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 21257
       HEAP32[$462 >> 2] = $38; //@line 21258
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 21259
       HEAP32[$463 >> 2] = $40; //@line 21260
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 21261
       HEAP32[$464 >> 2] = $42; //@line 21262
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 21263
       HEAP32[$465 >> 2] = $44; //@line 21264
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 21265
       HEAP32[$466 >> 2] = $46; //@line 21266
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 21267
       HEAP32[$467 >> 2] = $48; //@line 21268
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 21269
       HEAP32[$468 >> 2] = $50; //@line 21270
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 21271
       HEAP32[$469 >> 2] = $52; //@line 21272
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 21273
       HEAP32[$470 >> 2] = $54; //@line 21274
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 21275
       HEAP32[$471 >> 2] = $56; //@line 21276
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 21277
       HEAP32[$472 >> 2] = $58; //@line 21278
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 21279
       HEAP32[$473 >> 2] = $60; //@line 21280
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 21281
       HEAP32[$474 >> 2] = $62; //@line 21282
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 21283
       HEAP32[$475 >> 2] = $64; //@line 21284
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 21285
       HEAP32[$476 >> 2] = $66; //@line 21286
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 21287
       HEAP32[$477 >> 2] = $68; //@line 21288
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 21289
       HEAP32[$478 >> 2] = $70; //@line 21290
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 21291
       HEAP32[$479 >> 2] = $72; //@line 21292
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 21293
       HEAP32[$480 >> 2] = $74; //@line 21294
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 21295
       HEAP32[$481 >> 2] = $76; //@line 21296
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 21297
       HEAP32[$482 >> 2] = $78; //@line 21298
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 21299
       HEAP32[$483 >> 2] = $80; //@line 21300
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 21301
       HEAP32[$484 >> 2] = $82; //@line 21302
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 21303
       HEAP32[$485 >> 2] = $84; //@line 21304
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 21305
       HEAP32[$486 >> 2] = $86; //@line 21306
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 21307
       HEAP32[$487 >> 2] = $88; //@line 21308
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 21309
       HEAP32[$488 >> 2] = $90; //@line 21310
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 21311
       HEAP32[$489 >> 2] = $92; //@line 21312
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 21313
       HEAP32[$490 >> 2] = $94; //@line 21314
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 21315
       HEAP32[$491 >> 2] = $96; //@line 21316
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 21317
       HEAP32[$492 >> 2] = $98; //@line 21318
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 21319
       HEAP32[$493 >> 2] = $100; //@line 21320
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 21321
       HEAP32[$494 >> 2] = $102; //@line 21322
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 21323
       HEAP32[$495 >> 2] = $104; //@line 21324
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 21325
       HEAP32[$496 >> 2] = $106; //@line 21326
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 21327
       HEAP32[$497 >> 2] = $108; //@line 21328
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 21329
       HEAP32[$498 >> 2] = $110; //@line 21330
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 21331
       HEAP32[$499 >> 2] = $112; //@line 21332
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 21333
       HEAP32[$500 >> 2] = $114; //@line 21334
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 21335
       HEAP32[$501 >> 2] = $116; //@line 21336
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 21337
       HEAP32[$502 >> 2] = $118; //@line 21338
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 21339
       HEAP32[$503 >> 2] = $120; //@line 21340
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 21341
       HEAP32[$504 >> 2] = $157; //@line 21342
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 21343
       HEAP32[$505 >> 2] = $124; //@line 21344
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 21345
       HEAP32[$506 >> 2] = $126; //@line 21346
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 21347
       HEAP32[$507 >> 2] = $128; //@line 21348
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 21349
       HEAP32[$508 >> 2] = $130; //@line 21350
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 21351
       HEAP32[$509 >> 2] = $14; //@line 21352
       sp = STACKTOP; //@line 21353
       return;
      }
     }
     _mbed_tracef(2, 3844, 4605, $58); //@line 21357
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$38 >> 2] | 0; //@line 21362
     $512 = $511 + 56 | 0; //@line 21363
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3844, 4739, $30); //@line 21367
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 21371
     $516 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 21372
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 21375
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 21376
      HEAP32[$517 >> 2] = $2; //@line 21377
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 21378
      HEAP32[$518 >> 2] = $4; //@line 21379
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 21380
      HEAP32[$519 >> 2] = $6; //@line 21381
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 21382
      HEAP32[$520 >> 2] = $8; //@line 21383
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 21384
      HEAP32[$521 >> 2] = $10; //@line 21385
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 21386
      HEAP32[$522 >> 2] = $12; //@line 21387
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 21388
      HEAP32[$523 >> 2] = $14; //@line 21389
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 21390
      HEAP32[$524 >> 2] = $16; //@line 21391
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 21392
      HEAP32[$525 >> 2] = $18; //@line 21393
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 21394
      HEAP32[$526 >> 2] = $20; //@line 21395
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 21396
      HEAP32[$527 >> 2] = $22; //@line 21397
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 21398
      HEAP32[$528 >> 2] = $24; //@line 21399
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 21400
      HEAP32[$529 >> 2] = $26; //@line 21401
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 21402
      HEAP32[$530 >> 2] = $28; //@line 21403
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 21404
      HEAP32[$531 >> 2] = $30; //@line 21405
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 21406
      HEAP32[$532 >> 2] = $32; //@line 21407
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 21408
      HEAP32[$533 >> 2] = $34; //@line 21409
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 21410
      HEAP32[$534 >> 2] = $36; //@line 21411
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 21412
      HEAP32[$535 >> 2] = $38; //@line 21413
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 21414
      HEAP32[$536 >> 2] = $40; //@line 21415
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 21416
      HEAP32[$537 >> 2] = $42; //@line 21417
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 21418
      HEAP32[$538 >> 2] = $44; //@line 21419
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 21420
      HEAP32[$539 >> 2] = $46; //@line 21421
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 21422
      HEAP32[$540 >> 2] = $48; //@line 21423
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 21424
      HEAP32[$541 >> 2] = $50; //@line 21425
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 21426
      HEAP32[$542 >> 2] = $52; //@line 21427
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 21428
      HEAP32[$543 >> 2] = $54; //@line 21429
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 21430
      HEAP32[$544 >> 2] = $56; //@line 21431
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 21432
      HEAP32[$545 >> 2] = $58; //@line 21433
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 21434
      HEAP32[$546 >> 2] = $60; //@line 21435
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 21436
      HEAP32[$547 >> 2] = $62; //@line 21437
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 21438
      HEAP32[$548 >> 2] = $64; //@line 21439
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 21440
      HEAP32[$549 >> 2] = $66; //@line 21441
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 21442
      HEAP32[$550 >> 2] = $68; //@line 21443
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 21444
      HEAP32[$551 >> 2] = $70; //@line 21445
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 21446
      HEAP32[$552 >> 2] = $72; //@line 21447
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 21448
      HEAP32[$553 >> 2] = $74; //@line 21449
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 21450
      HEAP32[$554 >> 2] = $76; //@line 21451
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 21452
      HEAP32[$555 >> 2] = $78; //@line 21453
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 21454
      HEAP32[$556 >> 2] = $80; //@line 21455
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 21456
      HEAP32[$557 >> 2] = $82; //@line 21457
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 21458
      HEAP32[$558 >> 2] = $84; //@line 21459
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 21460
      HEAP32[$559 >> 2] = $86; //@line 21461
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 21462
      HEAP32[$560 >> 2] = $88; //@line 21463
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 21464
      HEAP32[$561 >> 2] = $90; //@line 21465
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 21466
      HEAP32[$562 >> 2] = $92; //@line 21467
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 21468
      HEAP32[$563 >> 2] = $94; //@line 21469
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 21470
      HEAP32[$564 >> 2] = $96; //@line 21471
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 21472
      HEAP32[$565 >> 2] = $98; //@line 21473
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 21474
      HEAP32[$566 >> 2] = $100; //@line 21475
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 21476
      HEAP32[$567 >> 2] = $102; //@line 21477
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 21478
      HEAP32[$568 >> 2] = $104; //@line 21479
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 21480
      HEAP32[$569 >> 2] = $106; //@line 21481
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 21482
      HEAP32[$570 >> 2] = $108; //@line 21483
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 21484
      HEAP32[$571 >> 2] = $110; //@line 21485
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 21486
      HEAP32[$572 >> 2] = $112; //@line 21487
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 21488
      HEAP32[$573 >> 2] = $114; //@line 21489
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 21490
      HEAP32[$574 >> 2] = $116; //@line 21491
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 21492
      HEAP32[$575 >> 2] = $118; //@line 21493
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 21494
      HEAP32[$576 >> 2] = $120; //@line 21495
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 21496
      HEAP32[$577 >> 2] = $157; //@line 21497
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 21498
      HEAP32[$578 >> 2] = $124; //@line 21499
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 21500
      HEAP32[$579 >> 2] = $126; //@line 21501
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 21502
      HEAP32[$580 >> 2] = $128; //@line 21503
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 21504
      HEAP32[$581 >> 2] = $130; //@line 21505
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 21506
      HEAP32[$582 >> 2] = $132; //@line 21507
      sp = STACKTOP; //@line 21508
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 21512
     ___async_unwind = 0; //@line 21513
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 21514
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 21515
     HEAP32[$517 >> 2] = $2; //@line 21516
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 21517
     HEAP32[$518 >> 2] = $4; //@line 21518
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 21519
     HEAP32[$519 >> 2] = $6; //@line 21520
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 21521
     HEAP32[$520 >> 2] = $8; //@line 21522
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 21523
     HEAP32[$521 >> 2] = $10; //@line 21524
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 21525
     HEAP32[$522 >> 2] = $12; //@line 21526
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 21527
     HEAP32[$523 >> 2] = $14; //@line 21528
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 21529
     HEAP32[$524 >> 2] = $16; //@line 21530
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 21531
     HEAP32[$525 >> 2] = $18; //@line 21532
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 21533
     HEAP32[$526 >> 2] = $20; //@line 21534
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 21535
     HEAP32[$527 >> 2] = $22; //@line 21536
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 21537
     HEAP32[$528 >> 2] = $24; //@line 21538
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 21539
     HEAP32[$529 >> 2] = $26; //@line 21540
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 21541
     HEAP32[$530 >> 2] = $28; //@line 21542
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 21543
     HEAP32[$531 >> 2] = $30; //@line 21544
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 21545
     HEAP32[$532 >> 2] = $32; //@line 21546
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 21547
     HEAP32[$533 >> 2] = $34; //@line 21548
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 21549
     HEAP32[$534 >> 2] = $36; //@line 21550
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 21551
     HEAP32[$535 >> 2] = $38; //@line 21552
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 21553
     HEAP32[$536 >> 2] = $40; //@line 21554
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 21555
     HEAP32[$537 >> 2] = $42; //@line 21556
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 21557
     HEAP32[$538 >> 2] = $44; //@line 21558
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 21559
     HEAP32[$539 >> 2] = $46; //@line 21560
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 21561
     HEAP32[$540 >> 2] = $48; //@line 21562
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 21563
     HEAP32[$541 >> 2] = $50; //@line 21564
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 21565
     HEAP32[$542 >> 2] = $52; //@line 21566
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 21567
     HEAP32[$543 >> 2] = $54; //@line 21568
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 21569
     HEAP32[$544 >> 2] = $56; //@line 21570
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 21571
     HEAP32[$545 >> 2] = $58; //@line 21572
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 21573
     HEAP32[$546 >> 2] = $60; //@line 21574
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 21575
     HEAP32[$547 >> 2] = $62; //@line 21576
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 21577
     HEAP32[$548 >> 2] = $64; //@line 21578
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 21579
     HEAP32[$549 >> 2] = $66; //@line 21580
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 21581
     HEAP32[$550 >> 2] = $68; //@line 21582
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 21583
     HEAP32[$551 >> 2] = $70; //@line 21584
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 21585
     HEAP32[$552 >> 2] = $72; //@line 21586
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 21587
     HEAP32[$553 >> 2] = $74; //@line 21588
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 21589
     HEAP32[$554 >> 2] = $76; //@line 21590
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 21591
     HEAP32[$555 >> 2] = $78; //@line 21592
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 21593
     HEAP32[$556 >> 2] = $80; //@line 21594
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 21595
     HEAP32[$557 >> 2] = $82; //@line 21596
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 21597
     HEAP32[$558 >> 2] = $84; //@line 21598
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 21599
     HEAP32[$559 >> 2] = $86; //@line 21600
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 21601
     HEAP32[$560 >> 2] = $88; //@line 21602
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 21603
     HEAP32[$561 >> 2] = $90; //@line 21604
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 21605
     HEAP32[$562 >> 2] = $92; //@line 21606
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 21607
     HEAP32[$563 >> 2] = $94; //@line 21608
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 21609
     HEAP32[$564 >> 2] = $96; //@line 21610
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 21611
     HEAP32[$565 >> 2] = $98; //@line 21612
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 21613
     HEAP32[$566 >> 2] = $100; //@line 21614
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 21615
     HEAP32[$567 >> 2] = $102; //@line 21616
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 21617
     HEAP32[$568 >> 2] = $104; //@line 21618
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 21619
     HEAP32[$569 >> 2] = $106; //@line 21620
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 21621
     HEAP32[$570 >> 2] = $108; //@line 21622
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 21623
     HEAP32[$571 >> 2] = $110; //@line 21624
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 21625
     HEAP32[$572 >> 2] = $112; //@line 21626
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 21627
     HEAP32[$573 >> 2] = $114; //@line 21628
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 21629
     HEAP32[$574 >> 2] = $116; //@line 21630
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 21631
     HEAP32[$575 >> 2] = $118; //@line 21632
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 21633
     HEAP32[$576 >> 2] = $120; //@line 21634
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 21635
     HEAP32[$577 >> 2] = $157; //@line 21636
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 21637
     HEAP32[$578 >> 2] = $124; //@line 21638
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 21639
     HEAP32[$579 >> 2] = $126; //@line 21640
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 21641
     HEAP32[$580 >> 2] = $128; //@line 21642
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 21643
     HEAP32[$581 >> 2] = $130; //@line 21644
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 21645
     HEAP32[$582 >> 2] = $132; //@line 21646
     sp = STACKTOP; //@line 21647
     return;
    }
   case 53:
    {
     _mbed_tracef(2, 3844, 4872, $126); //@line 21652
     break L2;
     break;
    }
   case 57:
    {
     $600 = HEAP32[$38 >> 2] | 0; //@line 21657
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 21660
     $603 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $600 + 60 | 0, $600 + 8 | 0, 20, $$1202$i) | 0; //@line 21661
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 21664
      $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 21665
      HEAP32[$604 >> 2] = $2; //@line 21666
      $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 21667
      HEAP32[$605 >> 2] = $4; //@line 21668
      $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 21669
      HEAP32[$606 >> 2] = $6; //@line 21670
      $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 21671
      HEAP32[$607 >> 2] = $8; //@line 21672
      $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 21673
      HEAP32[$608 >> 2] = $10; //@line 21674
      $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 21675
      HEAP32[$609 >> 2] = $12; //@line 21676
      $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 21677
      HEAP32[$610 >> 2] = $14; //@line 21678
      $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 21679
      HEAP32[$611 >> 2] = $16; //@line 21680
      $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 21681
      HEAP32[$612 >> 2] = $18; //@line 21682
      $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 21683
      HEAP32[$613 >> 2] = $20; //@line 21684
      $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 21685
      HEAP32[$614 >> 2] = $22; //@line 21686
      $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 21687
      HEAP32[$615 >> 2] = $24; //@line 21688
      $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 21689
      HEAP32[$616 >> 2] = $26; //@line 21690
      $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 21691
      HEAP32[$617 >> 2] = $28; //@line 21692
      $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 21693
      HEAP32[$618 >> 2] = $30; //@line 21694
      $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 21695
      HEAP32[$619 >> 2] = $32; //@line 21696
      $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 21697
      HEAP32[$620 >> 2] = $34; //@line 21698
      $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 21699
      HEAP32[$621 >> 2] = $36; //@line 21700
      $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 21701
      HEAP32[$622 >> 2] = $38; //@line 21702
      $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 21703
      HEAP32[$623 >> 2] = $40; //@line 21704
      $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 21705
      HEAP32[$624 >> 2] = $42; //@line 21706
      $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 21707
      HEAP32[$625 >> 2] = $44; //@line 21708
      $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 21709
      HEAP32[$626 >> 2] = $46; //@line 21710
      $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 21711
      HEAP32[$627 >> 2] = $48; //@line 21712
      $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 21713
      HEAP32[$628 >> 2] = $50; //@line 21714
      $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 21715
      HEAP32[$629 >> 2] = $52; //@line 21716
      $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 21717
      HEAP32[$630 >> 2] = $54; //@line 21718
      $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 21719
      HEAP32[$631 >> 2] = $56; //@line 21720
      $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 21721
      HEAP32[$632 >> 2] = $58; //@line 21722
      $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 21723
      HEAP32[$633 >> 2] = $60; //@line 21724
      $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 21725
      HEAP32[$634 >> 2] = $62; //@line 21726
      $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 21727
      HEAP32[$635 >> 2] = $64; //@line 21728
      $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 21729
      HEAP32[$636 >> 2] = $66; //@line 21730
      $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 21731
      HEAP32[$637 >> 2] = $68; //@line 21732
      $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 21733
      HEAP32[$638 >> 2] = $70; //@line 21734
      $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 21735
      HEAP32[$639 >> 2] = $72; //@line 21736
      $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 21737
      HEAP32[$640 >> 2] = $74; //@line 21738
      $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 21739
      HEAP32[$641 >> 2] = $76; //@line 21740
      $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 21741
      HEAP32[$642 >> 2] = $78; //@line 21742
      $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 21743
      HEAP32[$643 >> 2] = $80; //@line 21744
      $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 21745
      HEAP32[$644 >> 2] = $82; //@line 21746
      $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 21747
      HEAP32[$645 >> 2] = $84; //@line 21748
      $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 21749
      HEAP32[$646 >> 2] = $86; //@line 21750
      $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 21751
      HEAP32[$647 >> 2] = $88; //@line 21752
      $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 21753
      HEAP32[$648 >> 2] = $90; //@line 21754
      $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 21755
      HEAP32[$649 >> 2] = $92; //@line 21756
      $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 21757
      HEAP32[$650 >> 2] = $94; //@line 21758
      $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 21759
      HEAP32[$651 >> 2] = $96; //@line 21760
      $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 21761
      HEAP32[$652 >> 2] = $98; //@line 21762
      $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 21763
      HEAP32[$653 >> 2] = $100; //@line 21764
      $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 21765
      HEAP32[$654 >> 2] = $102; //@line 21766
      $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 21767
      HEAP32[$655 >> 2] = $104; //@line 21768
      $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 21769
      HEAP32[$656 >> 2] = $106; //@line 21770
      $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 21771
      HEAP32[$657 >> 2] = $108; //@line 21772
      $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 21773
      HEAP32[$658 >> 2] = $110; //@line 21774
      $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 21775
      HEAP32[$659 >> 2] = $112; //@line 21776
      $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 21777
      HEAP32[$660 >> 2] = $114; //@line 21778
      $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 21779
      HEAP32[$661 >> 2] = $116; //@line 21780
      $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 21781
      HEAP32[$662 >> 2] = $118; //@line 21782
      $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 21783
      HEAP32[$663 >> 2] = $120; //@line 21784
      $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 21785
      HEAP32[$664 >> 2] = $157; //@line 21786
      $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 21787
      HEAP32[$665 >> 2] = $124; //@line 21788
      $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 21789
      HEAP32[$666 >> 2] = $126; //@line 21790
      $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 21791
      HEAP32[$667 >> 2] = $128; //@line 21792
      $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 21793
      HEAP32[$668 >> 2] = $130; //@line 21794
      $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 21795
      HEAP32[$669 >> 2] = $132; //@line 21796
      sp = STACKTOP; //@line 21797
      return;
     }
     HEAP8[___async_retval >> 0] = $603; //@line 21801
     ___async_unwind = 0; //@line 21802
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 21803
     $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 21804
     HEAP32[$604 >> 2] = $2; //@line 21805
     $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 21806
     HEAP32[$605 >> 2] = $4; //@line 21807
     $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 21808
     HEAP32[$606 >> 2] = $6; //@line 21809
     $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 21810
     HEAP32[$607 >> 2] = $8; //@line 21811
     $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 21812
     HEAP32[$608 >> 2] = $10; //@line 21813
     $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 21814
     HEAP32[$609 >> 2] = $12; //@line 21815
     $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 21816
     HEAP32[$610 >> 2] = $14; //@line 21817
     $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 21818
     HEAP32[$611 >> 2] = $16; //@line 21819
     $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 21820
     HEAP32[$612 >> 2] = $18; //@line 21821
     $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 21822
     HEAP32[$613 >> 2] = $20; //@line 21823
     $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 21824
     HEAP32[$614 >> 2] = $22; //@line 21825
     $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 21826
     HEAP32[$615 >> 2] = $24; //@line 21827
     $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 21828
     HEAP32[$616 >> 2] = $26; //@line 21829
     $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 21830
     HEAP32[$617 >> 2] = $28; //@line 21831
     $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 21832
     HEAP32[$618 >> 2] = $30; //@line 21833
     $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 21834
     HEAP32[$619 >> 2] = $32; //@line 21835
     $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 21836
     HEAP32[$620 >> 2] = $34; //@line 21837
     $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 21838
     HEAP32[$621 >> 2] = $36; //@line 21839
     $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 21840
     HEAP32[$622 >> 2] = $38; //@line 21841
     $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 21842
     HEAP32[$623 >> 2] = $40; //@line 21843
     $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 21844
     HEAP32[$624 >> 2] = $42; //@line 21845
     $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 21846
     HEAP32[$625 >> 2] = $44; //@line 21847
     $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 21848
     HEAP32[$626 >> 2] = $46; //@line 21849
     $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 21850
     HEAP32[$627 >> 2] = $48; //@line 21851
     $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 21852
     HEAP32[$628 >> 2] = $50; //@line 21853
     $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 21854
     HEAP32[$629 >> 2] = $52; //@line 21855
     $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 21856
     HEAP32[$630 >> 2] = $54; //@line 21857
     $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 21858
     HEAP32[$631 >> 2] = $56; //@line 21859
     $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 21860
     HEAP32[$632 >> 2] = $58; //@line 21861
     $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 21862
     HEAP32[$633 >> 2] = $60; //@line 21863
     $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 21864
     HEAP32[$634 >> 2] = $62; //@line 21865
     $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 21866
     HEAP32[$635 >> 2] = $64; //@line 21867
     $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 21868
     HEAP32[$636 >> 2] = $66; //@line 21869
     $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 21870
     HEAP32[$637 >> 2] = $68; //@line 21871
     $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 21872
     HEAP32[$638 >> 2] = $70; //@line 21873
     $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 21874
     HEAP32[$639 >> 2] = $72; //@line 21875
     $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 21876
     HEAP32[$640 >> 2] = $74; //@line 21877
     $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 21878
     HEAP32[$641 >> 2] = $76; //@line 21879
     $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 21880
     HEAP32[$642 >> 2] = $78; //@line 21881
     $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 21882
     HEAP32[$643 >> 2] = $80; //@line 21883
     $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 21884
     HEAP32[$644 >> 2] = $82; //@line 21885
     $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 21886
     HEAP32[$645 >> 2] = $84; //@line 21887
     $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 21888
     HEAP32[$646 >> 2] = $86; //@line 21889
     $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 21890
     HEAP32[$647 >> 2] = $88; //@line 21891
     $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 21892
     HEAP32[$648 >> 2] = $90; //@line 21893
     $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 21894
     HEAP32[$649 >> 2] = $92; //@line 21895
     $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 21896
     HEAP32[$650 >> 2] = $94; //@line 21897
     $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 21898
     HEAP32[$651 >> 2] = $96; //@line 21899
     $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 21900
     HEAP32[$652 >> 2] = $98; //@line 21901
     $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 21902
     HEAP32[$653 >> 2] = $100; //@line 21903
     $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 21904
     HEAP32[$654 >> 2] = $102; //@line 21905
     $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 21906
     HEAP32[$655 >> 2] = $104; //@line 21907
     $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 21908
     HEAP32[$656 >> 2] = $106; //@line 21909
     $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 21910
     HEAP32[$657 >> 2] = $108; //@line 21911
     $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 21912
     HEAP32[$658 >> 2] = $110; //@line 21913
     $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 21914
     HEAP32[$659 >> 2] = $112; //@line 21915
     $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 21916
     HEAP32[$660 >> 2] = $114; //@line 21917
     $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 21918
     HEAP32[$661 >> 2] = $116; //@line 21919
     $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 21920
     HEAP32[$662 >> 2] = $118; //@line 21921
     $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 21922
     HEAP32[$663 >> 2] = $120; //@line 21923
     $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 21924
     HEAP32[$664 >> 2] = $157; //@line 21925
     $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 21926
     HEAP32[$665 >> 2] = $124; //@line 21927
     $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 21928
     HEAP32[$666 >> 2] = $126; //@line 21929
     $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 21930
     HEAP32[$667 >> 2] = $128; //@line 21931
     $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 21932
     HEAP32[$668 >> 2] = $130; //@line 21933
     $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 21934
     HEAP32[$669 >> 2] = $132; //@line 21935
     sp = STACKTOP; //@line 21936
     return;
    }
   case 62:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 21941
     $672 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $54, $80, 11, $$1202$i) | 0; //@line 21942
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 21945
      $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 21946
      HEAP32[$673 >> 2] = $2; //@line 21947
      $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 21948
      HEAP32[$674 >> 2] = $4; //@line 21949
      $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 21950
      HEAP32[$675 >> 2] = $6; //@line 21951
      $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 21952
      HEAP32[$676 >> 2] = $8; //@line 21953
      $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 21954
      HEAP32[$677 >> 2] = $10; //@line 21955
      $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 21956
      HEAP32[$678 >> 2] = $12; //@line 21957
      $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 21958
      HEAP32[$679 >> 2] = $14; //@line 21959
      $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 21960
      HEAP32[$680 >> 2] = $16; //@line 21961
      $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 21962
      HEAP32[$681 >> 2] = $18; //@line 21963
      $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 21964
      HEAP32[$682 >> 2] = $20; //@line 21965
      $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 21966
      HEAP32[$683 >> 2] = $22; //@line 21967
      $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 21968
      HEAP32[$684 >> 2] = $24; //@line 21969
      $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 21970
      HEAP32[$685 >> 2] = $26; //@line 21971
      $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 21972
      HEAP32[$686 >> 2] = $28; //@line 21973
      $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 21974
      HEAP32[$687 >> 2] = $30; //@line 21975
      $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 21976
      HEAP32[$688 >> 2] = $32; //@line 21977
      $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 21978
      HEAP32[$689 >> 2] = $34; //@line 21979
      $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 21980
      HEAP32[$690 >> 2] = $36; //@line 21981
      $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 21982
      HEAP32[$691 >> 2] = $38; //@line 21983
      $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 21984
      HEAP32[$692 >> 2] = $40; //@line 21985
      $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 21986
      HEAP32[$693 >> 2] = $42; //@line 21987
      $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 21988
      HEAP32[$694 >> 2] = $44; //@line 21989
      $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 21990
      HEAP32[$695 >> 2] = $46; //@line 21991
      $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 21992
      HEAP32[$696 >> 2] = $48; //@line 21993
      $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 21994
      HEAP32[$697 >> 2] = $50; //@line 21995
      $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 21996
      HEAP32[$698 >> 2] = $52; //@line 21997
      $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 21998
      HEAP32[$699 >> 2] = $54; //@line 21999
      $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 22000
      HEAP32[$700 >> 2] = $56; //@line 22001
      $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 22002
      HEAP32[$701 >> 2] = $58; //@line 22003
      $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 22004
      HEAP32[$702 >> 2] = $60; //@line 22005
      $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 22006
      HEAP32[$703 >> 2] = $62; //@line 22007
      $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 22008
      HEAP32[$704 >> 2] = $64; //@line 22009
      $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 22010
      HEAP32[$705 >> 2] = $66; //@line 22011
      $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 22012
      HEAP32[$706 >> 2] = $68; //@line 22013
      $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 22014
      HEAP32[$707 >> 2] = $70; //@line 22015
      $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 22016
      HEAP32[$708 >> 2] = $72; //@line 22017
      $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 22018
      HEAP32[$709 >> 2] = $74; //@line 22019
      $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 22020
      HEAP32[$710 >> 2] = $76; //@line 22021
      $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 22022
      HEAP32[$711 >> 2] = $78; //@line 22023
      $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 22024
      HEAP32[$712 >> 2] = $80; //@line 22025
      $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 22026
      HEAP32[$713 >> 2] = $82; //@line 22027
      $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 22028
      HEAP32[$714 >> 2] = $84; //@line 22029
      $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 22030
      HEAP32[$715 >> 2] = $86; //@line 22031
      $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 22032
      HEAP32[$716 >> 2] = $88; //@line 22033
      $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 22034
      HEAP32[$717 >> 2] = $90; //@line 22035
      $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 22036
      HEAP32[$718 >> 2] = $92; //@line 22037
      $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 22038
      HEAP32[$719 >> 2] = $94; //@line 22039
      $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 22040
      HEAP32[$720 >> 2] = $96; //@line 22041
      $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 22042
      HEAP32[$721 >> 2] = $98; //@line 22043
      $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 22044
      HEAP32[$722 >> 2] = $100; //@line 22045
      $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 22046
      HEAP32[$723 >> 2] = $102; //@line 22047
      $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 22048
      HEAP32[$724 >> 2] = $104; //@line 22049
      $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 22050
      HEAP32[$725 >> 2] = $106; //@line 22051
      $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 22052
      HEAP32[$726 >> 2] = $108; //@line 22053
      $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 22054
      HEAP32[$727 >> 2] = $110; //@line 22055
      $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 22056
      HEAP32[$728 >> 2] = $112; //@line 22057
      $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 22058
      HEAP32[$729 >> 2] = $114; //@line 22059
      $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 22060
      HEAP32[$730 >> 2] = $116; //@line 22061
      $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 22062
      HEAP32[$731 >> 2] = $118; //@line 22063
      $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 22064
      HEAP32[$732 >> 2] = $120; //@line 22065
      $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 22066
      HEAP32[$733 >> 2] = $157; //@line 22067
      $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 22068
      HEAP32[$734 >> 2] = $124; //@line 22069
      $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 22070
      HEAP32[$735 >> 2] = $126; //@line 22071
      $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 22072
      HEAP32[$736 >> 2] = $128; //@line 22073
      $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 22074
      HEAP32[$737 >> 2] = $130; //@line 22075
      $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 22076
      HEAP32[$738 >> 2] = $132; //@line 22077
      sp = STACKTOP; //@line 22078
      return;
     }
     HEAP8[___async_retval >> 0] = $672; //@line 22082
     ___async_unwind = 0; //@line 22083
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 22084
     $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 22085
     HEAP32[$673 >> 2] = $2; //@line 22086
     $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 22087
     HEAP32[$674 >> 2] = $4; //@line 22088
     $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 22089
     HEAP32[$675 >> 2] = $6; //@line 22090
     $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 22091
     HEAP32[$676 >> 2] = $8; //@line 22092
     $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 22093
     HEAP32[$677 >> 2] = $10; //@line 22094
     $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 22095
     HEAP32[$678 >> 2] = $12; //@line 22096
     $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 22097
     HEAP32[$679 >> 2] = $14; //@line 22098
     $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 22099
     HEAP32[$680 >> 2] = $16; //@line 22100
     $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 22101
     HEAP32[$681 >> 2] = $18; //@line 22102
     $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 22103
     HEAP32[$682 >> 2] = $20; //@line 22104
     $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 22105
     HEAP32[$683 >> 2] = $22; //@line 22106
     $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 22107
     HEAP32[$684 >> 2] = $24; //@line 22108
     $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 22109
     HEAP32[$685 >> 2] = $26; //@line 22110
     $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 22111
     HEAP32[$686 >> 2] = $28; //@line 22112
     $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 22113
     HEAP32[$687 >> 2] = $30; //@line 22114
     $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 22115
     HEAP32[$688 >> 2] = $32; //@line 22116
     $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 22117
     HEAP32[$689 >> 2] = $34; //@line 22118
     $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 22119
     HEAP32[$690 >> 2] = $36; //@line 22120
     $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 22121
     HEAP32[$691 >> 2] = $38; //@line 22122
     $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 22123
     HEAP32[$692 >> 2] = $40; //@line 22124
     $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 22125
     HEAP32[$693 >> 2] = $42; //@line 22126
     $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 22127
     HEAP32[$694 >> 2] = $44; //@line 22128
     $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 22129
     HEAP32[$695 >> 2] = $46; //@line 22130
     $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 22131
     HEAP32[$696 >> 2] = $48; //@line 22132
     $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 22133
     HEAP32[$697 >> 2] = $50; //@line 22134
     $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 22135
     HEAP32[$698 >> 2] = $52; //@line 22136
     $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 22137
     HEAP32[$699 >> 2] = $54; //@line 22138
     $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 22139
     HEAP32[$700 >> 2] = $56; //@line 22140
     $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 22141
     HEAP32[$701 >> 2] = $58; //@line 22142
     $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 22143
     HEAP32[$702 >> 2] = $60; //@line 22144
     $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 22145
     HEAP32[$703 >> 2] = $62; //@line 22146
     $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 22147
     HEAP32[$704 >> 2] = $64; //@line 22148
     $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 22149
     HEAP32[$705 >> 2] = $66; //@line 22150
     $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 22151
     HEAP32[$706 >> 2] = $68; //@line 22152
     $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 22153
     HEAP32[$707 >> 2] = $70; //@line 22154
     $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 22155
     HEAP32[$708 >> 2] = $72; //@line 22156
     $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 22157
     HEAP32[$709 >> 2] = $74; //@line 22158
     $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 22159
     HEAP32[$710 >> 2] = $76; //@line 22160
     $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 22161
     HEAP32[$711 >> 2] = $78; //@line 22162
     $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 22163
     HEAP32[$712 >> 2] = $80; //@line 22164
     $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 22165
     HEAP32[$713 >> 2] = $82; //@line 22166
     $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 22167
     HEAP32[$714 >> 2] = $84; //@line 22168
     $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 22169
     HEAP32[$715 >> 2] = $86; //@line 22170
     $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 22171
     HEAP32[$716 >> 2] = $88; //@line 22172
     $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 22173
     HEAP32[$717 >> 2] = $90; //@line 22174
     $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 22175
     HEAP32[$718 >> 2] = $92; //@line 22176
     $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 22177
     HEAP32[$719 >> 2] = $94; //@line 22178
     $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 22179
     HEAP32[$720 >> 2] = $96; //@line 22180
     $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 22181
     HEAP32[$721 >> 2] = $98; //@line 22182
     $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 22183
     HEAP32[$722 >> 2] = $100; //@line 22184
     $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 22185
     HEAP32[$723 >> 2] = $102; //@line 22186
     $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 22187
     HEAP32[$724 >> 2] = $104; //@line 22188
     $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 22189
     HEAP32[$725 >> 2] = $106; //@line 22190
     $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 22191
     HEAP32[$726 >> 2] = $108; //@line 22192
     $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 22193
     HEAP32[$727 >> 2] = $110; //@line 22194
     $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 22195
     HEAP32[$728 >> 2] = $112; //@line 22196
     $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 22197
     HEAP32[$729 >> 2] = $114; //@line 22198
     $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 22199
     HEAP32[$730 >> 2] = $116; //@line 22200
     $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 22201
     HEAP32[$731 >> 2] = $118; //@line 22202
     $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 22203
     HEAP32[$732 >> 2] = $120; //@line 22204
     $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 22205
     HEAP32[$733 >> 2] = $157; //@line 22206
     $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 22207
     HEAP32[$734 >> 2] = $124; //@line 22208
     $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 22209
     HEAP32[$735 >> 2] = $126; //@line 22210
     $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 22211
     HEAP32[$736 >> 2] = $128; //@line 22212
     $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 22213
     HEAP32[$737 >> 2] = $130; //@line 22214
     $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 22215
     HEAP32[$738 >> 2] = $132; //@line 22216
     sp = STACKTOP; //@line 22217
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3844, 5067, $68); //@line 22222
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$38 >> 2] | 0; //@line 22227
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 22230
     $759 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 22231
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 22234
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 22235
      HEAP32[$760 >> 2] = $2; //@line 22236
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 22237
      HEAP32[$761 >> 2] = $4; //@line 22238
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 22239
      HEAP32[$762 >> 2] = $6; //@line 22240
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 22241
      HEAP32[$763 >> 2] = $8; //@line 22242
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 22243
      HEAP32[$764 >> 2] = $10; //@line 22244
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 22245
      HEAP32[$765 >> 2] = $12; //@line 22246
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 22247
      HEAP32[$766 >> 2] = $14; //@line 22248
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 22249
      HEAP32[$767 >> 2] = $16; //@line 22250
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 22251
      HEAP32[$768 >> 2] = $18; //@line 22252
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 22253
      HEAP32[$769 >> 2] = $20; //@line 22254
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 22255
      HEAP32[$770 >> 2] = $22; //@line 22256
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 22257
      HEAP32[$771 >> 2] = $24; //@line 22258
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 22259
      HEAP32[$772 >> 2] = $26; //@line 22260
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 22261
      HEAP32[$773 >> 2] = $28; //@line 22262
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 22263
      HEAP32[$774 >> 2] = $30; //@line 22264
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 22265
      HEAP32[$775 >> 2] = $32; //@line 22266
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 22267
      HEAP32[$776 >> 2] = $34; //@line 22268
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 22269
      HEAP32[$777 >> 2] = $36; //@line 22270
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 22271
      HEAP32[$778 >> 2] = $38; //@line 22272
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 22273
      HEAP32[$779 >> 2] = $40; //@line 22274
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 22275
      HEAP32[$780 >> 2] = $42; //@line 22276
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 22277
      HEAP32[$781 >> 2] = $44; //@line 22278
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 22279
      HEAP32[$782 >> 2] = $46; //@line 22280
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 22281
      HEAP32[$783 >> 2] = $48; //@line 22282
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 22283
      HEAP32[$784 >> 2] = $50; //@line 22284
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 22285
      HEAP32[$785 >> 2] = $52; //@line 22286
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 22287
      HEAP32[$786 >> 2] = $54; //@line 22288
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 22289
      HEAP32[$787 >> 2] = $56; //@line 22290
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 22291
      HEAP32[$788 >> 2] = $58; //@line 22292
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 22293
      HEAP32[$789 >> 2] = $60; //@line 22294
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 22295
      HEAP32[$790 >> 2] = $62; //@line 22296
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 22297
      HEAP32[$791 >> 2] = $64; //@line 22298
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 22299
      HEAP32[$792 >> 2] = $66; //@line 22300
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 22301
      HEAP32[$793 >> 2] = $68; //@line 22302
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 22303
      HEAP32[$794 >> 2] = $70; //@line 22304
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 22305
      HEAP32[$795 >> 2] = $72; //@line 22306
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 22307
      HEAP32[$796 >> 2] = $74; //@line 22308
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 22309
      HEAP32[$797 >> 2] = $76; //@line 22310
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 22311
      HEAP32[$798 >> 2] = $78; //@line 22312
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 22313
      HEAP32[$799 >> 2] = $80; //@line 22314
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 22315
      HEAP32[$800 >> 2] = $82; //@line 22316
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 22317
      HEAP32[$801 >> 2] = $84; //@line 22318
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 22319
      HEAP32[$802 >> 2] = $86; //@line 22320
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 22321
      HEAP32[$803 >> 2] = $88; //@line 22322
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 22323
      HEAP32[$804 >> 2] = $90; //@line 22324
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 22325
      HEAP32[$805 >> 2] = $92; //@line 22326
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 22327
      HEAP32[$806 >> 2] = $94; //@line 22328
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 22329
      HEAP32[$807 >> 2] = $96; //@line 22330
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 22331
      HEAP32[$808 >> 2] = $98; //@line 22332
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 22333
      HEAP32[$809 >> 2] = $100; //@line 22334
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 22335
      HEAP32[$810 >> 2] = $102; //@line 22336
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 22337
      HEAP32[$811 >> 2] = $104; //@line 22338
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 22339
      HEAP32[$812 >> 2] = $106; //@line 22340
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 22341
      HEAP32[$813 >> 2] = $108; //@line 22342
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 22343
      HEAP32[$814 >> 2] = $110; //@line 22344
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 22345
      HEAP32[$815 >> 2] = $112; //@line 22346
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 22347
      HEAP32[$816 >> 2] = $114; //@line 22348
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 22349
      HEAP32[$817 >> 2] = $116; //@line 22350
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 22351
      HEAP32[$818 >> 2] = $118; //@line 22352
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 22353
      HEAP32[$819 >> 2] = $120; //@line 22354
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 22355
      HEAP32[$820 >> 2] = $157; //@line 22356
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 22357
      HEAP32[$821 >> 2] = $124; //@line 22358
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 22359
      HEAP32[$822 >> 2] = $126; //@line 22360
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 22361
      HEAP32[$823 >> 2] = $128; //@line 22362
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 22363
      HEAP32[$824 >> 2] = $130; //@line 22364
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 22365
      HEAP32[$825 >> 2] = $132; //@line 22366
      sp = STACKTOP; //@line 22367
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 22371
     ___async_unwind = 0; //@line 22372
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 22373
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 22374
     HEAP32[$760 >> 2] = $2; //@line 22375
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 22376
     HEAP32[$761 >> 2] = $4; //@line 22377
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 22378
     HEAP32[$762 >> 2] = $6; //@line 22379
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 22380
     HEAP32[$763 >> 2] = $8; //@line 22381
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 22382
     HEAP32[$764 >> 2] = $10; //@line 22383
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 22384
     HEAP32[$765 >> 2] = $12; //@line 22385
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 22386
     HEAP32[$766 >> 2] = $14; //@line 22387
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 22388
     HEAP32[$767 >> 2] = $16; //@line 22389
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 22390
     HEAP32[$768 >> 2] = $18; //@line 22391
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 22392
     HEAP32[$769 >> 2] = $20; //@line 22393
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 22394
     HEAP32[$770 >> 2] = $22; //@line 22395
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 22396
     HEAP32[$771 >> 2] = $24; //@line 22397
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 22398
     HEAP32[$772 >> 2] = $26; //@line 22399
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 22400
     HEAP32[$773 >> 2] = $28; //@line 22401
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 22402
     HEAP32[$774 >> 2] = $30; //@line 22403
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 22404
     HEAP32[$775 >> 2] = $32; //@line 22405
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 22406
     HEAP32[$776 >> 2] = $34; //@line 22407
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 22408
     HEAP32[$777 >> 2] = $36; //@line 22409
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 22410
     HEAP32[$778 >> 2] = $38; //@line 22411
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 22412
     HEAP32[$779 >> 2] = $40; //@line 22413
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 22414
     HEAP32[$780 >> 2] = $42; //@line 22415
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 22416
     HEAP32[$781 >> 2] = $44; //@line 22417
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 22418
     HEAP32[$782 >> 2] = $46; //@line 22419
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 22420
     HEAP32[$783 >> 2] = $48; //@line 22421
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 22422
     HEAP32[$784 >> 2] = $50; //@line 22423
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 22424
     HEAP32[$785 >> 2] = $52; //@line 22425
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 22426
     HEAP32[$786 >> 2] = $54; //@line 22427
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 22428
     HEAP32[$787 >> 2] = $56; //@line 22429
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 22430
     HEAP32[$788 >> 2] = $58; //@line 22431
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 22432
     HEAP32[$789 >> 2] = $60; //@line 22433
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 22434
     HEAP32[$790 >> 2] = $62; //@line 22435
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 22436
     HEAP32[$791 >> 2] = $64; //@line 22437
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 22438
     HEAP32[$792 >> 2] = $66; //@line 22439
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 22440
     HEAP32[$793 >> 2] = $68; //@line 22441
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 22442
     HEAP32[$794 >> 2] = $70; //@line 22443
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 22444
     HEAP32[$795 >> 2] = $72; //@line 22445
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 22446
     HEAP32[$796 >> 2] = $74; //@line 22447
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 22448
     HEAP32[$797 >> 2] = $76; //@line 22449
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 22450
     HEAP32[$798 >> 2] = $78; //@line 22451
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 22452
     HEAP32[$799 >> 2] = $80; //@line 22453
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 22454
     HEAP32[$800 >> 2] = $82; //@line 22455
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 22456
     HEAP32[$801 >> 2] = $84; //@line 22457
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 22458
     HEAP32[$802 >> 2] = $86; //@line 22459
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 22460
     HEAP32[$803 >> 2] = $88; //@line 22461
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 22462
     HEAP32[$804 >> 2] = $90; //@line 22463
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 22464
     HEAP32[$805 >> 2] = $92; //@line 22465
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 22466
     HEAP32[$806 >> 2] = $94; //@line 22467
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 22468
     HEAP32[$807 >> 2] = $96; //@line 22469
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 22470
     HEAP32[$808 >> 2] = $98; //@line 22471
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 22472
     HEAP32[$809 >> 2] = $100; //@line 22473
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 22474
     HEAP32[$810 >> 2] = $102; //@line 22475
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 22476
     HEAP32[$811 >> 2] = $104; //@line 22477
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 22478
     HEAP32[$812 >> 2] = $106; //@line 22479
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 22480
     HEAP32[$813 >> 2] = $108; //@line 22481
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 22482
     HEAP32[$814 >> 2] = $110; //@line 22483
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 22484
     HEAP32[$815 >> 2] = $112; //@line 22485
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 22486
     HEAP32[$816 >> 2] = $114; //@line 22487
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 22488
     HEAP32[$817 >> 2] = $116; //@line 22489
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 22490
     HEAP32[$818 >> 2] = $118; //@line 22491
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 22492
     HEAP32[$819 >> 2] = $120; //@line 22493
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 22494
     HEAP32[$820 >> 2] = $157; //@line 22495
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 22496
     HEAP32[$821 >> 2] = $124; //@line 22497
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 22498
     HEAP32[$822 >> 2] = $126; //@line 22499
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 22500
     HEAP32[$823 >> 2] = $128; //@line 22501
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 22502
     HEAP32[$824 >> 2] = $130; //@line 22503
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 22504
     HEAP32[$825 >> 2] = $132; //@line 22505
     sp = STACKTOP; //@line 22506
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3844, 5193, $132); //@line 22511
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3844, 5254, $102); //@line 22516
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3844, 5315, $48); //@line 22521
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3844, 5376, $20); //@line 22526
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3844, 5436, $12); //@line 22531
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3844, 5496, $84); //@line 22536
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $6 | 0) >= ($16 | 0)) {
      $936 = ___async_retval; //@line 22545
      HEAP32[$936 >> 2] = $22; //@line 22546
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 22552
      HEAP32[$88 >> 2] = $926; //@line 22553
      $927 = $926; //@line 22554
      $929 = $6 - $927 + $16 | 0; //@line 22556
      HEAP16[$72 + 24 >> 1] = $929; //@line 22559
      if ($929 & 65535 | 0) {
       HEAP32[$72 + 36 >> 2] = $927; //@line 22564
       $936 = ___async_retval; //@line 22565
       HEAP32[$936 >> 2] = $22; //@line 22566
       return;
      }
     } else {
      _mbed_tracef(2, 3844, 5543, $26); //@line 22570
     }
     HEAP32[$72 + 4 >> 2] = 1; //@line 22573
     $936 = ___async_retval; //@line 22574
     HEAP32[$936 >> 2] = $22; //@line 22575
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3844, 4935, $66); //@line 22581
  }
 } while (0);
 HEAP32[$72 + 4 >> 2] = 1; //@line 22585
 $936 = ___async_retval; //@line 22586
 HEAP32[$936 >> 2] = $22; //@line 22587
 return;
}
function _sn_coap_parser__async_cb_165($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $586 = 0, $589 = 0, $590 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $74 = 0, $741 = 0, $744 = 0, $745 = 0, $750 = 0, $753 = 0, $755 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $595$looptemp = 0, $750$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 12988
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12990
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12992
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12994
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12996
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12998
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13000
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13002
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13004
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13006
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13008
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13010
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13012
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13014
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13016
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13018
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13020
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13022
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13024
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 13026
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 13028
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 13030
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 13032
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 13034
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 13036
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 13038
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 13040
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 13042
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 13044
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 13046
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 13048
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 13050
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 13052
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 13054
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 13056
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 13058
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 13060
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 13062
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 13064
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 13066
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 13068
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 13070
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 13072
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 13074
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 13076
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 13078
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 13080
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 13082
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 13084
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 13086
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 13088
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 13090
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 13092
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 13094
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 13096
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 13098
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 13100
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 13102
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 13104
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 13106
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 13108
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 13112
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 13114
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 13116
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 13118
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 13120
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 244 >> 2] | 0; //@line 13126
   L3 : while (1) {
    $917 = HEAP32[$114 >> 2] | 0; //@line 13128
    $918 = $917 - $6 | 0; //@line 13129
    $137 = $917; //@line 13132
    if (($918 | 0) > ($16 | 0)) {
     break L2;
    }
    if (!(($16 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 13139
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 13142
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 13145
     break;
    }
    $140 = $trunc277$i & 15; //@line 13149
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 13150
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 13155
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 13163
      $$sink214$i = 13; //@line 13163
      $$sink3$i = 1; //@line 13163
      label = 8; //@line 13164
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 13176
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 13176
      $$sink3$i = 2; //@line 13176
      label = 8; //@line 13177
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 13181
      $159 = $137; //@line 13181
      $937 = $917; //@line 13181
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 13185
     $154 = $137 + $$sink3$i | 0; //@line 13187
     HEAP32[$88 >> 2] = $154; //@line 13188
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 13190
     $159 = $154; //@line 13190
     $937 = $154; //@line 13190
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 13193
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 13197
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 13205
      $$sink216$i = 13; //@line 13205
      $$sink8$i = 1; //@line 13205
      label = 13; //@line 13206
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 13218
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 13218
      $$sink8$i = 2; //@line 13218
      label = 13; //@line 13219
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 13223
      $174 = $937; //@line 13223
      $241 = $159; //@line 13223
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 13227
     $171 = $159 + $$sink8$i | 0; //@line 13229
     HEAP32[$88 >> 2] = $171; //@line 13230
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 13232
     $174 = $171; //@line 13232
     $241 = $171; //@line 13232
    }
    $$1202$i = $$1202$in$i & 65535; //@line 13234
    $175 = $28 - $174 & 65535; //@line 13236
    $trunc$i = $157 & 65535; //@line 13237
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 60; //@line 13241
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$38 >> 2] | 0)) {
        label = 16; //@line 13249
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 13254
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 13259
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 13264
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 13269
         break L3;
         break;
        }
       case 20:
        {
         label = 57; //@line 13274
         break L3;
         break;
        }
       case 11:
        {
         label = 60; //@line 13279
         break L3;
         break;
        }
       case 15:
        {
         label = 69; //@line 13284
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 13295
          break L3;
         }
         $268 = $241 + 1 | 0; //@line 13298
         HEAP32[$88 >> 2] = $268; //@line 13299
         $269 = $$1202$in$i & 255; //@line 13300
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 13303
         } else {
          $$045$i221$i = $269; //@line 13305
          $$06$i220$i = 0; //@line 13305
          $274 = $268; //@line 13305
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 13307
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 13309
           HEAP32[$88 >> 2] = $274; //@line 13310
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 13313
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 13316
            break;
           } else {
            $$06$i220$i = $277; //@line 13319
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 13325
         $$reg2mem$0 = $157; //@line 13326
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 53; //@line 13333
          break L3;
         }
         $586 = (HEAP32[$38 >> 2] | 0) + 28 | 0; //@line 13337
         if ((HEAP32[$586 >> 2] | 0) != -1) {
          label = 53; //@line 13341
          break L3;
         }
         $589 = $241 + 1 | 0; //@line 13344
         HEAP32[$88 >> 2] = $589; //@line 13345
         $590 = $$1202$in$i & 255; //@line 13346
         if (!($590 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 13349
         } else {
          $$045$i263$i = $590; //@line 13351
          $$06$i262$i = 0; //@line 13351
          $595 = $589; //@line 13351
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 13353
           $595$looptemp = $595;
           $595 = $595 + 1 | 0; //@line 13355
           HEAP32[$88 >> 2] = $595; //@line 13356
           $598 = $$06$i262$i << 8 | HEAPU8[$595$looptemp >> 0]; //@line 13359
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $598; //@line 13362
            break;
           } else {
            $$06$i262$i = $598; //@line 13365
           }
          }
         }
         HEAP32[$586 >> 2] = $$0$lcssa$i265$i; //@line 13369
         $$reg2mem$0 = $157; //@line 13370
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 65; //@line 13377
          break L3;
         }
         $741 = (HEAP32[$38 >> 2] | 0) + 32 | 0; //@line 13381
         if ((HEAP32[$741 >> 2] | 0) != -1) {
          label = 65; //@line 13385
          break L3;
         }
         $744 = $241 + 1 | 0; //@line 13388
         HEAP32[$88 >> 2] = $744; //@line 13389
         $745 = $$1202$in$i & 255; //@line 13390
         if (!($745 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 13393
         } else {
          $$045$i270$i = $745; //@line 13395
          $$06$i269$i = 0; //@line 13395
          $750 = $744; //@line 13395
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 13397
           $750$looptemp = $750;
           $750 = $750 + 1 | 0; //@line 13399
           HEAP32[$88 >> 2] = $750; //@line 13400
           $753 = $$06$i269$i << 8 | HEAPU8[$750$looptemp >> 0]; //@line 13403
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $753; //@line 13406
            break;
           } else {
            $$06$i269$i = $753; //@line 13409
           }
          }
         }
         HEAP32[$741 >> 2] = $$0$lcssa$i272$i; //@line 13413
         $$reg2mem$0 = $157; //@line 13414
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 13421
          break L3;
         }
         $829 = (HEAP32[$38 >> 2] | 0) + 40 | 0; //@line 13425
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 13429
          break L3;
         }
         $832 = $241 + 1 | 0; //@line 13432
         HEAP32[$88 >> 2] = $832; //@line 13433
         $833 = $$1202$in$i & 255; //@line 13434
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 13437
         } else {
          $$045$i256$i = $833; //@line 13439
          $$06$i255$i = 0; //@line 13439
          $838 = $832; //@line 13439
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 13441
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 13443
           HEAP32[$88 >> 2] = $838; //@line 13444
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 13447
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 13450
            break;
           } else {
            $$06$i255$i = $841; //@line 13453
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 13457
         $$reg2mem$0 = $157; //@line 13458
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 13465
          break L3;
         }
         $845 = (HEAP32[$38 >> 2] | 0) + 36 | 0; //@line 13469
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 13473
          break L3;
         }
         $848 = $241 + 1 | 0; //@line 13476
         HEAP32[$88 >> 2] = $848; //@line 13477
         $849 = $$1202$in$i & 255; //@line 13478
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 13481
         } else {
          $$045$i249$i = $849; //@line 13483
          $$06$i248$i = 0; //@line 13483
          $854 = $848; //@line 13483
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 13485
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 13487
           HEAP32[$88 >> 2] = $854; //@line 13488
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 13491
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 13494
            break;
           } else {
            $$06$i248$i = $857; //@line 13497
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 13501
         $$reg2mem$0 = $157; //@line 13502
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 13509
          break L3;
         }
         $861 = (HEAP32[$38 >> 2] | 0) + 12 | 0; //@line 13513
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 13517
          break L3;
         }
         $864 = $241 + 1 | 0; //@line 13520
         HEAP32[$88 >> 2] = $864; //@line 13521
         $865 = $$1202$in$i & 255; //@line 13522
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 13525
         } else {
          $$045$i242$i = $865; //@line 13527
          $$06$i241$i = 0; //@line 13527
          $870 = $864; //@line 13527
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 13529
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 13531
           HEAP32[$88 >> 2] = $870; //@line 13532
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 13535
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 13538
            break;
           } else {
            $$06$i241$i = $873; //@line 13541
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 13545
         $$reg2mem$0 = $157; //@line 13546
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 13553
          break L3;
         }
         $877 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 13557
         $878 = HEAP8[$877 >> 0] | 0; //@line 13558
         if ($878 & 1) {
          label = 94; //@line 13562
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 13566
         $883 = (HEAP32[$88 >> 2] | 0) + 1 | 0; //@line 13568
         HEAP32[$88 >> 2] = $883; //@line 13569
         $884 = $$1202$in$i & 255; //@line 13570
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 13573
         } else {
          $$045$i235$i = $884; //@line 13575
          $$06$i234$i = 0; //@line 13575
          $889 = $883; //@line 13575
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 13577
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 13579
           HEAP32[$88 >> 2] = $889; //@line 13580
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 13583
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 13586
            break;
           } else {
            $$06$i234$i = $892; //@line 13589
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 13595
         $$reg2mem$0 = $157; //@line 13596
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 13603
          break L3;
         }
         $898 = (HEAP32[$38 >> 2] | 0) + 1 | 0; //@line 13607
         $899 = HEAP8[$898 >> 0] | 0; //@line 13608
         if ($899 & 2) {
          label = 100; //@line 13612
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 13616
         $904 = (HEAP32[$88 >> 2] | 0) + 1 | 0; //@line 13618
         HEAP32[$88 >> 2] = $904; //@line 13619
         $905 = $$1202$in$i & 255; //@line 13620
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 13623
         } else {
          $$045$i228$i = $905; //@line 13625
          $$06$i227$i = 0; //@line 13625
          $910 = $904; //@line 13625
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 13627
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 13629
           HEAP32[$88 >> 2] = $910; //@line 13630
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 13633
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 13636
            break;
           } else {
            $$06$i227$i = $913; //@line 13639
           }
          }
         }
         HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 13645
         $$reg2mem$0 = $157; //@line 13646
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 13651
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 13661
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 13668
     break;
    }
    if ((HEAP32[$120 >> 2] | 0) != -1) {
     label = 22; //@line 13674
     break;
    }
    $256 = $241 + 1 | 0; //@line 13677
    HEAP32[$88 >> 2] = $256; //@line 13678
    $257 = $$1202$in$i & 255; //@line 13679
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 13682
    } else {
     $$045$i$i = $257; //@line 13684
     $$06$i$i = 0; //@line 13684
     $262 = $256; //@line 13684
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 13686
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 13688
      HEAP32[$88 >> 2] = $262; //@line 13689
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 13692
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 13695
       break;
      } else {
       $$06$i$i = $265; //@line 13698
      }
     }
    }
    HEAP32[$120 >> 2] = $$0$lcssa$i$i; //@line 13702
    $$reg2mem$0 = $157; //@line 13703
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3844, 4107, $8); //@line 13707
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3844, 4165, $56); //@line 13712
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$40 >> 2] | 0; //@line 13717
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 13718
     $179 = FUNCTION_TABLE_ii[$178 & 31](68) | 0; //@line 13719
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 13722
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 13723
      HEAP32[$180 >> 2] = $2; //@line 13724
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 13725
      HEAP32[$181 >> 2] = $4; //@line 13726
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 13727
      HEAP32[$182 >> 2] = $6; //@line 13728
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 13729
      HEAP32[$183 >> 2] = $8; //@line 13730
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 13731
      HEAP32[$184 >> 2] = $132; //@line 13732
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 13733
      HEAP32[$185 >> 2] = $12; //@line 13734
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 13735
      HEAP16[$186 >> 1] = $trunc$i; //@line 13736
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 13737
      HEAP32[$187 >> 2] = $10; //@line 13738
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 13739
      HEAP32[$188 >> 2] = $16; //@line 13740
      $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 13741
      HEAP32[$189 >> 2] = $18; //@line 13742
      $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 13743
      HEAP32[$190 >> 2] = $20; //@line 13744
      $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 13745
      HEAP32[$191 >> 2] = $22; //@line 13746
      $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 13747
      HEAP32[$192 >> 2] = $24; //@line 13748
      $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 13749
      HEAP32[$193 >> 2] = $26; //@line 13750
      $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 13751
      HEAP32[$194 >> 2] = $28; //@line 13752
      $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 13753
      HEAP32[$195 >> 2] = $30; //@line 13754
      $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 13755
      HEAP32[$196 >> 2] = $32; //@line 13756
      $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 13757
      HEAP32[$197 >> 2] = $34; //@line 13758
      $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 13759
      HEAP32[$198 >> 2] = $36; //@line 13760
      $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 13761
      HEAP32[$199 >> 2] = $38; //@line 13762
      $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 13763
      HEAP32[$200 >> 2] = $40; //@line 13764
      $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 13765
      HEAP32[$201 >> 2] = $42; //@line 13766
      $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 13767
      HEAP32[$202 >> 2] = $44; //@line 13768
      $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 13769
      HEAP32[$203 >> 2] = $46; //@line 13770
      $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 13771
      HEAP32[$204 >> 2] = $48; //@line 13772
      $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 13773
      HEAP32[$205 >> 2] = $50; //@line 13774
      $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 13775
      HEAP32[$206 >> 2] = $52; //@line 13776
      $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 13777
      HEAP16[$207 >> 1] = $175; //@line 13778
      $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 13779
      HEAP32[$208 >> 2] = $54; //@line 13780
      $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 13781
      HEAP32[$209 >> 2] = $56; //@line 13782
      $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 13783
      HEAP32[$210 >> 2] = $58; //@line 13784
      $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 13785
      HEAP32[$211 >> 2] = $60; //@line 13786
      $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 13787
      HEAP32[$212 >> 2] = $62; //@line 13788
      $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 13789
      HEAP32[$213 >> 2] = $64; //@line 13790
      $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 13791
      HEAP32[$214 >> 2] = $66; //@line 13792
      $215 = $ReallocAsyncCtx3 + 144 | 0; //@line 13793
      HEAP32[$215 >> 2] = $68; //@line 13794
      $216 = $ReallocAsyncCtx3 + 148 | 0; //@line 13795
      HEAP32[$216 >> 2] = $70; //@line 13796
      $217 = $ReallocAsyncCtx3 + 152 | 0; //@line 13797
      HEAP32[$217 >> 2] = $72; //@line 13798
      $218 = $ReallocAsyncCtx3 + 156 | 0; //@line 13799
      HEAP32[$218 >> 2] = $74; //@line 13800
      $219 = $ReallocAsyncCtx3 + 160 | 0; //@line 13801
      HEAP32[$219 >> 2] = $76; //@line 13802
      $220 = $ReallocAsyncCtx3 + 164 | 0; //@line 13803
      HEAP32[$220 >> 2] = $78; //@line 13804
      $221 = $ReallocAsyncCtx3 + 168 | 0; //@line 13805
      HEAP32[$221 >> 2] = $80; //@line 13806
      $222 = $ReallocAsyncCtx3 + 172 | 0; //@line 13807
      HEAP32[$222 >> 2] = $82; //@line 13808
      $223 = $ReallocAsyncCtx3 + 176 | 0; //@line 13809
      HEAP32[$223 >> 2] = $$1202$in$i; //@line 13810
      $224 = $ReallocAsyncCtx3 + 180 | 0; //@line 13811
      HEAP32[$224 >> 2] = $84; //@line 13812
      $225 = $ReallocAsyncCtx3 + 184 | 0; //@line 13813
      HEAP32[$225 >> 2] = $86; //@line 13814
      $226 = $ReallocAsyncCtx3 + 188 | 0; //@line 13815
      HEAP32[$226 >> 2] = $88; //@line 13816
      $227 = $ReallocAsyncCtx3 + 192 | 0; //@line 13817
      HEAP32[$227 >> 2] = $90; //@line 13818
      $228 = $ReallocAsyncCtx3 + 196 | 0; //@line 13819
      HEAP16[$228 >> 1] = $$1202$i; //@line 13820
      $229 = $ReallocAsyncCtx3 + 200 | 0; //@line 13821
      HEAP32[$229 >> 2] = $92; //@line 13822
      $230 = $ReallocAsyncCtx3 + 204 | 0; //@line 13823
      HEAP32[$230 >> 2] = $96; //@line 13824
      $231 = $ReallocAsyncCtx3 + 208 | 0; //@line 13825
      HEAP32[$231 >> 2] = $98; //@line 13826
      $232 = $ReallocAsyncCtx3 + 212 | 0; //@line 13827
      HEAP32[$232 >> 2] = $94; //@line 13828
      $233 = $ReallocAsyncCtx3 + 216 | 0; //@line 13829
      HEAP32[$233 >> 2] = $102; //@line 13830
      $234 = $ReallocAsyncCtx3 + 220 | 0; //@line 13831
      HEAP32[$234 >> 2] = $100; //@line 13832
      $235 = $ReallocAsyncCtx3 + 224 | 0; //@line 13833
      HEAP32[$235 >> 2] = $104; //@line 13834
      $236 = $ReallocAsyncCtx3 + 228 | 0; //@line 13835
      HEAP32[$236 >> 2] = $106; //@line 13836
      $237 = $ReallocAsyncCtx3 + 232 | 0; //@line 13837
      HEAP32[$237 >> 2] = $108; //@line 13838
      $238 = $ReallocAsyncCtx3 + 236 | 0; //@line 13839
      HEAP32[$238 >> 2] = $110; //@line 13840
      $239 = $ReallocAsyncCtx3 + 240 | 0; //@line 13841
      HEAP32[$239 >> 2] = $112; //@line 13842
      $240 = $ReallocAsyncCtx3 + 244 | 0; //@line 13843
      HEAP32[$240 >> 2] = $241; //@line 13844
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 13845
      HEAP32[$242 >> 2] = $114; //@line 13846
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 13847
      HEAP32[$243 >> 2] = $116; //@line 13848
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 13849
      HEAP32[$244 >> 2] = $118; //@line 13850
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 13851
      HEAP32[$245 >> 2] = $120; //@line 13852
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 13853
      HEAP32[$246 >> 2] = $157; //@line 13854
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 13855
      HEAP32[$247 >> 2] = $124; //@line 13856
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 13857
      HEAP32[$248 >> 2] = $126; //@line 13858
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 13859
      HEAP32[$249 >> 2] = $128; //@line 13860
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 13861
      HEAP32[$250 >> 2] = $130; //@line 13862
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 13863
      HEAP32[$251 >> 2] = $14; //@line 13864
      sp = STACKTOP; //@line 13865
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 13869
     ___async_unwind = 0; //@line 13870
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 13871
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 13872
     HEAP32[$180 >> 2] = $2; //@line 13873
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 13874
     HEAP32[$181 >> 2] = $4; //@line 13875
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 13876
     HEAP32[$182 >> 2] = $6; //@line 13877
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 13878
     HEAP32[$183 >> 2] = $8; //@line 13879
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 13880
     HEAP32[$184 >> 2] = $132; //@line 13881
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 13882
     HEAP32[$185 >> 2] = $12; //@line 13883
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 13884
     HEAP16[$186 >> 1] = $trunc$i; //@line 13885
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 13886
     HEAP32[$187 >> 2] = $10; //@line 13887
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 13888
     HEAP32[$188 >> 2] = $16; //@line 13889
     $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 13890
     HEAP32[$189 >> 2] = $18; //@line 13891
     $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 13892
     HEAP32[$190 >> 2] = $20; //@line 13893
     $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 13894
     HEAP32[$191 >> 2] = $22; //@line 13895
     $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 13896
     HEAP32[$192 >> 2] = $24; //@line 13897
     $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 13898
     HEAP32[$193 >> 2] = $26; //@line 13899
     $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 13900
     HEAP32[$194 >> 2] = $28; //@line 13901
     $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 13902
     HEAP32[$195 >> 2] = $30; //@line 13903
     $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 13904
     HEAP32[$196 >> 2] = $32; //@line 13905
     $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 13906
     HEAP32[$197 >> 2] = $34; //@line 13907
     $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 13908
     HEAP32[$198 >> 2] = $36; //@line 13909
     $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 13910
     HEAP32[$199 >> 2] = $38; //@line 13911
     $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 13912
     HEAP32[$200 >> 2] = $40; //@line 13913
     $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 13914
     HEAP32[$201 >> 2] = $42; //@line 13915
     $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 13916
     HEAP32[$202 >> 2] = $44; //@line 13917
     $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 13918
     HEAP32[$203 >> 2] = $46; //@line 13919
     $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 13920
     HEAP32[$204 >> 2] = $48; //@line 13921
     $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 13922
     HEAP32[$205 >> 2] = $50; //@line 13923
     $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 13924
     HEAP32[$206 >> 2] = $52; //@line 13925
     $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 13926
     HEAP16[$207 >> 1] = $175; //@line 13927
     $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 13928
     HEAP32[$208 >> 2] = $54; //@line 13929
     $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 13930
     HEAP32[$209 >> 2] = $56; //@line 13931
     $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 13932
     HEAP32[$210 >> 2] = $58; //@line 13933
     $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 13934
     HEAP32[$211 >> 2] = $60; //@line 13935
     $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 13936
     HEAP32[$212 >> 2] = $62; //@line 13937
     $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 13938
     HEAP32[$213 >> 2] = $64; //@line 13939
     $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 13940
     HEAP32[$214 >> 2] = $66; //@line 13941
     $215 = $ReallocAsyncCtx3 + 144 | 0; //@line 13942
     HEAP32[$215 >> 2] = $68; //@line 13943
     $216 = $ReallocAsyncCtx3 + 148 | 0; //@line 13944
     HEAP32[$216 >> 2] = $70; //@line 13945
     $217 = $ReallocAsyncCtx3 + 152 | 0; //@line 13946
     HEAP32[$217 >> 2] = $72; //@line 13947
     $218 = $ReallocAsyncCtx3 + 156 | 0; //@line 13948
     HEAP32[$218 >> 2] = $74; //@line 13949
     $219 = $ReallocAsyncCtx3 + 160 | 0; //@line 13950
     HEAP32[$219 >> 2] = $76; //@line 13951
     $220 = $ReallocAsyncCtx3 + 164 | 0; //@line 13952
     HEAP32[$220 >> 2] = $78; //@line 13953
     $221 = $ReallocAsyncCtx3 + 168 | 0; //@line 13954
     HEAP32[$221 >> 2] = $80; //@line 13955
     $222 = $ReallocAsyncCtx3 + 172 | 0; //@line 13956
     HEAP32[$222 >> 2] = $82; //@line 13957
     $223 = $ReallocAsyncCtx3 + 176 | 0; //@line 13958
     HEAP32[$223 >> 2] = $$1202$in$i; //@line 13959
     $224 = $ReallocAsyncCtx3 + 180 | 0; //@line 13960
     HEAP32[$224 >> 2] = $84; //@line 13961
     $225 = $ReallocAsyncCtx3 + 184 | 0; //@line 13962
     HEAP32[$225 >> 2] = $86; //@line 13963
     $226 = $ReallocAsyncCtx3 + 188 | 0; //@line 13964
     HEAP32[$226 >> 2] = $88; //@line 13965
     $227 = $ReallocAsyncCtx3 + 192 | 0; //@line 13966
     HEAP32[$227 >> 2] = $90; //@line 13967
     $228 = $ReallocAsyncCtx3 + 196 | 0; //@line 13968
     HEAP16[$228 >> 1] = $$1202$i; //@line 13969
     $229 = $ReallocAsyncCtx3 + 200 | 0; //@line 13970
     HEAP32[$229 >> 2] = $92; //@line 13971
     $230 = $ReallocAsyncCtx3 + 204 | 0; //@line 13972
     HEAP32[$230 >> 2] = $96; //@line 13973
     $231 = $ReallocAsyncCtx3 + 208 | 0; //@line 13974
     HEAP32[$231 >> 2] = $98; //@line 13975
     $232 = $ReallocAsyncCtx3 + 212 | 0; //@line 13976
     HEAP32[$232 >> 2] = $94; //@line 13977
     $233 = $ReallocAsyncCtx3 + 216 | 0; //@line 13978
     HEAP32[$233 >> 2] = $102; //@line 13979
     $234 = $ReallocAsyncCtx3 + 220 | 0; //@line 13980
     HEAP32[$234 >> 2] = $100; //@line 13981
     $235 = $ReallocAsyncCtx3 + 224 | 0; //@line 13982
     HEAP32[$235 >> 2] = $104; //@line 13983
     $236 = $ReallocAsyncCtx3 + 228 | 0; //@line 13984
     HEAP32[$236 >> 2] = $106; //@line 13985
     $237 = $ReallocAsyncCtx3 + 232 | 0; //@line 13986
     HEAP32[$237 >> 2] = $108; //@line 13987
     $238 = $ReallocAsyncCtx3 + 236 | 0; //@line 13988
     HEAP32[$238 >> 2] = $110; //@line 13989
     $239 = $ReallocAsyncCtx3 + 240 | 0; //@line 13990
     HEAP32[$239 >> 2] = $112; //@line 13991
     $240 = $ReallocAsyncCtx3 + 244 | 0; //@line 13992
     HEAP32[$240 >> 2] = $241; //@line 13993
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 13994
     HEAP32[$242 >> 2] = $114; //@line 13995
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 13996
     HEAP32[$243 >> 2] = $116; //@line 13997
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 13998
     HEAP32[$244 >> 2] = $118; //@line 13999
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 14000
     HEAP32[$245 >> 2] = $120; //@line 14001
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 14002
     HEAP32[$246 >> 2] = $157; //@line 14003
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 14004
     HEAP32[$247 >> 2] = $124; //@line 14005
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 14006
     HEAP32[$248 >> 2] = $126; //@line 14007
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 14008
     HEAP32[$249 >> 2] = $128; //@line 14009
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 14010
     HEAP32[$250 >> 2] = $130; //@line 14011
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 14012
     HEAP32[$251 >> 2] = $14; //@line 14013
     sp = STACKTOP; //@line 14014
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3844, 4279, $86); //@line 14019
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3844, 4348, $4); //@line 14024
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 14029
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$38 >> 2] | 0; //@line 14033
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 14039
       $289 = $241 + 1 | 0; //@line 14040
       HEAP32[$88 >> 2] = $289; //@line 14041
       $290 = HEAP32[$40 >> 2] | 0; //@line 14042
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 14043
       $291 = FUNCTION_TABLE_ii[$290 & 31]($$1202$i) | 0; //@line 14044
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 14047
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 14048
        HEAP32[$292 >> 2] = $2; //@line 14049
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 14050
        HEAP32[$293 >> 2] = $4; //@line 14051
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 14052
        HEAP32[$294 >> 2] = $6; //@line 14053
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 14054
        HEAP32[$295 >> 2] = $8; //@line 14055
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 14056
        HEAP32[$296 >> 2] = $132; //@line 14057
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 14058
        HEAP32[$297 >> 2] = $12; //@line 14059
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 14060
        HEAP32[$298 >> 2] = $10; //@line 14061
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 14062
        HEAP32[$299 >> 2] = $16; //@line 14063
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 14064
        HEAP32[$300 >> 2] = $18; //@line 14065
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 14066
        HEAP32[$301 >> 2] = $20; //@line 14067
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 14068
        HEAP32[$302 >> 2] = $22; //@line 14069
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 14070
        HEAP32[$303 >> 2] = $24; //@line 14071
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 14072
        HEAP32[$304 >> 2] = $281; //@line 14073
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 14074
        HEAP32[$305 >> 2] = $26; //@line 14075
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 14076
        HEAP32[$306 >> 2] = $28; //@line 14077
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 14078
        HEAP32[$307 >> 2] = $30; //@line 14079
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 14080
        HEAP32[$308 >> 2] = $289; //@line 14081
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 14082
        HEAP32[$309 >> 2] = $32; //@line 14083
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 14084
        HEAP32[$310 >> 2] = $34; //@line 14085
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 14086
        HEAP32[$311 >> 2] = $36; //@line 14087
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 14088
        HEAP32[$312 >> 2] = $38; //@line 14089
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 14090
        HEAP32[$313 >> 2] = $40; //@line 14091
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 14092
        HEAP32[$314 >> 2] = $42; //@line 14093
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 14094
        HEAP32[$315 >> 2] = $44; //@line 14095
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 14096
        HEAP32[$316 >> 2] = $46; //@line 14097
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 14098
        HEAP32[$317 >> 2] = $48; //@line 14099
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 14100
        HEAP32[$318 >> 2] = $50; //@line 14101
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 14102
        HEAP32[$319 >> 2] = $52; //@line 14103
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 14104
        HEAP32[$320 >> 2] = $54; //@line 14105
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 14106
        HEAP32[$321 >> 2] = $56; //@line 14107
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 14108
        HEAP32[$322 >> 2] = $58; //@line 14109
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 14110
        HEAP32[$323 >> 2] = $60; //@line 14111
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 14112
        HEAP32[$324 >> 2] = $62; //@line 14113
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 14114
        HEAP32[$325 >> 2] = $64; //@line 14115
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 14116
        HEAP32[$326 >> 2] = $66; //@line 14117
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 14118
        HEAP32[$327 >> 2] = $68; //@line 14119
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 14120
        HEAP32[$328 >> 2] = $70; //@line 14121
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 14122
        HEAP32[$329 >> 2] = $72; //@line 14123
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 14124
        HEAP32[$330 >> 2] = $74; //@line 14125
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 14126
        HEAP32[$331 >> 2] = $76; //@line 14127
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 14128
        HEAP32[$332 >> 2] = $78; //@line 14129
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 14130
        HEAP32[$333 >> 2] = $80; //@line 14131
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 14132
        HEAP32[$334 >> 2] = $82; //@line 14133
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 14134
        HEAP32[$335 >> 2] = $84; //@line 14135
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 14136
        HEAP32[$336 >> 2] = $86; //@line 14137
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 14138
        HEAP32[$337 >> 2] = $88; //@line 14139
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 14140
        HEAP32[$338 >> 2] = $90; //@line 14141
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 14142
        HEAP32[$339 >> 2] = $92; //@line 14143
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 14144
        HEAP32[$340 >> 2] = $94; //@line 14145
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 14146
        HEAP32[$341 >> 2] = $96; //@line 14147
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 14148
        HEAP32[$342 >> 2] = $98; //@line 14149
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 14150
        HEAP32[$343 >> 2] = $100; //@line 14151
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 14152
        HEAP32[$344 >> 2] = $102; //@line 14153
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 14154
        HEAP32[$345 >> 2] = $104; //@line 14155
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 14156
        HEAP32[$346 >> 2] = $106; //@line 14157
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 14158
        HEAP32[$347 >> 2] = $108; //@line 14159
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 14160
        HEAP32[$348 >> 2] = $110; //@line 14161
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 14162
        HEAP32[$349 >> 2] = $112; //@line 14163
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 14164
        HEAP32[$350 >> 2] = $114; //@line 14165
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 14166
        HEAP32[$351 >> 2] = $116; //@line 14167
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 14168
        HEAP32[$352 >> 2] = $118; //@line 14169
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 14170
        HEAP32[$353 >> 2] = $120; //@line 14171
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 14172
        HEAP32[$354 >> 2] = $157; //@line 14173
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 14174
        HEAP32[$355 >> 2] = $124; //@line 14175
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 14176
        HEAP32[$356 >> 2] = $126; //@line 14177
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 14178
        HEAP32[$357 >> 2] = $128; //@line 14179
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 14180
        HEAP32[$358 >> 2] = $130; //@line 14181
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 14182
        HEAP32[$359 >> 2] = $14; //@line 14183
        sp = STACKTOP; //@line 14184
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 14188
       ___async_unwind = 0; //@line 14189
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 14190
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 14191
       HEAP32[$292 >> 2] = $2; //@line 14192
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 14193
       HEAP32[$293 >> 2] = $4; //@line 14194
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 14195
       HEAP32[$294 >> 2] = $6; //@line 14196
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 14197
       HEAP32[$295 >> 2] = $8; //@line 14198
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 14199
       HEAP32[$296 >> 2] = $132; //@line 14200
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 14201
       HEAP32[$297 >> 2] = $12; //@line 14202
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 14203
       HEAP32[$298 >> 2] = $10; //@line 14204
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 14205
       HEAP32[$299 >> 2] = $16; //@line 14206
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 14207
       HEAP32[$300 >> 2] = $18; //@line 14208
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 14209
       HEAP32[$301 >> 2] = $20; //@line 14210
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 14211
       HEAP32[$302 >> 2] = $22; //@line 14212
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 14213
       HEAP32[$303 >> 2] = $24; //@line 14214
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 14215
       HEAP32[$304 >> 2] = $281; //@line 14216
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 14217
       HEAP32[$305 >> 2] = $26; //@line 14218
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 14219
       HEAP32[$306 >> 2] = $28; //@line 14220
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 14221
       HEAP32[$307 >> 2] = $30; //@line 14222
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 14223
       HEAP32[$308 >> 2] = $289; //@line 14224
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 14225
       HEAP32[$309 >> 2] = $32; //@line 14226
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 14227
       HEAP32[$310 >> 2] = $34; //@line 14228
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 14229
       HEAP32[$311 >> 2] = $36; //@line 14230
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 14231
       HEAP32[$312 >> 2] = $38; //@line 14232
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 14233
       HEAP32[$313 >> 2] = $40; //@line 14234
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 14235
       HEAP32[$314 >> 2] = $42; //@line 14236
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 14237
       HEAP32[$315 >> 2] = $44; //@line 14238
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 14239
       HEAP32[$316 >> 2] = $46; //@line 14240
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 14241
       HEAP32[$317 >> 2] = $48; //@line 14242
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 14243
       HEAP32[$318 >> 2] = $50; //@line 14244
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 14245
       HEAP32[$319 >> 2] = $52; //@line 14246
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 14247
       HEAP32[$320 >> 2] = $54; //@line 14248
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 14249
       HEAP32[$321 >> 2] = $56; //@line 14250
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 14251
       HEAP32[$322 >> 2] = $58; //@line 14252
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 14253
       HEAP32[$323 >> 2] = $60; //@line 14254
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 14255
       HEAP32[$324 >> 2] = $62; //@line 14256
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 14257
       HEAP32[$325 >> 2] = $64; //@line 14258
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 14259
       HEAP32[$326 >> 2] = $66; //@line 14260
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 14261
       HEAP32[$327 >> 2] = $68; //@line 14262
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 14263
       HEAP32[$328 >> 2] = $70; //@line 14264
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 14265
       HEAP32[$329 >> 2] = $72; //@line 14266
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 14267
       HEAP32[$330 >> 2] = $74; //@line 14268
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 14269
       HEAP32[$331 >> 2] = $76; //@line 14270
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 14271
       HEAP32[$332 >> 2] = $78; //@line 14272
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 14273
       HEAP32[$333 >> 2] = $80; //@line 14274
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 14275
       HEAP32[$334 >> 2] = $82; //@line 14276
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 14277
       HEAP32[$335 >> 2] = $84; //@line 14278
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 14279
       HEAP32[$336 >> 2] = $86; //@line 14280
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 14281
       HEAP32[$337 >> 2] = $88; //@line 14282
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 14283
       HEAP32[$338 >> 2] = $90; //@line 14284
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 14285
       HEAP32[$339 >> 2] = $92; //@line 14286
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 14287
       HEAP32[$340 >> 2] = $94; //@line 14288
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 14289
       HEAP32[$341 >> 2] = $96; //@line 14290
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 14291
       HEAP32[$342 >> 2] = $98; //@line 14292
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 14293
       HEAP32[$343 >> 2] = $100; //@line 14294
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 14295
       HEAP32[$344 >> 2] = $102; //@line 14296
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 14297
       HEAP32[$345 >> 2] = $104; //@line 14298
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 14299
       HEAP32[$346 >> 2] = $106; //@line 14300
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 14301
       HEAP32[$347 >> 2] = $108; //@line 14302
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 14303
       HEAP32[$348 >> 2] = $110; //@line 14304
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 14305
       HEAP32[$349 >> 2] = $112; //@line 14306
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 14307
       HEAP32[$350 >> 2] = $114; //@line 14308
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 14309
       HEAP32[$351 >> 2] = $116; //@line 14310
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 14311
       HEAP32[$352 >> 2] = $118; //@line 14312
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 14313
       HEAP32[$353 >> 2] = $120; //@line 14314
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 14315
       HEAP32[$354 >> 2] = $157; //@line 14316
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 14317
       HEAP32[$355 >> 2] = $124; //@line 14318
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 14319
       HEAP32[$356 >> 2] = $126; //@line 14320
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 14321
       HEAP32[$357 >> 2] = $128; //@line 14322
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 14323
       HEAP32[$358 >> 2] = $130; //@line 14324
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 14325
       HEAP32[$359 >> 2] = $14; //@line 14326
       sp = STACKTOP; //@line 14327
       return;
      }
     }
     _mbed_tracef(2, 3844, 4410, $50); //@line 14331
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$38 >> 2] | 0; //@line 14336
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 14338
     $363 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 14339
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 14342
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 14343
      HEAP32[$364 >> 2] = $2; //@line 14344
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 14345
      HEAP32[$365 >> 2] = $4; //@line 14346
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 14347
      HEAP32[$366 >> 2] = $6; //@line 14348
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 14349
      HEAP32[$367 >> 2] = $8; //@line 14350
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 14351
      HEAP32[$368 >> 2] = $10; //@line 14352
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 14353
      HEAP32[$369 >> 2] = $12; //@line 14354
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 14355
      HEAP32[$370 >> 2] = $14; //@line 14356
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 14357
      HEAP32[$371 >> 2] = $16; //@line 14358
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 14359
      HEAP32[$372 >> 2] = $18; //@line 14360
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 14361
      HEAP32[$373 >> 2] = $20; //@line 14362
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 14363
      HEAP32[$374 >> 2] = $22; //@line 14364
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 14365
      HEAP32[$375 >> 2] = $24; //@line 14366
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 14367
      HEAP32[$376 >> 2] = $26; //@line 14368
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 14369
      HEAP32[$377 >> 2] = $28; //@line 14370
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 14371
      HEAP32[$378 >> 2] = $30; //@line 14372
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 14373
      HEAP32[$379 >> 2] = $32; //@line 14374
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 14375
      HEAP32[$380 >> 2] = $34; //@line 14376
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 14377
      HEAP32[$381 >> 2] = $36; //@line 14378
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 14379
      HEAP32[$382 >> 2] = $38; //@line 14380
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 14381
      HEAP32[$383 >> 2] = $40; //@line 14382
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 14383
      HEAP32[$384 >> 2] = $42; //@line 14384
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 14385
      HEAP32[$385 >> 2] = $44; //@line 14386
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 14387
      HEAP32[$386 >> 2] = $46; //@line 14388
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 14389
      HEAP32[$387 >> 2] = $48; //@line 14390
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 14391
      HEAP32[$388 >> 2] = $50; //@line 14392
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 14393
      HEAP32[$389 >> 2] = $52; //@line 14394
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 14395
      HEAP32[$390 >> 2] = $54; //@line 14396
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 14397
      HEAP32[$391 >> 2] = $56; //@line 14398
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 14399
      HEAP32[$392 >> 2] = $58; //@line 14400
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 14401
      HEAP32[$393 >> 2] = $60; //@line 14402
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 14403
      HEAP32[$394 >> 2] = $62; //@line 14404
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 14405
      HEAP32[$395 >> 2] = $64; //@line 14406
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 14407
      HEAP32[$396 >> 2] = $66; //@line 14408
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 14409
      HEAP32[$397 >> 2] = $68; //@line 14410
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 14411
      HEAP32[$398 >> 2] = $70; //@line 14412
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 14413
      HEAP32[$399 >> 2] = $72; //@line 14414
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 14415
      HEAP32[$400 >> 2] = $74; //@line 14416
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 14417
      HEAP32[$401 >> 2] = $76; //@line 14418
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 14419
      HEAP32[$402 >> 2] = $78; //@line 14420
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 14421
      HEAP32[$403 >> 2] = $80; //@line 14422
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 14423
      HEAP32[$404 >> 2] = $82; //@line 14424
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 14425
      HEAP32[$405 >> 2] = $84; //@line 14426
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 14427
      HEAP32[$406 >> 2] = $86; //@line 14428
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 14429
      HEAP32[$407 >> 2] = $88; //@line 14430
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 14431
      HEAP32[$408 >> 2] = $90; //@line 14432
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 14433
      HEAP32[$409 >> 2] = $92; //@line 14434
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 14435
      HEAP32[$410 >> 2] = $94; //@line 14436
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 14437
      HEAP32[$411 >> 2] = $96; //@line 14438
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 14439
      HEAP32[$412 >> 2] = $98; //@line 14440
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 14441
      HEAP32[$413 >> 2] = $100; //@line 14442
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 14443
      HEAP32[$414 >> 2] = $102; //@line 14444
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 14445
      HEAP32[$415 >> 2] = $104; //@line 14446
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 14447
      HEAP32[$416 >> 2] = $106; //@line 14448
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 14449
      HEAP32[$417 >> 2] = $108; //@line 14450
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 14451
      HEAP32[$418 >> 2] = $110; //@line 14452
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 14453
      HEAP32[$419 >> 2] = $112; //@line 14454
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 14455
      HEAP32[$420 >> 2] = $114; //@line 14456
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 14457
      HEAP32[$421 >> 2] = $116; //@line 14458
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 14459
      HEAP32[$422 >> 2] = $118; //@line 14460
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 14461
      HEAP32[$423 >> 2] = $120; //@line 14462
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 14463
      HEAP32[$424 >> 2] = $157; //@line 14464
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 14465
      HEAP32[$425 >> 2] = $124; //@line 14466
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 14467
      HEAP32[$426 >> 2] = $126; //@line 14468
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 14469
      HEAP32[$427 >> 2] = $128; //@line 14470
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 14471
      HEAP32[$428 >> 2] = $130; //@line 14472
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 14473
      HEAP32[$429 >> 2] = $132; //@line 14474
      sp = STACKTOP; //@line 14475
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 14479
     ___async_unwind = 0; //@line 14480
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 14481
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 14482
     HEAP32[$364 >> 2] = $2; //@line 14483
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 14484
     HEAP32[$365 >> 2] = $4; //@line 14485
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 14486
     HEAP32[$366 >> 2] = $6; //@line 14487
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 14488
     HEAP32[$367 >> 2] = $8; //@line 14489
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 14490
     HEAP32[$368 >> 2] = $10; //@line 14491
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 14492
     HEAP32[$369 >> 2] = $12; //@line 14493
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 14494
     HEAP32[$370 >> 2] = $14; //@line 14495
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 14496
     HEAP32[$371 >> 2] = $16; //@line 14497
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 14498
     HEAP32[$372 >> 2] = $18; //@line 14499
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 14500
     HEAP32[$373 >> 2] = $20; //@line 14501
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 14502
     HEAP32[$374 >> 2] = $22; //@line 14503
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 14504
     HEAP32[$375 >> 2] = $24; //@line 14505
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 14506
     HEAP32[$376 >> 2] = $26; //@line 14507
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 14508
     HEAP32[$377 >> 2] = $28; //@line 14509
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 14510
     HEAP32[$378 >> 2] = $30; //@line 14511
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 14512
     HEAP32[$379 >> 2] = $32; //@line 14513
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 14514
     HEAP32[$380 >> 2] = $34; //@line 14515
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 14516
     HEAP32[$381 >> 2] = $36; //@line 14517
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 14518
     HEAP32[$382 >> 2] = $38; //@line 14519
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 14520
     HEAP32[$383 >> 2] = $40; //@line 14521
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 14522
     HEAP32[$384 >> 2] = $42; //@line 14523
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 14524
     HEAP32[$385 >> 2] = $44; //@line 14525
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 14526
     HEAP32[$386 >> 2] = $46; //@line 14527
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 14528
     HEAP32[$387 >> 2] = $48; //@line 14529
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 14530
     HEAP32[$388 >> 2] = $50; //@line 14531
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 14532
     HEAP32[$389 >> 2] = $52; //@line 14533
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 14534
     HEAP32[$390 >> 2] = $54; //@line 14535
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 14536
     HEAP32[$391 >> 2] = $56; //@line 14537
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 14538
     HEAP32[$392 >> 2] = $58; //@line 14539
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 14540
     HEAP32[$393 >> 2] = $60; //@line 14541
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 14542
     HEAP32[$394 >> 2] = $62; //@line 14543
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 14544
     HEAP32[$395 >> 2] = $64; //@line 14545
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 14546
     HEAP32[$396 >> 2] = $66; //@line 14547
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 14548
     HEAP32[$397 >> 2] = $68; //@line 14549
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 14550
     HEAP32[$398 >> 2] = $70; //@line 14551
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 14552
     HEAP32[$399 >> 2] = $72; //@line 14553
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 14554
     HEAP32[$400 >> 2] = $74; //@line 14555
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 14556
     HEAP32[$401 >> 2] = $76; //@line 14557
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 14558
     HEAP32[$402 >> 2] = $78; //@line 14559
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 14560
     HEAP32[$403 >> 2] = $80; //@line 14561
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 14562
     HEAP32[$404 >> 2] = $82; //@line 14563
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 14564
     HEAP32[$405 >> 2] = $84; //@line 14565
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 14566
     HEAP32[$406 >> 2] = $86; //@line 14567
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 14568
     HEAP32[$407 >> 2] = $88; //@line 14569
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 14570
     HEAP32[$408 >> 2] = $90; //@line 14571
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 14572
     HEAP32[$409 >> 2] = $92; //@line 14573
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 14574
     HEAP32[$410 >> 2] = $94; //@line 14575
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 14576
     HEAP32[$411 >> 2] = $96; //@line 14577
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 14578
     HEAP32[$412 >> 2] = $98; //@line 14579
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 14580
     HEAP32[$413 >> 2] = $100; //@line 14581
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 14582
     HEAP32[$414 >> 2] = $102; //@line 14583
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 14584
     HEAP32[$415 >> 2] = $104; //@line 14585
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 14586
     HEAP32[$416 >> 2] = $106; //@line 14587
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 14588
     HEAP32[$417 >> 2] = $108; //@line 14589
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 14590
     HEAP32[$418 >> 2] = $110; //@line 14591
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 14592
     HEAP32[$419 >> 2] = $112; //@line 14593
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 14594
     HEAP32[$420 >> 2] = $114; //@line 14595
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 14596
     HEAP32[$421 >> 2] = $116; //@line 14597
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 14598
     HEAP32[$422 >> 2] = $118; //@line 14599
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 14600
     HEAP32[$423 >> 2] = $120; //@line 14601
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 14602
     HEAP32[$424 >> 2] = $157; //@line 14603
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 14604
     HEAP32[$425 >> 2] = $124; //@line 14605
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 14606
     HEAP32[$426 >> 2] = $126; //@line 14607
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 14608
     HEAP32[$427 >> 2] = $128; //@line 14609
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 14610
     HEAP32[$428 >> 2] = $130; //@line 14611
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 14612
     HEAP32[$429 >> 2] = $132; //@line 14613
     sp = STACKTOP; //@line 14614
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 14619
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$38 >> 2] | 0; //@line 14623
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 14629
       $439 = $241 + 1 | 0; //@line 14630
       HEAP32[$88 >> 2] = $439; //@line 14631
       $440 = HEAP32[$40 >> 2] | 0; //@line 14632
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 14633
       $441 = FUNCTION_TABLE_ii[$440 & 31]($$1202$i) | 0; //@line 14634
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 14637
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 14638
        HEAP32[$442 >> 2] = $2; //@line 14639
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 14640
        HEAP32[$443 >> 2] = $4; //@line 14641
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 14642
        HEAP32[$444 >> 2] = $431; //@line 14643
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 14644
        HEAP32[$445 >> 2] = $6; //@line 14645
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 14646
        HEAP32[$446 >> 2] = $8; //@line 14647
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 14648
        HEAP32[$447 >> 2] = $132; //@line 14649
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 14650
        HEAP32[$448 >> 2] = $12; //@line 14651
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 14652
        HEAP32[$449 >> 2] = $10; //@line 14653
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 14654
        HEAP32[$450 >> 2] = $16; //@line 14655
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 14656
        HEAP32[$451 >> 2] = $439; //@line 14657
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 14658
        HEAP32[$452 >> 2] = $18; //@line 14659
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 14660
        HEAP32[$453 >> 2] = $20; //@line 14661
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 14662
        HEAP32[$454 >> 2] = $22; //@line 14663
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 14664
        HEAP32[$455 >> 2] = $24; //@line 14665
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 14666
        HEAP32[$456 >> 2] = $26; //@line 14667
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 14668
        HEAP32[$457 >> 2] = $28; //@line 14669
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 14670
        HEAP32[$458 >> 2] = $30; //@line 14671
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 14672
        HEAP32[$459 >> 2] = $32; //@line 14673
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 14674
        HEAP32[$460 >> 2] = $34; //@line 14675
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 14676
        HEAP32[$461 >> 2] = $36; //@line 14677
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 14678
        HEAP32[$462 >> 2] = $38; //@line 14679
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 14680
        HEAP32[$463 >> 2] = $40; //@line 14681
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 14682
        HEAP32[$464 >> 2] = $42; //@line 14683
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 14684
        HEAP32[$465 >> 2] = $44; //@line 14685
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 14686
        HEAP32[$466 >> 2] = $46; //@line 14687
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 14688
        HEAP32[$467 >> 2] = $48; //@line 14689
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 14690
        HEAP32[$468 >> 2] = $50; //@line 14691
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 14692
        HEAP32[$469 >> 2] = $52; //@line 14693
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 14694
        HEAP32[$470 >> 2] = $54; //@line 14695
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 14696
        HEAP32[$471 >> 2] = $56; //@line 14697
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 14698
        HEAP32[$472 >> 2] = $58; //@line 14699
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 14700
        HEAP32[$473 >> 2] = $60; //@line 14701
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 14702
        HEAP32[$474 >> 2] = $62; //@line 14703
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 14704
        HEAP32[$475 >> 2] = $64; //@line 14705
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 14706
        HEAP32[$476 >> 2] = $66; //@line 14707
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 14708
        HEAP32[$477 >> 2] = $68; //@line 14709
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 14710
        HEAP32[$478 >> 2] = $70; //@line 14711
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 14712
        HEAP32[$479 >> 2] = $72; //@line 14713
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 14714
        HEAP32[$480 >> 2] = $74; //@line 14715
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 14716
        HEAP32[$481 >> 2] = $76; //@line 14717
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 14718
        HEAP32[$482 >> 2] = $78; //@line 14719
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 14720
        HEAP32[$483 >> 2] = $80; //@line 14721
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 14722
        HEAP32[$484 >> 2] = $82; //@line 14723
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 14724
        HEAP32[$485 >> 2] = $84; //@line 14725
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 14726
        HEAP32[$486 >> 2] = $86; //@line 14727
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 14728
        HEAP32[$487 >> 2] = $88; //@line 14729
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 14730
        HEAP32[$488 >> 2] = $90; //@line 14731
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 14732
        HEAP32[$489 >> 2] = $92; //@line 14733
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 14734
        HEAP32[$490 >> 2] = $94; //@line 14735
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 14736
        HEAP32[$491 >> 2] = $96; //@line 14737
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 14738
        HEAP32[$492 >> 2] = $98; //@line 14739
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 14740
        HEAP32[$493 >> 2] = $100; //@line 14741
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 14742
        HEAP32[$494 >> 2] = $102; //@line 14743
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 14744
        HEAP32[$495 >> 2] = $104; //@line 14745
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 14746
        HEAP32[$496 >> 2] = $106; //@line 14747
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 14748
        HEAP32[$497 >> 2] = $108; //@line 14749
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 14750
        HEAP32[$498 >> 2] = $110; //@line 14751
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 14752
        HEAP32[$499 >> 2] = $112; //@line 14753
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 14754
        HEAP32[$500 >> 2] = $114; //@line 14755
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 14756
        HEAP32[$501 >> 2] = $116; //@line 14757
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 14758
        HEAP32[$502 >> 2] = $118; //@line 14759
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 14760
        HEAP32[$503 >> 2] = $120; //@line 14761
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 14762
        HEAP32[$504 >> 2] = $157; //@line 14763
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 14764
        HEAP32[$505 >> 2] = $124; //@line 14765
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 14766
        HEAP32[$506 >> 2] = $126; //@line 14767
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 14768
        HEAP32[$507 >> 2] = $128; //@line 14769
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 14770
        HEAP32[$508 >> 2] = $130; //@line 14771
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 14772
        HEAP32[$509 >> 2] = $14; //@line 14773
        sp = STACKTOP; //@line 14774
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 14778
       ___async_unwind = 0; //@line 14779
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 14780
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 14781
       HEAP32[$442 >> 2] = $2; //@line 14782
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 14783
       HEAP32[$443 >> 2] = $4; //@line 14784
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 14785
       HEAP32[$444 >> 2] = $431; //@line 14786
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 14787
       HEAP32[$445 >> 2] = $6; //@line 14788
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 14789
       HEAP32[$446 >> 2] = $8; //@line 14790
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 14791
       HEAP32[$447 >> 2] = $132; //@line 14792
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 14793
       HEAP32[$448 >> 2] = $12; //@line 14794
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 14795
       HEAP32[$449 >> 2] = $10; //@line 14796
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 14797
       HEAP32[$450 >> 2] = $16; //@line 14798
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 14799
       HEAP32[$451 >> 2] = $439; //@line 14800
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 14801
       HEAP32[$452 >> 2] = $18; //@line 14802
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 14803
       HEAP32[$453 >> 2] = $20; //@line 14804
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 14805
       HEAP32[$454 >> 2] = $22; //@line 14806
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 14807
       HEAP32[$455 >> 2] = $24; //@line 14808
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 14809
       HEAP32[$456 >> 2] = $26; //@line 14810
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 14811
       HEAP32[$457 >> 2] = $28; //@line 14812
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 14813
       HEAP32[$458 >> 2] = $30; //@line 14814
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 14815
       HEAP32[$459 >> 2] = $32; //@line 14816
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 14817
       HEAP32[$460 >> 2] = $34; //@line 14818
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 14819
       HEAP32[$461 >> 2] = $36; //@line 14820
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 14821
       HEAP32[$462 >> 2] = $38; //@line 14822
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 14823
       HEAP32[$463 >> 2] = $40; //@line 14824
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 14825
       HEAP32[$464 >> 2] = $42; //@line 14826
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 14827
       HEAP32[$465 >> 2] = $44; //@line 14828
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 14829
       HEAP32[$466 >> 2] = $46; //@line 14830
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 14831
       HEAP32[$467 >> 2] = $48; //@line 14832
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 14833
       HEAP32[$468 >> 2] = $50; //@line 14834
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 14835
       HEAP32[$469 >> 2] = $52; //@line 14836
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 14837
       HEAP32[$470 >> 2] = $54; //@line 14838
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 14839
       HEAP32[$471 >> 2] = $56; //@line 14840
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 14841
       HEAP32[$472 >> 2] = $58; //@line 14842
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 14843
       HEAP32[$473 >> 2] = $60; //@line 14844
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 14845
       HEAP32[$474 >> 2] = $62; //@line 14846
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 14847
       HEAP32[$475 >> 2] = $64; //@line 14848
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 14849
       HEAP32[$476 >> 2] = $66; //@line 14850
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 14851
       HEAP32[$477 >> 2] = $68; //@line 14852
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 14853
       HEAP32[$478 >> 2] = $70; //@line 14854
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 14855
       HEAP32[$479 >> 2] = $72; //@line 14856
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 14857
       HEAP32[$480 >> 2] = $74; //@line 14858
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 14859
       HEAP32[$481 >> 2] = $76; //@line 14860
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 14861
       HEAP32[$482 >> 2] = $78; //@line 14862
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 14863
       HEAP32[$483 >> 2] = $80; //@line 14864
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 14865
       HEAP32[$484 >> 2] = $82; //@line 14866
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 14867
       HEAP32[$485 >> 2] = $84; //@line 14868
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 14869
       HEAP32[$486 >> 2] = $86; //@line 14870
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 14871
       HEAP32[$487 >> 2] = $88; //@line 14872
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 14873
       HEAP32[$488 >> 2] = $90; //@line 14874
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 14875
       HEAP32[$489 >> 2] = $92; //@line 14876
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 14877
       HEAP32[$490 >> 2] = $94; //@line 14878
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 14879
       HEAP32[$491 >> 2] = $96; //@line 14880
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 14881
       HEAP32[$492 >> 2] = $98; //@line 14882
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 14883
       HEAP32[$493 >> 2] = $100; //@line 14884
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 14885
       HEAP32[$494 >> 2] = $102; //@line 14886
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 14887
       HEAP32[$495 >> 2] = $104; //@line 14888
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 14889
       HEAP32[$496 >> 2] = $106; //@line 14890
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 14891
       HEAP32[$497 >> 2] = $108; //@line 14892
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 14893
       HEAP32[$498 >> 2] = $110; //@line 14894
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 14895
       HEAP32[$499 >> 2] = $112; //@line 14896
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 14897
       HEAP32[$500 >> 2] = $114; //@line 14898
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 14899
       HEAP32[$501 >> 2] = $116; //@line 14900
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 14901
       HEAP32[$502 >> 2] = $118; //@line 14902
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 14903
       HEAP32[$503 >> 2] = $120; //@line 14904
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 14905
       HEAP32[$504 >> 2] = $157; //@line 14906
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 14907
       HEAP32[$505 >> 2] = $124; //@line 14908
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 14909
       HEAP32[$506 >> 2] = $126; //@line 14910
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 14911
       HEAP32[$507 >> 2] = $128; //@line 14912
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 14913
       HEAP32[$508 >> 2] = $130; //@line 14914
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 14915
       HEAP32[$509 >> 2] = $14; //@line 14916
       sp = STACKTOP; //@line 14917
       return;
      }
     }
     _mbed_tracef(2, 3844, 4605, $58); //@line 14921
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$38 >> 2] | 0; //@line 14926
     $512 = $511 + 56 | 0; //@line 14927
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3844, 4739, $30); //@line 14931
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 14935
     $516 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 14936
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 14939
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 14940
      HEAP32[$517 >> 2] = $2; //@line 14941
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 14942
      HEAP32[$518 >> 2] = $4; //@line 14943
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 14944
      HEAP32[$519 >> 2] = $6; //@line 14945
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 14946
      HEAP32[$520 >> 2] = $8; //@line 14947
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 14948
      HEAP32[$521 >> 2] = $10; //@line 14949
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 14950
      HEAP32[$522 >> 2] = $12; //@line 14951
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 14952
      HEAP32[$523 >> 2] = $14; //@line 14953
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 14954
      HEAP32[$524 >> 2] = $16; //@line 14955
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 14956
      HEAP32[$525 >> 2] = $18; //@line 14957
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 14958
      HEAP32[$526 >> 2] = $20; //@line 14959
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 14960
      HEAP32[$527 >> 2] = $22; //@line 14961
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 14962
      HEAP32[$528 >> 2] = $24; //@line 14963
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 14964
      HEAP32[$529 >> 2] = $26; //@line 14965
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 14966
      HEAP32[$530 >> 2] = $28; //@line 14967
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 14968
      HEAP32[$531 >> 2] = $30; //@line 14969
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 14970
      HEAP32[$532 >> 2] = $32; //@line 14971
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 14972
      HEAP32[$533 >> 2] = $34; //@line 14973
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 14974
      HEAP32[$534 >> 2] = $36; //@line 14975
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 14976
      HEAP32[$535 >> 2] = $38; //@line 14977
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 14978
      HEAP32[$536 >> 2] = $40; //@line 14979
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 14980
      HEAP32[$537 >> 2] = $42; //@line 14981
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 14982
      HEAP32[$538 >> 2] = $44; //@line 14983
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 14984
      HEAP32[$539 >> 2] = $46; //@line 14985
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 14986
      HEAP32[$540 >> 2] = $48; //@line 14987
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 14988
      HEAP32[$541 >> 2] = $50; //@line 14989
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 14990
      HEAP32[$542 >> 2] = $52; //@line 14991
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 14992
      HEAP32[$543 >> 2] = $54; //@line 14993
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 14994
      HEAP32[$544 >> 2] = $56; //@line 14995
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 14996
      HEAP32[$545 >> 2] = $58; //@line 14997
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 14998
      HEAP32[$546 >> 2] = $60; //@line 14999
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 15000
      HEAP32[$547 >> 2] = $62; //@line 15001
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 15002
      HEAP32[$548 >> 2] = $64; //@line 15003
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 15004
      HEAP32[$549 >> 2] = $66; //@line 15005
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 15006
      HEAP32[$550 >> 2] = $68; //@line 15007
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 15008
      HEAP32[$551 >> 2] = $70; //@line 15009
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 15010
      HEAP32[$552 >> 2] = $72; //@line 15011
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 15012
      HEAP32[$553 >> 2] = $74; //@line 15013
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 15014
      HEAP32[$554 >> 2] = $76; //@line 15015
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 15016
      HEAP32[$555 >> 2] = $78; //@line 15017
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 15018
      HEAP32[$556 >> 2] = $80; //@line 15019
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 15020
      HEAP32[$557 >> 2] = $82; //@line 15021
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 15022
      HEAP32[$558 >> 2] = $84; //@line 15023
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 15024
      HEAP32[$559 >> 2] = $86; //@line 15025
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 15026
      HEAP32[$560 >> 2] = $88; //@line 15027
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 15028
      HEAP32[$561 >> 2] = $90; //@line 15029
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 15030
      HEAP32[$562 >> 2] = $92; //@line 15031
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 15032
      HEAP32[$563 >> 2] = $94; //@line 15033
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 15034
      HEAP32[$564 >> 2] = $96; //@line 15035
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 15036
      HEAP32[$565 >> 2] = $98; //@line 15037
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 15038
      HEAP32[$566 >> 2] = $100; //@line 15039
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 15040
      HEAP32[$567 >> 2] = $102; //@line 15041
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 15042
      HEAP32[$568 >> 2] = $104; //@line 15043
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 15044
      HEAP32[$569 >> 2] = $106; //@line 15045
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 15046
      HEAP32[$570 >> 2] = $108; //@line 15047
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 15048
      HEAP32[$571 >> 2] = $110; //@line 15049
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 15050
      HEAP32[$572 >> 2] = $112; //@line 15051
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 15052
      HEAP32[$573 >> 2] = $114; //@line 15053
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 15054
      HEAP32[$574 >> 2] = $116; //@line 15055
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 15056
      HEAP32[$575 >> 2] = $118; //@line 15057
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 15058
      HEAP32[$576 >> 2] = $120; //@line 15059
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 15060
      HEAP32[$577 >> 2] = $157; //@line 15061
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 15062
      HEAP32[$578 >> 2] = $124; //@line 15063
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 15064
      HEAP32[$579 >> 2] = $126; //@line 15065
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 15066
      HEAP32[$580 >> 2] = $128; //@line 15067
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 15068
      HEAP32[$581 >> 2] = $130; //@line 15069
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 15070
      HEAP32[$582 >> 2] = $132; //@line 15071
      sp = STACKTOP; //@line 15072
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 15076
     ___async_unwind = 0; //@line 15077
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 15078
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 15079
     HEAP32[$517 >> 2] = $2; //@line 15080
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 15081
     HEAP32[$518 >> 2] = $4; //@line 15082
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 15083
     HEAP32[$519 >> 2] = $6; //@line 15084
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 15085
     HEAP32[$520 >> 2] = $8; //@line 15086
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 15087
     HEAP32[$521 >> 2] = $10; //@line 15088
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 15089
     HEAP32[$522 >> 2] = $12; //@line 15090
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 15091
     HEAP32[$523 >> 2] = $14; //@line 15092
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 15093
     HEAP32[$524 >> 2] = $16; //@line 15094
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 15095
     HEAP32[$525 >> 2] = $18; //@line 15096
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 15097
     HEAP32[$526 >> 2] = $20; //@line 15098
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 15099
     HEAP32[$527 >> 2] = $22; //@line 15100
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 15101
     HEAP32[$528 >> 2] = $24; //@line 15102
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 15103
     HEAP32[$529 >> 2] = $26; //@line 15104
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 15105
     HEAP32[$530 >> 2] = $28; //@line 15106
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 15107
     HEAP32[$531 >> 2] = $30; //@line 15108
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 15109
     HEAP32[$532 >> 2] = $32; //@line 15110
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 15111
     HEAP32[$533 >> 2] = $34; //@line 15112
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 15113
     HEAP32[$534 >> 2] = $36; //@line 15114
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 15115
     HEAP32[$535 >> 2] = $38; //@line 15116
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 15117
     HEAP32[$536 >> 2] = $40; //@line 15118
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 15119
     HEAP32[$537 >> 2] = $42; //@line 15120
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 15121
     HEAP32[$538 >> 2] = $44; //@line 15122
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 15123
     HEAP32[$539 >> 2] = $46; //@line 15124
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 15125
     HEAP32[$540 >> 2] = $48; //@line 15126
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 15127
     HEAP32[$541 >> 2] = $50; //@line 15128
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 15129
     HEAP32[$542 >> 2] = $52; //@line 15130
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 15131
     HEAP32[$543 >> 2] = $54; //@line 15132
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 15133
     HEAP32[$544 >> 2] = $56; //@line 15134
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 15135
     HEAP32[$545 >> 2] = $58; //@line 15136
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 15137
     HEAP32[$546 >> 2] = $60; //@line 15138
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 15139
     HEAP32[$547 >> 2] = $62; //@line 15140
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 15141
     HEAP32[$548 >> 2] = $64; //@line 15142
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 15143
     HEAP32[$549 >> 2] = $66; //@line 15144
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 15145
     HEAP32[$550 >> 2] = $68; //@line 15146
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 15147
     HEAP32[$551 >> 2] = $70; //@line 15148
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 15149
     HEAP32[$552 >> 2] = $72; //@line 15150
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 15151
     HEAP32[$553 >> 2] = $74; //@line 15152
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 15153
     HEAP32[$554 >> 2] = $76; //@line 15154
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 15155
     HEAP32[$555 >> 2] = $78; //@line 15156
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 15157
     HEAP32[$556 >> 2] = $80; //@line 15158
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 15159
     HEAP32[$557 >> 2] = $82; //@line 15160
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 15161
     HEAP32[$558 >> 2] = $84; //@line 15162
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 15163
     HEAP32[$559 >> 2] = $86; //@line 15164
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 15165
     HEAP32[$560 >> 2] = $88; //@line 15166
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 15167
     HEAP32[$561 >> 2] = $90; //@line 15168
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 15169
     HEAP32[$562 >> 2] = $92; //@line 15170
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 15171
     HEAP32[$563 >> 2] = $94; //@line 15172
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 15173
     HEAP32[$564 >> 2] = $96; //@line 15174
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 15175
     HEAP32[$565 >> 2] = $98; //@line 15176
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 15177
     HEAP32[$566 >> 2] = $100; //@line 15178
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 15179
     HEAP32[$567 >> 2] = $102; //@line 15180
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 15181
     HEAP32[$568 >> 2] = $104; //@line 15182
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 15183
     HEAP32[$569 >> 2] = $106; //@line 15184
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 15185
     HEAP32[$570 >> 2] = $108; //@line 15186
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 15187
     HEAP32[$571 >> 2] = $110; //@line 15188
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 15189
     HEAP32[$572 >> 2] = $112; //@line 15190
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 15191
     HEAP32[$573 >> 2] = $114; //@line 15192
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 15193
     HEAP32[$574 >> 2] = $116; //@line 15194
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 15195
     HEAP32[$575 >> 2] = $118; //@line 15196
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 15197
     HEAP32[$576 >> 2] = $120; //@line 15198
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 15199
     HEAP32[$577 >> 2] = $157; //@line 15200
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 15201
     HEAP32[$578 >> 2] = $124; //@line 15202
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 15203
     HEAP32[$579 >> 2] = $126; //@line 15204
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 15205
     HEAP32[$580 >> 2] = $128; //@line 15206
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 15207
     HEAP32[$581 >> 2] = $130; //@line 15208
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 15209
     HEAP32[$582 >> 2] = $132; //@line 15210
     sp = STACKTOP; //@line 15211
     return;
    }
   case 53:
    {
     _mbed_tracef(2, 3844, 4872, $126); //@line 15216
     break L2;
     break;
    }
   case 57:
    {
     $600 = HEAP32[$38 >> 2] | 0; //@line 15221
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 15224
     $603 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $600 + 60 | 0, $600 + 8 | 0, 20, $$1202$i) | 0; //@line 15225
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 15228
      $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 15229
      HEAP32[$604 >> 2] = $2; //@line 15230
      $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 15231
      HEAP32[$605 >> 2] = $4; //@line 15232
      $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 15233
      HEAP32[$606 >> 2] = $6; //@line 15234
      $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 15235
      HEAP32[$607 >> 2] = $8; //@line 15236
      $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 15237
      HEAP32[$608 >> 2] = $10; //@line 15238
      $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 15239
      HEAP32[$609 >> 2] = $12; //@line 15240
      $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 15241
      HEAP32[$610 >> 2] = $14; //@line 15242
      $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 15243
      HEAP32[$611 >> 2] = $16; //@line 15244
      $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 15245
      HEAP32[$612 >> 2] = $18; //@line 15246
      $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 15247
      HEAP32[$613 >> 2] = $20; //@line 15248
      $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 15249
      HEAP32[$614 >> 2] = $22; //@line 15250
      $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 15251
      HEAP32[$615 >> 2] = $24; //@line 15252
      $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 15253
      HEAP32[$616 >> 2] = $26; //@line 15254
      $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 15255
      HEAP32[$617 >> 2] = $28; //@line 15256
      $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 15257
      HEAP32[$618 >> 2] = $30; //@line 15258
      $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 15259
      HEAP32[$619 >> 2] = $32; //@line 15260
      $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 15261
      HEAP32[$620 >> 2] = $34; //@line 15262
      $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 15263
      HEAP32[$621 >> 2] = $36; //@line 15264
      $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 15265
      HEAP32[$622 >> 2] = $38; //@line 15266
      $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 15267
      HEAP32[$623 >> 2] = $40; //@line 15268
      $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 15269
      HEAP32[$624 >> 2] = $42; //@line 15270
      $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 15271
      HEAP32[$625 >> 2] = $44; //@line 15272
      $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 15273
      HEAP32[$626 >> 2] = $46; //@line 15274
      $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 15275
      HEAP32[$627 >> 2] = $48; //@line 15276
      $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 15277
      HEAP32[$628 >> 2] = $50; //@line 15278
      $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 15279
      HEAP32[$629 >> 2] = $52; //@line 15280
      $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 15281
      HEAP32[$630 >> 2] = $54; //@line 15282
      $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 15283
      HEAP32[$631 >> 2] = $56; //@line 15284
      $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 15285
      HEAP32[$632 >> 2] = $58; //@line 15286
      $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 15287
      HEAP32[$633 >> 2] = $60; //@line 15288
      $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 15289
      HEAP32[$634 >> 2] = $62; //@line 15290
      $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 15291
      HEAP32[$635 >> 2] = $64; //@line 15292
      $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 15293
      HEAP32[$636 >> 2] = $66; //@line 15294
      $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 15295
      HEAP32[$637 >> 2] = $68; //@line 15296
      $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 15297
      HEAP32[$638 >> 2] = $70; //@line 15298
      $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 15299
      HEAP32[$639 >> 2] = $72; //@line 15300
      $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 15301
      HEAP32[$640 >> 2] = $74; //@line 15302
      $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 15303
      HEAP32[$641 >> 2] = $76; //@line 15304
      $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 15305
      HEAP32[$642 >> 2] = $78; //@line 15306
      $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 15307
      HEAP32[$643 >> 2] = $80; //@line 15308
      $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 15309
      HEAP32[$644 >> 2] = $82; //@line 15310
      $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 15311
      HEAP32[$645 >> 2] = $84; //@line 15312
      $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 15313
      HEAP32[$646 >> 2] = $86; //@line 15314
      $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 15315
      HEAP32[$647 >> 2] = $88; //@line 15316
      $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 15317
      HEAP32[$648 >> 2] = $90; //@line 15318
      $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 15319
      HEAP32[$649 >> 2] = $92; //@line 15320
      $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 15321
      HEAP32[$650 >> 2] = $94; //@line 15322
      $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 15323
      HEAP32[$651 >> 2] = $96; //@line 15324
      $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 15325
      HEAP32[$652 >> 2] = $98; //@line 15326
      $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 15327
      HEAP32[$653 >> 2] = $100; //@line 15328
      $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 15329
      HEAP32[$654 >> 2] = $102; //@line 15330
      $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 15331
      HEAP32[$655 >> 2] = $104; //@line 15332
      $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 15333
      HEAP32[$656 >> 2] = $106; //@line 15334
      $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 15335
      HEAP32[$657 >> 2] = $108; //@line 15336
      $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 15337
      HEAP32[$658 >> 2] = $110; //@line 15338
      $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 15339
      HEAP32[$659 >> 2] = $112; //@line 15340
      $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 15341
      HEAP32[$660 >> 2] = $114; //@line 15342
      $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 15343
      HEAP32[$661 >> 2] = $116; //@line 15344
      $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 15345
      HEAP32[$662 >> 2] = $118; //@line 15346
      $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 15347
      HEAP32[$663 >> 2] = $120; //@line 15348
      $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 15349
      HEAP32[$664 >> 2] = $157; //@line 15350
      $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 15351
      HEAP32[$665 >> 2] = $124; //@line 15352
      $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 15353
      HEAP32[$666 >> 2] = $126; //@line 15354
      $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 15355
      HEAP32[$667 >> 2] = $128; //@line 15356
      $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 15357
      HEAP32[$668 >> 2] = $130; //@line 15358
      $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 15359
      HEAP32[$669 >> 2] = $132; //@line 15360
      sp = STACKTOP; //@line 15361
      return;
     }
     HEAP8[___async_retval >> 0] = $603; //@line 15365
     ___async_unwind = 0; //@line 15366
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 15367
     $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 15368
     HEAP32[$604 >> 2] = $2; //@line 15369
     $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 15370
     HEAP32[$605 >> 2] = $4; //@line 15371
     $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 15372
     HEAP32[$606 >> 2] = $6; //@line 15373
     $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 15374
     HEAP32[$607 >> 2] = $8; //@line 15375
     $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 15376
     HEAP32[$608 >> 2] = $10; //@line 15377
     $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 15378
     HEAP32[$609 >> 2] = $12; //@line 15379
     $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 15380
     HEAP32[$610 >> 2] = $14; //@line 15381
     $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 15382
     HEAP32[$611 >> 2] = $16; //@line 15383
     $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 15384
     HEAP32[$612 >> 2] = $18; //@line 15385
     $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 15386
     HEAP32[$613 >> 2] = $20; //@line 15387
     $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 15388
     HEAP32[$614 >> 2] = $22; //@line 15389
     $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 15390
     HEAP32[$615 >> 2] = $24; //@line 15391
     $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 15392
     HEAP32[$616 >> 2] = $26; //@line 15393
     $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 15394
     HEAP32[$617 >> 2] = $28; //@line 15395
     $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 15396
     HEAP32[$618 >> 2] = $30; //@line 15397
     $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 15398
     HEAP32[$619 >> 2] = $32; //@line 15399
     $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 15400
     HEAP32[$620 >> 2] = $34; //@line 15401
     $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 15402
     HEAP32[$621 >> 2] = $36; //@line 15403
     $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 15404
     HEAP32[$622 >> 2] = $38; //@line 15405
     $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 15406
     HEAP32[$623 >> 2] = $40; //@line 15407
     $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 15408
     HEAP32[$624 >> 2] = $42; //@line 15409
     $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 15410
     HEAP32[$625 >> 2] = $44; //@line 15411
     $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 15412
     HEAP32[$626 >> 2] = $46; //@line 15413
     $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 15414
     HEAP32[$627 >> 2] = $48; //@line 15415
     $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 15416
     HEAP32[$628 >> 2] = $50; //@line 15417
     $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 15418
     HEAP32[$629 >> 2] = $52; //@line 15419
     $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 15420
     HEAP32[$630 >> 2] = $54; //@line 15421
     $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 15422
     HEAP32[$631 >> 2] = $56; //@line 15423
     $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 15424
     HEAP32[$632 >> 2] = $58; //@line 15425
     $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 15426
     HEAP32[$633 >> 2] = $60; //@line 15427
     $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 15428
     HEAP32[$634 >> 2] = $62; //@line 15429
     $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 15430
     HEAP32[$635 >> 2] = $64; //@line 15431
     $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 15432
     HEAP32[$636 >> 2] = $66; //@line 15433
     $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 15434
     HEAP32[$637 >> 2] = $68; //@line 15435
     $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 15436
     HEAP32[$638 >> 2] = $70; //@line 15437
     $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 15438
     HEAP32[$639 >> 2] = $72; //@line 15439
     $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 15440
     HEAP32[$640 >> 2] = $74; //@line 15441
     $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 15442
     HEAP32[$641 >> 2] = $76; //@line 15443
     $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 15444
     HEAP32[$642 >> 2] = $78; //@line 15445
     $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 15446
     HEAP32[$643 >> 2] = $80; //@line 15447
     $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 15448
     HEAP32[$644 >> 2] = $82; //@line 15449
     $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 15450
     HEAP32[$645 >> 2] = $84; //@line 15451
     $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 15452
     HEAP32[$646 >> 2] = $86; //@line 15453
     $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 15454
     HEAP32[$647 >> 2] = $88; //@line 15455
     $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 15456
     HEAP32[$648 >> 2] = $90; //@line 15457
     $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 15458
     HEAP32[$649 >> 2] = $92; //@line 15459
     $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 15460
     HEAP32[$650 >> 2] = $94; //@line 15461
     $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 15462
     HEAP32[$651 >> 2] = $96; //@line 15463
     $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 15464
     HEAP32[$652 >> 2] = $98; //@line 15465
     $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 15466
     HEAP32[$653 >> 2] = $100; //@line 15467
     $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 15468
     HEAP32[$654 >> 2] = $102; //@line 15469
     $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 15470
     HEAP32[$655 >> 2] = $104; //@line 15471
     $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 15472
     HEAP32[$656 >> 2] = $106; //@line 15473
     $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 15474
     HEAP32[$657 >> 2] = $108; //@line 15475
     $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 15476
     HEAP32[$658 >> 2] = $110; //@line 15477
     $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 15478
     HEAP32[$659 >> 2] = $112; //@line 15479
     $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 15480
     HEAP32[$660 >> 2] = $114; //@line 15481
     $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 15482
     HEAP32[$661 >> 2] = $116; //@line 15483
     $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 15484
     HEAP32[$662 >> 2] = $118; //@line 15485
     $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 15486
     HEAP32[$663 >> 2] = $120; //@line 15487
     $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 15488
     HEAP32[$664 >> 2] = $157; //@line 15489
     $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 15490
     HEAP32[$665 >> 2] = $124; //@line 15491
     $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 15492
     HEAP32[$666 >> 2] = $126; //@line 15493
     $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 15494
     HEAP32[$667 >> 2] = $128; //@line 15495
     $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 15496
     HEAP32[$668 >> 2] = $130; //@line 15497
     $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 15498
     HEAP32[$669 >> 2] = $132; //@line 15499
     sp = STACKTOP; //@line 15500
     return;
    }
   case 60:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 15505
     $671 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $54, $80, 11, $$1202$i) | 0; //@line 15506
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 15509
      $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 15510
      HEAP32[$672 >> 2] = $2; //@line 15511
      $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 15512
      HEAP32[$673 >> 2] = $4; //@line 15513
      $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 15514
      HEAP32[$674 >> 2] = $6; //@line 15515
      $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 15516
      HEAP32[$675 >> 2] = $8; //@line 15517
      $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 15518
      HEAP32[$676 >> 2] = $10; //@line 15519
      $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 15520
      HEAP32[$677 >> 2] = $12; //@line 15521
      $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 15522
      HEAP32[$678 >> 2] = $14; //@line 15523
      $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 15524
      HEAP32[$679 >> 2] = $16; //@line 15525
      $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 15526
      HEAP32[$680 >> 2] = $18; //@line 15527
      $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 15528
      HEAP32[$681 >> 2] = $20; //@line 15529
      $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 15530
      HEAP32[$682 >> 2] = $22; //@line 15531
      $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 15532
      HEAP32[$683 >> 2] = $24; //@line 15533
      $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 15534
      HEAP32[$684 >> 2] = $26; //@line 15535
      $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 15536
      HEAP32[$685 >> 2] = $28; //@line 15537
      $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 15538
      HEAP32[$686 >> 2] = $30; //@line 15539
      $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 15540
      HEAP32[$687 >> 2] = $32; //@line 15541
      $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 15542
      HEAP32[$688 >> 2] = $34; //@line 15543
      $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 15544
      HEAP32[$689 >> 2] = $36; //@line 15545
      $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 15546
      HEAP32[$690 >> 2] = $38; //@line 15547
      $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 15548
      HEAP32[$691 >> 2] = $40; //@line 15549
      $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 15550
      HEAP32[$692 >> 2] = $42; //@line 15551
      $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 15552
      HEAP32[$693 >> 2] = $44; //@line 15553
      $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 15554
      HEAP32[$694 >> 2] = $46; //@line 15555
      $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 15556
      HEAP32[$695 >> 2] = $48; //@line 15557
      $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 15558
      HEAP32[$696 >> 2] = $50; //@line 15559
      $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 15560
      HEAP32[$697 >> 2] = $52; //@line 15561
      $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 15562
      HEAP32[$698 >> 2] = $54; //@line 15563
      $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 15564
      HEAP32[$699 >> 2] = $56; //@line 15565
      $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 15566
      HEAP32[$700 >> 2] = $58; //@line 15567
      $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 15568
      HEAP32[$701 >> 2] = $60; //@line 15569
      $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 15570
      HEAP32[$702 >> 2] = $62; //@line 15571
      $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 15572
      HEAP32[$703 >> 2] = $64; //@line 15573
      $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 15574
      HEAP32[$704 >> 2] = $66; //@line 15575
      $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 15576
      HEAP32[$705 >> 2] = $68; //@line 15577
      $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 15578
      HEAP32[$706 >> 2] = $70; //@line 15579
      $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 15580
      HEAP32[$707 >> 2] = $72; //@line 15581
      $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 15582
      HEAP32[$708 >> 2] = $74; //@line 15583
      $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 15584
      HEAP32[$709 >> 2] = $76; //@line 15585
      $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 15586
      HEAP32[$710 >> 2] = $78; //@line 15587
      $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 15588
      HEAP32[$711 >> 2] = $80; //@line 15589
      $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 15590
      HEAP32[$712 >> 2] = $82; //@line 15591
      $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 15592
      HEAP32[$713 >> 2] = $84; //@line 15593
      $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 15594
      HEAP32[$714 >> 2] = $86; //@line 15595
      $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 15596
      HEAP32[$715 >> 2] = $88; //@line 15597
      $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 15598
      HEAP32[$716 >> 2] = $90; //@line 15599
      $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 15600
      HEAP32[$717 >> 2] = $92; //@line 15601
      $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 15602
      HEAP32[$718 >> 2] = $94; //@line 15603
      $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 15604
      HEAP32[$719 >> 2] = $96; //@line 15605
      $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 15606
      HEAP32[$720 >> 2] = $98; //@line 15607
      $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 15608
      HEAP32[$721 >> 2] = $100; //@line 15609
      $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 15610
      HEAP32[$722 >> 2] = $102; //@line 15611
      $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 15612
      HEAP32[$723 >> 2] = $104; //@line 15613
      $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 15614
      HEAP32[$724 >> 2] = $106; //@line 15615
      $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 15616
      HEAP32[$725 >> 2] = $108; //@line 15617
      $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 15618
      HEAP32[$726 >> 2] = $110; //@line 15619
      $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 15620
      HEAP32[$727 >> 2] = $112; //@line 15621
      $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 15622
      HEAP32[$728 >> 2] = $114; //@line 15623
      $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 15624
      HEAP32[$729 >> 2] = $116; //@line 15625
      $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 15626
      HEAP32[$730 >> 2] = $118; //@line 15627
      $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 15628
      HEAP32[$731 >> 2] = $120; //@line 15629
      $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 15630
      HEAP32[$732 >> 2] = $157; //@line 15631
      $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 15632
      HEAP32[$733 >> 2] = $124; //@line 15633
      $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 15634
      HEAP32[$734 >> 2] = $126; //@line 15635
      $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 15636
      HEAP32[$735 >> 2] = $128; //@line 15637
      $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 15638
      HEAP32[$736 >> 2] = $130; //@line 15639
      $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 15640
      HEAP32[$737 >> 2] = $132; //@line 15641
      sp = STACKTOP; //@line 15642
      return;
     }
     HEAP8[___async_retval >> 0] = $671; //@line 15646
     ___async_unwind = 0; //@line 15647
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 15648
     $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 15649
     HEAP32[$672 >> 2] = $2; //@line 15650
     $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 15651
     HEAP32[$673 >> 2] = $4; //@line 15652
     $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 15653
     HEAP32[$674 >> 2] = $6; //@line 15654
     $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 15655
     HEAP32[$675 >> 2] = $8; //@line 15656
     $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 15657
     HEAP32[$676 >> 2] = $10; //@line 15658
     $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 15659
     HEAP32[$677 >> 2] = $12; //@line 15660
     $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 15661
     HEAP32[$678 >> 2] = $14; //@line 15662
     $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 15663
     HEAP32[$679 >> 2] = $16; //@line 15664
     $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 15665
     HEAP32[$680 >> 2] = $18; //@line 15666
     $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 15667
     HEAP32[$681 >> 2] = $20; //@line 15668
     $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 15669
     HEAP32[$682 >> 2] = $22; //@line 15670
     $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 15671
     HEAP32[$683 >> 2] = $24; //@line 15672
     $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 15673
     HEAP32[$684 >> 2] = $26; //@line 15674
     $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 15675
     HEAP32[$685 >> 2] = $28; //@line 15676
     $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 15677
     HEAP32[$686 >> 2] = $30; //@line 15678
     $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 15679
     HEAP32[$687 >> 2] = $32; //@line 15680
     $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 15681
     HEAP32[$688 >> 2] = $34; //@line 15682
     $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 15683
     HEAP32[$689 >> 2] = $36; //@line 15684
     $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 15685
     HEAP32[$690 >> 2] = $38; //@line 15686
     $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 15687
     HEAP32[$691 >> 2] = $40; //@line 15688
     $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 15689
     HEAP32[$692 >> 2] = $42; //@line 15690
     $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 15691
     HEAP32[$693 >> 2] = $44; //@line 15692
     $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 15693
     HEAP32[$694 >> 2] = $46; //@line 15694
     $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 15695
     HEAP32[$695 >> 2] = $48; //@line 15696
     $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 15697
     HEAP32[$696 >> 2] = $50; //@line 15698
     $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 15699
     HEAP32[$697 >> 2] = $52; //@line 15700
     $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 15701
     HEAP32[$698 >> 2] = $54; //@line 15702
     $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 15703
     HEAP32[$699 >> 2] = $56; //@line 15704
     $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 15705
     HEAP32[$700 >> 2] = $58; //@line 15706
     $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 15707
     HEAP32[$701 >> 2] = $60; //@line 15708
     $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 15709
     HEAP32[$702 >> 2] = $62; //@line 15710
     $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 15711
     HEAP32[$703 >> 2] = $64; //@line 15712
     $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 15713
     HEAP32[$704 >> 2] = $66; //@line 15714
     $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 15715
     HEAP32[$705 >> 2] = $68; //@line 15716
     $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 15717
     HEAP32[$706 >> 2] = $70; //@line 15718
     $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 15719
     HEAP32[$707 >> 2] = $72; //@line 15720
     $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 15721
     HEAP32[$708 >> 2] = $74; //@line 15722
     $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 15723
     HEAP32[$709 >> 2] = $76; //@line 15724
     $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 15725
     HEAP32[$710 >> 2] = $78; //@line 15726
     $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 15727
     HEAP32[$711 >> 2] = $80; //@line 15728
     $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 15729
     HEAP32[$712 >> 2] = $82; //@line 15730
     $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 15731
     HEAP32[$713 >> 2] = $84; //@line 15732
     $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 15733
     HEAP32[$714 >> 2] = $86; //@line 15734
     $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 15735
     HEAP32[$715 >> 2] = $88; //@line 15736
     $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 15737
     HEAP32[$716 >> 2] = $90; //@line 15738
     $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 15739
     HEAP32[$717 >> 2] = $92; //@line 15740
     $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 15741
     HEAP32[$718 >> 2] = $94; //@line 15742
     $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 15743
     HEAP32[$719 >> 2] = $96; //@line 15744
     $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 15745
     HEAP32[$720 >> 2] = $98; //@line 15746
     $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 15747
     HEAP32[$721 >> 2] = $100; //@line 15748
     $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 15749
     HEAP32[$722 >> 2] = $102; //@line 15750
     $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 15751
     HEAP32[$723 >> 2] = $104; //@line 15752
     $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 15753
     HEAP32[$724 >> 2] = $106; //@line 15754
     $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 15755
     HEAP32[$725 >> 2] = $108; //@line 15756
     $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 15757
     HEAP32[$726 >> 2] = $110; //@line 15758
     $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 15759
     HEAP32[$727 >> 2] = $112; //@line 15760
     $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 15761
     HEAP32[$728 >> 2] = $114; //@line 15762
     $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 15763
     HEAP32[$729 >> 2] = $116; //@line 15764
     $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 15765
     HEAP32[$730 >> 2] = $118; //@line 15766
     $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 15767
     HEAP32[$731 >> 2] = $120; //@line 15768
     $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 15769
     HEAP32[$732 >> 2] = $157; //@line 15770
     $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 15771
     HEAP32[$733 >> 2] = $124; //@line 15772
     $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 15773
     HEAP32[$734 >> 2] = $126; //@line 15774
     $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 15775
     HEAP32[$735 >> 2] = $128; //@line 15776
     $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 15777
     HEAP32[$736 >> 2] = $130; //@line 15778
     $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 15779
     HEAP32[$737 >> 2] = $132; //@line 15780
     sp = STACKTOP; //@line 15781
     return;
    }
   case 65:
    {
     _mbed_tracef(2, 3844, 5067, $68); //@line 15786
     break L2;
     break;
    }
   case 69:
    {
     $755 = HEAP32[$38 >> 2] | 0; //@line 15791
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 15794
     $758 = _sn_coap_parser_options_parse_multiple_options($112, $88, $175, $755 + 64 | 0, $755 + 10 | 0, 15, $$1202$i) | 0; //@line 15795
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 15798
      $759 = $ReallocAsyncCtx6 + 4 | 0; //@line 15799
      HEAP32[$759 >> 2] = $2; //@line 15800
      $760 = $ReallocAsyncCtx6 + 8 | 0; //@line 15801
      HEAP32[$760 >> 2] = $4; //@line 15802
      $761 = $ReallocAsyncCtx6 + 12 | 0; //@line 15803
      HEAP32[$761 >> 2] = $6; //@line 15804
      $762 = $ReallocAsyncCtx6 + 16 | 0; //@line 15805
      HEAP32[$762 >> 2] = $8; //@line 15806
      $763 = $ReallocAsyncCtx6 + 20 | 0; //@line 15807
      HEAP32[$763 >> 2] = $10; //@line 15808
      $764 = $ReallocAsyncCtx6 + 24 | 0; //@line 15809
      HEAP32[$764 >> 2] = $12; //@line 15810
      $765 = $ReallocAsyncCtx6 + 28 | 0; //@line 15811
      HEAP32[$765 >> 2] = $14; //@line 15812
      $766 = $ReallocAsyncCtx6 + 32 | 0; //@line 15813
      HEAP32[$766 >> 2] = $16; //@line 15814
      $767 = $ReallocAsyncCtx6 + 36 | 0; //@line 15815
      HEAP32[$767 >> 2] = $18; //@line 15816
      $768 = $ReallocAsyncCtx6 + 40 | 0; //@line 15817
      HEAP32[$768 >> 2] = $20; //@line 15818
      $769 = $ReallocAsyncCtx6 + 44 | 0; //@line 15819
      HEAP32[$769 >> 2] = $22; //@line 15820
      $770 = $ReallocAsyncCtx6 + 48 | 0; //@line 15821
      HEAP32[$770 >> 2] = $24; //@line 15822
      $771 = $ReallocAsyncCtx6 + 52 | 0; //@line 15823
      HEAP32[$771 >> 2] = $26; //@line 15824
      $772 = $ReallocAsyncCtx6 + 56 | 0; //@line 15825
      HEAP32[$772 >> 2] = $28; //@line 15826
      $773 = $ReallocAsyncCtx6 + 60 | 0; //@line 15827
      HEAP32[$773 >> 2] = $30; //@line 15828
      $774 = $ReallocAsyncCtx6 + 64 | 0; //@line 15829
      HEAP32[$774 >> 2] = $32; //@line 15830
      $775 = $ReallocAsyncCtx6 + 68 | 0; //@line 15831
      HEAP32[$775 >> 2] = $34; //@line 15832
      $776 = $ReallocAsyncCtx6 + 72 | 0; //@line 15833
      HEAP32[$776 >> 2] = $36; //@line 15834
      $777 = $ReallocAsyncCtx6 + 76 | 0; //@line 15835
      HEAP32[$777 >> 2] = $38; //@line 15836
      $778 = $ReallocAsyncCtx6 + 80 | 0; //@line 15837
      HEAP32[$778 >> 2] = $40; //@line 15838
      $779 = $ReallocAsyncCtx6 + 84 | 0; //@line 15839
      HEAP32[$779 >> 2] = $42; //@line 15840
      $780 = $ReallocAsyncCtx6 + 88 | 0; //@line 15841
      HEAP32[$780 >> 2] = $44; //@line 15842
      $781 = $ReallocAsyncCtx6 + 92 | 0; //@line 15843
      HEAP32[$781 >> 2] = $46; //@line 15844
      $782 = $ReallocAsyncCtx6 + 96 | 0; //@line 15845
      HEAP32[$782 >> 2] = $48; //@line 15846
      $783 = $ReallocAsyncCtx6 + 100 | 0; //@line 15847
      HEAP32[$783 >> 2] = $50; //@line 15848
      $784 = $ReallocAsyncCtx6 + 104 | 0; //@line 15849
      HEAP32[$784 >> 2] = $52; //@line 15850
      $785 = $ReallocAsyncCtx6 + 108 | 0; //@line 15851
      HEAP32[$785 >> 2] = $54; //@line 15852
      $786 = $ReallocAsyncCtx6 + 112 | 0; //@line 15853
      HEAP32[$786 >> 2] = $56; //@line 15854
      $787 = $ReallocAsyncCtx6 + 116 | 0; //@line 15855
      HEAP32[$787 >> 2] = $58; //@line 15856
      $788 = $ReallocAsyncCtx6 + 120 | 0; //@line 15857
      HEAP32[$788 >> 2] = $60; //@line 15858
      $789 = $ReallocAsyncCtx6 + 124 | 0; //@line 15859
      HEAP32[$789 >> 2] = $62; //@line 15860
      $790 = $ReallocAsyncCtx6 + 128 | 0; //@line 15861
      HEAP32[$790 >> 2] = $64; //@line 15862
      $791 = $ReallocAsyncCtx6 + 132 | 0; //@line 15863
      HEAP32[$791 >> 2] = $66; //@line 15864
      $792 = $ReallocAsyncCtx6 + 136 | 0; //@line 15865
      HEAP32[$792 >> 2] = $68; //@line 15866
      $793 = $ReallocAsyncCtx6 + 140 | 0; //@line 15867
      HEAP32[$793 >> 2] = $70; //@line 15868
      $794 = $ReallocAsyncCtx6 + 144 | 0; //@line 15869
      HEAP32[$794 >> 2] = $72; //@line 15870
      $795 = $ReallocAsyncCtx6 + 148 | 0; //@line 15871
      HEAP32[$795 >> 2] = $74; //@line 15872
      $796 = $ReallocAsyncCtx6 + 152 | 0; //@line 15873
      HEAP32[$796 >> 2] = $76; //@line 15874
      $797 = $ReallocAsyncCtx6 + 156 | 0; //@line 15875
      HEAP32[$797 >> 2] = $78; //@line 15876
      $798 = $ReallocAsyncCtx6 + 160 | 0; //@line 15877
      HEAP32[$798 >> 2] = $80; //@line 15878
      $799 = $ReallocAsyncCtx6 + 164 | 0; //@line 15879
      HEAP32[$799 >> 2] = $82; //@line 15880
      $800 = $ReallocAsyncCtx6 + 168 | 0; //@line 15881
      HEAP32[$800 >> 2] = $84; //@line 15882
      $801 = $ReallocAsyncCtx6 + 172 | 0; //@line 15883
      HEAP32[$801 >> 2] = $86; //@line 15884
      $802 = $ReallocAsyncCtx6 + 176 | 0; //@line 15885
      HEAP32[$802 >> 2] = $88; //@line 15886
      $803 = $ReallocAsyncCtx6 + 180 | 0; //@line 15887
      HEAP32[$803 >> 2] = $90; //@line 15888
      $804 = $ReallocAsyncCtx6 + 184 | 0; //@line 15889
      HEAP32[$804 >> 2] = $92; //@line 15890
      $805 = $ReallocAsyncCtx6 + 188 | 0; //@line 15891
      HEAP32[$805 >> 2] = $94; //@line 15892
      $806 = $ReallocAsyncCtx6 + 192 | 0; //@line 15893
      HEAP32[$806 >> 2] = $96; //@line 15894
      $807 = $ReallocAsyncCtx6 + 196 | 0; //@line 15895
      HEAP32[$807 >> 2] = $98; //@line 15896
      $808 = $ReallocAsyncCtx6 + 200 | 0; //@line 15897
      HEAP32[$808 >> 2] = $100; //@line 15898
      $809 = $ReallocAsyncCtx6 + 204 | 0; //@line 15899
      HEAP32[$809 >> 2] = $102; //@line 15900
      $810 = $ReallocAsyncCtx6 + 208 | 0; //@line 15901
      HEAP32[$810 >> 2] = $104; //@line 15902
      $811 = $ReallocAsyncCtx6 + 212 | 0; //@line 15903
      HEAP32[$811 >> 2] = $106; //@line 15904
      $812 = $ReallocAsyncCtx6 + 216 | 0; //@line 15905
      HEAP32[$812 >> 2] = $108; //@line 15906
      $813 = $ReallocAsyncCtx6 + 220 | 0; //@line 15907
      HEAP32[$813 >> 2] = $110; //@line 15908
      $814 = $ReallocAsyncCtx6 + 224 | 0; //@line 15909
      HEAP32[$814 >> 2] = $112; //@line 15910
      $815 = $ReallocAsyncCtx6 + 228 | 0; //@line 15911
      HEAP32[$815 >> 2] = $114; //@line 15912
      $816 = $ReallocAsyncCtx6 + 232 | 0; //@line 15913
      HEAP32[$816 >> 2] = $116; //@line 15914
      $817 = $ReallocAsyncCtx6 + 236 | 0; //@line 15915
      HEAP32[$817 >> 2] = $118; //@line 15916
      $818 = $ReallocAsyncCtx6 + 240 | 0; //@line 15917
      HEAP32[$818 >> 2] = $120; //@line 15918
      $819 = $ReallocAsyncCtx6 + 244 | 0; //@line 15919
      HEAP32[$819 >> 2] = $157; //@line 15920
      $820 = $ReallocAsyncCtx6 + 248 | 0; //@line 15921
      HEAP32[$820 >> 2] = $124; //@line 15922
      $821 = $ReallocAsyncCtx6 + 252 | 0; //@line 15923
      HEAP32[$821 >> 2] = $126; //@line 15924
      $822 = $ReallocAsyncCtx6 + 256 | 0; //@line 15925
      HEAP32[$822 >> 2] = $128; //@line 15926
      $823 = $ReallocAsyncCtx6 + 260 | 0; //@line 15927
      HEAP32[$823 >> 2] = $130; //@line 15928
      $824 = $ReallocAsyncCtx6 + 264 | 0; //@line 15929
      HEAP32[$824 >> 2] = $132; //@line 15930
      sp = STACKTOP; //@line 15931
      return;
     }
     HEAP8[___async_retval >> 0] = $758; //@line 15935
     ___async_unwind = 0; //@line 15936
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 15937
     $759 = $ReallocAsyncCtx6 + 4 | 0; //@line 15938
     HEAP32[$759 >> 2] = $2; //@line 15939
     $760 = $ReallocAsyncCtx6 + 8 | 0; //@line 15940
     HEAP32[$760 >> 2] = $4; //@line 15941
     $761 = $ReallocAsyncCtx6 + 12 | 0; //@line 15942
     HEAP32[$761 >> 2] = $6; //@line 15943
     $762 = $ReallocAsyncCtx6 + 16 | 0; //@line 15944
     HEAP32[$762 >> 2] = $8; //@line 15945
     $763 = $ReallocAsyncCtx6 + 20 | 0; //@line 15946
     HEAP32[$763 >> 2] = $10; //@line 15947
     $764 = $ReallocAsyncCtx6 + 24 | 0; //@line 15948
     HEAP32[$764 >> 2] = $12; //@line 15949
     $765 = $ReallocAsyncCtx6 + 28 | 0; //@line 15950
     HEAP32[$765 >> 2] = $14; //@line 15951
     $766 = $ReallocAsyncCtx6 + 32 | 0; //@line 15952
     HEAP32[$766 >> 2] = $16; //@line 15953
     $767 = $ReallocAsyncCtx6 + 36 | 0; //@line 15954
     HEAP32[$767 >> 2] = $18; //@line 15955
     $768 = $ReallocAsyncCtx6 + 40 | 0; //@line 15956
     HEAP32[$768 >> 2] = $20; //@line 15957
     $769 = $ReallocAsyncCtx6 + 44 | 0; //@line 15958
     HEAP32[$769 >> 2] = $22; //@line 15959
     $770 = $ReallocAsyncCtx6 + 48 | 0; //@line 15960
     HEAP32[$770 >> 2] = $24; //@line 15961
     $771 = $ReallocAsyncCtx6 + 52 | 0; //@line 15962
     HEAP32[$771 >> 2] = $26; //@line 15963
     $772 = $ReallocAsyncCtx6 + 56 | 0; //@line 15964
     HEAP32[$772 >> 2] = $28; //@line 15965
     $773 = $ReallocAsyncCtx6 + 60 | 0; //@line 15966
     HEAP32[$773 >> 2] = $30; //@line 15967
     $774 = $ReallocAsyncCtx6 + 64 | 0; //@line 15968
     HEAP32[$774 >> 2] = $32; //@line 15969
     $775 = $ReallocAsyncCtx6 + 68 | 0; //@line 15970
     HEAP32[$775 >> 2] = $34; //@line 15971
     $776 = $ReallocAsyncCtx6 + 72 | 0; //@line 15972
     HEAP32[$776 >> 2] = $36; //@line 15973
     $777 = $ReallocAsyncCtx6 + 76 | 0; //@line 15974
     HEAP32[$777 >> 2] = $38; //@line 15975
     $778 = $ReallocAsyncCtx6 + 80 | 0; //@line 15976
     HEAP32[$778 >> 2] = $40; //@line 15977
     $779 = $ReallocAsyncCtx6 + 84 | 0; //@line 15978
     HEAP32[$779 >> 2] = $42; //@line 15979
     $780 = $ReallocAsyncCtx6 + 88 | 0; //@line 15980
     HEAP32[$780 >> 2] = $44; //@line 15981
     $781 = $ReallocAsyncCtx6 + 92 | 0; //@line 15982
     HEAP32[$781 >> 2] = $46; //@line 15983
     $782 = $ReallocAsyncCtx6 + 96 | 0; //@line 15984
     HEAP32[$782 >> 2] = $48; //@line 15985
     $783 = $ReallocAsyncCtx6 + 100 | 0; //@line 15986
     HEAP32[$783 >> 2] = $50; //@line 15987
     $784 = $ReallocAsyncCtx6 + 104 | 0; //@line 15988
     HEAP32[$784 >> 2] = $52; //@line 15989
     $785 = $ReallocAsyncCtx6 + 108 | 0; //@line 15990
     HEAP32[$785 >> 2] = $54; //@line 15991
     $786 = $ReallocAsyncCtx6 + 112 | 0; //@line 15992
     HEAP32[$786 >> 2] = $56; //@line 15993
     $787 = $ReallocAsyncCtx6 + 116 | 0; //@line 15994
     HEAP32[$787 >> 2] = $58; //@line 15995
     $788 = $ReallocAsyncCtx6 + 120 | 0; //@line 15996
     HEAP32[$788 >> 2] = $60; //@line 15997
     $789 = $ReallocAsyncCtx6 + 124 | 0; //@line 15998
     HEAP32[$789 >> 2] = $62; //@line 15999
     $790 = $ReallocAsyncCtx6 + 128 | 0; //@line 16000
     HEAP32[$790 >> 2] = $64; //@line 16001
     $791 = $ReallocAsyncCtx6 + 132 | 0; //@line 16002
     HEAP32[$791 >> 2] = $66; //@line 16003
     $792 = $ReallocAsyncCtx6 + 136 | 0; //@line 16004
     HEAP32[$792 >> 2] = $68; //@line 16005
     $793 = $ReallocAsyncCtx6 + 140 | 0; //@line 16006
     HEAP32[$793 >> 2] = $70; //@line 16007
     $794 = $ReallocAsyncCtx6 + 144 | 0; //@line 16008
     HEAP32[$794 >> 2] = $72; //@line 16009
     $795 = $ReallocAsyncCtx6 + 148 | 0; //@line 16010
     HEAP32[$795 >> 2] = $74; //@line 16011
     $796 = $ReallocAsyncCtx6 + 152 | 0; //@line 16012
     HEAP32[$796 >> 2] = $76; //@line 16013
     $797 = $ReallocAsyncCtx6 + 156 | 0; //@line 16014
     HEAP32[$797 >> 2] = $78; //@line 16015
     $798 = $ReallocAsyncCtx6 + 160 | 0; //@line 16016
     HEAP32[$798 >> 2] = $80; //@line 16017
     $799 = $ReallocAsyncCtx6 + 164 | 0; //@line 16018
     HEAP32[$799 >> 2] = $82; //@line 16019
     $800 = $ReallocAsyncCtx6 + 168 | 0; //@line 16020
     HEAP32[$800 >> 2] = $84; //@line 16021
     $801 = $ReallocAsyncCtx6 + 172 | 0; //@line 16022
     HEAP32[$801 >> 2] = $86; //@line 16023
     $802 = $ReallocAsyncCtx6 + 176 | 0; //@line 16024
     HEAP32[$802 >> 2] = $88; //@line 16025
     $803 = $ReallocAsyncCtx6 + 180 | 0; //@line 16026
     HEAP32[$803 >> 2] = $90; //@line 16027
     $804 = $ReallocAsyncCtx6 + 184 | 0; //@line 16028
     HEAP32[$804 >> 2] = $92; //@line 16029
     $805 = $ReallocAsyncCtx6 + 188 | 0; //@line 16030
     HEAP32[$805 >> 2] = $94; //@line 16031
     $806 = $ReallocAsyncCtx6 + 192 | 0; //@line 16032
     HEAP32[$806 >> 2] = $96; //@line 16033
     $807 = $ReallocAsyncCtx6 + 196 | 0; //@line 16034
     HEAP32[$807 >> 2] = $98; //@line 16035
     $808 = $ReallocAsyncCtx6 + 200 | 0; //@line 16036
     HEAP32[$808 >> 2] = $100; //@line 16037
     $809 = $ReallocAsyncCtx6 + 204 | 0; //@line 16038
     HEAP32[$809 >> 2] = $102; //@line 16039
     $810 = $ReallocAsyncCtx6 + 208 | 0; //@line 16040
     HEAP32[$810 >> 2] = $104; //@line 16041
     $811 = $ReallocAsyncCtx6 + 212 | 0; //@line 16042
     HEAP32[$811 >> 2] = $106; //@line 16043
     $812 = $ReallocAsyncCtx6 + 216 | 0; //@line 16044
     HEAP32[$812 >> 2] = $108; //@line 16045
     $813 = $ReallocAsyncCtx6 + 220 | 0; //@line 16046
     HEAP32[$813 >> 2] = $110; //@line 16047
     $814 = $ReallocAsyncCtx6 + 224 | 0; //@line 16048
     HEAP32[$814 >> 2] = $112; //@line 16049
     $815 = $ReallocAsyncCtx6 + 228 | 0; //@line 16050
     HEAP32[$815 >> 2] = $114; //@line 16051
     $816 = $ReallocAsyncCtx6 + 232 | 0; //@line 16052
     HEAP32[$816 >> 2] = $116; //@line 16053
     $817 = $ReallocAsyncCtx6 + 236 | 0; //@line 16054
     HEAP32[$817 >> 2] = $118; //@line 16055
     $818 = $ReallocAsyncCtx6 + 240 | 0; //@line 16056
     HEAP32[$818 >> 2] = $120; //@line 16057
     $819 = $ReallocAsyncCtx6 + 244 | 0; //@line 16058
     HEAP32[$819 >> 2] = $157; //@line 16059
     $820 = $ReallocAsyncCtx6 + 248 | 0; //@line 16060
     HEAP32[$820 >> 2] = $124; //@line 16061
     $821 = $ReallocAsyncCtx6 + 252 | 0; //@line 16062
     HEAP32[$821 >> 2] = $126; //@line 16063
     $822 = $ReallocAsyncCtx6 + 256 | 0; //@line 16064
     HEAP32[$822 >> 2] = $128; //@line 16065
     $823 = $ReallocAsyncCtx6 + 260 | 0; //@line 16066
     HEAP32[$823 >> 2] = $130; //@line 16067
     $824 = $ReallocAsyncCtx6 + 264 | 0; //@line 16068
     HEAP32[$824 >> 2] = $132; //@line 16069
     sp = STACKTOP; //@line 16070
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3844, 5193, $132); //@line 16075
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3844, 5254, $102); //@line 16080
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3844, 5315, $48); //@line 16085
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3844, 5376, $20); //@line 16090
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3844, 5436, $12); //@line 16095
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3844, 5496, $84); //@line 16100
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $6 | 0) >= ($16 | 0)) {
      $936 = ___async_retval; //@line 16109
      HEAP32[$936 >> 2] = $22; //@line 16110
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 16116
      HEAP32[$88 >> 2] = $926; //@line 16117
      $927 = $926; //@line 16118
      $929 = $6 - $927 + $16 | 0; //@line 16120
      HEAP16[$72 + 24 >> 1] = $929; //@line 16123
      if ($929 & 65535 | 0) {
       HEAP32[$72 + 36 >> 2] = $927; //@line 16128
       $936 = ___async_retval; //@line 16129
       HEAP32[$936 >> 2] = $22; //@line 16130
       return;
      }
     } else {
      _mbed_tracef(2, 3844, 5543, $26); //@line 16134
     }
     HEAP32[$72 + 4 >> 2] = 1; //@line 16137
     $936 = ___async_retval; //@line 16138
     HEAP32[$936 >> 2] = $22; //@line 16139
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3844, 5129, $24); //@line 16145
  }
 } while (0);
 HEAP32[$72 + 4 >> 2] = 1; //@line 16149
 $936 = ___async_retval; //@line 16150
 HEAP32[$936 >> 2] = $22; //@line 16151
 return;
}
function _sn_coap_parser__async_cb_163($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem28$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $260 = 0, $261 = 0, $266 = 0, $269 = 0, $272 = 0, $273 = 0, $278 = 0, $28 = 0, $281 = 0, $285 = 0, $288 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $369 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $439 = 0, $44 = 0, $442 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $519 = 0, $52 = 0, $520 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $594 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $603 = 0, $606 = 0, $608 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $749 = 0, $752 = 0, $753 = 0, $758 = 0, $76 = 0, $761 = 0, $763 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $845 = 0, $848 = 0, $852 = 0, $855 = 0, $856 = 0, $86 = 0, $861 = 0, $864 = 0, $868 = 0, $871 = 0, $872 = 0, $877 = 0, $88 = 0, $880 = 0, $884 = 0, $885 = 0, $890 = 0, $891 = 0, $896 = 0, $899 = 0, $90 = 0, $905 = 0, $906 = 0, $911 = 0, $912 = 0, $917 = 0, $92 = 0, $920 = 0, $924 = 0, $925 = 0, $933 = 0, $934 = 0, $936 = 0, $94 = 0, $943 = 0, $944 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $278$looptemp = 0, $603$looptemp = 0, $758$looptemp = 0, $845$looptemp = 0, $861$looptemp = 0, $877$looptemp = 0, $896$looptemp = 0, $917$looptemp = 0, $266$looptemp = 0;
 sp = STACKTOP; //@line 6531
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6533
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6535
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6537
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6539
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6541
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6543
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6545
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6547
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6549
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6551
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6553
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6555
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6557
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6559
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6561
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6563
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6565
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6567
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6569
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6571
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 6573
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 6575
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 6577
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 6579
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 6581
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 6583
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 6585
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 6587
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 6589
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 6591
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 6593
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 6595
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 6597
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 6599
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 6601
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 6603
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 6605
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 6607
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 6609
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 6611
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 6613
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 6615
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 6617
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 6619
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 6621
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 6623
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 6625
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 6627
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 6629
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 6631
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 6633
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 6635
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 6637
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 6639
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 6641
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 6643
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 6645
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 6647
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 6649
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 6651
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 6653
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 6655
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 6657
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 6659
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 6661
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 6663
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 6665
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 6667
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6669
 HEAP32[(HEAP32[$42 >> 2] | 0) + 44 >> 2] = $AsyncRetVal; //@line 6672
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3844, 4474, $132); //@line 6676
  } else {
   _memcpy($AsyncRetVal | 0, $34 | 0, $26 | 0) | 0; //@line 6678
   HEAP32[$92 >> 2] = $34 + $26; //@line 6680
   $$reg2mem28$0 = $126; //@line 6681
   L5 : while (1) {
    $924 = HEAP32[$118 >> 2] | 0; //@line 6683
    $925 = $924 - $6 | 0; //@line 6684
    $141 = $924; //@line 6687
    if (($925 | 0) > ($16 | 0)) {
     break L2;
    }
    if (!(($16 - $925 & 65535) << 16 >> 16)) {
     label = 108; //@line 6694
     break;
    }
    $trunc277$i = HEAP8[$141 >> 0] | 0; //@line 6697
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 108; //@line 6700
     break;
    }
    $144 = $trunc277$i & 15; //@line 6704
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 6705
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 6710
      break L5;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$141 + 1 >> 0] | 0; //@line 6718
      $$sink214$i = 13; //@line 6718
      $$sink3$i = 1; //@line 6718
      label = 8; //@line 6719
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$141 + 1 >> 0] << 8) + 269 | 0; //@line 6731
      $$sink214$i = HEAPU8[$141 + 2 >> 0] | 0; //@line 6731
      $$sink3$i = 2; //@line 6731
      label = 8; //@line 6732
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 6736
      $163 = $141; //@line 6736
      $944 = $924; //@line 6736
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 6740
     $158 = $141 + $$sink3$i | 0; //@line 6742
     HEAP32[$92 >> 2] = $158; //@line 6743
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 6745
     $163 = $158; //@line 6745
     $944 = $158; //@line 6745
    }
    $161 = $$1$i + ($$reg2mem28$0 & 255) | 0; //@line 6748
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 6752
      break L5;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$163 + 1 >> 0] | 0; //@line 6760
      $$sink216$i = 13; //@line 6760
      $$sink8$i = 1; //@line 6760
      label = 13; //@line 6761
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$163 + 1 >> 0] << 8) + 269 | 0; //@line 6773
      $$sink216$i = HEAPU8[$163 + 2 >> 0] | 0; //@line 6773
      $$sink8$i = 2; //@line 6773
      label = 13; //@line 6774
      break;
     }
    default:
     {
      $$1202$in$i = $144; //@line 6778
      $178 = $944; //@line 6778
      $245 = $163; //@line 6778
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 6782
     $175 = $163 + $$sink8$i | 0; //@line 6784
     HEAP32[$92 >> 2] = $175; //@line 6785
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 6787
     $178 = $175; //@line 6787
     $245 = $175; //@line 6787
    }
    $$1202$i = $$1202$in$i & 65535; //@line 6789
    $179 = $30 - $178 & 65535; //@line 6791
    $trunc$i = $161 & 65535; //@line 6792
    L22 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 63; //@line 6796
       break L5;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$42 >> 2] | 0)) {
        label = 16; //@line 6804
        break L5;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 6809
         break L5;
         break;
        }
       case 4:
        {
         label = 40; //@line 6814
         break L5;
         break;
        }
       case 3:
        {
         label = 43; //@line 6819
         break L5;
         break;
        }
       case 8:
        {
         label = 49; //@line 6824
         break L5;
         break;
        }
       case 20:
        {
         label = 60; //@line 6829
         break L5;
         break;
        }
       case 11:
        {
         label = 63; //@line 6834
         break L5;
         break;
        }
       case 15:
        {
         label = 72; //@line 6839
         break L5;
         break;
        }
       case 12:
        {
         break L22;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 6850
          break L5;
         }
         $272 = $245 + 1 | 0; //@line 6853
         HEAP32[$92 >> 2] = $272; //@line 6854
         $273 = $$1202$in$i & 255; //@line 6855
         if (!($273 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 6858
         } else {
          $$045$i221$i = $273; //@line 6860
          $$06$i220$i = 0; //@line 6860
          $278 = $272; //@line 6860
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 6862
           $278$looptemp = $278;
           $278 = $278 + 1 | 0; //@line 6864
           HEAP32[$92 >> 2] = $278; //@line 6865
           $281 = $$06$i220$i << 8 | HEAPU8[$278$looptemp >> 0]; //@line 6868
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $281; //@line 6871
            break;
           } else {
            $$06$i220$i = $281; //@line 6874
           }
          }
         }
         HEAP32[(HEAP32[$42 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 6880
         $$reg2mem28$0 = $161; //@line 6881
         continue L5;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 56; //@line 6888
          break L5;
         }
         $594 = (HEAP32[$42 >> 2] | 0) + 28 | 0; //@line 6892
         if ((HEAP32[$594 >> 2] | 0) != -1) {
          label = 56; //@line 6896
          break L5;
         }
         $597 = $245 + 1 | 0; //@line 6899
         HEAP32[$92 >> 2] = $597; //@line 6900
         $598 = $$1202$in$i & 255; //@line 6901
         if (!($598 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 6904
         } else {
          $$045$i263$i = $598; //@line 6906
          $$06$i262$i = 0; //@line 6906
          $603 = $597; //@line 6906
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 6908
           $603$looptemp = $603;
           $603 = $603 + 1 | 0; //@line 6910
           HEAP32[$92 >> 2] = $603; //@line 6911
           $606 = $$06$i262$i << 8 | HEAPU8[$603$looptemp >> 0]; //@line 6914
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $606; //@line 6917
            break;
           } else {
            $$06$i262$i = $606; //@line 6920
           }
          }
         }
         HEAP32[$594 >> 2] = $$0$lcssa$i265$i; //@line 6924
         $$reg2mem28$0 = $161; //@line 6925
         continue L5;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 68; //@line 6932
          break L5;
         }
         $749 = (HEAP32[$42 >> 2] | 0) + 32 | 0; //@line 6936
         if ((HEAP32[$749 >> 2] | 0) != -1) {
          label = 68; //@line 6940
          break L5;
         }
         $752 = $245 + 1 | 0; //@line 6943
         HEAP32[$92 >> 2] = $752; //@line 6944
         $753 = $$1202$in$i & 255; //@line 6945
         if (!($753 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 6948
         } else {
          $$045$i270$i = $753; //@line 6950
          $$06$i269$i = 0; //@line 6950
          $758 = $752; //@line 6950
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 6952
           $758$looptemp = $758;
           $758 = $758 + 1 | 0; //@line 6954
           HEAP32[$92 >> 2] = $758; //@line 6955
           $761 = $$06$i269$i << 8 | HEAPU8[$758$looptemp >> 0]; //@line 6958
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $761; //@line 6961
            break;
           } else {
            $$06$i269$i = $761; //@line 6964
           }
          }
         }
         HEAP32[$749 >> 2] = $$0$lcssa$i272$i; //@line 6968
         $$reg2mem28$0 = $161; //@line 6969
         continue L5;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 77; //@line 6976
          break L5;
         }
         $836 = (HEAP32[$42 >> 2] | 0) + 40 | 0; //@line 6980
         if ((HEAP32[$836 >> 2] | 0) != -1) {
          label = 77; //@line 6984
          break L5;
         }
         $839 = $245 + 1 | 0; //@line 6987
         HEAP32[$92 >> 2] = $839; //@line 6988
         $840 = $$1202$in$i & 255; //@line 6989
         if (!($840 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 6992
         } else {
          $$045$i256$i = $840; //@line 6994
          $$06$i255$i = 0; //@line 6994
          $845 = $839; //@line 6994
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 6996
           $845$looptemp = $845;
           $845 = $845 + 1 | 0; //@line 6998
           HEAP32[$92 >> 2] = $845; //@line 6999
           $848 = $$06$i255$i << 8 | HEAPU8[$845$looptemp >> 0]; //@line 7002
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $848; //@line 7005
            break;
           } else {
            $$06$i255$i = $848; //@line 7008
           }
          }
         }
         HEAP32[$836 >> 2] = $$0$lcssa$i258$i; //@line 7012
         $$reg2mem28$0 = $161; //@line 7013
         continue L5;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 83; //@line 7020
          break L5;
         }
         $852 = (HEAP32[$42 >> 2] | 0) + 36 | 0; //@line 7024
         if ((HEAP32[$852 >> 2] | 0) != -1) {
          label = 83; //@line 7028
          break L5;
         }
         $855 = $245 + 1 | 0; //@line 7031
         HEAP32[$92 >> 2] = $855; //@line 7032
         $856 = $$1202$in$i & 255; //@line 7033
         if (!($856 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 7036
         } else {
          $$045$i249$i = $856; //@line 7038
          $$06$i248$i = 0; //@line 7038
          $861 = $855; //@line 7038
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 7040
           $861$looptemp = $861;
           $861 = $861 + 1 | 0; //@line 7042
           HEAP32[$92 >> 2] = $861; //@line 7043
           $864 = $$06$i248$i << 8 | HEAPU8[$861$looptemp >> 0]; //@line 7046
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $864; //@line 7049
            break;
           } else {
            $$06$i248$i = $864; //@line 7052
           }
          }
         }
         HEAP32[$852 >> 2] = $$0$lcssa$i251$i; //@line 7056
         $$reg2mem28$0 = $161; //@line 7057
         continue L5;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 89; //@line 7064
          break L5;
         }
         $868 = (HEAP32[$42 >> 2] | 0) + 12 | 0; //@line 7068
         if ((HEAP32[$868 >> 2] | 0) != -1) {
          label = 89; //@line 7072
          break L5;
         }
         $871 = $245 + 1 | 0; //@line 7075
         HEAP32[$92 >> 2] = $871; //@line 7076
         $872 = $$1202$in$i & 255; //@line 7077
         if (!($872 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 7080
         } else {
          $$045$i242$i = $872; //@line 7082
          $$06$i241$i = 0; //@line 7082
          $877 = $871; //@line 7082
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 7084
           $877$looptemp = $877;
           $877 = $877 + 1 | 0; //@line 7086
           HEAP32[$92 >> 2] = $877; //@line 7087
           $880 = $$06$i241$i << 8 | HEAPU8[$877$looptemp >> 0]; //@line 7090
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $880; //@line 7093
            break;
           } else {
            $$06$i241$i = $880; //@line 7096
           }
          }
         }
         HEAP32[$868 >> 2] = $$0$lcssa$i244$i; //@line 7100
         $$reg2mem28$0 = $161; //@line 7101
         continue L5;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 95; //@line 7108
          break L5;
         }
         $884 = (HEAP32[$42 >> 2] | 0) + 1 | 0; //@line 7112
         $885 = HEAP8[$884 >> 0] | 0; //@line 7113
         if ($885 & 1) {
          label = 95; //@line 7117
          break L5;
         }
         HEAP8[$884 >> 0] = $885 | 1; //@line 7121
         $890 = (HEAP32[$92 >> 2] | 0) + 1 | 0; //@line 7123
         HEAP32[$92 >> 2] = $890; //@line 7124
         $891 = $$1202$in$i & 255; //@line 7125
         if (!($891 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 7128
         } else {
          $$045$i235$i = $891; //@line 7130
          $$06$i234$i = 0; //@line 7130
          $896 = $890; //@line 7130
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 7132
           $896$looptemp = $896;
           $896 = $896 + 1 | 0; //@line 7134
           HEAP32[$92 >> 2] = $896; //@line 7135
           $899 = $$06$i234$i << 8 | HEAPU8[$896$looptemp >> 0]; //@line 7138
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $899; //@line 7141
            break;
           } else {
            $$06$i234$i = $899; //@line 7144
           }
          }
         }
         HEAP32[(HEAP32[$42 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 7150
         $$reg2mem28$0 = $161; //@line 7151
         continue L5;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 101; //@line 7158
          break L5;
         }
         $905 = (HEAP32[$42 >> 2] | 0) + 1 | 0; //@line 7162
         $906 = HEAP8[$905 >> 0] | 0; //@line 7163
         if ($906 & 2) {
          label = 101; //@line 7167
          break L5;
         }
         HEAP8[$905 >> 0] = $906 | 2; //@line 7171
         $911 = (HEAP32[$92 >> 2] | 0) + 1 | 0; //@line 7173
         HEAP32[$92 >> 2] = $911; //@line 7174
         $912 = $$1202$in$i & 255; //@line 7175
         if (!($912 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 7178
         } else {
          $$045$i228$i = $912; //@line 7180
          $$06$i227$i = 0; //@line 7180
          $917 = $911; //@line 7180
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 7182
           $917$looptemp = $917;
           $917 = $917 + 1 | 0; //@line 7184
           HEAP32[$92 >> 2] = $917; //@line 7185
           $920 = $$06$i227$i << 8 | HEAPU8[$917$looptemp >> 0]; //@line 7188
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $920; //@line 7191
            break;
           } else {
            $$06$i227$i = $920; //@line 7194
           }
          }
         }
         HEAP32[(HEAP32[$42 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 7200
         $$reg2mem28$0 = $161; //@line 7201
         continue L5;
         break;
        }
       default:
        {
         label = 105; //@line 7206
         break L5;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 105; //@line 7216
       break L5;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 7223
     break;
    }
    if ((HEAP32[$124 >> 2] | 0) != -1) {
     label = 22; //@line 7229
     break;
    }
    $260 = $245 + 1 | 0; //@line 7232
    HEAP32[$92 >> 2] = $260; //@line 7233
    $261 = $$1202$in$i & 255; //@line 7234
    if (!($261 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 7237
    } else {
     $$045$i$i = $261; //@line 7239
     $$06$i$i = 0; //@line 7239
     $266 = $260; //@line 7239
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 7241
      $266$looptemp = $266;
      $266 = $266 + 1 | 0; //@line 7243
      HEAP32[$92 >> 2] = $266; //@line 7244
      $269 = $$06$i$i << 8 | HEAPU8[$266$looptemp >> 0]; //@line 7247
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $269; //@line 7250
       break;
      } else {
       $$06$i$i = $269; //@line 7253
      }
     }
    }
    HEAP32[$124 >> 2] = $$0$lcssa$i$i; //@line 7257
    $$reg2mem28$0 = $161; //@line 7258
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3844, 4107, $8); //@line 7262
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3844, 4165, $60); //@line 7267
     break L2;
     break;
    }
   case 16:
    {
     $182 = HEAP32[$44 >> 2] | 0; //@line 7272
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 7273
     $183 = FUNCTION_TABLE_ii[$182 & 31](68) | 0; //@line 7274
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 7277
      $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 7278
      HEAP32[$184 >> 2] = $2; //@line 7279
      $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 7280
      HEAP32[$185 >> 2] = $4; //@line 7281
      $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 7282
      HEAP32[$186 >> 2] = $6; //@line 7283
      $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 7284
      HEAP32[$187 >> 2] = $8; //@line 7285
      $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 7286
      HEAP32[$188 >> 2] = $10; //@line 7287
      $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 7288
      HEAP32[$189 >> 2] = $12; //@line 7289
      $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 7290
      HEAP16[$190 >> 1] = $trunc$i; //@line 7291
      $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 7292
      HEAP32[$191 >> 2] = $14; //@line 7293
      $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 7294
      HEAP32[$192 >> 2] = $16; //@line 7295
      $193 = $ReallocAsyncCtx3 + 40 | 0; //@line 7296
      HEAP32[$193 >> 2] = $18; //@line 7297
      $194 = $ReallocAsyncCtx3 + 44 | 0; //@line 7298
      HEAP32[$194 >> 2] = $20; //@line 7299
      $195 = $ReallocAsyncCtx3 + 48 | 0; //@line 7300
      HEAP32[$195 >> 2] = $22; //@line 7301
      $196 = $ReallocAsyncCtx3 + 52 | 0; //@line 7302
      HEAP32[$196 >> 2] = $24; //@line 7303
      $197 = $ReallocAsyncCtx3 + 56 | 0; //@line 7304
      HEAP32[$197 >> 2] = $28; //@line 7305
      $198 = $ReallocAsyncCtx3 + 60 | 0; //@line 7306
      HEAP32[$198 >> 2] = $30; //@line 7307
      $199 = $ReallocAsyncCtx3 + 64 | 0; //@line 7308
      HEAP32[$199 >> 2] = $32; //@line 7309
      $200 = $ReallocAsyncCtx3 + 68 | 0; //@line 7310
      HEAP32[$200 >> 2] = $36; //@line 7311
      $201 = $ReallocAsyncCtx3 + 72 | 0; //@line 7312
      HEAP32[$201 >> 2] = $38; //@line 7313
      $202 = $ReallocAsyncCtx3 + 76 | 0; //@line 7314
      HEAP32[$202 >> 2] = $40; //@line 7315
      $203 = $ReallocAsyncCtx3 + 80 | 0; //@line 7316
      HEAP32[$203 >> 2] = $42; //@line 7317
      $204 = $ReallocAsyncCtx3 + 84 | 0; //@line 7318
      HEAP32[$204 >> 2] = $44; //@line 7319
      $205 = $ReallocAsyncCtx3 + 88 | 0; //@line 7320
      HEAP32[$205 >> 2] = $46; //@line 7321
      $206 = $ReallocAsyncCtx3 + 92 | 0; //@line 7322
      HEAP32[$206 >> 2] = $48; //@line 7323
      $207 = $ReallocAsyncCtx3 + 96 | 0; //@line 7324
      HEAP32[$207 >> 2] = $50; //@line 7325
      $208 = $ReallocAsyncCtx3 + 100 | 0; //@line 7326
      HEAP32[$208 >> 2] = $52; //@line 7327
      $209 = $ReallocAsyncCtx3 + 104 | 0; //@line 7328
      HEAP32[$209 >> 2] = $54; //@line 7329
      $210 = $ReallocAsyncCtx3 + 108 | 0; //@line 7330
      HEAP32[$210 >> 2] = $56; //@line 7331
      $211 = $ReallocAsyncCtx3 + 112 | 0; //@line 7332
      HEAP16[$211 >> 1] = $179; //@line 7333
      $212 = $ReallocAsyncCtx3 + 116 | 0; //@line 7334
      HEAP32[$212 >> 2] = $58; //@line 7335
      $213 = $ReallocAsyncCtx3 + 120 | 0; //@line 7336
      HEAP32[$213 >> 2] = $60; //@line 7337
      $214 = $ReallocAsyncCtx3 + 124 | 0; //@line 7338
      HEAP32[$214 >> 2] = $62; //@line 7339
      $215 = $ReallocAsyncCtx3 + 128 | 0; //@line 7340
      HEAP32[$215 >> 2] = $64; //@line 7341
      $216 = $ReallocAsyncCtx3 + 132 | 0; //@line 7342
      HEAP32[$216 >> 2] = $66; //@line 7343
      $217 = $ReallocAsyncCtx3 + 136 | 0; //@line 7344
      HEAP32[$217 >> 2] = $68; //@line 7345
      $218 = $ReallocAsyncCtx3 + 140 | 0; //@line 7346
      HEAP32[$218 >> 2] = $70; //@line 7347
      $219 = $ReallocAsyncCtx3 + 144 | 0; //@line 7348
      HEAP32[$219 >> 2] = $72; //@line 7349
      $220 = $ReallocAsyncCtx3 + 148 | 0; //@line 7350
      HEAP32[$220 >> 2] = $74; //@line 7351
      $221 = $ReallocAsyncCtx3 + 152 | 0; //@line 7352
      HEAP32[$221 >> 2] = $76; //@line 7353
      $222 = $ReallocAsyncCtx3 + 156 | 0; //@line 7354
      HEAP32[$222 >> 2] = $78; //@line 7355
      $223 = $ReallocAsyncCtx3 + 160 | 0; //@line 7356
      HEAP32[$223 >> 2] = $80; //@line 7357
      $224 = $ReallocAsyncCtx3 + 164 | 0; //@line 7358
      HEAP32[$224 >> 2] = $82; //@line 7359
      $225 = $ReallocAsyncCtx3 + 168 | 0; //@line 7360
      HEAP32[$225 >> 2] = $84; //@line 7361
      $226 = $ReallocAsyncCtx3 + 172 | 0; //@line 7362
      HEAP32[$226 >> 2] = $86; //@line 7363
      $227 = $ReallocAsyncCtx3 + 176 | 0; //@line 7364
      HEAP32[$227 >> 2] = $$1202$in$i; //@line 7365
      $228 = $ReallocAsyncCtx3 + 180 | 0; //@line 7366
      HEAP32[$228 >> 2] = $88; //@line 7367
      $229 = $ReallocAsyncCtx3 + 184 | 0; //@line 7368
      HEAP32[$229 >> 2] = $90; //@line 7369
      $230 = $ReallocAsyncCtx3 + 188 | 0; //@line 7370
      HEAP32[$230 >> 2] = $92; //@line 7371
      $231 = $ReallocAsyncCtx3 + 192 | 0; //@line 7372
      HEAP32[$231 >> 2] = $94; //@line 7373
      $232 = $ReallocAsyncCtx3 + 196 | 0; //@line 7374
      HEAP16[$232 >> 1] = $$1202$i; //@line 7375
      $233 = $ReallocAsyncCtx3 + 200 | 0; //@line 7376
      HEAP32[$233 >> 2] = $96; //@line 7377
      $234 = $ReallocAsyncCtx3 + 204 | 0; //@line 7378
      HEAP32[$234 >> 2] = $100; //@line 7379
      $235 = $ReallocAsyncCtx3 + 208 | 0; //@line 7380
      HEAP32[$235 >> 2] = $102; //@line 7381
      $236 = $ReallocAsyncCtx3 + 212 | 0; //@line 7382
      HEAP32[$236 >> 2] = $98; //@line 7383
      $237 = $ReallocAsyncCtx3 + 216 | 0; //@line 7384
      HEAP32[$237 >> 2] = $106; //@line 7385
      $238 = $ReallocAsyncCtx3 + 220 | 0; //@line 7386
      HEAP32[$238 >> 2] = $104; //@line 7387
      $239 = $ReallocAsyncCtx3 + 224 | 0; //@line 7388
      HEAP32[$239 >> 2] = $108; //@line 7389
      $240 = $ReallocAsyncCtx3 + 228 | 0; //@line 7390
      HEAP32[$240 >> 2] = $110; //@line 7391
      $241 = $ReallocAsyncCtx3 + 232 | 0; //@line 7392
      HEAP32[$241 >> 2] = $112; //@line 7393
      $242 = $ReallocAsyncCtx3 + 236 | 0; //@line 7394
      HEAP32[$242 >> 2] = $114; //@line 7395
      $243 = $ReallocAsyncCtx3 + 240 | 0; //@line 7396
      HEAP32[$243 >> 2] = $116; //@line 7397
      $244 = $ReallocAsyncCtx3 + 244 | 0; //@line 7398
      HEAP32[$244 >> 2] = $245; //@line 7399
      $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 7400
      HEAP32[$246 >> 2] = $118; //@line 7401
      $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 7402
      HEAP32[$247 >> 2] = $120; //@line 7403
      $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 7404
      HEAP32[$248 >> 2] = $122; //@line 7405
      $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 7406
      HEAP32[$249 >> 2] = $124; //@line 7407
      $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 7408
      HEAP32[$250 >> 2] = $161; //@line 7409
      $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 7410
      HEAP32[$251 >> 2] = $128; //@line 7411
      $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 7412
      HEAP32[$252 >> 2] = $130; //@line 7413
      $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 7414
      HEAP32[$253 >> 2] = $132; //@line 7415
      $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 7416
      HEAP32[$254 >> 2] = $134; //@line 7417
      $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 7418
      HEAP32[$255 >> 2] = $136; //@line 7419
      sp = STACKTOP; //@line 7420
      return;
     }
     HEAP32[___async_retval >> 2] = $183; //@line 7424
     ___async_unwind = 0; //@line 7425
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 7426
     $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 7427
     HEAP32[$184 >> 2] = $2; //@line 7428
     $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 7429
     HEAP32[$185 >> 2] = $4; //@line 7430
     $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 7431
     HEAP32[$186 >> 2] = $6; //@line 7432
     $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 7433
     HEAP32[$187 >> 2] = $8; //@line 7434
     $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 7435
     HEAP32[$188 >> 2] = $10; //@line 7436
     $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 7437
     HEAP32[$189 >> 2] = $12; //@line 7438
     $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 7439
     HEAP16[$190 >> 1] = $trunc$i; //@line 7440
     $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 7441
     HEAP32[$191 >> 2] = $14; //@line 7442
     $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 7443
     HEAP32[$192 >> 2] = $16; //@line 7444
     $193 = $ReallocAsyncCtx3 + 40 | 0; //@line 7445
     HEAP32[$193 >> 2] = $18; //@line 7446
     $194 = $ReallocAsyncCtx3 + 44 | 0; //@line 7447
     HEAP32[$194 >> 2] = $20; //@line 7448
     $195 = $ReallocAsyncCtx3 + 48 | 0; //@line 7449
     HEAP32[$195 >> 2] = $22; //@line 7450
     $196 = $ReallocAsyncCtx3 + 52 | 0; //@line 7451
     HEAP32[$196 >> 2] = $24; //@line 7452
     $197 = $ReallocAsyncCtx3 + 56 | 0; //@line 7453
     HEAP32[$197 >> 2] = $28; //@line 7454
     $198 = $ReallocAsyncCtx3 + 60 | 0; //@line 7455
     HEAP32[$198 >> 2] = $30; //@line 7456
     $199 = $ReallocAsyncCtx3 + 64 | 0; //@line 7457
     HEAP32[$199 >> 2] = $32; //@line 7458
     $200 = $ReallocAsyncCtx3 + 68 | 0; //@line 7459
     HEAP32[$200 >> 2] = $36; //@line 7460
     $201 = $ReallocAsyncCtx3 + 72 | 0; //@line 7461
     HEAP32[$201 >> 2] = $38; //@line 7462
     $202 = $ReallocAsyncCtx3 + 76 | 0; //@line 7463
     HEAP32[$202 >> 2] = $40; //@line 7464
     $203 = $ReallocAsyncCtx3 + 80 | 0; //@line 7465
     HEAP32[$203 >> 2] = $42; //@line 7466
     $204 = $ReallocAsyncCtx3 + 84 | 0; //@line 7467
     HEAP32[$204 >> 2] = $44; //@line 7468
     $205 = $ReallocAsyncCtx3 + 88 | 0; //@line 7469
     HEAP32[$205 >> 2] = $46; //@line 7470
     $206 = $ReallocAsyncCtx3 + 92 | 0; //@line 7471
     HEAP32[$206 >> 2] = $48; //@line 7472
     $207 = $ReallocAsyncCtx3 + 96 | 0; //@line 7473
     HEAP32[$207 >> 2] = $50; //@line 7474
     $208 = $ReallocAsyncCtx3 + 100 | 0; //@line 7475
     HEAP32[$208 >> 2] = $52; //@line 7476
     $209 = $ReallocAsyncCtx3 + 104 | 0; //@line 7477
     HEAP32[$209 >> 2] = $54; //@line 7478
     $210 = $ReallocAsyncCtx3 + 108 | 0; //@line 7479
     HEAP32[$210 >> 2] = $56; //@line 7480
     $211 = $ReallocAsyncCtx3 + 112 | 0; //@line 7481
     HEAP16[$211 >> 1] = $179; //@line 7482
     $212 = $ReallocAsyncCtx3 + 116 | 0; //@line 7483
     HEAP32[$212 >> 2] = $58; //@line 7484
     $213 = $ReallocAsyncCtx3 + 120 | 0; //@line 7485
     HEAP32[$213 >> 2] = $60; //@line 7486
     $214 = $ReallocAsyncCtx3 + 124 | 0; //@line 7487
     HEAP32[$214 >> 2] = $62; //@line 7488
     $215 = $ReallocAsyncCtx3 + 128 | 0; //@line 7489
     HEAP32[$215 >> 2] = $64; //@line 7490
     $216 = $ReallocAsyncCtx3 + 132 | 0; //@line 7491
     HEAP32[$216 >> 2] = $66; //@line 7492
     $217 = $ReallocAsyncCtx3 + 136 | 0; //@line 7493
     HEAP32[$217 >> 2] = $68; //@line 7494
     $218 = $ReallocAsyncCtx3 + 140 | 0; //@line 7495
     HEAP32[$218 >> 2] = $70; //@line 7496
     $219 = $ReallocAsyncCtx3 + 144 | 0; //@line 7497
     HEAP32[$219 >> 2] = $72; //@line 7498
     $220 = $ReallocAsyncCtx3 + 148 | 0; //@line 7499
     HEAP32[$220 >> 2] = $74; //@line 7500
     $221 = $ReallocAsyncCtx3 + 152 | 0; //@line 7501
     HEAP32[$221 >> 2] = $76; //@line 7502
     $222 = $ReallocAsyncCtx3 + 156 | 0; //@line 7503
     HEAP32[$222 >> 2] = $78; //@line 7504
     $223 = $ReallocAsyncCtx3 + 160 | 0; //@line 7505
     HEAP32[$223 >> 2] = $80; //@line 7506
     $224 = $ReallocAsyncCtx3 + 164 | 0; //@line 7507
     HEAP32[$224 >> 2] = $82; //@line 7508
     $225 = $ReallocAsyncCtx3 + 168 | 0; //@line 7509
     HEAP32[$225 >> 2] = $84; //@line 7510
     $226 = $ReallocAsyncCtx3 + 172 | 0; //@line 7511
     HEAP32[$226 >> 2] = $86; //@line 7512
     $227 = $ReallocAsyncCtx3 + 176 | 0; //@line 7513
     HEAP32[$227 >> 2] = $$1202$in$i; //@line 7514
     $228 = $ReallocAsyncCtx3 + 180 | 0; //@line 7515
     HEAP32[$228 >> 2] = $88; //@line 7516
     $229 = $ReallocAsyncCtx3 + 184 | 0; //@line 7517
     HEAP32[$229 >> 2] = $90; //@line 7518
     $230 = $ReallocAsyncCtx3 + 188 | 0; //@line 7519
     HEAP32[$230 >> 2] = $92; //@line 7520
     $231 = $ReallocAsyncCtx3 + 192 | 0; //@line 7521
     HEAP32[$231 >> 2] = $94; //@line 7522
     $232 = $ReallocAsyncCtx3 + 196 | 0; //@line 7523
     HEAP16[$232 >> 1] = $$1202$i; //@line 7524
     $233 = $ReallocAsyncCtx3 + 200 | 0; //@line 7525
     HEAP32[$233 >> 2] = $96; //@line 7526
     $234 = $ReallocAsyncCtx3 + 204 | 0; //@line 7527
     HEAP32[$234 >> 2] = $100; //@line 7528
     $235 = $ReallocAsyncCtx3 + 208 | 0; //@line 7529
     HEAP32[$235 >> 2] = $102; //@line 7530
     $236 = $ReallocAsyncCtx3 + 212 | 0; //@line 7531
     HEAP32[$236 >> 2] = $98; //@line 7532
     $237 = $ReallocAsyncCtx3 + 216 | 0; //@line 7533
     HEAP32[$237 >> 2] = $106; //@line 7534
     $238 = $ReallocAsyncCtx3 + 220 | 0; //@line 7535
     HEAP32[$238 >> 2] = $104; //@line 7536
     $239 = $ReallocAsyncCtx3 + 224 | 0; //@line 7537
     HEAP32[$239 >> 2] = $108; //@line 7538
     $240 = $ReallocAsyncCtx3 + 228 | 0; //@line 7539
     HEAP32[$240 >> 2] = $110; //@line 7540
     $241 = $ReallocAsyncCtx3 + 232 | 0; //@line 7541
     HEAP32[$241 >> 2] = $112; //@line 7542
     $242 = $ReallocAsyncCtx3 + 236 | 0; //@line 7543
     HEAP32[$242 >> 2] = $114; //@line 7544
     $243 = $ReallocAsyncCtx3 + 240 | 0; //@line 7545
     HEAP32[$243 >> 2] = $116; //@line 7546
     $244 = $ReallocAsyncCtx3 + 244 | 0; //@line 7547
     HEAP32[$244 >> 2] = $245; //@line 7548
     $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 7549
     HEAP32[$246 >> 2] = $118; //@line 7550
     $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 7551
     HEAP32[$247 >> 2] = $120; //@line 7552
     $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 7553
     HEAP32[$248 >> 2] = $122; //@line 7554
     $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 7555
     HEAP32[$249 >> 2] = $124; //@line 7556
     $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 7557
     HEAP32[$250 >> 2] = $161; //@line 7558
     $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 7559
     HEAP32[$251 >> 2] = $128; //@line 7560
     $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 7561
     HEAP32[$252 >> 2] = $130; //@line 7562
     $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 7563
     HEAP32[$253 >> 2] = $132; //@line 7564
     $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 7565
     HEAP32[$254 >> 2] = $134; //@line 7566
     $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 7567
     HEAP32[$255 >> 2] = $136; //@line 7568
     sp = STACKTOP; //@line 7569
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3844, 4279, $90); //@line 7574
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3844, 4348, $4); //@line 7579
     break L2;
     break;
    }
   case 31:
    {
     $285 = $$1202$in$i & 65535; //@line 7584
     if (($$1202$i + -1 & 65535) <= 1033) {
      $288 = HEAP32[$42 >> 2] | 0; //@line 7588
      if (!(HEAP32[$288 + 44 >> 2] | 0)) {
       HEAP16[$288 + 2 >> 1] = $$1202$i; //@line 7594
       $293 = $245 + 1 | 0; //@line 7595
       HEAP32[$92 >> 2] = $293; //@line 7596
       $294 = HEAP32[$44 >> 2] | 0; //@line 7597
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 7598
       $295 = FUNCTION_TABLE_ii[$294 & 31]($$1202$i) | 0; //@line 7599
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 7602
        $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 7603
        HEAP32[$296 >> 2] = $2; //@line 7604
        $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 7605
        HEAP32[$297 >> 2] = $4; //@line 7606
        $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 7607
        HEAP32[$298 >> 2] = $6; //@line 7608
        $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 7609
        HEAP32[$299 >> 2] = $8; //@line 7610
        $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 7611
        HEAP32[$300 >> 2] = $10; //@line 7612
        $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 7613
        HEAP32[$301 >> 2] = $12; //@line 7614
        $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 7615
        HEAP32[$302 >> 2] = $14; //@line 7616
        $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 7617
        HEAP32[$303 >> 2] = $16; //@line 7618
        $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 7619
        HEAP32[$304 >> 2] = $18; //@line 7620
        $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 7621
        HEAP32[$305 >> 2] = $20; //@line 7622
        $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 7623
        HEAP32[$306 >> 2] = $22; //@line 7624
        $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 7625
        HEAP32[$307 >> 2] = $24; //@line 7626
        $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 7627
        HEAP32[$308 >> 2] = $285; //@line 7628
        $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 7629
        HEAP32[$309 >> 2] = $28; //@line 7630
        $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 7631
        HEAP32[$310 >> 2] = $30; //@line 7632
        $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 7633
        HEAP32[$311 >> 2] = $32; //@line 7634
        $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 7635
        HEAP32[$312 >> 2] = $293; //@line 7636
        $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 7637
        HEAP32[$313 >> 2] = $36; //@line 7638
        $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 7639
        HEAP32[$314 >> 2] = $38; //@line 7640
        $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 7641
        HEAP32[$315 >> 2] = $40; //@line 7642
        $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 7643
        HEAP32[$316 >> 2] = $42; //@line 7644
        $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 7645
        HEAP32[$317 >> 2] = $44; //@line 7646
        $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 7647
        HEAP32[$318 >> 2] = $46; //@line 7648
        $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 7649
        HEAP32[$319 >> 2] = $48; //@line 7650
        $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 7651
        HEAP32[$320 >> 2] = $50; //@line 7652
        $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 7653
        HEAP32[$321 >> 2] = $52; //@line 7654
        $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 7655
        HEAP32[$322 >> 2] = $54; //@line 7656
        $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 7657
        HEAP32[$323 >> 2] = $56; //@line 7658
        $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 7659
        HEAP32[$324 >> 2] = $58; //@line 7660
        $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 7661
        HEAP32[$325 >> 2] = $60; //@line 7662
        $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 7663
        HEAP32[$326 >> 2] = $62; //@line 7664
        $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 7665
        HEAP32[$327 >> 2] = $64; //@line 7666
        $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 7667
        HEAP32[$328 >> 2] = $66; //@line 7668
        $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 7669
        HEAP32[$329 >> 2] = $68; //@line 7670
        $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 7671
        HEAP32[$330 >> 2] = $70; //@line 7672
        $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 7673
        HEAP32[$331 >> 2] = $72; //@line 7674
        $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 7675
        HEAP32[$332 >> 2] = $74; //@line 7676
        $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 7677
        HEAP32[$333 >> 2] = $76; //@line 7678
        $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 7679
        HEAP32[$334 >> 2] = $78; //@line 7680
        $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 7681
        HEAP32[$335 >> 2] = $80; //@line 7682
        $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 7683
        HEAP32[$336 >> 2] = $82; //@line 7684
        $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 7685
        HEAP32[$337 >> 2] = $84; //@line 7686
        $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 7687
        HEAP32[$338 >> 2] = $86; //@line 7688
        $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 7689
        HEAP32[$339 >> 2] = $88; //@line 7690
        $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 7691
        HEAP32[$340 >> 2] = $90; //@line 7692
        $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 7693
        HEAP32[$341 >> 2] = $92; //@line 7694
        $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 7695
        HEAP32[$342 >> 2] = $94; //@line 7696
        $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 7697
        HEAP32[$343 >> 2] = $96; //@line 7698
        $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 7699
        HEAP32[$344 >> 2] = $98; //@line 7700
        $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 7701
        HEAP32[$345 >> 2] = $100; //@line 7702
        $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 7703
        HEAP32[$346 >> 2] = $102; //@line 7704
        $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 7705
        HEAP32[$347 >> 2] = $104; //@line 7706
        $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 7707
        HEAP32[$348 >> 2] = $106; //@line 7708
        $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 7709
        HEAP32[$349 >> 2] = $108; //@line 7710
        $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 7711
        HEAP32[$350 >> 2] = $110; //@line 7712
        $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 7713
        HEAP32[$351 >> 2] = $112; //@line 7714
        $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 7715
        HEAP32[$352 >> 2] = $114; //@line 7716
        $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 7717
        HEAP32[$353 >> 2] = $116; //@line 7718
        $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 7719
        HEAP32[$354 >> 2] = $118; //@line 7720
        $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 7721
        HEAP32[$355 >> 2] = $120; //@line 7722
        $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 7723
        HEAP32[$356 >> 2] = $122; //@line 7724
        $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 7725
        HEAP32[$357 >> 2] = $124; //@line 7726
        $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 7727
        HEAP32[$358 >> 2] = $161; //@line 7728
        $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 7729
        HEAP32[$359 >> 2] = $128; //@line 7730
        $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 7731
        HEAP32[$360 >> 2] = $130; //@line 7732
        $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 7733
        HEAP32[$361 >> 2] = $132; //@line 7734
        $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 7735
        HEAP32[$362 >> 2] = $134; //@line 7736
        $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 7737
        HEAP32[$363 >> 2] = $136; //@line 7738
        sp = STACKTOP; //@line 7739
        return;
       }
       HEAP32[___async_retval >> 2] = $295; //@line 7743
       ___async_unwind = 0; //@line 7744
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 7745
       $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 7746
       HEAP32[$296 >> 2] = $2; //@line 7747
       $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 7748
       HEAP32[$297 >> 2] = $4; //@line 7749
       $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 7750
       HEAP32[$298 >> 2] = $6; //@line 7751
       $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 7752
       HEAP32[$299 >> 2] = $8; //@line 7753
       $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 7754
       HEAP32[$300 >> 2] = $10; //@line 7755
       $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 7756
       HEAP32[$301 >> 2] = $12; //@line 7757
       $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 7758
       HEAP32[$302 >> 2] = $14; //@line 7759
       $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 7760
       HEAP32[$303 >> 2] = $16; //@line 7761
       $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 7762
       HEAP32[$304 >> 2] = $18; //@line 7763
       $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 7764
       HEAP32[$305 >> 2] = $20; //@line 7765
       $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 7766
       HEAP32[$306 >> 2] = $22; //@line 7767
       $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 7768
       HEAP32[$307 >> 2] = $24; //@line 7769
       $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 7770
       HEAP32[$308 >> 2] = $285; //@line 7771
       $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 7772
       HEAP32[$309 >> 2] = $28; //@line 7773
       $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 7774
       HEAP32[$310 >> 2] = $30; //@line 7775
       $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 7776
       HEAP32[$311 >> 2] = $32; //@line 7777
       $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 7778
       HEAP32[$312 >> 2] = $293; //@line 7779
       $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 7780
       HEAP32[$313 >> 2] = $36; //@line 7781
       $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 7782
       HEAP32[$314 >> 2] = $38; //@line 7783
       $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 7784
       HEAP32[$315 >> 2] = $40; //@line 7785
       $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 7786
       HEAP32[$316 >> 2] = $42; //@line 7787
       $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 7788
       HEAP32[$317 >> 2] = $44; //@line 7789
       $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 7790
       HEAP32[$318 >> 2] = $46; //@line 7791
       $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 7792
       HEAP32[$319 >> 2] = $48; //@line 7793
       $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 7794
       HEAP32[$320 >> 2] = $50; //@line 7795
       $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 7796
       HEAP32[$321 >> 2] = $52; //@line 7797
       $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 7798
       HEAP32[$322 >> 2] = $54; //@line 7799
       $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 7800
       HEAP32[$323 >> 2] = $56; //@line 7801
       $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 7802
       HEAP32[$324 >> 2] = $58; //@line 7803
       $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 7804
       HEAP32[$325 >> 2] = $60; //@line 7805
       $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 7806
       HEAP32[$326 >> 2] = $62; //@line 7807
       $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 7808
       HEAP32[$327 >> 2] = $64; //@line 7809
       $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 7810
       HEAP32[$328 >> 2] = $66; //@line 7811
       $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 7812
       HEAP32[$329 >> 2] = $68; //@line 7813
       $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 7814
       HEAP32[$330 >> 2] = $70; //@line 7815
       $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 7816
       HEAP32[$331 >> 2] = $72; //@line 7817
       $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 7818
       HEAP32[$332 >> 2] = $74; //@line 7819
       $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 7820
       HEAP32[$333 >> 2] = $76; //@line 7821
       $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 7822
       HEAP32[$334 >> 2] = $78; //@line 7823
       $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 7824
       HEAP32[$335 >> 2] = $80; //@line 7825
       $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 7826
       HEAP32[$336 >> 2] = $82; //@line 7827
       $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 7828
       HEAP32[$337 >> 2] = $84; //@line 7829
       $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 7830
       HEAP32[$338 >> 2] = $86; //@line 7831
       $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 7832
       HEAP32[$339 >> 2] = $88; //@line 7833
       $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 7834
       HEAP32[$340 >> 2] = $90; //@line 7835
       $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 7836
       HEAP32[$341 >> 2] = $92; //@line 7837
       $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 7838
       HEAP32[$342 >> 2] = $94; //@line 7839
       $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 7840
       HEAP32[$343 >> 2] = $96; //@line 7841
       $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 7842
       HEAP32[$344 >> 2] = $98; //@line 7843
       $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 7844
       HEAP32[$345 >> 2] = $100; //@line 7845
       $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 7846
       HEAP32[$346 >> 2] = $102; //@line 7847
       $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 7848
       HEAP32[$347 >> 2] = $104; //@line 7849
       $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 7850
       HEAP32[$348 >> 2] = $106; //@line 7851
       $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 7852
       HEAP32[$349 >> 2] = $108; //@line 7853
       $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 7854
       HEAP32[$350 >> 2] = $110; //@line 7855
       $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 7856
       HEAP32[$351 >> 2] = $112; //@line 7857
       $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 7858
       HEAP32[$352 >> 2] = $114; //@line 7859
       $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 7860
       HEAP32[$353 >> 2] = $116; //@line 7861
       $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 7862
       HEAP32[$354 >> 2] = $118; //@line 7863
       $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 7864
       HEAP32[$355 >> 2] = $120; //@line 7865
       $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 7866
       HEAP32[$356 >> 2] = $122; //@line 7867
       $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 7868
       HEAP32[$357 >> 2] = $124; //@line 7869
       $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 7870
       HEAP32[$358 >> 2] = $161; //@line 7871
       $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 7872
       HEAP32[$359 >> 2] = $128; //@line 7873
       $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 7874
       HEAP32[$360 >> 2] = $130; //@line 7875
       $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 7876
       HEAP32[$361 >> 2] = $132; //@line 7877
       $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 7878
       HEAP32[$362 >> 2] = $134; //@line 7879
       $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 7880
       HEAP32[$363 >> 2] = $136; //@line 7881
       sp = STACKTOP; //@line 7882
       return;
      }
     }
     _mbed_tracef(2, 3844, 4410, $54); //@line 7886
     break L2;
     break;
    }
   case 40:
    {
     $369 = HEAP32[$42 >> 2] | 0; //@line 7891
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 7893
     $371 = _sn_coap_parser_options_parse_multiple_options($116, $92, $179, $369 + 48 | 0, $369, 4, $$1202$i) | 0; //@line 7894
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 7897
      $372 = $ReallocAsyncCtx10 + 4 | 0; //@line 7898
      HEAP32[$372 >> 2] = $2; //@line 7899
      $373 = $ReallocAsyncCtx10 + 8 | 0; //@line 7900
      HEAP32[$373 >> 2] = $4; //@line 7901
      $374 = $ReallocAsyncCtx10 + 12 | 0; //@line 7902
      HEAP32[$374 >> 2] = $6; //@line 7903
      $375 = $ReallocAsyncCtx10 + 16 | 0; //@line 7904
      HEAP32[$375 >> 2] = $8; //@line 7905
      $376 = $ReallocAsyncCtx10 + 20 | 0; //@line 7906
      HEAP32[$376 >> 2] = $14; //@line 7907
      $377 = $ReallocAsyncCtx10 + 24 | 0; //@line 7908
      HEAP32[$377 >> 2] = $12; //@line 7909
      $378 = $ReallocAsyncCtx10 + 28 | 0; //@line 7910
      HEAP32[$378 >> 2] = $136; //@line 7911
      $379 = $ReallocAsyncCtx10 + 32 | 0; //@line 7912
      HEAP32[$379 >> 2] = $16; //@line 7913
      $380 = $ReallocAsyncCtx10 + 36 | 0; //@line 7914
      HEAP32[$380 >> 2] = $18; //@line 7915
      $381 = $ReallocAsyncCtx10 + 40 | 0; //@line 7916
      HEAP32[$381 >> 2] = $20; //@line 7917
      $382 = $ReallocAsyncCtx10 + 44 | 0; //@line 7918
      HEAP32[$382 >> 2] = $22; //@line 7919
      $383 = $ReallocAsyncCtx10 + 48 | 0; //@line 7920
      HEAP32[$383 >> 2] = $24; //@line 7921
      $384 = $ReallocAsyncCtx10 + 52 | 0; //@line 7922
      HEAP32[$384 >> 2] = $28; //@line 7923
      $385 = $ReallocAsyncCtx10 + 56 | 0; //@line 7924
      HEAP32[$385 >> 2] = $30; //@line 7925
      $386 = $ReallocAsyncCtx10 + 60 | 0; //@line 7926
      HEAP32[$386 >> 2] = $32; //@line 7927
      $387 = $ReallocAsyncCtx10 + 64 | 0; //@line 7928
      HEAP32[$387 >> 2] = $36; //@line 7929
      $388 = $ReallocAsyncCtx10 + 68 | 0; //@line 7930
      HEAP32[$388 >> 2] = $38; //@line 7931
      $389 = $ReallocAsyncCtx10 + 72 | 0; //@line 7932
      HEAP32[$389 >> 2] = $40; //@line 7933
      $390 = $ReallocAsyncCtx10 + 76 | 0; //@line 7934
      HEAP32[$390 >> 2] = $42; //@line 7935
      $391 = $ReallocAsyncCtx10 + 80 | 0; //@line 7936
      HEAP32[$391 >> 2] = $44; //@line 7937
      $392 = $ReallocAsyncCtx10 + 84 | 0; //@line 7938
      HEAP32[$392 >> 2] = $46; //@line 7939
      $393 = $ReallocAsyncCtx10 + 88 | 0; //@line 7940
      HEAP32[$393 >> 2] = $48; //@line 7941
      $394 = $ReallocAsyncCtx10 + 92 | 0; //@line 7942
      HEAP32[$394 >> 2] = $50; //@line 7943
      $395 = $ReallocAsyncCtx10 + 96 | 0; //@line 7944
      HEAP32[$395 >> 2] = $52; //@line 7945
      $396 = $ReallocAsyncCtx10 + 100 | 0; //@line 7946
      HEAP32[$396 >> 2] = $54; //@line 7947
      $397 = $ReallocAsyncCtx10 + 104 | 0; //@line 7948
      HEAP32[$397 >> 2] = $56; //@line 7949
      $398 = $ReallocAsyncCtx10 + 108 | 0; //@line 7950
      HEAP32[$398 >> 2] = $58; //@line 7951
      $399 = $ReallocAsyncCtx10 + 112 | 0; //@line 7952
      HEAP32[$399 >> 2] = $60; //@line 7953
      $400 = $ReallocAsyncCtx10 + 116 | 0; //@line 7954
      HEAP32[$400 >> 2] = $62; //@line 7955
      $401 = $ReallocAsyncCtx10 + 120 | 0; //@line 7956
      HEAP32[$401 >> 2] = $64; //@line 7957
      $402 = $ReallocAsyncCtx10 + 124 | 0; //@line 7958
      HEAP32[$402 >> 2] = $66; //@line 7959
      $403 = $ReallocAsyncCtx10 + 128 | 0; //@line 7960
      HEAP32[$403 >> 2] = $68; //@line 7961
      $404 = $ReallocAsyncCtx10 + 132 | 0; //@line 7962
      HEAP32[$404 >> 2] = $70; //@line 7963
      $405 = $ReallocAsyncCtx10 + 136 | 0; //@line 7964
      HEAP32[$405 >> 2] = $72; //@line 7965
      $406 = $ReallocAsyncCtx10 + 140 | 0; //@line 7966
      HEAP32[$406 >> 2] = $74; //@line 7967
      $407 = $ReallocAsyncCtx10 + 144 | 0; //@line 7968
      HEAP32[$407 >> 2] = $76; //@line 7969
      $408 = $ReallocAsyncCtx10 + 148 | 0; //@line 7970
      HEAP32[$408 >> 2] = $78; //@line 7971
      $409 = $ReallocAsyncCtx10 + 152 | 0; //@line 7972
      HEAP32[$409 >> 2] = $80; //@line 7973
      $410 = $ReallocAsyncCtx10 + 156 | 0; //@line 7974
      HEAP32[$410 >> 2] = $82; //@line 7975
      $411 = $ReallocAsyncCtx10 + 160 | 0; //@line 7976
      HEAP32[$411 >> 2] = $84; //@line 7977
      $412 = $ReallocAsyncCtx10 + 164 | 0; //@line 7978
      HEAP32[$412 >> 2] = $86; //@line 7979
      $413 = $ReallocAsyncCtx10 + 168 | 0; //@line 7980
      HEAP32[$413 >> 2] = $88; //@line 7981
      $414 = $ReallocAsyncCtx10 + 172 | 0; //@line 7982
      HEAP32[$414 >> 2] = $90; //@line 7983
      $415 = $ReallocAsyncCtx10 + 176 | 0; //@line 7984
      HEAP32[$415 >> 2] = $92; //@line 7985
      $416 = $ReallocAsyncCtx10 + 180 | 0; //@line 7986
      HEAP32[$416 >> 2] = $94; //@line 7987
      $417 = $ReallocAsyncCtx10 + 184 | 0; //@line 7988
      HEAP32[$417 >> 2] = $96; //@line 7989
      $418 = $ReallocAsyncCtx10 + 188 | 0; //@line 7990
      HEAP32[$418 >> 2] = $98; //@line 7991
      $419 = $ReallocAsyncCtx10 + 192 | 0; //@line 7992
      HEAP32[$419 >> 2] = $100; //@line 7993
      $420 = $ReallocAsyncCtx10 + 196 | 0; //@line 7994
      HEAP32[$420 >> 2] = $102; //@line 7995
      $421 = $ReallocAsyncCtx10 + 200 | 0; //@line 7996
      HEAP32[$421 >> 2] = $104; //@line 7997
      $422 = $ReallocAsyncCtx10 + 204 | 0; //@line 7998
      HEAP32[$422 >> 2] = $106; //@line 7999
      $423 = $ReallocAsyncCtx10 + 208 | 0; //@line 8000
      HEAP32[$423 >> 2] = $108; //@line 8001
      $424 = $ReallocAsyncCtx10 + 212 | 0; //@line 8002
      HEAP32[$424 >> 2] = $110; //@line 8003
      $425 = $ReallocAsyncCtx10 + 216 | 0; //@line 8004
      HEAP32[$425 >> 2] = $112; //@line 8005
      $426 = $ReallocAsyncCtx10 + 220 | 0; //@line 8006
      HEAP32[$426 >> 2] = $114; //@line 8007
      $427 = $ReallocAsyncCtx10 + 224 | 0; //@line 8008
      HEAP32[$427 >> 2] = $116; //@line 8009
      $428 = $ReallocAsyncCtx10 + 228 | 0; //@line 8010
      HEAP32[$428 >> 2] = $118; //@line 8011
      $429 = $ReallocAsyncCtx10 + 232 | 0; //@line 8012
      HEAP32[$429 >> 2] = $120; //@line 8013
      $430 = $ReallocAsyncCtx10 + 236 | 0; //@line 8014
      HEAP32[$430 >> 2] = $122; //@line 8015
      $431 = $ReallocAsyncCtx10 + 240 | 0; //@line 8016
      HEAP32[$431 >> 2] = $124; //@line 8017
      $432 = $ReallocAsyncCtx10 + 244 | 0; //@line 8018
      HEAP32[$432 >> 2] = $161; //@line 8019
      $433 = $ReallocAsyncCtx10 + 248 | 0; //@line 8020
      HEAP32[$433 >> 2] = $128; //@line 8021
      $434 = $ReallocAsyncCtx10 + 252 | 0; //@line 8022
      HEAP32[$434 >> 2] = $130; //@line 8023
      $435 = $ReallocAsyncCtx10 + 256 | 0; //@line 8024
      HEAP32[$435 >> 2] = $132; //@line 8025
      $436 = $ReallocAsyncCtx10 + 260 | 0; //@line 8026
      HEAP32[$436 >> 2] = $134; //@line 8027
      $437 = $ReallocAsyncCtx10 + 264 | 0; //@line 8028
      HEAP32[$437 >> 2] = $10; //@line 8029
      sp = STACKTOP; //@line 8030
      return;
     }
     HEAP8[___async_retval >> 0] = $371; //@line 8034
     ___async_unwind = 0; //@line 8035
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 8036
     $372 = $ReallocAsyncCtx10 + 4 | 0; //@line 8037
     HEAP32[$372 >> 2] = $2; //@line 8038
     $373 = $ReallocAsyncCtx10 + 8 | 0; //@line 8039
     HEAP32[$373 >> 2] = $4; //@line 8040
     $374 = $ReallocAsyncCtx10 + 12 | 0; //@line 8041
     HEAP32[$374 >> 2] = $6; //@line 8042
     $375 = $ReallocAsyncCtx10 + 16 | 0; //@line 8043
     HEAP32[$375 >> 2] = $8; //@line 8044
     $376 = $ReallocAsyncCtx10 + 20 | 0; //@line 8045
     HEAP32[$376 >> 2] = $14; //@line 8046
     $377 = $ReallocAsyncCtx10 + 24 | 0; //@line 8047
     HEAP32[$377 >> 2] = $12; //@line 8048
     $378 = $ReallocAsyncCtx10 + 28 | 0; //@line 8049
     HEAP32[$378 >> 2] = $136; //@line 8050
     $379 = $ReallocAsyncCtx10 + 32 | 0; //@line 8051
     HEAP32[$379 >> 2] = $16; //@line 8052
     $380 = $ReallocAsyncCtx10 + 36 | 0; //@line 8053
     HEAP32[$380 >> 2] = $18; //@line 8054
     $381 = $ReallocAsyncCtx10 + 40 | 0; //@line 8055
     HEAP32[$381 >> 2] = $20; //@line 8056
     $382 = $ReallocAsyncCtx10 + 44 | 0; //@line 8057
     HEAP32[$382 >> 2] = $22; //@line 8058
     $383 = $ReallocAsyncCtx10 + 48 | 0; //@line 8059
     HEAP32[$383 >> 2] = $24; //@line 8060
     $384 = $ReallocAsyncCtx10 + 52 | 0; //@line 8061
     HEAP32[$384 >> 2] = $28; //@line 8062
     $385 = $ReallocAsyncCtx10 + 56 | 0; //@line 8063
     HEAP32[$385 >> 2] = $30; //@line 8064
     $386 = $ReallocAsyncCtx10 + 60 | 0; //@line 8065
     HEAP32[$386 >> 2] = $32; //@line 8066
     $387 = $ReallocAsyncCtx10 + 64 | 0; //@line 8067
     HEAP32[$387 >> 2] = $36; //@line 8068
     $388 = $ReallocAsyncCtx10 + 68 | 0; //@line 8069
     HEAP32[$388 >> 2] = $38; //@line 8070
     $389 = $ReallocAsyncCtx10 + 72 | 0; //@line 8071
     HEAP32[$389 >> 2] = $40; //@line 8072
     $390 = $ReallocAsyncCtx10 + 76 | 0; //@line 8073
     HEAP32[$390 >> 2] = $42; //@line 8074
     $391 = $ReallocAsyncCtx10 + 80 | 0; //@line 8075
     HEAP32[$391 >> 2] = $44; //@line 8076
     $392 = $ReallocAsyncCtx10 + 84 | 0; //@line 8077
     HEAP32[$392 >> 2] = $46; //@line 8078
     $393 = $ReallocAsyncCtx10 + 88 | 0; //@line 8079
     HEAP32[$393 >> 2] = $48; //@line 8080
     $394 = $ReallocAsyncCtx10 + 92 | 0; //@line 8081
     HEAP32[$394 >> 2] = $50; //@line 8082
     $395 = $ReallocAsyncCtx10 + 96 | 0; //@line 8083
     HEAP32[$395 >> 2] = $52; //@line 8084
     $396 = $ReallocAsyncCtx10 + 100 | 0; //@line 8085
     HEAP32[$396 >> 2] = $54; //@line 8086
     $397 = $ReallocAsyncCtx10 + 104 | 0; //@line 8087
     HEAP32[$397 >> 2] = $56; //@line 8088
     $398 = $ReallocAsyncCtx10 + 108 | 0; //@line 8089
     HEAP32[$398 >> 2] = $58; //@line 8090
     $399 = $ReallocAsyncCtx10 + 112 | 0; //@line 8091
     HEAP32[$399 >> 2] = $60; //@line 8092
     $400 = $ReallocAsyncCtx10 + 116 | 0; //@line 8093
     HEAP32[$400 >> 2] = $62; //@line 8094
     $401 = $ReallocAsyncCtx10 + 120 | 0; //@line 8095
     HEAP32[$401 >> 2] = $64; //@line 8096
     $402 = $ReallocAsyncCtx10 + 124 | 0; //@line 8097
     HEAP32[$402 >> 2] = $66; //@line 8098
     $403 = $ReallocAsyncCtx10 + 128 | 0; //@line 8099
     HEAP32[$403 >> 2] = $68; //@line 8100
     $404 = $ReallocAsyncCtx10 + 132 | 0; //@line 8101
     HEAP32[$404 >> 2] = $70; //@line 8102
     $405 = $ReallocAsyncCtx10 + 136 | 0; //@line 8103
     HEAP32[$405 >> 2] = $72; //@line 8104
     $406 = $ReallocAsyncCtx10 + 140 | 0; //@line 8105
     HEAP32[$406 >> 2] = $74; //@line 8106
     $407 = $ReallocAsyncCtx10 + 144 | 0; //@line 8107
     HEAP32[$407 >> 2] = $76; //@line 8108
     $408 = $ReallocAsyncCtx10 + 148 | 0; //@line 8109
     HEAP32[$408 >> 2] = $78; //@line 8110
     $409 = $ReallocAsyncCtx10 + 152 | 0; //@line 8111
     HEAP32[$409 >> 2] = $80; //@line 8112
     $410 = $ReallocAsyncCtx10 + 156 | 0; //@line 8113
     HEAP32[$410 >> 2] = $82; //@line 8114
     $411 = $ReallocAsyncCtx10 + 160 | 0; //@line 8115
     HEAP32[$411 >> 2] = $84; //@line 8116
     $412 = $ReallocAsyncCtx10 + 164 | 0; //@line 8117
     HEAP32[$412 >> 2] = $86; //@line 8118
     $413 = $ReallocAsyncCtx10 + 168 | 0; //@line 8119
     HEAP32[$413 >> 2] = $88; //@line 8120
     $414 = $ReallocAsyncCtx10 + 172 | 0; //@line 8121
     HEAP32[$414 >> 2] = $90; //@line 8122
     $415 = $ReallocAsyncCtx10 + 176 | 0; //@line 8123
     HEAP32[$415 >> 2] = $92; //@line 8124
     $416 = $ReallocAsyncCtx10 + 180 | 0; //@line 8125
     HEAP32[$416 >> 2] = $94; //@line 8126
     $417 = $ReallocAsyncCtx10 + 184 | 0; //@line 8127
     HEAP32[$417 >> 2] = $96; //@line 8128
     $418 = $ReallocAsyncCtx10 + 188 | 0; //@line 8129
     HEAP32[$418 >> 2] = $98; //@line 8130
     $419 = $ReallocAsyncCtx10 + 192 | 0; //@line 8131
     HEAP32[$419 >> 2] = $100; //@line 8132
     $420 = $ReallocAsyncCtx10 + 196 | 0; //@line 8133
     HEAP32[$420 >> 2] = $102; //@line 8134
     $421 = $ReallocAsyncCtx10 + 200 | 0; //@line 8135
     HEAP32[$421 >> 2] = $104; //@line 8136
     $422 = $ReallocAsyncCtx10 + 204 | 0; //@line 8137
     HEAP32[$422 >> 2] = $106; //@line 8138
     $423 = $ReallocAsyncCtx10 + 208 | 0; //@line 8139
     HEAP32[$423 >> 2] = $108; //@line 8140
     $424 = $ReallocAsyncCtx10 + 212 | 0; //@line 8141
     HEAP32[$424 >> 2] = $110; //@line 8142
     $425 = $ReallocAsyncCtx10 + 216 | 0; //@line 8143
     HEAP32[$425 >> 2] = $112; //@line 8144
     $426 = $ReallocAsyncCtx10 + 220 | 0; //@line 8145
     HEAP32[$426 >> 2] = $114; //@line 8146
     $427 = $ReallocAsyncCtx10 + 224 | 0; //@line 8147
     HEAP32[$427 >> 2] = $116; //@line 8148
     $428 = $ReallocAsyncCtx10 + 228 | 0; //@line 8149
     HEAP32[$428 >> 2] = $118; //@line 8150
     $429 = $ReallocAsyncCtx10 + 232 | 0; //@line 8151
     HEAP32[$429 >> 2] = $120; //@line 8152
     $430 = $ReallocAsyncCtx10 + 236 | 0; //@line 8153
     HEAP32[$430 >> 2] = $122; //@line 8154
     $431 = $ReallocAsyncCtx10 + 240 | 0; //@line 8155
     HEAP32[$431 >> 2] = $124; //@line 8156
     $432 = $ReallocAsyncCtx10 + 244 | 0; //@line 8157
     HEAP32[$432 >> 2] = $161; //@line 8158
     $433 = $ReallocAsyncCtx10 + 248 | 0; //@line 8159
     HEAP32[$433 >> 2] = $128; //@line 8160
     $434 = $ReallocAsyncCtx10 + 252 | 0; //@line 8161
     HEAP32[$434 >> 2] = $130; //@line 8162
     $435 = $ReallocAsyncCtx10 + 256 | 0; //@line 8163
     HEAP32[$435 >> 2] = $132; //@line 8164
     $436 = $ReallocAsyncCtx10 + 260 | 0; //@line 8165
     HEAP32[$436 >> 2] = $134; //@line 8166
     $437 = $ReallocAsyncCtx10 + 264 | 0; //@line 8167
     HEAP32[$437 >> 2] = $10; //@line 8168
     sp = STACKTOP; //@line 8169
     return;
    }
   case 43:
    {
     $439 = $$1202$in$i & 65535; //@line 8174
     if (($$1202$i + -1 & 65535) <= 254) {
      $442 = HEAP32[$42 >> 2] | 0; //@line 8178
      if (!(HEAP32[$442 + 52 >> 2] | 0)) {
       HEAP16[$442 + 4 >> 1] = $$1202$i; //@line 8184
       $447 = $245 + 1 | 0; //@line 8185
       HEAP32[$92 >> 2] = $447; //@line 8186
       $448 = HEAP32[$44 >> 2] | 0; //@line 8187
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 8188
       $449 = FUNCTION_TABLE_ii[$448 & 31]($$1202$i) | 0; //@line 8189
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 8192
        $450 = $ReallocAsyncCtx5 + 4 | 0; //@line 8193
        HEAP32[$450 >> 2] = $2; //@line 8194
        $451 = $ReallocAsyncCtx5 + 8 | 0; //@line 8195
        HEAP32[$451 >> 2] = $4; //@line 8196
        $452 = $ReallocAsyncCtx5 + 12 | 0; //@line 8197
        HEAP32[$452 >> 2] = $439; //@line 8198
        $453 = $ReallocAsyncCtx5 + 16 | 0; //@line 8199
        HEAP32[$453 >> 2] = $6; //@line 8200
        $454 = $ReallocAsyncCtx5 + 20 | 0; //@line 8201
        HEAP32[$454 >> 2] = $8; //@line 8202
        $455 = $ReallocAsyncCtx5 + 24 | 0; //@line 8203
        HEAP32[$455 >> 2] = $10; //@line 8204
        $456 = $ReallocAsyncCtx5 + 28 | 0; //@line 8205
        HEAP32[$456 >> 2] = $12; //@line 8206
        $457 = $ReallocAsyncCtx5 + 32 | 0; //@line 8207
        HEAP32[$457 >> 2] = $14; //@line 8208
        $458 = $ReallocAsyncCtx5 + 36 | 0; //@line 8209
        HEAP32[$458 >> 2] = $16; //@line 8210
        $459 = $ReallocAsyncCtx5 + 40 | 0; //@line 8211
        HEAP32[$459 >> 2] = $447; //@line 8212
        $460 = $ReallocAsyncCtx5 + 44 | 0; //@line 8213
        HEAP32[$460 >> 2] = $18; //@line 8214
        $461 = $ReallocAsyncCtx5 + 48 | 0; //@line 8215
        HEAP32[$461 >> 2] = $20; //@line 8216
        $462 = $ReallocAsyncCtx5 + 52 | 0; //@line 8217
        HEAP32[$462 >> 2] = $22; //@line 8218
        $463 = $ReallocAsyncCtx5 + 56 | 0; //@line 8219
        HEAP32[$463 >> 2] = $24; //@line 8220
        $464 = $ReallocAsyncCtx5 + 60 | 0; //@line 8221
        HEAP32[$464 >> 2] = $28; //@line 8222
        $465 = $ReallocAsyncCtx5 + 64 | 0; //@line 8223
        HEAP32[$465 >> 2] = $30; //@line 8224
        $466 = $ReallocAsyncCtx5 + 68 | 0; //@line 8225
        HEAP32[$466 >> 2] = $32; //@line 8226
        $467 = $ReallocAsyncCtx5 + 72 | 0; //@line 8227
        HEAP32[$467 >> 2] = $36; //@line 8228
        $468 = $ReallocAsyncCtx5 + 76 | 0; //@line 8229
        HEAP32[$468 >> 2] = $38; //@line 8230
        $469 = $ReallocAsyncCtx5 + 80 | 0; //@line 8231
        HEAP32[$469 >> 2] = $40; //@line 8232
        $470 = $ReallocAsyncCtx5 + 84 | 0; //@line 8233
        HEAP32[$470 >> 2] = $42; //@line 8234
        $471 = $ReallocAsyncCtx5 + 88 | 0; //@line 8235
        HEAP32[$471 >> 2] = $44; //@line 8236
        $472 = $ReallocAsyncCtx5 + 92 | 0; //@line 8237
        HEAP32[$472 >> 2] = $46; //@line 8238
        $473 = $ReallocAsyncCtx5 + 96 | 0; //@line 8239
        HEAP32[$473 >> 2] = $48; //@line 8240
        $474 = $ReallocAsyncCtx5 + 100 | 0; //@line 8241
        HEAP32[$474 >> 2] = $50; //@line 8242
        $475 = $ReallocAsyncCtx5 + 104 | 0; //@line 8243
        HEAP32[$475 >> 2] = $52; //@line 8244
        $476 = $ReallocAsyncCtx5 + 108 | 0; //@line 8245
        HEAP32[$476 >> 2] = $54; //@line 8246
        $477 = $ReallocAsyncCtx5 + 112 | 0; //@line 8247
        HEAP32[$477 >> 2] = $56; //@line 8248
        $478 = $ReallocAsyncCtx5 + 116 | 0; //@line 8249
        HEAP32[$478 >> 2] = $58; //@line 8250
        $479 = $ReallocAsyncCtx5 + 120 | 0; //@line 8251
        HEAP32[$479 >> 2] = $60; //@line 8252
        $480 = $ReallocAsyncCtx5 + 124 | 0; //@line 8253
        HEAP32[$480 >> 2] = $62; //@line 8254
        $481 = $ReallocAsyncCtx5 + 128 | 0; //@line 8255
        HEAP32[$481 >> 2] = $64; //@line 8256
        $482 = $ReallocAsyncCtx5 + 132 | 0; //@line 8257
        HEAP32[$482 >> 2] = $66; //@line 8258
        $483 = $ReallocAsyncCtx5 + 136 | 0; //@line 8259
        HEAP32[$483 >> 2] = $68; //@line 8260
        $484 = $ReallocAsyncCtx5 + 140 | 0; //@line 8261
        HEAP32[$484 >> 2] = $70; //@line 8262
        $485 = $ReallocAsyncCtx5 + 144 | 0; //@line 8263
        HEAP32[$485 >> 2] = $72; //@line 8264
        $486 = $ReallocAsyncCtx5 + 148 | 0; //@line 8265
        HEAP32[$486 >> 2] = $74; //@line 8266
        $487 = $ReallocAsyncCtx5 + 152 | 0; //@line 8267
        HEAP32[$487 >> 2] = $76; //@line 8268
        $488 = $ReallocAsyncCtx5 + 156 | 0; //@line 8269
        HEAP32[$488 >> 2] = $78; //@line 8270
        $489 = $ReallocAsyncCtx5 + 160 | 0; //@line 8271
        HEAP32[$489 >> 2] = $80; //@line 8272
        $490 = $ReallocAsyncCtx5 + 164 | 0; //@line 8273
        HEAP32[$490 >> 2] = $82; //@line 8274
        $491 = $ReallocAsyncCtx5 + 168 | 0; //@line 8275
        HEAP32[$491 >> 2] = $84; //@line 8276
        $492 = $ReallocAsyncCtx5 + 172 | 0; //@line 8277
        HEAP32[$492 >> 2] = $86; //@line 8278
        $493 = $ReallocAsyncCtx5 + 176 | 0; //@line 8279
        HEAP32[$493 >> 2] = $88; //@line 8280
        $494 = $ReallocAsyncCtx5 + 180 | 0; //@line 8281
        HEAP32[$494 >> 2] = $90; //@line 8282
        $495 = $ReallocAsyncCtx5 + 184 | 0; //@line 8283
        HEAP32[$495 >> 2] = $92; //@line 8284
        $496 = $ReallocAsyncCtx5 + 188 | 0; //@line 8285
        HEAP32[$496 >> 2] = $94; //@line 8286
        $497 = $ReallocAsyncCtx5 + 192 | 0; //@line 8287
        HEAP32[$497 >> 2] = $96; //@line 8288
        $498 = $ReallocAsyncCtx5 + 196 | 0; //@line 8289
        HEAP32[$498 >> 2] = $98; //@line 8290
        $499 = $ReallocAsyncCtx5 + 200 | 0; //@line 8291
        HEAP32[$499 >> 2] = $100; //@line 8292
        $500 = $ReallocAsyncCtx5 + 204 | 0; //@line 8293
        HEAP32[$500 >> 2] = $102; //@line 8294
        $501 = $ReallocAsyncCtx5 + 208 | 0; //@line 8295
        HEAP32[$501 >> 2] = $104; //@line 8296
        $502 = $ReallocAsyncCtx5 + 212 | 0; //@line 8297
        HEAP32[$502 >> 2] = $106; //@line 8298
        $503 = $ReallocAsyncCtx5 + 216 | 0; //@line 8299
        HEAP32[$503 >> 2] = $108; //@line 8300
        $504 = $ReallocAsyncCtx5 + 220 | 0; //@line 8301
        HEAP32[$504 >> 2] = $110; //@line 8302
        $505 = $ReallocAsyncCtx5 + 224 | 0; //@line 8303
        HEAP32[$505 >> 2] = $112; //@line 8304
        $506 = $ReallocAsyncCtx5 + 228 | 0; //@line 8305
        HEAP32[$506 >> 2] = $114; //@line 8306
        $507 = $ReallocAsyncCtx5 + 232 | 0; //@line 8307
        HEAP32[$507 >> 2] = $116; //@line 8308
        $508 = $ReallocAsyncCtx5 + 236 | 0; //@line 8309
        HEAP32[$508 >> 2] = $118; //@line 8310
        $509 = $ReallocAsyncCtx5 + 240 | 0; //@line 8311
        HEAP32[$509 >> 2] = $120; //@line 8312
        $510 = $ReallocAsyncCtx5 + 244 | 0; //@line 8313
        HEAP32[$510 >> 2] = $122; //@line 8314
        $511 = $ReallocAsyncCtx5 + 248 | 0; //@line 8315
        HEAP32[$511 >> 2] = $124; //@line 8316
        $512 = $ReallocAsyncCtx5 + 252 | 0; //@line 8317
        HEAP32[$512 >> 2] = $161; //@line 8318
        $513 = $ReallocAsyncCtx5 + 256 | 0; //@line 8319
        HEAP32[$513 >> 2] = $128; //@line 8320
        $514 = $ReallocAsyncCtx5 + 260 | 0; //@line 8321
        HEAP32[$514 >> 2] = $130; //@line 8322
        $515 = $ReallocAsyncCtx5 + 264 | 0; //@line 8323
        HEAP32[$515 >> 2] = $132; //@line 8324
        $516 = $ReallocAsyncCtx5 + 268 | 0; //@line 8325
        HEAP32[$516 >> 2] = $134; //@line 8326
        $517 = $ReallocAsyncCtx5 + 272 | 0; //@line 8327
        HEAP32[$517 >> 2] = $136; //@line 8328
        sp = STACKTOP; //@line 8329
        return;
       }
       HEAP32[___async_retval >> 2] = $449; //@line 8333
       ___async_unwind = 0; //@line 8334
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 8335
       $450 = $ReallocAsyncCtx5 + 4 | 0; //@line 8336
       HEAP32[$450 >> 2] = $2; //@line 8337
       $451 = $ReallocAsyncCtx5 + 8 | 0; //@line 8338
       HEAP32[$451 >> 2] = $4; //@line 8339
       $452 = $ReallocAsyncCtx5 + 12 | 0; //@line 8340
       HEAP32[$452 >> 2] = $439; //@line 8341
       $453 = $ReallocAsyncCtx5 + 16 | 0; //@line 8342
       HEAP32[$453 >> 2] = $6; //@line 8343
       $454 = $ReallocAsyncCtx5 + 20 | 0; //@line 8344
       HEAP32[$454 >> 2] = $8; //@line 8345
       $455 = $ReallocAsyncCtx5 + 24 | 0; //@line 8346
       HEAP32[$455 >> 2] = $10; //@line 8347
       $456 = $ReallocAsyncCtx5 + 28 | 0; //@line 8348
       HEAP32[$456 >> 2] = $12; //@line 8349
       $457 = $ReallocAsyncCtx5 + 32 | 0; //@line 8350
       HEAP32[$457 >> 2] = $14; //@line 8351
       $458 = $ReallocAsyncCtx5 + 36 | 0; //@line 8352
       HEAP32[$458 >> 2] = $16; //@line 8353
       $459 = $ReallocAsyncCtx5 + 40 | 0; //@line 8354
       HEAP32[$459 >> 2] = $447; //@line 8355
       $460 = $ReallocAsyncCtx5 + 44 | 0; //@line 8356
       HEAP32[$460 >> 2] = $18; //@line 8357
       $461 = $ReallocAsyncCtx5 + 48 | 0; //@line 8358
       HEAP32[$461 >> 2] = $20; //@line 8359
       $462 = $ReallocAsyncCtx5 + 52 | 0; //@line 8360
       HEAP32[$462 >> 2] = $22; //@line 8361
       $463 = $ReallocAsyncCtx5 + 56 | 0; //@line 8362
       HEAP32[$463 >> 2] = $24; //@line 8363
       $464 = $ReallocAsyncCtx5 + 60 | 0; //@line 8364
       HEAP32[$464 >> 2] = $28; //@line 8365
       $465 = $ReallocAsyncCtx5 + 64 | 0; //@line 8366
       HEAP32[$465 >> 2] = $30; //@line 8367
       $466 = $ReallocAsyncCtx5 + 68 | 0; //@line 8368
       HEAP32[$466 >> 2] = $32; //@line 8369
       $467 = $ReallocAsyncCtx5 + 72 | 0; //@line 8370
       HEAP32[$467 >> 2] = $36; //@line 8371
       $468 = $ReallocAsyncCtx5 + 76 | 0; //@line 8372
       HEAP32[$468 >> 2] = $38; //@line 8373
       $469 = $ReallocAsyncCtx5 + 80 | 0; //@line 8374
       HEAP32[$469 >> 2] = $40; //@line 8375
       $470 = $ReallocAsyncCtx5 + 84 | 0; //@line 8376
       HEAP32[$470 >> 2] = $42; //@line 8377
       $471 = $ReallocAsyncCtx5 + 88 | 0; //@line 8378
       HEAP32[$471 >> 2] = $44; //@line 8379
       $472 = $ReallocAsyncCtx5 + 92 | 0; //@line 8380
       HEAP32[$472 >> 2] = $46; //@line 8381
       $473 = $ReallocAsyncCtx5 + 96 | 0; //@line 8382
       HEAP32[$473 >> 2] = $48; //@line 8383
       $474 = $ReallocAsyncCtx5 + 100 | 0; //@line 8384
       HEAP32[$474 >> 2] = $50; //@line 8385
       $475 = $ReallocAsyncCtx5 + 104 | 0; //@line 8386
       HEAP32[$475 >> 2] = $52; //@line 8387
       $476 = $ReallocAsyncCtx5 + 108 | 0; //@line 8388
       HEAP32[$476 >> 2] = $54; //@line 8389
       $477 = $ReallocAsyncCtx5 + 112 | 0; //@line 8390
       HEAP32[$477 >> 2] = $56; //@line 8391
       $478 = $ReallocAsyncCtx5 + 116 | 0; //@line 8392
       HEAP32[$478 >> 2] = $58; //@line 8393
       $479 = $ReallocAsyncCtx5 + 120 | 0; //@line 8394
       HEAP32[$479 >> 2] = $60; //@line 8395
       $480 = $ReallocAsyncCtx5 + 124 | 0; //@line 8396
       HEAP32[$480 >> 2] = $62; //@line 8397
       $481 = $ReallocAsyncCtx5 + 128 | 0; //@line 8398
       HEAP32[$481 >> 2] = $64; //@line 8399
       $482 = $ReallocAsyncCtx5 + 132 | 0; //@line 8400
       HEAP32[$482 >> 2] = $66; //@line 8401
       $483 = $ReallocAsyncCtx5 + 136 | 0; //@line 8402
       HEAP32[$483 >> 2] = $68; //@line 8403
       $484 = $ReallocAsyncCtx5 + 140 | 0; //@line 8404
       HEAP32[$484 >> 2] = $70; //@line 8405
       $485 = $ReallocAsyncCtx5 + 144 | 0; //@line 8406
       HEAP32[$485 >> 2] = $72; //@line 8407
       $486 = $ReallocAsyncCtx5 + 148 | 0; //@line 8408
       HEAP32[$486 >> 2] = $74; //@line 8409
       $487 = $ReallocAsyncCtx5 + 152 | 0; //@line 8410
       HEAP32[$487 >> 2] = $76; //@line 8411
       $488 = $ReallocAsyncCtx5 + 156 | 0; //@line 8412
       HEAP32[$488 >> 2] = $78; //@line 8413
       $489 = $ReallocAsyncCtx5 + 160 | 0; //@line 8414
       HEAP32[$489 >> 2] = $80; //@line 8415
       $490 = $ReallocAsyncCtx5 + 164 | 0; //@line 8416
       HEAP32[$490 >> 2] = $82; //@line 8417
       $491 = $ReallocAsyncCtx5 + 168 | 0; //@line 8418
       HEAP32[$491 >> 2] = $84; //@line 8419
       $492 = $ReallocAsyncCtx5 + 172 | 0; //@line 8420
       HEAP32[$492 >> 2] = $86; //@line 8421
       $493 = $ReallocAsyncCtx5 + 176 | 0; //@line 8422
       HEAP32[$493 >> 2] = $88; //@line 8423
       $494 = $ReallocAsyncCtx5 + 180 | 0; //@line 8424
       HEAP32[$494 >> 2] = $90; //@line 8425
       $495 = $ReallocAsyncCtx5 + 184 | 0; //@line 8426
       HEAP32[$495 >> 2] = $92; //@line 8427
       $496 = $ReallocAsyncCtx5 + 188 | 0; //@line 8428
       HEAP32[$496 >> 2] = $94; //@line 8429
       $497 = $ReallocAsyncCtx5 + 192 | 0; //@line 8430
       HEAP32[$497 >> 2] = $96; //@line 8431
       $498 = $ReallocAsyncCtx5 + 196 | 0; //@line 8432
       HEAP32[$498 >> 2] = $98; //@line 8433
       $499 = $ReallocAsyncCtx5 + 200 | 0; //@line 8434
       HEAP32[$499 >> 2] = $100; //@line 8435
       $500 = $ReallocAsyncCtx5 + 204 | 0; //@line 8436
       HEAP32[$500 >> 2] = $102; //@line 8437
       $501 = $ReallocAsyncCtx5 + 208 | 0; //@line 8438
       HEAP32[$501 >> 2] = $104; //@line 8439
       $502 = $ReallocAsyncCtx5 + 212 | 0; //@line 8440
       HEAP32[$502 >> 2] = $106; //@line 8441
       $503 = $ReallocAsyncCtx5 + 216 | 0; //@line 8442
       HEAP32[$503 >> 2] = $108; //@line 8443
       $504 = $ReallocAsyncCtx5 + 220 | 0; //@line 8444
       HEAP32[$504 >> 2] = $110; //@line 8445
       $505 = $ReallocAsyncCtx5 + 224 | 0; //@line 8446
       HEAP32[$505 >> 2] = $112; //@line 8447
       $506 = $ReallocAsyncCtx5 + 228 | 0; //@line 8448
       HEAP32[$506 >> 2] = $114; //@line 8449
       $507 = $ReallocAsyncCtx5 + 232 | 0; //@line 8450
       HEAP32[$507 >> 2] = $116; //@line 8451
       $508 = $ReallocAsyncCtx5 + 236 | 0; //@line 8452
       HEAP32[$508 >> 2] = $118; //@line 8453
       $509 = $ReallocAsyncCtx5 + 240 | 0; //@line 8454
       HEAP32[$509 >> 2] = $120; //@line 8455
       $510 = $ReallocAsyncCtx5 + 244 | 0; //@line 8456
       HEAP32[$510 >> 2] = $122; //@line 8457
       $511 = $ReallocAsyncCtx5 + 248 | 0; //@line 8458
       HEAP32[$511 >> 2] = $124; //@line 8459
       $512 = $ReallocAsyncCtx5 + 252 | 0; //@line 8460
       HEAP32[$512 >> 2] = $161; //@line 8461
       $513 = $ReallocAsyncCtx5 + 256 | 0; //@line 8462
       HEAP32[$513 >> 2] = $128; //@line 8463
       $514 = $ReallocAsyncCtx5 + 260 | 0; //@line 8464
       HEAP32[$514 >> 2] = $130; //@line 8465
       $515 = $ReallocAsyncCtx5 + 264 | 0; //@line 8466
       HEAP32[$515 >> 2] = $132; //@line 8467
       $516 = $ReallocAsyncCtx5 + 268 | 0; //@line 8468
       HEAP32[$516 >> 2] = $134; //@line 8469
       $517 = $ReallocAsyncCtx5 + 272 | 0; //@line 8470
       HEAP32[$517 >> 2] = $136; //@line 8471
       sp = STACKTOP; //@line 8472
       return;
      }
     }
     _mbed_tracef(2, 3844, 4605, $62); //@line 8476
     break L2;
     break;
    }
   case 49:
    {
     $519 = HEAP32[$42 >> 2] | 0; //@line 8481
     $520 = $519 + 56 | 0; //@line 8482
     if (HEAP32[$520 >> 2] | 0) {
      _mbed_tracef(2, 3844, 4739, $32); //@line 8486
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 8490
     $524 = _sn_coap_parser_options_parse_multiple_options($116, $92, $179, $520, $519 + 6 | 0, 8, $$1202$i) | 0; //@line 8491
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 8494
      $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 8495
      HEAP32[$525 >> 2] = $2; //@line 8496
      $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 8497
      HEAP32[$526 >> 2] = $4; //@line 8498
      $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 8499
      HEAP32[$527 >> 2] = $6; //@line 8500
      $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 8501
      HEAP32[$528 >> 2] = $8; //@line 8502
      $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 8503
      HEAP32[$529 >> 2] = $14; //@line 8504
      $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 8505
      HEAP32[$530 >> 2] = $12; //@line 8506
      $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 8507
      HEAP32[$531 >> 2] = $136; //@line 8508
      $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 8509
      HEAP32[$532 >> 2] = $16; //@line 8510
      $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 8511
      HEAP32[$533 >> 2] = $18; //@line 8512
      $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 8513
      HEAP32[$534 >> 2] = $20; //@line 8514
      $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 8515
      HEAP32[$535 >> 2] = $22; //@line 8516
      $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 8517
      HEAP32[$536 >> 2] = $24; //@line 8518
      $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 8519
      HEAP32[$537 >> 2] = $28; //@line 8520
      $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 8521
      HEAP32[$538 >> 2] = $30; //@line 8522
      $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 8523
      HEAP32[$539 >> 2] = $32; //@line 8524
      $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 8525
      HEAP32[$540 >> 2] = $36; //@line 8526
      $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 8527
      HEAP32[$541 >> 2] = $38; //@line 8528
      $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 8529
      HEAP32[$542 >> 2] = $40; //@line 8530
      $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 8531
      HEAP32[$543 >> 2] = $42; //@line 8532
      $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 8533
      HEAP32[$544 >> 2] = $44; //@line 8534
      $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 8535
      HEAP32[$545 >> 2] = $46; //@line 8536
      $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 8537
      HEAP32[$546 >> 2] = $48; //@line 8538
      $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 8539
      HEAP32[$547 >> 2] = $50; //@line 8540
      $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 8541
      HEAP32[$548 >> 2] = $52; //@line 8542
      $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 8543
      HEAP32[$549 >> 2] = $54; //@line 8544
      $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 8545
      HEAP32[$550 >> 2] = $56; //@line 8546
      $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 8547
      HEAP32[$551 >> 2] = $58; //@line 8548
      $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 8549
      HEAP32[$552 >> 2] = $60; //@line 8550
      $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 8551
      HEAP32[$553 >> 2] = $62; //@line 8552
      $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 8553
      HEAP32[$554 >> 2] = $64; //@line 8554
      $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 8555
      HEAP32[$555 >> 2] = $66; //@line 8556
      $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 8557
      HEAP32[$556 >> 2] = $68; //@line 8558
      $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 8559
      HEAP32[$557 >> 2] = $70; //@line 8560
      $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 8561
      HEAP32[$558 >> 2] = $72; //@line 8562
      $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 8563
      HEAP32[$559 >> 2] = $74; //@line 8564
      $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 8565
      HEAP32[$560 >> 2] = $76; //@line 8566
      $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 8567
      HEAP32[$561 >> 2] = $78; //@line 8568
      $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 8569
      HEAP32[$562 >> 2] = $80; //@line 8570
      $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 8571
      HEAP32[$563 >> 2] = $82; //@line 8572
      $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 8573
      HEAP32[$564 >> 2] = $84; //@line 8574
      $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 8575
      HEAP32[$565 >> 2] = $86; //@line 8576
      $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 8577
      HEAP32[$566 >> 2] = $88; //@line 8578
      $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 8579
      HEAP32[$567 >> 2] = $90; //@line 8580
      $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 8581
      HEAP32[$568 >> 2] = $92; //@line 8582
      $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 8583
      HEAP32[$569 >> 2] = $94; //@line 8584
      $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 8585
      HEAP32[$570 >> 2] = $96; //@line 8586
      $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 8587
      HEAP32[$571 >> 2] = $98; //@line 8588
      $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 8589
      HEAP32[$572 >> 2] = $100; //@line 8590
      $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 8591
      HEAP32[$573 >> 2] = $102; //@line 8592
      $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 8593
      HEAP32[$574 >> 2] = $104; //@line 8594
      $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 8595
      HEAP32[$575 >> 2] = $106; //@line 8596
      $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 8597
      HEAP32[$576 >> 2] = $108; //@line 8598
      $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 8599
      HEAP32[$577 >> 2] = $110; //@line 8600
      $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 8601
      HEAP32[$578 >> 2] = $112; //@line 8602
      $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 8603
      HEAP32[$579 >> 2] = $114; //@line 8604
      $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 8605
      HEAP32[$580 >> 2] = $116; //@line 8606
      $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 8607
      HEAP32[$581 >> 2] = $118; //@line 8608
      $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 8609
      HEAP32[$582 >> 2] = $120; //@line 8610
      $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 8611
      HEAP32[$583 >> 2] = $122; //@line 8612
      $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 8613
      HEAP32[$584 >> 2] = $124; //@line 8614
      $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 8615
      HEAP32[$585 >> 2] = $161; //@line 8616
      $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 8617
      HEAP32[$586 >> 2] = $128; //@line 8618
      $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 8619
      HEAP32[$587 >> 2] = $130; //@line 8620
      $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 8621
      HEAP32[$588 >> 2] = $132; //@line 8622
      $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 8623
      HEAP32[$589 >> 2] = $134; //@line 8624
      $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 8625
      HEAP32[$590 >> 2] = $10; //@line 8626
      sp = STACKTOP; //@line 8627
      return;
     }
     HEAP8[___async_retval >> 0] = $524; //@line 8631
     ___async_unwind = 0; //@line 8632
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 8633
     $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 8634
     HEAP32[$525 >> 2] = $2; //@line 8635
     $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 8636
     HEAP32[$526 >> 2] = $4; //@line 8637
     $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 8638
     HEAP32[$527 >> 2] = $6; //@line 8639
     $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 8640
     HEAP32[$528 >> 2] = $8; //@line 8641
     $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 8642
     HEAP32[$529 >> 2] = $14; //@line 8643
     $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 8644
     HEAP32[$530 >> 2] = $12; //@line 8645
     $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 8646
     HEAP32[$531 >> 2] = $136; //@line 8647
     $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 8648
     HEAP32[$532 >> 2] = $16; //@line 8649
     $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 8650
     HEAP32[$533 >> 2] = $18; //@line 8651
     $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 8652
     HEAP32[$534 >> 2] = $20; //@line 8653
     $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 8654
     HEAP32[$535 >> 2] = $22; //@line 8655
     $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 8656
     HEAP32[$536 >> 2] = $24; //@line 8657
     $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 8658
     HEAP32[$537 >> 2] = $28; //@line 8659
     $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 8660
     HEAP32[$538 >> 2] = $30; //@line 8661
     $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 8662
     HEAP32[$539 >> 2] = $32; //@line 8663
     $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 8664
     HEAP32[$540 >> 2] = $36; //@line 8665
     $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 8666
     HEAP32[$541 >> 2] = $38; //@line 8667
     $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 8668
     HEAP32[$542 >> 2] = $40; //@line 8669
     $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 8670
     HEAP32[$543 >> 2] = $42; //@line 8671
     $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 8672
     HEAP32[$544 >> 2] = $44; //@line 8673
     $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 8674
     HEAP32[$545 >> 2] = $46; //@line 8675
     $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 8676
     HEAP32[$546 >> 2] = $48; //@line 8677
     $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 8678
     HEAP32[$547 >> 2] = $50; //@line 8679
     $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 8680
     HEAP32[$548 >> 2] = $52; //@line 8681
     $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 8682
     HEAP32[$549 >> 2] = $54; //@line 8683
     $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 8684
     HEAP32[$550 >> 2] = $56; //@line 8685
     $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 8686
     HEAP32[$551 >> 2] = $58; //@line 8687
     $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 8688
     HEAP32[$552 >> 2] = $60; //@line 8689
     $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 8690
     HEAP32[$553 >> 2] = $62; //@line 8691
     $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 8692
     HEAP32[$554 >> 2] = $64; //@line 8693
     $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 8694
     HEAP32[$555 >> 2] = $66; //@line 8695
     $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 8696
     HEAP32[$556 >> 2] = $68; //@line 8697
     $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 8698
     HEAP32[$557 >> 2] = $70; //@line 8699
     $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 8700
     HEAP32[$558 >> 2] = $72; //@line 8701
     $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 8702
     HEAP32[$559 >> 2] = $74; //@line 8703
     $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 8704
     HEAP32[$560 >> 2] = $76; //@line 8705
     $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 8706
     HEAP32[$561 >> 2] = $78; //@line 8707
     $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 8708
     HEAP32[$562 >> 2] = $80; //@line 8709
     $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 8710
     HEAP32[$563 >> 2] = $82; //@line 8711
     $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 8712
     HEAP32[$564 >> 2] = $84; //@line 8713
     $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 8714
     HEAP32[$565 >> 2] = $86; //@line 8715
     $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 8716
     HEAP32[$566 >> 2] = $88; //@line 8717
     $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 8718
     HEAP32[$567 >> 2] = $90; //@line 8719
     $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 8720
     HEAP32[$568 >> 2] = $92; //@line 8721
     $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 8722
     HEAP32[$569 >> 2] = $94; //@line 8723
     $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 8724
     HEAP32[$570 >> 2] = $96; //@line 8725
     $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 8726
     HEAP32[$571 >> 2] = $98; //@line 8727
     $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 8728
     HEAP32[$572 >> 2] = $100; //@line 8729
     $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 8730
     HEAP32[$573 >> 2] = $102; //@line 8731
     $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 8732
     HEAP32[$574 >> 2] = $104; //@line 8733
     $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 8734
     HEAP32[$575 >> 2] = $106; //@line 8735
     $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 8736
     HEAP32[$576 >> 2] = $108; //@line 8737
     $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 8738
     HEAP32[$577 >> 2] = $110; //@line 8739
     $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 8740
     HEAP32[$578 >> 2] = $112; //@line 8741
     $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 8742
     HEAP32[$579 >> 2] = $114; //@line 8743
     $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 8744
     HEAP32[$580 >> 2] = $116; //@line 8745
     $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 8746
     HEAP32[$581 >> 2] = $118; //@line 8747
     $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 8748
     HEAP32[$582 >> 2] = $120; //@line 8749
     $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 8750
     HEAP32[$583 >> 2] = $122; //@line 8751
     $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 8752
     HEAP32[$584 >> 2] = $124; //@line 8753
     $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 8754
     HEAP32[$585 >> 2] = $161; //@line 8755
     $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 8756
     HEAP32[$586 >> 2] = $128; //@line 8757
     $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 8758
     HEAP32[$587 >> 2] = $130; //@line 8759
     $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 8760
     HEAP32[$588 >> 2] = $132; //@line 8761
     $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 8762
     HEAP32[$589 >> 2] = $134; //@line 8763
     $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 8764
     HEAP32[$590 >> 2] = $10; //@line 8765
     sp = STACKTOP; //@line 8766
     return;
    }
   case 56:
    {
     _mbed_tracef(2, 3844, 4872, $130); //@line 8771
     break L2;
     break;
    }
   case 60:
    {
     $608 = HEAP32[$42 >> 2] | 0; //@line 8776
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 8779
     $611 = _sn_coap_parser_options_parse_multiple_options($116, $92, $179, $608 + 60 | 0, $608 + 8 | 0, 20, $$1202$i) | 0; //@line 8780
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 8783
      $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 8784
      HEAP32[$612 >> 2] = $2; //@line 8785
      $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 8786
      HEAP32[$613 >> 2] = $4; //@line 8787
      $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 8788
      HEAP32[$614 >> 2] = $6; //@line 8789
      $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 8790
      HEAP32[$615 >> 2] = $8; //@line 8791
      $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 8792
      HEAP32[$616 >> 2] = $14; //@line 8793
      $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 8794
      HEAP32[$617 >> 2] = $12; //@line 8795
      $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 8796
      HEAP32[$618 >> 2] = $136; //@line 8797
      $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 8798
      HEAP32[$619 >> 2] = $16; //@line 8799
      $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 8800
      HEAP32[$620 >> 2] = $18; //@line 8801
      $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 8802
      HEAP32[$621 >> 2] = $20; //@line 8803
      $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 8804
      HEAP32[$622 >> 2] = $22; //@line 8805
      $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 8806
      HEAP32[$623 >> 2] = $24; //@line 8807
      $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 8808
      HEAP32[$624 >> 2] = $28; //@line 8809
      $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 8810
      HEAP32[$625 >> 2] = $30; //@line 8811
      $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 8812
      HEAP32[$626 >> 2] = $32; //@line 8813
      $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 8814
      HEAP32[$627 >> 2] = $36; //@line 8815
      $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 8816
      HEAP32[$628 >> 2] = $38; //@line 8817
      $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 8818
      HEAP32[$629 >> 2] = $40; //@line 8819
      $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 8820
      HEAP32[$630 >> 2] = $42; //@line 8821
      $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 8822
      HEAP32[$631 >> 2] = $44; //@line 8823
      $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 8824
      HEAP32[$632 >> 2] = $46; //@line 8825
      $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 8826
      HEAP32[$633 >> 2] = $48; //@line 8827
      $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 8828
      HEAP32[$634 >> 2] = $50; //@line 8829
      $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 8830
      HEAP32[$635 >> 2] = $52; //@line 8831
      $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 8832
      HEAP32[$636 >> 2] = $54; //@line 8833
      $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 8834
      HEAP32[$637 >> 2] = $56; //@line 8835
      $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 8836
      HEAP32[$638 >> 2] = $58; //@line 8837
      $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 8838
      HEAP32[$639 >> 2] = $60; //@line 8839
      $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 8840
      HEAP32[$640 >> 2] = $62; //@line 8841
      $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 8842
      HEAP32[$641 >> 2] = $64; //@line 8843
      $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 8844
      HEAP32[$642 >> 2] = $66; //@line 8845
      $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 8846
      HEAP32[$643 >> 2] = $68; //@line 8847
      $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 8848
      HEAP32[$644 >> 2] = $70; //@line 8849
      $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 8850
      HEAP32[$645 >> 2] = $72; //@line 8851
      $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 8852
      HEAP32[$646 >> 2] = $74; //@line 8853
      $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 8854
      HEAP32[$647 >> 2] = $76; //@line 8855
      $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 8856
      HEAP32[$648 >> 2] = $78; //@line 8857
      $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 8858
      HEAP32[$649 >> 2] = $80; //@line 8859
      $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 8860
      HEAP32[$650 >> 2] = $82; //@line 8861
      $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 8862
      HEAP32[$651 >> 2] = $84; //@line 8863
      $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 8864
      HEAP32[$652 >> 2] = $86; //@line 8865
      $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 8866
      HEAP32[$653 >> 2] = $88; //@line 8867
      $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 8868
      HEAP32[$654 >> 2] = $90; //@line 8869
      $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 8870
      HEAP32[$655 >> 2] = $92; //@line 8871
      $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 8872
      HEAP32[$656 >> 2] = $94; //@line 8873
      $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 8874
      HEAP32[$657 >> 2] = $96; //@line 8875
      $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 8876
      HEAP32[$658 >> 2] = $98; //@line 8877
      $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 8878
      HEAP32[$659 >> 2] = $100; //@line 8879
      $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 8880
      HEAP32[$660 >> 2] = $102; //@line 8881
      $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 8882
      HEAP32[$661 >> 2] = $104; //@line 8883
      $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 8884
      HEAP32[$662 >> 2] = $106; //@line 8885
      $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 8886
      HEAP32[$663 >> 2] = $108; //@line 8887
      $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 8888
      HEAP32[$664 >> 2] = $110; //@line 8889
      $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 8890
      HEAP32[$665 >> 2] = $112; //@line 8891
      $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 8892
      HEAP32[$666 >> 2] = $114; //@line 8893
      $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 8894
      HEAP32[$667 >> 2] = $116; //@line 8895
      $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 8896
      HEAP32[$668 >> 2] = $118; //@line 8897
      $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 8898
      HEAP32[$669 >> 2] = $120; //@line 8899
      $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 8900
      HEAP32[$670 >> 2] = $122; //@line 8901
      $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 8902
      HEAP32[$671 >> 2] = $124; //@line 8903
      $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 8904
      HEAP32[$672 >> 2] = $161; //@line 8905
      $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 8906
      HEAP32[$673 >> 2] = $128; //@line 8907
      $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 8908
      HEAP32[$674 >> 2] = $130; //@line 8909
      $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 8910
      HEAP32[$675 >> 2] = $132; //@line 8911
      $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 8912
      HEAP32[$676 >> 2] = $134; //@line 8913
      $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 8914
      HEAP32[$677 >> 2] = $10; //@line 8915
      sp = STACKTOP; //@line 8916
      return;
     }
     HEAP8[___async_retval >> 0] = $611; //@line 8920
     ___async_unwind = 0; //@line 8921
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 8922
     $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 8923
     HEAP32[$612 >> 2] = $2; //@line 8924
     $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 8925
     HEAP32[$613 >> 2] = $4; //@line 8926
     $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 8927
     HEAP32[$614 >> 2] = $6; //@line 8928
     $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 8929
     HEAP32[$615 >> 2] = $8; //@line 8930
     $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 8931
     HEAP32[$616 >> 2] = $14; //@line 8932
     $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 8933
     HEAP32[$617 >> 2] = $12; //@line 8934
     $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 8935
     HEAP32[$618 >> 2] = $136; //@line 8936
     $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 8937
     HEAP32[$619 >> 2] = $16; //@line 8938
     $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 8939
     HEAP32[$620 >> 2] = $18; //@line 8940
     $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 8941
     HEAP32[$621 >> 2] = $20; //@line 8942
     $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 8943
     HEAP32[$622 >> 2] = $22; //@line 8944
     $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 8945
     HEAP32[$623 >> 2] = $24; //@line 8946
     $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 8947
     HEAP32[$624 >> 2] = $28; //@line 8948
     $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 8949
     HEAP32[$625 >> 2] = $30; //@line 8950
     $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 8951
     HEAP32[$626 >> 2] = $32; //@line 8952
     $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 8953
     HEAP32[$627 >> 2] = $36; //@line 8954
     $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 8955
     HEAP32[$628 >> 2] = $38; //@line 8956
     $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 8957
     HEAP32[$629 >> 2] = $40; //@line 8958
     $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 8959
     HEAP32[$630 >> 2] = $42; //@line 8960
     $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 8961
     HEAP32[$631 >> 2] = $44; //@line 8962
     $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 8963
     HEAP32[$632 >> 2] = $46; //@line 8964
     $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 8965
     HEAP32[$633 >> 2] = $48; //@line 8966
     $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 8967
     HEAP32[$634 >> 2] = $50; //@line 8968
     $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 8969
     HEAP32[$635 >> 2] = $52; //@line 8970
     $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 8971
     HEAP32[$636 >> 2] = $54; //@line 8972
     $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 8973
     HEAP32[$637 >> 2] = $56; //@line 8974
     $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 8975
     HEAP32[$638 >> 2] = $58; //@line 8976
     $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 8977
     HEAP32[$639 >> 2] = $60; //@line 8978
     $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 8979
     HEAP32[$640 >> 2] = $62; //@line 8980
     $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 8981
     HEAP32[$641 >> 2] = $64; //@line 8982
     $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 8983
     HEAP32[$642 >> 2] = $66; //@line 8984
     $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 8985
     HEAP32[$643 >> 2] = $68; //@line 8986
     $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 8987
     HEAP32[$644 >> 2] = $70; //@line 8988
     $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 8989
     HEAP32[$645 >> 2] = $72; //@line 8990
     $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 8991
     HEAP32[$646 >> 2] = $74; //@line 8992
     $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 8993
     HEAP32[$647 >> 2] = $76; //@line 8994
     $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 8995
     HEAP32[$648 >> 2] = $78; //@line 8996
     $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 8997
     HEAP32[$649 >> 2] = $80; //@line 8998
     $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 8999
     HEAP32[$650 >> 2] = $82; //@line 9000
     $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 9001
     HEAP32[$651 >> 2] = $84; //@line 9002
     $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 9003
     HEAP32[$652 >> 2] = $86; //@line 9004
     $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 9005
     HEAP32[$653 >> 2] = $88; //@line 9006
     $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 9007
     HEAP32[$654 >> 2] = $90; //@line 9008
     $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 9009
     HEAP32[$655 >> 2] = $92; //@line 9010
     $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 9011
     HEAP32[$656 >> 2] = $94; //@line 9012
     $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 9013
     HEAP32[$657 >> 2] = $96; //@line 9014
     $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 9015
     HEAP32[$658 >> 2] = $98; //@line 9016
     $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 9017
     HEAP32[$659 >> 2] = $100; //@line 9018
     $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 9019
     HEAP32[$660 >> 2] = $102; //@line 9020
     $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 9021
     HEAP32[$661 >> 2] = $104; //@line 9022
     $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 9023
     HEAP32[$662 >> 2] = $106; //@line 9024
     $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 9025
     HEAP32[$663 >> 2] = $108; //@line 9026
     $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 9027
     HEAP32[$664 >> 2] = $110; //@line 9028
     $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 9029
     HEAP32[$665 >> 2] = $112; //@line 9030
     $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 9031
     HEAP32[$666 >> 2] = $114; //@line 9032
     $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 9033
     HEAP32[$667 >> 2] = $116; //@line 9034
     $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 9035
     HEAP32[$668 >> 2] = $118; //@line 9036
     $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 9037
     HEAP32[$669 >> 2] = $120; //@line 9038
     $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 9039
     HEAP32[$670 >> 2] = $122; //@line 9040
     $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 9041
     HEAP32[$671 >> 2] = $124; //@line 9042
     $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 9043
     HEAP32[$672 >> 2] = $161; //@line 9044
     $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 9045
     HEAP32[$673 >> 2] = $128; //@line 9046
     $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 9047
     HEAP32[$674 >> 2] = $130; //@line 9048
     $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 9049
     HEAP32[$675 >> 2] = $132; //@line 9050
     $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 9051
     HEAP32[$676 >> 2] = $134; //@line 9052
     $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 9053
     HEAP32[$677 >> 2] = $10; //@line 9054
     sp = STACKTOP; //@line 9055
     return;
    }
   case 63:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 9060
     $679 = _sn_coap_parser_options_parse_multiple_options($116, $92, $179, $58, $84, 11, $$1202$i) | 0; //@line 9061
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 9064
      $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 9065
      HEAP32[$680 >> 2] = $2; //@line 9066
      $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 9067
      HEAP32[$681 >> 2] = $4; //@line 9068
      $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 9069
      HEAP32[$682 >> 2] = $6; //@line 9070
      $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 9071
      HEAP32[$683 >> 2] = $8; //@line 9072
      $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 9073
      HEAP32[$684 >> 2] = $14; //@line 9074
      $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 9075
      HEAP32[$685 >> 2] = $12; //@line 9076
      $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 9077
      HEAP32[$686 >> 2] = $136; //@line 9078
      $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 9079
      HEAP32[$687 >> 2] = $16; //@line 9080
      $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 9081
      HEAP32[$688 >> 2] = $18; //@line 9082
      $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 9083
      HEAP32[$689 >> 2] = $20; //@line 9084
      $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 9085
      HEAP32[$690 >> 2] = $22; //@line 9086
      $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 9087
      HEAP32[$691 >> 2] = $24; //@line 9088
      $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 9089
      HEAP32[$692 >> 2] = $28; //@line 9090
      $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 9091
      HEAP32[$693 >> 2] = $30; //@line 9092
      $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 9093
      HEAP32[$694 >> 2] = $32; //@line 9094
      $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 9095
      HEAP32[$695 >> 2] = $36; //@line 9096
      $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 9097
      HEAP32[$696 >> 2] = $38; //@line 9098
      $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 9099
      HEAP32[$697 >> 2] = $40; //@line 9100
      $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 9101
      HEAP32[$698 >> 2] = $42; //@line 9102
      $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 9103
      HEAP32[$699 >> 2] = $44; //@line 9104
      $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 9105
      HEAP32[$700 >> 2] = $46; //@line 9106
      $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 9107
      HEAP32[$701 >> 2] = $48; //@line 9108
      $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 9109
      HEAP32[$702 >> 2] = $50; //@line 9110
      $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 9111
      HEAP32[$703 >> 2] = $52; //@line 9112
      $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 9113
      HEAP32[$704 >> 2] = $54; //@line 9114
      $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 9115
      HEAP32[$705 >> 2] = $56; //@line 9116
      $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 9117
      HEAP32[$706 >> 2] = $58; //@line 9118
      $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 9119
      HEAP32[$707 >> 2] = $60; //@line 9120
      $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 9121
      HEAP32[$708 >> 2] = $62; //@line 9122
      $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 9123
      HEAP32[$709 >> 2] = $64; //@line 9124
      $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 9125
      HEAP32[$710 >> 2] = $66; //@line 9126
      $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 9127
      HEAP32[$711 >> 2] = $68; //@line 9128
      $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 9129
      HEAP32[$712 >> 2] = $70; //@line 9130
      $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 9131
      HEAP32[$713 >> 2] = $72; //@line 9132
      $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 9133
      HEAP32[$714 >> 2] = $74; //@line 9134
      $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 9135
      HEAP32[$715 >> 2] = $76; //@line 9136
      $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 9137
      HEAP32[$716 >> 2] = $78; //@line 9138
      $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 9139
      HEAP32[$717 >> 2] = $80; //@line 9140
      $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 9141
      HEAP32[$718 >> 2] = $82; //@line 9142
      $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 9143
      HEAP32[$719 >> 2] = $84; //@line 9144
      $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 9145
      HEAP32[$720 >> 2] = $86; //@line 9146
      $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 9147
      HEAP32[$721 >> 2] = $88; //@line 9148
      $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 9149
      HEAP32[$722 >> 2] = $90; //@line 9150
      $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 9151
      HEAP32[$723 >> 2] = $92; //@line 9152
      $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 9153
      HEAP32[$724 >> 2] = $94; //@line 9154
      $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 9155
      HEAP32[$725 >> 2] = $96; //@line 9156
      $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 9157
      HEAP32[$726 >> 2] = $98; //@line 9158
      $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 9159
      HEAP32[$727 >> 2] = $100; //@line 9160
      $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 9161
      HEAP32[$728 >> 2] = $102; //@line 9162
      $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 9163
      HEAP32[$729 >> 2] = $104; //@line 9164
      $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 9165
      HEAP32[$730 >> 2] = $106; //@line 9166
      $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 9167
      HEAP32[$731 >> 2] = $108; //@line 9168
      $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 9169
      HEAP32[$732 >> 2] = $110; //@line 9170
      $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 9171
      HEAP32[$733 >> 2] = $112; //@line 9172
      $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 9173
      HEAP32[$734 >> 2] = $114; //@line 9174
      $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 9175
      HEAP32[$735 >> 2] = $116; //@line 9176
      $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 9177
      HEAP32[$736 >> 2] = $118; //@line 9178
      $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 9179
      HEAP32[$737 >> 2] = $120; //@line 9180
      $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 9181
      HEAP32[$738 >> 2] = $122; //@line 9182
      $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 9183
      HEAP32[$739 >> 2] = $124; //@line 9184
      $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 9185
      HEAP32[$740 >> 2] = $161; //@line 9186
      $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 9187
      HEAP32[$741 >> 2] = $128; //@line 9188
      $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 9189
      HEAP32[$742 >> 2] = $130; //@line 9190
      $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 9191
      HEAP32[$743 >> 2] = $132; //@line 9192
      $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 9193
      HEAP32[$744 >> 2] = $134; //@line 9194
      $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 9195
      HEAP32[$745 >> 2] = $10; //@line 9196
      sp = STACKTOP; //@line 9197
      return;
     }
     HEAP8[___async_retval >> 0] = $679; //@line 9201
     ___async_unwind = 0; //@line 9202
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 9203
     $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 9204
     HEAP32[$680 >> 2] = $2; //@line 9205
     $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 9206
     HEAP32[$681 >> 2] = $4; //@line 9207
     $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 9208
     HEAP32[$682 >> 2] = $6; //@line 9209
     $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 9210
     HEAP32[$683 >> 2] = $8; //@line 9211
     $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 9212
     HEAP32[$684 >> 2] = $14; //@line 9213
     $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 9214
     HEAP32[$685 >> 2] = $12; //@line 9215
     $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 9216
     HEAP32[$686 >> 2] = $136; //@line 9217
     $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 9218
     HEAP32[$687 >> 2] = $16; //@line 9219
     $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 9220
     HEAP32[$688 >> 2] = $18; //@line 9221
     $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 9222
     HEAP32[$689 >> 2] = $20; //@line 9223
     $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 9224
     HEAP32[$690 >> 2] = $22; //@line 9225
     $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 9226
     HEAP32[$691 >> 2] = $24; //@line 9227
     $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 9228
     HEAP32[$692 >> 2] = $28; //@line 9229
     $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 9230
     HEAP32[$693 >> 2] = $30; //@line 9231
     $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 9232
     HEAP32[$694 >> 2] = $32; //@line 9233
     $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 9234
     HEAP32[$695 >> 2] = $36; //@line 9235
     $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 9236
     HEAP32[$696 >> 2] = $38; //@line 9237
     $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 9238
     HEAP32[$697 >> 2] = $40; //@line 9239
     $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 9240
     HEAP32[$698 >> 2] = $42; //@line 9241
     $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 9242
     HEAP32[$699 >> 2] = $44; //@line 9243
     $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 9244
     HEAP32[$700 >> 2] = $46; //@line 9245
     $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 9246
     HEAP32[$701 >> 2] = $48; //@line 9247
     $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 9248
     HEAP32[$702 >> 2] = $50; //@line 9249
     $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 9250
     HEAP32[$703 >> 2] = $52; //@line 9251
     $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 9252
     HEAP32[$704 >> 2] = $54; //@line 9253
     $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 9254
     HEAP32[$705 >> 2] = $56; //@line 9255
     $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 9256
     HEAP32[$706 >> 2] = $58; //@line 9257
     $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 9258
     HEAP32[$707 >> 2] = $60; //@line 9259
     $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 9260
     HEAP32[$708 >> 2] = $62; //@line 9261
     $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 9262
     HEAP32[$709 >> 2] = $64; //@line 9263
     $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 9264
     HEAP32[$710 >> 2] = $66; //@line 9265
     $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 9266
     HEAP32[$711 >> 2] = $68; //@line 9267
     $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 9268
     HEAP32[$712 >> 2] = $70; //@line 9269
     $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 9270
     HEAP32[$713 >> 2] = $72; //@line 9271
     $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 9272
     HEAP32[$714 >> 2] = $74; //@line 9273
     $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 9274
     HEAP32[$715 >> 2] = $76; //@line 9275
     $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 9276
     HEAP32[$716 >> 2] = $78; //@line 9277
     $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 9278
     HEAP32[$717 >> 2] = $80; //@line 9279
     $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 9280
     HEAP32[$718 >> 2] = $82; //@line 9281
     $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 9282
     HEAP32[$719 >> 2] = $84; //@line 9283
     $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 9284
     HEAP32[$720 >> 2] = $86; //@line 9285
     $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 9286
     HEAP32[$721 >> 2] = $88; //@line 9287
     $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 9288
     HEAP32[$722 >> 2] = $90; //@line 9289
     $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 9290
     HEAP32[$723 >> 2] = $92; //@line 9291
     $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 9292
     HEAP32[$724 >> 2] = $94; //@line 9293
     $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 9294
     HEAP32[$725 >> 2] = $96; //@line 9295
     $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 9296
     HEAP32[$726 >> 2] = $98; //@line 9297
     $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 9298
     HEAP32[$727 >> 2] = $100; //@line 9299
     $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 9300
     HEAP32[$728 >> 2] = $102; //@line 9301
     $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 9302
     HEAP32[$729 >> 2] = $104; //@line 9303
     $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 9304
     HEAP32[$730 >> 2] = $106; //@line 9305
     $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 9306
     HEAP32[$731 >> 2] = $108; //@line 9307
     $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 9308
     HEAP32[$732 >> 2] = $110; //@line 9309
     $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 9310
     HEAP32[$733 >> 2] = $112; //@line 9311
     $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 9312
     HEAP32[$734 >> 2] = $114; //@line 9313
     $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 9314
     HEAP32[$735 >> 2] = $116; //@line 9315
     $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 9316
     HEAP32[$736 >> 2] = $118; //@line 9317
     $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 9318
     HEAP32[$737 >> 2] = $120; //@line 9319
     $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 9320
     HEAP32[$738 >> 2] = $122; //@line 9321
     $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 9322
     HEAP32[$739 >> 2] = $124; //@line 9323
     $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 9324
     HEAP32[$740 >> 2] = $161; //@line 9325
     $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 9326
     HEAP32[$741 >> 2] = $128; //@line 9327
     $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 9328
     HEAP32[$742 >> 2] = $130; //@line 9329
     $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 9330
     HEAP32[$743 >> 2] = $132; //@line 9331
     $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 9332
     HEAP32[$744 >> 2] = $134; //@line 9333
     $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 9334
     HEAP32[$745 >> 2] = $10; //@line 9335
     sp = STACKTOP; //@line 9336
     return;
    }
   case 68:
    {
     _mbed_tracef(2, 3844, 5067, $72); //@line 9341
     break L2;
     break;
    }
   case 72:
    {
     $763 = HEAP32[$42 >> 2] | 0; //@line 9346
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 9349
     $766 = _sn_coap_parser_options_parse_multiple_options($116, $92, $179, $763 + 64 | 0, $763 + 10 | 0, 15, $$1202$i) | 0; //@line 9350
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 9353
      $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 9354
      HEAP32[$767 >> 2] = $2; //@line 9355
      $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 9356
      HEAP32[$768 >> 2] = $4; //@line 9357
      $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 9358
      HEAP32[$769 >> 2] = $6; //@line 9359
      $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 9360
      HEAP32[$770 >> 2] = $8; //@line 9361
      $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 9362
      HEAP32[$771 >> 2] = $14; //@line 9363
      $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 9364
      HEAP32[$772 >> 2] = $12; //@line 9365
      $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 9366
      HEAP32[$773 >> 2] = $136; //@line 9367
      $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 9368
      HEAP32[$774 >> 2] = $16; //@line 9369
      $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 9370
      HEAP32[$775 >> 2] = $18; //@line 9371
      $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 9372
      HEAP32[$776 >> 2] = $20; //@line 9373
      $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 9374
      HEAP32[$777 >> 2] = $22; //@line 9375
      $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 9376
      HEAP32[$778 >> 2] = $24; //@line 9377
      $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 9378
      HEAP32[$779 >> 2] = $28; //@line 9379
      $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 9380
      HEAP32[$780 >> 2] = $30; //@line 9381
      $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 9382
      HEAP32[$781 >> 2] = $32; //@line 9383
      $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 9384
      HEAP32[$782 >> 2] = $36; //@line 9385
      $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 9386
      HEAP32[$783 >> 2] = $38; //@line 9387
      $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 9388
      HEAP32[$784 >> 2] = $40; //@line 9389
      $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 9390
      HEAP32[$785 >> 2] = $42; //@line 9391
      $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 9392
      HEAP32[$786 >> 2] = $44; //@line 9393
      $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 9394
      HEAP32[$787 >> 2] = $46; //@line 9395
      $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 9396
      HEAP32[$788 >> 2] = $48; //@line 9397
      $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 9398
      HEAP32[$789 >> 2] = $50; //@line 9399
      $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 9400
      HEAP32[$790 >> 2] = $52; //@line 9401
      $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 9402
      HEAP32[$791 >> 2] = $54; //@line 9403
      $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 9404
      HEAP32[$792 >> 2] = $56; //@line 9405
      $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 9406
      HEAP32[$793 >> 2] = $58; //@line 9407
      $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 9408
      HEAP32[$794 >> 2] = $60; //@line 9409
      $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 9410
      HEAP32[$795 >> 2] = $62; //@line 9411
      $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 9412
      HEAP32[$796 >> 2] = $64; //@line 9413
      $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 9414
      HEAP32[$797 >> 2] = $66; //@line 9415
      $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 9416
      HEAP32[$798 >> 2] = $68; //@line 9417
      $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 9418
      HEAP32[$799 >> 2] = $70; //@line 9419
      $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 9420
      HEAP32[$800 >> 2] = $72; //@line 9421
      $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 9422
      HEAP32[$801 >> 2] = $74; //@line 9423
      $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 9424
      HEAP32[$802 >> 2] = $76; //@line 9425
      $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 9426
      HEAP32[$803 >> 2] = $78; //@line 9427
      $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 9428
      HEAP32[$804 >> 2] = $80; //@line 9429
      $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 9430
      HEAP32[$805 >> 2] = $82; //@line 9431
      $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 9432
      HEAP32[$806 >> 2] = $84; //@line 9433
      $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 9434
      HEAP32[$807 >> 2] = $86; //@line 9435
      $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 9436
      HEAP32[$808 >> 2] = $88; //@line 9437
      $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 9438
      HEAP32[$809 >> 2] = $90; //@line 9439
      $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 9440
      HEAP32[$810 >> 2] = $92; //@line 9441
      $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 9442
      HEAP32[$811 >> 2] = $94; //@line 9443
      $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 9444
      HEAP32[$812 >> 2] = $96; //@line 9445
      $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 9446
      HEAP32[$813 >> 2] = $98; //@line 9447
      $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 9448
      HEAP32[$814 >> 2] = $100; //@line 9449
      $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 9450
      HEAP32[$815 >> 2] = $102; //@line 9451
      $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 9452
      HEAP32[$816 >> 2] = $104; //@line 9453
      $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 9454
      HEAP32[$817 >> 2] = $106; //@line 9455
      $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 9456
      HEAP32[$818 >> 2] = $108; //@line 9457
      $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 9458
      HEAP32[$819 >> 2] = $110; //@line 9459
      $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 9460
      HEAP32[$820 >> 2] = $112; //@line 9461
      $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 9462
      HEAP32[$821 >> 2] = $114; //@line 9463
      $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 9464
      HEAP32[$822 >> 2] = $116; //@line 9465
      $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 9466
      HEAP32[$823 >> 2] = $118; //@line 9467
      $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 9468
      HEAP32[$824 >> 2] = $120; //@line 9469
      $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 9470
      HEAP32[$825 >> 2] = $122; //@line 9471
      $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 9472
      HEAP32[$826 >> 2] = $124; //@line 9473
      $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 9474
      HEAP32[$827 >> 2] = $161; //@line 9475
      $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 9476
      HEAP32[$828 >> 2] = $128; //@line 9477
      $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 9478
      HEAP32[$829 >> 2] = $130; //@line 9479
      $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 9480
      HEAP32[$830 >> 2] = $132; //@line 9481
      $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 9482
      HEAP32[$831 >> 2] = $134; //@line 9483
      $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 9484
      HEAP32[$832 >> 2] = $10; //@line 9485
      sp = STACKTOP; //@line 9486
      return;
     }
     HEAP8[___async_retval >> 0] = $766; //@line 9490
     ___async_unwind = 0; //@line 9491
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 9492
     $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 9493
     HEAP32[$767 >> 2] = $2; //@line 9494
     $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 9495
     HEAP32[$768 >> 2] = $4; //@line 9496
     $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 9497
     HEAP32[$769 >> 2] = $6; //@line 9498
     $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 9499
     HEAP32[$770 >> 2] = $8; //@line 9500
     $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 9501
     HEAP32[$771 >> 2] = $14; //@line 9502
     $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 9503
     HEAP32[$772 >> 2] = $12; //@line 9504
     $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 9505
     HEAP32[$773 >> 2] = $136; //@line 9506
     $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 9507
     HEAP32[$774 >> 2] = $16; //@line 9508
     $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 9509
     HEAP32[$775 >> 2] = $18; //@line 9510
     $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 9511
     HEAP32[$776 >> 2] = $20; //@line 9512
     $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 9513
     HEAP32[$777 >> 2] = $22; //@line 9514
     $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 9515
     HEAP32[$778 >> 2] = $24; //@line 9516
     $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 9517
     HEAP32[$779 >> 2] = $28; //@line 9518
     $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 9519
     HEAP32[$780 >> 2] = $30; //@line 9520
     $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 9521
     HEAP32[$781 >> 2] = $32; //@line 9522
     $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 9523
     HEAP32[$782 >> 2] = $36; //@line 9524
     $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 9525
     HEAP32[$783 >> 2] = $38; //@line 9526
     $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 9527
     HEAP32[$784 >> 2] = $40; //@line 9528
     $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 9529
     HEAP32[$785 >> 2] = $42; //@line 9530
     $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 9531
     HEAP32[$786 >> 2] = $44; //@line 9532
     $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 9533
     HEAP32[$787 >> 2] = $46; //@line 9534
     $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 9535
     HEAP32[$788 >> 2] = $48; //@line 9536
     $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 9537
     HEAP32[$789 >> 2] = $50; //@line 9538
     $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 9539
     HEAP32[$790 >> 2] = $52; //@line 9540
     $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 9541
     HEAP32[$791 >> 2] = $54; //@line 9542
     $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 9543
     HEAP32[$792 >> 2] = $56; //@line 9544
     $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 9545
     HEAP32[$793 >> 2] = $58; //@line 9546
     $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 9547
     HEAP32[$794 >> 2] = $60; //@line 9548
     $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 9549
     HEAP32[$795 >> 2] = $62; //@line 9550
     $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 9551
     HEAP32[$796 >> 2] = $64; //@line 9552
     $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 9553
     HEAP32[$797 >> 2] = $66; //@line 9554
     $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 9555
     HEAP32[$798 >> 2] = $68; //@line 9556
     $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 9557
     HEAP32[$799 >> 2] = $70; //@line 9558
     $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 9559
     HEAP32[$800 >> 2] = $72; //@line 9560
     $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 9561
     HEAP32[$801 >> 2] = $74; //@line 9562
     $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 9563
     HEAP32[$802 >> 2] = $76; //@line 9564
     $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 9565
     HEAP32[$803 >> 2] = $78; //@line 9566
     $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 9567
     HEAP32[$804 >> 2] = $80; //@line 9568
     $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 9569
     HEAP32[$805 >> 2] = $82; //@line 9570
     $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 9571
     HEAP32[$806 >> 2] = $84; //@line 9572
     $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 9573
     HEAP32[$807 >> 2] = $86; //@line 9574
     $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 9575
     HEAP32[$808 >> 2] = $88; //@line 9576
     $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 9577
     HEAP32[$809 >> 2] = $90; //@line 9578
     $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 9579
     HEAP32[$810 >> 2] = $92; //@line 9580
     $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 9581
     HEAP32[$811 >> 2] = $94; //@line 9582
     $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 9583
     HEAP32[$812 >> 2] = $96; //@line 9584
     $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 9585
     HEAP32[$813 >> 2] = $98; //@line 9586
     $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 9587
     HEAP32[$814 >> 2] = $100; //@line 9588
     $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 9589
     HEAP32[$815 >> 2] = $102; //@line 9590
     $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 9591
     HEAP32[$816 >> 2] = $104; //@line 9592
     $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 9593
     HEAP32[$817 >> 2] = $106; //@line 9594
     $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 9595
     HEAP32[$818 >> 2] = $108; //@line 9596
     $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 9597
     HEAP32[$819 >> 2] = $110; //@line 9598
     $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 9599
     HEAP32[$820 >> 2] = $112; //@line 9600
     $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 9601
     HEAP32[$821 >> 2] = $114; //@line 9602
     $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 9603
     HEAP32[$822 >> 2] = $116; //@line 9604
     $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 9605
     HEAP32[$823 >> 2] = $118; //@line 9606
     $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 9607
     HEAP32[$824 >> 2] = $120; //@line 9608
     $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 9609
     HEAP32[$825 >> 2] = $122; //@line 9610
     $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 9611
     HEAP32[$826 >> 2] = $124; //@line 9612
     $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 9613
     HEAP32[$827 >> 2] = $161; //@line 9614
     $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 9615
     HEAP32[$828 >> 2] = $128; //@line 9616
     $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 9617
     HEAP32[$829 >> 2] = $130; //@line 9618
     $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 9619
     HEAP32[$830 >> 2] = $132; //@line 9620
     $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 9621
     HEAP32[$831 >> 2] = $134; //@line 9622
     $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 9623
     HEAP32[$832 >> 2] = $10; //@line 9624
     sp = STACKTOP; //@line 9625
     return;
    }
   case 77:
    {
     _mbed_tracef(2, 3844, 5193, $10); //@line 9630
     break L2;
     break;
    }
   case 83:
    {
     _mbed_tracef(2, 3844, 5254, $106); //@line 9635
     break L2;
     break;
    }
   case 89:
    {
     _mbed_tracef(2, 3844, 5315, $52); //@line 9640
     break L2;
     break;
    }
   case 95:
    {
     _mbed_tracef(2, 3844, 5376, $20); //@line 9645
     break L2;
     break;
    }
   case 101:
    {
     _mbed_tracef(2, 3844, 5436, $12); //@line 9650
     break L2;
     break;
    }
   case 105:
    {
     _mbed_tracef(2, 3844, 5496, $88); //@line 9655
     break L2;
     break;
    }
   case 108:
    {
     if (($141 - $6 | 0) >= ($16 | 0)) {
      $943 = ___async_retval; //@line 9664
      HEAP32[$943 >> 2] = $22; //@line 9665
      return;
     }
     if ((HEAP8[$141 >> 0] | 0) == -1) {
      $933 = $141 + 1 | 0; //@line 9671
      HEAP32[$92 >> 2] = $933; //@line 9672
      $934 = $933; //@line 9673
      $936 = $6 - $934 + $16 | 0; //@line 9675
      HEAP16[$76 + 24 >> 1] = $936; //@line 9678
      if ($936 & 65535 | 0) {
       HEAP32[$76 + 36 >> 2] = $934; //@line 9683
       $943 = ___async_retval; //@line 9684
       HEAP32[$943 >> 2] = $22; //@line 9685
       return;
      }
     } else {
      _mbed_tracef(2, 3844, 5543, $28); //@line 9689
     }
     HEAP32[$76 + 4 >> 2] = 1; //@line 9692
     $943 = ___async_retval; //@line 9693
     HEAP32[$943 >> 2] = $22; //@line 9694
     return;
    }
   }
  }
 } while (0);
 HEAP32[$76 + 4 >> 2] = 1; //@line 9702
 $943 = ___async_retval; //@line 9703
 HEAP32[$943 >> 2] = $22; //@line 9704
 return;
}
function _sn_coap_parser__async_cb_161($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $144 = 0, $147 = 0, $16 = 0, $161 = 0, $166 = 0, $178 = 0, $18 = 0, $181 = 0, $182 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $263 = 0, $264 = 0, $269 = 0, $272 = 0, $275 = 0, $276 = 0, $28 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $368 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $438 = 0, $44 = 0, $441 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $519 = 0, $52 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $593 = 0, $596 = 0, $597 = 0, $6 = 0, $60 = 0, $602 = 0, $605 = 0, $607 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $748 = 0, $751 = 0, $752 = 0, $757 = 0, $76 = 0, $760 = 0, $762 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $835 = 0, $838 = 0, $839 = 0, $84 = 0, $844 = 0, $847 = 0, $851 = 0, $854 = 0, $855 = 0, $86 = 0, $860 = 0, $863 = 0, $867 = 0, $870 = 0, $871 = 0, $876 = 0, $879 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $890 = 0, $895 = 0, $898 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $911 = 0, $916 = 0, $919 = 0, $92 = 0, $923 = 0, $924 = 0, $934 = 0, $935 = 0, $937 = 0, $94 = 0, $944 = 0, $945 = 0, $946 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $281$looptemp = 0, $602$looptemp = 0, $757$looptemp = 0, $844$looptemp = 0, $860$looptemp = 0, $876$looptemp = 0, $895$looptemp = 0, $916$looptemp = 0, $269$looptemp = 0;
 sp = STACKTOP; //@line 53
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 55
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 57
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 59
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 61
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 63
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 65
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 67
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 69
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 71
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 73
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 75
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 77
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 79
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 81
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 85
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 87
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 89
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 91
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 93
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 95
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 97
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 99
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 101
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 103
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 105
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 107
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 109
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 113
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 115
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 117
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 119
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 121
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 123
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 125
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 127
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 129
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 131
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 133
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 135
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 137
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 139
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 141
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 143
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 145
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 147
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 149
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 151
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 153
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 155
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 157
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 159
 $108 = HEAP16[$0 + 216 >> 1] | 0; //@line 161
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 163
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 165
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 167
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 169
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 171
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 173
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 175
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 177
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 179
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 181
 HEAP32[HEAP32[$0 + 60 >> 2] >> 2] = $AsyncRetVal; //@line 182
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3844, 4050, $12); //@line 186
  } else {
   _memcpy($AsyncRetVal | 0, $14 | 0, HEAPU8[$66 >> 0] | 0) | 0; //@line 190
   $133 = $14 + (HEAPU8[$66 >> 0] | 0) | 0; //@line 193
   HEAP32[$82 >> 2] = $133; //@line 194
   $134 = $133; //@line 195
   $135 = $108 & 65535; //@line 196
   $136 = $112; //@line 197
   $137 = $136 + $135 | 0; //@line 198
   $139 = $66 + 40 | 0; //@line 200
   $140 = $66 + 32 | 0; //@line 201
   $141 = $66 + 22 | 0; //@line 202
   $$0208$i = 0; //@line 203
   $$sink275$i = $137 - $134 | 0; //@line 203
   $144 = $133; //@line 203
   $945 = $134; //@line 203
   L6 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 109; //@line 208
     break;
    }
    $trunc277$i = HEAP8[$144 >> 0] | 0; //@line 211
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 109; //@line 214
     break;
    }
    $147 = $trunc277$i & 15; //@line 218
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 219
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 11; //@line 224
      break L6;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$144 + 1 >> 0] | 0; //@line 232
      $$sink214$i = 13; //@line 232
      $$sink3$i = 1; //@line 232
      label = 12; //@line 233
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$144 + 1 >> 0] << 8) + 269 | 0; //@line 245
      $$sink214$i = HEAPU8[$144 + 2 >> 0] | 0; //@line 245
      $$sink3$i = 2; //@line 245
      label = 12; //@line 246
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 250
      $166 = $144; //@line 250
      $946 = $945; //@line 250
     }
    }
    if ((label | 0) == 12) {
     label = 0; //@line 254
     $161 = $144 + $$sink3$i | 0; //@line 256
     HEAP32[$82 >> 2] = $161; //@line 257
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 259
     $166 = $161; //@line 259
     $946 = $161; //@line 259
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 262
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 16; //@line 266
      break L6;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$166 + 1 >> 0] | 0; //@line 274
      $$sink216$i = 13; //@line 274
      $$sink8$i = 1; //@line 274
      label = 17; //@line 275
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$166 + 1 >> 0] << 8) + 269 | 0; //@line 287
      $$sink216$i = HEAPU8[$166 + 2 >> 0] | 0; //@line 287
      $$sink8$i = 2; //@line 287
      label = 17; //@line 288
      break;
     }
    default:
     {
      $$1202$in$i = $147; //@line 292
      $181 = $946; //@line 292
      $248 = $166; //@line 292
     }
    }
    if ((label | 0) == 17) {
     label = 0; //@line 296
     $178 = $166 + $$sink8$i | 0; //@line 298
     HEAP32[$82 >> 2] = $178; //@line 299
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 301
     $181 = $178; //@line 301
     $248 = $178; //@line 301
    }
    $$1202$i = $$1202$in$i & 65535; //@line 303
    $182 = $137 - $181 & 65535; //@line 305
    $trunc$i = $$0208$i & 65535; //@line 306
    L22 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 64; //@line 310
       break L6;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$139 >> 2] | 0)) {
        label = 20; //@line 318
        break L6;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 35; //@line 323
         break L6;
         break;
        }
       case 4:
        {
         label = 41; //@line 328
         break L6;
         break;
        }
       case 3:
        {
         label = 44; //@line 333
         break L6;
         break;
        }
       case 8:
        {
         label = 50; //@line 338
         break L6;
         break;
        }
       case 20:
        {
         label = 61; //@line 343
         break L6;
         break;
        }
       case 11:
        {
         label = 64; //@line 348
         break L6;
         break;
        }
       case 15:
        {
         label = 73; //@line 353
         break L6;
         break;
        }
       case 12:
        {
         label = 24; //@line 358
         break L22;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 31; //@line 365
          break L6;
         }
         $275 = $248 + 1 | 0; //@line 368
         HEAP32[$82 >> 2] = $275; //@line 369
         $276 = $$1202$in$i & 255; //@line 370
         if (!($276 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 373
         } else {
          $$045$i221$i = $276; //@line 375
          $$06$i220$i = 0; //@line 375
          $281 = $275; //@line 375
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 377
           $281$looptemp = $281;
           $281 = $281 + 1 | 0; //@line 379
           HEAP32[$82 >> 2] = $281; //@line 380
           $284 = $$06$i220$i << 8 | HEAPU8[$281$looptemp >> 0]; //@line 383
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $284; //@line 386
            break;
           } else {
            $$06$i220$i = $284; //@line 389
           }
          }
         }
         HEAP32[(HEAP32[$139 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 395
         break L22;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 57; //@line 402
          break L6;
         }
         $593 = (HEAP32[$139 >> 2] | 0) + 28 | 0; //@line 406
         if ((HEAP32[$593 >> 2] | 0) != -1) {
          label = 57; //@line 410
          break L6;
         }
         $596 = $248 + 1 | 0; //@line 413
         HEAP32[$82 >> 2] = $596; //@line 414
         $597 = $$1202$in$i & 255; //@line 415
         if (!($597 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 418
         } else {
          $$045$i263$i = $597; //@line 420
          $$06$i262$i = 0; //@line 420
          $602 = $596; //@line 420
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 422
           $602$looptemp = $602;
           $602 = $602 + 1 | 0; //@line 424
           HEAP32[$82 >> 2] = $602; //@line 425
           $605 = $$06$i262$i << 8 | HEAPU8[$602$looptemp >> 0]; //@line 428
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $605; //@line 431
            break;
           } else {
            $$06$i262$i = $605; //@line 434
           }
          }
         }
         HEAP32[$593 >> 2] = $$0$lcssa$i265$i; //@line 438
         break L22;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 69; //@line 445
          break L6;
         }
         $748 = (HEAP32[$139 >> 2] | 0) + 32 | 0; //@line 449
         if ((HEAP32[$748 >> 2] | 0) != -1) {
          label = 69; //@line 453
          break L6;
         }
         $751 = $248 + 1 | 0; //@line 456
         HEAP32[$82 >> 2] = $751; //@line 457
         $752 = $$1202$in$i & 255; //@line 458
         if (!($752 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 461
         } else {
          $$045$i270$i = $752; //@line 463
          $$06$i269$i = 0; //@line 463
          $757 = $751; //@line 463
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 465
           $757$looptemp = $757;
           $757 = $757 + 1 | 0; //@line 467
           HEAP32[$82 >> 2] = $757; //@line 468
           $760 = $$06$i269$i << 8 | HEAPU8[$757$looptemp >> 0]; //@line 471
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $760; //@line 474
            break;
           } else {
            $$06$i269$i = $760; //@line 477
           }
          }
         }
         HEAP32[$748 >> 2] = $$0$lcssa$i272$i; //@line 481
         break L22;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 78; //@line 488
          break L6;
         }
         $835 = (HEAP32[$139 >> 2] | 0) + 40 | 0; //@line 492
         if ((HEAP32[$835 >> 2] | 0) != -1) {
          label = 78; //@line 496
          break L6;
         }
         $838 = $248 + 1 | 0; //@line 499
         HEAP32[$82 >> 2] = $838; //@line 500
         $839 = $$1202$in$i & 255; //@line 501
         if (!($839 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 504
         } else {
          $$045$i256$i = $839; //@line 506
          $$06$i255$i = 0; //@line 506
          $844 = $838; //@line 506
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 508
           $844$looptemp = $844;
           $844 = $844 + 1 | 0; //@line 510
           HEAP32[$82 >> 2] = $844; //@line 511
           $847 = $$06$i255$i << 8 | HEAPU8[$844$looptemp >> 0]; //@line 514
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $847; //@line 517
            break;
           } else {
            $$06$i255$i = $847; //@line 520
           }
          }
         }
         HEAP32[$835 >> 2] = $$0$lcssa$i258$i; //@line 524
         break L22;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 84; //@line 531
          break L6;
         }
         $851 = (HEAP32[$139 >> 2] | 0) + 36 | 0; //@line 535
         if ((HEAP32[$851 >> 2] | 0) != -1) {
          label = 84; //@line 539
          break L6;
         }
         $854 = $248 + 1 | 0; //@line 542
         HEAP32[$82 >> 2] = $854; //@line 543
         $855 = $$1202$in$i & 255; //@line 544
         if (!($855 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 547
         } else {
          $$045$i249$i = $855; //@line 549
          $$06$i248$i = 0; //@line 549
          $860 = $854; //@line 549
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 551
           $860$looptemp = $860;
           $860 = $860 + 1 | 0; //@line 553
           HEAP32[$82 >> 2] = $860; //@line 554
           $863 = $$06$i248$i << 8 | HEAPU8[$860$looptemp >> 0]; //@line 557
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $863; //@line 560
            break;
           } else {
            $$06$i248$i = $863; //@line 563
           }
          }
         }
         HEAP32[$851 >> 2] = $$0$lcssa$i251$i; //@line 567
         break L22;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 90; //@line 574
          break L6;
         }
         $867 = (HEAP32[$139 >> 2] | 0) + 12 | 0; //@line 578
         if ((HEAP32[$867 >> 2] | 0) != -1) {
          label = 90; //@line 582
          break L6;
         }
         $870 = $248 + 1 | 0; //@line 585
         HEAP32[$82 >> 2] = $870; //@line 586
         $871 = $$1202$in$i & 255; //@line 587
         if (!($871 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 590
         } else {
          $$045$i242$i = $871; //@line 592
          $$06$i241$i = 0; //@line 592
          $876 = $870; //@line 592
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 594
           $876$looptemp = $876;
           $876 = $876 + 1 | 0; //@line 596
           HEAP32[$82 >> 2] = $876; //@line 597
           $879 = $$06$i241$i << 8 | HEAPU8[$876$looptemp >> 0]; //@line 600
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $879; //@line 603
            break;
           } else {
            $$06$i241$i = $879; //@line 606
           }
          }
         }
         HEAP32[$867 >> 2] = $$0$lcssa$i244$i; //@line 610
         break L22;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 96; //@line 617
          break L6;
         }
         $883 = (HEAP32[$139 >> 2] | 0) + 1 | 0; //@line 621
         $884 = HEAP8[$883 >> 0] | 0; //@line 622
         if ($884 & 1) {
          label = 96; //@line 626
          break L6;
         }
         HEAP8[$883 >> 0] = $884 | 1; //@line 630
         $889 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 632
         HEAP32[$82 >> 2] = $889; //@line 633
         $890 = $$1202$in$i & 255; //@line 634
         if (!($890 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 637
         } else {
          $$045$i235$i = $890; //@line 639
          $$06$i234$i = 0; //@line 639
          $895 = $889; //@line 639
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 641
           $895$looptemp = $895;
           $895 = $895 + 1 | 0; //@line 643
           HEAP32[$82 >> 2] = $895; //@line 644
           $898 = $$06$i234$i << 8 | HEAPU8[$895$looptemp >> 0]; //@line 647
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $898; //@line 650
            break;
           } else {
            $$06$i234$i = $898; //@line 653
           }
          }
         }
         HEAP32[(HEAP32[$139 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 659
         break L22;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 102; //@line 666
          break L6;
         }
         $904 = (HEAP32[$139 >> 2] | 0) + 1 | 0; //@line 670
         $905 = HEAP8[$904 >> 0] | 0; //@line 671
         if ($905 & 2) {
          label = 102; //@line 675
          break L6;
         }
         HEAP8[$904 >> 0] = $905 | 2; //@line 679
         $910 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 681
         HEAP32[$82 >> 2] = $910; //@line 682
         $911 = $$1202$in$i & 255; //@line 683
         if (!($911 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 686
         } else {
          $$045$i228$i = $911; //@line 688
          $$06$i227$i = 0; //@line 688
          $916 = $910; //@line 688
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 690
           $916$looptemp = $916;
           $916 = $916 + 1 | 0; //@line 692
           HEAP32[$82 >> 2] = $916; //@line 693
           $919 = $$06$i227$i << 8 | HEAPU8[$916$looptemp >> 0]; //@line 696
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $919; //@line 699
            break;
           } else {
            $$06$i227$i = $919; //@line 702
           }
          }
         }
         HEAP32[(HEAP32[$139 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 708
         break L22;
         break;
        }
       default:
        {
         label = 106; //@line 713
         break L6;
        }
       }
       break;
      }
     case 12:
      {
       label = 24; //@line 720
       break;
      }
     default:
      {
       label = 106; //@line 724
       break L6;
      }
     }
    } while (0);
    if ((label | 0) == 24) {
     label = 0; //@line 730
     if (($$1202$i & 65535) > 2) {
      label = 26; //@line 733
      break;
     }
     if ((HEAP32[$114 >> 2] | 0) != -1) {
      label = 26; //@line 739
      break;
     }
     $263 = $248 + 1 | 0; //@line 742
     HEAP32[$82 >> 2] = $263; //@line 743
     $264 = $$1202$in$i & 255; //@line 744
     if (!($264 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 747
     } else {
      $$045$i$i = $264; //@line 749
      $$06$i$i = 0; //@line 749
      $269 = $263; //@line 749
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 751
       $269$looptemp = $269;
       $269 = $269 + 1 | 0; //@line 753
       HEAP32[$82 >> 2] = $269; //@line 754
       $272 = $$06$i$i << 8 | HEAPU8[$269$looptemp >> 0]; //@line 757
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $272; //@line 760
        break;
       } else {
        $$06$i$i = $272; //@line 763
       }
      }
     }
     HEAP32[$114 >> 2] = $$0$lcssa$i$i; //@line 767
    }
    $923 = HEAP32[$82 >> 2] | 0; //@line 769
    $924 = $923 - $136 | 0; //@line 770
    if (($924 | 0) > ($135 | 0)) {
     break L2;
    } else {
     $$sink275$i = $135 - $924 | 0; //@line 777
     $144 = $923; //@line 777
     $945 = $923; //@line 777
    }
   }
   switch (label | 0) {
   case 11:
    {
     _mbed_tracef(2, 3844, 4107, $6); //@line 782
     break L2;
     break;
    }
   case 16:
    {
     _mbed_tracef(2, 3844, 4165, $50); //@line 787
     break L2;
     break;
    }
   case 20:
    {
     $185 = HEAP32[$38 >> 2] | 0; //@line 792
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 793
     $186 = FUNCTION_TABLE_ii[$185 & 31](68) | 0; //@line 794
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 797
      $187 = $ReallocAsyncCtx3 + 4 | 0; //@line 798
      HEAP32[$187 >> 2] = $2; //@line 799
      $188 = $ReallocAsyncCtx3 + 8 | 0; //@line 800
      HEAP32[$188 >> 2] = $4; //@line 801
      $189 = $ReallocAsyncCtx3 + 12 | 0; //@line 802
      HEAP32[$189 >> 2] = $136; //@line 803
      $190 = $ReallocAsyncCtx3 + 16 | 0; //@line 804
      HEAP32[$190 >> 2] = $6; //@line 805
      $191 = $ReallocAsyncCtx3 + 20 | 0; //@line 806
      HEAP32[$191 >> 2] = $8; //@line 807
      $192 = $ReallocAsyncCtx3 + 24 | 0; //@line 808
      HEAP32[$192 >> 2] = $10; //@line 809
      $193 = $ReallocAsyncCtx3 + 28 | 0; //@line 810
      HEAP16[$193 >> 1] = $trunc$i; //@line 811
      $194 = $ReallocAsyncCtx3 + 32 | 0; //@line 812
      HEAP32[$194 >> 2] = $16; //@line 813
      $195 = $ReallocAsyncCtx3 + 36 | 0; //@line 814
      HEAP32[$195 >> 2] = $135; //@line 815
      $196 = $ReallocAsyncCtx3 + 40 | 0; //@line 816
      HEAP32[$196 >> 2] = $18; //@line 817
      $197 = $ReallocAsyncCtx3 + 44 | 0; //@line 818
      HEAP32[$197 >> 2] = $20; //@line 819
      $198 = $ReallocAsyncCtx3 + 48 | 0; //@line 820
      HEAP32[$198 >> 2] = $22; //@line 821
      $199 = $ReallocAsyncCtx3 + 52 | 0; //@line 822
      HEAP32[$199 >> 2] = $24; //@line 823
      $200 = $ReallocAsyncCtx3 + 56 | 0; //@line 824
      HEAP32[$200 >> 2] = $26; //@line 825
      $201 = $ReallocAsyncCtx3 + 60 | 0; //@line 826
      HEAP32[$201 >> 2] = $137; //@line 827
      $202 = $ReallocAsyncCtx3 + 64 | 0; //@line 828
      HEAP32[$202 >> 2] = $28; //@line 829
      $203 = $ReallocAsyncCtx3 + 68 | 0; //@line 830
      HEAP32[$203 >> 2] = $32; //@line 831
      $204 = $ReallocAsyncCtx3 + 72 | 0; //@line 832
      HEAP32[$204 >> 2] = $34; //@line 833
      $205 = $ReallocAsyncCtx3 + 76 | 0; //@line 834
      HEAP32[$205 >> 2] = $36; //@line 835
      $206 = $ReallocAsyncCtx3 + 80 | 0; //@line 836
      HEAP32[$206 >> 2] = $139; //@line 837
      $207 = $ReallocAsyncCtx3 + 84 | 0; //@line 838
      HEAP32[$207 >> 2] = $38; //@line 839
      $208 = $ReallocAsyncCtx3 + 88 | 0; //@line 840
      HEAP32[$208 >> 2] = $139; //@line 841
      $209 = $ReallocAsyncCtx3 + 92 | 0; //@line 842
      HEAP32[$209 >> 2] = $42; //@line 843
      $210 = $ReallocAsyncCtx3 + 96 | 0; //@line 844
      HEAP32[$210 >> 2] = $44; //@line 845
      $211 = $ReallocAsyncCtx3 + 100 | 0; //@line 846
      HEAP32[$211 >> 2] = $40; //@line 847
      $212 = $ReallocAsyncCtx3 + 104 | 0; //@line 848
      HEAP32[$212 >> 2] = $48; //@line 849
      $213 = $ReallocAsyncCtx3 + 108 | 0; //@line 850
      HEAP32[$213 >> 2] = $46; //@line 851
      $214 = $ReallocAsyncCtx3 + 112 | 0; //@line 852
      HEAP16[$214 >> 1] = $182; //@line 853
      $215 = $ReallocAsyncCtx3 + 116 | 0; //@line 854
      HEAP32[$215 >> 2] = $140; //@line 855
      $216 = $ReallocAsyncCtx3 + 120 | 0; //@line 856
      HEAP32[$216 >> 2] = $50; //@line 857
      $217 = $ReallocAsyncCtx3 + 124 | 0; //@line 858
      HEAP32[$217 >> 2] = $52; //@line 859
      $218 = $ReallocAsyncCtx3 + 128 | 0; //@line 860
      HEAP32[$218 >> 2] = $54; //@line 861
      $219 = $ReallocAsyncCtx3 + 132 | 0; //@line 862
      HEAP32[$219 >> 2] = $56; //@line 863
      $220 = $ReallocAsyncCtx3 + 136 | 0; //@line 864
      HEAP32[$220 >> 2] = $60; //@line 865
      $221 = $ReallocAsyncCtx3 + 140 | 0; //@line 866
      HEAP32[$221 >> 2] = $62; //@line 867
      $222 = $ReallocAsyncCtx3 + 144 | 0; //@line 868
      HEAP32[$222 >> 2] = $64; //@line 869
      $223 = $ReallocAsyncCtx3 + 148 | 0; //@line 870
      HEAP32[$223 >> 2] = $68; //@line 871
      $224 = $ReallocAsyncCtx3 + 152 | 0; //@line 872
      HEAP32[$224 >> 2] = $66; //@line 873
      $225 = $ReallocAsyncCtx3 + 156 | 0; //@line 874
      HEAP32[$225 >> 2] = $70; //@line 875
      $226 = $ReallocAsyncCtx3 + 160 | 0; //@line 876
      HEAP32[$226 >> 2] = $72; //@line 877
      $227 = $ReallocAsyncCtx3 + 164 | 0; //@line 878
      HEAP32[$227 >> 2] = $74; //@line 879
      $228 = $ReallocAsyncCtx3 + 168 | 0; //@line 880
      HEAP32[$228 >> 2] = $141; //@line 881
      $229 = $ReallocAsyncCtx3 + 172 | 0; //@line 882
      HEAP32[$229 >> 2] = $76; //@line 883
      $230 = $ReallocAsyncCtx3 + 176 | 0; //@line 884
      HEAP32[$230 >> 2] = $$1202$in$i; //@line 885
      $231 = $ReallocAsyncCtx3 + 180 | 0; //@line 886
      HEAP32[$231 >> 2] = $78; //@line 887
      $232 = $ReallocAsyncCtx3 + 184 | 0; //@line 888
      HEAP32[$232 >> 2] = $80; //@line 889
      $233 = $ReallocAsyncCtx3 + 188 | 0; //@line 890
      HEAP32[$233 >> 2] = $82; //@line 891
      $234 = $ReallocAsyncCtx3 + 192 | 0; //@line 892
      HEAP32[$234 >> 2] = $84; //@line 893
      $235 = $ReallocAsyncCtx3 + 196 | 0; //@line 894
      HEAP16[$235 >> 1] = $$1202$i; //@line 895
      $236 = $ReallocAsyncCtx3 + 200 | 0; //@line 896
      HEAP32[$236 >> 2] = $86; //@line 897
      $237 = $ReallocAsyncCtx3 + 204 | 0; //@line 898
      HEAP32[$237 >> 2] = $90; //@line 899
      $238 = $ReallocAsyncCtx3 + 208 | 0; //@line 900
      HEAP32[$238 >> 2] = $92; //@line 901
      $239 = $ReallocAsyncCtx3 + 212 | 0; //@line 902
      HEAP32[$239 >> 2] = $88; //@line 903
      $240 = $ReallocAsyncCtx3 + 216 | 0; //@line 904
      HEAP32[$240 >> 2] = $96; //@line 905
      $241 = $ReallocAsyncCtx3 + 220 | 0; //@line 906
      HEAP32[$241 >> 2] = $94; //@line 907
      $242 = $ReallocAsyncCtx3 + 224 | 0; //@line 908
      HEAP32[$242 >> 2] = $98; //@line 909
      $243 = $ReallocAsyncCtx3 + 228 | 0; //@line 910
      HEAP32[$243 >> 2] = $100; //@line 911
      $244 = $ReallocAsyncCtx3 + 232 | 0; //@line 912
      HEAP32[$244 >> 2] = $102; //@line 913
      $245 = $ReallocAsyncCtx3 + 236 | 0; //@line 914
      HEAP32[$245 >> 2] = $104; //@line 915
      $246 = $ReallocAsyncCtx3 + 240 | 0; //@line 916
      HEAP32[$246 >> 2] = $106; //@line 917
      $247 = $ReallocAsyncCtx3 + 244 | 0; //@line 918
      HEAP32[$247 >> 2] = $248; //@line 919
      $249 = $ReallocAsyncCtx3 + 248 | 0; //@line 920
      HEAP32[$249 >> 2] = $82; //@line 921
      $250 = $ReallocAsyncCtx3 + 252 | 0; //@line 922
      HEAP32[$250 >> 2] = $110; //@line 923
      $251 = $ReallocAsyncCtx3 + 256 | 0; //@line 924
      HEAP32[$251 >> 2] = $116; //@line 925
      $252 = $ReallocAsyncCtx3 + 260 | 0; //@line 926
      HEAP32[$252 >> 2] = $114; //@line 927
      $253 = $ReallocAsyncCtx3 + 264 | 0; //@line 928
      HEAP32[$253 >> 2] = $$0208$i; //@line 929
      $254 = $ReallocAsyncCtx3 + 268 | 0; //@line 930
      HEAP32[$254 >> 2] = $118; //@line 931
      $255 = $ReallocAsyncCtx3 + 272 | 0; //@line 932
      HEAP32[$255 >> 2] = $120; //@line 933
      $256 = $ReallocAsyncCtx3 + 276 | 0; //@line 934
      HEAP32[$256 >> 2] = $122; //@line 935
      $257 = $ReallocAsyncCtx3 + 280 | 0; //@line 936
      HEAP32[$257 >> 2] = $124; //@line 937
      $258 = $ReallocAsyncCtx3 + 284 | 0; //@line 938
      HEAP32[$258 >> 2] = $126; //@line 939
      sp = STACKTOP; //@line 940
      return;
     }
     HEAP32[___async_retval >> 2] = $186; //@line 944
     ___async_unwind = 0; //@line 945
     HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 946
     $187 = $ReallocAsyncCtx3 + 4 | 0; //@line 947
     HEAP32[$187 >> 2] = $2; //@line 948
     $188 = $ReallocAsyncCtx3 + 8 | 0; //@line 949
     HEAP32[$188 >> 2] = $4; //@line 950
     $189 = $ReallocAsyncCtx3 + 12 | 0; //@line 951
     HEAP32[$189 >> 2] = $136; //@line 952
     $190 = $ReallocAsyncCtx3 + 16 | 0; //@line 953
     HEAP32[$190 >> 2] = $6; //@line 954
     $191 = $ReallocAsyncCtx3 + 20 | 0; //@line 955
     HEAP32[$191 >> 2] = $8; //@line 956
     $192 = $ReallocAsyncCtx3 + 24 | 0; //@line 957
     HEAP32[$192 >> 2] = $10; //@line 958
     $193 = $ReallocAsyncCtx3 + 28 | 0; //@line 959
     HEAP16[$193 >> 1] = $trunc$i; //@line 960
     $194 = $ReallocAsyncCtx3 + 32 | 0; //@line 961
     HEAP32[$194 >> 2] = $16; //@line 962
     $195 = $ReallocAsyncCtx3 + 36 | 0; //@line 963
     HEAP32[$195 >> 2] = $135; //@line 964
     $196 = $ReallocAsyncCtx3 + 40 | 0; //@line 965
     HEAP32[$196 >> 2] = $18; //@line 966
     $197 = $ReallocAsyncCtx3 + 44 | 0; //@line 967
     HEAP32[$197 >> 2] = $20; //@line 968
     $198 = $ReallocAsyncCtx3 + 48 | 0; //@line 969
     HEAP32[$198 >> 2] = $22; //@line 970
     $199 = $ReallocAsyncCtx3 + 52 | 0; //@line 971
     HEAP32[$199 >> 2] = $24; //@line 972
     $200 = $ReallocAsyncCtx3 + 56 | 0; //@line 973
     HEAP32[$200 >> 2] = $26; //@line 974
     $201 = $ReallocAsyncCtx3 + 60 | 0; //@line 975
     HEAP32[$201 >> 2] = $137; //@line 976
     $202 = $ReallocAsyncCtx3 + 64 | 0; //@line 977
     HEAP32[$202 >> 2] = $28; //@line 978
     $203 = $ReallocAsyncCtx3 + 68 | 0; //@line 979
     HEAP32[$203 >> 2] = $32; //@line 980
     $204 = $ReallocAsyncCtx3 + 72 | 0; //@line 981
     HEAP32[$204 >> 2] = $34; //@line 982
     $205 = $ReallocAsyncCtx3 + 76 | 0; //@line 983
     HEAP32[$205 >> 2] = $36; //@line 984
     $206 = $ReallocAsyncCtx3 + 80 | 0; //@line 985
     HEAP32[$206 >> 2] = $139; //@line 986
     $207 = $ReallocAsyncCtx3 + 84 | 0; //@line 987
     HEAP32[$207 >> 2] = $38; //@line 988
     $208 = $ReallocAsyncCtx3 + 88 | 0; //@line 989
     HEAP32[$208 >> 2] = $139; //@line 990
     $209 = $ReallocAsyncCtx3 + 92 | 0; //@line 991
     HEAP32[$209 >> 2] = $42; //@line 992
     $210 = $ReallocAsyncCtx3 + 96 | 0; //@line 993
     HEAP32[$210 >> 2] = $44; //@line 994
     $211 = $ReallocAsyncCtx3 + 100 | 0; //@line 995
     HEAP32[$211 >> 2] = $40; //@line 996
     $212 = $ReallocAsyncCtx3 + 104 | 0; //@line 997
     HEAP32[$212 >> 2] = $48; //@line 998
     $213 = $ReallocAsyncCtx3 + 108 | 0; //@line 999
     HEAP32[$213 >> 2] = $46; //@line 1000
     $214 = $ReallocAsyncCtx3 + 112 | 0; //@line 1001
     HEAP16[$214 >> 1] = $182; //@line 1002
     $215 = $ReallocAsyncCtx3 + 116 | 0; //@line 1003
     HEAP32[$215 >> 2] = $140; //@line 1004
     $216 = $ReallocAsyncCtx3 + 120 | 0; //@line 1005
     HEAP32[$216 >> 2] = $50; //@line 1006
     $217 = $ReallocAsyncCtx3 + 124 | 0; //@line 1007
     HEAP32[$217 >> 2] = $52; //@line 1008
     $218 = $ReallocAsyncCtx3 + 128 | 0; //@line 1009
     HEAP32[$218 >> 2] = $54; //@line 1010
     $219 = $ReallocAsyncCtx3 + 132 | 0; //@line 1011
     HEAP32[$219 >> 2] = $56; //@line 1012
     $220 = $ReallocAsyncCtx3 + 136 | 0; //@line 1013
     HEAP32[$220 >> 2] = $60; //@line 1014
     $221 = $ReallocAsyncCtx3 + 140 | 0; //@line 1015
     HEAP32[$221 >> 2] = $62; //@line 1016
     $222 = $ReallocAsyncCtx3 + 144 | 0; //@line 1017
     HEAP32[$222 >> 2] = $64; //@line 1018
     $223 = $ReallocAsyncCtx3 + 148 | 0; //@line 1019
     HEAP32[$223 >> 2] = $68; //@line 1020
     $224 = $ReallocAsyncCtx3 + 152 | 0; //@line 1021
     HEAP32[$224 >> 2] = $66; //@line 1022
     $225 = $ReallocAsyncCtx3 + 156 | 0; //@line 1023
     HEAP32[$225 >> 2] = $70; //@line 1024
     $226 = $ReallocAsyncCtx3 + 160 | 0; //@line 1025
     HEAP32[$226 >> 2] = $72; //@line 1026
     $227 = $ReallocAsyncCtx3 + 164 | 0; //@line 1027
     HEAP32[$227 >> 2] = $74; //@line 1028
     $228 = $ReallocAsyncCtx3 + 168 | 0; //@line 1029
     HEAP32[$228 >> 2] = $141; //@line 1030
     $229 = $ReallocAsyncCtx3 + 172 | 0; //@line 1031
     HEAP32[$229 >> 2] = $76; //@line 1032
     $230 = $ReallocAsyncCtx3 + 176 | 0; //@line 1033
     HEAP32[$230 >> 2] = $$1202$in$i; //@line 1034
     $231 = $ReallocAsyncCtx3 + 180 | 0; //@line 1035
     HEAP32[$231 >> 2] = $78; //@line 1036
     $232 = $ReallocAsyncCtx3 + 184 | 0; //@line 1037
     HEAP32[$232 >> 2] = $80; //@line 1038
     $233 = $ReallocAsyncCtx3 + 188 | 0; //@line 1039
     HEAP32[$233 >> 2] = $82; //@line 1040
     $234 = $ReallocAsyncCtx3 + 192 | 0; //@line 1041
     HEAP32[$234 >> 2] = $84; //@line 1042
     $235 = $ReallocAsyncCtx3 + 196 | 0; //@line 1043
     HEAP16[$235 >> 1] = $$1202$i; //@line 1044
     $236 = $ReallocAsyncCtx3 + 200 | 0; //@line 1045
     HEAP32[$236 >> 2] = $86; //@line 1046
     $237 = $ReallocAsyncCtx3 + 204 | 0; //@line 1047
     HEAP32[$237 >> 2] = $90; //@line 1048
     $238 = $ReallocAsyncCtx3 + 208 | 0; //@line 1049
     HEAP32[$238 >> 2] = $92; //@line 1050
     $239 = $ReallocAsyncCtx3 + 212 | 0; //@line 1051
     HEAP32[$239 >> 2] = $88; //@line 1052
     $240 = $ReallocAsyncCtx3 + 216 | 0; //@line 1053
     HEAP32[$240 >> 2] = $96; //@line 1054
     $241 = $ReallocAsyncCtx3 + 220 | 0; //@line 1055
     HEAP32[$241 >> 2] = $94; //@line 1056
     $242 = $ReallocAsyncCtx3 + 224 | 0; //@line 1057
     HEAP32[$242 >> 2] = $98; //@line 1058
     $243 = $ReallocAsyncCtx3 + 228 | 0; //@line 1059
     HEAP32[$243 >> 2] = $100; //@line 1060
     $244 = $ReallocAsyncCtx3 + 232 | 0; //@line 1061
     HEAP32[$244 >> 2] = $102; //@line 1062
     $245 = $ReallocAsyncCtx3 + 236 | 0; //@line 1063
     HEAP32[$245 >> 2] = $104; //@line 1064
     $246 = $ReallocAsyncCtx3 + 240 | 0; //@line 1065
     HEAP32[$246 >> 2] = $106; //@line 1066
     $247 = $ReallocAsyncCtx3 + 244 | 0; //@line 1067
     HEAP32[$247 >> 2] = $248; //@line 1068
     $249 = $ReallocAsyncCtx3 + 248 | 0; //@line 1069
     HEAP32[$249 >> 2] = $82; //@line 1070
     $250 = $ReallocAsyncCtx3 + 252 | 0; //@line 1071
     HEAP32[$250 >> 2] = $110; //@line 1072
     $251 = $ReallocAsyncCtx3 + 256 | 0; //@line 1073
     HEAP32[$251 >> 2] = $116; //@line 1074
     $252 = $ReallocAsyncCtx3 + 260 | 0; //@line 1075
     HEAP32[$252 >> 2] = $114; //@line 1076
     $253 = $ReallocAsyncCtx3 + 264 | 0; //@line 1077
     HEAP32[$253 >> 2] = $$0208$i; //@line 1078
     $254 = $ReallocAsyncCtx3 + 268 | 0; //@line 1079
     HEAP32[$254 >> 2] = $118; //@line 1080
     $255 = $ReallocAsyncCtx3 + 272 | 0; //@line 1081
     HEAP32[$255 >> 2] = $120; //@line 1082
     $256 = $ReallocAsyncCtx3 + 276 | 0; //@line 1083
     HEAP32[$256 >> 2] = $122; //@line 1084
     $257 = $ReallocAsyncCtx3 + 280 | 0; //@line 1085
     HEAP32[$257 >> 2] = $124; //@line 1086
     $258 = $ReallocAsyncCtx3 + 284 | 0; //@line 1087
     HEAP32[$258 >> 2] = $126; //@line 1088
     sp = STACKTOP; //@line 1089
     return;
    }
   case 26:
    {
     _mbed_tracef(2, 3844, 4279, $80); //@line 1094
     break L2;
     break;
    }
   case 31:
    {
     _mbed_tracef(2, 3844, 4348, $4); //@line 1099
     break L2;
     break;
    }
   case 35:
    {
     $288 = $$1202$in$i & 65535; //@line 1104
     if (($$1202$i + -1 & 65535) <= 1033) {
      $291 = HEAP32[$139 >> 2] | 0; //@line 1108
      if (!(HEAP32[$291 + 44 >> 2] | 0)) {
       HEAP16[$291 + 2 >> 1] = $$1202$i; //@line 1114
       $296 = $248 + 1 | 0; //@line 1115
       HEAP32[$82 >> 2] = $296; //@line 1116
       $297 = HEAP32[$38 >> 2] | 0; //@line 1117
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 1118
       $298 = FUNCTION_TABLE_ii[$297 & 31]($$1202$i) | 0; //@line 1119
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 1122
        $299 = $ReallocAsyncCtx4 + 4 | 0; //@line 1123
        HEAP32[$299 >> 2] = $2; //@line 1124
        $300 = $ReallocAsyncCtx4 + 8 | 0; //@line 1125
        HEAP32[$300 >> 2] = $4; //@line 1126
        $301 = $ReallocAsyncCtx4 + 12 | 0; //@line 1127
        HEAP32[$301 >> 2] = $136; //@line 1128
        $302 = $ReallocAsyncCtx4 + 16 | 0; //@line 1129
        HEAP32[$302 >> 2] = $6; //@line 1130
        $303 = $ReallocAsyncCtx4 + 20 | 0; //@line 1131
        HEAP32[$303 >> 2] = $8; //@line 1132
        $304 = $ReallocAsyncCtx4 + 24 | 0; //@line 1133
        HEAP32[$304 >> 2] = $10; //@line 1134
        $305 = $ReallocAsyncCtx4 + 28 | 0; //@line 1135
        HEAP32[$305 >> 2] = $16; //@line 1136
        $306 = $ReallocAsyncCtx4 + 32 | 0; //@line 1137
        HEAP32[$306 >> 2] = $135; //@line 1138
        $307 = $ReallocAsyncCtx4 + 36 | 0; //@line 1139
        HEAP32[$307 >> 2] = $18; //@line 1140
        $308 = $ReallocAsyncCtx4 + 40 | 0; //@line 1141
        HEAP32[$308 >> 2] = $20; //@line 1142
        $309 = $ReallocAsyncCtx4 + 44 | 0; //@line 1143
        HEAP32[$309 >> 2] = $22; //@line 1144
        $310 = $ReallocAsyncCtx4 + 48 | 0; //@line 1145
        HEAP32[$310 >> 2] = $24; //@line 1146
        $311 = $ReallocAsyncCtx4 + 52 | 0; //@line 1147
        HEAP32[$311 >> 2] = $288; //@line 1148
        $312 = $ReallocAsyncCtx4 + 56 | 0; //@line 1149
        HEAP32[$312 >> 2] = $26; //@line 1150
        $313 = $ReallocAsyncCtx4 + 60 | 0; //@line 1151
        HEAP32[$313 >> 2] = $137; //@line 1152
        $314 = $ReallocAsyncCtx4 + 64 | 0; //@line 1153
        HEAP32[$314 >> 2] = $28; //@line 1154
        $315 = $ReallocAsyncCtx4 + 68 | 0; //@line 1155
        HEAP32[$315 >> 2] = $296; //@line 1156
        $316 = $ReallocAsyncCtx4 + 72 | 0; //@line 1157
        HEAP32[$316 >> 2] = $32; //@line 1158
        $317 = $ReallocAsyncCtx4 + 76 | 0; //@line 1159
        HEAP32[$317 >> 2] = $34; //@line 1160
        $318 = $ReallocAsyncCtx4 + 80 | 0; //@line 1161
        HEAP32[$318 >> 2] = $36; //@line 1162
        $319 = $ReallocAsyncCtx4 + 84 | 0; //@line 1163
        HEAP32[$319 >> 2] = $139; //@line 1164
        $320 = $ReallocAsyncCtx4 + 88 | 0; //@line 1165
        HEAP32[$320 >> 2] = $38; //@line 1166
        $321 = $ReallocAsyncCtx4 + 92 | 0; //@line 1167
        HEAP32[$321 >> 2] = $139; //@line 1168
        $322 = $ReallocAsyncCtx4 + 96 | 0; //@line 1169
        HEAP32[$322 >> 2] = $42; //@line 1170
        $323 = $ReallocAsyncCtx4 + 100 | 0; //@line 1171
        HEAP32[$323 >> 2] = $44; //@line 1172
        $324 = $ReallocAsyncCtx4 + 104 | 0; //@line 1173
        HEAP32[$324 >> 2] = $40; //@line 1174
        $325 = $ReallocAsyncCtx4 + 108 | 0; //@line 1175
        HEAP32[$325 >> 2] = $48; //@line 1176
        $326 = $ReallocAsyncCtx4 + 112 | 0; //@line 1177
        HEAP32[$326 >> 2] = $46; //@line 1178
        $327 = $ReallocAsyncCtx4 + 116 | 0; //@line 1179
        HEAP32[$327 >> 2] = $140; //@line 1180
        $328 = $ReallocAsyncCtx4 + 120 | 0; //@line 1181
        HEAP32[$328 >> 2] = $50; //@line 1182
        $329 = $ReallocAsyncCtx4 + 124 | 0; //@line 1183
        HEAP32[$329 >> 2] = $52; //@line 1184
        $330 = $ReallocAsyncCtx4 + 128 | 0; //@line 1185
        HEAP32[$330 >> 2] = $54; //@line 1186
        $331 = $ReallocAsyncCtx4 + 132 | 0; //@line 1187
        HEAP32[$331 >> 2] = $56; //@line 1188
        $332 = $ReallocAsyncCtx4 + 136 | 0; //@line 1189
        HEAP32[$332 >> 2] = $60; //@line 1190
        $333 = $ReallocAsyncCtx4 + 140 | 0; //@line 1191
        HEAP32[$333 >> 2] = $62; //@line 1192
        $334 = $ReallocAsyncCtx4 + 144 | 0; //@line 1193
        HEAP32[$334 >> 2] = $64; //@line 1194
        $335 = $ReallocAsyncCtx4 + 148 | 0; //@line 1195
        HEAP32[$335 >> 2] = $68; //@line 1196
        $336 = $ReallocAsyncCtx4 + 152 | 0; //@line 1197
        HEAP32[$336 >> 2] = $66; //@line 1198
        $337 = $ReallocAsyncCtx4 + 156 | 0; //@line 1199
        HEAP32[$337 >> 2] = $70; //@line 1200
        $338 = $ReallocAsyncCtx4 + 160 | 0; //@line 1201
        HEAP32[$338 >> 2] = $72; //@line 1202
        $339 = $ReallocAsyncCtx4 + 164 | 0; //@line 1203
        HEAP32[$339 >> 2] = $74; //@line 1204
        $340 = $ReallocAsyncCtx4 + 168 | 0; //@line 1205
        HEAP32[$340 >> 2] = $141; //@line 1206
        $341 = $ReallocAsyncCtx4 + 172 | 0; //@line 1207
        HEAP32[$341 >> 2] = $76; //@line 1208
        $342 = $ReallocAsyncCtx4 + 176 | 0; //@line 1209
        HEAP32[$342 >> 2] = $78; //@line 1210
        $343 = $ReallocAsyncCtx4 + 180 | 0; //@line 1211
        HEAP32[$343 >> 2] = $80; //@line 1212
        $344 = $ReallocAsyncCtx4 + 184 | 0; //@line 1213
        HEAP32[$344 >> 2] = $82; //@line 1214
        $345 = $ReallocAsyncCtx4 + 188 | 0; //@line 1215
        HEAP32[$345 >> 2] = $84; //@line 1216
        $346 = $ReallocAsyncCtx4 + 192 | 0; //@line 1217
        HEAP32[$346 >> 2] = $86; //@line 1218
        $347 = $ReallocAsyncCtx4 + 196 | 0; //@line 1219
        HEAP32[$347 >> 2] = $88; //@line 1220
        $348 = $ReallocAsyncCtx4 + 200 | 0; //@line 1221
        HEAP32[$348 >> 2] = $90; //@line 1222
        $349 = $ReallocAsyncCtx4 + 204 | 0; //@line 1223
        HEAP32[$349 >> 2] = $92; //@line 1224
        $350 = $ReallocAsyncCtx4 + 208 | 0; //@line 1225
        HEAP32[$350 >> 2] = $94; //@line 1226
        $351 = $ReallocAsyncCtx4 + 212 | 0; //@line 1227
        HEAP32[$351 >> 2] = $96; //@line 1228
        $352 = $ReallocAsyncCtx4 + 216 | 0; //@line 1229
        HEAP32[$352 >> 2] = $98; //@line 1230
        $353 = $ReallocAsyncCtx4 + 220 | 0; //@line 1231
        HEAP32[$353 >> 2] = $100; //@line 1232
        $354 = $ReallocAsyncCtx4 + 224 | 0; //@line 1233
        HEAP32[$354 >> 2] = $102; //@line 1234
        $355 = $ReallocAsyncCtx4 + 228 | 0; //@line 1235
        HEAP32[$355 >> 2] = $104; //@line 1236
        $356 = $ReallocAsyncCtx4 + 232 | 0; //@line 1237
        HEAP32[$356 >> 2] = $106; //@line 1238
        $357 = $ReallocAsyncCtx4 + 236 | 0; //@line 1239
        HEAP32[$357 >> 2] = $82; //@line 1240
        $358 = $ReallocAsyncCtx4 + 240 | 0; //@line 1241
        HEAP32[$358 >> 2] = $110; //@line 1242
        $359 = $ReallocAsyncCtx4 + 244 | 0; //@line 1243
        HEAP32[$359 >> 2] = $116; //@line 1244
        $360 = $ReallocAsyncCtx4 + 248 | 0; //@line 1245
        HEAP32[$360 >> 2] = $114; //@line 1246
        $361 = $ReallocAsyncCtx4 + 252 | 0; //@line 1247
        HEAP32[$361 >> 2] = $$0208$i; //@line 1248
        $362 = $ReallocAsyncCtx4 + 256 | 0; //@line 1249
        HEAP32[$362 >> 2] = $118; //@line 1250
        $363 = $ReallocAsyncCtx4 + 260 | 0; //@line 1251
        HEAP32[$363 >> 2] = $120; //@line 1252
        $364 = $ReallocAsyncCtx4 + 264 | 0; //@line 1253
        HEAP32[$364 >> 2] = $122; //@line 1254
        $365 = $ReallocAsyncCtx4 + 268 | 0; //@line 1255
        HEAP32[$365 >> 2] = $124; //@line 1256
        $366 = $ReallocAsyncCtx4 + 272 | 0; //@line 1257
        HEAP32[$366 >> 2] = $126; //@line 1258
        sp = STACKTOP; //@line 1259
        return;
       }
       HEAP32[___async_retval >> 2] = $298; //@line 1263
       ___async_unwind = 0; //@line 1264
       HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 1265
       $299 = $ReallocAsyncCtx4 + 4 | 0; //@line 1266
       HEAP32[$299 >> 2] = $2; //@line 1267
       $300 = $ReallocAsyncCtx4 + 8 | 0; //@line 1268
       HEAP32[$300 >> 2] = $4; //@line 1269
       $301 = $ReallocAsyncCtx4 + 12 | 0; //@line 1270
       HEAP32[$301 >> 2] = $136; //@line 1271
       $302 = $ReallocAsyncCtx4 + 16 | 0; //@line 1272
       HEAP32[$302 >> 2] = $6; //@line 1273
       $303 = $ReallocAsyncCtx4 + 20 | 0; //@line 1274
       HEAP32[$303 >> 2] = $8; //@line 1275
       $304 = $ReallocAsyncCtx4 + 24 | 0; //@line 1276
       HEAP32[$304 >> 2] = $10; //@line 1277
       $305 = $ReallocAsyncCtx4 + 28 | 0; //@line 1278
       HEAP32[$305 >> 2] = $16; //@line 1279
       $306 = $ReallocAsyncCtx4 + 32 | 0; //@line 1280
       HEAP32[$306 >> 2] = $135; //@line 1281
       $307 = $ReallocAsyncCtx4 + 36 | 0; //@line 1282
       HEAP32[$307 >> 2] = $18; //@line 1283
       $308 = $ReallocAsyncCtx4 + 40 | 0; //@line 1284
       HEAP32[$308 >> 2] = $20; //@line 1285
       $309 = $ReallocAsyncCtx4 + 44 | 0; //@line 1286
       HEAP32[$309 >> 2] = $22; //@line 1287
       $310 = $ReallocAsyncCtx4 + 48 | 0; //@line 1288
       HEAP32[$310 >> 2] = $24; //@line 1289
       $311 = $ReallocAsyncCtx4 + 52 | 0; //@line 1290
       HEAP32[$311 >> 2] = $288; //@line 1291
       $312 = $ReallocAsyncCtx4 + 56 | 0; //@line 1292
       HEAP32[$312 >> 2] = $26; //@line 1293
       $313 = $ReallocAsyncCtx4 + 60 | 0; //@line 1294
       HEAP32[$313 >> 2] = $137; //@line 1295
       $314 = $ReallocAsyncCtx4 + 64 | 0; //@line 1296
       HEAP32[$314 >> 2] = $28; //@line 1297
       $315 = $ReallocAsyncCtx4 + 68 | 0; //@line 1298
       HEAP32[$315 >> 2] = $296; //@line 1299
       $316 = $ReallocAsyncCtx4 + 72 | 0; //@line 1300
       HEAP32[$316 >> 2] = $32; //@line 1301
       $317 = $ReallocAsyncCtx4 + 76 | 0; //@line 1302
       HEAP32[$317 >> 2] = $34; //@line 1303
       $318 = $ReallocAsyncCtx4 + 80 | 0; //@line 1304
       HEAP32[$318 >> 2] = $36; //@line 1305
       $319 = $ReallocAsyncCtx4 + 84 | 0; //@line 1306
       HEAP32[$319 >> 2] = $139; //@line 1307
       $320 = $ReallocAsyncCtx4 + 88 | 0; //@line 1308
       HEAP32[$320 >> 2] = $38; //@line 1309
       $321 = $ReallocAsyncCtx4 + 92 | 0; //@line 1310
       HEAP32[$321 >> 2] = $139; //@line 1311
       $322 = $ReallocAsyncCtx4 + 96 | 0; //@line 1312
       HEAP32[$322 >> 2] = $42; //@line 1313
       $323 = $ReallocAsyncCtx4 + 100 | 0; //@line 1314
       HEAP32[$323 >> 2] = $44; //@line 1315
       $324 = $ReallocAsyncCtx4 + 104 | 0; //@line 1316
       HEAP32[$324 >> 2] = $40; //@line 1317
       $325 = $ReallocAsyncCtx4 + 108 | 0; //@line 1318
       HEAP32[$325 >> 2] = $48; //@line 1319
       $326 = $ReallocAsyncCtx4 + 112 | 0; //@line 1320
       HEAP32[$326 >> 2] = $46; //@line 1321
       $327 = $ReallocAsyncCtx4 + 116 | 0; //@line 1322
       HEAP32[$327 >> 2] = $140; //@line 1323
       $328 = $ReallocAsyncCtx4 + 120 | 0; //@line 1324
       HEAP32[$328 >> 2] = $50; //@line 1325
       $329 = $ReallocAsyncCtx4 + 124 | 0; //@line 1326
       HEAP32[$329 >> 2] = $52; //@line 1327
       $330 = $ReallocAsyncCtx4 + 128 | 0; //@line 1328
       HEAP32[$330 >> 2] = $54; //@line 1329
       $331 = $ReallocAsyncCtx4 + 132 | 0; //@line 1330
       HEAP32[$331 >> 2] = $56; //@line 1331
       $332 = $ReallocAsyncCtx4 + 136 | 0; //@line 1332
       HEAP32[$332 >> 2] = $60; //@line 1333
       $333 = $ReallocAsyncCtx4 + 140 | 0; //@line 1334
       HEAP32[$333 >> 2] = $62; //@line 1335
       $334 = $ReallocAsyncCtx4 + 144 | 0; //@line 1336
       HEAP32[$334 >> 2] = $64; //@line 1337
       $335 = $ReallocAsyncCtx4 + 148 | 0; //@line 1338
       HEAP32[$335 >> 2] = $68; //@line 1339
       $336 = $ReallocAsyncCtx4 + 152 | 0; //@line 1340
       HEAP32[$336 >> 2] = $66; //@line 1341
       $337 = $ReallocAsyncCtx4 + 156 | 0; //@line 1342
       HEAP32[$337 >> 2] = $70; //@line 1343
       $338 = $ReallocAsyncCtx4 + 160 | 0; //@line 1344
       HEAP32[$338 >> 2] = $72; //@line 1345
       $339 = $ReallocAsyncCtx4 + 164 | 0; //@line 1346
       HEAP32[$339 >> 2] = $74; //@line 1347
       $340 = $ReallocAsyncCtx4 + 168 | 0; //@line 1348
       HEAP32[$340 >> 2] = $141; //@line 1349
       $341 = $ReallocAsyncCtx4 + 172 | 0; //@line 1350
       HEAP32[$341 >> 2] = $76; //@line 1351
       $342 = $ReallocAsyncCtx4 + 176 | 0; //@line 1352
       HEAP32[$342 >> 2] = $78; //@line 1353
       $343 = $ReallocAsyncCtx4 + 180 | 0; //@line 1354
       HEAP32[$343 >> 2] = $80; //@line 1355
       $344 = $ReallocAsyncCtx4 + 184 | 0; //@line 1356
       HEAP32[$344 >> 2] = $82; //@line 1357
       $345 = $ReallocAsyncCtx4 + 188 | 0; //@line 1358
       HEAP32[$345 >> 2] = $84; //@line 1359
       $346 = $ReallocAsyncCtx4 + 192 | 0; //@line 1360
       HEAP32[$346 >> 2] = $86; //@line 1361
       $347 = $ReallocAsyncCtx4 + 196 | 0; //@line 1362
       HEAP32[$347 >> 2] = $88; //@line 1363
       $348 = $ReallocAsyncCtx4 + 200 | 0; //@line 1364
       HEAP32[$348 >> 2] = $90; //@line 1365
       $349 = $ReallocAsyncCtx4 + 204 | 0; //@line 1366
       HEAP32[$349 >> 2] = $92; //@line 1367
       $350 = $ReallocAsyncCtx4 + 208 | 0; //@line 1368
       HEAP32[$350 >> 2] = $94; //@line 1369
       $351 = $ReallocAsyncCtx4 + 212 | 0; //@line 1370
       HEAP32[$351 >> 2] = $96; //@line 1371
       $352 = $ReallocAsyncCtx4 + 216 | 0; //@line 1372
       HEAP32[$352 >> 2] = $98; //@line 1373
       $353 = $ReallocAsyncCtx4 + 220 | 0; //@line 1374
       HEAP32[$353 >> 2] = $100; //@line 1375
       $354 = $ReallocAsyncCtx4 + 224 | 0; //@line 1376
       HEAP32[$354 >> 2] = $102; //@line 1377
       $355 = $ReallocAsyncCtx4 + 228 | 0; //@line 1378
       HEAP32[$355 >> 2] = $104; //@line 1379
       $356 = $ReallocAsyncCtx4 + 232 | 0; //@line 1380
       HEAP32[$356 >> 2] = $106; //@line 1381
       $357 = $ReallocAsyncCtx4 + 236 | 0; //@line 1382
       HEAP32[$357 >> 2] = $82; //@line 1383
       $358 = $ReallocAsyncCtx4 + 240 | 0; //@line 1384
       HEAP32[$358 >> 2] = $110; //@line 1385
       $359 = $ReallocAsyncCtx4 + 244 | 0; //@line 1386
       HEAP32[$359 >> 2] = $116; //@line 1387
       $360 = $ReallocAsyncCtx4 + 248 | 0; //@line 1388
       HEAP32[$360 >> 2] = $114; //@line 1389
       $361 = $ReallocAsyncCtx4 + 252 | 0; //@line 1390
       HEAP32[$361 >> 2] = $$0208$i; //@line 1391
       $362 = $ReallocAsyncCtx4 + 256 | 0; //@line 1392
       HEAP32[$362 >> 2] = $118; //@line 1393
       $363 = $ReallocAsyncCtx4 + 260 | 0; //@line 1394
       HEAP32[$363 >> 2] = $120; //@line 1395
       $364 = $ReallocAsyncCtx4 + 264 | 0; //@line 1396
       HEAP32[$364 >> 2] = $122; //@line 1397
       $365 = $ReallocAsyncCtx4 + 268 | 0; //@line 1398
       HEAP32[$365 >> 2] = $124; //@line 1399
       $366 = $ReallocAsyncCtx4 + 272 | 0; //@line 1400
       HEAP32[$366 >> 2] = $126; //@line 1401
       sp = STACKTOP; //@line 1402
       return;
      }
     }
     _mbed_tracef(2, 3844, 4410, $48); //@line 1406
     break L2;
     break;
    }
   case 41:
    {
     $368 = HEAP32[$139 >> 2] | 0; //@line 1411
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 1413
     $370 = _sn_coap_parser_options_parse_multiple_options($106, $82, $182, $368 + 48 | 0, $368, 4, $$1202$i) | 0; //@line 1414
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 1417
      $371 = $ReallocAsyncCtx10 + 4 | 0; //@line 1418
      HEAP32[$371 >> 2] = $2; //@line 1419
      $372 = $ReallocAsyncCtx10 + 8 | 0; //@line 1420
      HEAP32[$372 >> 2] = $4; //@line 1421
      $373 = $ReallocAsyncCtx10 + 12 | 0; //@line 1422
      HEAP32[$373 >> 2] = $136; //@line 1423
      $374 = $ReallocAsyncCtx10 + 16 | 0; //@line 1424
      HEAP32[$374 >> 2] = $6; //@line 1425
      $375 = $ReallocAsyncCtx10 + 20 | 0; //@line 1426
      HEAP32[$375 >> 2] = $16; //@line 1427
      $376 = $ReallocAsyncCtx10 + 24 | 0; //@line 1428
      HEAP32[$376 >> 2] = $10; //@line 1429
      $377 = $ReallocAsyncCtx10 + 28 | 0; //@line 1430
      HEAP32[$377 >> 2] = $126; //@line 1431
      $378 = $ReallocAsyncCtx10 + 32 | 0; //@line 1432
      HEAP32[$378 >> 2] = $135; //@line 1433
      $379 = $ReallocAsyncCtx10 + 36 | 0; //@line 1434
      HEAP32[$379 >> 2] = $18; //@line 1435
      $380 = $ReallocAsyncCtx10 + 40 | 0; //@line 1436
      HEAP32[$380 >> 2] = $20; //@line 1437
      $381 = $ReallocAsyncCtx10 + 44 | 0; //@line 1438
      HEAP32[$381 >> 2] = $22; //@line 1439
      $382 = $ReallocAsyncCtx10 + 48 | 0; //@line 1440
      HEAP32[$382 >> 2] = $24; //@line 1441
      $383 = $ReallocAsyncCtx10 + 52 | 0; //@line 1442
      HEAP32[$383 >> 2] = $26; //@line 1443
      $384 = $ReallocAsyncCtx10 + 56 | 0; //@line 1444
      HEAP32[$384 >> 2] = $137; //@line 1445
      $385 = $ReallocAsyncCtx10 + 60 | 0; //@line 1446
      HEAP32[$385 >> 2] = $28; //@line 1447
      $386 = $ReallocAsyncCtx10 + 64 | 0; //@line 1448
      HEAP32[$386 >> 2] = $32; //@line 1449
      $387 = $ReallocAsyncCtx10 + 68 | 0; //@line 1450
      HEAP32[$387 >> 2] = $34; //@line 1451
      $388 = $ReallocAsyncCtx10 + 72 | 0; //@line 1452
      HEAP32[$388 >> 2] = $36; //@line 1453
      $389 = $ReallocAsyncCtx10 + 76 | 0; //@line 1454
      HEAP32[$389 >> 2] = $139; //@line 1455
      $390 = $ReallocAsyncCtx10 + 80 | 0; //@line 1456
      HEAP32[$390 >> 2] = $38; //@line 1457
      $391 = $ReallocAsyncCtx10 + 84 | 0; //@line 1458
      HEAP32[$391 >> 2] = $139; //@line 1459
      $392 = $ReallocAsyncCtx10 + 88 | 0; //@line 1460
      HEAP32[$392 >> 2] = $42; //@line 1461
      $393 = $ReallocAsyncCtx10 + 92 | 0; //@line 1462
      HEAP32[$393 >> 2] = $44; //@line 1463
      $394 = $ReallocAsyncCtx10 + 96 | 0; //@line 1464
      HEAP32[$394 >> 2] = $40; //@line 1465
      $395 = $ReallocAsyncCtx10 + 100 | 0; //@line 1466
      HEAP32[$395 >> 2] = $48; //@line 1467
      $396 = $ReallocAsyncCtx10 + 104 | 0; //@line 1468
      HEAP32[$396 >> 2] = $46; //@line 1469
      $397 = $ReallocAsyncCtx10 + 108 | 0; //@line 1470
      HEAP32[$397 >> 2] = $140; //@line 1471
      $398 = $ReallocAsyncCtx10 + 112 | 0; //@line 1472
      HEAP32[$398 >> 2] = $50; //@line 1473
      $399 = $ReallocAsyncCtx10 + 116 | 0; //@line 1474
      HEAP32[$399 >> 2] = $52; //@line 1475
      $400 = $ReallocAsyncCtx10 + 120 | 0; //@line 1476
      HEAP32[$400 >> 2] = $54; //@line 1477
      $401 = $ReallocAsyncCtx10 + 124 | 0; //@line 1478
      HEAP32[$401 >> 2] = $56; //@line 1479
      $402 = $ReallocAsyncCtx10 + 128 | 0; //@line 1480
      HEAP32[$402 >> 2] = $60; //@line 1481
      $403 = $ReallocAsyncCtx10 + 132 | 0; //@line 1482
      HEAP32[$403 >> 2] = $62; //@line 1483
      $404 = $ReallocAsyncCtx10 + 136 | 0; //@line 1484
      HEAP32[$404 >> 2] = $64; //@line 1485
      $405 = $ReallocAsyncCtx10 + 140 | 0; //@line 1486
      HEAP32[$405 >> 2] = $68; //@line 1487
      $406 = $ReallocAsyncCtx10 + 144 | 0; //@line 1488
      HEAP32[$406 >> 2] = $66; //@line 1489
      $407 = $ReallocAsyncCtx10 + 148 | 0; //@line 1490
      HEAP32[$407 >> 2] = $70; //@line 1491
      $408 = $ReallocAsyncCtx10 + 152 | 0; //@line 1492
      HEAP32[$408 >> 2] = $72; //@line 1493
      $409 = $ReallocAsyncCtx10 + 156 | 0; //@line 1494
      HEAP32[$409 >> 2] = $74; //@line 1495
      $410 = $ReallocAsyncCtx10 + 160 | 0; //@line 1496
      HEAP32[$410 >> 2] = $141; //@line 1497
      $411 = $ReallocAsyncCtx10 + 164 | 0; //@line 1498
      HEAP32[$411 >> 2] = $76; //@line 1499
      $412 = $ReallocAsyncCtx10 + 168 | 0; //@line 1500
      HEAP32[$412 >> 2] = $78; //@line 1501
      $413 = $ReallocAsyncCtx10 + 172 | 0; //@line 1502
      HEAP32[$413 >> 2] = $80; //@line 1503
      $414 = $ReallocAsyncCtx10 + 176 | 0; //@line 1504
      HEAP32[$414 >> 2] = $82; //@line 1505
      $415 = $ReallocAsyncCtx10 + 180 | 0; //@line 1506
      HEAP32[$415 >> 2] = $84; //@line 1507
      $416 = $ReallocAsyncCtx10 + 184 | 0; //@line 1508
      HEAP32[$416 >> 2] = $86; //@line 1509
      $417 = $ReallocAsyncCtx10 + 188 | 0; //@line 1510
      HEAP32[$417 >> 2] = $88; //@line 1511
      $418 = $ReallocAsyncCtx10 + 192 | 0; //@line 1512
      HEAP32[$418 >> 2] = $90; //@line 1513
      $419 = $ReallocAsyncCtx10 + 196 | 0; //@line 1514
      HEAP32[$419 >> 2] = $92; //@line 1515
      $420 = $ReallocAsyncCtx10 + 200 | 0; //@line 1516
      HEAP32[$420 >> 2] = $94; //@line 1517
      $421 = $ReallocAsyncCtx10 + 204 | 0; //@line 1518
      HEAP32[$421 >> 2] = $96; //@line 1519
      $422 = $ReallocAsyncCtx10 + 208 | 0; //@line 1520
      HEAP32[$422 >> 2] = $98; //@line 1521
      $423 = $ReallocAsyncCtx10 + 212 | 0; //@line 1522
      HEAP32[$423 >> 2] = $100; //@line 1523
      $424 = $ReallocAsyncCtx10 + 216 | 0; //@line 1524
      HEAP32[$424 >> 2] = $102; //@line 1525
      $425 = $ReallocAsyncCtx10 + 220 | 0; //@line 1526
      HEAP32[$425 >> 2] = $104; //@line 1527
      $426 = $ReallocAsyncCtx10 + 224 | 0; //@line 1528
      HEAP32[$426 >> 2] = $106; //@line 1529
      $427 = $ReallocAsyncCtx10 + 228 | 0; //@line 1530
      HEAP32[$427 >> 2] = $82; //@line 1531
      $428 = $ReallocAsyncCtx10 + 232 | 0; //@line 1532
      HEAP32[$428 >> 2] = $110; //@line 1533
      $429 = $ReallocAsyncCtx10 + 236 | 0; //@line 1534
      HEAP32[$429 >> 2] = $116; //@line 1535
      $430 = $ReallocAsyncCtx10 + 240 | 0; //@line 1536
      HEAP32[$430 >> 2] = $114; //@line 1537
      $431 = $ReallocAsyncCtx10 + 244 | 0; //@line 1538
      HEAP32[$431 >> 2] = $$0208$i; //@line 1539
      $432 = $ReallocAsyncCtx10 + 248 | 0; //@line 1540
      HEAP32[$432 >> 2] = $118; //@line 1541
      $433 = $ReallocAsyncCtx10 + 252 | 0; //@line 1542
      HEAP32[$433 >> 2] = $120; //@line 1543
      $434 = $ReallocAsyncCtx10 + 256 | 0; //@line 1544
      HEAP32[$434 >> 2] = $122; //@line 1545
      $435 = $ReallocAsyncCtx10 + 260 | 0; //@line 1546
      HEAP32[$435 >> 2] = $124; //@line 1547
      $436 = $ReallocAsyncCtx10 + 264 | 0; //@line 1548
      HEAP32[$436 >> 2] = $8; //@line 1549
      sp = STACKTOP; //@line 1550
      return;
     }
     HEAP8[___async_retval >> 0] = $370; //@line 1554
     ___async_unwind = 0; //@line 1555
     HEAP32[$ReallocAsyncCtx10 >> 2] = 63; //@line 1556
     $371 = $ReallocAsyncCtx10 + 4 | 0; //@line 1557
     HEAP32[$371 >> 2] = $2; //@line 1558
     $372 = $ReallocAsyncCtx10 + 8 | 0; //@line 1559
     HEAP32[$372 >> 2] = $4; //@line 1560
     $373 = $ReallocAsyncCtx10 + 12 | 0; //@line 1561
     HEAP32[$373 >> 2] = $136; //@line 1562
     $374 = $ReallocAsyncCtx10 + 16 | 0; //@line 1563
     HEAP32[$374 >> 2] = $6; //@line 1564
     $375 = $ReallocAsyncCtx10 + 20 | 0; //@line 1565
     HEAP32[$375 >> 2] = $16; //@line 1566
     $376 = $ReallocAsyncCtx10 + 24 | 0; //@line 1567
     HEAP32[$376 >> 2] = $10; //@line 1568
     $377 = $ReallocAsyncCtx10 + 28 | 0; //@line 1569
     HEAP32[$377 >> 2] = $126; //@line 1570
     $378 = $ReallocAsyncCtx10 + 32 | 0; //@line 1571
     HEAP32[$378 >> 2] = $135; //@line 1572
     $379 = $ReallocAsyncCtx10 + 36 | 0; //@line 1573
     HEAP32[$379 >> 2] = $18; //@line 1574
     $380 = $ReallocAsyncCtx10 + 40 | 0; //@line 1575
     HEAP32[$380 >> 2] = $20; //@line 1576
     $381 = $ReallocAsyncCtx10 + 44 | 0; //@line 1577
     HEAP32[$381 >> 2] = $22; //@line 1578
     $382 = $ReallocAsyncCtx10 + 48 | 0; //@line 1579
     HEAP32[$382 >> 2] = $24; //@line 1580
     $383 = $ReallocAsyncCtx10 + 52 | 0; //@line 1581
     HEAP32[$383 >> 2] = $26; //@line 1582
     $384 = $ReallocAsyncCtx10 + 56 | 0; //@line 1583
     HEAP32[$384 >> 2] = $137; //@line 1584
     $385 = $ReallocAsyncCtx10 + 60 | 0; //@line 1585
     HEAP32[$385 >> 2] = $28; //@line 1586
     $386 = $ReallocAsyncCtx10 + 64 | 0; //@line 1587
     HEAP32[$386 >> 2] = $32; //@line 1588
     $387 = $ReallocAsyncCtx10 + 68 | 0; //@line 1589
     HEAP32[$387 >> 2] = $34; //@line 1590
     $388 = $ReallocAsyncCtx10 + 72 | 0; //@line 1591
     HEAP32[$388 >> 2] = $36; //@line 1592
     $389 = $ReallocAsyncCtx10 + 76 | 0; //@line 1593
     HEAP32[$389 >> 2] = $139; //@line 1594
     $390 = $ReallocAsyncCtx10 + 80 | 0; //@line 1595
     HEAP32[$390 >> 2] = $38; //@line 1596
     $391 = $ReallocAsyncCtx10 + 84 | 0; //@line 1597
     HEAP32[$391 >> 2] = $139; //@line 1598
     $392 = $ReallocAsyncCtx10 + 88 | 0; //@line 1599
     HEAP32[$392 >> 2] = $42; //@line 1600
     $393 = $ReallocAsyncCtx10 + 92 | 0; //@line 1601
     HEAP32[$393 >> 2] = $44; //@line 1602
     $394 = $ReallocAsyncCtx10 + 96 | 0; //@line 1603
     HEAP32[$394 >> 2] = $40; //@line 1604
     $395 = $ReallocAsyncCtx10 + 100 | 0; //@line 1605
     HEAP32[$395 >> 2] = $48; //@line 1606
     $396 = $ReallocAsyncCtx10 + 104 | 0; //@line 1607
     HEAP32[$396 >> 2] = $46; //@line 1608
     $397 = $ReallocAsyncCtx10 + 108 | 0; //@line 1609
     HEAP32[$397 >> 2] = $140; //@line 1610
     $398 = $ReallocAsyncCtx10 + 112 | 0; //@line 1611
     HEAP32[$398 >> 2] = $50; //@line 1612
     $399 = $ReallocAsyncCtx10 + 116 | 0; //@line 1613
     HEAP32[$399 >> 2] = $52; //@line 1614
     $400 = $ReallocAsyncCtx10 + 120 | 0; //@line 1615
     HEAP32[$400 >> 2] = $54; //@line 1616
     $401 = $ReallocAsyncCtx10 + 124 | 0; //@line 1617
     HEAP32[$401 >> 2] = $56; //@line 1618
     $402 = $ReallocAsyncCtx10 + 128 | 0; //@line 1619
     HEAP32[$402 >> 2] = $60; //@line 1620
     $403 = $ReallocAsyncCtx10 + 132 | 0; //@line 1621
     HEAP32[$403 >> 2] = $62; //@line 1622
     $404 = $ReallocAsyncCtx10 + 136 | 0; //@line 1623
     HEAP32[$404 >> 2] = $64; //@line 1624
     $405 = $ReallocAsyncCtx10 + 140 | 0; //@line 1625
     HEAP32[$405 >> 2] = $68; //@line 1626
     $406 = $ReallocAsyncCtx10 + 144 | 0; //@line 1627
     HEAP32[$406 >> 2] = $66; //@line 1628
     $407 = $ReallocAsyncCtx10 + 148 | 0; //@line 1629
     HEAP32[$407 >> 2] = $70; //@line 1630
     $408 = $ReallocAsyncCtx10 + 152 | 0; //@line 1631
     HEAP32[$408 >> 2] = $72; //@line 1632
     $409 = $ReallocAsyncCtx10 + 156 | 0; //@line 1633
     HEAP32[$409 >> 2] = $74; //@line 1634
     $410 = $ReallocAsyncCtx10 + 160 | 0; //@line 1635
     HEAP32[$410 >> 2] = $141; //@line 1636
     $411 = $ReallocAsyncCtx10 + 164 | 0; //@line 1637
     HEAP32[$411 >> 2] = $76; //@line 1638
     $412 = $ReallocAsyncCtx10 + 168 | 0; //@line 1639
     HEAP32[$412 >> 2] = $78; //@line 1640
     $413 = $ReallocAsyncCtx10 + 172 | 0; //@line 1641
     HEAP32[$413 >> 2] = $80; //@line 1642
     $414 = $ReallocAsyncCtx10 + 176 | 0; //@line 1643
     HEAP32[$414 >> 2] = $82; //@line 1644
     $415 = $ReallocAsyncCtx10 + 180 | 0; //@line 1645
     HEAP32[$415 >> 2] = $84; //@line 1646
     $416 = $ReallocAsyncCtx10 + 184 | 0; //@line 1647
     HEAP32[$416 >> 2] = $86; //@line 1648
     $417 = $ReallocAsyncCtx10 + 188 | 0; //@line 1649
     HEAP32[$417 >> 2] = $88; //@line 1650
     $418 = $ReallocAsyncCtx10 + 192 | 0; //@line 1651
     HEAP32[$418 >> 2] = $90; //@line 1652
     $419 = $ReallocAsyncCtx10 + 196 | 0; //@line 1653
     HEAP32[$419 >> 2] = $92; //@line 1654
     $420 = $ReallocAsyncCtx10 + 200 | 0; //@line 1655
     HEAP32[$420 >> 2] = $94; //@line 1656
     $421 = $ReallocAsyncCtx10 + 204 | 0; //@line 1657
     HEAP32[$421 >> 2] = $96; //@line 1658
     $422 = $ReallocAsyncCtx10 + 208 | 0; //@line 1659
     HEAP32[$422 >> 2] = $98; //@line 1660
     $423 = $ReallocAsyncCtx10 + 212 | 0; //@line 1661
     HEAP32[$423 >> 2] = $100; //@line 1662
     $424 = $ReallocAsyncCtx10 + 216 | 0; //@line 1663
     HEAP32[$424 >> 2] = $102; //@line 1664
     $425 = $ReallocAsyncCtx10 + 220 | 0; //@line 1665
     HEAP32[$425 >> 2] = $104; //@line 1666
     $426 = $ReallocAsyncCtx10 + 224 | 0; //@line 1667
     HEAP32[$426 >> 2] = $106; //@line 1668
     $427 = $ReallocAsyncCtx10 + 228 | 0; //@line 1669
     HEAP32[$427 >> 2] = $82; //@line 1670
     $428 = $ReallocAsyncCtx10 + 232 | 0; //@line 1671
     HEAP32[$428 >> 2] = $110; //@line 1672
     $429 = $ReallocAsyncCtx10 + 236 | 0; //@line 1673
     HEAP32[$429 >> 2] = $116; //@line 1674
     $430 = $ReallocAsyncCtx10 + 240 | 0; //@line 1675
     HEAP32[$430 >> 2] = $114; //@line 1676
     $431 = $ReallocAsyncCtx10 + 244 | 0; //@line 1677
     HEAP32[$431 >> 2] = $$0208$i; //@line 1678
     $432 = $ReallocAsyncCtx10 + 248 | 0; //@line 1679
     HEAP32[$432 >> 2] = $118; //@line 1680
     $433 = $ReallocAsyncCtx10 + 252 | 0; //@line 1681
     HEAP32[$433 >> 2] = $120; //@line 1682
     $434 = $ReallocAsyncCtx10 + 256 | 0; //@line 1683
     HEAP32[$434 >> 2] = $122; //@line 1684
     $435 = $ReallocAsyncCtx10 + 260 | 0; //@line 1685
     HEAP32[$435 >> 2] = $124; //@line 1686
     $436 = $ReallocAsyncCtx10 + 264 | 0; //@line 1687
     HEAP32[$436 >> 2] = $8; //@line 1688
     sp = STACKTOP; //@line 1689
     return;
    }
   case 44:
    {
     $438 = $$1202$in$i & 65535; //@line 1694
     if (($$1202$i + -1 & 65535) <= 254) {
      $441 = HEAP32[$139 >> 2] | 0; //@line 1698
      if (!(HEAP32[$441 + 52 >> 2] | 0)) {
       HEAP16[$441 + 4 >> 1] = $$1202$i; //@line 1704
       $446 = $248 + 1 | 0; //@line 1705
       HEAP32[$82 >> 2] = $446; //@line 1706
       $447 = HEAP32[$38 >> 2] | 0; //@line 1707
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 1708
       $448 = FUNCTION_TABLE_ii[$447 & 31]($$1202$i) | 0; //@line 1709
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 1712
        $449 = $ReallocAsyncCtx5 + 4 | 0; //@line 1713
        HEAP32[$449 >> 2] = $2; //@line 1714
        $450 = $ReallocAsyncCtx5 + 8 | 0; //@line 1715
        HEAP32[$450 >> 2] = $4; //@line 1716
        $451 = $ReallocAsyncCtx5 + 12 | 0; //@line 1717
        HEAP32[$451 >> 2] = $438; //@line 1718
        $452 = $ReallocAsyncCtx5 + 16 | 0; //@line 1719
        HEAP32[$452 >> 2] = $136; //@line 1720
        $453 = $ReallocAsyncCtx5 + 20 | 0; //@line 1721
        HEAP32[$453 >> 2] = $6; //@line 1722
        $454 = $ReallocAsyncCtx5 + 24 | 0; //@line 1723
        HEAP32[$454 >> 2] = $8; //@line 1724
        $455 = $ReallocAsyncCtx5 + 28 | 0; //@line 1725
        HEAP32[$455 >> 2] = $10; //@line 1726
        $456 = $ReallocAsyncCtx5 + 32 | 0; //@line 1727
        HEAP32[$456 >> 2] = $16; //@line 1728
        $457 = $ReallocAsyncCtx5 + 36 | 0; //@line 1729
        HEAP32[$457 >> 2] = $135; //@line 1730
        $458 = $ReallocAsyncCtx5 + 40 | 0; //@line 1731
        HEAP32[$458 >> 2] = $446; //@line 1732
        $459 = $ReallocAsyncCtx5 + 44 | 0; //@line 1733
        HEAP32[$459 >> 2] = $18; //@line 1734
        $460 = $ReallocAsyncCtx5 + 48 | 0; //@line 1735
        HEAP32[$460 >> 2] = $20; //@line 1736
        $461 = $ReallocAsyncCtx5 + 52 | 0; //@line 1737
        HEAP32[$461 >> 2] = $22; //@line 1738
        $462 = $ReallocAsyncCtx5 + 56 | 0; //@line 1739
        HEAP32[$462 >> 2] = $24; //@line 1740
        $463 = $ReallocAsyncCtx5 + 60 | 0; //@line 1741
        HEAP32[$463 >> 2] = $26; //@line 1742
        $464 = $ReallocAsyncCtx5 + 64 | 0; //@line 1743
        HEAP32[$464 >> 2] = $137; //@line 1744
        $465 = $ReallocAsyncCtx5 + 68 | 0; //@line 1745
        HEAP32[$465 >> 2] = $28; //@line 1746
        $466 = $ReallocAsyncCtx5 + 72 | 0; //@line 1747
        HEAP32[$466 >> 2] = $32; //@line 1748
        $467 = $ReallocAsyncCtx5 + 76 | 0; //@line 1749
        HEAP32[$467 >> 2] = $34; //@line 1750
        $468 = $ReallocAsyncCtx5 + 80 | 0; //@line 1751
        HEAP32[$468 >> 2] = $36; //@line 1752
        $469 = $ReallocAsyncCtx5 + 84 | 0; //@line 1753
        HEAP32[$469 >> 2] = $139; //@line 1754
        $470 = $ReallocAsyncCtx5 + 88 | 0; //@line 1755
        HEAP32[$470 >> 2] = $38; //@line 1756
        $471 = $ReallocAsyncCtx5 + 92 | 0; //@line 1757
        HEAP32[$471 >> 2] = $139; //@line 1758
        $472 = $ReallocAsyncCtx5 + 96 | 0; //@line 1759
        HEAP32[$472 >> 2] = $42; //@line 1760
        $473 = $ReallocAsyncCtx5 + 100 | 0; //@line 1761
        HEAP32[$473 >> 2] = $44; //@line 1762
        $474 = $ReallocAsyncCtx5 + 104 | 0; //@line 1763
        HEAP32[$474 >> 2] = $40; //@line 1764
        $475 = $ReallocAsyncCtx5 + 108 | 0; //@line 1765
        HEAP32[$475 >> 2] = $48; //@line 1766
        $476 = $ReallocAsyncCtx5 + 112 | 0; //@line 1767
        HEAP32[$476 >> 2] = $46; //@line 1768
        $477 = $ReallocAsyncCtx5 + 116 | 0; //@line 1769
        HEAP32[$477 >> 2] = $140; //@line 1770
        $478 = $ReallocAsyncCtx5 + 120 | 0; //@line 1771
        HEAP32[$478 >> 2] = $50; //@line 1772
        $479 = $ReallocAsyncCtx5 + 124 | 0; //@line 1773
        HEAP32[$479 >> 2] = $52; //@line 1774
        $480 = $ReallocAsyncCtx5 + 128 | 0; //@line 1775
        HEAP32[$480 >> 2] = $54; //@line 1776
        $481 = $ReallocAsyncCtx5 + 132 | 0; //@line 1777
        HEAP32[$481 >> 2] = $56; //@line 1778
        $482 = $ReallocAsyncCtx5 + 136 | 0; //@line 1779
        HEAP32[$482 >> 2] = $60; //@line 1780
        $483 = $ReallocAsyncCtx5 + 140 | 0; //@line 1781
        HEAP32[$483 >> 2] = $62; //@line 1782
        $484 = $ReallocAsyncCtx5 + 144 | 0; //@line 1783
        HEAP32[$484 >> 2] = $64; //@line 1784
        $485 = $ReallocAsyncCtx5 + 148 | 0; //@line 1785
        HEAP32[$485 >> 2] = $68; //@line 1786
        $486 = $ReallocAsyncCtx5 + 152 | 0; //@line 1787
        HEAP32[$486 >> 2] = $66; //@line 1788
        $487 = $ReallocAsyncCtx5 + 156 | 0; //@line 1789
        HEAP32[$487 >> 2] = $70; //@line 1790
        $488 = $ReallocAsyncCtx5 + 160 | 0; //@line 1791
        HEAP32[$488 >> 2] = $72; //@line 1792
        $489 = $ReallocAsyncCtx5 + 164 | 0; //@line 1793
        HEAP32[$489 >> 2] = $74; //@line 1794
        $490 = $ReallocAsyncCtx5 + 168 | 0; //@line 1795
        HEAP32[$490 >> 2] = $141; //@line 1796
        $491 = $ReallocAsyncCtx5 + 172 | 0; //@line 1797
        HEAP32[$491 >> 2] = $76; //@line 1798
        $492 = $ReallocAsyncCtx5 + 176 | 0; //@line 1799
        HEAP32[$492 >> 2] = $78; //@line 1800
        $493 = $ReallocAsyncCtx5 + 180 | 0; //@line 1801
        HEAP32[$493 >> 2] = $80; //@line 1802
        $494 = $ReallocAsyncCtx5 + 184 | 0; //@line 1803
        HEAP32[$494 >> 2] = $82; //@line 1804
        $495 = $ReallocAsyncCtx5 + 188 | 0; //@line 1805
        HEAP32[$495 >> 2] = $84; //@line 1806
        $496 = $ReallocAsyncCtx5 + 192 | 0; //@line 1807
        HEAP32[$496 >> 2] = $86; //@line 1808
        $497 = $ReallocAsyncCtx5 + 196 | 0; //@line 1809
        HEAP32[$497 >> 2] = $88; //@line 1810
        $498 = $ReallocAsyncCtx5 + 200 | 0; //@line 1811
        HEAP32[$498 >> 2] = $90; //@line 1812
        $499 = $ReallocAsyncCtx5 + 204 | 0; //@line 1813
        HEAP32[$499 >> 2] = $92; //@line 1814
        $500 = $ReallocAsyncCtx5 + 208 | 0; //@line 1815
        HEAP32[$500 >> 2] = $94; //@line 1816
        $501 = $ReallocAsyncCtx5 + 212 | 0; //@line 1817
        HEAP32[$501 >> 2] = $96; //@line 1818
        $502 = $ReallocAsyncCtx5 + 216 | 0; //@line 1819
        HEAP32[$502 >> 2] = $98; //@line 1820
        $503 = $ReallocAsyncCtx5 + 220 | 0; //@line 1821
        HEAP32[$503 >> 2] = $100; //@line 1822
        $504 = $ReallocAsyncCtx5 + 224 | 0; //@line 1823
        HEAP32[$504 >> 2] = $102; //@line 1824
        $505 = $ReallocAsyncCtx5 + 228 | 0; //@line 1825
        HEAP32[$505 >> 2] = $104; //@line 1826
        $506 = $ReallocAsyncCtx5 + 232 | 0; //@line 1827
        HEAP32[$506 >> 2] = $106; //@line 1828
        $507 = $ReallocAsyncCtx5 + 236 | 0; //@line 1829
        HEAP32[$507 >> 2] = $82; //@line 1830
        $508 = $ReallocAsyncCtx5 + 240 | 0; //@line 1831
        HEAP32[$508 >> 2] = $110; //@line 1832
        $509 = $ReallocAsyncCtx5 + 244 | 0; //@line 1833
        HEAP32[$509 >> 2] = $116; //@line 1834
        $510 = $ReallocAsyncCtx5 + 248 | 0; //@line 1835
        HEAP32[$510 >> 2] = $114; //@line 1836
        $511 = $ReallocAsyncCtx5 + 252 | 0; //@line 1837
        HEAP32[$511 >> 2] = $$0208$i; //@line 1838
        $512 = $ReallocAsyncCtx5 + 256 | 0; //@line 1839
        HEAP32[$512 >> 2] = $118; //@line 1840
        $513 = $ReallocAsyncCtx5 + 260 | 0; //@line 1841
        HEAP32[$513 >> 2] = $120; //@line 1842
        $514 = $ReallocAsyncCtx5 + 264 | 0; //@line 1843
        HEAP32[$514 >> 2] = $122; //@line 1844
        $515 = $ReallocAsyncCtx5 + 268 | 0; //@line 1845
        HEAP32[$515 >> 2] = $124; //@line 1846
        $516 = $ReallocAsyncCtx5 + 272 | 0; //@line 1847
        HEAP32[$516 >> 2] = $126; //@line 1848
        sp = STACKTOP; //@line 1849
        return;
       }
       HEAP32[___async_retval >> 2] = $448; //@line 1853
       ___async_unwind = 0; //@line 1854
       HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 1855
       $449 = $ReallocAsyncCtx5 + 4 | 0; //@line 1856
       HEAP32[$449 >> 2] = $2; //@line 1857
       $450 = $ReallocAsyncCtx5 + 8 | 0; //@line 1858
       HEAP32[$450 >> 2] = $4; //@line 1859
       $451 = $ReallocAsyncCtx5 + 12 | 0; //@line 1860
       HEAP32[$451 >> 2] = $438; //@line 1861
       $452 = $ReallocAsyncCtx5 + 16 | 0; //@line 1862
       HEAP32[$452 >> 2] = $136; //@line 1863
       $453 = $ReallocAsyncCtx5 + 20 | 0; //@line 1864
       HEAP32[$453 >> 2] = $6; //@line 1865
       $454 = $ReallocAsyncCtx5 + 24 | 0; //@line 1866
       HEAP32[$454 >> 2] = $8; //@line 1867
       $455 = $ReallocAsyncCtx5 + 28 | 0; //@line 1868
       HEAP32[$455 >> 2] = $10; //@line 1869
       $456 = $ReallocAsyncCtx5 + 32 | 0; //@line 1870
       HEAP32[$456 >> 2] = $16; //@line 1871
       $457 = $ReallocAsyncCtx5 + 36 | 0; //@line 1872
       HEAP32[$457 >> 2] = $135; //@line 1873
       $458 = $ReallocAsyncCtx5 + 40 | 0; //@line 1874
       HEAP32[$458 >> 2] = $446; //@line 1875
       $459 = $ReallocAsyncCtx5 + 44 | 0; //@line 1876
       HEAP32[$459 >> 2] = $18; //@line 1877
       $460 = $ReallocAsyncCtx5 + 48 | 0; //@line 1878
       HEAP32[$460 >> 2] = $20; //@line 1879
       $461 = $ReallocAsyncCtx5 + 52 | 0; //@line 1880
       HEAP32[$461 >> 2] = $22; //@line 1881
       $462 = $ReallocAsyncCtx5 + 56 | 0; //@line 1882
       HEAP32[$462 >> 2] = $24; //@line 1883
       $463 = $ReallocAsyncCtx5 + 60 | 0; //@line 1884
       HEAP32[$463 >> 2] = $26; //@line 1885
       $464 = $ReallocAsyncCtx5 + 64 | 0; //@line 1886
       HEAP32[$464 >> 2] = $137; //@line 1887
       $465 = $ReallocAsyncCtx5 + 68 | 0; //@line 1888
       HEAP32[$465 >> 2] = $28; //@line 1889
       $466 = $ReallocAsyncCtx5 + 72 | 0; //@line 1890
       HEAP32[$466 >> 2] = $32; //@line 1891
       $467 = $ReallocAsyncCtx5 + 76 | 0; //@line 1892
       HEAP32[$467 >> 2] = $34; //@line 1893
       $468 = $ReallocAsyncCtx5 + 80 | 0; //@line 1894
       HEAP32[$468 >> 2] = $36; //@line 1895
       $469 = $ReallocAsyncCtx5 + 84 | 0; //@line 1896
       HEAP32[$469 >> 2] = $139; //@line 1897
       $470 = $ReallocAsyncCtx5 + 88 | 0; //@line 1898
       HEAP32[$470 >> 2] = $38; //@line 1899
       $471 = $ReallocAsyncCtx5 + 92 | 0; //@line 1900
       HEAP32[$471 >> 2] = $139; //@line 1901
       $472 = $ReallocAsyncCtx5 + 96 | 0; //@line 1902
       HEAP32[$472 >> 2] = $42; //@line 1903
       $473 = $ReallocAsyncCtx5 + 100 | 0; //@line 1904
       HEAP32[$473 >> 2] = $44; //@line 1905
       $474 = $ReallocAsyncCtx5 + 104 | 0; //@line 1906
       HEAP32[$474 >> 2] = $40; //@line 1907
       $475 = $ReallocAsyncCtx5 + 108 | 0; //@line 1908
       HEAP32[$475 >> 2] = $48; //@line 1909
       $476 = $ReallocAsyncCtx5 + 112 | 0; //@line 1910
       HEAP32[$476 >> 2] = $46; //@line 1911
       $477 = $ReallocAsyncCtx5 + 116 | 0; //@line 1912
       HEAP32[$477 >> 2] = $140; //@line 1913
       $478 = $ReallocAsyncCtx5 + 120 | 0; //@line 1914
       HEAP32[$478 >> 2] = $50; //@line 1915
       $479 = $ReallocAsyncCtx5 + 124 | 0; //@line 1916
       HEAP32[$479 >> 2] = $52; //@line 1917
       $480 = $ReallocAsyncCtx5 + 128 | 0; //@line 1918
       HEAP32[$480 >> 2] = $54; //@line 1919
       $481 = $ReallocAsyncCtx5 + 132 | 0; //@line 1920
       HEAP32[$481 >> 2] = $56; //@line 1921
       $482 = $ReallocAsyncCtx5 + 136 | 0; //@line 1922
       HEAP32[$482 >> 2] = $60; //@line 1923
       $483 = $ReallocAsyncCtx5 + 140 | 0; //@line 1924
       HEAP32[$483 >> 2] = $62; //@line 1925
       $484 = $ReallocAsyncCtx5 + 144 | 0; //@line 1926
       HEAP32[$484 >> 2] = $64; //@line 1927
       $485 = $ReallocAsyncCtx5 + 148 | 0; //@line 1928
       HEAP32[$485 >> 2] = $68; //@line 1929
       $486 = $ReallocAsyncCtx5 + 152 | 0; //@line 1930
       HEAP32[$486 >> 2] = $66; //@line 1931
       $487 = $ReallocAsyncCtx5 + 156 | 0; //@line 1932
       HEAP32[$487 >> 2] = $70; //@line 1933
       $488 = $ReallocAsyncCtx5 + 160 | 0; //@line 1934
       HEAP32[$488 >> 2] = $72; //@line 1935
       $489 = $ReallocAsyncCtx5 + 164 | 0; //@line 1936
       HEAP32[$489 >> 2] = $74; //@line 1937
       $490 = $ReallocAsyncCtx5 + 168 | 0; //@line 1938
       HEAP32[$490 >> 2] = $141; //@line 1939
       $491 = $ReallocAsyncCtx5 + 172 | 0; //@line 1940
       HEAP32[$491 >> 2] = $76; //@line 1941
       $492 = $ReallocAsyncCtx5 + 176 | 0; //@line 1942
       HEAP32[$492 >> 2] = $78; //@line 1943
       $493 = $ReallocAsyncCtx5 + 180 | 0; //@line 1944
       HEAP32[$493 >> 2] = $80; //@line 1945
       $494 = $ReallocAsyncCtx5 + 184 | 0; //@line 1946
       HEAP32[$494 >> 2] = $82; //@line 1947
       $495 = $ReallocAsyncCtx5 + 188 | 0; //@line 1948
       HEAP32[$495 >> 2] = $84; //@line 1949
       $496 = $ReallocAsyncCtx5 + 192 | 0; //@line 1950
       HEAP32[$496 >> 2] = $86; //@line 1951
       $497 = $ReallocAsyncCtx5 + 196 | 0; //@line 1952
       HEAP32[$497 >> 2] = $88; //@line 1953
       $498 = $ReallocAsyncCtx5 + 200 | 0; //@line 1954
       HEAP32[$498 >> 2] = $90; //@line 1955
       $499 = $ReallocAsyncCtx5 + 204 | 0; //@line 1956
       HEAP32[$499 >> 2] = $92; //@line 1957
       $500 = $ReallocAsyncCtx5 + 208 | 0; //@line 1958
       HEAP32[$500 >> 2] = $94; //@line 1959
       $501 = $ReallocAsyncCtx5 + 212 | 0; //@line 1960
       HEAP32[$501 >> 2] = $96; //@line 1961
       $502 = $ReallocAsyncCtx5 + 216 | 0; //@line 1962
       HEAP32[$502 >> 2] = $98; //@line 1963
       $503 = $ReallocAsyncCtx5 + 220 | 0; //@line 1964
       HEAP32[$503 >> 2] = $100; //@line 1965
       $504 = $ReallocAsyncCtx5 + 224 | 0; //@line 1966
       HEAP32[$504 >> 2] = $102; //@line 1967
       $505 = $ReallocAsyncCtx5 + 228 | 0; //@line 1968
       HEAP32[$505 >> 2] = $104; //@line 1969
       $506 = $ReallocAsyncCtx5 + 232 | 0; //@line 1970
       HEAP32[$506 >> 2] = $106; //@line 1971
       $507 = $ReallocAsyncCtx5 + 236 | 0; //@line 1972
       HEAP32[$507 >> 2] = $82; //@line 1973
       $508 = $ReallocAsyncCtx5 + 240 | 0; //@line 1974
       HEAP32[$508 >> 2] = $110; //@line 1975
       $509 = $ReallocAsyncCtx5 + 244 | 0; //@line 1976
       HEAP32[$509 >> 2] = $116; //@line 1977
       $510 = $ReallocAsyncCtx5 + 248 | 0; //@line 1978
       HEAP32[$510 >> 2] = $114; //@line 1979
       $511 = $ReallocAsyncCtx5 + 252 | 0; //@line 1980
       HEAP32[$511 >> 2] = $$0208$i; //@line 1981
       $512 = $ReallocAsyncCtx5 + 256 | 0; //@line 1982
       HEAP32[$512 >> 2] = $118; //@line 1983
       $513 = $ReallocAsyncCtx5 + 260 | 0; //@line 1984
       HEAP32[$513 >> 2] = $120; //@line 1985
       $514 = $ReallocAsyncCtx5 + 264 | 0; //@line 1986
       HEAP32[$514 >> 2] = $122; //@line 1987
       $515 = $ReallocAsyncCtx5 + 268 | 0; //@line 1988
       HEAP32[$515 >> 2] = $124; //@line 1989
       $516 = $ReallocAsyncCtx5 + 272 | 0; //@line 1990
       HEAP32[$516 >> 2] = $126; //@line 1991
       sp = STACKTOP; //@line 1992
       return;
      }
     }
     _mbed_tracef(2, 3844, 4605, $52); //@line 1996
     break L2;
     break;
    }
   case 50:
    {
     $518 = HEAP32[$139 >> 2] | 0; //@line 2001
     $519 = $518 + 56 | 0; //@line 2002
     if (HEAP32[$519 >> 2] | 0) {
      _mbed_tracef(2, 3844, 4739, $28); //@line 2006
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 2010
     $523 = _sn_coap_parser_options_parse_multiple_options($106, $82, $182, $519, $518 + 6 | 0, 8, $$1202$i) | 0; //@line 2011
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 2014
      $524 = $ReallocAsyncCtx9 + 4 | 0; //@line 2015
      HEAP32[$524 >> 2] = $2; //@line 2016
      $525 = $ReallocAsyncCtx9 + 8 | 0; //@line 2017
      HEAP32[$525 >> 2] = $4; //@line 2018
      $526 = $ReallocAsyncCtx9 + 12 | 0; //@line 2019
      HEAP32[$526 >> 2] = $136; //@line 2020
      $527 = $ReallocAsyncCtx9 + 16 | 0; //@line 2021
      HEAP32[$527 >> 2] = $6; //@line 2022
      $528 = $ReallocAsyncCtx9 + 20 | 0; //@line 2023
      HEAP32[$528 >> 2] = $16; //@line 2024
      $529 = $ReallocAsyncCtx9 + 24 | 0; //@line 2025
      HEAP32[$529 >> 2] = $10; //@line 2026
      $530 = $ReallocAsyncCtx9 + 28 | 0; //@line 2027
      HEAP32[$530 >> 2] = $126; //@line 2028
      $531 = $ReallocAsyncCtx9 + 32 | 0; //@line 2029
      HEAP32[$531 >> 2] = $135; //@line 2030
      $532 = $ReallocAsyncCtx9 + 36 | 0; //@line 2031
      HEAP32[$532 >> 2] = $18; //@line 2032
      $533 = $ReallocAsyncCtx9 + 40 | 0; //@line 2033
      HEAP32[$533 >> 2] = $20; //@line 2034
      $534 = $ReallocAsyncCtx9 + 44 | 0; //@line 2035
      HEAP32[$534 >> 2] = $22; //@line 2036
      $535 = $ReallocAsyncCtx9 + 48 | 0; //@line 2037
      HEAP32[$535 >> 2] = $24; //@line 2038
      $536 = $ReallocAsyncCtx9 + 52 | 0; //@line 2039
      HEAP32[$536 >> 2] = $26; //@line 2040
      $537 = $ReallocAsyncCtx9 + 56 | 0; //@line 2041
      HEAP32[$537 >> 2] = $137; //@line 2042
      $538 = $ReallocAsyncCtx9 + 60 | 0; //@line 2043
      HEAP32[$538 >> 2] = $28; //@line 2044
      $539 = $ReallocAsyncCtx9 + 64 | 0; //@line 2045
      HEAP32[$539 >> 2] = $32; //@line 2046
      $540 = $ReallocAsyncCtx9 + 68 | 0; //@line 2047
      HEAP32[$540 >> 2] = $34; //@line 2048
      $541 = $ReallocAsyncCtx9 + 72 | 0; //@line 2049
      HEAP32[$541 >> 2] = $36; //@line 2050
      $542 = $ReallocAsyncCtx9 + 76 | 0; //@line 2051
      HEAP32[$542 >> 2] = $139; //@line 2052
      $543 = $ReallocAsyncCtx9 + 80 | 0; //@line 2053
      HEAP32[$543 >> 2] = $38; //@line 2054
      $544 = $ReallocAsyncCtx9 + 84 | 0; //@line 2055
      HEAP32[$544 >> 2] = $139; //@line 2056
      $545 = $ReallocAsyncCtx9 + 88 | 0; //@line 2057
      HEAP32[$545 >> 2] = $42; //@line 2058
      $546 = $ReallocAsyncCtx9 + 92 | 0; //@line 2059
      HEAP32[$546 >> 2] = $44; //@line 2060
      $547 = $ReallocAsyncCtx9 + 96 | 0; //@line 2061
      HEAP32[$547 >> 2] = $40; //@line 2062
      $548 = $ReallocAsyncCtx9 + 100 | 0; //@line 2063
      HEAP32[$548 >> 2] = $48; //@line 2064
      $549 = $ReallocAsyncCtx9 + 104 | 0; //@line 2065
      HEAP32[$549 >> 2] = $46; //@line 2066
      $550 = $ReallocAsyncCtx9 + 108 | 0; //@line 2067
      HEAP32[$550 >> 2] = $140; //@line 2068
      $551 = $ReallocAsyncCtx9 + 112 | 0; //@line 2069
      HEAP32[$551 >> 2] = $50; //@line 2070
      $552 = $ReallocAsyncCtx9 + 116 | 0; //@line 2071
      HEAP32[$552 >> 2] = $52; //@line 2072
      $553 = $ReallocAsyncCtx9 + 120 | 0; //@line 2073
      HEAP32[$553 >> 2] = $54; //@line 2074
      $554 = $ReallocAsyncCtx9 + 124 | 0; //@line 2075
      HEAP32[$554 >> 2] = $56; //@line 2076
      $555 = $ReallocAsyncCtx9 + 128 | 0; //@line 2077
      HEAP32[$555 >> 2] = $60; //@line 2078
      $556 = $ReallocAsyncCtx9 + 132 | 0; //@line 2079
      HEAP32[$556 >> 2] = $62; //@line 2080
      $557 = $ReallocAsyncCtx9 + 136 | 0; //@line 2081
      HEAP32[$557 >> 2] = $64; //@line 2082
      $558 = $ReallocAsyncCtx9 + 140 | 0; //@line 2083
      HEAP32[$558 >> 2] = $68; //@line 2084
      $559 = $ReallocAsyncCtx9 + 144 | 0; //@line 2085
      HEAP32[$559 >> 2] = $66; //@line 2086
      $560 = $ReallocAsyncCtx9 + 148 | 0; //@line 2087
      HEAP32[$560 >> 2] = $70; //@line 2088
      $561 = $ReallocAsyncCtx9 + 152 | 0; //@line 2089
      HEAP32[$561 >> 2] = $72; //@line 2090
      $562 = $ReallocAsyncCtx9 + 156 | 0; //@line 2091
      HEAP32[$562 >> 2] = $74; //@line 2092
      $563 = $ReallocAsyncCtx9 + 160 | 0; //@line 2093
      HEAP32[$563 >> 2] = $141; //@line 2094
      $564 = $ReallocAsyncCtx9 + 164 | 0; //@line 2095
      HEAP32[$564 >> 2] = $76; //@line 2096
      $565 = $ReallocAsyncCtx9 + 168 | 0; //@line 2097
      HEAP32[$565 >> 2] = $78; //@line 2098
      $566 = $ReallocAsyncCtx9 + 172 | 0; //@line 2099
      HEAP32[$566 >> 2] = $80; //@line 2100
      $567 = $ReallocAsyncCtx9 + 176 | 0; //@line 2101
      HEAP32[$567 >> 2] = $82; //@line 2102
      $568 = $ReallocAsyncCtx9 + 180 | 0; //@line 2103
      HEAP32[$568 >> 2] = $84; //@line 2104
      $569 = $ReallocAsyncCtx9 + 184 | 0; //@line 2105
      HEAP32[$569 >> 2] = $86; //@line 2106
      $570 = $ReallocAsyncCtx9 + 188 | 0; //@line 2107
      HEAP32[$570 >> 2] = $88; //@line 2108
      $571 = $ReallocAsyncCtx9 + 192 | 0; //@line 2109
      HEAP32[$571 >> 2] = $90; //@line 2110
      $572 = $ReallocAsyncCtx9 + 196 | 0; //@line 2111
      HEAP32[$572 >> 2] = $92; //@line 2112
      $573 = $ReallocAsyncCtx9 + 200 | 0; //@line 2113
      HEAP32[$573 >> 2] = $94; //@line 2114
      $574 = $ReallocAsyncCtx9 + 204 | 0; //@line 2115
      HEAP32[$574 >> 2] = $96; //@line 2116
      $575 = $ReallocAsyncCtx9 + 208 | 0; //@line 2117
      HEAP32[$575 >> 2] = $98; //@line 2118
      $576 = $ReallocAsyncCtx9 + 212 | 0; //@line 2119
      HEAP32[$576 >> 2] = $100; //@line 2120
      $577 = $ReallocAsyncCtx9 + 216 | 0; //@line 2121
      HEAP32[$577 >> 2] = $102; //@line 2122
      $578 = $ReallocAsyncCtx9 + 220 | 0; //@line 2123
      HEAP32[$578 >> 2] = $104; //@line 2124
      $579 = $ReallocAsyncCtx9 + 224 | 0; //@line 2125
      HEAP32[$579 >> 2] = $106; //@line 2126
      $580 = $ReallocAsyncCtx9 + 228 | 0; //@line 2127
      HEAP32[$580 >> 2] = $82; //@line 2128
      $581 = $ReallocAsyncCtx9 + 232 | 0; //@line 2129
      HEAP32[$581 >> 2] = $110; //@line 2130
      $582 = $ReallocAsyncCtx9 + 236 | 0; //@line 2131
      HEAP32[$582 >> 2] = $116; //@line 2132
      $583 = $ReallocAsyncCtx9 + 240 | 0; //@line 2133
      HEAP32[$583 >> 2] = $114; //@line 2134
      $584 = $ReallocAsyncCtx9 + 244 | 0; //@line 2135
      HEAP32[$584 >> 2] = $$0208$i; //@line 2136
      $585 = $ReallocAsyncCtx9 + 248 | 0; //@line 2137
      HEAP32[$585 >> 2] = $118; //@line 2138
      $586 = $ReallocAsyncCtx9 + 252 | 0; //@line 2139
      HEAP32[$586 >> 2] = $120; //@line 2140
      $587 = $ReallocAsyncCtx9 + 256 | 0; //@line 2141
      HEAP32[$587 >> 2] = $122; //@line 2142
      $588 = $ReallocAsyncCtx9 + 260 | 0; //@line 2143
      HEAP32[$588 >> 2] = $124; //@line 2144
      $589 = $ReallocAsyncCtx9 + 264 | 0; //@line 2145
      HEAP32[$589 >> 2] = $8; //@line 2146
      sp = STACKTOP; //@line 2147
      return;
     }
     HEAP8[___async_retval >> 0] = $523; //@line 2151
     ___async_unwind = 0; //@line 2152
     HEAP32[$ReallocAsyncCtx9 >> 2] = 65; //@line 2153
     $524 = $ReallocAsyncCtx9 + 4 | 0; //@line 2154
     HEAP32[$524 >> 2] = $2; //@line 2155
     $525 = $ReallocAsyncCtx9 + 8 | 0; //@line 2156
     HEAP32[$525 >> 2] = $4; //@line 2157
     $526 = $ReallocAsyncCtx9 + 12 | 0; //@line 2158
     HEAP32[$526 >> 2] = $136; //@line 2159
     $527 = $ReallocAsyncCtx9 + 16 | 0; //@line 2160
     HEAP32[$527 >> 2] = $6; //@line 2161
     $528 = $ReallocAsyncCtx9 + 20 | 0; //@line 2162
     HEAP32[$528 >> 2] = $16; //@line 2163
     $529 = $ReallocAsyncCtx9 + 24 | 0; //@line 2164
     HEAP32[$529 >> 2] = $10; //@line 2165
     $530 = $ReallocAsyncCtx9 + 28 | 0; //@line 2166
     HEAP32[$530 >> 2] = $126; //@line 2167
     $531 = $ReallocAsyncCtx9 + 32 | 0; //@line 2168
     HEAP32[$531 >> 2] = $135; //@line 2169
     $532 = $ReallocAsyncCtx9 + 36 | 0; //@line 2170
     HEAP32[$532 >> 2] = $18; //@line 2171
     $533 = $ReallocAsyncCtx9 + 40 | 0; //@line 2172
     HEAP32[$533 >> 2] = $20; //@line 2173
     $534 = $ReallocAsyncCtx9 + 44 | 0; //@line 2174
     HEAP32[$534 >> 2] = $22; //@line 2175
     $535 = $ReallocAsyncCtx9 + 48 | 0; //@line 2176
     HEAP32[$535 >> 2] = $24; //@line 2177
     $536 = $ReallocAsyncCtx9 + 52 | 0; //@line 2178
     HEAP32[$536 >> 2] = $26; //@line 2179
     $537 = $ReallocAsyncCtx9 + 56 | 0; //@line 2180
     HEAP32[$537 >> 2] = $137; //@line 2181
     $538 = $ReallocAsyncCtx9 + 60 | 0; //@line 2182
     HEAP32[$538 >> 2] = $28; //@line 2183
     $539 = $ReallocAsyncCtx9 + 64 | 0; //@line 2184
     HEAP32[$539 >> 2] = $32; //@line 2185
     $540 = $ReallocAsyncCtx9 + 68 | 0; //@line 2186
     HEAP32[$540 >> 2] = $34; //@line 2187
     $541 = $ReallocAsyncCtx9 + 72 | 0; //@line 2188
     HEAP32[$541 >> 2] = $36; //@line 2189
     $542 = $ReallocAsyncCtx9 + 76 | 0; //@line 2190
     HEAP32[$542 >> 2] = $139; //@line 2191
     $543 = $ReallocAsyncCtx9 + 80 | 0; //@line 2192
     HEAP32[$543 >> 2] = $38; //@line 2193
     $544 = $ReallocAsyncCtx9 + 84 | 0; //@line 2194
     HEAP32[$544 >> 2] = $139; //@line 2195
     $545 = $ReallocAsyncCtx9 + 88 | 0; //@line 2196
     HEAP32[$545 >> 2] = $42; //@line 2197
     $546 = $ReallocAsyncCtx9 + 92 | 0; //@line 2198
     HEAP32[$546 >> 2] = $44; //@line 2199
     $547 = $ReallocAsyncCtx9 + 96 | 0; //@line 2200
     HEAP32[$547 >> 2] = $40; //@line 2201
     $548 = $ReallocAsyncCtx9 + 100 | 0; //@line 2202
     HEAP32[$548 >> 2] = $48; //@line 2203
     $549 = $ReallocAsyncCtx9 + 104 | 0; //@line 2204
     HEAP32[$549 >> 2] = $46; //@line 2205
     $550 = $ReallocAsyncCtx9 + 108 | 0; //@line 2206
     HEAP32[$550 >> 2] = $140; //@line 2207
     $551 = $ReallocAsyncCtx9 + 112 | 0; //@line 2208
     HEAP32[$551 >> 2] = $50; //@line 2209
     $552 = $ReallocAsyncCtx9 + 116 | 0; //@line 2210
     HEAP32[$552 >> 2] = $52; //@line 2211
     $553 = $ReallocAsyncCtx9 + 120 | 0; //@line 2212
     HEAP32[$553 >> 2] = $54; //@line 2213
     $554 = $ReallocAsyncCtx9 + 124 | 0; //@line 2214
     HEAP32[$554 >> 2] = $56; //@line 2215
     $555 = $ReallocAsyncCtx9 + 128 | 0; //@line 2216
     HEAP32[$555 >> 2] = $60; //@line 2217
     $556 = $ReallocAsyncCtx9 + 132 | 0; //@line 2218
     HEAP32[$556 >> 2] = $62; //@line 2219
     $557 = $ReallocAsyncCtx9 + 136 | 0; //@line 2220
     HEAP32[$557 >> 2] = $64; //@line 2221
     $558 = $ReallocAsyncCtx9 + 140 | 0; //@line 2222
     HEAP32[$558 >> 2] = $68; //@line 2223
     $559 = $ReallocAsyncCtx9 + 144 | 0; //@line 2224
     HEAP32[$559 >> 2] = $66; //@line 2225
     $560 = $ReallocAsyncCtx9 + 148 | 0; //@line 2226
     HEAP32[$560 >> 2] = $70; //@line 2227
     $561 = $ReallocAsyncCtx9 + 152 | 0; //@line 2228
     HEAP32[$561 >> 2] = $72; //@line 2229
     $562 = $ReallocAsyncCtx9 + 156 | 0; //@line 2230
     HEAP32[$562 >> 2] = $74; //@line 2231
     $563 = $ReallocAsyncCtx9 + 160 | 0; //@line 2232
     HEAP32[$563 >> 2] = $141; //@line 2233
     $564 = $ReallocAsyncCtx9 + 164 | 0; //@line 2234
     HEAP32[$564 >> 2] = $76; //@line 2235
     $565 = $ReallocAsyncCtx9 + 168 | 0; //@line 2236
     HEAP32[$565 >> 2] = $78; //@line 2237
     $566 = $ReallocAsyncCtx9 + 172 | 0; //@line 2238
     HEAP32[$566 >> 2] = $80; //@line 2239
     $567 = $ReallocAsyncCtx9 + 176 | 0; //@line 2240
     HEAP32[$567 >> 2] = $82; //@line 2241
     $568 = $ReallocAsyncCtx9 + 180 | 0; //@line 2242
     HEAP32[$568 >> 2] = $84; //@line 2243
     $569 = $ReallocAsyncCtx9 + 184 | 0; //@line 2244
     HEAP32[$569 >> 2] = $86; //@line 2245
     $570 = $ReallocAsyncCtx9 + 188 | 0; //@line 2246
     HEAP32[$570 >> 2] = $88; //@line 2247
     $571 = $ReallocAsyncCtx9 + 192 | 0; //@line 2248
     HEAP32[$571 >> 2] = $90; //@line 2249
     $572 = $ReallocAsyncCtx9 + 196 | 0; //@line 2250
     HEAP32[$572 >> 2] = $92; //@line 2251
     $573 = $ReallocAsyncCtx9 + 200 | 0; //@line 2252
     HEAP32[$573 >> 2] = $94; //@line 2253
     $574 = $ReallocAsyncCtx9 + 204 | 0; //@line 2254
     HEAP32[$574 >> 2] = $96; //@line 2255
     $575 = $ReallocAsyncCtx9 + 208 | 0; //@line 2256
     HEAP32[$575 >> 2] = $98; //@line 2257
     $576 = $ReallocAsyncCtx9 + 212 | 0; //@line 2258
     HEAP32[$576 >> 2] = $100; //@line 2259
     $577 = $ReallocAsyncCtx9 + 216 | 0; //@line 2260
     HEAP32[$577 >> 2] = $102; //@line 2261
     $578 = $ReallocAsyncCtx9 + 220 | 0; //@line 2262
     HEAP32[$578 >> 2] = $104; //@line 2263
     $579 = $ReallocAsyncCtx9 + 224 | 0; //@line 2264
     HEAP32[$579 >> 2] = $106; //@line 2265
     $580 = $ReallocAsyncCtx9 + 228 | 0; //@line 2266
     HEAP32[$580 >> 2] = $82; //@line 2267
     $581 = $ReallocAsyncCtx9 + 232 | 0; //@line 2268
     HEAP32[$581 >> 2] = $110; //@line 2269
     $582 = $ReallocAsyncCtx9 + 236 | 0; //@line 2270
     HEAP32[$582 >> 2] = $116; //@line 2271
     $583 = $ReallocAsyncCtx9 + 240 | 0; //@line 2272
     HEAP32[$583 >> 2] = $114; //@line 2273
     $584 = $ReallocAsyncCtx9 + 244 | 0; //@line 2274
     HEAP32[$584 >> 2] = $$0208$i; //@line 2275
     $585 = $ReallocAsyncCtx9 + 248 | 0; //@line 2276
     HEAP32[$585 >> 2] = $118; //@line 2277
     $586 = $ReallocAsyncCtx9 + 252 | 0; //@line 2278
     HEAP32[$586 >> 2] = $120; //@line 2279
     $587 = $ReallocAsyncCtx9 + 256 | 0; //@line 2280
     HEAP32[$587 >> 2] = $122; //@line 2281
     $588 = $ReallocAsyncCtx9 + 260 | 0; //@line 2282
     HEAP32[$588 >> 2] = $124; //@line 2283
     $589 = $ReallocAsyncCtx9 + 264 | 0; //@line 2284
     HEAP32[$589 >> 2] = $8; //@line 2285
     sp = STACKTOP; //@line 2286
     return;
    }
   case 57:
    {
     _mbed_tracef(2, 3844, 4872, $120); //@line 2291
     break L2;
     break;
    }
   case 61:
    {
     $607 = HEAP32[$139 >> 2] | 0; //@line 2296
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 2299
     $610 = _sn_coap_parser_options_parse_multiple_options($106, $82, $182, $607 + 60 | 0, $607 + 8 | 0, 20, $$1202$i) | 0; //@line 2300
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 2303
      $611 = $ReallocAsyncCtx8 + 4 | 0; //@line 2304
      HEAP32[$611 >> 2] = $2; //@line 2305
      $612 = $ReallocAsyncCtx8 + 8 | 0; //@line 2306
      HEAP32[$612 >> 2] = $4; //@line 2307
      $613 = $ReallocAsyncCtx8 + 12 | 0; //@line 2308
      HEAP32[$613 >> 2] = $136; //@line 2309
      $614 = $ReallocAsyncCtx8 + 16 | 0; //@line 2310
      HEAP32[$614 >> 2] = $6; //@line 2311
      $615 = $ReallocAsyncCtx8 + 20 | 0; //@line 2312
      HEAP32[$615 >> 2] = $16; //@line 2313
      $616 = $ReallocAsyncCtx8 + 24 | 0; //@line 2314
      HEAP32[$616 >> 2] = $10; //@line 2315
      $617 = $ReallocAsyncCtx8 + 28 | 0; //@line 2316
      HEAP32[$617 >> 2] = $126; //@line 2317
      $618 = $ReallocAsyncCtx8 + 32 | 0; //@line 2318
      HEAP32[$618 >> 2] = $135; //@line 2319
      $619 = $ReallocAsyncCtx8 + 36 | 0; //@line 2320
      HEAP32[$619 >> 2] = $18; //@line 2321
      $620 = $ReallocAsyncCtx8 + 40 | 0; //@line 2322
      HEAP32[$620 >> 2] = $20; //@line 2323
      $621 = $ReallocAsyncCtx8 + 44 | 0; //@line 2324
      HEAP32[$621 >> 2] = $22; //@line 2325
      $622 = $ReallocAsyncCtx8 + 48 | 0; //@line 2326
      HEAP32[$622 >> 2] = $24; //@line 2327
      $623 = $ReallocAsyncCtx8 + 52 | 0; //@line 2328
      HEAP32[$623 >> 2] = $26; //@line 2329
      $624 = $ReallocAsyncCtx8 + 56 | 0; //@line 2330
      HEAP32[$624 >> 2] = $137; //@line 2331
      $625 = $ReallocAsyncCtx8 + 60 | 0; //@line 2332
      HEAP32[$625 >> 2] = $28; //@line 2333
      $626 = $ReallocAsyncCtx8 + 64 | 0; //@line 2334
      HEAP32[$626 >> 2] = $32; //@line 2335
      $627 = $ReallocAsyncCtx8 + 68 | 0; //@line 2336
      HEAP32[$627 >> 2] = $34; //@line 2337
      $628 = $ReallocAsyncCtx8 + 72 | 0; //@line 2338
      HEAP32[$628 >> 2] = $36; //@line 2339
      $629 = $ReallocAsyncCtx8 + 76 | 0; //@line 2340
      HEAP32[$629 >> 2] = $139; //@line 2341
      $630 = $ReallocAsyncCtx8 + 80 | 0; //@line 2342
      HEAP32[$630 >> 2] = $38; //@line 2343
      $631 = $ReallocAsyncCtx8 + 84 | 0; //@line 2344
      HEAP32[$631 >> 2] = $139; //@line 2345
      $632 = $ReallocAsyncCtx8 + 88 | 0; //@line 2346
      HEAP32[$632 >> 2] = $42; //@line 2347
      $633 = $ReallocAsyncCtx8 + 92 | 0; //@line 2348
      HEAP32[$633 >> 2] = $44; //@line 2349
      $634 = $ReallocAsyncCtx8 + 96 | 0; //@line 2350
      HEAP32[$634 >> 2] = $40; //@line 2351
      $635 = $ReallocAsyncCtx8 + 100 | 0; //@line 2352
      HEAP32[$635 >> 2] = $48; //@line 2353
      $636 = $ReallocAsyncCtx8 + 104 | 0; //@line 2354
      HEAP32[$636 >> 2] = $46; //@line 2355
      $637 = $ReallocAsyncCtx8 + 108 | 0; //@line 2356
      HEAP32[$637 >> 2] = $140; //@line 2357
      $638 = $ReallocAsyncCtx8 + 112 | 0; //@line 2358
      HEAP32[$638 >> 2] = $50; //@line 2359
      $639 = $ReallocAsyncCtx8 + 116 | 0; //@line 2360
      HEAP32[$639 >> 2] = $52; //@line 2361
      $640 = $ReallocAsyncCtx8 + 120 | 0; //@line 2362
      HEAP32[$640 >> 2] = $54; //@line 2363
      $641 = $ReallocAsyncCtx8 + 124 | 0; //@line 2364
      HEAP32[$641 >> 2] = $56; //@line 2365
      $642 = $ReallocAsyncCtx8 + 128 | 0; //@line 2366
      HEAP32[$642 >> 2] = $60; //@line 2367
      $643 = $ReallocAsyncCtx8 + 132 | 0; //@line 2368
      HEAP32[$643 >> 2] = $62; //@line 2369
      $644 = $ReallocAsyncCtx8 + 136 | 0; //@line 2370
      HEAP32[$644 >> 2] = $64; //@line 2371
      $645 = $ReallocAsyncCtx8 + 140 | 0; //@line 2372
      HEAP32[$645 >> 2] = $68; //@line 2373
      $646 = $ReallocAsyncCtx8 + 144 | 0; //@line 2374
      HEAP32[$646 >> 2] = $66; //@line 2375
      $647 = $ReallocAsyncCtx8 + 148 | 0; //@line 2376
      HEAP32[$647 >> 2] = $70; //@line 2377
      $648 = $ReallocAsyncCtx8 + 152 | 0; //@line 2378
      HEAP32[$648 >> 2] = $72; //@line 2379
      $649 = $ReallocAsyncCtx8 + 156 | 0; //@line 2380
      HEAP32[$649 >> 2] = $74; //@line 2381
      $650 = $ReallocAsyncCtx8 + 160 | 0; //@line 2382
      HEAP32[$650 >> 2] = $141; //@line 2383
      $651 = $ReallocAsyncCtx8 + 164 | 0; //@line 2384
      HEAP32[$651 >> 2] = $76; //@line 2385
      $652 = $ReallocAsyncCtx8 + 168 | 0; //@line 2386
      HEAP32[$652 >> 2] = $78; //@line 2387
      $653 = $ReallocAsyncCtx8 + 172 | 0; //@line 2388
      HEAP32[$653 >> 2] = $80; //@line 2389
      $654 = $ReallocAsyncCtx8 + 176 | 0; //@line 2390
      HEAP32[$654 >> 2] = $82; //@line 2391
      $655 = $ReallocAsyncCtx8 + 180 | 0; //@line 2392
      HEAP32[$655 >> 2] = $84; //@line 2393
      $656 = $ReallocAsyncCtx8 + 184 | 0; //@line 2394
      HEAP32[$656 >> 2] = $86; //@line 2395
      $657 = $ReallocAsyncCtx8 + 188 | 0; //@line 2396
      HEAP32[$657 >> 2] = $88; //@line 2397
      $658 = $ReallocAsyncCtx8 + 192 | 0; //@line 2398
      HEAP32[$658 >> 2] = $90; //@line 2399
      $659 = $ReallocAsyncCtx8 + 196 | 0; //@line 2400
      HEAP32[$659 >> 2] = $92; //@line 2401
      $660 = $ReallocAsyncCtx8 + 200 | 0; //@line 2402
      HEAP32[$660 >> 2] = $94; //@line 2403
      $661 = $ReallocAsyncCtx8 + 204 | 0; //@line 2404
      HEAP32[$661 >> 2] = $96; //@line 2405
      $662 = $ReallocAsyncCtx8 + 208 | 0; //@line 2406
      HEAP32[$662 >> 2] = $98; //@line 2407
      $663 = $ReallocAsyncCtx8 + 212 | 0; //@line 2408
      HEAP32[$663 >> 2] = $100; //@line 2409
      $664 = $ReallocAsyncCtx8 + 216 | 0; //@line 2410
      HEAP32[$664 >> 2] = $102; //@line 2411
      $665 = $ReallocAsyncCtx8 + 220 | 0; //@line 2412
      HEAP32[$665 >> 2] = $104; //@line 2413
      $666 = $ReallocAsyncCtx8 + 224 | 0; //@line 2414
      HEAP32[$666 >> 2] = $106; //@line 2415
      $667 = $ReallocAsyncCtx8 + 228 | 0; //@line 2416
      HEAP32[$667 >> 2] = $82; //@line 2417
      $668 = $ReallocAsyncCtx8 + 232 | 0; //@line 2418
      HEAP32[$668 >> 2] = $110; //@line 2419
      $669 = $ReallocAsyncCtx8 + 236 | 0; //@line 2420
      HEAP32[$669 >> 2] = $116; //@line 2421
      $670 = $ReallocAsyncCtx8 + 240 | 0; //@line 2422
      HEAP32[$670 >> 2] = $114; //@line 2423
      $671 = $ReallocAsyncCtx8 + 244 | 0; //@line 2424
      HEAP32[$671 >> 2] = $$0208$i; //@line 2425
      $672 = $ReallocAsyncCtx8 + 248 | 0; //@line 2426
      HEAP32[$672 >> 2] = $118; //@line 2427
      $673 = $ReallocAsyncCtx8 + 252 | 0; //@line 2428
      HEAP32[$673 >> 2] = $120; //@line 2429
      $674 = $ReallocAsyncCtx8 + 256 | 0; //@line 2430
      HEAP32[$674 >> 2] = $122; //@line 2431
      $675 = $ReallocAsyncCtx8 + 260 | 0; //@line 2432
      HEAP32[$675 >> 2] = $124; //@line 2433
      $676 = $ReallocAsyncCtx8 + 264 | 0; //@line 2434
      HEAP32[$676 >> 2] = $8; //@line 2435
      sp = STACKTOP; //@line 2436
      return;
     }
     HEAP8[___async_retval >> 0] = $610; //@line 2440
     ___async_unwind = 0; //@line 2441
     HEAP32[$ReallocAsyncCtx8 >> 2] = 66; //@line 2442
     $611 = $ReallocAsyncCtx8 + 4 | 0; //@line 2443
     HEAP32[$611 >> 2] = $2; //@line 2444
     $612 = $ReallocAsyncCtx8 + 8 | 0; //@line 2445
     HEAP32[$612 >> 2] = $4; //@line 2446
     $613 = $ReallocAsyncCtx8 + 12 | 0; //@line 2447
     HEAP32[$613 >> 2] = $136; //@line 2448
     $614 = $ReallocAsyncCtx8 + 16 | 0; //@line 2449
     HEAP32[$614 >> 2] = $6; //@line 2450
     $615 = $ReallocAsyncCtx8 + 20 | 0; //@line 2451
     HEAP32[$615 >> 2] = $16; //@line 2452
     $616 = $ReallocAsyncCtx8 + 24 | 0; //@line 2453
     HEAP32[$616 >> 2] = $10; //@line 2454
     $617 = $ReallocAsyncCtx8 + 28 | 0; //@line 2455
     HEAP32[$617 >> 2] = $126; //@line 2456
     $618 = $ReallocAsyncCtx8 + 32 | 0; //@line 2457
     HEAP32[$618 >> 2] = $135; //@line 2458
     $619 = $ReallocAsyncCtx8 + 36 | 0; //@line 2459
     HEAP32[$619 >> 2] = $18; //@line 2460
     $620 = $ReallocAsyncCtx8 + 40 | 0; //@line 2461
     HEAP32[$620 >> 2] = $20; //@line 2462
     $621 = $ReallocAsyncCtx8 + 44 | 0; //@line 2463
     HEAP32[$621 >> 2] = $22; //@line 2464
     $622 = $ReallocAsyncCtx8 + 48 | 0; //@line 2465
     HEAP32[$622 >> 2] = $24; //@line 2466
     $623 = $ReallocAsyncCtx8 + 52 | 0; //@line 2467
     HEAP32[$623 >> 2] = $26; //@line 2468
     $624 = $ReallocAsyncCtx8 + 56 | 0; //@line 2469
     HEAP32[$624 >> 2] = $137; //@line 2470
     $625 = $ReallocAsyncCtx8 + 60 | 0; //@line 2471
     HEAP32[$625 >> 2] = $28; //@line 2472
     $626 = $ReallocAsyncCtx8 + 64 | 0; //@line 2473
     HEAP32[$626 >> 2] = $32; //@line 2474
     $627 = $ReallocAsyncCtx8 + 68 | 0; //@line 2475
     HEAP32[$627 >> 2] = $34; //@line 2476
     $628 = $ReallocAsyncCtx8 + 72 | 0; //@line 2477
     HEAP32[$628 >> 2] = $36; //@line 2478
     $629 = $ReallocAsyncCtx8 + 76 | 0; //@line 2479
     HEAP32[$629 >> 2] = $139; //@line 2480
     $630 = $ReallocAsyncCtx8 + 80 | 0; //@line 2481
     HEAP32[$630 >> 2] = $38; //@line 2482
     $631 = $ReallocAsyncCtx8 + 84 | 0; //@line 2483
     HEAP32[$631 >> 2] = $139; //@line 2484
     $632 = $ReallocAsyncCtx8 + 88 | 0; //@line 2485
     HEAP32[$632 >> 2] = $42; //@line 2486
     $633 = $ReallocAsyncCtx8 + 92 | 0; //@line 2487
     HEAP32[$633 >> 2] = $44; //@line 2488
     $634 = $ReallocAsyncCtx8 + 96 | 0; //@line 2489
     HEAP32[$634 >> 2] = $40; //@line 2490
     $635 = $ReallocAsyncCtx8 + 100 | 0; //@line 2491
     HEAP32[$635 >> 2] = $48; //@line 2492
     $636 = $ReallocAsyncCtx8 + 104 | 0; //@line 2493
     HEAP32[$636 >> 2] = $46; //@line 2494
     $637 = $ReallocAsyncCtx8 + 108 | 0; //@line 2495
     HEAP32[$637 >> 2] = $140; //@line 2496
     $638 = $ReallocAsyncCtx8 + 112 | 0; //@line 2497
     HEAP32[$638 >> 2] = $50; //@line 2498
     $639 = $ReallocAsyncCtx8 + 116 | 0; //@line 2499
     HEAP32[$639 >> 2] = $52; //@line 2500
     $640 = $ReallocAsyncCtx8 + 120 | 0; //@line 2501
     HEAP32[$640 >> 2] = $54; //@line 2502
     $641 = $ReallocAsyncCtx8 + 124 | 0; //@line 2503
     HEAP32[$641 >> 2] = $56; //@line 2504
     $642 = $ReallocAsyncCtx8 + 128 | 0; //@line 2505
     HEAP32[$642 >> 2] = $60; //@line 2506
     $643 = $ReallocAsyncCtx8 + 132 | 0; //@line 2507
     HEAP32[$643 >> 2] = $62; //@line 2508
     $644 = $ReallocAsyncCtx8 + 136 | 0; //@line 2509
     HEAP32[$644 >> 2] = $64; //@line 2510
     $645 = $ReallocAsyncCtx8 + 140 | 0; //@line 2511
     HEAP32[$645 >> 2] = $68; //@line 2512
     $646 = $ReallocAsyncCtx8 + 144 | 0; //@line 2513
     HEAP32[$646 >> 2] = $66; //@line 2514
     $647 = $ReallocAsyncCtx8 + 148 | 0; //@line 2515
     HEAP32[$647 >> 2] = $70; //@line 2516
     $648 = $ReallocAsyncCtx8 + 152 | 0; //@line 2517
     HEAP32[$648 >> 2] = $72; //@line 2518
     $649 = $ReallocAsyncCtx8 + 156 | 0; //@line 2519
     HEAP32[$649 >> 2] = $74; //@line 2520
     $650 = $ReallocAsyncCtx8 + 160 | 0; //@line 2521
     HEAP32[$650 >> 2] = $141; //@line 2522
     $651 = $ReallocAsyncCtx8 + 164 | 0; //@line 2523
     HEAP32[$651 >> 2] = $76; //@line 2524
     $652 = $ReallocAsyncCtx8 + 168 | 0; //@line 2525
     HEAP32[$652 >> 2] = $78; //@line 2526
     $653 = $ReallocAsyncCtx8 + 172 | 0; //@line 2527
     HEAP32[$653 >> 2] = $80; //@line 2528
     $654 = $ReallocAsyncCtx8 + 176 | 0; //@line 2529
     HEAP32[$654 >> 2] = $82; //@line 2530
     $655 = $ReallocAsyncCtx8 + 180 | 0; //@line 2531
     HEAP32[$655 >> 2] = $84; //@line 2532
     $656 = $ReallocAsyncCtx8 + 184 | 0; //@line 2533
     HEAP32[$656 >> 2] = $86; //@line 2534
     $657 = $ReallocAsyncCtx8 + 188 | 0; //@line 2535
     HEAP32[$657 >> 2] = $88; //@line 2536
     $658 = $ReallocAsyncCtx8 + 192 | 0; //@line 2537
     HEAP32[$658 >> 2] = $90; //@line 2538
     $659 = $ReallocAsyncCtx8 + 196 | 0; //@line 2539
     HEAP32[$659 >> 2] = $92; //@line 2540
     $660 = $ReallocAsyncCtx8 + 200 | 0; //@line 2541
     HEAP32[$660 >> 2] = $94; //@line 2542
     $661 = $ReallocAsyncCtx8 + 204 | 0; //@line 2543
     HEAP32[$661 >> 2] = $96; //@line 2544
     $662 = $ReallocAsyncCtx8 + 208 | 0; //@line 2545
     HEAP32[$662 >> 2] = $98; //@line 2546
     $663 = $ReallocAsyncCtx8 + 212 | 0; //@line 2547
     HEAP32[$663 >> 2] = $100; //@line 2548
     $664 = $ReallocAsyncCtx8 + 216 | 0; //@line 2549
     HEAP32[$664 >> 2] = $102; //@line 2550
     $665 = $ReallocAsyncCtx8 + 220 | 0; //@line 2551
     HEAP32[$665 >> 2] = $104; //@line 2552
     $666 = $ReallocAsyncCtx8 + 224 | 0; //@line 2553
     HEAP32[$666 >> 2] = $106; //@line 2554
     $667 = $ReallocAsyncCtx8 + 228 | 0; //@line 2555
     HEAP32[$667 >> 2] = $82; //@line 2556
     $668 = $ReallocAsyncCtx8 + 232 | 0; //@line 2557
     HEAP32[$668 >> 2] = $110; //@line 2558
     $669 = $ReallocAsyncCtx8 + 236 | 0; //@line 2559
     HEAP32[$669 >> 2] = $116; //@line 2560
     $670 = $ReallocAsyncCtx8 + 240 | 0; //@line 2561
     HEAP32[$670 >> 2] = $114; //@line 2562
     $671 = $ReallocAsyncCtx8 + 244 | 0; //@line 2563
     HEAP32[$671 >> 2] = $$0208$i; //@line 2564
     $672 = $ReallocAsyncCtx8 + 248 | 0; //@line 2565
     HEAP32[$672 >> 2] = $118; //@line 2566
     $673 = $ReallocAsyncCtx8 + 252 | 0; //@line 2567
     HEAP32[$673 >> 2] = $120; //@line 2568
     $674 = $ReallocAsyncCtx8 + 256 | 0; //@line 2569
     HEAP32[$674 >> 2] = $122; //@line 2570
     $675 = $ReallocAsyncCtx8 + 260 | 0; //@line 2571
     HEAP32[$675 >> 2] = $124; //@line 2572
     $676 = $ReallocAsyncCtx8 + 264 | 0; //@line 2573
     HEAP32[$676 >> 2] = $8; //@line 2574
     sp = STACKTOP; //@line 2575
     return;
    }
   case 64:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 2580
     $678 = _sn_coap_parser_options_parse_multiple_options($106, $82, $182, $140, $141, 11, $$1202$i) | 0; //@line 2581
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 2584
      $679 = $ReallocAsyncCtx7 + 4 | 0; //@line 2585
      HEAP32[$679 >> 2] = $2; //@line 2586
      $680 = $ReallocAsyncCtx7 + 8 | 0; //@line 2587
      HEAP32[$680 >> 2] = $4; //@line 2588
      $681 = $ReallocAsyncCtx7 + 12 | 0; //@line 2589
      HEAP32[$681 >> 2] = $136; //@line 2590
      $682 = $ReallocAsyncCtx7 + 16 | 0; //@line 2591
      HEAP32[$682 >> 2] = $6; //@line 2592
      $683 = $ReallocAsyncCtx7 + 20 | 0; //@line 2593
      HEAP32[$683 >> 2] = $16; //@line 2594
      $684 = $ReallocAsyncCtx7 + 24 | 0; //@line 2595
      HEAP32[$684 >> 2] = $10; //@line 2596
      $685 = $ReallocAsyncCtx7 + 28 | 0; //@line 2597
      HEAP32[$685 >> 2] = $126; //@line 2598
      $686 = $ReallocAsyncCtx7 + 32 | 0; //@line 2599
      HEAP32[$686 >> 2] = $135; //@line 2600
      $687 = $ReallocAsyncCtx7 + 36 | 0; //@line 2601
      HEAP32[$687 >> 2] = $18; //@line 2602
      $688 = $ReallocAsyncCtx7 + 40 | 0; //@line 2603
      HEAP32[$688 >> 2] = $20; //@line 2604
      $689 = $ReallocAsyncCtx7 + 44 | 0; //@line 2605
      HEAP32[$689 >> 2] = $22; //@line 2606
      $690 = $ReallocAsyncCtx7 + 48 | 0; //@line 2607
      HEAP32[$690 >> 2] = $24; //@line 2608
      $691 = $ReallocAsyncCtx7 + 52 | 0; //@line 2609
      HEAP32[$691 >> 2] = $26; //@line 2610
      $692 = $ReallocAsyncCtx7 + 56 | 0; //@line 2611
      HEAP32[$692 >> 2] = $137; //@line 2612
      $693 = $ReallocAsyncCtx7 + 60 | 0; //@line 2613
      HEAP32[$693 >> 2] = $28; //@line 2614
      $694 = $ReallocAsyncCtx7 + 64 | 0; //@line 2615
      HEAP32[$694 >> 2] = $32; //@line 2616
      $695 = $ReallocAsyncCtx7 + 68 | 0; //@line 2617
      HEAP32[$695 >> 2] = $34; //@line 2618
      $696 = $ReallocAsyncCtx7 + 72 | 0; //@line 2619
      HEAP32[$696 >> 2] = $36; //@line 2620
      $697 = $ReallocAsyncCtx7 + 76 | 0; //@line 2621
      HEAP32[$697 >> 2] = $139; //@line 2622
      $698 = $ReallocAsyncCtx7 + 80 | 0; //@line 2623
      HEAP32[$698 >> 2] = $38; //@line 2624
      $699 = $ReallocAsyncCtx7 + 84 | 0; //@line 2625
      HEAP32[$699 >> 2] = $139; //@line 2626
      $700 = $ReallocAsyncCtx7 + 88 | 0; //@line 2627
      HEAP32[$700 >> 2] = $42; //@line 2628
      $701 = $ReallocAsyncCtx7 + 92 | 0; //@line 2629
      HEAP32[$701 >> 2] = $44; //@line 2630
      $702 = $ReallocAsyncCtx7 + 96 | 0; //@line 2631
      HEAP32[$702 >> 2] = $40; //@line 2632
      $703 = $ReallocAsyncCtx7 + 100 | 0; //@line 2633
      HEAP32[$703 >> 2] = $48; //@line 2634
      $704 = $ReallocAsyncCtx7 + 104 | 0; //@line 2635
      HEAP32[$704 >> 2] = $46; //@line 2636
      $705 = $ReallocAsyncCtx7 + 108 | 0; //@line 2637
      HEAP32[$705 >> 2] = $140; //@line 2638
      $706 = $ReallocAsyncCtx7 + 112 | 0; //@line 2639
      HEAP32[$706 >> 2] = $50; //@line 2640
      $707 = $ReallocAsyncCtx7 + 116 | 0; //@line 2641
      HEAP32[$707 >> 2] = $52; //@line 2642
      $708 = $ReallocAsyncCtx7 + 120 | 0; //@line 2643
      HEAP32[$708 >> 2] = $54; //@line 2644
      $709 = $ReallocAsyncCtx7 + 124 | 0; //@line 2645
      HEAP32[$709 >> 2] = $56; //@line 2646
      $710 = $ReallocAsyncCtx7 + 128 | 0; //@line 2647
      HEAP32[$710 >> 2] = $60; //@line 2648
      $711 = $ReallocAsyncCtx7 + 132 | 0; //@line 2649
      HEAP32[$711 >> 2] = $62; //@line 2650
      $712 = $ReallocAsyncCtx7 + 136 | 0; //@line 2651
      HEAP32[$712 >> 2] = $64; //@line 2652
      $713 = $ReallocAsyncCtx7 + 140 | 0; //@line 2653
      HEAP32[$713 >> 2] = $68; //@line 2654
      $714 = $ReallocAsyncCtx7 + 144 | 0; //@line 2655
      HEAP32[$714 >> 2] = $66; //@line 2656
      $715 = $ReallocAsyncCtx7 + 148 | 0; //@line 2657
      HEAP32[$715 >> 2] = $70; //@line 2658
      $716 = $ReallocAsyncCtx7 + 152 | 0; //@line 2659
      HEAP32[$716 >> 2] = $72; //@line 2660
      $717 = $ReallocAsyncCtx7 + 156 | 0; //@line 2661
      HEAP32[$717 >> 2] = $74; //@line 2662
      $718 = $ReallocAsyncCtx7 + 160 | 0; //@line 2663
      HEAP32[$718 >> 2] = $141; //@line 2664
      $719 = $ReallocAsyncCtx7 + 164 | 0; //@line 2665
      HEAP32[$719 >> 2] = $76; //@line 2666
      $720 = $ReallocAsyncCtx7 + 168 | 0; //@line 2667
      HEAP32[$720 >> 2] = $78; //@line 2668
      $721 = $ReallocAsyncCtx7 + 172 | 0; //@line 2669
      HEAP32[$721 >> 2] = $80; //@line 2670
      $722 = $ReallocAsyncCtx7 + 176 | 0; //@line 2671
      HEAP32[$722 >> 2] = $82; //@line 2672
      $723 = $ReallocAsyncCtx7 + 180 | 0; //@line 2673
      HEAP32[$723 >> 2] = $84; //@line 2674
      $724 = $ReallocAsyncCtx7 + 184 | 0; //@line 2675
      HEAP32[$724 >> 2] = $86; //@line 2676
      $725 = $ReallocAsyncCtx7 + 188 | 0; //@line 2677
      HEAP32[$725 >> 2] = $88; //@line 2678
      $726 = $ReallocAsyncCtx7 + 192 | 0; //@line 2679
      HEAP32[$726 >> 2] = $90; //@line 2680
      $727 = $ReallocAsyncCtx7 + 196 | 0; //@line 2681
      HEAP32[$727 >> 2] = $92; //@line 2682
      $728 = $ReallocAsyncCtx7 + 200 | 0; //@line 2683
      HEAP32[$728 >> 2] = $94; //@line 2684
      $729 = $ReallocAsyncCtx7 + 204 | 0; //@line 2685
      HEAP32[$729 >> 2] = $96; //@line 2686
      $730 = $ReallocAsyncCtx7 + 208 | 0; //@line 2687
      HEAP32[$730 >> 2] = $98; //@line 2688
      $731 = $ReallocAsyncCtx7 + 212 | 0; //@line 2689
      HEAP32[$731 >> 2] = $100; //@line 2690
      $732 = $ReallocAsyncCtx7 + 216 | 0; //@line 2691
      HEAP32[$732 >> 2] = $102; //@line 2692
      $733 = $ReallocAsyncCtx7 + 220 | 0; //@line 2693
      HEAP32[$733 >> 2] = $104; //@line 2694
      $734 = $ReallocAsyncCtx7 + 224 | 0; //@line 2695
      HEAP32[$734 >> 2] = $106; //@line 2696
      $735 = $ReallocAsyncCtx7 + 228 | 0; //@line 2697
      HEAP32[$735 >> 2] = $82; //@line 2698
      $736 = $ReallocAsyncCtx7 + 232 | 0; //@line 2699
      HEAP32[$736 >> 2] = $110; //@line 2700
      $737 = $ReallocAsyncCtx7 + 236 | 0; //@line 2701
      HEAP32[$737 >> 2] = $116; //@line 2702
      $738 = $ReallocAsyncCtx7 + 240 | 0; //@line 2703
      HEAP32[$738 >> 2] = $114; //@line 2704
      $739 = $ReallocAsyncCtx7 + 244 | 0; //@line 2705
      HEAP32[$739 >> 2] = $$0208$i; //@line 2706
      $740 = $ReallocAsyncCtx7 + 248 | 0; //@line 2707
      HEAP32[$740 >> 2] = $118; //@line 2708
      $741 = $ReallocAsyncCtx7 + 252 | 0; //@line 2709
      HEAP32[$741 >> 2] = $120; //@line 2710
      $742 = $ReallocAsyncCtx7 + 256 | 0; //@line 2711
      HEAP32[$742 >> 2] = $122; //@line 2712
      $743 = $ReallocAsyncCtx7 + 260 | 0; //@line 2713
      HEAP32[$743 >> 2] = $124; //@line 2714
      $744 = $ReallocAsyncCtx7 + 264 | 0; //@line 2715
      HEAP32[$744 >> 2] = $8; //@line 2716
      sp = STACKTOP; //@line 2717
      return;
     }
     HEAP8[___async_retval >> 0] = $678; //@line 2721
     ___async_unwind = 0; //@line 2722
     HEAP32[$ReallocAsyncCtx7 >> 2] = 67; //@line 2723
     $679 = $ReallocAsyncCtx7 + 4 | 0; //@line 2724
     HEAP32[$679 >> 2] = $2; //@line 2725
     $680 = $ReallocAsyncCtx7 + 8 | 0; //@line 2726
     HEAP32[$680 >> 2] = $4; //@line 2727
     $681 = $ReallocAsyncCtx7 + 12 | 0; //@line 2728
     HEAP32[$681 >> 2] = $136; //@line 2729
     $682 = $ReallocAsyncCtx7 + 16 | 0; //@line 2730
     HEAP32[$682 >> 2] = $6; //@line 2731
     $683 = $ReallocAsyncCtx7 + 20 | 0; //@line 2732
     HEAP32[$683 >> 2] = $16; //@line 2733
     $684 = $ReallocAsyncCtx7 + 24 | 0; //@line 2734
     HEAP32[$684 >> 2] = $10; //@line 2735
     $685 = $ReallocAsyncCtx7 + 28 | 0; //@line 2736
     HEAP32[$685 >> 2] = $126; //@line 2737
     $686 = $ReallocAsyncCtx7 + 32 | 0; //@line 2738
     HEAP32[$686 >> 2] = $135; //@line 2739
     $687 = $ReallocAsyncCtx7 + 36 | 0; //@line 2740
     HEAP32[$687 >> 2] = $18; //@line 2741
     $688 = $ReallocAsyncCtx7 + 40 | 0; //@line 2742
     HEAP32[$688 >> 2] = $20; //@line 2743
     $689 = $ReallocAsyncCtx7 + 44 | 0; //@line 2744
     HEAP32[$689 >> 2] = $22; //@line 2745
     $690 = $ReallocAsyncCtx7 + 48 | 0; //@line 2746
     HEAP32[$690 >> 2] = $24; //@line 2747
     $691 = $ReallocAsyncCtx7 + 52 | 0; //@line 2748
     HEAP32[$691 >> 2] = $26; //@line 2749
     $692 = $ReallocAsyncCtx7 + 56 | 0; //@line 2750
     HEAP32[$692 >> 2] = $137; //@line 2751
     $693 = $ReallocAsyncCtx7 + 60 | 0; //@line 2752
     HEAP32[$693 >> 2] = $28; //@line 2753
     $694 = $ReallocAsyncCtx7 + 64 | 0; //@line 2754
     HEAP32[$694 >> 2] = $32; //@line 2755
     $695 = $ReallocAsyncCtx7 + 68 | 0; //@line 2756
     HEAP32[$695 >> 2] = $34; //@line 2757
     $696 = $ReallocAsyncCtx7 + 72 | 0; //@line 2758
     HEAP32[$696 >> 2] = $36; //@line 2759
     $697 = $ReallocAsyncCtx7 + 76 | 0; //@line 2760
     HEAP32[$697 >> 2] = $139; //@line 2761
     $698 = $ReallocAsyncCtx7 + 80 | 0; //@line 2762
     HEAP32[$698 >> 2] = $38; //@line 2763
     $699 = $ReallocAsyncCtx7 + 84 | 0; //@line 2764
     HEAP32[$699 >> 2] = $139; //@line 2765
     $700 = $ReallocAsyncCtx7 + 88 | 0; //@line 2766
     HEAP32[$700 >> 2] = $42; //@line 2767
     $701 = $ReallocAsyncCtx7 + 92 | 0; //@line 2768
     HEAP32[$701 >> 2] = $44; //@line 2769
     $702 = $ReallocAsyncCtx7 + 96 | 0; //@line 2770
     HEAP32[$702 >> 2] = $40; //@line 2771
     $703 = $ReallocAsyncCtx7 + 100 | 0; //@line 2772
     HEAP32[$703 >> 2] = $48; //@line 2773
     $704 = $ReallocAsyncCtx7 + 104 | 0; //@line 2774
     HEAP32[$704 >> 2] = $46; //@line 2775
     $705 = $ReallocAsyncCtx7 + 108 | 0; //@line 2776
     HEAP32[$705 >> 2] = $140; //@line 2777
     $706 = $ReallocAsyncCtx7 + 112 | 0; //@line 2778
     HEAP32[$706 >> 2] = $50; //@line 2779
     $707 = $ReallocAsyncCtx7 + 116 | 0; //@line 2780
     HEAP32[$707 >> 2] = $52; //@line 2781
     $708 = $ReallocAsyncCtx7 + 120 | 0; //@line 2782
     HEAP32[$708 >> 2] = $54; //@line 2783
     $709 = $ReallocAsyncCtx7 + 124 | 0; //@line 2784
     HEAP32[$709 >> 2] = $56; //@line 2785
     $710 = $ReallocAsyncCtx7 + 128 | 0; //@line 2786
     HEAP32[$710 >> 2] = $60; //@line 2787
     $711 = $ReallocAsyncCtx7 + 132 | 0; //@line 2788
     HEAP32[$711 >> 2] = $62; //@line 2789
     $712 = $ReallocAsyncCtx7 + 136 | 0; //@line 2790
     HEAP32[$712 >> 2] = $64; //@line 2791
     $713 = $ReallocAsyncCtx7 + 140 | 0; //@line 2792
     HEAP32[$713 >> 2] = $68; //@line 2793
     $714 = $ReallocAsyncCtx7 + 144 | 0; //@line 2794
     HEAP32[$714 >> 2] = $66; //@line 2795
     $715 = $ReallocAsyncCtx7 + 148 | 0; //@line 2796
     HEAP32[$715 >> 2] = $70; //@line 2797
     $716 = $ReallocAsyncCtx7 + 152 | 0; //@line 2798
     HEAP32[$716 >> 2] = $72; //@line 2799
     $717 = $ReallocAsyncCtx7 + 156 | 0; //@line 2800
     HEAP32[$717 >> 2] = $74; //@line 2801
     $718 = $ReallocAsyncCtx7 + 160 | 0; //@line 2802
     HEAP32[$718 >> 2] = $141; //@line 2803
     $719 = $ReallocAsyncCtx7 + 164 | 0; //@line 2804
     HEAP32[$719 >> 2] = $76; //@line 2805
     $720 = $ReallocAsyncCtx7 + 168 | 0; //@line 2806
     HEAP32[$720 >> 2] = $78; //@line 2807
     $721 = $ReallocAsyncCtx7 + 172 | 0; //@line 2808
     HEAP32[$721 >> 2] = $80; //@line 2809
     $722 = $ReallocAsyncCtx7 + 176 | 0; //@line 2810
     HEAP32[$722 >> 2] = $82; //@line 2811
     $723 = $ReallocAsyncCtx7 + 180 | 0; //@line 2812
     HEAP32[$723 >> 2] = $84; //@line 2813
     $724 = $ReallocAsyncCtx7 + 184 | 0; //@line 2814
     HEAP32[$724 >> 2] = $86; //@line 2815
     $725 = $ReallocAsyncCtx7 + 188 | 0; //@line 2816
     HEAP32[$725 >> 2] = $88; //@line 2817
     $726 = $ReallocAsyncCtx7 + 192 | 0; //@line 2818
     HEAP32[$726 >> 2] = $90; //@line 2819
     $727 = $ReallocAsyncCtx7 + 196 | 0; //@line 2820
     HEAP32[$727 >> 2] = $92; //@line 2821
     $728 = $ReallocAsyncCtx7 + 200 | 0; //@line 2822
     HEAP32[$728 >> 2] = $94; //@line 2823
     $729 = $ReallocAsyncCtx7 + 204 | 0; //@line 2824
     HEAP32[$729 >> 2] = $96; //@line 2825
     $730 = $ReallocAsyncCtx7 + 208 | 0; //@line 2826
     HEAP32[$730 >> 2] = $98; //@line 2827
     $731 = $ReallocAsyncCtx7 + 212 | 0; //@line 2828
     HEAP32[$731 >> 2] = $100; //@line 2829
     $732 = $ReallocAsyncCtx7 + 216 | 0; //@line 2830
     HEAP32[$732 >> 2] = $102; //@line 2831
     $733 = $ReallocAsyncCtx7 + 220 | 0; //@line 2832
     HEAP32[$733 >> 2] = $104; //@line 2833
     $734 = $ReallocAsyncCtx7 + 224 | 0; //@line 2834
     HEAP32[$734 >> 2] = $106; //@line 2835
     $735 = $ReallocAsyncCtx7 + 228 | 0; //@line 2836
     HEAP32[$735 >> 2] = $82; //@line 2837
     $736 = $ReallocAsyncCtx7 + 232 | 0; //@line 2838
     HEAP32[$736 >> 2] = $110; //@line 2839
     $737 = $ReallocAsyncCtx7 + 236 | 0; //@line 2840
     HEAP32[$737 >> 2] = $116; //@line 2841
     $738 = $ReallocAsyncCtx7 + 240 | 0; //@line 2842
     HEAP32[$738 >> 2] = $114; //@line 2843
     $739 = $ReallocAsyncCtx7 + 244 | 0; //@line 2844
     HEAP32[$739 >> 2] = $$0208$i; //@line 2845
     $740 = $ReallocAsyncCtx7 + 248 | 0; //@line 2846
     HEAP32[$740 >> 2] = $118; //@line 2847
     $741 = $ReallocAsyncCtx7 + 252 | 0; //@line 2848
     HEAP32[$741 >> 2] = $120; //@line 2849
     $742 = $ReallocAsyncCtx7 + 256 | 0; //@line 2850
     HEAP32[$742 >> 2] = $122; //@line 2851
     $743 = $ReallocAsyncCtx7 + 260 | 0; //@line 2852
     HEAP32[$743 >> 2] = $124; //@line 2853
     $744 = $ReallocAsyncCtx7 + 264 | 0; //@line 2854
     HEAP32[$744 >> 2] = $8; //@line 2855
     sp = STACKTOP; //@line 2856
     return;
    }
   case 69:
    {
     _mbed_tracef(2, 3844, 5067, $64); //@line 2861
     break L2;
     break;
    }
   case 73:
    {
     $762 = HEAP32[$139 >> 2] | 0; //@line 2866
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 2869
     $765 = _sn_coap_parser_options_parse_multiple_options($106, $82, $182, $762 + 64 | 0, $762 + 10 | 0, 15, $$1202$i) | 0; //@line 2870
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 2873
      $766 = $ReallocAsyncCtx6 + 4 | 0; //@line 2874
      HEAP32[$766 >> 2] = $2; //@line 2875
      $767 = $ReallocAsyncCtx6 + 8 | 0; //@line 2876
      HEAP32[$767 >> 2] = $4; //@line 2877
      $768 = $ReallocAsyncCtx6 + 12 | 0; //@line 2878
      HEAP32[$768 >> 2] = $136; //@line 2879
      $769 = $ReallocAsyncCtx6 + 16 | 0; //@line 2880
      HEAP32[$769 >> 2] = $6; //@line 2881
      $770 = $ReallocAsyncCtx6 + 20 | 0; //@line 2882
      HEAP32[$770 >> 2] = $16; //@line 2883
      $771 = $ReallocAsyncCtx6 + 24 | 0; //@line 2884
      HEAP32[$771 >> 2] = $10; //@line 2885
      $772 = $ReallocAsyncCtx6 + 28 | 0; //@line 2886
      HEAP32[$772 >> 2] = $126; //@line 2887
      $773 = $ReallocAsyncCtx6 + 32 | 0; //@line 2888
      HEAP32[$773 >> 2] = $135; //@line 2889
      $774 = $ReallocAsyncCtx6 + 36 | 0; //@line 2890
      HEAP32[$774 >> 2] = $18; //@line 2891
      $775 = $ReallocAsyncCtx6 + 40 | 0; //@line 2892
      HEAP32[$775 >> 2] = $20; //@line 2893
      $776 = $ReallocAsyncCtx6 + 44 | 0; //@line 2894
      HEAP32[$776 >> 2] = $22; //@line 2895
      $777 = $ReallocAsyncCtx6 + 48 | 0; //@line 2896
      HEAP32[$777 >> 2] = $24; //@line 2897
      $778 = $ReallocAsyncCtx6 + 52 | 0; //@line 2898
      HEAP32[$778 >> 2] = $26; //@line 2899
      $779 = $ReallocAsyncCtx6 + 56 | 0; //@line 2900
      HEAP32[$779 >> 2] = $137; //@line 2901
      $780 = $ReallocAsyncCtx6 + 60 | 0; //@line 2902
      HEAP32[$780 >> 2] = $28; //@line 2903
      $781 = $ReallocAsyncCtx6 + 64 | 0; //@line 2904
      HEAP32[$781 >> 2] = $32; //@line 2905
      $782 = $ReallocAsyncCtx6 + 68 | 0; //@line 2906
      HEAP32[$782 >> 2] = $34; //@line 2907
      $783 = $ReallocAsyncCtx6 + 72 | 0; //@line 2908
      HEAP32[$783 >> 2] = $36; //@line 2909
      $784 = $ReallocAsyncCtx6 + 76 | 0; //@line 2910
      HEAP32[$784 >> 2] = $139; //@line 2911
      $785 = $ReallocAsyncCtx6 + 80 | 0; //@line 2912
      HEAP32[$785 >> 2] = $38; //@line 2913
      $786 = $ReallocAsyncCtx6 + 84 | 0; //@line 2914
      HEAP32[$786 >> 2] = $139; //@line 2915
      $787 = $ReallocAsyncCtx6 + 88 | 0; //@line 2916
      HEAP32[$787 >> 2] = $42; //@line 2917
      $788 = $ReallocAsyncCtx6 + 92 | 0; //@line 2918
      HEAP32[$788 >> 2] = $44; //@line 2919
      $789 = $ReallocAsyncCtx6 + 96 | 0; //@line 2920
      HEAP32[$789 >> 2] = $40; //@line 2921
      $790 = $ReallocAsyncCtx6 + 100 | 0; //@line 2922
      HEAP32[$790 >> 2] = $48; //@line 2923
      $791 = $ReallocAsyncCtx6 + 104 | 0; //@line 2924
      HEAP32[$791 >> 2] = $46; //@line 2925
      $792 = $ReallocAsyncCtx6 + 108 | 0; //@line 2926
      HEAP32[$792 >> 2] = $140; //@line 2927
      $793 = $ReallocAsyncCtx6 + 112 | 0; //@line 2928
      HEAP32[$793 >> 2] = $50; //@line 2929
      $794 = $ReallocAsyncCtx6 + 116 | 0; //@line 2930
      HEAP32[$794 >> 2] = $52; //@line 2931
      $795 = $ReallocAsyncCtx6 + 120 | 0; //@line 2932
      HEAP32[$795 >> 2] = $54; //@line 2933
      $796 = $ReallocAsyncCtx6 + 124 | 0; //@line 2934
      HEAP32[$796 >> 2] = $56; //@line 2935
      $797 = $ReallocAsyncCtx6 + 128 | 0; //@line 2936
      HEAP32[$797 >> 2] = $60; //@line 2937
      $798 = $ReallocAsyncCtx6 + 132 | 0; //@line 2938
      HEAP32[$798 >> 2] = $62; //@line 2939
      $799 = $ReallocAsyncCtx6 + 136 | 0; //@line 2940
      HEAP32[$799 >> 2] = $64; //@line 2941
      $800 = $ReallocAsyncCtx6 + 140 | 0; //@line 2942
      HEAP32[$800 >> 2] = $68; //@line 2943
      $801 = $ReallocAsyncCtx6 + 144 | 0; //@line 2944
      HEAP32[$801 >> 2] = $66; //@line 2945
      $802 = $ReallocAsyncCtx6 + 148 | 0; //@line 2946
      HEAP32[$802 >> 2] = $70; //@line 2947
      $803 = $ReallocAsyncCtx6 + 152 | 0; //@line 2948
      HEAP32[$803 >> 2] = $72; //@line 2949
      $804 = $ReallocAsyncCtx6 + 156 | 0; //@line 2950
      HEAP32[$804 >> 2] = $74; //@line 2951
      $805 = $ReallocAsyncCtx6 + 160 | 0; //@line 2952
      HEAP32[$805 >> 2] = $141; //@line 2953
      $806 = $ReallocAsyncCtx6 + 164 | 0; //@line 2954
      HEAP32[$806 >> 2] = $76; //@line 2955
      $807 = $ReallocAsyncCtx6 + 168 | 0; //@line 2956
      HEAP32[$807 >> 2] = $78; //@line 2957
      $808 = $ReallocAsyncCtx6 + 172 | 0; //@line 2958
      HEAP32[$808 >> 2] = $80; //@line 2959
      $809 = $ReallocAsyncCtx6 + 176 | 0; //@line 2960
      HEAP32[$809 >> 2] = $82; //@line 2961
      $810 = $ReallocAsyncCtx6 + 180 | 0; //@line 2962
      HEAP32[$810 >> 2] = $84; //@line 2963
      $811 = $ReallocAsyncCtx6 + 184 | 0; //@line 2964
      HEAP32[$811 >> 2] = $86; //@line 2965
      $812 = $ReallocAsyncCtx6 + 188 | 0; //@line 2966
      HEAP32[$812 >> 2] = $88; //@line 2967
      $813 = $ReallocAsyncCtx6 + 192 | 0; //@line 2968
      HEAP32[$813 >> 2] = $90; //@line 2969
      $814 = $ReallocAsyncCtx6 + 196 | 0; //@line 2970
      HEAP32[$814 >> 2] = $92; //@line 2971
      $815 = $ReallocAsyncCtx6 + 200 | 0; //@line 2972
      HEAP32[$815 >> 2] = $94; //@line 2973
      $816 = $ReallocAsyncCtx6 + 204 | 0; //@line 2974
      HEAP32[$816 >> 2] = $96; //@line 2975
      $817 = $ReallocAsyncCtx6 + 208 | 0; //@line 2976
      HEAP32[$817 >> 2] = $98; //@line 2977
      $818 = $ReallocAsyncCtx6 + 212 | 0; //@line 2978
      HEAP32[$818 >> 2] = $100; //@line 2979
      $819 = $ReallocAsyncCtx6 + 216 | 0; //@line 2980
      HEAP32[$819 >> 2] = $102; //@line 2981
      $820 = $ReallocAsyncCtx6 + 220 | 0; //@line 2982
      HEAP32[$820 >> 2] = $104; //@line 2983
      $821 = $ReallocAsyncCtx6 + 224 | 0; //@line 2984
      HEAP32[$821 >> 2] = $106; //@line 2985
      $822 = $ReallocAsyncCtx6 + 228 | 0; //@line 2986
      HEAP32[$822 >> 2] = $82; //@line 2987
      $823 = $ReallocAsyncCtx6 + 232 | 0; //@line 2988
      HEAP32[$823 >> 2] = $110; //@line 2989
      $824 = $ReallocAsyncCtx6 + 236 | 0; //@line 2990
      HEAP32[$824 >> 2] = $116; //@line 2991
      $825 = $ReallocAsyncCtx6 + 240 | 0; //@line 2992
      HEAP32[$825 >> 2] = $114; //@line 2993
      $826 = $ReallocAsyncCtx6 + 244 | 0; //@line 2994
      HEAP32[$826 >> 2] = $$0208$i; //@line 2995
      $827 = $ReallocAsyncCtx6 + 248 | 0; //@line 2996
      HEAP32[$827 >> 2] = $118; //@line 2997
      $828 = $ReallocAsyncCtx6 + 252 | 0; //@line 2998
      HEAP32[$828 >> 2] = $120; //@line 2999
      $829 = $ReallocAsyncCtx6 + 256 | 0; //@line 3000
      HEAP32[$829 >> 2] = $122; //@line 3001
      $830 = $ReallocAsyncCtx6 + 260 | 0; //@line 3002
      HEAP32[$830 >> 2] = $124; //@line 3003
      $831 = $ReallocAsyncCtx6 + 264 | 0; //@line 3004
      HEAP32[$831 >> 2] = $8; //@line 3005
      sp = STACKTOP; //@line 3006
      return;
     }
     HEAP8[___async_retval >> 0] = $765; //@line 3010
     ___async_unwind = 0; //@line 3011
     HEAP32[$ReallocAsyncCtx6 >> 2] = 68; //@line 3012
     $766 = $ReallocAsyncCtx6 + 4 | 0; //@line 3013
     HEAP32[$766 >> 2] = $2; //@line 3014
     $767 = $ReallocAsyncCtx6 + 8 | 0; //@line 3015
     HEAP32[$767 >> 2] = $4; //@line 3016
     $768 = $ReallocAsyncCtx6 + 12 | 0; //@line 3017
     HEAP32[$768 >> 2] = $136; //@line 3018
     $769 = $ReallocAsyncCtx6 + 16 | 0; //@line 3019
     HEAP32[$769 >> 2] = $6; //@line 3020
     $770 = $ReallocAsyncCtx6 + 20 | 0; //@line 3021
     HEAP32[$770 >> 2] = $16; //@line 3022
     $771 = $ReallocAsyncCtx6 + 24 | 0; //@line 3023
     HEAP32[$771 >> 2] = $10; //@line 3024
     $772 = $ReallocAsyncCtx6 + 28 | 0; //@line 3025
     HEAP32[$772 >> 2] = $126; //@line 3026
     $773 = $ReallocAsyncCtx6 + 32 | 0; //@line 3027
     HEAP32[$773 >> 2] = $135; //@line 3028
     $774 = $ReallocAsyncCtx6 + 36 | 0; //@line 3029
     HEAP32[$774 >> 2] = $18; //@line 3030
     $775 = $ReallocAsyncCtx6 + 40 | 0; //@line 3031
     HEAP32[$775 >> 2] = $20; //@line 3032
     $776 = $ReallocAsyncCtx6 + 44 | 0; //@line 3033
     HEAP32[$776 >> 2] = $22; //@line 3034
     $777 = $ReallocAsyncCtx6 + 48 | 0; //@line 3035
     HEAP32[$777 >> 2] = $24; //@line 3036
     $778 = $ReallocAsyncCtx6 + 52 | 0; //@line 3037
     HEAP32[$778 >> 2] = $26; //@line 3038
     $779 = $ReallocAsyncCtx6 + 56 | 0; //@line 3039
     HEAP32[$779 >> 2] = $137; //@line 3040
     $780 = $ReallocAsyncCtx6 + 60 | 0; //@line 3041
     HEAP32[$780 >> 2] = $28; //@line 3042
     $781 = $ReallocAsyncCtx6 + 64 | 0; //@line 3043
     HEAP32[$781 >> 2] = $32; //@line 3044
     $782 = $ReallocAsyncCtx6 + 68 | 0; //@line 3045
     HEAP32[$782 >> 2] = $34; //@line 3046
     $783 = $ReallocAsyncCtx6 + 72 | 0; //@line 3047
     HEAP32[$783 >> 2] = $36; //@line 3048
     $784 = $ReallocAsyncCtx6 + 76 | 0; //@line 3049
     HEAP32[$784 >> 2] = $139; //@line 3050
     $785 = $ReallocAsyncCtx6 + 80 | 0; //@line 3051
     HEAP32[$785 >> 2] = $38; //@line 3052
     $786 = $ReallocAsyncCtx6 + 84 | 0; //@line 3053
     HEAP32[$786 >> 2] = $139; //@line 3054
     $787 = $ReallocAsyncCtx6 + 88 | 0; //@line 3055
     HEAP32[$787 >> 2] = $42; //@line 3056
     $788 = $ReallocAsyncCtx6 + 92 | 0; //@line 3057
     HEAP32[$788 >> 2] = $44; //@line 3058
     $789 = $ReallocAsyncCtx6 + 96 | 0; //@line 3059
     HEAP32[$789 >> 2] = $40; //@line 3060
     $790 = $ReallocAsyncCtx6 + 100 | 0; //@line 3061
     HEAP32[$790 >> 2] = $48; //@line 3062
     $791 = $ReallocAsyncCtx6 + 104 | 0; //@line 3063
     HEAP32[$791 >> 2] = $46; //@line 3064
     $792 = $ReallocAsyncCtx6 + 108 | 0; //@line 3065
     HEAP32[$792 >> 2] = $140; //@line 3066
     $793 = $ReallocAsyncCtx6 + 112 | 0; //@line 3067
     HEAP32[$793 >> 2] = $50; //@line 3068
     $794 = $ReallocAsyncCtx6 + 116 | 0; //@line 3069
     HEAP32[$794 >> 2] = $52; //@line 3070
     $795 = $ReallocAsyncCtx6 + 120 | 0; //@line 3071
     HEAP32[$795 >> 2] = $54; //@line 3072
     $796 = $ReallocAsyncCtx6 + 124 | 0; //@line 3073
     HEAP32[$796 >> 2] = $56; //@line 3074
     $797 = $ReallocAsyncCtx6 + 128 | 0; //@line 3075
     HEAP32[$797 >> 2] = $60; //@line 3076
     $798 = $ReallocAsyncCtx6 + 132 | 0; //@line 3077
     HEAP32[$798 >> 2] = $62; //@line 3078
     $799 = $ReallocAsyncCtx6 + 136 | 0; //@line 3079
     HEAP32[$799 >> 2] = $64; //@line 3080
     $800 = $ReallocAsyncCtx6 + 140 | 0; //@line 3081
     HEAP32[$800 >> 2] = $68; //@line 3082
     $801 = $ReallocAsyncCtx6 + 144 | 0; //@line 3083
     HEAP32[$801 >> 2] = $66; //@line 3084
     $802 = $ReallocAsyncCtx6 + 148 | 0; //@line 3085
     HEAP32[$802 >> 2] = $70; //@line 3086
     $803 = $ReallocAsyncCtx6 + 152 | 0; //@line 3087
     HEAP32[$803 >> 2] = $72; //@line 3088
     $804 = $ReallocAsyncCtx6 + 156 | 0; //@line 3089
     HEAP32[$804 >> 2] = $74; //@line 3090
     $805 = $ReallocAsyncCtx6 + 160 | 0; //@line 3091
     HEAP32[$805 >> 2] = $141; //@line 3092
     $806 = $ReallocAsyncCtx6 + 164 | 0; //@line 3093
     HEAP32[$806 >> 2] = $76; //@line 3094
     $807 = $ReallocAsyncCtx6 + 168 | 0; //@line 3095
     HEAP32[$807 >> 2] = $78; //@line 3096
     $808 = $ReallocAsyncCtx6 + 172 | 0; //@line 3097
     HEAP32[$808 >> 2] = $80; //@line 3098
     $809 = $ReallocAsyncCtx6 + 176 | 0; //@line 3099
     HEAP32[$809 >> 2] = $82; //@line 3100
     $810 = $ReallocAsyncCtx6 + 180 | 0; //@line 3101
     HEAP32[$810 >> 2] = $84; //@line 3102
     $811 = $ReallocAsyncCtx6 + 184 | 0; //@line 3103
     HEAP32[$811 >> 2] = $86; //@line 3104
     $812 = $ReallocAsyncCtx6 + 188 | 0; //@line 3105
     HEAP32[$812 >> 2] = $88; //@line 3106
     $813 = $ReallocAsyncCtx6 + 192 | 0; //@line 3107
     HEAP32[$813 >> 2] = $90; //@line 3108
     $814 = $ReallocAsyncCtx6 + 196 | 0; //@line 3109
     HEAP32[$814 >> 2] = $92; //@line 3110
     $815 = $ReallocAsyncCtx6 + 200 | 0; //@line 3111
     HEAP32[$815 >> 2] = $94; //@line 3112
     $816 = $ReallocAsyncCtx6 + 204 | 0; //@line 3113
     HEAP32[$816 >> 2] = $96; //@line 3114
     $817 = $ReallocAsyncCtx6 + 208 | 0; //@line 3115
     HEAP32[$817 >> 2] = $98; //@line 3116
     $818 = $ReallocAsyncCtx6 + 212 | 0; //@line 3117
     HEAP32[$818 >> 2] = $100; //@line 3118
     $819 = $ReallocAsyncCtx6 + 216 | 0; //@line 3119
     HEAP32[$819 >> 2] = $102; //@line 3120
     $820 = $ReallocAsyncCtx6 + 220 | 0; //@line 3121
     HEAP32[$820 >> 2] = $104; //@line 3122
     $821 = $ReallocAsyncCtx6 + 224 | 0; //@line 3123
     HEAP32[$821 >> 2] = $106; //@line 3124
     $822 = $ReallocAsyncCtx6 + 228 | 0; //@line 3125
     HEAP32[$822 >> 2] = $82; //@line 3126
     $823 = $ReallocAsyncCtx6 + 232 | 0; //@line 3127
     HEAP32[$823 >> 2] = $110; //@line 3128
     $824 = $ReallocAsyncCtx6 + 236 | 0; //@line 3129
     HEAP32[$824 >> 2] = $116; //@line 3130
     $825 = $ReallocAsyncCtx6 + 240 | 0; //@line 3131
     HEAP32[$825 >> 2] = $114; //@line 3132
     $826 = $ReallocAsyncCtx6 + 244 | 0; //@line 3133
     HEAP32[$826 >> 2] = $$0208$i; //@line 3134
     $827 = $ReallocAsyncCtx6 + 248 | 0; //@line 3135
     HEAP32[$827 >> 2] = $118; //@line 3136
     $828 = $ReallocAsyncCtx6 + 252 | 0; //@line 3137
     HEAP32[$828 >> 2] = $120; //@line 3138
     $829 = $ReallocAsyncCtx6 + 256 | 0; //@line 3139
     HEAP32[$829 >> 2] = $122; //@line 3140
     $830 = $ReallocAsyncCtx6 + 260 | 0; //@line 3141
     HEAP32[$830 >> 2] = $124; //@line 3142
     $831 = $ReallocAsyncCtx6 + 264 | 0; //@line 3143
     HEAP32[$831 >> 2] = $8; //@line 3144
     sp = STACKTOP; //@line 3145
     return;
    }
   case 78:
    {
     _mbed_tracef(2, 3844, 5193, $8); //@line 3150
     break L2;
     break;
    }
   case 84:
    {
     _mbed_tracef(2, 3844, 5254, $96); //@line 3155
     break L2;
     break;
    }
   case 90:
    {
     _mbed_tracef(2, 3844, 5315, $40); //@line 3160
     break L2;
     break;
    }
   case 96:
    {
     _mbed_tracef(2, 3844, 5376, $20); //@line 3165
     break L2;
     break;
    }
   case 102:
    {
     _mbed_tracef(2, 3844, 5436, $10); //@line 3170
     break L2;
     break;
    }
   case 106:
    {
     _mbed_tracef(2, 3844, 5496, $78); //@line 3175
     break L2;
     break;
    }
   case 109:
    {
     if (($144 - $136 | 0) >= ($135 | 0)) {
      $944 = ___async_retval; //@line 3184
      HEAP32[$944 >> 2] = $22; //@line 3185
      return;
     }
     if ((HEAP8[$144 >> 0] | 0) == -1) {
      $934 = $144 + 1 | 0; //@line 3191
      HEAP32[$82 >> 2] = $934; //@line 3192
      $935 = $934; //@line 3193
      $937 = $136 - $935 + $135 | 0; //@line 3195
      HEAP16[$66 + 24 >> 1] = $937; //@line 3198
      if ($937 & 65535 | 0) {
       HEAP32[$66 + 36 >> 2] = $935; //@line 3203
       $944 = ___async_retval; //@line 3204
       HEAP32[$944 >> 2] = $22; //@line 3205
       return;
      }
     } else {
      _mbed_tracef(2, 3844, 5543, $26); //@line 3209
     }
     HEAP32[$66 + 4 >> 2] = 1; //@line 3212
     $944 = ___async_retval; //@line 3213
     HEAP32[$944 >> 2] = $22; //@line 3214
     return;
    }
   }
  }
 } while (0);
 HEAP32[$66 + 4 >> 2] = 1; //@line 3222
 $944 = ___async_retval; //@line 3223
 HEAP32[$944 >> 2] = $22; //@line 3224
 return;
}
function _sn_coap_parser($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$in = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $1000 = 0, $1001 = 0, $101 = 0, $104 = 0, $107 = 0, $109 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $189 = 0, $192 = 0, $206 = 0, $211 = 0, $223 = 0, $226 = 0, $227 = 0, $230 = 0, $231 = 0, $293 = 0, $305 = 0, $307 = 0, $313 = 0, $314 = 0, $319 = 0, $322 = 0, $325 = 0, $326 = 0, $331 = 0, $334 = 0, $338 = 0, $341 = 0, $346 = 0, $347 = 0, $348 = 0, $4 = 0, $421 = 0, $423 = 0, $491 = 0, $494 = 0, $499 = 0, $500 = 0, $501 = 0, $574 = 0, $575 = 0, $579 = 0, $649 = 0, $652 = 0, $653 = 0, $658 = 0, $661 = 0, $663 = 0, $666 = 0, $734 = 0, $76 = 0, $8 = 0, $804 = 0, $807 = 0, $808 = 0, $813 = 0, $816 = 0, $818 = 0, $821 = 0, $891 = 0, $894 = 0, $895 = 0, $9 = 0, $90 = 0, $900 = 0, $903 = 0, $907 = 0, $910 = 0, $911 = 0, $916 = 0, $919 = 0, $92 = 0, $923 = 0, $926 = 0, $927 = 0, $932 = 0, $935 = 0, $939 = 0, $940 = 0, $945 = 0, $946 = 0, $951 = 0, $954 = 0, $960 = 0, $961 = 0, $966 = 0, $967 = 0, $972 = 0, $975 = 0, $979 = 0, $980 = 0, $99 = 0, $990 = 0, $991 = 0, $993 = 0, $AsyncCtx = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx67 = 0, $AsyncCtx71 = 0, $AsyncCtx75 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, stop = 0, $331$looptemp = 0, $658$looptemp = 0, $813$looptemp = 0, $900$looptemp = 0, $916$looptemp = 0, $932$looptemp = 0, $951$looptemp = 0, $972$looptemp = 0, $319$looptemp = 0;
 sp = STACKTOP; //@line 5407
 STACKTOP = STACKTOP + 240 | 0; //@line 5408
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240); //@line 5408
 $vararg_buffer55 = sp + 224 | 0; //@line 5409
 $vararg_buffer53 = sp + 216 | 0; //@line 5410
 $vararg_buffer51 = sp + 208 | 0; //@line 5411
 $vararg_buffer49 = sp + 200 | 0; //@line 5412
 $vararg_buffer47 = sp + 192 | 0; //@line 5413
 $vararg_buffer45 = sp + 184 | 0; //@line 5414
 $vararg_buffer43 = sp + 176 | 0; //@line 5415
 $vararg_buffer41 = sp + 168 | 0; //@line 5416
 $vararg_buffer39 = sp + 160 | 0; //@line 5417
 $vararg_buffer37 = sp + 152 | 0; //@line 5418
 $vararg_buffer35 = sp + 144 | 0; //@line 5419
 $vararg_buffer33 = sp + 136 | 0; //@line 5420
 $vararg_buffer31 = sp + 128 | 0; //@line 5421
 $vararg_buffer29 = sp + 120 | 0; //@line 5422
 $vararg_buffer27 = sp + 112 | 0; //@line 5423
 $vararg_buffer25 = sp + 104 | 0; //@line 5424
 $vararg_buffer23 = sp + 96 | 0; //@line 5425
 $vararg_buffer21 = sp + 88 | 0; //@line 5426
 $vararg_buffer19 = sp + 80 | 0; //@line 5427
 $vararg_buffer17 = sp + 72 | 0; //@line 5428
 $vararg_buffer15 = sp + 64 | 0; //@line 5429
 $vararg_buffer13 = sp + 56 | 0; //@line 5430
 $vararg_buffer11 = sp + 48 | 0; //@line 5431
 $vararg_buffer9 = sp + 40 | 0; //@line 5432
 $vararg_buffer7 = sp + 32 | 0; //@line 5433
 $vararg_buffer5 = sp + 24 | 0; //@line 5434
 $vararg_buffer3 = sp + 16 | 0; //@line 5435
 $vararg_buffer1 = sp + 8 | 0; //@line 5436
 $vararg_buffer = sp; //@line 5437
 $4 = sp + 228 | 0; //@line 5438
 HEAP32[$4 >> 2] = $2; //@line 5439
 if (!$2) {
  $$0 = 0; //@line 5442
  STACKTOP = sp; //@line 5443
  return $$0 | 0; //@line 5443
 }
 if (($0 | 0) == 0 | ($1 & 65535) < 4) {
  $$0 = 0; //@line 5449
  STACKTOP = sp; //@line 5450
  return $$0 | 0; //@line 5450
 }
 $8 = HEAP32[$0 >> 2] | 0; //@line 5452
 $AsyncCtx = _emscripten_alloc_async_context(264, sp) | 0; //@line 5453
 $9 = FUNCTION_TABLE_ii[$8 & 31](44) | 0; //@line 5454
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 5457
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer3; //@line 5459
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer25; //@line 5461
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer7; //@line 5463
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer17; //@line 5465
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer43; //@line 5467
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer51; //@line 5469
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer5; //@line 5471
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer; //@line 5473
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer43; //@line 5475
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer3; //@line 5477
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer13; //@line 5479
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer49; //@line 5481
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer; //@line 5483
  HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer41; //@line 5485
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer55; //@line 5487
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer29; //@line 5489
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer13; //@line 5491
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer41; //@line 5493
  HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer35; //@line 5495
  HEAP32[$AsyncCtx + 80 >> 2] = $0; //@line 5497
  HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer47; //@line 5499
  HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer39; //@line 5501
  HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer27; //@line 5503
  HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer7; //@line 5505
  HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer19; //@line 5507
  HEAP32[$AsyncCtx + 104 >> 2] = $vararg_buffer9; //@line 5509
  HEAP32[$AsyncCtx + 108 >> 2] = $vararg_buffer25; //@line 5511
  HEAP32[$AsyncCtx + 112 >> 2] = $vararg_buffer37; //@line 5513
  HEAP32[$AsyncCtx + 116 >> 2] = $vararg_buffer49; //@line 5515
  HEAP32[$AsyncCtx + 120 >> 2] = $vararg_buffer5; //@line 5517
  HEAP32[$AsyncCtx + 124 >> 2] = $vararg_buffer23; //@line 5519
  HEAP32[$AsyncCtx + 128 >> 2] = $vararg_buffer35; //@line 5521
  HEAP32[$AsyncCtx + 132 >> 2] = $vararg_buffer39; //@line 5523
  HEAP32[$AsyncCtx + 136 >> 2] = $vararg_buffer27; //@line 5525
  HEAP32[$AsyncCtx + 140 >> 2] = $vararg_buffer1; //@line 5527
  HEAP32[$AsyncCtx + 144 >> 2] = $vararg_buffer19; //@line 5529
  HEAP32[$AsyncCtx + 148 >> 2] = $vararg_buffer31; //@line 5531
  HEAP32[$AsyncCtx + 152 >> 2] = $vararg_buffer51; //@line 5533
  HEAP32[$AsyncCtx + 156 >> 2] = $vararg_buffer45; //@line 5535
  HEAP32[$AsyncCtx + 160 >> 2] = $vararg_buffer1; //@line 5537
  HEAP32[$AsyncCtx + 164 >> 2] = $vararg_buffer53; //@line 5539
  HEAP32[$AsyncCtx + 168 >> 2] = $vararg_buffer15; //@line 5541
  HEAP32[$AsyncCtx + 172 >> 2] = $4; //@line 5543
  HEAP32[$AsyncCtx + 176 >> 2] = $vararg_buffer29; //@line 5545
  HEAP32[$AsyncCtx + 180 >> 2] = $vararg_buffer31; //@line 5547
  HEAP32[$AsyncCtx + 184 >> 2] = $vararg_buffer11; //@line 5549
  HEAP32[$AsyncCtx + 188 >> 2] = $vararg_buffer23; //@line 5551
  HEAP32[$AsyncCtx + 192 >> 2] = $vararg_buffer53; //@line 5553
  HEAP32[$AsyncCtx + 196 >> 2] = $vararg_buffer11; //@line 5555
  HEAP32[$AsyncCtx + 200 >> 2] = $vararg_buffer45; //@line 5557
  HEAP32[$AsyncCtx + 204 >> 2] = $vararg_buffer15; //@line 5559
  HEAP32[$AsyncCtx + 208 >> 2] = $vararg_buffer37; //@line 5561
  HEAP32[$AsyncCtx + 212 >> 2] = $vararg_buffer33; //@line 5563
  HEAP32[$AsyncCtx + 216 >> 2] = $vararg_buffer17; //@line 5565
  HEAP32[$AsyncCtx + 220 >> 2] = $0; //@line 5567
  HEAP16[$AsyncCtx + 224 >> 1] = $1; //@line 5569
  HEAP32[$AsyncCtx + 228 >> 2] = $vararg_buffer9; //@line 5571
  HEAP32[$AsyncCtx + 232 >> 2] = $2; //@line 5573
  HEAP32[$AsyncCtx + 236 >> 2] = $vararg_buffer47; //@line 5575
  HEAP32[$AsyncCtx + 240 >> 2] = $3; //@line 5577
  HEAP32[$AsyncCtx + 244 >> 2] = $4; //@line 5579
  HEAP32[$AsyncCtx + 248 >> 2] = $vararg_buffer33; //@line 5581
  HEAP32[$AsyncCtx + 252 >> 2] = $vararg_buffer21; //@line 5583
  HEAP32[$AsyncCtx + 256 >> 2] = $vararg_buffer55; //@line 5585
  HEAP32[$AsyncCtx + 260 >> 2] = $vararg_buffer21; //@line 5587
  sp = STACKTOP; //@line 5588
  STACKTOP = sp; //@line 5589
  return 0; //@line 5589
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5591
 if (!$9) {
  _mbed_tracef(2, 3844, 3849, $vararg_buffer); //@line 5594
  _mbed_tracef(2, 3844, 3957, $vararg_buffer1); //@line 5595
  $$0 = 0; //@line 5596
  STACKTOP = sp; //@line 5597
  return $$0 | 0; //@line 5597
 }
 dest = $9; //@line 5599
 stop = dest + 44 | 0; //@line 5599
 do {
  HEAP32[dest >> 2] = 0; //@line 5599
  dest = dest + 4 | 0; //@line 5599
 } while ((dest | 0) < (stop | 0));
 $76 = $9 + 16 | 0; //@line 5600
 HEAP32[$76 >> 2] = -1; //@line 5601
 HEAP32[$3 >> 2] = HEAP8[$2 >> 0] & -64 & 255; //@line 5605
 HEAP32[$9 + 12 >> 2] = HEAP8[$2 >> 0] & 48; //@line 5610
 HEAP32[$9 + 8 >> 2] = HEAPU8[$2 + 1 >> 0]; //@line 5615
 $90 = HEAP8[$2 + 3 >> 0] | 0; //@line 5618
 $92 = $9 + 20 | 0; //@line 5620
 HEAP16[$92 >> 1] = $90 & 255; //@line 5621
 HEAP16[$92 >> 1] = HEAPU8[$2 + 2 >> 0] << 8 | $90 & 255; //@line 5628
 $99 = $2 + 4 | 0; //@line 5629
 HEAP32[$4 >> 2] = $99; //@line 5630
 $101 = HEAP8[$2 >> 0] & 15; //@line 5632
 HEAP8[$9 >> 0] = $101; //@line 5633
 do {
  if (!($101 << 24 >> 24)) {
   $$in = $99; //@line 5637
   label = 16; //@line 5638
  } else {
   if (($101 & 255) <= 8) {
    $104 = $9 + 28 | 0; //@line 5642
    if (!(HEAP32[$104 >> 2] | 0)) {
     $107 = HEAP32[$0 >> 2] | 0; //@line 5646
     $AsyncCtx59 = _emscripten_alloc_async_context(256, sp) | 0; //@line 5648
     $109 = FUNCTION_TABLE_ii[$107 & 31]($101 & 255) | 0; //@line 5649
     if (___async) {
      HEAP32[$AsyncCtx59 >> 2] = 60; //@line 5652
      HEAP32[$AsyncCtx59 + 4 >> 2] = $vararg_buffer25; //@line 5654
      HEAP32[$AsyncCtx59 + 8 >> 2] = $vararg_buffer17; //@line 5656
      HEAP32[$AsyncCtx59 + 12 >> 2] = $vararg_buffer7; //@line 5658
      HEAP32[$AsyncCtx59 + 16 >> 2] = $vararg_buffer43; //@line 5660
      HEAP32[$AsyncCtx59 + 20 >> 2] = $vararg_buffer51; //@line 5662
      HEAP32[$AsyncCtx59 + 24 >> 2] = $vararg_buffer5; //@line 5664
      HEAP32[$AsyncCtx59 + 28 >> 2] = $99; //@line 5666
      HEAP32[$AsyncCtx59 + 32 >> 2] = $vararg_buffer43; //@line 5668
      HEAP32[$AsyncCtx59 + 36 >> 2] = $vararg_buffer13; //@line 5670
      HEAP32[$AsyncCtx59 + 40 >> 2] = $vararg_buffer49; //@line 5672
      HEAP32[$AsyncCtx59 + 44 >> 2] = $9; //@line 5674
      HEAP32[$AsyncCtx59 + 48 >> 2] = $vararg_buffer41; //@line 5676
      HEAP32[$AsyncCtx59 + 52 >> 2] = $vararg_buffer55; //@line 5678
      HEAP32[$AsyncCtx59 + 56 >> 2] = $vararg_buffer29; //@line 5680
      HEAP32[$AsyncCtx59 + 60 >> 2] = $104; //@line 5682
      HEAP32[$AsyncCtx59 + 64 >> 2] = $vararg_buffer13; //@line 5684
      HEAP32[$AsyncCtx59 + 68 >> 2] = $vararg_buffer41; //@line 5686
      HEAP32[$AsyncCtx59 + 72 >> 2] = $vararg_buffer35; //@line 5688
      HEAP32[$AsyncCtx59 + 76 >> 2] = $0; //@line 5690
      HEAP32[$AsyncCtx59 + 80 >> 2] = $vararg_buffer47; //@line 5692
      HEAP32[$AsyncCtx59 + 84 >> 2] = $vararg_buffer39; //@line 5694
      HEAP32[$AsyncCtx59 + 88 >> 2] = $vararg_buffer27; //@line 5696
      HEAP32[$AsyncCtx59 + 92 >> 2] = $vararg_buffer7; //@line 5698
      HEAP32[$AsyncCtx59 + 96 >> 2] = $vararg_buffer19; //@line 5700
      HEAP32[$AsyncCtx59 + 100 >> 2] = $vararg_buffer9; //@line 5702
      HEAP32[$AsyncCtx59 + 104 >> 2] = $vararg_buffer25; //@line 5704
      HEAP32[$AsyncCtx59 + 108 >> 2] = $vararg_buffer37; //@line 5706
      HEAP32[$AsyncCtx59 + 112 >> 2] = $vararg_buffer49; //@line 5708
      HEAP32[$AsyncCtx59 + 116 >> 2] = $vararg_buffer5; //@line 5710
      HEAP32[$AsyncCtx59 + 120 >> 2] = $vararg_buffer23; //@line 5712
      HEAP32[$AsyncCtx59 + 124 >> 2] = $vararg_buffer35; //@line 5714
      HEAP32[$AsyncCtx59 + 128 >> 2] = $vararg_buffer39; //@line 5716
      HEAP32[$AsyncCtx59 + 132 >> 2] = $9; //@line 5718
      HEAP32[$AsyncCtx59 + 136 >> 2] = $vararg_buffer27; //@line 5720
      HEAP32[$AsyncCtx59 + 140 >> 2] = $vararg_buffer31; //@line 5722
      HEAP32[$AsyncCtx59 + 144 >> 2] = $vararg_buffer19; //@line 5724
      HEAP32[$AsyncCtx59 + 148 >> 2] = $vararg_buffer45; //@line 5726
      HEAP32[$AsyncCtx59 + 152 >> 2] = $vararg_buffer51; //@line 5728
      HEAP32[$AsyncCtx59 + 156 >> 2] = $vararg_buffer53; //@line 5730
      HEAP32[$AsyncCtx59 + 160 >> 2] = $vararg_buffer15; //@line 5732
      HEAP32[$AsyncCtx59 + 164 >> 2] = $4; //@line 5734
      HEAP32[$AsyncCtx59 + 168 >> 2] = $vararg_buffer29; //@line 5736
      HEAP32[$AsyncCtx59 + 172 >> 2] = $vararg_buffer31; //@line 5738
      HEAP32[$AsyncCtx59 + 176 >> 2] = $vararg_buffer11; //@line 5740
      HEAP32[$AsyncCtx59 + 180 >> 2] = $vararg_buffer23; //@line 5742
      HEAP32[$AsyncCtx59 + 184 >> 2] = $vararg_buffer53; //@line 5744
      HEAP32[$AsyncCtx59 + 188 >> 2] = $vararg_buffer11; //@line 5746
      HEAP32[$AsyncCtx59 + 192 >> 2] = $vararg_buffer45; //@line 5748
      HEAP32[$AsyncCtx59 + 196 >> 2] = $vararg_buffer15; //@line 5750
      HEAP32[$AsyncCtx59 + 200 >> 2] = $vararg_buffer37; //@line 5752
      HEAP32[$AsyncCtx59 + 204 >> 2] = $vararg_buffer33; //@line 5754
      HEAP32[$AsyncCtx59 + 208 >> 2] = $vararg_buffer17; //@line 5756
      HEAP32[$AsyncCtx59 + 212 >> 2] = $0; //@line 5758
      HEAP16[$AsyncCtx59 + 216 >> 1] = $1; //@line 5760
      HEAP32[$AsyncCtx59 + 220 >> 2] = $vararg_buffer9; //@line 5762
      HEAP32[$AsyncCtx59 + 224 >> 2] = $2; //@line 5764
      HEAP32[$AsyncCtx59 + 228 >> 2] = $76; //@line 5766
      HEAP32[$AsyncCtx59 + 232 >> 2] = $vararg_buffer47; //@line 5768
      HEAP32[$AsyncCtx59 + 236 >> 2] = $4; //@line 5770
      HEAP32[$AsyncCtx59 + 240 >> 2] = $vararg_buffer33; //@line 5772
      HEAP32[$AsyncCtx59 + 244 >> 2] = $vararg_buffer21; //@line 5774
      HEAP32[$AsyncCtx59 + 248 >> 2] = $vararg_buffer55; //@line 5776
      HEAP32[$AsyncCtx59 + 252 >> 2] = $vararg_buffer21; //@line 5778
      sp = STACKTOP; //@line 5779
      STACKTOP = sp; //@line 5780
      return 0; //@line 5780
     }
     _emscripten_free_async_context($AsyncCtx59 | 0); //@line 5782
     HEAP32[$104 >> 2] = $109; //@line 5783
     if (!$109) {
      _mbed_tracef(2, 3844, 4050, $vararg_buffer5); //@line 5786
      break;
     } else {
      _memcpy($109 | 0, $99 | 0, HEAPU8[$9 >> 0] | 0) | 0; //@line 5791
      $178 = $99 + (HEAPU8[$9 >> 0] | 0) | 0; //@line 5794
      HEAP32[$4 >> 2] = $178; //@line 5795
      $$in = $178; //@line 5796
      label = 16; //@line 5797
      break;
     }
    }
   }
   _mbed_tracef(2, 3844, 4002, $vararg_buffer3); //@line 5802
  }
 } while (0);
 L26 : do {
  if ((label | 0) == 16) {
   $179 = $$in; //@line 5807
   $180 = $1 & 65535; //@line 5808
   $181 = $2; //@line 5809
   $182 = $181 + $180 | 0; //@line 5810
   $184 = $9 + 40 | 0; //@line 5812
   $185 = $9 + 32 | 0; //@line 5813
   $186 = $9 + 22 | 0; //@line 5814
   $$0208$i = 0; //@line 5815
   $$sink275$i = $182 - $179 | 0; //@line 5815
   $1000 = $179; //@line 5815
   $189 = $$in; //@line 5815
   L28 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 132; //@line 5820
     break;
    }
    $trunc277$i = HEAP8[$189 >> 0] | 0; //@line 5823
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 132; //@line 5826
     break;
    }
    $192 = $trunc277$i & 15; //@line 5830
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 5831
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 22; //@line 5836
      break L28;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$189 + 1 >> 0] | 0; //@line 5844
      $$sink214$i = 13; //@line 5844
      $$sink3$i = 1; //@line 5844
      label = 23; //@line 5845
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$189 + 1 >> 0] << 8) + 269 | 0; //@line 5857
      $$sink214$i = HEAPU8[$189 + 2 >> 0] | 0; //@line 5857
      $$sink3$i = 2; //@line 5857
      label = 23; //@line 5858
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 5862
      $1001 = $1000; //@line 5862
      $211 = $189; //@line 5862
     }
    }
    if ((label | 0) == 23) {
     label = 0; //@line 5866
     $206 = $189 + $$sink3$i | 0; //@line 5868
     HEAP32[$4 >> 2] = $206; //@line 5869
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 5871
     $1001 = $206; //@line 5871
     $211 = $206; //@line 5871
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 5874
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 27; //@line 5878
      break L28;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$211 + 1 >> 0] | 0; //@line 5886
      $$sink216$i = 13; //@line 5886
      $$sink8$i = 1; //@line 5886
      label = 28; //@line 5887
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$211 + 1 >> 0] << 8) + 269 | 0; //@line 5899
      $$sink216$i = HEAPU8[$211 + 2 >> 0] | 0; //@line 5899
      $$sink8$i = 2; //@line 5899
      label = 28; //@line 5900
      break;
     }
    default:
     {
      $$1202$in$i = $192; //@line 5904
      $226 = $1001; //@line 5904
      $293 = $211; //@line 5904
     }
    }
    if ((label | 0) == 28) {
     label = 0; //@line 5908
     $223 = $211 + $$sink8$i | 0; //@line 5910
     HEAP32[$4 >> 2] = $223; //@line 5911
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 5913
     $226 = $223; //@line 5913
     $293 = $223; //@line 5913
    }
    $$1202$i = $$1202$in$i & 65535; //@line 5915
    $227 = $182 - $226 & 65535; //@line 5917
    $trunc$i = $$0208$i & 65535; //@line 5918
    L44 : do {
     switch ($trunc$i << 16 >> 16) {
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$184 >> 2] | 0)) {
        $230 = HEAP32[$0 >> 2] | 0; //@line 5925
        $AsyncCtx63 = _emscripten_alloc_async_context(288, sp) | 0; //@line 5926
        $231 = FUNCTION_TABLE_ii[$230 & 31](68) | 0; //@line 5927
        if (___async) {
         label = 32; //@line 5930
         break L28;
        }
        _emscripten_free_async_context($AsyncCtx63 | 0); //@line 5933
        HEAP32[$184 >> 2] = $231; //@line 5934
        if (!$231) {
         label = 34; //@line 5937
         break L28;
        }
        dest = $231; //@line 5940
        stop = dest + 68 | 0; //@line 5940
        do {
         HEAP32[dest >> 2] = 0; //@line 5940
         dest = dest + 4 | 0; //@line 5940
        } while ((dest | 0) < (stop | 0));
        $305 = HEAP32[$184 >> 2] | 0; //@line 5941
        HEAP32[$305 + 16 >> 2] = 0; //@line 5943
        $307 = $305 + 28 | 0; //@line 5944
        HEAP32[$305 + 12 >> 2] = -1; //@line 5946
        HEAP32[$307 >> 2] = -1; //@line 5947
        HEAP32[$307 + 4 >> 2] = -1; //@line 5947
        HEAP32[$307 + 8 >> 2] = -1; //@line 5947
        HEAP32[$307 + 12 >> 2] = -1; //@line 5947
        if (!$305) {
         break L28;
        }
       }
       do {
        switch ($trunc$i << 16 >> 16) {
        case 12:
         {
          label = 38; //@line 5956
          break L44;
          break;
         }
        case 11:
         {
          label = 85; //@line 5961
          break L44;
          break;
         }
        case 14:
         {
          if (($$1202$i & 65535) > 4) {
           label = 45; //@line 5968
           break L28;
          }
          $325 = $293 + 1 | 0; //@line 5971
          HEAP32[$4 >> 2] = $325; //@line 5972
          $326 = $$1202$in$i & 255; //@line 5973
          if (!($326 << 24 >> 24)) {
           $$0$lcssa$i223$i = 0; //@line 5976
          } else {
           $$045$i221$i = $326; //@line 5978
           $$06$i220$i = 0; //@line 5978
           $331 = $325; //@line 5978
           while (1) {
            $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 5980
            $331$looptemp = $331;
            $331 = $331 + 1 | 0; //@line 5982
            HEAP32[$4 >> 2] = $331; //@line 5983
            $334 = $$06$i220$i << 8 | HEAPU8[$331$looptemp >> 0]; //@line 5986
            if (!($$045$i221$i << 24 >> 24)) {
             $$0$lcssa$i223$i = $334; //@line 5989
             break;
            } else {
             $$06$i220$i = $334; //@line 5992
            }
           }
          }
          HEAP32[(HEAP32[$184 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 5998
          break L44;
          break;
         }
        case 35:
         {
          $338 = $$1202$in$i & 65535; //@line 6003
          if (($$1202$i + -1 & 65535) > 1033) {
           label = 51; //@line 6007
           break L28;
          }
          $341 = HEAP32[$184 >> 2] | 0; //@line 6010
          if (HEAP32[$341 + 44 >> 2] | 0) {
           label = 51; //@line 6015
           break L28;
          }
          HEAP16[$341 + 2 >> 1] = $$1202$i; //@line 6019
          $346 = $293 + 1 | 0; //@line 6020
          HEAP32[$4 >> 2] = $346; //@line 6021
          $347 = HEAP32[$0 >> 2] | 0; //@line 6022
          $AsyncCtx67 = _emscripten_alloc_async_context(276, sp) | 0; //@line 6023
          $348 = FUNCTION_TABLE_ii[$347 & 31]($$1202$i) | 0; //@line 6024
          if (___async) {
           label = 53; //@line 6027
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx67 | 0); //@line 6030
          HEAP32[(HEAP32[$184 >> 2] | 0) + 44 >> 2] = $348; //@line 6033
          if (!$348) {
           label = 55; //@line 6036
           break L28;
          }
          _memcpy($348 | 0, $346 | 0, $338 | 0) | 0; //@line 6039
          HEAP32[$4 >> 2] = $346 + $338; //@line 6041
          break L44;
          break;
         }
        case 4:
         {
          $421 = HEAP32[$184 >> 2] | 0; //@line 6046
          $AsyncCtx91 = _emscripten_alloc_async_context(268, sp) | 0; //@line 6048
          $423 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $421 + 48 | 0, $421, 4, $$1202$i) | 0; //@line 6049
          if (___async) {
           label = 58; //@line 6052
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx91 | 0); //@line 6055
          if ($423 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 60; //@line 6060
           break L28;
          }
          break;
         }
        case 3:
         {
          $491 = $$1202$in$i & 65535; //@line 6066
          if (($$1202$i + -1 & 65535) > 254) {
           label = 63; //@line 6070
           break L28;
          }
          $494 = HEAP32[$184 >> 2] | 0; //@line 6073
          if (HEAP32[$494 + 52 >> 2] | 0) {
           label = 63; //@line 6078
           break L28;
          }
          HEAP16[$494 + 4 >> 1] = $$1202$i; //@line 6082
          $499 = $293 + 1 | 0; //@line 6083
          HEAP32[$4 >> 2] = $499; //@line 6084
          $500 = HEAP32[$0 >> 2] | 0; //@line 6085
          $AsyncCtx71 = _emscripten_alloc_async_context(276, sp) | 0; //@line 6086
          $501 = FUNCTION_TABLE_ii[$500 & 31]($$1202$i) | 0; //@line 6087
          if (___async) {
           label = 65; //@line 6090
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx71 | 0); //@line 6093
          HEAP32[(HEAP32[$184 >> 2] | 0) + 52 >> 2] = $501; //@line 6096
          if (!$501) {
           label = 67; //@line 6099
           break L28;
          }
          _memcpy($501 | 0, $499 | 0, $491 | 0) | 0; //@line 6102
          HEAP32[$4 >> 2] = $499 + $491; //@line 6104
          break L44;
          break;
         }
        case 8:
         {
          $574 = HEAP32[$184 >> 2] | 0; //@line 6109
          $575 = $574 + 56 | 0; //@line 6110
          if (HEAP32[$575 >> 2] | 0) {
           label = 70; //@line 6114
           break L28;
          }
          $AsyncCtx87 = _emscripten_alloc_async_context(268, sp) | 0; //@line 6118
          $579 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $575, $574 + 6 | 0, 8, $$1202$i) | 0; //@line 6119
          if (___async) {
           label = 72; //@line 6122
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx87 | 0); //@line 6125
          if ($579 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 74; //@line 6130
           break L28;
          }
          break;
         }
        case 7:
         {
          if (($$1202$i & 65535) > 2) {
           label = 77; //@line 6138
           break L28;
          }
          $649 = (HEAP32[$184 >> 2] | 0) + 28 | 0; //@line 6142
          if ((HEAP32[$649 >> 2] | 0) != -1) {
           label = 77; //@line 6146
           break L28;
          }
          $652 = $293 + 1 | 0; //@line 6149
          HEAP32[$4 >> 2] = $652; //@line 6150
          $653 = $$1202$in$i & 255; //@line 6151
          if (!($653 << 24 >> 24)) {
           $$0$lcssa$i265$i = 0; //@line 6154
          } else {
           $$045$i263$i = $653; //@line 6156
           $$06$i262$i = 0; //@line 6156
           $658 = $652; //@line 6156
           while (1) {
            $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 6158
            $658$looptemp = $658;
            $658 = $658 + 1 | 0; //@line 6160
            HEAP32[$4 >> 2] = $658; //@line 6161
            $661 = $$06$i262$i << 8 | HEAPU8[$658$looptemp >> 0]; //@line 6164
            if (!($$045$i263$i << 24 >> 24)) {
             $$0$lcssa$i265$i = $661; //@line 6167
             break;
            } else {
             $$06$i262$i = $661; //@line 6170
            }
           }
          }
          HEAP32[$649 >> 2] = $$0$lcssa$i265$i; //@line 6174
          break L44;
          break;
         }
        case 20:
         {
          $663 = HEAP32[$184 >> 2] | 0; //@line 6179
          $AsyncCtx83 = _emscripten_alloc_async_context(268, sp) | 0; //@line 6182
          $666 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $663 + 60 | 0, $663 + 8 | 0, 20, $$1202$i) | 0; //@line 6183
          if (___async) {
           label = 82; //@line 6186
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx83 | 0); //@line 6189
          if ($666 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 84; //@line 6194
           break L28;
          }
          break;
         }
        case 6:
         {
          if (($$1202$i & 65535) > 2) {
           label = 91; //@line 6202
           break L28;
          }
          $804 = (HEAP32[$184 >> 2] | 0) + 32 | 0; //@line 6206
          if ((HEAP32[$804 >> 2] | 0) != -1) {
           label = 91; //@line 6210
           break L28;
          }
          $807 = $293 + 1 | 0; //@line 6213
          HEAP32[$4 >> 2] = $807; //@line 6214
          $808 = $$1202$in$i & 255; //@line 6215
          if (!($808 << 24 >> 24)) {
           $$0$lcssa$i272$i = 0; //@line 6218
          } else {
           $$045$i270$i = $808; //@line 6220
           $$06$i269$i = 0; //@line 6220
           $813 = $807; //@line 6220
           while (1) {
            $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 6222
            $813$looptemp = $813;
            $813 = $813 + 1 | 0; //@line 6224
            HEAP32[$4 >> 2] = $813; //@line 6225
            $816 = $$06$i269$i << 8 | HEAPU8[$813$looptemp >> 0]; //@line 6228
            if (!($$045$i270$i << 24 >> 24)) {
             $$0$lcssa$i272$i = $816; //@line 6231
             break;
            } else {
             $$06$i269$i = $816; //@line 6234
            }
           }
          }
          HEAP32[$804 >> 2] = $$0$lcssa$i272$i; //@line 6238
          break L44;
          break;
         }
        case 15:
         {
          $818 = HEAP32[$184 >> 2] | 0; //@line 6243
          $AsyncCtx75 = _emscripten_alloc_async_context(268, sp) | 0; //@line 6246
          $821 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $818 + 64 | 0, $818 + 10 | 0, 15, $$1202$i) | 0; //@line 6247
          if (___async) {
           label = 96; //@line 6250
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx75 | 0); //@line 6253
          if ($821 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 98; //@line 6258
           break L28;
          }
          break;
         }
        case 23:
         {
          if (($$1202$i & 65535) > 3) {
           label = 101; //@line 6266
           break L28;
          }
          $891 = (HEAP32[$184 >> 2] | 0) + 40 | 0; //@line 6270
          if ((HEAP32[$891 >> 2] | 0) != -1) {
           label = 101; //@line 6274
           break L28;
          }
          $894 = $293 + 1 | 0; //@line 6277
          HEAP32[$4 >> 2] = $894; //@line 6278
          $895 = $$1202$in$i & 255; //@line 6279
          if (!($895 << 24 >> 24)) {
           $$0$lcssa$i258$i = 0; //@line 6282
          } else {
           $$045$i256$i = $895; //@line 6284
           $$06$i255$i = 0; //@line 6284
           $900 = $894; //@line 6284
           while (1) {
            $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 6286
            $900$looptemp = $900;
            $900 = $900 + 1 | 0; //@line 6288
            HEAP32[$4 >> 2] = $900; //@line 6289
            $903 = $$06$i255$i << 8 | HEAPU8[$900$looptemp >> 0]; //@line 6292
            if (!($$045$i256$i << 24 >> 24)) {
             $$0$lcssa$i258$i = $903; //@line 6295
             break;
            } else {
             $$06$i255$i = $903; //@line 6298
            }
           }
          }
          HEAP32[$891 >> 2] = $$0$lcssa$i258$i; //@line 6302
          break L44;
          break;
         }
        case 27:
         {
          if (($$1202$i & 65535) > 3) {
           label = 107; //@line 6309
           break L28;
          }
          $907 = (HEAP32[$184 >> 2] | 0) + 36 | 0; //@line 6313
          if ((HEAP32[$907 >> 2] | 0) != -1) {
           label = 107; //@line 6317
           break L28;
          }
          $910 = $293 + 1 | 0; //@line 6320
          HEAP32[$4 >> 2] = $910; //@line 6321
          $911 = $$1202$in$i & 255; //@line 6322
          if (!($911 << 24 >> 24)) {
           $$0$lcssa$i251$i = 0; //@line 6325
          } else {
           $$045$i249$i = $911; //@line 6327
           $$06$i248$i = 0; //@line 6327
           $916 = $910; //@line 6327
           while (1) {
            $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 6329
            $916$looptemp = $916;
            $916 = $916 + 1 | 0; //@line 6331
            HEAP32[$4 >> 2] = $916; //@line 6332
            $919 = $$06$i248$i << 8 | HEAPU8[$916$looptemp >> 0]; //@line 6335
            if (!($$045$i249$i << 24 >> 24)) {
             $$0$lcssa$i251$i = $919; //@line 6338
             break;
            } else {
             $$06$i248$i = $919; //@line 6341
            }
           }
          }
          HEAP32[$907 >> 2] = $$0$lcssa$i251$i; //@line 6345
          break L44;
          break;
         }
        case 17:
         {
          if (($$1202$i & 65535) > 2) {
           label = 113; //@line 6352
           break L28;
          }
          $923 = (HEAP32[$184 >> 2] | 0) + 12 | 0; //@line 6356
          if ((HEAP32[$923 >> 2] | 0) != -1) {
           label = 113; //@line 6360
           break L28;
          }
          $926 = $293 + 1 | 0; //@line 6363
          HEAP32[$4 >> 2] = $926; //@line 6364
          $927 = $$1202$in$i & 255; //@line 6365
          if (!($927 << 24 >> 24)) {
           $$0$lcssa$i244$i = 0; //@line 6368
          } else {
           $$045$i242$i = $927; //@line 6370
           $$06$i241$i = 0; //@line 6370
           $932 = $926; //@line 6370
           while (1) {
            $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 6372
            $932$looptemp = $932;
            $932 = $932 + 1 | 0; //@line 6374
            HEAP32[$4 >> 2] = $932; //@line 6375
            $935 = $$06$i241$i << 8 | HEAPU8[$932$looptemp >> 0]; //@line 6378
            if (!($$045$i242$i << 24 >> 24)) {
             $$0$lcssa$i244$i = $935; //@line 6381
             break;
            } else {
             $$06$i241$i = $935; //@line 6384
            }
           }
          }
          HEAP32[$923 >> 2] = $$0$lcssa$i244$i; //@line 6388
          break L44;
          break;
         }
        case 60:
         {
          if (($$1202$i & 65535) > 4) {
           label = 119; //@line 6395
           break L28;
          }
          $939 = (HEAP32[$184 >> 2] | 0) + 1 | 0; //@line 6399
          $940 = HEAP8[$939 >> 0] | 0; //@line 6400
          if ($940 & 1) {
           label = 119; //@line 6404
           break L28;
          }
          HEAP8[$939 >> 0] = $940 | 1; //@line 6408
          $945 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 6410
          HEAP32[$4 >> 2] = $945; //@line 6411
          $946 = $$1202$in$i & 255; //@line 6412
          if (!($946 << 24 >> 24)) {
           $$0$lcssa$i237$i = 0; //@line 6415
          } else {
           $$045$i235$i = $946; //@line 6417
           $$06$i234$i = 0; //@line 6417
           $951 = $945; //@line 6417
           while (1) {
            $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 6419
            $951$looptemp = $951;
            $951 = $951 + 1 | 0; //@line 6421
            HEAP32[$4 >> 2] = $951; //@line 6422
            $954 = $$06$i234$i << 8 | HEAPU8[$951$looptemp >> 0]; //@line 6425
            if (!($$045$i235$i << 24 >> 24)) {
             $$0$lcssa$i237$i = $954; //@line 6428
             break;
            } else {
             $$06$i234$i = $954; //@line 6431
            }
           }
          }
          HEAP32[(HEAP32[$184 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 6437
          break L44;
          break;
         }
        case 28:
         {
          if (($$1202$i & 65535) > 4) {
           label = 125; //@line 6444
           break L28;
          }
          $960 = (HEAP32[$184 >> 2] | 0) + 1 | 0; //@line 6448
          $961 = HEAP8[$960 >> 0] | 0; //@line 6449
          if ($961 & 2) {
           label = 125; //@line 6453
           break L28;
          }
          HEAP8[$960 >> 0] = $961 | 2; //@line 6457
          $966 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 6459
          HEAP32[$4 >> 2] = $966; //@line 6460
          $967 = $$1202$in$i & 255; //@line 6461
          if (!($967 << 24 >> 24)) {
           $$0$lcssa$i230$i = 0; //@line 6464
          } else {
           $$045$i228$i = $967; //@line 6466
           $$06$i227$i = 0; //@line 6466
           $972 = $966; //@line 6466
           while (1) {
            $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 6468
            $972$looptemp = $972;
            $972 = $972 + 1 | 0; //@line 6470
            HEAP32[$4 >> 2] = $972; //@line 6471
            $975 = $$06$i227$i << 8 | HEAPU8[$972$looptemp >> 0]; //@line 6474
            if (!($$045$i228$i << 24 >> 24)) {
             $$0$lcssa$i230$i = $975; //@line 6477
             break;
            } else {
             $$06$i227$i = $975; //@line 6480
            }
           }
          }
          HEAP32[(HEAP32[$184 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 6486
          break L44;
          break;
         }
        default:
         {
          label = 129; //@line 6491
          break L28;
         }
        }
       } while (0);
       break;
      }
     case 12:
      {
       label = 38; //@line 6499
       break;
      }
     case 11:
      {
       label = 85; //@line 6503
       break;
      }
     default:
      {
       label = 129; //@line 6507
       break L28;
      }
     }
    } while (0);
    if ((label | 0) == 38) {
     label = 0; //@line 6513
     if (($$1202$i & 65535) > 2) {
      label = 40; //@line 6516
      break;
     }
     if ((HEAP32[$76 >> 2] | 0) != -1) {
      label = 40; //@line 6522
      break;
     }
     $313 = $293 + 1 | 0; //@line 6525
     HEAP32[$4 >> 2] = $313; //@line 6526
     $314 = $$1202$in$i & 255; //@line 6527
     if (!($314 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 6530
     } else {
      $$045$i$i = $314; //@line 6532
      $$06$i$i = 0; //@line 6532
      $319 = $313; //@line 6532
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 6534
       $319$looptemp = $319;
       $319 = $319 + 1 | 0; //@line 6536
       HEAP32[$4 >> 2] = $319; //@line 6537
       $322 = $$06$i$i << 8 | HEAPU8[$319$looptemp >> 0]; //@line 6540
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $322; //@line 6543
        break;
       } else {
        $$06$i$i = $322; //@line 6546
       }
      }
     }
     HEAP32[$76 >> 2] = $$0$lcssa$i$i; //@line 6550
    } else if ((label | 0) == 85) {
     label = 0; //@line 6553
     $AsyncCtx79 = _emscripten_alloc_async_context(268, sp) | 0; //@line 6554
     $734 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $185, $186, 11, $$1202$i) | 0; //@line 6555
     if (___async) {
      label = 86; //@line 6558
      break;
     }
     _emscripten_free_async_context($AsyncCtx79 | 0); //@line 6561
     if ($734 << 24 >> 24 <= -1) {
      label = 88; //@line 6564
      break;
     }
    }
    $979 = HEAP32[$4 >> 2] | 0; //@line 6568
    $980 = $979 - $181 | 0; //@line 6569
    if (($980 | 0) > ($180 | 0)) {
     break L26;
    } else {
     $$sink275$i = $180 - $980 | 0; //@line 6576
     $1000 = $979; //@line 6576
     $189 = $979; //@line 6576
    }
   }
   switch (label | 0) {
   case 22:
    {
     _mbed_tracef(2, 3844, 4107, $vararg_buffer7); //@line 6581
     break L26;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3844, 4165, $vararg_buffer9); //@line 6586
     break L26;
     break;
    }
   case 32:
    {
     HEAP32[$AsyncCtx63 >> 2] = 61; //@line 6591
     HEAP32[$AsyncCtx63 + 4 >> 2] = $vararg_buffer25; //@line 6593
     HEAP32[$AsyncCtx63 + 8 >> 2] = $vararg_buffer17; //@line 6595
     HEAP32[$AsyncCtx63 + 12 >> 2] = $181; //@line 6597
     HEAP32[$AsyncCtx63 + 16 >> 2] = $vararg_buffer7; //@line 6599
     HEAP32[$AsyncCtx63 + 20 >> 2] = $vararg_buffer43; //@line 6601
     HEAP32[$AsyncCtx63 + 24 >> 2] = $vararg_buffer51; //@line 6603
     HEAP16[$AsyncCtx63 + 28 >> 1] = $trunc$i; //@line 6605
     HEAP32[$AsyncCtx63 + 32 >> 2] = $vararg_buffer43; //@line 6607
     HEAP32[$AsyncCtx63 + 36 >> 2] = $180; //@line 6609
     HEAP32[$AsyncCtx63 + 40 >> 2] = $vararg_buffer13; //@line 6611
     HEAP32[$AsyncCtx63 + 44 >> 2] = $vararg_buffer49; //@line 6613
     HEAP32[$AsyncCtx63 + 48 >> 2] = $9; //@line 6615
     HEAP32[$AsyncCtx63 + 52 >> 2] = $vararg_buffer41; //@line 6617
     HEAP32[$AsyncCtx63 + 56 >> 2] = $vararg_buffer55; //@line 6619
     HEAP32[$AsyncCtx63 + 60 >> 2] = $182; //@line 6621
     HEAP32[$AsyncCtx63 + 64 >> 2] = $vararg_buffer29; //@line 6623
     HEAP32[$AsyncCtx63 + 68 >> 2] = $vararg_buffer13; //@line 6625
     HEAP32[$AsyncCtx63 + 72 >> 2] = $vararg_buffer41; //@line 6627
     HEAP32[$AsyncCtx63 + 76 >> 2] = $vararg_buffer35; //@line 6629
     HEAP32[$AsyncCtx63 + 80 >> 2] = $184; //@line 6631
     HEAP32[$AsyncCtx63 + 84 >> 2] = $0; //@line 6633
     HEAP32[$AsyncCtx63 + 88 >> 2] = $184; //@line 6635
     HEAP32[$AsyncCtx63 + 92 >> 2] = $vararg_buffer39; //@line 6637
     HEAP32[$AsyncCtx63 + 96 >> 2] = $vararg_buffer27; //@line 6639
     HEAP32[$AsyncCtx63 + 100 >> 2] = $vararg_buffer47; //@line 6641
     HEAP32[$AsyncCtx63 + 104 >> 2] = $vararg_buffer19; //@line 6643
     HEAP32[$AsyncCtx63 + 108 >> 2] = $vararg_buffer7; //@line 6645
     HEAP16[$AsyncCtx63 + 112 >> 1] = $227; //@line 6647
     HEAP32[$AsyncCtx63 + 116 >> 2] = $185; //@line 6649
     HEAP32[$AsyncCtx63 + 120 >> 2] = $vararg_buffer9; //@line 6651
     HEAP32[$AsyncCtx63 + 124 >> 2] = $vararg_buffer25; //@line 6653
     HEAP32[$AsyncCtx63 + 128 >> 2] = $vararg_buffer37; //@line 6655
     HEAP32[$AsyncCtx63 + 132 >> 2] = $vararg_buffer49; //@line 6657
     HEAP32[$AsyncCtx63 + 136 >> 2] = $vararg_buffer23; //@line 6659
     HEAP32[$AsyncCtx63 + 140 >> 2] = $vararg_buffer35; //@line 6661
     HEAP32[$AsyncCtx63 + 144 >> 2] = $vararg_buffer39; //@line 6663
     HEAP32[$AsyncCtx63 + 148 >> 2] = $vararg_buffer27; //@line 6665
     HEAP32[$AsyncCtx63 + 152 >> 2] = $9; //@line 6667
     HEAP32[$AsyncCtx63 + 156 >> 2] = $vararg_buffer31; //@line 6669
     HEAP32[$AsyncCtx63 + 160 >> 2] = $vararg_buffer19; //@line 6671
     HEAP32[$AsyncCtx63 + 164 >> 2] = $vararg_buffer45; //@line 6673
     HEAP32[$AsyncCtx63 + 168 >> 2] = $186; //@line 6675
     HEAP32[$AsyncCtx63 + 172 >> 2] = $vararg_buffer51; //@line 6677
     HEAP32[$AsyncCtx63 + 176 >> 2] = $$1202$in$i; //@line 6679
     HEAP32[$AsyncCtx63 + 180 >> 2] = $vararg_buffer53; //@line 6681
     HEAP32[$AsyncCtx63 + 184 >> 2] = $vararg_buffer15; //@line 6683
     HEAP32[$AsyncCtx63 + 188 >> 2] = $4; //@line 6685
     HEAP32[$AsyncCtx63 + 192 >> 2] = $vararg_buffer29; //@line 6687
     HEAP16[$AsyncCtx63 + 196 >> 1] = $$1202$i; //@line 6689
     HEAP32[$AsyncCtx63 + 200 >> 2] = $vararg_buffer31; //@line 6691
     HEAP32[$AsyncCtx63 + 204 >> 2] = $vararg_buffer23; //@line 6693
     HEAP32[$AsyncCtx63 + 208 >> 2] = $vararg_buffer53; //@line 6695
     HEAP32[$AsyncCtx63 + 212 >> 2] = $vararg_buffer11; //@line 6697
     HEAP32[$AsyncCtx63 + 216 >> 2] = $vararg_buffer45; //@line 6699
     HEAP32[$AsyncCtx63 + 220 >> 2] = $vararg_buffer11; //@line 6701
     HEAP32[$AsyncCtx63 + 224 >> 2] = $vararg_buffer15; //@line 6703
     HEAP32[$AsyncCtx63 + 228 >> 2] = $vararg_buffer37; //@line 6705
     HEAP32[$AsyncCtx63 + 232 >> 2] = $vararg_buffer33; //@line 6707
     HEAP32[$AsyncCtx63 + 236 >> 2] = $vararg_buffer17; //@line 6709
     HEAP32[$AsyncCtx63 + 240 >> 2] = $0; //@line 6711
     HEAP32[$AsyncCtx63 + 244 >> 2] = $293; //@line 6713
     HEAP32[$AsyncCtx63 + 248 >> 2] = $4; //@line 6715
     HEAP32[$AsyncCtx63 + 252 >> 2] = $vararg_buffer9; //@line 6717
     HEAP32[$AsyncCtx63 + 256 >> 2] = $vararg_buffer47; //@line 6719
     HEAP32[$AsyncCtx63 + 260 >> 2] = $76; //@line 6721
     HEAP32[$AsyncCtx63 + 264 >> 2] = $$0208$i; //@line 6723
     HEAP32[$AsyncCtx63 + 268 >> 2] = $4; //@line 6725
     HEAP32[$AsyncCtx63 + 272 >> 2] = $vararg_buffer33; //@line 6727
     HEAP32[$AsyncCtx63 + 276 >> 2] = $vararg_buffer21; //@line 6729
     HEAP32[$AsyncCtx63 + 280 >> 2] = $vararg_buffer55; //@line 6731
     HEAP32[$AsyncCtx63 + 284 >> 2] = $vararg_buffer21; //@line 6733
     sp = STACKTOP; //@line 6734
     STACKTOP = sp; //@line 6735
     return 0; //@line 6735
    }
   case 34:
    {
     _mbed_tracef(2, 3844, 3893, $vararg_buffer11); //@line 6739
     break;
    }
   case 40:
    {
     _mbed_tracef(2, 3844, 4279, $vararg_buffer15); //@line 6743
     break L26;
     break;
    }
   case 45:
    {
     _mbed_tracef(2, 3844, 4348, $vararg_buffer17); //@line 6748
     break L26;
     break;
    }
   case 51:
    {
     _mbed_tracef(2, 3844, 4410, $vararg_buffer19); //@line 6753
     break L26;
     break;
    }
   case 53:
    {
     HEAP32[$AsyncCtx67 >> 2] = 62; //@line 6758
     HEAP32[$AsyncCtx67 + 4 >> 2] = $vararg_buffer25; //@line 6760
     HEAP32[$AsyncCtx67 + 8 >> 2] = $vararg_buffer17; //@line 6762
     HEAP32[$AsyncCtx67 + 12 >> 2] = $181; //@line 6764
     HEAP32[$AsyncCtx67 + 16 >> 2] = $vararg_buffer7; //@line 6766
     HEAP32[$AsyncCtx67 + 20 >> 2] = $vararg_buffer43; //@line 6768
     HEAP32[$AsyncCtx67 + 24 >> 2] = $vararg_buffer51; //@line 6770
     HEAP32[$AsyncCtx67 + 28 >> 2] = $vararg_buffer43; //@line 6772
     HEAP32[$AsyncCtx67 + 32 >> 2] = $180; //@line 6774
     HEAP32[$AsyncCtx67 + 36 >> 2] = $vararg_buffer13; //@line 6776
     HEAP32[$AsyncCtx67 + 40 >> 2] = $vararg_buffer49; //@line 6778
     HEAP32[$AsyncCtx67 + 44 >> 2] = $9; //@line 6780
     HEAP32[$AsyncCtx67 + 48 >> 2] = $vararg_buffer41; //@line 6782
     HEAP32[$AsyncCtx67 + 52 >> 2] = $338; //@line 6784
     HEAP32[$AsyncCtx67 + 56 >> 2] = $vararg_buffer55; //@line 6786
     HEAP32[$AsyncCtx67 + 60 >> 2] = $182; //@line 6788
     HEAP32[$AsyncCtx67 + 64 >> 2] = $vararg_buffer29; //@line 6790
     HEAP32[$AsyncCtx67 + 68 >> 2] = $346; //@line 6792
     HEAP32[$AsyncCtx67 + 72 >> 2] = $vararg_buffer13; //@line 6794
     HEAP32[$AsyncCtx67 + 76 >> 2] = $vararg_buffer41; //@line 6796
     HEAP32[$AsyncCtx67 + 80 >> 2] = $vararg_buffer35; //@line 6798
     HEAP32[$AsyncCtx67 + 84 >> 2] = $184; //@line 6800
     HEAP32[$AsyncCtx67 + 88 >> 2] = $0; //@line 6802
     HEAP32[$AsyncCtx67 + 92 >> 2] = $184; //@line 6804
     HEAP32[$AsyncCtx67 + 96 >> 2] = $vararg_buffer39; //@line 6806
     HEAP32[$AsyncCtx67 + 100 >> 2] = $vararg_buffer27; //@line 6808
     HEAP32[$AsyncCtx67 + 104 >> 2] = $vararg_buffer47; //@line 6810
     HEAP32[$AsyncCtx67 + 108 >> 2] = $vararg_buffer19; //@line 6812
     HEAP32[$AsyncCtx67 + 112 >> 2] = $vararg_buffer7; //@line 6814
     HEAP32[$AsyncCtx67 + 116 >> 2] = $185; //@line 6816
     HEAP32[$AsyncCtx67 + 120 >> 2] = $vararg_buffer9; //@line 6818
     HEAP32[$AsyncCtx67 + 124 >> 2] = $vararg_buffer25; //@line 6820
     HEAP32[$AsyncCtx67 + 128 >> 2] = $vararg_buffer37; //@line 6822
     HEAP32[$AsyncCtx67 + 132 >> 2] = $vararg_buffer49; //@line 6824
     HEAP32[$AsyncCtx67 + 136 >> 2] = $vararg_buffer23; //@line 6826
     HEAP32[$AsyncCtx67 + 140 >> 2] = $vararg_buffer35; //@line 6828
     HEAP32[$AsyncCtx67 + 144 >> 2] = $vararg_buffer39; //@line 6830
     HEAP32[$AsyncCtx67 + 148 >> 2] = $vararg_buffer27; //@line 6832
     HEAP32[$AsyncCtx67 + 152 >> 2] = $9; //@line 6834
     HEAP32[$AsyncCtx67 + 156 >> 2] = $vararg_buffer31; //@line 6836
     HEAP32[$AsyncCtx67 + 160 >> 2] = $vararg_buffer19; //@line 6838
     HEAP32[$AsyncCtx67 + 164 >> 2] = $vararg_buffer45; //@line 6840
     HEAP32[$AsyncCtx67 + 168 >> 2] = $186; //@line 6842
     HEAP32[$AsyncCtx67 + 172 >> 2] = $vararg_buffer51; //@line 6844
     HEAP32[$AsyncCtx67 + 176 >> 2] = $vararg_buffer53; //@line 6846
     HEAP32[$AsyncCtx67 + 180 >> 2] = $vararg_buffer15; //@line 6848
     HEAP32[$AsyncCtx67 + 184 >> 2] = $4; //@line 6850
     HEAP32[$AsyncCtx67 + 188 >> 2] = $vararg_buffer29; //@line 6852
     HEAP32[$AsyncCtx67 + 192 >> 2] = $vararg_buffer31; //@line 6854
     HEAP32[$AsyncCtx67 + 196 >> 2] = $vararg_buffer11; //@line 6856
     HEAP32[$AsyncCtx67 + 200 >> 2] = $vararg_buffer23; //@line 6858
     HEAP32[$AsyncCtx67 + 204 >> 2] = $vararg_buffer53; //@line 6860
     HEAP32[$AsyncCtx67 + 208 >> 2] = $vararg_buffer11; //@line 6862
     HEAP32[$AsyncCtx67 + 212 >> 2] = $vararg_buffer45; //@line 6864
     HEAP32[$AsyncCtx67 + 216 >> 2] = $vararg_buffer15; //@line 6866
     HEAP32[$AsyncCtx67 + 220 >> 2] = $vararg_buffer37; //@line 6868
     HEAP32[$AsyncCtx67 + 224 >> 2] = $vararg_buffer33; //@line 6870
     HEAP32[$AsyncCtx67 + 228 >> 2] = $vararg_buffer17; //@line 6872
     HEAP32[$AsyncCtx67 + 232 >> 2] = $0; //@line 6874
     HEAP32[$AsyncCtx67 + 236 >> 2] = $4; //@line 6876
     HEAP32[$AsyncCtx67 + 240 >> 2] = $vararg_buffer9; //@line 6878
     HEAP32[$AsyncCtx67 + 244 >> 2] = $vararg_buffer47; //@line 6880
     HEAP32[$AsyncCtx67 + 248 >> 2] = $76; //@line 6882
     HEAP32[$AsyncCtx67 + 252 >> 2] = $$0208$i; //@line 6884
     HEAP32[$AsyncCtx67 + 256 >> 2] = $4; //@line 6886
     HEAP32[$AsyncCtx67 + 260 >> 2] = $vararg_buffer33; //@line 6888
     HEAP32[$AsyncCtx67 + 264 >> 2] = $vararg_buffer21; //@line 6890
     HEAP32[$AsyncCtx67 + 268 >> 2] = $vararg_buffer55; //@line 6892
     HEAP32[$AsyncCtx67 + 272 >> 2] = $vararg_buffer21; //@line 6894
     sp = STACKTOP; //@line 6895
     STACKTOP = sp; //@line 6896
     return 0; //@line 6896
    }
   case 55:
    {
     _mbed_tracef(2, 3844, 4474, $vararg_buffer21); //@line 6900
     break L26;
     break;
    }
   case 58:
    {
     HEAP32[$AsyncCtx91 >> 2] = 63; //@line 6905
     HEAP32[$AsyncCtx91 + 4 >> 2] = $vararg_buffer25; //@line 6907
     HEAP32[$AsyncCtx91 + 8 >> 2] = $vararg_buffer17; //@line 6909
     HEAP32[$AsyncCtx91 + 12 >> 2] = $181; //@line 6911
     HEAP32[$AsyncCtx91 + 16 >> 2] = $vararg_buffer7; //@line 6913
     HEAP32[$AsyncCtx91 + 20 >> 2] = $vararg_buffer43; //@line 6915
     HEAP32[$AsyncCtx91 + 24 >> 2] = $vararg_buffer51; //@line 6917
     HEAP32[$AsyncCtx91 + 28 >> 2] = $vararg_buffer21; //@line 6919
     HEAP32[$AsyncCtx91 + 32 >> 2] = $180; //@line 6921
     HEAP32[$AsyncCtx91 + 36 >> 2] = $vararg_buffer13; //@line 6923
     HEAP32[$AsyncCtx91 + 40 >> 2] = $vararg_buffer49; //@line 6925
     HEAP32[$AsyncCtx91 + 44 >> 2] = $9; //@line 6927
     HEAP32[$AsyncCtx91 + 48 >> 2] = $vararg_buffer41; //@line 6929
     HEAP32[$AsyncCtx91 + 52 >> 2] = $vararg_buffer55; //@line 6931
     HEAP32[$AsyncCtx91 + 56 >> 2] = $182; //@line 6933
     HEAP32[$AsyncCtx91 + 60 >> 2] = $vararg_buffer29; //@line 6935
     HEAP32[$AsyncCtx91 + 64 >> 2] = $vararg_buffer13; //@line 6937
     HEAP32[$AsyncCtx91 + 68 >> 2] = $vararg_buffer41; //@line 6939
     HEAP32[$AsyncCtx91 + 72 >> 2] = $vararg_buffer35; //@line 6941
     HEAP32[$AsyncCtx91 + 76 >> 2] = $184; //@line 6943
     HEAP32[$AsyncCtx91 + 80 >> 2] = $0; //@line 6945
     HEAP32[$AsyncCtx91 + 84 >> 2] = $184; //@line 6947
     HEAP32[$AsyncCtx91 + 88 >> 2] = $vararg_buffer39; //@line 6949
     HEAP32[$AsyncCtx91 + 92 >> 2] = $vararg_buffer27; //@line 6951
     HEAP32[$AsyncCtx91 + 96 >> 2] = $vararg_buffer47; //@line 6953
     HEAP32[$AsyncCtx91 + 100 >> 2] = $vararg_buffer19; //@line 6955
     HEAP32[$AsyncCtx91 + 104 >> 2] = $vararg_buffer7; //@line 6957
     HEAP32[$AsyncCtx91 + 108 >> 2] = $185; //@line 6959
     HEAP32[$AsyncCtx91 + 112 >> 2] = $vararg_buffer9; //@line 6961
     HEAP32[$AsyncCtx91 + 116 >> 2] = $vararg_buffer25; //@line 6963
     HEAP32[$AsyncCtx91 + 120 >> 2] = $vararg_buffer37; //@line 6965
     HEAP32[$AsyncCtx91 + 124 >> 2] = $vararg_buffer49; //@line 6967
     HEAP32[$AsyncCtx91 + 128 >> 2] = $vararg_buffer23; //@line 6969
     HEAP32[$AsyncCtx91 + 132 >> 2] = $vararg_buffer35; //@line 6971
     HEAP32[$AsyncCtx91 + 136 >> 2] = $vararg_buffer39; //@line 6973
     HEAP32[$AsyncCtx91 + 140 >> 2] = $vararg_buffer27; //@line 6975
     HEAP32[$AsyncCtx91 + 144 >> 2] = $9; //@line 6977
     HEAP32[$AsyncCtx91 + 148 >> 2] = $vararg_buffer31; //@line 6979
     HEAP32[$AsyncCtx91 + 152 >> 2] = $vararg_buffer19; //@line 6981
     HEAP32[$AsyncCtx91 + 156 >> 2] = $vararg_buffer45; //@line 6983
     HEAP32[$AsyncCtx91 + 160 >> 2] = $186; //@line 6985
     HEAP32[$AsyncCtx91 + 164 >> 2] = $vararg_buffer51; //@line 6987
     HEAP32[$AsyncCtx91 + 168 >> 2] = $vararg_buffer53; //@line 6989
     HEAP32[$AsyncCtx91 + 172 >> 2] = $vararg_buffer15; //@line 6991
     HEAP32[$AsyncCtx91 + 176 >> 2] = $4; //@line 6993
     HEAP32[$AsyncCtx91 + 180 >> 2] = $vararg_buffer29; //@line 6995
     HEAP32[$AsyncCtx91 + 184 >> 2] = $vararg_buffer31; //@line 6997
     HEAP32[$AsyncCtx91 + 188 >> 2] = $vararg_buffer11; //@line 6999
     HEAP32[$AsyncCtx91 + 192 >> 2] = $vararg_buffer23; //@line 7001
     HEAP32[$AsyncCtx91 + 196 >> 2] = $vararg_buffer53; //@line 7003
     HEAP32[$AsyncCtx91 + 200 >> 2] = $vararg_buffer11; //@line 7005
     HEAP32[$AsyncCtx91 + 204 >> 2] = $vararg_buffer45; //@line 7007
     HEAP32[$AsyncCtx91 + 208 >> 2] = $vararg_buffer15; //@line 7009
     HEAP32[$AsyncCtx91 + 212 >> 2] = $vararg_buffer37; //@line 7011
     HEAP32[$AsyncCtx91 + 216 >> 2] = $vararg_buffer33; //@line 7013
     HEAP32[$AsyncCtx91 + 220 >> 2] = $vararg_buffer17; //@line 7015
     HEAP32[$AsyncCtx91 + 224 >> 2] = $0; //@line 7017
     HEAP32[$AsyncCtx91 + 228 >> 2] = $4; //@line 7019
     HEAP32[$AsyncCtx91 + 232 >> 2] = $vararg_buffer9; //@line 7021
     HEAP32[$AsyncCtx91 + 236 >> 2] = $vararg_buffer47; //@line 7023
     HEAP32[$AsyncCtx91 + 240 >> 2] = $76; //@line 7025
     HEAP32[$AsyncCtx91 + 244 >> 2] = $$0208$i; //@line 7027
     HEAP32[$AsyncCtx91 + 248 >> 2] = $4; //@line 7029
     HEAP32[$AsyncCtx91 + 252 >> 2] = $vararg_buffer33; //@line 7031
     HEAP32[$AsyncCtx91 + 256 >> 2] = $vararg_buffer21; //@line 7033
     HEAP32[$AsyncCtx91 + 260 >> 2] = $vararg_buffer55; //@line 7035
     HEAP32[$AsyncCtx91 + 264 >> 2] = $vararg_buffer43; //@line 7037
     sp = STACKTOP; //@line 7038
     STACKTOP = sp; //@line 7039
     return 0; //@line 7039
    }
   case 60:
    {
     _mbed_tracef(2, 3844, 4546, $vararg_buffer23); //@line 7043
     break L26;
     break;
    }
   case 63:
    {
     _mbed_tracef(2, 3844, 4605, $vararg_buffer25); //@line 7048
     break L26;
     break;
    }
   case 65:
    {
     HEAP32[$AsyncCtx71 >> 2] = 64; //@line 7053
     HEAP32[$AsyncCtx71 + 4 >> 2] = $vararg_buffer25; //@line 7055
     HEAP32[$AsyncCtx71 + 8 >> 2] = $vararg_buffer17; //@line 7057
     HEAP32[$AsyncCtx71 + 12 >> 2] = $491; //@line 7059
     HEAP32[$AsyncCtx71 + 16 >> 2] = $181; //@line 7061
     HEAP32[$AsyncCtx71 + 20 >> 2] = $vararg_buffer7; //@line 7063
     HEAP32[$AsyncCtx71 + 24 >> 2] = $vararg_buffer43; //@line 7065
     HEAP32[$AsyncCtx71 + 28 >> 2] = $vararg_buffer51; //@line 7067
     HEAP32[$AsyncCtx71 + 32 >> 2] = $vararg_buffer43; //@line 7069
     HEAP32[$AsyncCtx71 + 36 >> 2] = $180; //@line 7071
     HEAP32[$AsyncCtx71 + 40 >> 2] = $499; //@line 7073
     HEAP32[$AsyncCtx71 + 44 >> 2] = $vararg_buffer13; //@line 7075
     HEAP32[$AsyncCtx71 + 48 >> 2] = $vararg_buffer49; //@line 7077
     HEAP32[$AsyncCtx71 + 52 >> 2] = $9; //@line 7079
     HEAP32[$AsyncCtx71 + 56 >> 2] = $vararg_buffer41; //@line 7081
     HEAP32[$AsyncCtx71 + 60 >> 2] = $vararg_buffer55; //@line 7083
     HEAP32[$AsyncCtx71 + 64 >> 2] = $182; //@line 7085
     HEAP32[$AsyncCtx71 + 68 >> 2] = $vararg_buffer29; //@line 7087
     HEAP32[$AsyncCtx71 + 72 >> 2] = $vararg_buffer13; //@line 7089
     HEAP32[$AsyncCtx71 + 76 >> 2] = $vararg_buffer41; //@line 7091
     HEAP32[$AsyncCtx71 + 80 >> 2] = $vararg_buffer35; //@line 7093
     HEAP32[$AsyncCtx71 + 84 >> 2] = $184; //@line 7095
     HEAP32[$AsyncCtx71 + 88 >> 2] = $0; //@line 7097
     HEAP32[$AsyncCtx71 + 92 >> 2] = $184; //@line 7099
     HEAP32[$AsyncCtx71 + 96 >> 2] = $vararg_buffer39; //@line 7101
     HEAP32[$AsyncCtx71 + 100 >> 2] = $vararg_buffer27; //@line 7103
     HEAP32[$AsyncCtx71 + 104 >> 2] = $vararg_buffer47; //@line 7105
     HEAP32[$AsyncCtx71 + 108 >> 2] = $vararg_buffer19; //@line 7107
     HEAP32[$AsyncCtx71 + 112 >> 2] = $vararg_buffer7; //@line 7109
     HEAP32[$AsyncCtx71 + 116 >> 2] = $185; //@line 7111
     HEAP32[$AsyncCtx71 + 120 >> 2] = $vararg_buffer9; //@line 7113
     HEAP32[$AsyncCtx71 + 124 >> 2] = $vararg_buffer25; //@line 7115
     HEAP32[$AsyncCtx71 + 128 >> 2] = $vararg_buffer37; //@line 7117
     HEAP32[$AsyncCtx71 + 132 >> 2] = $vararg_buffer49; //@line 7119
     HEAP32[$AsyncCtx71 + 136 >> 2] = $vararg_buffer23; //@line 7121
     HEAP32[$AsyncCtx71 + 140 >> 2] = $vararg_buffer35; //@line 7123
     HEAP32[$AsyncCtx71 + 144 >> 2] = $vararg_buffer39; //@line 7125
     HEAP32[$AsyncCtx71 + 148 >> 2] = $vararg_buffer27; //@line 7127
     HEAP32[$AsyncCtx71 + 152 >> 2] = $9; //@line 7129
     HEAP32[$AsyncCtx71 + 156 >> 2] = $vararg_buffer31; //@line 7131
     HEAP32[$AsyncCtx71 + 160 >> 2] = $vararg_buffer19; //@line 7133
     HEAP32[$AsyncCtx71 + 164 >> 2] = $vararg_buffer45; //@line 7135
     HEAP32[$AsyncCtx71 + 168 >> 2] = $186; //@line 7137
     HEAP32[$AsyncCtx71 + 172 >> 2] = $vararg_buffer51; //@line 7139
     HEAP32[$AsyncCtx71 + 176 >> 2] = $vararg_buffer53; //@line 7141
     HEAP32[$AsyncCtx71 + 180 >> 2] = $vararg_buffer15; //@line 7143
     HEAP32[$AsyncCtx71 + 184 >> 2] = $4; //@line 7145
     HEAP32[$AsyncCtx71 + 188 >> 2] = $vararg_buffer29; //@line 7147
     HEAP32[$AsyncCtx71 + 192 >> 2] = $vararg_buffer31; //@line 7149
     HEAP32[$AsyncCtx71 + 196 >> 2] = $vararg_buffer11; //@line 7151
     HEAP32[$AsyncCtx71 + 200 >> 2] = $vararg_buffer23; //@line 7153
     HEAP32[$AsyncCtx71 + 204 >> 2] = $vararg_buffer53; //@line 7155
     HEAP32[$AsyncCtx71 + 208 >> 2] = $vararg_buffer11; //@line 7157
     HEAP32[$AsyncCtx71 + 212 >> 2] = $vararg_buffer45; //@line 7159
     HEAP32[$AsyncCtx71 + 216 >> 2] = $vararg_buffer15; //@line 7161
     HEAP32[$AsyncCtx71 + 220 >> 2] = $vararg_buffer37; //@line 7163
     HEAP32[$AsyncCtx71 + 224 >> 2] = $vararg_buffer33; //@line 7165
     HEAP32[$AsyncCtx71 + 228 >> 2] = $vararg_buffer17; //@line 7167
     HEAP32[$AsyncCtx71 + 232 >> 2] = $0; //@line 7169
     HEAP32[$AsyncCtx71 + 236 >> 2] = $4; //@line 7171
     HEAP32[$AsyncCtx71 + 240 >> 2] = $vararg_buffer9; //@line 7173
     HEAP32[$AsyncCtx71 + 244 >> 2] = $vararg_buffer47; //@line 7175
     HEAP32[$AsyncCtx71 + 248 >> 2] = $76; //@line 7177
     HEAP32[$AsyncCtx71 + 252 >> 2] = $$0208$i; //@line 7179
     HEAP32[$AsyncCtx71 + 256 >> 2] = $4; //@line 7181
     HEAP32[$AsyncCtx71 + 260 >> 2] = $vararg_buffer33; //@line 7183
     HEAP32[$AsyncCtx71 + 264 >> 2] = $vararg_buffer21; //@line 7185
     HEAP32[$AsyncCtx71 + 268 >> 2] = $vararg_buffer55; //@line 7187
     HEAP32[$AsyncCtx71 + 272 >> 2] = $vararg_buffer21; //@line 7189
     sp = STACKTOP; //@line 7190
     STACKTOP = sp; //@line 7191
     return 0; //@line 7191
    }
   case 67:
    {
     _mbed_tracef(2, 3844, 4668, $vararg_buffer27); //@line 7195
     break L26;
     break;
    }
   case 70:
    {
     _mbed_tracef(2, 3844, 4739, $vararg_buffer29); //@line 7200
     break L26;
     break;
    }
   case 72:
    {
     HEAP32[$AsyncCtx87 >> 2] = 65; //@line 7205
     HEAP32[$AsyncCtx87 + 4 >> 2] = $vararg_buffer25; //@line 7207
     HEAP32[$AsyncCtx87 + 8 >> 2] = $vararg_buffer17; //@line 7209
     HEAP32[$AsyncCtx87 + 12 >> 2] = $181; //@line 7211
     HEAP32[$AsyncCtx87 + 16 >> 2] = $vararg_buffer7; //@line 7213
     HEAP32[$AsyncCtx87 + 20 >> 2] = $vararg_buffer43; //@line 7215
     HEAP32[$AsyncCtx87 + 24 >> 2] = $vararg_buffer51; //@line 7217
     HEAP32[$AsyncCtx87 + 28 >> 2] = $vararg_buffer21; //@line 7219
     HEAP32[$AsyncCtx87 + 32 >> 2] = $180; //@line 7221
     HEAP32[$AsyncCtx87 + 36 >> 2] = $vararg_buffer13; //@line 7223
     HEAP32[$AsyncCtx87 + 40 >> 2] = $vararg_buffer49; //@line 7225
     HEAP32[$AsyncCtx87 + 44 >> 2] = $9; //@line 7227
     HEAP32[$AsyncCtx87 + 48 >> 2] = $vararg_buffer41; //@line 7229
     HEAP32[$AsyncCtx87 + 52 >> 2] = $vararg_buffer55; //@line 7231
     HEAP32[$AsyncCtx87 + 56 >> 2] = $182; //@line 7233
     HEAP32[$AsyncCtx87 + 60 >> 2] = $vararg_buffer29; //@line 7235
     HEAP32[$AsyncCtx87 + 64 >> 2] = $vararg_buffer13; //@line 7237
     HEAP32[$AsyncCtx87 + 68 >> 2] = $vararg_buffer41; //@line 7239
     HEAP32[$AsyncCtx87 + 72 >> 2] = $vararg_buffer35; //@line 7241
     HEAP32[$AsyncCtx87 + 76 >> 2] = $184; //@line 7243
     HEAP32[$AsyncCtx87 + 80 >> 2] = $0; //@line 7245
     HEAP32[$AsyncCtx87 + 84 >> 2] = $184; //@line 7247
     HEAP32[$AsyncCtx87 + 88 >> 2] = $vararg_buffer39; //@line 7249
     HEAP32[$AsyncCtx87 + 92 >> 2] = $vararg_buffer27; //@line 7251
     HEAP32[$AsyncCtx87 + 96 >> 2] = $vararg_buffer47; //@line 7253
     HEAP32[$AsyncCtx87 + 100 >> 2] = $vararg_buffer19; //@line 7255
     HEAP32[$AsyncCtx87 + 104 >> 2] = $vararg_buffer7; //@line 7257
     HEAP32[$AsyncCtx87 + 108 >> 2] = $185; //@line 7259
     HEAP32[$AsyncCtx87 + 112 >> 2] = $vararg_buffer9; //@line 7261
     HEAP32[$AsyncCtx87 + 116 >> 2] = $vararg_buffer25; //@line 7263
     HEAP32[$AsyncCtx87 + 120 >> 2] = $vararg_buffer37; //@line 7265
     HEAP32[$AsyncCtx87 + 124 >> 2] = $vararg_buffer49; //@line 7267
     HEAP32[$AsyncCtx87 + 128 >> 2] = $vararg_buffer23; //@line 7269
     HEAP32[$AsyncCtx87 + 132 >> 2] = $vararg_buffer35; //@line 7271
     HEAP32[$AsyncCtx87 + 136 >> 2] = $vararg_buffer39; //@line 7273
     HEAP32[$AsyncCtx87 + 140 >> 2] = $vararg_buffer27; //@line 7275
     HEAP32[$AsyncCtx87 + 144 >> 2] = $9; //@line 7277
     HEAP32[$AsyncCtx87 + 148 >> 2] = $vararg_buffer31; //@line 7279
     HEAP32[$AsyncCtx87 + 152 >> 2] = $vararg_buffer19; //@line 7281
     HEAP32[$AsyncCtx87 + 156 >> 2] = $vararg_buffer45; //@line 7283
     HEAP32[$AsyncCtx87 + 160 >> 2] = $186; //@line 7285
     HEAP32[$AsyncCtx87 + 164 >> 2] = $vararg_buffer51; //@line 7287
     HEAP32[$AsyncCtx87 + 168 >> 2] = $vararg_buffer53; //@line 7289
     HEAP32[$AsyncCtx87 + 172 >> 2] = $vararg_buffer15; //@line 7291
     HEAP32[$AsyncCtx87 + 176 >> 2] = $4; //@line 7293
     HEAP32[$AsyncCtx87 + 180 >> 2] = $vararg_buffer29; //@line 7295
     HEAP32[$AsyncCtx87 + 184 >> 2] = $vararg_buffer31; //@line 7297
     HEAP32[$AsyncCtx87 + 188 >> 2] = $vararg_buffer11; //@line 7299
     HEAP32[$AsyncCtx87 + 192 >> 2] = $vararg_buffer23; //@line 7301
     HEAP32[$AsyncCtx87 + 196 >> 2] = $vararg_buffer53; //@line 7303
     HEAP32[$AsyncCtx87 + 200 >> 2] = $vararg_buffer11; //@line 7305
     HEAP32[$AsyncCtx87 + 204 >> 2] = $vararg_buffer45; //@line 7307
     HEAP32[$AsyncCtx87 + 208 >> 2] = $vararg_buffer15; //@line 7309
     HEAP32[$AsyncCtx87 + 212 >> 2] = $vararg_buffer37; //@line 7311
     HEAP32[$AsyncCtx87 + 216 >> 2] = $vararg_buffer33; //@line 7313
     HEAP32[$AsyncCtx87 + 220 >> 2] = $vararg_buffer17; //@line 7315
     HEAP32[$AsyncCtx87 + 224 >> 2] = $0; //@line 7317
     HEAP32[$AsyncCtx87 + 228 >> 2] = $4; //@line 7319
     HEAP32[$AsyncCtx87 + 232 >> 2] = $vararg_buffer9; //@line 7321
     HEAP32[$AsyncCtx87 + 236 >> 2] = $vararg_buffer47; //@line 7323
     HEAP32[$AsyncCtx87 + 240 >> 2] = $76; //@line 7325
     HEAP32[$AsyncCtx87 + 244 >> 2] = $$0208$i; //@line 7327
     HEAP32[$AsyncCtx87 + 248 >> 2] = $4; //@line 7329
     HEAP32[$AsyncCtx87 + 252 >> 2] = $vararg_buffer33; //@line 7331
     HEAP32[$AsyncCtx87 + 256 >> 2] = $vararg_buffer21; //@line 7333
     HEAP32[$AsyncCtx87 + 260 >> 2] = $vararg_buffer55; //@line 7335
     HEAP32[$AsyncCtx87 + 264 >> 2] = $vararg_buffer43; //@line 7337
     sp = STACKTOP; //@line 7338
     STACKTOP = sp; //@line 7339
     return 0; //@line 7339
    }
   case 74:
    {
     _mbed_tracef(2, 3844, 4804, $vararg_buffer31); //@line 7343
     break L26;
     break;
    }
   case 77:
    {
     _mbed_tracef(2, 3844, 4872, $vararg_buffer33); //@line 7348
     break L26;
     break;
    }
   case 82:
    {
     HEAP32[$AsyncCtx83 >> 2] = 66; //@line 7353
     HEAP32[$AsyncCtx83 + 4 >> 2] = $vararg_buffer25; //@line 7355
     HEAP32[$AsyncCtx83 + 8 >> 2] = $vararg_buffer17; //@line 7357
     HEAP32[$AsyncCtx83 + 12 >> 2] = $181; //@line 7359
     HEAP32[$AsyncCtx83 + 16 >> 2] = $vararg_buffer7; //@line 7361
     HEAP32[$AsyncCtx83 + 20 >> 2] = $vararg_buffer43; //@line 7363
     HEAP32[$AsyncCtx83 + 24 >> 2] = $vararg_buffer51; //@line 7365
     HEAP32[$AsyncCtx83 + 28 >> 2] = $vararg_buffer21; //@line 7367
     HEAP32[$AsyncCtx83 + 32 >> 2] = $180; //@line 7369
     HEAP32[$AsyncCtx83 + 36 >> 2] = $vararg_buffer13; //@line 7371
     HEAP32[$AsyncCtx83 + 40 >> 2] = $vararg_buffer49; //@line 7373
     HEAP32[$AsyncCtx83 + 44 >> 2] = $9; //@line 7375
     HEAP32[$AsyncCtx83 + 48 >> 2] = $vararg_buffer41; //@line 7377
     HEAP32[$AsyncCtx83 + 52 >> 2] = $vararg_buffer55; //@line 7379
     HEAP32[$AsyncCtx83 + 56 >> 2] = $182; //@line 7381
     HEAP32[$AsyncCtx83 + 60 >> 2] = $vararg_buffer29; //@line 7383
     HEAP32[$AsyncCtx83 + 64 >> 2] = $vararg_buffer13; //@line 7385
     HEAP32[$AsyncCtx83 + 68 >> 2] = $vararg_buffer41; //@line 7387
     HEAP32[$AsyncCtx83 + 72 >> 2] = $vararg_buffer35; //@line 7389
     HEAP32[$AsyncCtx83 + 76 >> 2] = $184; //@line 7391
     HEAP32[$AsyncCtx83 + 80 >> 2] = $0; //@line 7393
     HEAP32[$AsyncCtx83 + 84 >> 2] = $184; //@line 7395
     HEAP32[$AsyncCtx83 + 88 >> 2] = $vararg_buffer39; //@line 7397
     HEAP32[$AsyncCtx83 + 92 >> 2] = $vararg_buffer27; //@line 7399
     HEAP32[$AsyncCtx83 + 96 >> 2] = $vararg_buffer47; //@line 7401
     HEAP32[$AsyncCtx83 + 100 >> 2] = $vararg_buffer19; //@line 7403
     HEAP32[$AsyncCtx83 + 104 >> 2] = $vararg_buffer7; //@line 7405
     HEAP32[$AsyncCtx83 + 108 >> 2] = $185; //@line 7407
     HEAP32[$AsyncCtx83 + 112 >> 2] = $vararg_buffer9; //@line 7409
     HEAP32[$AsyncCtx83 + 116 >> 2] = $vararg_buffer25; //@line 7411
     HEAP32[$AsyncCtx83 + 120 >> 2] = $vararg_buffer37; //@line 7413
     HEAP32[$AsyncCtx83 + 124 >> 2] = $vararg_buffer49; //@line 7415
     HEAP32[$AsyncCtx83 + 128 >> 2] = $vararg_buffer23; //@line 7417
     HEAP32[$AsyncCtx83 + 132 >> 2] = $vararg_buffer35; //@line 7419
     HEAP32[$AsyncCtx83 + 136 >> 2] = $vararg_buffer39; //@line 7421
     HEAP32[$AsyncCtx83 + 140 >> 2] = $vararg_buffer27; //@line 7423
     HEAP32[$AsyncCtx83 + 144 >> 2] = $9; //@line 7425
     HEAP32[$AsyncCtx83 + 148 >> 2] = $vararg_buffer31; //@line 7427
     HEAP32[$AsyncCtx83 + 152 >> 2] = $vararg_buffer19; //@line 7429
     HEAP32[$AsyncCtx83 + 156 >> 2] = $vararg_buffer45; //@line 7431
     HEAP32[$AsyncCtx83 + 160 >> 2] = $186; //@line 7433
     HEAP32[$AsyncCtx83 + 164 >> 2] = $vararg_buffer51; //@line 7435
     HEAP32[$AsyncCtx83 + 168 >> 2] = $vararg_buffer53; //@line 7437
     HEAP32[$AsyncCtx83 + 172 >> 2] = $vararg_buffer15; //@line 7439
     HEAP32[$AsyncCtx83 + 176 >> 2] = $4; //@line 7441
     HEAP32[$AsyncCtx83 + 180 >> 2] = $vararg_buffer29; //@line 7443
     HEAP32[$AsyncCtx83 + 184 >> 2] = $vararg_buffer31; //@line 7445
     HEAP32[$AsyncCtx83 + 188 >> 2] = $vararg_buffer11; //@line 7447
     HEAP32[$AsyncCtx83 + 192 >> 2] = $vararg_buffer23; //@line 7449
     HEAP32[$AsyncCtx83 + 196 >> 2] = $vararg_buffer53; //@line 7451
     HEAP32[$AsyncCtx83 + 200 >> 2] = $vararg_buffer11; //@line 7453
     HEAP32[$AsyncCtx83 + 204 >> 2] = $vararg_buffer45; //@line 7455
     HEAP32[$AsyncCtx83 + 208 >> 2] = $vararg_buffer15; //@line 7457
     HEAP32[$AsyncCtx83 + 212 >> 2] = $vararg_buffer37; //@line 7459
     HEAP32[$AsyncCtx83 + 216 >> 2] = $vararg_buffer33; //@line 7461
     HEAP32[$AsyncCtx83 + 220 >> 2] = $vararg_buffer17; //@line 7463
     HEAP32[$AsyncCtx83 + 224 >> 2] = $0; //@line 7465
     HEAP32[$AsyncCtx83 + 228 >> 2] = $4; //@line 7467
     HEAP32[$AsyncCtx83 + 232 >> 2] = $vararg_buffer9; //@line 7469
     HEAP32[$AsyncCtx83 + 236 >> 2] = $vararg_buffer47; //@line 7471
     HEAP32[$AsyncCtx83 + 240 >> 2] = $76; //@line 7473
     HEAP32[$AsyncCtx83 + 244 >> 2] = $$0208$i; //@line 7475
     HEAP32[$AsyncCtx83 + 248 >> 2] = $4; //@line 7477
     HEAP32[$AsyncCtx83 + 252 >> 2] = $vararg_buffer33; //@line 7479
     HEAP32[$AsyncCtx83 + 256 >> 2] = $vararg_buffer21; //@line 7481
     HEAP32[$AsyncCtx83 + 260 >> 2] = $vararg_buffer55; //@line 7483
     HEAP32[$AsyncCtx83 + 264 >> 2] = $vararg_buffer43; //@line 7485
     sp = STACKTOP; //@line 7486
     STACKTOP = sp; //@line 7487
     return 0; //@line 7487
    }
   case 84:
    {
     _mbed_tracef(2, 3844, 4935, $vararg_buffer35); //@line 7491
     break L26;
     break;
    }
   case 86:
    {
     HEAP32[$AsyncCtx79 >> 2] = 67; //@line 7496
     HEAP32[$AsyncCtx79 + 4 >> 2] = $vararg_buffer25; //@line 7498
     HEAP32[$AsyncCtx79 + 8 >> 2] = $vararg_buffer17; //@line 7500
     HEAP32[$AsyncCtx79 + 12 >> 2] = $181; //@line 7502
     HEAP32[$AsyncCtx79 + 16 >> 2] = $vararg_buffer7; //@line 7504
     HEAP32[$AsyncCtx79 + 20 >> 2] = $vararg_buffer43; //@line 7506
     HEAP32[$AsyncCtx79 + 24 >> 2] = $vararg_buffer51; //@line 7508
     HEAP32[$AsyncCtx79 + 28 >> 2] = $vararg_buffer21; //@line 7510
     HEAP32[$AsyncCtx79 + 32 >> 2] = $180; //@line 7512
     HEAP32[$AsyncCtx79 + 36 >> 2] = $vararg_buffer13; //@line 7514
     HEAP32[$AsyncCtx79 + 40 >> 2] = $vararg_buffer49; //@line 7516
     HEAP32[$AsyncCtx79 + 44 >> 2] = $9; //@line 7518
     HEAP32[$AsyncCtx79 + 48 >> 2] = $vararg_buffer41; //@line 7520
     HEAP32[$AsyncCtx79 + 52 >> 2] = $vararg_buffer55; //@line 7522
     HEAP32[$AsyncCtx79 + 56 >> 2] = $182; //@line 7524
     HEAP32[$AsyncCtx79 + 60 >> 2] = $vararg_buffer29; //@line 7526
     HEAP32[$AsyncCtx79 + 64 >> 2] = $vararg_buffer13; //@line 7528
     HEAP32[$AsyncCtx79 + 68 >> 2] = $vararg_buffer41; //@line 7530
     HEAP32[$AsyncCtx79 + 72 >> 2] = $vararg_buffer35; //@line 7532
     HEAP32[$AsyncCtx79 + 76 >> 2] = $184; //@line 7534
     HEAP32[$AsyncCtx79 + 80 >> 2] = $0; //@line 7536
     HEAP32[$AsyncCtx79 + 84 >> 2] = $184; //@line 7538
     HEAP32[$AsyncCtx79 + 88 >> 2] = $vararg_buffer39; //@line 7540
     HEAP32[$AsyncCtx79 + 92 >> 2] = $vararg_buffer27; //@line 7542
     HEAP32[$AsyncCtx79 + 96 >> 2] = $vararg_buffer47; //@line 7544
     HEAP32[$AsyncCtx79 + 100 >> 2] = $vararg_buffer19; //@line 7546
     HEAP32[$AsyncCtx79 + 104 >> 2] = $vararg_buffer7; //@line 7548
     HEAP32[$AsyncCtx79 + 108 >> 2] = $185; //@line 7550
     HEAP32[$AsyncCtx79 + 112 >> 2] = $vararg_buffer9; //@line 7552
     HEAP32[$AsyncCtx79 + 116 >> 2] = $vararg_buffer25; //@line 7554
     HEAP32[$AsyncCtx79 + 120 >> 2] = $vararg_buffer37; //@line 7556
     HEAP32[$AsyncCtx79 + 124 >> 2] = $vararg_buffer49; //@line 7558
     HEAP32[$AsyncCtx79 + 128 >> 2] = $vararg_buffer23; //@line 7560
     HEAP32[$AsyncCtx79 + 132 >> 2] = $vararg_buffer35; //@line 7562
     HEAP32[$AsyncCtx79 + 136 >> 2] = $vararg_buffer39; //@line 7564
     HEAP32[$AsyncCtx79 + 140 >> 2] = $vararg_buffer27; //@line 7566
     HEAP32[$AsyncCtx79 + 144 >> 2] = $9; //@line 7568
     HEAP32[$AsyncCtx79 + 148 >> 2] = $vararg_buffer31; //@line 7570
     HEAP32[$AsyncCtx79 + 152 >> 2] = $vararg_buffer19; //@line 7572
     HEAP32[$AsyncCtx79 + 156 >> 2] = $vararg_buffer45; //@line 7574
     HEAP32[$AsyncCtx79 + 160 >> 2] = $186; //@line 7576
     HEAP32[$AsyncCtx79 + 164 >> 2] = $vararg_buffer51; //@line 7578
     HEAP32[$AsyncCtx79 + 168 >> 2] = $vararg_buffer53; //@line 7580
     HEAP32[$AsyncCtx79 + 172 >> 2] = $vararg_buffer15; //@line 7582
     HEAP32[$AsyncCtx79 + 176 >> 2] = $4; //@line 7584
     HEAP32[$AsyncCtx79 + 180 >> 2] = $vararg_buffer29; //@line 7586
     HEAP32[$AsyncCtx79 + 184 >> 2] = $vararg_buffer31; //@line 7588
     HEAP32[$AsyncCtx79 + 188 >> 2] = $vararg_buffer11; //@line 7590
     HEAP32[$AsyncCtx79 + 192 >> 2] = $vararg_buffer23; //@line 7592
     HEAP32[$AsyncCtx79 + 196 >> 2] = $vararg_buffer53; //@line 7594
     HEAP32[$AsyncCtx79 + 200 >> 2] = $vararg_buffer11; //@line 7596
     HEAP32[$AsyncCtx79 + 204 >> 2] = $vararg_buffer45; //@line 7598
     HEAP32[$AsyncCtx79 + 208 >> 2] = $vararg_buffer15; //@line 7600
     HEAP32[$AsyncCtx79 + 212 >> 2] = $vararg_buffer37; //@line 7602
     HEAP32[$AsyncCtx79 + 216 >> 2] = $vararg_buffer33; //@line 7604
     HEAP32[$AsyncCtx79 + 220 >> 2] = $vararg_buffer17; //@line 7606
     HEAP32[$AsyncCtx79 + 224 >> 2] = $0; //@line 7608
     HEAP32[$AsyncCtx79 + 228 >> 2] = $4; //@line 7610
     HEAP32[$AsyncCtx79 + 232 >> 2] = $vararg_buffer9; //@line 7612
     HEAP32[$AsyncCtx79 + 236 >> 2] = $vararg_buffer47; //@line 7614
     HEAP32[$AsyncCtx79 + 240 >> 2] = $76; //@line 7616
     HEAP32[$AsyncCtx79 + 244 >> 2] = $$0208$i; //@line 7618
     HEAP32[$AsyncCtx79 + 248 >> 2] = $4; //@line 7620
     HEAP32[$AsyncCtx79 + 252 >> 2] = $vararg_buffer33; //@line 7622
     HEAP32[$AsyncCtx79 + 256 >> 2] = $vararg_buffer21; //@line 7624
     HEAP32[$AsyncCtx79 + 260 >> 2] = $vararg_buffer55; //@line 7626
     HEAP32[$AsyncCtx79 + 264 >> 2] = $vararg_buffer43; //@line 7628
     sp = STACKTOP; //@line 7629
     STACKTOP = sp; //@line 7630
     return 0; //@line 7630
    }
   case 88:
    {
     _mbed_tracef(2, 3844, 5004, $vararg_buffer37); //@line 7634
     break L26;
     break;
    }
   case 91:
    {
     _mbed_tracef(2, 3844, 5067, $vararg_buffer39); //@line 7639
     break L26;
     break;
    }
   case 96:
    {
     HEAP32[$AsyncCtx75 >> 2] = 68; //@line 7644
     HEAP32[$AsyncCtx75 + 4 >> 2] = $vararg_buffer25; //@line 7646
     HEAP32[$AsyncCtx75 + 8 >> 2] = $vararg_buffer17; //@line 7648
     HEAP32[$AsyncCtx75 + 12 >> 2] = $181; //@line 7650
     HEAP32[$AsyncCtx75 + 16 >> 2] = $vararg_buffer7; //@line 7652
     HEAP32[$AsyncCtx75 + 20 >> 2] = $vararg_buffer43; //@line 7654
     HEAP32[$AsyncCtx75 + 24 >> 2] = $vararg_buffer51; //@line 7656
     HEAP32[$AsyncCtx75 + 28 >> 2] = $vararg_buffer21; //@line 7658
     HEAP32[$AsyncCtx75 + 32 >> 2] = $180; //@line 7660
     HEAP32[$AsyncCtx75 + 36 >> 2] = $vararg_buffer13; //@line 7662
     HEAP32[$AsyncCtx75 + 40 >> 2] = $vararg_buffer49; //@line 7664
     HEAP32[$AsyncCtx75 + 44 >> 2] = $9; //@line 7666
     HEAP32[$AsyncCtx75 + 48 >> 2] = $vararg_buffer41; //@line 7668
     HEAP32[$AsyncCtx75 + 52 >> 2] = $vararg_buffer55; //@line 7670
     HEAP32[$AsyncCtx75 + 56 >> 2] = $182; //@line 7672
     HEAP32[$AsyncCtx75 + 60 >> 2] = $vararg_buffer29; //@line 7674
     HEAP32[$AsyncCtx75 + 64 >> 2] = $vararg_buffer13; //@line 7676
     HEAP32[$AsyncCtx75 + 68 >> 2] = $vararg_buffer41; //@line 7678
     HEAP32[$AsyncCtx75 + 72 >> 2] = $vararg_buffer35; //@line 7680
     HEAP32[$AsyncCtx75 + 76 >> 2] = $184; //@line 7682
     HEAP32[$AsyncCtx75 + 80 >> 2] = $0; //@line 7684
     HEAP32[$AsyncCtx75 + 84 >> 2] = $184; //@line 7686
     HEAP32[$AsyncCtx75 + 88 >> 2] = $vararg_buffer39; //@line 7688
     HEAP32[$AsyncCtx75 + 92 >> 2] = $vararg_buffer27; //@line 7690
     HEAP32[$AsyncCtx75 + 96 >> 2] = $vararg_buffer47; //@line 7692
     HEAP32[$AsyncCtx75 + 100 >> 2] = $vararg_buffer19; //@line 7694
     HEAP32[$AsyncCtx75 + 104 >> 2] = $vararg_buffer7; //@line 7696
     HEAP32[$AsyncCtx75 + 108 >> 2] = $185; //@line 7698
     HEAP32[$AsyncCtx75 + 112 >> 2] = $vararg_buffer9; //@line 7700
     HEAP32[$AsyncCtx75 + 116 >> 2] = $vararg_buffer25; //@line 7702
     HEAP32[$AsyncCtx75 + 120 >> 2] = $vararg_buffer37; //@line 7704
     HEAP32[$AsyncCtx75 + 124 >> 2] = $vararg_buffer49; //@line 7706
     HEAP32[$AsyncCtx75 + 128 >> 2] = $vararg_buffer23; //@line 7708
     HEAP32[$AsyncCtx75 + 132 >> 2] = $vararg_buffer35; //@line 7710
     HEAP32[$AsyncCtx75 + 136 >> 2] = $vararg_buffer39; //@line 7712
     HEAP32[$AsyncCtx75 + 140 >> 2] = $vararg_buffer27; //@line 7714
     HEAP32[$AsyncCtx75 + 144 >> 2] = $9; //@line 7716
     HEAP32[$AsyncCtx75 + 148 >> 2] = $vararg_buffer31; //@line 7718
     HEAP32[$AsyncCtx75 + 152 >> 2] = $vararg_buffer19; //@line 7720
     HEAP32[$AsyncCtx75 + 156 >> 2] = $vararg_buffer45; //@line 7722
     HEAP32[$AsyncCtx75 + 160 >> 2] = $186; //@line 7724
     HEAP32[$AsyncCtx75 + 164 >> 2] = $vararg_buffer51; //@line 7726
     HEAP32[$AsyncCtx75 + 168 >> 2] = $vararg_buffer53; //@line 7728
     HEAP32[$AsyncCtx75 + 172 >> 2] = $vararg_buffer15; //@line 7730
     HEAP32[$AsyncCtx75 + 176 >> 2] = $4; //@line 7732
     HEAP32[$AsyncCtx75 + 180 >> 2] = $vararg_buffer29; //@line 7734
     HEAP32[$AsyncCtx75 + 184 >> 2] = $vararg_buffer31; //@line 7736
     HEAP32[$AsyncCtx75 + 188 >> 2] = $vararg_buffer11; //@line 7738
     HEAP32[$AsyncCtx75 + 192 >> 2] = $vararg_buffer23; //@line 7740
     HEAP32[$AsyncCtx75 + 196 >> 2] = $vararg_buffer53; //@line 7742
     HEAP32[$AsyncCtx75 + 200 >> 2] = $vararg_buffer11; //@line 7744
     HEAP32[$AsyncCtx75 + 204 >> 2] = $vararg_buffer45; //@line 7746
     HEAP32[$AsyncCtx75 + 208 >> 2] = $vararg_buffer15; //@line 7748
     HEAP32[$AsyncCtx75 + 212 >> 2] = $vararg_buffer37; //@line 7750
     HEAP32[$AsyncCtx75 + 216 >> 2] = $vararg_buffer33; //@line 7752
     HEAP32[$AsyncCtx75 + 220 >> 2] = $vararg_buffer17; //@line 7754
     HEAP32[$AsyncCtx75 + 224 >> 2] = $0; //@line 7756
     HEAP32[$AsyncCtx75 + 228 >> 2] = $4; //@line 7758
     HEAP32[$AsyncCtx75 + 232 >> 2] = $vararg_buffer9; //@line 7760
     HEAP32[$AsyncCtx75 + 236 >> 2] = $vararg_buffer47; //@line 7762
     HEAP32[$AsyncCtx75 + 240 >> 2] = $76; //@line 7764
     HEAP32[$AsyncCtx75 + 244 >> 2] = $$0208$i; //@line 7766
     HEAP32[$AsyncCtx75 + 248 >> 2] = $4; //@line 7768
     HEAP32[$AsyncCtx75 + 252 >> 2] = $vararg_buffer33; //@line 7770
     HEAP32[$AsyncCtx75 + 256 >> 2] = $vararg_buffer21; //@line 7772
     HEAP32[$AsyncCtx75 + 260 >> 2] = $vararg_buffer55; //@line 7774
     HEAP32[$AsyncCtx75 + 264 >> 2] = $vararg_buffer43; //@line 7776
     sp = STACKTOP; //@line 7777
     STACKTOP = sp; //@line 7778
     return 0; //@line 7778
    }
   case 98:
    {
     _mbed_tracef(2, 3844, 5129, $vararg_buffer41); //@line 7782
     break L26;
     break;
    }
   case 101:
    {
     _mbed_tracef(2, 3844, 5193, $vararg_buffer43); //@line 7787
     break L26;
     break;
    }
   case 107:
    {
     _mbed_tracef(2, 3844, 5254, $vararg_buffer45); //@line 7792
     break L26;
     break;
    }
   case 113:
    {
     _mbed_tracef(2, 3844, 5315, $vararg_buffer47); //@line 7797
     break L26;
     break;
    }
   case 119:
    {
     _mbed_tracef(2, 3844, 5376, $vararg_buffer49); //@line 7802
     break L26;
     break;
    }
   case 125:
    {
     _mbed_tracef(2, 3844, 5436, $vararg_buffer51); //@line 7807
     break L26;
     break;
    }
   case 129:
    {
     _mbed_tracef(2, 3844, 5496, $vararg_buffer53); //@line 7812
     break L26;
     break;
    }
   case 132:
    {
     if (($189 - $181 | 0) >= ($180 | 0)) {
      $$0 = $9; //@line 7821
      STACKTOP = sp; //@line 7822
      return $$0 | 0; //@line 7822
     }
     if ((HEAP8[$189 >> 0] | 0) == -1) {
      $990 = $189 + 1 | 0; //@line 7827
      HEAP32[$4 >> 2] = $990; //@line 7828
      $991 = $990; //@line 7829
      $993 = $181 - $991 + $180 | 0; //@line 7831
      HEAP16[$9 + 24 >> 1] = $993; //@line 7834
      if ($993 & 65535 | 0) {
       HEAP32[$9 + 36 >> 2] = $991; //@line 7839
       $$0 = $9; //@line 7840
       STACKTOP = sp; //@line 7841
       return $$0 | 0; //@line 7841
      }
     } else {
      _mbed_tracef(2, 3844, 5543, $vararg_buffer55); //@line 7844
     }
     HEAP32[$9 + 4 >> 2] = 1; //@line 7847
     $$0 = $9; //@line 7848
     STACKTOP = sp; //@line 7849
     return $$0 | 0; //@line 7849
    }
   }
   _mbed_tracef(2, 3844, 4220, $vararg_buffer13); //@line 7853
  }
 } while (0);
 HEAP32[$9 + 4 >> 2] = 1; //@line 7857
 $$0 = $9; //@line 7858
 STACKTOP = sp; //@line 7859
 return $$0 | 0; //@line 7859
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 20086
 STACKTOP = STACKTOP + 16 | 0; //@line 20087
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20087
 $1 = sp; //@line 20088
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 20095
   $7 = $6 >>> 3; //@line 20096
   $8 = HEAP32[2541] | 0; //@line 20097
   $9 = $8 >>> $7; //@line 20098
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 20104
    $16 = 10204 + ($14 << 1 << 2) | 0; //@line 20106
    $17 = $16 + 8 | 0; //@line 20107
    $18 = HEAP32[$17 >> 2] | 0; //@line 20108
    $19 = $18 + 8 | 0; //@line 20109
    $20 = HEAP32[$19 >> 2] | 0; //@line 20110
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[2541] = $8 & ~(1 << $14); //@line 20117
     } else {
      if ((HEAP32[2545] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 20122
      }
      $27 = $20 + 12 | 0; //@line 20125
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 20129
       HEAP32[$17 >> 2] = $20; //@line 20130
       break;
      } else {
       _abort(); //@line 20133
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 20138
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 20141
    $34 = $18 + $30 + 4 | 0; //@line 20143
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 20146
    $$0 = $19; //@line 20147
    STACKTOP = sp; //@line 20148
    return $$0 | 0; //@line 20148
   }
   $37 = HEAP32[2543] | 0; //@line 20150
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 20156
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 20159
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 20162
     $49 = $47 >>> 12 & 16; //@line 20164
     $50 = $47 >>> $49; //@line 20165
     $52 = $50 >>> 5 & 8; //@line 20167
     $54 = $50 >>> $52; //@line 20169
     $56 = $54 >>> 2 & 4; //@line 20171
     $58 = $54 >>> $56; //@line 20173
     $60 = $58 >>> 1 & 2; //@line 20175
     $62 = $58 >>> $60; //@line 20177
     $64 = $62 >>> 1 & 1; //@line 20179
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 20182
     $69 = 10204 + ($67 << 1 << 2) | 0; //@line 20184
     $70 = $69 + 8 | 0; //@line 20185
     $71 = HEAP32[$70 >> 2] | 0; //@line 20186
     $72 = $71 + 8 | 0; //@line 20187
     $73 = HEAP32[$72 >> 2] | 0; //@line 20188
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 20194
       HEAP32[2541] = $77; //@line 20195
       $98 = $77; //@line 20196
      } else {
       if ((HEAP32[2545] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 20201
       }
       $80 = $73 + 12 | 0; //@line 20204
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 20208
        HEAP32[$70 >> 2] = $73; //@line 20209
        $98 = $8; //@line 20210
        break;
       } else {
        _abort(); //@line 20213
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 20218
     $84 = $83 - $6 | 0; //@line 20219
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 20222
     $87 = $71 + $6 | 0; //@line 20223
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 20226
     HEAP32[$71 + $83 >> 2] = $84; //@line 20228
     if ($37 | 0) {
      $92 = HEAP32[2546] | 0; //@line 20231
      $93 = $37 >>> 3; //@line 20232
      $95 = 10204 + ($93 << 1 << 2) | 0; //@line 20234
      $96 = 1 << $93; //@line 20235
      if (!($98 & $96)) {
       HEAP32[2541] = $98 | $96; //@line 20240
       $$0199 = $95; //@line 20242
       $$pre$phiZ2D = $95 + 8 | 0; //@line 20242
      } else {
       $101 = $95 + 8 | 0; //@line 20244
       $102 = HEAP32[$101 >> 2] | 0; //@line 20245
       if ((HEAP32[2545] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 20249
       } else {
        $$0199 = $102; //@line 20252
        $$pre$phiZ2D = $101; //@line 20252
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 20255
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 20257
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 20259
      HEAP32[$92 + 12 >> 2] = $95; //@line 20261
     }
     HEAP32[2543] = $84; //@line 20263
     HEAP32[2546] = $87; //@line 20264
     $$0 = $72; //@line 20265
     STACKTOP = sp; //@line 20266
     return $$0 | 0; //@line 20266
    }
    $108 = HEAP32[2542] | 0; //@line 20268
    if (!$108) {
     $$0197 = $6; //@line 20271
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 20275
     $114 = $112 >>> 12 & 16; //@line 20277
     $115 = $112 >>> $114; //@line 20278
     $117 = $115 >>> 5 & 8; //@line 20280
     $119 = $115 >>> $117; //@line 20282
     $121 = $119 >>> 2 & 4; //@line 20284
     $123 = $119 >>> $121; //@line 20286
     $125 = $123 >>> 1 & 2; //@line 20288
     $127 = $123 >>> $125; //@line 20290
     $129 = $127 >>> 1 & 1; //@line 20292
     $134 = HEAP32[10468 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 20297
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 20301
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 20307
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 20310
      $$0193$lcssa$i = $138; //@line 20310
     } else {
      $$01926$i = $134; //@line 20312
      $$01935$i = $138; //@line 20312
      $146 = $143; //@line 20312
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 20317
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 20318
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 20319
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 20320
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 20326
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 20329
        $$0193$lcssa$i = $$$0193$i; //@line 20329
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 20332
        $$01935$i = $$$0193$i; //@line 20332
       }
      }
     }
     $157 = HEAP32[2545] | 0; //@line 20336
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 20339
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 20342
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 20345
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 20349
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 20351
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 20355
       $176 = HEAP32[$175 >> 2] | 0; //@line 20356
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 20359
        $179 = HEAP32[$178 >> 2] | 0; //@line 20360
        if (!$179) {
         $$3$i = 0; //@line 20363
         break;
        } else {
         $$1196$i = $179; //@line 20366
         $$1198$i = $178; //@line 20366
        }
       } else {
        $$1196$i = $176; //@line 20369
        $$1198$i = $175; //@line 20369
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 20372
        $182 = HEAP32[$181 >> 2] | 0; //@line 20373
        if ($182 | 0) {
         $$1196$i = $182; //@line 20376
         $$1198$i = $181; //@line 20376
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 20379
        $185 = HEAP32[$184 >> 2] | 0; //@line 20380
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 20385
         $$1198$i = $184; //@line 20385
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 20390
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 20393
        $$3$i = $$1196$i; //@line 20394
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 20399
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 20402
       }
       $169 = $167 + 12 | 0; //@line 20405
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 20409
       }
       $172 = $164 + 8 | 0; //@line 20412
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 20416
        HEAP32[$172 >> 2] = $167; //@line 20417
        $$3$i = $164; //@line 20418
        break;
       } else {
        _abort(); //@line 20421
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 20430
       $191 = 10468 + ($190 << 2) | 0; //@line 20431
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 20436
         if (!$$3$i) {
          HEAP32[2542] = $108 & ~(1 << $190); //@line 20442
          break L73;
         }
        } else {
         if ((HEAP32[2545] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 20449
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 20457
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[2545] | 0; //@line 20467
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 20470
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 20474
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 20476
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 20482
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 20486
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 20488
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 20494
       if ($214 | 0) {
        if ((HEAP32[2545] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 20500
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 20504
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 20506
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 20514
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 20517
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 20519
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 20522
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 20526
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 20529
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 20531
      if ($37 | 0) {
       $234 = HEAP32[2546] | 0; //@line 20534
       $235 = $37 >>> 3; //@line 20535
       $237 = 10204 + ($235 << 1 << 2) | 0; //@line 20537
       $238 = 1 << $235; //@line 20538
       if (!($8 & $238)) {
        HEAP32[2541] = $8 | $238; //@line 20543
        $$0189$i = $237; //@line 20545
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 20545
       } else {
        $242 = $237 + 8 | 0; //@line 20547
        $243 = HEAP32[$242 >> 2] | 0; //@line 20548
        if ((HEAP32[2545] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 20552
        } else {
         $$0189$i = $243; //@line 20555
         $$pre$phi$iZ2D = $242; //@line 20555
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 20558
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 20560
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 20562
       HEAP32[$234 + 12 >> 2] = $237; //@line 20564
      }
      HEAP32[2543] = $$0193$lcssa$i; //@line 20566
      HEAP32[2546] = $159; //@line 20567
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 20570
     STACKTOP = sp; //@line 20571
     return $$0 | 0; //@line 20571
    }
   } else {
    $$0197 = $6; //@line 20574
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 20579
   } else {
    $251 = $0 + 11 | 0; //@line 20581
    $252 = $251 & -8; //@line 20582
    $253 = HEAP32[2542] | 0; //@line 20583
    if (!$253) {
     $$0197 = $252; //@line 20586
    } else {
     $255 = 0 - $252 | 0; //@line 20588
     $256 = $251 >>> 8; //@line 20589
     if (!$256) {
      $$0358$i = 0; //@line 20592
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 20596
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 20600
       $262 = $256 << $261; //@line 20601
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 20604
       $267 = $262 << $265; //@line 20606
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 20609
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 20614
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 20620
      }
     }
     $282 = HEAP32[10468 + ($$0358$i << 2) >> 2] | 0; //@line 20624
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 20628
       $$3$i203 = 0; //@line 20628
       $$3350$i = $255; //@line 20628
       label = 81; //@line 20629
      } else {
       $$0342$i = 0; //@line 20636
       $$0347$i = $255; //@line 20636
       $$0353$i = $282; //@line 20636
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 20636
       $$0362$i = 0; //@line 20636
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 20641
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 20646
          $$435113$i = 0; //@line 20646
          $$435712$i = $$0353$i; //@line 20646
          label = 85; //@line 20647
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 20650
          $$1348$i = $292; //@line 20650
         }
        } else {
         $$1343$i = $$0342$i; //@line 20653
         $$1348$i = $$0347$i; //@line 20653
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 20656
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 20659
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 20663
        $302 = ($$0353$i | 0) == 0; //@line 20664
        if ($302) {
         $$2355$i = $$1363$i; //@line 20669
         $$3$i203 = $$1343$i; //@line 20669
         $$3350$i = $$1348$i; //@line 20669
         label = 81; //@line 20670
         break;
        } else {
         $$0342$i = $$1343$i; //@line 20673
         $$0347$i = $$1348$i; //@line 20673
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 20673
         $$0362$i = $$1363$i; //@line 20673
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 20683
       $309 = $253 & ($306 | 0 - $306); //@line 20686
       if (!$309) {
        $$0197 = $252; //@line 20689
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 20694
       $315 = $313 >>> 12 & 16; //@line 20696
       $316 = $313 >>> $315; //@line 20697
       $318 = $316 >>> 5 & 8; //@line 20699
       $320 = $316 >>> $318; //@line 20701
       $322 = $320 >>> 2 & 4; //@line 20703
       $324 = $320 >>> $322; //@line 20705
       $326 = $324 >>> 1 & 2; //@line 20707
       $328 = $324 >>> $326; //@line 20709
       $330 = $328 >>> 1 & 1; //@line 20711
       $$4$ph$i = 0; //@line 20717
       $$4357$ph$i = HEAP32[10468 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 20717
      } else {
       $$4$ph$i = $$3$i203; //@line 20719
       $$4357$ph$i = $$2355$i; //@line 20719
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 20723
       $$4351$lcssa$i = $$3350$i; //@line 20723
      } else {
       $$414$i = $$4$ph$i; //@line 20725
       $$435113$i = $$3350$i; //@line 20725
       $$435712$i = $$4357$ph$i; //@line 20725
       label = 85; //@line 20726
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 20731
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 20735
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 20736
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 20737
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 20738
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 20744
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 20747
        $$4351$lcssa$i = $$$4351$i; //@line 20747
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 20750
        $$435113$i = $$$4351$i; //@line 20750
        label = 85; //@line 20751
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 20757
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[2543] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[2545] | 0; //@line 20763
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 20766
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 20769
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 20772
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 20776
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 20778
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 20782
         $371 = HEAP32[$370 >> 2] | 0; //@line 20783
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 20786
          $374 = HEAP32[$373 >> 2] | 0; //@line 20787
          if (!$374) {
           $$3372$i = 0; //@line 20790
           break;
          } else {
           $$1370$i = $374; //@line 20793
           $$1374$i = $373; //@line 20793
          }
         } else {
          $$1370$i = $371; //@line 20796
          $$1374$i = $370; //@line 20796
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 20799
          $377 = HEAP32[$376 >> 2] | 0; //@line 20800
          if ($377 | 0) {
           $$1370$i = $377; //@line 20803
           $$1374$i = $376; //@line 20803
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 20806
          $380 = HEAP32[$379 >> 2] | 0; //@line 20807
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 20812
           $$1374$i = $379; //@line 20812
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 20817
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 20820
          $$3372$i = $$1370$i; //@line 20821
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 20826
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 20829
         }
         $364 = $362 + 12 | 0; //@line 20832
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 20836
         }
         $367 = $359 + 8 | 0; //@line 20839
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 20843
          HEAP32[$367 >> 2] = $362; //@line 20844
          $$3372$i = $359; //@line 20845
          break;
         } else {
          _abort(); //@line 20848
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 20856
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 20859
         $386 = 10468 + ($385 << 2) | 0; //@line 20860
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 20865
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 20870
            HEAP32[2542] = $391; //@line 20871
            $475 = $391; //@line 20872
            break L164;
           }
          } else {
           if ((HEAP32[2545] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 20879
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 20887
            if (!$$3372$i) {
             $475 = $253; //@line 20890
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[2545] | 0; //@line 20898
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 20901
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 20905
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 20907
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 20913
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 20917
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 20919
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 20925
         if (!$409) {
          $475 = $253; //@line 20928
         } else {
          if ((HEAP32[2545] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 20933
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 20937
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 20939
           $475 = $253; //@line 20940
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 20949
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 20952
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 20954
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 20957
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 20961
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 20964
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 20966
         $428 = $$4351$lcssa$i >>> 3; //@line 20967
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 10204 + ($428 << 1 << 2) | 0; //@line 20971
          $432 = HEAP32[2541] | 0; //@line 20972
          $433 = 1 << $428; //@line 20973
          if (!($432 & $433)) {
           HEAP32[2541] = $432 | $433; //@line 20978
           $$0368$i = $431; //@line 20980
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 20980
          } else {
           $437 = $431 + 8 | 0; //@line 20982
           $438 = HEAP32[$437 >> 2] | 0; //@line 20983
           if ((HEAP32[2545] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 20987
           } else {
            $$0368$i = $438; //@line 20990
            $$pre$phi$i211Z2D = $437; //@line 20990
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 20993
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 20995
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 20997
          HEAP32[$354 + 12 >> 2] = $431; //@line 20999
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 21002
         if (!$444) {
          $$0361$i = 0; //@line 21005
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 21009
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 21013
           $450 = $444 << $449; //@line 21014
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 21017
           $455 = $450 << $453; //@line 21019
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 21022
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 21027
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 21033
          }
         }
         $469 = 10468 + ($$0361$i << 2) | 0; //@line 21036
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 21038
         $471 = $354 + 16 | 0; //@line 21039
         HEAP32[$471 + 4 >> 2] = 0; //@line 21041
         HEAP32[$471 >> 2] = 0; //@line 21042
         $473 = 1 << $$0361$i; //@line 21043
         if (!($475 & $473)) {
          HEAP32[2542] = $475 | $473; //@line 21048
          HEAP32[$469 >> 2] = $354; //@line 21049
          HEAP32[$354 + 24 >> 2] = $469; //@line 21051
          HEAP32[$354 + 12 >> 2] = $354; //@line 21053
          HEAP32[$354 + 8 >> 2] = $354; //@line 21055
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 21064
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 21064
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 21071
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 21075
          $494 = HEAP32[$492 >> 2] | 0; //@line 21077
          if (!$494) {
           label = 136; //@line 21080
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 21083
           $$0345$i = $494; //@line 21083
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[2545] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 21090
          } else {
           HEAP32[$492 >> 2] = $354; //@line 21093
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 21095
           HEAP32[$354 + 12 >> 2] = $354; //@line 21097
           HEAP32[$354 + 8 >> 2] = $354; //@line 21099
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 21104
          $502 = HEAP32[$501 >> 2] | 0; //@line 21105
          $503 = HEAP32[2545] | 0; //@line 21106
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 21112
           HEAP32[$501 >> 2] = $354; //@line 21113
           HEAP32[$354 + 8 >> 2] = $502; //@line 21115
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 21117
           HEAP32[$354 + 24 >> 2] = 0; //@line 21119
           break;
          } else {
           _abort(); //@line 21122
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 21129
       STACKTOP = sp; //@line 21130
       return $$0 | 0; //@line 21130
      } else {
       $$0197 = $252; //@line 21132
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[2543] | 0; //@line 21139
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 21142
  $515 = HEAP32[2546] | 0; //@line 21143
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 21146
   HEAP32[2546] = $517; //@line 21147
   HEAP32[2543] = $514; //@line 21148
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 21151
   HEAP32[$515 + $512 >> 2] = $514; //@line 21153
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 21156
  } else {
   HEAP32[2543] = 0; //@line 21158
   HEAP32[2546] = 0; //@line 21159
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 21162
   $526 = $515 + $512 + 4 | 0; //@line 21164
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 21167
  }
  $$0 = $515 + 8 | 0; //@line 21170
  STACKTOP = sp; //@line 21171
  return $$0 | 0; //@line 21171
 }
 $530 = HEAP32[2544] | 0; //@line 21173
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 21176
  HEAP32[2544] = $532; //@line 21177
  $533 = HEAP32[2547] | 0; //@line 21178
  $534 = $533 + $$0197 | 0; //@line 21179
  HEAP32[2547] = $534; //@line 21180
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 21183
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 21186
  $$0 = $533 + 8 | 0; //@line 21188
  STACKTOP = sp; //@line 21189
  return $$0 | 0; //@line 21189
 }
 if (!(HEAP32[2659] | 0)) {
  HEAP32[2661] = 4096; //@line 21194
  HEAP32[2660] = 4096; //@line 21195
  HEAP32[2662] = -1; //@line 21196
  HEAP32[2663] = -1; //@line 21197
  HEAP32[2664] = 0; //@line 21198
  HEAP32[2652] = 0; //@line 21199
  HEAP32[2659] = $1 & -16 ^ 1431655768; //@line 21203
  $548 = 4096; //@line 21204
 } else {
  $548 = HEAP32[2661] | 0; //@line 21207
 }
 $545 = $$0197 + 48 | 0; //@line 21209
 $546 = $$0197 + 47 | 0; //@line 21210
 $547 = $548 + $546 | 0; //@line 21211
 $549 = 0 - $548 | 0; //@line 21212
 $550 = $547 & $549; //@line 21213
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 21216
  STACKTOP = sp; //@line 21217
  return $$0 | 0; //@line 21217
 }
 $552 = HEAP32[2651] | 0; //@line 21219
 if ($552 | 0) {
  $554 = HEAP32[2649] | 0; //@line 21222
  $555 = $554 + $550 | 0; //@line 21223
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 21228
   STACKTOP = sp; //@line 21229
   return $$0 | 0; //@line 21229
  }
 }
 L244 : do {
  if (!(HEAP32[2652] & 4)) {
   $561 = HEAP32[2547] | 0; //@line 21237
   L246 : do {
    if (!$561) {
     label = 163; //@line 21241
    } else {
     $$0$i$i = 10612; //@line 21243
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 21245
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 21248
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 21257
      if (!$570) {
       label = 163; //@line 21260
       break L246;
      } else {
       $$0$i$i = $570; //@line 21263
      }
     }
     $595 = $547 - $530 & $549; //@line 21267
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 21270
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 21278
       } else {
        $$723947$i = $595; //@line 21280
        $$748$i = $597; //@line 21280
        label = 180; //@line 21281
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 21285
       $$2253$ph$i = $595; //@line 21285
       label = 171; //@line 21286
      }
     } else {
      $$2234243136$i = 0; //@line 21289
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 21295
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 21298
     } else {
      $574 = $572; //@line 21300
      $575 = HEAP32[2660] | 0; //@line 21301
      $576 = $575 + -1 | 0; //@line 21302
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 21310
      $584 = HEAP32[2649] | 0; //@line 21311
      $585 = $$$i + $584 | 0; //@line 21312
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[2651] | 0; //@line 21317
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 21324
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 21328
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 21331
        $$748$i = $572; //@line 21331
        label = 180; //@line 21332
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 21335
        $$2253$ph$i = $$$i; //@line 21335
        label = 171; //@line 21336
       }
      } else {
       $$2234243136$i = 0; //@line 21339
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 21346
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 21355
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 21358
       $$748$i = $$2247$ph$i; //@line 21358
       label = 180; //@line 21359
       break L244;
      }
     }
     $607 = HEAP32[2661] | 0; //@line 21363
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 21367
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 21370
      $$748$i = $$2247$ph$i; //@line 21370
      label = 180; //@line 21371
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 21377
      $$2234243136$i = 0; //@line 21378
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 21382
      $$748$i = $$2247$ph$i; //@line 21382
      label = 180; //@line 21383
      break L244;
     }
    }
   } while (0);
   HEAP32[2652] = HEAP32[2652] | 4; //@line 21390
   $$4236$i = $$2234243136$i; //@line 21391
   label = 178; //@line 21392
  } else {
   $$4236$i = 0; //@line 21394
   label = 178; //@line 21395
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 21401
   $621 = _sbrk(0) | 0; //@line 21402
   $627 = $621 - $620 | 0; //@line 21410
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 21412
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 21420
    $$748$i = $620; //@line 21420
    label = 180; //@line 21421
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[2649] | 0) + $$723947$i | 0; //@line 21427
  HEAP32[2649] = $633; //@line 21428
  if ($633 >>> 0 > (HEAP32[2650] | 0) >>> 0) {
   HEAP32[2650] = $633; //@line 21432
  }
  $636 = HEAP32[2547] | 0; //@line 21434
  do {
   if (!$636) {
    $638 = HEAP32[2545] | 0; //@line 21438
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[2545] = $$748$i; //@line 21443
    }
    HEAP32[2653] = $$748$i; //@line 21445
    HEAP32[2654] = $$723947$i; //@line 21446
    HEAP32[2656] = 0; //@line 21447
    HEAP32[2550] = HEAP32[2659]; //@line 21449
    HEAP32[2549] = -1; //@line 21450
    HEAP32[2554] = 10204; //@line 21451
    HEAP32[2553] = 10204; //@line 21452
    HEAP32[2556] = 10212; //@line 21453
    HEAP32[2555] = 10212; //@line 21454
    HEAP32[2558] = 10220; //@line 21455
    HEAP32[2557] = 10220; //@line 21456
    HEAP32[2560] = 10228; //@line 21457
    HEAP32[2559] = 10228; //@line 21458
    HEAP32[2562] = 10236; //@line 21459
    HEAP32[2561] = 10236; //@line 21460
    HEAP32[2564] = 10244; //@line 21461
    HEAP32[2563] = 10244; //@line 21462
    HEAP32[2566] = 10252; //@line 21463
    HEAP32[2565] = 10252; //@line 21464
    HEAP32[2568] = 10260; //@line 21465
    HEAP32[2567] = 10260; //@line 21466
    HEAP32[2570] = 10268; //@line 21467
    HEAP32[2569] = 10268; //@line 21468
    HEAP32[2572] = 10276; //@line 21469
    HEAP32[2571] = 10276; //@line 21470
    HEAP32[2574] = 10284; //@line 21471
    HEAP32[2573] = 10284; //@line 21472
    HEAP32[2576] = 10292; //@line 21473
    HEAP32[2575] = 10292; //@line 21474
    HEAP32[2578] = 10300; //@line 21475
    HEAP32[2577] = 10300; //@line 21476
    HEAP32[2580] = 10308; //@line 21477
    HEAP32[2579] = 10308; //@line 21478
    HEAP32[2582] = 10316; //@line 21479
    HEAP32[2581] = 10316; //@line 21480
    HEAP32[2584] = 10324; //@line 21481
    HEAP32[2583] = 10324; //@line 21482
    HEAP32[2586] = 10332; //@line 21483
    HEAP32[2585] = 10332; //@line 21484
    HEAP32[2588] = 10340; //@line 21485
    HEAP32[2587] = 10340; //@line 21486
    HEAP32[2590] = 10348; //@line 21487
    HEAP32[2589] = 10348; //@line 21488
    HEAP32[2592] = 10356; //@line 21489
    HEAP32[2591] = 10356; //@line 21490
    HEAP32[2594] = 10364; //@line 21491
    HEAP32[2593] = 10364; //@line 21492
    HEAP32[2596] = 10372; //@line 21493
    HEAP32[2595] = 10372; //@line 21494
    HEAP32[2598] = 10380; //@line 21495
    HEAP32[2597] = 10380; //@line 21496
    HEAP32[2600] = 10388; //@line 21497
    HEAP32[2599] = 10388; //@line 21498
    HEAP32[2602] = 10396; //@line 21499
    HEAP32[2601] = 10396; //@line 21500
    HEAP32[2604] = 10404; //@line 21501
    HEAP32[2603] = 10404; //@line 21502
    HEAP32[2606] = 10412; //@line 21503
    HEAP32[2605] = 10412; //@line 21504
    HEAP32[2608] = 10420; //@line 21505
    HEAP32[2607] = 10420; //@line 21506
    HEAP32[2610] = 10428; //@line 21507
    HEAP32[2609] = 10428; //@line 21508
    HEAP32[2612] = 10436; //@line 21509
    HEAP32[2611] = 10436; //@line 21510
    HEAP32[2614] = 10444; //@line 21511
    HEAP32[2613] = 10444; //@line 21512
    HEAP32[2616] = 10452; //@line 21513
    HEAP32[2615] = 10452; //@line 21514
    $642 = $$723947$i + -40 | 0; //@line 21515
    $644 = $$748$i + 8 | 0; //@line 21517
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 21522
    $650 = $$748$i + $649 | 0; //@line 21523
    $651 = $642 - $649 | 0; //@line 21524
    HEAP32[2547] = $650; //@line 21525
    HEAP32[2544] = $651; //@line 21526
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 21529
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 21532
    HEAP32[2548] = HEAP32[2663]; //@line 21534
   } else {
    $$024367$i = 10612; //@line 21536
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 21538
     $658 = $$024367$i + 4 | 0; //@line 21539
     $659 = HEAP32[$658 >> 2] | 0; //@line 21540
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 21544
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 21548
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 21553
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 21567
       $673 = (HEAP32[2544] | 0) + $$723947$i | 0; //@line 21569
       $675 = $636 + 8 | 0; //@line 21571
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 21576
       $681 = $636 + $680 | 0; //@line 21577
       $682 = $673 - $680 | 0; //@line 21578
       HEAP32[2547] = $681; //@line 21579
       HEAP32[2544] = $682; //@line 21580
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 21583
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 21586
       HEAP32[2548] = HEAP32[2663]; //@line 21588
       break;
      }
     }
    }
    $688 = HEAP32[2545] | 0; //@line 21593
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[2545] = $$748$i; //@line 21596
     $753 = $$748$i; //@line 21597
    } else {
     $753 = $688; //@line 21599
    }
    $690 = $$748$i + $$723947$i | 0; //@line 21601
    $$124466$i = 10612; //@line 21602
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 21607
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 21611
     if (!$694) {
      $$0$i$i$i = 10612; //@line 21614
      break;
     } else {
      $$124466$i = $694; //@line 21617
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 21626
      $700 = $$124466$i + 4 | 0; //@line 21627
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 21630
      $704 = $$748$i + 8 | 0; //@line 21632
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 21638
      $712 = $690 + 8 | 0; //@line 21640
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 21646
      $722 = $710 + $$0197 | 0; //@line 21650
      $723 = $718 - $710 - $$0197 | 0; //@line 21651
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 21654
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[2544] | 0) + $723 | 0; //@line 21659
        HEAP32[2544] = $728; //@line 21660
        HEAP32[2547] = $722; //@line 21661
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 21664
       } else {
        if ((HEAP32[2546] | 0) == ($718 | 0)) {
         $734 = (HEAP32[2543] | 0) + $723 | 0; //@line 21670
         HEAP32[2543] = $734; //@line 21671
         HEAP32[2546] = $722; //@line 21672
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 21675
         HEAP32[$722 + $734 >> 2] = $734; //@line 21677
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 21681
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 21685
         $743 = $739 >>> 3; //@line 21686
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 21691
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 21693
           $750 = 10204 + ($743 << 1 << 2) | 0; //@line 21695
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 21701
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 21710
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[2541] = HEAP32[2541] & ~(1 << $743); //@line 21720
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 21727
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 21731
             }
             $764 = $748 + 8 | 0; //@line 21734
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 21738
              break;
             }
             _abort(); //@line 21741
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 21746
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 21747
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 21750
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 21752
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 21756
             $783 = $782 + 4 | 0; //@line 21757
             $784 = HEAP32[$783 >> 2] | 0; //@line 21758
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 21761
              if (!$786) {
               $$3$i$i = 0; //@line 21764
               break;
              } else {
               $$1291$i$i = $786; //@line 21767
               $$1293$i$i = $782; //@line 21767
              }
             } else {
              $$1291$i$i = $784; //@line 21770
              $$1293$i$i = $783; //@line 21770
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 21773
              $789 = HEAP32[$788 >> 2] | 0; //@line 21774
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 21777
               $$1293$i$i = $788; //@line 21777
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 21780
              $792 = HEAP32[$791 >> 2] | 0; //@line 21781
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 21786
               $$1293$i$i = $791; //@line 21786
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 21791
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 21794
              $$3$i$i = $$1291$i$i; //@line 21795
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 21800
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 21803
             }
             $776 = $774 + 12 | 0; //@line 21806
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 21810
             }
             $779 = $771 + 8 | 0; //@line 21813
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 21817
              HEAP32[$779 >> 2] = $774; //@line 21818
              $$3$i$i = $771; //@line 21819
              break;
             } else {
              _abort(); //@line 21822
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 21832
           $798 = 10468 + ($797 << 2) | 0; //@line 21833
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 21838
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[2542] = HEAP32[2542] & ~(1 << $797); //@line 21847
             break L311;
            } else {
             if ((HEAP32[2545] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 21853
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 21861
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[2545] | 0; //@line 21871
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 21874
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 21878
           $815 = $718 + 16 | 0; //@line 21879
           $816 = HEAP32[$815 >> 2] | 0; //@line 21880
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 21886
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 21890
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 21892
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 21898
           if (!$822) {
            break;
           }
           if ((HEAP32[2545] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 21906
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 21910
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 21912
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 21919
         $$0287$i$i = $742 + $723 | 0; //@line 21919
        } else {
         $$0$i17$i = $718; //@line 21921
         $$0287$i$i = $723; //@line 21921
        }
        $830 = $$0$i17$i + 4 | 0; //@line 21923
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 21926
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 21929
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 21931
        $836 = $$0287$i$i >>> 3; //@line 21932
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 10204 + ($836 << 1 << 2) | 0; //@line 21936
         $840 = HEAP32[2541] | 0; //@line 21937
         $841 = 1 << $836; //@line 21938
         do {
          if (!($840 & $841)) {
           HEAP32[2541] = $840 | $841; //@line 21944
           $$0295$i$i = $839; //@line 21946
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 21946
          } else {
           $845 = $839 + 8 | 0; //@line 21948
           $846 = HEAP32[$845 >> 2] | 0; //@line 21949
           if ((HEAP32[2545] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 21953
            $$pre$phi$i19$iZ2D = $845; //@line 21953
            break;
           }
           _abort(); //@line 21956
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 21960
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 21962
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 21964
         HEAP32[$722 + 12 >> 2] = $839; //@line 21966
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 21969
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 21973
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 21977
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 21982
          $858 = $852 << $857; //@line 21983
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 21986
          $863 = $858 << $861; //@line 21988
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 21991
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 21996
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 22002
         }
        } while (0);
        $877 = 10468 + ($$0296$i$i << 2) | 0; //@line 22005
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 22007
        $879 = $722 + 16 | 0; //@line 22008
        HEAP32[$879 + 4 >> 2] = 0; //@line 22010
        HEAP32[$879 >> 2] = 0; //@line 22011
        $881 = HEAP32[2542] | 0; //@line 22012
        $882 = 1 << $$0296$i$i; //@line 22013
        if (!($881 & $882)) {
         HEAP32[2542] = $881 | $882; //@line 22018
         HEAP32[$877 >> 2] = $722; //@line 22019
         HEAP32[$722 + 24 >> 2] = $877; //@line 22021
         HEAP32[$722 + 12 >> 2] = $722; //@line 22023
         HEAP32[$722 + 8 >> 2] = $722; //@line 22025
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 22034
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 22034
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 22041
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 22045
         $902 = HEAP32[$900 >> 2] | 0; //@line 22047
         if (!$902) {
          label = 260; //@line 22050
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 22053
          $$0289$i$i = $902; //@line 22053
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[2545] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 22060
         } else {
          HEAP32[$900 >> 2] = $722; //@line 22063
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 22065
          HEAP32[$722 + 12 >> 2] = $722; //@line 22067
          HEAP32[$722 + 8 >> 2] = $722; //@line 22069
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 22074
         $910 = HEAP32[$909 >> 2] | 0; //@line 22075
         $911 = HEAP32[2545] | 0; //@line 22076
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 22082
          HEAP32[$909 >> 2] = $722; //@line 22083
          HEAP32[$722 + 8 >> 2] = $910; //@line 22085
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 22087
          HEAP32[$722 + 24 >> 2] = 0; //@line 22089
          break;
         } else {
          _abort(); //@line 22092
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 22099
      STACKTOP = sp; //@line 22100
      return $$0 | 0; //@line 22100
     } else {
      $$0$i$i$i = 10612; //@line 22102
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 22106
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 22111
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 22119
    }
    $927 = $923 + -47 | 0; //@line 22121
    $929 = $927 + 8 | 0; //@line 22123
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 22129
    $936 = $636 + 16 | 0; //@line 22130
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 22132
    $939 = $938 + 8 | 0; //@line 22133
    $940 = $938 + 24 | 0; //@line 22134
    $941 = $$723947$i + -40 | 0; //@line 22135
    $943 = $$748$i + 8 | 0; //@line 22137
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 22142
    $949 = $$748$i + $948 | 0; //@line 22143
    $950 = $941 - $948 | 0; //@line 22144
    HEAP32[2547] = $949; //@line 22145
    HEAP32[2544] = $950; //@line 22146
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 22149
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 22152
    HEAP32[2548] = HEAP32[2663]; //@line 22154
    $956 = $938 + 4 | 0; //@line 22155
    HEAP32[$956 >> 2] = 27; //@line 22156
    HEAP32[$939 >> 2] = HEAP32[2653]; //@line 22157
    HEAP32[$939 + 4 >> 2] = HEAP32[2654]; //@line 22157
    HEAP32[$939 + 8 >> 2] = HEAP32[2655]; //@line 22157
    HEAP32[$939 + 12 >> 2] = HEAP32[2656]; //@line 22157
    HEAP32[2653] = $$748$i; //@line 22158
    HEAP32[2654] = $$723947$i; //@line 22159
    HEAP32[2656] = 0; //@line 22160
    HEAP32[2655] = $939; //@line 22161
    $958 = $940; //@line 22162
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 22164
     HEAP32[$958 >> 2] = 7; //@line 22165
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 22178
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 22181
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 22184
     HEAP32[$938 >> 2] = $964; //@line 22185
     $969 = $964 >>> 3; //@line 22186
     if ($964 >>> 0 < 256) {
      $972 = 10204 + ($969 << 1 << 2) | 0; //@line 22190
      $973 = HEAP32[2541] | 0; //@line 22191
      $974 = 1 << $969; //@line 22192
      if (!($973 & $974)) {
       HEAP32[2541] = $973 | $974; //@line 22197
       $$0211$i$i = $972; //@line 22199
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 22199
      } else {
       $978 = $972 + 8 | 0; //@line 22201
       $979 = HEAP32[$978 >> 2] | 0; //@line 22202
       if ((HEAP32[2545] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 22206
       } else {
        $$0211$i$i = $979; //@line 22209
        $$pre$phi$i$iZ2D = $978; //@line 22209
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 22212
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 22214
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 22216
      HEAP32[$636 + 12 >> 2] = $972; //@line 22218
      break;
     }
     $985 = $964 >>> 8; //@line 22221
     if (!$985) {
      $$0212$i$i = 0; //@line 22224
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 22228
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 22232
       $991 = $985 << $990; //@line 22233
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 22236
       $996 = $991 << $994; //@line 22238
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 22241
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 22246
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 22252
      }
     }
     $1010 = 10468 + ($$0212$i$i << 2) | 0; //@line 22255
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 22257
     HEAP32[$636 + 20 >> 2] = 0; //@line 22259
     HEAP32[$936 >> 2] = 0; //@line 22260
     $1013 = HEAP32[2542] | 0; //@line 22261
     $1014 = 1 << $$0212$i$i; //@line 22262
     if (!($1013 & $1014)) {
      HEAP32[2542] = $1013 | $1014; //@line 22267
      HEAP32[$1010 >> 2] = $636; //@line 22268
      HEAP32[$636 + 24 >> 2] = $1010; //@line 22270
      HEAP32[$636 + 12 >> 2] = $636; //@line 22272
      HEAP32[$636 + 8 >> 2] = $636; //@line 22274
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 22283
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 22283
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 22290
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 22294
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 22296
      if (!$1034) {
       label = 286; //@line 22299
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 22302
       $$0207$i$i = $1034; //@line 22302
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[2545] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 22309
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 22312
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 22314
       HEAP32[$636 + 12 >> 2] = $636; //@line 22316
       HEAP32[$636 + 8 >> 2] = $636; //@line 22318
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 22323
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 22324
      $1043 = HEAP32[2545] | 0; //@line 22325
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 22331
       HEAP32[$1041 >> 2] = $636; //@line 22332
       HEAP32[$636 + 8 >> 2] = $1042; //@line 22334
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 22336
       HEAP32[$636 + 24 >> 2] = 0; //@line 22338
       break;
      } else {
       _abort(); //@line 22341
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[2544] | 0; //@line 22348
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 22351
   HEAP32[2544] = $1054; //@line 22352
   $1055 = HEAP32[2547] | 0; //@line 22353
   $1056 = $1055 + $$0197 | 0; //@line 22354
   HEAP32[2547] = $1056; //@line 22355
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 22358
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 22361
   $$0 = $1055 + 8 | 0; //@line 22363
   STACKTOP = sp; //@line 22364
   return $$0 | 0; //@line 22364
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 22368
 $$0 = 0; //@line 22369
 STACKTOP = sp; //@line 22370
 return $$0 | 0; //@line 22370
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_110($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $186 = 0, $187 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $247 = 0, $248 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $258 = 0, $26 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 25028
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25030
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25032
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25034
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25036
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25038
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25040
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25042
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25044
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25046
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25048
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25050
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25052
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25054
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25056
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25058
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25060
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25062
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 25064
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 25066
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 25068
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 25070
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 25072
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 25074
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 25076
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 25078
 $122 = HEAP32[$22 >> 2] | 0; //@line 25079
 if ($122 | 0) {
  $125 = HEAP32[$122 + 8 >> 2] | 0; //@line 25083
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(104) | 0; //@line 25084
  FUNCTION_TABLE_vi[$125 & 511]($2); //@line 25085
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 193; //@line 25088
   $126 = $ReallocAsyncCtx2 + 4 | 0; //@line 25089
   HEAP32[$126 >> 2] = $4; //@line 25090
   $127 = $ReallocAsyncCtx2 + 8 | 0; //@line 25091
   HEAP32[$127 >> 2] = $6; //@line 25092
   $128 = $ReallocAsyncCtx2 + 12 | 0; //@line 25093
   HEAP32[$128 >> 2] = $2; //@line 25094
   $129 = $ReallocAsyncCtx2 + 16 | 0; //@line 25095
   HEAP32[$129 >> 2] = $8; //@line 25096
   $130 = $ReallocAsyncCtx2 + 20 | 0; //@line 25097
   HEAP32[$130 >> 2] = $10; //@line 25098
   $131 = $ReallocAsyncCtx2 + 24 | 0; //@line 25099
   HEAP32[$131 >> 2] = $12; //@line 25100
   $132 = $ReallocAsyncCtx2 + 28 | 0; //@line 25101
   HEAP32[$132 >> 2] = $14; //@line 25102
   $133 = $ReallocAsyncCtx2 + 32 | 0; //@line 25103
   HEAP32[$133 >> 2] = $16; //@line 25104
   $134 = $ReallocAsyncCtx2 + 36 | 0; //@line 25105
   HEAP32[$134 >> 2] = $18; //@line 25106
   $135 = $ReallocAsyncCtx2 + 40 | 0; //@line 25107
   HEAP32[$135 >> 2] = $20; //@line 25108
   $136 = $ReallocAsyncCtx2 + 44 | 0; //@line 25109
   HEAP32[$136 >> 2] = $22; //@line 25110
   $137 = $ReallocAsyncCtx2 + 48 | 0; //@line 25111
   HEAP32[$137 >> 2] = $24; //@line 25112
   $138 = $ReallocAsyncCtx2 + 52 | 0; //@line 25113
   HEAP32[$138 >> 2] = $26; //@line 25114
   $139 = $ReallocAsyncCtx2 + 56 | 0; //@line 25115
   HEAP32[$139 >> 2] = $28; //@line 25116
   $140 = $ReallocAsyncCtx2 + 60 | 0; //@line 25117
   HEAP32[$140 >> 2] = $30; //@line 25118
   $141 = $ReallocAsyncCtx2 + 64 | 0; //@line 25119
   HEAP32[$141 >> 2] = $32; //@line 25120
   $142 = $ReallocAsyncCtx2 + 68 | 0; //@line 25121
   HEAP32[$142 >> 2] = $34; //@line 25122
   $143 = $ReallocAsyncCtx2 + 72 | 0; //@line 25123
   HEAP32[$143 >> 2] = $36; //@line 25124
   $144 = $ReallocAsyncCtx2 + 76 | 0; //@line 25125
   HEAP32[$144 >> 2] = $38; //@line 25126
   $145 = $ReallocAsyncCtx2 + 80 | 0; //@line 25127
   HEAP32[$145 >> 2] = $40; //@line 25128
   $146 = $ReallocAsyncCtx2 + 84 | 0; //@line 25129
   HEAP32[$146 >> 2] = $42; //@line 25130
   $147 = $ReallocAsyncCtx2 + 88 | 0; //@line 25131
   HEAP32[$147 >> 2] = $44; //@line 25132
   $148 = $ReallocAsyncCtx2 + 92 | 0; //@line 25133
   HEAP32[$148 >> 2] = $46; //@line 25134
   $149 = $ReallocAsyncCtx2 + 96 | 0; //@line 25135
   HEAP32[$149 >> 2] = $48; //@line 25136
   $150 = $ReallocAsyncCtx2 + 100 | 0; //@line 25137
   HEAP32[$150 >> 2] = $50; //@line 25138
   sp = STACKTOP; //@line 25139
   return;
  }
  ___async_unwind = 0; //@line 25142
  HEAP32[$ReallocAsyncCtx2 >> 2] = 193; //@line 25143
  $126 = $ReallocAsyncCtx2 + 4 | 0; //@line 25144
  HEAP32[$126 >> 2] = $4; //@line 25145
  $127 = $ReallocAsyncCtx2 + 8 | 0; //@line 25146
  HEAP32[$127 >> 2] = $6; //@line 25147
  $128 = $ReallocAsyncCtx2 + 12 | 0; //@line 25148
  HEAP32[$128 >> 2] = $2; //@line 25149
  $129 = $ReallocAsyncCtx2 + 16 | 0; //@line 25150
  HEAP32[$129 >> 2] = $8; //@line 25151
  $130 = $ReallocAsyncCtx2 + 20 | 0; //@line 25152
  HEAP32[$130 >> 2] = $10; //@line 25153
  $131 = $ReallocAsyncCtx2 + 24 | 0; //@line 25154
  HEAP32[$131 >> 2] = $12; //@line 25155
  $132 = $ReallocAsyncCtx2 + 28 | 0; //@line 25156
  HEAP32[$132 >> 2] = $14; //@line 25157
  $133 = $ReallocAsyncCtx2 + 32 | 0; //@line 25158
  HEAP32[$133 >> 2] = $16; //@line 25159
  $134 = $ReallocAsyncCtx2 + 36 | 0; //@line 25160
  HEAP32[$134 >> 2] = $18; //@line 25161
  $135 = $ReallocAsyncCtx2 + 40 | 0; //@line 25162
  HEAP32[$135 >> 2] = $20; //@line 25163
  $136 = $ReallocAsyncCtx2 + 44 | 0; //@line 25164
  HEAP32[$136 >> 2] = $22; //@line 25165
  $137 = $ReallocAsyncCtx2 + 48 | 0; //@line 25166
  HEAP32[$137 >> 2] = $24; //@line 25167
  $138 = $ReallocAsyncCtx2 + 52 | 0; //@line 25168
  HEAP32[$138 >> 2] = $26; //@line 25169
  $139 = $ReallocAsyncCtx2 + 56 | 0; //@line 25170
  HEAP32[$139 >> 2] = $28; //@line 25171
  $140 = $ReallocAsyncCtx2 + 60 | 0; //@line 25172
  HEAP32[$140 >> 2] = $30; //@line 25173
  $141 = $ReallocAsyncCtx2 + 64 | 0; //@line 25174
  HEAP32[$141 >> 2] = $32; //@line 25175
  $142 = $ReallocAsyncCtx2 + 68 | 0; //@line 25176
  HEAP32[$142 >> 2] = $34; //@line 25177
  $143 = $ReallocAsyncCtx2 + 72 | 0; //@line 25178
  HEAP32[$143 >> 2] = $36; //@line 25179
  $144 = $ReallocAsyncCtx2 + 76 | 0; //@line 25180
  HEAP32[$144 >> 2] = $38; //@line 25181
  $145 = $ReallocAsyncCtx2 + 80 | 0; //@line 25182
  HEAP32[$145 >> 2] = $40; //@line 25183
  $146 = $ReallocAsyncCtx2 + 84 | 0; //@line 25184
  HEAP32[$146 >> 2] = $42; //@line 25185
  $147 = $ReallocAsyncCtx2 + 88 | 0; //@line 25186
  HEAP32[$147 >> 2] = $44; //@line 25187
  $148 = $ReallocAsyncCtx2 + 92 | 0; //@line 25188
  HEAP32[$148 >> 2] = $46; //@line 25189
  $149 = $ReallocAsyncCtx2 + 96 | 0; //@line 25190
  HEAP32[$149 >> 2] = $48; //@line 25191
  $150 = $ReallocAsyncCtx2 + 100 | 0; //@line 25192
  HEAP32[$150 >> 2] = $50; //@line 25193
  sp = STACKTOP; //@line 25194
  return;
 }
 $151 = HEAP32[$6 >> 2] | 0; //@line 25197
 if (!$151) {
  $$02972$reg2mem$0 = $12; //@line 25200
  $$03071$reg2mem$0 = $8; //@line 25200
  $$reg2mem$0 = $4; //@line 25200
 } else {
  $154 = HEAP32[$151 + 8 >> 2] | 0; //@line 25203
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 25204
  FUNCTION_TABLE_vi[$154 & 511]($10); //@line 25205
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 194; //@line 25208
   $155 = $ReallocAsyncCtx3 + 4 | 0; //@line 25209
   HEAP32[$155 >> 2] = $4; //@line 25210
   $156 = $ReallocAsyncCtx3 + 8 | 0; //@line 25211
   HEAP32[$156 >> 2] = $2; //@line 25212
   $157 = $ReallocAsyncCtx3 + 12 | 0; //@line 25213
   HEAP32[$157 >> 2] = $8; //@line 25214
   $158 = $ReallocAsyncCtx3 + 16 | 0; //@line 25215
   HEAP32[$158 >> 2] = $10; //@line 25216
   $159 = $ReallocAsyncCtx3 + 20 | 0; //@line 25217
   HEAP32[$159 >> 2] = $6; //@line 25218
   $160 = $ReallocAsyncCtx3 + 24 | 0; //@line 25219
   HEAP32[$160 >> 2] = $12; //@line 25220
   $161 = $ReallocAsyncCtx3 + 28 | 0; //@line 25221
   HEAP32[$161 >> 2] = $14; //@line 25222
   $162 = $ReallocAsyncCtx3 + 32 | 0; //@line 25223
   HEAP32[$162 >> 2] = $16; //@line 25224
   $163 = $ReallocAsyncCtx3 + 36 | 0; //@line 25225
   HEAP32[$163 >> 2] = $18; //@line 25226
   $164 = $ReallocAsyncCtx3 + 40 | 0; //@line 25227
   HEAP32[$164 >> 2] = $20; //@line 25228
   $165 = $ReallocAsyncCtx3 + 44 | 0; //@line 25229
   HEAP32[$165 >> 2] = $22; //@line 25230
   $166 = $ReallocAsyncCtx3 + 48 | 0; //@line 25231
   HEAP32[$166 >> 2] = $24; //@line 25232
   $167 = $ReallocAsyncCtx3 + 52 | 0; //@line 25233
   HEAP32[$167 >> 2] = $26; //@line 25234
   $168 = $ReallocAsyncCtx3 + 56 | 0; //@line 25235
   HEAP32[$168 >> 2] = $28; //@line 25236
   $169 = $ReallocAsyncCtx3 + 60 | 0; //@line 25237
   HEAP32[$169 >> 2] = $30; //@line 25238
   $170 = $ReallocAsyncCtx3 + 64 | 0; //@line 25239
   HEAP32[$170 >> 2] = $32; //@line 25240
   $171 = $ReallocAsyncCtx3 + 68 | 0; //@line 25241
   HEAP32[$171 >> 2] = $34; //@line 25242
   $172 = $ReallocAsyncCtx3 + 72 | 0; //@line 25243
   HEAP32[$172 >> 2] = $36; //@line 25244
   $173 = $ReallocAsyncCtx3 + 76 | 0; //@line 25245
   HEAP32[$173 >> 2] = $38; //@line 25246
   $174 = $ReallocAsyncCtx3 + 80 | 0; //@line 25247
   HEAP32[$174 >> 2] = $40; //@line 25248
   $175 = $ReallocAsyncCtx3 + 84 | 0; //@line 25249
   HEAP32[$175 >> 2] = $42; //@line 25250
   $176 = $ReallocAsyncCtx3 + 88 | 0; //@line 25251
   HEAP32[$176 >> 2] = $44; //@line 25252
   $177 = $ReallocAsyncCtx3 + 92 | 0; //@line 25253
   HEAP32[$177 >> 2] = $46; //@line 25254
   $178 = $ReallocAsyncCtx3 + 96 | 0; //@line 25255
   HEAP32[$178 >> 2] = $48; //@line 25256
   $179 = $ReallocAsyncCtx3 + 100 | 0; //@line 25257
   HEAP32[$179 >> 2] = $50; //@line 25258
   sp = STACKTOP; //@line 25259
   return;
  }
  ___async_unwind = 0; //@line 25262
  HEAP32[$ReallocAsyncCtx3 >> 2] = 194; //@line 25263
  $155 = $ReallocAsyncCtx3 + 4 | 0; //@line 25264
  HEAP32[$155 >> 2] = $4; //@line 25265
  $156 = $ReallocAsyncCtx3 + 8 | 0; //@line 25266
  HEAP32[$156 >> 2] = $2; //@line 25267
  $157 = $ReallocAsyncCtx3 + 12 | 0; //@line 25268
  HEAP32[$157 >> 2] = $8; //@line 25269
  $158 = $ReallocAsyncCtx3 + 16 | 0; //@line 25270
  HEAP32[$158 >> 2] = $10; //@line 25271
  $159 = $ReallocAsyncCtx3 + 20 | 0; //@line 25272
  HEAP32[$159 >> 2] = $6; //@line 25273
  $160 = $ReallocAsyncCtx3 + 24 | 0; //@line 25274
  HEAP32[$160 >> 2] = $12; //@line 25275
  $161 = $ReallocAsyncCtx3 + 28 | 0; //@line 25276
  HEAP32[$161 >> 2] = $14; //@line 25277
  $162 = $ReallocAsyncCtx3 + 32 | 0; //@line 25278
  HEAP32[$162 >> 2] = $16; //@line 25279
  $163 = $ReallocAsyncCtx3 + 36 | 0; //@line 25280
  HEAP32[$163 >> 2] = $18; //@line 25281
  $164 = $ReallocAsyncCtx3 + 40 | 0; //@line 25282
  HEAP32[$164 >> 2] = $20; //@line 25283
  $165 = $ReallocAsyncCtx3 + 44 | 0; //@line 25284
  HEAP32[$165 >> 2] = $22; //@line 25285
  $166 = $ReallocAsyncCtx3 + 48 | 0; //@line 25286
  HEAP32[$166 >> 2] = $24; //@line 25287
  $167 = $ReallocAsyncCtx3 + 52 | 0; //@line 25288
  HEAP32[$167 >> 2] = $26; //@line 25289
  $168 = $ReallocAsyncCtx3 + 56 | 0; //@line 25290
  HEAP32[$168 >> 2] = $28; //@line 25291
  $169 = $ReallocAsyncCtx3 + 60 | 0; //@line 25292
  HEAP32[$169 >> 2] = $30; //@line 25293
  $170 = $ReallocAsyncCtx3 + 64 | 0; //@line 25294
  HEAP32[$170 >> 2] = $32; //@line 25295
  $171 = $ReallocAsyncCtx3 + 68 | 0; //@line 25296
  HEAP32[$171 >> 2] = $34; //@line 25297
  $172 = $ReallocAsyncCtx3 + 72 | 0; //@line 25298
  HEAP32[$172 >> 2] = $36; //@line 25299
  $173 = $ReallocAsyncCtx3 + 76 | 0; //@line 25300
  HEAP32[$173 >> 2] = $38; //@line 25301
  $174 = $ReallocAsyncCtx3 + 80 | 0; //@line 25302
  HEAP32[$174 >> 2] = $40; //@line 25303
  $175 = $ReallocAsyncCtx3 + 84 | 0; //@line 25304
  HEAP32[$175 >> 2] = $42; //@line 25305
  $176 = $ReallocAsyncCtx3 + 88 | 0; //@line 25306
  HEAP32[$176 >> 2] = $44; //@line 25307
  $177 = $ReallocAsyncCtx3 + 92 | 0; //@line 25308
  HEAP32[$177 >> 2] = $46; //@line 25309
  $178 = $ReallocAsyncCtx3 + 96 | 0; //@line 25310
  HEAP32[$178 >> 2] = $48; //@line 25311
  $179 = $ReallocAsyncCtx3 + 100 | 0; //@line 25312
  HEAP32[$179 >> 2] = $50; //@line 25313
  sp = STACKTOP; //@line 25314
  return;
 }
 L15 : while (1) {
  $180 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 25318
  $181 = $180 + 76 | 0; //@line 25319
  $182 = HEAP32[$181 >> 2] | 0; //@line 25320
  if ($182 | 0) {
   if ($182 >>> 0 <= 100) {
    label = 25; //@line 25325
    break;
   }
   HEAP32[$181 >> 2] = $182 + -100; //@line 25329
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 25334
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 25334
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 25336
   $$131 = $$03071$reg2mem$0; //@line 25336
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 25339
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 25342
    break L15;
   }
   $52 = 10072 + ($$02972$reg2mem$1 << 2) | 0; //@line 25345
   $54 = HEAP32[$52 >> 2] | 0; //@line 25346
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 25354
  $57 = HEAP32[$56 >> 2] | 0; //@line 25355
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 25359
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 25360
   $$03071$reg2mem$0 = $$131; //@line 25360
   $$reg2mem$0 = $52; //@line 25360
   continue;
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 25367
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 25370
    $$03071$reg2mem$0 = $$131; //@line 25370
    $$reg2mem$0 = $52; //@line 25370
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $247 = $$131 + 44 | 0; //@line 25380
  $248 = HEAP32[$247 >> 2] | 0; //@line 25381
  if (!$248) {
   $256 = $28 + 12 | 0; //@line 25384
   HEAP32[$256 >> 2] = 0; //@line 25385
   $258 = $30 + 4 | 0; //@line 25387
   HEAP32[$258 >> 2] = 0; //@line 25389
   HEAP32[$258 + 4 >> 2] = 0; //@line 25392
   HEAP32[$30 >> 2] = 3; //@line 25393
   $262 = $30 + 12 | 0; //@line 25394
   HEAP32[$262 >> 2] = 712; //@line 25395
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 25396
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($28, 100, $30) | 0; //@line 25397
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 25400
    $263 = $ReallocAsyncCtx10 + 4 | 0; //@line 25401
    HEAP32[$263 >> 2] = $262; //@line 25402
    $264 = $ReallocAsyncCtx10 + 8 | 0; //@line 25403
    HEAP32[$264 >> 2] = $256; //@line 25404
    $265 = $ReallocAsyncCtx10 + 12 | 0; //@line 25405
    HEAP32[$265 >> 2] = $30; //@line 25406
    $266 = $ReallocAsyncCtx10 + 16 | 0; //@line 25407
    HEAP32[$266 >> 2] = $28; //@line 25408
    sp = STACKTOP; //@line 25409
    return;
   }
   ___async_unwind = 0; //@line 25412
   HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 25413
   $263 = $ReallocAsyncCtx10 + 4 | 0; //@line 25414
   HEAP32[$263 >> 2] = $262; //@line 25415
   $264 = $ReallocAsyncCtx10 + 8 | 0; //@line 25416
   HEAP32[$264 >> 2] = $256; //@line 25417
   $265 = $ReallocAsyncCtx10 + 12 | 0; //@line 25418
   HEAP32[$265 >> 2] = $30; //@line 25419
   $266 = $ReallocAsyncCtx10 + 16 | 0; //@line 25420
   HEAP32[$266 >> 2] = $28; //@line 25421
   sp = STACKTOP; //@line 25422
   return;
  } else {
   $252 = HEAP32[$248 + 4 >> 2] | 0; //@line 25427
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 25428
   FUNCTION_TABLE_vii[$252 & 7]($28, $$131 + 32 | 0); //@line 25429
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 25432
    $253 = $ReallocAsyncCtx7 + 4 | 0; //@line 25433
    HEAP32[$253 >> 2] = $247; //@line 25434
    $254 = $ReallocAsyncCtx7 + 8 | 0; //@line 25435
    HEAP32[$254 >> 2] = $28; //@line 25436
    $255 = $ReallocAsyncCtx7 + 12 | 0; //@line 25437
    HEAP32[$255 >> 2] = $30; //@line 25438
    sp = STACKTOP; //@line 25439
    return;
   }
   ___async_unwind = 0; //@line 25442
   HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 25443
   $253 = $ReallocAsyncCtx7 + 4 | 0; //@line 25444
   HEAP32[$253 >> 2] = $247; //@line 25445
   $254 = $ReallocAsyncCtx7 + 8 | 0; //@line 25446
   HEAP32[$254 >> 2] = $28; //@line 25447
   $255 = $ReallocAsyncCtx7 + 12 | 0; //@line 25448
   HEAP32[$255 >> 2] = $30; //@line 25449
   sp = STACKTOP; //@line 25450
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 25456
  $64 = $54 + 44 | 0; //@line 25457
  $65 = HEAP32[$64 >> 2] | 0; //@line 25458
  if (!$65) {
   HEAP32[$14 >> 2] = 0; //@line 25461
   $96 = HEAP32[$54 >> 2] | 0; //@line 25462
   HEAP32[$16 >> 2] = 0; //@line 25463
   HEAP32[$18 >> 2] = 191; //@line 25464
   HEAP32[$20 >> 2] = $96; //@line 25465
   HEAP32[$22 >> 2] = 724; //@line 25466
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 25467
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 25468
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 25471
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 25472
    HEAP32[$97 >> 2] = $2; //@line 25473
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 25474
    HEAP32[$98 >> 2] = $52; //@line 25475
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 25476
    HEAP32[$99 >> 2] = $6; //@line 25477
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 25478
    HEAP32[$100 >> 2] = $$131; //@line 25479
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 25480
    HEAP32[$101 >> 2] = $10; //@line 25481
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 25482
    HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 25483
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 25484
    HEAP32[$103 >> 2] = $14; //@line 25485
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 25486
    HEAP32[$104 >> 2] = $16; //@line 25487
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 25488
    HEAP32[$105 >> 2] = $18; //@line 25489
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 25490
    HEAP32[$106 >> 2] = $20; //@line 25491
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 25492
    HEAP32[$107 >> 2] = $22; //@line 25493
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 25494
    HEAP32[$108 >> 2] = $24; //@line 25495
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 25496
    HEAP32[$109 >> 2] = $26; //@line 25497
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 25498
    HEAP32[$110 >> 2] = $28; //@line 25499
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 25500
    HEAP32[$111 >> 2] = $30; //@line 25501
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 25502
    HEAP32[$112 >> 2] = $32; //@line 25503
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 25504
    HEAP32[$113 >> 2] = $34; //@line 25505
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 25506
    HEAP32[$114 >> 2] = $36; //@line 25507
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 25508
    HEAP32[$115 >> 2] = $38; //@line 25509
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 25510
    HEAP32[$116 >> 2] = $40; //@line 25511
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 25512
    HEAP32[$117 >> 2] = $42; //@line 25513
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 25514
    HEAP32[$118 >> 2] = $44; //@line 25515
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 25516
    HEAP32[$119 >> 2] = $46; //@line 25517
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 25518
    HEAP32[$120 >> 2] = $48; //@line 25519
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 25520
    HEAP32[$121 >> 2] = $50; //@line 25521
    sp = STACKTOP; //@line 25522
    return;
   }
   ___async_unwind = 0; //@line 25525
   HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 25526
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 25527
   HEAP32[$97 >> 2] = $2; //@line 25528
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 25529
   HEAP32[$98 >> 2] = $52; //@line 25530
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 25531
   HEAP32[$99 >> 2] = $6; //@line 25532
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 25533
   HEAP32[$100 >> 2] = $$131; //@line 25534
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 25535
   HEAP32[$101 >> 2] = $10; //@line 25536
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 25537
   HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 25538
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 25539
   HEAP32[$103 >> 2] = $14; //@line 25540
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 25541
   HEAP32[$104 >> 2] = $16; //@line 25542
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 25543
   HEAP32[$105 >> 2] = $18; //@line 25544
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 25545
   HEAP32[$106 >> 2] = $20; //@line 25546
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 25547
   HEAP32[$107 >> 2] = $22; //@line 25548
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 25549
   HEAP32[$108 >> 2] = $24; //@line 25550
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 25551
   HEAP32[$109 >> 2] = $26; //@line 25552
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 25553
   HEAP32[$110 >> 2] = $28; //@line 25554
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 25555
   HEAP32[$111 >> 2] = $30; //@line 25556
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 25557
   HEAP32[$112 >> 2] = $32; //@line 25558
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 25559
   HEAP32[$113 >> 2] = $34; //@line 25560
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 25561
   HEAP32[$114 >> 2] = $36; //@line 25562
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 25563
   HEAP32[$115 >> 2] = $38; //@line 25564
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 25565
   HEAP32[$116 >> 2] = $40; //@line 25566
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 25567
   HEAP32[$117 >> 2] = $42; //@line 25568
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 25569
   HEAP32[$118 >> 2] = $44; //@line 25570
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 25571
   HEAP32[$119 >> 2] = $46; //@line 25572
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 25573
   HEAP32[$120 >> 2] = $48; //@line 25574
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 25575
   HEAP32[$121 >> 2] = $50; //@line 25576
   sp = STACKTOP; //@line 25577
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 25582
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 25583
   FUNCTION_TABLE_vii[$69 & 7]($10, $54 + 32 | 0); //@line 25584
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 25587
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 25588
    HEAP32[$70 >> 2] = $2; //@line 25589
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 25590
    HEAP32[$71 >> 2] = $52; //@line 25591
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 25592
    HEAP32[$72 >> 2] = $6; //@line 25593
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 25594
    HEAP32[$73 >> 2] = $$131; //@line 25595
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 25596
    HEAP32[$74 >> 2] = $10; //@line 25597
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 25598
    HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 25599
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 25600
    HEAP32[$76 >> 2] = $14; //@line 25601
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 25602
    HEAP32[$77 >> 2] = $16; //@line 25603
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 25604
    HEAP32[$78 >> 2] = $18; //@line 25605
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 25606
    HEAP32[$79 >> 2] = $20; //@line 25607
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 25608
    HEAP32[$80 >> 2] = $22; //@line 25609
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 25610
    HEAP32[$81 >> 2] = $24; //@line 25611
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 25612
    HEAP32[$82 >> 2] = $26; //@line 25613
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 25614
    HEAP32[$83 >> 2] = $28; //@line 25615
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 25616
    HEAP32[$84 >> 2] = $30; //@line 25617
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 25618
    HEAP32[$85 >> 2] = $64; //@line 25619
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 25620
    HEAP32[$86 >> 2] = $32; //@line 25621
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 25622
    HEAP32[$87 >> 2] = $34; //@line 25623
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 25624
    HEAP32[$88 >> 2] = $36; //@line 25625
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 25626
    HEAP32[$89 >> 2] = $38; //@line 25627
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 25628
    HEAP32[$90 >> 2] = $40; //@line 25629
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 25630
    HEAP32[$91 >> 2] = $42; //@line 25631
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 25632
    HEAP32[$92 >> 2] = $44; //@line 25633
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 25634
    HEAP32[$93 >> 2] = $46; //@line 25635
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 25636
    HEAP32[$94 >> 2] = $48; //@line 25637
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 25638
    HEAP32[$95 >> 2] = $50; //@line 25639
    sp = STACKTOP; //@line 25640
    return;
   }
   ___async_unwind = 0; //@line 25643
   HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 25644
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 25645
   HEAP32[$70 >> 2] = $2; //@line 25646
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 25647
   HEAP32[$71 >> 2] = $52; //@line 25648
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 25649
   HEAP32[$72 >> 2] = $6; //@line 25650
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 25651
   HEAP32[$73 >> 2] = $$131; //@line 25652
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 25653
   HEAP32[$74 >> 2] = $10; //@line 25654
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 25655
   HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 25656
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 25657
   HEAP32[$76 >> 2] = $14; //@line 25658
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 25659
   HEAP32[$77 >> 2] = $16; //@line 25660
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 25661
   HEAP32[$78 >> 2] = $18; //@line 25662
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 25663
   HEAP32[$79 >> 2] = $20; //@line 25664
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 25665
   HEAP32[$80 >> 2] = $22; //@line 25666
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 25667
   HEAP32[$81 >> 2] = $24; //@line 25668
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 25669
   HEAP32[$82 >> 2] = $26; //@line 25670
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 25671
   HEAP32[$83 >> 2] = $28; //@line 25672
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 25673
   HEAP32[$84 >> 2] = $30; //@line 25674
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 25675
   HEAP32[$85 >> 2] = $64; //@line 25676
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 25677
   HEAP32[$86 >> 2] = $32; //@line 25678
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 25679
   HEAP32[$87 >> 2] = $34; //@line 25680
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 25681
   HEAP32[$88 >> 2] = $36; //@line 25682
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 25683
   HEAP32[$89 >> 2] = $38; //@line 25684
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 25685
   HEAP32[$90 >> 2] = $40; //@line 25686
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 25687
   HEAP32[$91 >> 2] = $42; //@line 25688
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 25689
   HEAP32[$92 >> 2] = $44; //@line 25690
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 25691
   HEAP32[$93 >> 2] = $46; //@line 25692
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 25693
   HEAP32[$94 >> 2] = $48; //@line 25694
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 25695
   HEAP32[$95 >> 2] = $50; //@line 25696
   sp = STACKTOP; //@line 25697
   return;
  }
 } else if ((label | 0) == 25) {
  HEAP32[$181 >> 2] = 0; //@line 25702
  $186 = $180 + 44 | 0; //@line 25703
  $187 = HEAP32[$186 >> 2] | 0; //@line 25704
  if (!$187) {
   HEAP32[$34 >> 2] = 0; //@line 25707
   $218 = HEAP32[$180 >> 2] | 0; //@line 25708
   HEAP32[$36 >> 2] = 0; //@line 25709
   HEAP32[$38 >> 2] = 196; //@line 25710
   HEAP32[$40 >> 2] = $218; //@line 25711
   HEAP32[$42 >> 2] = 724; //@line 25712
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 25713
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 25714
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 25717
    $219 = $ReallocAsyncCtx11 + 4 | 0; //@line 25718
    HEAP32[$219 >> 2] = $$reg2mem$0; //@line 25719
    $220 = $ReallocAsyncCtx11 + 8 | 0; //@line 25720
    HEAP32[$220 >> 2] = $2; //@line 25721
    $221 = $ReallocAsyncCtx11 + 12 | 0; //@line 25722
    HEAP32[$221 >> 2] = $$03071$reg2mem$0; //@line 25723
    $222 = $ReallocAsyncCtx11 + 16 | 0; //@line 25724
    HEAP32[$222 >> 2] = $10; //@line 25725
    $223 = $ReallocAsyncCtx11 + 20 | 0; //@line 25726
    HEAP32[$223 >> 2] = $6; //@line 25727
    $224 = $ReallocAsyncCtx11 + 24 | 0; //@line 25728
    HEAP32[$224 >> 2] = $$02972$reg2mem$0; //@line 25729
    $225 = $ReallocAsyncCtx11 + 28 | 0; //@line 25730
    HEAP32[$225 >> 2] = $14; //@line 25731
    $226 = $ReallocAsyncCtx11 + 32 | 0; //@line 25732
    HEAP32[$226 >> 2] = $16; //@line 25733
    $227 = $ReallocAsyncCtx11 + 36 | 0; //@line 25734
    HEAP32[$227 >> 2] = $18; //@line 25735
    $228 = $ReallocAsyncCtx11 + 40 | 0; //@line 25736
    HEAP32[$228 >> 2] = $20; //@line 25737
    $229 = $ReallocAsyncCtx11 + 44 | 0; //@line 25738
    HEAP32[$229 >> 2] = $22; //@line 25739
    $230 = $ReallocAsyncCtx11 + 48 | 0; //@line 25740
    HEAP32[$230 >> 2] = $24; //@line 25741
    $231 = $ReallocAsyncCtx11 + 52 | 0; //@line 25742
    HEAP32[$231 >> 2] = $26; //@line 25743
    $232 = $ReallocAsyncCtx11 + 56 | 0; //@line 25744
    HEAP32[$232 >> 2] = $28; //@line 25745
    $233 = $ReallocAsyncCtx11 + 60 | 0; //@line 25746
    HEAP32[$233 >> 2] = $30; //@line 25747
    $234 = $ReallocAsyncCtx11 + 64 | 0; //@line 25748
    HEAP32[$234 >> 2] = $32; //@line 25749
    $235 = $ReallocAsyncCtx11 + 68 | 0; //@line 25750
    HEAP32[$235 >> 2] = $34; //@line 25751
    $236 = $ReallocAsyncCtx11 + 72 | 0; //@line 25752
    HEAP32[$236 >> 2] = $36; //@line 25753
    $237 = $ReallocAsyncCtx11 + 76 | 0; //@line 25754
    HEAP32[$237 >> 2] = $38; //@line 25755
    $238 = $ReallocAsyncCtx11 + 80 | 0; //@line 25756
    HEAP32[$238 >> 2] = $40; //@line 25757
    $239 = $ReallocAsyncCtx11 + 84 | 0; //@line 25758
    HEAP32[$239 >> 2] = $42; //@line 25759
    $240 = $ReallocAsyncCtx11 + 88 | 0; //@line 25760
    HEAP32[$240 >> 2] = $44; //@line 25761
    $241 = $ReallocAsyncCtx11 + 92 | 0; //@line 25762
    HEAP32[$241 >> 2] = $46; //@line 25763
    $242 = $ReallocAsyncCtx11 + 96 | 0; //@line 25764
    HEAP32[$242 >> 2] = $48; //@line 25765
    $243 = $ReallocAsyncCtx11 + 100 | 0; //@line 25766
    HEAP32[$243 >> 2] = $50; //@line 25767
    sp = STACKTOP; //@line 25768
    return;
   }
   ___async_unwind = 0; //@line 25771
   HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 25772
   $219 = $ReallocAsyncCtx11 + 4 | 0; //@line 25773
   HEAP32[$219 >> 2] = $$reg2mem$0; //@line 25774
   $220 = $ReallocAsyncCtx11 + 8 | 0; //@line 25775
   HEAP32[$220 >> 2] = $2; //@line 25776
   $221 = $ReallocAsyncCtx11 + 12 | 0; //@line 25777
   HEAP32[$221 >> 2] = $$03071$reg2mem$0; //@line 25778
   $222 = $ReallocAsyncCtx11 + 16 | 0; //@line 25779
   HEAP32[$222 >> 2] = $10; //@line 25780
   $223 = $ReallocAsyncCtx11 + 20 | 0; //@line 25781
   HEAP32[$223 >> 2] = $6; //@line 25782
   $224 = $ReallocAsyncCtx11 + 24 | 0; //@line 25783
   HEAP32[$224 >> 2] = $$02972$reg2mem$0; //@line 25784
   $225 = $ReallocAsyncCtx11 + 28 | 0; //@line 25785
   HEAP32[$225 >> 2] = $14; //@line 25786
   $226 = $ReallocAsyncCtx11 + 32 | 0; //@line 25787
   HEAP32[$226 >> 2] = $16; //@line 25788
   $227 = $ReallocAsyncCtx11 + 36 | 0; //@line 25789
   HEAP32[$227 >> 2] = $18; //@line 25790
   $228 = $ReallocAsyncCtx11 + 40 | 0; //@line 25791
   HEAP32[$228 >> 2] = $20; //@line 25792
   $229 = $ReallocAsyncCtx11 + 44 | 0; //@line 25793
   HEAP32[$229 >> 2] = $22; //@line 25794
   $230 = $ReallocAsyncCtx11 + 48 | 0; //@line 25795
   HEAP32[$230 >> 2] = $24; //@line 25796
   $231 = $ReallocAsyncCtx11 + 52 | 0; //@line 25797
   HEAP32[$231 >> 2] = $26; //@line 25798
   $232 = $ReallocAsyncCtx11 + 56 | 0; //@line 25799
   HEAP32[$232 >> 2] = $28; //@line 25800
   $233 = $ReallocAsyncCtx11 + 60 | 0; //@line 25801
   HEAP32[$233 >> 2] = $30; //@line 25802
   $234 = $ReallocAsyncCtx11 + 64 | 0; //@line 25803
   HEAP32[$234 >> 2] = $32; //@line 25804
   $235 = $ReallocAsyncCtx11 + 68 | 0; //@line 25805
   HEAP32[$235 >> 2] = $34; //@line 25806
   $236 = $ReallocAsyncCtx11 + 72 | 0; //@line 25807
   HEAP32[$236 >> 2] = $36; //@line 25808
   $237 = $ReallocAsyncCtx11 + 76 | 0; //@line 25809
   HEAP32[$237 >> 2] = $38; //@line 25810
   $238 = $ReallocAsyncCtx11 + 80 | 0; //@line 25811
   HEAP32[$238 >> 2] = $40; //@line 25812
   $239 = $ReallocAsyncCtx11 + 84 | 0; //@line 25813
   HEAP32[$239 >> 2] = $42; //@line 25814
   $240 = $ReallocAsyncCtx11 + 88 | 0; //@line 25815
   HEAP32[$240 >> 2] = $44; //@line 25816
   $241 = $ReallocAsyncCtx11 + 92 | 0; //@line 25817
   HEAP32[$241 >> 2] = $46; //@line 25818
   $242 = $ReallocAsyncCtx11 + 96 | 0; //@line 25819
   HEAP32[$242 >> 2] = $48; //@line 25820
   $243 = $ReallocAsyncCtx11 + 100 | 0; //@line 25821
   HEAP32[$243 >> 2] = $50; //@line 25822
   sp = STACKTOP; //@line 25823
   return;
  } else {
   $191 = HEAP32[$187 + 4 >> 2] | 0; //@line 25828
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 25829
   FUNCTION_TABLE_vii[$191 & 7]($32, $180 + 32 | 0); //@line 25830
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 25833
    $192 = $ReallocAsyncCtx4 + 4 | 0; //@line 25834
    HEAP32[$192 >> 2] = $$reg2mem$0; //@line 25835
    $193 = $ReallocAsyncCtx4 + 8 | 0; //@line 25836
    HEAP32[$193 >> 2] = $2; //@line 25837
    $194 = $ReallocAsyncCtx4 + 12 | 0; //@line 25838
    HEAP32[$194 >> 2] = $$03071$reg2mem$0; //@line 25839
    $195 = $ReallocAsyncCtx4 + 16 | 0; //@line 25840
    HEAP32[$195 >> 2] = $10; //@line 25841
    $196 = $ReallocAsyncCtx4 + 20 | 0; //@line 25842
    HEAP32[$196 >> 2] = $6; //@line 25843
    $197 = $ReallocAsyncCtx4 + 24 | 0; //@line 25844
    HEAP32[$197 >> 2] = $$02972$reg2mem$0; //@line 25845
    $198 = $ReallocAsyncCtx4 + 28 | 0; //@line 25846
    HEAP32[$198 >> 2] = $14; //@line 25847
    $199 = $ReallocAsyncCtx4 + 32 | 0; //@line 25848
    HEAP32[$199 >> 2] = $16; //@line 25849
    $200 = $ReallocAsyncCtx4 + 36 | 0; //@line 25850
    HEAP32[$200 >> 2] = $18; //@line 25851
    $201 = $ReallocAsyncCtx4 + 40 | 0; //@line 25852
    HEAP32[$201 >> 2] = $20; //@line 25853
    $202 = $ReallocAsyncCtx4 + 44 | 0; //@line 25854
    HEAP32[$202 >> 2] = $22; //@line 25855
    $203 = $ReallocAsyncCtx4 + 48 | 0; //@line 25856
    HEAP32[$203 >> 2] = $24; //@line 25857
    $204 = $ReallocAsyncCtx4 + 52 | 0; //@line 25858
    HEAP32[$204 >> 2] = $26; //@line 25859
    $205 = $ReallocAsyncCtx4 + 56 | 0; //@line 25860
    HEAP32[$205 >> 2] = $28; //@line 25861
    $206 = $ReallocAsyncCtx4 + 60 | 0; //@line 25862
    HEAP32[$206 >> 2] = $30; //@line 25863
    $207 = $ReallocAsyncCtx4 + 64 | 0; //@line 25864
    HEAP32[$207 >> 2] = $32; //@line 25865
    $208 = $ReallocAsyncCtx4 + 68 | 0; //@line 25866
    HEAP32[$208 >> 2] = $34; //@line 25867
    $209 = $ReallocAsyncCtx4 + 72 | 0; //@line 25868
    HEAP32[$209 >> 2] = $36; //@line 25869
    $210 = $ReallocAsyncCtx4 + 76 | 0; //@line 25870
    HEAP32[$210 >> 2] = $38; //@line 25871
    $211 = $ReallocAsyncCtx4 + 80 | 0; //@line 25872
    HEAP32[$211 >> 2] = $40; //@line 25873
    $212 = $ReallocAsyncCtx4 + 84 | 0; //@line 25874
    HEAP32[$212 >> 2] = $42; //@line 25875
    $213 = $ReallocAsyncCtx4 + 88 | 0; //@line 25876
    HEAP32[$213 >> 2] = $44; //@line 25877
    $214 = $ReallocAsyncCtx4 + 92 | 0; //@line 25878
    HEAP32[$214 >> 2] = $46; //@line 25879
    $215 = $ReallocAsyncCtx4 + 96 | 0; //@line 25880
    HEAP32[$215 >> 2] = $48; //@line 25881
    $216 = $ReallocAsyncCtx4 + 100 | 0; //@line 25882
    HEAP32[$216 >> 2] = $50; //@line 25883
    $217 = $ReallocAsyncCtx4 + 104 | 0; //@line 25884
    HEAP32[$217 >> 2] = $186; //@line 25885
    sp = STACKTOP; //@line 25886
    return;
   }
   ___async_unwind = 0; //@line 25889
   HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 25890
   $192 = $ReallocAsyncCtx4 + 4 | 0; //@line 25891
   HEAP32[$192 >> 2] = $$reg2mem$0; //@line 25892
   $193 = $ReallocAsyncCtx4 + 8 | 0; //@line 25893
   HEAP32[$193 >> 2] = $2; //@line 25894
   $194 = $ReallocAsyncCtx4 + 12 | 0; //@line 25895
   HEAP32[$194 >> 2] = $$03071$reg2mem$0; //@line 25896
   $195 = $ReallocAsyncCtx4 + 16 | 0; //@line 25897
   HEAP32[$195 >> 2] = $10; //@line 25898
   $196 = $ReallocAsyncCtx4 + 20 | 0; //@line 25899
   HEAP32[$196 >> 2] = $6; //@line 25900
   $197 = $ReallocAsyncCtx4 + 24 | 0; //@line 25901
   HEAP32[$197 >> 2] = $$02972$reg2mem$0; //@line 25902
   $198 = $ReallocAsyncCtx4 + 28 | 0; //@line 25903
   HEAP32[$198 >> 2] = $14; //@line 25904
   $199 = $ReallocAsyncCtx4 + 32 | 0; //@line 25905
   HEAP32[$199 >> 2] = $16; //@line 25906
   $200 = $ReallocAsyncCtx4 + 36 | 0; //@line 25907
   HEAP32[$200 >> 2] = $18; //@line 25908
   $201 = $ReallocAsyncCtx4 + 40 | 0; //@line 25909
   HEAP32[$201 >> 2] = $20; //@line 25910
   $202 = $ReallocAsyncCtx4 + 44 | 0; //@line 25911
   HEAP32[$202 >> 2] = $22; //@line 25912
   $203 = $ReallocAsyncCtx4 + 48 | 0; //@line 25913
   HEAP32[$203 >> 2] = $24; //@line 25914
   $204 = $ReallocAsyncCtx4 + 52 | 0; //@line 25915
   HEAP32[$204 >> 2] = $26; //@line 25916
   $205 = $ReallocAsyncCtx4 + 56 | 0; //@line 25917
   HEAP32[$205 >> 2] = $28; //@line 25918
   $206 = $ReallocAsyncCtx4 + 60 | 0; //@line 25919
   HEAP32[$206 >> 2] = $30; //@line 25920
   $207 = $ReallocAsyncCtx4 + 64 | 0; //@line 25921
   HEAP32[$207 >> 2] = $32; //@line 25922
   $208 = $ReallocAsyncCtx4 + 68 | 0; //@line 25923
   HEAP32[$208 >> 2] = $34; //@line 25924
   $209 = $ReallocAsyncCtx4 + 72 | 0; //@line 25925
   HEAP32[$209 >> 2] = $36; //@line 25926
   $210 = $ReallocAsyncCtx4 + 76 | 0; //@line 25927
   HEAP32[$210 >> 2] = $38; //@line 25928
   $211 = $ReallocAsyncCtx4 + 80 | 0; //@line 25929
   HEAP32[$211 >> 2] = $40; //@line 25930
   $212 = $ReallocAsyncCtx4 + 84 | 0; //@line 25931
   HEAP32[$212 >> 2] = $42; //@line 25932
   $213 = $ReallocAsyncCtx4 + 88 | 0; //@line 25933
   HEAP32[$213 >> 2] = $44; //@line 25934
   $214 = $ReallocAsyncCtx4 + 92 | 0; //@line 25935
   HEAP32[$214 >> 2] = $46; //@line 25936
   $215 = $ReallocAsyncCtx4 + 96 | 0; //@line 25937
   HEAP32[$215 >> 2] = $48; //@line 25938
   $216 = $ReallocAsyncCtx4 + 100 | 0; //@line 25939
   HEAP32[$216 >> 2] = $50; //@line 25940
   $217 = $ReallocAsyncCtx4 + 104 | 0; //@line 25941
   HEAP32[$217 >> 2] = $186; //@line 25942
   sp = STACKTOP; //@line 25943
   return;
  }
 }
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_109($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $247 = 0, $248 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $258 = 0, $26 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 24093
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24095
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24097
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24099
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24101
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24103
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24105
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24107
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24109
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24111
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24113
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24115
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24117
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24119
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24121
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24123
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24125
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 24127
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 24129
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 24131
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 24133
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 24135
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 24137
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 24139
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 24141
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 24143
 $186 = HEAP32[$42 >> 2] | 0; //@line 24144
 if ($186 | 0) {
  $189 = HEAP32[$186 + 8 >> 2] | 0; //@line 24148
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(104) | 0; //@line 24149
  FUNCTION_TABLE_vi[$189 & 511]($50); //@line 24150
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 198; //@line 24153
   $190 = $ReallocAsyncCtx5 + 4 | 0; //@line 24154
   HEAP32[$190 >> 2] = $2; //@line 24155
   $191 = $ReallocAsyncCtx5 + 8 | 0; //@line 24156
   HEAP32[$191 >> 2] = $4; //@line 24157
   $192 = $ReallocAsyncCtx5 + 12 | 0; //@line 24158
   HEAP32[$192 >> 2] = $6; //@line 24159
   $193 = $ReallocAsyncCtx5 + 16 | 0; //@line 24160
   HEAP32[$193 >> 2] = $8; //@line 24161
   $194 = $ReallocAsyncCtx5 + 20 | 0; //@line 24162
   HEAP32[$194 >> 2] = $10; //@line 24163
   $195 = $ReallocAsyncCtx5 + 24 | 0; //@line 24164
   HEAP32[$195 >> 2] = $12; //@line 24165
   $196 = $ReallocAsyncCtx5 + 28 | 0; //@line 24166
   HEAP32[$196 >> 2] = $14; //@line 24167
   $197 = $ReallocAsyncCtx5 + 32 | 0; //@line 24168
   HEAP32[$197 >> 2] = $16; //@line 24169
   $198 = $ReallocAsyncCtx5 + 36 | 0; //@line 24170
   HEAP32[$198 >> 2] = $18; //@line 24171
   $199 = $ReallocAsyncCtx5 + 40 | 0; //@line 24172
   HEAP32[$199 >> 2] = $20; //@line 24173
   $200 = $ReallocAsyncCtx5 + 44 | 0; //@line 24174
   HEAP32[$200 >> 2] = $22; //@line 24175
   $201 = $ReallocAsyncCtx5 + 48 | 0; //@line 24176
   HEAP32[$201 >> 2] = $24; //@line 24177
   $202 = $ReallocAsyncCtx5 + 52 | 0; //@line 24178
   HEAP32[$202 >> 2] = $26; //@line 24179
   $203 = $ReallocAsyncCtx5 + 56 | 0; //@line 24180
   HEAP32[$203 >> 2] = $28; //@line 24181
   $204 = $ReallocAsyncCtx5 + 60 | 0; //@line 24182
   HEAP32[$204 >> 2] = $30; //@line 24183
   $205 = $ReallocAsyncCtx5 + 64 | 0; //@line 24184
   HEAP32[$205 >> 2] = $32; //@line 24185
   $206 = $ReallocAsyncCtx5 + 68 | 0; //@line 24186
   HEAP32[$206 >> 2] = $34; //@line 24187
   $207 = $ReallocAsyncCtx5 + 72 | 0; //@line 24188
   HEAP32[$207 >> 2] = $36; //@line 24189
   $208 = $ReallocAsyncCtx5 + 76 | 0; //@line 24190
   HEAP32[$208 >> 2] = $38; //@line 24191
   $209 = $ReallocAsyncCtx5 + 80 | 0; //@line 24192
   HEAP32[$209 >> 2] = $40; //@line 24193
   $210 = $ReallocAsyncCtx5 + 84 | 0; //@line 24194
   HEAP32[$210 >> 2] = $42; //@line 24195
   $211 = $ReallocAsyncCtx5 + 88 | 0; //@line 24196
   HEAP32[$211 >> 2] = $44; //@line 24197
   $212 = $ReallocAsyncCtx5 + 92 | 0; //@line 24198
   HEAP32[$212 >> 2] = $46; //@line 24199
   $213 = $ReallocAsyncCtx5 + 96 | 0; //@line 24200
   HEAP32[$213 >> 2] = $48; //@line 24201
   $214 = $ReallocAsyncCtx5 + 100 | 0; //@line 24202
   HEAP32[$214 >> 2] = $50; //@line 24203
   sp = STACKTOP; //@line 24204
   return;
  }
  ___async_unwind = 0; //@line 24207
  HEAP32[$ReallocAsyncCtx5 >> 2] = 198; //@line 24208
  $190 = $ReallocAsyncCtx5 + 4 | 0; //@line 24209
  HEAP32[$190 >> 2] = $2; //@line 24210
  $191 = $ReallocAsyncCtx5 + 8 | 0; //@line 24211
  HEAP32[$191 >> 2] = $4; //@line 24212
  $192 = $ReallocAsyncCtx5 + 12 | 0; //@line 24213
  HEAP32[$192 >> 2] = $6; //@line 24214
  $193 = $ReallocAsyncCtx5 + 16 | 0; //@line 24215
  HEAP32[$193 >> 2] = $8; //@line 24216
  $194 = $ReallocAsyncCtx5 + 20 | 0; //@line 24217
  HEAP32[$194 >> 2] = $10; //@line 24218
  $195 = $ReallocAsyncCtx5 + 24 | 0; //@line 24219
  HEAP32[$195 >> 2] = $12; //@line 24220
  $196 = $ReallocAsyncCtx5 + 28 | 0; //@line 24221
  HEAP32[$196 >> 2] = $14; //@line 24222
  $197 = $ReallocAsyncCtx5 + 32 | 0; //@line 24223
  HEAP32[$197 >> 2] = $16; //@line 24224
  $198 = $ReallocAsyncCtx5 + 36 | 0; //@line 24225
  HEAP32[$198 >> 2] = $18; //@line 24226
  $199 = $ReallocAsyncCtx5 + 40 | 0; //@line 24227
  HEAP32[$199 >> 2] = $20; //@line 24228
  $200 = $ReallocAsyncCtx5 + 44 | 0; //@line 24229
  HEAP32[$200 >> 2] = $22; //@line 24230
  $201 = $ReallocAsyncCtx5 + 48 | 0; //@line 24231
  HEAP32[$201 >> 2] = $24; //@line 24232
  $202 = $ReallocAsyncCtx5 + 52 | 0; //@line 24233
  HEAP32[$202 >> 2] = $26; //@line 24234
  $203 = $ReallocAsyncCtx5 + 56 | 0; //@line 24235
  HEAP32[$203 >> 2] = $28; //@line 24236
  $204 = $ReallocAsyncCtx5 + 60 | 0; //@line 24237
  HEAP32[$204 >> 2] = $30; //@line 24238
  $205 = $ReallocAsyncCtx5 + 64 | 0; //@line 24239
  HEAP32[$205 >> 2] = $32; //@line 24240
  $206 = $ReallocAsyncCtx5 + 68 | 0; //@line 24241
  HEAP32[$206 >> 2] = $34; //@line 24242
  $207 = $ReallocAsyncCtx5 + 72 | 0; //@line 24243
  HEAP32[$207 >> 2] = $36; //@line 24244
  $208 = $ReallocAsyncCtx5 + 76 | 0; //@line 24245
  HEAP32[$208 >> 2] = $38; //@line 24246
  $209 = $ReallocAsyncCtx5 + 80 | 0; //@line 24247
  HEAP32[$209 >> 2] = $40; //@line 24248
  $210 = $ReallocAsyncCtx5 + 84 | 0; //@line 24249
  HEAP32[$210 >> 2] = $42; //@line 24250
  $211 = $ReallocAsyncCtx5 + 88 | 0; //@line 24251
  HEAP32[$211 >> 2] = $44; //@line 24252
  $212 = $ReallocAsyncCtx5 + 92 | 0; //@line 24253
  HEAP32[$212 >> 2] = $46; //@line 24254
  $213 = $ReallocAsyncCtx5 + 96 | 0; //@line 24255
  HEAP32[$213 >> 2] = $48; //@line 24256
  $214 = $ReallocAsyncCtx5 + 100 | 0; //@line 24257
  HEAP32[$214 >> 2] = $50; //@line 24258
  sp = STACKTOP; //@line 24259
  return;
 }
 $215 = HEAP32[$48 >> 2] | 0; //@line 24262
 if (!$215) {
  $$02972$reg2mem$0 = $12; //@line 24265
  $$03071$reg2mem$0 = $6; //@line 24265
  $$reg2mem$0 = $2; //@line 24265
 } else {
  $218 = HEAP32[$215 + 8 >> 2] | 0; //@line 24268
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 24269
  FUNCTION_TABLE_vi[$218 & 511]($32); //@line 24270
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 199; //@line 24273
   $219 = $ReallocAsyncCtx6 + 4 | 0; //@line 24274
   HEAP32[$219 >> 2] = $2; //@line 24275
   $220 = $ReallocAsyncCtx6 + 8 | 0; //@line 24276
   HEAP32[$220 >> 2] = $4; //@line 24277
   $221 = $ReallocAsyncCtx6 + 12 | 0; //@line 24278
   HEAP32[$221 >> 2] = $6; //@line 24279
   $222 = $ReallocAsyncCtx6 + 16 | 0; //@line 24280
   HEAP32[$222 >> 2] = $8; //@line 24281
   $223 = $ReallocAsyncCtx6 + 20 | 0; //@line 24282
   HEAP32[$223 >> 2] = $10; //@line 24283
   $224 = $ReallocAsyncCtx6 + 24 | 0; //@line 24284
   HEAP32[$224 >> 2] = $14; //@line 24285
   $225 = $ReallocAsyncCtx6 + 28 | 0; //@line 24286
   HEAP32[$225 >> 2] = $16; //@line 24287
   $226 = $ReallocAsyncCtx6 + 32 | 0; //@line 24288
   HEAP32[$226 >> 2] = $18; //@line 24289
   $227 = $ReallocAsyncCtx6 + 36 | 0; //@line 24290
   HEAP32[$227 >> 2] = $20; //@line 24291
   $228 = $ReallocAsyncCtx6 + 40 | 0; //@line 24292
   HEAP32[$228 >> 2] = $22; //@line 24293
   $229 = $ReallocAsyncCtx6 + 44 | 0; //@line 24294
   HEAP32[$229 >> 2] = $24; //@line 24295
   $230 = $ReallocAsyncCtx6 + 48 | 0; //@line 24296
   HEAP32[$230 >> 2] = $26; //@line 24297
   $231 = $ReallocAsyncCtx6 + 52 | 0; //@line 24298
   HEAP32[$231 >> 2] = $28; //@line 24299
   $232 = $ReallocAsyncCtx6 + 56 | 0; //@line 24300
   HEAP32[$232 >> 2] = $30; //@line 24301
   $233 = $ReallocAsyncCtx6 + 60 | 0; //@line 24302
   HEAP32[$233 >> 2] = $32; //@line 24303
   $234 = $ReallocAsyncCtx6 + 64 | 0; //@line 24304
   HEAP32[$234 >> 2] = $34; //@line 24305
   $235 = $ReallocAsyncCtx6 + 68 | 0; //@line 24306
   HEAP32[$235 >> 2] = $36; //@line 24307
   $236 = $ReallocAsyncCtx6 + 72 | 0; //@line 24308
   HEAP32[$236 >> 2] = $38; //@line 24309
   $237 = $ReallocAsyncCtx6 + 76 | 0; //@line 24310
   HEAP32[$237 >> 2] = $40; //@line 24311
   $238 = $ReallocAsyncCtx6 + 80 | 0; //@line 24312
   HEAP32[$238 >> 2] = $42; //@line 24313
   $239 = $ReallocAsyncCtx6 + 84 | 0; //@line 24314
   HEAP32[$239 >> 2] = $44; //@line 24315
   $240 = $ReallocAsyncCtx6 + 88 | 0; //@line 24316
   HEAP32[$240 >> 2] = $46; //@line 24317
   $241 = $ReallocAsyncCtx6 + 92 | 0; //@line 24318
   HEAP32[$241 >> 2] = $48; //@line 24319
   $242 = $ReallocAsyncCtx6 + 96 | 0; //@line 24320
   HEAP32[$242 >> 2] = $50; //@line 24321
   $243 = $ReallocAsyncCtx6 + 100 | 0; //@line 24322
   HEAP32[$243 >> 2] = $12; //@line 24323
   sp = STACKTOP; //@line 24324
   return;
  }
  ___async_unwind = 0; //@line 24327
  HEAP32[$ReallocAsyncCtx6 >> 2] = 199; //@line 24328
  $219 = $ReallocAsyncCtx6 + 4 | 0; //@line 24329
  HEAP32[$219 >> 2] = $2; //@line 24330
  $220 = $ReallocAsyncCtx6 + 8 | 0; //@line 24331
  HEAP32[$220 >> 2] = $4; //@line 24332
  $221 = $ReallocAsyncCtx6 + 12 | 0; //@line 24333
  HEAP32[$221 >> 2] = $6; //@line 24334
  $222 = $ReallocAsyncCtx6 + 16 | 0; //@line 24335
  HEAP32[$222 >> 2] = $8; //@line 24336
  $223 = $ReallocAsyncCtx6 + 20 | 0; //@line 24337
  HEAP32[$223 >> 2] = $10; //@line 24338
  $224 = $ReallocAsyncCtx6 + 24 | 0; //@line 24339
  HEAP32[$224 >> 2] = $14; //@line 24340
  $225 = $ReallocAsyncCtx6 + 28 | 0; //@line 24341
  HEAP32[$225 >> 2] = $16; //@line 24342
  $226 = $ReallocAsyncCtx6 + 32 | 0; //@line 24343
  HEAP32[$226 >> 2] = $18; //@line 24344
  $227 = $ReallocAsyncCtx6 + 36 | 0; //@line 24345
  HEAP32[$227 >> 2] = $20; //@line 24346
  $228 = $ReallocAsyncCtx6 + 40 | 0; //@line 24347
  HEAP32[$228 >> 2] = $22; //@line 24348
  $229 = $ReallocAsyncCtx6 + 44 | 0; //@line 24349
  HEAP32[$229 >> 2] = $24; //@line 24350
  $230 = $ReallocAsyncCtx6 + 48 | 0; //@line 24351
  HEAP32[$230 >> 2] = $26; //@line 24352
  $231 = $ReallocAsyncCtx6 + 52 | 0; //@line 24353
  HEAP32[$231 >> 2] = $28; //@line 24354
  $232 = $ReallocAsyncCtx6 + 56 | 0; //@line 24355
  HEAP32[$232 >> 2] = $30; //@line 24356
  $233 = $ReallocAsyncCtx6 + 60 | 0; //@line 24357
  HEAP32[$233 >> 2] = $32; //@line 24358
  $234 = $ReallocAsyncCtx6 + 64 | 0; //@line 24359
  HEAP32[$234 >> 2] = $34; //@line 24360
  $235 = $ReallocAsyncCtx6 + 68 | 0; //@line 24361
  HEAP32[$235 >> 2] = $36; //@line 24362
  $236 = $ReallocAsyncCtx6 + 72 | 0; //@line 24363
  HEAP32[$236 >> 2] = $38; //@line 24364
  $237 = $ReallocAsyncCtx6 + 76 | 0; //@line 24365
  HEAP32[$237 >> 2] = $40; //@line 24366
  $238 = $ReallocAsyncCtx6 + 80 | 0; //@line 24367
  HEAP32[$238 >> 2] = $42; //@line 24368
  $239 = $ReallocAsyncCtx6 + 84 | 0; //@line 24369
  HEAP32[$239 >> 2] = $44; //@line 24370
  $240 = $ReallocAsyncCtx6 + 88 | 0; //@line 24371
  HEAP32[$240 >> 2] = $46; //@line 24372
  $241 = $ReallocAsyncCtx6 + 92 | 0; //@line 24373
  HEAP32[$241 >> 2] = $48; //@line 24374
  $242 = $ReallocAsyncCtx6 + 96 | 0; //@line 24375
  HEAP32[$242 >> 2] = $50; //@line 24376
  $243 = $ReallocAsyncCtx6 + 100 | 0; //@line 24377
  HEAP32[$243 >> 2] = $12; //@line 24378
  sp = STACKTOP; //@line 24379
  return;
 }
 L15 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 24386
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 24386
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 24388
   $$131 = $$03071$reg2mem$0; //@line 24388
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 24391
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 24394
    break L15;
   }
   $52 = 10072 + ($$02972$reg2mem$1 << 2) | 0; //@line 24397
   $54 = HEAP32[$52 >> 2] | 0; //@line 24398
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 24406
  $57 = HEAP32[$56 >> 2] | 0; //@line 24407
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 24411
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 24417
    break;
   }
  }
  $122 = HEAP32[$52 >> 2] | 0; //@line 24421
  $123 = $122 + 76 | 0; //@line 24422
  $124 = HEAP32[$123 >> 2] | 0; //@line 24423
  if (!$124) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 24426
   $$03071$reg2mem$0 = $$131; //@line 24426
   $$reg2mem$0 = $52; //@line 24426
   continue;
  }
  if ($124 >>> 0 <= 100) {
   label = 17; //@line 24431
   break;
  }
  HEAP32[$123 >> 2] = $124 + -100; //@line 24435
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 24436
  $$03071$reg2mem$0 = $$131; //@line 24436
  $$reg2mem$0 = $52; //@line 24436
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $247 = $$131 + 44 | 0; //@line 24443
  $248 = HEAP32[$247 >> 2] | 0; //@line 24444
  if (!$248) {
   $256 = $28 + 12 | 0; //@line 24447
   HEAP32[$256 >> 2] = 0; //@line 24448
   $258 = $30 + 4 | 0; //@line 24450
   HEAP32[$258 >> 2] = 0; //@line 24452
   HEAP32[$258 + 4 >> 2] = 0; //@line 24455
   HEAP32[$30 >> 2] = 3; //@line 24456
   $262 = $30 + 12 | 0; //@line 24457
   HEAP32[$262 >> 2] = 712; //@line 24458
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 24459
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($28, 100, $30) | 0; //@line 24460
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 24463
    $263 = $ReallocAsyncCtx10 + 4 | 0; //@line 24464
    HEAP32[$263 >> 2] = $262; //@line 24465
    $264 = $ReallocAsyncCtx10 + 8 | 0; //@line 24466
    HEAP32[$264 >> 2] = $256; //@line 24467
    $265 = $ReallocAsyncCtx10 + 12 | 0; //@line 24468
    HEAP32[$265 >> 2] = $30; //@line 24469
    $266 = $ReallocAsyncCtx10 + 16 | 0; //@line 24470
    HEAP32[$266 >> 2] = $28; //@line 24471
    sp = STACKTOP; //@line 24472
    return;
   }
   ___async_unwind = 0; //@line 24475
   HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 24476
   $263 = $ReallocAsyncCtx10 + 4 | 0; //@line 24477
   HEAP32[$263 >> 2] = $262; //@line 24478
   $264 = $ReallocAsyncCtx10 + 8 | 0; //@line 24479
   HEAP32[$264 >> 2] = $256; //@line 24480
   $265 = $ReallocAsyncCtx10 + 12 | 0; //@line 24481
   HEAP32[$265 >> 2] = $30; //@line 24482
   $266 = $ReallocAsyncCtx10 + 16 | 0; //@line 24483
   HEAP32[$266 >> 2] = $28; //@line 24484
   sp = STACKTOP; //@line 24485
   return;
  } else {
   $252 = HEAP32[$248 + 4 >> 2] | 0; //@line 24490
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 24491
   FUNCTION_TABLE_vii[$252 & 7]($28, $$131 + 32 | 0); //@line 24492
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 24495
    $253 = $ReallocAsyncCtx7 + 4 | 0; //@line 24496
    HEAP32[$253 >> 2] = $247; //@line 24497
    $254 = $ReallocAsyncCtx7 + 8 | 0; //@line 24498
    HEAP32[$254 >> 2] = $28; //@line 24499
    $255 = $ReallocAsyncCtx7 + 12 | 0; //@line 24500
    HEAP32[$255 >> 2] = $30; //@line 24501
    sp = STACKTOP; //@line 24502
    return;
   }
   ___async_unwind = 0; //@line 24505
   HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 24506
   $253 = $ReallocAsyncCtx7 + 4 | 0; //@line 24507
   HEAP32[$253 >> 2] = $247; //@line 24508
   $254 = $ReallocAsyncCtx7 + 8 | 0; //@line 24509
   HEAP32[$254 >> 2] = $28; //@line 24510
   $255 = $ReallocAsyncCtx7 + 12 | 0; //@line 24511
   HEAP32[$255 >> 2] = $30; //@line 24512
   sp = STACKTOP; //@line 24513
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 24519
  $64 = $54 + 44 | 0; //@line 24520
  $65 = HEAP32[$64 >> 2] | 0; //@line 24521
  if (!$65) {
   HEAP32[$14 >> 2] = 0; //@line 24524
   $96 = HEAP32[$54 >> 2] | 0; //@line 24525
   HEAP32[$16 >> 2] = 0; //@line 24526
   HEAP32[$18 >> 2] = 191; //@line 24527
   HEAP32[$20 >> 2] = $96; //@line 24528
   HEAP32[$22 >> 2] = 724; //@line 24529
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 24530
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 24531
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 24534
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 24535
    HEAP32[$97 >> 2] = $4; //@line 24536
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 24537
    HEAP32[$98 >> 2] = $52; //@line 24538
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 24539
    HEAP32[$99 >> 2] = $10; //@line 24540
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 24541
    HEAP32[$100 >> 2] = $$131; //@line 24542
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 24543
    HEAP32[$101 >> 2] = $8; //@line 24544
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 24545
    HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 24546
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 24547
    HEAP32[$103 >> 2] = $14; //@line 24548
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 24549
    HEAP32[$104 >> 2] = $16; //@line 24550
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 24551
    HEAP32[$105 >> 2] = $18; //@line 24552
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 24553
    HEAP32[$106 >> 2] = $20; //@line 24554
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 24555
    HEAP32[$107 >> 2] = $22; //@line 24556
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 24557
    HEAP32[$108 >> 2] = $24; //@line 24558
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 24559
    HEAP32[$109 >> 2] = $26; //@line 24560
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 24561
    HEAP32[$110 >> 2] = $28; //@line 24562
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 24563
    HEAP32[$111 >> 2] = $30; //@line 24564
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 24565
    HEAP32[$112 >> 2] = $32; //@line 24566
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 24567
    HEAP32[$113 >> 2] = $34; //@line 24568
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 24569
    HEAP32[$114 >> 2] = $36; //@line 24570
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 24571
    HEAP32[$115 >> 2] = $38; //@line 24572
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 24573
    HEAP32[$116 >> 2] = $40; //@line 24574
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 24575
    HEAP32[$117 >> 2] = $42; //@line 24576
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 24577
    HEAP32[$118 >> 2] = $44; //@line 24578
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 24579
    HEAP32[$119 >> 2] = $46; //@line 24580
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 24581
    HEAP32[$120 >> 2] = $48; //@line 24582
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 24583
    HEAP32[$121 >> 2] = $50; //@line 24584
    sp = STACKTOP; //@line 24585
    return;
   }
   ___async_unwind = 0; //@line 24588
   HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 24589
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 24590
   HEAP32[$97 >> 2] = $4; //@line 24591
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 24592
   HEAP32[$98 >> 2] = $52; //@line 24593
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 24594
   HEAP32[$99 >> 2] = $10; //@line 24595
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 24596
   HEAP32[$100 >> 2] = $$131; //@line 24597
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 24598
   HEAP32[$101 >> 2] = $8; //@line 24599
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 24600
   HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 24601
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 24602
   HEAP32[$103 >> 2] = $14; //@line 24603
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 24604
   HEAP32[$104 >> 2] = $16; //@line 24605
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 24606
   HEAP32[$105 >> 2] = $18; //@line 24607
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 24608
   HEAP32[$106 >> 2] = $20; //@line 24609
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 24610
   HEAP32[$107 >> 2] = $22; //@line 24611
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 24612
   HEAP32[$108 >> 2] = $24; //@line 24613
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 24614
   HEAP32[$109 >> 2] = $26; //@line 24615
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 24616
   HEAP32[$110 >> 2] = $28; //@line 24617
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 24618
   HEAP32[$111 >> 2] = $30; //@line 24619
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 24620
   HEAP32[$112 >> 2] = $32; //@line 24621
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 24622
   HEAP32[$113 >> 2] = $34; //@line 24623
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 24624
   HEAP32[$114 >> 2] = $36; //@line 24625
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 24626
   HEAP32[$115 >> 2] = $38; //@line 24627
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 24628
   HEAP32[$116 >> 2] = $40; //@line 24629
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 24630
   HEAP32[$117 >> 2] = $42; //@line 24631
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 24632
   HEAP32[$118 >> 2] = $44; //@line 24633
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 24634
   HEAP32[$119 >> 2] = $46; //@line 24635
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 24636
   HEAP32[$120 >> 2] = $48; //@line 24637
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 24638
   HEAP32[$121 >> 2] = $50; //@line 24639
   sp = STACKTOP; //@line 24640
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 24645
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 24646
   FUNCTION_TABLE_vii[$69 & 7]($8, $54 + 32 | 0); //@line 24647
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 24650
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 24651
    HEAP32[$70 >> 2] = $4; //@line 24652
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 24653
    HEAP32[$71 >> 2] = $52; //@line 24654
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 24655
    HEAP32[$72 >> 2] = $10; //@line 24656
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 24657
    HEAP32[$73 >> 2] = $$131; //@line 24658
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 24659
    HEAP32[$74 >> 2] = $8; //@line 24660
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 24661
    HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 24662
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 24663
    HEAP32[$76 >> 2] = $14; //@line 24664
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 24665
    HEAP32[$77 >> 2] = $16; //@line 24666
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 24667
    HEAP32[$78 >> 2] = $18; //@line 24668
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 24669
    HEAP32[$79 >> 2] = $20; //@line 24670
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 24671
    HEAP32[$80 >> 2] = $22; //@line 24672
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 24673
    HEAP32[$81 >> 2] = $24; //@line 24674
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 24675
    HEAP32[$82 >> 2] = $26; //@line 24676
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 24677
    HEAP32[$83 >> 2] = $28; //@line 24678
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 24679
    HEAP32[$84 >> 2] = $30; //@line 24680
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 24681
    HEAP32[$85 >> 2] = $64; //@line 24682
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 24683
    HEAP32[$86 >> 2] = $32; //@line 24684
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 24685
    HEAP32[$87 >> 2] = $34; //@line 24686
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 24687
    HEAP32[$88 >> 2] = $36; //@line 24688
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 24689
    HEAP32[$89 >> 2] = $38; //@line 24690
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 24691
    HEAP32[$90 >> 2] = $40; //@line 24692
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 24693
    HEAP32[$91 >> 2] = $42; //@line 24694
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 24695
    HEAP32[$92 >> 2] = $44; //@line 24696
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 24697
    HEAP32[$93 >> 2] = $46; //@line 24698
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 24699
    HEAP32[$94 >> 2] = $48; //@line 24700
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 24701
    HEAP32[$95 >> 2] = $50; //@line 24702
    sp = STACKTOP; //@line 24703
    return;
   }
   ___async_unwind = 0; //@line 24706
   HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 24707
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 24708
   HEAP32[$70 >> 2] = $4; //@line 24709
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 24710
   HEAP32[$71 >> 2] = $52; //@line 24711
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 24712
   HEAP32[$72 >> 2] = $10; //@line 24713
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 24714
   HEAP32[$73 >> 2] = $$131; //@line 24715
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 24716
   HEAP32[$74 >> 2] = $8; //@line 24717
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 24718
   HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 24719
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 24720
   HEAP32[$76 >> 2] = $14; //@line 24721
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 24722
   HEAP32[$77 >> 2] = $16; //@line 24723
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 24724
   HEAP32[$78 >> 2] = $18; //@line 24725
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 24726
   HEAP32[$79 >> 2] = $20; //@line 24727
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 24728
   HEAP32[$80 >> 2] = $22; //@line 24729
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 24730
   HEAP32[$81 >> 2] = $24; //@line 24731
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 24732
   HEAP32[$82 >> 2] = $26; //@line 24733
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 24734
   HEAP32[$83 >> 2] = $28; //@line 24735
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 24736
   HEAP32[$84 >> 2] = $30; //@line 24737
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 24738
   HEAP32[$85 >> 2] = $64; //@line 24739
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 24740
   HEAP32[$86 >> 2] = $32; //@line 24741
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 24742
   HEAP32[$87 >> 2] = $34; //@line 24743
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 24744
   HEAP32[$88 >> 2] = $36; //@line 24745
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 24746
   HEAP32[$89 >> 2] = $38; //@line 24747
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 24748
   HEAP32[$90 >> 2] = $40; //@line 24749
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 24750
   HEAP32[$91 >> 2] = $42; //@line 24751
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 24752
   HEAP32[$92 >> 2] = $44; //@line 24753
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 24754
   HEAP32[$93 >> 2] = $46; //@line 24755
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 24756
   HEAP32[$94 >> 2] = $48; //@line 24757
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 24758
   HEAP32[$95 >> 2] = $50; //@line 24759
   sp = STACKTOP; //@line 24760
   return;
  }
 } else if ((label | 0) == 17) {
  HEAP32[$123 >> 2] = 0; //@line 24765
  $128 = $122 + 44 | 0; //@line 24766
  $129 = HEAP32[$128 >> 2] | 0; //@line 24767
  if (!$129) {
   HEAP32[$34 >> 2] = 0; //@line 24770
   $160 = HEAP32[$122 >> 2] | 0; //@line 24771
   HEAP32[$36 >> 2] = 0; //@line 24772
   HEAP32[$38 >> 2] = 196; //@line 24773
   HEAP32[$40 >> 2] = $160; //@line 24774
   HEAP32[$42 >> 2] = 724; //@line 24775
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 24776
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 24777
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 24780
    $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 24781
    HEAP32[$161 >> 2] = $52; //@line 24782
    $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 24783
    HEAP32[$162 >> 2] = $4; //@line 24784
    $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 24785
    HEAP32[$163 >> 2] = $$131; //@line 24786
    $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 24787
    HEAP32[$164 >> 2] = $8; //@line 24788
    $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 24789
    HEAP32[$165 >> 2] = $10; //@line 24790
    $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 24791
    HEAP32[$166 >> 2] = $$02972$reg2mem$1; //@line 24792
    $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 24793
    HEAP32[$167 >> 2] = $14; //@line 24794
    $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 24795
    HEAP32[$168 >> 2] = $16; //@line 24796
    $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 24797
    HEAP32[$169 >> 2] = $18; //@line 24798
    $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 24799
    HEAP32[$170 >> 2] = $20; //@line 24800
    $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 24801
    HEAP32[$171 >> 2] = $22; //@line 24802
    $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 24803
    HEAP32[$172 >> 2] = $24; //@line 24804
    $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 24805
    HEAP32[$173 >> 2] = $26; //@line 24806
    $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 24807
    HEAP32[$174 >> 2] = $28; //@line 24808
    $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 24809
    HEAP32[$175 >> 2] = $30; //@line 24810
    $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 24811
    HEAP32[$176 >> 2] = $32; //@line 24812
    $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 24813
    HEAP32[$177 >> 2] = $34; //@line 24814
    $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 24815
    HEAP32[$178 >> 2] = $36; //@line 24816
    $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 24817
    HEAP32[$179 >> 2] = $38; //@line 24818
    $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 24819
    HEAP32[$180 >> 2] = $40; //@line 24820
    $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 24821
    HEAP32[$181 >> 2] = $42; //@line 24822
    $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 24823
    HEAP32[$182 >> 2] = $44; //@line 24824
    $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 24825
    HEAP32[$183 >> 2] = $46; //@line 24826
    $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 24827
    HEAP32[$184 >> 2] = $48; //@line 24828
    $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 24829
    HEAP32[$185 >> 2] = $50; //@line 24830
    sp = STACKTOP; //@line 24831
    return;
   }
   ___async_unwind = 0; //@line 24834
   HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 24835
   $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 24836
   HEAP32[$161 >> 2] = $52; //@line 24837
   $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 24838
   HEAP32[$162 >> 2] = $4; //@line 24839
   $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 24840
   HEAP32[$163 >> 2] = $$131; //@line 24841
   $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 24842
   HEAP32[$164 >> 2] = $8; //@line 24843
   $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 24844
   HEAP32[$165 >> 2] = $10; //@line 24845
   $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 24846
   HEAP32[$166 >> 2] = $$02972$reg2mem$1; //@line 24847
   $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 24848
   HEAP32[$167 >> 2] = $14; //@line 24849
   $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 24850
   HEAP32[$168 >> 2] = $16; //@line 24851
   $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 24852
   HEAP32[$169 >> 2] = $18; //@line 24853
   $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 24854
   HEAP32[$170 >> 2] = $20; //@line 24855
   $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 24856
   HEAP32[$171 >> 2] = $22; //@line 24857
   $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 24858
   HEAP32[$172 >> 2] = $24; //@line 24859
   $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 24860
   HEAP32[$173 >> 2] = $26; //@line 24861
   $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 24862
   HEAP32[$174 >> 2] = $28; //@line 24863
   $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 24864
   HEAP32[$175 >> 2] = $30; //@line 24865
   $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 24866
   HEAP32[$176 >> 2] = $32; //@line 24867
   $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 24868
   HEAP32[$177 >> 2] = $34; //@line 24869
   $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 24870
   HEAP32[$178 >> 2] = $36; //@line 24871
   $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 24872
   HEAP32[$179 >> 2] = $38; //@line 24873
   $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 24874
   HEAP32[$180 >> 2] = $40; //@line 24875
   $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 24876
   HEAP32[$181 >> 2] = $42; //@line 24877
   $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 24878
   HEAP32[$182 >> 2] = $44; //@line 24879
   $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 24880
   HEAP32[$183 >> 2] = $46; //@line 24881
   $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 24882
   HEAP32[$184 >> 2] = $48; //@line 24883
   $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 24884
   HEAP32[$185 >> 2] = $50; //@line 24885
   sp = STACKTOP; //@line 24886
   return;
  } else {
   $133 = HEAP32[$129 + 4 >> 2] | 0; //@line 24891
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 24892
   FUNCTION_TABLE_vii[$133 & 7]($32, $122 + 32 | 0); //@line 24893
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 24896
    $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 24897
    HEAP32[$134 >> 2] = $52; //@line 24898
    $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 24899
    HEAP32[$135 >> 2] = $4; //@line 24900
    $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 24901
    HEAP32[$136 >> 2] = $$131; //@line 24902
    $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 24903
    HEAP32[$137 >> 2] = $8; //@line 24904
    $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 24905
    HEAP32[$138 >> 2] = $10; //@line 24906
    $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 24907
    HEAP32[$139 >> 2] = $$02972$reg2mem$1; //@line 24908
    $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 24909
    HEAP32[$140 >> 2] = $14; //@line 24910
    $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 24911
    HEAP32[$141 >> 2] = $16; //@line 24912
    $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 24913
    HEAP32[$142 >> 2] = $18; //@line 24914
    $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 24915
    HEAP32[$143 >> 2] = $20; //@line 24916
    $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 24917
    HEAP32[$144 >> 2] = $22; //@line 24918
    $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 24919
    HEAP32[$145 >> 2] = $24; //@line 24920
    $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 24921
    HEAP32[$146 >> 2] = $26; //@line 24922
    $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 24923
    HEAP32[$147 >> 2] = $28; //@line 24924
    $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 24925
    HEAP32[$148 >> 2] = $30; //@line 24926
    $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 24927
    HEAP32[$149 >> 2] = $32; //@line 24928
    $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 24929
    HEAP32[$150 >> 2] = $34; //@line 24930
    $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 24931
    HEAP32[$151 >> 2] = $36; //@line 24932
    $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 24933
    HEAP32[$152 >> 2] = $38; //@line 24934
    $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 24935
    HEAP32[$153 >> 2] = $40; //@line 24936
    $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 24937
    HEAP32[$154 >> 2] = $42; //@line 24938
    $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 24939
    HEAP32[$155 >> 2] = $44; //@line 24940
    $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 24941
    HEAP32[$156 >> 2] = $46; //@line 24942
    $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 24943
    HEAP32[$157 >> 2] = $48; //@line 24944
    $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 24945
    HEAP32[$158 >> 2] = $50; //@line 24946
    $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 24947
    HEAP32[$159 >> 2] = $128; //@line 24948
    sp = STACKTOP; //@line 24949
    return;
   }
   ___async_unwind = 0; //@line 24952
   HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 24953
   $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 24954
   HEAP32[$134 >> 2] = $52; //@line 24955
   $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 24956
   HEAP32[$135 >> 2] = $4; //@line 24957
   $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 24958
   HEAP32[$136 >> 2] = $$131; //@line 24959
   $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 24960
   HEAP32[$137 >> 2] = $8; //@line 24961
   $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 24962
   HEAP32[$138 >> 2] = $10; //@line 24963
   $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 24964
   HEAP32[$139 >> 2] = $$02972$reg2mem$1; //@line 24965
   $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 24966
   HEAP32[$140 >> 2] = $14; //@line 24967
   $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 24968
   HEAP32[$141 >> 2] = $16; //@line 24969
   $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 24970
   HEAP32[$142 >> 2] = $18; //@line 24971
   $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 24972
   HEAP32[$143 >> 2] = $20; //@line 24973
   $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 24974
   HEAP32[$144 >> 2] = $22; //@line 24975
   $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 24976
   HEAP32[$145 >> 2] = $24; //@line 24977
   $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 24978
   HEAP32[$146 >> 2] = $26; //@line 24979
   $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 24980
   HEAP32[$147 >> 2] = $28; //@line 24981
   $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 24982
   HEAP32[$148 >> 2] = $30; //@line 24983
   $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 24984
   HEAP32[$149 >> 2] = $32; //@line 24985
   $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 24986
   HEAP32[$150 >> 2] = $34; //@line 24987
   $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 24988
   HEAP32[$151 >> 2] = $36; //@line 24989
   $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 24990
   HEAP32[$152 >> 2] = $38; //@line 24991
   $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 24992
   HEAP32[$153 >> 2] = $40; //@line 24993
   $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 24994
   HEAP32[$154 >> 2] = $42; //@line 24995
   $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 24996
   HEAP32[$155 >> 2] = $44; //@line 24997
   $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 24998
   HEAP32[$156 >> 2] = $46; //@line 24999
   $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 25000
   HEAP32[$157 >> 2] = $48; //@line 25001
   $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 25002
   HEAP32[$158 >> 2] = $50; //@line 25003
   $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 25004
   HEAP32[$159 >> 2] = $128; //@line 25005
   sp = STACKTOP; //@line 25006
   return;
  }
 }
}
function _sn_coap_builder_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$120$129$i$i = 0, $$120$129$i14$i = 0, $$120$129$i23$i = 0, $$120$129$i32$i = 0, $$120$129$i41$i = 0, $$120$129$i5$i = 0, $$120$129$i50$i = 0, $$120$129$i59$i = 0, $$120$129$i68$i = 0, $$120$232$i$i = 0, $$120$232$i16$i = 0, $$120$232$i25$i = 0, $$120$232$i34$i = 0, $$120$232$i43$i = 0, $$120$232$i52$i = 0, $$120$232$i61$i = 0, $$120$232$i7$i = 0, $$120$232$i70$i = 0, $$120$3$i$i = 0, $$120$3$i17$i = 0, $$120$3$i26$i = 0, $$120$3$i35$i = 0, $$120$3$i44$i = 0, $$120$3$i53$i = 0, $$120$3$i62$i = 0, $$120$3$i71$i = 0, $$120$3$i8$i = 0, $$12026$i$i = 0, $$12026$i12$i = 0, $$12026$i21$i = 0, $$12026$i3$i = 0, $$12026$i30$i = 0, $$12026$i39$i = 0, $$12026$i48$i = 0, $$12026$i57$i = 0, $$12026$i66$i = 0, $$cast = 0, $$sink13$i = 0, $$sink13$i70 = 0, $$sink63$i = 0, $$sink63$i69 = 0, $$sink7$i = 0, $$sink7$i106 = 0, $$sink7$i16 = 0, $$sink7$i24 = 0, $$sink7$i34 = 0, $$sink7$i44 = 0, $$sink7$i54 = 0, $$sink7$i76 = 0, $$sink7$i86 = 0, $$sink7$i96 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $107 = 0, $111 = 0, $117 = 0, $119 = 0, $128 = 0, $13 = 0, $137 = 0, $142 = 0, $143 = 0, $165 = 0, $166 = 0, $17 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $180 = 0, $184 = 0, $190 = 0, $192 = 0, $201 = 0, $21 = 0, $210 = 0, $215 = 0, $216 = 0, $238 = 0, $242 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $256 = 0, $260 = 0, $266 = 0, $268 = 0, $277 = 0, $286 = 0, $291 = 0, $292 = 0, $3 = 0, $313 = 0, $316 = 0, $32 = 0, $323 = 0, $324 = 0, $326 = 0, $327 = 0, $330 = 0, $334 = 0, $340 = 0, $342 = 0, $351 = 0, $360 = 0, $365 = 0, $366 = 0, $388 = 0, $39 = 0, $390 = 0, $392 = 0, $399 = 0, $4 = 0, $400 = 0, $402 = 0, $403 = 0, $406 = 0, $410 = 0, $416 = 0, $418 = 0, $42 = 0, $427 = 0, $436 = 0, $441 = 0, $442 = 0, $464 = 0, $467 = 0, $469 = 0, $476 = 0, $477 = 0, $479 = 0, $480 = 0, $483 = 0, $487 = 0, $493 = 0, $495 = 0, $5 = 0, $504 = 0, $513 = 0, $518 = 0, $519 = 0, $54 = 0, $541 = 0, $542 = 0, $549 = 0, $55 = 0, $551 = 0, $552 = 0, $556 = 0, $560 = 0, $566 = 0, $568 = 0, $577 = 0, $58 = 0, $586 = 0, $591 = 0, $592 = 0, $61 = 0, $614 = 0, $619 = 0, $62 = 0, $625 = 0, $627 = 0, $628 = 0, $63 = 0, $632 = 0, $636 = 0, $64 = 0, $642 = 0, $644 = 0, $653 = 0, $662 = 0, $667 = 0, $668 = 0, $67 = 0, $69 = 0, $690 = 0, $691 = 0, $693 = 0, $695 = 0, $697 = 0, $698 = 0, $703 = 0, $707 = 0, $71 = 0, $713 = 0, $715 = 0, $724 = 0, $733 = 0, $737 = 0, $742 = 0, $744 = 0, $745 = 0, $748 = 0, $753 = 0, $759 = 0, $761 = 0, $762 = 0, $766 = 0, $77 = 0, $770 = 0, $776 = 0, $778 = 0, $787 = 0, $796 = 0, $8 = 0, $801 = 0, $802 = 0, $81 = 0, $823 = 0, $826 = 0, $831 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $93 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1898
 STACKTOP = STACKTOP + 48 | 0; //@line 1899
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1899
 $vararg_buffer5 = sp + 24 | 0; //@line 1900
 $3 = sp + 36 | 0; //@line 1904
 $4 = sp + 32 | 0; //@line 1905
 $5 = sp + 28 | 0; //@line 1906
 HEAP32[$5 >> 2] = $0; //@line 1907
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$1 = -2; //@line 1912
  STACKTOP = sp; //@line 1913
  return $$1 | 0; //@line 1913
 }
 $8 = _sn_coap_builder_calc_needed_packet_data_size_2($1, 0) | 0; //@line 1915
 if (!($8 << 16 >> 16)) {
  _mbed_tracef(2, 3844, 2639, sp); //@line 1918
  $$1 = -1; //@line 1919
  STACKTOP = sp; //@line 1920
  return $$1 | 0; //@line 1920
 }
 _memset($0 | 0, 0, $8 & 65535 | 0) | 0; //@line 1923
 $$cast = $0; //@line 1924
 if ((_sn_coap_header_validity_check($1, 64) | 0) << 24 >> 24) {
  _mbed_tracef(2, 3844, 2687, sp + 8 | 0); //@line 1928
  _mbed_tracef(2, 3844, 2739, sp + 16 | 0); //@line 1929
  $$1 = -1; //@line 1930
  STACKTOP = sp; //@line 1931
  return $$1 | 0; //@line 1931
 }
 $13 = HEAP8[$0 >> 0] | 0; //@line 1933
 HEAP8[$0 >> 0] = ($13 & 255) + 64; //@line 1937
 $17 = $1 + 12 | 0; //@line 1938
 $21 = (HEAP32[$17 >> 2] | 0) + ($13 + 64 & 255) | 0; //@line 1942
 HEAP8[$0 >> 0] = $21; //@line 1944
 HEAP8[$0 >> 0] = $21 + (HEAPU8[$1 >> 0] | 0); //@line 1949
 HEAP8[$0 + 1 >> 0] = HEAP32[$1 + 8 >> 2]; //@line 1954
 $32 = $1 + 20 | 0; //@line 1956
 HEAP8[$0 + 2 >> 0] = (HEAPU16[$32 >> 1] | 0) >>> 8; //@line 1960
 HEAP8[$0 + 3 >> 0] = HEAP16[$32 >> 1]; //@line 1964
 $39 = $0 + 4 | 0; //@line 1965
 HEAP32[$5 >> 2] = $39; //@line 1966
 if ((HEAP32[$17 >> 2] | 0) != 48) {
  $42 = $1 + 32 | 0; //@line 1970
  if (!(HEAP32[$42 >> 2] | 0)) {
   if (!(HEAP32[$1 + 28 >> 2] | 0)) {
    if ((HEAP32[$1 + 16 >> 2] | 0) == -1) {
     if (!(HEAP32[$1 + 40 >> 2] | 0)) {
      _mbed_tracef(2, 3844, 2783, $vararg_buffer5); //@line 1986
     } else {
      label = 12; //@line 1988
     }
    } else {
     label = 12; //@line 1991
    }
   } else {
    label = 12; //@line 1994
   }
  } else {
   label = 12; //@line 1997
  }
  if ((label | 0) == 12) {
   $54 = HEAP8[$1 >> 0] | 0; //@line 2000
   $55 = $54 & 255; //@line 2001
   if (!($54 << 24 >> 24)) {
    $61 = 0; //@line 2004
   } else {
    $58 = HEAP32[$1 + 28 >> 2] | 0; //@line 2007
    if (!$58) {
     $61 = $54; //@line 2010
    } else {
     _memcpy($39 | 0, $58 | 0, $55 | 0) | 0; //@line 2012
     $61 = HEAP8[$1 >> 0] | 0; //@line 2014
    }
   }
   $62 = $39 + ($61 & 255) | 0; //@line 2018
   HEAP32[$5 >> 2] = $62; //@line 2019
   HEAP16[$4 >> 1] = 0; //@line 2020
   $63 = $1 + 40 | 0; //@line 2021
   $64 = HEAP32[$63 >> 2] | 0; //@line 2022
   if ($64 | 0) {
    $67 = HEAP16[$64 + 4 >> 1] | 0; //@line 2026
    $69 = HEAP32[$64 + 52 >> 2] | 0; //@line 2028
    if (!$69) {
     $90 = $64; //@line 2031
    } else {
     $71 = $67 & 65535; //@line 2033
     HEAP8[$62 >> 0] = (($67 & 65535) < 13 ? $67 & 65535 : ($67 & 65535) < 269 ? 13 : 14) + 48; //@line 2041
     $77 = $62 + 1 | 0; //@line 2042
     HEAP32[$5 >> 2] = $77; //@line 2043
     if (($67 + -13 & 65535) < 256) {
      $$sink13$i70 = 1; //@line 2048
      $$sink63$i69 = $71 + 243 | 0; //@line 2048
      label = 21; //@line 2049
     } else {
      if (($67 & 65535) > 268) {
       $81 = $71 + -269 | 0; //@line 2053
       HEAP8[$62 + 2 >> 0] = $81; //@line 2056
       $$sink13$i70 = 2; //@line 2058
       $$sink63$i69 = $81 >>> 8; //@line 2058
       label = 21; //@line 2059
      } else {
       $87 = $77; //@line 2061
      }
     }
     if ((label | 0) == 21) {
      HEAP8[$77 >> 0] = $$sink63$i69; //@line 2066
      $86 = $77 + $$sink13$i70 | 0; //@line 2067
      HEAP32[$5 >> 2] = $86; //@line 2068
      $87 = $86; //@line 2069
     }
     HEAP16[$4 >> 1] = 3; //@line 2071
     _memcpy($87 | 0, $69 | 0, $71 | 0) | 0; //@line 2072
     HEAP32[$5 >> 2] = $87 + $71; //@line 2074
     $90 = HEAP32[$63 >> 2] | 0; //@line 2076
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $90 + 48 | 0, $90, 4, $4); //@line 2079
    $91 = HEAP32[$63 >> 2] | 0; //@line 2080
    $93 = HEAP32[$91 + 32 >> 2] | 0; //@line 2082
    if (($93 | 0) == -1) {
     $165 = $91; //@line 2085
    } else {
     if ($93 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $93 >>> 24; //@line 2091
      $$12026$i$i = 1; //@line 2092
      label = 35; //@line 2093
     } else {
      if ($93 << 8 >>> 0 > 16777215) {
       $$12026$i$i = 0; //@line 2098
       label = 35; //@line 2099
      } else {
       if ($93 << 16 >>> 0 > 16777215) {
        $$120$129$i$i = 0; //@line 2104
        label = 37; //@line 2105
       } else {
        if ($93 << 24 >>> 0 > 16777215) {
         $$120$232$i$i = 0; //@line 2110
         label = 39; //@line 2111
        } else {
         $$120$3$i$i = 0; //@line 2113
        }
       }
      }
     }
     if ((label | 0) == 35) {
      HEAP8[$3 + ($$12026$i$i & 255) >> 0] = $93 >>> 16; //@line 2124
      $$120$129$i$i = $$12026$i$i + 1 << 24 >> 24; //@line 2125
      label = 37; //@line 2126
     }
     if ((label | 0) == 37) {
      HEAP8[$3 + ($$120$129$i$i & 255) >> 0] = $93 >>> 8; //@line 2134
      $$120$232$i$i = $$120$129$i$i + 1 << 24 >> 24; //@line 2135
      label = 39; //@line 2136
     }
     if ((label | 0) == 39) {
      HEAP8[$3 + ($$120$232$i$i & 255) >> 0] = $93; //@line 2143
      $$120$3$i$i = $$120$232$i$i + 1 << 24 >> 24; //@line 2144
     }
     $100 = $$120$3$i$i & 255; //@line 2146
     $101 = HEAP16[$4 >> 1] | 0; //@line 2147
     $103 = 6 - ($101 & 65535) | 0; //@line 2149
     $104 = $$120$3$i$i & 255; //@line 2150
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i$i & 255) < 13 ? $$120$3$i$i : 13; //@line 2154
     $107 = 6 - $101 << 16 >> 16; //@line 2155
     do {
      if (($107 & 65535) < 13) {
       $111 = HEAP32[$5 >> 2] | 0; //@line 2161
       HEAP8[$111 >> 0] = (($107 & 65535) << 4) + (HEAPU8[$111 >> 0] | 0); //@line 2166
       $$sink7$i96 = 1; //@line 2167
      } else {
       $117 = HEAP32[$5 >> 2] | 0; //@line 2170
       $119 = HEAPU8[$117 >> 0] | 0; //@line 2172
       if (($107 & 65535) < 269) {
        HEAP8[$117 >> 0] = $119 + 208; //@line 2176
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $103 + 243; //@line 2181
        $$sink7$i96 = 2; //@line 2182
        break;
       } else {
        HEAP8[$117 >> 0] = $119 + 224; //@line 2187
        $128 = $103 + 65267 | 0; //@line 2188
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $128; //@line 2192
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $128 >>> 8; //@line 2197
        $$sink7$i96 = 3; //@line 2198
        break;
       }
      }
     } while (0);
     $137 = (HEAP32[$5 >> 2] | 0) + $$sink7$i96 | 0; //@line 2204
     HEAP32[$5 >> 2] = $137; //@line 2205
     if (($100 + -13 & 65535) < 256) {
      HEAP8[$137 >> 0] = $104 + 243; //@line 2211
      $142 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2213
      HEAP32[$5 >> 2] = $142; //@line 2214
      $143 = $142; //@line 2215
     } else {
      $143 = $137; //@line 2217
     }
     HEAP16[$4 >> 1] = 6; //@line 2219
     _memcpy($143 | 0, $3 | 0, $104 | 0) | 0; //@line 2220
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $104; //@line 2223
     $165 = HEAP32[$63 >> 2] | 0; //@line 2225
    }
    $166 = HEAP32[$165 + 28 >> 2] | 0; //@line 2228
    if (($166 | 0) == -1) {
     $238 = $165; //@line 2231
    } else {
     if ($166 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $166 >>> 24; //@line 2237
      $$12026$i3$i = 1; //@line 2238
      label = 52; //@line 2239
     } else {
      if ($166 << 8 >>> 0 > 16777215) {
       $$12026$i3$i = 0; //@line 2244
       label = 52; //@line 2245
      } else {
       if ($166 << 16 >>> 0 > 16777215) {
        $$120$129$i5$i = 0; //@line 2250
        label = 54; //@line 2251
       } else {
        if ($166 << 24 >>> 0 > 16777215) {
         $$120$232$i7$i = 0; //@line 2256
         label = 56; //@line 2257
        } else {
         $$120$3$i8$i = 0; //@line 2259
        }
       }
      }
     }
     if ((label | 0) == 52) {
      HEAP8[$3 + ($$12026$i3$i & 255) >> 0] = $166 >>> 16; //@line 2270
      $$120$129$i5$i = $$12026$i3$i + 1 << 24 >> 24; //@line 2271
      label = 54; //@line 2272
     }
     if ((label | 0) == 54) {
      HEAP8[$3 + ($$120$129$i5$i & 255) >> 0] = $166 >>> 8; //@line 2280
      $$120$232$i7$i = $$120$129$i5$i + 1 << 24 >> 24; //@line 2281
      label = 56; //@line 2282
     }
     if ((label | 0) == 56) {
      HEAP8[$3 + ($$120$232$i7$i & 255) >> 0] = $166; //@line 2289
      $$120$3$i8$i = $$120$232$i7$i + 1 << 24 >> 24; //@line 2290
     }
     $173 = $$120$3$i8$i & 255; //@line 2292
     $174 = HEAP16[$4 >> 1] | 0; //@line 2293
     $176 = 7 - ($174 & 65535) | 0; //@line 2295
     $177 = $$120$3$i8$i & 255; //@line 2296
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i8$i & 255) < 13 ? $$120$3$i8$i : 13; //@line 2300
     $180 = 7 - $174 << 16 >> 16; //@line 2301
     do {
      if (($180 & 65535) < 13) {
       $184 = HEAP32[$5 >> 2] | 0; //@line 2307
       HEAP8[$184 >> 0] = (($180 & 65535) << 4) + (HEAPU8[$184 >> 0] | 0); //@line 2312
       $$sink7$i106 = 1; //@line 2313
      } else {
       $190 = HEAP32[$5 >> 2] | 0; //@line 2316
       $192 = HEAPU8[$190 >> 0] | 0; //@line 2318
       if (($180 & 65535) < 269) {
        HEAP8[$190 >> 0] = $192 + 208; //@line 2322
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $176 + 243; //@line 2327
        $$sink7$i106 = 2; //@line 2328
        break;
       } else {
        HEAP8[$190 >> 0] = $192 + 224; //@line 2333
        $201 = $176 + 65267 | 0; //@line 2334
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $201; //@line 2338
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $201 >>> 8; //@line 2343
        $$sink7$i106 = 3; //@line 2344
        break;
       }
      }
     } while (0);
     $210 = (HEAP32[$5 >> 2] | 0) + $$sink7$i106 | 0; //@line 2350
     HEAP32[$5 >> 2] = $210; //@line 2351
     if (($173 + -13 & 65535) < 256) {
      HEAP8[$210 >> 0] = $177 + 243; //@line 2357
      $215 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2359
      HEAP32[$5 >> 2] = $215; //@line 2360
      $216 = $215; //@line 2361
     } else {
      $216 = $210; //@line 2363
     }
     HEAP16[$4 >> 1] = 7; //@line 2365
     _memcpy($216 | 0, $3 | 0, $177 | 0) | 0; //@line 2366
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $177; //@line 2369
     $238 = HEAP32[$63 >> 2] | 0; //@line 2371
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $238 + 56 | 0, $238 + 6 | 0, 8, $4); //@line 2375
   }
   _sn_coap_builder_options_build_add_multiple_option($5, $42, $1 + 22 | 0, 11, $4); //@line 2378
   $242 = HEAP32[$1 + 16 >> 2] | 0; //@line 2380
   if (($242 | 0) != -1) {
    if ($242 >>> 0 > 16777215) {
     HEAP8[$3 >> 0] = $242 >>> 24; //@line 2387
     $$12026$i12$i = 1; //@line 2388
     label = 70; //@line 2389
    } else {
     if ($242 << 8 >>> 0 > 16777215) {
      $$12026$i12$i = 0; //@line 2394
      label = 70; //@line 2395
     } else {
      if ($242 << 16 >>> 0 > 16777215) {
       $$120$129$i14$i = 0; //@line 2400
       label = 72; //@line 2401
      } else {
       if ($242 << 24 >>> 0 > 16777215) {
        $$120$232$i16$i = 0; //@line 2406
        label = 74; //@line 2407
       } else {
        $$120$3$i17$i = 0; //@line 2409
       }
      }
     }
    }
    if ((label | 0) == 70) {
     HEAP8[$3 + ($$12026$i12$i & 255) >> 0] = $242 >>> 16; //@line 2420
     $$120$129$i14$i = $$12026$i12$i + 1 << 24 >> 24; //@line 2421
     label = 72; //@line 2422
    }
    if ((label | 0) == 72) {
     HEAP8[$3 + ($$120$129$i14$i & 255) >> 0] = $242 >>> 8; //@line 2430
     $$120$232$i16$i = $$120$129$i14$i + 1 << 24 >> 24; //@line 2431
     label = 74; //@line 2432
    }
    if ((label | 0) == 74) {
     HEAP8[$3 + ($$120$232$i16$i & 255) >> 0] = $242; //@line 2439
     $$120$3$i17$i = $$120$232$i16$i + 1 << 24 >> 24; //@line 2440
    }
    $249 = $$120$3$i17$i & 255; //@line 2442
    $250 = HEAP16[$4 >> 1] | 0; //@line 2443
    $252 = 12 - ($250 & 65535) | 0; //@line 2445
    $253 = $$120$3$i17$i & 255; //@line 2446
    HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i17$i & 255) < 13 ? $$120$3$i17$i : 13; //@line 2450
    $256 = 12 - $250 << 16 >> 16; //@line 2451
    do {
     if (($256 & 65535) < 13) {
      $260 = HEAP32[$5 >> 2] | 0; //@line 2457
      HEAP8[$260 >> 0] = (($256 & 65535) << 4) + (HEAPU8[$260 >> 0] | 0); //@line 2462
      $$sink7$i86 = 1; //@line 2463
     } else {
      $266 = HEAP32[$5 >> 2] | 0; //@line 2466
      $268 = HEAPU8[$266 >> 0] | 0; //@line 2468
      if (($256 & 65535) < 269) {
       HEAP8[$266 >> 0] = $268 + 208; //@line 2472
       HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $252 + 243; //@line 2477
       $$sink7$i86 = 2; //@line 2478
       break;
      } else {
       HEAP8[$266 >> 0] = $268 + 224; //@line 2483
       $277 = $252 + 65267 | 0; //@line 2484
       HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $277; //@line 2488
       HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $277 >>> 8; //@line 2493
       $$sink7$i86 = 3; //@line 2494
       break;
      }
     }
    } while (0);
    $286 = (HEAP32[$5 >> 2] | 0) + $$sink7$i86 | 0; //@line 2500
    HEAP32[$5 >> 2] = $286; //@line 2501
    if (($249 + -13 & 65535) < 256) {
     HEAP8[$286 >> 0] = $253 + 243; //@line 2507
     $291 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2509
     HEAP32[$5 >> 2] = $291; //@line 2510
     $292 = $291; //@line 2511
    } else {
     $292 = $286; //@line 2513
    }
    HEAP16[$4 >> 1] = 12; //@line 2515
    _memcpy($292 | 0, $3 | 0, $253 | 0) | 0; //@line 2516
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $253; //@line 2519
   }
   $313 = HEAP32[$63 >> 2] | 0; //@line 2521
   if ($313 | 0) {
    $316 = HEAP32[$313 + 16 >> 2] | 0; //@line 2525
    if (($316 | 0) == 60) {
     $388 = $313; //@line 2528
    } else {
     if ($316 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $316 >>> 24; //@line 2534
      $$12026$i21$i = 1; //@line 2535
      label = 88; //@line 2536
     } else {
      if ($316 << 8 >>> 0 > 16777215) {
       $$12026$i21$i = 0; //@line 2541
       label = 88; //@line 2542
      } else {
       if ($316 << 16 >>> 0 > 16777215) {
        $$120$129$i23$i = 0; //@line 2547
        label = 90; //@line 2548
       } else {
        if ($316 << 24 >>> 0 > 16777215) {
         $$120$232$i25$i = 0; //@line 2553
         label = 92; //@line 2554
        } else {
         $$120$3$i26$i = 0; //@line 2556
        }
       }
      }
     }
     if ((label | 0) == 88) {
      HEAP8[$3 + ($$12026$i21$i & 255) >> 0] = $316 >>> 16; //@line 2567
      $$120$129$i23$i = $$12026$i21$i + 1 << 24 >> 24; //@line 2568
      label = 90; //@line 2569
     }
     if ((label | 0) == 90) {
      HEAP8[$3 + ($$120$129$i23$i & 255) >> 0] = $316 >>> 8; //@line 2577
      $$120$232$i25$i = $$120$129$i23$i + 1 << 24 >> 24; //@line 2578
      label = 92; //@line 2579
     }
     if ((label | 0) == 92) {
      HEAP8[$3 + ($$120$232$i25$i & 255) >> 0] = $316; //@line 2586
      $$120$3$i26$i = $$120$232$i25$i + 1 << 24 >> 24; //@line 2587
     }
     $323 = $$120$3$i26$i & 255; //@line 2589
     $324 = HEAP16[$4 >> 1] | 0; //@line 2590
     $326 = 14 - ($324 & 65535) | 0; //@line 2592
     $327 = $$120$3$i26$i & 255; //@line 2593
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i26$i & 255) < 13 ? $$120$3$i26$i : 13; //@line 2597
     $330 = 14 - $324 << 16 >> 16; //@line 2598
     do {
      if (($330 & 65535) < 13) {
       $334 = HEAP32[$5 >> 2] | 0; //@line 2604
       HEAP8[$334 >> 0] = (($330 & 65535) << 4) + (HEAPU8[$334 >> 0] | 0); //@line 2609
       $$sink7$i76 = 1; //@line 2610
      } else {
       $340 = HEAP32[$5 >> 2] | 0; //@line 2613
       $342 = HEAPU8[$340 >> 0] | 0; //@line 2615
       if (($330 & 65535) < 269) {
        HEAP8[$340 >> 0] = $342 + 208; //@line 2619
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $326 + 243; //@line 2624
        $$sink7$i76 = 2; //@line 2625
        break;
       } else {
        HEAP8[$340 >> 0] = $342 + 224; //@line 2630
        $351 = $326 + 65267 | 0; //@line 2631
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $351; //@line 2635
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $351 >>> 8; //@line 2640
        $$sink7$i76 = 3; //@line 2641
        break;
       }
      }
     } while (0);
     $360 = (HEAP32[$5 >> 2] | 0) + $$sink7$i76 | 0; //@line 2647
     HEAP32[$5 >> 2] = $360; //@line 2648
     if (($323 + -13 & 65535) < 256) {
      HEAP8[$360 >> 0] = $327 + 243; //@line 2654
      $365 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2656
      HEAP32[$5 >> 2] = $365; //@line 2657
      $366 = $365; //@line 2658
     } else {
      $366 = $360; //@line 2660
     }
     HEAP16[$4 >> 1] = 14; //@line 2662
     _memcpy($366 | 0, $3 | 0, $327 | 0) | 0; //@line 2663
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $327; //@line 2666
     $388 = HEAP32[$63 >> 2] | 0; //@line 2668
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $388 + 64 | 0, $388 + 10 | 0, 15, $4); //@line 2672
    $390 = HEAP32[$63 >> 2] | 0; //@line 2673
    $392 = HEAP32[$390 + 12 >> 2] | 0; //@line 2675
    if (($392 | 0) == -1) {
     $464 = $390; //@line 2678
    } else {
     if ($392 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $392 >>> 24; //@line 2684
      $$12026$i30$i = 1; //@line 2685
      label = 105; //@line 2686
     } else {
      if ($392 << 8 >>> 0 > 16777215) {
       $$12026$i30$i = 0; //@line 2691
       label = 105; //@line 2692
      } else {
       if ($392 << 16 >>> 0 > 16777215) {
        $$120$129$i32$i = 0; //@line 2697
        label = 107; //@line 2698
       } else {
        if ($392 << 24 >>> 0 > 16777215) {
         $$120$232$i34$i = 0; //@line 2703
         label = 109; //@line 2704
        } else {
         $$120$3$i35$i = 0; //@line 2706
        }
       }
      }
     }
     if ((label | 0) == 105) {
      HEAP8[$3 + ($$12026$i30$i & 255) >> 0] = $392 >>> 16; //@line 2717
      $$120$129$i32$i = $$12026$i30$i + 1 << 24 >> 24; //@line 2718
      label = 107; //@line 2719
     }
     if ((label | 0) == 107) {
      HEAP8[$3 + ($$120$129$i32$i & 255) >> 0] = $392 >>> 8; //@line 2727
      $$120$232$i34$i = $$120$129$i32$i + 1 << 24 >> 24; //@line 2728
      label = 109; //@line 2729
     }
     if ((label | 0) == 109) {
      HEAP8[$3 + ($$120$232$i34$i & 255) >> 0] = $392; //@line 2736
      $$120$3$i35$i = $$120$232$i34$i + 1 << 24 >> 24; //@line 2737
     }
     $399 = $$120$3$i35$i & 255; //@line 2739
     $400 = HEAP16[$4 >> 1] | 0; //@line 2740
     $402 = 17 - ($400 & 65535) | 0; //@line 2742
     $403 = $$120$3$i35$i & 255; //@line 2743
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i35$i & 255) < 13 ? $$120$3$i35$i : 13; //@line 2747
     $406 = 17 - $400 << 16 >> 16; //@line 2748
     do {
      if (($406 & 65535) < 13) {
       $410 = HEAP32[$5 >> 2] | 0; //@line 2754
       HEAP8[$410 >> 0] = (($406 & 65535) << 4) + (HEAPU8[$410 >> 0] | 0); //@line 2759
       $$sink7$i54 = 1; //@line 2760
      } else {
       $416 = HEAP32[$5 >> 2] | 0; //@line 2763
       $418 = HEAPU8[$416 >> 0] | 0; //@line 2765
       if (($406 & 65535) < 269) {
        HEAP8[$416 >> 0] = $418 + 208; //@line 2769
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $402 + 243; //@line 2774
        $$sink7$i54 = 2; //@line 2775
        break;
       } else {
        HEAP8[$416 >> 0] = $418 + 224; //@line 2780
        $427 = $402 + 65267 | 0; //@line 2781
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $427; //@line 2785
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $427 >>> 8; //@line 2790
        $$sink7$i54 = 3; //@line 2791
        break;
       }
      }
     } while (0);
     $436 = (HEAP32[$5 >> 2] | 0) + $$sink7$i54 | 0; //@line 2797
     HEAP32[$5 >> 2] = $436; //@line 2798
     if (($399 + -13 & 65535) < 256) {
      HEAP8[$436 >> 0] = $403 + 243; //@line 2804
      $441 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2806
      HEAP32[$5 >> 2] = $441; //@line 2807
      $442 = $441; //@line 2808
     } else {
      $442 = $436; //@line 2810
     }
     HEAP16[$4 >> 1] = 17; //@line 2812
     _memcpy($442 | 0, $3 | 0, $403 | 0) | 0; //@line 2813
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $403; //@line 2816
     $464 = HEAP32[$63 >> 2] | 0; //@line 2818
    }
    if ($464 | 0) {
     _sn_coap_builder_options_build_add_multiple_option($5, $464 + 60 | 0, $464 + 8 | 0, 20, $4); //@line 2824
     $467 = HEAP32[$63 >> 2] | 0; //@line 2825
     $469 = HEAP32[$467 + 40 >> 2] | 0; //@line 2827
     if (($469 | 0) == -1) {
      $541 = $467; //@line 2830
     } else {
      do {
       if ($469 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $469 >>> 24; //@line 2837
        $$12026$i39$i = 1; //@line 2838
        label = 123; //@line 2839
       } else {
        if ($469 << 8 >>> 0 > 16777215) {
         $$12026$i39$i = 0; //@line 2844
         label = 123; //@line 2845
        } else {
         if ($469 << 16 >>> 0 > 16777215) {
          $$120$129$i41$i = 0; //@line 2850
          label = 125; //@line 2851
          break;
         }
         if ($469 << 24 >>> 0 > 16777215) {
          $$120$232$i43$i = 0; //@line 2857
          label = 127; //@line 2858
         } else {
          $$120$3$i44$i = 0; //@line 2860
         }
        }
       }
      } while (0);
      if ((label | 0) == 123) {
       HEAP8[$3 + ($$12026$i39$i & 255) >> 0] = $469 >>> 16; //@line 2871
       $$120$129$i41$i = $$12026$i39$i + 1 << 24 >> 24; //@line 2872
       label = 125; //@line 2873
      }
      if ((label | 0) == 125) {
       HEAP8[$3 + ($$120$129$i41$i & 255) >> 0] = $469 >>> 8; //@line 2881
       $$120$232$i43$i = $$120$129$i41$i + 1 << 24 >> 24; //@line 2882
       label = 127; //@line 2883
      }
      if ((label | 0) == 127) {
       HEAP8[$3 + ($$120$232$i43$i & 255) >> 0] = $469; //@line 2890
       $$120$3$i44$i = $$120$232$i43$i + 1 << 24 >> 24; //@line 2891
      }
      $476 = $$120$3$i44$i & 255; //@line 2893
      $477 = HEAP16[$4 >> 1] | 0; //@line 2894
      $479 = 23 - ($477 & 65535) | 0; //@line 2896
      $480 = $$120$3$i44$i & 255; //@line 2897
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i44$i & 255) < 13 ? $$120$3$i44$i : 13; //@line 2901
      $483 = 23 - $477 << 16 >> 16; //@line 2902
      do {
       if (($483 & 65535) < 13) {
        $487 = HEAP32[$5 >> 2] | 0; //@line 2908
        HEAP8[$487 >> 0] = (($483 & 65535) << 4) + (HEAPU8[$487 >> 0] | 0); //@line 2913
        $$sink7$i44 = 1; //@line 2914
       } else {
        $493 = HEAP32[$5 >> 2] | 0; //@line 2917
        $495 = HEAPU8[$493 >> 0] | 0; //@line 2919
        if (($483 & 65535) < 269) {
         HEAP8[$493 >> 0] = $495 + 208; //@line 2923
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $479 + 243; //@line 2928
         $$sink7$i44 = 2; //@line 2929
         break;
        } else {
         HEAP8[$493 >> 0] = $495 + 224; //@line 2934
         $504 = $479 + 65267 | 0; //@line 2935
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $504; //@line 2939
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $504 >>> 8; //@line 2944
         $$sink7$i44 = 3; //@line 2945
         break;
        }
       }
      } while (0);
      $513 = (HEAP32[$5 >> 2] | 0) + $$sink7$i44 | 0; //@line 2951
      HEAP32[$5 >> 2] = $513; //@line 2952
      if (($476 + -13 & 65535) < 256) {
       HEAP8[$513 >> 0] = $480 + 243; //@line 2958
       $518 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2960
       HEAP32[$5 >> 2] = $518; //@line 2961
       $519 = $518; //@line 2962
      } else {
       $519 = $513; //@line 2964
      }
      HEAP16[$4 >> 1] = 23; //@line 2966
      _memcpy($519 | 0, $3 | 0, $480 | 0) | 0; //@line 2967
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $480; //@line 2970
      $541 = HEAP32[$63 >> 2] | 0; //@line 2972
     }
     $542 = HEAP32[$541 + 36 >> 2] | 0; //@line 2975
     if (($542 | 0) == -1) {
      $614 = $541; //@line 2978
     } else {
      do {
       if ($542 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $542 >>> 24; //@line 2985
        $$12026$i48$i = 1; //@line 2986
        label = 140; //@line 2987
       } else {
        if ($542 << 8 >>> 0 > 16777215) {
         $$12026$i48$i = 0; //@line 2992
         label = 140; //@line 2993
         break;
        }
        if ($542 << 16 >>> 0 > 16777215) {
         $$120$129$i50$i = 0; //@line 2999
         label = 142; //@line 3000
         break;
        }
        if ($542 << 24 >>> 0 > 16777215) {
         $$120$232$i52$i = 0; //@line 3006
         label = 144; //@line 3007
        } else {
         $$120$3$i53$i = 0; //@line 3009
        }
       }
      } while (0);
      if ((label | 0) == 140) {
       HEAP8[$3 + ($$12026$i48$i & 255) >> 0] = $542 >>> 16; //@line 3019
       $$120$129$i50$i = $$12026$i48$i + 1 << 24 >> 24; //@line 3020
       label = 142; //@line 3021
      }
      if ((label | 0) == 142) {
       HEAP8[$3 + ($$120$129$i50$i & 255) >> 0] = $542 >>> 8; //@line 3029
       $$120$232$i52$i = $$120$129$i50$i + 1 << 24 >> 24; //@line 3030
       label = 144; //@line 3031
      }
      if ((label | 0) == 144) {
       HEAP8[$3 + ($$120$232$i52$i & 255) >> 0] = $542; //@line 3038
       $$120$3$i53$i = $$120$232$i52$i + 1 & 255; //@line 3040
      }
      $549 = HEAP16[$4 >> 1] | 0; //@line 3042
      $551 = 27 - ($549 & 65535) | 0; //@line 3044
      $552 = $$120$3$i53$i & 65535; //@line 3045
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i53$i & 65535) < 13 ? $$120$3$i53$i : 13; //@line 3050
      $556 = 27 - $549 << 16 >> 16; //@line 3051
      do {
       if (($556 & 65535) < 13) {
        $560 = HEAP32[$5 >> 2] | 0; //@line 3057
        HEAP8[$560 >> 0] = (($556 & 65535) << 4) + (HEAPU8[$560 >> 0] | 0); //@line 3062
        $$sink7$i34 = 1; //@line 3063
       } else {
        $566 = HEAP32[$5 >> 2] | 0; //@line 3066
        $568 = HEAPU8[$566 >> 0] | 0; //@line 3068
        if (($556 & 65535) < 269) {
         HEAP8[$566 >> 0] = $568 + 208; //@line 3072
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $551 + 243; //@line 3077
         $$sink7$i34 = 2; //@line 3078
         break;
        } else {
         HEAP8[$566 >> 0] = $568 + 224; //@line 3083
         $577 = $551 + 65267 | 0; //@line 3084
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $577; //@line 3088
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $577 >>> 8; //@line 3093
         $$sink7$i34 = 3; //@line 3094
         break;
        }
       }
      } while (0);
      $586 = (HEAP32[$5 >> 2] | 0) + $$sink7$i34 | 0; //@line 3100
      HEAP32[$5 >> 2] = $586; //@line 3101
      if (($$120$3$i53$i + -13 & 65535) < 256) {
       HEAP8[$586 >> 0] = $552 + 243; //@line 3107
       $591 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 3109
       HEAP32[$5 >> 2] = $591; //@line 3110
       $592 = $591; //@line 3111
      } else {
       $592 = $586; //@line 3113
      }
      HEAP16[$4 >> 1] = 27; //@line 3115
      _memcpy($592 | 0, $3 | 0, $552 | 0) | 0; //@line 3116
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $552; //@line 3119
      $614 = HEAP32[$63 >> 2] | 0; //@line 3121
     }
     if (!(HEAP8[$614 + 1 >> 0] & 2)) {
      $690 = $614; //@line 3128
     } else {
      $619 = HEAP32[$614 + 24 >> 2] | 0; //@line 3131
      do {
       if ($619 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $619 >>> 24; //@line 3137
        $$12026$i57$i = 1; //@line 3138
        label = 157; //@line 3139
       } else {
        if ($619 << 8 >>> 0 > 16777215) {
         $$12026$i57$i = 0; //@line 3144
         label = 157; //@line 3145
         break;
        }
        if ($619 << 16 >>> 0 > 16777215) {
         $$120$129$i59$i = 0; //@line 3151
         label = 159; //@line 3152
         break;
        }
        if ($619 << 24 >>> 0 > 16777215) {
         $$120$232$i61$i = 0; //@line 3158
         label = 161; //@line 3159
        } else {
         $$120$3$i62$i = 0; //@line 3161
        }
       }
      } while (0);
      if ((label | 0) == 157) {
       HEAP8[$3 + ($$12026$i57$i & 255) >> 0] = $619 >>> 16; //@line 3171
       $$120$129$i59$i = $$12026$i57$i + 1 << 24 >> 24; //@line 3172
       label = 159; //@line 3173
      }
      if ((label | 0) == 159) {
       HEAP8[$3 + ($$120$129$i59$i & 255) >> 0] = $619 >>> 8; //@line 3181
       $$120$232$i61$i = $$120$129$i59$i + 1 << 24 >> 24; //@line 3182
       label = 161; //@line 3183
      }
      if ((label | 0) == 161) {
       HEAP8[$3 + ($$120$232$i61$i & 255) >> 0] = $619; //@line 3190
       $$120$3$i62$i = $$120$232$i61$i + 1 & 255; //@line 3192
      }
      $625 = HEAP16[$4 >> 1] | 0; //@line 3194
      $627 = 28 - ($625 & 65535) | 0; //@line 3196
      $628 = $$120$3$i62$i & 65535; //@line 3197
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i62$i & 65535) < 13 ? $$120$3$i62$i : 13; //@line 3202
      $632 = 28 - $625 << 16 >> 16; //@line 3203
      do {
       if (($632 & 65535) < 13) {
        $636 = HEAP32[$5 >> 2] | 0; //@line 3209
        HEAP8[$636 >> 0] = (($632 & 65535) << 4) + (HEAPU8[$636 >> 0] | 0); //@line 3214
        $$sink7$i24 = 1; //@line 3215
       } else {
        $642 = HEAP32[$5 >> 2] | 0; //@line 3218
        $644 = HEAPU8[$642 >> 0] | 0; //@line 3220
        if (($632 & 65535) < 269) {
         HEAP8[$642 >> 0] = $644 + 208; //@line 3224
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $627 + 243; //@line 3229
         $$sink7$i24 = 2; //@line 3230
         break;
        } else {
         HEAP8[$642 >> 0] = $644 + 224; //@line 3235
         $653 = $627 + 65267 | 0; //@line 3236
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $653; //@line 3240
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $653 >>> 8; //@line 3245
         $$sink7$i24 = 3; //@line 3246
         break;
        }
       }
      } while (0);
      $662 = (HEAP32[$5 >> 2] | 0) + $$sink7$i24 | 0; //@line 3252
      HEAP32[$5 >> 2] = $662; //@line 3253
      if (($$120$3$i62$i + -13 & 65535) < 256) {
       HEAP8[$662 >> 0] = $628 + 243; //@line 3259
       $667 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 3261
       HEAP32[$5 >> 2] = $667; //@line 3262
       $668 = $667; //@line 3263
      } else {
       $668 = $662; //@line 3265
      }
      HEAP16[$4 >> 1] = 28; //@line 3267
      _memcpy($668 | 0, $3 | 0, $628 | 0) | 0; //@line 3268
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $628; //@line 3271
      $690 = HEAP32[$63 >> 2] | 0; //@line 3273
     }
     $691 = HEAP16[$690 + 2 >> 1] | 0; //@line 3276
     $693 = HEAP32[$690 + 44 >> 2] | 0; //@line 3278
     if (!$693) {
      $748 = $690; //@line 3281
     } else {
      $695 = HEAP16[$4 >> 1] | 0; //@line 3283
      $697 = 35 - ($695 & 65535) | 0; //@line 3285
      $698 = $691 & 65535; //@line 3286
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($691 & 65535) < 13 ? $691 & 255 : ($691 & 65535) < 269 ? 13 : 14; //@line 3293
      $703 = 35 - $695 << 16 >> 16; //@line 3294
      do {
       if (($703 & 65535) < 13) {
        $707 = HEAP32[$5 >> 2] | 0; //@line 3300
        HEAP8[$707 >> 0] = (($703 & 65535) << 4) + (HEAPU8[$707 >> 0] | 0); //@line 3305
        $$sink7$i16 = 1; //@line 3306
       } else {
        $713 = HEAP32[$5 >> 2] | 0; //@line 3309
        $715 = HEAPU8[$713 >> 0] | 0; //@line 3311
        if (($703 & 65535) < 269) {
         HEAP8[$713 >> 0] = $715 + 208; //@line 3315
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $697 + 243; //@line 3320
         $$sink7$i16 = 2; //@line 3321
         break;
        } else {
         HEAP8[$713 >> 0] = $715 + 224; //@line 3326
         $724 = $697 + 65267 | 0; //@line 3327
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $724; //@line 3331
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $724 >>> 8; //@line 3336
         $$sink7$i16 = 3; //@line 3337
         break;
        }
       }
      } while (0);
      $733 = (HEAP32[$5 >> 2] | 0) + $$sink7$i16 | 0; //@line 3343
      HEAP32[$5 >> 2] = $733; //@line 3344
      do {
       if (($691 + -13 & 65535) < 256) {
        $$sink13$i = 1; //@line 3350
        $$sink63$i = $698 + 243 | 0; //@line 3350
        $742 = $733; //@line 3350
        label = 172; //@line 3351
       } else {
        if (($691 & 65535) <= 268) {
         $745 = $733; //@line 3355
         break;
        }
        $737 = $698 + -269 | 0; //@line 3358
        HEAP8[$733 + 1 >> 0] = $737; //@line 3361
        $$sink13$i = 2; //@line 3364
        $$sink63$i = $737 >>> 8; //@line 3364
        $742 = HEAP32[$5 >> 2] | 0; //@line 3364
        label = 172; //@line 3365
       }
      } while (0);
      if ((label | 0) == 172) {
       HEAP8[$742 >> 0] = $$sink63$i; //@line 3370
       $744 = (HEAP32[$5 >> 2] | 0) + $$sink13$i | 0; //@line 3372
       HEAP32[$5 >> 2] = $744; //@line 3373
       $745 = $744; //@line 3374
      }
      HEAP16[$4 >> 1] = 35; //@line 3376
      _memcpy($745 | 0, $693 | 0, $698 | 0) | 0; //@line 3377
      HEAP32[$5 >> 2] = $745 + $698; //@line 3379
      $748 = HEAP32[$63 >> 2] | 0; //@line 3381
     }
     if (HEAP8[$748 + 1 >> 0] & 1) {
      $753 = HEAP32[$748 + 20 >> 2] | 0; //@line 3389
      do {
       if ($753 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $753 >>> 24; //@line 3395
        $$12026$i66$i = 1; //@line 3396
        label = 186; //@line 3397
       } else {
        if ($753 << 8 >>> 0 > 16777215) {
         $$12026$i66$i = 0; //@line 3402
         label = 186; //@line 3403
         break;
        }
        if ($753 << 16 >>> 0 > 16777215) {
         $$120$129$i68$i = 0; //@line 3409
         label = 188; //@line 3410
         break;
        }
        if ($753 << 24 >>> 0 > 16777215) {
         $$120$232$i70$i = 0; //@line 3416
         label = 190; //@line 3417
        } else {
         $$120$3$i71$i = 0; //@line 3419
        }
       }
      } while (0);
      if ((label | 0) == 186) {
       HEAP8[$3 + ($$12026$i66$i & 255) >> 0] = $753 >>> 16; //@line 3429
       $$120$129$i68$i = $$12026$i66$i + 1 << 24 >> 24; //@line 3430
       label = 188; //@line 3431
      }
      if ((label | 0) == 188) {
       HEAP8[$3 + ($$120$129$i68$i & 255) >> 0] = $753 >>> 8; //@line 3439
       $$120$232$i70$i = $$120$129$i68$i + 1 << 24 >> 24; //@line 3440
       label = 190; //@line 3441
      }
      if ((label | 0) == 190) {
       HEAP8[$3 + ($$120$232$i70$i & 255) >> 0] = $753; //@line 3448
       $$120$3$i71$i = $$120$232$i70$i + 1 & 255; //@line 3450
      }
      $759 = HEAP16[$4 >> 1] | 0; //@line 3452
      $761 = 60 - ($759 & 65535) | 0; //@line 3454
      $762 = $$120$3$i71$i & 65535; //@line 3455
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i71$i & 65535) < 13 ? $$120$3$i71$i : 13; //@line 3460
      $766 = 60 - $759 << 16 >> 16; //@line 3461
      do {
       if (($766 & 65535) < 13) {
        $770 = HEAP32[$5 >> 2] | 0; //@line 3467
        HEAP8[$770 >> 0] = (($766 & 65535) << 4) + (HEAPU8[$770 >> 0] | 0); //@line 3472
        $$sink7$i = 1; //@line 3473
       } else {
        $776 = HEAP32[$5 >> 2] | 0; //@line 3476
        $778 = HEAPU8[$776 >> 0] | 0; //@line 3478
        if (($766 & 65535) < 269) {
         HEAP8[$776 >> 0] = $778 + 208; //@line 3482
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $761 + 243; //@line 3487
         $$sink7$i = 2; //@line 3488
         break;
        } else {
         HEAP8[$776 >> 0] = $778 + 224; //@line 3493
         $787 = $761 + 65267 | 0; //@line 3494
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $787; //@line 3498
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $787 >>> 8; //@line 3503
         $$sink7$i = 3; //@line 3504
         break;
        }
       }
      } while (0);
      $796 = (HEAP32[$5 >> 2] | 0) + $$sink7$i | 0; //@line 3510
      HEAP32[$5 >> 2] = $796; //@line 3511
      if (($$120$3$i71$i + -13 & 65535) < 256) {
       HEAP8[$796 >> 0] = $762 + 243; //@line 3517
       $801 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 3519
       HEAP32[$5 >> 2] = $801; //@line 3520
       $802 = $801; //@line 3521
      } else {
       $802 = $796; //@line 3523
      }
      HEAP16[$4 >> 1] = 60; //@line 3525
      _memcpy($802 | 0, $3 | 0, $762 | 0) | 0; //@line 3526
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $762; //@line 3529
     }
    }
   }
  }
  $823 = $1 + 24 | 0; //@line 3534
  if (HEAP16[$823 >> 1] | 0) {
   $826 = $1 + 36 | 0; //@line 3538
   if (HEAP32[$826 >> 2] | 0) {
    HEAP8[HEAP32[$5 >> 2] >> 0] = -1; //@line 3543
    $831 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 3545
    _memcpy($831 | 0, HEAP32[$826 >> 2] | 0, HEAPU16[$823 >> 1] | 0) | 0; //@line 3549
    HEAP32[$5 >> 2] = $831 + (HEAPU16[$823 >> 1] | 0); //@line 3553
   }
  }
 }
 $$1 = (HEAP32[$5 >> 2] | 0) - $$cast & 65535; //@line 3560
 STACKTOP = sp; //@line 3561
 return $$1 | 0; //@line 3561
}
function _sn_coap_builder_calc_needed_packet_data_size_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$$65$i = 0, $$0104 = 0, $$012$lcssa$i54$i = 0, $$012$lcssa$i54$i146 = 0, $$012$lcssa$i54$i181 = 0, $$012$lcssa$i54$i216 = 0, $$012$lcssa$i54$i238 = 0, $$01213$i$i = 0, $$01213$i$i142 = 0, $$01213$i$i177 = 0, $$01213$i$i212 = 0, $$01213$i$i234 = 0, $$014$i$i = 0, $$014$i$i141 = 0, $$014$i$i176 = 0, $$014$i$i211 = 0, $$014$i$i233 = 0, $$02441$i = 0, $$02441$i157 = 0, $$02441$i192 = 0, $$02441$i222 = 0, $$02441$i244 = 0, $$02540$i = 0, $$02540$i158 = 0, $$02540$i193 = 0, $$02540$i223 = 0, $$02540$i245 = 0, $$028$lcssa$i = 0, $$028$lcssa$i165 = 0, $$028$lcssa$i200 = 0, $$028$lcssa$i230 = 0, $$028$lcssa$i252 = 0, $$02839$i = 0, $$02839$i159 = 0, $$02839$i194 = 0, $$02839$i224 = 0, $$02839$i246 = 0, $$03138$i = 0, $$03138$i160 = 0, $$03138$i195 = 0, $$03138$i225 = 0, $$03138$i247 = 0, $$03239$i = 0, $$03239$i$us = 0, $$03239$i148 = 0, $$03239$i183 = 0, $$03239$i183$us = 0, $$03239$us$i = 0, $$03239$us46$i = 0, $$03239$us46$i$us = 0, $$03538$i = 0, $$03538$i$us = 0, $$03538$i149 = 0, $$03538$i184 = 0, $$03538$i184$us = 0, $$03538$us$i = 0, $$03538$us47$i = 0, $$03538$us47$i$us = 0, $$10 = 0, $$1058$i = 0, $$11 = 0, $$11$i = 0, $$1105 = 0, $$1159$i = 0, $$12 = 0, $$120$232$i = 0, $$120$232$i121 = 0, $$120$232$i129 = 0, $$120$232$i137 = 0, $$120$232$i172 = 0, $$120$232$i207 = 0, $$120$232$i259 = 0, $$120$232$i267 = 0, $$120$232$i275 = 0, $$120$3$i = 0, $$120$3$i122 = 0, $$120$3$i130 = 0, $$120$3$i138 = 0, $$120$3$i173 = 0, $$120$3$i208 = 0, $$120$3$i260 = 0, $$120$3$i268 = 0, $$120$3$i276 = 0, $$126$i = 0, $$126$i164 = 0, $$126$i199 = 0, $$126$i229 = 0, $$126$i251 = 0, $$1260$i = 0, $$129$i = 0, $$129$i163 = 0, $$129$i198 = 0, $$129$i228 = 0, $$129$i250 = 0, $$13 = 0, $$13$i = 0, $$133$i = 0, $$133$i152 = 0, $$133$i187 = 0, $$133$us49$i = 0, $$1361$i = 0, $$14 = 0, $$1462$i = 0, $$15 = 0, $$16 = 0, $$16$i = 0, $$17 = 0, $$18 = 0, $$2 = 0, $$2108 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$5$i = 0, $$553$$$i = 0, $$553$$$i$ = 0, $$553$$i = 0, $$6 = 0, $$7 = 0, $$7$i = 0, $$8 = 0, $$9 = 0, $$9$i = 0, $$957$i = 0, $$lcssa292 = 0, $$lcssa293 = 0, $$lcssa294 = 0, $$lcssa295 = 0, $$lcssa297 = 0, $$lcssa298 = 0, $115 = 0, $131 = 0, $133 = 0, $134 = 0, $136 = 0, $139 = 0, $149 = 0, $16 = 0, $17 = 0, $174 = 0, $186 = 0, $189 = 0, $19 = 0, $191 = 0, $194 = 0, $203 = 0, $208 = 0, $21 = 0, $224 = 0, $225 = 0, $234 = 0, $24 = 0, $249 = 0, $252 = 0, $254 = 0, $257 = 0, $266 = 0, $271 = 0, $287 = 0, $288 = 0, $297 = 0, $312 = 0, $315 = 0, $317 = 0, $320 = 0, $33 = 0, $330 = 0, $347 = 0, $356 = 0, $371 = 0, $375 = 0, $38 = 0, $389 = 0, $406 = 0, $418 = 0, $426 = 0, $428 = 0, $466 = 0, $474 = 0, $475 = 0, $504 = 0, $517 = 0, $54 = 0, $55 = 0, $64 = 0, $65 = 0, $79 = 0, $80 = 0, $82 = 0, $9 = 0, $97 = 0, $merge$i = 0, $narrow$i = 0, $phitmp$i$i = 0, $phitmp$i$i144 = 0, $phitmp$i$i179 = 0, $phitmp$i$i214 = 0, $phitmp$i$i236 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3603
 STACKTOP = STACKTOP + 112 | 0; //@line 3604
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 3604
 $vararg_buffer23 = sp + 96 | 0; //@line 3605
 $vararg_buffer21 = sp + 88 | 0; //@line 3606
 $vararg_buffer19 = sp + 80 | 0; //@line 3607
 $vararg_buffer17 = sp + 72 | 0; //@line 3608
 $vararg_buffer15 = sp + 64 | 0; //@line 3609
 $vararg_buffer13 = sp + 56 | 0; //@line 3610
 $vararg_buffer11 = sp + 48 | 0; //@line 3611
 $vararg_buffer9 = sp + 40 | 0; //@line 3612
 $vararg_buffer7 = sp + 32 | 0; //@line 3613
 $vararg_buffer5 = sp + 24 | 0; //@line 3614
 $vararg_buffer3 = sp + 16 | 0; //@line 3615
 $vararg_buffer1 = sp + 8 | 0; //@line 3616
 $vararg_buffer = sp; //@line 3617
 if (!$0) {
  $$2108 = 0; //@line 3620
  STACKTOP = sp; //@line 3621
  return $$2108 | 0; //@line 3621
 }
 if ((HEAP32[$0 + 12 >> 2] | 0) == 48) {
  $$2108 = 4; //@line 3627
  STACKTOP = sp; //@line 3628
  return $$2108 | 0; //@line 3628
 }
 do {
  if (!(HEAP32[$0 + 28 >> 2] | 0)) {
   $$0104 = 4; //@line 3635
  } else {
   $9 = HEAP8[$0 >> 0] | 0; //@line 3637
   if (($9 + -1 & 255) <= 7) {
    $$0104 = ($9 & 255) + 4 & 65535; //@line 3644
    break;
   }
   _mbed_tracef(2, 3844, 2833, $vararg_buffer); //@line 3647
   $$2108 = 0; //@line 3648
   STACKTOP = sp; //@line 3649
   return $$2108 | 0; //@line 3649
  }
 } while (0);
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3653
 $17 = ($16 | 0) == 0; //@line 3654
 L14 : do {
  if ($17) {
   $$1105 = $$0104; //@line 3657
  } else {
   $19 = HEAP16[$0 + 22 >> 1] | 0; //@line 3660
   $21 = ($19 & 65535) + -1 | 0; //@line 3662
   if (($19 & 65535) > 2) {
    $$01213$i$i = 0; //@line 3665
    $$014$i$i = 1; //@line 3665
    $24 = 1; //@line 3665
    do {
     $$01213$i$i = $$01213$i$i + ((HEAP8[$16 + $24 >> 0] | 0) == 47 & 1) << 24 >> 24; //@line 3671
     $$014$i$i = $$014$i$i + 1 << 16 >> 16; //@line 3672
     $24 = $$014$i$i & 65535; //@line 3673
    } while (($21 | 0) > ($24 | 0));
    $phitmp$i$i = $$01213$i$i + 1 << 24 >> 24; //@line 3681
    if ($phitmp$i$i << 24 >> 24) {
     $$012$lcssa$i54$i = $phitmp$i$i; //@line 3684
     label = 11; //@line 3685
    }
   } else {
    $$012$lcssa$i54$i = 1; //@line 3688
    label = 11; //@line 3689
   }
   L20 : do {
    if ((label | 0) == 11) {
     if (!($19 << 16 >> 16)) {
      $$03239$i$us = 0; //@line 3695
      $$03538$i$us = 0; //@line 3695
      do {
       $33 = $$03239$i$us + 1 | 0; //@line 3697
       $$03239$i$us = $33 & 65535; //@line 3698
       $$03538$i$us = $$03538$i$us + 1 << 24 >> 24; //@line 3699
      } while (($$03538$i$us & 255) < ($$012$lcssa$i54$i & 255));
      $$lcssa297 = $33 & 65535; //@line 3708
      $$lcssa298 = $$03239$i$us; //@line 3708
     } else {
      $$03239$i = 0; //@line 3710
      $$03538$i = 0; //@line 3710
      while (1) {
       $$02441$i = 0; //@line 3712
       $$02540$i = 0; //@line 3712
       $$02839$i = 0; //@line 3712
       $$03138$i = $16; //@line 3712
       while (1) {
        $38 = (HEAP8[$$03138$i >> 0] | 0) != 47; //@line 3715
        if ($$02839$i << 16 >> 16 == 0 | $38) {
         $$126$i = $$02540$i; //@line 3721
         $$129$i = $$02839$i + ($38 & 1) << 16 >> 16; //@line 3721
        } else {
         if ($$02540$i << 24 >> 24 == $$03538$i << 24 >> 24) {
          $$028$lcssa$i = $$02839$i; //@line 3725
          break;
         }
         $$126$i = $$02540$i + 1 << 24 >> 24; //@line 3729
         $$129$i = 0; //@line 3729
        }
        $$02441$i = $$02441$i + 1 << 16 >> 16; //@line 3732
        if (($$02441$i & 65535) >= ($19 & 65535)) {
         $$028$lcssa$i = $$129$i; //@line 3737
         break;
        } else {
         $$02540$i = $$126$i; //@line 3735
         $$02839$i = $$129$i; //@line 3735
         $$03138$i = $$03138$i + 1 | 0; //@line 3735
        }
       }
       if (($$028$lcssa$i & 65535) > 255) {
        break L20;
       }
       if (($$028$lcssa$i & 65535) < 13) {
        $$133$i = $$03239$i + 1 << 16 >> 16; //@line 3749
       } else {
        $$133$i = ($$03239$i & 65535) + 2 & 65535; //@line 3754
       }
       $54 = ($$133$i & 65535) + ($$028$lcssa$i & 65535) | 0; //@line 3757
       $55 = $54 & 65535; //@line 3758
       $$03538$i = $$03538$i + 1 << 24 >> 24; //@line 3759
       if (($$03538$i & 255) >= ($$012$lcssa$i54$i & 255)) {
        $$lcssa297 = $55; //@line 3764
        $$lcssa298 = $54; //@line 3764
        break;
       } else {
        $$03239$i = $55; //@line 3762
       }
      }
     }
     if ($$lcssa297 << 16 >> 16) {
      $$1105 = $$lcssa298 + ($$0104 & 65535) & 65535; //@line 3774
      break L14;
     }
    }
   } while (0);
   _mbed_tracef(2, 3844, 2899, $vararg_buffer1); //@line 3779
   $$2108 = 0; //@line 3780
   STACKTOP = sp; //@line 3781
   return $$2108 | 0; //@line 3781
  }
 } while (0);
 $64 = HEAP32[$0 + 16 >> 2] | 0; //@line 3785
 $65 = ($64 | 0) == -1; //@line 3786
 if ($65) {
  $$2 = $$1105; //@line 3788
 } else {
  if ($64 >>> 0 > 65535) {
   _mbed_tracef(2, 3844, 2970, $vararg_buffer3); //@line 3792
   $$2108 = 0; //@line 3793
   STACKTOP = sp; //@line 3794
   return $$2108 | 0; //@line 3794
  }
  if ($64 << 8 >>> 0 > 16777215) {
   $$120$232$i275 = 3; //@line 3799
   label = 34; //@line 3800
  } else {
   if ($64 << 16 >>> 0 > 16777215) {
    $$120$232$i275 = 2; //@line 3805
    label = 34; //@line 3806
   } else {
    if ($64 << 24 >>> 0 > 16777215) {
     $$120$232$i275 = 1; //@line 3811
     label = 34; //@line 3812
    } else {
     $$120$3$i276 = 0; //@line 3814
    }
   }
  }
  if ((label | 0) == 34) {
   $$120$3$i276 = $$120$232$i275; //@line 3819
  }
  $$2 = ($$120$3$i276 + 1 & 255) + ($$1105 & 65535) & 65535; //@line 3826
 }
 $79 = HEAP32[$0 + 40 >> 2] | 0; //@line 3829
 $80 = ($79 | 0) == 0; //@line 3830
 do {
  if ($80) {
   $$18 = $$2; //@line 3833
  } else {
   $82 = HEAP32[$79 + 12 >> 2] | 0; //@line 3836
   if (($82 | 0) == -1) {
    $$3 = $$2; //@line 3839
   } else {
    if ($82 >>> 0 > 65535) {
     _mbed_tracef(2, 3844, 3045, $vararg_buffer5); //@line 3843
     $$2108 = 0; //@line 3844
     STACKTOP = sp; //@line 3845
     return $$2108 | 0; //@line 3845
    }
    if ($82 << 8 >>> 0 > 16777215) {
     $$120$232$i267 = 3; //@line 3850
     label = 43; //@line 3851
    } else {
     if ($82 << 16 >>> 0 > 16777215) {
      $$120$232$i267 = 2; //@line 3856
      label = 43; //@line 3857
     } else {
      if ($82 << 24 >>> 0 > 16777215) {
       $$120$232$i267 = 1; //@line 3862
       label = 43; //@line 3863
      } else {
       $$120$3$i268 = 0; //@line 3865
      }
     }
    }
    if ((label | 0) == 43) {
     $$120$3$i268 = $$120$232$i267; //@line 3870
    }
    $$3 = ($$120$3$i268 + 1 & 255) + ($$2 & 65535) & 65535; //@line 3877
   }
   $97 = HEAP32[$79 + 16 >> 2] | 0; //@line 3880
   if (($97 | 0) == 60) {
    $$4 = $$3; //@line 3883
   } else {
    if ($97 >>> 0 > 16777215) {
     $$120$232$i259 = 4; //@line 3887
     label = 50; //@line 3888
    } else {
     if ($97 << 8 >>> 0 > 16777215) {
      $$120$232$i259 = 3; //@line 3893
      label = 50; //@line 3894
     } else {
      if ($97 << 16 >>> 0 > 16777215) {
       $$120$232$i259 = 2; //@line 3899
       label = 50; //@line 3900
      } else {
       if ($97 << 24 >>> 0 > 16777215) {
        $$120$232$i259 = 1; //@line 3905
        label = 50; //@line 3906
       } else {
        $$120$3$i260 = 0; //@line 3908
       }
      }
     }
    }
    if ((label | 0) == 50) {
     $$120$3$i260 = $$120$232$i259; //@line 3914
    }
    $$4 = ($$120$3$i260 + 1 & 255) + ($$3 & 65535) & 65535; //@line 3921
   }
   if (!(HEAP32[$79 + 44 >> 2] | 0)) {
    $$6 = $$4; //@line 3927
   } else {
    $115 = HEAP16[$79 + 2 >> 1] | 0; //@line 3930
    do {
     if (($115 + -1 & 65535) < 12) {
      $$5 = $$4 + 1 << 16 >> 16; //@line 3936
     } else {
      if (($115 + -13 & 65535) < 257) {
       $$5 = ($$4 & 65535) + 2 & 65535; //@line 3944
       break;
      }
      if (($115 + -270 & 65535) < 765) {
       $$5 = ($$4 & 65535) + 3 & 65535; //@line 3953
       break;
      }
      _mbed_tracef(2, 3844, 3112, $vararg_buffer7); //@line 3956
      $$2108 = 0; //@line 3957
      STACKTOP = sp; //@line 3958
      return $$2108 | 0; //@line 3958
     }
    } while (0);
    $$6 = ($115 & 65535) + ($$5 & 65535) & 65535; //@line 3965
   }
   $131 = HEAP32[$79 + 48 >> 2] | 0; //@line 3968
   L98 : do {
    if (!$131) {
     $$7 = $$6; //@line 3972
    } else {
     $133 = HEAP8[$79 >> 0] | 0; //@line 3974
     $134 = $133 & 255; //@line 3975
     $136 = ($133 & 255) + -1 | 0; //@line 3977
     if (($133 & 255) > 2) {
      $$01213$i$i234 = 0; //@line 3980
      $$014$i$i233 = 1; //@line 3980
      $139 = 1; //@line 3980
      do {
       $$01213$i$i234 = $$01213$i$i234 + ((HEAP8[$131 + $139 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3986
       $$014$i$i233 = $$014$i$i233 + 1 << 16 >> 16; //@line 3987
       $139 = $$014$i$i233 & 65535; //@line 3988
      } while (($136 | 0) > ($139 | 0));
      $phitmp$i$i236 = $$01213$i$i234 + 1 << 24 >> 24; //@line 3996
      if ($phitmp$i$i236 << 24 >> 24) {
       $$012$lcssa$i54$i238 = $phitmp$i$i236; //@line 3999
       label = 65; //@line 4000
      }
     } else {
      $$012$lcssa$i54$i238 = 1; //@line 4003
      label = 65; //@line 4004
     }
     L104 : do {
      if ((label | 0) == 65) {
       if ($133 << 24 >> 24) {
        $$03239$us$i = 0; //@line 4010
        $$03538$us$i = 0; //@line 4010
        do {
         $$02441$i244 = 0; //@line 4012
         $$02540$i245 = 0; //@line 4012
         $$02839$i246 = 0; //@line 4012
         $$03138$i247 = $131; //@line 4012
         while (1) {
          $149 = (HEAP8[$$03138$i247 >> 0] | 0) != 38; //@line 4015
          if ($$02839$i246 << 16 >> 16 == 0 | $149) {
           $$126$i251 = $$02540$i245; //@line 4021
           $$129$i250 = $$02839$i246 + ($149 & 1) << 16 >> 16; //@line 4021
          } else {
           if ($$02540$i245 << 24 >> 24 == $$03538$us$i << 24 >> 24) {
            $$028$lcssa$i252 = $$02839$i246; //@line 4025
            break;
           }
           $$126$i251 = $$02540$i245 + 1 << 24 >> 24; //@line 4029
           $$129$i250 = 0; //@line 4029
          }
          $$02441$i244 = $$02441$i244 + 1 << 16 >> 16; //@line 4032
          if (($$02441$i244 & 65535) >= ($134 & 65535)) {
           $$028$lcssa$i252 = $$129$i250; //@line 4037
           break;
          } else {
           $$02540$i245 = $$126$i251; //@line 4035
           $$02839$i246 = $$129$i250; //@line 4035
           $$03138$i247 = $$03138$i247 + 1 | 0; //@line 4035
          }
         }
         if (($$028$lcssa$i252 + -1 & 65535) > 7) {
          break L104;
         }
         $$03239$us$i = ($$03239$us$i + 1 & 65535) + ($$028$lcssa$i252 & 65535) | 0; //@line 4049
         $$03538$us$i = $$03538$us$i + 1 << 24 >> 24; //@line 4050
        } while (($$03538$us$i & 255) < ($$012$lcssa$i54$i238 & 255));
        if (($$03239$us$i & 65535) << 16 >> 16) {
         $$7 = $$03239$us$i + ($$6 & 65535) & 65535; //@line 4064
         break L98;
        }
       }
      }
     } while (0);
     _mbed_tracef(2, 3844, 3182, $vararg_buffer9); //@line 4070
     $$2108 = 0; //@line 4071
     STACKTOP = sp; //@line 4072
     return $$2108 | 0; //@line 4072
    }
   } while (0);
   if (!(HEAP32[$79 + 52 >> 2] | 0)) {
    $$9 = $$7; //@line 4079
   } else {
    $174 = HEAP16[$79 + 4 >> 1] | 0; //@line 4082
    do {
     if (($174 + -1 & 65535) < 12) {
      $$8 = $$7 + 1 << 16 >> 16; //@line 4088
     } else {
      if (($174 + -13 & 65535) < 243) {
       $$8 = ($$7 & 65535) + 2 & 65535; //@line 4096
       break;
      }
      _mbed_tracef(2, 3844, 3247, $vararg_buffer11); //@line 4099
      $$2108 = 0; //@line 4100
      STACKTOP = sp; //@line 4101
      return $$2108 | 0; //@line 4101
     }
    } while (0);
    $$9 = ($174 & 65535) + ($$8 & 65535) & 65535; //@line 4108
   }
   $186 = HEAP32[$79 + 56 >> 2] | 0; //@line 4111
   L133 : do {
    if (!$186) {
     $$10 = $$9; //@line 4115
    } else {
     $189 = HEAP16[$79 + 6 >> 1] | 0; //@line 4118
     $191 = ($189 & 65535) + -1 | 0; //@line 4120
     if (($189 & 65535) > 2) {
      $$01213$i$i212 = 0; //@line 4123
      $$014$i$i211 = 1; //@line 4123
      $194 = 1; //@line 4123
      do {
       $$01213$i$i212 = $$01213$i$i212 + ((HEAP8[$186 + $194 >> 0] | 0) == 47 & 1) << 24 >> 24; //@line 4129
       $$014$i$i211 = $$014$i$i211 + 1 << 16 >> 16; //@line 4130
       $194 = $$014$i$i211 & 65535; //@line 4131
      } while (($191 | 0) > ($194 | 0));
      $phitmp$i$i214 = $$01213$i$i212 + 1 << 24 >> 24; //@line 4139
      if ($phitmp$i$i214 << 24 >> 24) {
       $$012$lcssa$i54$i216 = $phitmp$i$i214; //@line 4142
       label = 88; //@line 4143
      }
     } else {
      $$012$lcssa$i54$i216 = 1; //@line 4146
      label = 88; //@line 4147
     }
     L139 : do {
      if ((label | 0) == 88) {
       if (!($189 << 16 >> 16)) {
        $$03239$us46$i$us = 0; //@line 4153
        $$03538$us47$i$us = 0; //@line 4153
        do {
         $203 = $$03239$us46$i$us + 1 | 0; //@line 4155
         $$03239$us46$i$us = $203 & 65535; //@line 4156
         $$03538$us47$i$us = $$03538$us47$i$us + 1 << 24 >> 24; //@line 4157
        } while (($$03538$us47$i$us & 255) < ($$012$lcssa$i54$i216 & 255));
        $$lcssa294 = $203 & 65535; //@line 4166
        $$lcssa295 = $$03239$us46$i$us; //@line 4166
       } else {
        $$03239$us46$i = 0; //@line 4168
        $$03538$us47$i = 0; //@line 4168
        while (1) {
         $$02441$i222 = 0; //@line 4170
         $$02540$i223 = 0; //@line 4170
         $$02839$i224 = 0; //@line 4170
         $$03138$i225 = $186; //@line 4170
         while (1) {
          $208 = (HEAP8[$$03138$i225 >> 0] | 0) != 47; //@line 4173
          if ($$02839$i224 << 16 >> 16 == 0 | $208) {
           $$126$i229 = $$02540$i223; //@line 4179
           $$129$i228 = $$02839$i224 + ($208 & 1) << 16 >> 16; //@line 4179
          } else {
           if ($$02540$i223 << 24 >> 24 == $$03538$us47$i << 24 >> 24) {
            $$028$lcssa$i230 = $$02839$i224; //@line 4183
            break;
           }
           $$126$i229 = $$02540$i223 + 1 << 24 >> 24; //@line 4187
           $$129$i228 = 0; //@line 4187
          }
          $$02441$i222 = $$02441$i222 + 1 << 16 >> 16; //@line 4190
          if (($$02441$i222 & 65535) >= ($189 & 65535)) {
           $$028$lcssa$i230 = $$129$i228; //@line 4195
           break;
          } else {
           $$02540$i223 = $$126$i229; //@line 4193
           $$02839$i224 = $$129$i228; //@line 4193
           $$03138$i225 = $$03138$i225 + 1 | 0; //@line 4193
          }
         }
         if (($$028$lcssa$i230 & 65535) > 255) {
          break L139;
         }
         if (($$028$lcssa$i230 & 65535) < 13) {
          $$133$us49$i = $$03239$us46$i + 1 << 16 >> 16; //@line 4207
         } else {
          $$133$us49$i = ($$03239$us46$i & 65535) + 2 & 65535; //@line 4212
         }
         $224 = ($$133$us49$i & 65535) + ($$028$lcssa$i230 & 65535) | 0; //@line 4215
         $225 = $224 & 65535; //@line 4216
         $$03538$us47$i = $$03538$us47$i + 1 << 24 >> 24; //@line 4217
         if (($$03538$us47$i & 255) >= ($$012$lcssa$i54$i216 & 255)) {
          $$lcssa294 = $225; //@line 4222
          $$lcssa295 = $224; //@line 4222
          break;
         } else {
          $$03239$us46$i = $225; //@line 4220
         }
        }
       }
       if ($$lcssa294 << 16 >> 16) {
        $$10 = $$lcssa295 + ($$9 & 65535) & 65535; //@line 4232
        break L133;
       }
      }
     } while (0);
     _mbed_tracef(2, 3844, 3316, $vararg_buffer13); //@line 4237
     $$2108 = 0; //@line 4238
     STACKTOP = sp; //@line 4239
     return $$2108 | 0; //@line 4239
    }
   } while (0);
   $234 = HEAP32[$79 + 28 >> 2] | 0; //@line 4243
   if (($234 | 0) == -1) {
    $$11 = $$10; //@line 4246
   } else {
    if ($234 >>> 0 > 65535) {
     _mbed_tracef(2, 3844, 3390, $vararg_buffer15); //@line 4250
     $$2108 = 0; //@line 4251
     STACKTOP = sp; //@line 4252
     return $$2108 | 0; //@line 4252
    }
    if ($234 << 8 >>> 0 > 16777215) {
     $$120$232$i207 = 3; //@line 4257
     label = 111; //@line 4258
    } else {
     if ($234 << 16 >>> 0 > 16777215) {
      $$120$232$i207 = 2; //@line 4263
      label = 111; //@line 4264
     } else {
      if ($234 << 24 >>> 0 > 16777215) {
       $$120$232$i207 = 1; //@line 4269
       label = 111; //@line 4270
      } else {
       $$120$3$i208 = 0; //@line 4272
      }
     }
    }
    if ((label | 0) == 111) {
     $$120$3$i208 = $$120$232$i207; //@line 4277
    }
    $$11 = ($$120$3$i208 + 1 & 255) + ($$10 & 65535) & 65535; //@line 4284
   }
   $249 = HEAP32[$79 + 60 >> 2] | 0; //@line 4287
   L178 : do {
    if (!$249) {
     $$12 = $$11; //@line 4291
    } else {
     $252 = HEAP16[$79 + 8 >> 1] | 0; //@line 4294
     $254 = ($252 & 65535) + -1 | 0; //@line 4296
     if (($252 & 65535) > 2) {
      $$01213$i$i177 = 0; //@line 4299
      $$014$i$i176 = 1; //@line 4299
      $257 = 1; //@line 4299
      do {
       $$01213$i$i177 = $$01213$i$i177 + ((HEAP8[$249 + $257 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 4305
       $$014$i$i176 = $$014$i$i176 + 1 << 16 >> 16; //@line 4306
       $257 = $$014$i$i176 & 65535; //@line 4307
      } while (($254 | 0) > ($257 | 0));
      $phitmp$i$i179 = $$01213$i$i177 + 1 << 24 >> 24; //@line 4315
      if ($phitmp$i$i179 << 24 >> 24) {
       $$012$lcssa$i54$i181 = $phitmp$i$i179; //@line 4318
       label = 117; //@line 4319
      }
     } else {
      $$012$lcssa$i54$i181 = 1; //@line 4322
      label = 117; //@line 4323
     }
     L184 : do {
      if ((label | 0) == 117) {
       if (!($252 << 16 >> 16)) {
        $$03239$i183$us = 0; //@line 4329
        $$03538$i184$us = 0; //@line 4329
        do {
         $266 = $$03239$i183$us + 1 | 0; //@line 4331
         $$03239$i183$us = $266 & 65535; //@line 4332
         $$03538$i184$us = $$03538$i184$us + 1 << 24 >> 24; //@line 4333
        } while (($$03538$i184$us & 255) < ($$012$lcssa$i54$i181 & 255));
        $$lcssa292 = $266 & 65535; //@line 4342
        $$lcssa293 = $$03239$i183$us; //@line 4342
       } else {
        $$03239$i183 = 0; //@line 4344
        $$03538$i184 = 0; //@line 4344
        while (1) {
         $$02441$i192 = 0; //@line 4346
         $$02540$i193 = 0; //@line 4346
         $$02839$i194 = 0; //@line 4346
         $$03138$i195 = $249; //@line 4346
         while (1) {
          $271 = (HEAP8[$$03138$i195 >> 0] | 0) != 38; //@line 4349
          if ($$02839$i194 << 16 >> 16 == 0 | $271) {
           $$126$i199 = $$02540$i193; //@line 4355
           $$129$i198 = $$02839$i194 + ($271 & 1) << 16 >> 16; //@line 4355
          } else {
           if ($$02540$i193 << 24 >> 24 == $$03538$i184 << 24 >> 24) {
            $$028$lcssa$i200 = $$02839$i194; //@line 4359
            break;
           }
           $$126$i199 = $$02540$i193 + 1 << 24 >> 24; //@line 4363
           $$129$i198 = 0; //@line 4363
          }
          $$02441$i192 = $$02441$i192 + 1 << 16 >> 16; //@line 4366
          if (($$02441$i192 & 65535) >= ($252 & 65535)) {
           $$028$lcssa$i200 = $$129$i198; //@line 4371
           break;
          } else {
           $$02540$i193 = $$126$i199; //@line 4369
           $$02839$i194 = $$129$i198; //@line 4369
           $$03138$i195 = $$03138$i195 + 1 | 0; //@line 4369
          }
         }
         if (($$028$lcssa$i200 & 65535) > 255) {
          break L184;
         }
         if (($$028$lcssa$i200 & 65535) < 13) {
          $$133$i187 = $$03239$i183 + 1 << 16 >> 16; //@line 4383
         } else {
          $$133$i187 = ($$03239$i183 & 65535) + 2 & 65535; //@line 4388
         }
         $287 = ($$133$i187 & 65535) + ($$028$lcssa$i200 & 65535) | 0; //@line 4391
         $288 = $287 & 65535; //@line 4392
         $$03538$i184 = $$03538$i184 + 1 << 24 >> 24; //@line 4393
         if (($$03538$i184 & 255) >= ($$012$lcssa$i54$i181 & 255)) {
          $$lcssa292 = $288; //@line 4398
          $$lcssa293 = $287; //@line 4398
          break;
         } else {
          $$03239$i183 = $288; //@line 4396
         }
        }
       }
       if ($$lcssa292 << 16 >> 16) {
        $$12 = $$lcssa293 + ($$11 & 65535) & 65535; //@line 4408
        break L178;
       }
      }
     } while (0);
     _mbed_tracef(2, 3844, 3459, $vararg_buffer17); //@line 4413
     $$2108 = 0; //@line 4414
     STACKTOP = sp; //@line 4415
     return $$2108 | 0; //@line 4415
    }
   } while (0);
   $297 = HEAP32[$79 + 32 >> 2] | 0; //@line 4419
   if (($297 | 0) == -1) {
    $$13 = $$12; //@line 4422
   } else {
    if ($297 >>> 0 > 16777215) {
     $$2108 = 0; //@line 4426
     STACKTOP = sp; //@line 4427
     return $$2108 | 0; //@line 4427
    }
    do {
     if ($297 << 8 >>> 0 > 16777215) {
      $$120$232$i172 = 3; //@line 4433
      label = 139; //@line 4434
     } else {
      if ($297 << 16 >>> 0 > 16777215) {
       $$120$232$i172 = 2; //@line 4439
       label = 139; //@line 4440
       break;
      }
      if ($297 << 24 >>> 0 > 16777215) {
       $$120$232$i172 = 1; //@line 4446
       label = 139; //@line 4447
      } else {
       $$120$3$i173 = 0; //@line 4449
      }
     }
    } while (0);
    if ((label | 0) == 139) {
     $$120$3$i173 = $$120$232$i172; //@line 4454
    }
    $$13 = ($$120$3$i173 + 1 & 255) + ($$12 & 65535) & 65535; //@line 4461
   }
   $312 = HEAP32[$79 + 64 >> 2] | 0; //@line 4464
   L222 : do {
    if (!$312) {
     $$14 = $$13; //@line 4468
    } else {
     $315 = HEAP16[$79 + 10 >> 1] | 0; //@line 4471
     $317 = ($315 & 65535) + -1 | 0; //@line 4473
     if (($315 & 65535) > 2) {
      $$01213$i$i142 = 0; //@line 4476
      $$014$i$i141 = 1; //@line 4476
      $320 = 1; //@line 4476
      do {
       $$01213$i$i142 = $$01213$i$i142 + ((HEAP8[$312 + $320 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 4482
       $$014$i$i141 = $$014$i$i141 + 1 << 16 >> 16; //@line 4483
       $320 = $$014$i$i141 & 65535; //@line 4484
      } while (($317 | 0) > ($320 | 0));
      $phitmp$i$i144 = $$01213$i$i142 + 1 << 24 >> 24; //@line 4492
      if ($phitmp$i$i144 << 24 >> 24) {
       $$012$lcssa$i54$i146 = $phitmp$i$i144; //@line 4495
       label = 145; //@line 4496
      }
     } else {
      $$012$lcssa$i54$i146 = 1; //@line 4499
      label = 145; //@line 4500
     }
     L228 : do {
      if ((label | 0) == 145) {
       if (!($315 << 16 >> 16)) {
        break;
       } else {
        $$03239$i148 = 0; //@line 4508
        $$03538$i149 = 0; //@line 4508
       }
       do {
        $$02441$i157 = 0; //@line 4511
        $$02540$i158 = 0; //@line 4511
        $$02839$i159 = 0; //@line 4511
        $$03138$i160 = $312; //@line 4511
        while (1) {
         $330 = (HEAP8[$$03138$i160 >> 0] | 0) != 38; //@line 4514
         if ($$02839$i159 << 16 >> 16 == 0 | $330) {
          $$126$i164 = $$02540$i158; //@line 4520
          $$129$i163 = $$02839$i159 + ($330 & 1) << 16 >> 16; //@line 4520
         } else {
          if ($$02540$i158 << 24 >> 24 == $$03538$i149 << 24 >> 24) {
           $$028$lcssa$i165 = $$02839$i159; //@line 4524
           break;
          }
          $$126$i164 = $$02540$i158 + 1 << 24 >> 24; //@line 4528
          $$129$i163 = 0; //@line 4528
         }
         $$02441$i157 = $$02441$i157 + 1 << 16 >> 16; //@line 4531
         if (($$02441$i157 & 65535) >= ($315 & 65535)) {
          $$028$lcssa$i165 = $$129$i163; //@line 4536
          break;
         } else {
          $$02540$i158 = $$126$i164; //@line 4534
          $$02839$i159 = $$129$i163; //@line 4534
          $$03138$i160 = $$03138$i160 + 1 | 0; //@line 4534
         }
        }
        if (($$028$lcssa$i165 + -1 & 65535) > 254) {
         break L228;
        }
        if (($$028$lcssa$i165 & 65535) < 13) {
         $$133$i152 = $$03239$i148 + 1 << 16 >> 16; //@line 4549
        } else {
         $$133$i152 = ($$03239$i148 & 65535) + 2 & 65535; //@line 4554
        }
        $347 = ($$133$i152 & 65535) + ($$028$lcssa$i165 & 65535) | 0; //@line 4557
        $$03239$i148 = $347 & 65535; //@line 4558
        $$03538$i149 = $$03538$i149 + 1 << 24 >> 24; //@line 4559
       } while (($$03538$i149 & 255) < ($$012$lcssa$i54$i146 & 255));
       if (!($$03239$i148 << 16 >> 16)) {
        break;
       }
       $$14 = $347 + ($$13 & 65535) & 65535; //@line 4574
       break L222;
      }
     } while (0);
     _mbed_tracef(2, 3844, 3534, $vararg_buffer19); //@line 4578
     $$2108 = 0; //@line 4579
     STACKTOP = sp; //@line 4580
     return $$2108 | 0; //@line 4580
    }
   } while (0);
   $356 = HEAP32[$79 + 36 >> 2] | 0; //@line 4584
   if (($356 | 0) == -1) {
    $$15 = $$14; //@line 4587
   } else {
    if ($356 >>> 0 > 16777215) {
     _mbed_tracef(2, 3844, 3602, $vararg_buffer21); //@line 4591
     $$2108 = 0; //@line 4592
     STACKTOP = sp; //@line 4593
     return $$2108 | 0; //@line 4593
    }
    do {
     if ($356 << 8 >>> 0 > 16777215) {
      $$120$232$i137 = 3; //@line 4599
      label = 166; //@line 4600
     } else {
      if ($356 << 16 >>> 0 > 16777215) {
       $$120$232$i137 = 2; //@line 4605
       label = 166; //@line 4606
       break;
      }
      if ($356 << 24 >>> 0 > 16777215) {
       $$120$232$i137 = 1; //@line 4612
       label = 166; //@line 4613
      } else {
       $$120$3$i138 = 0; //@line 4615
      }
     }
    } while (0);
    if ((label | 0) == 166) {
     $$120$3$i138 = $$120$232$i137; //@line 4620
    }
    $$15 = ($$120$3$i138 + 1 & 255) + ($$14 & 65535) & 65535; //@line 4627
   }
   $371 = HEAP8[$79 + 1 >> 0] | 0; //@line 4630
   if (!($371 & 1)) {
    $$16 = $$15; //@line 4634
   } else {
    $375 = HEAP32[$79 + 20 >> 2] | 0; //@line 4637
    do {
     if ($375 >>> 0 > 16777215) {
      $$120$232$i129 = 4; //@line 4641
      label = 173; //@line 4642
     } else {
      if ($375 << 8 >>> 0 > 16777215) {
       $$120$232$i129 = 3; //@line 4647
       label = 173; //@line 4648
       break;
      }
      if ($375 << 16 >>> 0 > 16777215) {
       $$120$232$i129 = 2; //@line 4654
       label = 173; //@line 4655
       break;
      }
      if ($375 << 24 >>> 0 > 16777215) {
       $$120$232$i129 = 1; //@line 4661
       label = 173; //@line 4662
      } else {
       $$120$3$i130 = 0; //@line 4664
      }
     }
    } while (0);
    if ((label | 0) == 173) {
     $$120$3$i130 = $$120$232$i129; //@line 4669
    }
    $$16 = ($$120$3$i130 + 1 & 255) + ($$15 & 65535) & 65535; //@line 4676
   }
   $389 = HEAP32[$79 + 40 >> 2] | 0; //@line 4679
   if (($389 | 0) == -1) {
    $$17 = $$16; //@line 4682
   } else {
    if ($389 >>> 0 > 16777215) {
     _mbed_tracef(2, 3844, 3669, $vararg_buffer23); //@line 4686
     $$2108 = 0; //@line 4687
     STACKTOP = sp; //@line 4688
     return $$2108 | 0; //@line 4688
    }
    do {
     if ($389 << 8 >>> 0 > 16777215) {
      $$120$232$i121 = 3; //@line 4694
      label = 181; //@line 4695
     } else {
      if ($389 << 16 >>> 0 > 16777215) {
       $$120$232$i121 = 2; //@line 4700
       label = 181; //@line 4701
       break;
      }
      if ($389 << 24 >>> 0 > 16777215) {
       $$120$232$i121 = 1; //@line 4707
       label = 181; //@line 4708
      } else {
       $$120$3$i122 = 0; //@line 4710
      }
     }
    } while (0);
    if ((label | 0) == 181) {
     $$120$3$i122 = $$120$232$i121; //@line 4715
    }
    $$17 = ($$120$3$i122 + 1 & 255) + ($$16 & 65535) & 65535; //@line 4722
   }
   if (!($371 & 2)) {
    $$18 = $$17; //@line 4727
    break;
   }
   $406 = HEAP32[$79 + 24 >> 2] | 0; //@line 4731
   do {
    if ($406 >>> 0 > 16777215) {
     $$120$232$i = 5; //@line 4735
     label = 188; //@line 4736
    } else {
     if ($406 << 8 >>> 0 > 16777215) {
      $$120$232$i = 4; //@line 4741
      label = 188; //@line 4742
      break;
     }
     if ($406 << 16 >>> 0 > 16777215) {
      $$120$232$i = 3; //@line 4748
      label = 188; //@line 4749
      break;
     }
     if ($406 << 24 >>> 0 > 16777215) {
      $$120$232$i = 2; //@line 4755
      label = 188; //@line 4756
     } else {
      $$120$3$i = 1; //@line 4758
     }
    }
   } while (0);
   if ((label | 0) == 188) {
    $$120$3$i = $$120$232$i; //@line 4763
   }
   $$18 = $$120$3$i + ($$17 & 65535) & 65535; //@line 4768
  }
 } while (0);
 $418 = HEAP16[$0 + 24 >> 1] | 0; //@line 4772
 $$ = ($418 & 65535) + ($$18 & 65535) + ($418 << 16 >> 16 != 0 & 1) | 0; //@line 4778
 do {
  if ($80) {
   $merge$i = 0; //@line 4781
  } else {
   $426 = (HEAP32[$79 + 64 >> 2] | 0) == 0; //@line 4785
   $428 = HEAP32[$79 + 12 >> 2] | 0; //@line 4787
   if ($426 & ($428 | 0) == -1) {
    if (!(HEAP32[$79 + 60 >> 2] | 0)) {
     if ((HEAP32[$79 + 40 >> 2] | 0) == -1) {
      if ((HEAP32[$79 + 36 >> 2] | 0) == -1) {
       if (!(HEAP32[$79 + 44 >> 2] | 0)) {
        if ((HEAP32[$79 + 16 >> 2] | 0) == 60) {
         if (!(HEAP8[$79 + 1 >> 0] & 3)) {
          $merge$i = 0; //@line 4816
          break;
         } else {
          $475 = -1; //@line 4819
         }
        } else {
         $475 = -1; //@line 4822
        }
       } else {
        $475 = -1; //@line 4825
       }
      } else {
       $475 = -1; //@line 4828
      }
     } else {
      $475 = -1; //@line 4831
     }
    } else {
     $475 = -1; //@line 4834
    }
   } else {
    $475 = $428; //@line 4837
   }
   $$553$$i = $65 ? $17 ? (HEAP32[$79 + 56 >> 2] | 0) == 0 ? (HEAP32[$79 + 28 >> 2] | 0) == -1 ? (HEAP32[$79 + 32 >> 2] | 0) == -1 ? (HEAP32[$79 + 48 >> 2] | 0) == 0 ? (HEAP32[$79 + 52 >> 2] | 0) == 0 ? 0 : 3 : 4 : 6 : 7 : 8 : 11 : 12; //@line 4860
   $466 = (HEAP32[$79 + 16 >> 2] | 0) == 60; //@line 4863
   $$553$$$i = $466 ? $$553$$i : 14; //@line 4867
   $narrow$i = (14 - ($$553$$i & 255) | 0) > 12 & ($466 ^ 1); //@line 4869
   $$$65$i = $narrow$i & 1; //@line 4870
   $$553$$$i$ = $426 ? $$553$$$i : 15; //@line 4876
   $474 = ($475 | 0) == -1; //@line 4878
   $$957$i = $474 ? $$553$$$i$ : 17; //@line 4882
   $$5$i = ($426 ? $$$65$i : (15 - ($$553$$$i & 255) | 0) > 12 ? $narrow$i ? 2 : 1 : $$$65$i) + ((17 - ($$553$$$i$ & 255) | 0) > 12 & ($474 ^ 1) & 1) << 24 >> 24; //@line 4886
   if (!(HEAP32[$79 + 60 >> 2] | 0)) {
    $$1058$i = $$957$i; //@line 4891
    $$7$i = $$5$i; //@line 4891
   } else {
    $$1058$i = 20; //@line 4898
    $$7$i = $$5$i + ((20 - ($$957$i & 255) | 0) > 12 & 1) << 24 >> 24; //@line 4898
   }
   if ((HEAP32[$79 + 40 >> 2] | 0) == -1) {
    $$1159$i = $$1058$i; //@line 4904
    $$9$i = $$7$i; //@line 4904
   } else {
    if ((23 - ($$1058$i & 255) | 0) > 12) {
     $$1159$i = 23; //@line 4913
     $$9$i = ($$7$i & 255) + 1 & 255; //@line 4913
    } else {
     $$1159$i = 23; //@line 4915
     $$9$i = $$7$i; //@line 4915
    }
   }
   if ((HEAP32[$79 + 36 >> 2] | 0) == -1) {
    $$11$i = $$9$i; //@line 4922
    $$1260$i = $$1159$i; //@line 4922
   } else {
    if ((27 - ($$1159$i & 255) | 0) > 12) {
     $$11$i = ($$9$i & 255) + 1 & 255; //@line 4931
     $$1260$i = 27; //@line 4931
    } else {
     $$11$i = $$9$i; //@line 4933
     $$1260$i = 27; //@line 4933
    }
   }
   $504 = HEAP8[$79 + 1 >> 0] | 0; //@line 4937
   if (!($504 & 2)) {
    $$13$i = $$11$i; //@line 4941
    $$1361$i = $$1260$i; //@line 4941
   } else {
    if ((28 - ($$1260$i & 255) | 0) > 12) {
     $$13$i = ($$11$i & 255) + 1 & 255; //@line 4950
     $$1361$i = 28; //@line 4950
    } else {
     $$13$i = $$11$i; //@line 4952
     $$1361$i = 28; //@line 4952
    }
   }
   if (!(HEAP32[$79 + 44 >> 2] | 0)) {
    $$1462$i = $$1361$i; //@line 4959
    $$16$i = $$13$i; //@line 4959
   } else {
    $517 = 35 - ($$1361$i & 255) | 0; //@line 4962
    if (($517 | 0) > 12) {
     if (($517 | 0) > 269) {
      $$1462$i = 35; //@line 4974
      $$16$i = ($$13$i + 1 & 255) + 1 & 255; //@line 4974
     } else {
      $$1462$i = 35; //@line 4976
      $$16$i = ($$13$i & 255) + 1 & 255; //@line 4976
     }
    } else {
     $$1462$i = 35; //@line 4979
     $$16$i = $$13$i; //@line 4979
    }
   }
   if (!($504 & 1)) {
    $merge$i = $$16$i; //@line 4985
   } else {
    if ((60 - ($$1462$i & 255) | 0) > 12) {
     $merge$i = ($$16$i & 255) + 1 & 255; //@line 4994
    } else {
     $merge$i = $$16$i; //@line 4996
    }
   }
  }
 } while (0);
 $$2108 = $$ + ($merge$i & 255) & 65535; //@line 5004
 STACKTOP = sp; //@line 5005
 return $$2108 | 0; //@line 5005
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_100($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $157 = 0, $158 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $219 = 0, $22 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 20793
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20795
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20797
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20799
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20801
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20803
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20805
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20807
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20809
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20811
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20813
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20815
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20817
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20819
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20821
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20823
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20825
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20827
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20829
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20831
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20833
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20835
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20837
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20839
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20841
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 20843
 $122 = HEAP32[$4 >> 2] | 0; //@line 20844
 if (!$122) {
  $$02972$reg2mem$0 = $12; //@line 20847
  $$03071$reg2mem$0 = $8; //@line 20847
  $$reg2mem$0 = $2; //@line 20847
 } else {
  $125 = HEAP32[$122 + 8 >> 2] | 0; //@line 20850
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 20851
  FUNCTION_TABLE_vi[$125 & 511]($10); //@line 20852
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 194; //@line 20855
   $126 = $ReallocAsyncCtx3 + 4 | 0; //@line 20856
   HEAP32[$126 >> 2] = $2; //@line 20857
   $127 = $ReallocAsyncCtx3 + 8 | 0; //@line 20858
   HEAP32[$127 >> 2] = $6; //@line 20859
   $128 = $ReallocAsyncCtx3 + 12 | 0; //@line 20860
   HEAP32[$128 >> 2] = $8; //@line 20861
   $129 = $ReallocAsyncCtx3 + 16 | 0; //@line 20862
   HEAP32[$129 >> 2] = $10; //@line 20863
   $130 = $ReallocAsyncCtx3 + 20 | 0; //@line 20864
   HEAP32[$130 >> 2] = $4; //@line 20865
   $131 = $ReallocAsyncCtx3 + 24 | 0; //@line 20866
   HEAP32[$131 >> 2] = $12; //@line 20867
   $132 = $ReallocAsyncCtx3 + 28 | 0; //@line 20868
   HEAP32[$132 >> 2] = $14; //@line 20869
   $133 = $ReallocAsyncCtx3 + 32 | 0; //@line 20870
   HEAP32[$133 >> 2] = $16; //@line 20871
   $134 = $ReallocAsyncCtx3 + 36 | 0; //@line 20872
   HEAP32[$134 >> 2] = $18; //@line 20873
   $135 = $ReallocAsyncCtx3 + 40 | 0; //@line 20874
   HEAP32[$135 >> 2] = $20; //@line 20875
   $136 = $ReallocAsyncCtx3 + 44 | 0; //@line 20876
   HEAP32[$136 >> 2] = $22; //@line 20877
   $137 = $ReallocAsyncCtx3 + 48 | 0; //@line 20878
   HEAP32[$137 >> 2] = $24; //@line 20879
   $138 = $ReallocAsyncCtx3 + 52 | 0; //@line 20880
   HEAP32[$138 >> 2] = $26; //@line 20881
   $139 = $ReallocAsyncCtx3 + 56 | 0; //@line 20882
   HEAP32[$139 >> 2] = $28; //@line 20883
   $140 = $ReallocAsyncCtx3 + 60 | 0; //@line 20884
   HEAP32[$140 >> 2] = $30; //@line 20885
   $141 = $ReallocAsyncCtx3 + 64 | 0; //@line 20886
   HEAP32[$141 >> 2] = $32; //@line 20887
   $142 = $ReallocAsyncCtx3 + 68 | 0; //@line 20888
   HEAP32[$142 >> 2] = $34; //@line 20889
   $143 = $ReallocAsyncCtx3 + 72 | 0; //@line 20890
   HEAP32[$143 >> 2] = $36; //@line 20891
   $144 = $ReallocAsyncCtx3 + 76 | 0; //@line 20892
   HEAP32[$144 >> 2] = $38; //@line 20893
   $145 = $ReallocAsyncCtx3 + 80 | 0; //@line 20894
   HEAP32[$145 >> 2] = $40; //@line 20895
   $146 = $ReallocAsyncCtx3 + 84 | 0; //@line 20896
   HEAP32[$146 >> 2] = $42; //@line 20897
   $147 = $ReallocAsyncCtx3 + 88 | 0; //@line 20898
   HEAP32[$147 >> 2] = $44; //@line 20899
   $148 = $ReallocAsyncCtx3 + 92 | 0; //@line 20900
   HEAP32[$148 >> 2] = $46; //@line 20901
   $149 = $ReallocAsyncCtx3 + 96 | 0; //@line 20902
   HEAP32[$149 >> 2] = $48; //@line 20903
   $150 = $ReallocAsyncCtx3 + 100 | 0; //@line 20904
   HEAP32[$150 >> 2] = $50; //@line 20905
   sp = STACKTOP; //@line 20906
   return;
  }
  ___async_unwind = 0; //@line 20909
  HEAP32[$ReallocAsyncCtx3 >> 2] = 194; //@line 20910
  $126 = $ReallocAsyncCtx3 + 4 | 0; //@line 20911
  HEAP32[$126 >> 2] = $2; //@line 20912
  $127 = $ReallocAsyncCtx3 + 8 | 0; //@line 20913
  HEAP32[$127 >> 2] = $6; //@line 20914
  $128 = $ReallocAsyncCtx3 + 12 | 0; //@line 20915
  HEAP32[$128 >> 2] = $8; //@line 20916
  $129 = $ReallocAsyncCtx3 + 16 | 0; //@line 20917
  HEAP32[$129 >> 2] = $10; //@line 20918
  $130 = $ReallocAsyncCtx3 + 20 | 0; //@line 20919
  HEAP32[$130 >> 2] = $4; //@line 20920
  $131 = $ReallocAsyncCtx3 + 24 | 0; //@line 20921
  HEAP32[$131 >> 2] = $12; //@line 20922
  $132 = $ReallocAsyncCtx3 + 28 | 0; //@line 20923
  HEAP32[$132 >> 2] = $14; //@line 20924
  $133 = $ReallocAsyncCtx3 + 32 | 0; //@line 20925
  HEAP32[$133 >> 2] = $16; //@line 20926
  $134 = $ReallocAsyncCtx3 + 36 | 0; //@line 20927
  HEAP32[$134 >> 2] = $18; //@line 20928
  $135 = $ReallocAsyncCtx3 + 40 | 0; //@line 20929
  HEAP32[$135 >> 2] = $20; //@line 20930
  $136 = $ReallocAsyncCtx3 + 44 | 0; //@line 20931
  HEAP32[$136 >> 2] = $22; //@line 20932
  $137 = $ReallocAsyncCtx3 + 48 | 0; //@line 20933
  HEAP32[$137 >> 2] = $24; //@line 20934
  $138 = $ReallocAsyncCtx3 + 52 | 0; //@line 20935
  HEAP32[$138 >> 2] = $26; //@line 20936
  $139 = $ReallocAsyncCtx3 + 56 | 0; //@line 20937
  HEAP32[$139 >> 2] = $28; //@line 20938
  $140 = $ReallocAsyncCtx3 + 60 | 0; //@line 20939
  HEAP32[$140 >> 2] = $30; //@line 20940
  $141 = $ReallocAsyncCtx3 + 64 | 0; //@line 20941
  HEAP32[$141 >> 2] = $32; //@line 20942
  $142 = $ReallocAsyncCtx3 + 68 | 0; //@line 20943
  HEAP32[$142 >> 2] = $34; //@line 20944
  $143 = $ReallocAsyncCtx3 + 72 | 0; //@line 20945
  HEAP32[$143 >> 2] = $36; //@line 20946
  $144 = $ReallocAsyncCtx3 + 76 | 0; //@line 20947
  HEAP32[$144 >> 2] = $38; //@line 20948
  $145 = $ReallocAsyncCtx3 + 80 | 0; //@line 20949
  HEAP32[$145 >> 2] = $40; //@line 20950
  $146 = $ReallocAsyncCtx3 + 84 | 0; //@line 20951
  HEAP32[$146 >> 2] = $42; //@line 20952
  $147 = $ReallocAsyncCtx3 + 88 | 0; //@line 20953
  HEAP32[$147 >> 2] = $44; //@line 20954
  $148 = $ReallocAsyncCtx3 + 92 | 0; //@line 20955
  HEAP32[$148 >> 2] = $46; //@line 20956
  $149 = $ReallocAsyncCtx3 + 96 | 0; //@line 20957
  HEAP32[$149 >> 2] = $48; //@line 20958
  $150 = $ReallocAsyncCtx3 + 100 | 0; //@line 20959
  HEAP32[$150 >> 2] = $50; //@line 20960
  sp = STACKTOP; //@line 20961
  return;
 }
 L9 : while (1) {
  $151 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 20965
  $152 = $151 + 76 | 0; //@line 20966
  $153 = HEAP32[$152 >> 2] | 0; //@line 20967
  if ($153 | 0) {
   if ($153 >>> 0 <= 100) {
    label = 22; //@line 20972
    break;
   }
   HEAP32[$152 >> 2] = $153 + -100; //@line 20976
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 20981
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 20981
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 20983
   $$131 = $$03071$reg2mem$0; //@line 20983
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 20986
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 20989
    break L9;
   }
   $52 = 10072 + ($$02972$reg2mem$1 << 2) | 0; //@line 20992
   $54 = HEAP32[$52 >> 2] | 0; //@line 20993
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 21001
  $57 = HEAP32[$56 >> 2] | 0; //@line 21002
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 21006
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 21007
   $$03071$reg2mem$0 = $$131; //@line 21007
   $$reg2mem$0 = $52; //@line 21007
   continue;
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 21014
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 21017
    $$03071$reg2mem$0 = $$131; //@line 21017
    $$reg2mem$0 = $52; //@line 21017
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $218 = $$131 + 44 | 0; //@line 21027
  $219 = HEAP32[$218 >> 2] | 0; //@line 21028
  if (!$219) {
   $227 = $28 + 12 | 0; //@line 21031
   HEAP32[$227 >> 2] = 0; //@line 21032
   $229 = $30 + 4 | 0; //@line 21034
   HEAP32[$229 >> 2] = 0; //@line 21036
   HEAP32[$229 + 4 >> 2] = 0; //@line 21039
   HEAP32[$30 >> 2] = 3; //@line 21040
   $233 = $30 + 12 | 0; //@line 21041
   HEAP32[$233 >> 2] = 712; //@line 21042
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 21043
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($28, 100, $30) | 0; //@line 21044
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 21047
    $234 = $ReallocAsyncCtx10 + 4 | 0; //@line 21048
    HEAP32[$234 >> 2] = $233; //@line 21049
    $235 = $ReallocAsyncCtx10 + 8 | 0; //@line 21050
    HEAP32[$235 >> 2] = $227; //@line 21051
    $236 = $ReallocAsyncCtx10 + 12 | 0; //@line 21052
    HEAP32[$236 >> 2] = $30; //@line 21053
    $237 = $ReallocAsyncCtx10 + 16 | 0; //@line 21054
    HEAP32[$237 >> 2] = $28; //@line 21055
    sp = STACKTOP; //@line 21056
    return;
   }
   ___async_unwind = 0; //@line 21059
   HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 21060
   $234 = $ReallocAsyncCtx10 + 4 | 0; //@line 21061
   HEAP32[$234 >> 2] = $233; //@line 21062
   $235 = $ReallocAsyncCtx10 + 8 | 0; //@line 21063
   HEAP32[$235 >> 2] = $227; //@line 21064
   $236 = $ReallocAsyncCtx10 + 12 | 0; //@line 21065
   HEAP32[$236 >> 2] = $30; //@line 21066
   $237 = $ReallocAsyncCtx10 + 16 | 0; //@line 21067
   HEAP32[$237 >> 2] = $28; //@line 21068
   sp = STACKTOP; //@line 21069
   return;
  } else {
   $223 = HEAP32[$219 + 4 >> 2] | 0; //@line 21074
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 21075
   FUNCTION_TABLE_vii[$223 & 7]($28, $$131 + 32 | 0); //@line 21076
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 21079
    $224 = $ReallocAsyncCtx7 + 4 | 0; //@line 21080
    HEAP32[$224 >> 2] = $218; //@line 21081
    $225 = $ReallocAsyncCtx7 + 8 | 0; //@line 21082
    HEAP32[$225 >> 2] = $28; //@line 21083
    $226 = $ReallocAsyncCtx7 + 12 | 0; //@line 21084
    HEAP32[$226 >> 2] = $30; //@line 21085
    sp = STACKTOP; //@line 21086
    return;
   }
   ___async_unwind = 0; //@line 21089
   HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 21090
   $224 = $ReallocAsyncCtx7 + 4 | 0; //@line 21091
   HEAP32[$224 >> 2] = $218; //@line 21092
   $225 = $ReallocAsyncCtx7 + 8 | 0; //@line 21093
   HEAP32[$225 >> 2] = $28; //@line 21094
   $226 = $ReallocAsyncCtx7 + 12 | 0; //@line 21095
   HEAP32[$226 >> 2] = $30; //@line 21096
   sp = STACKTOP; //@line 21097
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 21103
  $64 = $54 + 44 | 0; //@line 21104
  $65 = HEAP32[$64 >> 2] | 0; //@line 21105
  if (!$65) {
   HEAP32[$14 >> 2] = 0; //@line 21108
   $96 = HEAP32[$54 >> 2] | 0; //@line 21109
   HEAP32[$16 >> 2] = 0; //@line 21110
   HEAP32[$18 >> 2] = 191; //@line 21111
   HEAP32[$20 >> 2] = $96; //@line 21112
   HEAP32[$22 >> 2] = 724; //@line 21113
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 21114
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 21115
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 21118
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 21119
    HEAP32[$97 >> 2] = $6; //@line 21120
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 21121
    HEAP32[$98 >> 2] = $52; //@line 21122
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 21123
    HEAP32[$99 >> 2] = $4; //@line 21124
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 21125
    HEAP32[$100 >> 2] = $$131; //@line 21126
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 21127
    HEAP32[$101 >> 2] = $10; //@line 21128
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 21129
    HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 21130
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 21131
    HEAP32[$103 >> 2] = $14; //@line 21132
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 21133
    HEAP32[$104 >> 2] = $16; //@line 21134
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 21135
    HEAP32[$105 >> 2] = $18; //@line 21136
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 21137
    HEAP32[$106 >> 2] = $20; //@line 21138
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 21139
    HEAP32[$107 >> 2] = $22; //@line 21140
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 21141
    HEAP32[$108 >> 2] = $24; //@line 21142
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 21143
    HEAP32[$109 >> 2] = $26; //@line 21144
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 21145
    HEAP32[$110 >> 2] = $28; //@line 21146
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 21147
    HEAP32[$111 >> 2] = $30; //@line 21148
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 21149
    HEAP32[$112 >> 2] = $32; //@line 21150
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 21151
    HEAP32[$113 >> 2] = $34; //@line 21152
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 21153
    HEAP32[$114 >> 2] = $36; //@line 21154
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 21155
    HEAP32[$115 >> 2] = $38; //@line 21156
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 21157
    HEAP32[$116 >> 2] = $40; //@line 21158
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 21159
    HEAP32[$117 >> 2] = $42; //@line 21160
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 21161
    HEAP32[$118 >> 2] = $44; //@line 21162
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 21163
    HEAP32[$119 >> 2] = $46; //@line 21164
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 21165
    HEAP32[$120 >> 2] = $48; //@line 21166
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 21167
    HEAP32[$121 >> 2] = $50; //@line 21168
    sp = STACKTOP; //@line 21169
    return;
   }
   ___async_unwind = 0; //@line 21172
   HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 21173
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 21174
   HEAP32[$97 >> 2] = $6; //@line 21175
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 21176
   HEAP32[$98 >> 2] = $52; //@line 21177
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 21178
   HEAP32[$99 >> 2] = $4; //@line 21179
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 21180
   HEAP32[$100 >> 2] = $$131; //@line 21181
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 21182
   HEAP32[$101 >> 2] = $10; //@line 21183
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 21184
   HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 21185
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 21186
   HEAP32[$103 >> 2] = $14; //@line 21187
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 21188
   HEAP32[$104 >> 2] = $16; //@line 21189
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 21190
   HEAP32[$105 >> 2] = $18; //@line 21191
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 21192
   HEAP32[$106 >> 2] = $20; //@line 21193
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 21194
   HEAP32[$107 >> 2] = $22; //@line 21195
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 21196
   HEAP32[$108 >> 2] = $24; //@line 21197
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 21198
   HEAP32[$109 >> 2] = $26; //@line 21199
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 21200
   HEAP32[$110 >> 2] = $28; //@line 21201
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 21202
   HEAP32[$111 >> 2] = $30; //@line 21203
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 21204
   HEAP32[$112 >> 2] = $32; //@line 21205
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 21206
   HEAP32[$113 >> 2] = $34; //@line 21207
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 21208
   HEAP32[$114 >> 2] = $36; //@line 21209
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 21210
   HEAP32[$115 >> 2] = $38; //@line 21211
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 21212
   HEAP32[$116 >> 2] = $40; //@line 21213
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 21214
   HEAP32[$117 >> 2] = $42; //@line 21215
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 21216
   HEAP32[$118 >> 2] = $44; //@line 21217
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 21218
   HEAP32[$119 >> 2] = $46; //@line 21219
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 21220
   HEAP32[$120 >> 2] = $48; //@line 21221
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 21222
   HEAP32[$121 >> 2] = $50; //@line 21223
   sp = STACKTOP; //@line 21224
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 21229
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 21230
   FUNCTION_TABLE_vii[$69 & 7]($10, $54 + 32 | 0); //@line 21231
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 21234
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 21235
    HEAP32[$70 >> 2] = $6; //@line 21236
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 21237
    HEAP32[$71 >> 2] = $52; //@line 21238
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 21239
    HEAP32[$72 >> 2] = $4; //@line 21240
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 21241
    HEAP32[$73 >> 2] = $$131; //@line 21242
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 21243
    HEAP32[$74 >> 2] = $10; //@line 21244
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 21245
    HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 21246
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 21247
    HEAP32[$76 >> 2] = $14; //@line 21248
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 21249
    HEAP32[$77 >> 2] = $16; //@line 21250
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 21251
    HEAP32[$78 >> 2] = $18; //@line 21252
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 21253
    HEAP32[$79 >> 2] = $20; //@line 21254
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 21255
    HEAP32[$80 >> 2] = $22; //@line 21256
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 21257
    HEAP32[$81 >> 2] = $24; //@line 21258
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 21259
    HEAP32[$82 >> 2] = $26; //@line 21260
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 21261
    HEAP32[$83 >> 2] = $28; //@line 21262
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 21263
    HEAP32[$84 >> 2] = $30; //@line 21264
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 21265
    HEAP32[$85 >> 2] = $64; //@line 21266
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 21267
    HEAP32[$86 >> 2] = $32; //@line 21268
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 21269
    HEAP32[$87 >> 2] = $34; //@line 21270
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 21271
    HEAP32[$88 >> 2] = $36; //@line 21272
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 21273
    HEAP32[$89 >> 2] = $38; //@line 21274
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 21275
    HEAP32[$90 >> 2] = $40; //@line 21276
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 21277
    HEAP32[$91 >> 2] = $42; //@line 21278
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 21279
    HEAP32[$92 >> 2] = $44; //@line 21280
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 21281
    HEAP32[$93 >> 2] = $46; //@line 21282
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 21283
    HEAP32[$94 >> 2] = $48; //@line 21284
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 21285
    HEAP32[$95 >> 2] = $50; //@line 21286
    sp = STACKTOP; //@line 21287
    return;
   }
   ___async_unwind = 0; //@line 21290
   HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 21291
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 21292
   HEAP32[$70 >> 2] = $6; //@line 21293
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 21294
   HEAP32[$71 >> 2] = $52; //@line 21295
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 21296
   HEAP32[$72 >> 2] = $4; //@line 21297
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 21298
   HEAP32[$73 >> 2] = $$131; //@line 21299
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 21300
   HEAP32[$74 >> 2] = $10; //@line 21301
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 21302
   HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 21303
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 21304
   HEAP32[$76 >> 2] = $14; //@line 21305
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 21306
   HEAP32[$77 >> 2] = $16; //@line 21307
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 21308
   HEAP32[$78 >> 2] = $18; //@line 21309
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 21310
   HEAP32[$79 >> 2] = $20; //@line 21311
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 21312
   HEAP32[$80 >> 2] = $22; //@line 21313
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 21314
   HEAP32[$81 >> 2] = $24; //@line 21315
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 21316
   HEAP32[$82 >> 2] = $26; //@line 21317
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 21318
   HEAP32[$83 >> 2] = $28; //@line 21319
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 21320
   HEAP32[$84 >> 2] = $30; //@line 21321
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 21322
   HEAP32[$85 >> 2] = $64; //@line 21323
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 21324
   HEAP32[$86 >> 2] = $32; //@line 21325
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 21326
   HEAP32[$87 >> 2] = $34; //@line 21327
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 21328
   HEAP32[$88 >> 2] = $36; //@line 21329
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 21330
   HEAP32[$89 >> 2] = $38; //@line 21331
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 21332
   HEAP32[$90 >> 2] = $40; //@line 21333
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 21334
   HEAP32[$91 >> 2] = $42; //@line 21335
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 21336
   HEAP32[$92 >> 2] = $44; //@line 21337
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 21338
   HEAP32[$93 >> 2] = $46; //@line 21339
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 21340
   HEAP32[$94 >> 2] = $48; //@line 21341
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 21342
   HEAP32[$95 >> 2] = $50; //@line 21343
   sp = STACKTOP; //@line 21344
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$152 >> 2] = 0; //@line 21349
  $157 = $151 + 44 | 0; //@line 21350
  $158 = HEAP32[$157 >> 2] | 0; //@line 21351
  if (!$158) {
   HEAP32[$34 >> 2] = 0; //@line 21354
   $189 = HEAP32[$151 >> 2] | 0; //@line 21355
   HEAP32[$36 >> 2] = 0; //@line 21356
   HEAP32[$38 >> 2] = 196; //@line 21357
   HEAP32[$40 >> 2] = $189; //@line 21358
   HEAP32[$42 >> 2] = 724; //@line 21359
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 21360
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 21361
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 21364
    $190 = $ReallocAsyncCtx11 + 4 | 0; //@line 21365
    HEAP32[$190 >> 2] = $$reg2mem$0; //@line 21366
    $191 = $ReallocAsyncCtx11 + 8 | 0; //@line 21367
    HEAP32[$191 >> 2] = $6; //@line 21368
    $192 = $ReallocAsyncCtx11 + 12 | 0; //@line 21369
    HEAP32[$192 >> 2] = $$03071$reg2mem$0; //@line 21370
    $193 = $ReallocAsyncCtx11 + 16 | 0; //@line 21371
    HEAP32[$193 >> 2] = $10; //@line 21372
    $194 = $ReallocAsyncCtx11 + 20 | 0; //@line 21373
    HEAP32[$194 >> 2] = $4; //@line 21374
    $195 = $ReallocAsyncCtx11 + 24 | 0; //@line 21375
    HEAP32[$195 >> 2] = $$02972$reg2mem$0; //@line 21376
    $196 = $ReallocAsyncCtx11 + 28 | 0; //@line 21377
    HEAP32[$196 >> 2] = $14; //@line 21378
    $197 = $ReallocAsyncCtx11 + 32 | 0; //@line 21379
    HEAP32[$197 >> 2] = $16; //@line 21380
    $198 = $ReallocAsyncCtx11 + 36 | 0; //@line 21381
    HEAP32[$198 >> 2] = $18; //@line 21382
    $199 = $ReallocAsyncCtx11 + 40 | 0; //@line 21383
    HEAP32[$199 >> 2] = $20; //@line 21384
    $200 = $ReallocAsyncCtx11 + 44 | 0; //@line 21385
    HEAP32[$200 >> 2] = $22; //@line 21386
    $201 = $ReallocAsyncCtx11 + 48 | 0; //@line 21387
    HEAP32[$201 >> 2] = $24; //@line 21388
    $202 = $ReallocAsyncCtx11 + 52 | 0; //@line 21389
    HEAP32[$202 >> 2] = $26; //@line 21390
    $203 = $ReallocAsyncCtx11 + 56 | 0; //@line 21391
    HEAP32[$203 >> 2] = $28; //@line 21392
    $204 = $ReallocAsyncCtx11 + 60 | 0; //@line 21393
    HEAP32[$204 >> 2] = $30; //@line 21394
    $205 = $ReallocAsyncCtx11 + 64 | 0; //@line 21395
    HEAP32[$205 >> 2] = $32; //@line 21396
    $206 = $ReallocAsyncCtx11 + 68 | 0; //@line 21397
    HEAP32[$206 >> 2] = $34; //@line 21398
    $207 = $ReallocAsyncCtx11 + 72 | 0; //@line 21399
    HEAP32[$207 >> 2] = $36; //@line 21400
    $208 = $ReallocAsyncCtx11 + 76 | 0; //@line 21401
    HEAP32[$208 >> 2] = $38; //@line 21402
    $209 = $ReallocAsyncCtx11 + 80 | 0; //@line 21403
    HEAP32[$209 >> 2] = $40; //@line 21404
    $210 = $ReallocAsyncCtx11 + 84 | 0; //@line 21405
    HEAP32[$210 >> 2] = $42; //@line 21406
    $211 = $ReallocAsyncCtx11 + 88 | 0; //@line 21407
    HEAP32[$211 >> 2] = $44; //@line 21408
    $212 = $ReallocAsyncCtx11 + 92 | 0; //@line 21409
    HEAP32[$212 >> 2] = $46; //@line 21410
    $213 = $ReallocAsyncCtx11 + 96 | 0; //@line 21411
    HEAP32[$213 >> 2] = $48; //@line 21412
    $214 = $ReallocAsyncCtx11 + 100 | 0; //@line 21413
    HEAP32[$214 >> 2] = $50; //@line 21414
    sp = STACKTOP; //@line 21415
    return;
   }
   ___async_unwind = 0; //@line 21418
   HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 21419
   $190 = $ReallocAsyncCtx11 + 4 | 0; //@line 21420
   HEAP32[$190 >> 2] = $$reg2mem$0; //@line 21421
   $191 = $ReallocAsyncCtx11 + 8 | 0; //@line 21422
   HEAP32[$191 >> 2] = $6; //@line 21423
   $192 = $ReallocAsyncCtx11 + 12 | 0; //@line 21424
   HEAP32[$192 >> 2] = $$03071$reg2mem$0; //@line 21425
   $193 = $ReallocAsyncCtx11 + 16 | 0; //@line 21426
   HEAP32[$193 >> 2] = $10; //@line 21427
   $194 = $ReallocAsyncCtx11 + 20 | 0; //@line 21428
   HEAP32[$194 >> 2] = $4; //@line 21429
   $195 = $ReallocAsyncCtx11 + 24 | 0; //@line 21430
   HEAP32[$195 >> 2] = $$02972$reg2mem$0; //@line 21431
   $196 = $ReallocAsyncCtx11 + 28 | 0; //@line 21432
   HEAP32[$196 >> 2] = $14; //@line 21433
   $197 = $ReallocAsyncCtx11 + 32 | 0; //@line 21434
   HEAP32[$197 >> 2] = $16; //@line 21435
   $198 = $ReallocAsyncCtx11 + 36 | 0; //@line 21436
   HEAP32[$198 >> 2] = $18; //@line 21437
   $199 = $ReallocAsyncCtx11 + 40 | 0; //@line 21438
   HEAP32[$199 >> 2] = $20; //@line 21439
   $200 = $ReallocAsyncCtx11 + 44 | 0; //@line 21440
   HEAP32[$200 >> 2] = $22; //@line 21441
   $201 = $ReallocAsyncCtx11 + 48 | 0; //@line 21442
   HEAP32[$201 >> 2] = $24; //@line 21443
   $202 = $ReallocAsyncCtx11 + 52 | 0; //@line 21444
   HEAP32[$202 >> 2] = $26; //@line 21445
   $203 = $ReallocAsyncCtx11 + 56 | 0; //@line 21446
   HEAP32[$203 >> 2] = $28; //@line 21447
   $204 = $ReallocAsyncCtx11 + 60 | 0; //@line 21448
   HEAP32[$204 >> 2] = $30; //@line 21449
   $205 = $ReallocAsyncCtx11 + 64 | 0; //@line 21450
   HEAP32[$205 >> 2] = $32; //@line 21451
   $206 = $ReallocAsyncCtx11 + 68 | 0; //@line 21452
   HEAP32[$206 >> 2] = $34; //@line 21453
   $207 = $ReallocAsyncCtx11 + 72 | 0; //@line 21454
   HEAP32[$207 >> 2] = $36; //@line 21455
   $208 = $ReallocAsyncCtx11 + 76 | 0; //@line 21456
   HEAP32[$208 >> 2] = $38; //@line 21457
   $209 = $ReallocAsyncCtx11 + 80 | 0; //@line 21458
   HEAP32[$209 >> 2] = $40; //@line 21459
   $210 = $ReallocAsyncCtx11 + 84 | 0; //@line 21460
   HEAP32[$210 >> 2] = $42; //@line 21461
   $211 = $ReallocAsyncCtx11 + 88 | 0; //@line 21462
   HEAP32[$211 >> 2] = $44; //@line 21463
   $212 = $ReallocAsyncCtx11 + 92 | 0; //@line 21464
   HEAP32[$212 >> 2] = $46; //@line 21465
   $213 = $ReallocAsyncCtx11 + 96 | 0; //@line 21466
   HEAP32[$213 >> 2] = $48; //@line 21467
   $214 = $ReallocAsyncCtx11 + 100 | 0; //@line 21468
   HEAP32[$214 >> 2] = $50; //@line 21469
   sp = STACKTOP; //@line 21470
   return;
  } else {
   $162 = HEAP32[$158 + 4 >> 2] | 0; //@line 21475
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 21476
   FUNCTION_TABLE_vii[$162 & 7]($32, $151 + 32 | 0); //@line 21477
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 21480
    $163 = $ReallocAsyncCtx4 + 4 | 0; //@line 21481
    HEAP32[$163 >> 2] = $$reg2mem$0; //@line 21482
    $164 = $ReallocAsyncCtx4 + 8 | 0; //@line 21483
    HEAP32[$164 >> 2] = $6; //@line 21484
    $165 = $ReallocAsyncCtx4 + 12 | 0; //@line 21485
    HEAP32[$165 >> 2] = $$03071$reg2mem$0; //@line 21486
    $166 = $ReallocAsyncCtx4 + 16 | 0; //@line 21487
    HEAP32[$166 >> 2] = $10; //@line 21488
    $167 = $ReallocAsyncCtx4 + 20 | 0; //@line 21489
    HEAP32[$167 >> 2] = $4; //@line 21490
    $168 = $ReallocAsyncCtx4 + 24 | 0; //@line 21491
    HEAP32[$168 >> 2] = $$02972$reg2mem$0; //@line 21492
    $169 = $ReallocAsyncCtx4 + 28 | 0; //@line 21493
    HEAP32[$169 >> 2] = $14; //@line 21494
    $170 = $ReallocAsyncCtx4 + 32 | 0; //@line 21495
    HEAP32[$170 >> 2] = $16; //@line 21496
    $171 = $ReallocAsyncCtx4 + 36 | 0; //@line 21497
    HEAP32[$171 >> 2] = $18; //@line 21498
    $172 = $ReallocAsyncCtx4 + 40 | 0; //@line 21499
    HEAP32[$172 >> 2] = $20; //@line 21500
    $173 = $ReallocAsyncCtx4 + 44 | 0; //@line 21501
    HEAP32[$173 >> 2] = $22; //@line 21502
    $174 = $ReallocAsyncCtx4 + 48 | 0; //@line 21503
    HEAP32[$174 >> 2] = $24; //@line 21504
    $175 = $ReallocAsyncCtx4 + 52 | 0; //@line 21505
    HEAP32[$175 >> 2] = $26; //@line 21506
    $176 = $ReallocAsyncCtx4 + 56 | 0; //@line 21507
    HEAP32[$176 >> 2] = $28; //@line 21508
    $177 = $ReallocAsyncCtx4 + 60 | 0; //@line 21509
    HEAP32[$177 >> 2] = $30; //@line 21510
    $178 = $ReallocAsyncCtx4 + 64 | 0; //@line 21511
    HEAP32[$178 >> 2] = $32; //@line 21512
    $179 = $ReallocAsyncCtx4 + 68 | 0; //@line 21513
    HEAP32[$179 >> 2] = $34; //@line 21514
    $180 = $ReallocAsyncCtx4 + 72 | 0; //@line 21515
    HEAP32[$180 >> 2] = $36; //@line 21516
    $181 = $ReallocAsyncCtx4 + 76 | 0; //@line 21517
    HEAP32[$181 >> 2] = $38; //@line 21518
    $182 = $ReallocAsyncCtx4 + 80 | 0; //@line 21519
    HEAP32[$182 >> 2] = $40; //@line 21520
    $183 = $ReallocAsyncCtx4 + 84 | 0; //@line 21521
    HEAP32[$183 >> 2] = $42; //@line 21522
    $184 = $ReallocAsyncCtx4 + 88 | 0; //@line 21523
    HEAP32[$184 >> 2] = $44; //@line 21524
    $185 = $ReallocAsyncCtx4 + 92 | 0; //@line 21525
    HEAP32[$185 >> 2] = $46; //@line 21526
    $186 = $ReallocAsyncCtx4 + 96 | 0; //@line 21527
    HEAP32[$186 >> 2] = $48; //@line 21528
    $187 = $ReallocAsyncCtx4 + 100 | 0; //@line 21529
    HEAP32[$187 >> 2] = $50; //@line 21530
    $188 = $ReallocAsyncCtx4 + 104 | 0; //@line 21531
    HEAP32[$188 >> 2] = $157; //@line 21532
    sp = STACKTOP; //@line 21533
    return;
   }
   ___async_unwind = 0; //@line 21536
   HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 21537
   $163 = $ReallocAsyncCtx4 + 4 | 0; //@line 21538
   HEAP32[$163 >> 2] = $$reg2mem$0; //@line 21539
   $164 = $ReallocAsyncCtx4 + 8 | 0; //@line 21540
   HEAP32[$164 >> 2] = $6; //@line 21541
   $165 = $ReallocAsyncCtx4 + 12 | 0; //@line 21542
   HEAP32[$165 >> 2] = $$03071$reg2mem$0; //@line 21543
   $166 = $ReallocAsyncCtx4 + 16 | 0; //@line 21544
   HEAP32[$166 >> 2] = $10; //@line 21545
   $167 = $ReallocAsyncCtx4 + 20 | 0; //@line 21546
   HEAP32[$167 >> 2] = $4; //@line 21547
   $168 = $ReallocAsyncCtx4 + 24 | 0; //@line 21548
   HEAP32[$168 >> 2] = $$02972$reg2mem$0; //@line 21549
   $169 = $ReallocAsyncCtx4 + 28 | 0; //@line 21550
   HEAP32[$169 >> 2] = $14; //@line 21551
   $170 = $ReallocAsyncCtx4 + 32 | 0; //@line 21552
   HEAP32[$170 >> 2] = $16; //@line 21553
   $171 = $ReallocAsyncCtx4 + 36 | 0; //@line 21554
   HEAP32[$171 >> 2] = $18; //@line 21555
   $172 = $ReallocAsyncCtx4 + 40 | 0; //@line 21556
   HEAP32[$172 >> 2] = $20; //@line 21557
   $173 = $ReallocAsyncCtx4 + 44 | 0; //@line 21558
   HEAP32[$173 >> 2] = $22; //@line 21559
   $174 = $ReallocAsyncCtx4 + 48 | 0; //@line 21560
   HEAP32[$174 >> 2] = $24; //@line 21561
   $175 = $ReallocAsyncCtx4 + 52 | 0; //@line 21562
   HEAP32[$175 >> 2] = $26; //@line 21563
   $176 = $ReallocAsyncCtx4 + 56 | 0; //@line 21564
   HEAP32[$176 >> 2] = $28; //@line 21565
   $177 = $ReallocAsyncCtx4 + 60 | 0; //@line 21566
   HEAP32[$177 >> 2] = $30; //@line 21567
   $178 = $ReallocAsyncCtx4 + 64 | 0; //@line 21568
   HEAP32[$178 >> 2] = $32; //@line 21569
   $179 = $ReallocAsyncCtx4 + 68 | 0; //@line 21570
   HEAP32[$179 >> 2] = $34; //@line 21571
   $180 = $ReallocAsyncCtx4 + 72 | 0; //@line 21572
   HEAP32[$180 >> 2] = $36; //@line 21573
   $181 = $ReallocAsyncCtx4 + 76 | 0; //@line 21574
   HEAP32[$181 >> 2] = $38; //@line 21575
   $182 = $ReallocAsyncCtx4 + 80 | 0; //@line 21576
   HEAP32[$182 >> 2] = $40; //@line 21577
   $183 = $ReallocAsyncCtx4 + 84 | 0; //@line 21578
   HEAP32[$183 >> 2] = $42; //@line 21579
   $184 = $ReallocAsyncCtx4 + 88 | 0; //@line 21580
   HEAP32[$184 >> 2] = $44; //@line 21581
   $185 = $ReallocAsyncCtx4 + 92 | 0; //@line 21582
   HEAP32[$185 >> 2] = $46; //@line 21583
   $186 = $ReallocAsyncCtx4 + 96 | 0; //@line 21584
   HEAP32[$186 >> 2] = $48; //@line 21585
   $187 = $ReallocAsyncCtx4 + 100 | 0; //@line 21586
   HEAP32[$187 >> 2] = $50; //@line 21587
   $188 = $ReallocAsyncCtx4 + 104 | 0; //@line 21588
   HEAP32[$188 >> 2] = $157; //@line 21589
   sp = STACKTOP; //@line 21590
   return;
  }
 }
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_103($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $219 = 0, $22 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 22435
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22437
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22439
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22441
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22443
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22445
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22447
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22449
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22451
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22453
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22455
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22457
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22459
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22461
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22463
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22465
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22467
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22469
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22471
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22473
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 22475
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 22477
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 22479
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 22481
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 22483
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 22485
 $186 = HEAP32[$48 >> 2] | 0; //@line 22486
 if (!$186) {
  $$02972$reg2mem$0 = $12; //@line 22489
  $$03071$reg2mem$0 = $6; //@line 22489
  $$reg2mem$0 = $2; //@line 22489
 } else {
  $189 = HEAP32[$186 + 8 >> 2] | 0; //@line 22492
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 22493
  FUNCTION_TABLE_vi[$189 & 511]($32); //@line 22494
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 199; //@line 22497
   $190 = $ReallocAsyncCtx6 + 4 | 0; //@line 22498
   HEAP32[$190 >> 2] = $2; //@line 22499
   $191 = $ReallocAsyncCtx6 + 8 | 0; //@line 22500
   HEAP32[$191 >> 2] = $4; //@line 22501
   $192 = $ReallocAsyncCtx6 + 12 | 0; //@line 22502
   HEAP32[$192 >> 2] = $6; //@line 22503
   $193 = $ReallocAsyncCtx6 + 16 | 0; //@line 22504
   HEAP32[$193 >> 2] = $8; //@line 22505
   $194 = $ReallocAsyncCtx6 + 20 | 0; //@line 22506
   HEAP32[$194 >> 2] = $10; //@line 22507
   $195 = $ReallocAsyncCtx6 + 24 | 0; //@line 22508
   HEAP32[$195 >> 2] = $14; //@line 22509
   $196 = $ReallocAsyncCtx6 + 28 | 0; //@line 22510
   HEAP32[$196 >> 2] = $16; //@line 22511
   $197 = $ReallocAsyncCtx6 + 32 | 0; //@line 22512
   HEAP32[$197 >> 2] = $18; //@line 22513
   $198 = $ReallocAsyncCtx6 + 36 | 0; //@line 22514
   HEAP32[$198 >> 2] = $20; //@line 22515
   $199 = $ReallocAsyncCtx6 + 40 | 0; //@line 22516
   HEAP32[$199 >> 2] = $22; //@line 22517
   $200 = $ReallocAsyncCtx6 + 44 | 0; //@line 22518
   HEAP32[$200 >> 2] = $24; //@line 22519
   $201 = $ReallocAsyncCtx6 + 48 | 0; //@line 22520
   HEAP32[$201 >> 2] = $26; //@line 22521
   $202 = $ReallocAsyncCtx6 + 52 | 0; //@line 22522
   HEAP32[$202 >> 2] = $28; //@line 22523
   $203 = $ReallocAsyncCtx6 + 56 | 0; //@line 22524
   HEAP32[$203 >> 2] = $30; //@line 22525
   $204 = $ReallocAsyncCtx6 + 60 | 0; //@line 22526
   HEAP32[$204 >> 2] = $32; //@line 22527
   $205 = $ReallocAsyncCtx6 + 64 | 0; //@line 22528
   HEAP32[$205 >> 2] = $34; //@line 22529
   $206 = $ReallocAsyncCtx6 + 68 | 0; //@line 22530
   HEAP32[$206 >> 2] = $36; //@line 22531
   $207 = $ReallocAsyncCtx6 + 72 | 0; //@line 22532
   HEAP32[$207 >> 2] = $38; //@line 22533
   $208 = $ReallocAsyncCtx6 + 76 | 0; //@line 22534
   HEAP32[$208 >> 2] = $40; //@line 22535
   $209 = $ReallocAsyncCtx6 + 80 | 0; //@line 22536
   HEAP32[$209 >> 2] = $42; //@line 22537
   $210 = $ReallocAsyncCtx6 + 84 | 0; //@line 22538
   HEAP32[$210 >> 2] = $44; //@line 22539
   $211 = $ReallocAsyncCtx6 + 88 | 0; //@line 22540
   HEAP32[$211 >> 2] = $46; //@line 22541
   $212 = $ReallocAsyncCtx6 + 92 | 0; //@line 22542
   HEAP32[$212 >> 2] = $48; //@line 22543
   $213 = $ReallocAsyncCtx6 + 96 | 0; //@line 22544
   HEAP32[$213 >> 2] = $50; //@line 22545
   $214 = $ReallocAsyncCtx6 + 100 | 0; //@line 22546
   HEAP32[$214 >> 2] = $12; //@line 22547
   sp = STACKTOP; //@line 22548
   return;
  }
  ___async_unwind = 0; //@line 22551
  HEAP32[$ReallocAsyncCtx6 >> 2] = 199; //@line 22552
  $190 = $ReallocAsyncCtx6 + 4 | 0; //@line 22553
  HEAP32[$190 >> 2] = $2; //@line 22554
  $191 = $ReallocAsyncCtx6 + 8 | 0; //@line 22555
  HEAP32[$191 >> 2] = $4; //@line 22556
  $192 = $ReallocAsyncCtx6 + 12 | 0; //@line 22557
  HEAP32[$192 >> 2] = $6; //@line 22558
  $193 = $ReallocAsyncCtx6 + 16 | 0; //@line 22559
  HEAP32[$193 >> 2] = $8; //@line 22560
  $194 = $ReallocAsyncCtx6 + 20 | 0; //@line 22561
  HEAP32[$194 >> 2] = $10; //@line 22562
  $195 = $ReallocAsyncCtx6 + 24 | 0; //@line 22563
  HEAP32[$195 >> 2] = $14; //@line 22564
  $196 = $ReallocAsyncCtx6 + 28 | 0; //@line 22565
  HEAP32[$196 >> 2] = $16; //@line 22566
  $197 = $ReallocAsyncCtx6 + 32 | 0; //@line 22567
  HEAP32[$197 >> 2] = $18; //@line 22568
  $198 = $ReallocAsyncCtx6 + 36 | 0; //@line 22569
  HEAP32[$198 >> 2] = $20; //@line 22570
  $199 = $ReallocAsyncCtx6 + 40 | 0; //@line 22571
  HEAP32[$199 >> 2] = $22; //@line 22572
  $200 = $ReallocAsyncCtx6 + 44 | 0; //@line 22573
  HEAP32[$200 >> 2] = $24; //@line 22574
  $201 = $ReallocAsyncCtx6 + 48 | 0; //@line 22575
  HEAP32[$201 >> 2] = $26; //@line 22576
  $202 = $ReallocAsyncCtx6 + 52 | 0; //@line 22577
  HEAP32[$202 >> 2] = $28; //@line 22578
  $203 = $ReallocAsyncCtx6 + 56 | 0; //@line 22579
  HEAP32[$203 >> 2] = $30; //@line 22580
  $204 = $ReallocAsyncCtx6 + 60 | 0; //@line 22581
  HEAP32[$204 >> 2] = $32; //@line 22582
  $205 = $ReallocAsyncCtx6 + 64 | 0; //@line 22583
  HEAP32[$205 >> 2] = $34; //@line 22584
  $206 = $ReallocAsyncCtx6 + 68 | 0; //@line 22585
  HEAP32[$206 >> 2] = $36; //@line 22586
  $207 = $ReallocAsyncCtx6 + 72 | 0; //@line 22587
  HEAP32[$207 >> 2] = $38; //@line 22588
  $208 = $ReallocAsyncCtx6 + 76 | 0; //@line 22589
  HEAP32[$208 >> 2] = $40; //@line 22590
  $209 = $ReallocAsyncCtx6 + 80 | 0; //@line 22591
  HEAP32[$209 >> 2] = $42; //@line 22592
  $210 = $ReallocAsyncCtx6 + 84 | 0; //@line 22593
  HEAP32[$210 >> 2] = $44; //@line 22594
  $211 = $ReallocAsyncCtx6 + 88 | 0; //@line 22595
  HEAP32[$211 >> 2] = $46; //@line 22596
  $212 = $ReallocAsyncCtx6 + 92 | 0; //@line 22597
  HEAP32[$212 >> 2] = $48; //@line 22598
  $213 = $ReallocAsyncCtx6 + 96 | 0; //@line 22599
  HEAP32[$213 >> 2] = $50; //@line 22600
  $214 = $ReallocAsyncCtx6 + 100 | 0; //@line 22601
  HEAP32[$214 >> 2] = $12; //@line 22602
  sp = STACKTOP; //@line 22603
  return;
 }
 L9 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 22610
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 22610
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 22612
   $$131 = $$03071$reg2mem$0; //@line 22612
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 22615
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 22618
    break L9;
   }
   $52 = 10072 + ($$02972$reg2mem$1 << 2) | 0; //@line 22621
   $54 = HEAP32[$52 >> 2] | 0; //@line 22622
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 22630
  $57 = HEAP32[$56 >> 2] | 0; //@line 22631
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 22635
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 22641
    break;
   }
  }
  $122 = HEAP32[$52 >> 2] | 0; //@line 22645
  $123 = $122 + 76 | 0; //@line 22646
  $124 = HEAP32[$123 >> 2] | 0; //@line 22647
  if (!$124) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 22650
   $$03071$reg2mem$0 = $$131; //@line 22650
   $$reg2mem$0 = $52; //@line 22650
   continue;
  }
  if ($124 >>> 0 <= 100) {
   label = 17; //@line 22655
   break;
  }
  HEAP32[$123 >> 2] = $124 + -100; //@line 22659
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 22660
  $$03071$reg2mem$0 = $$131; //@line 22660
  $$reg2mem$0 = $52; //@line 22660
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $218 = $$131 + 44 | 0; //@line 22667
  $219 = HEAP32[$218 >> 2] | 0; //@line 22668
  if (!$219) {
   $227 = $28 + 12 | 0; //@line 22671
   HEAP32[$227 >> 2] = 0; //@line 22672
   $229 = $30 + 4 | 0; //@line 22674
   HEAP32[$229 >> 2] = 0; //@line 22676
   HEAP32[$229 + 4 >> 2] = 0; //@line 22679
   HEAP32[$30 >> 2] = 3; //@line 22680
   $233 = $30 + 12 | 0; //@line 22681
   HEAP32[$233 >> 2] = 712; //@line 22682
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 22683
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($28, 100, $30) | 0; //@line 22684
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 22687
    $234 = $ReallocAsyncCtx10 + 4 | 0; //@line 22688
    HEAP32[$234 >> 2] = $233; //@line 22689
    $235 = $ReallocAsyncCtx10 + 8 | 0; //@line 22690
    HEAP32[$235 >> 2] = $227; //@line 22691
    $236 = $ReallocAsyncCtx10 + 12 | 0; //@line 22692
    HEAP32[$236 >> 2] = $30; //@line 22693
    $237 = $ReallocAsyncCtx10 + 16 | 0; //@line 22694
    HEAP32[$237 >> 2] = $28; //@line 22695
    sp = STACKTOP; //@line 22696
    return;
   }
   ___async_unwind = 0; //@line 22699
   HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 22700
   $234 = $ReallocAsyncCtx10 + 4 | 0; //@line 22701
   HEAP32[$234 >> 2] = $233; //@line 22702
   $235 = $ReallocAsyncCtx10 + 8 | 0; //@line 22703
   HEAP32[$235 >> 2] = $227; //@line 22704
   $236 = $ReallocAsyncCtx10 + 12 | 0; //@line 22705
   HEAP32[$236 >> 2] = $30; //@line 22706
   $237 = $ReallocAsyncCtx10 + 16 | 0; //@line 22707
   HEAP32[$237 >> 2] = $28; //@line 22708
   sp = STACKTOP; //@line 22709
   return;
  } else {
   $223 = HEAP32[$219 + 4 >> 2] | 0; //@line 22714
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 22715
   FUNCTION_TABLE_vii[$223 & 7]($28, $$131 + 32 | 0); //@line 22716
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 22719
    $224 = $ReallocAsyncCtx7 + 4 | 0; //@line 22720
    HEAP32[$224 >> 2] = $218; //@line 22721
    $225 = $ReallocAsyncCtx7 + 8 | 0; //@line 22722
    HEAP32[$225 >> 2] = $28; //@line 22723
    $226 = $ReallocAsyncCtx7 + 12 | 0; //@line 22724
    HEAP32[$226 >> 2] = $30; //@line 22725
    sp = STACKTOP; //@line 22726
    return;
   }
   ___async_unwind = 0; //@line 22729
   HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 22730
   $224 = $ReallocAsyncCtx7 + 4 | 0; //@line 22731
   HEAP32[$224 >> 2] = $218; //@line 22732
   $225 = $ReallocAsyncCtx7 + 8 | 0; //@line 22733
   HEAP32[$225 >> 2] = $28; //@line 22734
   $226 = $ReallocAsyncCtx7 + 12 | 0; //@line 22735
   HEAP32[$226 >> 2] = $30; //@line 22736
   sp = STACKTOP; //@line 22737
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 22743
  $64 = $54 + 44 | 0; //@line 22744
  $65 = HEAP32[$64 >> 2] | 0; //@line 22745
  if (!$65) {
   HEAP32[$14 >> 2] = 0; //@line 22748
   $96 = HEAP32[$54 >> 2] | 0; //@line 22749
   HEAP32[$16 >> 2] = 0; //@line 22750
   HEAP32[$18 >> 2] = 191; //@line 22751
   HEAP32[$20 >> 2] = $96; //@line 22752
   HEAP32[$22 >> 2] = 724; //@line 22753
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 22754
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 22755
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 22758
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 22759
    HEAP32[$97 >> 2] = $4; //@line 22760
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 22761
    HEAP32[$98 >> 2] = $52; //@line 22762
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 22763
    HEAP32[$99 >> 2] = $10; //@line 22764
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 22765
    HEAP32[$100 >> 2] = $$131; //@line 22766
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 22767
    HEAP32[$101 >> 2] = $8; //@line 22768
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 22769
    HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 22770
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 22771
    HEAP32[$103 >> 2] = $14; //@line 22772
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 22773
    HEAP32[$104 >> 2] = $16; //@line 22774
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 22775
    HEAP32[$105 >> 2] = $18; //@line 22776
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 22777
    HEAP32[$106 >> 2] = $20; //@line 22778
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 22779
    HEAP32[$107 >> 2] = $22; //@line 22780
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 22781
    HEAP32[$108 >> 2] = $24; //@line 22782
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 22783
    HEAP32[$109 >> 2] = $26; //@line 22784
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 22785
    HEAP32[$110 >> 2] = $28; //@line 22786
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 22787
    HEAP32[$111 >> 2] = $30; //@line 22788
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 22789
    HEAP32[$112 >> 2] = $32; //@line 22790
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 22791
    HEAP32[$113 >> 2] = $34; //@line 22792
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 22793
    HEAP32[$114 >> 2] = $36; //@line 22794
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 22795
    HEAP32[$115 >> 2] = $38; //@line 22796
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 22797
    HEAP32[$116 >> 2] = $40; //@line 22798
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 22799
    HEAP32[$117 >> 2] = $42; //@line 22800
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 22801
    HEAP32[$118 >> 2] = $44; //@line 22802
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 22803
    HEAP32[$119 >> 2] = $46; //@line 22804
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 22805
    HEAP32[$120 >> 2] = $48; //@line 22806
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 22807
    HEAP32[$121 >> 2] = $50; //@line 22808
    sp = STACKTOP; //@line 22809
    return;
   }
   ___async_unwind = 0; //@line 22812
   HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 22813
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 22814
   HEAP32[$97 >> 2] = $4; //@line 22815
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 22816
   HEAP32[$98 >> 2] = $52; //@line 22817
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 22818
   HEAP32[$99 >> 2] = $10; //@line 22819
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 22820
   HEAP32[$100 >> 2] = $$131; //@line 22821
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 22822
   HEAP32[$101 >> 2] = $8; //@line 22823
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 22824
   HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 22825
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 22826
   HEAP32[$103 >> 2] = $14; //@line 22827
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 22828
   HEAP32[$104 >> 2] = $16; //@line 22829
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 22830
   HEAP32[$105 >> 2] = $18; //@line 22831
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 22832
   HEAP32[$106 >> 2] = $20; //@line 22833
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 22834
   HEAP32[$107 >> 2] = $22; //@line 22835
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 22836
   HEAP32[$108 >> 2] = $24; //@line 22837
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 22838
   HEAP32[$109 >> 2] = $26; //@line 22839
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 22840
   HEAP32[$110 >> 2] = $28; //@line 22841
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 22842
   HEAP32[$111 >> 2] = $30; //@line 22843
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 22844
   HEAP32[$112 >> 2] = $32; //@line 22845
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 22846
   HEAP32[$113 >> 2] = $34; //@line 22847
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 22848
   HEAP32[$114 >> 2] = $36; //@line 22849
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 22850
   HEAP32[$115 >> 2] = $38; //@line 22851
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 22852
   HEAP32[$116 >> 2] = $40; //@line 22853
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 22854
   HEAP32[$117 >> 2] = $42; //@line 22855
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 22856
   HEAP32[$118 >> 2] = $44; //@line 22857
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 22858
   HEAP32[$119 >> 2] = $46; //@line 22859
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 22860
   HEAP32[$120 >> 2] = $48; //@line 22861
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 22862
   HEAP32[$121 >> 2] = $50; //@line 22863
   sp = STACKTOP; //@line 22864
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 22869
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 22870
   FUNCTION_TABLE_vii[$69 & 7]($8, $54 + 32 | 0); //@line 22871
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 22874
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 22875
    HEAP32[$70 >> 2] = $4; //@line 22876
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 22877
    HEAP32[$71 >> 2] = $52; //@line 22878
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 22879
    HEAP32[$72 >> 2] = $10; //@line 22880
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 22881
    HEAP32[$73 >> 2] = $$131; //@line 22882
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 22883
    HEAP32[$74 >> 2] = $8; //@line 22884
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 22885
    HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 22886
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 22887
    HEAP32[$76 >> 2] = $14; //@line 22888
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 22889
    HEAP32[$77 >> 2] = $16; //@line 22890
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 22891
    HEAP32[$78 >> 2] = $18; //@line 22892
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 22893
    HEAP32[$79 >> 2] = $20; //@line 22894
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 22895
    HEAP32[$80 >> 2] = $22; //@line 22896
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 22897
    HEAP32[$81 >> 2] = $24; //@line 22898
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 22899
    HEAP32[$82 >> 2] = $26; //@line 22900
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 22901
    HEAP32[$83 >> 2] = $28; //@line 22902
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 22903
    HEAP32[$84 >> 2] = $30; //@line 22904
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 22905
    HEAP32[$85 >> 2] = $64; //@line 22906
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 22907
    HEAP32[$86 >> 2] = $32; //@line 22908
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 22909
    HEAP32[$87 >> 2] = $34; //@line 22910
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 22911
    HEAP32[$88 >> 2] = $36; //@line 22912
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 22913
    HEAP32[$89 >> 2] = $38; //@line 22914
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 22915
    HEAP32[$90 >> 2] = $40; //@line 22916
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 22917
    HEAP32[$91 >> 2] = $42; //@line 22918
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 22919
    HEAP32[$92 >> 2] = $44; //@line 22920
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 22921
    HEAP32[$93 >> 2] = $46; //@line 22922
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 22923
    HEAP32[$94 >> 2] = $48; //@line 22924
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 22925
    HEAP32[$95 >> 2] = $50; //@line 22926
    sp = STACKTOP; //@line 22927
    return;
   }
   ___async_unwind = 0; //@line 22930
   HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 22931
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 22932
   HEAP32[$70 >> 2] = $4; //@line 22933
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 22934
   HEAP32[$71 >> 2] = $52; //@line 22935
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 22936
   HEAP32[$72 >> 2] = $10; //@line 22937
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 22938
   HEAP32[$73 >> 2] = $$131; //@line 22939
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 22940
   HEAP32[$74 >> 2] = $8; //@line 22941
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 22942
   HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 22943
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 22944
   HEAP32[$76 >> 2] = $14; //@line 22945
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 22946
   HEAP32[$77 >> 2] = $16; //@line 22947
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 22948
   HEAP32[$78 >> 2] = $18; //@line 22949
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 22950
   HEAP32[$79 >> 2] = $20; //@line 22951
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 22952
   HEAP32[$80 >> 2] = $22; //@line 22953
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 22954
   HEAP32[$81 >> 2] = $24; //@line 22955
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 22956
   HEAP32[$82 >> 2] = $26; //@line 22957
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 22958
   HEAP32[$83 >> 2] = $28; //@line 22959
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 22960
   HEAP32[$84 >> 2] = $30; //@line 22961
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 22962
   HEAP32[$85 >> 2] = $64; //@line 22963
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 22964
   HEAP32[$86 >> 2] = $32; //@line 22965
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 22966
   HEAP32[$87 >> 2] = $34; //@line 22967
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 22968
   HEAP32[$88 >> 2] = $36; //@line 22969
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 22970
   HEAP32[$89 >> 2] = $38; //@line 22971
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 22972
   HEAP32[$90 >> 2] = $40; //@line 22973
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 22974
   HEAP32[$91 >> 2] = $42; //@line 22975
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 22976
   HEAP32[$92 >> 2] = $44; //@line 22977
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 22978
   HEAP32[$93 >> 2] = $46; //@line 22979
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 22980
   HEAP32[$94 >> 2] = $48; //@line 22981
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 22982
   HEAP32[$95 >> 2] = $50; //@line 22983
   sp = STACKTOP; //@line 22984
   return;
  }
 } else if ((label | 0) == 17) {
  HEAP32[$123 >> 2] = 0; //@line 22989
  $128 = $122 + 44 | 0; //@line 22990
  $129 = HEAP32[$128 >> 2] | 0; //@line 22991
  if (!$129) {
   HEAP32[$34 >> 2] = 0; //@line 22994
   $160 = HEAP32[$122 >> 2] | 0; //@line 22995
   HEAP32[$36 >> 2] = 0; //@line 22996
   HEAP32[$38 >> 2] = 196; //@line 22997
   HEAP32[$40 >> 2] = $160; //@line 22998
   HEAP32[$42 >> 2] = 724; //@line 22999
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 23000
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 23001
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 23004
    $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 23005
    HEAP32[$161 >> 2] = $52; //@line 23006
    $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 23007
    HEAP32[$162 >> 2] = $4; //@line 23008
    $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 23009
    HEAP32[$163 >> 2] = $$131; //@line 23010
    $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 23011
    HEAP32[$164 >> 2] = $8; //@line 23012
    $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 23013
    HEAP32[$165 >> 2] = $10; //@line 23014
    $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 23015
    HEAP32[$166 >> 2] = $$02972$reg2mem$1; //@line 23016
    $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 23017
    HEAP32[$167 >> 2] = $14; //@line 23018
    $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 23019
    HEAP32[$168 >> 2] = $16; //@line 23020
    $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 23021
    HEAP32[$169 >> 2] = $18; //@line 23022
    $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 23023
    HEAP32[$170 >> 2] = $20; //@line 23024
    $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 23025
    HEAP32[$171 >> 2] = $22; //@line 23026
    $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 23027
    HEAP32[$172 >> 2] = $24; //@line 23028
    $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 23029
    HEAP32[$173 >> 2] = $26; //@line 23030
    $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 23031
    HEAP32[$174 >> 2] = $28; //@line 23032
    $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 23033
    HEAP32[$175 >> 2] = $30; //@line 23034
    $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 23035
    HEAP32[$176 >> 2] = $32; //@line 23036
    $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 23037
    HEAP32[$177 >> 2] = $34; //@line 23038
    $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 23039
    HEAP32[$178 >> 2] = $36; //@line 23040
    $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 23041
    HEAP32[$179 >> 2] = $38; //@line 23042
    $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 23043
    HEAP32[$180 >> 2] = $40; //@line 23044
    $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 23045
    HEAP32[$181 >> 2] = $42; //@line 23046
    $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 23047
    HEAP32[$182 >> 2] = $44; //@line 23048
    $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 23049
    HEAP32[$183 >> 2] = $46; //@line 23050
    $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 23051
    HEAP32[$184 >> 2] = $48; //@line 23052
    $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 23053
    HEAP32[$185 >> 2] = $50; //@line 23054
    sp = STACKTOP; //@line 23055
    return;
   }
   ___async_unwind = 0; //@line 23058
   HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 23059
   $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 23060
   HEAP32[$161 >> 2] = $52; //@line 23061
   $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 23062
   HEAP32[$162 >> 2] = $4; //@line 23063
   $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 23064
   HEAP32[$163 >> 2] = $$131; //@line 23065
   $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 23066
   HEAP32[$164 >> 2] = $8; //@line 23067
   $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 23068
   HEAP32[$165 >> 2] = $10; //@line 23069
   $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 23070
   HEAP32[$166 >> 2] = $$02972$reg2mem$1; //@line 23071
   $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 23072
   HEAP32[$167 >> 2] = $14; //@line 23073
   $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 23074
   HEAP32[$168 >> 2] = $16; //@line 23075
   $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 23076
   HEAP32[$169 >> 2] = $18; //@line 23077
   $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 23078
   HEAP32[$170 >> 2] = $20; //@line 23079
   $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 23080
   HEAP32[$171 >> 2] = $22; //@line 23081
   $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 23082
   HEAP32[$172 >> 2] = $24; //@line 23083
   $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 23084
   HEAP32[$173 >> 2] = $26; //@line 23085
   $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 23086
   HEAP32[$174 >> 2] = $28; //@line 23087
   $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 23088
   HEAP32[$175 >> 2] = $30; //@line 23089
   $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 23090
   HEAP32[$176 >> 2] = $32; //@line 23091
   $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 23092
   HEAP32[$177 >> 2] = $34; //@line 23093
   $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 23094
   HEAP32[$178 >> 2] = $36; //@line 23095
   $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 23096
   HEAP32[$179 >> 2] = $38; //@line 23097
   $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 23098
   HEAP32[$180 >> 2] = $40; //@line 23099
   $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 23100
   HEAP32[$181 >> 2] = $42; //@line 23101
   $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 23102
   HEAP32[$182 >> 2] = $44; //@line 23103
   $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 23104
   HEAP32[$183 >> 2] = $46; //@line 23105
   $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 23106
   HEAP32[$184 >> 2] = $48; //@line 23107
   $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 23108
   HEAP32[$185 >> 2] = $50; //@line 23109
   sp = STACKTOP; //@line 23110
   return;
  } else {
   $133 = HEAP32[$129 + 4 >> 2] | 0; //@line 23115
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 23116
   FUNCTION_TABLE_vii[$133 & 7]($32, $122 + 32 | 0); //@line 23117
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 23120
    $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 23121
    HEAP32[$134 >> 2] = $52; //@line 23122
    $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 23123
    HEAP32[$135 >> 2] = $4; //@line 23124
    $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 23125
    HEAP32[$136 >> 2] = $$131; //@line 23126
    $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 23127
    HEAP32[$137 >> 2] = $8; //@line 23128
    $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 23129
    HEAP32[$138 >> 2] = $10; //@line 23130
    $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 23131
    HEAP32[$139 >> 2] = $$02972$reg2mem$1; //@line 23132
    $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 23133
    HEAP32[$140 >> 2] = $14; //@line 23134
    $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 23135
    HEAP32[$141 >> 2] = $16; //@line 23136
    $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 23137
    HEAP32[$142 >> 2] = $18; //@line 23138
    $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 23139
    HEAP32[$143 >> 2] = $20; //@line 23140
    $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 23141
    HEAP32[$144 >> 2] = $22; //@line 23142
    $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 23143
    HEAP32[$145 >> 2] = $24; //@line 23144
    $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 23145
    HEAP32[$146 >> 2] = $26; //@line 23146
    $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 23147
    HEAP32[$147 >> 2] = $28; //@line 23148
    $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 23149
    HEAP32[$148 >> 2] = $30; //@line 23150
    $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 23151
    HEAP32[$149 >> 2] = $32; //@line 23152
    $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 23153
    HEAP32[$150 >> 2] = $34; //@line 23154
    $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 23155
    HEAP32[$151 >> 2] = $36; //@line 23156
    $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 23157
    HEAP32[$152 >> 2] = $38; //@line 23158
    $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 23159
    HEAP32[$153 >> 2] = $40; //@line 23160
    $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 23161
    HEAP32[$154 >> 2] = $42; //@line 23162
    $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 23163
    HEAP32[$155 >> 2] = $44; //@line 23164
    $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 23165
    HEAP32[$156 >> 2] = $46; //@line 23166
    $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 23167
    HEAP32[$157 >> 2] = $48; //@line 23168
    $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 23169
    HEAP32[$158 >> 2] = $50; //@line 23170
    $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 23171
    HEAP32[$159 >> 2] = $128; //@line 23172
    sp = STACKTOP; //@line 23173
    return;
   }
   ___async_unwind = 0; //@line 23176
   HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 23177
   $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 23178
   HEAP32[$134 >> 2] = $52; //@line 23179
   $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 23180
   HEAP32[$135 >> 2] = $4; //@line 23181
   $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 23182
   HEAP32[$136 >> 2] = $$131; //@line 23183
   $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 23184
   HEAP32[$137 >> 2] = $8; //@line 23185
   $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 23186
   HEAP32[$138 >> 2] = $10; //@line 23187
   $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 23188
   HEAP32[$139 >> 2] = $$02972$reg2mem$1; //@line 23189
   $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 23190
   HEAP32[$140 >> 2] = $14; //@line 23191
   $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 23192
   HEAP32[$141 >> 2] = $16; //@line 23193
   $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 23194
   HEAP32[$142 >> 2] = $18; //@line 23195
   $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 23196
   HEAP32[$143 >> 2] = $20; //@line 23197
   $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 23198
   HEAP32[$144 >> 2] = $22; //@line 23199
   $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 23200
   HEAP32[$145 >> 2] = $24; //@line 23201
   $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 23202
   HEAP32[$146 >> 2] = $26; //@line 23203
   $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 23204
   HEAP32[$147 >> 2] = $28; //@line 23205
   $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 23206
   HEAP32[$148 >> 2] = $30; //@line 23207
   $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 23208
   HEAP32[$149 >> 2] = $32; //@line 23209
   $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 23210
   HEAP32[$150 >> 2] = $34; //@line 23211
   $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 23212
   HEAP32[$151 >> 2] = $36; //@line 23213
   $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 23214
   HEAP32[$152 >> 2] = $38; //@line 23215
   $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 23216
   HEAP32[$153 >> 2] = $40; //@line 23217
   $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 23218
   HEAP32[$154 >> 2] = $42; //@line 23219
   $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 23220
   HEAP32[$155 >> 2] = $44; //@line 23221
   $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 23222
   HEAP32[$156 >> 2] = $46; //@line 23223
   $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 23224
   HEAP32[$157 >> 2] = $48; //@line 23225
   $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 23226
   HEAP32[$158 >> 2] = $50; //@line 23227
   $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 23228
   HEAP32[$159 >> 2] = $128; //@line 23229
   sp = STACKTOP; //@line 23230
   return;
  }
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$092129$lcssa = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$391 = 0, $$5 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $119 = 0, $135 = 0, $136 = 0, $139 = 0, $14 = 0, $155 = 0, $159 = 0, $160 = 0, $167 = 0, $168 = 0, $171 = 0, $174 = 0, $181 = 0, $183 = 0, $184 = 0, $187 = 0, $200 = 0, $201 = 0, $203 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $223 = 0, $226 = 0, $240 = 0, $241 = 0, $244 = 0, $256 = 0, $258 = 0, $261 = 0, $266 = 0, $269 = 0, $272 = 0, $275 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $290 = 0, $291 = 0, $30 = 0, $303 = 0, $306 = 0, $317 = 0, $318 = 0, $321 = 0, $330 = 0, $332 = 0, $335 = 0, $340 = 0, $343 = 0, $347 = 0, $349 = 0, $35 = 0, $357 = 0, $360 = 0, $362 = 0, $370 = 0, $373 = 0, $375 = 0, $383 = 0, $386 = 0, $388 = 0, $408 = 0, $409 = 0, $410 = 0, $50 = 0, $54 = 0, $6 = 0, $69 = 0, $7 = 0, $72 = 0, $73 = 0, $76 = 0, $8 = 0, $9 = 0, $92 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx50 = 0, $AsyncCtx54 = 0, $AsyncCtx58 = 0, $AsyncCtx6 = 0, $AsyncCtx62 = 0, $AsyncCtx65 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, sp = 0;
 sp = STACKTOP; //@line 14139
 STACKTOP = STACKTOP + 176 | 0; //@line 14140
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 14140
 $$byval_copy = sp + 148 | 0; //@line 14141
 $6 = sp + 128 | 0; //@line 14142
 $7 = sp + 64 | 0; //@line 14143
 $8 = sp + 48 | 0; //@line 14144
 $9 = sp + 32 | 0; //@line 14145
 $10 = sp + 16 | 0; //@line 14146
 $11 = sp; //@line 14147
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$5 = -3003; //@line 14152
  STACKTOP = sp; //@line 14153
  return $$5 | 0; //@line 14153
 }
 $14 = _strlen($1) | 0; //@line 14155
 if (($14 | 0) > 255 | ($14 | 0) == 0) {
  $$5 = -3003; //@line 14160
  STACKTOP = sp; //@line 14161
  return $$5 | 0; //@line 14161
 }
 do {
  if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $5, $6) | 0)) {
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 14167
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 14167
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 14167
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 14167
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 14167
   __ZN13SocketAddressC2E10nsapi_addrt($7, $$byval_copy, 0); //@line 14168
   $21 = $2 + 12 | 0; //@line 14169
   $22 = HEAP32[$21 >> 2] | 0; //@line 14170
   do {
    if (!$22) {
     $AsyncCtx72 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14174
     _mbed_assert_internal(6023, 6028, 1677); //@line 14175
     if (___async) {
      HEAP32[$AsyncCtx72 >> 2] = 169; //@line 14178
      HEAP32[$AsyncCtx72 + 4 >> 2] = $21; //@line 14180
      HEAP32[$AsyncCtx72 + 8 >> 2] = $2; //@line 14182
      HEAP32[$AsyncCtx72 + 12 >> 2] = $7; //@line 14184
      HEAP32[$AsyncCtx72 + 16 >> 2] = $7; //@line 14186
      HEAP32[$AsyncCtx72 + 20 >> 2] = $6; //@line 14188
      sp = STACKTOP; //@line 14189
      STACKTOP = sp; //@line 14190
      return 0; //@line 14190
     } else {
      _emscripten_free_async_context($AsyncCtx72 | 0); //@line 14192
      $30 = HEAP32[$21 >> 2] | 0; //@line 14194
      break;
     }
    } else {
     $30 = $22; //@line 14198
    }
   } while (0);
   $29 = HEAP32[$30 >> 2] | 0; //@line 14201
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14202
   FUNCTION_TABLE_viii[$29 & 0]($2, 0, $7); //@line 14203
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 170; //@line 14206
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 14208
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 14210
    sp = STACKTOP; //@line 14211
    STACKTOP = sp; //@line 14212
    return 0; //@line 14212
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14214
    $$391 = 0; //@line 14215
    break;
   }
  } else {
   if (!(HEAP32[2518] | 0)) {
    $$092129$lcssa = 0; //@line 14222
   } else {
    if (!(HEAP32[2519] | 0)) {
     $$092129$lcssa = 1; //@line 14227
    } else {
     if (!(HEAP32[2520] | 0)) {
      $$092129$lcssa = 2; //@line 14232
     } else {
      if (!(HEAP32[2521] | 0)) {
       $$092129$lcssa = 3; //@line 14237
      } else {
       if (!(HEAP32[2522] | 0)) {
        $$092129$lcssa = 4; //@line 14242
       } else {
        $$391 = -3007; //@line 14244
        break;
       }
      }
     }
    }
   }
   $AsyncCtx58 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14251
   $35 = __ZnwjRKSt9nothrow_t(88, 12052) | 0; //@line 14252
   if (___async) {
    HEAP32[$AsyncCtx58 >> 2] = 171; //@line 14255
    HEAP32[$AsyncCtx58 + 4 >> 2] = $8; //@line 14257
    HEAP32[$AsyncCtx58 + 8 >> 2] = $9; //@line 14259
    HEAP32[$AsyncCtx58 + 12 >> 2] = $10; //@line 14261
    HEAP32[$AsyncCtx58 + 16 >> 2] = $11; //@line 14263
    HEAP32[$AsyncCtx58 + 20 >> 2] = $6; //@line 14265
    HEAP32[$AsyncCtx58 + 24 >> 2] = $1; //@line 14267
    HEAP32[$AsyncCtx58 + 28 >> 2] = $2; //@line 14269
    HEAP32[$AsyncCtx58 + 32 >> 2] = $0; //@line 14271
    HEAP32[$AsyncCtx58 + 36 >> 2] = $4; //@line 14273
    HEAP32[$AsyncCtx58 + 40 >> 2] = $3; //@line 14275
    HEAP32[$AsyncCtx58 + 44 >> 2] = $5; //@line 14277
    HEAP32[$AsyncCtx58 + 48 >> 2] = $$092129$lcssa; //@line 14279
    HEAP32[$AsyncCtx58 + 52 >> 2] = $14; //@line 14281
    sp = STACKTOP; //@line 14282
    STACKTOP = sp; //@line 14283
    return 0; //@line 14283
   }
   _emscripten_free_async_context($AsyncCtx58 | 0); //@line 14285
   if (!$35) {
    $$391 = -3007; //@line 14288
   } else {
    $50 = $35 + 16 | 0; //@line 14290
    HEAP32[$50 >> 2] = 0; //@line 14291
    HEAP32[$50 + 4 >> 2] = 0; //@line 14291
    HEAP32[$50 + 8 >> 2] = 0; //@line 14291
    HEAP32[$50 + 12 >> 2] = 0; //@line 14291
    HEAP32[$50 + 16 >> 2] = 0; //@line 14291
    HEAP32[$50 + 20 >> 2] = 0; //@line 14291
    HEAP32[$50 + 24 >> 2] = 0; //@line 14291
    HEAP32[$50 + 28 >> 2] = 0; //@line 14291
    $AsyncCtx62 = _emscripten_alloc_async_context(60, sp) | 0; //@line 14295
    $54 = __ZnajRKSt9nothrow_t(($14 | 0) < -1 ? -1 : $14 + 1 | 0, 12052) | 0; //@line 14296
    if (___async) {
     HEAP32[$AsyncCtx62 >> 2] = 172; //@line 14299
     HEAP32[$AsyncCtx62 + 4 >> 2] = $8; //@line 14301
     HEAP32[$AsyncCtx62 + 8 >> 2] = $9; //@line 14303
     HEAP32[$AsyncCtx62 + 12 >> 2] = $35; //@line 14305
     HEAP32[$AsyncCtx62 + 16 >> 2] = $50; //@line 14307
     HEAP32[$AsyncCtx62 + 20 >> 2] = $10; //@line 14309
     HEAP32[$AsyncCtx62 + 24 >> 2] = $11; //@line 14311
     HEAP32[$AsyncCtx62 + 28 >> 2] = $6; //@line 14313
     HEAP32[$AsyncCtx62 + 32 >> 2] = $1; //@line 14315
     HEAP32[$AsyncCtx62 + 36 >> 2] = $2; //@line 14317
     HEAP32[$AsyncCtx62 + 40 >> 2] = $0; //@line 14319
     HEAP32[$AsyncCtx62 + 44 >> 2] = $4; //@line 14321
     HEAP32[$AsyncCtx62 + 48 >> 2] = $3; //@line 14323
     HEAP32[$AsyncCtx62 + 52 >> 2] = $5; //@line 14325
     HEAP32[$AsyncCtx62 + 56 >> 2] = $$092129$lcssa; //@line 14327
     sp = STACKTOP; //@line 14328
     STACKTOP = sp; //@line 14329
     return 0; //@line 14329
    }
    _emscripten_free_async_context($AsyncCtx62 | 0); //@line 14331
    $69 = $35 + 12 | 0; //@line 14332
    HEAP32[$69 >> 2] = $54; //@line 14333
    _strcpy($54, $1) | 0; //@line 14334
    HEAP32[$35 + 4 >> 2] = -3012; //@line 14336
    if (($50 | 0) != ($2 | 0)) {
     $72 = $35 + 28 | 0; //@line 14339
     $73 = HEAP32[$72 >> 2] | 0; //@line 14340
     do {
      if ($73 | 0) {
       $76 = HEAP32[$73 + 8 >> 2] | 0; //@line 14345
       $AsyncCtx2 = _emscripten_alloc_async_context(64, sp) | 0; //@line 14346
       FUNCTION_TABLE_vi[$76 & 511]($50); //@line 14347
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 173; //@line 14350
        HEAP32[$AsyncCtx2 + 4 >> 2] = $69; //@line 14352
        HEAP32[$AsyncCtx2 + 8 >> 2] = $35; //@line 14354
        HEAP32[$AsyncCtx2 + 12 >> 2] = $50; //@line 14356
        HEAP32[$AsyncCtx2 + 16 >> 2] = $10; //@line 14358
        HEAP32[$AsyncCtx2 + 20 >> 2] = $11; //@line 14360
        HEAP32[$AsyncCtx2 + 24 >> 2] = $$092129$lcssa; //@line 14362
        HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 14364
        HEAP32[$AsyncCtx2 + 32 >> 2] = $8; //@line 14366
        HEAP32[$AsyncCtx2 + 36 >> 2] = $9; //@line 14368
        HEAP32[$AsyncCtx2 + 40 >> 2] = $4; //@line 14370
        HEAP32[$AsyncCtx2 + 44 >> 2] = $3; //@line 14372
        HEAP32[$AsyncCtx2 + 48 >> 2] = $5; //@line 14374
        HEAP32[$AsyncCtx2 + 52 >> 2] = $2; //@line 14376
        HEAP32[$AsyncCtx2 + 56 >> 2] = $72; //@line 14378
        HEAP32[$AsyncCtx2 + 60 >> 2] = $6; //@line 14380
        sp = STACKTOP; //@line 14381
        STACKTOP = sp; //@line 14382
        return 0; //@line 14382
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14384
        break;
       }
      }
     } while (0);
     $92 = $2 + 12 | 0; //@line 14389
     $93 = HEAP32[$92 >> 2] | 0; //@line 14390
     do {
      if (!$93) {
       $112 = 0; //@line 14394
      } else {
       $96 = HEAP32[$93 + 4 >> 2] | 0; //@line 14397
       $AsyncCtx6 = _emscripten_alloc_async_context(64, sp) | 0; //@line 14398
       FUNCTION_TABLE_vii[$96 & 7]($50, $2); //@line 14399
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 174; //@line 14402
        HEAP32[$AsyncCtx6 + 4 >> 2] = $8; //@line 14404
        HEAP32[$AsyncCtx6 + 8 >> 2] = $35; //@line 14406
        HEAP32[$AsyncCtx6 + 12 >> 2] = $92; //@line 14408
        HEAP32[$AsyncCtx6 + 16 >> 2] = $69; //@line 14410
        HEAP32[$AsyncCtx6 + 20 >> 2] = $9; //@line 14412
        HEAP32[$AsyncCtx6 + 24 >> 2] = $50; //@line 14414
        HEAP32[$AsyncCtx6 + 28 >> 2] = $0; //@line 14416
        HEAP32[$AsyncCtx6 + 32 >> 2] = $4; //@line 14418
        HEAP32[$AsyncCtx6 + 36 >> 2] = $10; //@line 14420
        HEAP32[$AsyncCtx6 + 40 >> 2] = $11; //@line 14422
        HEAP32[$AsyncCtx6 + 44 >> 2] = $3; //@line 14424
        HEAP32[$AsyncCtx6 + 48 >> 2] = $5; //@line 14426
        HEAP32[$AsyncCtx6 + 52 >> 2] = $72; //@line 14428
        HEAP32[$AsyncCtx6 + 56 >> 2] = $6; //@line 14430
        HEAP32[$AsyncCtx6 + 60 >> 2] = $$092129$lcssa; //@line 14432
        sp = STACKTOP; //@line 14433
        STACKTOP = sp; //@line 14434
        return 0; //@line 14434
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14436
        $112 = HEAP32[$92 >> 2] | 0; //@line 14438
        break;
       }
      }
     } while (0);
     HEAP32[$72 >> 2] = $112; //@line 14443
    }
    $113 = $35 + 32 | 0; //@line 14445
    if (($113 | 0) != ($4 | 0)) {
     $115 = $35 + 44 | 0; //@line 14448
     $116 = HEAP32[$115 >> 2] | 0; //@line 14449
     do {
      if ($116 | 0) {
       $119 = HEAP32[$116 + 8 >> 2] | 0; //@line 14454
       $AsyncCtx10 = _emscripten_alloc_async_context(64, sp) | 0; //@line 14455
       FUNCTION_TABLE_vi[$119 & 511]($113); //@line 14456
       if (___async) {
        HEAP32[$AsyncCtx10 >> 2] = 175; //@line 14459
        HEAP32[$AsyncCtx10 + 4 >> 2] = $8; //@line 14461
        HEAP32[$AsyncCtx10 + 8 >> 2] = $113; //@line 14463
        HEAP32[$AsyncCtx10 + 12 >> 2] = $35; //@line 14465
        HEAP32[$AsyncCtx10 + 16 >> 2] = $69; //@line 14467
        HEAP32[$AsyncCtx10 + 20 >> 2] = $9; //@line 14469
        HEAP32[$AsyncCtx10 + 24 >> 2] = $50; //@line 14471
        HEAP32[$AsyncCtx10 + 28 >> 2] = $0; //@line 14473
        HEAP32[$AsyncCtx10 + 32 >> 2] = $4; //@line 14475
        HEAP32[$AsyncCtx10 + 36 >> 2] = $10; //@line 14477
        HEAP32[$AsyncCtx10 + 40 >> 2] = $11; //@line 14479
        HEAP32[$AsyncCtx10 + 44 >> 2] = $3; //@line 14481
        HEAP32[$AsyncCtx10 + 48 >> 2] = $5; //@line 14483
        HEAP32[$AsyncCtx10 + 52 >> 2] = $115; //@line 14485
        HEAP32[$AsyncCtx10 + 56 >> 2] = $6; //@line 14487
        HEAP32[$AsyncCtx10 + 60 >> 2] = $$092129$lcssa; //@line 14489
        sp = STACKTOP; //@line 14490
        STACKTOP = sp; //@line 14491
        return 0; //@line 14491
       } else {
        _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14493
        break;
       }
      }
     } while (0);
     $135 = $4 + 12 | 0; //@line 14498
     $136 = HEAP32[$135 >> 2] | 0; //@line 14499
     do {
      if (!$136) {
       $155 = 0; //@line 14503
      } else {
       $139 = HEAP32[$136 + 4 >> 2] | 0; //@line 14506
       $AsyncCtx14 = _emscripten_alloc_async_context(64, sp) | 0; //@line 14507
       FUNCTION_TABLE_vii[$139 & 7]($113, $4); //@line 14508
       if (___async) {
        HEAP32[$AsyncCtx14 >> 2] = 176; //@line 14511
        HEAP32[$AsyncCtx14 + 4 >> 2] = $8; //@line 14513
        HEAP32[$AsyncCtx14 + 8 >> 2] = $113; //@line 14515
        HEAP32[$AsyncCtx14 + 12 >> 2] = $35; //@line 14517
        HEAP32[$AsyncCtx14 + 16 >> 2] = $69; //@line 14519
        HEAP32[$AsyncCtx14 + 20 >> 2] = $9; //@line 14521
        HEAP32[$AsyncCtx14 + 24 >> 2] = $50; //@line 14523
        HEAP32[$AsyncCtx14 + 28 >> 2] = $0; //@line 14525
        HEAP32[$AsyncCtx14 + 32 >> 2] = $10; //@line 14527
        HEAP32[$AsyncCtx14 + 36 >> 2] = $11; //@line 14529
        HEAP32[$AsyncCtx14 + 40 >> 2] = $3; //@line 14531
        HEAP32[$AsyncCtx14 + 44 >> 2] = $5; //@line 14533
        HEAP32[$AsyncCtx14 + 48 >> 2] = $115; //@line 14535
        HEAP32[$AsyncCtx14 + 52 >> 2] = $135; //@line 14537
        HEAP32[$AsyncCtx14 + 56 >> 2] = $6; //@line 14539
        HEAP32[$AsyncCtx14 + 60 >> 2] = $$092129$lcssa; //@line 14541
        sp = STACKTOP; //@line 14542
        STACKTOP = sp; //@line 14543
        return 0; //@line 14543
       } else {
        _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14545
        $155 = HEAP32[$135 >> 2] | 0; //@line 14547
        break;
       }
      }
     } while (0);
     HEAP32[$115 >> 2] = $155; //@line 14552
    }
    HEAP32[$35 + 8 >> 2] = $0; //@line 14555
    HEAP32[$35 + 48 >> 2] = $3; //@line 14557
    HEAP32[$35 + 52 >> 2] = $5; //@line 14559
    $159 = $35 + 56 | 0; //@line 14560
    HEAP32[$159 >> 2] = 0; //@line 14561
    $160 = $35 + 60 | 0; //@line 14562
    HEAP32[$160 >> 2] = 0; //@line 14563
    HEAP32[$35 + 64 >> 2] = 0; //@line 14565
    HEAP8[$35 + 82 >> 0] = 0; //@line 14567
    HEAP8[$35 + 83 >> 0] = 1; //@line 14569
    HEAP8[$35 + 84 >> 0] = 3; //@line 14571
    HEAP16[$35 + 80 >> 1] = 0; //@line 14573
    HEAP32[$35 + 76 >> 2] = 0; //@line 14575
    $167 = $35 + 72 | 0; //@line 14576
    HEAP32[$167 >> 2] = 15500; //@line 14577
    $168 = HEAP32[177] | 0; //@line 14578
    HEAP32[177] = $168 + 1; //@line 14580
    $$ = ($168 | 0) > 32767 ? 1 : $168; //@line 14582
    HEAP32[$35 >> 2] = $$; //@line 14583
    $171 = HEAP32[2518] | 0; //@line 14584
    if (!$171) {
     $$1 = 0; //@line 14587
     $347 = 0; //@line 14587
    } else {
     $174 = HEAP32[$171 + 56 >> 2] | 0; //@line 14590
     if (!$174) {
      $$1 = 1; //@line 14593
      $347 = 0; //@line 14593
     } else {
      if ((HEAP32[$171 + 8 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$159 >> 2] = $174; //@line 14599
       HEAP32[$160 >> 2] = HEAP32[$171 + 60 >> 2]; //@line 14602
       $$1 = 1; //@line 14603
       $347 = $174; //@line 14603
      } else {
       $$1 = 1; //@line 14605
       $347 = 0; //@line 14605
      }
     }
    }
    $181 = HEAP32[2519] | 0; //@line 14609
    if (!$181) {
     $$1$1 = $$1; //@line 14612
     $360 = $347; //@line 14612
    } else {
     if (!$347) {
      $349 = HEAP32[$181 + 56 >> 2] | 0; //@line 14617
      if (!$349) {
       $408 = 0; //@line 14620
      } else {
       if ((HEAP32[$181 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$159 >> 2] = $349; //@line 14626
        HEAP32[$160 >> 2] = HEAP32[$181 + 60 >> 2]; //@line 14629
        $408 = $349; //@line 14630
       } else {
        $408 = 0; //@line 14632
       }
      }
     } else {
      $408 = $347; //@line 14636
     }
     $$1$1 = $$1 + 1 | 0; //@line 14639
     $360 = $408; //@line 14639
    }
    $357 = HEAP32[2520] | 0; //@line 14641
    if (!$357) {
     $$1$2 = $$1$1; //@line 14644
     $373 = $360; //@line 14644
    } else {
     if (!$360) {
      $362 = HEAP32[$357 + 56 >> 2] | 0; //@line 14649
      if (!$362) {
       $409 = 0; //@line 14652
      } else {
       if ((HEAP32[$357 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$159 >> 2] = $362; //@line 14658
        HEAP32[$160 >> 2] = HEAP32[$357 + 60 >> 2]; //@line 14661
        $409 = $362; //@line 14662
       } else {
        $409 = 0; //@line 14664
       }
      }
     } else {
      $409 = $360; //@line 14668
     }
     $$1$2 = $$1$1 + 1 | 0; //@line 14671
     $373 = $409; //@line 14671
    }
    $370 = HEAP32[2521] | 0; //@line 14673
    if (!$370) {
     $$1$3 = $$1$2; //@line 14676
     $386 = $373; //@line 14676
    } else {
     if (!$373) {
      $375 = HEAP32[$370 + 56 >> 2] | 0; //@line 14681
      if (!$375) {
       $410 = 0; //@line 14684
      } else {
       if ((HEAP32[$370 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$159 >> 2] = $375; //@line 14690
        HEAP32[$160 >> 2] = HEAP32[$370 + 60 >> 2]; //@line 14693
        $410 = $375; //@line 14694
       } else {
        $410 = 0; //@line 14696
       }
      }
     } else {
      $410 = $373; //@line 14700
     }
     $$1$3 = $$1$2 + 1 | 0; //@line 14703
     $386 = $410; //@line 14703
    }
    $383 = HEAP32[2522] | 0; //@line 14705
    if ($383 | 0) {
     if (!$386) {
      $388 = HEAP32[$383 + 56 >> 2] | 0; //@line 14711
      if ($388 | 0) {
       if ((HEAP32[$383 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$159 >> 2] = $388; //@line 14718
        HEAP32[$160 >> 2] = HEAP32[$383 + 60 >> 2]; //@line 14721
       }
      }
     }
     HEAP32[10072 + ($$092129$lcssa << 2) >> 2] = $35; //@line 14726
     HEAP32[$167 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 14729
     $$391 = $$; //@line 14730
     break;
    }
    HEAP32[10072 + ($$092129$lcssa << 2) >> 2] = $35; //@line 14734
    HEAP32[$167 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 14737
    if (!$$1$3) {
     $183 = $35 + 44 | 0; //@line 14740
     $184 = HEAP32[$183 >> 2] | 0; //@line 14741
     do {
      if (!$184) {
       $201 = 0; //@line 14745
      } else {
       $187 = HEAP32[$184 + 4 >> 2] | 0; //@line 14748
       $AsyncCtx18 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14749
       FUNCTION_TABLE_vii[$187 & 7]($8, $113); //@line 14750
       if (___async) {
        HEAP32[$AsyncCtx18 >> 2] = 177; //@line 14753
        HEAP32[$AsyncCtx18 + 4 >> 2] = $69; //@line 14755
        HEAP32[$AsyncCtx18 + 8 >> 2] = $183; //@line 14757
        HEAP32[$AsyncCtx18 + 12 >> 2] = $8; //@line 14759
        HEAP32[$AsyncCtx18 + 16 >> 2] = $9; //@line 14761
        HEAP32[$AsyncCtx18 + 20 >> 2] = $35; //@line 14763
        HEAP32[$AsyncCtx18 + 24 >> 2] = $35; //@line 14765
        HEAP32[$AsyncCtx18 + 28 >> 2] = $50; //@line 14767
        HEAP32[$AsyncCtx18 + 32 >> 2] = $183; //@line 14769
        HEAP32[$AsyncCtx18 + 36 >> 2] = $10; //@line 14771
        HEAP32[$AsyncCtx18 + 40 >> 2] = $113; //@line 14773
        HEAP32[$AsyncCtx18 + 44 >> 2] = $11; //@line 14775
        HEAP32[$AsyncCtx18 + 48 >> 2] = $6; //@line 14777
        sp = STACKTOP; //@line 14778
        STACKTOP = sp; //@line 14779
        return 0; //@line 14779
       } else {
        _emscripten_free_async_context($AsyncCtx18 | 0); //@line 14781
        $201 = HEAP32[$183 >> 2] | 0; //@line 14783
        break;
       }
      }
     } while (0);
     $200 = $8 + 12 | 0; //@line 14788
     HEAP32[$200 >> 2] = $201; //@line 14789
     $203 = $9 + 4 | 0; //@line 14791
     HEAP32[$203 >> 2] = 0; //@line 14793
     HEAP32[$203 + 4 >> 2] = 0; //@line 14796
     HEAP32[$9 >> 2] = 3; //@line 14797
     $207 = $9 + 12 | 0; //@line 14798
     HEAP32[$207 >> 2] = 712; //@line 14799
     $AsyncCtx68 = _emscripten_alloc_async_context(60, sp) | 0; //@line 14800
     $208 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $9) | 0; //@line 14801
     if (___async) {
      HEAP32[$AsyncCtx68 >> 2] = 178; //@line 14804
      HEAP32[$AsyncCtx68 + 4 >> 2] = $69; //@line 14806
      HEAP32[$AsyncCtx68 + 8 >> 2] = $35; //@line 14808
      HEAP32[$AsyncCtx68 + 12 >> 2] = $35; //@line 14810
      HEAP32[$AsyncCtx68 + 16 >> 2] = $50; //@line 14812
      HEAP32[$AsyncCtx68 + 20 >> 2] = $183; //@line 14814
      HEAP32[$AsyncCtx68 + 24 >> 2] = $113; //@line 14816
      HEAP32[$AsyncCtx68 + 28 >> 2] = $10; //@line 14818
      HEAP32[$AsyncCtx68 + 32 >> 2] = $11; //@line 14820
      HEAP32[$AsyncCtx68 + 36 >> 2] = $183; //@line 14822
      HEAP32[$AsyncCtx68 + 40 >> 2] = $6; //@line 14824
      HEAP32[$AsyncCtx68 + 44 >> 2] = $200; //@line 14826
      HEAP32[$AsyncCtx68 + 48 >> 2] = $9; //@line 14828
      HEAP32[$AsyncCtx68 + 52 >> 2] = $8; //@line 14830
      HEAP32[$AsyncCtx68 + 56 >> 2] = $207; //@line 14832
      sp = STACKTOP; //@line 14833
      STACKTOP = sp; //@line 14834
      return 0; //@line 14834
     }
     _emscripten_free_async_context($AsyncCtx68 | 0); //@line 14836
     $223 = HEAP32[$207 >> 2] | 0; //@line 14837
     do {
      if ($223 | 0) {
       $226 = HEAP32[$223 + 8 >> 2] | 0; //@line 14842
       $AsyncCtx22 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14843
       FUNCTION_TABLE_vi[$226 & 511]($9); //@line 14844
       if (___async) {
        HEAP32[$AsyncCtx22 >> 2] = 179; //@line 14847
        HEAP32[$AsyncCtx22 + 4 >> 2] = $69; //@line 14849
        HEAP32[$AsyncCtx22 + 8 >> 2] = $35; //@line 14851
        HEAP32[$AsyncCtx22 + 12 >> 2] = $208; //@line 14853
        HEAP32[$AsyncCtx22 + 16 >> 2] = $200; //@line 14855
        HEAP32[$AsyncCtx22 + 20 >> 2] = $35; //@line 14857
        HEAP32[$AsyncCtx22 + 24 >> 2] = $50; //@line 14859
        HEAP32[$AsyncCtx22 + 28 >> 2] = $183; //@line 14861
        HEAP32[$AsyncCtx22 + 32 >> 2] = $8; //@line 14863
        HEAP32[$AsyncCtx22 + 36 >> 2] = $10; //@line 14865
        HEAP32[$AsyncCtx22 + 40 >> 2] = $113; //@line 14867
        HEAP32[$AsyncCtx22 + 44 >> 2] = $11; //@line 14869
        HEAP32[$AsyncCtx22 + 48 >> 2] = $183; //@line 14871
        HEAP32[$AsyncCtx22 + 52 >> 2] = $6; //@line 14873
        sp = STACKTOP; //@line 14874
        STACKTOP = sp; //@line 14875
        return 0; //@line 14875
       } else {
        _emscripten_free_async_context($AsyncCtx22 | 0); //@line 14877
        break;
       }
      }
     } while (0);
     $240 = ($208 | 0) == 0; //@line 14882
     $241 = HEAP32[$200 >> 2] | 0; //@line 14883
     do {
      if ($241 | 0) {
       $244 = HEAP32[$241 + 8 >> 2] | 0; //@line 14888
       $AsyncCtx26 = _emscripten_alloc_async_context(48, sp) | 0; //@line 14889
       FUNCTION_TABLE_vi[$244 & 511]($8); //@line 14890
       if (___async) {
        HEAP32[$AsyncCtx26 >> 2] = 180; //@line 14893
        HEAP32[$AsyncCtx26 + 4 >> 2] = $69; //@line 14895
        HEAP32[$AsyncCtx26 + 8 >> 2] = $35; //@line 14897
        HEAP32[$AsyncCtx26 + 12 >> 2] = $35; //@line 14899
        HEAP32[$AsyncCtx26 + 16 >> 2] = $50; //@line 14901
        HEAP8[$AsyncCtx26 + 20 >> 0] = $240 & 1; //@line 14904
        HEAP32[$AsyncCtx26 + 24 >> 2] = $183; //@line 14906
        HEAP32[$AsyncCtx26 + 28 >> 2] = $113; //@line 14908
        HEAP32[$AsyncCtx26 + 32 >> 2] = $10; //@line 14910
        HEAP32[$AsyncCtx26 + 36 >> 2] = $11; //@line 14912
        HEAP32[$AsyncCtx26 + 40 >> 2] = $183; //@line 14914
        HEAP32[$AsyncCtx26 + 44 >> 2] = $6; //@line 14916
        sp = STACKTOP; //@line 14917
        STACKTOP = sp; //@line 14918
        return 0; //@line 14918
       } else {
        _emscripten_free_async_context($AsyncCtx26 | 0); //@line 14920
        break;
       }
      }
     } while (0);
     if (!$240) {
      $256 = HEAP32[$69 >> 2] | 0; //@line 14926
      if ($256 | 0) {
       __ZdlPv($256); //@line 14929
      }
      $258 = HEAP32[$183 >> 2] | 0; //@line 14931
      do {
       if ($258 | 0) {
        $261 = HEAP32[$258 + 8 >> 2] | 0; //@line 14936
        $AsyncCtx30 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14937
        FUNCTION_TABLE_vi[$261 & 511]($113); //@line 14938
        if (___async) {
         HEAP32[$AsyncCtx30 >> 2] = 181; //@line 14941
         HEAP32[$AsyncCtx30 + 4 >> 2] = $35; //@line 14943
         HEAP32[$AsyncCtx30 + 8 >> 2] = $50; //@line 14945
         HEAP32[$AsyncCtx30 + 12 >> 2] = $6; //@line 14947
         sp = STACKTOP; //@line 14948
         STACKTOP = sp; //@line 14949
         return 0; //@line 14949
        } else {
         _emscripten_free_async_context($AsyncCtx30 | 0); //@line 14951
         break;
        }
       }
      } while (0);
      $266 = HEAP32[$35 + 28 >> 2] | 0; //@line 14957
      do {
       if ($266 | 0) {
        $269 = HEAP32[$266 + 8 >> 2] | 0; //@line 14962
        $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14963
        FUNCTION_TABLE_vi[$269 & 511]($50); //@line 14964
        if (___async) {
         HEAP32[$AsyncCtx34 >> 2] = 182; //@line 14967
         HEAP32[$AsyncCtx34 + 4 >> 2] = $35; //@line 14969
         HEAP32[$AsyncCtx34 + 8 >> 2] = $6; //@line 14971
         sp = STACKTOP; //@line 14972
         STACKTOP = sp; //@line 14973
         return 0; //@line 14973
        } else {
         _emscripten_free_async_context($AsyncCtx34 | 0); //@line 14975
         break;
        }
       }
      } while (0);
      __ZdlPv($35); //@line 14980
      $$391 = -3007; //@line 14981
      break;
     }
     $272 = HEAP32[$183 >> 2] | 0; //@line 14984
     do {
      if (!$272) {
       $287 = 0; //@line 14988
      } else {
       $275 = HEAP32[$272 + 4 >> 2] | 0; //@line 14991
       $AsyncCtx38 = _emscripten_alloc_async_context(44, sp) | 0; //@line 14992
       FUNCTION_TABLE_vii[$275 & 7]($10, $113); //@line 14993
       if (___async) {
        HEAP32[$AsyncCtx38 >> 2] = 183; //@line 14996
        HEAP32[$AsyncCtx38 + 4 >> 2] = $69; //@line 14998
        HEAP32[$AsyncCtx38 + 8 >> 2] = $35; //@line 15000
        HEAP32[$AsyncCtx38 + 12 >> 2] = $35; //@line 15002
        HEAP32[$AsyncCtx38 + 16 >> 2] = $50; //@line 15004
        HEAP32[$AsyncCtx38 + 20 >> 2] = $183; //@line 15006
        HEAP32[$AsyncCtx38 + 24 >> 2] = $113; //@line 15008
        HEAP32[$AsyncCtx38 + 28 >> 2] = $183; //@line 15010
        HEAP32[$AsyncCtx38 + 32 >> 2] = $10; //@line 15012
        HEAP32[$AsyncCtx38 + 36 >> 2] = $11; //@line 15014
        HEAP32[$AsyncCtx38 + 40 >> 2] = $6; //@line 15016
        sp = STACKTOP; //@line 15017
        STACKTOP = sp; //@line 15018
        return 0; //@line 15018
       } else {
        _emscripten_free_async_context($AsyncCtx38 | 0); //@line 15020
        $287 = HEAP32[$183 >> 2] | 0; //@line 15022
        break;
       }
      }
     } while (0);
     $286 = $10 + 12 | 0; //@line 15027
     HEAP32[$286 >> 2] = $287; //@line 15028
     $288 = HEAP32[$35 >> 2] | 0; //@line 15029
     HEAP32[$11 + 8 >> 2] = 0; //@line 15031
     HEAP32[$11 >> 2] = 184; //@line 15032
     HEAP32[$11 + 4 >> 2] = $288; //@line 15034
     $290 = $11 + 12 | 0; //@line 15035
     HEAP32[$290 >> 2] = 724; //@line 15036
     $AsyncCtx65 = _emscripten_alloc_async_context(48, sp) | 0; //@line 15037
     $291 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 0, $11) | 0; //@line 15038
     if (___async) {
      HEAP32[$AsyncCtx65 >> 2] = 185; //@line 15041
      HEAP32[$AsyncCtx65 + 4 >> 2] = $69; //@line 15043
      HEAP32[$AsyncCtx65 + 8 >> 2] = $35; //@line 15045
      HEAP32[$AsyncCtx65 + 12 >> 2] = $35; //@line 15047
      HEAP32[$AsyncCtx65 + 16 >> 2] = $50; //@line 15049
      HEAP32[$AsyncCtx65 + 20 >> 2] = $183; //@line 15051
      HEAP32[$AsyncCtx65 + 24 >> 2] = $113; //@line 15053
      HEAP32[$AsyncCtx65 + 28 >> 2] = $6; //@line 15055
      HEAP32[$AsyncCtx65 + 32 >> 2] = $286; //@line 15057
      HEAP32[$AsyncCtx65 + 36 >> 2] = $10; //@line 15059
      HEAP32[$AsyncCtx65 + 40 >> 2] = $11; //@line 15061
      HEAP32[$AsyncCtx65 + 44 >> 2] = $290; //@line 15063
      sp = STACKTOP; //@line 15064
      STACKTOP = sp; //@line 15065
      return 0; //@line 15065
     }
     _emscripten_free_async_context($AsyncCtx65 | 0); //@line 15067
     $303 = HEAP32[$290 >> 2] | 0; //@line 15068
     do {
      if ($303 | 0) {
       $306 = HEAP32[$303 + 8 >> 2] | 0; //@line 15073
       $AsyncCtx42 = _emscripten_alloc_async_context(44, sp) | 0; //@line 15074
       FUNCTION_TABLE_vi[$306 & 511]($11); //@line 15075
       if (___async) {
        HEAP32[$AsyncCtx42 >> 2] = 186; //@line 15078
        HEAP32[$AsyncCtx42 + 4 >> 2] = $69; //@line 15080
        HEAP32[$AsyncCtx42 + 8 >> 2] = $35; //@line 15082
        HEAP32[$AsyncCtx42 + 12 >> 2] = $35; //@line 15084
        HEAP32[$AsyncCtx42 + 16 >> 2] = $50; //@line 15086
        HEAP32[$AsyncCtx42 + 20 >> 2] = $183; //@line 15088
        HEAP32[$AsyncCtx42 + 24 >> 2] = $113; //@line 15090
        HEAP32[$AsyncCtx42 + 28 >> 2] = $291; //@line 15092
        HEAP32[$AsyncCtx42 + 32 >> 2] = $286; //@line 15094
        HEAP32[$AsyncCtx42 + 36 >> 2] = $10; //@line 15096
        HEAP32[$AsyncCtx42 + 40 >> 2] = $6; //@line 15098
        sp = STACKTOP; //@line 15099
        STACKTOP = sp; //@line 15100
        return 0; //@line 15100
       } else {
        _emscripten_free_async_context($AsyncCtx42 | 0); //@line 15102
        break;
       }
      }
     } while (0);
     $317 = ($291 | 0) == 0; //@line 15107
     $318 = HEAP32[$286 >> 2] | 0; //@line 15108
     do {
      if ($318 | 0) {
       $321 = HEAP32[$318 + 8 >> 2] | 0; //@line 15113
       $AsyncCtx46 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15114
       FUNCTION_TABLE_vi[$321 & 511]($10); //@line 15115
       if (___async) {
        HEAP32[$AsyncCtx46 >> 2] = 187; //@line 15118
        HEAP8[$AsyncCtx46 + 4 >> 0] = $317 & 1; //@line 15121
        HEAP32[$AsyncCtx46 + 8 >> 2] = $35; //@line 15123
        HEAP32[$AsyncCtx46 + 12 >> 2] = $69; //@line 15125
        HEAP32[$AsyncCtx46 + 16 >> 2] = $183; //@line 15127
        HEAP32[$AsyncCtx46 + 20 >> 2] = $35; //@line 15129
        HEAP32[$AsyncCtx46 + 24 >> 2] = $113; //@line 15131
        HEAP32[$AsyncCtx46 + 28 >> 2] = $50; //@line 15133
        HEAP32[$AsyncCtx46 + 32 >> 2] = $6; //@line 15135
        sp = STACKTOP; //@line 15136
        STACKTOP = sp; //@line 15137
        return 0; //@line 15137
       } else {
        _emscripten_free_async_context($AsyncCtx46 | 0); //@line 15139
        break;
       }
      }
     } while (0);
     if ($317) {
      $$391 = HEAP32[$35 >> 2] | 0; //@line 15146
      break;
     }
     $330 = HEAP32[$69 >> 2] | 0; //@line 15149
     if ($330 | 0) {
      __ZdlPv($330); //@line 15152
     }
     $332 = HEAP32[$183 >> 2] | 0; //@line 15154
     do {
      if ($332 | 0) {
       $335 = HEAP32[$332 + 8 >> 2] | 0; //@line 15159
       $AsyncCtx50 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15160
       FUNCTION_TABLE_vi[$335 & 511]($113); //@line 15161
       if (___async) {
        HEAP32[$AsyncCtx50 >> 2] = 188; //@line 15164
        HEAP32[$AsyncCtx50 + 4 >> 2] = $35; //@line 15166
        HEAP32[$AsyncCtx50 + 8 >> 2] = $50; //@line 15168
        HEAP32[$AsyncCtx50 + 12 >> 2] = $6; //@line 15170
        sp = STACKTOP; //@line 15171
        STACKTOP = sp; //@line 15172
        return 0; //@line 15172
       } else {
        _emscripten_free_async_context($AsyncCtx50 | 0); //@line 15174
        break;
       }
      }
     } while (0);
     $340 = HEAP32[$35 + 28 >> 2] | 0; //@line 15180
     do {
      if ($340 | 0) {
       $343 = HEAP32[$340 + 8 >> 2] | 0; //@line 15185
       $AsyncCtx54 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15186
       FUNCTION_TABLE_vi[$343 & 511]($50); //@line 15187
       if (___async) {
        HEAP32[$AsyncCtx54 >> 2] = 189; //@line 15190
        HEAP32[$AsyncCtx54 + 4 >> 2] = $35; //@line 15192
        HEAP32[$AsyncCtx54 + 8 >> 2] = $6; //@line 15194
        sp = STACKTOP; //@line 15195
        STACKTOP = sp; //@line 15196
        return 0; //@line 15196
       } else {
        _emscripten_free_async_context($AsyncCtx54 | 0); //@line 15198
        break;
       }
      }
     } while (0);
     __ZdlPv($35); //@line 15203
     $$391 = -3007; //@line 15204
    } else {
     $$391 = $$; //@line 15206
    }
   }
  }
 } while (0);
 $$5 = $$391; //@line 15211
 STACKTOP = sp; //@line 15212
 return $$5 | 0; //@line 15212
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_101($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $190 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 21609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21613
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21617
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21619
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21623
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21625
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21627
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21629
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21631
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21633
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21635
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21637
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21639
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21641
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21643
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21645
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21647
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21649
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 21651
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21653
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 21655
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 21657
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 21659
 $$02972$reg2mem$0 = HEAP32[$0 + 24 >> 2] | 0; //@line 21660
 $$03071$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 21660
 $$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 21660
 L2 : while (1) {
  $122 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 21662
  $123 = $122 + 76 | 0; //@line 21663
  $124 = HEAP32[$123 >> 2] | 0; //@line 21664
  if ($124 | 0) {
   if ($124 >>> 0 <= 100) {
    label = 18; //@line 21669
    break;
   }
   HEAP32[$123 >> 2] = $124 + -100; //@line 21673
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 21678
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 21678
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 21680
   $$131 = $$03071$reg2mem$0; //@line 21680
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 21683
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 21686
    break L2;
   }
   $52 = 10072 + ($$02972$reg2mem$1 << 2) | 0; //@line 21689
   $54 = HEAP32[$52 >> 2] | 0; //@line 21690
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 21698
  $57 = HEAP32[$56 >> 2] | 0; //@line 21699
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 21703
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 21704
   $$03071$reg2mem$0 = $$131; //@line 21704
   $$reg2mem$0 = $52; //@line 21704
   continue;
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 21711
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 21714
    $$03071$reg2mem$0 = $$131; //@line 21714
    $$reg2mem$0 = $52; //@line 21714
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $189 = $$131 + 44 | 0; //@line 21724
  $190 = HEAP32[$189 >> 2] | 0; //@line 21725
  if (!$190) {
   $198 = $28 + 12 | 0; //@line 21728
   HEAP32[$198 >> 2] = 0; //@line 21729
   $200 = $30 + 4 | 0; //@line 21731
   HEAP32[$200 >> 2] = 0; //@line 21733
   HEAP32[$200 + 4 >> 2] = 0; //@line 21736
   HEAP32[$30 >> 2] = 3; //@line 21737
   $204 = $30 + 12 | 0; //@line 21738
   HEAP32[$204 >> 2] = 712; //@line 21739
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 21740
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($28, 100, $30) | 0; //@line 21741
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 21744
    $205 = $ReallocAsyncCtx10 + 4 | 0; //@line 21745
    HEAP32[$205 >> 2] = $204; //@line 21746
    $206 = $ReallocAsyncCtx10 + 8 | 0; //@line 21747
    HEAP32[$206 >> 2] = $198; //@line 21748
    $207 = $ReallocAsyncCtx10 + 12 | 0; //@line 21749
    HEAP32[$207 >> 2] = $30; //@line 21750
    $208 = $ReallocAsyncCtx10 + 16 | 0; //@line 21751
    HEAP32[$208 >> 2] = $28; //@line 21752
    sp = STACKTOP; //@line 21753
    return;
   }
   ___async_unwind = 0; //@line 21756
   HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 21757
   $205 = $ReallocAsyncCtx10 + 4 | 0; //@line 21758
   HEAP32[$205 >> 2] = $204; //@line 21759
   $206 = $ReallocAsyncCtx10 + 8 | 0; //@line 21760
   HEAP32[$206 >> 2] = $198; //@line 21761
   $207 = $ReallocAsyncCtx10 + 12 | 0; //@line 21762
   HEAP32[$207 >> 2] = $30; //@line 21763
   $208 = $ReallocAsyncCtx10 + 16 | 0; //@line 21764
   HEAP32[$208 >> 2] = $28; //@line 21765
   sp = STACKTOP; //@line 21766
   return;
  } else {
   $194 = HEAP32[$190 + 4 >> 2] | 0; //@line 21771
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 21772
   FUNCTION_TABLE_vii[$194 & 7]($28, $$131 + 32 | 0); //@line 21773
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 21776
    $195 = $ReallocAsyncCtx7 + 4 | 0; //@line 21777
    HEAP32[$195 >> 2] = $189; //@line 21778
    $196 = $ReallocAsyncCtx7 + 8 | 0; //@line 21779
    HEAP32[$196 >> 2] = $28; //@line 21780
    $197 = $ReallocAsyncCtx7 + 12 | 0; //@line 21781
    HEAP32[$197 >> 2] = $30; //@line 21782
    sp = STACKTOP; //@line 21783
    return;
   }
   ___async_unwind = 0; //@line 21786
   HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 21787
   $195 = $ReallocAsyncCtx7 + 4 | 0; //@line 21788
   HEAP32[$195 >> 2] = $189; //@line 21789
   $196 = $ReallocAsyncCtx7 + 8 | 0; //@line 21790
   HEAP32[$196 >> 2] = $28; //@line 21791
   $197 = $ReallocAsyncCtx7 + 12 | 0; //@line 21792
   HEAP32[$197 >> 2] = $30; //@line 21793
   sp = STACKTOP; //@line 21794
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 21800
  $64 = $54 + 44 | 0; //@line 21801
  $65 = HEAP32[$64 >> 2] | 0; //@line 21802
  if (!$65) {
   HEAP32[$14 >> 2] = 0; //@line 21805
   $96 = HEAP32[$54 >> 2] | 0; //@line 21806
   HEAP32[$16 >> 2] = 0; //@line 21807
   HEAP32[$18 >> 2] = 191; //@line 21808
   HEAP32[$20 >> 2] = $96; //@line 21809
   HEAP32[$22 >> 2] = 724; //@line 21810
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 21811
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 21812
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 21815
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 21816
    HEAP32[$97 >> 2] = $4; //@line 21817
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 21818
    HEAP32[$98 >> 2] = $52; //@line 21819
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 21820
    HEAP32[$99 >> 2] = $10; //@line 21821
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 21822
    HEAP32[$100 >> 2] = $$131; //@line 21823
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 21824
    HEAP32[$101 >> 2] = $8; //@line 21825
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 21826
    HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 21827
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 21828
    HEAP32[$103 >> 2] = $14; //@line 21829
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 21830
    HEAP32[$104 >> 2] = $16; //@line 21831
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 21832
    HEAP32[$105 >> 2] = $18; //@line 21833
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 21834
    HEAP32[$106 >> 2] = $20; //@line 21835
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 21836
    HEAP32[$107 >> 2] = $22; //@line 21837
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 21838
    HEAP32[$108 >> 2] = $24; //@line 21839
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 21840
    HEAP32[$109 >> 2] = $26; //@line 21841
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 21842
    HEAP32[$110 >> 2] = $28; //@line 21843
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 21844
    HEAP32[$111 >> 2] = $30; //@line 21845
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 21846
    HEAP32[$112 >> 2] = $32; //@line 21847
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 21848
    HEAP32[$113 >> 2] = $34; //@line 21849
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 21850
    HEAP32[$114 >> 2] = $36; //@line 21851
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 21852
    HEAP32[$115 >> 2] = $38; //@line 21853
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 21854
    HEAP32[$116 >> 2] = $40; //@line 21855
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 21856
    HEAP32[$117 >> 2] = $42; //@line 21857
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 21858
    HEAP32[$118 >> 2] = $44; //@line 21859
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 21860
    HEAP32[$119 >> 2] = $46; //@line 21861
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 21862
    HEAP32[$120 >> 2] = $48; //@line 21863
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 21864
    HEAP32[$121 >> 2] = $50; //@line 21865
    sp = STACKTOP; //@line 21866
    return;
   }
   ___async_unwind = 0; //@line 21869
   HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 21870
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 21871
   HEAP32[$97 >> 2] = $4; //@line 21872
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 21873
   HEAP32[$98 >> 2] = $52; //@line 21874
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 21875
   HEAP32[$99 >> 2] = $10; //@line 21876
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 21877
   HEAP32[$100 >> 2] = $$131; //@line 21878
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 21879
   HEAP32[$101 >> 2] = $8; //@line 21880
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 21881
   HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 21882
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 21883
   HEAP32[$103 >> 2] = $14; //@line 21884
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 21885
   HEAP32[$104 >> 2] = $16; //@line 21886
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 21887
   HEAP32[$105 >> 2] = $18; //@line 21888
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 21889
   HEAP32[$106 >> 2] = $20; //@line 21890
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 21891
   HEAP32[$107 >> 2] = $22; //@line 21892
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 21893
   HEAP32[$108 >> 2] = $24; //@line 21894
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 21895
   HEAP32[$109 >> 2] = $26; //@line 21896
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 21897
   HEAP32[$110 >> 2] = $28; //@line 21898
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 21899
   HEAP32[$111 >> 2] = $30; //@line 21900
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 21901
   HEAP32[$112 >> 2] = $32; //@line 21902
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 21903
   HEAP32[$113 >> 2] = $34; //@line 21904
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 21905
   HEAP32[$114 >> 2] = $36; //@line 21906
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 21907
   HEAP32[$115 >> 2] = $38; //@line 21908
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 21909
   HEAP32[$116 >> 2] = $40; //@line 21910
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 21911
   HEAP32[$117 >> 2] = $42; //@line 21912
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 21913
   HEAP32[$118 >> 2] = $44; //@line 21914
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 21915
   HEAP32[$119 >> 2] = $46; //@line 21916
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 21917
   HEAP32[$120 >> 2] = $48; //@line 21918
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 21919
   HEAP32[$121 >> 2] = $50; //@line 21920
   sp = STACKTOP; //@line 21921
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 21926
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 21927
   FUNCTION_TABLE_vii[$69 & 7]($8, $54 + 32 | 0); //@line 21928
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 21931
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 21932
    HEAP32[$70 >> 2] = $4; //@line 21933
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 21934
    HEAP32[$71 >> 2] = $52; //@line 21935
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 21936
    HEAP32[$72 >> 2] = $10; //@line 21937
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 21938
    HEAP32[$73 >> 2] = $$131; //@line 21939
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 21940
    HEAP32[$74 >> 2] = $8; //@line 21941
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 21942
    HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 21943
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 21944
    HEAP32[$76 >> 2] = $14; //@line 21945
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 21946
    HEAP32[$77 >> 2] = $16; //@line 21947
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 21948
    HEAP32[$78 >> 2] = $18; //@line 21949
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 21950
    HEAP32[$79 >> 2] = $20; //@line 21951
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 21952
    HEAP32[$80 >> 2] = $22; //@line 21953
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 21954
    HEAP32[$81 >> 2] = $24; //@line 21955
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 21956
    HEAP32[$82 >> 2] = $26; //@line 21957
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 21958
    HEAP32[$83 >> 2] = $28; //@line 21959
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 21960
    HEAP32[$84 >> 2] = $30; //@line 21961
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 21962
    HEAP32[$85 >> 2] = $64; //@line 21963
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 21964
    HEAP32[$86 >> 2] = $32; //@line 21965
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 21966
    HEAP32[$87 >> 2] = $34; //@line 21967
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 21968
    HEAP32[$88 >> 2] = $36; //@line 21969
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 21970
    HEAP32[$89 >> 2] = $38; //@line 21971
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 21972
    HEAP32[$90 >> 2] = $40; //@line 21973
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 21974
    HEAP32[$91 >> 2] = $42; //@line 21975
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 21976
    HEAP32[$92 >> 2] = $44; //@line 21977
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 21978
    HEAP32[$93 >> 2] = $46; //@line 21979
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 21980
    HEAP32[$94 >> 2] = $48; //@line 21981
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 21982
    HEAP32[$95 >> 2] = $50; //@line 21983
    sp = STACKTOP; //@line 21984
    return;
   }
   ___async_unwind = 0; //@line 21987
   HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 21988
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 21989
   HEAP32[$70 >> 2] = $4; //@line 21990
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 21991
   HEAP32[$71 >> 2] = $52; //@line 21992
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 21993
   HEAP32[$72 >> 2] = $10; //@line 21994
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 21995
   HEAP32[$73 >> 2] = $$131; //@line 21996
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 21997
   HEAP32[$74 >> 2] = $8; //@line 21998
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 21999
   HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 22000
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 22001
   HEAP32[$76 >> 2] = $14; //@line 22002
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 22003
   HEAP32[$77 >> 2] = $16; //@line 22004
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 22005
   HEAP32[$78 >> 2] = $18; //@line 22006
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 22007
   HEAP32[$79 >> 2] = $20; //@line 22008
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 22009
   HEAP32[$80 >> 2] = $22; //@line 22010
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 22011
   HEAP32[$81 >> 2] = $24; //@line 22012
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 22013
   HEAP32[$82 >> 2] = $26; //@line 22014
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 22015
   HEAP32[$83 >> 2] = $28; //@line 22016
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 22017
   HEAP32[$84 >> 2] = $30; //@line 22018
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 22019
   HEAP32[$85 >> 2] = $64; //@line 22020
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 22021
   HEAP32[$86 >> 2] = $32; //@line 22022
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 22023
   HEAP32[$87 >> 2] = $34; //@line 22024
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 22025
   HEAP32[$88 >> 2] = $36; //@line 22026
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 22027
   HEAP32[$89 >> 2] = $38; //@line 22028
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 22029
   HEAP32[$90 >> 2] = $40; //@line 22030
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 22031
   HEAP32[$91 >> 2] = $42; //@line 22032
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 22033
   HEAP32[$92 >> 2] = $44; //@line 22034
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 22035
   HEAP32[$93 >> 2] = $46; //@line 22036
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 22037
   HEAP32[$94 >> 2] = $48; //@line 22038
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 22039
   HEAP32[$95 >> 2] = $50; //@line 22040
   sp = STACKTOP; //@line 22041
   return;
  }
 } else if ((label | 0) == 18) {
  HEAP32[$123 >> 2] = 0; //@line 22046
  $128 = $122 + 44 | 0; //@line 22047
  $129 = HEAP32[$128 >> 2] | 0; //@line 22048
  if (!$129) {
   HEAP32[$34 >> 2] = 0; //@line 22051
   $160 = HEAP32[$122 >> 2] | 0; //@line 22052
   HEAP32[$36 >> 2] = 0; //@line 22053
   HEAP32[$38 >> 2] = 196; //@line 22054
   HEAP32[$40 >> 2] = $160; //@line 22055
   HEAP32[$42 >> 2] = 724; //@line 22056
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 22057
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 22058
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 22061
    $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 22062
    HEAP32[$161 >> 2] = $$reg2mem$0; //@line 22063
    $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 22064
    HEAP32[$162 >> 2] = $4; //@line 22065
    $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 22066
    HEAP32[$163 >> 2] = $$03071$reg2mem$0; //@line 22067
    $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 22068
    HEAP32[$164 >> 2] = $8; //@line 22069
    $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 22070
    HEAP32[$165 >> 2] = $10; //@line 22071
    $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 22072
    HEAP32[$166 >> 2] = $$02972$reg2mem$0; //@line 22073
    $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 22074
    HEAP32[$167 >> 2] = $14; //@line 22075
    $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 22076
    HEAP32[$168 >> 2] = $16; //@line 22077
    $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 22078
    HEAP32[$169 >> 2] = $18; //@line 22079
    $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 22080
    HEAP32[$170 >> 2] = $20; //@line 22081
    $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 22082
    HEAP32[$171 >> 2] = $22; //@line 22083
    $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 22084
    HEAP32[$172 >> 2] = $24; //@line 22085
    $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 22086
    HEAP32[$173 >> 2] = $26; //@line 22087
    $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 22088
    HEAP32[$174 >> 2] = $28; //@line 22089
    $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 22090
    HEAP32[$175 >> 2] = $30; //@line 22091
    $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 22092
    HEAP32[$176 >> 2] = $32; //@line 22093
    $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 22094
    HEAP32[$177 >> 2] = $34; //@line 22095
    $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 22096
    HEAP32[$178 >> 2] = $36; //@line 22097
    $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 22098
    HEAP32[$179 >> 2] = $38; //@line 22099
    $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 22100
    HEAP32[$180 >> 2] = $40; //@line 22101
    $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 22102
    HEAP32[$181 >> 2] = $42; //@line 22103
    $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 22104
    HEAP32[$182 >> 2] = $44; //@line 22105
    $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 22106
    HEAP32[$183 >> 2] = $46; //@line 22107
    $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 22108
    HEAP32[$184 >> 2] = $48; //@line 22109
    $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 22110
    HEAP32[$185 >> 2] = $50; //@line 22111
    sp = STACKTOP; //@line 22112
    return;
   }
   ___async_unwind = 0; //@line 22115
   HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 22116
   $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 22117
   HEAP32[$161 >> 2] = $$reg2mem$0; //@line 22118
   $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 22119
   HEAP32[$162 >> 2] = $4; //@line 22120
   $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 22121
   HEAP32[$163 >> 2] = $$03071$reg2mem$0; //@line 22122
   $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 22123
   HEAP32[$164 >> 2] = $8; //@line 22124
   $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 22125
   HEAP32[$165 >> 2] = $10; //@line 22126
   $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 22127
   HEAP32[$166 >> 2] = $$02972$reg2mem$0; //@line 22128
   $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 22129
   HEAP32[$167 >> 2] = $14; //@line 22130
   $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 22131
   HEAP32[$168 >> 2] = $16; //@line 22132
   $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 22133
   HEAP32[$169 >> 2] = $18; //@line 22134
   $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 22135
   HEAP32[$170 >> 2] = $20; //@line 22136
   $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 22137
   HEAP32[$171 >> 2] = $22; //@line 22138
   $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 22139
   HEAP32[$172 >> 2] = $24; //@line 22140
   $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 22141
   HEAP32[$173 >> 2] = $26; //@line 22142
   $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 22143
   HEAP32[$174 >> 2] = $28; //@line 22144
   $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 22145
   HEAP32[$175 >> 2] = $30; //@line 22146
   $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 22147
   HEAP32[$176 >> 2] = $32; //@line 22148
   $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 22149
   HEAP32[$177 >> 2] = $34; //@line 22150
   $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 22151
   HEAP32[$178 >> 2] = $36; //@line 22152
   $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 22153
   HEAP32[$179 >> 2] = $38; //@line 22154
   $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 22155
   HEAP32[$180 >> 2] = $40; //@line 22156
   $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 22157
   HEAP32[$181 >> 2] = $42; //@line 22158
   $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 22159
   HEAP32[$182 >> 2] = $44; //@line 22160
   $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 22161
   HEAP32[$183 >> 2] = $46; //@line 22162
   $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 22163
   HEAP32[$184 >> 2] = $48; //@line 22164
   $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 22165
   HEAP32[$185 >> 2] = $50; //@line 22166
   sp = STACKTOP; //@line 22167
   return;
  } else {
   $133 = HEAP32[$129 + 4 >> 2] | 0; //@line 22172
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 22173
   FUNCTION_TABLE_vii[$133 & 7]($32, $122 + 32 | 0); //@line 22174
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 22177
    $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 22178
    HEAP32[$134 >> 2] = $$reg2mem$0; //@line 22179
    $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 22180
    HEAP32[$135 >> 2] = $4; //@line 22181
    $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 22182
    HEAP32[$136 >> 2] = $$03071$reg2mem$0; //@line 22183
    $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 22184
    HEAP32[$137 >> 2] = $8; //@line 22185
    $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 22186
    HEAP32[$138 >> 2] = $10; //@line 22187
    $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 22188
    HEAP32[$139 >> 2] = $$02972$reg2mem$0; //@line 22189
    $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 22190
    HEAP32[$140 >> 2] = $14; //@line 22191
    $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 22192
    HEAP32[$141 >> 2] = $16; //@line 22193
    $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 22194
    HEAP32[$142 >> 2] = $18; //@line 22195
    $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 22196
    HEAP32[$143 >> 2] = $20; //@line 22197
    $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 22198
    HEAP32[$144 >> 2] = $22; //@line 22199
    $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 22200
    HEAP32[$145 >> 2] = $24; //@line 22201
    $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 22202
    HEAP32[$146 >> 2] = $26; //@line 22203
    $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 22204
    HEAP32[$147 >> 2] = $28; //@line 22205
    $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 22206
    HEAP32[$148 >> 2] = $30; //@line 22207
    $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 22208
    HEAP32[$149 >> 2] = $32; //@line 22209
    $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 22210
    HEAP32[$150 >> 2] = $34; //@line 22211
    $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 22212
    HEAP32[$151 >> 2] = $36; //@line 22213
    $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 22214
    HEAP32[$152 >> 2] = $38; //@line 22215
    $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 22216
    HEAP32[$153 >> 2] = $40; //@line 22217
    $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 22218
    HEAP32[$154 >> 2] = $42; //@line 22219
    $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 22220
    HEAP32[$155 >> 2] = $44; //@line 22221
    $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 22222
    HEAP32[$156 >> 2] = $46; //@line 22223
    $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 22224
    HEAP32[$157 >> 2] = $48; //@line 22225
    $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 22226
    HEAP32[$158 >> 2] = $50; //@line 22227
    $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 22228
    HEAP32[$159 >> 2] = $128; //@line 22229
    sp = STACKTOP; //@line 22230
    return;
   }
   ___async_unwind = 0; //@line 22233
   HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 22234
   $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 22235
   HEAP32[$134 >> 2] = $$reg2mem$0; //@line 22236
   $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 22237
   HEAP32[$135 >> 2] = $4; //@line 22238
   $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 22239
   HEAP32[$136 >> 2] = $$03071$reg2mem$0; //@line 22240
   $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 22241
   HEAP32[$137 >> 2] = $8; //@line 22242
   $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 22243
   HEAP32[$138 >> 2] = $10; //@line 22244
   $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 22245
   HEAP32[$139 >> 2] = $$02972$reg2mem$0; //@line 22246
   $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 22247
   HEAP32[$140 >> 2] = $14; //@line 22248
   $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 22249
   HEAP32[$141 >> 2] = $16; //@line 22250
   $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 22251
   HEAP32[$142 >> 2] = $18; //@line 22252
   $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 22253
   HEAP32[$143 >> 2] = $20; //@line 22254
   $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 22255
   HEAP32[$144 >> 2] = $22; //@line 22256
   $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 22257
   HEAP32[$145 >> 2] = $24; //@line 22258
   $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 22259
   HEAP32[$146 >> 2] = $26; //@line 22260
   $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 22261
   HEAP32[$147 >> 2] = $28; //@line 22262
   $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 22263
   HEAP32[$148 >> 2] = $30; //@line 22264
   $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 22265
   HEAP32[$149 >> 2] = $32; //@line 22266
   $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 22267
   HEAP32[$150 >> 2] = $34; //@line 22268
   $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 22269
   HEAP32[$151 >> 2] = $36; //@line 22270
   $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 22271
   HEAP32[$152 >> 2] = $38; //@line 22272
   $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 22273
   HEAP32[$153 >> 2] = $40; //@line 22274
   $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 22275
   HEAP32[$154 >> 2] = $42; //@line 22276
   $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 22277
   HEAP32[$155 >> 2] = $44; //@line 22278
   $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 22279
   HEAP32[$156 >> 2] = $46; //@line 22280
   $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 22281
   HEAP32[$157 >> 2] = $48; //@line 22282
   $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 22283
   HEAP32[$158 >> 2] = $50; //@line 22284
   $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 22285
   HEAP32[$159 >> 2] = $128; //@line 22286
   sp = STACKTOP; //@line 22287
   return;
  }
 }
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_104($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $190 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 23249
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23253
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23257
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23259
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23261
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23263
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23265
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23267
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23269
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23271
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23273
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23275
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23277
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23279
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23281
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 23283
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 23285
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 23287
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 23289
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 23291
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 23293
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 23295
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 23297
 $$02972$reg2mem$0 = HEAP32[$0 + 100 >> 2] | 0; //@line 23300
 $$03071$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 23300
 $$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 23300
 L2 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 23305
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 23305
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 23307
   $$131 = $$03071$reg2mem$0; //@line 23307
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 23310
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 23313
    break L2;
   }
   $52 = 10072 + ($$02972$reg2mem$1 << 2) | 0; //@line 23316
   $54 = HEAP32[$52 >> 2] | 0; //@line 23317
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 23325
  $57 = HEAP32[$56 >> 2] | 0; //@line 23326
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 23330
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 23336
    break;
   }
  }
  $122 = HEAP32[$52 >> 2] | 0; //@line 23340
  $123 = $122 + 76 | 0; //@line 23341
  $124 = HEAP32[$123 >> 2] | 0; //@line 23342
  if (!$124) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 23345
   $$03071$reg2mem$0 = $$131; //@line 23345
   $$reg2mem$0 = $52; //@line 23345
   continue;
  }
  if ($124 >>> 0 <= 100) {
   label = 17; //@line 23350
   break;
  }
  HEAP32[$123 >> 2] = $124 + -100; //@line 23354
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 23355
  $$03071$reg2mem$0 = $$131; //@line 23355
  $$reg2mem$0 = $52; //@line 23355
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $189 = $$131 + 44 | 0; //@line 23362
  $190 = HEAP32[$189 >> 2] | 0; //@line 23363
  if (!$190) {
   $198 = $26 + 12 | 0; //@line 23366
   HEAP32[$198 >> 2] = 0; //@line 23367
   $200 = $28 + 4 | 0; //@line 23369
   HEAP32[$200 >> 2] = 0; //@line 23371
   HEAP32[$200 + 4 >> 2] = 0; //@line 23374
   HEAP32[$28 >> 2] = 3; //@line 23375
   $204 = $28 + 12 | 0; //@line 23376
   HEAP32[$204 >> 2] = 712; //@line 23377
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 23378
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 100, $28) | 0; //@line 23379
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 23382
    $205 = $ReallocAsyncCtx10 + 4 | 0; //@line 23383
    HEAP32[$205 >> 2] = $204; //@line 23384
    $206 = $ReallocAsyncCtx10 + 8 | 0; //@line 23385
    HEAP32[$206 >> 2] = $198; //@line 23386
    $207 = $ReallocAsyncCtx10 + 12 | 0; //@line 23387
    HEAP32[$207 >> 2] = $28; //@line 23388
    $208 = $ReallocAsyncCtx10 + 16 | 0; //@line 23389
    HEAP32[$208 >> 2] = $26; //@line 23390
    sp = STACKTOP; //@line 23391
    return;
   }
   ___async_unwind = 0; //@line 23394
   HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 23395
   $205 = $ReallocAsyncCtx10 + 4 | 0; //@line 23396
   HEAP32[$205 >> 2] = $204; //@line 23397
   $206 = $ReallocAsyncCtx10 + 8 | 0; //@line 23398
   HEAP32[$206 >> 2] = $198; //@line 23399
   $207 = $ReallocAsyncCtx10 + 12 | 0; //@line 23400
   HEAP32[$207 >> 2] = $28; //@line 23401
   $208 = $ReallocAsyncCtx10 + 16 | 0; //@line 23402
   HEAP32[$208 >> 2] = $26; //@line 23403
   sp = STACKTOP; //@line 23404
   return;
  } else {
   $194 = HEAP32[$190 + 4 >> 2] | 0; //@line 23409
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 23410
   FUNCTION_TABLE_vii[$194 & 7]($26, $$131 + 32 | 0); //@line 23411
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 23414
    $195 = $ReallocAsyncCtx7 + 4 | 0; //@line 23415
    HEAP32[$195 >> 2] = $189; //@line 23416
    $196 = $ReallocAsyncCtx7 + 8 | 0; //@line 23417
    HEAP32[$196 >> 2] = $26; //@line 23418
    $197 = $ReallocAsyncCtx7 + 12 | 0; //@line 23419
    HEAP32[$197 >> 2] = $28; //@line 23420
    sp = STACKTOP; //@line 23421
    return;
   }
   ___async_unwind = 0; //@line 23424
   HEAP32[$ReallocAsyncCtx7 >> 2] = 200; //@line 23425
   $195 = $ReallocAsyncCtx7 + 4 | 0; //@line 23426
   HEAP32[$195 >> 2] = $189; //@line 23427
   $196 = $ReallocAsyncCtx7 + 8 | 0; //@line 23428
   HEAP32[$196 >> 2] = $26; //@line 23429
   $197 = $ReallocAsyncCtx7 + 12 | 0; //@line 23430
   HEAP32[$197 >> 2] = $28; //@line 23431
   sp = STACKTOP; //@line 23432
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 23438
  $64 = $54 + 44 | 0; //@line 23439
  $65 = HEAP32[$64 >> 2] | 0; //@line 23440
  if (!$65) {
   HEAP32[$12 >> 2] = 0; //@line 23443
   $96 = HEAP32[$54 >> 2] | 0; //@line 23444
   HEAP32[$14 >> 2] = 0; //@line 23445
   HEAP32[$16 >> 2] = 191; //@line 23446
   HEAP32[$18 >> 2] = $96; //@line 23447
   HEAP32[$20 >> 2] = 724; //@line 23448
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 23449
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 23450
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 23453
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 23454
    HEAP32[$97 >> 2] = $4; //@line 23455
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 23456
    HEAP32[$98 >> 2] = $52; //@line 23457
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 23458
    HEAP32[$99 >> 2] = $10; //@line 23459
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 23460
    HEAP32[$100 >> 2] = $$131; //@line 23461
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 23462
    HEAP32[$101 >> 2] = $8; //@line 23463
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 23464
    HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 23465
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 23466
    HEAP32[$103 >> 2] = $12; //@line 23467
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 23468
    HEAP32[$104 >> 2] = $14; //@line 23469
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 23470
    HEAP32[$105 >> 2] = $16; //@line 23471
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 23472
    HEAP32[$106 >> 2] = $18; //@line 23473
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 23474
    HEAP32[$107 >> 2] = $20; //@line 23475
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 23476
    HEAP32[$108 >> 2] = $22; //@line 23477
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 23478
    HEAP32[$109 >> 2] = $24; //@line 23479
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 23480
    HEAP32[$110 >> 2] = $26; //@line 23481
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 23482
    HEAP32[$111 >> 2] = $28; //@line 23483
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 23484
    HEAP32[$112 >> 2] = $30; //@line 23485
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 23486
    HEAP32[$113 >> 2] = $32; //@line 23487
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 23488
    HEAP32[$114 >> 2] = $34; //@line 23489
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 23490
    HEAP32[$115 >> 2] = $36; //@line 23491
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 23492
    HEAP32[$116 >> 2] = $38; //@line 23493
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 23494
    HEAP32[$117 >> 2] = $40; //@line 23495
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 23496
    HEAP32[$118 >> 2] = $42; //@line 23497
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 23498
    HEAP32[$119 >> 2] = $44; //@line 23499
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 23500
    HEAP32[$120 >> 2] = $46; //@line 23501
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 23502
    HEAP32[$121 >> 2] = $48; //@line 23503
    sp = STACKTOP; //@line 23504
    return;
   }
   ___async_unwind = 0; //@line 23507
   HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 23508
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 23509
   HEAP32[$97 >> 2] = $4; //@line 23510
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 23511
   HEAP32[$98 >> 2] = $52; //@line 23512
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 23513
   HEAP32[$99 >> 2] = $10; //@line 23514
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 23515
   HEAP32[$100 >> 2] = $$131; //@line 23516
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 23517
   HEAP32[$101 >> 2] = $8; //@line 23518
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 23519
   HEAP32[$102 >> 2] = $$02972$reg2mem$1; //@line 23520
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 23521
   HEAP32[$103 >> 2] = $12; //@line 23522
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 23523
   HEAP32[$104 >> 2] = $14; //@line 23524
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 23525
   HEAP32[$105 >> 2] = $16; //@line 23526
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 23527
   HEAP32[$106 >> 2] = $18; //@line 23528
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 23529
   HEAP32[$107 >> 2] = $20; //@line 23530
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 23531
   HEAP32[$108 >> 2] = $22; //@line 23532
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 23533
   HEAP32[$109 >> 2] = $24; //@line 23534
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 23535
   HEAP32[$110 >> 2] = $26; //@line 23536
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 23537
   HEAP32[$111 >> 2] = $28; //@line 23538
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 23539
   HEAP32[$112 >> 2] = $30; //@line 23540
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 23541
   HEAP32[$113 >> 2] = $32; //@line 23542
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 23543
   HEAP32[$114 >> 2] = $34; //@line 23544
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 23545
   HEAP32[$115 >> 2] = $36; //@line 23546
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 23547
   HEAP32[$116 >> 2] = $38; //@line 23548
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 23549
   HEAP32[$117 >> 2] = $40; //@line 23550
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 23551
   HEAP32[$118 >> 2] = $42; //@line 23552
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 23553
   HEAP32[$119 >> 2] = $44; //@line 23554
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 23555
   HEAP32[$120 >> 2] = $46; //@line 23556
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 23557
   HEAP32[$121 >> 2] = $48; //@line 23558
   sp = STACKTOP; //@line 23559
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 23564
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 23565
   FUNCTION_TABLE_vii[$69 & 7]($8, $54 + 32 | 0); //@line 23566
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 23569
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 23570
    HEAP32[$70 >> 2] = $4; //@line 23571
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 23572
    HEAP32[$71 >> 2] = $52; //@line 23573
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 23574
    HEAP32[$72 >> 2] = $10; //@line 23575
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 23576
    HEAP32[$73 >> 2] = $$131; //@line 23577
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 23578
    HEAP32[$74 >> 2] = $8; //@line 23579
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 23580
    HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 23581
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 23582
    HEAP32[$76 >> 2] = $12; //@line 23583
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 23584
    HEAP32[$77 >> 2] = $14; //@line 23585
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 23586
    HEAP32[$78 >> 2] = $16; //@line 23587
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 23588
    HEAP32[$79 >> 2] = $18; //@line 23589
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 23590
    HEAP32[$80 >> 2] = $20; //@line 23591
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 23592
    HEAP32[$81 >> 2] = $22; //@line 23593
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 23594
    HEAP32[$82 >> 2] = $24; //@line 23595
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 23596
    HEAP32[$83 >> 2] = $26; //@line 23597
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 23598
    HEAP32[$84 >> 2] = $28; //@line 23599
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 23600
    HEAP32[$85 >> 2] = $64; //@line 23601
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 23602
    HEAP32[$86 >> 2] = $30; //@line 23603
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 23604
    HEAP32[$87 >> 2] = $32; //@line 23605
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 23606
    HEAP32[$88 >> 2] = $34; //@line 23607
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 23608
    HEAP32[$89 >> 2] = $36; //@line 23609
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 23610
    HEAP32[$90 >> 2] = $38; //@line 23611
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 23612
    HEAP32[$91 >> 2] = $40; //@line 23613
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 23614
    HEAP32[$92 >> 2] = $42; //@line 23615
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 23616
    HEAP32[$93 >> 2] = $44; //@line 23617
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 23618
    HEAP32[$94 >> 2] = $46; //@line 23619
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 23620
    HEAP32[$95 >> 2] = $48; //@line 23621
    sp = STACKTOP; //@line 23622
    return;
   }
   ___async_unwind = 0; //@line 23625
   HEAP32[$ReallocAsyncCtx >> 2] = 190; //@line 23626
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 23627
   HEAP32[$70 >> 2] = $4; //@line 23628
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 23629
   HEAP32[$71 >> 2] = $52; //@line 23630
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 23631
   HEAP32[$72 >> 2] = $10; //@line 23632
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 23633
   HEAP32[$73 >> 2] = $$131; //@line 23634
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 23635
   HEAP32[$74 >> 2] = $8; //@line 23636
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 23637
   HEAP32[$75 >> 2] = $$02972$reg2mem$1; //@line 23638
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 23639
   HEAP32[$76 >> 2] = $12; //@line 23640
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 23641
   HEAP32[$77 >> 2] = $14; //@line 23642
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 23643
   HEAP32[$78 >> 2] = $16; //@line 23644
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 23645
   HEAP32[$79 >> 2] = $18; //@line 23646
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 23647
   HEAP32[$80 >> 2] = $20; //@line 23648
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 23649
   HEAP32[$81 >> 2] = $22; //@line 23650
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 23651
   HEAP32[$82 >> 2] = $24; //@line 23652
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 23653
   HEAP32[$83 >> 2] = $26; //@line 23654
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 23655
   HEAP32[$84 >> 2] = $28; //@line 23656
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 23657
   HEAP32[$85 >> 2] = $64; //@line 23658
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 23659
   HEAP32[$86 >> 2] = $30; //@line 23660
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 23661
   HEAP32[$87 >> 2] = $32; //@line 23662
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 23663
   HEAP32[$88 >> 2] = $34; //@line 23664
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 23665
   HEAP32[$89 >> 2] = $36; //@line 23666
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 23667
   HEAP32[$90 >> 2] = $38; //@line 23668
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 23669
   HEAP32[$91 >> 2] = $40; //@line 23670
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 23671
   HEAP32[$92 >> 2] = $42; //@line 23672
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 23673
   HEAP32[$93 >> 2] = $44; //@line 23674
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 23675
   HEAP32[$94 >> 2] = $46; //@line 23676
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 23677
   HEAP32[$95 >> 2] = $48; //@line 23678
   sp = STACKTOP; //@line 23679
   return;
  }
 } else if ((label | 0) == 17) {
  HEAP32[$123 >> 2] = 0; //@line 23684
  $128 = $122 + 44 | 0; //@line 23685
  $129 = HEAP32[$128 >> 2] | 0; //@line 23686
  if (!$129) {
   HEAP32[$32 >> 2] = 0; //@line 23689
   $160 = HEAP32[$122 >> 2] | 0; //@line 23690
   HEAP32[$34 >> 2] = 0; //@line 23691
   HEAP32[$36 >> 2] = 196; //@line 23692
   HEAP32[$38 >> 2] = $160; //@line 23693
   HEAP32[$40 >> 2] = 724; //@line 23694
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 23695
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 23696
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 23699
    $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 23700
    HEAP32[$161 >> 2] = $52; //@line 23701
    $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 23702
    HEAP32[$162 >> 2] = $4; //@line 23703
    $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 23704
    HEAP32[$163 >> 2] = $$131; //@line 23705
    $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 23706
    HEAP32[$164 >> 2] = $8; //@line 23707
    $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 23708
    HEAP32[$165 >> 2] = $10; //@line 23709
    $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 23710
    HEAP32[$166 >> 2] = $$02972$reg2mem$1; //@line 23711
    $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 23712
    HEAP32[$167 >> 2] = $12; //@line 23713
    $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 23714
    HEAP32[$168 >> 2] = $14; //@line 23715
    $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 23716
    HEAP32[$169 >> 2] = $16; //@line 23717
    $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 23718
    HEAP32[$170 >> 2] = $18; //@line 23719
    $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 23720
    HEAP32[$171 >> 2] = $20; //@line 23721
    $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 23722
    HEAP32[$172 >> 2] = $22; //@line 23723
    $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 23724
    HEAP32[$173 >> 2] = $24; //@line 23725
    $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 23726
    HEAP32[$174 >> 2] = $26; //@line 23727
    $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 23728
    HEAP32[$175 >> 2] = $28; //@line 23729
    $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 23730
    HEAP32[$176 >> 2] = $30; //@line 23731
    $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 23732
    HEAP32[$177 >> 2] = $32; //@line 23733
    $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 23734
    HEAP32[$178 >> 2] = $34; //@line 23735
    $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 23736
    HEAP32[$179 >> 2] = $36; //@line 23737
    $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 23738
    HEAP32[$180 >> 2] = $38; //@line 23739
    $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 23740
    HEAP32[$181 >> 2] = $40; //@line 23741
    $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 23742
    HEAP32[$182 >> 2] = $42; //@line 23743
    $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 23744
    HEAP32[$183 >> 2] = $44; //@line 23745
    $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 23746
    HEAP32[$184 >> 2] = $46; //@line 23747
    $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 23748
    HEAP32[$185 >> 2] = $48; //@line 23749
    sp = STACKTOP; //@line 23750
    return;
   }
   ___async_unwind = 0; //@line 23753
   HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 23754
   $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 23755
   HEAP32[$161 >> 2] = $52; //@line 23756
   $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 23757
   HEAP32[$162 >> 2] = $4; //@line 23758
   $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 23759
   HEAP32[$163 >> 2] = $$131; //@line 23760
   $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 23761
   HEAP32[$164 >> 2] = $8; //@line 23762
   $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 23763
   HEAP32[$165 >> 2] = $10; //@line 23764
   $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 23765
   HEAP32[$166 >> 2] = $$02972$reg2mem$1; //@line 23766
   $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 23767
   HEAP32[$167 >> 2] = $12; //@line 23768
   $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 23769
   HEAP32[$168 >> 2] = $14; //@line 23770
   $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 23771
   HEAP32[$169 >> 2] = $16; //@line 23772
   $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 23773
   HEAP32[$170 >> 2] = $18; //@line 23774
   $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 23775
   HEAP32[$171 >> 2] = $20; //@line 23776
   $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 23777
   HEAP32[$172 >> 2] = $22; //@line 23778
   $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 23779
   HEAP32[$173 >> 2] = $24; //@line 23780
   $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 23781
   HEAP32[$174 >> 2] = $26; //@line 23782
   $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 23783
   HEAP32[$175 >> 2] = $28; //@line 23784
   $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 23785
   HEAP32[$176 >> 2] = $30; //@line 23786
   $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 23787
   HEAP32[$177 >> 2] = $32; //@line 23788
   $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 23789
   HEAP32[$178 >> 2] = $34; //@line 23790
   $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 23791
   HEAP32[$179 >> 2] = $36; //@line 23792
   $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 23793
   HEAP32[$180 >> 2] = $38; //@line 23794
   $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 23795
   HEAP32[$181 >> 2] = $40; //@line 23796
   $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 23797
   HEAP32[$182 >> 2] = $42; //@line 23798
   $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 23799
   HEAP32[$183 >> 2] = $44; //@line 23800
   $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 23801
   HEAP32[$184 >> 2] = $46; //@line 23802
   $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 23803
   HEAP32[$185 >> 2] = $48; //@line 23804
   sp = STACKTOP; //@line 23805
   return;
  } else {
   $133 = HEAP32[$129 + 4 >> 2] | 0; //@line 23810
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 23811
   FUNCTION_TABLE_vii[$133 & 7]($30, $122 + 32 | 0); //@line 23812
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 23815
    $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 23816
    HEAP32[$134 >> 2] = $52; //@line 23817
    $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 23818
    HEAP32[$135 >> 2] = $4; //@line 23819
    $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 23820
    HEAP32[$136 >> 2] = $$131; //@line 23821
    $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 23822
    HEAP32[$137 >> 2] = $8; //@line 23823
    $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 23824
    HEAP32[$138 >> 2] = $10; //@line 23825
    $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 23826
    HEAP32[$139 >> 2] = $$02972$reg2mem$1; //@line 23827
    $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 23828
    HEAP32[$140 >> 2] = $12; //@line 23829
    $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 23830
    HEAP32[$141 >> 2] = $14; //@line 23831
    $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 23832
    HEAP32[$142 >> 2] = $16; //@line 23833
    $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 23834
    HEAP32[$143 >> 2] = $18; //@line 23835
    $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 23836
    HEAP32[$144 >> 2] = $20; //@line 23837
    $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 23838
    HEAP32[$145 >> 2] = $22; //@line 23839
    $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 23840
    HEAP32[$146 >> 2] = $24; //@line 23841
    $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 23842
    HEAP32[$147 >> 2] = $26; //@line 23843
    $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 23844
    HEAP32[$148 >> 2] = $28; //@line 23845
    $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 23846
    HEAP32[$149 >> 2] = $30; //@line 23847
    $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 23848
    HEAP32[$150 >> 2] = $32; //@line 23849
    $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 23850
    HEAP32[$151 >> 2] = $34; //@line 23851
    $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 23852
    HEAP32[$152 >> 2] = $36; //@line 23853
    $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 23854
    HEAP32[$153 >> 2] = $38; //@line 23855
    $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 23856
    HEAP32[$154 >> 2] = $40; //@line 23857
    $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 23858
    HEAP32[$155 >> 2] = $42; //@line 23859
    $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 23860
    HEAP32[$156 >> 2] = $44; //@line 23861
    $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 23862
    HEAP32[$157 >> 2] = $46; //@line 23863
    $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 23864
    HEAP32[$158 >> 2] = $48; //@line 23865
    $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 23866
    HEAP32[$159 >> 2] = $128; //@line 23867
    sp = STACKTOP; //@line 23868
    return;
   }
   ___async_unwind = 0; //@line 23871
   HEAP32[$ReallocAsyncCtx4 >> 2] = 195; //@line 23872
   $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 23873
   HEAP32[$134 >> 2] = $52; //@line 23874
   $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 23875
   HEAP32[$135 >> 2] = $4; //@line 23876
   $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 23877
   HEAP32[$136 >> 2] = $$131; //@line 23878
   $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 23879
   HEAP32[$137 >> 2] = $8; //@line 23880
   $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 23881
   HEAP32[$138 >> 2] = $10; //@line 23882
   $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 23883
   HEAP32[$139 >> 2] = $$02972$reg2mem$1; //@line 23884
   $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 23885
   HEAP32[$140 >> 2] = $12; //@line 23886
   $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 23887
   HEAP32[$141 >> 2] = $14; //@line 23888
   $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 23889
   HEAP32[$142 >> 2] = $16; //@line 23890
   $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 23891
   HEAP32[$143 >> 2] = $18; //@line 23892
   $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 23893
   HEAP32[$144 >> 2] = $20; //@line 23894
   $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 23895
   HEAP32[$145 >> 2] = $22; //@line 23896
   $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 23897
   HEAP32[$146 >> 2] = $24; //@line 23898
   $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 23899
   HEAP32[$147 >> 2] = $26; //@line 23900
   $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 23901
   HEAP32[$148 >> 2] = $28; //@line 23902
   $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 23903
   HEAP32[$149 >> 2] = $30; //@line 23904
   $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 23905
   HEAP32[$150 >> 2] = $32; //@line 23906
   $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 23907
   HEAP32[$151 >> 2] = $34; //@line 23908
   $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 23909
   HEAP32[$152 >> 2] = $36; //@line 23910
   $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 23911
   HEAP32[$153 >> 2] = $38; //@line 23912
   $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 23913
   HEAP32[$154 >> 2] = $40; //@line 23914
   $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 23915
   HEAP32[$155 >> 2] = $42; //@line 23916
   $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 23917
   HEAP32[$156 >> 2] = $44; //@line 23918
   $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 23919
   HEAP32[$157 >> 2] = $46; //@line 23920
   $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 23921
   HEAP32[$158 >> 2] = $48; //@line 23922
   $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 23923
   HEAP32[$159 >> 2] = $128; //@line 23924
   sp = STACKTOP; //@line 23925
   return;
  }
 }
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $65 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25
 STACKTOP = STACKTOP + 288 | 0; //@line 26
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 26
 $3 = sp + 8 | 0; //@line 27
 $4 = sp + 17 | 0; //@line 28
 $5 = sp; //@line 29
 $6 = sp + 16 | 0; //@line 30
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $314 = ___lockfile($0) | 0; //@line 36
 } else {
  $314 = 0; //@line 38
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 40
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 44
  } else {
   $13 = $0 + 4 | 0; //@line 46
   $14 = $0 + 100 | 0; //@line 47
   $15 = $0 + 108 | 0; //@line 48
   $16 = $0 + 8 | 0; //@line 49
   $17 = $4 + 10 | 0; //@line 50
   $18 = $4 + 33 | 0; //@line 51
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 52
   $$0273408 = $1; //@line 53
   $$0283407 = 0; //@line 53
   $$0288404 = 0; //@line 53
   $$0305402 = 0; //@line 53
   $20 = $11; //@line 53
   $315 = 0; //@line 53
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 61
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 64
        $52 = HEAP8[$51 >> 0] | 0; //@line 65
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 74
           $$2275 = $$0273408 + 2 | 0; //@line 74
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n_727($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 91
             $$2275 = $$0273408 + 3 | 0; //@line 91
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 106
           $91 = HEAP32[$90 >> 2] | 0; //@line 107
           HEAP32[$2 >> 2] = $90 + 4; //@line 109
           $$0293 = $91; //@line 110
           $$2275 = $51; //@line 110
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 119
         $$3$lcssa = $$2275; //@line 119
        } else {
         $$0266397 = 0; //@line 121
         $$3396 = $$2275; //@line 121
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 127
          $101 = $$3396 + 1 | 0; //@line 128
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 134
           $$3$lcssa = $101; //@line 134
           break;
          } else {
           $$0266397 = $100; //@line 137
           $$3396 = $101; //@line 137
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 141
        $108 = $$3$lcssa + 1 | 0; //@line 143
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 148
         $$1306 = 0; //@line 148
         $$4 = $108; //@line 148
         $112 = HEAP8[$108 >> 0] | 0; //@line 148
         $318 = 0; //@line 148
        } else {
         $$0270 = 0; //@line 150
         $$1306 = $$0305402; //@line 150
         $$4 = $$3$lcssa; //@line 150
         $112 = $106; //@line 150
         $318 = $315; //@line 150
        }
        $111 = $$4 + 1 | 0; //@line 152
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 156
          $$0268 = $114 ? -2 : -1; //@line 160
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 160
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 165
          $$0268 = $117 ? 3 : 1; //@line 169
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 169
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 173
          $$5 = $111; //@line 173
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 177
          $$5 = $111; //@line 177
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 181
          $$5 = $111; //@line 181
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 185
          $$5 = $$4; //@line 185
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 189
          $319 = $318; //@line 189
          label = 136; //@line 190
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 195
        $122 = ($120 & 47 | 0) == 3; //@line 197
        $$ = $122 ? $120 | 32 : $120; //@line 199
        $$$0268 = $122 ? 1 : $$0268; //@line 200
        $trunc = $$ & 255; //@line 201
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 206
          $$1284 = $$0283407; //@line 206
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 210
          $$1284 = $$0283407; //@line 210
          break;
         }
        case 110:
         {
          _store_int_728($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 216
          $$11 = $$5; //@line 217
          $$1289 = $$0288404; //@line 217
          $$2285 = $$0283407; //@line 217
          $$6311 = $$1306; //@line 217
          $316 = $318; //@line 217
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 222
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 224
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 229
            $134 = HEAPU8[$127 >> 0] | 0; //@line 232
           } else {
            $134 = ___shgetc($0) | 0; //@line 235
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 247
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 250
           HEAP32[$13 >> 2] = $140; //@line 251
           $146 = $140; //@line 253
          }
          $$1267 = $$0266$lcssa; //@line 260
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 260
         }
        }
        ___shlim($0, $$1267); //@line 263
        $148 = HEAP32[$13 >> 2] | 0; //@line 264
        $149 = HEAP32[$14 >> 2] | 0; //@line 265
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 269
         $155 = $149; //@line 270
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 275
          $319 = $318; //@line 275
          label = 136; //@line 276
          break L6;
         }
         $155 = HEAP32[$14 >> 2] | 0; //@line 280
        }
        if ($155 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 286
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 291
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 297
             HEAP8[$4 >> 0] = 0; //@line 298
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 300
              HEAP8[$17 >> 0] = 0; //@line 301
              HEAP8[$17 + 1 >> 0] = 0; //@line 301
              HEAP8[$17 + 2 >> 0] = 0; //@line 301
              HEAP8[$17 + 3 >> 0] = 0; //@line 301
              HEAP8[$17 + 4 >> 0] = 0; //@line 301
              $$9 = $$5; //@line 302
             } else {
              $$9 = $$5; //@line 304
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 307
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 309
             $$0292 = $164 & 1; //@line 311
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 312
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 313
             HEAP8[$4 >> 0] = 0; //@line 314
             $166 = HEAP8[$$6 >> 0] | 0; //@line 315
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 318
               $$sink330 = 46; //@line 318
               label = 65; //@line 319
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 323
               $$sink330 = 94; //@line 323
               label = 65; //@line 324
               break;
              }
             default:
              {
               $$7 = $$6; //@line 328
               $168 = $166; //@line 328
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 333
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 337
               $$7$ph = $$6$pn + 1 | 0; //@line 338
               $$7 = $$7$ph; //@line 340
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 340
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 345
                 $319 = $318; //@line 345
                 label = 136; //@line 346
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 351
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 356
                 $170 = HEAP8[$169 >> 0] | 0; //@line 357
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 360
                   $183 = 45; //@line 360
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 368
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 373
                  $$0286399 = $172 & 255; //@line 374
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 376
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 378
                   $179 = HEAP8[$169 >> 0] | 0; //@line 379
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 385
                  $183 = $179; //@line 385
                 } else {
                  $$8 = $169; //@line 390
                  $183 = $170; //@line 390
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 395
                 $183 = $168; //@line 395
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 401
              $$sink330 = ($183 & 255) + 1 | 0; //@line 401
              label = 65; //@line 402
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 407
           $187 = ($$$0268 | 0) == 1; //@line 408
           $188 = ($$0270 | 0) != 0; //@line 409
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 414
              if (!$190) {
               $$7312 = 0; //@line 417
               $319 = 0; //@line 417
               label = 136; //@line 418
               break L6;
              } else {
               $321 = $190; //@line 421
              }
             } else {
              $321 = $$0293; //@line 424
             }
             HEAP32[$3 >> 2] = 0; //@line 426
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 427
             $$0276$ph = $186; //@line 428
             $$0278$ph = 0; //@line 428
             $$ph = $321; //@line 428
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 430
              $$0278$ph336 = $$0278$ph; //@line 431
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 434
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 439
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 442
                } else {
                 $201 = ___shgetc($0) | 0; //@line 445
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 455
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 459
                  $319 = $$ph; //@line 459
                  label = 136; //@line 460
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 473
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 478
                $$1279 = $$0278$ph336 + 1 | 0; //@line 479
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 486
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 490
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 492
              if (!$213) {
               $$7312 = 0; //@line 495
               $319 = $$ph; //@line 495
               label = 136; //@line 496
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 499
               $$0276$ph = $211; //@line 499
               $$ph = $213; //@line 499
               $$0278$ph = $$0278$ph$phi; //@line 499
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 505
              $319 = $$ph; //@line 505
              label = 136; //@line 506
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 509
              $$4309 = 0; //@line 509
              $$5299 = $$ph; //@line 509
              $322 = $$ph; //@line 509
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 513
              if (!$217) {
               $$7312 = 0; //@line 516
               $319 = 0; //@line 516
               label = 136; //@line 517
               break L6;
              } else {
               $$1277$ph = $186; //@line 520
               $$2280$ph = 0; //@line 520
               $$2307$ph = $217; //@line 520
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 523
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 525
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 530
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 533
                } else {
                 $227 = ___shgetc($0) | 0; //@line 536
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 543
                 $$4309 = $$2307$ph; //@line 543
                 $$5299 = 0; //@line 543
                 $322 = 0; //@line 543
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 549
                $$2280 = $$2280 + 1 | 0; //@line 547
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 558
               $236 = _realloc($$2307$ph, $235) | 0; //@line 559
               if (!$236) {
                $$7312 = $$2307$ph; //@line 562
                $319 = 0; //@line 562
                label = 136; //@line 563
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 566
                $$1277$ph = $235; //@line 566
                $$2307$ph = $236; //@line 566
                $$2280$ph = $$2280$ph$phi; //@line 566
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 573
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 578
                $262 = HEAPU8[$254 >> 0] | 0; //@line 581
               } else {
                $262 = ___shgetc($0) | 0; //@line 584
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 591
                $$4309 = 0; //@line 591
                $$5299 = 0; //@line 591
                $322 = 0; //@line 591
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 596
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 599
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 604
               $247 = HEAPU8[$239 >> 0] | 0; //@line 607
              } else {
               $247 = ___shgetc($0) | 0; //@line 610
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 617
               $$4309 = $$0293; //@line 617
               $$5299 = 0; //@line 617
               $322 = 0; //@line 617
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 623
              $$3281 = $$3281 + 1 | 0; //@line 624
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 632
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 635
            HEAP32[$13 >> 2] = $269; //@line 636
            $274 = $269; //@line 638
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 643
           if (!$275) {
            $$2 = $$0270; //@line 646
            $$2290 = $$0288404; //@line 646
            $$9314 = $$4309; //@line 646
            $312 = $322; //@line 646
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 653
            $$2290 = $$0288404; //@line 653
            $$9314 = $$4309; //@line 653
            $312 = $322; //@line 653
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 659
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 662
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 668
            $$5310 = $$4309; //@line 668
            $320 = $322; //@line 668
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 673
            }
            if (!$$4309) {
             $$10 = $$9; //@line 677
             $$5310 = 0; //@line 677
             $320 = $322; //@line 677
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 681
            $$10 = $$9; //@line 682
            $$5310 = $$4309; //@line 682
            $320 = $322; //@line 682
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 687
           label = 124; //@line 688
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 692
           label = 124; //@line 693
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 697
           label = 124; //@line 698
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 702
           label = 124; //@line 703
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 707
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 714
            $$2290 = $$0288404; //@line 714
            $$9314 = $$1306; //@line 714
            $312 = $318; //@line 714
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 719
            $$5310 = $$1306; //@line 719
            $320 = $318; //@line 719
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 724
              $$10 = $$5; //@line 725
              $$5310 = $$1306; //@line 725
              $320 = $318; //@line 725
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 730
              $$10 = $$5; //@line 731
              $$5310 = $$1306; //@line 731
              $320 = $318; //@line 731
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 736
              $$10 = $$5; //@line 737
              $$5310 = $$1306; //@line 737
              $320 = $318; //@line 737
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 742
              $$5310 = $$1306; //@line 742
              $320 = $318; //@line 742
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 750
           $$5310 = $$1306; //@line 750
           $320 = $318; //@line 750
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 756
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 757
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 765
           $$2290 = $$0288404; //@line 765
           $$9314 = $$1306; //@line 765
           $312 = $318; //@line 765
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 773
           $$10 = $$5; //@line 774
           $$5310 = $$1306; //@line 774
           $320 = $318; //@line 774
           break;
          } else {
           _store_int_728($$0293, $$$0268, $282, tempRet0); //@line 777
           $$10 = $$5; //@line 778
           $$5310 = $$1306; //@line 778
           $320 = $318; //@line 778
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 792
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 792
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 792
        $$6311 = $$5310; //@line 792
        $316 = $320; //@line 792
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 797
      ___shlim($0, 0); //@line 798
      $55 = HEAP32[$13 >> 2] | 0; //@line 799
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 804
       $65 = HEAPU8[$55 >> 0] | 0; //@line 807
      } else {
       $65 = ___shgetc($0) | 0; //@line 810
      }
      if (($65 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 816
       break L6;
      }
      $$11 = $54; //@line 820
      $$1289 = $$0288404; //@line 820
      $$2285 = $$0283407 + 1 | 0; //@line 820
      $$6311 = $$0305402; //@line 820
      $316 = $315; //@line 820
     } else {
      $$1274 = $$0273408; //@line 822
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 824
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 832
       }
      }
      ___shlim($0, 0); //@line 835
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 837
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 842
        $35 = HEAPU8[$28 >> 0] | 0; //@line 845
       } else {
        $35 = ___shgetc($0) | 0; //@line 848
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 860
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 863
       HEAP32[$13 >> 2] = $41; //@line 864
       $47 = $41; //@line 866
      }
      $$11 = $$1274; //@line 873
      $$1289 = $$0288404; //@line 873
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 873
      $$6311 = $$0305402; //@line 873
      $316 = $315; //@line 873
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 876
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 877
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 880
     break L4;
    } else {
     $$0283407 = $$2285; //@line 883
     $$0288404 = $$1289; //@line 883
     $$0305402 = $$6311; //@line 883
     $315 = $316; //@line 883
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 892
    }
    if (($$0288404 | 0) != 0 | ($65 | 0) > -1) {
     $$3291 = $$0288404; //@line 898
     break;
    } else {
     $$1271 = 0; //@line 901
     $$8313 = $$0305402; //@line 901
     $317 = $315; //@line 901
     label = 137; //@line 902
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 908
     $$8313 = $$7312; //@line 908
     $317 = $319; //@line 908
     label = 137; //@line 909
    } else {
     $$2 = $$0270; //@line 911
     $$2290 = $$0288404; //@line 911
     $$9314 = $$7312; //@line 911
     $312 = $319; //@line 911
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 915
    $$2290 = -1; //@line 915
    $$9314 = $$8313; //@line 915
    $312 = $317; //@line 915
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 919
   } else {
    _free($$9314); //@line 921
    _free($312); //@line 922
    $$3291 = $$2290; //@line 923
   }
  }
 } while (0);
 if ($314 | 0) {
  ___unlockfile($0); //@line 929
 }
 STACKTOP = sp; //@line 931
 return $$3291 | 0; //@line 931
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_92($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $118 = 0, $119 = 0, $12 = 0, $126 = 0, $127 = 0, $130 = 0, $133 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $184 = 0, $186 = 0, $194 = 0, $197 = 0, $199 = 0, $2 = 0, $20 = 0, $207 = 0, $210 = 0, $212 = 0, $22 = 0, $220 = 0, $223 = 0, $225 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $26 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19079
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19081
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19083
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19085
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19087
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19089
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19091
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19093
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19095
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19097
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19099
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19101
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19103
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19105
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19107
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19109
 $30 = $6 + 12 | 0; //@line 19110
 HEAP32[$30 >> 2] = $AsyncRetVal; //@line 19111
 _strcpy($AsyncRetVal, $16) | 0; //@line 19112
 HEAP32[$6 + 4 >> 2] = -3012; //@line 19114
 do {
  if (($8 | 0) != ($18 | 0)) {
   $33 = $6 + 28 | 0; //@line 19118
   $34 = HEAP32[$33 >> 2] | 0; //@line 19119
   if ($34 | 0) {
    $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 19123
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(64) | 0; //@line 19124
    FUNCTION_TABLE_vi[$37 & 511]($8); //@line 19125
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 173; //@line 19128
     $38 = $ReallocAsyncCtx2 + 4 | 0; //@line 19129
     HEAP32[$38 >> 2] = $30; //@line 19130
     $39 = $ReallocAsyncCtx2 + 8 | 0; //@line 19131
     HEAP32[$39 >> 2] = $6; //@line 19132
     $40 = $ReallocAsyncCtx2 + 12 | 0; //@line 19133
     HEAP32[$40 >> 2] = $8; //@line 19134
     $41 = $ReallocAsyncCtx2 + 16 | 0; //@line 19135
     HEAP32[$41 >> 2] = $10; //@line 19136
     $42 = $ReallocAsyncCtx2 + 20 | 0; //@line 19137
     HEAP32[$42 >> 2] = $12; //@line 19138
     $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 19139
     HEAP32[$43 >> 2] = $28; //@line 19140
     $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 19141
     HEAP32[$44 >> 2] = $20; //@line 19142
     $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 19143
     HEAP32[$45 >> 2] = $2; //@line 19144
     $46 = $ReallocAsyncCtx2 + 36 | 0; //@line 19145
     HEAP32[$46 >> 2] = $4; //@line 19146
     $47 = $ReallocAsyncCtx2 + 40 | 0; //@line 19147
     HEAP32[$47 >> 2] = $22; //@line 19148
     $48 = $ReallocAsyncCtx2 + 44 | 0; //@line 19149
     HEAP32[$48 >> 2] = $24; //@line 19150
     $49 = $ReallocAsyncCtx2 + 48 | 0; //@line 19151
     HEAP32[$49 >> 2] = $26; //@line 19152
     $50 = $ReallocAsyncCtx2 + 52 | 0; //@line 19153
     HEAP32[$50 >> 2] = $18; //@line 19154
     $51 = $ReallocAsyncCtx2 + 56 | 0; //@line 19155
     HEAP32[$51 >> 2] = $33; //@line 19156
     $52 = $ReallocAsyncCtx2 + 60 | 0; //@line 19157
     HEAP32[$52 >> 2] = $14; //@line 19158
     sp = STACKTOP; //@line 19159
     return;
    }
    ___async_unwind = 0; //@line 19162
    HEAP32[$ReallocAsyncCtx2 >> 2] = 173; //@line 19163
    $38 = $ReallocAsyncCtx2 + 4 | 0; //@line 19164
    HEAP32[$38 >> 2] = $30; //@line 19165
    $39 = $ReallocAsyncCtx2 + 8 | 0; //@line 19166
    HEAP32[$39 >> 2] = $6; //@line 19167
    $40 = $ReallocAsyncCtx2 + 12 | 0; //@line 19168
    HEAP32[$40 >> 2] = $8; //@line 19169
    $41 = $ReallocAsyncCtx2 + 16 | 0; //@line 19170
    HEAP32[$41 >> 2] = $10; //@line 19171
    $42 = $ReallocAsyncCtx2 + 20 | 0; //@line 19172
    HEAP32[$42 >> 2] = $12; //@line 19173
    $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 19174
    HEAP32[$43 >> 2] = $28; //@line 19175
    $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 19176
    HEAP32[$44 >> 2] = $20; //@line 19177
    $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 19178
    HEAP32[$45 >> 2] = $2; //@line 19179
    $46 = $ReallocAsyncCtx2 + 36 | 0; //@line 19180
    HEAP32[$46 >> 2] = $4; //@line 19181
    $47 = $ReallocAsyncCtx2 + 40 | 0; //@line 19182
    HEAP32[$47 >> 2] = $22; //@line 19183
    $48 = $ReallocAsyncCtx2 + 44 | 0; //@line 19184
    HEAP32[$48 >> 2] = $24; //@line 19185
    $49 = $ReallocAsyncCtx2 + 48 | 0; //@line 19186
    HEAP32[$49 >> 2] = $26; //@line 19187
    $50 = $ReallocAsyncCtx2 + 52 | 0; //@line 19188
    HEAP32[$50 >> 2] = $18; //@line 19189
    $51 = $ReallocAsyncCtx2 + 56 | 0; //@line 19190
    HEAP32[$51 >> 2] = $33; //@line 19191
    $52 = $ReallocAsyncCtx2 + 60 | 0; //@line 19192
    HEAP32[$52 >> 2] = $14; //@line 19193
    sp = STACKTOP; //@line 19194
    return;
   }
   $53 = $18 + 12 | 0; //@line 19197
   $54 = HEAP32[$53 >> 2] | 0; //@line 19198
   if (!$54) {
    HEAP32[$33 >> 2] = 0; //@line 19201
    break;
   }
   $57 = HEAP32[$54 + 4 >> 2] | 0; //@line 19205
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 19206
   FUNCTION_TABLE_vii[$57 & 7]($8, $18); //@line 19207
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 19210
    $58 = $ReallocAsyncCtx3 + 4 | 0; //@line 19211
    HEAP32[$58 >> 2] = $2; //@line 19212
    $59 = $ReallocAsyncCtx3 + 8 | 0; //@line 19213
    HEAP32[$59 >> 2] = $6; //@line 19214
    $60 = $ReallocAsyncCtx3 + 12 | 0; //@line 19215
    HEAP32[$60 >> 2] = $53; //@line 19216
    $61 = $ReallocAsyncCtx3 + 16 | 0; //@line 19217
    HEAP32[$61 >> 2] = $30; //@line 19218
    $62 = $ReallocAsyncCtx3 + 20 | 0; //@line 19219
    HEAP32[$62 >> 2] = $4; //@line 19220
    $63 = $ReallocAsyncCtx3 + 24 | 0; //@line 19221
    HEAP32[$63 >> 2] = $8; //@line 19222
    $64 = $ReallocAsyncCtx3 + 28 | 0; //@line 19223
    HEAP32[$64 >> 2] = $20; //@line 19224
    $65 = $ReallocAsyncCtx3 + 32 | 0; //@line 19225
    HEAP32[$65 >> 2] = $22; //@line 19226
    $66 = $ReallocAsyncCtx3 + 36 | 0; //@line 19227
    HEAP32[$66 >> 2] = $10; //@line 19228
    $67 = $ReallocAsyncCtx3 + 40 | 0; //@line 19229
    HEAP32[$67 >> 2] = $12; //@line 19230
    $68 = $ReallocAsyncCtx3 + 44 | 0; //@line 19231
    HEAP32[$68 >> 2] = $24; //@line 19232
    $69 = $ReallocAsyncCtx3 + 48 | 0; //@line 19233
    HEAP32[$69 >> 2] = $26; //@line 19234
    $70 = $ReallocAsyncCtx3 + 52 | 0; //@line 19235
    HEAP32[$70 >> 2] = $33; //@line 19236
    $71 = $ReallocAsyncCtx3 + 56 | 0; //@line 19237
    HEAP32[$71 >> 2] = $14; //@line 19238
    $72 = $ReallocAsyncCtx3 + 60 | 0; //@line 19239
    HEAP32[$72 >> 2] = $28; //@line 19240
    sp = STACKTOP; //@line 19241
    return;
   }
   ___async_unwind = 0; //@line 19244
   HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 19245
   $58 = $ReallocAsyncCtx3 + 4 | 0; //@line 19246
   HEAP32[$58 >> 2] = $2; //@line 19247
   $59 = $ReallocAsyncCtx3 + 8 | 0; //@line 19248
   HEAP32[$59 >> 2] = $6; //@line 19249
   $60 = $ReallocAsyncCtx3 + 12 | 0; //@line 19250
   HEAP32[$60 >> 2] = $53; //@line 19251
   $61 = $ReallocAsyncCtx3 + 16 | 0; //@line 19252
   HEAP32[$61 >> 2] = $30; //@line 19253
   $62 = $ReallocAsyncCtx3 + 20 | 0; //@line 19254
   HEAP32[$62 >> 2] = $4; //@line 19255
   $63 = $ReallocAsyncCtx3 + 24 | 0; //@line 19256
   HEAP32[$63 >> 2] = $8; //@line 19257
   $64 = $ReallocAsyncCtx3 + 28 | 0; //@line 19258
   HEAP32[$64 >> 2] = $20; //@line 19259
   $65 = $ReallocAsyncCtx3 + 32 | 0; //@line 19260
   HEAP32[$65 >> 2] = $22; //@line 19261
   $66 = $ReallocAsyncCtx3 + 36 | 0; //@line 19262
   HEAP32[$66 >> 2] = $10; //@line 19263
   $67 = $ReallocAsyncCtx3 + 40 | 0; //@line 19264
   HEAP32[$67 >> 2] = $12; //@line 19265
   $68 = $ReallocAsyncCtx3 + 44 | 0; //@line 19266
   HEAP32[$68 >> 2] = $24; //@line 19267
   $69 = $ReallocAsyncCtx3 + 48 | 0; //@line 19268
   HEAP32[$69 >> 2] = $26; //@line 19269
   $70 = $ReallocAsyncCtx3 + 52 | 0; //@line 19270
   HEAP32[$70 >> 2] = $33; //@line 19271
   $71 = $ReallocAsyncCtx3 + 56 | 0; //@line 19272
   HEAP32[$71 >> 2] = $14; //@line 19273
   $72 = $ReallocAsyncCtx3 + 60 | 0; //@line 19274
   HEAP32[$72 >> 2] = $28; //@line 19275
   sp = STACKTOP; //@line 19276
   return;
  }
 } while (0);
 $73 = $6 + 32 | 0; //@line 19280
 do {
  if (($73 | 0) != ($22 | 0)) {
   $75 = $6 + 44 | 0; //@line 19284
   $76 = HEAP32[$75 >> 2] | 0; //@line 19285
   if ($76 | 0) {
    $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 19289
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 19290
    FUNCTION_TABLE_vi[$79 & 511]($73); //@line 19291
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 19294
     $80 = $ReallocAsyncCtx4 + 4 | 0; //@line 19295
     HEAP32[$80 >> 2] = $2; //@line 19296
     $81 = $ReallocAsyncCtx4 + 8 | 0; //@line 19297
     HEAP32[$81 >> 2] = $73; //@line 19298
     $82 = $ReallocAsyncCtx4 + 12 | 0; //@line 19299
     HEAP32[$82 >> 2] = $6; //@line 19300
     $83 = $ReallocAsyncCtx4 + 16 | 0; //@line 19301
     HEAP32[$83 >> 2] = $30; //@line 19302
     $84 = $ReallocAsyncCtx4 + 20 | 0; //@line 19303
     HEAP32[$84 >> 2] = $4; //@line 19304
     $85 = $ReallocAsyncCtx4 + 24 | 0; //@line 19305
     HEAP32[$85 >> 2] = $8; //@line 19306
     $86 = $ReallocAsyncCtx4 + 28 | 0; //@line 19307
     HEAP32[$86 >> 2] = $20; //@line 19308
     $87 = $ReallocAsyncCtx4 + 32 | 0; //@line 19309
     HEAP32[$87 >> 2] = $22; //@line 19310
     $88 = $ReallocAsyncCtx4 + 36 | 0; //@line 19311
     HEAP32[$88 >> 2] = $10; //@line 19312
     $89 = $ReallocAsyncCtx4 + 40 | 0; //@line 19313
     HEAP32[$89 >> 2] = $12; //@line 19314
     $90 = $ReallocAsyncCtx4 + 44 | 0; //@line 19315
     HEAP32[$90 >> 2] = $24; //@line 19316
     $91 = $ReallocAsyncCtx4 + 48 | 0; //@line 19317
     HEAP32[$91 >> 2] = $26; //@line 19318
     $92 = $ReallocAsyncCtx4 + 52 | 0; //@line 19319
     HEAP32[$92 >> 2] = $75; //@line 19320
     $93 = $ReallocAsyncCtx4 + 56 | 0; //@line 19321
     HEAP32[$93 >> 2] = $14; //@line 19322
     $94 = $ReallocAsyncCtx4 + 60 | 0; //@line 19323
     HEAP32[$94 >> 2] = $28; //@line 19324
     sp = STACKTOP; //@line 19325
     return;
    }
    ___async_unwind = 0; //@line 19328
    HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 19329
    $80 = $ReallocAsyncCtx4 + 4 | 0; //@line 19330
    HEAP32[$80 >> 2] = $2; //@line 19331
    $81 = $ReallocAsyncCtx4 + 8 | 0; //@line 19332
    HEAP32[$81 >> 2] = $73; //@line 19333
    $82 = $ReallocAsyncCtx4 + 12 | 0; //@line 19334
    HEAP32[$82 >> 2] = $6; //@line 19335
    $83 = $ReallocAsyncCtx4 + 16 | 0; //@line 19336
    HEAP32[$83 >> 2] = $30; //@line 19337
    $84 = $ReallocAsyncCtx4 + 20 | 0; //@line 19338
    HEAP32[$84 >> 2] = $4; //@line 19339
    $85 = $ReallocAsyncCtx4 + 24 | 0; //@line 19340
    HEAP32[$85 >> 2] = $8; //@line 19341
    $86 = $ReallocAsyncCtx4 + 28 | 0; //@line 19342
    HEAP32[$86 >> 2] = $20; //@line 19343
    $87 = $ReallocAsyncCtx4 + 32 | 0; //@line 19344
    HEAP32[$87 >> 2] = $22; //@line 19345
    $88 = $ReallocAsyncCtx4 + 36 | 0; //@line 19346
    HEAP32[$88 >> 2] = $10; //@line 19347
    $89 = $ReallocAsyncCtx4 + 40 | 0; //@line 19348
    HEAP32[$89 >> 2] = $12; //@line 19349
    $90 = $ReallocAsyncCtx4 + 44 | 0; //@line 19350
    HEAP32[$90 >> 2] = $24; //@line 19351
    $91 = $ReallocAsyncCtx4 + 48 | 0; //@line 19352
    HEAP32[$91 >> 2] = $26; //@line 19353
    $92 = $ReallocAsyncCtx4 + 52 | 0; //@line 19354
    HEAP32[$92 >> 2] = $75; //@line 19355
    $93 = $ReallocAsyncCtx4 + 56 | 0; //@line 19356
    HEAP32[$93 >> 2] = $14; //@line 19357
    $94 = $ReallocAsyncCtx4 + 60 | 0; //@line 19358
    HEAP32[$94 >> 2] = $28; //@line 19359
    sp = STACKTOP; //@line 19360
    return;
   }
   $95 = $22 + 12 | 0; //@line 19363
   $96 = HEAP32[$95 >> 2] | 0; //@line 19364
   if (!$96) {
    HEAP32[$75 >> 2] = 0; //@line 19367
    break;
   }
   $99 = HEAP32[$96 + 4 >> 2] | 0; //@line 19371
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 19372
   FUNCTION_TABLE_vii[$99 & 7]($73, $22); //@line 19373
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 19376
    $100 = $ReallocAsyncCtx5 + 4 | 0; //@line 19377
    HEAP32[$100 >> 2] = $2; //@line 19378
    $101 = $ReallocAsyncCtx5 + 8 | 0; //@line 19379
    HEAP32[$101 >> 2] = $73; //@line 19380
    $102 = $ReallocAsyncCtx5 + 12 | 0; //@line 19381
    HEAP32[$102 >> 2] = $6; //@line 19382
    $103 = $ReallocAsyncCtx5 + 16 | 0; //@line 19383
    HEAP32[$103 >> 2] = $30; //@line 19384
    $104 = $ReallocAsyncCtx5 + 20 | 0; //@line 19385
    HEAP32[$104 >> 2] = $4; //@line 19386
    $105 = $ReallocAsyncCtx5 + 24 | 0; //@line 19387
    HEAP32[$105 >> 2] = $8; //@line 19388
    $106 = $ReallocAsyncCtx5 + 28 | 0; //@line 19389
    HEAP32[$106 >> 2] = $20; //@line 19390
    $107 = $ReallocAsyncCtx5 + 32 | 0; //@line 19391
    HEAP32[$107 >> 2] = $10; //@line 19392
    $108 = $ReallocAsyncCtx5 + 36 | 0; //@line 19393
    HEAP32[$108 >> 2] = $12; //@line 19394
    $109 = $ReallocAsyncCtx5 + 40 | 0; //@line 19395
    HEAP32[$109 >> 2] = $24; //@line 19396
    $110 = $ReallocAsyncCtx5 + 44 | 0; //@line 19397
    HEAP32[$110 >> 2] = $26; //@line 19398
    $111 = $ReallocAsyncCtx5 + 48 | 0; //@line 19399
    HEAP32[$111 >> 2] = $75; //@line 19400
    $112 = $ReallocAsyncCtx5 + 52 | 0; //@line 19401
    HEAP32[$112 >> 2] = $95; //@line 19402
    $113 = $ReallocAsyncCtx5 + 56 | 0; //@line 19403
    HEAP32[$113 >> 2] = $14; //@line 19404
    $114 = $ReallocAsyncCtx5 + 60 | 0; //@line 19405
    HEAP32[$114 >> 2] = $28; //@line 19406
    sp = STACKTOP; //@line 19407
    return;
   }
   ___async_unwind = 0; //@line 19410
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 19411
   $100 = $ReallocAsyncCtx5 + 4 | 0; //@line 19412
   HEAP32[$100 >> 2] = $2; //@line 19413
   $101 = $ReallocAsyncCtx5 + 8 | 0; //@line 19414
   HEAP32[$101 >> 2] = $73; //@line 19415
   $102 = $ReallocAsyncCtx5 + 12 | 0; //@line 19416
   HEAP32[$102 >> 2] = $6; //@line 19417
   $103 = $ReallocAsyncCtx5 + 16 | 0; //@line 19418
   HEAP32[$103 >> 2] = $30; //@line 19419
   $104 = $ReallocAsyncCtx5 + 20 | 0; //@line 19420
   HEAP32[$104 >> 2] = $4; //@line 19421
   $105 = $ReallocAsyncCtx5 + 24 | 0; //@line 19422
   HEAP32[$105 >> 2] = $8; //@line 19423
   $106 = $ReallocAsyncCtx5 + 28 | 0; //@line 19424
   HEAP32[$106 >> 2] = $20; //@line 19425
   $107 = $ReallocAsyncCtx5 + 32 | 0; //@line 19426
   HEAP32[$107 >> 2] = $10; //@line 19427
   $108 = $ReallocAsyncCtx5 + 36 | 0; //@line 19428
   HEAP32[$108 >> 2] = $12; //@line 19429
   $109 = $ReallocAsyncCtx5 + 40 | 0; //@line 19430
   HEAP32[$109 >> 2] = $24; //@line 19431
   $110 = $ReallocAsyncCtx5 + 44 | 0; //@line 19432
   HEAP32[$110 >> 2] = $26; //@line 19433
   $111 = $ReallocAsyncCtx5 + 48 | 0; //@line 19434
   HEAP32[$111 >> 2] = $75; //@line 19435
   $112 = $ReallocAsyncCtx5 + 52 | 0; //@line 19436
   HEAP32[$112 >> 2] = $95; //@line 19437
   $113 = $ReallocAsyncCtx5 + 56 | 0; //@line 19438
   HEAP32[$113 >> 2] = $14; //@line 19439
   $114 = $ReallocAsyncCtx5 + 60 | 0; //@line 19440
   HEAP32[$114 >> 2] = $28; //@line 19441
   sp = STACKTOP; //@line 19442
   return;
  }
 } while (0);
 HEAP32[$6 + 8 >> 2] = $20; //@line 19447
 HEAP32[$6 + 48 >> 2] = $24; //@line 19449
 HEAP32[$6 + 52 >> 2] = $26; //@line 19451
 $118 = $6 + 56 | 0; //@line 19452
 HEAP32[$118 >> 2] = 0; //@line 19453
 $119 = $6 + 60 | 0; //@line 19454
 HEAP32[$119 >> 2] = 0; //@line 19455
 HEAP32[$6 + 64 >> 2] = 0; //@line 19457
 HEAP8[$6 + 82 >> 0] = 0; //@line 19459
 HEAP8[$6 + 83 >> 0] = 1; //@line 19461
 HEAP8[$6 + 84 >> 0] = 3; //@line 19463
 HEAP16[$6 + 80 >> 1] = 0; //@line 19465
 HEAP32[$6 + 76 >> 2] = 0; //@line 19467
 $126 = $6 + 72 | 0; //@line 19468
 HEAP32[$126 >> 2] = 15500; //@line 19469
 $127 = HEAP32[177] | 0; //@line 19470
 HEAP32[177] = $127 + 1; //@line 19472
 $$ = ($127 | 0) > 32767 ? 1 : $127; //@line 19474
 HEAP32[$6 >> 2] = $$; //@line 19475
 $130 = HEAP32[2518] | 0; //@line 19476
 if (!$130) {
  $$1 = 0; //@line 19479
  $184 = 0; //@line 19479
 } else {
  $133 = HEAP32[$130 + 56 >> 2] | 0; //@line 19482
  if (!$133) {
   $$1 = 1; //@line 19485
   $184 = 0; //@line 19485
  } else {
   if ((HEAP32[$130 + 8 >> 2] | 0) == ($20 | 0)) {
    HEAP32[$118 >> 2] = $133; //@line 19491
    HEAP32[$119 >> 2] = HEAP32[$130 + 60 >> 2]; //@line 19494
    $$1 = 1; //@line 19495
    $184 = $133; //@line 19495
   } else {
    $$1 = 1; //@line 19497
    $184 = 0; //@line 19497
   }
  }
 }
 $140 = HEAP32[2519] | 0; //@line 19501
 if (!$140) {
  $$1$1 = $$1; //@line 19504
  $197 = $184; //@line 19504
 } else {
  if (!$184) {
   $186 = HEAP32[$140 + 56 >> 2] | 0; //@line 19509
   if (!$186) {
    $239 = 0; //@line 19512
   } else {
    if ((HEAP32[$140 + 8 >> 2] | 0) == ($20 | 0)) {
     HEAP32[$118 >> 2] = $186; //@line 19518
     HEAP32[$119 >> 2] = HEAP32[$140 + 60 >> 2]; //@line 19521
     $239 = $186; //@line 19522
    } else {
     $239 = 0; //@line 19524
    }
   }
  } else {
   $239 = $184; //@line 19528
  }
  $$1$1 = $$1 + 1 | 0; //@line 19531
  $197 = $239; //@line 19531
 }
 $194 = HEAP32[2520] | 0; //@line 19533
 if (!$194) {
  $$1$2 = $$1$1; //@line 19536
  $210 = $197; //@line 19536
 } else {
  if (!$197) {
   $199 = HEAP32[$194 + 56 >> 2] | 0; //@line 19541
   if (!$199) {
    $240 = 0; //@line 19544
   } else {
    if ((HEAP32[$194 + 8 >> 2] | 0) == ($20 | 0)) {
     HEAP32[$118 >> 2] = $199; //@line 19550
     HEAP32[$119 >> 2] = HEAP32[$194 + 60 >> 2]; //@line 19553
     $240 = $199; //@line 19554
    } else {
     $240 = 0; //@line 19556
    }
   }
  } else {
   $240 = $197; //@line 19560
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 19563
  $210 = $240; //@line 19563
 }
 $207 = HEAP32[2521] | 0; //@line 19565
 if (!$207) {
  $$1$3 = $$1$2; //@line 19568
  $223 = $210; //@line 19568
 } else {
  if (!$210) {
   $212 = HEAP32[$207 + 56 >> 2] | 0; //@line 19573
   if (!$212) {
    $241 = 0; //@line 19576
   } else {
    if ((HEAP32[$207 + 8 >> 2] | 0) == ($20 | 0)) {
     HEAP32[$118 >> 2] = $212; //@line 19582
     HEAP32[$119 >> 2] = HEAP32[$207 + 60 >> 2]; //@line 19585
     $241 = $212; //@line 19586
    } else {
     $241 = 0; //@line 19588
    }
   }
  } else {
   $241 = $210; //@line 19592
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 19595
  $223 = $241; //@line 19595
 }
 $220 = HEAP32[2522] | 0; //@line 19597
 if (!$220) {
  HEAP32[10072 + ($28 << 2) >> 2] = $6; //@line 19601
  HEAP32[$126 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 19604
  if (!$$1$3) {
   $142 = $6 + 44 | 0; //@line 19607
   $143 = HEAP32[$142 >> 2] | 0; //@line 19608
   if (!$143) {
    $159 = $2 + 12 | 0; //@line 19611
    HEAP32[$159 >> 2] = 0; //@line 19612
    $161 = $4 + 4 | 0; //@line 19614
    HEAP32[$161 >> 2] = 0; //@line 19616
    HEAP32[$161 + 4 >> 2] = 0; //@line 19619
    HEAP32[$4 >> 2] = 3; //@line 19620
    $165 = $4 + 12 | 0; //@line 19621
    HEAP32[$165 >> 2] = 712; //@line 19622
    $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 19623
    $166 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $4) | 0; //@line 19624
    if (___async) {
     HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 19627
     $167 = $ReallocAsyncCtx19 + 4 | 0; //@line 19628
     HEAP32[$167 >> 2] = $30; //@line 19629
     $168 = $ReallocAsyncCtx19 + 8 | 0; //@line 19630
     HEAP32[$168 >> 2] = $6; //@line 19631
     $169 = $ReallocAsyncCtx19 + 12 | 0; //@line 19632
     HEAP32[$169 >> 2] = $6; //@line 19633
     $170 = $ReallocAsyncCtx19 + 16 | 0; //@line 19634
     HEAP32[$170 >> 2] = $8; //@line 19635
     $171 = $ReallocAsyncCtx19 + 20 | 0; //@line 19636
     HEAP32[$171 >> 2] = $142; //@line 19637
     $172 = $ReallocAsyncCtx19 + 24 | 0; //@line 19638
     HEAP32[$172 >> 2] = $73; //@line 19639
     $173 = $ReallocAsyncCtx19 + 28 | 0; //@line 19640
     HEAP32[$173 >> 2] = $10; //@line 19641
     $174 = $ReallocAsyncCtx19 + 32 | 0; //@line 19642
     HEAP32[$174 >> 2] = $12; //@line 19643
     $175 = $ReallocAsyncCtx19 + 36 | 0; //@line 19644
     HEAP32[$175 >> 2] = $142; //@line 19645
     $176 = $ReallocAsyncCtx19 + 40 | 0; //@line 19646
     HEAP32[$176 >> 2] = $14; //@line 19647
     $177 = $ReallocAsyncCtx19 + 44 | 0; //@line 19648
     HEAP32[$177 >> 2] = $159; //@line 19649
     $178 = $ReallocAsyncCtx19 + 48 | 0; //@line 19650
     HEAP32[$178 >> 2] = $4; //@line 19651
     $179 = $ReallocAsyncCtx19 + 52 | 0; //@line 19652
     HEAP32[$179 >> 2] = $2; //@line 19653
     $180 = $ReallocAsyncCtx19 + 56 | 0; //@line 19654
     HEAP32[$180 >> 2] = $165; //@line 19655
     sp = STACKTOP; //@line 19656
     return;
    }
    HEAP32[___async_retval >> 2] = $166; //@line 19660
    ___async_unwind = 0; //@line 19661
    HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 19662
    $167 = $ReallocAsyncCtx19 + 4 | 0; //@line 19663
    HEAP32[$167 >> 2] = $30; //@line 19664
    $168 = $ReallocAsyncCtx19 + 8 | 0; //@line 19665
    HEAP32[$168 >> 2] = $6; //@line 19666
    $169 = $ReallocAsyncCtx19 + 12 | 0; //@line 19667
    HEAP32[$169 >> 2] = $6; //@line 19668
    $170 = $ReallocAsyncCtx19 + 16 | 0; //@line 19669
    HEAP32[$170 >> 2] = $8; //@line 19670
    $171 = $ReallocAsyncCtx19 + 20 | 0; //@line 19671
    HEAP32[$171 >> 2] = $142; //@line 19672
    $172 = $ReallocAsyncCtx19 + 24 | 0; //@line 19673
    HEAP32[$172 >> 2] = $73; //@line 19674
    $173 = $ReallocAsyncCtx19 + 28 | 0; //@line 19675
    HEAP32[$173 >> 2] = $10; //@line 19676
    $174 = $ReallocAsyncCtx19 + 32 | 0; //@line 19677
    HEAP32[$174 >> 2] = $12; //@line 19678
    $175 = $ReallocAsyncCtx19 + 36 | 0; //@line 19679
    HEAP32[$175 >> 2] = $142; //@line 19680
    $176 = $ReallocAsyncCtx19 + 40 | 0; //@line 19681
    HEAP32[$176 >> 2] = $14; //@line 19682
    $177 = $ReallocAsyncCtx19 + 44 | 0; //@line 19683
    HEAP32[$177 >> 2] = $159; //@line 19684
    $178 = $ReallocAsyncCtx19 + 48 | 0; //@line 19685
    HEAP32[$178 >> 2] = $4; //@line 19686
    $179 = $ReallocAsyncCtx19 + 52 | 0; //@line 19687
    HEAP32[$179 >> 2] = $2; //@line 19688
    $180 = $ReallocAsyncCtx19 + 56 | 0; //@line 19689
    HEAP32[$180 >> 2] = $165; //@line 19690
    sp = STACKTOP; //@line 19691
    return;
   } else {
    $146 = HEAP32[$143 + 4 >> 2] | 0; //@line 19695
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(52) | 0; //@line 19696
    FUNCTION_TABLE_vii[$146 & 7]($2, $73); //@line 19697
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 19700
     $147 = $ReallocAsyncCtx6 + 4 | 0; //@line 19701
     HEAP32[$147 >> 2] = $30; //@line 19702
     $148 = $ReallocAsyncCtx6 + 8 | 0; //@line 19703
     HEAP32[$148 >> 2] = $142; //@line 19704
     $149 = $ReallocAsyncCtx6 + 12 | 0; //@line 19705
     HEAP32[$149 >> 2] = $2; //@line 19706
     $150 = $ReallocAsyncCtx6 + 16 | 0; //@line 19707
     HEAP32[$150 >> 2] = $4; //@line 19708
     $151 = $ReallocAsyncCtx6 + 20 | 0; //@line 19709
     HEAP32[$151 >> 2] = $6; //@line 19710
     $152 = $ReallocAsyncCtx6 + 24 | 0; //@line 19711
     HEAP32[$152 >> 2] = $6; //@line 19712
     $153 = $ReallocAsyncCtx6 + 28 | 0; //@line 19713
     HEAP32[$153 >> 2] = $8; //@line 19714
     $154 = $ReallocAsyncCtx6 + 32 | 0; //@line 19715
     HEAP32[$154 >> 2] = $142; //@line 19716
     $155 = $ReallocAsyncCtx6 + 36 | 0; //@line 19717
     HEAP32[$155 >> 2] = $10; //@line 19718
     $156 = $ReallocAsyncCtx6 + 40 | 0; //@line 19719
     HEAP32[$156 >> 2] = $73; //@line 19720
     $157 = $ReallocAsyncCtx6 + 44 | 0; //@line 19721
     HEAP32[$157 >> 2] = $12; //@line 19722
     $158 = $ReallocAsyncCtx6 + 48 | 0; //@line 19723
     HEAP32[$158 >> 2] = $14; //@line 19724
     sp = STACKTOP; //@line 19725
     return;
    }
    ___async_unwind = 0; //@line 19728
    HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 19729
    $147 = $ReallocAsyncCtx6 + 4 | 0; //@line 19730
    HEAP32[$147 >> 2] = $30; //@line 19731
    $148 = $ReallocAsyncCtx6 + 8 | 0; //@line 19732
    HEAP32[$148 >> 2] = $142; //@line 19733
    $149 = $ReallocAsyncCtx6 + 12 | 0; //@line 19734
    HEAP32[$149 >> 2] = $2; //@line 19735
    $150 = $ReallocAsyncCtx6 + 16 | 0; //@line 19736
    HEAP32[$150 >> 2] = $4; //@line 19737
    $151 = $ReallocAsyncCtx6 + 20 | 0; //@line 19738
    HEAP32[$151 >> 2] = $6; //@line 19739
    $152 = $ReallocAsyncCtx6 + 24 | 0; //@line 19740
    HEAP32[$152 >> 2] = $6; //@line 19741
    $153 = $ReallocAsyncCtx6 + 28 | 0; //@line 19742
    HEAP32[$153 >> 2] = $8; //@line 19743
    $154 = $ReallocAsyncCtx6 + 32 | 0; //@line 19744
    HEAP32[$154 >> 2] = $142; //@line 19745
    $155 = $ReallocAsyncCtx6 + 36 | 0; //@line 19746
    HEAP32[$155 >> 2] = $10; //@line 19747
    $156 = $ReallocAsyncCtx6 + 40 | 0; //@line 19748
    HEAP32[$156 >> 2] = $73; //@line 19749
    $157 = $ReallocAsyncCtx6 + 44 | 0; //@line 19750
    HEAP32[$157 >> 2] = $12; //@line 19751
    $158 = $ReallocAsyncCtx6 + 48 | 0; //@line 19752
    HEAP32[$158 >> 2] = $14; //@line 19753
    sp = STACKTOP; //@line 19754
    return;
   }
  }
 } else {
  if (!$223) {
   $225 = HEAP32[$220 + 56 >> 2] | 0; //@line 19762
   if ($225 | 0) {
    if ((HEAP32[$220 + 8 >> 2] | 0) == ($20 | 0)) {
     HEAP32[$118 >> 2] = $225; //@line 19769
     HEAP32[$119 >> 2] = HEAP32[$220 + 60 >> 2]; //@line 19772
    }
   }
  }
  HEAP32[10072 + ($28 << 2) >> 2] = $6; //@line 19777
  HEAP32[$126 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 19780
 }
 HEAP32[___async_retval >> 2] = $$; //@line 19783
 return;
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2748
 STACKTOP = STACKTOP + 512 | 0; //@line 2749
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 2749
 $6 = sp; //@line 2750
 $sum = $3 + $2 | 0; //@line 2751
 $7 = 0 - $sum | 0; //@line 2752
 $8 = $0 + 4 | 0; //@line 2753
 $9 = $0 + 100 | 0; //@line 2754
 $$0329 = $1; //@line 2755
 $$0396 = 0; //@line 2755
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 2759
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 2767
    $$2 = $$0329; //@line 2767
    $$2398 = $$0396; //@line 2767
    $368 = 0; //@line 2767
    $369 = 0; //@line 2767
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 2771
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 2776
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 2779
   $$0396 = 1; //@line 2779
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 2783
   $$0396 = 1; //@line 2783
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 2788
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 2793
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 2796
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 2799
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 2803
   $26 = 0; //@line 2803
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 2805
    $28 = tempRet0; //@line 2806
    $29 = HEAP32[$8 >> 2] | 0; //@line 2807
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 2812
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 2815
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 2818
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 2822
     $26 = $28; //@line 2822
    } else {
     $$0393 = 1; //@line 2824
     $$2 = $$1330$be; //@line 2824
     $$2398 = 1; //@line 2824
     $368 = $27; //@line 2824
     $369 = $28; //@line 2824
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 2829
   $$2 = $$1330$ph; //@line 2829
   $$2398 = $$0396; //@line 2829
   $368 = 0; //@line 2829
   $369 = 0; //@line 2829
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 2832
 $37 = $$2 + -48 | 0; //@line 2833
 $39 = ($$2 | 0) == 46; //@line 2835
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 2839
   $$0341511 = 0; //@line 2840
   $$0345510 = 0; //@line 2840
   $$0401507 = 0; //@line 2840
   $$1394509 = $$0393; //@line 2840
   $$3399508 = $$2398; //@line 2840
   $$3512 = $$2; //@line 2840
   $370 = $39; //@line 2840
   $371 = $37; //@line 2840
   $372 = $368; //@line 2840
   $373 = $369; //@line 2840
   $44 = 0; //@line 2840
   $45 = 0; //@line 2840
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 2846
       $$2347 = $$0345510; //@line 2846
       $$2395 = 1; //@line 2846
       $$2403 = $$0401507; //@line 2846
       $$4400 = $$3399508; //@line 2846
       $374 = $44; //@line 2846
       $375 = $45; //@line 2846
       $376 = $44; //@line 2846
       $377 = $45; //@line 2846
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 2852
      $47 = tempRet0; //@line 2853
      $48 = ($$3512 | 0) != 48; //@line 2854
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 2857
        $$2347 = $$0345510; //@line 2857
        $$2395 = $$1394509; //@line 2857
        $$2403 = $$0401507; //@line 2857
        $$4400 = $$3399508; //@line 2857
        $374 = $372; //@line 2857
        $375 = $373; //@line 2857
        $376 = $46; //@line 2857
        $377 = $47; //@line 2857
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 2862
       $$2343 = $$0341511; //@line 2863
       $$2347 = $$0345510; //@line 2863
       $$2395 = $$1394509; //@line 2863
       $$2403 = $$0401507; //@line 2863
       $$4400 = $$3399508; //@line 2863
       $374 = $372; //@line 2863
       $375 = $373; //@line 2863
       $376 = $46; //@line 2863
       $377 = $47; //@line 2863
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 2868
      if (!$$0341511) {
       $$sink = $371; //@line 2870
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 2876
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 2878
      $54 = $$0341511 + 1 | 0; //@line 2879
      $55 = ($54 | 0) == 9; //@line 2880
      $$2343 = $55 ? 0 : $54; //@line 2884
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 2884
      $$2395 = $$1394509; //@line 2884
      $$2403 = $48 ? $46 : $$0401507; //@line 2884
      $$4400 = 1; //@line 2884
      $374 = $372; //@line 2884
      $375 = $373; //@line 2884
      $376 = $46; //@line 2884
      $377 = $47; //@line 2884
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 2887
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 2892
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 2895
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 2898
    }
    $371 = $$3$be + -48 | 0; //@line 2900
    $370 = ($$3$be | 0) == 46; //@line 2902
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 2907
     $$0345$lcssa = $$2347; //@line 2907
     $$0401$lcssa = $$2403; //@line 2907
     $$1394$lcssa = $$2395; //@line 2907
     $$3$lcssa = $$3$be; //@line 2907
     $$3399$lcssa = $$4400; //@line 2907
     $72 = $376; //@line 2907
     $73 = $374; //@line 2907
     $75 = $377; //@line 2907
     $76 = $375; //@line 2907
     label = 29; //@line 2908
     break L20;
    } else {
     $$0341511 = $$2343; //@line 2905
     $$0345510 = $$2347; //@line 2905
     $$0401507 = $$2403; //@line 2905
     $$1394509 = $$2395; //@line 2905
     $$3399508 = $$4400; //@line 2905
     $$3512 = $$3$be; //@line 2905
     $372 = $374; //@line 2905
     $373 = $375; //@line 2905
     $44 = $376; //@line 2905
     $45 = $377; //@line 2905
    }
   }
   $$0341463 = $$0341511; //@line 2913
   $$0345467 = $$0345510; //@line 2913
   $$0401473 = $$0401507; //@line 2913
   $378 = $44; //@line 2913
   $379 = $45; //@line 2913
   $380 = $372; //@line 2913
   $381 = $373; //@line 2913
   $382 = ($$3399508 | 0) != 0; //@line 2913
   label = 37; //@line 2914
  } else {
   $$0341$lcssa = 0; //@line 2916
   $$0345$lcssa = 0; //@line 2916
   $$0401$lcssa = 0; //@line 2916
   $$1394$lcssa = $$0393; //@line 2916
   $$3$lcssa = $$2; //@line 2916
   $$3399$lcssa = $$2398; //@line 2916
   $72 = 0; //@line 2916
   $73 = $368; //@line 2916
   $75 = 0; //@line 2916
   $76 = $369; //@line 2916
   label = 29; //@line 2917
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 2922
   $71 = $70 ? $72 : $73; //@line 2923
   $74 = $70 ? $75 : $76; //@line 2924
   $77 = ($$3399$lcssa | 0) != 0; //@line 2925
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 2932
     $$0345467 = $$0345$lcssa; //@line 2932
     $$0401473 = $$0401$lcssa; //@line 2932
     $378 = $72; //@line 2932
     $379 = $75; //@line 2932
     $380 = $71; //@line 2932
     $381 = $74; //@line 2932
     $382 = $77; //@line 2932
     label = 37; //@line 2933
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 2936
     $$0345466 = $$0345$lcssa; //@line 2936
     $$0401472 = $$0401$lcssa; //@line 2936
     $383 = $72; //@line 2936
     $384 = $75; //@line 2936
     $385 = $77; //@line 2936
     $386 = $71; //@line 2936
     $387 = $74; //@line 2936
     label = 39; //@line 2937
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 2941
   $81 = tempRet0; //@line 2942
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 2949
     $$1 = 0.0; //@line 2950
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 2956
     $91 = 0; //@line 2956
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 2960
     $90 = 0; //@line 2961
     $91 = 0; //@line 2961
    }
   } else {
    $90 = $80; //@line 2964
    $91 = $81; //@line 2964
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0; //@line 2966
   $$0341461 = $$0341$lcssa; //@line 2968
   $$0345465 = $$0345$lcssa; //@line 2968
   $$0401471 = $$0401$lcssa; //@line 2968
   $105 = $92; //@line 2968
   $106 = $72; //@line 2968
   $108 = tempRet0; //@line 2968
   $109 = $75; //@line 2968
   label = 41; //@line 2969
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 2976
   $$0345466 = $$0345467; //@line 2976
   $$0401472 = $$0401473; //@line 2976
   $383 = $378; //@line 2976
   $384 = $379; //@line 2976
   $385 = $382; //@line 2976
   $386 = $380; //@line 2976
   $387 = $381; //@line 2976
   label = 39; //@line 2977
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 2981
   if ($382) {
    $$0341461 = $$0341463; //@line 2983
    $$0345465 = $$0345467; //@line 2983
    $$0401471 = $$0401473; //@line 2983
    $105 = $380; //@line 2983
    $106 = $378; //@line 2983
    $108 = $381; //@line 2983
    $109 = $379; //@line 2983
    label = 41; //@line 2984
   } else {
    label = 40; //@line 2986
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 2992
   $$0345465 = $$0345466; //@line 2992
   $$0401471 = $$0401472; //@line 2992
   $105 = $386; //@line 2992
   $106 = $383; //@line 2992
   $108 = $387; //@line 2992
   $109 = $384; //@line 2992
   label = 41; //@line 2993
  } else {
   label = 40; //@line 2995
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 3001
   ___shlim($0, 0); //@line 3002
   $$1 = 0.0; //@line 3003
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 3006
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 3011
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 3032
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 3036
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 3038
   if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 3046
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 3050
    break;
   }
   $134 = $3 + -106 | 0; //@line 3053
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 3055
   if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 3063
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 3067
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 3072
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 3076
     $$3344501 = $$0341461; //@line 3078
     $150 = HEAP32[$148 >> 2] | 0; //@line 3078
     while (1) {
      $150 = $150 * 10 | 0; //@line 3080
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 3084
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 3089
    }
    $$3348 = $$0345465 + 1 | 0; //@line 3092
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
     if (($105 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 3106
      break;
     }
     if (($105 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[1460 + (8 - $105 << 2) >> 2] | 0); //@line 3120
      break;
     }
     $172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0; //@line 3125
     $$pre = HEAP32[$6 >> 2] | 0; //@line 3127
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[1460 + ($105 + -10 << 2) >> 2] | 0); //@line 3140
      break;
     }
    }
   }
   $184 = ($105 | 0) % 9 | 0; //@line 3145
   if (!$184) {
    $$0380$ph = 0; //@line 3148
    $$1373$ph446 = $$3348; //@line 3148
    $$2352$ph447 = 0; //@line 3148
    $$2387$ph445 = $105; //@line 3148
   } else {
    $188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 3152
    $191 = HEAP32[1460 + (8 - $188 << 2) >> 2] | 0; //@line 3155
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 3158
     $$0372 = 0; //@line 3158
     $$0385$lcssa552 = $105; //@line 3158
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 3160
     $$0340494 = 0; //@line 3161
     $$0350492 = 0; //@line 3161
     $$0385491 = $105; //@line 3161
     $$4349493 = 0; //@line 3161
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 3163
      $195 = HEAP32[$194 >> 2] | 0; //@line 3164
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 3167
      HEAP32[$194 >> 2] = $198; //@line 3168
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 3169
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 3172
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 3176
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 3177
      $$4349493 = $$4349493 + 1 | 0; //@line 3178
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 3188
      $$0372 = $$3348; //@line 3188
      $$0385$lcssa552 = $$0385491; //@line 3188
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 3192
      $$0350$lcssa553 = $$0350492; //@line 3193
      $$0372 = $$3348 + 1 | 0; //@line 3193
      $$0385$lcssa552 = $$0385491; //@line 3193
     }
    }
    $$0380$ph = 0; //@line 3198
    $$1373$ph446 = $$0372; //@line 3198
    $$2352$ph447 = $$0350$lcssa553; //@line 3198
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 3198
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 3201
    $213 = ($$2387$ph445 | 0) == 18; //@line 3202
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 3203
    $$0380 = $$0380$ph; //@line 3204
    $$1373 = $$1373$ph446; //@line 3204
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 3208
       $$4354$ph = $$2352$ph447; //@line 3208
       $$4389$ph443 = $$2387$ph445; //@line 3208
       $$6378$ph = $$1373; //@line 3208
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 3214
       $$4354$ph = $$2352$ph447; //@line 3214
       $$4389$ph443 = 18; //@line 3214
       $$6378$ph = $$1373; //@line 3214
       break L101;
      }
     }
     $$0334 = 0; //@line 3219
     $$2374 = $$1373; //@line 3219
     $$5$in = $$1373 + 127 | 0; //@line 3219
     while (1) {
      $$5 = $$5$in & 127; //@line 3221
      $218 = $6 + ($$5 << 2) | 0; //@line 3222
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 3224
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 3226
      $223 = tempRet0; //@line 3227
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 3234
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 3236
       $$1335 = $229; //@line 3238
       $$sink419$off0 = $231; //@line 3238
      } else {
       $$1335 = 0; //@line 3240
       $$sink419$off0 = $222; //@line 3240
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 3242
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 3246
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 3251
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 3256
       $$5$in = $$5 + -1 | 0; //@line 3256
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 3259
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 3262
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 3269
    $246 = $$2374 + 127 & 127; //@line 3272
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 3275
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 3281
     $$4376 = $246; //@line 3282
    } else {
     $$4376 = $$2374; //@line 3284
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 3287
    $$0380$ph = $$0380; //@line 3288
    $$1373$ph446 = $$4376; //@line 3288
    $$2352$ph447 = $243; //@line 3288
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 3288
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 & 127; //@line 3292
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 3295
    $$1381$ph557 = $$1381$ph; //@line 3296
    $$4354$ph558 = $$4354$ph; //@line 3296
    $$4389$ph = $$4389$ph443; //@line 3296
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 3298
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 3300
     $$1381 = $$1381$ph557; //@line 3301
     $$4354 = $$4354$ph558; //@line 3301
     while (1) {
      $$0336484 = 0; //@line 3303
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 3306
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 3309
        label = 88; //@line 3310
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 3314
       $261 = HEAP32[1492 + ($$0336484 << 2) >> 2] | 0; //@line 3316
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 3319
        label = 88; //@line 3320
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 3327
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 3330
       } else {
        $$1337 = $264; //@line 3332
        label = 88; //@line 3333
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 3338
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 3342
        $$4483 = 0; //@line 3342
        $$9481 = $$6378$ph; //@line 3342
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 3346
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 3349
       $$4354 = $$6378$ph; //@line 3349
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 3355
     $272 = 1e9 >>> $$423; //@line 3356
     $$0332488 = 0; //@line 3357
     $$5355486 = $$4354; //@line 3357
     $$5390485 = $$4389$ph; //@line 3357
     $$6487 = $$4354; //@line 3357
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 3359
      $274 = HEAP32[$273 >> 2] | 0; //@line 3360
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 3363
      HEAP32[$273 >> 2] = $277; //@line 3364
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 3365
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 3368
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 3372
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 3373
      $$6487 = $$6487 + 1 & 127; //@line 3375
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 3385
      $$4354$ph558 = $$5355486; //@line 3385
      $$4389$ph = $$5390485; //@line 3385
      continue;
     }
     if (($289 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 3394
     $$1381$ph557 = $268; //@line 3395
     $$4354$ph558 = $$5355486; //@line 3395
     $$4389$ph = $$5390485; //@line 3395
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 3398
    $$1381$ph = $268; //@line 3399
    $$4354$ph = $$5355486; //@line 3399
    $$4389$ph443 = $$5390485; //@line 3399
    $$6378$ph = $289; //@line 3399
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 3403
    $302 = $$9481 + 1 & 127; //@line 3406
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 3410
     $$10 = $302; //@line 3411
    } else {
     $$10 = $$9481; //@line 3413
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 3419
    $$4483 = $$4483 + 1 | 0; //@line 3420
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 3425
    }
   }
   $311 = +($4 | 0); //@line 3428
   $312 = $$0365482 * $311; //@line 3429
   $313 = $$1381 + 53 | 0; //@line 3430
   $314 = $313 - $3 | 0; //@line 3431
   $315 = ($314 | 0) < ($2 | 0); //@line 3432
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 3435
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 3440
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 3443
    $$0360 = $320; //@line 3446
    $$0361 = $323; //@line 3446
    $$1366 = $320 + ($312 - $323); //@line 3446
   } else {
    $$0360 = 0.0; //@line 3448
    $$0361 = 0.0; //@line 3448
    $$1366 = $312; //@line 3448
   }
   $327 = $$4354 + 2 & 127; //@line 3451
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 3454
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 3457
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 3467
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 3473
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 3479
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 3488
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 3493
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 3504
     } else {
      $$3364 = $$1362 + 1.0; //@line 3507
     }
    } else {
     $$3364 = $$1362; //@line 3510
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 3514
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 3521
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 3525
     $$2367 = $359 ? $354 : $354 * .5; //@line 3526
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 3536
       $$4384 = $$3383; //@line 3536
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 3541
     $$3368 = $$2367; //@line 3542
     $$4384 = $$3383; //@line 3542
    } else {
     $$3368 = $354; //@line 3544
     $$4384 = $$1381; //@line 3544
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 3548
  }
 } while (0);
 STACKTOP = sp; //@line 3551
 return +$$1;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5920
 STACKTOP = STACKTOP + 560 | 0; //@line 5921
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 5921
 $6 = sp + 8 | 0; //@line 5922
 $7 = sp; //@line 5923
 $8 = sp + 524 | 0; //@line 5924
 $9 = $8; //@line 5925
 $10 = sp + 512 | 0; //@line 5926
 HEAP32[$7 >> 2] = 0; //@line 5927
 $11 = $10 + 12 | 0; //@line 5928
 ___DOUBLE_BITS_677($1) | 0; //@line 5929
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 5934
  $$0520 = 1; //@line 5934
  $$0521 = 7296; //@line 5934
 } else {
  $$0471 = $1; //@line 5945
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 5945
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 7297 : 7302 : 7299; //@line 5945
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 5947
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 5956
   $31 = $$0520 + 3 | 0; //@line 5961
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 5963
   _out_670($0, $$0521, $$0520); //@line 5964
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 7323 : 7327 : $27 ? 7315 : 7319, 3); //@line 5965
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 5967
   $$sink560 = $31; //@line 5968
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 5971
   $36 = $35 != 0.0; //@line 5972
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 5976
   }
   $39 = $5 | 32; //@line 5978
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 5981
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 5984
    $44 = $$0520 | 2; //@line 5985
    $46 = 12 - $3 | 0; //@line 5987
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 5992
     } else {
      $$0509585 = 8.0; //@line 5994
      $$1508586 = $46; //@line 5994
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 5996
       $$0509585 = $$0509585 * 16.0; //@line 5997
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 6012
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 6017
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 6022
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 6025
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 6028
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 6031
     HEAP8[$68 >> 0] = 48; //@line 6032
     $$0511 = $68; //@line 6033
    } else {
     $$0511 = $66; //@line 6035
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 6042
    $76 = $$0511 + -2 | 0; //@line 6045
    HEAP8[$76 >> 0] = $5 + 15; //@line 6046
    $77 = ($3 | 0) < 1; //@line 6047
    $79 = ($4 & 8 | 0) == 0; //@line 6049
    $$0523 = $8; //@line 6050
    $$2473 = $$1472; //@line 6050
    while (1) {
     $80 = ~~$$2473; //@line 6052
     $86 = $$0523 + 1 | 0; //@line 6058
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[7331 + $80 >> 0]; //@line 6059
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 6062
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 6071
      } else {
       HEAP8[$86 >> 0] = 46; //@line 6074
       $$1524 = $$0523 + 2 | 0; //@line 6075
      }
     } else {
      $$1524 = $86; //@line 6078
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 6082
     }
    }
    $$pre693 = $$1524; //@line 6088
    if (!$3) {
     label = 24; //@line 6090
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 6098
      $$sink = $3 + 2 | 0; //@line 6098
     } else {
      label = 24; //@line 6100
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 6104
     $$pre$phi691Z2D = $101; //@line 6105
     $$sink = $101; //@line 6105
    }
    $104 = $11 - $76 | 0; //@line 6109
    $106 = $104 + $44 + $$sink | 0; //@line 6111
    _pad_676($0, 32, $2, $106, $4); //@line 6112
    _out_670($0, $$0521$, $44); //@line 6113
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 6115
    _out_670($0, $8, $$pre$phi691Z2D); //@line 6116
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 6118
    _out_670($0, $76, $104); //@line 6119
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 6121
    $$sink560 = $106; //@line 6122
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 6126
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 6130
    HEAP32[$7 >> 2] = $113; //@line 6131
    $$3 = $35 * 268435456.0; //@line 6132
    $$pr = $113; //@line 6132
   } else {
    $$3 = $35; //@line 6135
    $$pr = HEAP32[$7 >> 2] | 0; //@line 6135
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 6139
   $$0498 = $$561; //@line 6140
   $$4 = $$3; //@line 6140
   do {
    $116 = ~~$$4 >>> 0; //@line 6142
    HEAP32[$$0498 >> 2] = $116; //@line 6143
    $$0498 = $$0498 + 4 | 0; //@line 6144
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 6147
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 6157
    $$1499662 = $$0498; //@line 6157
    $124 = $$pr; //@line 6157
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 6160
     $$0488655 = $$1499662 + -4 | 0; //@line 6161
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 6164
     } else {
      $$0488657 = $$0488655; //@line 6166
      $$0497656 = 0; //@line 6166
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 6169
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 6171
       $131 = tempRet0; //@line 6172
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 6173
       HEAP32[$$0488657 >> 2] = $132; //@line 6175
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 6176
       $$0488657 = $$0488657 + -4 | 0; //@line 6178
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 6188
      } else {
       $138 = $$1482663 + -4 | 0; //@line 6190
       HEAP32[$138 >> 2] = $$0497656; //@line 6191
       $$2483$ph = $138; //@line 6192
      }
     }
     $$2500 = $$1499662; //@line 6195
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 6201
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 6205
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 6211
     HEAP32[$7 >> 2] = $144; //@line 6212
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 6215
      $$1499662 = $$2500; //@line 6215
      $124 = $144; //@line 6215
     } else {
      $$1482$lcssa = $$2483$ph; //@line 6217
      $$1499$lcssa = $$2500; //@line 6217
      $$pr566 = $144; //@line 6217
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 6222
    $$1499$lcssa = $$0498; //@line 6222
    $$pr566 = $$pr; //@line 6222
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 6228
    $150 = ($39 | 0) == 102; //@line 6229
    $$3484650 = $$1482$lcssa; //@line 6230
    $$3501649 = $$1499$lcssa; //@line 6230
    $152 = $$pr566; //@line 6230
    while (1) {
     $151 = 0 - $152 | 0; //@line 6232
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 6234
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 6238
      $161 = 1e9 >>> $154; //@line 6239
      $$0487644 = 0; //@line 6240
      $$1489643 = $$3484650; //@line 6240
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 6242
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 6246
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 6247
       $$1489643 = $$1489643 + 4 | 0; //@line 6248
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 6259
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 6262
       $$4502 = $$3501649; //@line 6262
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 6265
       $$$3484700 = $$$3484; //@line 6266
       $$4502 = $$3501649 + 4 | 0; //@line 6266
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 6273
      $$4502 = $$3501649; //@line 6273
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 6275
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 6282
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 6284
     HEAP32[$7 >> 2] = $152; //@line 6285
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 6290
      $$3501$lcssa = $$$4502; //@line 6290
      break;
     } else {
      $$3484650 = $$$3484700; //@line 6288
      $$3501649 = $$$4502; //@line 6288
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 6295
    $$3501$lcssa = $$1499$lcssa; //@line 6295
   }
   $185 = $$561; //@line 6298
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 6303
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 6304
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 6307
    } else {
     $$0514639 = $189; //@line 6309
     $$0530638 = 10; //@line 6309
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 6311
      $193 = $$0514639 + 1 | 0; //@line 6312
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 6315
       break;
      } else {
       $$0514639 = $193; //@line 6318
      }
     }
    }
   } else {
    $$1515 = 0; //@line 6323
   }
   $198 = ($39 | 0) == 103; //@line 6328
   $199 = ($$540 | 0) != 0; //@line 6329
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 6332
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 6341
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 6344
    $213 = ($209 | 0) % 9 | 0; //@line 6345
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 6348
     $$1531632 = 10; //@line 6348
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 6351
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 6354
       $$1531632 = $215; //@line 6354
      } else {
       $$1531$lcssa = $215; //@line 6356
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 6361
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 6363
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 6364
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 6367
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 6370
     $$4518 = $$1515; //@line 6370
     $$8 = $$3484$lcssa; //@line 6370
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 6375
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 6376
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 6381
     if (!$$0520) {
      $$1467 = $$$564; //@line 6384
      $$1469 = $$543; //@line 6384
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 6387
      $$1467 = $230 ? -$$$564 : $$$564; //@line 6392
      $$1469 = $230 ? -$$543 : $$543; //@line 6392
     }
     $233 = $217 - $218 | 0; //@line 6394
     HEAP32[$212 >> 2] = $233; //@line 6395
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 6399
      HEAP32[$212 >> 2] = $236; //@line 6400
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 6403
       $$sink547625 = $212; //@line 6403
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 6405
        HEAP32[$$sink547625 >> 2] = 0; //@line 6406
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 6409
         HEAP32[$240 >> 2] = 0; //@line 6410
         $$6 = $240; //@line 6411
        } else {
         $$6 = $$5486626; //@line 6413
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 6416
        HEAP32[$238 >> 2] = $242; //@line 6417
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 6420
         $$sink547625 = $238; //@line 6420
        } else {
         $$5486$lcssa = $$6; //@line 6422
         $$sink547$lcssa = $238; //@line 6422
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 6427
       $$sink547$lcssa = $212; //@line 6427
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 6432
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 6433
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 6436
       $$4518 = $247; //@line 6436
       $$8 = $$5486$lcssa; //@line 6436
      } else {
       $$2516621 = $247; //@line 6438
       $$2532620 = 10; //@line 6438
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 6440
        $251 = $$2516621 + 1 | 0; //@line 6441
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 6444
         $$4518 = $251; //@line 6444
         $$8 = $$5486$lcssa; //@line 6444
         break;
        } else {
         $$2516621 = $251; //@line 6447
        }
       }
      }
     } else {
      $$4492 = $212; //@line 6452
      $$4518 = $$1515; //@line 6452
      $$8 = $$3484$lcssa; //@line 6452
     }
    }
    $253 = $$4492 + 4 | 0; //@line 6455
    $$5519$ph = $$4518; //@line 6458
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 6458
    $$9$ph = $$8; //@line 6458
   } else {
    $$5519$ph = $$1515; //@line 6460
    $$7505$ph = $$3501$lcssa; //@line 6460
    $$9$ph = $$3484$lcssa; //@line 6460
   }
   $$7505 = $$7505$ph; //@line 6462
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 6466
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 6469
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 6473
    } else {
     $$lcssa675 = 1; //@line 6475
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 6479
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 6484
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 6492
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 6492
     } else {
      $$0479 = $5 + -2 | 0; //@line 6496
      $$2476 = $$540$ + -1 | 0; //@line 6496
     }
     $267 = $4 & 8; //@line 6498
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 6503
       if (!$270) {
        $$2529 = 9; //@line 6506
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 6511
         $$3533616 = 10; //@line 6511
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 6513
          $275 = $$1528617 + 1 | 0; //@line 6514
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 6520
           break;
          } else {
           $$1528617 = $275; //@line 6518
          }
         }
        } else {
         $$2529 = 0; //@line 6525
        }
       }
      } else {
       $$2529 = 9; //@line 6529
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 6537
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 6539
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 6541
       $$1480 = $$0479; //@line 6544
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 6544
       $$pre$phi698Z2D = 0; //@line 6544
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 6548
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 6550
       $$1480 = $$0479; //@line 6553
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 6553
       $$pre$phi698Z2D = 0; //@line 6553
       break;
      }
     } else {
      $$1480 = $$0479; //@line 6557
      $$3477 = $$2476; //@line 6557
      $$pre$phi698Z2D = $267; //@line 6557
     }
    } else {
     $$1480 = $5; //@line 6561
     $$3477 = $$540; //@line 6561
     $$pre$phi698Z2D = $4 & 8; //@line 6561
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 6564
   $294 = ($292 | 0) != 0 & 1; //@line 6566
   $296 = ($$1480 | 32 | 0) == 102; //@line 6568
   if ($296) {
    $$2513 = 0; //@line 6572
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 6572
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 6575
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 6578
    $304 = $11; //@line 6579
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 6584
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 6586
      HEAP8[$308 >> 0] = 48; //@line 6587
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 6592
      } else {
       $$1512$lcssa = $308; //@line 6594
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 6599
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 6606
    $318 = $$1512$lcssa + -2 | 0; //@line 6608
    HEAP8[$318 >> 0] = $$1480; //@line 6609
    $$2513 = $318; //@line 6612
    $$pn = $304 - $318 | 0; //@line 6612
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 6617
   _pad_676($0, 32, $2, $323, $4); //@line 6618
   _out_670($0, $$0521, $$0520); //@line 6619
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 6621
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 6624
    $326 = $8 + 9 | 0; //@line 6625
    $327 = $326; //@line 6626
    $328 = $8 + 8 | 0; //@line 6627
    $$5493600 = $$0496$$9; //@line 6628
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 6631
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 6636
       $$1465 = $328; //@line 6637
      } else {
       $$1465 = $330; //@line 6639
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 6646
       $$0464597 = $330; //@line 6647
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 6649
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 6652
        } else {
         $$1465 = $335; //@line 6654
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 6659
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 6664
     $$5493600 = $$5493600 + 4 | 0; //@line 6665
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 7347, 1); //@line 6675
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 6681
     $$6494592 = $$5493600; //@line 6681
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 6684
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 6689
       $$0463587 = $347; //@line 6690
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 6692
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 6695
        } else {
         $$0463$lcssa = $351; //@line 6697
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 6702
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 6706
      $$6494592 = $$6494592 + 4 | 0; //@line 6707
      $356 = $$4478593 + -9 | 0; //@line 6708
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 6715
       break;
      } else {
       $$4478593 = $356; //@line 6713
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 6720
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 6723
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 6726
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 6729
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 6730
     $365 = $363; //@line 6731
     $366 = 0 - $9 | 0; //@line 6732
     $367 = $8 + 8 | 0; //@line 6733
     $$5605 = $$3477; //@line 6734
     $$7495604 = $$9$ph; //@line 6734
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 6737
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 6740
       $$0 = $367; //@line 6741
      } else {
       $$0 = $369; //@line 6743
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 6748
        _out_670($0, $$0, 1); //@line 6749
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 6753
         break;
        }
        _out_670($0, 7347, 1); //@line 6756
        $$2 = $375; //@line 6757
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 6761
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 6766
        $$1601 = $$0; //@line 6767
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 6769
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 6772
         } else {
          $$2 = $373; //@line 6774
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 6781
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 6784
      $381 = $$5605 - $378 | 0; //@line 6785
      $$7495604 = $$7495604 + 4 | 0; //@line 6786
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 6793
       break;
      } else {
       $$5605 = $381; //@line 6791
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 6798
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 6801
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 6805
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 6808
   $$sink560 = $323; //@line 6809
  }
 } while (0);
 STACKTOP = sp; //@line 6814
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 6814
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_174($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$191 = 0, $$byval_copy = 0, $$byval_copy22 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $92 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30274
 STACKTOP = STACKTOP + 48 | 0; //@line 30275
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 30275
 $$byval_copy22 = sp + 20 | 0; //@line 30276
 $$byval_copy = sp; //@line 30277
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30279
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30281
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30283
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30285
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30287
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30289
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30291
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30293
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30295
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30297
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30299
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30301
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30303
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30305
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 30307
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 30309
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 30311
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 30313
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 30315
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 30317
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 30319
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 30321
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 30323
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 30325
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 30327
 $52 = HEAP8[$0 + 101 >> 0] | 0; //@line 30329
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $144 = $52 + -1 << 24 >> 24; //@line 30334
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 30335
  $145 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($14, 0, $16, 512) | 0; //@line 30336
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 157; //@line 30339
   $146 = $ReallocAsyncCtx3 + 4 | 0; //@line 30340
   HEAP32[$146 >> 2] = $2; //@line 30341
   $147 = $ReallocAsyncCtx3 + 8 | 0; //@line 30342
   HEAP32[$147 >> 2] = $4; //@line 30343
   $148 = $ReallocAsyncCtx3 + 12 | 0; //@line 30344
   HEAP32[$148 >> 2] = $6; //@line 30345
   $149 = $ReallocAsyncCtx3 + 16 | 0; //@line 30346
   HEAP32[$149 >> 2] = $8; //@line 30347
   $150 = $ReallocAsyncCtx3 + 20 | 0; //@line 30348
   HEAP32[$150 >> 2] = $10; //@line 30349
   $151 = $ReallocAsyncCtx3 + 24 | 0; //@line 30350
   HEAP32[$151 >> 2] = $12; //@line 30351
   $152 = $ReallocAsyncCtx3 + 28 | 0; //@line 30352
   HEAP32[$152 >> 2] = $14; //@line 30353
   $153 = $ReallocAsyncCtx3 + 32 | 0; //@line 30354
   HEAP32[$153 >> 2] = $16; //@line 30355
   $154 = $ReallocAsyncCtx3 + 36 | 0; //@line 30356
   HEAP32[$154 >> 2] = $18; //@line 30357
   $155 = $ReallocAsyncCtx3 + 40 | 0; //@line 30358
   HEAP32[$155 >> 2] = $20; //@line 30359
   $156 = $ReallocAsyncCtx3 + 44 | 0; //@line 30360
   HEAP32[$156 >> 2] = $22; //@line 30361
   $157 = $ReallocAsyncCtx3 + 48 | 0; //@line 30362
   HEAP32[$157 >> 2] = $24; //@line 30363
   $158 = $ReallocAsyncCtx3 + 52 | 0; //@line 30364
   HEAP32[$158 >> 2] = $26; //@line 30365
   $159 = $ReallocAsyncCtx3 + 56 | 0; //@line 30366
   HEAP32[$159 >> 2] = $28; //@line 30367
   $160 = $ReallocAsyncCtx3 + 60 | 0; //@line 30368
   HEAP32[$160 >> 2] = $30; //@line 30369
   $161 = $ReallocAsyncCtx3 + 64 | 0; //@line 30370
   HEAP32[$161 >> 2] = $32; //@line 30371
   $162 = $ReallocAsyncCtx3 + 68 | 0; //@line 30372
   HEAP32[$162 >> 2] = $34; //@line 30373
   $163 = $ReallocAsyncCtx3 + 72 | 0; //@line 30374
   HEAP32[$163 >> 2] = $36; //@line 30375
   $164 = $ReallocAsyncCtx3 + 76 | 0; //@line 30376
   HEAP32[$164 >> 2] = $38; //@line 30377
   $165 = $ReallocAsyncCtx3 + 80 | 0; //@line 30378
   HEAP32[$165 >> 2] = $40; //@line 30379
   $166 = $ReallocAsyncCtx3 + 84 | 0; //@line 30380
   HEAP8[$166 >> 0] = $42; //@line 30381
   $167 = $ReallocAsyncCtx3 + 88 | 0; //@line 30382
   HEAP32[$167 >> 2] = $44; //@line 30383
   $168 = $ReallocAsyncCtx3 + 92 | 0; //@line 30384
   HEAP32[$168 >> 2] = $46; //@line 30385
   $169 = $ReallocAsyncCtx3 + 96 | 0; //@line 30386
   HEAP32[$169 >> 2] = $48; //@line 30387
   $170 = $ReallocAsyncCtx3 + 100 | 0; //@line 30388
   HEAP8[$170 >> 0] = $50; //@line 30389
   $171 = $ReallocAsyncCtx3 + 101 | 0; //@line 30390
   HEAP8[$171 >> 0] = $144; //@line 30391
   sp = STACKTOP; //@line 30392
   STACKTOP = sp; //@line 30393
   return;
  }
  HEAP32[___async_retval >> 2] = $145; //@line 30396
  ___async_unwind = 0; //@line 30397
  HEAP32[$ReallocAsyncCtx3 >> 2] = 157; //@line 30398
  $146 = $ReallocAsyncCtx3 + 4 | 0; //@line 30399
  HEAP32[$146 >> 2] = $2; //@line 30400
  $147 = $ReallocAsyncCtx3 + 8 | 0; //@line 30401
  HEAP32[$147 >> 2] = $4; //@line 30402
  $148 = $ReallocAsyncCtx3 + 12 | 0; //@line 30403
  HEAP32[$148 >> 2] = $6; //@line 30404
  $149 = $ReallocAsyncCtx3 + 16 | 0; //@line 30405
  HEAP32[$149 >> 2] = $8; //@line 30406
  $150 = $ReallocAsyncCtx3 + 20 | 0; //@line 30407
  HEAP32[$150 >> 2] = $10; //@line 30408
  $151 = $ReallocAsyncCtx3 + 24 | 0; //@line 30409
  HEAP32[$151 >> 2] = $12; //@line 30410
  $152 = $ReallocAsyncCtx3 + 28 | 0; //@line 30411
  HEAP32[$152 >> 2] = $14; //@line 30412
  $153 = $ReallocAsyncCtx3 + 32 | 0; //@line 30413
  HEAP32[$153 >> 2] = $16; //@line 30414
  $154 = $ReallocAsyncCtx3 + 36 | 0; //@line 30415
  HEAP32[$154 >> 2] = $18; //@line 30416
  $155 = $ReallocAsyncCtx3 + 40 | 0; //@line 30417
  HEAP32[$155 >> 2] = $20; //@line 30418
  $156 = $ReallocAsyncCtx3 + 44 | 0; //@line 30419
  HEAP32[$156 >> 2] = $22; //@line 30420
  $157 = $ReallocAsyncCtx3 + 48 | 0; //@line 30421
  HEAP32[$157 >> 2] = $24; //@line 30422
  $158 = $ReallocAsyncCtx3 + 52 | 0; //@line 30423
  HEAP32[$158 >> 2] = $26; //@line 30424
  $159 = $ReallocAsyncCtx3 + 56 | 0; //@line 30425
  HEAP32[$159 >> 2] = $28; //@line 30426
  $160 = $ReallocAsyncCtx3 + 60 | 0; //@line 30427
  HEAP32[$160 >> 2] = $30; //@line 30428
  $161 = $ReallocAsyncCtx3 + 64 | 0; //@line 30429
  HEAP32[$161 >> 2] = $32; //@line 30430
  $162 = $ReallocAsyncCtx3 + 68 | 0; //@line 30431
  HEAP32[$162 >> 2] = $34; //@line 30432
  $163 = $ReallocAsyncCtx3 + 72 | 0; //@line 30433
  HEAP32[$163 >> 2] = $36; //@line 30434
  $164 = $ReallocAsyncCtx3 + 76 | 0; //@line 30435
  HEAP32[$164 >> 2] = $38; //@line 30436
  $165 = $ReallocAsyncCtx3 + 80 | 0; //@line 30437
  HEAP32[$165 >> 2] = $40; //@line 30438
  $166 = $ReallocAsyncCtx3 + 84 | 0; //@line 30439
  HEAP8[$166 >> 0] = $42; //@line 30440
  $167 = $ReallocAsyncCtx3 + 88 | 0; //@line 30441
  HEAP32[$167 >> 2] = $44; //@line 30442
  $168 = $ReallocAsyncCtx3 + 92 | 0; //@line 30443
  HEAP32[$168 >> 2] = $46; //@line 30444
  $169 = $ReallocAsyncCtx3 + 96 | 0; //@line 30445
  HEAP32[$169 >> 2] = $48; //@line 30446
  $170 = $ReallocAsyncCtx3 + 100 | 0; //@line 30447
  HEAP8[$170 >> 0] = $50; //@line 30448
  $171 = $ReallocAsyncCtx3 + 101 | 0; //@line 30449
  HEAP8[$171 >> 0] = $144; //@line 30450
  sp = STACKTOP; //@line 30451
  STACKTOP = sp; //@line 30452
  return;
 }
 $56 = $50 + 1 << 24 >> 24; //@line 30454
 HEAP32[$4 >> 2] = 0; //@line 30455
 HEAP32[$4 + 4 >> 2] = 0; //@line 30455
 HEAP32[$4 + 8 >> 2] = 0; //@line 30455
 HEAP32[$4 + 12 >> 2] = 0; //@line 30455
 HEAP32[$4 + 16 >> 2] = 0; //@line 30455
 HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 30456
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 30456
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 30456
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$8 + 12 >> 2]; //@line 30456
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$8 + 16 >> 2]; //@line 30456
 __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy, 0); //@line 30457
 if (!($52 << 24 >> 24)) {
  _free($16); //@line 30460
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 30461
  $173 = __ZN6Socket5closeEv($46) | 0; //@line 30462
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 30465
   $174 = $ReallocAsyncCtx6 + 4 | 0; //@line 30466
   HEAP32[$174 >> 2] = -3009; //@line 30467
   $175 = $ReallocAsyncCtx6 + 8 | 0; //@line 30468
   HEAP32[$175 >> 2] = $14; //@line 30469
   $176 = $ReallocAsyncCtx6 + 12 | 0; //@line 30470
   HEAP32[$176 >> 2] = $48; //@line 30471
   sp = STACKTOP; //@line 30472
   STACKTOP = sp; //@line 30473
   return;
  }
  HEAP32[___async_retval >> 2] = $173; //@line 30476
  ___async_unwind = 0; //@line 30477
  HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 30478
  $174 = $ReallocAsyncCtx6 + 4 | 0; //@line 30479
  HEAP32[$174 >> 2] = -3009; //@line 30480
  $175 = $ReallocAsyncCtx6 + 8 | 0; //@line 30481
  HEAP32[$175 >> 2] = $14; //@line 30482
  $176 = $ReallocAsyncCtx6 + 12 | 0; //@line 30483
  HEAP32[$176 >> 2] = $48; //@line 30484
  sp = STACKTOP; //@line 30485
  STACKTOP = sp; //@line 30486
  return;
 }
 if (($56 & 255) > 9) {
  $$191 = 0; //@line 30490
 } else {
  if (($56 & 255) < 5) {
   $$191 = $56; //@line 30494
  } else {
   $92 = 608 + ((($56 & 255) + -5 | 0) * 20 | 0) | 0; //@line 30498
   HEAP32[$$byval_copy22 >> 2] = HEAP32[$92 >> 2]; //@line 30499
   HEAP32[$$byval_copy22 + 4 >> 2] = HEAP32[$92 + 4 >> 2]; //@line 30499
   HEAP32[$$byval_copy22 + 8 >> 2] = HEAP32[$92 + 8 >> 2]; //@line 30499
   HEAP32[$$byval_copy22 + 12 >> 2] = HEAP32[$92 + 12 >> 2]; //@line 30499
   HEAP32[$$byval_copy22 + 16 >> 2] = HEAP32[$92 + 16 >> 2]; //@line 30499
   __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy22); //@line 30500
   __ZN13SocketAddress8set_portEt($6, 53); //@line 30501
   HEAP8[$16 >> 0] = 0; //@line 30502
   HEAP8[$18 >> 0] = 1; //@line 30503
   HEAP8[$20 >> 0] = 1; //@line 30504
   HEAP8[$22 >> 0] = 0; //@line 30505
   HEAP8[$24 >> 0] = 0; //@line 30506
   HEAP8[$26 >> 0] = 1; //@line 30507
   HEAP8[$28 >> 0] = 0; //@line 30508
   HEAP8[$28 + 1 >> 0] = 0; //@line 30508
   HEAP8[$28 + 2 >> 0] = 0; //@line 30508
   HEAP8[$28 + 3 >> 0] = 0; //@line 30508
   HEAP8[$28 + 4 >> 0] = 0; //@line 30508
   HEAP8[$28 + 5 >> 0] = 0; //@line 30508
   if (!(HEAP8[$10 >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $12; //@line 30512
   } else {
    $$048$i = $10; //@line 30514
    $$sroa$0$0$in47$i = $12; //@line 30514
    while (1) {
     $95 = _strcspn($$048$i, 7347) | 0; //@line 30516
     $97 = $$sroa$0$0$in47$i + 1 | 0; //@line 30518
     HEAP8[$$sroa$0$0$in47$i >> 0] = $95; //@line 30519
     $98 = $95 & 255; //@line 30520
     _memcpy($97 | 0, $$048$i | 0, $98 | 0) | 0; //@line 30521
     $99 = $97 + $98 | 0; //@line 30522
     $$048$i = $$048$i + ($95 + ((HEAP8[$$048$i + $95 >> 0] | 0) == 46 & 1)) | 0; //@line 30528
     if (!(HEAP8[$$048$i >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $99; //@line 30532
      break;
     } else {
      $$sroa$0$0$in47$i = $99; //@line 30535
     }
    }
   }
   HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 30540
   HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 30542
   HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $42; //@line 30544
   HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 30546
   HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 30549
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 30551
   $115 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($14, $6, $16, $$sroa$0$0$in$lcssa$i + 5 - $44 | 0) | 0; //@line 30552
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 30555
    $116 = $ReallocAsyncCtx4 + 4 | 0; //@line 30556
    HEAP32[$116 >> 2] = $2; //@line 30557
    $117 = $ReallocAsyncCtx4 + 8 | 0; //@line 30558
    HEAP32[$117 >> 2] = $4; //@line 30559
    $118 = $ReallocAsyncCtx4 + 12 | 0; //@line 30560
    HEAP32[$118 >> 2] = $6; //@line 30561
    $119 = $ReallocAsyncCtx4 + 16 | 0; //@line 30562
    HEAP32[$119 >> 2] = $8; //@line 30563
    $120 = $ReallocAsyncCtx4 + 20 | 0; //@line 30564
    HEAP32[$120 >> 2] = $10; //@line 30565
    $121 = $ReallocAsyncCtx4 + 24 | 0; //@line 30566
    HEAP32[$121 >> 2] = $12; //@line 30567
    $122 = $ReallocAsyncCtx4 + 28 | 0; //@line 30568
    HEAP32[$122 >> 2] = $14; //@line 30569
    $123 = $ReallocAsyncCtx4 + 32 | 0; //@line 30570
    HEAP32[$123 >> 2] = $16; //@line 30571
    $124 = $ReallocAsyncCtx4 + 36 | 0; //@line 30572
    HEAP32[$124 >> 2] = $18; //@line 30573
    $125 = $ReallocAsyncCtx4 + 40 | 0; //@line 30574
    HEAP32[$125 >> 2] = $20; //@line 30575
    $126 = $ReallocAsyncCtx4 + 44 | 0; //@line 30576
    HEAP32[$126 >> 2] = $22; //@line 30577
    $127 = $ReallocAsyncCtx4 + 48 | 0; //@line 30578
    HEAP32[$127 >> 2] = $24; //@line 30579
    $128 = $ReallocAsyncCtx4 + 52 | 0; //@line 30580
    HEAP32[$128 >> 2] = $26; //@line 30581
    $129 = $ReallocAsyncCtx4 + 56 | 0; //@line 30582
    HEAP32[$129 >> 2] = $28; //@line 30583
    $130 = $ReallocAsyncCtx4 + 60 | 0; //@line 30584
    HEAP32[$130 >> 2] = $30; //@line 30585
    $131 = $ReallocAsyncCtx4 + 64 | 0; //@line 30586
    HEAP32[$131 >> 2] = $32; //@line 30587
    $132 = $ReallocAsyncCtx4 + 68 | 0; //@line 30588
    HEAP32[$132 >> 2] = $34; //@line 30589
    $133 = $ReallocAsyncCtx4 + 72 | 0; //@line 30590
    HEAP32[$133 >> 2] = $36; //@line 30591
    $134 = $ReallocAsyncCtx4 + 76 | 0; //@line 30592
    HEAP32[$134 >> 2] = $38; //@line 30593
    $135 = $ReallocAsyncCtx4 + 80 | 0; //@line 30594
    HEAP32[$135 >> 2] = $40; //@line 30595
    $136 = $ReallocAsyncCtx4 + 84 | 0; //@line 30596
    HEAP8[$136 >> 0] = $42; //@line 30597
    $137 = $ReallocAsyncCtx4 + 88 | 0; //@line 30598
    HEAP32[$137 >> 2] = $44; //@line 30599
    $138 = $ReallocAsyncCtx4 + 92 | 0; //@line 30600
    HEAP32[$138 >> 2] = $46; //@line 30601
    $139 = $ReallocAsyncCtx4 + 96 | 0; //@line 30602
    HEAP32[$139 >> 2] = $48; //@line 30603
    $140 = $ReallocAsyncCtx4 + 100 | 0; //@line 30604
    HEAP8[$140 >> 0] = $56; //@line 30605
    $141 = $ReallocAsyncCtx4 + 101 | 0; //@line 30606
    HEAP8[$141 >> 0] = $52; //@line 30607
    sp = STACKTOP; //@line 30608
    STACKTOP = sp; //@line 30609
    return;
   }
   HEAP32[___async_retval >> 2] = $115; //@line 30612
   ___async_unwind = 0; //@line 30613
   HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 30614
   $116 = $ReallocAsyncCtx4 + 4 | 0; //@line 30615
   HEAP32[$116 >> 2] = $2; //@line 30616
   $117 = $ReallocAsyncCtx4 + 8 | 0; //@line 30617
   HEAP32[$117 >> 2] = $4; //@line 30618
   $118 = $ReallocAsyncCtx4 + 12 | 0; //@line 30619
   HEAP32[$118 >> 2] = $6; //@line 30620
   $119 = $ReallocAsyncCtx4 + 16 | 0; //@line 30621
   HEAP32[$119 >> 2] = $8; //@line 30622
   $120 = $ReallocAsyncCtx4 + 20 | 0; //@line 30623
   HEAP32[$120 >> 2] = $10; //@line 30624
   $121 = $ReallocAsyncCtx4 + 24 | 0; //@line 30625
   HEAP32[$121 >> 2] = $12; //@line 30626
   $122 = $ReallocAsyncCtx4 + 28 | 0; //@line 30627
   HEAP32[$122 >> 2] = $14; //@line 30628
   $123 = $ReallocAsyncCtx4 + 32 | 0; //@line 30629
   HEAP32[$123 >> 2] = $16; //@line 30630
   $124 = $ReallocAsyncCtx4 + 36 | 0; //@line 30631
   HEAP32[$124 >> 2] = $18; //@line 30632
   $125 = $ReallocAsyncCtx4 + 40 | 0; //@line 30633
   HEAP32[$125 >> 2] = $20; //@line 30634
   $126 = $ReallocAsyncCtx4 + 44 | 0; //@line 30635
   HEAP32[$126 >> 2] = $22; //@line 30636
   $127 = $ReallocAsyncCtx4 + 48 | 0; //@line 30637
   HEAP32[$127 >> 2] = $24; //@line 30638
   $128 = $ReallocAsyncCtx4 + 52 | 0; //@line 30639
   HEAP32[$128 >> 2] = $26; //@line 30640
   $129 = $ReallocAsyncCtx4 + 56 | 0; //@line 30641
   HEAP32[$129 >> 2] = $28; //@line 30642
   $130 = $ReallocAsyncCtx4 + 60 | 0; //@line 30643
   HEAP32[$130 >> 2] = $30; //@line 30644
   $131 = $ReallocAsyncCtx4 + 64 | 0; //@line 30645
   HEAP32[$131 >> 2] = $32; //@line 30646
   $132 = $ReallocAsyncCtx4 + 68 | 0; //@line 30647
   HEAP32[$132 >> 2] = $34; //@line 30648
   $133 = $ReallocAsyncCtx4 + 72 | 0; //@line 30649
   HEAP32[$133 >> 2] = $36; //@line 30650
   $134 = $ReallocAsyncCtx4 + 76 | 0; //@line 30651
   HEAP32[$134 >> 2] = $38; //@line 30652
   $135 = $ReallocAsyncCtx4 + 80 | 0; //@line 30653
   HEAP32[$135 >> 2] = $40; //@line 30654
   $136 = $ReallocAsyncCtx4 + 84 | 0; //@line 30655
   HEAP8[$136 >> 0] = $42; //@line 30656
   $137 = $ReallocAsyncCtx4 + 88 | 0; //@line 30657
   HEAP32[$137 >> 2] = $44; //@line 30658
   $138 = $ReallocAsyncCtx4 + 92 | 0; //@line 30659
   HEAP32[$138 >> 2] = $46; //@line 30660
   $139 = $ReallocAsyncCtx4 + 96 | 0; //@line 30661
   HEAP32[$139 >> 2] = $48; //@line 30662
   $140 = $ReallocAsyncCtx4 + 100 | 0; //@line 30663
   HEAP8[$140 >> 0] = $56; //@line 30664
   $141 = $ReallocAsyncCtx4 + 101 | 0; //@line 30665
   HEAP8[$141 >> 0] = $52; //@line 30666
   sp = STACKTOP; //@line 30667
   STACKTOP = sp; //@line 30668
   return;
  }
 }
 $61 = HEAP32[(HEAP32[$30 >> 2] | 0) + 28 >> 2] | 0; //@line 30674
 $ReallocAsyncCtx = _emscripten_realloc_async_context(104) | 0; //@line 30675
 $62 = FUNCTION_TABLE_iiii[$61 & 31]($32, $$191 & 255, $6) | 0; //@line 30676
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 30679
  $63 = $ReallocAsyncCtx + 4 | 0; //@line 30680
  HEAP32[$63 >> 2] = $2; //@line 30681
  $64 = $ReallocAsyncCtx + 8 | 0; //@line 30682
  HEAP32[$64 >> 2] = $4; //@line 30683
  $65 = $ReallocAsyncCtx + 12 | 0; //@line 30684
  HEAP32[$65 >> 2] = $6; //@line 30685
  $66 = $ReallocAsyncCtx + 16 | 0; //@line 30686
  HEAP32[$66 >> 2] = $8; //@line 30687
  $67 = $ReallocAsyncCtx + 20 | 0; //@line 30688
  HEAP32[$67 >> 2] = $10; //@line 30689
  $68 = $ReallocAsyncCtx + 24 | 0; //@line 30690
  HEAP32[$68 >> 2] = $12; //@line 30691
  $69 = $ReallocAsyncCtx + 28 | 0; //@line 30692
  HEAP32[$69 >> 2] = $14; //@line 30693
  $70 = $ReallocAsyncCtx + 32 | 0; //@line 30694
  HEAP8[$70 >> 0] = $$191; //@line 30695
  $71 = $ReallocAsyncCtx + 36 | 0; //@line 30696
  HEAP32[$71 >> 2] = $16; //@line 30697
  $72 = $ReallocAsyncCtx + 40 | 0; //@line 30698
  HEAP32[$72 >> 2] = $18; //@line 30699
  $73 = $ReallocAsyncCtx + 44 | 0; //@line 30700
  HEAP32[$73 >> 2] = $20; //@line 30701
  $74 = $ReallocAsyncCtx + 48 | 0; //@line 30702
  HEAP32[$74 >> 2] = $22; //@line 30703
  $75 = $ReallocAsyncCtx + 52 | 0; //@line 30704
  HEAP32[$75 >> 2] = $24; //@line 30705
  $76 = $ReallocAsyncCtx + 56 | 0; //@line 30706
  HEAP32[$76 >> 2] = $26; //@line 30707
  $77 = $ReallocAsyncCtx + 60 | 0; //@line 30708
  HEAP32[$77 >> 2] = $28; //@line 30709
  $78 = $ReallocAsyncCtx + 64 | 0; //@line 30710
  HEAP32[$78 >> 2] = $30; //@line 30711
  $79 = $ReallocAsyncCtx + 68 | 0; //@line 30712
  HEAP32[$79 >> 2] = $32; //@line 30713
  $80 = $ReallocAsyncCtx + 72 | 0; //@line 30714
  HEAP32[$80 >> 2] = $34; //@line 30715
  $81 = $ReallocAsyncCtx + 76 | 0; //@line 30716
  HEAP32[$81 >> 2] = $36; //@line 30717
  $82 = $ReallocAsyncCtx + 80 | 0; //@line 30718
  HEAP32[$82 >> 2] = $38; //@line 30719
  $83 = $ReallocAsyncCtx + 84 | 0; //@line 30720
  HEAP32[$83 >> 2] = $40; //@line 30721
  $84 = $ReallocAsyncCtx + 88 | 0; //@line 30722
  HEAP8[$84 >> 0] = $52; //@line 30723
  $85 = $ReallocAsyncCtx + 89 | 0; //@line 30724
  HEAP8[$85 >> 0] = $42; //@line 30725
  $86 = $ReallocAsyncCtx + 92 | 0; //@line 30726
  HEAP32[$86 >> 2] = $44; //@line 30727
  $87 = $ReallocAsyncCtx + 96 | 0; //@line 30728
  HEAP32[$87 >> 2] = $46; //@line 30729
  $88 = $ReallocAsyncCtx + 100 | 0; //@line 30730
  HEAP32[$88 >> 2] = $48; //@line 30731
  sp = STACKTOP; //@line 30732
  STACKTOP = sp; //@line 30733
  return;
 }
 HEAP32[___async_retval >> 2] = $62; //@line 30736
 ___async_unwind = 0; //@line 30737
 HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 30738
 $63 = $ReallocAsyncCtx + 4 | 0; //@line 30739
 HEAP32[$63 >> 2] = $2; //@line 30740
 $64 = $ReallocAsyncCtx + 8 | 0; //@line 30741
 HEAP32[$64 >> 2] = $4; //@line 30742
 $65 = $ReallocAsyncCtx + 12 | 0; //@line 30743
 HEAP32[$65 >> 2] = $6; //@line 30744
 $66 = $ReallocAsyncCtx + 16 | 0; //@line 30745
 HEAP32[$66 >> 2] = $8; //@line 30746
 $67 = $ReallocAsyncCtx + 20 | 0; //@line 30747
 HEAP32[$67 >> 2] = $10; //@line 30748
 $68 = $ReallocAsyncCtx + 24 | 0; //@line 30749
 HEAP32[$68 >> 2] = $12; //@line 30750
 $69 = $ReallocAsyncCtx + 28 | 0; //@line 30751
 HEAP32[$69 >> 2] = $14; //@line 30752
 $70 = $ReallocAsyncCtx + 32 | 0; //@line 30753
 HEAP8[$70 >> 0] = $$191; //@line 30754
 $71 = $ReallocAsyncCtx + 36 | 0; //@line 30755
 HEAP32[$71 >> 2] = $16; //@line 30756
 $72 = $ReallocAsyncCtx + 40 | 0; //@line 30757
 HEAP32[$72 >> 2] = $18; //@line 30758
 $73 = $ReallocAsyncCtx + 44 | 0; //@line 30759
 HEAP32[$73 >> 2] = $20; //@line 30760
 $74 = $ReallocAsyncCtx + 48 | 0; //@line 30761
 HEAP32[$74 >> 2] = $22; //@line 30762
 $75 = $ReallocAsyncCtx + 52 | 0; //@line 30763
 HEAP32[$75 >> 2] = $24; //@line 30764
 $76 = $ReallocAsyncCtx + 56 | 0; //@line 30765
 HEAP32[$76 >> 2] = $26; //@line 30766
 $77 = $ReallocAsyncCtx + 60 | 0; //@line 30767
 HEAP32[$77 >> 2] = $28; //@line 30768
 $78 = $ReallocAsyncCtx + 64 | 0; //@line 30769
 HEAP32[$78 >> 2] = $30; //@line 30770
 $79 = $ReallocAsyncCtx + 68 | 0; //@line 30771
 HEAP32[$79 >> 2] = $32; //@line 30772
 $80 = $ReallocAsyncCtx + 72 | 0; //@line 30773
 HEAP32[$80 >> 2] = $34; //@line 30774
 $81 = $ReallocAsyncCtx + 76 | 0; //@line 30775
 HEAP32[$81 >> 2] = $36; //@line 30776
 $82 = $ReallocAsyncCtx + 80 | 0; //@line 30777
 HEAP32[$82 >> 2] = $38; //@line 30778
 $83 = $ReallocAsyncCtx + 84 | 0; //@line 30779
 HEAP32[$83 >> 2] = $40; //@line 30780
 $84 = $ReallocAsyncCtx + 88 | 0; //@line 30781
 HEAP8[$84 >> 0] = $52; //@line 30782
 $85 = $ReallocAsyncCtx + 89 | 0; //@line 30783
 HEAP8[$85 >> 0] = $42; //@line 30784
 $86 = $ReallocAsyncCtx + 92 | 0; //@line 30785
 HEAP32[$86 >> 2] = $44; //@line 30786
 $87 = $ReallocAsyncCtx + 96 | 0; //@line 30787
 HEAP32[$87 >> 2] = $46; //@line 30788
 $88 = $ReallocAsyncCtx + 100 | 0; //@line 30789
 HEAP32[$88 >> 2] = $48; //@line 30790
 sp = STACKTOP; //@line 30791
 STACKTOP = sp; //@line 30792
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_77($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $10 = 0, $104 = 0, $105 = 0, $108 = 0, $111 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $172 = 0, $175 = 0, $177 = 0, $18 = 0, $185 = 0, $188 = 0, $190 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $203 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, $97 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15920
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15922
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15924
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15926
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15928
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15930
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15932
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15934
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15936
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15938
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15940
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15942
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15944
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15946
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15948
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15950
 $31 = $26 + 12 | 0; //@line 15951
 $32 = HEAP32[$31 >> 2] | 0; //@line 15952
 if ($32 | 0) {
  $35 = HEAP32[$32 + 4 >> 2] | 0; //@line 15956
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 15957
  FUNCTION_TABLE_vii[$35 & 7]($6, $26); //@line 15958
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 15961
   $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 15962
   HEAP32[$36 >> 2] = $16; //@line 15963
   $37 = $ReallocAsyncCtx3 + 8 | 0; //@line 15964
   HEAP32[$37 >> 2] = $4; //@line 15965
   $38 = $ReallocAsyncCtx3 + 12 | 0; //@line 15966
   HEAP32[$38 >> 2] = $31; //@line 15967
   $39 = $ReallocAsyncCtx3 + 16 | 0; //@line 15968
   HEAP32[$39 >> 2] = $2; //@line 15969
   $40 = $ReallocAsyncCtx3 + 20 | 0; //@line 15970
   HEAP32[$40 >> 2] = $18; //@line 15971
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 15972
   HEAP32[$41 >> 2] = $6; //@line 15973
   $42 = $ReallocAsyncCtx3 + 28 | 0; //@line 15974
   HEAP32[$42 >> 2] = $14; //@line 15975
   $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 15976
   HEAP32[$43 >> 2] = $20; //@line 15977
   $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 15978
   HEAP32[$44 >> 2] = $8; //@line 15979
   $45 = $ReallocAsyncCtx3 + 40 | 0; //@line 15980
   HEAP32[$45 >> 2] = $10; //@line 15981
   $46 = $ReallocAsyncCtx3 + 44 | 0; //@line 15982
   HEAP32[$46 >> 2] = $22; //@line 15983
   $47 = $ReallocAsyncCtx3 + 48 | 0; //@line 15984
   HEAP32[$47 >> 2] = $24; //@line 15985
   $48 = $ReallocAsyncCtx3 + 52 | 0; //@line 15986
   HEAP32[$48 >> 2] = $28; //@line 15987
   $49 = $ReallocAsyncCtx3 + 56 | 0; //@line 15988
   HEAP32[$49 >> 2] = $30; //@line 15989
   $50 = $ReallocAsyncCtx3 + 60 | 0; //@line 15990
   HEAP32[$50 >> 2] = $12; //@line 15991
   sp = STACKTOP; //@line 15992
   return;
  }
  ___async_unwind = 0; //@line 15995
  HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 15996
  $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 15997
  HEAP32[$36 >> 2] = $16; //@line 15998
  $37 = $ReallocAsyncCtx3 + 8 | 0; //@line 15999
  HEAP32[$37 >> 2] = $4; //@line 16000
  $38 = $ReallocAsyncCtx3 + 12 | 0; //@line 16001
  HEAP32[$38 >> 2] = $31; //@line 16002
  $39 = $ReallocAsyncCtx3 + 16 | 0; //@line 16003
  HEAP32[$39 >> 2] = $2; //@line 16004
  $40 = $ReallocAsyncCtx3 + 20 | 0; //@line 16005
  HEAP32[$40 >> 2] = $18; //@line 16006
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 16007
  HEAP32[$41 >> 2] = $6; //@line 16008
  $42 = $ReallocAsyncCtx3 + 28 | 0; //@line 16009
  HEAP32[$42 >> 2] = $14; //@line 16010
  $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 16011
  HEAP32[$43 >> 2] = $20; //@line 16012
  $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 16013
  HEAP32[$44 >> 2] = $8; //@line 16014
  $45 = $ReallocAsyncCtx3 + 40 | 0; //@line 16015
  HEAP32[$45 >> 2] = $10; //@line 16016
  $46 = $ReallocAsyncCtx3 + 44 | 0; //@line 16017
  HEAP32[$46 >> 2] = $22; //@line 16018
  $47 = $ReallocAsyncCtx3 + 48 | 0; //@line 16019
  HEAP32[$47 >> 2] = $24; //@line 16020
  $48 = $ReallocAsyncCtx3 + 52 | 0; //@line 16021
  HEAP32[$48 >> 2] = $28; //@line 16022
  $49 = $ReallocAsyncCtx3 + 56 | 0; //@line 16023
  HEAP32[$49 >> 2] = $30; //@line 16024
  $50 = $ReallocAsyncCtx3 + 60 | 0; //@line 16025
  HEAP32[$50 >> 2] = $12; //@line 16026
  sp = STACKTOP; //@line 16027
  return;
 }
 HEAP32[$28 >> 2] = 0; //@line 16030
 $51 = $4 + 32 | 0; //@line 16031
 do {
  if (($51 | 0) != ($20 | 0)) {
   $53 = $4 + 44 | 0; //@line 16035
   $54 = HEAP32[$53 >> 2] | 0; //@line 16036
   if ($54 | 0) {
    $57 = HEAP32[$54 + 8 >> 2] | 0; //@line 16040
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 16041
    FUNCTION_TABLE_vi[$57 & 511]($51); //@line 16042
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 16045
     $58 = $ReallocAsyncCtx4 + 4 | 0; //@line 16046
     HEAP32[$58 >> 2] = $16; //@line 16047
     $59 = $ReallocAsyncCtx4 + 8 | 0; //@line 16048
     HEAP32[$59 >> 2] = $51; //@line 16049
     $60 = $ReallocAsyncCtx4 + 12 | 0; //@line 16050
     HEAP32[$60 >> 2] = $4; //@line 16051
     $61 = $ReallocAsyncCtx4 + 16 | 0; //@line 16052
     HEAP32[$61 >> 2] = $2; //@line 16053
     $62 = $ReallocAsyncCtx4 + 20 | 0; //@line 16054
     HEAP32[$62 >> 2] = $18; //@line 16055
     $63 = $ReallocAsyncCtx4 + 24 | 0; //@line 16056
     HEAP32[$63 >> 2] = $6; //@line 16057
     $64 = $ReallocAsyncCtx4 + 28 | 0; //@line 16058
     HEAP32[$64 >> 2] = $14; //@line 16059
     $65 = $ReallocAsyncCtx4 + 32 | 0; //@line 16060
     HEAP32[$65 >> 2] = $20; //@line 16061
     $66 = $ReallocAsyncCtx4 + 36 | 0; //@line 16062
     HEAP32[$66 >> 2] = $8; //@line 16063
     $67 = $ReallocAsyncCtx4 + 40 | 0; //@line 16064
     HEAP32[$67 >> 2] = $10; //@line 16065
     $68 = $ReallocAsyncCtx4 + 44 | 0; //@line 16066
     HEAP32[$68 >> 2] = $22; //@line 16067
     $69 = $ReallocAsyncCtx4 + 48 | 0; //@line 16068
     HEAP32[$69 >> 2] = $24; //@line 16069
     $70 = $ReallocAsyncCtx4 + 52 | 0; //@line 16070
     HEAP32[$70 >> 2] = $53; //@line 16071
     $71 = $ReallocAsyncCtx4 + 56 | 0; //@line 16072
     HEAP32[$71 >> 2] = $30; //@line 16073
     $72 = $ReallocAsyncCtx4 + 60 | 0; //@line 16074
     HEAP32[$72 >> 2] = $12; //@line 16075
     sp = STACKTOP; //@line 16076
     return;
    }
    ___async_unwind = 0; //@line 16079
    HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 16080
    $58 = $ReallocAsyncCtx4 + 4 | 0; //@line 16081
    HEAP32[$58 >> 2] = $16; //@line 16082
    $59 = $ReallocAsyncCtx4 + 8 | 0; //@line 16083
    HEAP32[$59 >> 2] = $51; //@line 16084
    $60 = $ReallocAsyncCtx4 + 12 | 0; //@line 16085
    HEAP32[$60 >> 2] = $4; //@line 16086
    $61 = $ReallocAsyncCtx4 + 16 | 0; //@line 16087
    HEAP32[$61 >> 2] = $2; //@line 16088
    $62 = $ReallocAsyncCtx4 + 20 | 0; //@line 16089
    HEAP32[$62 >> 2] = $18; //@line 16090
    $63 = $ReallocAsyncCtx4 + 24 | 0; //@line 16091
    HEAP32[$63 >> 2] = $6; //@line 16092
    $64 = $ReallocAsyncCtx4 + 28 | 0; //@line 16093
    HEAP32[$64 >> 2] = $14; //@line 16094
    $65 = $ReallocAsyncCtx4 + 32 | 0; //@line 16095
    HEAP32[$65 >> 2] = $20; //@line 16096
    $66 = $ReallocAsyncCtx4 + 36 | 0; //@line 16097
    HEAP32[$66 >> 2] = $8; //@line 16098
    $67 = $ReallocAsyncCtx4 + 40 | 0; //@line 16099
    HEAP32[$67 >> 2] = $10; //@line 16100
    $68 = $ReallocAsyncCtx4 + 44 | 0; //@line 16101
    HEAP32[$68 >> 2] = $22; //@line 16102
    $69 = $ReallocAsyncCtx4 + 48 | 0; //@line 16103
    HEAP32[$69 >> 2] = $24; //@line 16104
    $70 = $ReallocAsyncCtx4 + 52 | 0; //@line 16105
    HEAP32[$70 >> 2] = $53; //@line 16106
    $71 = $ReallocAsyncCtx4 + 56 | 0; //@line 16107
    HEAP32[$71 >> 2] = $30; //@line 16108
    $72 = $ReallocAsyncCtx4 + 60 | 0; //@line 16109
    HEAP32[$72 >> 2] = $12; //@line 16110
    sp = STACKTOP; //@line 16111
    return;
   }
   $73 = $20 + 12 | 0; //@line 16114
   $74 = HEAP32[$73 >> 2] | 0; //@line 16115
   if (!$74) {
    HEAP32[$53 >> 2] = 0; //@line 16118
    break;
   }
   $77 = HEAP32[$74 + 4 >> 2] | 0; //@line 16122
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 16123
   FUNCTION_TABLE_vii[$77 & 7]($51, $20); //@line 16124
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 16127
    $78 = $ReallocAsyncCtx5 + 4 | 0; //@line 16128
    HEAP32[$78 >> 2] = $16; //@line 16129
    $79 = $ReallocAsyncCtx5 + 8 | 0; //@line 16130
    HEAP32[$79 >> 2] = $51; //@line 16131
    $80 = $ReallocAsyncCtx5 + 12 | 0; //@line 16132
    HEAP32[$80 >> 2] = $4; //@line 16133
    $81 = $ReallocAsyncCtx5 + 16 | 0; //@line 16134
    HEAP32[$81 >> 2] = $2; //@line 16135
    $82 = $ReallocAsyncCtx5 + 20 | 0; //@line 16136
    HEAP32[$82 >> 2] = $18; //@line 16137
    $83 = $ReallocAsyncCtx5 + 24 | 0; //@line 16138
    HEAP32[$83 >> 2] = $6; //@line 16139
    $84 = $ReallocAsyncCtx5 + 28 | 0; //@line 16140
    HEAP32[$84 >> 2] = $14; //@line 16141
    $85 = $ReallocAsyncCtx5 + 32 | 0; //@line 16142
    HEAP32[$85 >> 2] = $8; //@line 16143
    $86 = $ReallocAsyncCtx5 + 36 | 0; //@line 16144
    HEAP32[$86 >> 2] = $10; //@line 16145
    $87 = $ReallocAsyncCtx5 + 40 | 0; //@line 16146
    HEAP32[$87 >> 2] = $22; //@line 16147
    $88 = $ReallocAsyncCtx5 + 44 | 0; //@line 16148
    HEAP32[$88 >> 2] = $24; //@line 16149
    $89 = $ReallocAsyncCtx5 + 48 | 0; //@line 16150
    HEAP32[$89 >> 2] = $53; //@line 16151
    $90 = $ReallocAsyncCtx5 + 52 | 0; //@line 16152
    HEAP32[$90 >> 2] = $73; //@line 16153
    $91 = $ReallocAsyncCtx5 + 56 | 0; //@line 16154
    HEAP32[$91 >> 2] = $30; //@line 16155
    $92 = $ReallocAsyncCtx5 + 60 | 0; //@line 16156
    HEAP32[$92 >> 2] = $12; //@line 16157
    sp = STACKTOP; //@line 16158
    return;
   }
   ___async_unwind = 0; //@line 16161
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 16162
   $78 = $ReallocAsyncCtx5 + 4 | 0; //@line 16163
   HEAP32[$78 >> 2] = $16; //@line 16164
   $79 = $ReallocAsyncCtx5 + 8 | 0; //@line 16165
   HEAP32[$79 >> 2] = $51; //@line 16166
   $80 = $ReallocAsyncCtx5 + 12 | 0; //@line 16167
   HEAP32[$80 >> 2] = $4; //@line 16168
   $81 = $ReallocAsyncCtx5 + 16 | 0; //@line 16169
   HEAP32[$81 >> 2] = $2; //@line 16170
   $82 = $ReallocAsyncCtx5 + 20 | 0; //@line 16171
   HEAP32[$82 >> 2] = $18; //@line 16172
   $83 = $ReallocAsyncCtx5 + 24 | 0; //@line 16173
   HEAP32[$83 >> 2] = $6; //@line 16174
   $84 = $ReallocAsyncCtx5 + 28 | 0; //@line 16175
   HEAP32[$84 >> 2] = $14; //@line 16176
   $85 = $ReallocAsyncCtx5 + 32 | 0; //@line 16177
   HEAP32[$85 >> 2] = $8; //@line 16178
   $86 = $ReallocAsyncCtx5 + 36 | 0; //@line 16179
   HEAP32[$86 >> 2] = $10; //@line 16180
   $87 = $ReallocAsyncCtx5 + 40 | 0; //@line 16181
   HEAP32[$87 >> 2] = $22; //@line 16182
   $88 = $ReallocAsyncCtx5 + 44 | 0; //@line 16183
   HEAP32[$88 >> 2] = $24; //@line 16184
   $89 = $ReallocAsyncCtx5 + 48 | 0; //@line 16185
   HEAP32[$89 >> 2] = $53; //@line 16186
   $90 = $ReallocAsyncCtx5 + 52 | 0; //@line 16187
   HEAP32[$90 >> 2] = $73; //@line 16188
   $91 = $ReallocAsyncCtx5 + 56 | 0; //@line 16189
   HEAP32[$91 >> 2] = $30; //@line 16190
   $92 = $ReallocAsyncCtx5 + 60 | 0; //@line 16191
   HEAP32[$92 >> 2] = $12; //@line 16192
   sp = STACKTOP; //@line 16193
   return;
  }
 } while (0);
 HEAP32[$4 + 8 >> 2] = $14; //@line 16198
 HEAP32[$4 + 48 >> 2] = $22; //@line 16200
 HEAP32[$4 + 52 >> 2] = $24; //@line 16202
 $96 = $4 + 56 | 0; //@line 16203
 HEAP32[$96 >> 2] = 0; //@line 16204
 $97 = $4 + 60 | 0; //@line 16205
 HEAP32[$97 >> 2] = 0; //@line 16206
 HEAP32[$4 + 64 >> 2] = 0; //@line 16208
 HEAP8[$4 + 82 >> 0] = 0; //@line 16210
 HEAP8[$4 + 83 >> 0] = 1; //@line 16212
 HEAP8[$4 + 84 >> 0] = 3; //@line 16214
 HEAP16[$4 + 80 >> 1] = 0; //@line 16216
 HEAP32[$4 + 76 >> 2] = 0; //@line 16218
 $104 = $4 + 72 | 0; //@line 16219
 HEAP32[$104 >> 2] = 15500; //@line 16220
 $105 = HEAP32[177] | 0; //@line 16221
 HEAP32[177] = $105 + 1; //@line 16223
 $$ = ($105 | 0) > 32767 ? 1 : $105; //@line 16225
 HEAP32[$4 >> 2] = $$; //@line 16226
 $108 = HEAP32[2518] | 0; //@line 16227
 if (!$108) {
  $$1 = 0; //@line 16230
  $162 = 0; //@line 16230
 } else {
  $111 = HEAP32[$108 + 56 >> 2] | 0; //@line 16233
  if (!$111) {
   $$1 = 1; //@line 16236
   $162 = 0; //@line 16236
  } else {
   if ((HEAP32[$108 + 8 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$96 >> 2] = $111; //@line 16242
    HEAP32[$97 >> 2] = HEAP32[$108 + 60 >> 2]; //@line 16245
    $$1 = 1; //@line 16246
    $162 = $111; //@line 16246
   } else {
    $$1 = 1; //@line 16248
    $162 = 0; //@line 16248
   }
  }
 }
 $118 = HEAP32[2519] | 0; //@line 16252
 if (!$118) {
  $$1$1 = $$1; //@line 16255
  $175 = $162; //@line 16255
 } else {
  if (!$162) {
   $164 = HEAP32[$118 + 56 >> 2] | 0; //@line 16260
   if (!$164) {
    $217 = 0; //@line 16263
   } else {
    if ((HEAP32[$118 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$96 >> 2] = $164; //@line 16269
     HEAP32[$97 >> 2] = HEAP32[$118 + 60 >> 2]; //@line 16272
     $217 = $164; //@line 16273
    } else {
     $217 = 0; //@line 16275
    }
   }
  } else {
   $217 = $162; //@line 16279
  }
  $$1$1 = $$1 + 1 | 0; //@line 16282
  $175 = $217; //@line 16282
 }
 $172 = HEAP32[2520] | 0; //@line 16284
 if (!$172) {
  $$1$2 = $$1$1; //@line 16287
  $188 = $175; //@line 16287
 } else {
  if (!$175) {
   $177 = HEAP32[$172 + 56 >> 2] | 0; //@line 16292
   if (!$177) {
    $218 = 0; //@line 16295
   } else {
    if ((HEAP32[$172 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$96 >> 2] = $177; //@line 16301
     HEAP32[$97 >> 2] = HEAP32[$172 + 60 >> 2]; //@line 16304
     $218 = $177; //@line 16305
    } else {
     $218 = 0; //@line 16307
    }
   }
  } else {
   $218 = $175; //@line 16311
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 16314
  $188 = $218; //@line 16314
 }
 $185 = HEAP32[2521] | 0; //@line 16316
 if (!$185) {
  $$1$3 = $$1$2; //@line 16319
  $201 = $188; //@line 16319
 } else {
  if (!$188) {
   $190 = HEAP32[$185 + 56 >> 2] | 0; //@line 16324
   if (!$190) {
    $219 = 0; //@line 16327
   } else {
    if ((HEAP32[$185 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$96 >> 2] = $190; //@line 16333
     HEAP32[$97 >> 2] = HEAP32[$185 + 60 >> 2]; //@line 16336
     $219 = $190; //@line 16337
    } else {
     $219 = 0; //@line 16339
    }
   }
  } else {
   $219 = $188; //@line 16343
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 16346
  $201 = $219; //@line 16346
 }
 $198 = HEAP32[2522] | 0; //@line 16348
 if (!$198) {
  HEAP32[10072 + ($12 << 2) >> 2] = $4; //@line 16352
  HEAP32[$104 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 16355
  if (!$$1$3) {
   $120 = $4 + 44 | 0; //@line 16358
   $121 = HEAP32[$120 >> 2] | 0; //@line 16359
   if (!$121) {
    $137 = $16 + 12 | 0; //@line 16362
    HEAP32[$137 >> 2] = 0; //@line 16363
    $139 = $18 + 4 | 0; //@line 16365
    HEAP32[$139 >> 2] = 0; //@line 16367
    HEAP32[$139 + 4 >> 2] = 0; //@line 16370
    HEAP32[$18 >> 2] = 3; //@line 16371
    $143 = $18 + 12 | 0; //@line 16372
    HEAP32[$143 >> 2] = 712; //@line 16373
    $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 16374
    $144 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 100, $18) | 0; //@line 16375
    if (___async) {
     HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 16378
     $145 = $ReallocAsyncCtx19 + 4 | 0; //@line 16379
     HEAP32[$145 >> 2] = $2; //@line 16380
     $146 = $ReallocAsyncCtx19 + 8 | 0; //@line 16381
     HEAP32[$146 >> 2] = $4; //@line 16382
     $147 = $ReallocAsyncCtx19 + 12 | 0; //@line 16383
     HEAP32[$147 >> 2] = $4; //@line 16384
     $148 = $ReallocAsyncCtx19 + 16 | 0; //@line 16385
     HEAP32[$148 >> 2] = $6; //@line 16386
     $149 = $ReallocAsyncCtx19 + 20 | 0; //@line 16387
     HEAP32[$149 >> 2] = $120; //@line 16388
     $150 = $ReallocAsyncCtx19 + 24 | 0; //@line 16389
     HEAP32[$150 >> 2] = $51; //@line 16390
     $151 = $ReallocAsyncCtx19 + 28 | 0; //@line 16391
     HEAP32[$151 >> 2] = $8; //@line 16392
     $152 = $ReallocAsyncCtx19 + 32 | 0; //@line 16393
     HEAP32[$152 >> 2] = $10; //@line 16394
     $153 = $ReallocAsyncCtx19 + 36 | 0; //@line 16395
     HEAP32[$153 >> 2] = $120; //@line 16396
     $154 = $ReallocAsyncCtx19 + 40 | 0; //@line 16397
     HEAP32[$154 >> 2] = $30; //@line 16398
     $155 = $ReallocAsyncCtx19 + 44 | 0; //@line 16399
     HEAP32[$155 >> 2] = $137; //@line 16400
     $156 = $ReallocAsyncCtx19 + 48 | 0; //@line 16401
     HEAP32[$156 >> 2] = $18; //@line 16402
     $157 = $ReallocAsyncCtx19 + 52 | 0; //@line 16403
     HEAP32[$157 >> 2] = $16; //@line 16404
     $158 = $ReallocAsyncCtx19 + 56 | 0; //@line 16405
     HEAP32[$158 >> 2] = $143; //@line 16406
     sp = STACKTOP; //@line 16407
     return;
    }
    HEAP32[___async_retval >> 2] = $144; //@line 16411
    ___async_unwind = 0; //@line 16412
    HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 16413
    $145 = $ReallocAsyncCtx19 + 4 | 0; //@line 16414
    HEAP32[$145 >> 2] = $2; //@line 16415
    $146 = $ReallocAsyncCtx19 + 8 | 0; //@line 16416
    HEAP32[$146 >> 2] = $4; //@line 16417
    $147 = $ReallocAsyncCtx19 + 12 | 0; //@line 16418
    HEAP32[$147 >> 2] = $4; //@line 16419
    $148 = $ReallocAsyncCtx19 + 16 | 0; //@line 16420
    HEAP32[$148 >> 2] = $6; //@line 16421
    $149 = $ReallocAsyncCtx19 + 20 | 0; //@line 16422
    HEAP32[$149 >> 2] = $120; //@line 16423
    $150 = $ReallocAsyncCtx19 + 24 | 0; //@line 16424
    HEAP32[$150 >> 2] = $51; //@line 16425
    $151 = $ReallocAsyncCtx19 + 28 | 0; //@line 16426
    HEAP32[$151 >> 2] = $8; //@line 16427
    $152 = $ReallocAsyncCtx19 + 32 | 0; //@line 16428
    HEAP32[$152 >> 2] = $10; //@line 16429
    $153 = $ReallocAsyncCtx19 + 36 | 0; //@line 16430
    HEAP32[$153 >> 2] = $120; //@line 16431
    $154 = $ReallocAsyncCtx19 + 40 | 0; //@line 16432
    HEAP32[$154 >> 2] = $30; //@line 16433
    $155 = $ReallocAsyncCtx19 + 44 | 0; //@line 16434
    HEAP32[$155 >> 2] = $137; //@line 16435
    $156 = $ReallocAsyncCtx19 + 48 | 0; //@line 16436
    HEAP32[$156 >> 2] = $18; //@line 16437
    $157 = $ReallocAsyncCtx19 + 52 | 0; //@line 16438
    HEAP32[$157 >> 2] = $16; //@line 16439
    $158 = $ReallocAsyncCtx19 + 56 | 0; //@line 16440
    HEAP32[$158 >> 2] = $143; //@line 16441
    sp = STACKTOP; //@line 16442
    return;
   } else {
    $124 = HEAP32[$121 + 4 >> 2] | 0; //@line 16446
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(52) | 0; //@line 16447
    FUNCTION_TABLE_vii[$124 & 7]($16, $51); //@line 16448
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 16451
     $125 = $ReallocAsyncCtx6 + 4 | 0; //@line 16452
     HEAP32[$125 >> 2] = $2; //@line 16453
     $126 = $ReallocAsyncCtx6 + 8 | 0; //@line 16454
     HEAP32[$126 >> 2] = $120; //@line 16455
     $127 = $ReallocAsyncCtx6 + 12 | 0; //@line 16456
     HEAP32[$127 >> 2] = $16; //@line 16457
     $128 = $ReallocAsyncCtx6 + 16 | 0; //@line 16458
     HEAP32[$128 >> 2] = $18; //@line 16459
     $129 = $ReallocAsyncCtx6 + 20 | 0; //@line 16460
     HEAP32[$129 >> 2] = $4; //@line 16461
     $130 = $ReallocAsyncCtx6 + 24 | 0; //@line 16462
     HEAP32[$130 >> 2] = $4; //@line 16463
     $131 = $ReallocAsyncCtx6 + 28 | 0; //@line 16464
     HEAP32[$131 >> 2] = $6; //@line 16465
     $132 = $ReallocAsyncCtx6 + 32 | 0; //@line 16466
     HEAP32[$132 >> 2] = $120; //@line 16467
     $133 = $ReallocAsyncCtx6 + 36 | 0; //@line 16468
     HEAP32[$133 >> 2] = $8; //@line 16469
     $134 = $ReallocAsyncCtx6 + 40 | 0; //@line 16470
     HEAP32[$134 >> 2] = $51; //@line 16471
     $135 = $ReallocAsyncCtx6 + 44 | 0; //@line 16472
     HEAP32[$135 >> 2] = $10; //@line 16473
     $136 = $ReallocAsyncCtx6 + 48 | 0; //@line 16474
     HEAP32[$136 >> 2] = $30; //@line 16475
     sp = STACKTOP; //@line 16476
     return;
    }
    ___async_unwind = 0; //@line 16479
    HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 16480
    $125 = $ReallocAsyncCtx6 + 4 | 0; //@line 16481
    HEAP32[$125 >> 2] = $2; //@line 16482
    $126 = $ReallocAsyncCtx6 + 8 | 0; //@line 16483
    HEAP32[$126 >> 2] = $120; //@line 16484
    $127 = $ReallocAsyncCtx6 + 12 | 0; //@line 16485
    HEAP32[$127 >> 2] = $16; //@line 16486
    $128 = $ReallocAsyncCtx6 + 16 | 0; //@line 16487
    HEAP32[$128 >> 2] = $18; //@line 16488
    $129 = $ReallocAsyncCtx6 + 20 | 0; //@line 16489
    HEAP32[$129 >> 2] = $4; //@line 16490
    $130 = $ReallocAsyncCtx6 + 24 | 0; //@line 16491
    HEAP32[$130 >> 2] = $4; //@line 16492
    $131 = $ReallocAsyncCtx6 + 28 | 0; //@line 16493
    HEAP32[$131 >> 2] = $6; //@line 16494
    $132 = $ReallocAsyncCtx6 + 32 | 0; //@line 16495
    HEAP32[$132 >> 2] = $120; //@line 16496
    $133 = $ReallocAsyncCtx6 + 36 | 0; //@line 16497
    HEAP32[$133 >> 2] = $8; //@line 16498
    $134 = $ReallocAsyncCtx6 + 40 | 0; //@line 16499
    HEAP32[$134 >> 2] = $51; //@line 16500
    $135 = $ReallocAsyncCtx6 + 44 | 0; //@line 16501
    HEAP32[$135 >> 2] = $10; //@line 16502
    $136 = $ReallocAsyncCtx6 + 48 | 0; //@line 16503
    HEAP32[$136 >> 2] = $30; //@line 16504
    sp = STACKTOP; //@line 16505
    return;
   }
  }
 } else {
  if (!$201) {
   $203 = HEAP32[$198 + 56 >> 2] | 0; //@line 16513
   if ($203 | 0) {
    if ((HEAP32[$198 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$96 >> 2] = $203; //@line 16520
     HEAP32[$97 >> 2] = HEAP32[$198 + 60 >> 2]; //@line 16523
    }
   }
  }
  HEAP32[10072 + ($12 << 2) >> 2] = $4; //@line 16528
  HEAP32[$104 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 16531
 }
 HEAP32[___async_retval >> 2] = $$; //@line 16534
 return;
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 4492
 STACKTOP = STACKTOP + 64 | 0; //@line 4493
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 4493
 $5 = sp + 16 | 0; //@line 4494
 $6 = sp; //@line 4495
 $7 = sp + 24 | 0; //@line 4496
 $8 = sp + 8 | 0; //@line 4497
 $9 = sp + 20 | 0; //@line 4498
 HEAP32[$5 >> 2] = $1; //@line 4499
 $10 = ($0 | 0) != 0; //@line 4500
 $11 = $7 + 40 | 0; //@line 4501
 $12 = $11; //@line 4502
 $13 = $7 + 39 | 0; //@line 4503
 $14 = $8 + 4 | 0; //@line 4504
 $$0243 = 0; //@line 4505
 $$0247 = 0; //@line 4505
 $$0269 = 0; //@line 4505
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 4514
     $$1248 = -1; //@line 4515
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 4519
     break;
    }
   } else {
    $$1248 = $$0247; //@line 4523
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 4526
  $21 = HEAP8[$20 >> 0] | 0; //@line 4527
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 4530
   break;
  } else {
   $23 = $21; //@line 4533
   $25 = $20; //@line 4533
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 4538
     $27 = $25; //@line 4538
     label = 9; //@line 4539
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 4544
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 4551
   HEAP32[$5 >> 2] = $24; //@line 4552
   $23 = HEAP8[$24 >> 0] | 0; //@line 4554
   $25 = $24; //@line 4554
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 4559
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 4564
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 4567
     $27 = $27 + 2 | 0; //@line 4568
     HEAP32[$5 >> 2] = $27; //@line 4569
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 4576
      break;
     } else {
      $$0249303 = $30; //@line 4573
      label = 9; //@line 4574
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 4584
  if ($10) {
   _out_670($0, $20, $36); //@line 4586
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 4590
   $$0247 = $$1248; //@line 4590
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 4598
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 4599
  if ($43) {
   $$0253 = -1; //@line 4601
   $$1270 = $$0269; //@line 4601
   $$sink = 1; //@line 4601
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 4611
    $$1270 = 1; //@line 4611
    $$sink = 3; //@line 4611
   } else {
    $$0253 = -1; //@line 4613
    $$1270 = $$0269; //@line 4613
    $$sink = 1; //@line 4613
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 4616
  HEAP32[$5 >> 2] = $51; //@line 4617
  $52 = HEAP8[$51 >> 0] | 0; //@line 4618
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 4620
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 4627
   $$lcssa291 = $52; //@line 4627
   $$lcssa292 = $51; //@line 4627
  } else {
   $$0262309 = 0; //@line 4629
   $60 = $52; //@line 4629
   $65 = $51; //@line 4629
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 4634
    $64 = $65 + 1 | 0; //@line 4635
    HEAP32[$5 >> 2] = $64; //@line 4636
    $66 = HEAP8[$64 >> 0] | 0; //@line 4637
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 4639
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 4646
     $$lcssa291 = $66; //@line 4646
     $$lcssa292 = $64; //@line 4646
     break;
    } else {
     $$0262309 = $63; //@line 4649
     $60 = $66; //@line 4649
     $65 = $64; //@line 4649
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 4661
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 4663
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 4668
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 4673
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 4685
     $$2271 = 1; //@line 4685
     $storemerge274 = $79 + 3 | 0; //@line 4685
    } else {
     label = 23; //@line 4687
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 4691
    if ($$1270 | 0) {
     $$0 = -1; //@line 4694
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 4709
     $106 = HEAP32[$105 >> 2] | 0; //@line 4710
     HEAP32[$2 >> 2] = $105 + 4; //@line 4712
     $363 = $106; //@line 4713
    } else {
     $363 = 0; //@line 4715
    }
    $$0259 = $363; //@line 4719
    $$2271 = 0; //@line 4719
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 4719
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 4721
   $109 = ($$0259 | 0) < 0; //@line 4722
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 4727
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 4727
   $$3272 = $$2271; //@line 4727
   $115 = $storemerge274; //@line 4727
  } else {
   $112 = _getint_671($5) | 0; //@line 4729
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 4732
    break;
   }
   $$1260 = $112; //@line 4736
   $$1263 = $$0262$lcssa; //@line 4736
   $$3272 = $$1270; //@line 4736
   $115 = HEAP32[$5 >> 2] | 0; //@line 4736
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 4747
     $156 = _getint_671($5) | 0; //@line 4748
     $$0254 = $156; //@line 4750
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 4750
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 4759
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 4764
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 4769
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 4776
      $144 = $125 + 4 | 0; //@line 4780
      HEAP32[$5 >> 2] = $144; //@line 4781
      $$0254 = $140; //@line 4782
      $$pre345 = $144; //@line 4782
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 4788
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 4803
     $152 = HEAP32[$151 >> 2] | 0; //@line 4804
     HEAP32[$2 >> 2] = $151 + 4; //@line 4806
     $364 = $152; //@line 4807
    } else {
     $364 = 0; //@line 4809
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 4812
    HEAP32[$5 >> 2] = $154; //@line 4813
    $$0254 = $364; //@line 4814
    $$pre345 = $154; //@line 4814
   } else {
    $$0254 = -1; //@line 4816
    $$pre345 = $115; //@line 4816
   }
  } while (0);
  $$0252 = 0; //@line 4819
  $158 = $$pre345; //@line 4819
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 4826
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 4829
   HEAP32[$5 >> 2] = $158; //@line 4830
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (6815 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 4835
   $168 = $167 & 255; //@line 4836
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 4840
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 4847
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 4851
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 4855
     break L1;
    } else {
     label = 50; //@line 4858
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 4863
     $176 = $3 + ($$0253 << 3) | 0; //@line 4865
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 4870
     $182 = $6; //@line 4871
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 4873
     HEAP32[$182 + 4 >> 2] = $181; //@line 4876
     label = 50; //@line 4877
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 4881
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 4884
    $187 = HEAP32[$5 >> 2] | 0; //@line 4886
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 4890
   if ($10) {
    $187 = $158; //@line 4892
   } else {
    $$0243 = 0; //@line 4894
    $$0247 = $$1248; //@line 4894
    $$0269 = $$3272; //@line 4894
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 4900
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 4906
  $196 = $$1263 & -65537; //@line 4909
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 4910
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 4918
       $$0243 = 0; //@line 4919
       $$0247 = $$1248; //@line 4919
       $$0269 = $$3272; //@line 4919
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 4925
       $$0243 = 0; //@line 4926
       $$0247 = $$1248; //@line 4926
       $$0269 = $$3272; //@line 4926
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 4934
       HEAP32[$208 >> 2] = $$1248; //@line 4936
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 4939
       $$0243 = 0; //@line 4940
       $$0247 = $$1248; //@line 4940
       $$0269 = $$3272; //@line 4940
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 4947
       $$0243 = 0; //@line 4948
       $$0247 = $$1248; //@line 4948
       $$0269 = $$3272; //@line 4948
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 4955
       $$0243 = 0; //@line 4956
       $$0247 = $$1248; //@line 4956
       $$0269 = $$3272; //@line 4956
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 4962
       $$0243 = 0; //@line 4963
       $$0247 = $$1248; //@line 4963
       $$0269 = $$3272; //@line 4963
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 4971
       HEAP32[$220 >> 2] = $$1248; //@line 4973
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 4976
       $$0243 = 0; //@line 4977
       $$0247 = $$1248; //@line 4977
       $$0269 = $$3272; //@line 4977
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 4982
       $$0247 = $$1248; //@line 4982
       $$0269 = $$3272; //@line 4982
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 4992
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 4992
     $$3265 = $$1263$ | 8; //@line 4992
     label = 62; //@line 4993
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 4997
     $$1255 = $$0254; //@line 4997
     $$3265 = $$1263$; //@line 4997
     label = 62; //@line 4998
     break;
    }
   case 111:
    {
     $242 = $6; //@line 5002
     $244 = HEAP32[$242 >> 2] | 0; //@line 5004
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 5007
     $248 = _fmt_o($244, $247, $11) | 0; //@line 5008
     $252 = $12 - $248 | 0; //@line 5012
     $$0228 = $248; //@line 5017
     $$1233 = 0; //@line 5017
     $$1238 = 7279; //@line 5017
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 5017
     $$4266 = $$1263$; //@line 5017
     $281 = $244; //@line 5017
     $283 = $247; //@line 5017
     label = 68; //@line 5018
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 5022
     $258 = HEAP32[$256 >> 2] | 0; //@line 5024
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 5027
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 5030
      $264 = tempRet0; //@line 5031
      $265 = $6; //@line 5032
      HEAP32[$265 >> 2] = $263; //@line 5034
      HEAP32[$265 + 4 >> 2] = $264; //@line 5037
      $$0232 = 1; //@line 5038
      $$0237 = 7279; //@line 5038
      $275 = $263; //@line 5038
      $276 = $264; //@line 5038
      label = 67; //@line 5039
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 5051
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 7279 : 7281 : 7280; //@line 5051
      $275 = $258; //@line 5051
      $276 = $261; //@line 5051
      label = 67; //@line 5052
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 5058
     $$0232 = 0; //@line 5064
     $$0237 = 7279; //@line 5064
     $275 = HEAP32[$197 >> 2] | 0; //@line 5064
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 5064
     label = 67; //@line 5065
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 5076
     $$2 = $13; //@line 5077
     $$2234 = 0; //@line 5077
     $$2239 = 7279; //@line 5077
     $$2251 = $11; //@line 5077
     $$5 = 1; //@line 5077
     $$6268 = $196; //@line 5077
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 5084
     label = 72; //@line 5085
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 5089
     $$1 = $302 | 0 ? $302 : 7289; //@line 5092
     label = 72; //@line 5093
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 5103
     HEAP32[$14 >> 2] = 0; //@line 5104
     HEAP32[$6 >> 2] = $8; //@line 5105
     $$4258354 = -1; //@line 5106
     $365 = $8; //@line 5106
     label = 76; //@line 5107
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 5111
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 5114
      $$0240$lcssa356 = 0; //@line 5115
      label = 85; //@line 5116
     } else {
      $$4258354 = $$0254; //@line 5118
      $365 = $$pre348; //@line 5118
      label = 76; //@line 5119
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 5126
     $$0247 = $$1248; //@line 5126
     $$0269 = $$3272; //@line 5126
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 5131
     $$2234 = 0; //@line 5131
     $$2239 = 7279; //@line 5131
     $$2251 = $11; //@line 5131
     $$5 = $$0254; //@line 5131
     $$6268 = $$1263$; //@line 5131
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 5137
    $227 = $6; //@line 5138
    $229 = HEAP32[$227 >> 2] | 0; //@line 5140
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 5143
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 5145
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 5151
    $$0228 = $234; //@line 5156
    $$1233 = $or$cond278 ? 0 : 2; //@line 5156
    $$1238 = $or$cond278 ? 7279 : 7279 + ($$1236 >> 4) | 0; //@line 5156
    $$2256 = $$1255; //@line 5156
    $$4266 = $$3265; //@line 5156
    $281 = $229; //@line 5156
    $283 = $232; //@line 5156
    label = 68; //@line 5157
   } else if ((label | 0) == 67) {
    label = 0; //@line 5160
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 5162
    $$1233 = $$0232; //@line 5162
    $$1238 = $$0237; //@line 5162
    $$2256 = $$0254; //@line 5162
    $$4266 = $$1263$; //@line 5162
    $281 = $275; //@line 5162
    $283 = $276; //@line 5162
    label = 68; //@line 5163
   } else if ((label | 0) == 72) {
    label = 0; //@line 5166
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 5167
    $306 = ($305 | 0) == 0; //@line 5168
    $$2 = $$1; //@line 5175
    $$2234 = 0; //@line 5175
    $$2239 = 7279; //@line 5175
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 5175
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 5175
    $$6268 = $196; //@line 5175
   } else if ((label | 0) == 76) {
    label = 0; //@line 5178
    $$0229316 = $365; //@line 5179
    $$0240315 = 0; //@line 5179
    $$1244314 = 0; //@line 5179
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 5181
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 5184
      $$2245 = $$1244314; //@line 5184
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 5187
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 5193
      $$2245 = $320; //@line 5193
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 5197
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 5200
      $$0240315 = $325; //@line 5200
      $$1244314 = $320; //@line 5200
     } else {
      $$0240$lcssa = $325; //@line 5202
      $$2245 = $320; //@line 5202
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 5208
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 5211
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 5214
     label = 85; //@line 5215
    } else {
     $$1230327 = $365; //@line 5217
     $$1241326 = 0; //@line 5217
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 5219
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 5222
       label = 85; //@line 5223
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 5226
      $$1241326 = $331 + $$1241326 | 0; //@line 5227
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 5230
       label = 85; //@line 5231
       break L97;
      }
      _out_670($0, $9, $331); //@line 5235
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 5240
       label = 85; //@line 5241
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 5238
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 5249
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 5255
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 5257
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 5262
   $$2 = $or$cond ? $$0228 : $11; //@line 5267
   $$2234 = $$1233; //@line 5267
   $$2239 = $$1238; //@line 5267
   $$2251 = $11; //@line 5267
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 5267
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 5267
  } else if ((label | 0) == 85) {
   label = 0; //@line 5270
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 5272
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 5275
   $$0247 = $$1248; //@line 5275
   $$0269 = $$3272; //@line 5275
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 5280
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 5282
  $345 = $$$5 + $$2234 | 0; //@line 5283
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 5285
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 5286
  _out_670($0, $$2239, $$2234); //@line 5287
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 5289
  _pad_676($0, 48, $$$5, $343, 0); //@line 5290
  _out_670($0, $$2, $343); //@line 5291
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 5293
  $$0243 = $$2261; //@line 5294
  $$0247 = $$1248; //@line 5294
  $$0269 = $$3272; //@line 5294
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 5302
    } else {
     $$2242302 = 1; //@line 5304
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 5307
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 5310
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 5314
      $356 = $$2242302 + 1 | 0; //@line 5315
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 5318
      } else {
       $$2242$lcssa = $356; //@line 5320
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 5326
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 5332
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 5338
       } else {
        $$0 = 1; //@line 5340
        break;
       }
      }
     } else {
      $$0 = 1; //@line 5345
     }
    }
   } else {
    $$0 = $$1248; //@line 5349
   }
  }
 } while (0);
 STACKTOP = sp; //@line 5353
 return $$0 | 0; //@line 5353
}
function __Z29nsapi_dns_query_async_timeoutv() {
 var $$02972 = 0, $$03071 = 0, $$131 = 0, $$sroa_idx5$i$i = 0, $$sroa_idx5$i$i43 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $113 = 0, $116 = 0, $13 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $148 = 0, $149 = 0, $153 = 0, $16 = 0, $17 = 0, $180 = 0, $181 = 0, $182 = 0, $2 = 0, $208 = 0, $211 = 0, $237 = 0, $24 = 0, $240 = 0, $25 = 0, $270 = 0, $271 = 0, $275 = 0, $279 = 0, $280 = 0, $282 = 0, $286 = 0, $29 = 0, $291 = 0, $294 = 0, $297 = 0, $3 = 0, $300 = 0, $4 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $84 = 0, $87 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15232
 STACKTOP = STACKTOP + 96 | 0; //@line 15233
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 15233
 $0 = sp + 80 | 0; //@line 15234
 $1 = sp + 64 | 0; //@line 15235
 $2 = sp + 48 | 0; //@line 15236
 $3 = sp + 32 | 0; //@line 15237
 $4 = sp + 16 | 0; //@line 15238
 $5 = sp; //@line 15239
 $6 = $2 + 12 | 0; //@line 15240
 $7 = $3 + 8 | 0; //@line 15241
 $$sroa_idx5$i$i43 = $3 + 4 | 0; //@line 15242
 $8 = $3 + 12 | 0; //@line 15243
 $9 = $0 + 12 | 0; //@line 15244
 $10 = $1 + 8 | 0; //@line 15245
 $$sroa_idx5$i$i = $1 + 4 | 0; //@line 15246
 $11 = $1 + 12 | 0; //@line 15247
 $$02972 = 0; //@line 15248
 $$03071 = 0; //@line 15248
 L1 : while (1) {
  $13 = 10072 + ($$02972 << 2) | 0; //@line 15250
  $14 = HEAP32[$13 >> 2] | 0; //@line 15251
  if (!$14) {
   $$131 = $$03071; //@line 15254
  } else {
   $16 = $14 + 72 | 0; //@line 15256
   $17 = HEAP32[$16 >> 2] | 0; //@line 15257
   if ($17 >>> 0 > 100) {
    HEAP32[$16 >> 2] = $17 + -100; //@line 15261
   } else {
    if ((HEAP32[$$03071 + 4 >> 2] | 0) == -3012) {
     HEAP32[$$03071 + 76 >> 2] = 0; //@line 15268
     $24 = $14 + 44 | 0; //@line 15269
     $25 = HEAP32[$24 >> 2] | 0; //@line 15270
     if (!$25) {
      $56 = 0; //@line 15273
      $58 = $14; //@line 15273
     } else {
      $29 = HEAP32[$25 + 4 >> 2] | 0; //@line 15277
      $AsyncCtx = _emscripten_alloc_async_context(108, sp) | 0; //@line 15278
      FUNCTION_TABLE_vii[$29 & 7]($0, $14 + 32 | 0); //@line 15279
      if (___async) {
       label = 9; //@line 15282
       break;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 15285
      $56 = HEAP32[$24 >> 2] | 0; //@line 15288
      $58 = HEAP32[$13 >> 2] | 0; //@line 15288
     }
     HEAP32[$9 >> 2] = $56; //@line 15290
     $57 = HEAP32[$58 >> 2] | 0; //@line 15291
     HEAP32[$10 >> 2] = 0; //@line 15292
     HEAP32[$1 >> 2] = 191; //@line 15293
     HEAP32[$$sroa_idx5$i$i >> 2] = $57; //@line 15294
     HEAP32[$11 >> 2] = 724; //@line 15295
     $AsyncCtx40 = _emscripten_alloc_async_context(104, sp) | 0; //@line 15296
     __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 15297
     if (___async) {
      label = 12; //@line 15300
      break;
     }
     _emscripten_free_async_context($AsyncCtx40 | 0); //@line 15303
     $84 = HEAP32[$11 >> 2] | 0; //@line 15304
     if ($84 | 0) {
      $87 = HEAP32[$84 + 8 >> 2] | 0; //@line 15308
      $AsyncCtx3 = _emscripten_alloc_async_context(104, sp) | 0; //@line 15309
      FUNCTION_TABLE_vi[$87 & 511]($1); //@line 15310
      if (___async) {
       label = 15; //@line 15313
       break;
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15316
     }
     $113 = HEAP32[$9 >> 2] | 0; //@line 15318
     if ($113 | 0) {
      $116 = HEAP32[$113 + 8 >> 2] | 0; //@line 15322
      $AsyncCtx7 = _emscripten_alloc_async_context(104, sp) | 0; //@line 15323
      FUNCTION_TABLE_vi[$116 & 511]($0); //@line 15324
      if (___async) {
       label = 19; //@line 15327
       break;
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15330
     }
    }
   }
   $142 = HEAP32[$13 >> 2] | 0; //@line 15334
   $143 = $142 + 76 | 0; //@line 15335
   $144 = HEAP32[$143 >> 2] | 0; //@line 15336
   do {
    if ($144 | 0) {
     if ($144 >>> 0 > 100) {
      HEAP32[$143 >> 2] = $144 + -100; //@line 15343
      break;
     }
     HEAP32[$143 >> 2] = 0; //@line 15346
     $148 = $142 + 44 | 0; //@line 15347
     $149 = HEAP32[$148 >> 2] | 0; //@line 15348
     if (!$149) {
      $180 = 0; //@line 15351
      $182 = $142; //@line 15351
     } else {
      $153 = HEAP32[$149 + 4 >> 2] | 0; //@line 15355
      $AsyncCtx11 = _emscripten_alloc_async_context(108, sp) | 0; //@line 15356
      FUNCTION_TABLE_vii[$153 & 7]($2, $142 + 32 | 0); //@line 15357
      if (___async) {
       label = 26; //@line 15360
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15363
      $180 = HEAP32[$148 >> 2] | 0; //@line 15366
      $182 = HEAP32[$13 >> 2] | 0; //@line 15366
     }
     HEAP32[$6 >> 2] = $180; //@line 15368
     $181 = HEAP32[$182 >> 2] | 0; //@line 15369
     HEAP32[$7 >> 2] = 0; //@line 15370
     HEAP32[$3 >> 2] = 196; //@line 15371
     HEAP32[$$sroa_idx5$i$i43 >> 2] = $181; //@line 15372
     HEAP32[$8 >> 2] = 724; //@line 15373
     $AsyncCtx37 = _emscripten_alloc_async_context(104, sp) | 0; //@line 15374
     __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 0, $3) | 0; //@line 15375
     if (___async) {
      label = 29; //@line 15378
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx37 | 0); //@line 15381
     $208 = HEAP32[$8 >> 2] | 0; //@line 15382
     if ($208 | 0) {
      $211 = HEAP32[$208 + 8 >> 2] | 0; //@line 15386
      $AsyncCtx15 = _emscripten_alloc_async_context(104, sp) | 0; //@line 15387
      FUNCTION_TABLE_vi[$211 & 511]($3); //@line 15388
      if (___async) {
       label = 32; //@line 15391
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15394
     }
     $237 = HEAP32[$6 >> 2] | 0; //@line 15396
     if ($237 | 0) {
      $240 = HEAP32[$237 + 8 >> 2] | 0; //@line 15400
      $AsyncCtx19 = _emscripten_alloc_async_context(104, sp) | 0; //@line 15401
      FUNCTION_TABLE_vi[$240 & 511]($2); //@line 15402
      if (___async) {
       label = 36; //@line 15405
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 15408
     }
    }
   } while (0);
   if (!$$03071) {
    $$131 = HEAP32[$13 >> 2] | 0; //@line 15415
   } else {
    $$131 = $$03071; //@line 15417
   }
  }
  if (($$02972 | 0) < 4) {
   $$02972 = $$02972 + 1 | 0; //@line 15423
   $$03071 = $$131; //@line 15423
  } else {
   label = 2; //@line 15425
   break;
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   STACKTOP = sp; //@line 15432
   return;
  }
  $270 = $$131 + 44 | 0; //@line 15434
  $271 = HEAP32[$270 >> 2] | 0; //@line 15435
  do {
   if (!$271) {
    $280 = 0; //@line 15439
   } else {
    $275 = HEAP32[$271 + 4 >> 2] | 0; //@line 15443
    $AsyncCtx23 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15444
    FUNCTION_TABLE_vii[$275 & 7]($4, $$131 + 32 | 0); //@line 15445
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 200; //@line 15448
     HEAP32[$AsyncCtx23 + 4 >> 2] = $270; //@line 15450
     HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 15452
     HEAP32[$AsyncCtx23 + 12 >> 2] = $5; //@line 15454
     sp = STACKTOP; //@line 15455
     STACKTOP = sp; //@line 15456
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 15458
     $280 = HEAP32[$270 >> 2] | 0; //@line 15460
     break;
    }
   }
  } while (0);
  $279 = $4 + 12 | 0; //@line 15465
  HEAP32[$279 >> 2] = $280; //@line 15466
  $282 = $5 + 4 | 0; //@line 15468
  HEAP32[$282 >> 2] = 0; //@line 15470
  HEAP32[$282 + 4 >> 2] = 0; //@line 15473
  HEAP32[$5 >> 2] = 3; //@line 15474
  $286 = $5 + 12 | 0; //@line 15475
  HEAP32[$286 >> 2] = 712; //@line 15476
  $AsyncCtx34 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15477
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $5) | 0; //@line 15478
  if (___async) {
   HEAP32[$AsyncCtx34 >> 2] = 201; //@line 15481
   HEAP32[$AsyncCtx34 + 4 >> 2] = $286; //@line 15483
   HEAP32[$AsyncCtx34 + 8 >> 2] = $279; //@line 15485
   HEAP32[$AsyncCtx34 + 12 >> 2] = $5; //@line 15487
   HEAP32[$AsyncCtx34 + 16 >> 2] = $4; //@line 15489
   sp = STACKTOP; //@line 15490
   STACKTOP = sp; //@line 15491
   return;
  }
  _emscripten_free_async_context($AsyncCtx34 | 0); //@line 15493
  $291 = HEAP32[$286 >> 2] | 0; //@line 15494
  do {
   if ($291 | 0) {
    $294 = HEAP32[$291 + 8 >> 2] | 0; //@line 15499
    $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15500
    FUNCTION_TABLE_vi[$294 & 511]($5); //@line 15501
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 202; //@line 15504
     HEAP32[$AsyncCtx27 + 4 >> 2] = $279; //@line 15506
     HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 15508
     sp = STACKTOP; //@line 15509
     STACKTOP = sp; //@line 15510
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 15512
     break;
    }
   }
  } while (0);
  $297 = HEAP32[$279 >> 2] | 0; //@line 15517
  if (!$297) {
   STACKTOP = sp; //@line 15520
   return;
  }
  $300 = HEAP32[$297 + 8 >> 2] | 0; //@line 15523
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15524
  FUNCTION_TABLE_vi[$300 & 511]($4); //@line 15525
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 203; //@line 15528
   sp = STACKTOP; //@line 15529
   STACKTOP = sp; //@line 15530
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 15532
  STACKTOP = sp; //@line 15533
  return;
 } else if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 190; //@line 15536
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 15538
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 15540
  HEAP32[$AsyncCtx + 12 >> 2] = $9; //@line 15542
  HEAP32[$AsyncCtx + 16 >> 2] = $$03071; //@line 15544
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 15546
  HEAP32[$AsyncCtx + 24 >> 2] = $$02972; //@line 15548
  HEAP32[$AsyncCtx + 28 >> 2] = $9; //@line 15550
  HEAP32[$AsyncCtx + 32 >> 2] = $10; //@line 15552
  HEAP32[$AsyncCtx + 36 >> 2] = $1; //@line 15554
  HEAP32[$AsyncCtx + 40 >> 2] = $$sroa_idx5$i$i; //@line 15556
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 15558
  HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 15560
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 15562
  HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 15564
  HEAP32[$AsyncCtx + 60 >> 2] = $5; //@line 15566
  HEAP32[$AsyncCtx + 64 >> 2] = $24; //@line 15568
  HEAP32[$AsyncCtx + 68 >> 2] = $2; //@line 15570
  HEAP32[$AsyncCtx + 72 >> 2] = $6; //@line 15572
  HEAP32[$AsyncCtx + 76 >> 2] = $7; //@line 15574
  HEAP32[$AsyncCtx + 80 >> 2] = $3; //@line 15576
  HEAP32[$AsyncCtx + 84 >> 2] = $$sroa_idx5$i$i43; //@line 15578
  HEAP32[$AsyncCtx + 88 >> 2] = $8; //@line 15580
  HEAP32[$AsyncCtx + 92 >> 2] = $2; //@line 15582
  HEAP32[$AsyncCtx + 96 >> 2] = $3; //@line 15584
  HEAP32[$AsyncCtx + 100 >> 2] = $6; //@line 15586
  HEAP32[$AsyncCtx + 104 >> 2] = $3; //@line 15588
  sp = STACKTOP; //@line 15589
  STACKTOP = sp; //@line 15590
  return;
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx40 >> 2] = 192; //@line 15593
  HEAP32[$AsyncCtx40 + 4 >> 2] = $1; //@line 15595
  HEAP32[$AsyncCtx40 + 8 >> 2] = $13; //@line 15597
  HEAP32[$AsyncCtx40 + 12 >> 2] = $9; //@line 15599
  HEAP32[$AsyncCtx40 + 16 >> 2] = $$03071; //@line 15601
  HEAP32[$AsyncCtx40 + 20 >> 2] = $0; //@line 15603
  HEAP32[$AsyncCtx40 + 24 >> 2] = $$02972; //@line 15605
  HEAP32[$AsyncCtx40 + 28 >> 2] = $9; //@line 15607
  HEAP32[$AsyncCtx40 + 32 >> 2] = $10; //@line 15609
  HEAP32[$AsyncCtx40 + 36 >> 2] = $1; //@line 15611
  HEAP32[$AsyncCtx40 + 40 >> 2] = $$sroa_idx5$i$i; //@line 15613
  HEAP32[$AsyncCtx40 + 44 >> 2] = $11; //@line 15615
  HEAP32[$AsyncCtx40 + 48 >> 2] = $0; //@line 15617
  HEAP32[$AsyncCtx40 + 52 >> 2] = $1; //@line 15619
  HEAP32[$AsyncCtx40 + 56 >> 2] = $4; //@line 15621
  HEAP32[$AsyncCtx40 + 60 >> 2] = $5; //@line 15623
  HEAP32[$AsyncCtx40 + 64 >> 2] = $2; //@line 15625
  HEAP32[$AsyncCtx40 + 68 >> 2] = $6; //@line 15627
  HEAP32[$AsyncCtx40 + 72 >> 2] = $7; //@line 15629
  HEAP32[$AsyncCtx40 + 76 >> 2] = $3; //@line 15631
  HEAP32[$AsyncCtx40 + 80 >> 2] = $$sroa_idx5$i$i43; //@line 15633
  HEAP32[$AsyncCtx40 + 84 >> 2] = $8; //@line 15635
  HEAP32[$AsyncCtx40 + 88 >> 2] = $2; //@line 15637
  HEAP32[$AsyncCtx40 + 92 >> 2] = $3; //@line 15639
  HEAP32[$AsyncCtx40 + 96 >> 2] = $6; //@line 15641
  HEAP32[$AsyncCtx40 + 100 >> 2] = $3; //@line 15643
  sp = STACKTOP; //@line 15644
  STACKTOP = sp; //@line 15645
  return;
 } else if ((label | 0) == 15) {
  HEAP32[$AsyncCtx3 >> 2] = 193; //@line 15648
  HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 15650
  HEAP32[$AsyncCtx3 + 8 >> 2] = $9; //@line 15652
  HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15654
  HEAP32[$AsyncCtx3 + 16 >> 2] = $$03071; //@line 15656
  HEAP32[$AsyncCtx3 + 20 >> 2] = $0; //@line 15658
  HEAP32[$AsyncCtx3 + 24 >> 2] = $$02972; //@line 15660
  HEAP32[$AsyncCtx3 + 28 >> 2] = $9; //@line 15662
  HEAP32[$AsyncCtx3 + 32 >> 2] = $10; //@line 15664
  HEAP32[$AsyncCtx3 + 36 >> 2] = $1; //@line 15666
  HEAP32[$AsyncCtx3 + 40 >> 2] = $$sroa_idx5$i$i; //@line 15668
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 15670
  HEAP32[$AsyncCtx3 + 48 >> 2] = $0; //@line 15672
  HEAP32[$AsyncCtx3 + 52 >> 2] = $1; //@line 15674
  HEAP32[$AsyncCtx3 + 56 >> 2] = $4; //@line 15676
  HEAP32[$AsyncCtx3 + 60 >> 2] = $5; //@line 15678
  HEAP32[$AsyncCtx3 + 64 >> 2] = $2; //@line 15680
  HEAP32[$AsyncCtx3 + 68 >> 2] = $6; //@line 15682
  HEAP32[$AsyncCtx3 + 72 >> 2] = $7; //@line 15684
  HEAP32[$AsyncCtx3 + 76 >> 2] = $3; //@line 15686
  HEAP32[$AsyncCtx3 + 80 >> 2] = $$sroa_idx5$i$i43; //@line 15688
  HEAP32[$AsyncCtx3 + 84 >> 2] = $8; //@line 15690
  HEAP32[$AsyncCtx3 + 88 >> 2] = $2; //@line 15692
  HEAP32[$AsyncCtx3 + 92 >> 2] = $3; //@line 15694
  HEAP32[$AsyncCtx3 + 96 >> 2] = $6; //@line 15696
  HEAP32[$AsyncCtx3 + 100 >> 2] = $3; //@line 15698
  sp = STACKTOP; //@line 15699
  STACKTOP = sp; //@line 15700
  return;
 } else if ((label | 0) == 19) {
  HEAP32[$AsyncCtx7 >> 2] = 194; //@line 15703
  HEAP32[$AsyncCtx7 + 4 >> 2] = $13; //@line 15705
  HEAP32[$AsyncCtx7 + 8 >> 2] = $1; //@line 15707
  HEAP32[$AsyncCtx7 + 12 >> 2] = $$03071; //@line 15709
  HEAP32[$AsyncCtx7 + 16 >> 2] = $0; //@line 15711
  HEAP32[$AsyncCtx7 + 20 >> 2] = $9; //@line 15713
  HEAP32[$AsyncCtx7 + 24 >> 2] = $$02972; //@line 15715
  HEAP32[$AsyncCtx7 + 28 >> 2] = $9; //@line 15717
  HEAP32[$AsyncCtx7 + 32 >> 2] = $10; //@line 15719
  HEAP32[$AsyncCtx7 + 36 >> 2] = $1; //@line 15721
  HEAP32[$AsyncCtx7 + 40 >> 2] = $$sroa_idx5$i$i; //@line 15723
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 15725
  HEAP32[$AsyncCtx7 + 48 >> 2] = $0; //@line 15727
  HEAP32[$AsyncCtx7 + 52 >> 2] = $1; //@line 15729
  HEAP32[$AsyncCtx7 + 56 >> 2] = $4; //@line 15731
  HEAP32[$AsyncCtx7 + 60 >> 2] = $5; //@line 15733
  HEAP32[$AsyncCtx7 + 64 >> 2] = $2; //@line 15735
  HEAP32[$AsyncCtx7 + 68 >> 2] = $6; //@line 15737
  HEAP32[$AsyncCtx7 + 72 >> 2] = $7; //@line 15739
  HEAP32[$AsyncCtx7 + 76 >> 2] = $3; //@line 15741
  HEAP32[$AsyncCtx7 + 80 >> 2] = $$sroa_idx5$i$i43; //@line 15743
  HEAP32[$AsyncCtx7 + 84 >> 2] = $8; //@line 15745
  HEAP32[$AsyncCtx7 + 88 >> 2] = $2; //@line 15747
  HEAP32[$AsyncCtx7 + 92 >> 2] = $3; //@line 15749
  HEAP32[$AsyncCtx7 + 96 >> 2] = $6; //@line 15751
  HEAP32[$AsyncCtx7 + 100 >> 2] = $3; //@line 15753
  sp = STACKTOP; //@line 15754
  STACKTOP = sp; //@line 15755
  return;
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx11 >> 2] = 195; //@line 15758
  HEAP32[$AsyncCtx11 + 4 >> 2] = $13; //@line 15760
  HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 15762
  HEAP32[$AsyncCtx11 + 12 >> 2] = $$03071; //@line 15764
  HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 15766
  HEAP32[$AsyncCtx11 + 20 >> 2] = $9; //@line 15768
  HEAP32[$AsyncCtx11 + 24 >> 2] = $$02972; //@line 15770
  HEAP32[$AsyncCtx11 + 28 >> 2] = $9; //@line 15772
  HEAP32[$AsyncCtx11 + 32 >> 2] = $10; //@line 15774
  HEAP32[$AsyncCtx11 + 36 >> 2] = $1; //@line 15776
  HEAP32[$AsyncCtx11 + 40 >> 2] = $$sroa_idx5$i$i; //@line 15778
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 15780
  HEAP32[$AsyncCtx11 + 48 >> 2] = $0; //@line 15782
  HEAP32[$AsyncCtx11 + 52 >> 2] = $1; //@line 15784
  HEAP32[$AsyncCtx11 + 56 >> 2] = $4; //@line 15786
  HEAP32[$AsyncCtx11 + 60 >> 2] = $5; //@line 15788
  HEAP32[$AsyncCtx11 + 64 >> 2] = $2; //@line 15790
  HEAP32[$AsyncCtx11 + 68 >> 2] = $6; //@line 15792
  HEAP32[$AsyncCtx11 + 72 >> 2] = $7; //@line 15794
  HEAP32[$AsyncCtx11 + 76 >> 2] = $3; //@line 15796
  HEAP32[$AsyncCtx11 + 80 >> 2] = $$sroa_idx5$i$i43; //@line 15798
  HEAP32[$AsyncCtx11 + 84 >> 2] = $8; //@line 15800
  HEAP32[$AsyncCtx11 + 88 >> 2] = $2; //@line 15802
  HEAP32[$AsyncCtx11 + 92 >> 2] = $3; //@line 15804
  HEAP32[$AsyncCtx11 + 96 >> 2] = $6; //@line 15806
  HEAP32[$AsyncCtx11 + 100 >> 2] = $3; //@line 15808
  HEAP32[$AsyncCtx11 + 104 >> 2] = $148; //@line 15810
  sp = STACKTOP; //@line 15811
  STACKTOP = sp; //@line 15812
  return;
 } else if ((label | 0) == 29) {
  HEAP32[$AsyncCtx37 >> 2] = 197; //@line 15815
  HEAP32[$AsyncCtx37 + 4 >> 2] = $13; //@line 15817
  HEAP32[$AsyncCtx37 + 8 >> 2] = $1; //@line 15819
  HEAP32[$AsyncCtx37 + 12 >> 2] = $$03071; //@line 15821
  HEAP32[$AsyncCtx37 + 16 >> 2] = $0; //@line 15823
  HEAP32[$AsyncCtx37 + 20 >> 2] = $9; //@line 15825
  HEAP32[$AsyncCtx37 + 24 >> 2] = $$02972; //@line 15827
  HEAP32[$AsyncCtx37 + 28 >> 2] = $9; //@line 15829
  HEAP32[$AsyncCtx37 + 32 >> 2] = $10; //@line 15831
  HEAP32[$AsyncCtx37 + 36 >> 2] = $1; //@line 15833
  HEAP32[$AsyncCtx37 + 40 >> 2] = $$sroa_idx5$i$i; //@line 15835
  HEAP32[$AsyncCtx37 + 44 >> 2] = $11; //@line 15837
  HEAP32[$AsyncCtx37 + 48 >> 2] = $0; //@line 15839
  HEAP32[$AsyncCtx37 + 52 >> 2] = $1; //@line 15841
  HEAP32[$AsyncCtx37 + 56 >> 2] = $4; //@line 15843
  HEAP32[$AsyncCtx37 + 60 >> 2] = $5; //@line 15845
  HEAP32[$AsyncCtx37 + 64 >> 2] = $2; //@line 15847
  HEAP32[$AsyncCtx37 + 68 >> 2] = $6; //@line 15849
  HEAP32[$AsyncCtx37 + 72 >> 2] = $7; //@line 15851
  HEAP32[$AsyncCtx37 + 76 >> 2] = $3; //@line 15853
  HEAP32[$AsyncCtx37 + 80 >> 2] = $$sroa_idx5$i$i43; //@line 15855
  HEAP32[$AsyncCtx37 + 84 >> 2] = $8; //@line 15857
  HEAP32[$AsyncCtx37 + 88 >> 2] = $2; //@line 15859
  HEAP32[$AsyncCtx37 + 92 >> 2] = $3; //@line 15861
  HEAP32[$AsyncCtx37 + 96 >> 2] = $6; //@line 15863
  HEAP32[$AsyncCtx37 + 100 >> 2] = $3; //@line 15865
  sp = STACKTOP; //@line 15866
  STACKTOP = sp; //@line 15867
  return;
 } else if ((label | 0) == 32) {
  HEAP32[$AsyncCtx15 >> 2] = 198; //@line 15870
  HEAP32[$AsyncCtx15 + 4 >> 2] = $13; //@line 15872
  HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 15874
  HEAP32[$AsyncCtx15 + 12 >> 2] = $$03071; //@line 15876
  HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 15878
  HEAP32[$AsyncCtx15 + 20 >> 2] = $9; //@line 15880
  HEAP32[$AsyncCtx15 + 24 >> 2] = $$02972; //@line 15882
  HEAP32[$AsyncCtx15 + 28 >> 2] = $9; //@line 15884
  HEAP32[$AsyncCtx15 + 32 >> 2] = $10; //@line 15886
  HEAP32[$AsyncCtx15 + 36 >> 2] = $1; //@line 15888
  HEAP32[$AsyncCtx15 + 40 >> 2] = $$sroa_idx5$i$i; //@line 15890
  HEAP32[$AsyncCtx15 + 44 >> 2] = $11; //@line 15892
  HEAP32[$AsyncCtx15 + 48 >> 2] = $0; //@line 15894
  HEAP32[$AsyncCtx15 + 52 >> 2] = $1; //@line 15896
  HEAP32[$AsyncCtx15 + 56 >> 2] = $4; //@line 15898
  HEAP32[$AsyncCtx15 + 60 >> 2] = $5; //@line 15900
  HEAP32[$AsyncCtx15 + 64 >> 2] = $2; //@line 15902
  HEAP32[$AsyncCtx15 + 68 >> 2] = $6; //@line 15904
  HEAP32[$AsyncCtx15 + 72 >> 2] = $7; //@line 15906
  HEAP32[$AsyncCtx15 + 76 >> 2] = $3; //@line 15908
  HEAP32[$AsyncCtx15 + 80 >> 2] = $$sroa_idx5$i$i43; //@line 15910
  HEAP32[$AsyncCtx15 + 84 >> 2] = $8; //@line 15912
  HEAP32[$AsyncCtx15 + 88 >> 2] = $2; //@line 15914
  HEAP32[$AsyncCtx15 + 92 >> 2] = $3; //@line 15916
  HEAP32[$AsyncCtx15 + 96 >> 2] = $6; //@line 15918
  HEAP32[$AsyncCtx15 + 100 >> 2] = $3; //@line 15920
  sp = STACKTOP; //@line 15921
  STACKTOP = sp; //@line 15922
  return;
 } else if ((label | 0) == 36) {
  HEAP32[$AsyncCtx19 >> 2] = 199; //@line 15925
  HEAP32[$AsyncCtx19 + 4 >> 2] = $13; //@line 15927
  HEAP32[$AsyncCtx19 + 8 >> 2] = $1; //@line 15929
  HEAP32[$AsyncCtx19 + 12 >> 2] = $$03071; //@line 15931
  HEAP32[$AsyncCtx19 + 16 >> 2] = $0; //@line 15933
  HEAP32[$AsyncCtx19 + 20 >> 2] = $9; //@line 15935
  HEAP32[$AsyncCtx19 + 24 >> 2] = $9; //@line 15937
  HEAP32[$AsyncCtx19 + 28 >> 2] = $10; //@line 15939
  HEAP32[$AsyncCtx19 + 32 >> 2] = $1; //@line 15941
  HEAP32[$AsyncCtx19 + 36 >> 2] = $$sroa_idx5$i$i; //@line 15943
  HEAP32[$AsyncCtx19 + 40 >> 2] = $11; //@line 15945
  HEAP32[$AsyncCtx19 + 44 >> 2] = $0; //@line 15947
  HEAP32[$AsyncCtx19 + 48 >> 2] = $1; //@line 15949
  HEAP32[$AsyncCtx19 + 52 >> 2] = $4; //@line 15951
  HEAP32[$AsyncCtx19 + 56 >> 2] = $5; //@line 15953
  HEAP32[$AsyncCtx19 + 60 >> 2] = $2; //@line 15955
  HEAP32[$AsyncCtx19 + 64 >> 2] = $6; //@line 15957
  HEAP32[$AsyncCtx19 + 68 >> 2] = $7; //@line 15959
  HEAP32[$AsyncCtx19 + 72 >> 2] = $3; //@line 15961
  HEAP32[$AsyncCtx19 + 76 >> 2] = $$sroa_idx5$i$i43; //@line 15963
  HEAP32[$AsyncCtx19 + 80 >> 2] = $8; //@line 15965
  HEAP32[$AsyncCtx19 + 84 >> 2] = $2; //@line 15967
  HEAP32[$AsyncCtx19 + 88 >> 2] = $3; //@line 15969
  HEAP32[$AsyncCtx19 + 92 >> 2] = $6; //@line 15971
  HEAP32[$AsyncCtx19 + 96 >> 2] = $3; //@line 15973
  HEAP32[$AsyncCtx19 + 100 >> 2] = $$02972; //@line 15975
  sp = STACKTOP; //@line 15976
  STACKTOP = sp; //@line 15977
  return;
 }
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8537
 STACKTOP = STACKTOP + 96 | 0; //@line 8538
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 8538
 $vararg_buffer23 = sp + 72 | 0; //@line 8539
 $vararg_buffer20 = sp + 64 | 0; //@line 8540
 $vararg_buffer18 = sp + 56 | 0; //@line 8541
 $vararg_buffer15 = sp + 48 | 0; //@line 8542
 $vararg_buffer12 = sp + 40 | 0; //@line 8543
 $vararg_buffer9 = sp + 32 | 0; //@line 8544
 $vararg_buffer6 = sp + 24 | 0; //@line 8545
 $vararg_buffer3 = sp + 16 | 0; //@line 8546
 $vararg_buffer1 = sp + 8 | 0; //@line 8547
 $vararg_buffer = sp; //@line 8548
 $4 = sp + 80 | 0; //@line 8549
 $5 = HEAP32[131] | 0; //@line 8550
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 8554
   FUNCTION_TABLE_v[$5 & 7](); //@line 8555
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 73; //@line 8558
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 8560
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer23; //@line 8562
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer23; //@line 8564
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 8566
    HEAP8[$AsyncCtx + 20 >> 0] = $0; //@line 8568
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 8570
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer3; //@line 8572
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer3; //@line 8574
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer; //@line 8576
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer; //@line 8578
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer1; //@line 8580
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer1; //@line 8582
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 8584
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer20; //@line 8586
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer20; //@line 8588
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer9; //@line 8590
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer9; //@line 8592
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer12; //@line 8594
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer12; //@line 8596
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer6; //@line 8598
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer6; //@line 8600
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer15; //@line 8602
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer15; //@line 8604
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer18; //@line 8606
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer18; //@line 8608
    sp = STACKTOP; //@line 8609
    STACKTOP = sp; //@line 8610
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8612
    HEAP32[133] = (HEAP32[133] | 0) + 1; //@line 8615
    break;
   }
  }
 } while (0);
 $34 = HEAP32[122] | 0; //@line 8620
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 8624
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[119] | 0; //@line 8630
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 8637
       break;
      }
     }
     $43 = HEAP32[120] | 0; //@line 8641
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 8645
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 8650
      } else {
       label = 11; //@line 8652
      }
     }
    } else {
     label = 11; //@line 8656
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 8660
   }
   if (!((HEAP32[129] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[126] = HEAP32[124]; //@line 8672
    break;
   }
   $54 = HEAPU8[472] | 0; //@line 8676
   $55 = $0 & 255; //@line 8677
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 8682
    $$lobit = $59 >>> 6; //@line 8683
    $60 = $$lobit & 255; //@line 8684
    $64 = ($54 & 32 | 0) == 0; //@line 8688
    $65 = HEAP32[123] | 0; //@line 8689
    $66 = HEAP32[122] | 0; //@line 8690
    $67 = $0 << 24 >> 24 == 1; //@line 8691
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8695
      _vsnprintf($66, $65, $2, $3) | 0; //@line 8696
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 74; //@line 8699
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 8702
       sp = STACKTOP; //@line 8703
       STACKTOP = sp; //@line 8704
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 8706
      $69 = HEAP32[130] | 0; //@line 8707
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[129] | 0; //@line 8711
       $74 = HEAP32[122] | 0; //@line 8712
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8713
       FUNCTION_TABLE_vi[$73 & 511]($74); //@line 8714
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 77; //@line 8717
        sp = STACKTOP; //@line 8718
        STACKTOP = sp; //@line 8719
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 8721
        break;
       }
      }
      $71 = HEAP32[122] | 0; //@line 8725
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8726
      FUNCTION_TABLE_vi[$69 & 511]($71); //@line 8727
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 75; //@line 8730
       sp = STACKTOP; //@line 8731
       STACKTOP = sp; //@line 8732
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8734
      $72 = HEAP32[130] | 0; //@line 8735
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8736
      FUNCTION_TABLE_vi[$72 & 511](5676); //@line 8737
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 76; //@line 8740
       sp = STACKTOP; //@line 8741
       STACKTOP = sp; //@line 8742
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 8744
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 8751
       $$1143 = $66; //@line 8751
       $$1145 = $65; //@line 8751
       $$3154 = 0; //@line 8751
       label = 38; //@line 8752
      } else {
       if ($64) {
        $$0142 = $66; //@line 8755
        $$0144 = $65; //@line 8755
       } else {
        $76 = _snprintf($66, $65, 5678, $vararg_buffer) | 0; //@line 8757
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 8759
        $78 = ($$ | 0) > 0; //@line 8760
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 8765
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 8765
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 8769
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 5696; //@line 8775
          label = 35; //@line 8776
          break;
         }
        case 1:
         {
          $$sink = 5702; //@line 8780
          label = 35; //@line 8781
          break;
         }
        case 3:
         {
          $$sink = 5690; //@line 8785
          label = 35; //@line 8786
          break;
         }
        case 7:
         {
          $$sink = 5684; //@line 8790
          label = 35; //@line 8791
          break;
         }
        default:
         {
          $$0141 = 0; //@line 8795
          $$1152 = 0; //@line 8795
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 8799
         $$0141 = $60 & 1; //@line 8802
         $$1152 = _snprintf($$0142, $$0144, 5708, $vararg_buffer1) | 0; //@line 8802
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 8805
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 8807
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 8809
         $$1$off0 = $extract$t159; //@line 8814
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 8814
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 8814
         $$3154 = $$1152; //@line 8814
         label = 38; //@line 8815
        } else {
         $$1$off0 = $extract$t159; //@line 8817
         $$1143 = $$0142; //@line 8817
         $$1145 = $$0144; //@line 8817
         $$3154 = $$1152$; //@line 8817
         label = 38; //@line 8818
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[127] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 8831
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8832
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 8833
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 78; //@line 8836
           HEAP8[$AsyncCtx60 + 4 >> 0] = $$1$off0 & 1; //@line 8839
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer23; //@line 8841
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer23; //@line 8843
           HEAP32[$AsyncCtx60 + 16 >> 2] = $$3154; //@line 8845
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer3; //@line 8847
           HEAP32[$AsyncCtx60 + 24 >> 2] = $$1143; //@line 8849
           HEAP32[$AsyncCtx60 + 28 >> 2] = $$1145; //@line 8851
           HEAP32[$AsyncCtx60 + 32 >> 2] = $vararg_buffer3; //@line 8853
           HEAP32[$AsyncCtx60 + 36 >> 2] = $4; //@line 8855
           HEAP32[$AsyncCtx60 + 40 >> 2] = $vararg_buffer20; //@line 8857
           HEAP32[$AsyncCtx60 + 44 >> 2] = $vararg_buffer20; //@line 8859
           HEAP32[$AsyncCtx60 + 48 >> 2] = $vararg_buffer9; //@line 8861
           HEAP32[$AsyncCtx60 + 52 >> 2] = $1; //@line 8863
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer9; //@line 8865
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer12; //@line 8867
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer12; //@line 8869
           HEAP32[$AsyncCtx60 + 68 >> 2] = $55; //@line 8871
           HEAP32[$AsyncCtx60 + 72 >> 2] = $vararg_buffer6; //@line 8873
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer6; //@line 8875
           HEAP32[$AsyncCtx60 + 80 >> 2] = $2; //@line 8877
           HEAP32[$AsyncCtx60 + 84 >> 2] = $3; //@line 8879
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer15; //@line 8881
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer15; //@line 8883
           HEAP32[$AsyncCtx60 + 96 >> 2] = $vararg_buffer18; //@line 8885
           HEAP32[$AsyncCtx60 + 100 >> 2] = $vararg_buffer18; //@line 8887
           sp = STACKTOP; //@line 8888
           STACKTOP = sp; //@line 8889
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 8891
          $125 = HEAP32[127] | 0; //@line 8896
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8897
          $126 = FUNCTION_TABLE_ii[$125 & 31](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 8898
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 79; //@line 8901
           HEAP8[$AsyncCtx38 + 4 >> 0] = $$1$off0 & 1; //@line 8904
           HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer23; //@line 8906
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer23; //@line 8908
           HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer3; //@line 8910
           HEAP32[$AsyncCtx38 + 20 >> 2] = $$1143; //@line 8912
           HEAP32[$AsyncCtx38 + 24 >> 2] = $$1145; //@line 8914
           HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer3; //@line 8916
           HEAP32[$AsyncCtx38 + 32 >> 2] = $4; //@line 8918
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer20; //@line 8920
           HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer20; //@line 8922
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer9; //@line 8924
           HEAP32[$AsyncCtx38 + 48 >> 2] = $1; //@line 8926
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer9; //@line 8928
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer12; //@line 8930
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer12; //@line 8932
           HEAP32[$AsyncCtx38 + 64 >> 2] = $55; //@line 8934
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer6; //@line 8936
           HEAP32[$AsyncCtx38 + 72 >> 2] = $vararg_buffer6; //@line 8938
           HEAP32[$AsyncCtx38 + 76 >> 2] = $2; //@line 8940
           HEAP32[$AsyncCtx38 + 80 >> 2] = $3; //@line 8942
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer15; //@line 8944
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer15; //@line 8946
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer18; //@line 8948
           HEAP32[$AsyncCtx38 + 96 >> 2] = $vararg_buffer18; //@line 8950
           sp = STACKTOP; //@line 8951
           STACKTOP = sp; //@line 8952
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 8954
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 8955
           $151 = _snprintf($$1143, $$1145, 5708, $vararg_buffer3) | 0; //@line 8956
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 8958
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 8963
            $$3147 = $$1145 - $$10 | 0; //@line 8963
            label = 44; //@line 8964
            break;
           } else {
            $$3147168 = $$1145; //@line 8967
            $$3169 = $$1143; //@line 8967
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 8972
          $$3147 = $$1145; //@line 8972
          label = 44; //@line 8973
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 8979
          $$3169 = $$3; //@line 8979
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 8984
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 8990
          $$5156 = _snprintf($$3169, $$3147168, 5711, $vararg_buffer6) | 0; //@line 8992
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 8996
          $$5156 = _snprintf($$3169, $$3147168, 5726, $vararg_buffer9) | 0; //@line 8998
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 9002
          $$5156 = _snprintf($$3169, $$3147168, 5741, $vararg_buffer12) | 0; //@line 9004
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 9008
          $$5156 = _snprintf($$3169, $$3147168, 5756, $vararg_buffer15) | 0; //@line 9010
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 5771, $vararg_buffer18) | 0; //@line 9015
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 9019
        $168 = $$3169 + $$5156$ | 0; //@line 9021
        $169 = $$3147168 - $$5156$ | 0; //@line 9022
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9026
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 9027
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 80; //@line 9030
          HEAP8[$AsyncCtx56 + 4 >> 0] = $$1$off0 & 1; //@line 9033
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer23; //@line 9035
          HEAP32[$AsyncCtx56 + 12 >> 2] = $vararg_buffer23; //@line 9037
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer20; //@line 9039
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer20; //@line 9041
          HEAP32[$AsyncCtx56 + 24 >> 2] = $169; //@line 9043
          HEAP32[$AsyncCtx56 + 28 >> 2] = $168; //@line 9045
          sp = STACKTOP; //@line 9046
          STACKTOP = sp; //@line 9047
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 9049
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 9051
         $181 = $168 + $$13 | 0; //@line 9053
         $182 = $169 - $$13 | 0; //@line 9054
         if (($$13 | 0) > 0) {
          $184 = HEAP32[128] | 0; //@line 9057
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9062
            $186 = FUNCTION_TABLE_i[$184 & 0]() | 0; //@line 9063
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 81; //@line 9066
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 9068
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 9070
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 9072
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 9074
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 9077
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 9079
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 9081
             sp = STACKTOP; //@line 9082
             STACKTOP = sp; //@line 9083
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 9085
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 9086
             $194 = _snprintf($181, $182, 5708, $vararg_buffer20) | 0; //@line 9087
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 9089
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 9094
              $$6150 = $182 - $$18 | 0; //@line 9094
              $$9 = $$18; //@line 9094
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 9101
            $$6150 = $182; //@line 9101
            $$9 = $$13; //@line 9101
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 5786, $vararg_buffer23) | 0; //@line 9110
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[129] | 0; //@line 9116
      $202 = HEAP32[122] | 0; //@line 9117
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9118
      FUNCTION_TABLE_vi[$201 & 511]($202); //@line 9119
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 82; //@line 9122
       sp = STACKTOP; //@line 9123
       STACKTOP = sp; //@line 9124
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 9126
       break;
      }
     }
    } while (0);
    HEAP32[126] = HEAP32[124]; //@line 9132
   }
  }
 } while (0);
 $204 = HEAP32[132] | 0; //@line 9136
 if (!$204) {
  STACKTOP = sp; //@line 9139
  return;
 }
 $206 = HEAP32[133] | 0; //@line 9141
 HEAP32[133] = 0; //@line 9142
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9143
 FUNCTION_TABLE_v[$204 & 7](); //@line 9144
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 83; //@line 9147
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 9149
  sp = STACKTOP; //@line 9150
  STACKTOP = sp; //@line 9151
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 9153
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 9156
 } else {
  STACKTOP = sp; //@line 9158
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 9161
  $$pre = HEAP32[132] | 0; //@line 9162
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9163
  FUNCTION_TABLE_v[$$pre & 7](); //@line 9164
  if (___async) {
   label = 70; //@line 9167
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 9170
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 9173
  } else {
   label = 72; //@line 9175
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 84; //@line 9180
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 9182
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 9184
  sp = STACKTOP; //@line 9185
  STACKTOP = sp; //@line 9186
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 9189
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_173($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$048$i = 0, $$090 = 0, $$191 = 0, $$4$ph = 0, $$498 = 0, $$byval_copy = 0, $$byval_copy20 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29788
 STACKTOP = STACKTOP + 48 | 0; //@line 29789
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 29789
 $$byval_copy20 = sp + 20 | 0; //@line 29790
 $$byval_copy = sp; //@line 29791
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29793
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29795
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29797
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29799
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29801
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29803
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29805
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29807
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29809
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29811
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29813
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29815
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29817
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29819
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29821
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29823
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 29825
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 29827
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 29829
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 29831
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 29833
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 29835
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 29837
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 29839
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 29841
 $52 = HEAP8[$0 + 101 >> 0] | 0; //@line 29843
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29845
 do {
  if (($AsyncRetVal | 0) == -3001) {
   $$0 = $52; //@line 29850
   $$090 = $50 + 1 << 24 >> 24; //@line 29850
   label = 2; //@line 29851
  } else {
   if (($AsyncRetVal | 0) < 0) {
    $$4$ph = $AsyncRetVal; //@line 29855
    label = 22; //@line 29856
   } else {
    $144 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($16, 1, $34, $36, $40) | 0; //@line 29858
    if (($144 | 0) <= 0) {
     if (($144 | 0) < 0) {
      $$0 = $52; //@line 29863
      $$090 = $50; //@line 29863
      label = 2; //@line 29864
      break;
     } else {
      $$498 = -3009; //@line 29867
      break;
     }
    }
    $146 = HEAP32[$34 >> 2] | 0; //@line 29871
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 29872
    __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($10, $36, $146); //@line 29873
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 158; //@line 29876
     $147 = $ReallocAsyncCtx2 + 4 | 0; //@line 29877
     HEAP32[$147 >> 2] = $144; //@line 29878
     $148 = $ReallocAsyncCtx2 + 8 | 0; //@line 29879
     HEAP32[$148 >> 2] = $38; //@line 29880
     $149 = $ReallocAsyncCtx2 + 12 | 0; //@line 29881
     HEAP32[$149 >> 2] = $2; //@line 29882
     $150 = $ReallocAsyncCtx2 + 16 | 0; //@line 29883
     HEAP32[$150 >> 2] = $16; //@line 29884
     $151 = $ReallocAsyncCtx2 + 20 | 0; //@line 29885
     HEAP32[$151 >> 2] = $46; //@line 29886
     $152 = $ReallocAsyncCtx2 + 24 | 0; //@line 29887
     HEAP32[$152 >> 2] = $14; //@line 29888
     $153 = $ReallocAsyncCtx2 + 28 | 0; //@line 29889
     HEAP32[$153 >> 2] = $48; //@line 29890
     sp = STACKTOP; //@line 29891
     STACKTOP = sp; //@line 29892
     return;
    }
    ___async_unwind = 0; //@line 29894
    HEAP32[$ReallocAsyncCtx2 >> 2] = 158; //@line 29895
    $147 = $ReallocAsyncCtx2 + 4 | 0; //@line 29896
    HEAP32[$147 >> 2] = $144; //@line 29897
    $148 = $ReallocAsyncCtx2 + 8 | 0; //@line 29898
    HEAP32[$148 >> 2] = $38; //@line 29899
    $149 = $ReallocAsyncCtx2 + 12 | 0; //@line 29900
    HEAP32[$149 >> 2] = $2; //@line 29901
    $150 = $ReallocAsyncCtx2 + 16 | 0; //@line 29902
    HEAP32[$150 >> 2] = $16; //@line 29903
    $151 = $ReallocAsyncCtx2 + 20 | 0; //@line 29904
    HEAP32[$151 >> 2] = $46; //@line 29905
    $152 = $ReallocAsyncCtx2 + 24 | 0; //@line 29906
    HEAP32[$152 >> 2] = $14; //@line 29907
    $153 = $ReallocAsyncCtx2 + 28 | 0; //@line 29908
    HEAP32[$153 >> 2] = $48; //@line 29909
    sp = STACKTOP; //@line 29910
    STACKTOP = sp; //@line 29911
    return;
   }
  }
 } while (0);
 if ((label | 0) == 2) {
  HEAP32[$4 >> 2] = 0; //@line 29916
  HEAP32[$4 + 4 >> 2] = 0; //@line 29916
  HEAP32[$4 + 8 >> 2] = 0; //@line 29916
  HEAP32[$4 + 12 >> 2] = 0; //@line 29916
  HEAP32[$4 + 16 >> 2] = 0; //@line 29916
  HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 29917
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 29917
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 29917
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$8 + 12 >> 2]; //@line 29917
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$8 + 16 >> 2]; //@line 29917
  __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy, 0); //@line 29918
  if (!($$0 << 24 >> 24)) {
   $$4$ph = -3009; //@line 29921
   label = 22; //@line 29922
  } else {
   if (($$090 & 255) > 9) {
    $$191 = 0; //@line 29926
   } else {
    if (($$090 & 255) < 5) {
     $$191 = $$090; //@line 29930
    } else {
     $91 = 608 + ((($$090 & 255) + -5 | 0) * 20 | 0) | 0; //@line 29934
     HEAP32[$$byval_copy20 >> 2] = HEAP32[$91 >> 2]; //@line 29935
     HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$91 + 4 >> 2]; //@line 29935
     HEAP32[$$byval_copy20 + 8 >> 2] = HEAP32[$91 + 8 >> 2]; //@line 29935
     HEAP32[$$byval_copy20 + 12 >> 2] = HEAP32[$91 + 12 >> 2]; //@line 29935
     HEAP32[$$byval_copy20 + 16 >> 2] = HEAP32[$91 + 16 >> 2]; //@line 29935
     __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy20); //@line 29936
     __ZN13SocketAddress8set_portEt($6, 53); //@line 29937
     HEAP8[$16 >> 0] = 0; //@line 29938
     HEAP8[$18 >> 0] = 1; //@line 29939
     HEAP8[$20 >> 0] = 1; //@line 29940
     HEAP8[$22 >> 0] = 0; //@line 29941
     HEAP8[$24 >> 0] = 0; //@line 29942
     HEAP8[$26 >> 0] = 1; //@line 29943
     HEAP8[$28 >> 0] = 0; //@line 29944
     HEAP8[$28 + 1 >> 0] = 0; //@line 29944
     HEAP8[$28 + 2 >> 0] = 0; //@line 29944
     HEAP8[$28 + 3 >> 0] = 0; //@line 29944
     HEAP8[$28 + 4 >> 0] = 0; //@line 29944
     HEAP8[$28 + 5 >> 0] = 0; //@line 29944
     if (!(HEAP8[$10 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $12; //@line 29948
     } else {
      $$048$i = $10; //@line 29950
      $$sroa$0$0$in47$i = $12; //@line 29950
      while (1) {
       $94 = _strcspn($$048$i, 7347) | 0; //@line 29952
       $96 = $$sroa$0$0$in47$i + 1 | 0; //@line 29954
       HEAP8[$$sroa$0$0$in47$i >> 0] = $94; //@line 29955
       $97 = $94 & 255; //@line 29956
       _memcpy($96 | 0, $$048$i | 0, $97 | 0) | 0; //@line 29957
       $98 = $96 + $97 | 0; //@line 29958
       $$048$i = $$048$i + ($94 + ((HEAP8[$$048$i + $94 >> 0] | 0) == 46 & 1)) | 0; //@line 29964
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $98; //@line 29968
        break;
       } else {
        $$sroa$0$0$in47$i = $98; //@line 29971
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 29976
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 29978
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $42; //@line 29980
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 29982
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 29985
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 29987
     $114 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($14, $6, $16, $$sroa$0$0$in$lcssa$i + 5 - $44 | 0) | 0; //@line 29988
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 29991
      $115 = $ReallocAsyncCtx4 + 4 | 0; //@line 29992
      HEAP32[$115 >> 2] = $2; //@line 29993
      $116 = $ReallocAsyncCtx4 + 8 | 0; //@line 29994
      HEAP32[$116 >> 2] = $4; //@line 29995
      $117 = $ReallocAsyncCtx4 + 12 | 0; //@line 29996
      HEAP32[$117 >> 2] = $6; //@line 29997
      $118 = $ReallocAsyncCtx4 + 16 | 0; //@line 29998
      HEAP32[$118 >> 2] = $8; //@line 29999
      $119 = $ReallocAsyncCtx4 + 20 | 0; //@line 30000
      HEAP32[$119 >> 2] = $10; //@line 30001
      $120 = $ReallocAsyncCtx4 + 24 | 0; //@line 30002
      HEAP32[$120 >> 2] = $12; //@line 30003
      $121 = $ReallocAsyncCtx4 + 28 | 0; //@line 30004
      HEAP32[$121 >> 2] = $14; //@line 30005
      $122 = $ReallocAsyncCtx4 + 32 | 0; //@line 30006
      HEAP32[$122 >> 2] = $16; //@line 30007
      $123 = $ReallocAsyncCtx4 + 36 | 0; //@line 30008
      HEAP32[$123 >> 2] = $18; //@line 30009
      $124 = $ReallocAsyncCtx4 + 40 | 0; //@line 30010
      HEAP32[$124 >> 2] = $20; //@line 30011
      $125 = $ReallocAsyncCtx4 + 44 | 0; //@line 30012
      HEAP32[$125 >> 2] = $22; //@line 30013
      $126 = $ReallocAsyncCtx4 + 48 | 0; //@line 30014
      HEAP32[$126 >> 2] = $24; //@line 30015
      $127 = $ReallocAsyncCtx4 + 52 | 0; //@line 30016
      HEAP32[$127 >> 2] = $26; //@line 30017
      $128 = $ReallocAsyncCtx4 + 56 | 0; //@line 30018
      HEAP32[$128 >> 2] = $28; //@line 30019
      $129 = $ReallocAsyncCtx4 + 60 | 0; //@line 30020
      HEAP32[$129 >> 2] = $30; //@line 30021
      $130 = $ReallocAsyncCtx4 + 64 | 0; //@line 30022
      HEAP32[$130 >> 2] = $32; //@line 30023
      $131 = $ReallocAsyncCtx4 + 68 | 0; //@line 30024
      HEAP32[$131 >> 2] = $34; //@line 30025
      $132 = $ReallocAsyncCtx4 + 72 | 0; //@line 30026
      HEAP32[$132 >> 2] = $36; //@line 30027
      $133 = $ReallocAsyncCtx4 + 76 | 0; //@line 30028
      HEAP32[$133 >> 2] = $38; //@line 30029
      $134 = $ReallocAsyncCtx4 + 80 | 0; //@line 30030
      HEAP32[$134 >> 2] = $40; //@line 30031
      $135 = $ReallocAsyncCtx4 + 84 | 0; //@line 30032
      HEAP8[$135 >> 0] = $42; //@line 30033
      $136 = $ReallocAsyncCtx4 + 88 | 0; //@line 30034
      HEAP32[$136 >> 2] = $44; //@line 30035
      $137 = $ReallocAsyncCtx4 + 92 | 0; //@line 30036
      HEAP32[$137 >> 2] = $46; //@line 30037
      $138 = $ReallocAsyncCtx4 + 96 | 0; //@line 30038
      HEAP32[$138 >> 2] = $48; //@line 30039
      $139 = $ReallocAsyncCtx4 + 100 | 0; //@line 30040
      HEAP8[$139 >> 0] = $$090; //@line 30041
      $140 = $ReallocAsyncCtx4 + 101 | 0; //@line 30042
      HEAP8[$140 >> 0] = $$0; //@line 30043
      sp = STACKTOP; //@line 30044
      STACKTOP = sp; //@line 30045
      return;
     }
     HEAP32[___async_retval >> 2] = $114; //@line 30048
     ___async_unwind = 0; //@line 30049
     HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 30050
     $115 = $ReallocAsyncCtx4 + 4 | 0; //@line 30051
     HEAP32[$115 >> 2] = $2; //@line 30052
     $116 = $ReallocAsyncCtx4 + 8 | 0; //@line 30053
     HEAP32[$116 >> 2] = $4; //@line 30054
     $117 = $ReallocAsyncCtx4 + 12 | 0; //@line 30055
     HEAP32[$117 >> 2] = $6; //@line 30056
     $118 = $ReallocAsyncCtx4 + 16 | 0; //@line 30057
     HEAP32[$118 >> 2] = $8; //@line 30058
     $119 = $ReallocAsyncCtx4 + 20 | 0; //@line 30059
     HEAP32[$119 >> 2] = $10; //@line 30060
     $120 = $ReallocAsyncCtx4 + 24 | 0; //@line 30061
     HEAP32[$120 >> 2] = $12; //@line 30062
     $121 = $ReallocAsyncCtx4 + 28 | 0; //@line 30063
     HEAP32[$121 >> 2] = $14; //@line 30064
     $122 = $ReallocAsyncCtx4 + 32 | 0; //@line 30065
     HEAP32[$122 >> 2] = $16; //@line 30066
     $123 = $ReallocAsyncCtx4 + 36 | 0; //@line 30067
     HEAP32[$123 >> 2] = $18; //@line 30068
     $124 = $ReallocAsyncCtx4 + 40 | 0; //@line 30069
     HEAP32[$124 >> 2] = $20; //@line 30070
     $125 = $ReallocAsyncCtx4 + 44 | 0; //@line 30071
     HEAP32[$125 >> 2] = $22; //@line 30072
     $126 = $ReallocAsyncCtx4 + 48 | 0; //@line 30073
     HEAP32[$126 >> 2] = $24; //@line 30074
     $127 = $ReallocAsyncCtx4 + 52 | 0; //@line 30075
     HEAP32[$127 >> 2] = $26; //@line 30076
     $128 = $ReallocAsyncCtx4 + 56 | 0; //@line 30077
     HEAP32[$128 >> 2] = $28; //@line 30078
     $129 = $ReallocAsyncCtx4 + 60 | 0; //@line 30079
     HEAP32[$129 >> 2] = $30; //@line 30080
     $130 = $ReallocAsyncCtx4 + 64 | 0; //@line 30081
     HEAP32[$130 >> 2] = $32; //@line 30082
     $131 = $ReallocAsyncCtx4 + 68 | 0; //@line 30083
     HEAP32[$131 >> 2] = $34; //@line 30084
     $132 = $ReallocAsyncCtx4 + 72 | 0; //@line 30085
     HEAP32[$132 >> 2] = $36; //@line 30086
     $133 = $ReallocAsyncCtx4 + 76 | 0; //@line 30087
     HEAP32[$133 >> 2] = $38; //@line 30088
     $134 = $ReallocAsyncCtx4 + 80 | 0; //@line 30089
     HEAP32[$134 >> 2] = $40; //@line 30090
     $135 = $ReallocAsyncCtx4 + 84 | 0; //@line 30091
     HEAP8[$135 >> 0] = $42; //@line 30092
     $136 = $ReallocAsyncCtx4 + 88 | 0; //@line 30093
     HEAP32[$136 >> 2] = $44; //@line 30094
     $137 = $ReallocAsyncCtx4 + 92 | 0; //@line 30095
     HEAP32[$137 >> 2] = $46; //@line 30096
     $138 = $ReallocAsyncCtx4 + 96 | 0; //@line 30097
     HEAP32[$138 >> 2] = $48; //@line 30098
     $139 = $ReallocAsyncCtx4 + 100 | 0; //@line 30099
     HEAP8[$139 >> 0] = $$090; //@line 30100
     $140 = $ReallocAsyncCtx4 + 101 | 0; //@line 30101
     HEAP8[$140 >> 0] = $$0; //@line 30102
     sp = STACKTOP; //@line 30103
     STACKTOP = sp; //@line 30104
     return;
    }
   }
   $60 = HEAP32[(HEAP32[$30 >> 2] | 0) + 28 >> 2] | 0; //@line 30110
   $ReallocAsyncCtx = _emscripten_realloc_async_context(104) | 0; //@line 30111
   $61 = FUNCTION_TABLE_iiii[$60 & 31]($32, $$191 & 255, $6) | 0; //@line 30112
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 30115
    $62 = $ReallocAsyncCtx + 4 | 0; //@line 30116
    HEAP32[$62 >> 2] = $2; //@line 30117
    $63 = $ReallocAsyncCtx + 8 | 0; //@line 30118
    HEAP32[$63 >> 2] = $4; //@line 30119
    $64 = $ReallocAsyncCtx + 12 | 0; //@line 30120
    HEAP32[$64 >> 2] = $6; //@line 30121
    $65 = $ReallocAsyncCtx + 16 | 0; //@line 30122
    HEAP32[$65 >> 2] = $8; //@line 30123
    $66 = $ReallocAsyncCtx + 20 | 0; //@line 30124
    HEAP32[$66 >> 2] = $10; //@line 30125
    $67 = $ReallocAsyncCtx + 24 | 0; //@line 30126
    HEAP32[$67 >> 2] = $12; //@line 30127
    $68 = $ReallocAsyncCtx + 28 | 0; //@line 30128
    HEAP32[$68 >> 2] = $14; //@line 30129
    $69 = $ReallocAsyncCtx + 32 | 0; //@line 30130
    HEAP8[$69 >> 0] = $$191; //@line 30131
    $70 = $ReallocAsyncCtx + 36 | 0; //@line 30132
    HEAP32[$70 >> 2] = $16; //@line 30133
    $71 = $ReallocAsyncCtx + 40 | 0; //@line 30134
    HEAP32[$71 >> 2] = $18; //@line 30135
    $72 = $ReallocAsyncCtx + 44 | 0; //@line 30136
    HEAP32[$72 >> 2] = $20; //@line 30137
    $73 = $ReallocAsyncCtx + 48 | 0; //@line 30138
    HEAP32[$73 >> 2] = $22; //@line 30139
    $74 = $ReallocAsyncCtx + 52 | 0; //@line 30140
    HEAP32[$74 >> 2] = $24; //@line 30141
    $75 = $ReallocAsyncCtx + 56 | 0; //@line 30142
    HEAP32[$75 >> 2] = $26; //@line 30143
    $76 = $ReallocAsyncCtx + 60 | 0; //@line 30144
    HEAP32[$76 >> 2] = $28; //@line 30145
    $77 = $ReallocAsyncCtx + 64 | 0; //@line 30146
    HEAP32[$77 >> 2] = $30; //@line 30147
    $78 = $ReallocAsyncCtx + 68 | 0; //@line 30148
    HEAP32[$78 >> 2] = $32; //@line 30149
    $79 = $ReallocAsyncCtx + 72 | 0; //@line 30150
    HEAP32[$79 >> 2] = $34; //@line 30151
    $80 = $ReallocAsyncCtx + 76 | 0; //@line 30152
    HEAP32[$80 >> 2] = $36; //@line 30153
    $81 = $ReallocAsyncCtx + 80 | 0; //@line 30154
    HEAP32[$81 >> 2] = $38; //@line 30155
    $82 = $ReallocAsyncCtx + 84 | 0; //@line 30156
    HEAP32[$82 >> 2] = $40; //@line 30157
    $83 = $ReallocAsyncCtx + 88 | 0; //@line 30158
    HEAP8[$83 >> 0] = $$0; //@line 30159
    $84 = $ReallocAsyncCtx + 89 | 0; //@line 30160
    HEAP8[$84 >> 0] = $42; //@line 30161
    $85 = $ReallocAsyncCtx + 92 | 0; //@line 30162
    HEAP32[$85 >> 2] = $44; //@line 30163
    $86 = $ReallocAsyncCtx + 96 | 0; //@line 30164
    HEAP32[$86 >> 2] = $46; //@line 30165
    $87 = $ReallocAsyncCtx + 100 | 0; //@line 30166
    HEAP32[$87 >> 2] = $48; //@line 30167
    sp = STACKTOP; //@line 30168
    STACKTOP = sp; //@line 30169
    return;
   }
   HEAP32[___async_retval >> 2] = $61; //@line 30172
   ___async_unwind = 0; //@line 30173
   HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 30174
   $62 = $ReallocAsyncCtx + 4 | 0; //@line 30175
   HEAP32[$62 >> 2] = $2; //@line 30176
   $63 = $ReallocAsyncCtx + 8 | 0; //@line 30177
   HEAP32[$63 >> 2] = $4; //@line 30178
   $64 = $ReallocAsyncCtx + 12 | 0; //@line 30179
   HEAP32[$64 >> 2] = $6; //@line 30180
   $65 = $ReallocAsyncCtx + 16 | 0; //@line 30181
   HEAP32[$65 >> 2] = $8; //@line 30182
   $66 = $ReallocAsyncCtx + 20 | 0; //@line 30183
   HEAP32[$66 >> 2] = $10; //@line 30184
   $67 = $ReallocAsyncCtx + 24 | 0; //@line 30185
   HEAP32[$67 >> 2] = $12; //@line 30186
   $68 = $ReallocAsyncCtx + 28 | 0; //@line 30187
   HEAP32[$68 >> 2] = $14; //@line 30188
   $69 = $ReallocAsyncCtx + 32 | 0; //@line 30189
   HEAP8[$69 >> 0] = $$191; //@line 30190
   $70 = $ReallocAsyncCtx + 36 | 0; //@line 30191
   HEAP32[$70 >> 2] = $16; //@line 30192
   $71 = $ReallocAsyncCtx + 40 | 0; //@line 30193
   HEAP32[$71 >> 2] = $18; //@line 30194
   $72 = $ReallocAsyncCtx + 44 | 0; //@line 30195
   HEAP32[$72 >> 2] = $20; //@line 30196
   $73 = $ReallocAsyncCtx + 48 | 0; //@line 30197
   HEAP32[$73 >> 2] = $22; //@line 30198
   $74 = $ReallocAsyncCtx + 52 | 0; //@line 30199
   HEAP32[$74 >> 2] = $24; //@line 30200
   $75 = $ReallocAsyncCtx + 56 | 0; //@line 30201
   HEAP32[$75 >> 2] = $26; //@line 30202
   $76 = $ReallocAsyncCtx + 60 | 0; //@line 30203
   HEAP32[$76 >> 2] = $28; //@line 30204
   $77 = $ReallocAsyncCtx + 64 | 0; //@line 30205
   HEAP32[$77 >> 2] = $30; //@line 30206
   $78 = $ReallocAsyncCtx + 68 | 0; //@line 30207
   HEAP32[$78 >> 2] = $32; //@line 30208
   $79 = $ReallocAsyncCtx + 72 | 0; //@line 30209
   HEAP32[$79 >> 2] = $34; //@line 30210
   $80 = $ReallocAsyncCtx + 76 | 0; //@line 30211
   HEAP32[$80 >> 2] = $36; //@line 30212
   $81 = $ReallocAsyncCtx + 80 | 0; //@line 30213
   HEAP32[$81 >> 2] = $38; //@line 30214
   $82 = $ReallocAsyncCtx + 84 | 0; //@line 30215
   HEAP32[$82 >> 2] = $40; //@line 30216
   $83 = $ReallocAsyncCtx + 88 | 0; //@line 30217
   HEAP8[$83 >> 0] = $$0; //@line 30218
   $84 = $ReallocAsyncCtx + 89 | 0; //@line 30219
   HEAP8[$84 >> 0] = $42; //@line 30220
   $85 = $ReallocAsyncCtx + 92 | 0; //@line 30221
   HEAP32[$85 >> 2] = $44; //@line 30222
   $86 = $ReallocAsyncCtx + 96 | 0; //@line 30223
   HEAP32[$86 >> 2] = $46; //@line 30224
   $87 = $ReallocAsyncCtx + 100 | 0; //@line 30225
   HEAP32[$87 >> 2] = $48; //@line 30226
   sp = STACKTOP; //@line 30227
   STACKTOP = sp; //@line 30228
   return;
  }
 }
 if ((label | 0) == 22) {
  $$498 = $$4$ph; //@line 30232
 }
 _free($16); //@line 30234
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 30235
 $156 = __ZN6Socket5closeEv($46) | 0; //@line 30236
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 30239
  $157 = $ReallocAsyncCtx6 + 4 | 0; //@line 30240
  HEAP32[$157 >> 2] = $$498; //@line 30241
  $158 = $ReallocAsyncCtx6 + 8 | 0; //@line 30242
  HEAP32[$158 >> 2] = $14; //@line 30243
  $159 = $ReallocAsyncCtx6 + 12 | 0; //@line 30244
  HEAP32[$159 >> 2] = $48; //@line 30245
  sp = STACKTOP; //@line 30246
  STACKTOP = sp; //@line 30247
  return;
 }
 HEAP32[___async_retval >> 2] = $156; //@line 30250
 ___async_unwind = 0; //@line 30251
 HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 30252
 $157 = $ReallocAsyncCtx6 + 4 | 0; //@line 30253
 HEAP32[$157 >> 2] = $$498; //@line 30254
 $158 = $ReallocAsyncCtx6 + 8 | 0; //@line 30255
 HEAP32[$158 >> 2] = $14; //@line 30256
 $159 = $ReallocAsyncCtx6 + 12 | 0; //@line 30257
 HEAP32[$159 >> 2] = $48; //@line 30258
 sp = STACKTOP; //@line 30259
 STACKTOP = sp; //@line 30260
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_78($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $142 = 0, $144 = 0, $152 = 0, $155 = 0, $157 = 0, $16 = 0, $165 = 0, $168 = 0, $170 = 0, $178 = 0, $18 = 0, $181 = 0, $183 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $77 = 0, $8 = 0, $84 = 0, $85 = 0, $88 = 0, $91 = 0, $98 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16550
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16552
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16554
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16558
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16560
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16562
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16564
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16566
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16568
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16570
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16572
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16574
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16578
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16580
 HEAP32[HEAP32[$0 + 52 >> 2] >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 16582
 $31 = $4 + 32 | 0; //@line 16583
 do {
  if (($31 | 0) != ($16 | 0)) {
   $33 = $4 + 44 | 0; //@line 16587
   $34 = HEAP32[$33 >> 2] | 0; //@line 16588
   if ($34 | 0) {
    $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 16592
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 16593
    FUNCTION_TABLE_vi[$37 & 511]($31); //@line 16594
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 16597
     $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 16598
     HEAP32[$38 >> 2] = $2; //@line 16599
     $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 16600
     HEAP32[$39 >> 2] = $31; //@line 16601
     $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 16602
     HEAP32[$40 >> 2] = $4; //@line 16603
     $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 16604
     HEAP32[$41 >> 2] = $8; //@line 16605
     $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 16606
     HEAP32[$42 >> 2] = $10; //@line 16607
     $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 16608
     HEAP32[$43 >> 2] = $12; //@line 16609
     $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 16610
     HEAP32[$44 >> 2] = $14; //@line 16611
     $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 16612
     HEAP32[$45 >> 2] = $16; //@line 16613
     $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 16614
     HEAP32[$46 >> 2] = $18; //@line 16615
     $47 = $ReallocAsyncCtx4 + 40 | 0; //@line 16616
     HEAP32[$47 >> 2] = $20; //@line 16617
     $48 = $ReallocAsyncCtx4 + 44 | 0; //@line 16618
     HEAP32[$48 >> 2] = $22; //@line 16619
     $49 = $ReallocAsyncCtx4 + 48 | 0; //@line 16620
     HEAP32[$49 >> 2] = $24; //@line 16621
     $50 = $ReallocAsyncCtx4 + 52 | 0; //@line 16622
     HEAP32[$50 >> 2] = $33; //@line 16623
     $51 = $ReallocAsyncCtx4 + 56 | 0; //@line 16624
     HEAP32[$51 >> 2] = $28; //@line 16625
     $52 = $ReallocAsyncCtx4 + 60 | 0; //@line 16626
     HEAP32[$52 >> 2] = $30; //@line 16627
     sp = STACKTOP; //@line 16628
     return;
    }
    ___async_unwind = 0; //@line 16631
    HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 16632
    $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 16633
    HEAP32[$38 >> 2] = $2; //@line 16634
    $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 16635
    HEAP32[$39 >> 2] = $31; //@line 16636
    $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 16637
    HEAP32[$40 >> 2] = $4; //@line 16638
    $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 16639
    HEAP32[$41 >> 2] = $8; //@line 16640
    $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 16641
    HEAP32[$42 >> 2] = $10; //@line 16642
    $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 16643
    HEAP32[$43 >> 2] = $12; //@line 16644
    $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 16645
    HEAP32[$44 >> 2] = $14; //@line 16646
    $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 16647
    HEAP32[$45 >> 2] = $16; //@line 16648
    $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 16649
    HEAP32[$46 >> 2] = $18; //@line 16650
    $47 = $ReallocAsyncCtx4 + 40 | 0; //@line 16651
    HEAP32[$47 >> 2] = $20; //@line 16652
    $48 = $ReallocAsyncCtx4 + 44 | 0; //@line 16653
    HEAP32[$48 >> 2] = $22; //@line 16654
    $49 = $ReallocAsyncCtx4 + 48 | 0; //@line 16655
    HEAP32[$49 >> 2] = $24; //@line 16656
    $50 = $ReallocAsyncCtx4 + 52 | 0; //@line 16657
    HEAP32[$50 >> 2] = $33; //@line 16658
    $51 = $ReallocAsyncCtx4 + 56 | 0; //@line 16659
    HEAP32[$51 >> 2] = $28; //@line 16660
    $52 = $ReallocAsyncCtx4 + 60 | 0; //@line 16661
    HEAP32[$52 >> 2] = $30; //@line 16662
    sp = STACKTOP; //@line 16663
    return;
   }
   $53 = $16 + 12 | 0; //@line 16666
   $54 = HEAP32[$53 >> 2] | 0; //@line 16667
   if (!$54) {
    HEAP32[$33 >> 2] = 0; //@line 16670
    break;
   }
   $57 = HEAP32[$54 + 4 >> 2] | 0; //@line 16674
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 16675
   FUNCTION_TABLE_vii[$57 & 7]($31, $16); //@line 16676
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 16679
    $58 = $ReallocAsyncCtx5 + 4 | 0; //@line 16680
    HEAP32[$58 >> 2] = $2; //@line 16681
    $59 = $ReallocAsyncCtx5 + 8 | 0; //@line 16682
    HEAP32[$59 >> 2] = $31; //@line 16683
    $60 = $ReallocAsyncCtx5 + 12 | 0; //@line 16684
    HEAP32[$60 >> 2] = $4; //@line 16685
    $61 = $ReallocAsyncCtx5 + 16 | 0; //@line 16686
    HEAP32[$61 >> 2] = $8; //@line 16687
    $62 = $ReallocAsyncCtx5 + 20 | 0; //@line 16688
    HEAP32[$62 >> 2] = $10; //@line 16689
    $63 = $ReallocAsyncCtx5 + 24 | 0; //@line 16690
    HEAP32[$63 >> 2] = $12; //@line 16691
    $64 = $ReallocAsyncCtx5 + 28 | 0; //@line 16692
    HEAP32[$64 >> 2] = $14; //@line 16693
    $65 = $ReallocAsyncCtx5 + 32 | 0; //@line 16694
    HEAP32[$65 >> 2] = $18; //@line 16695
    $66 = $ReallocAsyncCtx5 + 36 | 0; //@line 16696
    HEAP32[$66 >> 2] = $20; //@line 16697
    $67 = $ReallocAsyncCtx5 + 40 | 0; //@line 16698
    HEAP32[$67 >> 2] = $22; //@line 16699
    $68 = $ReallocAsyncCtx5 + 44 | 0; //@line 16700
    HEAP32[$68 >> 2] = $24; //@line 16701
    $69 = $ReallocAsyncCtx5 + 48 | 0; //@line 16702
    HEAP32[$69 >> 2] = $33; //@line 16703
    $70 = $ReallocAsyncCtx5 + 52 | 0; //@line 16704
    HEAP32[$70 >> 2] = $53; //@line 16705
    $71 = $ReallocAsyncCtx5 + 56 | 0; //@line 16706
    HEAP32[$71 >> 2] = $28; //@line 16707
    $72 = $ReallocAsyncCtx5 + 60 | 0; //@line 16708
    HEAP32[$72 >> 2] = $30; //@line 16709
    sp = STACKTOP; //@line 16710
    return;
   }
   ___async_unwind = 0; //@line 16713
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 16714
   $58 = $ReallocAsyncCtx5 + 4 | 0; //@line 16715
   HEAP32[$58 >> 2] = $2; //@line 16716
   $59 = $ReallocAsyncCtx5 + 8 | 0; //@line 16717
   HEAP32[$59 >> 2] = $31; //@line 16718
   $60 = $ReallocAsyncCtx5 + 12 | 0; //@line 16719
   HEAP32[$60 >> 2] = $4; //@line 16720
   $61 = $ReallocAsyncCtx5 + 16 | 0; //@line 16721
   HEAP32[$61 >> 2] = $8; //@line 16722
   $62 = $ReallocAsyncCtx5 + 20 | 0; //@line 16723
   HEAP32[$62 >> 2] = $10; //@line 16724
   $63 = $ReallocAsyncCtx5 + 24 | 0; //@line 16725
   HEAP32[$63 >> 2] = $12; //@line 16726
   $64 = $ReallocAsyncCtx5 + 28 | 0; //@line 16727
   HEAP32[$64 >> 2] = $14; //@line 16728
   $65 = $ReallocAsyncCtx5 + 32 | 0; //@line 16729
   HEAP32[$65 >> 2] = $18; //@line 16730
   $66 = $ReallocAsyncCtx5 + 36 | 0; //@line 16731
   HEAP32[$66 >> 2] = $20; //@line 16732
   $67 = $ReallocAsyncCtx5 + 40 | 0; //@line 16733
   HEAP32[$67 >> 2] = $22; //@line 16734
   $68 = $ReallocAsyncCtx5 + 44 | 0; //@line 16735
   HEAP32[$68 >> 2] = $24; //@line 16736
   $69 = $ReallocAsyncCtx5 + 48 | 0; //@line 16737
   HEAP32[$69 >> 2] = $33; //@line 16738
   $70 = $ReallocAsyncCtx5 + 52 | 0; //@line 16739
   HEAP32[$70 >> 2] = $53; //@line 16740
   $71 = $ReallocAsyncCtx5 + 56 | 0; //@line 16741
   HEAP32[$71 >> 2] = $28; //@line 16742
   $72 = $ReallocAsyncCtx5 + 60 | 0; //@line 16743
   HEAP32[$72 >> 2] = $30; //@line 16744
   sp = STACKTOP; //@line 16745
   return;
  }
 } while (0);
 HEAP32[$4 + 8 >> 2] = $14; //@line 16750
 HEAP32[$4 + 48 >> 2] = $22; //@line 16752
 HEAP32[$4 + 52 >> 2] = $24; //@line 16754
 $76 = $4 + 56 | 0; //@line 16755
 HEAP32[$76 >> 2] = 0; //@line 16756
 $77 = $4 + 60 | 0; //@line 16757
 HEAP32[$77 >> 2] = 0; //@line 16758
 HEAP32[$4 + 64 >> 2] = 0; //@line 16760
 HEAP8[$4 + 82 >> 0] = 0; //@line 16762
 HEAP8[$4 + 83 >> 0] = 1; //@line 16764
 HEAP8[$4 + 84 >> 0] = 3; //@line 16766
 HEAP16[$4 + 80 >> 1] = 0; //@line 16768
 HEAP32[$4 + 76 >> 2] = 0; //@line 16770
 $84 = $4 + 72 | 0; //@line 16771
 HEAP32[$84 >> 2] = 15500; //@line 16772
 $85 = HEAP32[177] | 0; //@line 16773
 HEAP32[177] = $85 + 1; //@line 16775
 $$ = ($85 | 0) > 32767 ? 1 : $85; //@line 16777
 HEAP32[$4 >> 2] = $$; //@line 16778
 $88 = HEAP32[2518] | 0; //@line 16779
 if (!$88) {
  $$1 = 0; //@line 16782
  $142 = 0; //@line 16782
 } else {
  $91 = HEAP32[$88 + 56 >> 2] | 0; //@line 16785
  if (!$91) {
   $$1 = 1; //@line 16788
   $142 = 0; //@line 16788
  } else {
   if ((HEAP32[$88 + 8 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$76 >> 2] = $91; //@line 16794
    HEAP32[$77 >> 2] = HEAP32[$88 + 60 >> 2]; //@line 16797
    $$1 = 1; //@line 16798
    $142 = $91; //@line 16798
   } else {
    $$1 = 1; //@line 16800
    $142 = 0; //@line 16800
   }
  }
 }
 $98 = HEAP32[2519] | 0; //@line 16804
 if (!$98) {
  $$1$1 = $$1; //@line 16807
  $155 = $142; //@line 16807
 } else {
  if (!$142) {
   $144 = HEAP32[$98 + 56 >> 2] | 0; //@line 16812
   if (!$144) {
    $197 = 0; //@line 16815
   } else {
    if ((HEAP32[$98 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$76 >> 2] = $144; //@line 16821
     HEAP32[$77 >> 2] = HEAP32[$98 + 60 >> 2]; //@line 16824
     $197 = $144; //@line 16825
    } else {
     $197 = 0; //@line 16827
    }
   }
  } else {
   $197 = $142; //@line 16831
  }
  $$1$1 = $$1 + 1 | 0; //@line 16834
  $155 = $197; //@line 16834
 }
 $152 = HEAP32[2520] | 0; //@line 16836
 if (!$152) {
  $$1$2 = $$1$1; //@line 16839
  $168 = $155; //@line 16839
 } else {
  if (!$155) {
   $157 = HEAP32[$152 + 56 >> 2] | 0; //@line 16844
   if (!$157) {
    $198 = 0; //@line 16847
   } else {
    if ((HEAP32[$152 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$76 >> 2] = $157; //@line 16853
     HEAP32[$77 >> 2] = HEAP32[$152 + 60 >> 2]; //@line 16856
     $198 = $157; //@line 16857
    } else {
     $198 = 0; //@line 16859
    }
   }
  } else {
   $198 = $155; //@line 16863
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 16866
  $168 = $198; //@line 16866
 }
 $165 = HEAP32[2521] | 0; //@line 16868
 if (!$165) {
  $$1$3 = $$1$2; //@line 16871
  $181 = $168; //@line 16871
 } else {
  if (!$168) {
   $170 = HEAP32[$165 + 56 >> 2] | 0; //@line 16876
   if (!$170) {
    $199 = 0; //@line 16879
   } else {
    if ((HEAP32[$165 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$76 >> 2] = $170; //@line 16885
     HEAP32[$77 >> 2] = HEAP32[$165 + 60 >> 2]; //@line 16888
     $199 = $170; //@line 16889
    } else {
     $199 = 0; //@line 16891
    }
   }
  } else {
   $199 = $168; //@line 16895
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 16898
  $181 = $199; //@line 16898
 }
 $178 = HEAP32[2522] | 0; //@line 16900
 if (!$178) {
  HEAP32[10072 + ($30 << 2) >> 2] = $4; //@line 16904
  HEAP32[$84 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 16907
  if (!$$1$3) {
   $100 = $4 + 44 | 0; //@line 16910
   $101 = HEAP32[$100 >> 2] | 0; //@line 16911
   if (!$101) {
    $117 = $2 + 12 | 0; //@line 16914
    HEAP32[$117 >> 2] = 0; //@line 16915
    $119 = $10 + 4 | 0; //@line 16917
    HEAP32[$119 >> 2] = 0; //@line 16919
    HEAP32[$119 + 4 >> 2] = 0; //@line 16922
    HEAP32[$10 >> 2] = 3; //@line 16923
    $123 = $10 + 12 | 0; //@line 16924
    HEAP32[$123 >> 2] = 712; //@line 16925
    $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 16926
    $124 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $10) | 0; //@line 16927
    if (___async) {
     HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 16930
     $125 = $ReallocAsyncCtx19 + 4 | 0; //@line 16931
     HEAP32[$125 >> 2] = $8; //@line 16932
     $126 = $ReallocAsyncCtx19 + 8 | 0; //@line 16933
     HEAP32[$126 >> 2] = $4; //@line 16934
     $127 = $ReallocAsyncCtx19 + 12 | 0; //@line 16935
     HEAP32[$127 >> 2] = $4; //@line 16936
     $128 = $ReallocAsyncCtx19 + 16 | 0; //@line 16937
     HEAP32[$128 >> 2] = $12; //@line 16938
     $129 = $ReallocAsyncCtx19 + 20 | 0; //@line 16939
     HEAP32[$129 >> 2] = $100; //@line 16940
     $130 = $ReallocAsyncCtx19 + 24 | 0; //@line 16941
     HEAP32[$130 >> 2] = $31; //@line 16942
     $131 = $ReallocAsyncCtx19 + 28 | 0; //@line 16943
     HEAP32[$131 >> 2] = $18; //@line 16944
     $132 = $ReallocAsyncCtx19 + 32 | 0; //@line 16945
     HEAP32[$132 >> 2] = $20; //@line 16946
     $133 = $ReallocAsyncCtx19 + 36 | 0; //@line 16947
     HEAP32[$133 >> 2] = $100; //@line 16948
     $134 = $ReallocAsyncCtx19 + 40 | 0; //@line 16949
     HEAP32[$134 >> 2] = $28; //@line 16950
     $135 = $ReallocAsyncCtx19 + 44 | 0; //@line 16951
     HEAP32[$135 >> 2] = $117; //@line 16952
     $136 = $ReallocAsyncCtx19 + 48 | 0; //@line 16953
     HEAP32[$136 >> 2] = $10; //@line 16954
     $137 = $ReallocAsyncCtx19 + 52 | 0; //@line 16955
     HEAP32[$137 >> 2] = $2; //@line 16956
     $138 = $ReallocAsyncCtx19 + 56 | 0; //@line 16957
     HEAP32[$138 >> 2] = $123; //@line 16958
     sp = STACKTOP; //@line 16959
     return;
    }
    HEAP32[___async_retval >> 2] = $124; //@line 16963
    ___async_unwind = 0; //@line 16964
    HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 16965
    $125 = $ReallocAsyncCtx19 + 4 | 0; //@line 16966
    HEAP32[$125 >> 2] = $8; //@line 16967
    $126 = $ReallocAsyncCtx19 + 8 | 0; //@line 16968
    HEAP32[$126 >> 2] = $4; //@line 16969
    $127 = $ReallocAsyncCtx19 + 12 | 0; //@line 16970
    HEAP32[$127 >> 2] = $4; //@line 16971
    $128 = $ReallocAsyncCtx19 + 16 | 0; //@line 16972
    HEAP32[$128 >> 2] = $12; //@line 16973
    $129 = $ReallocAsyncCtx19 + 20 | 0; //@line 16974
    HEAP32[$129 >> 2] = $100; //@line 16975
    $130 = $ReallocAsyncCtx19 + 24 | 0; //@line 16976
    HEAP32[$130 >> 2] = $31; //@line 16977
    $131 = $ReallocAsyncCtx19 + 28 | 0; //@line 16978
    HEAP32[$131 >> 2] = $18; //@line 16979
    $132 = $ReallocAsyncCtx19 + 32 | 0; //@line 16980
    HEAP32[$132 >> 2] = $20; //@line 16981
    $133 = $ReallocAsyncCtx19 + 36 | 0; //@line 16982
    HEAP32[$133 >> 2] = $100; //@line 16983
    $134 = $ReallocAsyncCtx19 + 40 | 0; //@line 16984
    HEAP32[$134 >> 2] = $28; //@line 16985
    $135 = $ReallocAsyncCtx19 + 44 | 0; //@line 16986
    HEAP32[$135 >> 2] = $117; //@line 16987
    $136 = $ReallocAsyncCtx19 + 48 | 0; //@line 16988
    HEAP32[$136 >> 2] = $10; //@line 16989
    $137 = $ReallocAsyncCtx19 + 52 | 0; //@line 16990
    HEAP32[$137 >> 2] = $2; //@line 16991
    $138 = $ReallocAsyncCtx19 + 56 | 0; //@line 16992
    HEAP32[$138 >> 2] = $123; //@line 16993
    sp = STACKTOP; //@line 16994
    return;
   } else {
    $104 = HEAP32[$101 + 4 >> 2] | 0; //@line 16998
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(52) | 0; //@line 16999
    FUNCTION_TABLE_vii[$104 & 7]($2, $31); //@line 17000
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 17003
     $105 = $ReallocAsyncCtx6 + 4 | 0; //@line 17004
     HEAP32[$105 >> 2] = $8; //@line 17005
     $106 = $ReallocAsyncCtx6 + 8 | 0; //@line 17006
     HEAP32[$106 >> 2] = $100; //@line 17007
     $107 = $ReallocAsyncCtx6 + 12 | 0; //@line 17008
     HEAP32[$107 >> 2] = $2; //@line 17009
     $108 = $ReallocAsyncCtx6 + 16 | 0; //@line 17010
     HEAP32[$108 >> 2] = $10; //@line 17011
     $109 = $ReallocAsyncCtx6 + 20 | 0; //@line 17012
     HEAP32[$109 >> 2] = $4; //@line 17013
     $110 = $ReallocAsyncCtx6 + 24 | 0; //@line 17014
     HEAP32[$110 >> 2] = $4; //@line 17015
     $111 = $ReallocAsyncCtx6 + 28 | 0; //@line 17016
     HEAP32[$111 >> 2] = $12; //@line 17017
     $112 = $ReallocAsyncCtx6 + 32 | 0; //@line 17018
     HEAP32[$112 >> 2] = $100; //@line 17019
     $113 = $ReallocAsyncCtx6 + 36 | 0; //@line 17020
     HEAP32[$113 >> 2] = $18; //@line 17021
     $114 = $ReallocAsyncCtx6 + 40 | 0; //@line 17022
     HEAP32[$114 >> 2] = $31; //@line 17023
     $115 = $ReallocAsyncCtx6 + 44 | 0; //@line 17024
     HEAP32[$115 >> 2] = $20; //@line 17025
     $116 = $ReallocAsyncCtx6 + 48 | 0; //@line 17026
     HEAP32[$116 >> 2] = $28; //@line 17027
     sp = STACKTOP; //@line 17028
     return;
    }
    ___async_unwind = 0; //@line 17031
    HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 17032
    $105 = $ReallocAsyncCtx6 + 4 | 0; //@line 17033
    HEAP32[$105 >> 2] = $8; //@line 17034
    $106 = $ReallocAsyncCtx6 + 8 | 0; //@line 17035
    HEAP32[$106 >> 2] = $100; //@line 17036
    $107 = $ReallocAsyncCtx6 + 12 | 0; //@line 17037
    HEAP32[$107 >> 2] = $2; //@line 17038
    $108 = $ReallocAsyncCtx6 + 16 | 0; //@line 17039
    HEAP32[$108 >> 2] = $10; //@line 17040
    $109 = $ReallocAsyncCtx6 + 20 | 0; //@line 17041
    HEAP32[$109 >> 2] = $4; //@line 17042
    $110 = $ReallocAsyncCtx6 + 24 | 0; //@line 17043
    HEAP32[$110 >> 2] = $4; //@line 17044
    $111 = $ReallocAsyncCtx6 + 28 | 0; //@line 17045
    HEAP32[$111 >> 2] = $12; //@line 17046
    $112 = $ReallocAsyncCtx6 + 32 | 0; //@line 17047
    HEAP32[$112 >> 2] = $100; //@line 17048
    $113 = $ReallocAsyncCtx6 + 36 | 0; //@line 17049
    HEAP32[$113 >> 2] = $18; //@line 17050
    $114 = $ReallocAsyncCtx6 + 40 | 0; //@line 17051
    HEAP32[$114 >> 2] = $31; //@line 17052
    $115 = $ReallocAsyncCtx6 + 44 | 0; //@line 17053
    HEAP32[$115 >> 2] = $20; //@line 17054
    $116 = $ReallocAsyncCtx6 + 48 | 0; //@line 17055
    HEAP32[$116 >> 2] = $28; //@line 17056
    sp = STACKTOP; //@line 17057
    return;
   }
  }
 } else {
  if (!$181) {
   $183 = HEAP32[$178 + 56 >> 2] | 0; //@line 17065
   if ($183 | 0) {
    if ((HEAP32[$178 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$76 >> 2] = $183; //@line 17072
     HEAP32[$77 >> 2] = HEAP32[$178 + 60 >> 2]; //@line 17075
    }
   }
  }
  HEAP32[10072 + ($30 << 2) >> 2] = $4; //@line 17080
  HEAP32[$84 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 17083
 }
 HEAP32[___async_retval >> 2] = $$; //@line 17086
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_177($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$191 = 0, $$2 = 0, $$byval_copy = 0, $$byval_copy16 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $129 = 0, $130 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10
 STACKTOP = STACKTOP + 48 | 0; //@line 11
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11
 $$byval_copy16 = sp + 20 | 0; //@line 12
 $$byval_copy = sp; //@line 13
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 35
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 37
 if (!$AsyncRetVal) {
  __ZN6Socket11set_timeoutEi($18, 5e3); //@line 40
  $25 = _malloc(512) | 0; //@line 41
  if (!$25) {
   $$2 = -3007; //@line 44
  } else {
   $27 = $25; //@line 46
   $28 = $25 + 1 | 0; //@line 47
   $29 = $25 + 2 | 0; //@line 48
   $30 = $25 + 3 | 0; //@line 49
   $31 = $25 + 4 | 0; //@line 50
   $32 = $25 + 5 | 0; //@line 51
   $33 = $25 + 6 | 0; //@line 52
   $34 = $25 + 12 | 0; //@line 53
   $$sink$i = ($22 | 0) == 2 ? 28 : 1; //@line 55
   HEAP32[$4 >> 2] = 0; //@line 56
   HEAP32[$4 + 4 >> 2] = 0; //@line 56
   HEAP32[$4 + 8 >> 2] = 0; //@line 56
   HEAP32[$4 + 12 >> 2] = 0; //@line 56
   HEAP32[$4 + 16 >> 2] = 0; //@line 56
   HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 57
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 57
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 57
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 57
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 57
   __ZN13SocketAddressC2E10nsapi_addrt($2, $$byval_copy, 0); //@line 58
   if (!3) {
    _free($25); //@line 61
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 62
    $124 = __ZN6Socket5closeEv($18) | 0; //@line 63
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 66
     $125 = $ReallocAsyncCtx6 + 4 | 0; //@line 67
     HEAP32[$125 >> 2] = -3009; //@line 68
     $126 = $ReallocAsyncCtx6 + 8 | 0; //@line 69
     HEAP32[$126 >> 2] = $8; //@line 70
     $127 = $ReallocAsyncCtx6 + 12 | 0; //@line 71
     HEAP32[$127 >> 2] = $20; //@line 72
     sp = STACKTOP; //@line 73
     STACKTOP = sp; //@line 74
     return;
    }
    HEAP32[___async_retval >> 2] = $124; //@line 77
    ___async_unwind = 0; //@line 78
    HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 79
    $125 = $ReallocAsyncCtx6 + 4 | 0; //@line 80
    HEAP32[$125 >> 2] = -3009; //@line 81
    $126 = $ReallocAsyncCtx6 + 8 | 0; //@line 82
    HEAP32[$126 >> 2] = $8; //@line 83
    $127 = $ReallocAsyncCtx6 + 12 | 0; //@line 84
    HEAP32[$127 >> 2] = $20; //@line 85
    sp = STACKTOP; //@line 86
    STACKTOP = sp; //@line 87
    return;
   }
   if (0 > 9) {
    $$191 = 0; //@line 91
   } else {
    if (0 < 5) {
     $$191 = 0; //@line 95
    } else {
     $73 = 608 + ((0 + -5 | 0) * 20 | 0) | 0; //@line 99
     HEAP32[$$byval_copy16 >> 2] = HEAP32[$73 >> 2]; //@line 100
     HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$73 + 4 >> 2]; //@line 100
     HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$73 + 8 >> 2]; //@line 100
     HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$73 + 12 >> 2]; //@line 100
     HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$73 + 16 >> 2]; //@line 100
     __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy16); //@line 101
     __ZN13SocketAddress8set_portEt($2, 53); //@line 102
     HEAP8[$25 >> 0] = 0; //@line 103
     HEAP8[$28 >> 0] = 1; //@line 104
     HEAP8[$29 >> 0] = 1; //@line 105
     HEAP8[$30 >> 0] = 0; //@line 106
     HEAP8[$31 >> 0] = 0; //@line 107
     HEAP8[$32 >> 0] = 1; //@line 108
     HEAP8[$33 >> 0] = 0; //@line 109
     HEAP8[$33 + 1 >> 0] = 0; //@line 109
     HEAP8[$33 + 2 >> 0] = 0; //@line 109
     HEAP8[$33 + 3 >> 0] = 0; //@line 109
     HEAP8[$33 + 4 >> 0] = 0; //@line 109
     HEAP8[$33 + 5 >> 0] = 0; //@line 109
     if (!(HEAP8[$6 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $34; //@line 113
     } else {
      $$048$i = $6; //@line 115
      $$sroa$0$0$in47$i = $34; //@line 115
      while (1) {
       $76 = _strcspn($$048$i, 7347) | 0; //@line 117
       $78 = $$sroa$0$0$in47$i + 1 | 0; //@line 119
       HEAP8[$$sroa$0$0$in47$i >> 0] = $76; //@line 120
       $79 = $76 & 255; //@line 121
       _memcpy($78 | 0, $$048$i | 0, $79 | 0) | 0; //@line 122
       $80 = $78 + $79 | 0; //@line 123
       $$048$i = $$048$i + ($76 + ((HEAP8[$$048$i + $76 >> 0] | 0) == 46 & 1)) | 0; //@line 129
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $80; //@line 133
        break;
       } else {
        $$sroa$0$0$in47$i = $80; //@line 136
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 141
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 143
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 145
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 147
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 150
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 152
     $96 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($8, $2, $25, $$sroa$0$0$in$lcssa$i + 5 - $27 | 0) | 0; //@line 153
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 156
      $97 = $ReallocAsyncCtx4 + 4 | 0; //@line 157
      HEAP32[$97 >> 2] = $2; //@line 158
      $98 = $ReallocAsyncCtx4 + 8 | 0; //@line 159
      HEAP32[$98 >> 2] = $4; //@line 160
      $99 = $ReallocAsyncCtx4 + 12 | 0; //@line 161
      HEAP32[$99 >> 2] = $2; //@line 162
      $100 = $ReallocAsyncCtx4 + 16 | 0; //@line 163
      HEAP32[$100 >> 2] = $4; //@line 164
      $101 = $ReallocAsyncCtx4 + 20 | 0; //@line 165
      HEAP32[$101 >> 2] = $6; //@line 166
      $102 = $ReallocAsyncCtx4 + 24 | 0; //@line 167
      HEAP32[$102 >> 2] = $34; //@line 168
      $103 = $ReallocAsyncCtx4 + 28 | 0; //@line 169
      HEAP32[$103 >> 2] = $8; //@line 170
      $104 = $ReallocAsyncCtx4 + 32 | 0; //@line 171
      HEAP32[$104 >> 2] = $25; //@line 172
      $105 = $ReallocAsyncCtx4 + 36 | 0; //@line 173
      HEAP32[$105 >> 2] = $28; //@line 174
      $106 = $ReallocAsyncCtx4 + 40 | 0; //@line 175
      HEAP32[$106 >> 2] = $29; //@line 176
      $107 = $ReallocAsyncCtx4 + 44 | 0; //@line 177
      HEAP32[$107 >> 2] = $30; //@line 178
      $108 = $ReallocAsyncCtx4 + 48 | 0; //@line 179
      HEAP32[$108 >> 2] = $31; //@line 180
      $109 = $ReallocAsyncCtx4 + 52 | 0; //@line 181
      HEAP32[$109 >> 2] = $32; //@line 182
      $110 = $ReallocAsyncCtx4 + 56 | 0; //@line 183
      HEAP32[$110 >> 2] = $33; //@line 184
      $111 = $ReallocAsyncCtx4 + 60 | 0; //@line 185
      HEAP32[$111 >> 2] = $10; //@line 186
      $112 = $ReallocAsyncCtx4 + 64 | 0; //@line 187
      HEAP32[$112 >> 2] = $10; //@line 188
      $113 = $ReallocAsyncCtx4 + 68 | 0; //@line 189
      HEAP32[$113 >> 2] = $12; //@line 190
      $114 = $ReallocAsyncCtx4 + 72 | 0; //@line 191
      HEAP32[$114 >> 2] = $14; //@line 192
      $115 = $ReallocAsyncCtx4 + 76 | 0; //@line 193
      HEAP32[$115 >> 2] = $12; //@line 194
      $116 = $ReallocAsyncCtx4 + 80 | 0; //@line 195
      HEAP32[$116 >> 2] = $16; //@line 196
      $117 = $ReallocAsyncCtx4 + 84 | 0; //@line 197
      HEAP8[$117 >> 0] = $$sink$i; //@line 198
      $118 = $ReallocAsyncCtx4 + 88 | 0; //@line 199
      HEAP32[$118 >> 2] = $27; //@line 200
      $119 = $ReallocAsyncCtx4 + 92 | 0; //@line 201
      HEAP32[$119 >> 2] = $18; //@line 202
      $120 = $ReallocAsyncCtx4 + 96 | 0; //@line 203
      HEAP32[$120 >> 2] = $20; //@line 204
      $121 = $ReallocAsyncCtx4 + 100 | 0; //@line 205
      HEAP8[$121 >> 0] = 0; //@line 206
      $122 = $ReallocAsyncCtx4 + 101 | 0; //@line 207
      HEAP8[$122 >> 0] = 3; //@line 208
      sp = STACKTOP; //@line 209
      STACKTOP = sp; //@line 210
      return;
     }
     HEAP32[___async_retval >> 2] = $96; //@line 213
     ___async_unwind = 0; //@line 214
     HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 215
     $97 = $ReallocAsyncCtx4 + 4 | 0; //@line 216
     HEAP32[$97 >> 2] = $2; //@line 217
     $98 = $ReallocAsyncCtx4 + 8 | 0; //@line 218
     HEAP32[$98 >> 2] = $4; //@line 219
     $99 = $ReallocAsyncCtx4 + 12 | 0; //@line 220
     HEAP32[$99 >> 2] = $2; //@line 221
     $100 = $ReallocAsyncCtx4 + 16 | 0; //@line 222
     HEAP32[$100 >> 2] = $4; //@line 223
     $101 = $ReallocAsyncCtx4 + 20 | 0; //@line 224
     HEAP32[$101 >> 2] = $6; //@line 225
     $102 = $ReallocAsyncCtx4 + 24 | 0; //@line 226
     HEAP32[$102 >> 2] = $34; //@line 227
     $103 = $ReallocAsyncCtx4 + 28 | 0; //@line 228
     HEAP32[$103 >> 2] = $8; //@line 229
     $104 = $ReallocAsyncCtx4 + 32 | 0; //@line 230
     HEAP32[$104 >> 2] = $25; //@line 231
     $105 = $ReallocAsyncCtx4 + 36 | 0; //@line 232
     HEAP32[$105 >> 2] = $28; //@line 233
     $106 = $ReallocAsyncCtx4 + 40 | 0; //@line 234
     HEAP32[$106 >> 2] = $29; //@line 235
     $107 = $ReallocAsyncCtx4 + 44 | 0; //@line 236
     HEAP32[$107 >> 2] = $30; //@line 237
     $108 = $ReallocAsyncCtx4 + 48 | 0; //@line 238
     HEAP32[$108 >> 2] = $31; //@line 239
     $109 = $ReallocAsyncCtx4 + 52 | 0; //@line 240
     HEAP32[$109 >> 2] = $32; //@line 241
     $110 = $ReallocAsyncCtx4 + 56 | 0; //@line 242
     HEAP32[$110 >> 2] = $33; //@line 243
     $111 = $ReallocAsyncCtx4 + 60 | 0; //@line 244
     HEAP32[$111 >> 2] = $10; //@line 245
     $112 = $ReallocAsyncCtx4 + 64 | 0; //@line 246
     HEAP32[$112 >> 2] = $10; //@line 247
     $113 = $ReallocAsyncCtx4 + 68 | 0; //@line 248
     HEAP32[$113 >> 2] = $12; //@line 249
     $114 = $ReallocAsyncCtx4 + 72 | 0; //@line 250
     HEAP32[$114 >> 2] = $14; //@line 251
     $115 = $ReallocAsyncCtx4 + 76 | 0; //@line 252
     HEAP32[$115 >> 2] = $12; //@line 253
     $116 = $ReallocAsyncCtx4 + 80 | 0; //@line 254
     HEAP32[$116 >> 2] = $16; //@line 255
     $117 = $ReallocAsyncCtx4 + 84 | 0; //@line 256
     HEAP8[$117 >> 0] = $$sink$i; //@line 257
     $118 = $ReallocAsyncCtx4 + 88 | 0; //@line 258
     HEAP32[$118 >> 2] = $27; //@line 259
     $119 = $ReallocAsyncCtx4 + 92 | 0; //@line 260
     HEAP32[$119 >> 2] = $18; //@line 261
     $120 = $ReallocAsyncCtx4 + 96 | 0; //@line 262
     HEAP32[$120 >> 2] = $20; //@line 263
     $121 = $ReallocAsyncCtx4 + 100 | 0; //@line 264
     HEAP8[$121 >> 0] = 0; //@line 265
     $122 = $ReallocAsyncCtx4 + 101 | 0; //@line 266
     HEAP8[$122 >> 0] = 3; //@line 267
     sp = STACKTOP; //@line 268
     STACKTOP = sp; //@line 269
     return;
    }
   }
   $42 = HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] | 0; //@line 275
   $ReallocAsyncCtx = _emscripten_realloc_async_context(104) | 0; //@line 276
   $43 = FUNCTION_TABLE_iiii[$42 & 31]($10, $$191 & 255, $2) | 0; //@line 277
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 280
    $44 = $ReallocAsyncCtx + 4 | 0; //@line 281
    HEAP32[$44 >> 2] = $2; //@line 282
    $45 = $ReallocAsyncCtx + 8 | 0; //@line 283
    HEAP32[$45 >> 2] = $4; //@line 284
    $46 = $ReallocAsyncCtx + 12 | 0; //@line 285
    HEAP32[$46 >> 2] = $2; //@line 286
    $47 = $ReallocAsyncCtx + 16 | 0; //@line 287
    HEAP32[$47 >> 2] = $4; //@line 288
    $48 = $ReallocAsyncCtx + 20 | 0; //@line 289
    HEAP32[$48 >> 2] = $6; //@line 290
    $49 = $ReallocAsyncCtx + 24 | 0; //@line 291
    HEAP32[$49 >> 2] = $34; //@line 292
    $50 = $ReallocAsyncCtx + 28 | 0; //@line 293
    HEAP32[$50 >> 2] = $8; //@line 294
    $51 = $ReallocAsyncCtx + 32 | 0; //@line 295
    HEAP8[$51 >> 0] = $$191; //@line 296
    $52 = $ReallocAsyncCtx + 36 | 0; //@line 297
    HEAP32[$52 >> 2] = $25; //@line 298
    $53 = $ReallocAsyncCtx + 40 | 0; //@line 299
    HEAP32[$53 >> 2] = $28; //@line 300
    $54 = $ReallocAsyncCtx + 44 | 0; //@line 301
    HEAP32[$54 >> 2] = $29; //@line 302
    $55 = $ReallocAsyncCtx + 48 | 0; //@line 303
    HEAP32[$55 >> 2] = $30; //@line 304
    $56 = $ReallocAsyncCtx + 52 | 0; //@line 305
    HEAP32[$56 >> 2] = $31; //@line 306
    $57 = $ReallocAsyncCtx + 56 | 0; //@line 307
    HEAP32[$57 >> 2] = $32; //@line 308
    $58 = $ReallocAsyncCtx + 60 | 0; //@line 309
    HEAP32[$58 >> 2] = $33; //@line 310
    $59 = $ReallocAsyncCtx + 64 | 0; //@line 311
    HEAP32[$59 >> 2] = $10; //@line 312
    $60 = $ReallocAsyncCtx + 68 | 0; //@line 313
    HEAP32[$60 >> 2] = $10; //@line 314
    $61 = $ReallocAsyncCtx + 72 | 0; //@line 315
    HEAP32[$61 >> 2] = $12; //@line 316
    $62 = $ReallocAsyncCtx + 76 | 0; //@line 317
    HEAP32[$62 >> 2] = $14; //@line 318
    $63 = $ReallocAsyncCtx + 80 | 0; //@line 319
    HEAP32[$63 >> 2] = $12; //@line 320
    $64 = $ReallocAsyncCtx + 84 | 0; //@line 321
    HEAP32[$64 >> 2] = $16; //@line 322
    $65 = $ReallocAsyncCtx + 88 | 0; //@line 323
    HEAP8[$65 >> 0] = 3; //@line 324
    $66 = $ReallocAsyncCtx + 89 | 0; //@line 325
    HEAP8[$66 >> 0] = $$sink$i; //@line 326
    $67 = $ReallocAsyncCtx + 92 | 0; //@line 327
    HEAP32[$67 >> 2] = $27; //@line 328
    $68 = $ReallocAsyncCtx + 96 | 0; //@line 329
    HEAP32[$68 >> 2] = $18; //@line 330
    $69 = $ReallocAsyncCtx + 100 | 0; //@line 331
    HEAP32[$69 >> 2] = $20; //@line 332
    sp = STACKTOP; //@line 333
    STACKTOP = sp; //@line 334
    return;
   }
   HEAP32[___async_retval >> 2] = $43; //@line 337
   ___async_unwind = 0; //@line 338
   HEAP32[$ReallocAsyncCtx >> 2] = 155; //@line 339
   $44 = $ReallocAsyncCtx + 4 | 0; //@line 340
   HEAP32[$44 >> 2] = $2; //@line 341
   $45 = $ReallocAsyncCtx + 8 | 0; //@line 342
   HEAP32[$45 >> 2] = $4; //@line 343
   $46 = $ReallocAsyncCtx + 12 | 0; //@line 344
   HEAP32[$46 >> 2] = $2; //@line 345
   $47 = $ReallocAsyncCtx + 16 | 0; //@line 346
   HEAP32[$47 >> 2] = $4; //@line 347
   $48 = $ReallocAsyncCtx + 20 | 0; //@line 348
   HEAP32[$48 >> 2] = $6; //@line 349
   $49 = $ReallocAsyncCtx + 24 | 0; //@line 350
   HEAP32[$49 >> 2] = $34; //@line 351
   $50 = $ReallocAsyncCtx + 28 | 0; //@line 352
   HEAP32[$50 >> 2] = $8; //@line 353
   $51 = $ReallocAsyncCtx + 32 | 0; //@line 354
   HEAP8[$51 >> 0] = $$191; //@line 355
   $52 = $ReallocAsyncCtx + 36 | 0; //@line 356
   HEAP32[$52 >> 2] = $25; //@line 357
   $53 = $ReallocAsyncCtx + 40 | 0; //@line 358
   HEAP32[$53 >> 2] = $28; //@line 359
   $54 = $ReallocAsyncCtx + 44 | 0; //@line 360
   HEAP32[$54 >> 2] = $29; //@line 361
   $55 = $ReallocAsyncCtx + 48 | 0; //@line 362
   HEAP32[$55 >> 2] = $30; //@line 363
   $56 = $ReallocAsyncCtx + 52 | 0; //@line 364
   HEAP32[$56 >> 2] = $31; //@line 365
   $57 = $ReallocAsyncCtx + 56 | 0; //@line 366
   HEAP32[$57 >> 2] = $32; //@line 367
   $58 = $ReallocAsyncCtx + 60 | 0; //@line 368
   HEAP32[$58 >> 2] = $33; //@line 369
   $59 = $ReallocAsyncCtx + 64 | 0; //@line 370
   HEAP32[$59 >> 2] = $10; //@line 371
   $60 = $ReallocAsyncCtx + 68 | 0; //@line 372
   HEAP32[$60 >> 2] = $10; //@line 373
   $61 = $ReallocAsyncCtx + 72 | 0; //@line 374
   HEAP32[$61 >> 2] = $12; //@line 375
   $62 = $ReallocAsyncCtx + 76 | 0; //@line 376
   HEAP32[$62 >> 2] = $14; //@line 377
   $63 = $ReallocAsyncCtx + 80 | 0; //@line 378
   HEAP32[$63 >> 2] = $12; //@line 379
   $64 = $ReallocAsyncCtx + 84 | 0; //@line 380
   HEAP32[$64 >> 2] = $16; //@line 381
   $65 = $ReallocAsyncCtx + 88 | 0; //@line 382
   HEAP8[$65 >> 0] = 3; //@line 383
   $66 = $ReallocAsyncCtx + 89 | 0; //@line 384
   HEAP8[$66 >> 0] = $$sink$i; //@line 385
   $67 = $ReallocAsyncCtx + 92 | 0; //@line 386
   HEAP32[$67 >> 2] = $27; //@line 387
   $68 = $ReallocAsyncCtx + 96 | 0; //@line 388
   HEAP32[$68 >> 2] = $18; //@line 389
   $69 = $ReallocAsyncCtx + 100 | 0; //@line 390
   HEAP32[$69 >> 2] = $20; //@line 391
   sp = STACKTOP; //@line 392
   STACKTOP = sp; //@line 393
   return;
  }
 } else {
  $$2 = $AsyncRetVal; //@line 396
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 398
 __ZN9UDPSocketD2Ev($8); //@line 399
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 160; //@line 402
  $129 = $ReallocAsyncCtx5 + 4 | 0; //@line 403
  HEAP32[$129 >> 2] = $20; //@line 404
  $130 = $ReallocAsyncCtx5 + 8 | 0; //@line 405
  HEAP32[$130 >> 2] = $$2; //@line 406
  sp = STACKTOP; //@line 407
  STACKTOP = sp; //@line 408
  return;
 }
 ___async_unwind = 0; //@line 410
 HEAP32[$ReallocAsyncCtx5 >> 2] = 160; //@line 411
 $129 = $ReallocAsyncCtx5 + 4 | 0; //@line 412
 HEAP32[$129 >> 2] = $20; //@line 413
 $130 = $ReallocAsyncCtx5 + 8 | 0; //@line 414
 HEAP32[$130 >> 2] = $$2; //@line 415
 sp = STACKTOP; //@line 416
 STACKTOP = sp; //@line 417
 return;
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27897
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27899
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27901
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27903
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27905
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 27907
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27909
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27911
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27913
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27915
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27919
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27923
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27925
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27927
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27929
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 27931
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 27933
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 27935
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 27937
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 27939
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 27941
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 27943
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 27945
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 27947
 HEAP32[133] = (HEAP32[133] | 0) + 1; //@line 27950
 $53 = HEAP32[122] | 0; //@line 27951
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 27955
   do {
    if ($10 << 24 >> 24 > -1 & ($2 | 0) != 0) {
     $57 = HEAP32[119] | 0; //@line 27961
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $2) | 0) {
       $$0$i = 1; //@line 27968
       break;
      }
     }
     $62 = HEAP32[120] | 0; //@line 27972
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 27976
     } else {
      if (!(_strstr($62, $2) | 0)) {
       $$0$i = 1; //@line 27981
      } else {
       label = 9; //@line 27983
      }
     }
    } else {
     label = 9; //@line 27987
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 27991
   }
   if (!((HEAP32[129] | 0) != 0 & ((($2 | 0) == 0 | (($8 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[126] = HEAP32[124]; //@line 28003
    break;
   }
   $73 = HEAPU8[472] | 0; //@line 28007
   $74 = $10 & 255; //@line 28008
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 28013
    $$lobit = $78 >>> 6; //@line 28014
    $79 = $$lobit & 255; //@line 28015
    $83 = ($73 & 32 | 0) == 0; //@line 28019
    $84 = HEAP32[123] | 0; //@line 28020
    $85 = HEAP32[122] | 0; //@line 28021
    $86 = $10 << 24 >> 24 == 1; //@line 28022
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 28025
     _vsnprintf($85, $84, $8, $12) | 0; //@line 28026
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 74; //@line 28029
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 28030
      $$expand_i1_val = $86 & 1; //@line 28031
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 28032
      sp = STACKTOP; //@line 28033
      return;
     }
     ___async_unwind = 0; //@line 28036
     HEAP32[$ReallocAsyncCtx12 >> 2] = 74; //@line 28037
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 28038
     $$expand_i1_val = $86 & 1; //@line 28039
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 28040
     sp = STACKTOP; //@line 28041
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 28047
     $$1143 = $85; //@line 28047
     $$1145 = $84; //@line 28047
     $$3154 = 0; //@line 28047
     label = 28; //@line 28048
    } else {
     if ($83) {
      $$0142 = $85; //@line 28051
      $$0144 = $84; //@line 28051
     } else {
      $89 = _snprintf($85, $84, 5678, $18) | 0; //@line 28053
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 28055
      $91 = ($$ | 0) > 0; //@line 28056
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 28061
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 28061
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 28065
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 5696; //@line 28071
        label = 25; //@line 28072
        break;
       }
      case 1:
       {
        $$sink = 5702; //@line 28076
        label = 25; //@line 28077
        break;
       }
      case 3:
       {
        $$sink = 5690; //@line 28081
        label = 25; //@line 28082
        break;
       }
      case 7:
       {
        $$sink = 5684; //@line 28086
        label = 25; //@line 28087
        break;
       }
      default:
       {
        $$0141 = 0; //@line 28091
        $$1152 = 0; //@line 28091
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$22 >> 2] = $$sink; //@line 28095
       $$0141 = $79 & 1; //@line 28098
       $$1152 = _snprintf($$0142, $$0144, 5708, $22) | 0; //@line 28098
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 28101
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 28103
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 28105
       $$1$off0 = $extract$t159; //@line 28110
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 28110
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 28110
       $$3154 = $$1152; //@line 28110
       label = 28; //@line 28111
      } else {
       $$1$off0 = $extract$t159; //@line 28113
       $$1143 = $$0142; //@line 28113
       $$1145 = $$0144; //@line 28113
       $$3154 = $$1152$; //@line 28113
       label = 28; //@line 28114
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[127] | 0) != 0) {
      HEAP32[$26 >> 2] = HEAP32[$12 >> 2]; //@line 28125
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 28126
      $108 = _vsnprintf(0, 0, $8, $26) | 0; //@line 28127
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 78; //@line 28130
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 28131
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 28132
       HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 28133
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 28134
       HEAP32[$110 >> 2] = $4; //@line 28135
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 28136
       HEAP32[$111 >> 2] = $6; //@line 28137
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 28138
       HEAP32[$112 >> 2] = $$3154; //@line 28139
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 28140
       HEAP32[$113 >> 2] = $14; //@line 28141
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 28142
       HEAP32[$114 >> 2] = $$1143; //@line 28143
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 28144
       HEAP32[$115 >> 2] = $$1145; //@line 28145
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 28146
       HEAP32[$116 >> 2] = $16; //@line 28147
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 28148
       HEAP32[$117 >> 2] = $26; //@line 28149
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 28150
       HEAP32[$118 >> 2] = $28; //@line 28151
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 28152
       HEAP32[$119 >> 2] = $30; //@line 28153
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 28154
       HEAP32[$120 >> 2] = $32; //@line 28155
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 28156
       HEAP32[$121 >> 2] = $2; //@line 28157
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 28158
       HEAP32[$122 >> 2] = $34; //@line 28159
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 28160
       HEAP32[$123 >> 2] = $36; //@line 28161
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 28162
       HEAP32[$124 >> 2] = $38; //@line 28163
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 28164
       HEAP32[$125 >> 2] = $74; //@line 28165
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 28166
       HEAP32[$126 >> 2] = $40; //@line 28167
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 28168
       HEAP32[$127 >> 2] = $42; //@line 28169
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 28170
       HEAP32[$128 >> 2] = $8; //@line 28171
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 28172
       HEAP32[$129 >> 2] = $12; //@line 28173
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 28174
       HEAP32[$130 >> 2] = $44; //@line 28175
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 28176
       HEAP32[$131 >> 2] = $46; //@line 28177
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 28178
       HEAP32[$132 >> 2] = $48; //@line 28179
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 28180
       HEAP32[$133 >> 2] = $50; //@line 28181
       sp = STACKTOP; //@line 28182
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 28186
      ___async_unwind = 0; //@line 28187
      HEAP32[$ReallocAsyncCtx11 >> 2] = 78; //@line 28188
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 28189
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 28190
      HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 28191
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 28192
      HEAP32[$110 >> 2] = $4; //@line 28193
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 28194
      HEAP32[$111 >> 2] = $6; //@line 28195
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 28196
      HEAP32[$112 >> 2] = $$3154; //@line 28197
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 28198
      HEAP32[$113 >> 2] = $14; //@line 28199
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 28200
      HEAP32[$114 >> 2] = $$1143; //@line 28201
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 28202
      HEAP32[$115 >> 2] = $$1145; //@line 28203
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 28204
      HEAP32[$116 >> 2] = $16; //@line 28205
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 28206
      HEAP32[$117 >> 2] = $26; //@line 28207
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 28208
      HEAP32[$118 >> 2] = $28; //@line 28209
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 28210
      HEAP32[$119 >> 2] = $30; //@line 28211
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 28212
      HEAP32[$120 >> 2] = $32; //@line 28213
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 28214
      HEAP32[$121 >> 2] = $2; //@line 28215
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 28216
      HEAP32[$122 >> 2] = $34; //@line 28217
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 28218
      HEAP32[$123 >> 2] = $36; //@line 28219
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 28220
      HEAP32[$124 >> 2] = $38; //@line 28221
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 28222
      HEAP32[$125 >> 2] = $74; //@line 28223
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 28224
      HEAP32[$126 >> 2] = $40; //@line 28225
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 28226
      HEAP32[$127 >> 2] = $42; //@line 28227
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 28228
      HEAP32[$128 >> 2] = $8; //@line 28229
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 28230
      HEAP32[$129 >> 2] = $12; //@line 28231
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 28232
      HEAP32[$130 >> 2] = $44; //@line 28233
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 28234
      HEAP32[$131 >> 2] = $46; //@line 28235
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 28236
      HEAP32[$132 >> 2] = $48; //@line 28237
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 28238
      HEAP32[$133 >> 2] = $50; //@line 28239
      sp = STACKTOP; //@line 28240
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 28245
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$40 >> 2] = $2; //@line 28251
        $$5156 = _snprintf($$1143, $$1145, 5711, $40) | 0; //@line 28253
        break;
       }
      case 1:
       {
        HEAP32[$32 >> 2] = $2; //@line 28257
        $$5156 = _snprintf($$1143, $$1145, 5726, $32) | 0; //@line 28259
        break;
       }
      case 3:
       {
        HEAP32[$36 >> 2] = $2; //@line 28263
        $$5156 = _snprintf($$1143, $$1145, 5741, $36) | 0; //@line 28265
        break;
       }
      case 7:
       {
        HEAP32[$44 >> 2] = $2; //@line 28269
        $$5156 = _snprintf($$1143, $$1145, 5756, $44) | 0; //@line 28271
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 5771, $48) | 0; //@line 28276
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 28280
      $147 = $$1143 + $$5156$ | 0; //@line 28282
      $148 = $$1145 - $$5156$ | 0; //@line 28283
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 28287
       $150 = _vsnprintf($147, $148, $8, $12) | 0; //@line 28288
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 80; //@line 28291
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 28292
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 28293
        HEAP8[$151 >> 0] = $$1$off0$expand_i1_val18; //@line 28294
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 28295
        HEAP32[$152 >> 2] = $4; //@line 28296
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 28297
        HEAP32[$153 >> 2] = $6; //@line 28298
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 28299
        HEAP32[$154 >> 2] = $28; //@line 28300
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 28301
        HEAP32[$155 >> 2] = $30; //@line 28302
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 28303
        HEAP32[$156 >> 2] = $148; //@line 28304
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 28305
        HEAP32[$157 >> 2] = $147; //@line 28306
        sp = STACKTOP; //@line 28307
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 28311
       ___async_unwind = 0; //@line 28312
       HEAP32[$ReallocAsyncCtx10 >> 2] = 80; //@line 28313
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 28314
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 28315
       HEAP8[$151 >> 0] = $$1$off0$expand_i1_val18; //@line 28316
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 28317
       HEAP32[$152 >> 2] = $4; //@line 28318
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 28319
       HEAP32[$153 >> 2] = $6; //@line 28320
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 28321
       HEAP32[$154 >> 2] = $28; //@line 28322
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 28323
       HEAP32[$155 >> 2] = $30; //@line 28324
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 28325
       HEAP32[$156 >> 2] = $148; //@line 28326
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 28327
       HEAP32[$157 >> 2] = $147; //@line 28328
       sp = STACKTOP; //@line 28329
       return;
      }
     }
    }
    $159 = HEAP32[129] | 0; //@line 28334
    $160 = HEAP32[122] | 0; //@line 28335
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 28336
    FUNCTION_TABLE_vi[$159 & 511]($160); //@line 28337
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 28340
     sp = STACKTOP; //@line 28341
     return;
    }
    ___async_unwind = 0; //@line 28344
    HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 28345
    sp = STACKTOP; //@line 28346
    return;
   }
  }
 } while (0);
 $161 = HEAP32[132] | 0; //@line 28351
 if (!$161) {
  return;
 }
 $163 = HEAP32[133] | 0; //@line 28356
 HEAP32[133] = 0; //@line 28357
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 28358
 FUNCTION_TABLE_v[$161 & 7](); //@line 28359
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 28362
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 28363
  HEAP32[$164 >> 2] = $163; //@line 28364
  sp = STACKTOP; //@line 28365
  return;
 }
 ___async_unwind = 0; //@line 28368
 HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 28369
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 28370
 HEAP32[$164 >> 2] = $163; //@line 28371
 sp = STACKTOP; //@line 28372
 return;
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 22397
 $3 = HEAP32[2545] | 0; //@line 22398
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 22401
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 22405
 $7 = $6 & 3; //@line 22406
 if (($7 | 0) == 1) {
  _abort(); //@line 22409
 }
 $9 = $6 & -8; //@line 22412
 $10 = $2 + $9 | 0; //@line 22413
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 22418
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 22424
   $17 = $13 + $9 | 0; //@line 22425
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 22428
   }
   if ((HEAP32[2546] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 22434
    $106 = HEAP32[$105 >> 2] | 0; //@line 22435
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 22439
     $$1382 = $17; //@line 22439
     $114 = $16; //@line 22439
     break;
    }
    HEAP32[2543] = $17; //@line 22442
    HEAP32[$105 >> 2] = $106 & -2; //@line 22444
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 22447
    HEAP32[$16 + $17 >> 2] = $17; //@line 22449
    return;
   }
   $21 = $13 >>> 3; //@line 22452
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 22456
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 22458
    $28 = 10204 + ($21 << 1 << 2) | 0; //@line 22460
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 22465
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 22472
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[2541] = HEAP32[2541] & ~(1 << $21); //@line 22482
     $$1 = $16; //@line 22483
     $$1382 = $17; //@line 22483
     $114 = $16; //@line 22483
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 22489
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 22493
     }
     $41 = $26 + 8 | 0; //@line 22496
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 22500
     } else {
      _abort(); //@line 22502
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 22507
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 22508
    $$1 = $16; //@line 22509
    $$1382 = $17; //@line 22509
    $114 = $16; //@line 22509
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 22513
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 22515
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 22519
     $60 = $59 + 4 | 0; //@line 22520
     $61 = HEAP32[$60 >> 2] | 0; //@line 22521
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 22524
      if (!$63) {
       $$3 = 0; //@line 22527
       break;
      } else {
       $$1387 = $63; //@line 22530
       $$1390 = $59; //@line 22530
      }
     } else {
      $$1387 = $61; //@line 22533
      $$1390 = $60; //@line 22533
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 22536
      $66 = HEAP32[$65 >> 2] | 0; //@line 22537
      if ($66 | 0) {
       $$1387 = $66; //@line 22540
       $$1390 = $65; //@line 22540
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 22543
      $69 = HEAP32[$68 >> 2] | 0; //@line 22544
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 22549
       $$1390 = $68; //@line 22549
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 22554
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 22557
      $$3 = $$1387; //@line 22558
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 22563
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 22566
     }
     $53 = $51 + 12 | 0; //@line 22569
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 22573
     }
     $56 = $48 + 8 | 0; //@line 22576
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 22580
      HEAP32[$56 >> 2] = $51; //@line 22581
      $$3 = $48; //@line 22582
      break;
     } else {
      _abort(); //@line 22585
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 22592
    $$1382 = $17; //@line 22592
    $114 = $16; //@line 22592
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 22595
    $75 = 10468 + ($74 << 2) | 0; //@line 22596
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 22601
      if (!$$3) {
       HEAP32[2542] = HEAP32[2542] & ~(1 << $74); //@line 22608
       $$1 = $16; //@line 22609
       $$1382 = $17; //@line 22609
       $114 = $16; //@line 22609
       break L10;
      }
     } else {
      if ((HEAP32[2545] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 22616
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 22624
       if (!$$3) {
        $$1 = $16; //@line 22627
        $$1382 = $17; //@line 22627
        $114 = $16; //@line 22627
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[2545] | 0; //@line 22635
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 22638
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 22642
    $92 = $16 + 16 | 0; //@line 22643
    $93 = HEAP32[$92 >> 2] | 0; //@line 22644
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 22650
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 22654
       HEAP32[$93 + 24 >> 2] = $$3; //@line 22656
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 22662
    if (!$99) {
     $$1 = $16; //@line 22665
     $$1382 = $17; //@line 22665
     $114 = $16; //@line 22665
    } else {
     if ((HEAP32[2545] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 22670
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 22674
      HEAP32[$99 + 24 >> 2] = $$3; //@line 22676
      $$1 = $16; //@line 22677
      $$1382 = $17; //@line 22677
      $114 = $16; //@line 22677
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 22683
   $$1382 = $9; //@line 22683
   $114 = $2; //@line 22683
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 22688
 }
 $115 = $10 + 4 | 0; //@line 22691
 $116 = HEAP32[$115 >> 2] | 0; //@line 22692
 if (!($116 & 1)) {
  _abort(); //@line 22696
 }
 if (!($116 & 2)) {
  if ((HEAP32[2547] | 0) == ($10 | 0)) {
   $124 = (HEAP32[2544] | 0) + $$1382 | 0; //@line 22706
   HEAP32[2544] = $124; //@line 22707
   HEAP32[2547] = $$1; //@line 22708
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 22711
   if (($$1 | 0) != (HEAP32[2546] | 0)) {
    return;
   }
   HEAP32[2546] = 0; //@line 22717
   HEAP32[2543] = 0; //@line 22718
   return;
  }
  if ((HEAP32[2546] | 0) == ($10 | 0)) {
   $132 = (HEAP32[2543] | 0) + $$1382 | 0; //@line 22725
   HEAP32[2543] = $132; //@line 22726
   HEAP32[2546] = $114; //@line 22727
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 22730
   HEAP32[$114 + $132 >> 2] = $132; //@line 22732
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 22736
  $138 = $116 >>> 3; //@line 22737
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 22742
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 22744
    $145 = 10204 + ($138 << 1 << 2) | 0; //@line 22746
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[2545] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 22752
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 22759
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[2541] = HEAP32[2541] & ~(1 << $138); //@line 22769
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 22775
    } else {
     if ((HEAP32[2545] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 22780
     }
     $160 = $143 + 8 | 0; //@line 22783
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 22787
     } else {
      _abort(); //@line 22789
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 22794
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 22795
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 22798
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 22800
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 22804
      $180 = $179 + 4 | 0; //@line 22805
      $181 = HEAP32[$180 >> 2] | 0; //@line 22806
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 22809
       if (!$183) {
        $$3400 = 0; //@line 22812
        break;
       } else {
        $$1398 = $183; //@line 22815
        $$1402 = $179; //@line 22815
       }
      } else {
       $$1398 = $181; //@line 22818
       $$1402 = $180; //@line 22818
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 22821
       $186 = HEAP32[$185 >> 2] | 0; //@line 22822
       if ($186 | 0) {
        $$1398 = $186; //@line 22825
        $$1402 = $185; //@line 22825
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 22828
       $189 = HEAP32[$188 >> 2] | 0; //@line 22829
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 22834
        $$1402 = $188; //@line 22834
       }
      }
      if ((HEAP32[2545] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 22840
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 22843
       $$3400 = $$1398; //@line 22844
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 22849
      if ((HEAP32[2545] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 22853
      }
      $173 = $170 + 12 | 0; //@line 22856
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 22860
      }
      $176 = $167 + 8 | 0; //@line 22863
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 22867
       HEAP32[$176 >> 2] = $170; //@line 22868
       $$3400 = $167; //@line 22869
       break;
      } else {
       _abort(); //@line 22872
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 22880
     $196 = 10468 + ($195 << 2) | 0; //@line 22881
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 22886
       if (!$$3400) {
        HEAP32[2542] = HEAP32[2542] & ~(1 << $195); //@line 22893
        break L108;
       }
      } else {
       if ((HEAP32[2545] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 22900
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 22908
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[2545] | 0; //@line 22918
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 22921
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 22925
     $213 = $10 + 16 | 0; //@line 22926
     $214 = HEAP32[$213 >> 2] | 0; //@line 22927
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 22933
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 22937
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 22939
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 22945
     if ($220 | 0) {
      if ((HEAP32[2545] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 22951
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 22955
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 22957
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 22966
  HEAP32[$114 + $137 >> 2] = $137; //@line 22968
  if (($$1 | 0) == (HEAP32[2546] | 0)) {
   HEAP32[2543] = $137; //@line 22972
   return;
  } else {
   $$2 = $137; //@line 22975
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 22979
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 22982
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 22984
  $$2 = $$1382; //@line 22985
 }
 $235 = $$2 >>> 3; //@line 22987
 if ($$2 >>> 0 < 256) {
  $238 = 10204 + ($235 << 1 << 2) | 0; //@line 22991
  $239 = HEAP32[2541] | 0; //@line 22992
  $240 = 1 << $235; //@line 22993
  if (!($239 & $240)) {
   HEAP32[2541] = $239 | $240; //@line 22998
   $$0403 = $238; //@line 23000
   $$pre$phiZ2D = $238 + 8 | 0; //@line 23000
  } else {
   $244 = $238 + 8 | 0; //@line 23002
   $245 = HEAP32[$244 >> 2] | 0; //@line 23003
   if ((HEAP32[2545] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 23007
   } else {
    $$0403 = $245; //@line 23010
    $$pre$phiZ2D = $244; //@line 23010
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 23013
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 23015
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 23017
  HEAP32[$$1 + 12 >> 2] = $238; //@line 23019
  return;
 }
 $251 = $$2 >>> 8; //@line 23022
 if (!$251) {
  $$0396 = 0; //@line 23025
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 23029
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 23033
   $257 = $251 << $256; //@line 23034
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 23037
   $262 = $257 << $260; //@line 23039
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 23042
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 23047
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 23053
  }
 }
 $276 = 10468 + ($$0396 << 2) | 0; //@line 23056
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 23058
 HEAP32[$$1 + 20 >> 2] = 0; //@line 23061
 HEAP32[$$1 + 16 >> 2] = 0; //@line 23062
 $280 = HEAP32[2542] | 0; //@line 23063
 $281 = 1 << $$0396; //@line 23064
 do {
  if (!($280 & $281)) {
   HEAP32[2542] = $280 | $281; //@line 23070
   HEAP32[$276 >> 2] = $$1; //@line 23071
   HEAP32[$$1 + 24 >> 2] = $276; //@line 23073
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 23075
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 23077
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 23085
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 23085
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 23092
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 23096
    $301 = HEAP32[$299 >> 2] | 0; //@line 23098
    if (!$301) {
     label = 121; //@line 23101
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 23104
     $$0384 = $301; //@line 23104
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[2545] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 23111
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 23114
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 23116
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 23118
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 23120
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 23125
    $309 = HEAP32[$308 >> 2] | 0; //@line 23126
    $310 = HEAP32[2545] | 0; //@line 23127
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 23133
     HEAP32[$308 >> 2] = $$1; //@line 23134
     HEAP32[$$1 + 8 >> 2] = $309; //@line 23136
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 23138
     HEAP32[$$1 + 24 >> 2] = 0; //@line 23140
     break;
    } else {
     _abort(); //@line 23143
    }
   }
  }
 } while (0);
 $319 = (HEAP32[2549] | 0) + -1 | 0; //@line 23150
 HEAP32[2549] = $319; //@line 23151
 if (!$319) {
  $$0212$in$i = 10620; //@line 23154
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 23159
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 23165
  }
 }
 HEAP32[2549] = -1; //@line 23168
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$048$i = 0, $$090 = 0, $$170 = 0, $$191 = 0, $$2 = 0, $$289$ph101 = 0, $$292 = 0, $$3 = 0, $$393 = 0, $$4$ph = 0, $$498 = 0, $$byval_copy29 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $126 = 0, $127 = 0, $14 = 0, $156 = 0, $158 = 0, $168 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $75 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12522
 STACKTOP = STACKTOP + 176 | 0; //@line 12523
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 12523
 $$byval_copy29 = sp + 144 | 0; //@line 12524
 $5 = sp + 88 | 0; //@line 12525
 $6 = sp; //@line 12526
 $7 = sp + 64 | 0; //@line 12527
 if (!$1) {
  $$3 = -3003; //@line 12530
  STACKTOP = sp; //@line 12531
  return $$3 | 0; //@line 12531
 }
 $9 = _strlen($1) | 0; //@line 12533
 if (($9 | 0) > 255 | ($9 | 0) == 0) {
  $$3 = -3003; //@line 12538
  STACKTOP = sp; //@line 12539
  return $$3 | 0; //@line 12539
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $4, $2) | 0)) {
  $$3 = 1; //@line 12544
  STACKTOP = sp; //@line 12545
  return $$3 | 0; //@line 12545
 }
 __ZN9UDPSocketC2Ev($5); //@line 12547
 $AsyncCtx21 = _emscripten_alloc_async_context(48, sp) | 0; //@line 12548
 $14 = __ZN6Socket4openEP12NetworkStack($5, $0) | 0; //@line 12549
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 154; //@line 12552
  HEAP32[$AsyncCtx21 + 4 >> 2] = $6; //@line 12554
  HEAP32[$AsyncCtx21 + 8 >> 2] = $7; //@line 12556
  HEAP32[$AsyncCtx21 + 12 >> 2] = $1; //@line 12558
  HEAP32[$AsyncCtx21 + 16 >> 2] = $5; //@line 12560
  HEAP32[$AsyncCtx21 + 20 >> 2] = $0; //@line 12562
  HEAP32[$AsyncCtx21 + 24 >> 2] = $$byval_copy29; //@line 12564
  HEAP32[$AsyncCtx21 + 28 >> 2] = $2; //@line 12566
  HEAP32[$AsyncCtx21 + 32 >> 2] = $3; //@line 12568
  HEAP32[$AsyncCtx21 + 36 >> 2] = $5; //@line 12570
  HEAP32[$AsyncCtx21 + 40 >> 2] = $5; //@line 12572
  HEAP32[$AsyncCtx21 + 44 >> 2] = $4; //@line 12574
  sp = STACKTOP; //@line 12575
  STACKTOP = sp; //@line 12576
  return 0; //@line 12576
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 12578
 do {
  if (!$14) {
   __ZN6Socket11set_timeoutEi($5, 5e3); //@line 12582
   $27 = _malloc(512) | 0; //@line 12583
   if (!$27) {
    $$2 = -3007; //@line 12586
   } else {
    $29 = $27; //@line 12588
    $30 = $27 + 1 | 0; //@line 12589
    $31 = $27 + 2 | 0; //@line 12590
    $32 = $27 + 3 | 0; //@line 12591
    $33 = $27 + 4 | 0; //@line 12592
    $34 = $27 + 5 | 0; //@line 12593
    $35 = $27 + 6 | 0; //@line 12594
    $36 = $27 + 12 | 0; //@line 12595
    $$sink$i = ($4 | 0) == 2 ? 28 : 1; //@line 12597
    $$0 = 3; //@line 12598
    $$090 = 0; //@line 12598
    while (1) {
     HEAP32[$7 >> 2] = 0; //@line 12600
     HEAP32[$7 + 4 >> 2] = 0; //@line 12600
     HEAP32[$7 + 8 >> 2] = 0; //@line 12600
     HEAP32[$7 + 12 >> 2] = 0; //@line 12600
     HEAP32[$7 + 16 >> 2] = 0; //@line 12600
     HEAP32[$$byval_copy29 >> 2] = HEAP32[$7 >> 2]; //@line 12601
     HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 12601
     HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 12601
     HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 12601
     HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 12601
     __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy29, 0); //@line 12602
     if (!($$0 << 24 >> 24)) {
      $$4$ph = -3009; //@line 12605
      label = 31; //@line 12606
      break;
     }
     if (($$090 & 255) > 9) {
      $$191 = 0; //@line 12611
      label = 12; //@line 12612
     } else {
      if (($$090 & 255) < 5) {
       $$191 = $$090; //@line 12616
       label = 12; //@line 12617
      } else {
       $$292 = $$090; //@line 12619
       label = 15; //@line 12620
      }
     }
     if ((label | 0) == 12) {
      label = 0; //@line 12624
      $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0; //@line 12628
      $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 12629
      $45 = FUNCTION_TABLE_iiii[$44 & 31]($0, $$191 & 255, $6) | 0; //@line 12630
      if (___async) {
       label = 13; //@line 12633
       break;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12636
      if (($45 | 0) < 0) {
       $$292 = 5; //@line 12639
       label = 15; //@line 12640
      } else {
       $$393 = $$191; //@line 12642
      }
     }
     if ((label | 0) == 15) {
      label = 0; //@line 12646
      $75 = 608 + ((($$292 & 255) + -5 | 0) * 20 | 0) | 0; //@line 12649
      HEAP32[$$byval_copy29 >> 2] = HEAP32[$75 >> 2]; //@line 12650
      HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$75 + 4 >> 2]; //@line 12650
      HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$75 + 8 >> 2]; //@line 12650
      HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$75 + 12 >> 2]; //@line 12650
      HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$75 + 16 >> 2]; //@line 12650
      __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy29); //@line 12651
      $$393 = $$292; //@line 12652
     }
     __ZN13SocketAddress8set_portEt($6, 53); //@line 12654
     HEAP8[$27 >> 0] = 0; //@line 12655
     HEAP8[$30 >> 0] = 1; //@line 12656
     HEAP8[$31 >> 0] = 1; //@line 12657
     HEAP8[$32 >> 0] = 0; //@line 12658
     HEAP8[$33 >> 0] = 0; //@line 12659
     HEAP8[$34 >> 0] = 1; //@line 12660
     HEAP8[$35 >> 0] = 0; //@line 12661
     HEAP8[$35 + 1 >> 0] = 0; //@line 12661
     HEAP8[$35 + 2 >> 0] = 0; //@line 12661
     HEAP8[$35 + 3 >> 0] = 0; //@line 12661
     HEAP8[$35 + 4 >> 0] = 0; //@line 12661
     HEAP8[$35 + 5 >> 0] = 0; //@line 12661
     if (!(HEAP8[$1 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $36; //@line 12665
     } else {
      $$048$i = $1; //@line 12667
      $$sroa$0$0$in47$i = $36; //@line 12667
      while (1) {
       $78 = _strcspn($$048$i, 7347) | 0; //@line 12669
       $80 = $$sroa$0$0$in47$i + 1 | 0; //@line 12671
       HEAP8[$$sroa$0$0$in47$i >> 0] = $78; //@line 12672
       $81 = $78 & 255; //@line 12673
       _memcpy($80 | 0, $$048$i | 0, $81 | 0) | 0; //@line 12674
       $82 = $80 + $81 | 0; //@line 12675
       $$048$i = $$048$i + ($78 + ((HEAP8[$$048$i + $78 >> 0] | 0) == 46 & 1)) | 0; //@line 12681
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $82; //@line 12685
        break;
       } else {
        $$sroa$0$0$in47$i = $82; //@line 12688
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 12693
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 12695
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 12697
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 12699
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 12702
     $AsyncCtx9 = _emscripten_alloc_async_context(104, sp) | 0; //@line 12704
     $98 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $27, $$sroa$0$0$in$lcssa$i + 5 - $29 | 0) | 0; //@line 12705
     if (___async) {
      label = 19; //@line 12708
      break;
     }
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12711
     if (($98 | 0) < 0) {
      $$289$ph101 = $$0; //@line 12714
     } else {
      $126 = $$0 + -1 << 24 >> 24; //@line 12716
      $AsyncCtx6 = _emscripten_alloc_async_context(104, sp) | 0; //@line 12717
      $127 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $27, 512) | 0; //@line 12718
      if (___async) {
       label = 22; //@line 12721
       break;
      }
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12724
      if (($127 | 0) == -3001) {
       $$289$ph101 = $126; //@line 12727
      } else {
       if (($127 | 0) < 0) {
        $$4$ph = $127; //@line 12731
        label = 31; //@line 12732
        break;
       }
       $156 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($27, 1, $$byval_copy29, $2, $3) | 0; //@line 12735
       if (($156 | 0) > 0) {
        label = 26; //@line 12738
        break;
       }
       if (($156 | 0) >= 0) {
        $$170 = -3009; //@line 12743
        label = 30; //@line 12744
        break;
       }
       $$0 = $126; //@line 12747
       $$090 = $$393; //@line 12747
       continue;
      }
     }
     $$0 = $$289$ph101; //@line 12752
     $$090 = $$393 + 1 << 24 >> 24; //@line 12752
    }
    do {
     if ((label | 0) == 13) {
      HEAP32[$AsyncCtx >> 2] = 155; //@line 12756
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 12758
      HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 12760
      HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 12762
      HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 12764
      HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 12766
      HEAP32[$AsyncCtx + 24 >> 2] = $36; //@line 12768
      HEAP32[$AsyncCtx + 28 >> 2] = $5; //@line 12770
      HEAP8[$AsyncCtx + 32 >> 0] = $$191; //@line 12772
      HEAP32[$AsyncCtx + 36 >> 2] = $27; //@line 12774
      HEAP32[$AsyncCtx + 40 >> 2] = $30; //@line 12776
      HEAP32[$AsyncCtx + 44 >> 2] = $31; //@line 12778
      HEAP32[$AsyncCtx + 48 >> 2] = $32; //@line 12780
      HEAP32[$AsyncCtx + 52 >> 2] = $33; //@line 12782
      HEAP32[$AsyncCtx + 56 >> 2] = $34; //@line 12784
      HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 12786
      HEAP32[$AsyncCtx + 64 >> 2] = $0; //@line 12788
      HEAP32[$AsyncCtx + 68 >> 2] = $0; //@line 12790
      HEAP32[$AsyncCtx + 72 >> 2] = $$byval_copy29; //@line 12792
      HEAP32[$AsyncCtx + 76 >> 2] = $2; //@line 12794
      HEAP32[$AsyncCtx + 80 >> 2] = $$byval_copy29; //@line 12796
      HEAP32[$AsyncCtx + 84 >> 2] = $3; //@line 12798
      HEAP8[$AsyncCtx + 88 >> 0] = $$0; //@line 12800
      HEAP8[$AsyncCtx + 89 >> 0] = $$sink$i; //@line 12802
      HEAP32[$AsyncCtx + 92 >> 2] = $29; //@line 12804
      HEAP32[$AsyncCtx + 96 >> 2] = $5; //@line 12806
      HEAP32[$AsyncCtx + 100 >> 2] = $5; //@line 12808
      sp = STACKTOP; //@line 12809
      STACKTOP = sp; //@line 12810
      return 0; //@line 12810
     } else if ((label | 0) == 19) {
      HEAP32[$AsyncCtx9 >> 2] = 156; //@line 12813
      HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 12815
      HEAP32[$AsyncCtx9 + 8 >> 2] = $7; //@line 12817
      HEAP32[$AsyncCtx9 + 12 >> 2] = $6; //@line 12819
      HEAP32[$AsyncCtx9 + 16 >> 2] = $7; //@line 12821
      HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 12823
      HEAP32[$AsyncCtx9 + 24 >> 2] = $36; //@line 12825
      HEAP32[$AsyncCtx9 + 28 >> 2] = $5; //@line 12827
      HEAP32[$AsyncCtx9 + 32 >> 2] = $27; //@line 12829
      HEAP32[$AsyncCtx9 + 36 >> 2] = $30; //@line 12831
      HEAP32[$AsyncCtx9 + 40 >> 2] = $31; //@line 12833
      HEAP32[$AsyncCtx9 + 44 >> 2] = $32; //@line 12835
      HEAP32[$AsyncCtx9 + 48 >> 2] = $33; //@line 12837
      HEAP32[$AsyncCtx9 + 52 >> 2] = $34; //@line 12839
      HEAP32[$AsyncCtx9 + 56 >> 2] = $35; //@line 12841
      HEAP32[$AsyncCtx9 + 60 >> 2] = $0; //@line 12843
      HEAP32[$AsyncCtx9 + 64 >> 2] = $0; //@line 12845
      HEAP32[$AsyncCtx9 + 68 >> 2] = $$byval_copy29; //@line 12847
      HEAP32[$AsyncCtx9 + 72 >> 2] = $2; //@line 12849
      HEAP32[$AsyncCtx9 + 76 >> 2] = $$byval_copy29; //@line 12851
      HEAP32[$AsyncCtx9 + 80 >> 2] = $3; //@line 12853
      HEAP8[$AsyncCtx9 + 84 >> 0] = $$sink$i; //@line 12855
      HEAP32[$AsyncCtx9 + 88 >> 2] = $29; //@line 12857
      HEAP32[$AsyncCtx9 + 92 >> 2] = $5; //@line 12859
      HEAP32[$AsyncCtx9 + 96 >> 2] = $5; //@line 12861
      HEAP8[$AsyncCtx9 + 100 >> 0] = $$393; //@line 12863
      HEAP8[$AsyncCtx9 + 101 >> 0] = $$0; //@line 12865
      sp = STACKTOP; //@line 12866
      STACKTOP = sp; //@line 12867
      return 0; //@line 12867
     } else if ((label | 0) == 22) {
      HEAP32[$AsyncCtx6 >> 2] = 157; //@line 12870
      HEAP32[$AsyncCtx6 + 4 >> 2] = $6; //@line 12872
      HEAP32[$AsyncCtx6 + 8 >> 2] = $7; //@line 12874
      HEAP32[$AsyncCtx6 + 12 >> 2] = $6; //@line 12876
      HEAP32[$AsyncCtx6 + 16 >> 2] = $7; //@line 12878
      HEAP32[$AsyncCtx6 + 20 >> 2] = $1; //@line 12880
      HEAP32[$AsyncCtx6 + 24 >> 2] = $36; //@line 12882
      HEAP32[$AsyncCtx6 + 28 >> 2] = $5; //@line 12884
      HEAP32[$AsyncCtx6 + 32 >> 2] = $27; //@line 12886
      HEAP32[$AsyncCtx6 + 36 >> 2] = $30; //@line 12888
      HEAP32[$AsyncCtx6 + 40 >> 2] = $31; //@line 12890
      HEAP32[$AsyncCtx6 + 44 >> 2] = $32; //@line 12892
      HEAP32[$AsyncCtx6 + 48 >> 2] = $33; //@line 12894
      HEAP32[$AsyncCtx6 + 52 >> 2] = $34; //@line 12896
      HEAP32[$AsyncCtx6 + 56 >> 2] = $35; //@line 12898
      HEAP32[$AsyncCtx6 + 60 >> 2] = $0; //@line 12900
      HEAP32[$AsyncCtx6 + 64 >> 2] = $0; //@line 12902
      HEAP32[$AsyncCtx6 + 68 >> 2] = $$byval_copy29; //@line 12904
      HEAP32[$AsyncCtx6 + 72 >> 2] = $2; //@line 12906
      HEAP32[$AsyncCtx6 + 76 >> 2] = $$byval_copy29; //@line 12908
      HEAP32[$AsyncCtx6 + 80 >> 2] = $3; //@line 12910
      HEAP8[$AsyncCtx6 + 84 >> 0] = $$sink$i; //@line 12912
      HEAP32[$AsyncCtx6 + 88 >> 2] = $29; //@line 12914
      HEAP32[$AsyncCtx6 + 92 >> 2] = $5; //@line 12916
      HEAP32[$AsyncCtx6 + 96 >> 2] = $5; //@line 12918
      HEAP8[$AsyncCtx6 + 100 >> 0] = $$393; //@line 12920
      HEAP8[$AsyncCtx6 + 101 >> 0] = $126; //@line 12922
      sp = STACKTOP; //@line 12923
      STACKTOP = sp; //@line 12924
      return 0; //@line 12924
     } else if ((label | 0) == 26) {
      $158 = HEAP32[$$byval_copy29 >> 2] | 0; //@line 12927
      $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 12928
      __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($1, $2, $158); //@line 12929
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 158; //@line 12932
       HEAP32[$AsyncCtx2 + 4 >> 2] = $156; //@line 12934
       HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy29; //@line 12936
       HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 12938
       HEAP32[$AsyncCtx2 + 16 >> 2] = $27; //@line 12940
       HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 12942
       HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 12944
       HEAP32[$AsyncCtx2 + 28 >> 2] = $5; //@line 12946
       sp = STACKTOP; //@line 12947
       STACKTOP = sp; //@line 12948
       return 0; //@line 12948
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12950
       $$170 = $156; //@line 12951
       label = 30; //@line 12952
       break;
      }
     } else if ((label | 0) == 31) {
      $$498 = $$4$ph; //@line 12957
     }
    } while (0);
    if ((label | 0) == 30) {
     $$498 = $$170; //@line 12961
    }
    _free($27); //@line 12963
    $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12964
    $168 = __ZN6Socket5closeEv($5) | 0; //@line 12965
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 159; //@line 12968
     HEAP32[$AsyncCtx17 + 4 >> 2] = $$498; //@line 12970
     HEAP32[$AsyncCtx17 + 8 >> 2] = $5; //@line 12972
     HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 12974
     sp = STACKTOP; //@line 12975
     STACKTOP = sp; //@line 12976
     return 0; //@line 12976
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 12978
     $$2 = ($168 | 0) == 0 ? $$498 : $168; //@line 12981
     break;
    }
   }
  } else {
   $$2 = $14; //@line 12986
  }
 } while (0);
 $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12989
 __ZN9UDPSocketD2Ev($5); //@line 12990
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 160; //@line 12993
  HEAP32[$AsyncCtx13 + 4 >> 2] = $5; //@line 12995
  HEAP32[$AsyncCtx13 + 8 >> 2] = $$2; //@line 12997
  sp = STACKTOP; //@line 12998
  STACKTOP = sp; //@line 12999
  return 0; //@line 12999
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13001
 $$3 = $$2; //@line 13002
 STACKTOP = sp; //@line 13003
 return $$3 | 0; //@line 13003
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 23700
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 23702
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 23707
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 23714
   $12 = $7 + $1 | 0; //@line 23715
   $13 = HEAP32[2545] | 0; //@line 23716
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 23719
   }
   if ((HEAP32[2546] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 23725
    $102 = HEAP32[$101 >> 2] | 0; //@line 23726
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 23730
     $$1418 = $12; //@line 23730
     break;
    }
    HEAP32[2543] = $12; //@line 23733
    HEAP32[$101 >> 2] = $102 & -2; //@line 23735
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 23738
    HEAP32[$2 >> 2] = $12; //@line 23739
    return;
   }
   $17 = $7 >>> 3; //@line 23742
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 23746
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 23748
    $24 = 10204 + ($17 << 1 << 2) | 0; //@line 23750
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 23755
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 23762
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[2541] = HEAP32[2541] & ~(1 << $17); //@line 23772
     $$1 = $11; //@line 23773
     $$1418 = $12; //@line 23773
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 23779
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 23783
     }
     $37 = $22 + 8 | 0; //@line 23786
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 23790
     } else {
      _abort(); //@line 23792
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 23797
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 23798
    $$1 = $11; //@line 23799
    $$1418 = $12; //@line 23799
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 23803
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 23805
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 23809
     $56 = $55 + 4 | 0; //@line 23810
     $57 = HEAP32[$56 >> 2] | 0; //@line 23811
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 23814
      if (!$59) {
       $$3 = 0; //@line 23817
       break;
      } else {
       $$1426 = $59; //@line 23820
       $$1429 = $55; //@line 23820
      }
     } else {
      $$1426 = $57; //@line 23823
      $$1429 = $56; //@line 23823
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 23826
      $62 = HEAP32[$61 >> 2] | 0; //@line 23827
      if ($62 | 0) {
       $$1426 = $62; //@line 23830
       $$1429 = $61; //@line 23830
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 23833
      $65 = HEAP32[$64 >> 2] | 0; //@line 23834
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 23839
       $$1429 = $64; //@line 23839
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 23844
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 23847
      $$3 = $$1426; //@line 23848
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 23853
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 23856
     }
     $49 = $47 + 12 | 0; //@line 23859
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 23863
     }
     $52 = $44 + 8 | 0; //@line 23866
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 23870
      HEAP32[$52 >> 2] = $47; //@line 23871
      $$3 = $44; //@line 23872
      break;
     } else {
      _abort(); //@line 23875
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 23882
    $$1418 = $12; //@line 23882
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 23885
    $71 = 10468 + ($70 << 2) | 0; //@line 23886
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 23891
      if (!$$3) {
       HEAP32[2542] = HEAP32[2542] & ~(1 << $70); //@line 23898
       $$1 = $11; //@line 23899
       $$1418 = $12; //@line 23899
       break L1;
      }
     } else {
      if ((HEAP32[2545] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 23906
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 23914
       if (!$$3) {
        $$1 = $11; //@line 23917
        $$1418 = $12; //@line 23917
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[2545] | 0; //@line 23925
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 23928
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 23932
    $88 = $11 + 16 | 0; //@line 23933
    $89 = HEAP32[$88 >> 2] | 0; //@line 23934
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 23940
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 23944
       HEAP32[$89 + 24 >> 2] = $$3; //@line 23946
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 23952
    if (!$95) {
     $$1 = $11; //@line 23955
     $$1418 = $12; //@line 23955
    } else {
     if ((HEAP32[2545] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 23960
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 23964
      HEAP32[$95 + 24 >> 2] = $$3; //@line 23966
      $$1 = $11; //@line 23967
      $$1418 = $12; //@line 23967
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 23973
   $$1418 = $1; //@line 23973
  }
 } while (0);
 $108 = HEAP32[2545] | 0; //@line 23976
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 23979
 }
 $110 = $2 + 4 | 0; //@line 23982
 $111 = HEAP32[$110 >> 2] | 0; //@line 23983
 if (!($111 & 2)) {
  if ((HEAP32[2547] | 0) == ($2 | 0)) {
   $117 = (HEAP32[2544] | 0) + $$1418 | 0; //@line 23991
   HEAP32[2544] = $117; //@line 23992
   HEAP32[2547] = $$1; //@line 23993
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 23996
   if (($$1 | 0) != (HEAP32[2546] | 0)) {
    return;
   }
   HEAP32[2546] = 0; //@line 24002
   HEAP32[2543] = 0; //@line 24003
   return;
  }
  if ((HEAP32[2546] | 0) == ($2 | 0)) {
   $125 = (HEAP32[2543] | 0) + $$1418 | 0; //@line 24010
   HEAP32[2543] = $125; //@line 24011
   HEAP32[2546] = $$1; //@line 24012
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 24015
   HEAP32[$$1 + $125 >> 2] = $125; //@line 24017
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 24021
  $131 = $111 >>> 3; //@line 24022
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 24027
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 24029
    $138 = 10204 + ($131 << 1 << 2) | 0; //@line 24031
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 24036
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 24043
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[2541] = HEAP32[2541] & ~(1 << $131); //@line 24053
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 24059
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 24063
     }
     $151 = $136 + 8 | 0; //@line 24066
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 24070
     } else {
      _abort(); //@line 24072
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 24077
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 24078
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 24081
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 24083
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 24087
      $170 = $169 + 4 | 0; //@line 24088
      $171 = HEAP32[$170 >> 2] | 0; //@line 24089
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 24092
       if (!$173) {
        $$3435 = 0; //@line 24095
        break;
       } else {
        $$1433 = $173; //@line 24098
        $$1437 = $169; //@line 24098
       }
      } else {
       $$1433 = $171; //@line 24101
       $$1437 = $170; //@line 24101
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 24104
       $176 = HEAP32[$175 >> 2] | 0; //@line 24105
       if ($176 | 0) {
        $$1433 = $176; //@line 24108
        $$1437 = $175; //@line 24108
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 24111
       $179 = HEAP32[$178 >> 2] | 0; //@line 24112
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 24117
        $$1437 = $178; //@line 24117
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 24122
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 24125
       $$3435 = $$1433; //@line 24126
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 24131
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 24134
      }
      $163 = $161 + 12 | 0; //@line 24137
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 24141
      }
      $166 = $158 + 8 | 0; //@line 24144
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 24148
       HEAP32[$166 >> 2] = $161; //@line 24149
       $$3435 = $158; //@line 24150
       break;
      } else {
       _abort(); //@line 24153
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 24161
     $185 = 10468 + ($184 << 2) | 0; //@line 24162
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 24167
       if (!$$3435) {
        HEAP32[2542] = HEAP32[2542] & ~(1 << $184); //@line 24174
        break L96;
       }
      } else {
       if ((HEAP32[2545] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 24181
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 24189
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[2545] | 0; //@line 24199
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 24202
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 24206
     $202 = $2 + 16 | 0; //@line 24207
     $203 = HEAP32[$202 >> 2] | 0; //@line 24208
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 24214
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 24218
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 24220
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 24226
     if ($209 | 0) {
      if ((HEAP32[2545] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 24232
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 24236
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 24238
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 24247
  HEAP32[$$1 + $130 >> 2] = $130; //@line 24249
  if (($$1 | 0) == (HEAP32[2546] | 0)) {
   HEAP32[2543] = $130; //@line 24253
   return;
  } else {
   $$2 = $130; //@line 24256
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 24260
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 24263
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 24265
  $$2 = $$1418; //@line 24266
 }
 $224 = $$2 >>> 3; //@line 24268
 if ($$2 >>> 0 < 256) {
  $227 = 10204 + ($224 << 1 << 2) | 0; //@line 24272
  $228 = HEAP32[2541] | 0; //@line 24273
  $229 = 1 << $224; //@line 24274
  if (!($228 & $229)) {
   HEAP32[2541] = $228 | $229; //@line 24279
   $$0438 = $227; //@line 24281
   $$pre$phiZ2D = $227 + 8 | 0; //@line 24281
  } else {
   $233 = $227 + 8 | 0; //@line 24283
   $234 = HEAP32[$233 >> 2] | 0; //@line 24284
   if ((HEAP32[2545] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 24288
   } else {
    $$0438 = $234; //@line 24291
    $$pre$phiZ2D = $233; //@line 24291
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 24294
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 24296
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 24298
  HEAP32[$$1 + 12 >> 2] = $227; //@line 24300
  return;
 }
 $240 = $$2 >>> 8; //@line 24303
 if (!$240) {
  $$0431 = 0; //@line 24306
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 24310
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 24314
   $246 = $240 << $245; //@line 24315
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 24318
   $251 = $246 << $249; //@line 24320
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 24323
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 24328
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 24334
  }
 }
 $265 = 10468 + ($$0431 << 2) | 0; //@line 24337
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 24339
 HEAP32[$$1 + 20 >> 2] = 0; //@line 24342
 HEAP32[$$1 + 16 >> 2] = 0; //@line 24343
 $269 = HEAP32[2542] | 0; //@line 24344
 $270 = 1 << $$0431; //@line 24345
 if (!($269 & $270)) {
  HEAP32[2542] = $269 | $270; //@line 24350
  HEAP32[$265 >> 2] = $$1; //@line 24351
  HEAP32[$$1 + 24 >> 2] = $265; //@line 24353
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 24355
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 24357
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 24366
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 24366
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 24373
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 24377
  $290 = HEAP32[$288 >> 2] | 0; //@line 24379
  if (!$290) {
   label = 118; //@line 24382
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 24385
   $$0420 = $290; //@line 24385
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[2545] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 24392
  }
  HEAP32[$288 >> 2] = $$1; //@line 24395
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 24397
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 24399
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 24401
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 24405
  $298 = HEAP32[$297 >> 2] | 0; //@line 24406
  $299 = HEAP32[2545] | 0; //@line 24407
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 24412
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 24416
  HEAP32[$297 >> 2] = $$1; //@line 24417
  HEAP32[$$1 + 8 >> 2] = $298; //@line 24419
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 24421
  HEAP32[$$1 + 24 >> 2] = 0; //@line 24423
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_79($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $120 = 0, $122 = 0, $130 = 0, $133 = 0, $135 = 0, $14 = 0, $143 = 0, $146 = 0, $148 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $55 = 0, $6 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17101
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17103
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17105
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17107
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17109
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17111
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17113
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17115
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17117
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17119
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17121
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17123
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17125
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17127
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17129
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17131
 $31 = $16 + 12 | 0; //@line 17132
 $32 = HEAP32[$31 >> 2] | 0; //@line 17133
 if ($32 | 0) {
  $35 = HEAP32[$32 + 4 >> 2] | 0; //@line 17137
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 17138
  FUNCTION_TABLE_vii[$35 & 7]($4, $16); //@line 17139
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 17142
   $36 = $ReallocAsyncCtx5 + 4 | 0; //@line 17143
   HEAP32[$36 >> 2] = $2; //@line 17144
   $37 = $ReallocAsyncCtx5 + 8 | 0; //@line 17145
   HEAP32[$37 >> 2] = $4; //@line 17146
   $38 = $ReallocAsyncCtx5 + 12 | 0; //@line 17147
   HEAP32[$38 >> 2] = $6; //@line 17148
   $39 = $ReallocAsyncCtx5 + 16 | 0; //@line 17149
   HEAP32[$39 >> 2] = $8; //@line 17150
   $40 = $ReallocAsyncCtx5 + 20 | 0; //@line 17151
   HEAP32[$40 >> 2] = $10; //@line 17152
   $41 = $ReallocAsyncCtx5 + 24 | 0; //@line 17153
   HEAP32[$41 >> 2] = $12; //@line 17154
   $42 = $ReallocAsyncCtx5 + 28 | 0; //@line 17155
   HEAP32[$42 >> 2] = $14; //@line 17156
   $43 = $ReallocAsyncCtx5 + 32 | 0; //@line 17157
   HEAP32[$43 >> 2] = $18; //@line 17158
   $44 = $ReallocAsyncCtx5 + 36 | 0; //@line 17159
   HEAP32[$44 >> 2] = $20; //@line 17160
   $45 = $ReallocAsyncCtx5 + 40 | 0; //@line 17161
   HEAP32[$45 >> 2] = $22; //@line 17162
   $46 = $ReallocAsyncCtx5 + 44 | 0; //@line 17163
   HEAP32[$46 >> 2] = $24; //@line 17164
   $47 = $ReallocAsyncCtx5 + 48 | 0; //@line 17165
   HEAP32[$47 >> 2] = $26; //@line 17166
   $48 = $ReallocAsyncCtx5 + 52 | 0; //@line 17167
   HEAP32[$48 >> 2] = $31; //@line 17168
   $49 = $ReallocAsyncCtx5 + 56 | 0; //@line 17169
   HEAP32[$49 >> 2] = $28; //@line 17170
   $50 = $ReallocAsyncCtx5 + 60 | 0; //@line 17171
   HEAP32[$50 >> 2] = $30; //@line 17172
   sp = STACKTOP; //@line 17173
   return;
  }
  ___async_unwind = 0; //@line 17176
  HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 17177
  $36 = $ReallocAsyncCtx5 + 4 | 0; //@line 17178
  HEAP32[$36 >> 2] = $2; //@line 17179
  $37 = $ReallocAsyncCtx5 + 8 | 0; //@line 17180
  HEAP32[$37 >> 2] = $4; //@line 17181
  $38 = $ReallocAsyncCtx5 + 12 | 0; //@line 17182
  HEAP32[$38 >> 2] = $6; //@line 17183
  $39 = $ReallocAsyncCtx5 + 16 | 0; //@line 17184
  HEAP32[$39 >> 2] = $8; //@line 17185
  $40 = $ReallocAsyncCtx5 + 20 | 0; //@line 17186
  HEAP32[$40 >> 2] = $10; //@line 17187
  $41 = $ReallocAsyncCtx5 + 24 | 0; //@line 17188
  HEAP32[$41 >> 2] = $12; //@line 17189
  $42 = $ReallocAsyncCtx5 + 28 | 0; //@line 17190
  HEAP32[$42 >> 2] = $14; //@line 17191
  $43 = $ReallocAsyncCtx5 + 32 | 0; //@line 17192
  HEAP32[$43 >> 2] = $18; //@line 17193
  $44 = $ReallocAsyncCtx5 + 36 | 0; //@line 17194
  HEAP32[$44 >> 2] = $20; //@line 17195
  $45 = $ReallocAsyncCtx5 + 40 | 0; //@line 17196
  HEAP32[$45 >> 2] = $22; //@line 17197
  $46 = $ReallocAsyncCtx5 + 44 | 0; //@line 17198
  HEAP32[$46 >> 2] = $24; //@line 17199
  $47 = $ReallocAsyncCtx5 + 48 | 0; //@line 17200
  HEAP32[$47 >> 2] = $26; //@line 17201
  $48 = $ReallocAsyncCtx5 + 52 | 0; //@line 17202
  HEAP32[$48 >> 2] = $31; //@line 17203
  $49 = $ReallocAsyncCtx5 + 56 | 0; //@line 17204
  HEAP32[$49 >> 2] = $28; //@line 17205
  $50 = $ReallocAsyncCtx5 + 60 | 0; //@line 17206
  HEAP32[$50 >> 2] = $30; //@line 17207
  sp = STACKTOP; //@line 17208
  return;
 }
 HEAP32[$26 >> 2] = 0; //@line 17211
 HEAP32[$6 + 8 >> 2] = $14; //@line 17213
 HEAP32[$6 + 48 >> 2] = $22; //@line 17215
 HEAP32[$6 + 52 >> 2] = $24; //@line 17217
 $54 = $6 + 56 | 0; //@line 17218
 HEAP32[$54 >> 2] = 0; //@line 17219
 $55 = $6 + 60 | 0; //@line 17220
 HEAP32[$55 >> 2] = 0; //@line 17221
 HEAP32[$6 + 64 >> 2] = 0; //@line 17223
 HEAP8[$6 + 82 >> 0] = 0; //@line 17225
 HEAP8[$6 + 83 >> 0] = 1; //@line 17227
 HEAP8[$6 + 84 >> 0] = 3; //@line 17229
 HEAP16[$6 + 80 >> 1] = 0; //@line 17231
 HEAP32[$6 + 76 >> 2] = 0; //@line 17233
 $62 = $6 + 72 | 0; //@line 17234
 HEAP32[$62 >> 2] = 15500; //@line 17235
 $63 = HEAP32[177] | 0; //@line 17236
 HEAP32[177] = $63 + 1; //@line 17238
 $$ = ($63 | 0) > 32767 ? 1 : $63; //@line 17240
 HEAP32[$6 >> 2] = $$; //@line 17241
 $66 = HEAP32[2518] | 0; //@line 17242
 if (!$66) {
  $$1 = 0; //@line 17245
  $120 = 0; //@line 17245
 } else {
  $69 = HEAP32[$66 + 56 >> 2] | 0; //@line 17248
  if (!$69) {
   $$1 = 1; //@line 17251
   $120 = 0; //@line 17251
  } else {
   if ((HEAP32[$66 + 8 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$54 >> 2] = $69; //@line 17257
    HEAP32[$55 >> 2] = HEAP32[$66 + 60 >> 2]; //@line 17260
    $$1 = 1; //@line 17261
    $120 = $69; //@line 17261
   } else {
    $$1 = 1; //@line 17263
    $120 = 0; //@line 17263
   }
  }
 }
 $76 = HEAP32[2519] | 0; //@line 17267
 if (!$76) {
  $$1$1 = $$1; //@line 17270
  $133 = $120; //@line 17270
 } else {
  if (!$120) {
   $122 = HEAP32[$76 + 56 >> 2] | 0; //@line 17275
   if (!$122) {
    $175 = 0; //@line 17278
   } else {
    if ((HEAP32[$76 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$54 >> 2] = $122; //@line 17284
     HEAP32[$55 >> 2] = HEAP32[$76 + 60 >> 2]; //@line 17287
     $175 = $122; //@line 17288
    } else {
     $175 = 0; //@line 17290
    }
   }
  } else {
   $175 = $120; //@line 17294
  }
  $$1$1 = $$1 + 1 | 0; //@line 17297
  $133 = $175; //@line 17297
 }
 $130 = HEAP32[2520] | 0; //@line 17299
 if (!$130) {
  $$1$2 = $$1$1; //@line 17302
  $146 = $133; //@line 17302
 } else {
  if (!$133) {
   $135 = HEAP32[$130 + 56 >> 2] | 0; //@line 17307
   if (!$135) {
    $176 = 0; //@line 17310
   } else {
    if ((HEAP32[$130 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$54 >> 2] = $135; //@line 17316
     HEAP32[$55 >> 2] = HEAP32[$130 + 60 >> 2]; //@line 17319
     $176 = $135; //@line 17320
    } else {
     $176 = 0; //@line 17322
    }
   }
  } else {
   $176 = $133; //@line 17326
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 17329
  $146 = $176; //@line 17329
 }
 $143 = HEAP32[2521] | 0; //@line 17331
 if (!$143) {
  $$1$3 = $$1$2; //@line 17334
  $159 = $146; //@line 17334
 } else {
  if (!$146) {
   $148 = HEAP32[$143 + 56 >> 2] | 0; //@line 17339
   if (!$148) {
    $177 = 0; //@line 17342
   } else {
    if ((HEAP32[$143 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$54 >> 2] = $148; //@line 17348
     HEAP32[$55 >> 2] = HEAP32[$143 + 60 >> 2]; //@line 17351
     $177 = $148; //@line 17352
    } else {
     $177 = 0; //@line 17354
    }
   }
  } else {
   $177 = $146; //@line 17358
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 17361
  $159 = $177; //@line 17361
 }
 $156 = HEAP32[2522] | 0; //@line 17363
 if (!$156) {
  HEAP32[10072 + ($30 << 2) >> 2] = $6; //@line 17367
  HEAP32[$62 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 17370
  if (!$$1$3) {
   $78 = $6 + 44 | 0; //@line 17373
   $79 = HEAP32[$78 >> 2] | 0; //@line 17374
   if (!$79) {
    $95 = $2 + 12 | 0; //@line 17377
    HEAP32[$95 >> 2] = 0; //@line 17378
    $97 = $10 + 4 | 0; //@line 17380
    HEAP32[$97 >> 2] = 0; //@line 17382
    HEAP32[$97 + 4 >> 2] = 0; //@line 17385
    HEAP32[$10 >> 2] = 3; //@line 17386
    $101 = $10 + 12 | 0; //@line 17387
    HEAP32[$101 >> 2] = 712; //@line 17388
    $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 17389
    $102 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $10) | 0; //@line 17390
    if (___async) {
     HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 17393
     $103 = $ReallocAsyncCtx19 + 4 | 0; //@line 17394
     HEAP32[$103 >> 2] = $8; //@line 17395
     $104 = $ReallocAsyncCtx19 + 8 | 0; //@line 17396
     HEAP32[$104 >> 2] = $6; //@line 17397
     $105 = $ReallocAsyncCtx19 + 12 | 0; //@line 17398
     HEAP32[$105 >> 2] = $6; //@line 17399
     $106 = $ReallocAsyncCtx19 + 16 | 0; //@line 17400
     HEAP32[$106 >> 2] = $12; //@line 17401
     $107 = $ReallocAsyncCtx19 + 20 | 0; //@line 17402
     HEAP32[$107 >> 2] = $78; //@line 17403
     $108 = $ReallocAsyncCtx19 + 24 | 0; //@line 17404
     HEAP32[$108 >> 2] = $4; //@line 17405
     $109 = $ReallocAsyncCtx19 + 28 | 0; //@line 17406
     HEAP32[$109 >> 2] = $18; //@line 17407
     $110 = $ReallocAsyncCtx19 + 32 | 0; //@line 17408
     HEAP32[$110 >> 2] = $20; //@line 17409
     $111 = $ReallocAsyncCtx19 + 36 | 0; //@line 17410
     HEAP32[$111 >> 2] = $78; //@line 17411
     $112 = $ReallocAsyncCtx19 + 40 | 0; //@line 17412
     HEAP32[$112 >> 2] = $28; //@line 17413
     $113 = $ReallocAsyncCtx19 + 44 | 0; //@line 17414
     HEAP32[$113 >> 2] = $95; //@line 17415
     $114 = $ReallocAsyncCtx19 + 48 | 0; //@line 17416
     HEAP32[$114 >> 2] = $10; //@line 17417
     $115 = $ReallocAsyncCtx19 + 52 | 0; //@line 17418
     HEAP32[$115 >> 2] = $2; //@line 17419
     $116 = $ReallocAsyncCtx19 + 56 | 0; //@line 17420
     HEAP32[$116 >> 2] = $101; //@line 17421
     sp = STACKTOP; //@line 17422
     return;
    }
    HEAP32[___async_retval >> 2] = $102; //@line 17426
    ___async_unwind = 0; //@line 17427
    HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 17428
    $103 = $ReallocAsyncCtx19 + 4 | 0; //@line 17429
    HEAP32[$103 >> 2] = $8; //@line 17430
    $104 = $ReallocAsyncCtx19 + 8 | 0; //@line 17431
    HEAP32[$104 >> 2] = $6; //@line 17432
    $105 = $ReallocAsyncCtx19 + 12 | 0; //@line 17433
    HEAP32[$105 >> 2] = $6; //@line 17434
    $106 = $ReallocAsyncCtx19 + 16 | 0; //@line 17435
    HEAP32[$106 >> 2] = $12; //@line 17436
    $107 = $ReallocAsyncCtx19 + 20 | 0; //@line 17437
    HEAP32[$107 >> 2] = $78; //@line 17438
    $108 = $ReallocAsyncCtx19 + 24 | 0; //@line 17439
    HEAP32[$108 >> 2] = $4; //@line 17440
    $109 = $ReallocAsyncCtx19 + 28 | 0; //@line 17441
    HEAP32[$109 >> 2] = $18; //@line 17442
    $110 = $ReallocAsyncCtx19 + 32 | 0; //@line 17443
    HEAP32[$110 >> 2] = $20; //@line 17444
    $111 = $ReallocAsyncCtx19 + 36 | 0; //@line 17445
    HEAP32[$111 >> 2] = $78; //@line 17446
    $112 = $ReallocAsyncCtx19 + 40 | 0; //@line 17447
    HEAP32[$112 >> 2] = $28; //@line 17448
    $113 = $ReallocAsyncCtx19 + 44 | 0; //@line 17449
    HEAP32[$113 >> 2] = $95; //@line 17450
    $114 = $ReallocAsyncCtx19 + 48 | 0; //@line 17451
    HEAP32[$114 >> 2] = $10; //@line 17452
    $115 = $ReallocAsyncCtx19 + 52 | 0; //@line 17453
    HEAP32[$115 >> 2] = $2; //@line 17454
    $116 = $ReallocAsyncCtx19 + 56 | 0; //@line 17455
    HEAP32[$116 >> 2] = $101; //@line 17456
    sp = STACKTOP; //@line 17457
    return;
   } else {
    $82 = HEAP32[$79 + 4 >> 2] | 0; //@line 17461
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(52) | 0; //@line 17462
    FUNCTION_TABLE_vii[$82 & 7]($2, $4); //@line 17463
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 17466
     $83 = $ReallocAsyncCtx6 + 4 | 0; //@line 17467
     HEAP32[$83 >> 2] = $8; //@line 17468
     $84 = $ReallocAsyncCtx6 + 8 | 0; //@line 17469
     HEAP32[$84 >> 2] = $78; //@line 17470
     $85 = $ReallocAsyncCtx6 + 12 | 0; //@line 17471
     HEAP32[$85 >> 2] = $2; //@line 17472
     $86 = $ReallocAsyncCtx6 + 16 | 0; //@line 17473
     HEAP32[$86 >> 2] = $10; //@line 17474
     $87 = $ReallocAsyncCtx6 + 20 | 0; //@line 17475
     HEAP32[$87 >> 2] = $6; //@line 17476
     $88 = $ReallocAsyncCtx6 + 24 | 0; //@line 17477
     HEAP32[$88 >> 2] = $6; //@line 17478
     $89 = $ReallocAsyncCtx6 + 28 | 0; //@line 17479
     HEAP32[$89 >> 2] = $12; //@line 17480
     $90 = $ReallocAsyncCtx6 + 32 | 0; //@line 17481
     HEAP32[$90 >> 2] = $78; //@line 17482
     $91 = $ReallocAsyncCtx6 + 36 | 0; //@line 17483
     HEAP32[$91 >> 2] = $18; //@line 17484
     $92 = $ReallocAsyncCtx6 + 40 | 0; //@line 17485
     HEAP32[$92 >> 2] = $4; //@line 17486
     $93 = $ReallocAsyncCtx6 + 44 | 0; //@line 17487
     HEAP32[$93 >> 2] = $20; //@line 17488
     $94 = $ReallocAsyncCtx6 + 48 | 0; //@line 17489
     HEAP32[$94 >> 2] = $28; //@line 17490
     sp = STACKTOP; //@line 17491
     return;
    }
    ___async_unwind = 0; //@line 17494
    HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 17495
    $83 = $ReallocAsyncCtx6 + 4 | 0; //@line 17496
    HEAP32[$83 >> 2] = $8; //@line 17497
    $84 = $ReallocAsyncCtx6 + 8 | 0; //@line 17498
    HEAP32[$84 >> 2] = $78; //@line 17499
    $85 = $ReallocAsyncCtx6 + 12 | 0; //@line 17500
    HEAP32[$85 >> 2] = $2; //@line 17501
    $86 = $ReallocAsyncCtx6 + 16 | 0; //@line 17502
    HEAP32[$86 >> 2] = $10; //@line 17503
    $87 = $ReallocAsyncCtx6 + 20 | 0; //@line 17504
    HEAP32[$87 >> 2] = $6; //@line 17505
    $88 = $ReallocAsyncCtx6 + 24 | 0; //@line 17506
    HEAP32[$88 >> 2] = $6; //@line 17507
    $89 = $ReallocAsyncCtx6 + 28 | 0; //@line 17508
    HEAP32[$89 >> 2] = $12; //@line 17509
    $90 = $ReallocAsyncCtx6 + 32 | 0; //@line 17510
    HEAP32[$90 >> 2] = $78; //@line 17511
    $91 = $ReallocAsyncCtx6 + 36 | 0; //@line 17512
    HEAP32[$91 >> 2] = $18; //@line 17513
    $92 = $ReallocAsyncCtx6 + 40 | 0; //@line 17514
    HEAP32[$92 >> 2] = $4; //@line 17515
    $93 = $ReallocAsyncCtx6 + 44 | 0; //@line 17516
    HEAP32[$93 >> 2] = $20; //@line 17517
    $94 = $ReallocAsyncCtx6 + 48 | 0; //@line 17518
    HEAP32[$94 >> 2] = $28; //@line 17519
    sp = STACKTOP; //@line 17520
    return;
   }
  }
 } else {
  if (!$159) {
   $161 = HEAP32[$156 + 56 >> 2] | 0; //@line 17528
   if ($161 | 0) {
    if ((HEAP32[$156 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$54 >> 2] = $161; //@line 17535
     HEAP32[$55 >> 2] = HEAP32[$156 + 60 >> 2]; //@line 17538
    }
   }
  }
  HEAP32[10072 + ($30 << 2) >> 2] = $6; //@line 17543
  HEAP32[$62 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 17546
 }
 HEAP32[___async_retval >> 2] = $$; //@line 17549
 return;
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $263 = 0, $265 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 1320
   $289 = 0; //@line 1321
   $290 = 0; //@line 1321
  } else {
   $6 = $0 + 4 | 0; //@line 1323
   $7 = $0 + 100 | 0; //@line 1324
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 1326
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 1331
     $16 = HEAPU8[$9 >> 0] | 0; //@line 1334
    } else {
     $16 = ___shgetc($0) | 0; //@line 1337
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 1349
      $21 = HEAP32[$6 >> 2] | 0; //@line 1350
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 1355
       $$0157 = $20; //@line 1358
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 1358
       break L11;
      } else {
       $$0157 = $20; //@line 1362
       $$0159 = ___shgetc($0) | 0; //@line 1362
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 1368
      $$0159 = $16; //@line 1368
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 1372
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 1379
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 1384
      $40 = HEAPU8[$32 >> 0] | 0; //@line 1387
     } else {
      $40 = ___shgetc($0) | 0; //@line 1390
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 1396
       $$1165167 = 8; //@line 1396
       label = 46; //@line 1397
       break;
      } else {
       $$1160 = $40; //@line 1400
       $$1165 = $1; //@line 1400
       label = 32; //@line 1401
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 1405
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 1410
      $50 = HEAPU8[$42 >> 0] | 0; //@line 1413
     } else {
      $50 = ___shgetc($0) | 0; //@line 1416
     }
     if ((HEAPU8[6550 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 1423
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 1427
      }
      if (!$2) {
       ___shlim($0, 0); //@line 1431
       $289 = 0; //@line 1432
       $290 = 0; //@line 1432
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 1436
       $290 = 0; //@line 1436
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 1441
      $289 = 0; //@line 1442
      $290 = 0; //@line 1442
      break L1;
     } else {
      $$1160169 = $50; //@line 1445
      $$1165167 = 16; //@line 1445
      label = 46; //@line 1446
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 1449
     if ($$166 >>> 0 > (HEAPU8[6550 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 1455
      $$1165 = $$166; //@line 1455
      label = 32; //@line 1456
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 1463
      }
      ___shlim($0, 0); //@line 1465
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 1467
      $289 = 0; //@line 1468
      $290 = 0; //@line 1468
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 1477
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 1480
       $74 = $70; //@line 1480
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 1483
        $75 = HEAP32[$6 >> 2] | 0; //@line 1484
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 1489
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 1492
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 1495
        }
        $74 = $$2161$be + -48 | 0; //@line 1497
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 1507
       $291 = $$0154222; //@line 1507
       $292 = 0; //@line 1507
      } else {
       $$2161$lcssa = $$1160; //@line 1509
       $291 = 0; //@line 1509
       $292 = 0; //@line 1509
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 1511
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 1514
       $88 = $291; //@line 1514
       $89 = $292; //@line 1514
       $93 = $86; //@line 1514
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 1516
        $91 = tempRet0; //@line 1517
        $94 = (($93 | 0) < 0) << 31 >> 31; //@line 1519
        $96 = ~$94; //@line 1521
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
         $$1165168 = 10; //@line 1528
         $$8 = $$3162215; //@line 1528
         $293 = $88; //@line 1528
         $294 = $89; //@line 1528
         label = 72; //@line 1529
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0; //@line 1532
        $89 = tempRet0; //@line 1533
        $104 = HEAP32[$6 >> 2] | 0; //@line 1534
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 1539
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 1542
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 1545
        }
        $93 = $$3162$be + -48 | 0; //@line 1547
        if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 1556
        }
       }
       if ($93 >>> 0 > 9) {
        $$1158 = $$0157; //@line 1563
        $263 = $89; //@line 1563
        $265 = $88; //@line 1563
       } else {
        $$1165168 = 10; //@line 1565
        $$8 = $$3162$be; //@line 1565
        $293 = $88; //@line 1565
        $294 = $89; //@line 1565
        label = 72; //@line 1566
       }
      } else {
       $$1158 = $$0157; //@line 1569
       $263 = $292; //@line 1569
       $265 = $291; //@line 1569
      }
     } else {
      $$1160169 = $$1160; //@line 1572
      $$1165167 = $$1165; //@line 1572
      label = 46; //@line 1573
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[6806 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 1588
      $133 = HEAP8[6550 + $$1160169 >> 0] | 0; //@line 1590
      $134 = $133 & 255; //@line 1591
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 1594
       $138 = $134; //@line 1594
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 1597
        $139 = HEAP32[$6 >> 2] | 0; //@line 1598
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 1603
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 1606
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 1609
        }
        $147 = HEAP8[6550 + $$4163$be >> 0] | 0; //@line 1612
        $138 = $147 & 255; //@line 1613
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 1623
       $155 = $147; //@line 1623
       $158 = 0; //@line 1623
       $160 = $$1155192; //@line 1623
      } else {
       $$4163$lcssa = $$1160169; //@line 1625
       $155 = $133; //@line 1625
       $158 = 0; //@line 1625
       $160 = 0; //@line 1625
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 1627
      $153 = tempRet0; //@line 1628
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 1638
       $$8 = $$4163$lcssa; //@line 1638
       $293 = $160; //@line 1638
       $294 = $158; //@line 1638
       label = 72; //@line 1639
       break;
      } else {
       $164 = $160; //@line 1642
       $165 = $158; //@line 1642
       $169 = $155; //@line 1642
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 1645
       $167 = tempRet0; //@line 1646
       $170 = $166 | $169 & 255; //@line 1648
       $171 = HEAP32[$6 >> 2] | 0; //@line 1649
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 1654
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 1657
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 1660
       }
       $169 = HEAP8[6550 + $$5$be >> 0] | 0; //@line 1663
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 1673
        $$8 = $$5$be; //@line 1673
        $293 = $170; //@line 1673
        $294 = $167; //@line 1673
        label = 72; //@line 1674
        break L63;
       } else {
        $164 = $170; //@line 1677
        $165 = $167; //@line 1677
       }
      }
     }
     $123 = HEAP8[6550 + $$1160169 >> 0] | 0; //@line 1682
     $124 = $123 & 255; //@line 1683
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 1686
      $189 = $124; //@line 1686
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 1689
       $190 = HEAP32[$6 >> 2] | 0; //@line 1690
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 1695
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 1698
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 1701
       }
       $198 = HEAP8[6550 + $$6$be >> 0] | 0; //@line 1704
       $189 = $198 & 255; //@line 1705
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 1715
      $204 = $198; //@line 1715
      $295 = $$2156210; //@line 1715
      $296 = 0; //@line 1715
     } else {
      $$6$lcssa = $$1160169; //@line 1717
      $204 = $123; //@line 1717
      $295 = 0; //@line 1717
      $296 = 0; //@line 1717
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 1722
      $207 = tempRet0; //@line 1723
      $$7198 = $$6$lcssa; //@line 1724
      $209 = $296; //@line 1724
      $211 = $295; //@line 1724
      $218 = $204; //@line 1724
      while (1) {
       if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 1732
        $$8 = $$7198; //@line 1732
        $293 = $211; //@line 1732
        $294 = $209; //@line 1732
        label = 72; //@line 1733
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0; //@line 1736
       $216 = tempRet0; //@line 1737
       $217 = $218 & 255; //@line 1738
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 1746
        $$8 = $$7198; //@line 1746
        $293 = $211; //@line 1746
        $294 = $209; //@line 1746
        label = 72; //@line 1747
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 1750
       $226 = tempRet0; //@line 1751
       $227 = HEAP32[$6 >> 2] | 0; //@line 1752
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 1757
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 1760
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 1763
       }
       $218 = HEAP8[6550 + $$7$be >> 0] | 0; //@line 1766
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 1772
        $$8 = $$7$be; //@line 1772
        $293 = $225; //@line 1772
        $294 = $226; //@line 1772
        label = 72; //@line 1773
        break;
       } else {
        $$7198 = $$7$be; //@line 1770
        $209 = $226; //@line 1770
        $211 = $225; //@line 1770
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 1778
      $$8 = $$6$lcssa; //@line 1778
      $293 = $295; //@line 1778
      $294 = $296; //@line 1778
      label = 72; //@line 1779
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[6550 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 1790
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 1795
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 1798
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 1801
      }
     } while ($$1165168 >>> 0 > (HEAPU8[6550 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 1812
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 1818
     $263 = $4; //@line 1818
     $265 = $3; //@line 1818
    } else {
     $$1158 = $$0157; //@line 1820
     $263 = $294; //@line 1820
     $265 = $293; //@line 1820
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 1828
   }
   if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 1844
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 1845
     $289 = tempRet0; //@line 1847
     $290 = $275; //@line 1847
     break;
    }
    if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 1857
     $289 = $4; //@line 1858
     $290 = $3; //@line 1858
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 1863
   $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 1866
   $289 = tempRet0; //@line 1868
   $290 = $287; //@line 1868
  }
 } while (0);
 tempRet0 = $289; //@line 1871
 return $290 | 0; //@line 1872
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_94($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20014
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20016
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20018
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20020
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20022
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20024
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20026
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20028
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20030
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20032
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20034
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20036
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20038
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20040
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20044
 $30 = HEAP32[HEAP32[$0 + 56 >> 2] >> 2] | 0; //@line 20045
 if ($30 | 0) {
  $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 20049
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(56) | 0; //@line 20050
  FUNCTION_TABLE_vi[$33 & 511]($24); //@line 20051
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 20054
   $34 = $ReallocAsyncCtx7 + 4 | 0; //@line 20055
   HEAP32[$34 >> 2] = $2; //@line 20056
   $35 = $ReallocAsyncCtx7 + 8 | 0; //@line 20057
   HEAP32[$35 >> 2] = $4; //@line 20058
   $36 = $ReallocAsyncCtx7 + 12 | 0; //@line 20059
   HEAP32[$36 >> 2] = $AsyncRetVal; //@line 20060
   $37 = $ReallocAsyncCtx7 + 16 | 0; //@line 20061
   HEAP32[$37 >> 2] = $22; //@line 20062
   $38 = $ReallocAsyncCtx7 + 20 | 0; //@line 20063
   HEAP32[$38 >> 2] = $6; //@line 20064
   $39 = $ReallocAsyncCtx7 + 24 | 0; //@line 20065
   HEAP32[$39 >> 2] = $8; //@line 20066
   $40 = $ReallocAsyncCtx7 + 28 | 0; //@line 20067
   HEAP32[$40 >> 2] = $10; //@line 20068
   $41 = $ReallocAsyncCtx7 + 32 | 0; //@line 20069
   HEAP32[$41 >> 2] = $26; //@line 20070
   $42 = $ReallocAsyncCtx7 + 36 | 0; //@line 20071
   HEAP32[$42 >> 2] = $14; //@line 20072
   $43 = $ReallocAsyncCtx7 + 40 | 0; //@line 20073
   HEAP32[$43 >> 2] = $12; //@line 20074
   $44 = $ReallocAsyncCtx7 + 44 | 0; //@line 20075
   HEAP32[$44 >> 2] = $16; //@line 20076
   $45 = $ReallocAsyncCtx7 + 48 | 0; //@line 20077
   HEAP32[$45 >> 2] = $18; //@line 20078
   $46 = $ReallocAsyncCtx7 + 52 | 0; //@line 20079
   HEAP32[$46 >> 2] = $20; //@line 20080
   sp = STACKTOP; //@line 20081
   return;
  }
  ___async_unwind = 0; //@line 20084
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 20085
  $34 = $ReallocAsyncCtx7 + 4 | 0; //@line 20086
  HEAP32[$34 >> 2] = $2; //@line 20087
  $35 = $ReallocAsyncCtx7 + 8 | 0; //@line 20088
  HEAP32[$35 >> 2] = $4; //@line 20089
  $36 = $ReallocAsyncCtx7 + 12 | 0; //@line 20090
  HEAP32[$36 >> 2] = $AsyncRetVal; //@line 20091
  $37 = $ReallocAsyncCtx7 + 16 | 0; //@line 20092
  HEAP32[$37 >> 2] = $22; //@line 20093
  $38 = $ReallocAsyncCtx7 + 20 | 0; //@line 20094
  HEAP32[$38 >> 2] = $6; //@line 20095
  $39 = $ReallocAsyncCtx7 + 24 | 0; //@line 20096
  HEAP32[$39 >> 2] = $8; //@line 20097
  $40 = $ReallocAsyncCtx7 + 28 | 0; //@line 20098
  HEAP32[$40 >> 2] = $10; //@line 20099
  $41 = $ReallocAsyncCtx7 + 32 | 0; //@line 20100
  HEAP32[$41 >> 2] = $26; //@line 20101
  $42 = $ReallocAsyncCtx7 + 36 | 0; //@line 20102
  HEAP32[$42 >> 2] = $14; //@line 20103
  $43 = $ReallocAsyncCtx7 + 40 | 0; //@line 20104
  HEAP32[$43 >> 2] = $12; //@line 20105
  $44 = $ReallocAsyncCtx7 + 44 | 0; //@line 20106
  HEAP32[$44 >> 2] = $16; //@line 20107
  $45 = $ReallocAsyncCtx7 + 48 | 0; //@line 20108
  HEAP32[$45 >> 2] = $18; //@line 20109
  $46 = $ReallocAsyncCtx7 + 52 | 0; //@line 20110
  HEAP32[$46 >> 2] = $20; //@line 20111
  sp = STACKTOP; //@line 20112
  return;
 }
 $47 = ($AsyncRetVal | 0) == 0; //@line 20115
 $48 = HEAP32[$22 >> 2] | 0; //@line 20116
 if ($48 | 0) {
  $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 20120
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(48) | 0; //@line 20121
  FUNCTION_TABLE_vi[$51 & 511]($26); //@line 20122
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 20125
   $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 20126
   HEAP32[$52 >> 2] = $2; //@line 20127
   $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 20128
   HEAP32[$53 >> 2] = $4; //@line 20129
   $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 20130
   HEAP32[$54 >> 2] = $6; //@line 20131
   $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 20132
   HEAP32[$55 >> 2] = $8; //@line 20133
   $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 20134
   $$expand_i1_val = $47 & 1; //@line 20135
   HEAP8[$56 >> 0] = $$expand_i1_val; //@line 20136
   $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 20137
   HEAP32[$57 >> 2] = $10; //@line 20138
   $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 20139
   HEAP32[$58 >> 2] = $12; //@line 20140
   $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 20141
   HEAP32[$59 >> 2] = $14; //@line 20142
   $60 = $ReallocAsyncCtx8 + 36 | 0; //@line 20143
   HEAP32[$60 >> 2] = $16; //@line 20144
   $61 = $ReallocAsyncCtx8 + 40 | 0; //@line 20145
   HEAP32[$61 >> 2] = $18; //@line 20146
   $62 = $ReallocAsyncCtx8 + 44 | 0; //@line 20147
   HEAP32[$62 >> 2] = $20; //@line 20148
   sp = STACKTOP; //@line 20149
   return;
  }
  ___async_unwind = 0; //@line 20152
  HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 20153
  $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 20154
  HEAP32[$52 >> 2] = $2; //@line 20155
  $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 20156
  HEAP32[$53 >> 2] = $4; //@line 20157
  $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 20158
  HEAP32[$54 >> 2] = $6; //@line 20159
  $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 20160
  HEAP32[$55 >> 2] = $8; //@line 20161
  $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 20162
  $$expand_i1_val = $47 & 1; //@line 20163
  HEAP8[$56 >> 0] = $$expand_i1_val; //@line 20164
  $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 20165
  HEAP32[$57 >> 2] = $10; //@line 20166
  $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 20167
  HEAP32[$58 >> 2] = $12; //@line 20168
  $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 20169
  HEAP32[$59 >> 2] = $14; //@line 20170
  $60 = $ReallocAsyncCtx8 + 36 | 0; //@line 20171
  HEAP32[$60 >> 2] = $16; //@line 20172
  $61 = $ReallocAsyncCtx8 + 40 | 0; //@line 20173
  HEAP32[$61 >> 2] = $18; //@line 20174
  $62 = $ReallocAsyncCtx8 + 44 | 0; //@line 20175
  HEAP32[$62 >> 2] = $20; //@line 20176
  sp = STACKTOP; //@line 20177
  return;
 }
 if ($47) {
  $79 = HEAP32[$10 >> 2] | 0; //@line 20181
  if (!$79) {
   $93 = $14 + 12 | 0; //@line 20184
   HEAP32[$93 >> 2] = 0; //@line 20185
   $94 = HEAP32[$4 >> 2] | 0; //@line 20186
   HEAP32[$16 + 8 >> 2] = 0; //@line 20188
   HEAP32[$16 >> 2] = 184; //@line 20189
   HEAP32[$16 + 4 >> 2] = $94; //@line 20191
   $96 = $16 + 12 | 0; //@line 20192
   HEAP32[$96 >> 2] = 724; //@line 20193
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(48) | 0; //@line 20194
   $97 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($14, 0, $16) | 0; //@line 20195
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 185; //@line 20198
    $98 = $ReallocAsyncCtx18 + 4 | 0; //@line 20199
    HEAP32[$98 >> 2] = $2; //@line 20200
    $99 = $ReallocAsyncCtx18 + 8 | 0; //@line 20201
    HEAP32[$99 >> 2] = $4; //@line 20202
    $100 = $ReallocAsyncCtx18 + 12 | 0; //@line 20203
    HEAP32[$100 >> 2] = $6; //@line 20204
    $101 = $ReallocAsyncCtx18 + 16 | 0; //@line 20205
    HEAP32[$101 >> 2] = $8; //@line 20206
    $102 = $ReallocAsyncCtx18 + 20 | 0; //@line 20207
    HEAP32[$102 >> 2] = $10; //@line 20208
    $103 = $ReallocAsyncCtx18 + 24 | 0; //@line 20209
    HEAP32[$103 >> 2] = $12; //@line 20210
    $104 = $ReallocAsyncCtx18 + 28 | 0; //@line 20211
    HEAP32[$104 >> 2] = $20; //@line 20212
    $105 = $ReallocAsyncCtx18 + 32 | 0; //@line 20213
    HEAP32[$105 >> 2] = $93; //@line 20214
    $106 = $ReallocAsyncCtx18 + 36 | 0; //@line 20215
    HEAP32[$106 >> 2] = $14; //@line 20216
    $107 = $ReallocAsyncCtx18 + 40 | 0; //@line 20217
    HEAP32[$107 >> 2] = $16; //@line 20218
    $108 = $ReallocAsyncCtx18 + 44 | 0; //@line 20219
    HEAP32[$108 >> 2] = $96; //@line 20220
    sp = STACKTOP; //@line 20221
    return;
   }
   HEAP32[___async_retval >> 2] = $97; //@line 20225
   ___async_unwind = 0; //@line 20226
   HEAP32[$ReallocAsyncCtx18 >> 2] = 185; //@line 20227
   $98 = $ReallocAsyncCtx18 + 4 | 0; //@line 20228
   HEAP32[$98 >> 2] = $2; //@line 20229
   $99 = $ReallocAsyncCtx18 + 8 | 0; //@line 20230
   HEAP32[$99 >> 2] = $4; //@line 20231
   $100 = $ReallocAsyncCtx18 + 12 | 0; //@line 20232
   HEAP32[$100 >> 2] = $6; //@line 20233
   $101 = $ReallocAsyncCtx18 + 16 | 0; //@line 20234
   HEAP32[$101 >> 2] = $8; //@line 20235
   $102 = $ReallocAsyncCtx18 + 20 | 0; //@line 20236
   HEAP32[$102 >> 2] = $10; //@line 20237
   $103 = $ReallocAsyncCtx18 + 24 | 0; //@line 20238
   HEAP32[$103 >> 2] = $12; //@line 20239
   $104 = $ReallocAsyncCtx18 + 28 | 0; //@line 20240
   HEAP32[$104 >> 2] = $20; //@line 20241
   $105 = $ReallocAsyncCtx18 + 32 | 0; //@line 20242
   HEAP32[$105 >> 2] = $93; //@line 20243
   $106 = $ReallocAsyncCtx18 + 36 | 0; //@line 20244
   HEAP32[$106 >> 2] = $14; //@line 20245
   $107 = $ReallocAsyncCtx18 + 40 | 0; //@line 20246
   HEAP32[$107 >> 2] = $16; //@line 20247
   $108 = $ReallocAsyncCtx18 + 44 | 0; //@line 20248
   HEAP32[$108 >> 2] = $96; //@line 20249
   sp = STACKTOP; //@line 20250
   return;
  } else {
   $82 = HEAP32[$79 + 4 >> 2] | 0; //@line 20254
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(44) | 0; //@line 20255
   FUNCTION_TABLE_vii[$82 & 7]($14, $12); //@line 20256
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 183; //@line 20259
    $83 = $ReallocAsyncCtx11 + 4 | 0; //@line 20260
    HEAP32[$83 >> 2] = $2; //@line 20261
    $84 = $ReallocAsyncCtx11 + 8 | 0; //@line 20262
    HEAP32[$84 >> 2] = $4; //@line 20263
    $85 = $ReallocAsyncCtx11 + 12 | 0; //@line 20264
    HEAP32[$85 >> 2] = $6; //@line 20265
    $86 = $ReallocAsyncCtx11 + 16 | 0; //@line 20266
    HEAP32[$86 >> 2] = $8; //@line 20267
    $87 = $ReallocAsyncCtx11 + 20 | 0; //@line 20268
    HEAP32[$87 >> 2] = $10; //@line 20269
    $88 = $ReallocAsyncCtx11 + 24 | 0; //@line 20270
    HEAP32[$88 >> 2] = $12; //@line 20271
    $89 = $ReallocAsyncCtx11 + 28 | 0; //@line 20272
    HEAP32[$89 >> 2] = $18; //@line 20273
    $90 = $ReallocAsyncCtx11 + 32 | 0; //@line 20274
    HEAP32[$90 >> 2] = $14; //@line 20275
    $91 = $ReallocAsyncCtx11 + 36 | 0; //@line 20276
    HEAP32[$91 >> 2] = $16; //@line 20277
    $92 = $ReallocAsyncCtx11 + 40 | 0; //@line 20278
    HEAP32[$92 >> 2] = $20; //@line 20279
    sp = STACKTOP; //@line 20280
    return;
   }
   ___async_unwind = 0; //@line 20283
   HEAP32[$ReallocAsyncCtx11 >> 2] = 183; //@line 20284
   $83 = $ReallocAsyncCtx11 + 4 | 0; //@line 20285
   HEAP32[$83 >> 2] = $2; //@line 20286
   $84 = $ReallocAsyncCtx11 + 8 | 0; //@line 20287
   HEAP32[$84 >> 2] = $4; //@line 20288
   $85 = $ReallocAsyncCtx11 + 12 | 0; //@line 20289
   HEAP32[$85 >> 2] = $6; //@line 20290
   $86 = $ReallocAsyncCtx11 + 16 | 0; //@line 20291
   HEAP32[$86 >> 2] = $8; //@line 20292
   $87 = $ReallocAsyncCtx11 + 20 | 0; //@line 20293
   HEAP32[$87 >> 2] = $10; //@line 20294
   $88 = $ReallocAsyncCtx11 + 24 | 0; //@line 20295
   HEAP32[$88 >> 2] = $12; //@line 20296
   $89 = $ReallocAsyncCtx11 + 28 | 0; //@line 20297
   HEAP32[$89 >> 2] = $18; //@line 20298
   $90 = $ReallocAsyncCtx11 + 32 | 0; //@line 20299
   HEAP32[$90 >> 2] = $14; //@line 20300
   $91 = $ReallocAsyncCtx11 + 36 | 0; //@line 20301
   HEAP32[$91 >> 2] = $16; //@line 20302
   $92 = $ReallocAsyncCtx11 + 40 | 0; //@line 20303
   HEAP32[$92 >> 2] = $20; //@line 20304
   sp = STACKTOP; //@line 20305
   return;
  }
 }
 $63 = HEAP32[$2 >> 2] | 0; //@line 20309
 if ($63 | 0) {
  __ZdlPv($63); //@line 20312
 }
 $65 = HEAP32[$10 >> 2] | 0; //@line 20314
 if ($65 | 0) {
  $68 = HEAP32[$65 + 8 >> 2] | 0; //@line 20318
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 20319
  FUNCTION_TABLE_vi[$68 & 511]($12); //@line 20320
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 20323
   $69 = $ReallocAsyncCtx9 + 4 | 0; //@line 20324
   HEAP32[$69 >> 2] = $6; //@line 20325
   $70 = $ReallocAsyncCtx9 + 8 | 0; //@line 20326
   HEAP32[$70 >> 2] = $8; //@line 20327
   $71 = $ReallocAsyncCtx9 + 12 | 0; //@line 20328
   HEAP32[$71 >> 2] = $20; //@line 20329
   sp = STACKTOP; //@line 20330
   return;
  }
  ___async_unwind = 0; //@line 20333
  HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 20334
  $69 = $ReallocAsyncCtx9 + 4 | 0; //@line 20335
  HEAP32[$69 >> 2] = $6; //@line 20336
  $70 = $ReallocAsyncCtx9 + 8 | 0; //@line 20337
  HEAP32[$70 >> 2] = $8; //@line 20338
  $71 = $ReallocAsyncCtx9 + 12 | 0; //@line 20339
  HEAP32[$71 >> 2] = $20; //@line 20340
  sp = STACKTOP; //@line 20341
  return;
 }
 $73 = HEAP32[$6 + 28 >> 2] | 0; //@line 20345
 if (!$73) {
  __ZdlPv($6); //@line 20348
  HEAP32[___async_retval >> 2] = -3007; //@line 20350
  return;
 }
 $76 = HEAP32[$73 + 8 >> 2] | 0; //@line 20354
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 20355
 FUNCTION_TABLE_vi[$76 & 511]($8); //@line 20356
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 20359
  $77 = $ReallocAsyncCtx10 + 4 | 0; //@line 20360
  HEAP32[$77 >> 2] = $6; //@line 20361
  $78 = $ReallocAsyncCtx10 + 8 | 0; //@line 20362
  HEAP32[$78 >> 2] = $20; //@line 20363
  sp = STACKTOP; //@line 20364
  return;
 }
 ___async_unwind = 0; //@line 20367
 HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 20368
 $77 = $ReallocAsyncCtx10 + 4 | 0; //@line 20369
 HEAP32[$77 >> 2] = $6; //@line 20370
 $78 = $ReallocAsyncCtx10 + 8 | 0; //@line 20371
 HEAP32[$78 >> 2] = $20; //@line 20372
 sp = STACKTOP; //@line 20373
 return;
}
function _sn_coap_parser_options_parse_multiple_options($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$04966$i = 0, $$04966$us$i = 0, $$05165$i = 0, $$05165$us$i = 0, $$053$i68 = 0, $$06378 = 0, $$06378$us = 0, $$064 = 0, $$065$be$in = 0, $$065$be$us$in = 0, $$06577 = 0, $$06577$us = 0, $$080 = 0, $$080$us = 0, $$1 = 0, $$1$i = 0, $$1$us = 0, $$1$us$i = 0, $$152$in$i = 0, $$152$in$us$i = 0, $$lcssa94$sink$i = 0, $$sink = 0, $$sink69 = 0, $$sink69$in = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $108 = 0, $11 = 0, $113 = 0, $115 = 0, $118 = 0, $123 = 0, $125 = 0, $126 = 0, $129 = 0, $132 = 0, $141 = 0, $146 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $174 = 0, $176 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $43 = 0, $49 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $76 = 0, $8 = 0, $88 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $AsyncCtx = 0, $sext = 0, $trunc = 0, $trunc$i = 0, $trunc$us$i = 0, $trunc110 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7881
 STACKTOP = STACKTOP + 16 | 0; //@line 7882
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7882
 $vararg_buffer = sp; //@line 7883
 $7 = HEAP32[$1 >> 2] | 0; //@line 7884
 $8 = $2 & 65535; //@line 7885
 do {
  if ($2 << 16 >> 16) {
   $10 = ($5 | 0) == 17; //@line 7889
   $11 = ($5 | 0) == 4; //@line 7890
   L3 : do {
    switch ($5 | 0) {
    case 8:
    case 11:
    case 15:
    case 20:
     {
      $$04966$us$i = 0; //@line 7894
      $$05165$us$i = $6; //@line 7894
      $17 = 1; //@line 7894
      L22 : while (1) {
       if ($11 & ($$05165$us$i & 65535) > 8 | (($$05165$us$i & 65535) > 255 | $10 & ($$05165$us$i & 65535) > 2)) {
        $$064 = -1; //@line 7904
        label = 55; //@line 7905
        break;
       }
       $15 = $$05165$us$i & 65535; //@line 7908
       $16 = $17 + $15 | 0; //@line 7909
       $18 = $16 & 65535; //@line 7910
       $21 = ($$04966$us$i & 65535) + 1 + $15 | 0; //@line 7913
       $22 = $16 & 65535; //@line 7914
       if (($22 | 0) == ($8 | 0)) {
        $$lcssa94$sink$i = $21; //@line 7917
        label = 23; //@line 7918
        break L3;
       }
       if ($22 >>> 0 > $8 >>> 0) {
        $$064 = -1; //@line 7923
        label = 55; //@line 7924
        break;
       }
       $25 = $7 + $22 | 0; //@line 7927
       $trunc$us$i = HEAP8[$25 >> 0] | 0; //@line 7928
       $26 = $trunc$us$i & 255; //@line 7929
       if ($26 & 240 | 0) {
        $$sink69$in = $21; //@line 7933
        break L3;
       }
       switch ($trunc$us$i & 15) {
       case 15:
        {
         $$064 = -1; //@line 7940
         label = 55; //@line 7941
         break L22;
         break;
        }
       case 13:
        {
         if (($22 + 1 | 0) >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 7949
          label = 55; //@line 7950
          break L22;
         }
         $43 = $18 + 1 << 16 >> 16; //@line 7953
         $$1$us$i = $43; //@line 7959
         $$152$in$us$i = (HEAPU8[$7 + ($43 & 65535) >> 0] | 0) + 13 | 0; //@line 7959
         break;
        }
       case 14:
        {
         $29 = $22 + 2 | 0; //@line 7963
         if ($29 >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 7966
          label = 55; //@line 7967
          break L22;
         }
         $$1$us$i = $29 & 65535; //@line 7980
         $$152$in$us$i = (HEAPU8[$25 + 2 >> 0] | 0) + 269 + ((HEAPU8[$25 + 1 >> 0] | 0) << 8) | 0; //@line 7980
         break;
        }
       default:
        {
         $$1$us$i = $18; //@line 7984
         $$152$in$us$i = $26 & 15; //@line 7984
        }
       }
       $49 = $$1$us$i + 1 << 16 >> 16; //@line 7988
       if (($49 & 65535) > ($2 & 65535)) {
        $$lcssa94$sink$i = $21; //@line 7992
        label = 23; //@line 7993
        break L3;
       } else {
        $$04966$us$i = $21; //@line 7996
        $$05165$us$i = $$152$in$us$i & 65535; //@line 7996
        $17 = $49 & 65535; //@line 7996
       }
      }
      if ((label | 0) == 55) {
       STACKTOP = sp; //@line 8000
       return $$064 | 0; //@line 8000
      }
      break;
     }
    default:
     {
      $$04966$i = 0; //@line 8005
      $$05165$i = $6; //@line 8005
      $56 = 1; //@line 8005
      L4 : while (1) {
       if ($10 & ($$05165$i & 65535) > 2 | $11 & ($$05165$i & 65535) > 8) {
        $$064 = -1; //@line 8013
        label = 55; //@line 8014
        break;
       }
       $54 = $$05165$i & 65535; //@line 8017
       $55 = $56 + $54 | 0; //@line 8018
       $57 = $55 & 65535; //@line 8019
       $60 = ($$04966$i & 65535) + 1 + $54 | 0; //@line 8022
       $61 = $55 & 65535; //@line 8023
       if (($61 | 0) == ($8 | 0)) {
        $$lcssa94$sink$i = $60; //@line 8026
        label = 23; //@line 8027
        break L3;
       }
       if ($61 >>> 0 > $8 >>> 0) {
        $$064 = -1; //@line 8032
        label = 55; //@line 8033
        break;
       }
       $64 = $7 + $61 | 0; //@line 8036
       $trunc$i = HEAP8[$64 >> 0] | 0; //@line 8037
       $65 = $trunc$i & 255; //@line 8038
       if ($65 & 240 | 0) {
        $$sink69$in = $60; //@line 8042
        break L3;
       }
       switch ($trunc$i & 15) {
       case 15:
        {
         $$064 = -1; //@line 8049
         label = 55; //@line 8050
         break L4;
         break;
        }
       case 13:
        {
         if (($61 + 1 | 0) >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 8058
          label = 55; //@line 8059
          break L4;
         }
         $70 = $57 + 1 << 16 >> 16; //@line 8062
         $$1$i = $70; //@line 8068
         $$152$in$i = (HEAPU8[$7 + ($70 & 65535) >> 0] | 0) + 13 | 0; //@line 8068
         break;
        }
       case 14:
        {
         $76 = $61 + 2 | 0; //@line 8072
         if ($76 >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 8075
          label = 55; //@line 8076
          break L4;
         }
         $$1$i = $76 & 65535; //@line 8089
         $$152$in$i = (HEAPU8[$64 + 2 >> 0] | 0) + 269 + ((HEAPU8[$64 + 1 >> 0] | 0) << 8) | 0; //@line 8089
         break;
        }
       default:
        {
         $$1$i = $57; //@line 8093
         $$152$in$i = $65 & 15; //@line 8093
        }
       }
       $88 = $$1$i + 1 << 16 >> 16; //@line 8097
       if (($88 & 65535) > ($2 & 65535)) {
        $$lcssa94$sink$i = $60; //@line 8101
        label = 23; //@line 8102
        break L3;
       } else {
        $$04966$i = $60; //@line 8105
        $$05165$i = $$152$in$i & 65535; //@line 8105
        $56 = $88 & 65535; //@line 8105
       }
      }
      if ((label | 0) == 55) {
       STACKTOP = sp; //@line 8109
       return $$064 | 0; //@line 8109
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    if (!(($$lcssa94$sink$i & 65535) << 16 >> 16)) {
     break;
    } else {
     $$sink69$in = $$lcssa94$sink$i; //@line 8120
    }
   }
   $$sink69 = $$sink69$in + 65535 | 0; //@line 8123
   $93 = $$sink69 & 65535; //@line 8124
   $sext = $$sink69 << 16; //@line 8125
   $94 = $sext >> 16; //@line 8126
   switch ($93 << 16 >> 16) {
   case 0:
    {
     $$053$i68 = 0; //@line 8129
     break;
    }
   case -1:
    {
     $$064 = -1; //@line 8133
     STACKTOP = sp; //@line 8134
     return $$064 | 0; //@line 8134
    }
   default:
    {
     label = 25; //@line 8138
    }
   }
   if ((label | 0) == 25) {
    $95 = HEAP32[$0 >> 2] | 0; //@line 8142
    $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 8143
    $96 = FUNCTION_TABLE_ii[$95 & 31]($93) | 0; //@line 8144
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 69; //@line 8147
     HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8149
     HEAP16[$AsyncCtx + 8 >> 1] = $6; //@line 8151
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 8153
     HEAP32[$AsyncCtx + 16 >> 2] = $94; //@line 8155
     HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 8157
     HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 8159
     HEAP16[$AsyncCtx + 28 >> 1] = $93; //@line 8161
     HEAP32[$AsyncCtx + 32 >> 2] = $4; //@line 8163
     HEAP32[$AsyncCtx + 36 >> 2] = $3; //@line 8165
     HEAP32[$AsyncCtx + 40 >> 2] = $sext; //@line 8167
     sp = STACKTOP; //@line 8168
     STACKTOP = sp; //@line 8169
     return 0; //@line 8169
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8171
    HEAP32[$3 >> 2] = $96; //@line 8172
    if (!$96) {
     _mbed_tracef(2, 3844, 5600, $vararg_buffer); //@line 8175
     $$064 = -1; //@line 8176
     STACKTOP = sp; //@line 8177
     return $$064 | 0; //@line 8177
    } else {
     $$053$i68 = $93; //@line 8179
    }
   }
   HEAP16[$4 >> 1] = $$053$i68; //@line 8182
   $108 = HEAP32[$3 >> 2] | 0; //@line 8183
   if (($sext | 0) <= 0) {
    $$064 = 0; //@line 8186
    STACKTOP = sp; //@line 8187
    return $$064 | 0; //@line 8187
   }
   if (($5 | 0) == 20) {
    $$06378$us = $108; //@line 8191
    $$06577$us = $6; //@line 8191
    $$080$us = 0; //@line 8191
    while (1) {
     if (!($$080$us << 24 >> 24)) {
      $$1$us = $$06378$us; //@line 8195
     } else {
      HEAP8[$$06378$us >> 0] = 38; //@line 8197
      $$1$us = $$06378$us + 1 | 0; //@line 8199
     }
     $113 = $$080$us + 1 << 24 >> 24; //@line 8201
     $115 = (HEAP32[$1 >> 2] | 0) + 1 | 0; //@line 8203
     HEAP32[$1 >> 2] = $115; //@line 8204
     $118 = $$06577$us & 65535; //@line 8207
     if (($$1$us + $118 - (HEAP32[$3 >> 2] | 0) | 0) > ($94 | 0)) {
      $$064 = -1; //@line 8212
      label = 55; //@line 8213
      break;
     }
     _memcpy($$1$us | 0, $115 | 0, $118 | 0) | 0; //@line 8216
     $123 = (HEAP32[$1 >> 2] | 0) + $118 | 0; //@line 8218
     HEAP32[$1 >> 2] = $123; //@line 8219
     $$06378$us = $$1$us + $118 | 0; //@line 8220
     $125 = HEAP32[$3 >> 2] | 0; //@line 8221
     $126 = $$06378$us; //@line 8222
     if (($126 - $125 | 0) >= ($94 | 0)) {
      $$064 = $113; //@line 8226
      label = 55; //@line 8227
      break;
     }
     $trunc110 = HEAP8[$123 >> 0] | 0; //@line 8230
     $129 = $trunc110 & 255; //@line 8231
     if ($129 & 240 | 0) {
      $$064 = $113; //@line 8235
      label = 55; //@line 8236
      break;
     }
     switch ($trunc110 & 15) {
     case 13:
      {
       $141 = $123 + 1 | 0; //@line 8243
       $$sink87 = $141; //@line 8247
       $$sink88 = (HEAPU8[$141 >> 0] | 0) + 13 | 0; //@line 8247
       label = 40; //@line 8248
       break;
      }
     case 14:
      {
       $132 = $123 + 2 | 0; //@line 8252
       $$sink87 = $132; //@line 8261
       $$sink88 = (HEAPU8[$132 >> 0] | 0) + 269 + ((HEAPU8[$123 + 1 >> 0] | 0) << 8) | 0; //@line 8261
       label = 40; //@line 8262
       break;
      }
     default:
      {
       $$065$be$us$in = $129 & 15; //@line 8266
       $146 = $125; //@line 8266
      }
     }
     if ((label | 0) == 40) {
      label = 0; //@line 8270
      HEAP32[$1 >> 2] = $$sink87; //@line 8271
      $$065$be$us$in = $$sink88; //@line 8273
      $146 = HEAP32[$3 >> 2] | 0; //@line 8273
     }
     if (($126 - $146 | 0) >= ($94 | 0)) {
      $$064 = $113; //@line 8281
      label = 55; //@line 8282
      break;
     } else {
      $$06577$us = $$065$be$us$in & 65535; //@line 8279
      $$080$us = $113; //@line 8279
     }
    }
    if ((label | 0) == 55) {
     STACKTOP = sp; //@line 8287
     return $$064 | 0; //@line 8287
    }
   } else {
    $$06378 = $108; //@line 8290
    $$06577 = $6; //@line 8290
    $$080 = 0; //@line 8290
   }
   while (1) {
    if (!($$080 << 24 >> 24)) {
     $$1 = $$06378; //@line 8295
    } else {
     switch ($5 | 0) {
     case 4:
     case 15:
     case 17:
     case 20:
      {
       $$sink = 38; //@line 8299
       label = 45; //@line 8300
       break;
      }
     case 8:
     case 11:
      {
       $$sink = 47; //@line 8304
       label = 45; //@line 8305
       break;
      }
     default:
      {}
     }
     if ((label | 0) == 45) {
      label = 0; //@line 8312
      HEAP8[$$06378 >> 0] = $$sink; //@line 8313
     }
     $$1 = $$06378 + 1 | 0; //@line 8316
    }
    $150 = $$080 + 1 << 24 >> 24; //@line 8318
    $152 = (HEAP32[$1 >> 2] | 0) + 1 | 0; //@line 8320
    HEAP32[$1 >> 2] = $152; //@line 8321
    $155 = $$06577 & 65535; //@line 8324
    if (($$1 + $155 - (HEAP32[$3 >> 2] | 0) | 0) > ($94 | 0)) {
     $$064 = -1; //@line 8329
     label = 55; //@line 8330
     break;
    }
    _memcpy($$1 | 0, $152 | 0, $155 | 0) | 0; //@line 8333
    $160 = (HEAP32[$1 >> 2] | 0) + $155 | 0; //@line 8335
    HEAP32[$1 >> 2] = $160; //@line 8336
    $$06378 = $$1 + $155 | 0; //@line 8337
    $162 = HEAP32[$3 >> 2] | 0; //@line 8338
    $163 = $$06378; //@line 8339
    if (($163 - $162 | 0) >= ($94 | 0)) {
     $$064 = $150; //@line 8343
     label = 55; //@line 8344
     break;
    }
    $trunc = HEAP8[$160 >> 0] | 0; //@line 8347
    $166 = $trunc & 255; //@line 8348
    if ($166 & 240 | 0) {
     $$064 = $150; //@line 8352
     label = 55; //@line 8353
     break;
    }
    switch ($trunc & 15) {
    case 13:
     {
      $169 = $160 + 1 | 0; //@line 8360
      $$sink89 = $169; //@line 8364
      $$sink90 = (HEAPU8[$169 >> 0] | 0) + 13 | 0; //@line 8364
      label = 52; //@line 8365
      break;
     }
    case 14:
     {
      $176 = $160 + 2 | 0; //@line 8369
      $$sink89 = $176; //@line 8378
      $$sink90 = (HEAPU8[$176 >> 0] | 0) + 269 + ((HEAPU8[$160 + 1 >> 0] | 0) << 8) | 0; //@line 8378
      label = 52; //@line 8379
      break;
     }
    default:
     {
      $$065$be$in = $166 & 15; //@line 8383
      $174 = $162; //@line 8383
     }
    }
    if ((label | 0) == 52) {
     label = 0; //@line 8387
     HEAP32[$1 >> 2] = $$sink89; //@line 8388
     $$065$be$in = $$sink90; //@line 8390
     $174 = HEAP32[$3 >> 2] | 0; //@line 8390
    }
    if (($163 - $174 | 0) >= ($94 | 0)) {
     $$064 = $150; //@line 8398
     label = 55; //@line 8399
     break;
    } else {
     $$06577 = $$065$be$in & 65535; //@line 8396
     $$080 = $150; //@line 8396
    }
   }
   if ((label | 0) == 55) {
    STACKTOP = sp; //@line 8404
    return $$064 | 0; //@line 8404
   }
  }
 } while (0);
 HEAP16[$4 >> 1] = 0; //@line 8408
 $$064 = 0; //@line 8409
 STACKTOP = sp; //@line 8410
 return $$064 | 0; //@line 8410
}
function __ZL28nsapi_dns_query_async_createPv($0) {
 $0 = $0 | 0;
 var $$169$off0 = 0, $$169$off0$1 = 0, $$169$off0$2 = 0, $$169$off0$3 = 0, $$lcssa = 0, $$pre = 0, $1 = 0, $103 = 0, $105 = 0, $106 = 0, $11 = 0, $112 = 0, $115 = 0, $119 = 0, $123 = 0, $134 = 0, $140 = 0, $151 = 0, $157 = 0, $16 = 0, $168 = 0, $174 = 0, $187 = 0, $191 = 0, $195 = 0, $199 = 0, $2 = 0, $27 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $40 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx28 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16141
 STACKTOP = STACKTOP + 16 | 0; //@line 16142
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16142
 $1 = sp; //@line 16143
 $2 = $0; //@line 16144
 $3 = HEAP32[2518] | 0; //@line 16145
 $4 = ($3 | 0) == 0; //@line 16146
 if ($4) {
  label = 4; //@line 16148
 } else {
  if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) {
   $$lcssa = $3; //@line 16153
  } else {
   label = 4; //@line 16155
  }
 }
 do {
  if ((label | 0) == 4) {
   $11 = HEAP32[2519] | 0; //@line 16160
   if ($11 | 0) {
    if ((HEAP32[$11 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $11; //@line 16166
     break;
    }
   }
   $187 = HEAP32[2520] | 0; //@line 16170
   if ($187 | 0) {
    if ((HEAP32[$187 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $187; //@line 16176
     break;
    }
   }
   $191 = HEAP32[2521] | 0; //@line 16180
   if ($191 | 0) {
    if ((HEAP32[$191 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $191; //@line 16186
     break;
    }
   }
   $195 = HEAP32[2522] | 0; //@line 16190
   if (!$195) {
    STACKTOP = sp; //@line 16193
    return;
   }
   if ((HEAP32[$195 >> 2] | 0) == ($2 | 0)) {
    $$lcssa = $195; //@line 16198
   } else {
    STACKTOP = sp; //@line 16200
    return;
   }
  }
 } while (0);
 $7 = $$lcssa + 56 | 0; //@line 16204
 $8 = $$lcssa + 8 | 0; //@line 16205
 $9 = $$lcssa + 60 | 0; //@line 16206
 if ($4 | ($3 | 0) == ($$lcssa | 0)) {
  $$169$off0 = 0; //@line 16210
 } else {
  if (!(HEAP32[$7 >> 2] | 0)) {
   $16 = HEAP32[$3 + 56 >> 2] | 0; //@line 16216
   if ($16 | 0) {
    if ((HEAP32[$3 + 8 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     HEAP32[$7 >> 2] = $16; //@line 16224
     HEAP32[$9 >> 2] = HEAP32[$3 + 60 >> 2]; //@line 16227
    }
   }
  }
  $$169$off0 = (HEAP16[$3 + 80 >> 1] | 0) != 0; //@line 16234
 }
 $27 = HEAP32[2519] | 0; //@line 16236
 if (($27 | 0) == 0 | ($27 | 0) == ($$lcssa | 0)) {
  $$169$off0$1 = $$169$off0; //@line 16241
 } else {
  if (!(HEAP32[$7 >> 2] | 0)) {
   $123 = HEAP32[$27 + 56 >> 2] | 0; //@line 16247
   if ($123 | 0) {
    if ((HEAP32[$27 + 8 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     HEAP32[$7 >> 2] = $123; //@line 16255
     HEAP32[$9 >> 2] = HEAP32[$27 + 60 >> 2]; //@line 16258
    }
   }
  }
  $$169$off0$1 = $$169$off0 | (HEAP16[$27 + 80 >> 1] | 0) != 0; //@line 16266
 }
 $134 = HEAP32[2520] | 0; //@line 16268
 if (($134 | 0) == 0 | ($134 | 0) == ($$lcssa | 0)) {
  $$169$off0$2 = $$169$off0$1; //@line 16273
 } else {
  if (!(HEAP32[$7 >> 2] | 0)) {
   $140 = HEAP32[$134 + 56 >> 2] | 0; //@line 16279
   if ($140 | 0) {
    if ((HEAP32[$134 + 8 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     HEAP32[$7 >> 2] = $140; //@line 16287
     HEAP32[$9 >> 2] = HEAP32[$134 + 60 >> 2]; //@line 16290
    }
   }
  }
  $$169$off0$2 = $$169$off0$1 | (HEAP16[$134 + 80 >> 1] | 0) != 0; //@line 16298
 }
 $151 = HEAP32[2521] | 0; //@line 16300
 if (($151 | 0) == 0 | ($151 | 0) == ($$lcssa | 0)) {
  $$169$off0$3 = $$169$off0$2; //@line 16305
 } else {
  if (!(HEAP32[$7 >> 2] | 0)) {
   $157 = HEAP32[$151 + 56 >> 2] | 0; //@line 16311
   if ($157 | 0) {
    if ((HEAP32[$151 + 8 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     HEAP32[$7 >> 2] = $157; //@line 16319
     HEAP32[$9 >> 2] = HEAP32[$151 + 60 >> 2]; //@line 16322
    }
   }
  }
  $$169$off0$3 = $$169$off0$2 | (HEAP16[$151 + 80 >> 1] | 0) != 0; //@line 16330
 }
 $168 = HEAP32[2522] | 0; //@line 16332
 if (($168 | 0) == 0 | ($168 | 0) == ($$lcssa | 0)) {
  if ($$169$off0$3) {
   STACKTOP = sp; //@line 16338
   return;
  }
 } else {
  if (!(HEAP32[$7 >> 2] | 0)) {
   $174 = HEAP32[$168 + 56 >> 2] | 0; //@line 16345
   if ($174 | 0) {
    if ((HEAP32[$168 + 8 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     HEAP32[$7 >> 2] = $174; //@line 16353
     HEAP32[$9 >> 2] = HEAP32[$168 + 60 >> 2]; //@line 16356
    }
   }
  }
  if ($$169$off0$3 | (HEAP16[$168 + 80 >> 1] | 0) != 0) {
   STACKTOP = sp; //@line 16365
   return;
  }
 }
 if (!(HEAP32[$7 >> 2] | 0)) {
  $AsyncCtx18 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16371
  $32 = __ZnwjRKSt9nothrow_t(56, 12052) | 0; //@line 16372
  if (___async) {
   HEAP32[$AsyncCtx18 >> 2] = 210; //@line 16375
   HEAP32[$AsyncCtx18 + 4 >> 2] = $$lcssa; //@line 16377
   HEAP32[$AsyncCtx18 + 8 >> 2] = $7; //@line 16379
   HEAP32[$AsyncCtx18 + 12 >> 2] = $1; //@line 16381
   HEAP32[$AsyncCtx18 + 16 >> 2] = $8; //@line 16383
   HEAP32[$AsyncCtx18 + 20 >> 2] = $9; //@line 16385
   sp = STACKTOP; //@line 16386
   STACKTOP = sp; //@line 16387
   return;
  }
  _emscripten_free_async_context($AsyncCtx18 | 0); //@line 16389
  if (!$32) {
   $AsyncCtx28 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16392
   __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa, -3007, 0); //@line 16393
   if (___async) {
    HEAP32[$AsyncCtx28 >> 2] = 212; //@line 16396
    sp = STACKTOP; //@line 16397
    STACKTOP = sp; //@line 16398
    return;
   }
   _emscripten_free_async_context($AsyncCtx28 | 0); //@line 16400
   STACKTOP = sp; //@line 16401
   return;
  }
  __ZN9UDPSocketC2Ev($32); //@line 16403
  $39 = HEAP32[$8 >> 2] | 0; //@line 16404
  $AsyncCtx35 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16405
  $40 = __ZN6Socket4openEP12NetworkStack($32, $39) | 0; //@line 16406
  if (___async) {
   HEAP32[$AsyncCtx35 >> 2] = 211; //@line 16409
   HEAP32[$AsyncCtx35 + 4 >> 2] = $$lcssa; //@line 16411
   HEAP32[$AsyncCtx35 + 8 >> 2] = $7; //@line 16413
   HEAP32[$AsyncCtx35 + 12 >> 2] = $32; //@line 16415
   HEAP32[$AsyncCtx35 + 16 >> 2] = $1; //@line 16417
   HEAP32[$AsyncCtx35 + 20 >> 2] = $8; //@line 16419
   HEAP32[$AsyncCtx35 + 24 >> 2] = $32; //@line 16421
   HEAP32[$AsyncCtx35 + 28 >> 2] = $9; //@line 16423
   HEAP32[$AsyncCtx35 + 32 >> 2] = $32; //@line 16425
   sp = STACKTOP; //@line 16426
   STACKTOP = sp; //@line 16427
   return;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 16429
  if ($40 | 0) {
   $52 = HEAP32[(HEAP32[$32 >> 2] | 0) + 4 >> 2] | 0; //@line 16434
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16435
   FUNCTION_TABLE_vi[$52 & 511]($32); //@line 16436
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 213; //@line 16439
    HEAP32[$AsyncCtx + 4 >> 2] = $$lcssa; //@line 16441
    HEAP32[$AsyncCtx + 8 >> 2] = $40; //@line 16443
    sp = STACKTOP; //@line 16444
    STACKTOP = sp; //@line 16445
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16447
   $AsyncCtx25 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16448
   __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa, $40, 0); //@line 16449
   if (___async) {
    HEAP32[$AsyncCtx25 >> 2] = 214; //@line 16452
    sp = STACKTOP; //@line 16453
    STACKTOP = sp; //@line 16454
    return;
   }
   _emscripten_free_async_context($AsyncCtx25 | 0); //@line 16456
   STACKTOP = sp; //@line 16457
   return;
  }
  __ZN6Socket11set_timeoutEi($32, 0); //@line 16459
  $55 = HEAP32[$9 >> 2] | 0; //@line 16460
  $57 = $55; //@line 16462
  do {
   if (!$55) {
    $AsyncCtx14 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16465
    $58 = __Znwj(20) | 0; //@line 16466
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 215; //@line 16469
     HEAP32[$AsyncCtx14 + 4 >> 2] = $$lcssa; //@line 16471
     HEAP32[$AsyncCtx14 + 8 >> 2] = $7; //@line 16473
     HEAP32[$AsyncCtx14 + 12 >> 2] = $32; //@line 16475
     HEAP32[$AsyncCtx14 + 16 >> 2] = $1; //@line 16477
     HEAP32[$AsyncCtx14 + 20 >> 2] = $8; //@line 16479
     HEAP32[$AsyncCtx14 + 24 >> 2] = $32; //@line 16481
     HEAP32[$AsyncCtx14 + 28 >> 2] = $9; //@line 16483
     sp = STACKTOP; //@line 16484
     STACKTOP = sp; //@line 16485
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16487
     HEAP32[$58 >> 2] = 0; //@line 16488
     HEAP32[$58 + 4 >> 2] = 0; //@line 16488
     HEAP32[$58 + 8 >> 2] = 0; //@line 16488
     HEAP32[$58 + 12 >> 2] = 0; //@line 16488
     HEAP32[$9 >> 2] = $58; //@line 16489
     $199 = $58; //@line 16491
     $69 = $58; //@line 16491
     break;
    }
   } else {
    $199 = $57; //@line 16495
    $69 = $55; //@line 16495
   }
  } while (0);
  $67 = $$lcssa + 32 | 0; //@line 16498
  if (($69 | 0) == ($67 | 0)) {
   $103 = $69; //@line 16501
   $105 = $199; //@line 16501
  } else {
   $70 = $69 + 12 | 0; //@line 16503
   $71 = HEAP32[$70 >> 2] | 0; //@line 16504
   do {
    if ($71 | 0) {
     $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 16509
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 16510
     FUNCTION_TABLE_vi[$74 & 511]($69); //@line 16511
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 216; //@line 16514
      HEAP32[$AsyncCtx2 + 4 >> 2] = $$lcssa; //@line 16516
      HEAP32[$AsyncCtx2 + 8 >> 2] = $7; //@line 16518
      HEAP32[$AsyncCtx2 + 12 >> 2] = $32; //@line 16520
      HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 16522
      HEAP32[$AsyncCtx2 + 20 >> 2] = $8; //@line 16524
      HEAP32[$AsyncCtx2 + 24 >> 2] = $32; //@line 16526
      HEAP32[$AsyncCtx2 + 28 >> 2] = $70; //@line 16528
      HEAP32[$AsyncCtx2 + 32 >> 2] = $9; //@line 16530
      HEAP32[$AsyncCtx2 + 36 >> 2] = $69; //@line 16532
      HEAP32[$AsyncCtx2 + 40 >> 2] = $67; //@line 16534
      sp = STACKTOP; //@line 16535
      STACKTOP = sp; //@line 16536
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16538
      break;
     }
    }
   } while (0);
   $85 = $$lcssa + 44 | 0; //@line 16543
   $86 = HEAP32[$85 >> 2] | 0; //@line 16544
   do {
    if (!$86) {
     $99 = 0; //@line 16548
    } else {
     $89 = HEAP32[$86 + 4 >> 2] | 0; //@line 16551
     $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 16552
     FUNCTION_TABLE_vii[$89 & 7]($69, $67); //@line 16553
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 217; //@line 16556
      HEAP32[$AsyncCtx6 + 4 >> 2] = $85; //@line 16558
      HEAP32[$AsyncCtx6 + 8 >> 2] = $70; //@line 16560
      HEAP32[$AsyncCtx6 + 12 >> 2] = $9; //@line 16562
      HEAP32[$AsyncCtx6 + 16 >> 2] = $8; //@line 16564
      HEAP32[$AsyncCtx6 + 20 >> 2] = $1; //@line 16566
      HEAP32[$AsyncCtx6 + 24 >> 2] = $32; //@line 16568
      HEAP32[$AsyncCtx6 + 28 >> 2] = $7; //@line 16570
      HEAP32[$AsyncCtx6 + 32 >> 2] = $32; //@line 16572
      HEAP32[$AsyncCtx6 + 36 >> 2] = $$lcssa; //@line 16574
      sp = STACKTOP; //@line 16575
      STACKTOP = sp; //@line 16576
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 16578
      $99 = HEAP32[$85 >> 2] | 0; //@line 16580
      break;
     }
    }
   } while (0);
   HEAP32[$70 >> 2] = $99; //@line 16585
   $$pre = HEAP32[$9 >> 2] | 0; //@line 16586
   $103 = $$pre; //@line 16588
   $105 = $$pre; //@line 16588
  }
  HEAP32[$103 + 16 >> 2] = HEAP32[$8 >> 2]; //@line 16592
  HEAP32[$1 + 8 >> 2] = 0; //@line 16594
  HEAP32[$1 >> 2] = 218; //@line 16595
  HEAP32[$1 + 4 >> 2] = $105; //@line 16597
  $106 = $1 + 12 | 0; //@line 16598
  HEAP32[$106 >> 2] = 724; //@line 16599
  $AsyncCtx31 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16600
  __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($32, $1); //@line 16601
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 219; //@line 16604
   HEAP32[$AsyncCtx31 + 4 >> 2] = $106; //@line 16606
   HEAP32[$AsyncCtx31 + 8 >> 2] = $7; //@line 16608
   HEAP32[$AsyncCtx31 + 12 >> 2] = $32; //@line 16610
   HEAP32[$AsyncCtx31 + 16 >> 2] = $1; //@line 16612
   HEAP32[$AsyncCtx31 + 20 >> 2] = $$lcssa; //@line 16614
   sp = STACKTOP; //@line 16615
   STACKTOP = sp; //@line 16616
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 16618
  $112 = HEAP32[$106 >> 2] | 0; //@line 16619
  do {
   if ($112 | 0) {
    $115 = HEAP32[$112 + 8 >> 2] | 0; //@line 16624
    $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16625
    FUNCTION_TABLE_vi[$115 & 511]($1); //@line 16626
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 220; //@line 16629
     HEAP32[$AsyncCtx10 + 4 >> 2] = $7; //@line 16631
     HEAP32[$AsyncCtx10 + 8 >> 2] = $32; //@line 16633
     HEAP32[$AsyncCtx10 + 12 >> 2] = $$lcssa; //@line 16635
     sp = STACKTOP; //@line 16636
     STACKTOP = sp; //@line 16637
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 16639
     break;
    }
   }
  } while (0);
  HEAP32[$7 >> 2] = $32; //@line 16644
 }
 $119 = HEAP32[$$lcssa >> 2] | 0; //@line 16646
 $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16647
 __ZL26nsapi_dns_query_async_sendPv($119); //@line 16648
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 221; //@line 16651
  sp = STACKTOP; //@line 16652
  STACKTOP = sp; //@line 16653
  return;
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 16655
 STACKTOP = sp; //@line 16656
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa87 = 0, $$sroa_idx5$i$i = 0, $1 = 0, $107 = 0, $108 = 0, $11 = 0, $122 = 0, $125 = 0, $13 = 0, $139 = 0, $142 = 0, $15 = 0, $160 = 0, $166 = 0, $172 = 0, $181 = 0, $186 = 0, $191 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $41 = 0, $44 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $8 = 0, $86 = 0, $87 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17520
 STACKTOP = STACKTOP + 32 | 0; //@line 17521
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17521
 $1 = sp + 16 | 0; //@line 17522
 $2 = sp; //@line 17523
 $3 = HEAP32[2518] | 0; //@line 17524
 if (!$3) {
  label = 3; //@line 17527
 } else {
  if ((HEAP32[$3 + 8 >> 2] | 0) == ($0 | 0)) {
   $$lcssa87 = $3; //@line 17533
  } else {
   label = 3; //@line 17535
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[2519] | 0; //@line 17540
   if ($8 | 0) {
    if ((HEAP32[$8 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa87 = $8; //@line 17547
     break;
    }
   }
   $181 = HEAP32[2520] | 0; //@line 17551
   if ($181 | 0) {
    if ((HEAP32[$181 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa87 = $181; //@line 17558
     break;
    }
   }
   $186 = HEAP32[2521] | 0; //@line 17562
   if ($186 | 0) {
    if ((HEAP32[$186 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa87 = $186; //@line 17569
     break;
    }
   }
   $191 = HEAP32[2522] | 0; //@line 17573
   if (!$191) {
    STACKTOP = sp; //@line 17576
    return;
   }
   if ((HEAP32[$191 + 8 >> 2] | 0) == ($0 | 0)) {
    $$lcssa87 = $191; //@line 17582
   } else {
    STACKTOP = sp; //@line 17584
    return;
   }
  }
 } while (0);
 $11 = HEAP32[$$lcssa87 + 56 >> 2] | 0; //@line 17589
 if (!$11) {
  STACKTOP = sp; //@line 17592
  return;
 }
 $13 = _malloc(512) | 0; //@line 17594
 if (!$13) {
  STACKTOP = sp; //@line 17597
  return;
 }
 $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17599
 $15 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 17600
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 241; //@line 17603
  HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 17605
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 17607
  HEAP32[$AsyncCtx20 + 12 >> 2] = $11; //@line 17609
  HEAP32[$AsyncCtx20 + 16 >> 2] = $13; //@line 17611
  sp = STACKTOP; //@line 17612
  STACKTOP = sp; //@line 17613
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 17615
 L28 : do {
  if (($15 | 0) >= 12) {
   $21 = $13 + 1 | 0; //@line 17619
   $22 = $1 + 12 | 0; //@line 17620
   $23 = $2 + 8 | 0; //@line 17621
   $$sroa_idx5$i$i = $2 + 4 | 0; //@line 17622
   $24 = $2 + 12 | 0; //@line 17623
   L30 : while (1) {
    $30 = (HEAPU8[$13 >> 0] | 0) << 8 | (HEAPU8[$21 >> 0] | 0); //@line 17630
    $31 = $30 & 65535; //@line 17631
    $32 = HEAP32[2518] | 0; //@line 17632
    if (!$32) {
     label = 12; //@line 17635
    } else {
     if (($30 | 0) == (HEAPU16[$32 + 80 >> 1] | 0 | 0)) {
      $$lcssa = $32; //@line 17642
      label = 13; //@line 17643
     } else {
      label = 12; //@line 17645
     }
    }
    do {
     if ((label | 0) == 12) {
      label = 0; //@line 17650
      $38 = HEAP32[2519] | 0; //@line 17651
      if ($38 | 0) {
       if (($30 | 0) == (HEAPU16[$38 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $38; //@line 17659
        label = 13; //@line 17660
        break;
       }
      }
      $160 = HEAP32[2520] | 0; //@line 17664
      if ($160 | 0) {
       if (($30 | 0) == (HEAPU16[$160 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $160; //@line 17672
        label = 13; //@line 17673
        break;
       }
      }
      $166 = HEAP32[2521] | 0; //@line 17677
      if ($166 | 0) {
       if (($30 | 0) == (HEAPU16[$166 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $166; //@line 17685
        label = 13; //@line 17686
        break;
       }
      }
      $172 = HEAP32[2522] | 0; //@line 17690
      if ($172 | 0) {
       if (($30 | 0) == (HEAPU16[$172 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $172; //@line 17698
        label = 13; //@line 17699
       }
      }
     }
    } while (0);
    do {
     if ((label | 0) == 13) {
      label = 0; //@line 17706
      $41 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 17708
      $$ = $41 >>> 0 > 1 ? $41 : 1; //@line 17710
      $AsyncCtx11 = _emscripten_alloc_async_context(68, sp) | 0; //@line 17714
      $44 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 12052) | 0; //@line 17715
      if (___async) {
       label = 14; //@line 17718
       break L30;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17721
      $61 = $$lcssa + 64 | 0; //@line 17722
      HEAP32[$61 >> 2] = $44; //@line 17723
      $63 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($13, $31, $$lcssa + 68 | 0, $44, $$) | 0; //@line 17725
      if (($63 | 0) < 0) {
       $65 = HEAP32[$61 >> 2] | 0; //@line 17728
       if ($65 | 0) {
        __ZdaPv($65); //@line 17731
       }
       HEAP32[$61 >> 2] = 0; //@line 17733
       break;
      }
      HEAP8[$$lcssa + 85 >> 0] = $63; //@line 17738
      HEAP32[$$lcssa + 4 >> 2] = -3009; //@line 17740
      HEAP32[$$lcssa + 76 >> 2] = 0; //@line 17742
      $86 = $$lcssa + 44 | 0; //@line 17743
      $87 = HEAP32[$86 >> 2] | 0; //@line 17744
      if (!$87) {
       $107 = 0; //@line 17747
      } else {
       $91 = HEAP32[$87 + 4 >> 2] | 0; //@line 17751
       $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 17752
       FUNCTION_TABLE_vii[$91 & 7]($1, $$lcssa + 32 | 0); //@line 17753
       if (___async) {
        label = 24; //@line 17756
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 17759
       $107 = HEAP32[$86 >> 2] | 0; //@line 17761
      }
      HEAP32[$22 >> 2] = $107; //@line 17763
      $108 = HEAP32[$$lcssa >> 2] | 0; //@line 17764
      HEAP32[$23 >> 2] = 0; //@line 17765
      HEAP32[$2 >> 2] = 191; //@line 17766
      HEAP32[$$sroa_idx5$i$i >> 2] = $108; //@line 17767
      HEAP32[$24 >> 2] = 724; //@line 17768
      $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17769
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 17770
      if (___async) {
       label = 27; //@line 17773
       break L30;
      }
      _emscripten_free_async_context($AsyncCtx14 | 0); //@line 17776
      $122 = HEAP32[$24 >> 2] | 0; //@line 17777
      if ($122 | 0) {
       $125 = HEAP32[$122 + 8 >> 2] | 0; //@line 17781
       $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17782
       FUNCTION_TABLE_vi[$125 & 511]($2); //@line 17783
       if (___async) {
        label = 30; //@line 17786
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17789
      }
      $139 = HEAP32[$22 >> 2] | 0; //@line 17791
      if ($139 | 0) {
       $142 = HEAP32[$139 + 8 >> 2] | 0; //@line 17795
       $AsyncCtx7 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17796
       FUNCTION_TABLE_vi[$142 & 511]($1); //@line 17797
       if (___async) {
        label = 34; //@line 17800
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17803
      }
     }
    } while (0);
    $AsyncCtx17 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17807
    $67 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 17808
    if (___async) {
     label = 20; //@line 17811
     break;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 17814
    if (($67 | 0) < 12) {
     break L28;
    }
   }
   if ((label | 0) == 14) {
    HEAP32[$AsyncCtx11 >> 2] = 242; //@line 17821
    HEAP32[$AsyncCtx11 + 4 >> 2] = $24; //@line 17823
    HEAP32[$AsyncCtx11 + 8 >> 2] = $22; //@line 17825
    HEAP32[$AsyncCtx11 + 12 >> 2] = $$lcssa; //@line 17827
    HEAP32[$AsyncCtx11 + 16 >> 2] = $23; //@line 17829
    HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 17831
    HEAP32[$AsyncCtx11 + 24 >> 2] = $$sroa_idx5$i$i; //@line 17833
    HEAP32[$AsyncCtx11 + 28 >> 2] = $1; //@line 17835
    HEAP32[$AsyncCtx11 + 32 >> 2] = $2; //@line 17837
    HEAP32[$AsyncCtx11 + 36 >> 2] = $2; //@line 17839
    HEAP32[$AsyncCtx11 + 40 >> 2] = $22; //@line 17841
    HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 17843
    HEAP32[$AsyncCtx11 + 48 >> 2] = $13; //@line 17845
    HEAP32[$AsyncCtx11 + 52 >> 2] = $21; //@line 17847
    HEAP32[$AsyncCtx11 + 56 >> 2] = $1; //@line 17849
    HEAP16[$AsyncCtx11 + 60 >> 1] = $31; //@line 17851
    HEAP32[$AsyncCtx11 + 64 >> 2] = $$; //@line 17853
    sp = STACKTOP; //@line 17854
    STACKTOP = sp; //@line 17855
    return;
   } else if ((label | 0) == 20) {
    HEAP32[$AsyncCtx17 >> 2] = 243; //@line 17858
    HEAP32[$AsyncCtx17 + 4 >> 2] = $24; //@line 17860
    HEAP32[$AsyncCtx17 + 8 >> 2] = $22; //@line 17862
    HEAP32[$AsyncCtx17 + 12 >> 2] = $23; //@line 17864
    HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 17866
    HEAP32[$AsyncCtx17 + 20 >> 2] = $$sroa_idx5$i$i; //@line 17868
    HEAP32[$AsyncCtx17 + 24 >> 2] = $1; //@line 17870
    HEAP32[$AsyncCtx17 + 28 >> 2] = $2; //@line 17872
    HEAP32[$AsyncCtx17 + 32 >> 2] = $2; //@line 17874
    HEAP32[$AsyncCtx17 + 36 >> 2] = $22; //@line 17876
    HEAP32[$AsyncCtx17 + 40 >> 2] = $11; //@line 17878
    HEAP32[$AsyncCtx17 + 44 >> 2] = $13; //@line 17880
    HEAP32[$AsyncCtx17 + 48 >> 2] = $21; //@line 17882
    HEAP32[$AsyncCtx17 + 52 >> 2] = $1; //@line 17884
    sp = STACKTOP; //@line 17885
    STACKTOP = sp; //@line 17886
    return;
   } else if ((label | 0) == 24) {
    HEAP32[$AsyncCtx >> 2] = 244; //@line 17889
    HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 17891
    HEAP32[$AsyncCtx + 8 >> 2] = $22; //@line 17893
    HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 17895
    HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 17897
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 17899
    HEAP32[$AsyncCtx + 24 >> 2] = $$sroa_idx5$i$i; //@line 17901
    HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 17903
    HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 17905
    HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 17907
    HEAP32[$AsyncCtx + 40 >> 2] = $22; //@line 17909
    HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 17911
    HEAP32[$AsyncCtx + 48 >> 2] = $13; //@line 17913
    HEAP32[$AsyncCtx + 52 >> 2] = $21; //@line 17915
    HEAP32[$AsyncCtx + 56 >> 2] = $86; //@line 17917
    HEAP32[$AsyncCtx + 60 >> 2] = $1; //@line 17919
    sp = STACKTOP; //@line 17920
    STACKTOP = sp; //@line 17921
    return;
   } else if ((label | 0) == 27) {
    HEAP32[$AsyncCtx14 >> 2] = 245; //@line 17924
    HEAP32[$AsyncCtx14 + 4 >> 2] = $24; //@line 17926
    HEAP32[$AsyncCtx14 + 8 >> 2] = $22; //@line 17928
    HEAP32[$AsyncCtx14 + 12 >> 2] = $23; //@line 17930
    HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 17932
    HEAP32[$AsyncCtx14 + 20 >> 2] = $$sroa_idx5$i$i; //@line 17934
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 17936
    HEAP32[$AsyncCtx14 + 28 >> 2] = $2; //@line 17938
    HEAP32[$AsyncCtx14 + 32 >> 2] = $2; //@line 17940
    HEAP32[$AsyncCtx14 + 36 >> 2] = $22; //@line 17942
    HEAP32[$AsyncCtx14 + 40 >> 2] = $11; //@line 17944
    HEAP32[$AsyncCtx14 + 44 >> 2] = $13; //@line 17946
    HEAP32[$AsyncCtx14 + 48 >> 2] = $21; //@line 17948
    HEAP32[$AsyncCtx14 + 52 >> 2] = $1; //@line 17950
    sp = STACKTOP; //@line 17951
    STACKTOP = sp; //@line 17952
    return;
   } else if ((label | 0) == 30) {
    HEAP32[$AsyncCtx3 >> 2] = 246; //@line 17955
    HEAP32[$AsyncCtx3 + 4 >> 2] = $24; //@line 17957
    HEAP32[$AsyncCtx3 + 8 >> 2] = $22; //@line 17959
    HEAP32[$AsyncCtx3 + 12 >> 2] = $23; //@line 17961
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 17963
    HEAP32[$AsyncCtx3 + 20 >> 2] = $$sroa_idx5$i$i; //@line 17965
    HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 17967
    HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 17969
    HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 17971
    HEAP32[$AsyncCtx3 + 36 >> 2] = $22; //@line 17973
    HEAP32[$AsyncCtx3 + 40 >> 2] = $11; //@line 17975
    HEAP32[$AsyncCtx3 + 44 >> 2] = $13; //@line 17977
    HEAP32[$AsyncCtx3 + 48 >> 2] = $21; //@line 17979
    HEAP32[$AsyncCtx3 + 52 >> 2] = $1; //@line 17981
    sp = STACKTOP; //@line 17982
    STACKTOP = sp; //@line 17983
    return;
   } else if ((label | 0) == 34) {
    HEAP32[$AsyncCtx7 >> 2] = 247; //@line 17986
    HEAP32[$AsyncCtx7 + 4 >> 2] = $24; //@line 17988
    HEAP32[$AsyncCtx7 + 8 >> 2] = $22; //@line 17990
    HEAP32[$AsyncCtx7 + 12 >> 2] = $23; //@line 17992
    HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 17994
    HEAP32[$AsyncCtx7 + 20 >> 2] = $$sroa_idx5$i$i; //@line 17996
    HEAP32[$AsyncCtx7 + 24 >> 2] = $1; //@line 17998
    HEAP32[$AsyncCtx7 + 28 >> 2] = $2; //@line 18000
    HEAP32[$AsyncCtx7 + 32 >> 2] = $2; //@line 18002
    HEAP32[$AsyncCtx7 + 36 >> 2] = $22; //@line 18004
    HEAP32[$AsyncCtx7 + 40 >> 2] = $11; //@line 18006
    HEAP32[$AsyncCtx7 + 44 >> 2] = $13; //@line 18008
    HEAP32[$AsyncCtx7 + 48 >> 2] = $21; //@line 18010
    HEAP32[$AsyncCtx7 + 52 >> 2] = $1; //@line 18012
    sp = STACKTOP; //@line 18013
    STACKTOP = sp; //@line 18014
    return;
   }
  }
 } while (0);
 _free($13); //@line 18018
 STACKTOP = sp; //@line 18019
 return;
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 2295
 $6 = HEAP32[$5 >> 2] | 0; //@line 2296
 $7 = $0 + 100 | 0; //@line 2297
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 2302
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 2305
  $$0142 = 0; //@line 2305
 } else {
  $$0 = ___shgetc($0) | 0; //@line 2308
  $$0142 = 0; //@line 2308
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 2313
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 2321
    $$0148 = 0; //@line 2321
    $$0152 = 1.0; //@line 2321
    $$0155 = 0.0; //@line 2321
    $$0159 = 0; //@line 2321
    $$2 = $$0; //@line 2321
    $$2144 = $$0142; //@line 2321
    $51 = 0; //@line 2321
    $53 = 0; //@line 2321
    $96 = 0; //@line 2321
    $98 = 0; //@line 2321
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 2325
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 2330
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 2333
   $$0142 = 1; //@line 2333
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 2337
   $$0142 = 1; //@line 2337
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 2342
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 2347
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 2350
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 2353
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 2357
   $37 = 0; //@line 2357
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 2359
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 2364
     $41 = HEAPU8[$29 >> 0] | 0; //@line 2367
    } else {
     $41 = ___shgetc($0) | 0; //@line 2370
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 2372
    $39 = tempRet0; //@line 2373
    if (($41 | 0) == 48) {
     $36 = $38; //@line 2376
     $37 = $39; //@line 2376
    } else {
     $$0146 = 1; //@line 2378
     $$0148 = 0; //@line 2378
     $$0152 = 1.0; //@line 2378
     $$0155 = 0.0; //@line 2378
     $$0159 = 0; //@line 2378
     $$2 = $41; //@line 2378
     $$2144 = 1; //@line 2378
     $51 = 0; //@line 2378
     $53 = 0; //@line 2378
     $96 = $38; //@line 2378
     $98 = $39; //@line 2378
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 2383
   $$0148 = 0; //@line 2383
   $$0152 = 1.0; //@line 2383
   $$0155 = 0.0; //@line 2383
   $$0159 = 0; //@line 2383
   $$2 = $$1$ph; //@line 2383
   $$2144 = $$0142; //@line 2383
   $51 = 0; //@line 2383
   $53 = 0; //@line 2383
   $96 = 0; //@line 2383
   $98 = 0; //@line 2383
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 2387
  $$pre = $$2 | 32; //@line 2389
  if ($42 >>> 0 < 10) {
   label = 20; //@line 2391
  } else {
   $46 = ($$2 | 0) == 46; //@line 2395
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 2398
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 2404
     $$2150 = $$0148; //@line 2404
     $$2154 = $$0152; //@line 2404
     $$2157 = $$0155; //@line 2404
     $$2161 = $$0159; //@line 2404
     $$3145 = $$2144; //@line 2404
     $211 = $53; //@line 2404
     $212 = $51; //@line 2404
     $213 = $53; //@line 2404
     $214 = $51; //@line 2404
    } else {
     $$2$lcssa = 46; //@line 2406
     break;
    }
   } else {
    label = 20; //@line 2410
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 2414
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 2417
   do {
    if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
     $$1149 = $$0148; //@line 2427
     $$1153 = $$0152; //@line 2427
     $$1156 = $$0155; //@line 2427
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 2427
    } else {
     if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 2436
      $$1149 = $$0148; //@line 2439
      $$1153 = $65; //@line 2439
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 2439
      $$1160 = $$0159; //@line 2439
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 2444
      $$1149 = $or$cond ? $$0148 : 1; //@line 2449
      $$1153 = $$0152; //@line 2449
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 2449
      $$1160 = $$0159; //@line 2449
      break;
     }
    }
   } while (0);
   $72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0; //@line 2454
   $$1147 = $$0146; //@line 2456
   $$2150 = $$1149; //@line 2456
   $$2154 = $$1153; //@line 2456
   $$2157 = $$1156; //@line 2456
   $$2161 = $$1160; //@line 2456
   $$3145 = 1; //@line 2456
   $211 = $96; //@line 2456
   $212 = $98; //@line 2456
   $213 = $72; //@line 2456
   $214 = tempRet0; //@line 2456
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 2458
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 2463
   $$0146 = $$1147; //@line 2466
   $$0148 = $$2150; //@line 2466
   $$0152 = $$2154; //@line 2466
   $$0155 = $$2157; //@line 2466
   $$0159 = $$2161; //@line 2466
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 2466
   $$2144 = $$3145; //@line 2466
   $51 = $214; //@line 2466
   $53 = $213; //@line 2466
   $96 = $211; //@line 2466
   $98 = $212; //@line 2466
   continue;
  } else {
   $$0146 = $$1147; //@line 2470
   $$0148 = $$2150; //@line 2470
   $$0152 = $$2154; //@line 2470
   $$0155 = $$2157; //@line 2470
   $$0159 = $$2161; //@line 2470
   $$2 = ___shgetc($0) | 0; //@line 2470
   $$2144 = $$3145; //@line 2470
   $51 = $214; //@line 2470
   $53 = $213; //@line 2470
   $96 = $211; //@line 2470
   $98 = $212; //@line 2470
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 2478
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 2482
   }
   if (!$4) {
    ___shlim($0, 0); //@line 2486
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 2491
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 2498
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 2503
  } else {
   $94 = ($$0146 | 0) == 0; //@line 2505
   $95 = $94 ? $53 : $96; //@line 2506
   $97 = $94 ? $51 : $98; //@line 2507
   if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 2514
    $105 = $53; //@line 2514
    $106 = $51; //@line 2514
    while (1) {
     $104 = $$3162183 << 4; //@line 2516
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 2517
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 2527
      break;
     } else {
      $$3162183 = $104; //@line 2525
      $106 = tempRet0; //@line 2525
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 2532
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 2537
    $117 = tempRet0; //@line 2538
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 2545
      $$0165 = 0.0; //@line 2546
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 2552
      $135 = 0; //@line 2552
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 2556
      $134 = 0; //@line 2557
      $135 = 0; //@line 2557
     }
    } else {
     $134 = $116; //@line 2560
     $135 = $117; //@line 2560
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 2566
     $135 = 0; //@line 2566
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 2570
     $134 = 0; //@line 2571
     $135 = 0; //@line 2571
    }
   }
   $130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0; //@line 2574
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 2576
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 2578
   $137 = tempRet0; //@line 2579
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 2584
    break;
   }
   $141 = 0 - $2 | 0; //@line 2587
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 2589
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 2597
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 2601
    break;
   }
   $153 = $2 + -106 | 0; //@line 2604
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 2606
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 2614
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 2618
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 2623
    $$4163178 = $$3162$lcssa; //@line 2623
    $170 = $136; //@line 2623
    $171 = $137; //@line 2623
    while (1) {
     $166 = !($$3158179 >= .5); //@line 2625
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 2630
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 2632
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 2633
     $173 = tempRet0; //@line 2634
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 2637
      $$4163178 = $$5164; //@line 2637
      $170 = $172; //@line 2637
      $171 = $173; //@line 2637
     } else {
      $$3158$lcssa = $$4; //@line 2639
      $$4163$lcssa = $$5164; //@line 2639
      $181 = $172; //@line 2639
      $182 = $173; //@line 2639
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 2644
    $$4163$lcssa = $$3162$lcssa; //@line 2644
    $181 = $136; //@line 2644
    $182 = $137; //@line 2644
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 2647
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 2650
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 2652
   $184 = tempRet0; //@line 2653
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 2662
     label = 59; //@line 2663
    } else {
     $$0166170 = 0; //@line 2665
     $194 = 84; //@line 2665
     label = 61; //@line 2666
    }
   } else {
    $$0166 = $1; //@line 2669
    label = 59; //@line 2670
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 2676
     $194 = 84 - $$0166 | 0; //@line 2676
     label = 61; //@line 2677
    } else {
     $$0151 = 0.0; //@line 2680
     $$0166169 = $$0166; //@line 2680
     $$pre$phi201Z2D = +($3 | 0); //@line 2680
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 2684
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 2687
    $$0166169 = $$0166170; //@line 2687
    $$pre$phi201Z2D = $193; //@line 2687
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 2694
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 2703
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 2707
   }
   $$0165 = +_scalbnl($207, $181); //@line 2710
  }
 } while (0);
 return +$$0165;
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7336
 STACKTOP = STACKTOP + 1056 | 0; //@line 7337
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 7337
 $2 = sp + 1024 | 0; //@line 7338
 $3 = sp; //@line 7339
 HEAP32[$2 >> 2] = 0; //@line 7340
 HEAP32[$2 + 4 >> 2] = 0; //@line 7340
 HEAP32[$2 + 8 >> 2] = 0; //@line 7340
 HEAP32[$2 + 12 >> 2] = 0; //@line 7340
 HEAP32[$2 + 16 >> 2] = 0; //@line 7340
 HEAP32[$2 + 20 >> 2] = 0; //@line 7340
 HEAP32[$2 + 24 >> 2] = 0; //@line 7340
 HEAP32[$2 + 28 >> 2] = 0; //@line 7340
 $4 = HEAP8[$1 >> 0] | 0; //@line 7341
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 7345
   $$0185$ph$lcssa327 = -1; //@line 7345
   $$0187219$ph325326 = 0; //@line 7345
   $$1176$ph$ph$lcssa208 = 1; //@line 7345
   $$1186$ph$lcssa = -1; //@line 7345
   label = 26; //@line 7346
  } else {
   $$0187263 = 0; //@line 7348
   $10 = $4; //@line 7348
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 7354
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 7362
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 7365
    $$0187263 = $$0187263 + 1 | 0; //@line 7366
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 7369
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 7371
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 7379
   if ($23) {
    $$0183$ph260 = 0; //@line 7381
    $$0185$ph259 = -1; //@line 7381
    $130 = 1; //@line 7381
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 7383
     $$0183$ph197$ph253 = $$0183$ph260; //@line 7383
     $131 = $130; //@line 7383
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 7385
      $132 = $131; //@line 7385
      L10 : while (1) {
       $$0179242 = 1; //@line 7387
       $25 = $132; //@line 7387
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 7391
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 7393
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 7399
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 7403
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 7408
         $$0185$ph$lcssa = $$0185$ph259; //@line 7408
         break L6;
        } else {
         $25 = $27; //@line 7406
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 7412
       $132 = $37 + 1 | 0; //@line 7413
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 7418
        $$0185$ph$lcssa = $$0185$ph259; //@line 7418
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 7416
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 7423
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 7427
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 7432
       $$0185$ph$lcssa = $$0185$ph259; //@line 7432
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 7430
       $$0183$ph197$ph253 = $25; //@line 7430
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 7437
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 7442
      $$0185$ph$lcssa = $$0183$ph197248; //@line 7442
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 7440
      $$0185$ph259 = $$0183$ph197248; //@line 7440
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 7447
     $$1186$ph238 = -1; //@line 7447
     $133 = 1; //@line 7447
     while (1) {
      $$1176$ph$ph233 = 1; //@line 7449
      $$1184$ph193$ph232 = $$1184$ph239; //@line 7449
      $135 = $133; //@line 7449
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 7451
       $134 = $135; //@line 7451
       L25 : while (1) {
        $$1180222 = 1; //@line 7453
        $52 = $134; //@line 7453
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 7457
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 7459
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 7465
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 7469
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 7474
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 7474
          $$0187219$ph325326 = $$0187263; //@line 7474
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 7474
          $$1186$ph$lcssa = $$1186$ph238; //@line 7474
          label = 26; //@line 7475
          break L1;
         } else {
          $52 = $45; //@line 7472
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 7479
        $134 = $56 + 1 | 0; //@line 7480
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 7485
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 7485
         $$0187219$ph325326 = $$0187263; //@line 7485
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 7485
         $$1186$ph$lcssa = $$1186$ph238; //@line 7485
         label = 26; //@line 7486
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 7483
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 7491
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 7495
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 7500
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 7500
        $$0187219$ph325326 = $$0187263; //@line 7500
        $$1176$ph$ph$lcssa208 = $60; //@line 7500
        $$1186$ph$lcssa = $$1186$ph238; //@line 7500
        label = 26; //@line 7501
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 7498
        $$1184$ph193$ph232 = $52; //@line 7498
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 7506
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 7511
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 7511
       $$0187219$ph325326 = $$0187263; //@line 7511
       $$1176$ph$ph$lcssa208 = 1; //@line 7511
       $$1186$ph$lcssa = $$1184$ph193227; //@line 7511
       label = 26; //@line 7512
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 7509
       $$1186$ph238 = $$1184$ph193227; //@line 7509
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 7517
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 7517
     $$0187219$ph325326 = $$0187263; //@line 7517
     $$1176$ph$ph$lcssa208 = 1; //@line 7517
     $$1186$ph$lcssa = -1; //@line 7517
     label = 26; //@line 7518
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 7521
    $$0185$ph$lcssa327 = -1; //@line 7521
    $$0187219$ph325326 = $$0187263; //@line 7521
    $$1176$ph$ph$lcssa208 = 1; //@line 7521
    $$1186$ph$lcssa = -1; //@line 7521
    label = 26; //@line 7522
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 7530
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 7531
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 7532
   $70 = $$1186$$0185 + 1 | 0; //@line 7534
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 7539
    $$3178 = $$1176$$0175; //@line 7539
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 7542
    $$0168 = 0; //@line 7546
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 7546
   }
   $78 = $$0187219$ph325326 | 63; //@line 7548
   $79 = $$0187219$ph325326 + -1 | 0; //@line 7549
   $80 = ($$0168 | 0) != 0; //@line 7550
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 7551
   $$0166 = $0; //@line 7552
   $$0169 = 0; //@line 7552
   $$0170 = $0; //@line 7552
   while (1) {
    $83 = $$0166; //@line 7555
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 7560
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 7564
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 7571
        break L35;
       } else {
        $$3173 = $86; //@line 7574
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 7579
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 7583
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 7595
      $$2181$sink = $$0187219$ph325326; //@line 7595
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 7600
      if ($105 | 0) {
       $$0169$be = 0; //@line 7608
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 7608
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 7612
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 7614
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 7618
       } else {
        $$3182221 = $111; //@line 7620
        $$pr = $113; //@line 7620
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 7628
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 7630
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 7633
          break L54;
         } else {
          $$3182221 = $118; //@line 7636
         }
        }
        $$0169$be = 0; //@line 7640
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 7640
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 7647
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 7650
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 7659
        $$2181$sink = $$3178; //@line 7659
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 7666
    $$0169 = $$0169$be; //@line 7666
    $$0170 = $$3173; //@line 7666
   }
  }
 } while (0);
 STACKTOP = sp; //@line 7670
 return $$3 | 0; //@line 7670
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_80($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $10 = 0, $100 = 0, $102 = 0, $110 = 0, $113 = 0, $115 = 0, $12 = 0, $123 = 0, $126 = 0, $128 = 0, $136 = 0, $139 = 0, $14 = 0, $141 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $28 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17563
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17565
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17567
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17569
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17571
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17573
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17575
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17577
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17579
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17581
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17583
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17585
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17591
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17593
 HEAP32[HEAP32[$0 + 48 >> 2] >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] >> 2]; //@line 17595
 HEAP32[$6 + 8 >> 2] = $14; //@line 17597
 HEAP32[$6 + 48 >> 2] = $20; //@line 17599
 HEAP32[$6 + 52 >> 2] = $22; //@line 17601
 $34 = $6 + 56 | 0; //@line 17602
 HEAP32[$34 >> 2] = 0; //@line 17603
 $35 = $6 + 60 | 0; //@line 17604
 HEAP32[$35 >> 2] = 0; //@line 17605
 HEAP32[$6 + 64 >> 2] = 0; //@line 17607
 HEAP8[$6 + 82 >> 0] = 0; //@line 17609
 HEAP8[$6 + 83 >> 0] = 1; //@line 17611
 HEAP8[$6 + 84 >> 0] = 3; //@line 17613
 HEAP16[$6 + 80 >> 1] = 0; //@line 17615
 HEAP32[$6 + 76 >> 2] = 0; //@line 17617
 $42 = $6 + 72 | 0; //@line 17618
 HEAP32[$42 >> 2] = 15500; //@line 17619
 $43 = HEAP32[177] | 0; //@line 17620
 HEAP32[177] = $43 + 1; //@line 17622
 $$ = ($43 | 0) > 32767 ? 1 : $43; //@line 17624
 HEAP32[$6 >> 2] = $$; //@line 17625
 $46 = HEAP32[2518] | 0; //@line 17626
 if (!$46) {
  $$1 = 0; //@line 17629
  $100 = 0; //@line 17629
 } else {
  $49 = HEAP32[$46 + 56 >> 2] | 0; //@line 17632
  if (!$49) {
   $$1 = 1; //@line 17635
   $100 = 0; //@line 17635
  } else {
   if ((HEAP32[$46 + 8 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$34 >> 2] = $49; //@line 17641
    HEAP32[$35 >> 2] = HEAP32[$46 + 60 >> 2]; //@line 17644
    $$1 = 1; //@line 17645
    $100 = $49; //@line 17645
   } else {
    $$1 = 1; //@line 17647
    $100 = 0; //@line 17647
   }
  }
 }
 $56 = HEAP32[2519] | 0; //@line 17651
 if (!$56) {
  $$1$1 = $$1; //@line 17654
  $113 = $100; //@line 17654
 } else {
  if (!$100) {
   $102 = HEAP32[$56 + 56 >> 2] | 0; //@line 17659
   if (!$102) {
    $155 = 0; //@line 17662
   } else {
    if ((HEAP32[$56 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$34 >> 2] = $102; //@line 17668
     HEAP32[$35 >> 2] = HEAP32[$56 + 60 >> 2]; //@line 17671
     $155 = $102; //@line 17672
    } else {
     $155 = 0; //@line 17674
    }
   }
  } else {
   $155 = $100; //@line 17678
  }
  $$1$1 = $$1 + 1 | 0; //@line 17681
  $113 = $155; //@line 17681
 }
 $110 = HEAP32[2520] | 0; //@line 17683
 if (!$110) {
  $$1$2 = $$1$1; //@line 17686
  $126 = $113; //@line 17686
 } else {
  if (!$113) {
   $115 = HEAP32[$110 + 56 >> 2] | 0; //@line 17691
   if (!$115) {
    $156 = 0; //@line 17694
   } else {
    if ((HEAP32[$110 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$34 >> 2] = $115; //@line 17700
     HEAP32[$35 >> 2] = HEAP32[$110 + 60 >> 2]; //@line 17703
     $156 = $115; //@line 17704
    } else {
     $156 = 0; //@line 17706
    }
   }
  } else {
   $156 = $113; //@line 17710
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 17713
  $126 = $156; //@line 17713
 }
 $123 = HEAP32[2521] | 0; //@line 17715
 if (!$123) {
  $$1$3 = $$1$2; //@line 17718
  $139 = $126; //@line 17718
 } else {
  if (!$126) {
   $128 = HEAP32[$123 + 56 >> 2] | 0; //@line 17723
   if (!$128) {
    $157 = 0; //@line 17726
   } else {
    if ((HEAP32[$123 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$34 >> 2] = $128; //@line 17732
     HEAP32[$35 >> 2] = HEAP32[$123 + 60 >> 2]; //@line 17735
     $157 = $128; //@line 17736
    } else {
     $157 = 0; //@line 17738
    }
   }
  } else {
   $157 = $126; //@line 17742
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 17745
  $139 = $157; //@line 17745
 }
 $136 = HEAP32[2522] | 0; //@line 17747
 if (!$136) {
  HEAP32[10072 + ($30 << 2) >> 2] = $6; //@line 17751
  HEAP32[$42 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 17754
  if (!$$1$3) {
   $58 = $6 + 44 | 0; //@line 17757
   $59 = HEAP32[$58 >> 2] | 0; //@line 17758
   if (!$59) {
    $75 = $2 + 12 | 0; //@line 17761
    HEAP32[$75 >> 2] = 0; //@line 17762
    $77 = $10 + 4 | 0; //@line 17764
    HEAP32[$77 >> 2] = 0; //@line 17766
    HEAP32[$77 + 4 >> 2] = 0; //@line 17769
    HEAP32[$10 >> 2] = 3; //@line 17770
    $81 = $10 + 12 | 0; //@line 17771
    HEAP32[$81 >> 2] = 712; //@line 17772
    $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 17773
    $82 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $10) | 0; //@line 17774
    if (___async) {
     HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 17777
     $83 = $ReallocAsyncCtx19 + 4 | 0; //@line 17778
     HEAP32[$83 >> 2] = $8; //@line 17779
     $84 = $ReallocAsyncCtx19 + 8 | 0; //@line 17780
     HEAP32[$84 >> 2] = $6; //@line 17781
     $85 = $ReallocAsyncCtx19 + 12 | 0; //@line 17782
     HEAP32[$85 >> 2] = $6; //@line 17783
     $86 = $ReallocAsyncCtx19 + 16 | 0; //@line 17784
     HEAP32[$86 >> 2] = $12; //@line 17785
     $87 = $ReallocAsyncCtx19 + 20 | 0; //@line 17786
     HEAP32[$87 >> 2] = $58; //@line 17787
     $88 = $ReallocAsyncCtx19 + 24 | 0; //@line 17788
     HEAP32[$88 >> 2] = $4; //@line 17789
     $89 = $ReallocAsyncCtx19 + 28 | 0; //@line 17790
     HEAP32[$89 >> 2] = $16; //@line 17791
     $90 = $ReallocAsyncCtx19 + 32 | 0; //@line 17792
     HEAP32[$90 >> 2] = $18; //@line 17793
     $91 = $ReallocAsyncCtx19 + 36 | 0; //@line 17794
     HEAP32[$91 >> 2] = $58; //@line 17795
     $92 = $ReallocAsyncCtx19 + 40 | 0; //@line 17796
     HEAP32[$92 >> 2] = $28; //@line 17797
     $93 = $ReallocAsyncCtx19 + 44 | 0; //@line 17798
     HEAP32[$93 >> 2] = $75; //@line 17799
     $94 = $ReallocAsyncCtx19 + 48 | 0; //@line 17800
     HEAP32[$94 >> 2] = $10; //@line 17801
     $95 = $ReallocAsyncCtx19 + 52 | 0; //@line 17802
     HEAP32[$95 >> 2] = $2; //@line 17803
     $96 = $ReallocAsyncCtx19 + 56 | 0; //@line 17804
     HEAP32[$96 >> 2] = $81; //@line 17805
     sp = STACKTOP; //@line 17806
     return;
    }
    HEAP32[___async_retval >> 2] = $82; //@line 17810
    ___async_unwind = 0; //@line 17811
    HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 17812
    $83 = $ReallocAsyncCtx19 + 4 | 0; //@line 17813
    HEAP32[$83 >> 2] = $8; //@line 17814
    $84 = $ReallocAsyncCtx19 + 8 | 0; //@line 17815
    HEAP32[$84 >> 2] = $6; //@line 17816
    $85 = $ReallocAsyncCtx19 + 12 | 0; //@line 17817
    HEAP32[$85 >> 2] = $6; //@line 17818
    $86 = $ReallocAsyncCtx19 + 16 | 0; //@line 17819
    HEAP32[$86 >> 2] = $12; //@line 17820
    $87 = $ReallocAsyncCtx19 + 20 | 0; //@line 17821
    HEAP32[$87 >> 2] = $58; //@line 17822
    $88 = $ReallocAsyncCtx19 + 24 | 0; //@line 17823
    HEAP32[$88 >> 2] = $4; //@line 17824
    $89 = $ReallocAsyncCtx19 + 28 | 0; //@line 17825
    HEAP32[$89 >> 2] = $16; //@line 17826
    $90 = $ReallocAsyncCtx19 + 32 | 0; //@line 17827
    HEAP32[$90 >> 2] = $18; //@line 17828
    $91 = $ReallocAsyncCtx19 + 36 | 0; //@line 17829
    HEAP32[$91 >> 2] = $58; //@line 17830
    $92 = $ReallocAsyncCtx19 + 40 | 0; //@line 17831
    HEAP32[$92 >> 2] = $28; //@line 17832
    $93 = $ReallocAsyncCtx19 + 44 | 0; //@line 17833
    HEAP32[$93 >> 2] = $75; //@line 17834
    $94 = $ReallocAsyncCtx19 + 48 | 0; //@line 17835
    HEAP32[$94 >> 2] = $10; //@line 17836
    $95 = $ReallocAsyncCtx19 + 52 | 0; //@line 17837
    HEAP32[$95 >> 2] = $2; //@line 17838
    $96 = $ReallocAsyncCtx19 + 56 | 0; //@line 17839
    HEAP32[$96 >> 2] = $81; //@line 17840
    sp = STACKTOP; //@line 17841
    return;
   } else {
    $62 = HEAP32[$59 + 4 >> 2] | 0; //@line 17845
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(52) | 0; //@line 17846
    FUNCTION_TABLE_vii[$62 & 7]($2, $4); //@line 17847
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 17850
     $63 = $ReallocAsyncCtx6 + 4 | 0; //@line 17851
     HEAP32[$63 >> 2] = $8; //@line 17852
     $64 = $ReallocAsyncCtx6 + 8 | 0; //@line 17853
     HEAP32[$64 >> 2] = $58; //@line 17854
     $65 = $ReallocAsyncCtx6 + 12 | 0; //@line 17855
     HEAP32[$65 >> 2] = $2; //@line 17856
     $66 = $ReallocAsyncCtx6 + 16 | 0; //@line 17857
     HEAP32[$66 >> 2] = $10; //@line 17858
     $67 = $ReallocAsyncCtx6 + 20 | 0; //@line 17859
     HEAP32[$67 >> 2] = $6; //@line 17860
     $68 = $ReallocAsyncCtx6 + 24 | 0; //@line 17861
     HEAP32[$68 >> 2] = $6; //@line 17862
     $69 = $ReallocAsyncCtx6 + 28 | 0; //@line 17863
     HEAP32[$69 >> 2] = $12; //@line 17864
     $70 = $ReallocAsyncCtx6 + 32 | 0; //@line 17865
     HEAP32[$70 >> 2] = $58; //@line 17866
     $71 = $ReallocAsyncCtx6 + 36 | 0; //@line 17867
     HEAP32[$71 >> 2] = $16; //@line 17868
     $72 = $ReallocAsyncCtx6 + 40 | 0; //@line 17869
     HEAP32[$72 >> 2] = $4; //@line 17870
     $73 = $ReallocAsyncCtx6 + 44 | 0; //@line 17871
     HEAP32[$73 >> 2] = $18; //@line 17872
     $74 = $ReallocAsyncCtx6 + 48 | 0; //@line 17873
     HEAP32[$74 >> 2] = $28; //@line 17874
     sp = STACKTOP; //@line 17875
     return;
    }
    ___async_unwind = 0; //@line 17878
    HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 17879
    $63 = $ReallocAsyncCtx6 + 4 | 0; //@line 17880
    HEAP32[$63 >> 2] = $8; //@line 17881
    $64 = $ReallocAsyncCtx6 + 8 | 0; //@line 17882
    HEAP32[$64 >> 2] = $58; //@line 17883
    $65 = $ReallocAsyncCtx6 + 12 | 0; //@line 17884
    HEAP32[$65 >> 2] = $2; //@line 17885
    $66 = $ReallocAsyncCtx6 + 16 | 0; //@line 17886
    HEAP32[$66 >> 2] = $10; //@line 17887
    $67 = $ReallocAsyncCtx6 + 20 | 0; //@line 17888
    HEAP32[$67 >> 2] = $6; //@line 17889
    $68 = $ReallocAsyncCtx6 + 24 | 0; //@line 17890
    HEAP32[$68 >> 2] = $6; //@line 17891
    $69 = $ReallocAsyncCtx6 + 28 | 0; //@line 17892
    HEAP32[$69 >> 2] = $12; //@line 17893
    $70 = $ReallocAsyncCtx6 + 32 | 0; //@line 17894
    HEAP32[$70 >> 2] = $58; //@line 17895
    $71 = $ReallocAsyncCtx6 + 36 | 0; //@line 17896
    HEAP32[$71 >> 2] = $16; //@line 17897
    $72 = $ReallocAsyncCtx6 + 40 | 0; //@line 17898
    HEAP32[$72 >> 2] = $4; //@line 17899
    $73 = $ReallocAsyncCtx6 + 44 | 0; //@line 17900
    HEAP32[$73 >> 2] = $18; //@line 17901
    $74 = $ReallocAsyncCtx6 + 48 | 0; //@line 17902
    HEAP32[$74 >> 2] = $28; //@line 17903
    sp = STACKTOP; //@line 17904
    return;
   }
  }
 } else {
  if (!$139) {
   $141 = HEAP32[$136 + 56 >> 2] | 0; //@line 17912
   if ($141 | 0) {
    if ((HEAP32[$136 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$34 >> 2] = $141; //@line 17919
     HEAP32[$35 >> 2] = HEAP32[$136 + 60 >> 2]; //@line 17922
    }
   }
  }
  HEAP32[10072 + ($30 << 2) >> 2] = $6; //@line 17927
  HEAP32[$42 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 17930
 }
 HEAP32[___async_retval >> 2] = $$; //@line 17933
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010 = 0, $$012 = 0, $$111 = 0, $$byval_copy42 = 0, $102 = 0, $105 = 0, $11 = 0, $110 = 0, $113 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $4 = 0, $42 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $92 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9592
 STACKTOP = STACKTOP + 224 | 0; //@line 9593
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 9593
 $$byval_copy42 = sp + 204 | 0; //@line 9594
 $4 = sp + 120 | 0; //@line 9595
 $5 = sp + 184 | 0; //@line 9596
 $6 = sp + 56 | 0; //@line 9597
 $7 = sp + 32 | 0; //@line 9598
 $8 = sp + 16 | 0; //@line 9599
 $9 = sp; //@line 9600
 HEAP32[$5 >> 2] = 0; //@line 9601
 HEAP32[$5 + 4 >> 2] = 0; //@line 9601
 HEAP32[$5 + 8 >> 2] = 0; //@line 9601
 HEAP32[$5 + 12 >> 2] = 0; //@line 9601
 HEAP32[$5 + 16 >> 2] = 0; //@line 9601
 HEAP32[$$byval_copy42 >> 2] = HEAP32[$5 >> 2]; //@line 9602
 HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 9602
 HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 9602
 HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 9602
 HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 9602
 __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy42, 0); //@line 9603
 $11 = ($3 | 0) == 0; //@line 9605
 if (__ZN13SocketAddress14set_ip_addressEPKc($4, $1) | 0) {
  if (!$11) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($4) | 0) != ($3 | 0)) {
    $$012 = -3009; //@line 9611
    STACKTOP = sp; //@line 9612
    return $$012 | 0; //@line 9612
   }
  }
  $14 = $2 + 12 | 0; //@line 9615
  $15 = HEAP32[$14 >> 2] | 0; //@line 9616
  do {
   if (!$15) {
    $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9620
    _mbed_assert_internal(6023, 6028, 1677); //@line 9621
    if (___async) {
     HEAP32[$AsyncCtx31 >> 2] = 100; //@line 9624
     HEAP32[$AsyncCtx31 + 4 >> 2] = $14; //@line 9626
     HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 9628
     HEAP32[$AsyncCtx31 + 12 >> 2] = $4; //@line 9630
     HEAP32[$AsyncCtx31 + 16 >> 2] = $4; //@line 9632
     sp = STACKTOP; //@line 9633
     STACKTOP = sp; //@line 9634
     return 0; //@line 9634
    } else {
     _emscripten_free_async_context($AsyncCtx31 | 0); //@line 9636
     $22 = HEAP32[$14 >> 2] | 0; //@line 9638
     break;
    }
   } else {
    $22 = $15; //@line 9642
   }
  } while (0);
  $21 = HEAP32[$22 >> 2] | 0; //@line 9645
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9646
  FUNCTION_TABLE_viii[$21 & 0]($2, 0, $4); //@line 9647
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 101; //@line 9650
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 9652
   sp = STACKTOP; //@line 9653
   STACKTOP = sp; //@line 9654
   return 0; //@line 9654
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9656
  $$012 = 0; //@line 9657
  STACKTOP = sp; //@line 9658
  return $$012 | 0; //@line 9658
 }
 if ($11) {
  HEAP32[$7 >> 2] = 0; //@line 9661
  HEAP32[$7 + 4 >> 2] = 0; //@line 9661
  HEAP32[$7 + 8 >> 2] = 0; //@line 9661
  HEAP32[$7 + 12 >> 2] = 0; //@line 9661
  HEAP32[$7 + 16 >> 2] = 0; //@line 9661
  HEAP32[$$byval_copy42 >> 2] = HEAP32[$7 >> 2]; //@line 9662
  HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 9662
  HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 9662
  HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 9662
  HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 9662
  __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy42, 0); //@line 9663
  $26 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 9666
  $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 9667
  $27 = FUNCTION_TABLE_ii[$26 & 31]($0) | 0; //@line 9668
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 102; //@line 9671
   HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 9673
   HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 9675
   HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 9677
   HEAP32[$AsyncCtx2 + 16 >> 2] = $$byval_copy42; //@line 9679
   HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 9681
   HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 9683
   HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 9685
   HEAP32[$AsyncCtx2 + 32 >> 2] = $6; //@line 9687
   HEAP32[$AsyncCtx2 + 36 >> 2] = $6; //@line 9689
   HEAP32[$AsyncCtx2 + 40 >> 2] = $3; //@line 9691
   sp = STACKTOP; //@line 9692
   STACKTOP = sp; //@line 9693
   return 0; //@line 9693
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9695
  if (__ZN13SocketAddress14set_ip_addressEPKc($6, $27) | 0) {
   $$010 = __ZNK13SocketAddress14get_ip_versionEv($6) | 0; //@line 9699
  } else {
   $$010 = 0; //@line 9701
  }
  $$111 = $$010; //@line 9703
 } else {
  $$111 = $3; //@line 9705
 }
 $42 = HEAP32[(HEAP32[$0 >> 2] | 0) + 96 >> 2] | 0; //@line 9709
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 9710
 FUNCTION_TABLE_vii[$42 & 7]($$byval_copy42, $0); //@line 9711
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 103; //@line 9714
  HEAP32[$AsyncCtx6 + 4 >> 2] = $4; //@line 9716
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$byval_copy42; //@line 9718
  HEAP32[$AsyncCtx6 + 12 >> 2] = $8; //@line 9720
  HEAP32[$AsyncCtx6 + 16 >> 2] = $2; //@line 9722
  HEAP32[$AsyncCtx6 + 20 >> 2] = $$byval_copy42; //@line 9724
  HEAP32[$AsyncCtx6 + 24 >> 2] = $9; //@line 9726
  HEAP32[$AsyncCtx6 + 28 >> 2] = $0; //@line 9728
  HEAP32[$AsyncCtx6 + 32 >> 2] = $1; //@line 9730
  HEAP32[$AsyncCtx6 + 36 >> 2] = $$111; //@line 9732
  sp = STACKTOP; //@line 9733
  STACKTOP = sp; //@line 9734
  return 0; //@line 9734
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 9736
 $52 = $2 + 12 | 0; //@line 9737
 $53 = HEAP32[$52 >> 2] | 0; //@line 9738
 do {
  if (!$53) {
   $67 = 0; //@line 9742
  } else {
   $56 = HEAP32[$53 + 4 >> 2] | 0; //@line 9745
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 9746
   FUNCTION_TABLE_vii[$56 & 7]($8, $2); //@line 9747
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 104; //@line 9750
    HEAP32[$AsyncCtx9 + 4 >> 2] = $4; //@line 9752
    HEAP32[$AsyncCtx9 + 8 >> 2] = $$byval_copy42; //@line 9754
    HEAP32[$AsyncCtx9 + 12 >> 2] = $52; //@line 9756
    HEAP32[$AsyncCtx9 + 16 >> 2] = $8; //@line 9758
    HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy42; //@line 9760
    HEAP32[$AsyncCtx9 + 24 >> 2] = $9; //@line 9762
    HEAP32[$AsyncCtx9 + 28 >> 2] = $0; //@line 9764
    HEAP32[$AsyncCtx9 + 32 >> 2] = $1; //@line 9766
    HEAP32[$AsyncCtx9 + 36 >> 2] = $$111; //@line 9768
    sp = STACKTOP; //@line 9769
    STACKTOP = sp; //@line 9770
    return 0; //@line 9770
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9772
    $67 = HEAP32[$52 >> 2] | 0; //@line 9774
    break;
   }
  }
 } while (0);
 $66 = $8 + 12 | 0; //@line 9779
 HEAP32[$66 >> 2] = $67; //@line 9780
 $68 = $$byval_copy42 + 12 | 0; //@line 9781
 $69 = HEAP32[$68 >> 2] | 0; //@line 9782
 do {
  if (!$69) {
   $83 = 0; //@line 9786
  } else {
   $72 = HEAP32[$69 + 4 >> 2] | 0; //@line 9789
   $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 9790
   FUNCTION_TABLE_vii[$72 & 7]($9, $$byval_copy42); //@line 9791
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 105; //@line 9794
    HEAP32[$AsyncCtx12 + 4 >> 2] = $68; //@line 9796
    HEAP32[$AsyncCtx12 + 8 >> 2] = $4; //@line 9798
    HEAP32[$AsyncCtx12 + 12 >> 2] = $$byval_copy42; //@line 9800
    HEAP32[$AsyncCtx12 + 16 >> 2] = $8; //@line 9802
    HEAP32[$AsyncCtx12 + 20 >> 2] = $66; //@line 9804
    HEAP32[$AsyncCtx12 + 24 >> 2] = $9; //@line 9806
    HEAP32[$AsyncCtx12 + 28 >> 2] = $0; //@line 9808
    HEAP32[$AsyncCtx12 + 32 >> 2] = $1; //@line 9810
    HEAP32[$AsyncCtx12 + 36 >> 2] = $$111; //@line 9812
    sp = STACKTOP; //@line 9813
    STACKTOP = sp; //@line 9814
    return 0; //@line 9814
   } else {
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9816
    $83 = HEAP32[$68 >> 2] | 0; //@line 9818
    break;
   }
  }
 } while (0);
 $82 = $9 + 12 | 0; //@line 9823
 HEAP32[$82 >> 2] = $83; //@line 9824
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9825
 $84 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $8, $9, $$111) | 0; //@line 9826
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 106; //@line 9829
  HEAP32[$AsyncCtx27 + 4 >> 2] = $82; //@line 9831
  HEAP32[$AsyncCtx27 + 8 >> 2] = $66; //@line 9833
  HEAP32[$AsyncCtx27 + 12 >> 2] = $9; //@line 9835
  HEAP32[$AsyncCtx27 + 16 >> 2] = $68; //@line 9837
  HEAP32[$AsyncCtx27 + 20 >> 2] = $8; //@line 9839
  HEAP32[$AsyncCtx27 + 24 >> 2] = $$byval_copy42; //@line 9841
  HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 9843
  sp = STACKTOP; //@line 9844
  STACKTOP = sp; //@line 9845
  return 0; //@line 9845
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 9847
 $92 = HEAP32[$82 >> 2] | 0; //@line 9848
 do {
  if ($92 | 0) {
   $95 = HEAP32[$92 + 8 >> 2] | 0; //@line 9853
   $AsyncCtx16 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9854
   FUNCTION_TABLE_vi[$95 & 511]($9); //@line 9855
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 107; //@line 9858
    HEAP32[$AsyncCtx16 + 4 >> 2] = $66; //@line 9860
    HEAP32[$AsyncCtx16 + 8 >> 2] = $68; //@line 9862
    HEAP32[$AsyncCtx16 + 12 >> 2] = $8; //@line 9864
    HEAP32[$AsyncCtx16 + 16 >> 2] = $$byval_copy42; //@line 9866
    HEAP32[$AsyncCtx16 + 20 >> 2] = $84; //@line 9868
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 9870
    sp = STACKTOP; //@line 9871
    STACKTOP = sp; //@line 9872
    return 0; //@line 9872
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 9874
    break;
   }
  }
 } while (0);
 $102 = HEAP32[$66 >> 2] | 0; //@line 9879
 do {
  if ($102 | 0) {
   $105 = HEAP32[$102 + 8 >> 2] | 0; //@line 9884
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9885
   FUNCTION_TABLE_vi[$105 & 511]($8); //@line 9886
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 108; //@line 9889
    HEAP32[$AsyncCtx20 + 4 >> 2] = $68; //@line 9891
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$byval_copy42; //@line 9893
    HEAP32[$AsyncCtx20 + 12 >> 2] = $84; //@line 9895
    HEAP32[$AsyncCtx20 + 16 >> 2] = $4; //@line 9897
    sp = STACKTOP; //@line 9898
    STACKTOP = sp; //@line 9899
    return 0; //@line 9899
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 9901
    break;
   }
  }
 } while (0);
 $110 = HEAP32[$68 >> 2] | 0; //@line 9906
 do {
  if ($110 | 0) {
   $113 = HEAP32[$110 + 8 >> 2] | 0; //@line 9911
   $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9912
   FUNCTION_TABLE_vi[$113 & 511]($$byval_copy42); //@line 9913
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 109; //@line 9916
    HEAP32[$AsyncCtx24 + 4 >> 2] = $$byval_copy42; //@line 9918
    HEAP32[$AsyncCtx24 + 8 >> 2] = $84; //@line 9920
    HEAP32[$AsyncCtx24 + 12 >> 2] = $4; //@line 9922
    sp = STACKTOP; //@line 9923
    STACKTOP = sp; //@line 9924
    return 0; //@line 9924
   } else {
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 9926
    break;
   }
  }
 } while (0);
 $$012 = $84; //@line 9931
 STACKTOP = sp; //@line 9932
 return $$012 | 0; //@line 9932
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_82($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18027
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18029
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18031
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18037
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18039
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18041
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18043
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18045
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18047
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18049
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18051
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18053
 $27 = (HEAP32[$0 + 12 >> 2] | 0) == 0; //@line 18054
 $28 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 18055
 if ($28 | 0) {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 18059
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(48) | 0; //@line 18060
  FUNCTION_TABLE_vi[$31 & 511]($16); //@line 18061
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 18064
   $32 = $ReallocAsyncCtx8 + 4 | 0; //@line 18065
   HEAP32[$32 >> 2] = $2; //@line 18066
   $33 = $ReallocAsyncCtx8 + 8 | 0; //@line 18067
   HEAP32[$33 >> 2] = $4; //@line 18068
   $34 = $ReallocAsyncCtx8 + 12 | 0; //@line 18069
   HEAP32[$34 >> 2] = $10; //@line 18070
   $35 = $ReallocAsyncCtx8 + 16 | 0; //@line 18071
   HEAP32[$35 >> 2] = $12; //@line 18072
   $36 = $ReallocAsyncCtx8 + 20 | 0; //@line 18073
   $$expand_i1_val = $27 & 1; //@line 18074
   HEAP8[$36 >> 0] = $$expand_i1_val; //@line 18075
   $37 = $ReallocAsyncCtx8 + 24 | 0; //@line 18076
   HEAP32[$37 >> 2] = $14; //@line 18077
   $38 = $ReallocAsyncCtx8 + 28 | 0; //@line 18078
   HEAP32[$38 >> 2] = $20; //@line 18079
   $39 = $ReallocAsyncCtx8 + 32 | 0; //@line 18080
   HEAP32[$39 >> 2] = $18; //@line 18081
   $40 = $ReallocAsyncCtx8 + 36 | 0; //@line 18082
   HEAP32[$40 >> 2] = $22; //@line 18083
   $41 = $ReallocAsyncCtx8 + 40 | 0; //@line 18084
   HEAP32[$41 >> 2] = $24; //@line 18085
   $42 = $ReallocAsyncCtx8 + 44 | 0; //@line 18086
   HEAP32[$42 >> 2] = $26; //@line 18087
   sp = STACKTOP; //@line 18088
   return;
  }
  ___async_unwind = 0; //@line 18091
  HEAP32[$ReallocAsyncCtx8 >> 2] = 180; //@line 18092
  $32 = $ReallocAsyncCtx8 + 4 | 0; //@line 18093
  HEAP32[$32 >> 2] = $2; //@line 18094
  $33 = $ReallocAsyncCtx8 + 8 | 0; //@line 18095
  HEAP32[$33 >> 2] = $4; //@line 18096
  $34 = $ReallocAsyncCtx8 + 12 | 0; //@line 18097
  HEAP32[$34 >> 2] = $10; //@line 18098
  $35 = $ReallocAsyncCtx8 + 16 | 0; //@line 18099
  HEAP32[$35 >> 2] = $12; //@line 18100
  $36 = $ReallocAsyncCtx8 + 20 | 0; //@line 18101
  $$expand_i1_val = $27 & 1; //@line 18102
  HEAP8[$36 >> 0] = $$expand_i1_val; //@line 18103
  $37 = $ReallocAsyncCtx8 + 24 | 0; //@line 18104
  HEAP32[$37 >> 2] = $14; //@line 18105
  $38 = $ReallocAsyncCtx8 + 28 | 0; //@line 18106
  HEAP32[$38 >> 2] = $20; //@line 18107
  $39 = $ReallocAsyncCtx8 + 32 | 0; //@line 18108
  HEAP32[$39 >> 2] = $18; //@line 18109
  $40 = $ReallocAsyncCtx8 + 36 | 0; //@line 18110
  HEAP32[$40 >> 2] = $22; //@line 18111
  $41 = $ReallocAsyncCtx8 + 40 | 0; //@line 18112
  HEAP32[$41 >> 2] = $24; //@line 18113
  $42 = $ReallocAsyncCtx8 + 44 | 0; //@line 18114
  HEAP32[$42 >> 2] = $26; //@line 18115
  sp = STACKTOP; //@line 18116
  return;
 }
 if ($27) {
  $59 = HEAP32[$14 >> 2] | 0; //@line 18120
  if (!$59) {
   $73 = $18 + 12 | 0; //@line 18123
   HEAP32[$73 >> 2] = 0; //@line 18124
   $74 = HEAP32[$4 >> 2] | 0; //@line 18125
   HEAP32[$22 + 8 >> 2] = 0; //@line 18127
   HEAP32[$22 >> 2] = 184; //@line 18128
   HEAP32[$22 + 4 >> 2] = $74; //@line 18130
   $76 = $22 + 12 | 0; //@line 18131
   HEAP32[$76 >> 2] = 724; //@line 18132
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(48) | 0; //@line 18133
   $77 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $22) | 0; //@line 18134
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 185; //@line 18137
    $78 = $ReallocAsyncCtx18 + 4 | 0; //@line 18138
    HEAP32[$78 >> 2] = $2; //@line 18139
    $79 = $ReallocAsyncCtx18 + 8 | 0; //@line 18140
    HEAP32[$79 >> 2] = $4; //@line 18141
    $80 = $ReallocAsyncCtx18 + 12 | 0; //@line 18142
    HEAP32[$80 >> 2] = $10; //@line 18143
    $81 = $ReallocAsyncCtx18 + 16 | 0; //@line 18144
    HEAP32[$81 >> 2] = $12; //@line 18145
    $82 = $ReallocAsyncCtx18 + 20 | 0; //@line 18146
    HEAP32[$82 >> 2] = $14; //@line 18147
    $83 = $ReallocAsyncCtx18 + 24 | 0; //@line 18148
    HEAP32[$83 >> 2] = $20; //@line 18149
    $84 = $ReallocAsyncCtx18 + 28 | 0; //@line 18150
    HEAP32[$84 >> 2] = $26; //@line 18151
    $85 = $ReallocAsyncCtx18 + 32 | 0; //@line 18152
    HEAP32[$85 >> 2] = $73; //@line 18153
    $86 = $ReallocAsyncCtx18 + 36 | 0; //@line 18154
    HEAP32[$86 >> 2] = $18; //@line 18155
    $87 = $ReallocAsyncCtx18 + 40 | 0; //@line 18156
    HEAP32[$87 >> 2] = $22; //@line 18157
    $88 = $ReallocAsyncCtx18 + 44 | 0; //@line 18158
    HEAP32[$88 >> 2] = $76; //@line 18159
    sp = STACKTOP; //@line 18160
    return;
   }
   HEAP32[___async_retval >> 2] = $77; //@line 18164
   ___async_unwind = 0; //@line 18165
   HEAP32[$ReallocAsyncCtx18 >> 2] = 185; //@line 18166
   $78 = $ReallocAsyncCtx18 + 4 | 0; //@line 18167
   HEAP32[$78 >> 2] = $2; //@line 18168
   $79 = $ReallocAsyncCtx18 + 8 | 0; //@line 18169
   HEAP32[$79 >> 2] = $4; //@line 18170
   $80 = $ReallocAsyncCtx18 + 12 | 0; //@line 18171
   HEAP32[$80 >> 2] = $10; //@line 18172
   $81 = $ReallocAsyncCtx18 + 16 | 0; //@line 18173
   HEAP32[$81 >> 2] = $12; //@line 18174
   $82 = $ReallocAsyncCtx18 + 20 | 0; //@line 18175
   HEAP32[$82 >> 2] = $14; //@line 18176
   $83 = $ReallocAsyncCtx18 + 24 | 0; //@line 18177
   HEAP32[$83 >> 2] = $20; //@line 18178
   $84 = $ReallocAsyncCtx18 + 28 | 0; //@line 18179
   HEAP32[$84 >> 2] = $26; //@line 18180
   $85 = $ReallocAsyncCtx18 + 32 | 0; //@line 18181
   HEAP32[$85 >> 2] = $73; //@line 18182
   $86 = $ReallocAsyncCtx18 + 36 | 0; //@line 18183
   HEAP32[$86 >> 2] = $18; //@line 18184
   $87 = $ReallocAsyncCtx18 + 40 | 0; //@line 18185
   HEAP32[$87 >> 2] = $22; //@line 18186
   $88 = $ReallocAsyncCtx18 + 44 | 0; //@line 18187
   HEAP32[$88 >> 2] = $76; //@line 18188
   sp = STACKTOP; //@line 18189
   return;
  } else {
   $62 = HEAP32[$59 + 4 >> 2] | 0; //@line 18193
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(44) | 0; //@line 18194
   FUNCTION_TABLE_vii[$62 & 7]($18, $20); //@line 18195
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 183; //@line 18198
    $63 = $ReallocAsyncCtx11 + 4 | 0; //@line 18199
    HEAP32[$63 >> 2] = $2; //@line 18200
    $64 = $ReallocAsyncCtx11 + 8 | 0; //@line 18201
    HEAP32[$64 >> 2] = $4; //@line 18202
    $65 = $ReallocAsyncCtx11 + 12 | 0; //@line 18203
    HEAP32[$65 >> 2] = $10; //@line 18204
    $66 = $ReallocAsyncCtx11 + 16 | 0; //@line 18205
    HEAP32[$66 >> 2] = $12; //@line 18206
    $67 = $ReallocAsyncCtx11 + 20 | 0; //@line 18207
    HEAP32[$67 >> 2] = $14; //@line 18208
    $68 = $ReallocAsyncCtx11 + 24 | 0; //@line 18209
    HEAP32[$68 >> 2] = $20; //@line 18210
    $69 = $ReallocAsyncCtx11 + 28 | 0; //@line 18211
    HEAP32[$69 >> 2] = $24; //@line 18212
    $70 = $ReallocAsyncCtx11 + 32 | 0; //@line 18213
    HEAP32[$70 >> 2] = $18; //@line 18214
    $71 = $ReallocAsyncCtx11 + 36 | 0; //@line 18215
    HEAP32[$71 >> 2] = $22; //@line 18216
    $72 = $ReallocAsyncCtx11 + 40 | 0; //@line 18217
    HEAP32[$72 >> 2] = $26; //@line 18218
    sp = STACKTOP; //@line 18219
    return;
   }
   ___async_unwind = 0; //@line 18222
   HEAP32[$ReallocAsyncCtx11 >> 2] = 183; //@line 18223
   $63 = $ReallocAsyncCtx11 + 4 | 0; //@line 18224
   HEAP32[$63 >> 2] = $2; //@line 18225
   $64 = $ReallocAsyncCtx11 + 8 | 0; //@line 18226
   HEAP32[$64 >> 2] = $4; //@line 18227
   $65 = $ReallocAsyncCtx11 + 12 | 0; //@line 18228
   HEAP32[$65 >> 2] = $10; //@line 18229
   $66 = $ReallocAsyncCtx11 + 16 | 0; //@line 18230
   HEAP32[$66 >> 2] = $12; //@line 18231
   $67 = $ReallocAsyncCtx11 + 20 | 0; //@line 18232
   HEAP32[$67 >> 2] = $14; //@line 18233
   $68 = $ReallocAsyncCtx11 + 24 | 0; //@line 18234
   HEAP32[$68 >> 2] = $20; //@line 18235
   $69 = $ReallocAsyncCtx11 + 28 | 0; //@line 18236
   HEAP32[$69 >> 2] = $24; //@line 18237
   $70 = $ReallocAsyncCtx11 + 32 | 0; //@line 18238
   HEAP32[$70 >> 2] = $18; //@line 18239
   $71 = $ReallocAsyncCtx11 + 36 | 0; //@line 18240
   HEAP32[$71 >> 2] = $22; //@line 18241
   $72 = $ReallocAsyncCtx11 + 40 | 0; //@line 18242
   HEAP32[$72 >> 2] = $26; //@line 18243
   sp = STACKTOP; //@line 18244
   return;
  }
 }
 $43 = HEAP32[$2 >> 2] | 0; //@line 18248
 if ($43 | 0) {
  __ZdlPv($43); //@line 18251
 }
 $45 = HEAP32[$14 >> 2] | 0; //@line 18253
 if ($45 | 0) {
  $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 18257
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 18258
  FUNCTION_TABLE_vi[$48 & 511]($20); //@line 18259
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 18262
   $49 = $ReallocAsyncCtx9 + 4 | 0; //@line 18263
   HEAP32[$49 >> 2] = $10; //@line 18264
   $50 = $ReallocAsyncCtx9 + 8 | 0; //@line 18265
   HEAP32[$50 >> 2] = $12; //@line 18266
   $51 = $ReallocAsyncCtx9 + 12 | 0; //@line 18267
   HEAP32[$51 >> 2] = $26; //@line 18268
   sp = STACKTOP; //@line 18269
   return;
  }
  ___async_unwind = 0; //@line 18272
  HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 18273
  $49 = $ReallocAsyncCtx9 + 4 | 0; //@line 18274
  HEAP32[$49 >> 2] = $10; //@line 18275
  $50 = $ReallocAsyncCtx9 + 8 | 0; //@line 18276
  HEAP32[$50 >> 2] = $12; //@line 18277
  $51 = $ReallocAsyncCtx9 + 12 | 0; //@line 18278
  HEAP32[$51 >> 2] = $26; //@line 18279
  sp = STACKTOP; //@line 18280
  return;
 }
 $53 = HEAP32[$10 + 28 >> 2] | 0; //@line 18284
 if (!$53) {
  __ZdlPv($10); //@line 18287
  HEAP32[___async_retval >> 2] = -3007; //@line 18289
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 18293
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 18294
 FUNCTION_TABLE_vi[$56 & 511]($12); //@line 18295
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 18298
  $57 = $ReallocAsyncCtx10 + 4 | 0; //@line 18299
  HEAP32[$57 >> 2] = $10; //@line 18300
  $58 = $ReallocAsyncCtx10 + 8 | 0; //@line 18301
  HEAP32[$58 >> 2] = $26; //@line 18302
  sp = STACKTOP; //@line 18303
  return;
 }
 ___async_unwind = 0; //@line 18306
 HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 18307
 $57 = $ReallocAsyncCtx10 + 4 | 0; //@line 18308
 HEAP32[$57 >> 2] = $10; //@line 18309
 $58 = $ReallocAsyncCtx10 + 8 | 0; //@line 18310
 HEAP32[$58 >> 2] = $26; //@line 18311
 sp = STACKTOP; //@line 18312
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_156($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29932
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29934
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29936
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29938
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29940
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29942
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29944
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29946
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29948
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29950
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29952
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29954
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29956
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29958
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29960
 $30 = HEAP16[$0 + 60 >> 1] | 0; //@line 29962
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29964
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29966
 $34 = $6 + 64 | 0; //@line 29967
 HEAP32[$34 >> 2] = $AsyncRetVal; //@line 29968
 $36 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($24, $30, $6 + 68 | 0, $AsyncRetVal, $32) | 0; //@line 29970
 if (($36 | 0) < 0) {
  $38 = HEAP32[$34 >> 2] | 0; //@line 29973
  if ($38 | 0) {
   __ZdaPv($38); //@line 29976
  }
  HEAP32[$34 >> 2] = 0; //@line 29978
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 29979
  $40 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($22, 0, $24, 512) | 0; //@line 29980
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 29983
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 29984
   HEAP32[$41 >> 2] = $2; //@line 29985
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 29986
   HEAP32[$42 >> 2] = $4; //@line 29987
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 29988
   HEAP32[$43 >> 2] = $8; //@line 29989
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 29990
   HEAP32[$44 >> 2] = $10; //@line 29991
   $45 = $ReallocAsyncCtx6 + 20 | 0; //@line 29992
   HEAP32[$45 >> 2] = $12; //@line 29993
   $46 = $ReallocAsyncCtx6 + 24 | 0; //@line 29994
   HEAP32[$46 >> 2] = $14; //@line 29995
   $47 = $ReallocAsyncCtx6 + 28 | 0; //@line 29996
   HEAP32[$47 >> 2] = $16; //@line 29997
   $48 = $ReallocAsyncCtx6 + 32 | 0; //@line 29998
   HEAP32[$48 >> 2] = $18; //@line 29999
   $49 = $ReallocAsyncCtx6 + 36 | 0; //@line 30000
   HEAP32[$49 >> 2] = $20; //@line 30001
   $50 = $ReallocAsyncCtx6 + 40 | 0; //@line 30002
   HEAP32[$50 >> 2] = $22; //@line 30003
   $51 = $ReallocAsyncCtx6 + 44 | 0; //@line 30004
   HEAP32[$51 >> 2] = $24; //@line 30005
   $52 = $ReallocAsyncCtx6 + 48 | 0; //@line 30006
   HEAP32[$52 >> 2] = $26; //@line 30007
   $53 = $ReallocAsyncCtx6 + 52 | 0; //@line 30008
   HEAP32[$53 >> 2] = $28; //@line 30009
   sp = STACKTOP; //@line 30010
   return;
  }
  HEAP32[___async_retval >> 2] = $40; //@line 30014
  ___async_unwind = 0; //@line 30015
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 30016
  $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 30017
  HEAP32[$41 >> 2] = $2; //@line 30018
  $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 30019
  HEAP32[$42 >> 2] = $4; //@line 30020
  $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 30021
  HEAP32[$43 >> 2] = $8; //@line 30022
  $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 30023
  HEAP32[$44 >> 2] = $10; //@line 30024
  $45 = $ReallocAsyncCtx6 + 20 | 0; //@line 30025
  HEAP32[$45 >> 2] = $12; //@line 30026
  $46 = $ReallocAsyncCtx6 + 24 | 0; //@line 30027
  HEAP32[$46 >> 2] = $14; //@line 30028
  $47 = $ReallocAsyncCtx6 + 28 | 0; //@line 30029
  HEAP32[$47 >> 2] = $16; //@line 30030
  $48 = $ReallocAsyncCtx6 + 32 | 0; //@line 30031
  HEAP32[$48 >> 2] = $18; //@line 30032
  $49 = $ReallocAsyncCtx6 + 36 | 0; //@line 30033
  HEAP32[$49 >> 2] = $20; //@line 30034
  $50 = $ReallocAsyncCtx6 + 40 | 0; //@line 30035
  HEAP32[$50 >> 2] = $22; //@line 30036
  $51 = $ReallocAsyncCtx6 + 44 | 0; //@line 30037
  HEAP32[$51 >> 2] = $24; //@line 30038
  $52 = $ReallocAsyncCtx6 + 48 | 0; //@line 30039
  HEAP32[$52 >> 2] = $26; //@line 30040
  $53 = $ReallocAsyncCtx6 + 52 | 0; //@line 30041
  HEAP32[$53 >> 2] = $28; //@line 30042
  sp = STACKTOP; //@line 30043
  return;
 }
 HEAP8[$6 + 85 >> 0] = $36; //@line 30048
 HEAP32[$6 + 4 >> 2] = -3009; //@line 30050
 HEAP32[$6 + 76 >> 2] = 0; //@line 30052
 $59 = $6 + 44 | 0; //@line 30053
 $60 = HEAP32[$59 >> 2] | 0; //@line 30054
 if (!$60) {
  HEAP32[$4 >> 2] = 0; //@line 30057
  $80 = HEAP32[$6 >> 2] | 0; //@line 30058
  HEAP32[$8 >> 2] = 0; //@line 30059
  HEAP32[$10 >> 2] = 191; //@line 30060
  HEAP32[$12 >> 2] = $80; //@line 30061
  HEAP32[$2 >> 2] = 724; //@line 30062
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 30063
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($14, 0, $16) | 0; //@line 30064
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 245; //@line 30067
   $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 30068
   HEAP32[$81 >> 2] = $2; //@line 30069
   $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 30070
   HEAP32[$82 >> 2] = $4; //@line 30071
   $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 30072
   HEAP32[$83 >> 2] = $8; //@line 30073
   $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 30074
   HEAP32[$84 >> 2] = $10; //@line 30075
   $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 30076
   HEAP32[$85 >> 2] = $12; //@line 30077
   $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 30078
   HEAP32[$86 >> 2] = $14; //@line 30079
   $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 30080
   HEAP32[$87 >> 2] = $16; //@line 30081
   $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 30082
   HEAP32[$88 >> 2] = $18; //@line 30083
   $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 30084
   HEAP32[$89 >> 2] = $20; //@line 30085
   $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 30086
   HEAP32[$90 >> 2] = $22; //@line 30087
   $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 30088
   HEAP32[$91 >> 2] = $24; //@line 30089
   $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 30090
   HEAP32[$92 >> 2] = $26; //@line 30091
   $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 30092
   HEAP32[$93 >> 2] = $28; //@line 30093
   sp = STACKTOP; //@line 30094
   return;
  }
  ___async_unwind = 0; //@line 30097
  HEAP32[$ReallocAsyncCtx5 >> 2] = 245; //@line 30098
  $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 30099
  HEAP32[$81 >> 2] = $2; //@line 30100
  $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 30101
  HEAP32[$82 >> 2] = $4; //@line 30102
  $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 30103
  HEAP32[$83 >> 2] = $8; //@line 30104
  $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 30105
  HEAP32[$84 >> 2] = $10; //@line 30106
  $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 30107
  HEAP32[$85 >> 2] = $12; //@line 30108
  $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 30109
  HEAP32[$86 >> 2] = $14; //@line 30110
  $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 30111
  HEAP32[$87 >> 2] = $16; //@line 30112
  $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 30113
  HEAP32[$88 >> 2] = $18; //@line 30114
  $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 30115
  HEAP32[$89 >> 2] = $20; //@line 30116
  $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 30117
  HEAP32[$90 >> 2] = $22; //@line 30118
  $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 30119
  HEAP32[$91 >> 2] = $24; //@line 30120
  $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 30121
  HEAP32[$92 >> 2] = $26; //@line 30122
  $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 30123
  HEAP32[$93 >> 2] = $28; //@line 30124
  sp = STACKTOP; //@line 30125
  return;
 } else {
  $64 = HEAP32[$60 + 4 >> 2] | 0; //@line 30130
  $ReallocAsyncCtx = _emscripten_realloc_async_context(64) | 0; //@line 30131
  FUNCTION_TABLE_vii[$64 & 7]($28, $6 + 32 | 0); //@line 30132
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 244; //@line 30135
   $65 = $ReallocAsyncCtx + 4 | 0; //@line 30136
   HEAP32[$65 >> 2] = $2; //@line 30137
   $66 = $ReallocAsyncCtx + 8 | 0; //@line 30138
   HEAP32[$66 >> 2] = $4; //@line 30139
   $67 = $ReallocAsyncCtx + 12 | 0; //@line 30140
   HEAP32[$67 >> 2] = $6; //@line 30141
   $68 = $ReallocAsyncCtx + 16 | 0; //@line 30142
   HEAP32[$68 >> 2] = $8; //@line 30143
   $69 = $ReallocAsyncCtx + 20 | 0; //@line 30144
   HEAP32[$69 >> 2] = $10; //@line 30145
   $70 = $ReallocAsyncCtx + 24 | 0; //@line 30146
   HEAP32[$70 >> 2] = $12; //@line 30147
   $71 = $ReallocAsyncCtx + 28 | 0; //@line 30148
   HEAP32[$71 >> 2] = $14; //@line 30149
   $72 = $ReallocAsyncCtx + 32 | 0; //@line 30150
   HEAP32[$72 >> 2] = $16; //@line 30151
   $73 = $ReallocAsyncCtx + 36 | 0; //@line 30152
   HEAP32[$73 >> 2] = $18; //@line 30153
   $74 = $ReallocAsyncCtx + 40 | 0; //@line 30154
   HEAP32[$74 >> 2] = $20; //@line 30155
   $75 = $ReallocAsyncCtx + 44 | 0; //@line 30156
   HEAP32[$75 >> 2] = $22; //@line 30157
   $76 = $ReallocAsyncCtx + 48 | 0; //@line 30158
   HEAP32[$76 >> 2] = $24; //@line 30159
   $77 = $ReallocAsyncCtx + 52 | 0; //@line 30160
   HEAP32[$77 >> 2] = $26; //@line 30161
   $78 = $ReallocAsyncCtx + 56 | 0; //@line 30162
   HEAP32[$78 >> 2] = $59; //@line 30163
   $79 = $ReallocAsyncCtx + 60 | 0; //@line 30164
   HEAP32[$79 >> 2] = $28; //@line 30165
   sp = STACKTOP; //@line 30166
   return;
  }
  ___async_unwind = 0; //@line 30169
  HEAP32[$ReallocAsyncCtx >> 2] = 244; //@line 30170
  $65 = $ReallocAsyncCtx + 4 | 0; //@line 30171
  HEAP32[$65 >> 2] = $2; //@line 30172
  $66 = $ReallocAsyncCtx + 8 | 0; //@line 30173
  HEAP32[$66 >> 2] = $4; //@line 30174
  $67 = $ReallocAsyncCtx + 12 | 0; //@line 30175
  HEAP32[$67 >> 2] = $6; //@line 30176
  $68 = $ReallocAsyncCtx + 16 | 0; //@line 30177
  HEAP32[$68 >> 2] = $8; //@line 30178
  $69 = $ReallocAsyncCtx + 20 | 0; //@line 30179
  HEAP32[$69 >> 2] = $10; //@line 30180
  $70 = $ReallocAsyncCtx + 24 | 0; //@line 30181
  HEAP32[$70 >> 2] = $12; //@line 30182
  $71 = $ReallocAsyncCtx + 28 | 0; //@line 30183
  HEAP32[$71 >> 2] = $14; //@line 30184
  $72 = $ReallocAsyncCtx + 32 | 0; //@line 30185
  HEAP32[$72 >> 2] = $16; //@line 30186
  $73 = $ReallocAsyncCtx + 36 | 0; //@line 30187
  HEAP32[$73 >> 2] = $18; //@line 30188
  $74 = $ReallocAsyncCtx + 40 | 0; //@line 30189
  HEAP32[$74 >> 2] = $20; //@line 30190
  $75 = $ReallocAsyncCtx + 44 | 0; //@line 30191
  HEAP32[$75 >> 2] = $22; //@line 30192
  $76 = $ReallocAsyncCtx + 48 | 0; //@line 30193
  HEAP32[$76 >> 2] = $24; //@line 30194
  $77 = $ReallocAsyncCtx + 52 | 0; //@line 30195
  HEAP32[$77 >> 2] = $26; //@line 30196
  $78 = $ReallocAsyncCtx + 56 | 0; //@line 30197
  HEAP32[$78 >> 2] = $59; //@line 30198
  $79 = $ReallocAsyncCtx + 60 | 0; //@line 30199
  HEAP32[$79 >> 2] = $28; //@line 30200
  sp = STACKTOP; //@line 30201
  return;
 }
}
function __ZL26nsapi_dns_query_async_sendPv($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$byval_copy16 = 0, $$lcssa52 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $1 = 0, $10 = 0, $11 = 0, $112 = 0, $118 = 0, $122 = 0, $126 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $72 = 0, $75 = 0, $76 = 0, $8 = 0, $90 = 0, $92 = 0, $95 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17169
 STACKTOP = STACKTOP + 112 | 0; //@line 17170
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 17170
 $$byval_copy16 = sp + 84 | 0; //@line 17171
 $1 = sp; //@line 17172
 $2 = sp + 64 | 0; //@line 17173
 $3 = $0; //@line 17174
 $4 = HEAP32[2518] | 0; //@line 17175
 if (!$4) {
  label = 3; //@line 17178
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa52 = $4; //@line 17183
  } else {
   label = 3; //@line 17185
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[2519] | 0; //@line 17190
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa52 = $8; //@line 17196
     break;
    }
   }
   $118 = HEAP32[2520] | 0; //@line 17200
   if ($118 | 0) {
    if ((HEAP32[$118 >> 2] | 0) == ($3 | 0)) {
     $$lcssa52 = $118; //@line 17206
     break;
    }
   }
   $122 = HEAP32[2521] | 0; //@line 17210
   if ($122 | 0) {
    if ((HEAP32[$122 >> 2] | 0) == ($3 | 0)) {
     $$lcssa52 = $122; //@line 17216
     break;
    }
   }
   $126 = HEAP32[2522] | 0; //@line 17220
   if (!$126) {
    STACKTOP = sp; //@line 17223
    return;
   }
   if ((HEAP32[$126 >> 2] | 0) == ($3 | 0)) {
    $$lcssa52 = $126; //@line 17228
   } else {
    STACKTOP = sp; //@line 17230
    return;
   }
  }
 } while (0);
 $10 = $$lcssa52 + 83 | 0; //@line 17234
 $11 = HEAP8[$10 >> 0] | 0; //@line 17235
 if (!($11 << 24 >> 24)) {
  $14 = $$lcssa52 + 82 | 0; //@line 17238
  HEAP8[$14 >> 0] = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 17241
  $storemerge = 0; //@line 17242
 } else {
  $storemerge = $11 + -1 << 24 >> 24; //@line 17245
 }
 HEAP8[$10 >> 0] = $storemerge; //@line 17247
 $17 = HEAP16[874] | 0; //@line 17248
 $18 = $17 + 1 << 16 >> 16; //@line 17249
 HEAP16[874] = $18; //@line 17250
 $19 = $$lcssa52 + 80 | 0; //@line 17251
 HEAP16[$19 >> 1] = $17; //@line 17252
 if (!($18 << 16 >> 16)) {
  HEAP16[874] = 1; //@line 17255
 }
 $21 = _malloc(512) | 0; //@line 17257
 if (!$21) {
  $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17260
  __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa52, -3007, 0); //@line 17261
  if (___async) {
   HEAP32[$AsyncCtx6 >> 2] = 237; //@line 17264
   sp = STACKTOP; //@line 17265
   STACKTOP = sp; //@line 17266
   return;
  }
  _emscripten_free_async_context($AsyncCtx6 | 0); //@line 17268
  STACKTOP = sp; //@line 17269
  return;
 }
 $23 = HEAP16[$19 >> 1] | 0; //@line 17271
 $25 = HEAP32[$$lcssa52 + 12 >> 2] | 0; //@line 17273
 $27 = HEAP32[$$lcssa52 + 52 >> 2] | 0; //@line 17275
 $28 = $21; //@line 17276
 HEAP8[$21 >> 0] = ($23 & 65535) >>> 8; //@line 17280
 HEAP8[$21 + 1 >> 0] = $23; //@line 17283
 HEAP8[$21 + 2 >> 0] = 1; //@line 17285
 HEAP8[$21 + 3 >> 0] = 0; //@line 17287
 HEAP8[$21 + 4 >> 0] = 0; //@line 17289
 $37 = $21 + 6 | 0; //@line 17290
 HEAP8[$21 + 5 >> 0] = 1; //@line 17291
 $38 = $21 + 12 | 0; //@line 17292
 HEAP8[$37 >> 0] = 0; //@line 17293
 HEAP8[$37 + 1 >> 0] = 0; //@line 17293
 HEAP8[$37 + 2 >> 0] = 0; //@line 17293
 HEAP8[$37 + 3 >> 0] = 0; //@line 17293
 HEAP8[$37 + 4 >> 0] = 0; //@line 17293
 HEAP8[$37 + 5 >> 0] = 0; //@line 17293
 if (!(HEAP8[$25 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $38; //@line 17297
 } else {
  $$048$i = $25; //@line 17299
  $$sroa$0$0$in47$i = $38; //@line 17299
  while (1) {
   $41 = _strcspn($$048$i, 7347) | 0; //@line 17301
   $43 = $$sroa$0$0$in47$i + 1 | 0; //@line 17303
   HEAP8[$$sroa$0$0$in47$i >> 0] = $41; //@line 17304
   $44 = $41 & 255; //@line 17305
   _memcpy($43 | 0, $$048$i | 0, $44 | 0) | 0; //@line 17306
   $45 = $43 + $44 | 0; //@line 17307
   $$048$i = $$048$i + ($41 + ((HEAP8[$$048$i + $41 >> 0] | 0) == 46 & 1)) | 0; //@line 17313
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $45; //@line 17317
    break;
   } else {
    $$sroa$0$0$in47$i = $45; //@line 17320
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 17325
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 17328
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = ($27 | 0) == 2 ? 28 : 1; //@line 17331
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 17333
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 17336
 $61 = $$sroa$0$0$in$lcssa$i + 5 - $28 | 0; //@line 17337
 HEAP32[$2 >> 2] = 0; //@line 17338
 HEAP32[$2 + 4 >> 2] = 0; //@line 17338
 HEAP32[$2 + 8 >> 2] = 0; //@line 17338
 HEAP32[$2 + 12 >> 2] = 0; //@line 17338
 HEAP32[$2 + 16 >> 2] = 0; //@line 17338
 HEAP32[$$byval_copy16 >> 2] = HEAP32[$2 >> 2]; //@line 17339
 HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 17339
 HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 17339
 HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 17339
 HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 17339
 __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy16, 0); //@line 17340
 $62 = $$lcssa52 + 8 | 0; //@line 17341
 $63 = $$lcssa52 + 82 | 0; //@line 17342
 $64 = $$lcssa52 + 84 | 0; //@line 17343
 L37 : do {
  if (HEAP8[$64 >> 0] | 0) {
   $66 = $$lcssa52 + 56 | 0; //@line 17348
   while (1) {
    $67 = HEAP32[$62 >> 2] | 0; //@line 17350
    $68 = HEAP8[$63 >> 0] | 0; //@line 17351
    if (($68 & 255) > 9) {
     HEAP8[$63 >> 0] = 0; //@line 17354
     $72 = 0; //@line 17355
     label = 20; //@line 17356
    } else {
     if (($68 & 255) < 5) {
      $72 = $68; //@line 17360
      label = 20; //@line 17361
     } else {
      $90 = $68; //@line 17363
      label = 24; //@line 17364
     }
    }
    if ((label | 0) == 20) {
     label = 0; //@line 17368
     $75 = HEAP32[(HEAP32[$67 >> 2] | 0) + 28 >> 2] | 0; //@line 17372
     $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 17373
     $76 = FUNCTION_TABLE_iiii[$75 & 31]($67, $72 & 255, $1) | 0; //@line 17374
     if (___async) {
      label = 21; //@line 17377
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17380
     if (($76 | 0) < 0) {
      HEAP8[$63 >> 0] = 5; //@line 17383
      $90 = 5; //@line 17384
      label = 24; //@line 17385
     }
    }
    if ((label | 0) == 24) {
     label = 0; //@line 17389
     $92 = 608 + ((($90 & 255) + -5 | 0) * 20 | 0) | 0; //@line 17392
     HEAP32[$$byval_copy16 >> 2] = HEAP32[$92 >> 2]; //@line 17393
     HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$92 + 4 >> 2]; //@line 17393
     HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$92 + 8 >> 2]; //@line 17393
     HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$92 + 12 >> 2]; //@line 17393
     HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$92 + 16 >> 2]; //@line 17393
     __ZN13SocketAddress8set_addrE10nsapi_addr($1, $$byval_copy16); //@line 17394
    }
    __ZN13SocketAddress8set_portEt($1, 53); //@line 17396
    $95 = HEAP32[$66 >> 2] | 0; //@line 17397
    $AsyncCtx10 = _emscripten_alloc_async_context(48, sp) | 0; //@line 17398
    $96 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($95, $1, $21, $61) | 0; //@line 17399
    if (___async) {
     label = 29; //@line 17402
     break;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 17405
    if (($96 | 0) >= 0) {
     label = 32; //@line 17408
     break;
    }
    HEAP8[$63 >> 0] = (HEAP8[$63 >> 0] | 0) + 1 << 24 >> 24; //@line 17413
    HEAP32[$2 >> 2] = 0; //@line 17414
    HEAP32[$2 + 4 >> 2] = 0; //@line 17414
    HEAP32[$2 + 8 >> 2] = 0; //@line 17414
    HEAP32[$2 + 12 >> 2] = 0; //@line 17414
    HEAP32[$2 + 16 >> 2] = 0; //@line 17414
    HEAP32[$$byval_copy16 >> 2] = HEAP32[$2 >> 2]; //@line 17415
    HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 17415
    HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 17415
    HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 17415
    HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 17415
    __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy16, 0); //@line 17416
    if (!(HEAP8[$64 >> 0] | 0)) {
     break L37;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 238; //@line 17424
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 17426
    HEAP32[$AsyncCtx + 8 >> 2] = $$lcssa52; //@line 17428
    HEAP32[$AsyncCtx + 12 >> 2] = $63; //@line 17430
    HEAP32[$AsyncCtx + 16 >> 2] = $62; //@line 17432
    HEAP32[$AsyncCtx + 20 >> 2] = $21; //@line 17434
    HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 17436
    HEAP32[$AsyncCtx + 28 >> 2] = $64; //@line 17438
    HEAP32[$AsyncCtx + 32 >> 2] = $66; //@line 17440
    HEAP32[$AsyncCtx + 36 >> 2] = $61; //@line 17442
    HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 17444
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 17446
    sp = STACKTOP; //@line 17447
    STACKTOP = sp; //@line 17448
    return;
   } else if ((label | 0) == 29) {
    HEAP32[$AsyncCtx10 >> 2] = 240; //@line 17451
    HEAP32[$AsyncCtx10 + 4 >> 2] = $1; //@line 17453
    HEAP32[$AsyncCtx10 + 8 >> 2] = $$lcssa52; //@line 17455
    HEAP32[$AsyncCtx10 + 12 >> 2] = $63; //@line 17457
    HEAP32[$AsyncCtx10 + 16 >> 2] = $62; //@line 17459
    HEAP32[$AsyncCtx10 + 20 >> 2] = $21; //@line 17461
    HEAP32[$AsyncCtx10 + 24 >> 2] = $1; //@line 17463
    HEAP32[$AsyncCtx10 + 28 >> 2] = $64; //@line 17465
    HEAP32[$AsyncCtx10 + 32 >> 2] = $66; //@line 17467
    HEAP32[$AsyncCtx10 + 36 >> 2] = $61; //@line 17469
    HEAP32[$AsyncCtx10 + 40 >> 2] = $2; //@line 17471
    HEAP32[$AsyncCtx10 + 44 >> 2] = $2; //@line 17473
    sp = STACKTOP; //@line 17474
    STACKTOP = sp; //@line 17475
    return;
   } else if ((label | 0) == 32) {
    $112 = HEAP8[$64 >> 0] | 0; //@line 17478
    if ($112 << 24 >> 24) {
     HEAP8[$64 >> 0] = $112 + -1 << 24 >> 24; //@line 17482
    }
    _free($21); //@line 17484
    HEAP32[$$lcssa52 + 76 >> 2] = 5e3; //@line 17486
    STACKTOP = sp; //@line 17487
    return;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17491
 __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa52, -3009, 0); //@line 17492
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 239; //@line 17495
  HEAP32[$AsyncCtx2 + 4 >> 2] = $21; //@line 17497
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 17499
  sp = STACKTOP; //@line 17500
  STACKTOP = sp; //@line 17501
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 17503
 _free($21); //@line 17504
 STACKTOP = sp; //@line 17505
 return;
}
function __ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$2 = 0, $$2$1 = 0, $$2$us = 0, $$2$us$1 = 0, $$pre = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $111 = 0, $118 = 0, $12 = 0, $122 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $139 = 0, $152 = 0, $157 = 0, $160 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $173 = 0, $186 = 0, $191 = 0, $194 = 0, $24 = 0, $28 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $47 = 0, $54 = 0, $57 = 0, $6 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $76 = 0, $81 = 0, $88 = 0, $9 = 0, $92 = 0, $98 = 0, label = 0;
 $4 = ($2 | 0) == 0; //@line 13022
 $6 = (HEAP32[2515] | 0) == 0; //@line 13024
 if (!$1) {
  do {
   if ($6) {
    $$2$us = -3006; //@line 13028
   } else {
    $7 = _emscripten_asm_const_i(9) | 0; //@line 13030
    $9 = (($7 | 0) < 0) << 31 >> 31; //@line 13032
    $10 = HEAP32[2515] | 0; //@line 13033
    $12 = $10 + 24 | 0; //@line 13035
    $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 13040
    $24 = HEAP32[$10 + 20 >> 2] | 0; //@line 13047
    if ($17 >>> 0 < $9 >>> 0 | (($17 | 0) == ($9 | 0) ? (HEAP32[$12 >> 2] | 0) >>> 0 < $7 >>> 0 : 0)) {
     if (!$24) {
      $34 = $10; //@line 13051
      label = 11; //@line 13052
     } else {
      __ZdlPv($24); //@line 13054
      $$pre35 = HEAP32[2515] | 0; //@line 13055
      if ($$pre35 | 0) {
       $34 = $$pre35; //@line 13058
       label = 11; //@line 13059
      }
     }
     if ((label | 0) == 11) {
      __ZdlPv($34); //@line 13063
     }
     HEAP32[2515] = 0; //@line 13065
     $$2$us = -3006; //@line 13066
     break;
    } else {
     if (_strcmp($24, $0) | 0) {
      $$2$us = -3006; //@line 13072
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$10 >> 2]; //@line 13076
      HEAP32[$2 + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 13076
      HEAP32[$2 + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 13076
      HEAP32[$2 + 12 >> 2] = HEAP32[$10 + 12 >> 2]; //@line 13076
      HEAP32[$2 + 16 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 13076
     }
     $28 = $10 + 32 | 0; //@line 13079
     HEAP32[$28 >> 2] = $7; //@line 13081
     HEAP32[$28 + 4 >> 2] = $9; //@line 13084
     $$2$us = 0; //@line 13085
     break;
    }
   }
  } while (0);
  do {
   if (!(HEAP32[2516] | 0)) {
    $$2$us$1 = $$2$us; //@line 13094
   } else {
    $71 = _emscripten_asm_const_i(9) | 0; //@line 13096
    $73 = (($71 | 0) < 0) << 31 >> 31; //@line 13098
    $74 = HEAP32[2516] | 0; //@line 13099
    $76 = $74 + 24 | 0; //@line 13101
    $81 = HEAP32[$76 + 4 >> 2] | 0; //@line 13106
    $88 = HEAP32[$74 + 20 >> 2] | 0; //@line 13113
    if ($81 >>> 0 < $73 >>> 0 | (($81 | 0) == ($73 | 0) ? (HEAP32[$76 >> 2] | 0) >>> 0 < $71 >>> 0 : 0)) {
     if (!$88) {
      $98 = $74; //@line 13117
      label = 33; //@line 13118
     } else {
      __ZdlPv($88); //@line 13120
      $$pre36 = HEAP32[2516] | 0; //@line 13121
      if ($$pre36 | 0) {
       $98 = $$pre36; //@line 13124
       label = 33; //@line 13125
      }
     }
     if ((label | 0) == 33) {
      __ZdlPv($98); //@line 13129
     }
     HEAP32[2516] = 0; //@line 13131
     $$2$us$1 = $$2$us; //@line 13132
     break;
    } else {
     if (_strcmp($88, $0) | 0) {
      $$2$us$1 = $$2$us; //@line 13138
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$74 >> 2]; //@line 13142
      HEAP32[$2 + 4 >> 2] = HEAP32[$74 + 4 >> 2]; //@line 13142
      HEAP32[$2 + 8 >> 2] = HEAP32[$74 + 8 >> 2]; //@line 13142
      HEAP32[$2 + 12 >> 2] = HEAP32[$74 + 12 >> 2]; //@line 13142
      HEAP32[$2 + 16 >> 2] = HEAP32[$74 + 16 >> 2]; //@line 13142
     }
     $92 = $74 + 32 | 0; //@line 13145
     HEAP32[$92 >> 2] = $71; //@line 13147
     HEAP32[$92 + 4 >> 2] = $73; //@line 13150
     $$2$us$1 = 0; //@line 13151
     break;
    }
   }
  } while (0);
  if (!(HEAP32[2517] | 0)) {
   $$0$lcssa = $$2$us$1; //@line 13159
   return $$0$lcssa | 0; //@line 13160
  }
  $101 = _emscripten_asm_const_i(9) | 0; //@line 13162
  $103 = (($101 | 0) < 0) << 31 >> 31; //@line 13164
  $104 = HEAP32[2517] | 0; //@line 13165
  $106 = $104 + 24 | 0; //@line 13167
  $111 = HEAP32[$106 + 4 >> 2] | 0; //@line 13172
  $118 = HEAP32[$104 + 20 >> 2] | 0; //@line 13179
  if ($111 >>> 0 < $103 >>> 0 | (($111 | 0) == ($103 | 0) ? (HEAP32[$106 >> 2] | 0) >>> 0 < $101 >>> 0 : 0)) {
   if (!$118) {
    $128 = $104; //@line 13183
    label = 43; //@line 13184
   } else {
    __ZdlPv($118); //@line 13186
    $$pre37 = HEAP32[2517] | 0; //@line 13187
    if ($$pre37 | 0) {
     $128 = $$pre37; //@line 13190
     label = 43; //@line 13191
    }
   }
   if ((label | 0) == 43) {
    __ZdlPv($128); //@line 13195
   }
   HEAP32[2517] = 0; //@line 13197
   $$0$lcssa = $$2$us$1; //@line 13198
   return $$0$lcssa | 0; //@line 13199
  }
  if (_strcmp($118, $0) | 0) {
   $$0$lcssa = $$2$us$1; //@line 13204
   return $$0$lcssa | 0; //@line 13205
  }
  if (!$4) {
   HEAP32[$2 >> 2] = HEAP32[$104 >> 2]; //@line 13208
   HEAP32[$2 + 4 >> 2] = HEAP32[$104 + 4 >> 2]; //@line 13208
   HEAP32[$2 + 8 >> 2] = HEAP32[$104 + 8 >> 2]; //@line 13208
   HEAP32[$2 + 12 >> 2] = HEAP32[$104 + 12 >> 2]; //@line 13208
   HEAP32[$2 + 16 >> 2] = HEAP32[$104 + 16 >> 2]; //@line 13208
  }
  $122 = $104 + 32 | 0; //@line 13211
  HEAP32[$122 >> 2] = $101; //@line 13213
  HEAP32[$122 + 4 >> 2] = $103; //@line 13216
  $$0$lcssa = 0; //@line 13217
  return $$0$lcssa | 0; //@line 13218
 }
 do {
  if ($6) {
   $$2 = -3006; //@line 13222
  } else {
   $37 = _emscripten_asm_const_i(9) | 0; //@line 13224
   $39 = (($37 | 0) < 0) << 31 >> 31; //@line 13226
   $40 = HEAP32[2515] | 0; //@line 13227
   $42 = $40 + 24 | 0; //@line 13229
   $47 = HEAP32[$42 + 4 >> 2] | 0; //@line 13234
   if ($47 >>> 0 < $39 >>> 0 | (($47 | 0) == ($39 | 0) ? (HEAP32[$42 >> 2] | 0) >>> 0 < $37 >>> 0 : 0)) {
    $54 = HEAP32[$40 + 20 >> 2] | 0; //@line 13242
    if (!$54) {
     $57 = $40; //@line 13245
     label = 18; //@line 13246
    } else {
     __ZdlPv($54); //@line 13248
     $$pre = HEAP32[2515] | 0; //@line 13249
     if ($$pre | 0) {
      $57 = $$pre; //@line 13252
      label = 18; //@line 13253
     }
    }
    if ((label | 0) == 18) {
     __ZdlPv($57); //@line 13257
    }
    HEAP32[2515] = 0; //@line 13259
    $$2 = -3006; //@line 13260
    break;
   }
   if ((HEAP32[$40 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$40 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$40 >> 2]; //@line 13272
      HEAP32[$2 + 4 >> 2] = HEAP32[$40 + 4 >> 2]; //@line 13272
      HEAP32[$2 + 8 >> 2] = HEAP32[$40 + 8 >> 2]; //@line 13272
      HEAP32[$2 + 12 >> 2] = HEAP32[$40 + 12 >> 2]; //@line 13272
      HEAP32[$2 + 16 >> 2] = HEAP32[$40 + 16 >> 2]; //@line 13272
     }
     $65 = $40 + 32 | 0; //@line 13275
     HEAP32[$65 >> 2] = $37; //@line 13277
     HEAP32[$65 + 4 >> 2] = $39; //@line 13280
     $$2 = 0; //@line 13281
    } else {
     $$2 = -3006; //@line 13283
    }
   } else {
    $$2 = -3006; //@line 13286
   }
  }
 } while (0);
 do {
  if (!(HEAP32[2516] | 0)) {
   $$2$1 = $$2; //@line 13294
  } else {
   $129 = _emscripten_asm_const_i(9) | 0; //@line 13296
   $131 = (($129 | 0) < 0) << 31 >> 31; //@line 13298
   $132 = HEAP32[2516] | 0; //@line 13299
   $134 = $132 + 24 | 0; //@line 13301
   $139 = HEAP32[$134 + 4 >> 2] | 0; //@line 13306
   if ($139 >>> 0 < $131 >>> 0 | (($139 | 0) == ($131 | 0) ? (HEAP32[$134 >> 2] | 0) >>> 0 < $129 >>> 0 : 0)) {
    $157 = HEAP32[$132 + 20 >> 2] | 0; //@line 13314
    if (!$157) {
     $160 = $132; //@line 13317
     label = 53; //@line 13318
    } else {
     __ZdlPv($157); //@line 13320
     $$pre33 = HEAP32[2516] | 0; //@line 13321
     if ($$pre33 | 0) {
      $160 = $$pre33; //@line 13324
      label = 53; //@line 13325
     }
    }
    if ((label | 0) == 53) {
     __ZdlPv($160); //@line 13329
    }
    HEAP32[2516] = 0; //@line 13331
    $$2$1 = $$2; //@line 13332
    break;
   }
   if ((HEAP32[$132 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$132 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$132 >> 2]; //@line 13344
      HEAP32[$2 + 4 >> 2] = HEAP32[$132 + 4 >> 2]; //@line 13344
      HEAP32[$2 + 8 >> 2] = HEAP32[$132 + 8 >> 2]; //@line 13344
      HEAP32[$2 + 12 >> 2] = HEAP32[$132 + 12 >> 2]; //@line 13344
      HEAP32[$2 + 16 >> 2] = HEAP32[$132 + 16 >> 2]; //@line 13344
     }
     $152 = $132 + 32 | 0; //@line 13347
     HEAP32[$152 >> 2] = $129; //@line 13349
     HEAP32[$152 + 4 >> 2] = $131; //@line 13352
     $$2$1 = 0; //@line 13353
    } else {
     $$2$1 = $$2; //@line 13355
    }
   } else {
    $$2$1 = $$2; //@line 13358
   }
  }
 } while (0);
 if (!(HEAP32[2517] | 0)) {
  $$0$lcssa = $$2$1; //@line 13365
  return $$0$lcssa | 0; //@line 13366
 }
 $163 = _emscripten_asm_const_i(9) | 0; //@line 13368
 $165 = (($163 | 0) < 0) << 31 >> 31; //@line 13370
 $166 = HEAP32[2517] | 0; //@line 13371
 $168 = $166 + 24 | 0; //@line 13373
 $173 = HEAP32[$168 + 4 >> 2] | 0; //@line 13378
 if ($173 >>> 0 < $165 >>> 0 | (($173 | 0) == ($165 | 0) ? (HEAP32[$168 >> 2] | 0) >>> 0 < $163 >>> 0 : 0)) {
  $191 = HEAP32[$166 + 20 >> 2] | 0; //@line 13386
  if (!$191) {
   $194 = $166; //@line 13389
   label = 64; //@line 13390
  } else {
   __ZdlPv($191); //@line 13392
   $$pre34 = HEAP32[2517] | 0; //@line 13393
   if ($$pre34 | 0) {
    $194 = $$pre34; //@line 13396
    label = 64; //@line 13397
   }
  }
  if ((label | 0) == 64) {
   __ZdlPv($194); //@line 13401
  }
  HEAP32[2517] = 0; //@line 13403
  $$0$lcssa = $$2$1; //@line 13404
  return $$0$lcssa | 0; //@line 13405
 }
 if ((HEAP32[$166 >> 2] | 0) != ($1 | 0)) {
  $$0$lcssa = $$2$1; //@line 13410
  return $$0$lcssa | 0; //@line 13411
 }
 if (_strcmp(HEAP32[$166 + 20 >> 2] | 0, $0) | 0) {
  $$0$lcssa = $$2$1; //@line 13418
  return $$0$lcssa | 0; //@line 13419
 }
 if (!$4) {
  HEAP32[$2 >> 2] = HEAP32[$166 >> 2]; //@line 13422
  HEAP32[$2 + 4 >> 2] = HEAP32[$166 + 4 >> 2]; //@line 13422
  HEAP32[$2 + 8 >> 2] = HEAP32[$166 + 8 >> 2]; //@line 13422
  HEAP32[$2 + 12 >> 2] = HEAP32[$166 + 12 >> 2]; //@line 13422
  HEAP32[$2 + 16 >> 2] = HEAP32[$166 + 16 >> 2]; //@line 13422
 }
 $186 = $166 + 32 | 0; //@line 13425
 HEAP32[$186 >> 2] = $163; //@line 13427
 HEAP32[$186 + 4 >> 2] = $165; //@line 13430
 $$0$lcssa = 0; //@line 13431
 return $$0$lcssa | 0; //@line 13432
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_71($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15337
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15339
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15341
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15343
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15345
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15347
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15349
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15351
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15353
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15355
 if ($AsyncRetVal | 0) {
  $21 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 15360
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 15361
  FUNCTION_TABLE_vi[$21 & 511]($16); //@line 15362
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 213; //@line 15365
   $22 = $ReallocAsyncCtx + 4 | 0; //@line 15366
   HEAP32[$22 >> 2] = $2; //@line 15367
   $23 = $ReallocAsyncCtx + 8 | 0; //@line 15368
   HEAP32[$23 >> 2] = $AsyncRetVal; //@line 15369
   sp = STACKTOP; //@line 15370
   return;
  }
  ___async_unwind = 0; //@line 15373
  HEAP32[$ReallocAsyncCtx >> 2] = 213; //@line 15374
  $22 = $ReallocAsyncCtx + 4 | 0; //@line 15375
  HEAP32[$22 >> 2] = $2; //@line 15376
  $23 = $ReallocAsyncCtx + 8 | 0; //@line 15377
  HEAP32[$23 >> 2] = $AsyncRetVal; //@line 15378
  sp = STACKTOP; //@line 15379
  return;
 }
 __ZN6Socket11set_timeoutEi($12, 0); //@line 15382
 $24 = HEAP32[$14 >> 2] | 0; //@line 15383
 $26 = $24; //@line 15385
 if (!$24) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 15387
  $27 = __Znwj(20) | 0; //@line 15388
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 215; //@line 15391
   $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 15392
   HEAP32[$28 >> 2] = $2; //@line 15393
   $29 = $ReallocAsyncCtx5 + 8 | 0; //@line 15394
   HEAP32[$29 >> 2] = $4; //@line 15395
   $30 = $ReallocAsyncCtx5 + 12 | 0; //@line 15396
   HEAP32[$30 >> 2] = $6; //@line 15397
   $31 = $ReallocAsyncCtx5 + 16 | 0; //@line 15398
   HEAP32[$31 >> 2] = $8; //@line 15399
   $32 = $ReallocAsyncCtx5 + 20 | 0; //@line 15400
   HEAP32[$32 >> 2] = $10; //@line 15401
   $33 = $ReallocAsyncCtx5 + 24 | 0; //@line 15402
   HEAP32[$33 >> 2] = $12; //@line 15403
   $34 = $ReallocAsyncCtx5 + 28 | 0; //@line 15404
   HEAP32[$34 >> 2] = $14; //@line 15405
   sp = STACKTOP; //@line 15406
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 15410
  ___async_unwind = 0; //@line 15411
  HEAP32[$ReallocAsyncCtx5 >> 2] = 215; //@line 15412
  $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 15413
  HEAP32[$28 >> 2] = $2; //@line 15414
  $29 = $ReallocAsyncCtx5 + 8 | 0; //@line 15415
  HEAP32[$29 >> 2] = $4; //@line 15416
  $30 = $ReallocAsyncCtx5 + 12 | 0; //@line 15417
  HEAP32[$30 >> 2] = $6; //@line 15418
  $31 = $ReallocAsyncCtx5 + 16 | 0; //@line 15419
  HEAP32[$31 >> 2] = $8; //@line 15420
  $32 = $ReallocAsyncCtx5 + 20 | 0; //@line 15421
  HEAP32[$32 >> 2] = $10; //@line 15422
  $33 = $ReallocAsyncCtx5 + 24 | 0; //@line 15423
  HEAP32[$33 >> 2] = $12; //@line 15424
  $34 = $ReallocAsyncCtx5 + 28 | 0; //@line 15425
  HEAP32[$34 >> 2] = $14; //@line 15426
  sp = STACKTOP; //@line 15427
  return;
 }
 $36 = $2 + 32 | 0; //@line 15430
 do {
  if (($24 | 0) == ($36 | 0)) {
   $70 = $24; //@line 15434
   $72 = $26; //@line 15434
  } else {
   $38 = $24 + 12 | 0; //@line 15436
   $39 = HEAP32[$38 >> 2] | 0; //@line 15437
   if ($39 | 0) {
    $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 15441
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 15442
    FUNCTION_TABLE_vi[$42 & 511]($24); //@line 15443
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 216; //@line 15446
     $43 = $ReallocAsyncCtx2 + 4 | 0; //@line 15447
     HEAP32[$43 >> 2] = $2; //@line 15448
     $44 = $ReallocAsyncCtx2 + 8 | 0; //@line 15449
     HEAP32[$44 >> 2] = $4; //@line 15450
     $45 = $ReallocAsyncCtx2 + 12 | 0; //@line 15451
     HEAP32[$45 >> 2] = $6; //@line 15452
     $46 = $ReallocAsyncCtx2 + 16 | 0; //@line 15453
     HEAP32[$46 >> 2] = $8; //@line 15454
     $47 = $ReallocAsyncCtx2 + 20 | 0; //@line 15455
     HEAP32[$47 >> 2] = $10; //@line 15456
     $48 = $ReallocAsyncCtx2 + 24 | 0; //@line 15457
     HEAP32[$48 >> 2] = $12; //@line 15458
     $49 = $ReallocAsyncCtx2 + 28 | 0; //@line 15459
     HEAP32[$49 >> 2] = $38; //@line 15460
     $50 = $ReallocAsyncCtx2 + 32 | 0; //@line 15461
     HEAP32[$50 >> 2] = $14; //@line 15462
     $51 = $ReallocAsyncCtx2 + 36 | 0; //@line 15463
     HEAP32[$51 >> 2] = $24; //@line 15464
     $52 = $ReallocAsyncCtx2 + 40 | 0; //@line 15465
     HEAP32[$52 >> 2] = $36; //@line 15466
     sp = STACKTOP; //@line 15467
     return;
    }
    ___async_unwind = 0; //@line 15470
    HEAP32[$ReallocAsyncCtx2 >> 2] = 216; //@line 15471
    $43 = $ReallocAsyncCtx2 + 4 | 0; //@line 15472
    HEAP32[$43 >> 2] = $2; //@line 15473
    $44 = $ReallocAsyncCtx2 + 8 | 0; //@line 15474
    HEAP32[$44 >> 2] = $4; //@line 15475
    $45 = $ReallocAsyncCtx2 + 12 | 0; //@line 15476
    HEAP32[$45 >> 2] = $6; //@line 15477
    $46 = $ReallocAsyncCtx2 + 16 | 0; //@line 15478
    HEAP32[$46 >> 2] = $8; //@line 15479
    $47 = $ReallocAsyncCtx2 + 20 | 0; //@line 15480
    HEAP32[$47 >> 2] = $10; //@line 15481
    $48 = $ReallocAsyncCtx2 + 24 | 0; //@line 15482
    HEAP32[$48 >> 2] = $12; //@line 15483
    $49 = $ReallocAsyncCtx2 + 28 | 0; //@line 15484
    HEAP32[$49 >> 2] = $38; //@line 15485
    $50 = $ReallocAsyncCtx2 + 32 | 0; //@line 15486
    HEAP32[$50 >> 2] = $14; //@line 15487
    $51 = $ReallocAsyncCtx2 + 36 | 0; //@line 15488
    HEAP32[$51 >> 2] = $24; //@line 15489
    $52 = $ReallocAsyncCtx2 + 40 | 0; //@line 15490
    HEAP32[$52 >> 2] = $36; //@line 15491
    sp = STACKTOP; //@line 15492
    return;
   }
   $53 = $2 + 44 | 0; //@line 15495
   $54 = HEAP32[$53 >> 2] | 0; //@line 15496
   if (!$54) {
    HEAP32[$38 >> 2] = 0; //@line 15499
    $$pre = HEAP32[$14 >> 2] | 0; //@line 15500
    $70 = $$pre; //@line 15502
    $72 = $$pre; //@line 15502
    break;
   }
   $57 = HEAP32[$54 + 4 >> 2] | 0; //@line 15506
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 15507
   FUNCTION_TABLE_vii[$57 & 7]($24, $36); //@line 15508
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 15511
    $58 = $ReallocAsyncCtx3 + 4 | 0; //@line 15512
    HEAP32[$58 >> 2] = $53; //@line 15513
    $59 = $ReallocAsyncCtx3 + 8 | 0; //@line 15514
    HEAP32[$59 >> 2] = $38; //@line 15515
    $60 = $ReallocAsyncCtx3 + 12 | 0; //@line 15516
    HEAP32[$60 >> 2] = $14; //@line 15517
    $61 = $ReallocAsyncCtx3 + 16 | 0; //@line 15518
    HEAP32[$61 >> 2] = $10; //@line 15519
    $62 = $ReallocAsyncCtx3 + 20 | 0; //@line 15520
    HEAP32[$62 >> 2] = $8; //@line 15521
    $63 = $ReallocAsyncCtx3 + 24 | 0; //@line 15522
    HEAP32[$63 >> 2] = $12; //@line 15523
    $64 = $ReallocAsyncCtx3 + 28 | 0; //@line 15524
    HEAP32[$64 >> 2] = $4; //@line 15525
    $65 = $ReallocAsyncCtx3 + 32 | 0; //@line 15526
    HEAP32[$65 >> 2] = $6; //@line 15527
    $66 = $ReallocAsyncCtx3 + 36 | 0; //@line 15528
    HEAP32[$66 >> 2] = $2; //@line 15529
    sp = STACKTOP; //@line 15530
    return;
   }
   ___async_unwind = 0; //@line 15533
   HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 15534
   $58 = $ReallocAsyncCtx3 + 4 | 0; //@line 15535
   HEAP32[$58 >> 2] = $53; //@line 15536
   $59 = $ReallocAsyncCtx3 + 8 | 0; //@line 15537
   HEAP32[$59 >> 2] = $38; //@line 15538
   $60 = $ReallocAsyncCtx3 + 12 | 0; //@line 15539
   HEAP32[$60 >> 2] = $14; //@line 15540
   $61 = $ReallocAsyncCtx3 + 16 | 0; //@line 15541
   HEAP32[$61 >> 2] = $10; //@line 15542
   $62 = $ReallocAsyncCtx3 + 20 | 0; //@line 15543
   HEAP32[$62 >> 2] = $8; //@line 15544
   $63 = $ReallocAsyncCtx3 + 24 | 0; //@line 15545
   HEAP32[$63 >> 2] = $12; //@line 15546
   $64 = $ReallocAsyncCtx3 + 28 | 0; //@line 15547
   HEAP32[$64 >> 2] = $4; //@line 15548
   $65 = $ReallocAsyncCtx3 + 32 | 0; //@line 15549
   HEAP32[$65 >> 2] = $6; //@line 15550
   $66 = $ReallocAsyncCtx3 + 36 | 0; //@line 15551
   HEAP32[$66 >> 2] = $2; //@line 15552
   sp = STACKTOP; //@line 15553
   return;
  }
 } while (0);
 HEAP32[$70 + 16 >> 2] = HEAP32[$10 >> 2]; //@line 15559
 HEAP32[$8 + 8 >> 2] = 0; //@line 15561
 HEAP32[$8 >> 2] = 218; //@line 15562
 HEAP32[$8 + 4 >> 2] = $72; //@line 15564
 $73 = $8 + 12 | 0; //@line 15565
 HEAP32[$73 >> 2] = 724; //@line 15566
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 15567
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $8); //@line 15568
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 219; //@line 15571
  $74 = $ReallocAsyncCtx10 + 4 | 0; //@line 15572
  HEAP32[$74 >> 2] = $73; //@line 15573
  $75 = $ReallocAsyncCtx10 + 8 | 0; //@line 15574
  HEAP32[$75 >> 2] = $4; //@line 15575
  $76 = $ReallocAsyncCtx10 + 12 | 0; //@line 15576
  HEAP32[$76 >> 2] = $6; //@line 15577
  $77 = $ReallocAsyncCtx10 + 16 | 0; //@line 15578
  HEAP32[$77 >> 2] = $8; //@line 15579
  $78 = $ReallocAsyncCtx10 + 20 | 0; //@line 15580
  HEAP32[$78 >> 2] = $2; //@line 15581
  sp = STACKTOP; //@line 15582
  return;
 }
 ___async_unwind = 0; //@line 15585
 HEAP32[$ReallocAsyncCtx10 >> 2] = 219; //@line 15586
 $74 = $ReallocAsyncCtx10 + 4 | 0; //@line 15587
 HEAP32[$74 >> 2] = $73; //@line 15588
 $75 = $ReallocAsyncCtx10 + 8 | 0; //@line 15589
 HEAP32[$75 >> 2] = $4; //@line 15590
 $76 = $ReallocAsyncCtx10 + 12 | 0; //@line 15591
 HEAP32[$76 >> 2] = $6; //@line 15592
 $77 = $ReallocAsyncCtx10 + 16 | 0; //@line 15593
 HEAP32[$77 >> 2] = $8; //@line 15594
 $78 = $ReallocAsyncCtx10 + 20 | 0; //@line 15595
 HEAP32[$78 >> 2] = $2; //@line 15596
 sp = STACKTOP; //@line 15597
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 2349
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 2350
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 2351
 $d_sroa_0_0_extract_trunc = $b$0; //@line 2352
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 2353
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 2354
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 2356
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 2359
    HEAP32[$rem + 4 >> 2] = 0; //@line 2360
   }
   $_0$1 = 0; //@line 2362
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 2363
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2364
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 2367
    $_0$0 = 0; //@line 2368
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2369
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 2371
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 2372
   $_0$1 = 0; //@line 2373
   $_0$0 = 0; //@line 2374
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2375
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 2378
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 2383
     HEAP32[$rem + 4 >> 2] = 0; //@line 2384
    }
    $_0$1 = 0; //@line 2386
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 2387
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2388
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 2392
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 2393
    }
    $_0$1 = 0; //@line 2395
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 2396
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2397
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 2399
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 2402
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 2403
    }
    $_0$1 = 0; //@line 2405
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 2406
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2407
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 2410
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 2412
    $58 = 31 - $51 | 0; //@line 2413
    $sr_1_ph = $57; //@line 2414
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 2415
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 2416
    $q_sroa_0_1_ph = 0; //@line 2417
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 2418
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 2422
    $_0$0 = 0; //@line 2423
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2424
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 2426
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 2427
   $_0$1 = 0; //@line 2428
   $_0$0 = 0; //@line 2429
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2430
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 2434
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 2436
     $126 = 31 - $119 | 0; //@line 2437
     $130 = $119 - 31 >> 31; //@line 2438
     $sr_1_ph = $125; //@line 2439
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 2440
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 2441
     $q_sroa_0_1_ph = 0; //@line 2442
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 2443
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 2447
     $_0$0 = 0; //@line 2448
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2449
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 2451
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 2452
    $_0$1 = 0; //@line 2453
    $_0$0 = 0; //@line 2454
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2455
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 2457
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 2460
    $89 = 64 - $88 | 0; //@line 2461
    $91 = 32 - $88 | 0; //@line 2462
    $92 = $91 >> 31; //@line 2463
    $95 = $88 - 32 | 0; //@line 2464
    $105 = $95 >> 31; //@line 2465
    $sr_1_ph = $88; //@line 2466
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 2467
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 2468
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 2469
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 2470
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 2474
    HEAP32[$rem + 4 >> 2] = 0; //@line 2475
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 2478
    $_0$0 = $a$0 | 0 | 0; //@line 2479
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2480
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 2482
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 2483
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 2484
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2485
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 2490
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 2491
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 2492
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 2493
  $carry_0_lcssa$1 = 0; //@line 2494
  $carry_0_lcssa$0 = 0; //@line 2495
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 2497
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 2498
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 2499
  $137$1 = tempRet0; //@line 2500
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 2501
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 2502
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 2503
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 2504
  $sr_1202 = $sr_1_ph; //@line 2505
  $carry_0203 = 0; //@line 2506
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 2508
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 2509
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 2510
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 2511
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 2512
   $150$1 = tempRet0; //@line 2513
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 2514
   $carry_0203 = $151$0 & 1; //@line 2515
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 2517
   $r_sroa_1_1200 = tempRet0; //@line 2518
   $sr_1202 = $sr_1202 - 1 | 0; //@line 2519
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 2531
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 2532
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 2533
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 2534
  $carry_0_lcssa$1 = 0; //@line 2535
  $carry_0_lcssa$0 = $carry_0203; //@line 2536
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 2538
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 2539
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 2542
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 2543
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 2545
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 2546
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 2547
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9524
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 9530
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 9539
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 9544
      $19 = $1 + 44 | 0; //@line 9545
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 9554
      $26 = $1 + 52 | 0; //@line 9555
      $27 = $1 + 53 | 0; //@line 9556
      $28 = $1 + 54 | 0; //@line 9557
      $29 = $0 + 8 | 0; //@line 9558
      $30 = $1 + 24 | 0; //@line 9559
      $$081$off0 = 0; //@line 9560
      $$084 = $0 + 16 | 0; //@line 9560
      $$085$off0 = 0; //@line 9560
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 9564
        label = 20; //@line 9565
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 9568
       HEAP8[$27 >> 0] = 0; //@line 9569
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 9570
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 9571
       if (___async) {
        label = 12; //@line 9574
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 9577
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 9581
        label = 20; //@line 9582
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 9589
         $$186$off0 = $$085$off0; //@line 9589
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 9598
           label = 20; //@line 9599
           break L10;
          } else {
           $$182$off0 = 1; //@line 9602
           $$186$off0 = $$085$off0; //@line 9602
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 9609
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 9616
          break L10;
         } else {
          $$182$off0 = 1; //@line 9619
          $$186$off0 = 1; //@line 9619
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 9624
       $$084 = $$084 + 8 | 0; //@line 9624
       $$085$off0 = $$186$off0; //@line 9624
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 346; //@line 9627
       HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 9629
       HEAP32[$AsyncCtx15 + 8 >> 2] = $19; //@line 9631
       HEAP32[$AsyncCtx15 + 12 >> 2] = $29; //@line 9633
       HEAP32[$AsyncCtx15 + 16 >> 2] = $26; //@line 9635
       HEAP32[$AsyncCtx15 + 20 >> 2] = $30; //@line 9637
       HEAP32[$AsyncCtx15 + 24 >> 2] = $2; //@line 9639
       HEAP32[$AsyncCtx15 + 28 >> 2] = $13; //@line 9641
       HEAP32[$AsyncCtx15 + 32 >> 2] = $1; //@line 9643
       HEAP8[$AsyncCtx15 + 36 >> 0] = $$085$off0 & 1; //@line 9646
       HEAP8[$AsyncCtx15 + 37 >> 0] = $$081$off0 & 1; //@line 9649
       HEAP32[$AsyncCtx15 + 40 >> 2] = $$084; //@line 9651
       HEAP32[$AsyncCtx15 + 44 >> 2] = $27; //@line 9653
       HEAP8[$AsyncCtx15 + 48 >> 0] = $4 & 1; //@line 9656
       HEAP32[$AsyncCtx15 + 52 >> 2] = $25; //@line 9658
       sp = STACKTOP; //@line 9659
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 9665
         $61 = $1 + 40 | 0; //@line 9666
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 9669
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 9677
           if ($$283$off0) {
            label = 25; //@line 9679
            break;
           } else {
            $69 = 4; //@line 9682
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 9689
        } else {
         $69 = 4; //@line 9691
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 9696
      }
      HEAP32[$19 >> 2] = $69; //@line 9698
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 9707
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 9712
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 9713
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9714
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 9715
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 347; //@line 9718
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 9720
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 9722
    HEAP32[$AsyncCtx11 + 12 >> 2] = $3; //@line 9724
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4 & 1; //@line 9727
    HEAP32[$AsyncCtx11 + 20 >> 2] = $73; //@line 9729
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 9731
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 9733
    sp = STACKTOP; //@line 9734
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9737
   $81 = $0 + 24 | 0; //@line 9738
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 9742
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 9746
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 9753
       $$2 = $81; //@line 9754
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 9766
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 9767
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 9772
        $136 = $$2 + 8 | 0; //@line 9773
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 9776
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 350; //@line 9781
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 9783
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 9785
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 9787
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 9789
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 9791
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 9793
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 9795
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 9798
       sp = STACKTOP; //@line 9799
       return;
      }
      $104 = $1 + 24 | 0; //@line 9802
      $105 = $1 + 54 | 0; //@line 9803
      $$1 = $81; //@line 9804
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 9820
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 9821
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9826
       $122 = $$1 + 8 | 0; //@line 9827
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 9830
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 349; //@line 9835
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 9837
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 9839
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 9841
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 9843
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 9845
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 9847
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 9849
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 9851
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 9854
      sp = STACKTOP; //@line 9855
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 9859
    $$0 = $81; //@line 9860
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9867
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 9868
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9873
     $100 = $$0 + 8 | 0; //@line 9874
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 9877
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 348; //@line 9882
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 9884
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 9886
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 9888
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 9890
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 9892
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 9894
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 9897
    sp = STACKTOP; //@line 9898
    return;
   }
  }
 } while (0);
 return;
}
function __ZL28nsapi_dns_query_async_deletei($0) {
 $0 = $0 | 0;
 var $$03647$lcssa$ph = 0, $$03647$lcssa5456 = 0, $$03647$lcssa545760 = 0, $$03647$lcssa54576164 = 0, $$038 = 0, $$1$off0 = 0, $$1$off0$1 = 0, $$1$off0$162 = 0, $$1$off0$2 = 0, $$1$off0$266 = 0, $$1$off0$3 = 0, $$1$off0$368 = 0, $$1$off0$4 = 0, $$1$off058 = 0, $$ph = 0, $$pre$phiZ2D = 0, $1 = 0, $101 = 0, $105 = 0, $113 = 0, $118 = 0, $122 = 0, $126 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $32 = 0, $33 = 0, $36 = 0, $39 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $62 = 0, $66 = 0, $69 = 0, $7 = 0, $77 = 0, $81 = 0, $89 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18272
 $1 = HEAP32[2518] | 0; //@line 18273
 $2 = ($1 | 0) == 0; //@line 18274
 if ($2) {
  label = 3; //@line 18276
 } else {
  if ((HEAP32[$1 >> 2] | 0) == ($0 | 0)) {
   $$03647$lcssa5456 = 0; //@line 18281
   $$1$off058 = 1; //@line 18281
   $130 = 10072; //@line 18281
   $77 = $1; //@line 18281
   label = 38; //@line 18282
  } else {
   label = 3; //@line 18284
  }
 }
 if ((label | 0) == 3) {
  $5 = HEAP32[2519] | 0; //@line 18288
  if (!$5) {
   label = 55; //@line 18291
  } else {
   if ((HEAP32[$5 >> 2] | 0) == ($0 | 0)) {
    $$03647$lcssa$ph = 1; //@line 18296
    $$ph = $5; //@line 18296
   } else {
    label = 55; //@line 18298
   }
  }
  do {
   if ((label | 0) == 55) {
    $118 = HEAP32[2520] | 0; //@line 18303
    if ($118 | 0) {
     if ((HEAP32[$118 >> 2] | 0) == ($0 | 0)) {
      $$03647$lcssa$ph = 2; //@line 18309
      $$ph = $118; //@line 18309
      break;
     }
    }
    $122 = HEAP32[2521] | 0; //@line 18313
    if ($122 | 0) {
     if ((HEAP32[$122 >> 2] | 0) == ($0 | 0)) {
      $$03647$lcssa$ph = 3; //@line 18319
      $$ph = $122; //@line 18319
      break;
     }
    }
    $126 = HEAP32[2522] | 0; //@line 18323
    if (!$126) {
     $$038 = -3012; //@line 18326
     return $$038 | 0; //@line 18327
    }
    if ((HEAP32[$126 >> 2] | 0) == ($0 | 0)) {
     $$03647$lcssa$ph = 4; //@line 18332
     $$ph = $126; //@line 18332
    } else {
     $$038 = -3012; //@line 18334
     return $$038 | 0; //@line 18335
    }
   }
  } while (0);
  $7 = 10072 + ($$03647$lcssa$ph << 2) | 0; //@line 18339
  if ($2) {
   $$1$off0 = 1; //@line 18341
  } else {
   if (!(HEAP32[$1 + 56 >> 2] | 0)) {
    $$1$off0 = 1; //@line 18347
   } else {
    $$1$off0 = (HEAP32[$1 + 8 >> 2] | 0) != (HEAP32[$$ph + 8 >> 2] | 0); //@line 18354
   }
  }
  if (($$03647$lcssa$ph | 0) == 1) {
   $$03647$lcssa545760 = 1; //@line 18359
   $$1$off0$162 = $$1$off0; //@line 18359
   $131 = $7; //@line 18359
   $89 = $$ph; //@line 18359
   label = 42; //@line 18360
  } else {
   $$03647$lcssa5456 = $$03647$lcssa$ph; //@line 18362
   $$1$off058 = $$1$off0; //@line 18362
   $130 = $7; //@line 18362
   $77 = $$ph; //@line 18362
   label = 38; //@line 18363
  }
 }
 if ((label | 0) == 38) {
  $69 = HEAP32[2519] | 0; //@line 18367
  if (!$69) {
   $$1$off0$1 = $$1$off058; //@line 18370
  } else {
   if (!(HEAP32[$69 + 56 >> 2] | 0)) {
    $$1$off0$1 = $$1$off058; //@line 18376
   } else {
    $$1$off0$1 = $$1$off058 & (HEAP32[$69 + 8 >> 2] | 0) != (HEAP32[$77 + 8 >> 2] | 0); //@line 18384
   }
  }
  if (($$03647$lcssa5456 | 0) == 2) {
   $$03647$lcssa54576164 = 2; //@line 18389
   $$1$off0$266 = $$1$off0$1; //@line 18389
   $101 = $77; //@line 18389
   $132 = $130; //@line 18389
   label = 46; //@line 18390
  } else {
   $$03647$lcssa545760 = $$03647$lcssa5456; //@line 18392
   $$1$off0$162 = $$1$off0$1; //@line 18392
   $131 = $130; //@line 18392
   $89 = $77; //@line 18392
   label = 42; //@line 18393
  }
 }
 if ((label | 0) == 42) {
  $81 = HEAP32[2520] | 0; //@line 18397
  if (!$81) {
   $$1$off0$2 = $$1$off0$162; //@line 18400
  } else {
   if (!(HEAP32[$81 + 56 >> 2] | 0)) {
    $$1$off0$2 = $$1$off0$162; //@line 18406
   } else {
    $$1$off0$2 = $$1$off0$162 & (HEAP32[$81 + 8 >> 2] | 0) != (HEAP32[$89 + 8 >> 2] | 0); //@line 18414
   }
  }
  if (($$03647$lcssa545760 | 0) == 3) {
   $$1$off0$368 = $$1$off0$2; //@line 18419
   $113 = $89; //@line 18419
   $133 = $131; //@line 18419
   label = 50; //@line 18420
  } else {
   $$03647$lcssa54576164 = $$03647$lcssa545760; //@line 18422
   $$1$off0$266 = $$1$off0$2; //@line 18422
   $101 = $89; //@line 18422
   $132 = $131; //@line 18422
   label = 46; //@line 18423
  }
 }
 if ((label | 0) == 46) {
  $93 = HEAP32[2521] | 0; //@line 18427
  if (!$93) {
   $$1$off0$3 = $$1$off0$266; //@line 18430
  } else {
   if (!(HEAP32[$93 + 56 >> 2] | 0)) {
    $$1$off0$3 = $$1$off0$266; //@line 18436
   } else {
    $$1$off0$3 = $$1$off0$266 & (HEAP32[$93 + 8 >> 2] | 0) != (HEAP32[$101 + 8 >> 2] | 0); //@line 18444
   }
  }
  if (($$03647$lcssa54576164 | 0) == 4) {
   $$1$off0$4 = $$1$off0$3; //@line 18449
   $134 = $132; //@line 18449
   $135 = $101; //@line 18449
   label = 53; //@line 18450
  } else {
   $$1$off0$368 = $$1$off0$3; //@line 18452
   $113 = $101; //@line 18452
   $133 = $132; //@line 18452
   label = 50; //@line 18453
  }
 }
 if ((label | 0) == 50) {
  $105 = HEAP32[2522] | 0; //@line 18457
  if (!$105) {
   $$1$off0$4 = $$1$off0$368; //@line 18460
   $134 = $133; //@line 18460
   $135 = $113; //@line 18460
   label = 53; //@line 18461
  } else {
   if (!(HEAP32[$105 + 56 >> 2] | 0)) {
    $$1$off0$4 = $$1$off0$368; //@line 18467
    $134 = $133; //@line 18467
    $135 = $113; //@line 18467
    label = 53; //@line 18468
   } else {
    if ($$1$off0$368 & (HEAP32[$105 + 8 >> 2] | 0) != (HEAP32[$113 + 8 >> 2] | 0)) {
     $18 = $113; //@line 18477
     $22 = $133; //@line 18477
     label = 8; //@line 18478
    } else {
     $43 = $113; //@line 18480
     $46 = $133; //@line 18480
    }
   }
  }
 }
 if ((label | 0) == 53) {
  if ($$1$off0$4) {
   $18 = $135; //@line 18487
   $22 = $134; //@line 18487
   label = 8; //@line 18488
  } else {
   $43 = $135; //@line 18490
   $46 = $134; //@line 18490
  }
 }
 if ((label | 0) == 8) {
  $19 = HEAP32[$18 + 56 >> 2] | 0; //@line 18495
  if (!$19) {
   $43 = $18; //@line 18498
   $46 = $22; //@line 18498
  } else {
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18500
   __ZN6Socket5closeEv($19) | 0; //@line 18501
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 253; //@line 18504
    HEAP32[$AsyncCtx15 + 4 >> 2] = $22; //@line 18506
    sp = STACKTOP; //@line 18507
    return 0; //@line 18508
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18510
   $23 = HEAP32[$22 >> 2] | 0; //@line 18511
   $25 = HEAP32[$23 + 56 >> 2] | 0; //@line 18513
   do {
    if (!$25) {
     $32 = $23; //@line 18517
    } else {
     $29 = HEAP32[(HEAP32[$25 >> 2] | 0) + 4 >> 2] | 0; //@line 18521
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18522
     FUNCTION_TABLE_vi[$29 & 511]($25); //@line 18523
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 254; //@line 18526
      HEAP32[$AsyncCtx + 4 >> 2] = $22; //@line 18528
      sp = STACKTOP; //@line 18529
      return 0; //@line 18530
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 18532
      $32 = HEAP32[$22 >> 2] | 0; //@line 18534
      break;
     }
    }
   } while (0);
   $33 = HEAP32[$32 + 60 >> 2] | 0; //@line 18540
   if (!$33) {
    $43 = $32; //@line 18543
    $46 = $22; //@line 18543
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0; //@line 18546
    do {
     if (!$36) {
      $$pre$phiZ2D = $33; //@line 18550
     } else {
      $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 18553
      $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18554
      FUNCTION_TABLE_vi[$39 & 511]($33); //@line 18555
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 255; //@line 18558
       HEAP32[$AsyncCtx3 + 4 >> 2] = $22; //@line 18560
       HEAP32[$AsyncCtx3 + 8 >> 2] = $33; //@line 18562
       sp = STACKTOP; //@line 18563
       return 0; //@line 18564
      } else {
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18566
       $$pre$phiZ2D = $33; //@line 18567
       break;
      }
     }
    } while (0);
    __ZdlPv($$pre$phiZ2D); //@line 18572
    $43 = HEAP32[$22 >> 2] | 0; //@line 18574
    $46 = $22; //@line 18574
   }
  }
 }
 $44 = HEAP32[$43 + 64 >> 2] | 0; //@line 18579
 if (!$44) {
  $48 = $43; //@line 18582
 } else {
  __ZdaPv($44); //@line 18584
  $48 = HEAP32[$46 >> 2] | 0; //@line 18586
 }
 $49 = HEAP32[$48 + 12 >> 2] | 0; //@line 18589
 if (!$49) {
  $52 = $48; //@line 18592
 } else {
  __ZdlPv($49); //@line 18594
  $52 = HEAP32[$46 >> 2] | 0; //@line 18596
 }
 if ($52 | 0) {
  $54 = HEAP32[$52 + 44 >> 2] | 0; //@line 18601
  do {
   if ($54 | 0) {
    $58 = HEAP32[$54 + 8 >> 2] | 0; //@line 18607
    $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18608
    FUNCTION_TABLE_vi[$58 & 511]($52 + 32 | 0); //@line 18609
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 256; //@line 18612
     HEAP32[$AsyncCtx7 + 4 >> 2] = $52; //@line 18614
     HEAP32[$AsyncCtx7 + 8 >> 2] = $46; //@line 18616
     sp = STACKTOP; //@line 18617
     return 0; //@line 18618
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18620
     break;
    }
   }
  } while (0);
  $62 = HEAP32[$52 + 28 >> 2] | 0; //@line 18626
  do {
   if ($62 | 0) {
    $66 = HEAP32[$62 + 8 >> 2] | 0; //@line 18632
    $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18633
    FUNCTION_TABLE_vi[$66 & 511]($52 + 16 | 0); //@line 18634
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 257; //@line 18637
     HEAP32[$AsyncCtx11 + 4 >> 2] = $52; //@line 18639
     HEAP32[$AsyncCtx11 + 8 >> 2] = $46; //@line 18641
     sp = STACKTOP; //@line 18642
     return 0; //@line 18643
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18645
     break;
    }
   }
  } while (0);
  __ZdlPv($52); //@line 18650
 }
 HEAP32[$46 >> 2] = 0; //@line 18652
 $$038 = 0; //@line 18653
 return $$038 | 0; //@line 18654
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $$124$450 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $29 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $6 = 0, $61 = 0, $64 = 0, $7 = 0, $71 = 0, $74 = 0, $79 = 0, $85 = 0, $86 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16714
 STACKTOP = STACKTOP + 48 | 0; //@line 16715
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 16715
 $3 = sp + 32 | 0; //@line 16716
 $4 = sp + 16 | 0; //@line 16717
 $5 = sp; //@line 16718
 $6 = $0 + 28 | 0; //@line 16719
 $7 = HEAP32[$6 >> 2] | 0; //@line 16720
 do {
  if (!$7) {
   $21 = 0; //@line 16724
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 16728
   $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 16729
   FUNCTION_TABLE_vii[$11 & 7]($3, $0 + 16 | 0); //@line 16730
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 223; //@line 16733
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16735
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16737
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 16739
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 16741
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 16743
    HEAP32[$AsyncCtx + 24 >> 2] = $6; //@line 16745
    HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 16747
    HEAP32[$AsyncCtx + 32 >> 2] = $5; //@line 16749
    sp = STACKTOP; //@line 16750
    STACKTOP = sp; //@line 16751
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16753
    $21 = HEAP32[$6 >> 2] | 0; //@line 16755
    break;
   }
  }
 } while (0);
 $20 = $3 + 12 | 0; //@line 16760
 HEAP32[$20 >> 2] = $21; //@line 16761
 $22 = HEAP32[$0 >> 2] | 0; //@line 16762
 $AsyncCtx20 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16763
 __ZL28nsapi_dns_query_async_deletei($22) | 0; //@line 16764
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 224; //@line 16767
  HEAP32[$AsyncCtx20 + 4 >> 2] = $20; //@line 16769
  HEAP32[$AsyncCtx20 + 8 >> 2] = $3; //@line 16771
  HEAP32[$AsyncCtx20 + 12 >> 2] = $4; //@line 16773
  HEAP32[$AsyncCtx20 + 16 >> 2] = $1; //@line 16775
  HEAP32[$AsyncCtx20 + 20 >> 2] = $2; //@line 16777
  HEAP32[$AsyncCtx20 + 24 >> 2] = $5; //@line 16779
  sp = STACKTOP; //@line 16780
  STACKTOP = sp; //@line 16781
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 16783
 $29 = HEAP32[2518] | 0; //@line 16784
 if (!$29) {
  $$1 = 2147483647; //@line 16787
  $$124 = 0; //@line 16787
 } else {
  $$1 = HEAP32[$29 >> 2] | 0; //@line 16790
  $$124 = $29; //@line 16790
 }
 $32 = HEAP32[2519] | 0; //@line 16792
 if (!$32) {
  $$1$1 = $$1; //@line 16795
  $$124$1 = $$124; //@line 16795
 } else {
  $94 = HEAP32[$32 >> 2] | 0; //@line 16797
  $95 = ($94 | 0) > ($$1 | 0); //@line 16798
  $$1$1 = $95 ? $$1 : $94; //@line 16801
  $$124$1 = $95 ? $$124 : $32; //@line 16801
 }
 $96 = HEAP32[2520] | 0; //@line 16803
 if (!$96) {
  $$1$2 = $$1$1; //@line 16806
  $$124$2 = $$124$1; //@line 16806
 } else {
  $98 = HEAP32[$96 >> 2] | 0; //@line 16808
  $99 = ($98 | 0) > ($$1$1 | 0); //@line 16809
  $$1$2 = $99 ? $$1$1 : $98; //@line 16812
  $$124$2 = $99 ? $$124$1 : $96; //@line 16812
 }
 $100 = HEAP32[2521] | 0; //@line 16814
 if (!$100) {
  $$1$3 = $$1$2; //@line 16817
  $$124$3 = $$124$2; //@line 16817
 } else {
  $102 = HEAP32[$100 >> 2] | 0; //@line 16819
  $103 = ($102 | 0) > ($$1$2 | 0); //@line 16820
  $$1$3 = $103 ? $$1$2 : $102; //@line 16823
  $$124$3 = $103 ? $$124$2 : $100; //@line 16823
 }
 $104 = HEAP32[2522] | 0; //@line 16825
 if (!$104) {
  label = 42; //@line 16828
 } else {
  if ((HEAP32[$104 >> 2] | 0) > ($$1$3 | 0)) {
   label = 42; //@line 16833
  } else {
   $$124$450 = $104; //@line 16835
   label = 10; //@line 16836
  }
 }
 if ((label | 0) == 42) {
  if ($$124$3 | 0) {
   $$124$450 = $$124$3; //@line 16842
   label = 10; //@line 16843
  }
 }
 do {
  if ((label | 0) == 10) {
   $34 = $$124$450 + 44 | 0; //@line 16848
   $35 = HEAP32[$34 >> 2] | 0; //@line 16849
   do {
    if (!$35) {
     $49 = 0; //@line 16853
    } else {
     $39 = HEAP32[$35 + 4 >> 2] | 0; //@line 16857
     $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16858
     FUNCTION_TABLE_vii[$39 & 7]($4, $$124$450 + 32 | 0); //@line 16859
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 225; //@line 16862
      HEAP32[$AsyncCtx2 + 4 >> 2] = $20; //@line 16864
      HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 16866
      HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 16868
      HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 16870
      HEAP32[$AsyncCtx2 + 20 >> 2] = $34; //@line 16872
      HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 16874
      HEAP32[$AsyncCtx2 + 28 >> 2] = $$124$450; //@line 16876
      HEAP32[$AsyncCtx2 + 32 >> 2] = $5; //@line 16878
      sp = STACKTOP; //@line 16879
      STACKTOP = sp; //@line 16880
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16882
      $49 = HEAP32[$34 >> 2] | 0; //@line 16884
      break;
     }
    }
   } while (0);
   $48 = $4 + 12 | 0; //@line 16889
   HEAP32[$48 >> 2] = $49; //@line 16890
   $50 = HEAP32[$$124$450 >> 2] | 0; //@line 16891
   HEAP32[$5 + 8 >> 2] = 0; //@line 16893
   HEAP32[$5 >> 2] = 184; //@line 16894
   HEAP32[$5 + 4 >> 2] = $50; //@line 16896
   $52 = $5 + 12 | 0; //@line 16897
   HEAP32[$52 >> 2] = 724; //@line 16898
   $AsyncCtx23 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16899
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $5) | 0; //@line 16900
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 226; //@line 16903
    HEAP32[$AsyncCtx23 + 4 >> 2] = $20; //@line 16905
    HEAP32[$AsyncCtx23 + 8 >> 2] = $3; //@line 16907
    HEAP32[$AsyncCtx23 + 12 >> 2] = $48; //@line 16909
    HEAP32[$AsyncCtx23 + 16 >> 2] = $4; //@line 16911
    HEAP32[$AsyncCtx23 + 20 >> 2] = $1; //@line 16913
    HEAP32[$AsyncCtx23 + 24 >> 2] = $2; //@line 16915
    HEAP32[$AsyncCtx23 + 28 >> 2] = $52; //@line 16917
    HEAP32[$AsyncCtx23 + 32 >> 2] = $5; //@line 16919
    sp = STACKTOP; //@line 16920
    STACKTOP = sp; //@line 16921
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 16923
   $61 = HEAP32[$52 >> 2] | 0; //@line 16924
   do {
    if ($61 | 0) {
     $64 = HEAP32[$61 + 8 >> 2] | 0; //@line 16929
     $AsyncCtx6 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16930
     FUNCTION_TABLE_vi[$64 & 511]($5); //@line 16931
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 227; //@line 16934
      HEAP32[$AsyncCtx6 + 4 >> 2] = $48; //@line 16936
      HEAP32[$AsyncCtx6 + 8 >> 2] = $20; //@line 16938
      HEAP32[$AsyncCtx6 + 12 >> 2] = $4; //@line 16940
      HEAP32[$AsyncCtx6 + 16 >> 2] = $3; //@line 16942
      HEAP32[$AsyncCtx6 + 20 >> 2] = $1; //@line 16944
      HEAP32[$AsyncCtx6 + 24 >> 2] = $2; //@line 16946
      sp = STACKTOP; //@line 16947
      STACKTOP = sp; //@line 16948
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 16950
      break;
     }
    }
   } while (0);
   $71 = HEAP32[$48 >> 2] | 0; //@line 16955
   if ($71 | 0) {
    $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 16959
    $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16960
    FUNCTION_TABLE_vi[$74 & 511]($4); //@line 16961
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 228; //@line 16964
     HEAP32[$AsyncCtx10 + 4 >> 2] = $20; //@line 16966
     HEAP32[$AsyncCtx10 + 8 >> 2] = $3; //@line 16968
     HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 16970
     HEAP32[$AsyncCtx10 + 16 >> 2] = $2; //@line 16972
     sp = STACKTOP; //@line 16973
     STACKTOP = sp; //@line 16974
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 16976
     break;
    }
   }
  }
 } while (0);
 $79 = HEAP32[$20 >> 2] | 0; //@line 16982
 do {
  if (!$79) {
   $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16986
   _mbed_assert_internal(6023, 6028, 1677); //@line 16987
   if (___async) {
    HEAP32[$AsyncCtx26 >> 2] = 229; //@line 16990
    HEAP32[$AsyncCtx26 + 4 >> 2] = $20; //@line 16992
    HEAP32[$AsyncCtx26 + 8 >> 2] = $3; //@line 16994
    HEAP32[$AsyncCtx26 + 12 >> 2] = $1; //@line 16996
    HEAP32[$AsyncCtx26 + 16 >> 2] = $2; //@line 16998
    sp = STACKTOP; //@line 16999
    STACKTOP = sp; //@line 17000
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 17002
    $86 = HEAP32[$20 >> 2] | 0; //@line 17004
    break;
   }
  } else {
   $86 = $79; //@line 17008
  }
 } while (0);
 $85 = HEAP32[$86 >> 2] | 0; //@line 17011
 $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17012
 FUNCTION_TABLE_viii[$85 & 0]($3, $1, $2); //@line 17013
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 230; //@line 17016
  HEAP32[$AsyncCtx13 + 4 >> 2] = $20; //@line 17018
  HEAP32[$AsyncCtx13 + 8 >> 2] = $3; //@line 17020
  sp = STACKTOP; //@line 17021
  STACKTOP = sp; //@line 17022
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 17024
 $89 = HEAP32[$20 >> 2] | 0; //@line 17025
 if (!$89) {
  STACKTOP = sp; //@line 17028
  return;
 }
 $92 = HEAP32[$89 + 8 >> 2] | 0; //@line 17031
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 17032
 FUNCTION_TABLE_vi[$92 & 511]($3); //@line 17033
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 231; //@line 17036
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 17038
  sp = STACKTOP; //@line 17039
  STACKTOP = sp; //@line 17040
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 17042
 STACKTOP = sp; //@line 17043
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_157($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30212
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30214
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30216
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30218
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30220
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30222
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30224
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30226
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30228
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30230
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30232
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30234
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30236
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30238
 $42 = HEAP32[$2 >> 2] | 0; //@line 30239
 if ($42 | 0) {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 30243
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 30244
  FUNCTION_TABLE_vi[$45 & 511]($16); //@line 30245
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 246; //@line 30248
   $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 30249
   HEAP32[$46 >> 2] = $2; //@line 30250
   $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 30251
   HEAP32[$47 >> 2] = $4; //@line 30252
   $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 30253
   HEAP32[$48 >> 2] = $6; //@line 30254
   $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 30255
   HEAP32[$49 >> 2] = $8; //@line 30256
   $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 30257
   HEAP32[$50 >> 2] = $10; //@line 30258
   $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 30259
   HEAP32[$51 >> 2] = $12; //@line 30260
   $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 30261
   HEAP32[$52 >> 2] = $14; //@line 30262
   $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 30263
   HEAP32[$53 >> 2] = $16; //@line 30264
   $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 30265
   HEAP32[$54 >> 2] = $18; //@line 30266
   $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 30267
   HEAP32[$55 >> 2] = $20; //@line 30268
   $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 30269
   HEAP32[$56 >> 2] = $22; //@line 30270
   $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 30271
   HEAP32[$57 >> 2] = $24; //@line 30272
   $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 30273
   HEAP32[$58 >> 2] = $26; //@line 30274
   sp = STACKTOP; //@line 30275
   return;
  }
  ___async_unwind = 0; //@line 30278
  HEAP32[$ReallocAsyncCtx2 >> 2] = 246; //@line 30279
  $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 30280
  HEAP32[$46 >> 2] = $2; //@line 30281
  $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 30282
  HEAP32[$47 >> 2] = $4; //@line 30283
  $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 30284
  HEAP32[$48 >> 2] = $6; //@line 30285
  $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 30286
  HEAP32[$49 >> 2] = $8; //@line 30287
  $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 30288
  HEAP32[$50 >> 2] = $10; //@line 30289
  $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 30290
  HEAP32[$51 >> 2] = $12; //@line 30291
  $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 30292
  HEAP32[$52 >> 2] = $14; //@line 30293
  $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 30294
  HEAP32[$53 >> 2] = $16; //@line 30295
  $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 30296
  HEAP32[$54 >> 2] = $18; //@line 30297
  $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 30298
  HEAP32[$55 >> 2] = $20; //@line 30299
  $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 30300
  HEAP32[$56 >> 2] = $22; //@line 30301
  $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 30302
  HEAP32[$57 >> 2] = $24; //@line 30303
  $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 30304
  HEAP32[$58 >> 2] = $26; //@line 30305
  sp = STACKTOP; //@line 30306
  return;
 }
 $59 = HEAP32[$18 >> 2] | 0; //@line 30309
 if (!$59) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 30312
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($20, 0, $22, 512) | 0; //@line 30313
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 30316
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 30317
   HEAP32[$28 >> 2] = $2; //@line 30318
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 30319
   HEAP32[$29 >> 2] = $4; //@line 30320
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 30321
   HEAP32[$30 >> 2] = $6; //@line 30322
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 30323
   HEAP32[$31 >> 2] = $8; //@line 30324
   $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 30325
   HEAP32[$32 >> 2] = $10; //@line 30326
   $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 30327
   HEAP32[$33 >> 2] = $12; //@line 30328
   $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 30329
   HEAP32[$34 >> 2] = $14; //@line 30330
   $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 30331
   HEAP32[$35 >> 2] = $16; //@line 30332
   $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 30333
   HEAP32[$36 >> 2] = $18; //@line 30334
   $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 30335
   HEAP32[$37 >> 2] = $20; //@line 30336
   $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 30337
   HEAP32[$38 >> 2] = $22; //@line 30338
   $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 30339
   HEAP32[$39 >> 2] = $24; //@line 30340
   $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 30341
   HEAP32[$40 >> 2] = $26; //@line 30342
   sp = STACKTOP; //@line 30343
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 30347
  ___async_unwind = 0; //@line 30348
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 30349
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 30350
  HEAP32[$28 >> 2] = $2; //@line 30351
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 30352
  HEAP32[$29 >> 2] = $4; //@line 30353
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 30354
  HEAP32[$30 >> 2] = $6; //@line 30355
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 30356
  HEAP32[$31 >> 2] = $8; //@line 30357
  $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 30358
  HEAP32[$32 >> 2] = $10; //@line 30359
  $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 30360
  HEAP32[$33 >> 2] = $12; //@line 30361
  $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 30362
  HEAP32[$34 >> 2] = $14; //@line 30363
  $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 30364
  HEAP32[$35 >> 2] = $16; //@line 30365
  $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 30366
  HEAP32[$36 >> 2] = $18; //@line 30367
  $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 30368
  HEAP32[$37 >> 2] = $20; //@line 30369
  $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 30370
  HEAP32[$38 >> 2] = $22; //@line 30371
  $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 30372
  HEAP32[$39 >> 2] = $24; //@line 30373
  $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 30374
  HEAP32[$40 >> 2] = $26; //@line 30375
  sp = STACKTOP; //@line 30376
  return;
 } else {
  $62 = HEAP32[$59 + 8 >> 2] | 0; //@line 30380
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 30381
  FUNCTION_TABLE_vi[$62 & 511]($26); //@line 30382
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 30385
   $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 30386
   HEAP32[$63 >> 2] = $2; //@line 30387
   $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 30388
   HEAP32[$64 >> 2] = $4; //@line 30389
   $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 30390
   HEAP32[$65 >> 2] = $6; //@line 30391
   $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 30392
   HEAP32[$66 >> 2] = $8; //@line 30393
   $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 30394
   HEAP32[$67 >> 2] = $10; //@line 30395
   $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 30396
   HEAP32[$68 >> 2] = $12; //@line 30397
   $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 30398
   HEAP32[$69 >> 2] = $14; //@line 30399
   $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 30400
   HEAP32[$70 >> 2] = $16; //@line 30401
   $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 30402
   HEAP32[$71 >> 2] = $18; //@line 30403
   $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 30404
   HEAP32[$72 >> 2] = $20; //@line 30405
   $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 30406
   HEAP32[$73 >> 2] = $22; //@line 30407
   $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 30408
   HEAP32[$74 >> 2] = $24; //@line 30409
   $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 30410
   HEAP32[$75 >> 2] = $26; //@line 30411
   sp = STACKTOP; //@line 30412
   return;
  }
  ___async_unwind = 0; //@line 30415
  HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 30416
  $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 30417
  HEAP32[$63 >> 2] = $2; //@line 30418
  $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 30419
  HEAP32[$64 >> 2] = $4; //@line 30420
  $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 30421
  HEAP32[$65 >> 2] = $6; //@line 30422
  $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 30423
  HEAP32[$66 >> 2] = $8; //@line 30424
  $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 30425
  HEAP32[$67 >> 2] = $10; //@line 30426
  $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 30427
  HEAP32[$68 >> 2] = $12; //@line 30428
  $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 30429
  HEAP32[$69 >> 2] = $14; //@line 30430
  $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 30431
  HEAP32[$70 >> 2] = $16; //@line 30432
  $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 30433
  HEAP32[$71 >> 2] = $18; //@line 30434
  $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 30435
  HEAP32[$72 >> 2] = $20; //@line 30436
  $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 30437
  HEAP32[$73 >> 2] = $22; //@line 30438
  $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 30439
  HEAP32[$74 >> 2] = $24; //@line 30440
  $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 30441
  HEAP32[$75 >> 2] = $26; //@line 30442
  sp = STACKTOP; //@line 30443
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$393 = 0, $$byval_copy = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $57 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29501
 STACKTOP = STACKTOP + 32 | 0; //@line 29502
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 29502
 $$byval_copy = sp; //@line 29503
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29505
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29507
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29509
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29511
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29513
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29515
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29517
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 29519
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29521
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29523
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29525
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29527
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29529
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29531
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29533
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29535
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 29537
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 29539
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 29541
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 29543
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 29545
 $44 = HEAP8[$0 + 88 >> 0] | 0; //@line 29547
 $46 = HEAP8[$0 + 89 >> 0] | 0; //@line 29549
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 29551
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 29553
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 29555
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  $57 = 608 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 29562
  HEAP32[$$byval_copy >> 2] = HEAP32[$57 >> 2]; //@line 29563
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$57 + 4 >> 2]; //@line 29563
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$57 + 8 >> 2]; //@line 29563
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$57 + 12 >> 2]; //@line 29563
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$57 + 16 >> 2]; //@line 29563
  __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy); //@line 29564
  $$393 = 5; //@line 29565
 } else {
  $$393 = $16; //@line 29567
 }
 __ZN13SocketAddress8set_portEt($6, 53); //@line 29569
 HEAP8[$18 >> 0] = 0; //@line 29570
 HEAP8[$20 >> 0] = 1; //@line 29571
 HEAP8[$22 >> 0] = 1; //@line 29572
 HEAP8[$24 >> 0] = 0; //@line 29573
 HEAP8[$26 >> 0] = 0; //@line 29574
 HEAP8[$28 >> 0] = 1; //@line 29575
 HEAP8[$30 >> 0] = 0; //@line 29576
 HEAP8[$30 + 1 >> 0] = 0; //@line 29576
 HEAP8[$30 + 2 >> 0] = 0; //@line 29576
 HEAP8[$30 + 3 >> 0] = 0; //@line 29576
 HEAP8[$30 + 4 >> 0] = 0; //@line 29576
 HEAP8[$30 + 5 >> 0] = 0; //@line 29576
 if (!(HEAP8[$10 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $12; //@line 29580
 } else {
  $$048$i = $10; //@line 29582
  $$sroa$0$0$in47$i = $12; //@line 29582
  while (1) {
   $60 = _strcspn($$048$i, 7347) | 0; //@line 29584
   $62 = $$sroa$0$0$in47$i + 1 | 0; //@line 29586
   HEAP8[$$sroa$0$0$in47$i >> 0] = $60; //@line 29587
   $63 = $60 & 255; //@line 29588
   _memcpy($62 | 0, $$048$i | 0, $63 | 0) | 0; //@line 29589
   $64 = $62 + $63 | 0; //@line 29590
   $$048$i = $$048$i + ($60 + ((HEAP8[$$048$i + $60 >> 0] | 0) == 46 & 1)) | 0; //@line 29596
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $64; //@line 29600
    break;
   } else {
    $$sroa$0$0$in47$i = $64; //@line 29603
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 29608
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 29610
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $46; //@line 29612
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 29614
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 29617
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 29619
 $80 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($14, $6, $18, $$sroa$0$0$in$lcssa$i + 5 - $48 | 0) | 0; //@line 29620
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 29623
  $81 = $ReallocAsyncCtx4 + 4 | 0; //@line 29624
  HEAP32[$81 >> 2] = $2; //@line 29625
  $82 = $ReallocAsyncCtx4 + 8 | 0; //@line 29626
  HEAP32[$82 >> 2] = $4; //@line 29627
  $83 = $ReallocAsyncCtx4 + 12 | 0; //@line 29628
  HEAP32[$83 >> 2] = $6; //@line 29629
  $84 = $ReallocAsyncCtx4 + 16 | 0; //@line 29630
  HEAP32[$84 >> 2] = $8; //@line 29631
  $85 = $ReallocAsyncCtx4 + 20 | 0; //@line 29632
  HEAP32[$85 >> 2] = $10; //@line 29633
  $86 = $ReallocAsyncCtx4 + 24 | 0; //@line 29634
  HEAP32[$86 >> 2] = $12; //@line 29635
  $87 = $ReallocAsyncCtx4 + 28 | 0; //@line 29636
  HEAP32[$87 >> 2] = $14; //@line 29637
  $88 = $ReallocAsyncCtx4 + 32 | 0; //@line 29638
  HEAP32[$88 >> 2] = $18; //@line 29639
  $89 = $ReallocAsyncCtx4 + 36 | 0; //@line 29640
  HEAP32[$89 >> 2] = $20; //@line 29641
  $90 = $ReallocAsyncCtx4 + 40 | 0; //@line 29642
  HEAP32[$90 >> 2] = $22; //@line 29643
  $91 = $ReallocAsyncCtx4 + 44 | 0; //@line 29644
  HEAP32[$91 >> 2] = $24; //@line 29645
  $92 = $ReallocAsyncCtx4 + 48 | 0; //@line 29646
  HEAP32[$92 >> 2] = $26; //@line 29647
  $93 = $ReallocAsyncCtx4 + 52 | 0; //@line 29648
  HEAP32[$93 >> 2] = $28; //@line 29649
  $94 = $ReallocAsyncCtx4 + 56 | 0; //@line 29650
  HEAP32[$94 >> 2] = $30; //@line 29651
  $95 = $ReallocAsyncCtx4 + 60 | 0; //@line 29652
  HEAP32[$95 >> 2] = $32; //@line 29653
  $96 = $ReallocAsyncCtx4 + 64 | 0; //@line 29654
  HEAP32[$96 >> 2] = $34; //@line 29655
  $97 = $ReallocAsyncCtx4 + 68 | 0; //@line 29656
  HEAP32[$97 >> 2] = $36; //@line 29657
  $98 = $ReallocAsyncCtx4 + 72 | 0; //@line 29658
  HEAP32[$98 >> 2] = $38; //@line 29659
  $99 = $ReallocAsyncCtx4 + 76 | 0; //@line 29660
  HEAP32[$99 >> 2] = $40; //@line 29661
  $100 = $ReallocAsyncCtx4 + 80 | 0; //@line 29662
  HEAP32[$100 >> 2] = $42; //@line 29663
  $101 = $ReallocAsyncCtx4 + 84 | 0; //@line 29664
  HEAP8[$101 >> 0] = $46; //@line 29665
  $102 = $ReallocAsyncCtx4 + 88 | 0; //@line 29666
  HEAP32[$102 >> 2] = $48; //@line 29667
  $103 = $ReallocAsyncCtx4 + 92 | 0; //@line 29668
  HEAP32[$103 >> 2] = $50; //@line 29669
  $104 = $ReallocAsyncCtx4 + 96 | 0; //@line 29670
  HEAP32[$104 >> 2] = $52; //@line 29671
  $105 = $ReallocAsyncCtx4 + 100 | 0; //@line 29672
  HEAP8[$105 >> 0] = $$393; //@line 29673
  $106 = $ReallocAsyncCtx4 + 101 | 0; //@line 29674
  HEAP8[$106 >> 0] = $44; //@line 29675
  sp = STACKTOP; //@line 29676
  STACKTOP = sp; //@line 29677
  return;
 }
 HEAP32[___async_retval >> 2] = $80; //@line 29680
 ___async_unwind = 0; //@line 29681
 HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 29682
 $81 = $ReallocAsyncCtx4 + 4 | 0; //@line 29683
 HEAP32[$81 >> 2] = $2; //@line 29684
 $82 = $ReallocAsyncCtx4 + 8 | 0; //@line 29685
 HEAP32[$82 >> 2] = $4; //@line 29686
 $83 = $ReallocAsyncCtx4 + 12 | 0; //@line 29687
 HEAP32[$83 >> 2] = $6; //@line 29688
 $84 = $ReallocAsyncCtx4 + 16 | 0; //@line 29689
 HEAP32[$84 >> 2] = $8; //@line 29690
 $85 = $ReallocAsyncCtx4 + 20 | 0; //@line 29691
 HEAP32[$85 >> 2] = $10; //@line 29692
 $86 = $ReallocAsyncCtx4 + 24 | 0; //@line 29693
 HEAP32[$86 >> 2] = $12; //@line 29694
 $87 = $ReallocAsyncCtx4 + 28 | 0; //@line 29695
 HEAP32[$87 >> 2] = $14; //@line 29696
 $88 = $ReallocAsyncCtx4 + 32 | 0; //@line 29697
 HEAP32[$88 >> 2] = $18; //@line 29698
 $89 = $ReallocAsyncCtx4 + 36 | 0; //@line 29699
 HEAP32[$89 >> 2] = $20; //@line 29700
 $90 = $ReallocAsyncCtx4 + 40 | 0; //@line 29701
 HEAP32[$90 >> 2] = $22; //@line 29702
 $91 = $ReallocAsyncCtx4 + 44 | 0; //@line 29703
 HEAP32[$91 >> 2] = $24; //@line 29704
 $92 = $ReallocAsyncCtx4 + 48 | 0; //@line 29705
 HEAP32[$92 >> 2] = $26; //@line 29706
 $93 = $ReallocAsyncCtx4 + 52 | 0; //@line 29707
 HEAP32[$93 >> 2] = $28; //@line 29708
 $94 = $ReallocAsyncCtx4 + 56 | 0; //@line 29709
 HEAP32[$94 >> 2] = $30; //@line 29710
 $95 = $ReallocAsyncCtx4 + 60 | 0; //@line 29711
 HEAP32[$95 >> 2] = $32; //@line 29712
 $96 = $ReallocAsyncCtx4 + 64 | 0; //@line 29713
 HEAP32[$96 >> 2] = $34; //@line 29714
 $97 = $ReallocAsyncCtx4 + 68 | 0; //@line 29715
 HEAP32[$97 >> 2] = $36; //@line 29716
 $98 = $ReallocAsyncCtx4 + 72 | 0; //@line 29717
 HEAP32[$98 >> 2] = $38; //@line 29718
 $99 = $ReallocAsyncCtx4 + 76 | 0; //@line 29719
 HEAP32[$99 >> 2] = $40; //@line 29720
 $100 = $ReallocAsyncCtx4 + 80 | 0; //@line 29721
 HEAP32[$100 >> 2] = $42; //@line 29722
 $101 = $ReallocAsyncCtx4 + 84 | 0; //@line 29723
 HEAP8[$101 >> 0] = $46; //@line 29724
 $102 = $ReallocAsyncCtx4 + 88 | 0; //@line 29725
 HEAP32[$102 >> 2] = $48; //@line 29726
 $103 = $ReallocAsyncCtx4 + 92 | 0; //@line 29727
 HEAP32[$103 >> 2] = $50; //@line 29728
 $104 = $ReallocAsyncCtx4 + 96 | 0; //@line 29729
 HEAP32[$104 >> 2] = $52; //@line 29730
 $105 = $ReallocAsyncCtx4 + 100 | 0; //@line 29731
 HEAP8[$105 >> 0] = $$393; //@line 29732
 $106 = $ReallocAsyncCtx4 + 101 | 0; //@line 29733
 HEAP8[$106 >> 0] = $44; //@line 29734
 sp = STACKTOP; //@line 29735
 STACKTOP = sp; //@line 29736
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i24 = 0, $$010 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $26 = 0, $29 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $60 = 0, $63 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10039
 STACKTOP = STACKTOP + 32 | 0; //@line 10040
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10040
 $3 = sp + 16 | 0; //@line 10041
 $4 = sp; //@line 10042
 $5 = __ZN4mbed16mbed_event_queueEv() | 0; //@line 10043
 if (!$5) {
  $$010 = -3007; //@line 10046
  STACKTOP = sp; //@line 10047
  return $$010 | 0; //@line 10047
 }
 $8 = $2 + 12 | 0; //@line 10050
 $9 = HEAP32[$8 >> 2] | 0; //@line 10051
 $10 = ($9 | 0) == 0; //@line 10052
 if (($1 | 0) > 0) {
  do {
   if ($10) {
    $18 = 0; //@line 10056
   } else {
    $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 10059
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10060
    FUNCTION_TABLE_vii[$12 & 7]($3, $2); //@line 10061
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 111; //@line 10064
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 10066
     HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 10068
     HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 10070
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 10072
     sp = STACKTOP; //@line 10073
     STACKTOP = sp; //@line 10074
     return 0; //@line 10074
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10076
     $18 = HEAP32[$8 >> 2] | 0; //@line 10078
     break;
    }
   }
  } while (0);
  $17 = $3 + 12 | 0; //@line 10083
  HEAP32[$17 >> 2] = $18; //@line 10084
  $AsyncCtx29 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10085
  $19 = _equeue_alloc($5, 16) | 0; //@line 10086
  if (___async) {
   HEAP32[$AsyncCtx29 >> 2] = 112; //@line 10089
   HEAP32[$AsyncCtx29 + 4 >> 2] = $17; //@line 10091
   HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 10093
   HEAP32[$AsyncCtx29 + 12 >> 2] = $5; //@line 10095
   HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 10097
   HEAP32[$AsyncCtx29 + 20 >> 2] = $17; //@line 10099
   sp = STACKTOP; //@line 10100
   STACKTOP = sp; //@line 10101
   return 0; //@line 10101
  }
  _emscripten_free_async_context($AsyncCtx29 | 0); //@line 10103
  do {
   if (!$19) {
    $$0$i = 0; //@line 10107
   } else {
    $26 = HEAP32[$17 >> 2] | 0; //@line 10109
    do {
     if (!$26) {
      $37 = 0; //@line 10113
     } else {
      $29 = HEAP32[$26 + 4 >> 2] | 0; //@line 10116
      $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10117
      FUNCTION_TABLE_vii[$29 & 7]($19, $3); //@line 10118
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 113; //@line 10121
       HEAP32[$AsyncCtx2 + 4 >> 2] = $17; //@line 10123
       HEAP32[$AsyncCtx2 + 8 >> 2] = $19; //@line 10125
       HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 10127
       HEAP32[$AsyncCtx2 + 16 >> 2] = $5; //@line 10129
       HEAP32[$AsyncCtx2 + 20 >> 2] = $17; //@line 10131
       HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 10133
       sp = STACKTOP; //@line 10134
       STACKTOP = sp; //@line 10135
       return 0; //@line 10135
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10137
       $37 = HEAP32[$17 >> 2] | 0; //@line 10139
       break;
      }
     }
    } while (0);
    HEAP32[$19 + 12 >> 2] = $37; //@line 10145
    _equeue_event_delay($19, $1); //@line 10146
    _equeue_event_dtor($19, 114); //@line 10147
    $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10148
    $38 = _equeue_post($5, 115, $19) | 0; //@line 10149
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 116; //@line 10152
     HEAP32[$AsyncCtx23 + 4 >> 2] = $17; //@line 10154
     HEAP32[$AsyncCtx23 + 8 >> 2] = $3; //@line 10156
     sp = STACKTOP; //@line 10157
     STACKTOP = sp; //@line 10158
     return 0; //@line 10158
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 10160
     $$0$i = $38; //@line 10161
     break;
    }
   }
  } while (0);
  $41 = ($$0$i | 0) == 0; //@line 10166
  $42 = HEAP32[$17 >> 2] | 0; //@line 10167
  do {
   if ($42 | 0) {
    $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 10172
    $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10173
    FUNCTION_TABLE_vi[$45 & 511]($3); //@line 10174
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 117; //@line 10177
     HEAP8[$AsyncCtx6 + 4 >> 0] = $41 & 1; //@line 10180
     sp = STACKTOP; //@line 10181
     STACKTOP = sp; //@line 10182
     return 0; //@line 10182
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10184
     break;
    }
   }
  } while (0);
  if ($41) {
   $$010 = -3007; //@line 10190
   STACKTOP = sp; //@line 10191
   return $$010 | 0; //@line 10191
  }
 } else {
  do {
   if ($10) {
    $53 = 0; //@line 10196
   } else {
    $48 = HEAP32[$9 + 4 >> 2] | 0; //@line 10199
    $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10200
    FUNCTION_TABLE_vii[$48 & 7]($4, $2); //@line 10201
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 118; //@line 10204
     HEAP32[$AsyncCtx10 + 4 >> 2] = $4; //@line 10206
     HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 10208
     HEAP32[$AsyncCtx10 + 12 >> 2] = $8; //@line 10210
     sp = STACKTOP; //@line 10211
     STACKTOP = sp; //@line 10212
     return 0; //@line 10212
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10214
     $53 = HEAP32[$8 >> 2] | 0; //@line 10216
     break;
    }
   }
  } while (0);
  $52 = $4 + 12 | 0; //@line 10221
  HEAP32[$52 >> 2] = $53; //@line 10222
  $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10223
  $54 = _equeue_alloc($5, 16) | 0; //@line 10224
  if (___async) {
   HEAP32[$AsyncCtx26 >> 2] = 119; //@line 10227
   HEAP32[$AsyncCtx26 + 4 >> 2] = $52; //@line 10229
   HEAP32[$AsyncCtx26 + 8 >> 2] = $5; //@line 10231
   HEAP32[$AsyncCtx26 + 12 >> 2] = $4; //@line 10233
   HEAP32[$AsyncCtx26 + 16 >> 2] = $52; //@line 10235
   sp = STACKTOP; //@line 10236
   STACKTOP = sp; //@line 10237
   return 0; //@line 10237
  }
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 10239
  do {
   if (!$54) {
    $$0$i24 = 0; //@line 10243
   } else {
    $60 = HEAP32[$52 >> 2] | 0; //@line 10245
    do {
     if (!$60) {
      $70 = 0; //@line 10249
     } else {
      $63 = HEAP32[$60 + 4 >> 2] | 0; //@line 10252
      $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10253
      FUNCTION_TABLE_vii[$63 & 7]($54, $4); //@line 10254
      if (___async) {
       HEAP32[$AsyncCtx13 >> 2] = 120; //@line 10257
       HEAP32[$AsyncCtx13 + 4 >> 2] = $52; //@line 10259
       HEAP32[$AsyncCtx13 + 8 >> 2] = $54; //@line 10261
       HEAP32[$AsyncCtx13 + 12 >> 2] = $5; //@line 10263
       HEAP32[$AsyncCtx13 + 16 >> 2] = $52; //@line 10265
       HEAP32[$AsyncCtx13 + 20 >> 2] = $4; //@line 10267
       sp = STACKTOP; //@line 10268
       STACKTOP = sp; //@line 10269
       return 0; //@line 10269
      } else {
       _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10271
       $70 = HEAP32[$52 >> 2] | 0; //@line 10273
       break;
      }
     }
    } while (0);
    HEAP32[$54 + 12 >> 2] = $70; //@line 10279
    _equeue_event_dtor($54, 114); //@line 10280
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10281
    $71 = _equeue_post($5, 115, $54) | 0; //@line 10282
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 121; //@line 10285
     HEAP32[$AsyncCtx20 + 4 >> 2] = $52; //@line 10287
     HEAP32[$AsyncCtx20 + 8 >> 2] = $4; //@line 10289
     sp = STACKTOP; //@line 10290
     STACKTOP = sp; //@line 10291
     return 0; //@line 10291
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 10293
     $$0$i24 = $71; //@line 10294
     break;
    }
   }
  } while (0);
  $74 = ($$0$i24 | 0) == 0; //@line 10299
  $75 = HEAP32[$52 >> 2] | 0; //@line 10300
  do {
   if ($75 | 0) {
    $78 = HEAP32[$75 + 8 >> 2] | 0; //@line 10305
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10306
    FUNCTION_TABLE_vi[$78 & 511]($4); //@line 10307
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 122; //@line 10310
     HEAP8[$AsyncCtx17 + 4 >> 0] = $74 & 1; //@line 10313
     sp = STACKTOP; //@line 10314
     STACKTOP = sp; //@line 10315
     return 0; //@line 10315
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 10317
     break;
    }
   }
  } while (0);
  if ($74) {
   $$010 = -3007; //@line 10323
   STACKTOP = sp; //@line 10324
   return $$010 | 0; //@line 10324
  }
 }
 $$010 = 0; //@line 10327
 STACKTOP = sp; //@line 10328
 return $$010 | 0; //@line 10328
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_204($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy8 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1935
 STACKTOP = STACKTOP + 48 | 0; //@line 1936
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1936
 $$byval_copy8 = sp + 20 | 0; //@line 1937
 $$byval_copy = sp; //@line 1938
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1940
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1942
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1944
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1946
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1948
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1950
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1952
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1954
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1956
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1958
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1960
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $69 = HEAP8[$14 >> 0] | 0; //@line 1965
  if ($69 << 24 >> 24) {
   HEAP8[$14 >> 0] = $69 + -1 << 24 >> 24; //@line 1969
  }
  _free($10); //@line 1971
  HEAP32[$4 + 76 >> 2] = 5e3; //@line 1973
  STACKTOP = sp; //@line 1974
  return;
 }
 HEAP8[$6 >> 0] = (HEAP8[$6 >> 0] | 0) + 1 << 24 >> 24; //@line 1978
 HEAP32[$20 >> 2] = 0; //@line 1979
 HEAP32[$20 + 4 >> 2] = 0; //@line 1979
 HEAP32[$20 + 8 >> 2] = 0; //@line 1979
 HEAP32[$20 + 12 >> 2] = 0; //@line 1979
 HEAP32[$20 + 16 >> 2] = 0; //@line 1979
 HEAP32[$$byval_copy8 >> 2] = HEAP32[$22 >> 2]; //@line 1980
 HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$22 + 4 >> 2]; //@line 1980
 HEAP32[$$byval_copy8 + 8 >> 2] = HEAP32[$22 + 8 >> 2]; //@line 1980
 HEAP32[$$byval_copy8 + 12 >> 2] = HEAP32[$22 + 12 >> 2]; //@line 1980
 HEAP32[$$byval_copy8 + 16 >> 2] = HEAP32[$22 + 16 >> 2]; //@line 1980
 __ZN13SocketAddressC2E10nsapi_addrt($2, $$byval_copy8, 0); //@line 1981
 if (!(HEAP8[$14 >> 0] | 0)) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 1985
  __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($4, -3009, 0); //@line 1986
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 239; //@line 1989
   $49 = $ReallocAsyncCtx2 + 4 | 0; //@line 1990
   HEAP32[$49 >> 2] = $10; //@line 1991
   $50 = $ReallocAsyncCtx2 + 8 | 0; //@line 1992
   HEAP32[$50 >> 2] = $12; //@line 1993
   sp = STACKTOP; //@line 1994
   STACKTOP = sp; //@line 1995
   return;
  }
  ___async_unwind = 0; //@line 1997
  HEAP32[$ReallocAsyncCtx2 >> 2] = 239; //@line 1998
  $49 = $ReallocAsyncCtx2 + 4 | 0; //@line 1999
  HEAP32[$49 >> 2] = $10; //@line 2000
  $50 = $ReallocAsyncCtx2 + 8 | 0; //@line 2001
  HEAP32[$50 >> 2] = $12; //@line 2002
  sp = STACKTOP; //@line 2003
  STACKTOP = sp; //@line 2004
  return;
 }
 $24 = HEAP32[$8 >> 2] | 0; //@line 2006
 $25 = HEAP8[$6 >> 0] | 0; //@line 2007
 if (($25 & 255) > 9) {
  HEAP8[$6 >> 0] = 0; //@line 2010
  $29 = 0; //@line 2011
 } else {
  if (($25 & 255) < 5) {
   $29 = $25; //@line 2015
  } else {
   $48 = 608 + ((($25 & 255) + -5 | 0) * 20 | 0) | 0; //@line 2019
   HEAP32[$$byval_copy >> 2] = HEAP32[$48 >> 2]; //@line 2020
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$48 + 4 >> 2]; //@line 2020
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$48 + 8 >> 2]; //@line 2020
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$48 + 12 >> 2]; //@line 2020
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$48 + 16 >> 2]; //@line 2020
   __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 2021
   __ZN13SocketAddress8set_portEt($2, 53); //@line 2022
   $51 = HEAP32[$16 >> 2] | 0; //@line 2023
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(48) | 0; //@line 2024
   $52 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($51, $2, $10, $18) | 0; //@line 2025
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 240; //@line 2028
    $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 2029
    HEAP32[$53 >> 2] = $2; //@line 2030
    $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 2031
    HEAP32[$54 >> 2] = $4; //@line 2032
    $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 2033
    HEAP32[$55 >> 2] = $6; //@line 2034
    $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 2035
    HEAP32[$56 >> 2] = $8; //@line 2036
    $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 2037
    HEAP32[$57 >> 2] = $10; //@line 2038
    $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 2039
    HEAP32[$58 >> 2] = $12; //@line 2040
    $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 2041
    HEAP32[$59 >> 2] = $14; //@line 2042
    $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 2043
    HEAP32[$60 >> 2] = $16; //@line 2044
    $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 2045
    HEAP32[$61 >> 2] = $18; //@line 2046
    $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 2047
    HEAP32[$62 >> 2] = $20; //@line 2048
    $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 2049
    HEAP32[$63 >> 2] = $22; //@line 2050
    sp = STACKTOP; //@line 2051
    STACKTOP = sp; //@line 2052
    return;
   }
   HEAP32[___async_retval >> 2] = $52; //@line 2055
   ___async_unwind = 0; //@line 2056
   HEAP32[$ReallocAsyncCtx4 >> 2] = 240; //@line 2057
   $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 2058
   HEAP32[$53 >> 2] = $2; //@line 2059
   $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 2060
   HEAP32[$54 >> 2] = $4; //@line 2061
   $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 2062
   HEAP32[$55 >> 2] = $6; //@line 2063
   $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 2064
   HEAP32[$56 >> 2] = $8; //@line 2065
   $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 2066
   HEAP32[$57 >> 2] = $10; //@line 2067
   $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 2068
   HEAP32[$58 >> 2] = $12; //@line 2069
   $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 2070
   HEAP32[$59 >> 2] = $14; //@line 2071
   $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 2072
   HEAP32[$60 >> 2] = $16; //@line 2073
   $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 2074
   HEAP32[$61 >> 2] = $18; //@line 2075
   $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 2076
   HEAP32[$62 >> 2] = $20; //@line 2077
   $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 2078
   HEAP32[$63 >> 2] = $22; //@line 2079
   sp = STACKTOP; //@line 2080
   STACKTOP = sp; //@line 2081
   return;
  }
 }
 $32 = HEAP32[(HEAP32[$24 >> 2] | 0) + 28 >> 2] | 0; //@line 2087
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 2088
 $33 = FUNCTION_TABLE_iiii[$32 & 31]($24, $29 & 255, $2) | 0; //@line 2089
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 238; //@line 2092
  $34 = $ReallocAsyncCtx + 4 | 0; //@line 2093
  HEAP32[$34 >> 2] = $2; //@line 2094
  $35 = $ReallocAsyncCtx + 8 | 0; //@line 2095
  HEAP32[$35 >> 2] = $4; //@line 2096
  $36 = $ReallocAsyncCtx + 12 | 0; //@line 2097
  HEAP32[$36 >> 2] = $6; //@line 2098
  $37 = $ReallocAsyncCtx + 16 | 0; //@line 2099
  HEAP32[$37 >> 2] = $8; //@line 2100
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 2101
  HEAP32[$38 >> 2] = $10; //@line 2102
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 2103
  HEAP32[$39 >> 2] = $12; //@line 2104
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 2105
  HEAP32[$40 >> 2] = $14; //@line 2106
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 2107
  HEAP32[$41 >> 2] = $16; //@line 2108
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 2109
  HEAP32[$42 >> 2] = $18; //@line 2110
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 2111
  HEAP32[$43 >> 2] = $20; //@line 2112
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 2113
  HEAP32[$44 >> 2] = $22; //@line 2114
  sp = STACKTOP; //@line 2115
  STACKTOP = sp; //@line 2116
  return;
 }
 HEAP32[___async_retval >> 2] = $33; //@line 2119
 ___async_unwind = 0; //@line 2120
 HEAP32[$ReallocAsyncCtx >> 2] = 238; //@line 2121
 $34 = $ReallocAsyncCtx + 4 | 0; //@line 2122
 HEAP32[$34 >> 2] = $2; //@line 2123
 $35 = $ReallocAsyncCtx + 8 | 0; //@line 2124
 HEAP32[$35 >> 2] = $4; //@line 2125
 $36 = $ReallocAsyncCtx + 12 | 0; //@line 2126
 HEAP32[$36 >> 2] = $6; //@line 2127
 $37 = $ReallocAsyncCtx + 16 | 0; //@line 2128
 HEAP32[$37 >> 2] = $8; //@line 2129
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 2130
 HEAP32[$38 >> 2] = $10; //@line 2131
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 2132
 HEAP32[$39 >> 2] = $12; //@line 2133
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 2134
 HEAP32[$40 >> 2] = $14; //@line 2135
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 2136
 HEAP32[$41 >> 2] = $16; //@line 2137
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 2138
 HEAP32[$42 >> 2] = $18; //@line 2139
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 2140
 HEAP32[$43 >> 2] = $20; //@line 2141
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 2142
 HEAP32[$44 >> 2] = $22; //@line 2143
 sp = STACKTOP; //@line 2144
 STACKTOP = sp; //@line 2145
 return;
}
function __Z17recv_coap_messagev() {
 var $$016$i$i = 0, $$017$i$i = 0, $$byval_copy = 0, $$pre$phi23Z2D = 0, $$pre22$pre$phiZZ2D = 0, $0 = 0, $1 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $76 = 0, $AsyncCtx = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19592
 STACKTOP = STACKTOP + 176 | 0; //@line 19593
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 19593
 $$byval_copy = sp + 144 | 0; //@line 19594
 $vararg_buffer19 = sp + 56 | 0; //@line 19595
 $vararg_buffer16 = sp + 48 | 0; //@line 19596
 $vararg_buffer13 = sp + 40 | 0; //@line 19597
 $vararg_buffer10 = sp + 32 | 0; //@line 19598
 $vararg_buffer7 = sp + 24 | 0; //@line 19599
 $vararg_buffer4 = sp + 16 | 0; //@line 19600
 $vararg_buffer1 = sp + 8 | 0; //@line 19601
 $vararg_buffer = sp; //@line 19602
 $0 = sp + 80 | 0; //@line 19603
 $1 = sp + 60 | 0; //@line 19604
 HEAP32[$1 >> 2] = 0; //@line 19605
 HEAP32[$1 + 4 >> 2] = 0; //@line 19605
 HEAP32[$1 + 8 >> 2] = 0; //@line 19605
 HEAP32[$1 + 12 >> 2] = 0; //@line 19605
 HEAP32[$1 + 16 >> 2] = 0; //@line 19605
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 19606
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 19606
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 19606
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 19606
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 19606
 __ZN13SocketAddressC2E10nsapi_addrt($0, $$byval_copy, 0); //@line 19607
 $2 = _malloc(1280) | 0; //@line 19608
 $AsyncCtx23 = _emscripten_alloc_async_context(80, sp) | 0; //@line 19609
 $3 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj(10104, $0, $2, 1280) | 0; //@line 19610
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 295; //@line 19613
  HEAP32[$AsyncCtx23 + 4 >> 2] = $vararg_buffer; //@line 19615
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer; //@line 19617
  HEAP32[$AsyncCtx23 + 12 >> 2] = $2; //@line 19619
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer19; //@line 19621
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer19; //@line 19623
  HEAP32[$AsyncCtx23 + 24 >> 2] = $0; //@line 19625
  HEAP32[$AsyncCtx23 + 28 >> 2] = $$byval_copy; //@line 19627
  HEAP32[$AsyncCtx23 + 32 >> 2] = $vararg_buffer1; //@line 19629
  HEAP32[$AsyncCtx23 + 36 >> 2] = $vararg_buffer1; //@line 19631
  HEAP32[$AsyncCtx23 + 40 >> 2] = $vararg_buffer4; //@line 19633
  HEAP32[$AsyncCtx23 + 44 >> 2] = $vararg_buffer4; //@line 19635
  HEAP32[$AsyncCtx23 + 48 >> 2] = $vararg_buffer7; //@line 19637
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer7; //@line 19639
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer10; //@line 19641
  HEAP32[$AsyncCtx23 + 60 >> 2] = $vararg_buffer10; //@line 19643
  HEAP32[$AsyncCtx23 + 64 >> 2] = $vararg_buffer13; //@line 19645
  HEAP32[$AsyncCtx23 + 68 >> 2] = $vararg_buffer13; //@line 19647
  HEAP32[$AsyncCtx23 + 72 >> 2] = $vararg_buffer16; //@line 19649
  HEAP32[$AsyncCtx23 + 76 >> 2] = $vararg_buffer16; //@line 19651
  sp = STACKTOP; //@line 19652
  STACKTOP = sp; //@line 19653
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 19655
 if (($3 | 0) <= 0) {
  HEAP32[$vararg_buffer19 >> 2] = $3; //@line 19658
  _printf(6307, $vararg_buffer19) | 0; //@line 19659
  _free($2); //@line 19660
  STACKTOP = sp; //@line 19661
  return;
 }
 HEAP32[$vararg_buffer >> 2] = $3; //@line 19663
 _printf(6134, $vararg_buffer) | 0; //@line 19664
 $24 = HEAP32[2540] | 0; //@line 19665
 $AsyncCtx27 = _emscripten_alloc_async_context(64, sp) | 0; //@line 19667
 $26 = _sn_coap_parser($24, $3 & 65535, $2, 748) | 0; //@line 19668
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 296; //@line 19671
  HEAP32[$AsyncCtx27 + 4 >> 2] = $$byval_copy; //@line 19673
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer1; //@line 19675
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 19677
  HEAP32[$AsyncCtx27 + 16 >> 2] = $vararg_buffer4; //@line 19679
  HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer4; //@line 19681
  HEAP32[$AsyncCtx27 + 24 >> 2] = $vararg_buffer7; //@line 19683
  HEAP32[$AsyncCtx27 + 28 >> 2] = $vararg_buffer7; //@line 19685
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer10; //@line 19687
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer10; //@line 19689
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer13; //@line 19691
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer13; //@line 19693
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer16; //@line 19695
  HEAP32[$AsyncCtx27 + 52 >> 2] = $vararg_buffer16; //@line 19697
  HEAP32[$AsyncCtx27 + 56 >> 2] = $2; //@line 19699
  HEAP32[$AsyncCtx27 + 60 >> 2] = $0; //@line 19701
  sp = STACKTOP; //@line 19702
  STACKTOP = sp; //@line 19703
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 19705
 $43 = HEAP32[$26 + 36 >> 2] | 0; //@line 19707
 $44 = $26 + 24 | 0; //@line 19708
 $45 = HEAP16[$44 >> 1] | 0; //@line 19709
 $46 = $45 & 65535; //@line 19710
 HEAP32[$$byval_copy >> 2] = 0; //@line 19711
 HEAP32[$$byval_copy + 4 >> 2] = 0; //@line 19711
 HEAP32[$$byval_copy + 8 >> 2] = 0; //@line 19711
 do {
  if (($45 & 65535) < 11) {
   $76 = $$byval_copy + 11 | 0; //@line 19716
   HEAP8[$76 >> 0] = $45; //@line 19717
   if (!($45 << 16 >> 16)) {
    $$017$i$i = $$byval_copy; //@line 19720
    $$pre$phi23Z2D = $76; //@line 19720
   } else {
    $$016$i$i = $$byval_copy; //@line 19722
    $$pre22$pre$phiZZ2D = $76; //@line 19722
    label = 11; //@line 19723
   }
  } else {
   $49 = $46 + 16 & 131056; //@line 19727
   $AsyncCtx = _emscripten_alloc_async_context(88, sp) | 0; //@line 19728
   $50 = __Znwj($49) | 0; //@line 19729
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 297; //@line 19732
    HEAP32[$AsyncCtx + 4 >> 2] = $$byval_copy; //@line 19734
    HEAP32[$AsyncCtx + 8 >> 2] = $49; //@line 19736
    HEAP32[$AsyncCtx + 12 >> 2] = $46; //@line 19738
    HEAP32[$AsyncCtx + 16 >> 2] = $43; //@line 19740
    HEAP32[$AsyncCtx + 20 >> 2] = $26; //@line 19742
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 19744
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 19746
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer4; //@line 19748
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer4; //@line 19750
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer7; //@line 19752
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer7; //@line 19754
    HEAP32[$AsyncCtx + 48 >> 2] = $44; //@line 19756
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer10; //@line 19758
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer10; //@line 19760
    HEAP32[$AsyncCtx + 60 >> 2] = $$byval_copy; //@line 19762
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer13; //@line 19764
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer13; //@line 19766
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer16; //@line 19768
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer16; //@line 19770
    HEAP32[$AsyncCtx + 80 >> 2] = $2; //@line 19772
    HEAP32[$AsyncCtx + 84 >> 2] = $0; //@line 19774
    sp = STACKTOP; //@line 19775
    STACKTOP = sp; //@line 19776
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 19778
    HEAP32[$$byval_copy >> 2] = $50; //@line 19779
    HEAP32[$$byval_copy + 8 >> 2] = $49 | -2147483648; //@line 19782
    HEAP32[$$byval_copy + 4 >> 2] = $46; //@line 19784
    $$016$i$i = $50; //@line 19786
    $$pre22$pre$phiZZ2D = $$byval_copy + 11 | 0; //@line 19786
    label = 11; //@line 19787
    break;
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  _memcpy($$016$i$i | 0, $43 | 0, $46 | 0) | 0; //@line 19793
  $$017$i$i = $$016$i$i; //@line 19794
  $$pre$phi23Z2D = $$pre22$pre$phiZZ2D; //@line 19794
 }
 HEAP8[$$017$i$i + $46 >> 0] = 0; //@line 19797
 HEAP32[$vararg_buffer1 >> 2] = HEAPU16[$26 + 20 >> 1]; //@line 19801
 _printf(6169, $vararg_buffer1) | 0; //@line 19802
 HEAP32[$vararg_buffer4 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 19805
 _printf(6192, $vararg_buffer4) | 0; //@line 19806
 HEAP32[$vararg_buffer7 >> 2] = HEAP32[$26 + 16 >> 2]; //@line 19809
 _printf(6215, $vararg_buffer7) | 0; //@line 19810
 HEAP32[$vararg_buffer10 >> 2] = HEAPU16[$44 >> 1]; //@line 19813
 _printf(6238, $vararg_buffer10) | 0; //@line 19814
 HEAP32[$vararg_buffer13 >> 2] = (HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0 ? HEAP32[$$byval_copy >> 2] | 0 : $$byval_copy; //@line 19819
 _printf(6261, $vararg_buffer13) | 0; //@line 19820
 HEAP32[$vararg_buffer16 >> 2] = HEAP32[$26 + 40 >> 2]; //@line 19823
 _printf(6284, $vararg_buffer16) | 0; //@line 19824
 if ((HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 19829
 }
 _free($2); //@line 19831
 STACKTOP = sp; //@line 19832
 return;
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_42($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $$124$450 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12712
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12714
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12716
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12718
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12720
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12722
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12724
 $13 = HEAP32[2518] | 0; //@line 12725
 if (!$13) {
  $$1 = 2147483647; //@line 12728
  $$124 = 0; //@line 12728
 } else {
  $$1 = HEAP32[$13 >> 2] | 0; //@line 12731
  $$124 = $13; //@line 12731
 }
 $16 = HEAP32[2519] | 0; //@line 12733
 if (!$16) {
  $$1$1 = $$1; //@line 12736
  $$124$1 = $$124; //@line 12736
 } else {
  $53 = HEAP32[$16 >> 2] | 0; //@line 12738
  $54 = ($53 | 0) > ($$1 | 0); //@line 12739
  $$1$1 = $54 ? $$1 : $53; //@line 12742
  $$124$1 = $54 ? $$124 : $16; //@line 12742
 }
 $55 = HEAP32[2520] | 0; //@line 12744
 if (!$55) {
  $$1$2 = $$1$1; //@line 12747
  $$124$2 = $$124$1; //@line 12747
 } else {
  $57 = HEAP32[$55 >> 2] | 0; //@line 12749
  $58 = ($57 | 0) > ($$1$1 | 0); //@line 12750
  $$1$2 = $58 ? $$1$1 : $57; //@line 12753
  $$124$2 = $58 ? $$124$1 : $55; //@line 12753
 }
 $59 = HEAP32[2521] | 0; //@line 12755
 if (!$59) {
  $$1$3 = $$1$2; //@line 12758
  $$124$3 = $$124$2; //@line 12758
 } else {
  $61 = HEAP32[$59 >> 2] | 0; //@line 12760
  $62 = ($61 | 0) > ($$1$2 | 0); //@line 12761
  $$1$3 = $62 ? $$1$2 : $61; //@line 12764
  $$124$3 = $62 ? $$124$2 : $59; //@line 12764
 }
 $63 = HEAP32[2522] | 0; //@line 12766
 if (!$63) {
  label = 26; //@line 12769
 } else {
  if ((HEAP32[$63 >> 2] | 0) > ($$1$3 | 0)) {
   label = 26; //@line 12774
  } else {
   $$124$450 = $63; //@line 12776
  }
 }
 if ((label | 0) == 26) {
  if (!$$124$3) {
   $44 = HEAP32[$2 >> 2] | 0; //@line 12782
   if (!$44) {
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 12785
    _mbed_assert_internal(6023, 6028, 1677); //@line 12786
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 12789
     $46 = $ReallocAsyncCtx9 + 4 | 0; //@line 12790
     HEAP32[$46 >> 2] = $2; //@line 12791
     $47 = $ReallocAsyncCtx9 + 8 | 0; //@line 12792
     HEAP32[$47 >> 2] = $4; //@line 12793
     $48 = $ReallocAsyncCtx9 + 12 | 0; //@line 12794
     HEAP32[$48 >> 2] = $8; //@line 12795
     $49 = $ReallocAsyncCtx9 + 16 | 0; //@line 12796
     HEAP32[$49 >> 2] = $10; //@line 12797
     sp = STACKTOP; //@line 12798
     return;
    }
    ___async_unwind = 0; //@line 12801
    HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 12802
    $46 = $ReallocAsyncCtx9 + 4 | 0; //@line 12803
    HEAP32[$46 >> 2] = $2; //@line 12804
    $47 = $ReallocAsyncCtx9 + 8 | 0; //@line 12805
    HEAP32[$47 >> 2] = $4; //@line 12806
    $48 = $ReallocAsyncCtx9 + 12 | 0; //@line 12807
    HEAP32[$48 >> 2] = $8; //@line 12808
    $49 = $ReallocAsyncCtx9 + 16 | 0; //@line 12809
    HEAP32[$49 >> 2] = $10; //@line 12810
    sp = STACKTOP; //@line 12811
    return;
   } else {
    $50 = HEAP32[$44 >> 2] | 0; //@line 12814
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 12815
    FUNCTION_TABLE_viii[$50 & 0]($4, $8, $10); //@line 12816
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 230; //@line 12819
     $51 = $ReallocAsyncCtx5 + 4 | 0; //@line 12820
     HEAP32[$51 >> 2] = $2; //@line 12821
     $52 = $ReallocAsyncCtx5 + 8 | 0; //@line 12822
     HEAP32[$52 >> 2] = $4; //@line 12823
     sp = STACKTOP; //@line 12824
     return;
    }
    ___async_unwind = 0; //@line 12827
    HEAP32[$ReallocAsyncCtx5 >> 2] = 230; //@line 12828
    $51 = $ReallocAsyncCtx5 + 4 | 0; //@line 12829
    HEAP32[$51 >> 2] = $2; //@line 12830
    $52 = $ReallocAsyncCtx5 + 8 | 0; //@line 12831
    HEAP32[$52 >> 2] = $4; //@line 12832
    sp = STACKTOP; //@line 12833
    return;
   }
  } else {
   $$124$450 = $$124$3; //@line 12837
  }
 }
 $18 = $$124$450 + 44 | 0; //@line 12840
 $19 = HEAP32[$18 >> 2] | 0; //@line 12841
 if (!$19) {
  $32 = $6 + 12 | 0; //@line 12844
  HEAP32[$32 >> 2] = 0; //@line 12845
  $33 = HEAP32[$$124$450 >> 2] | 0; //@line 12846
  HEAP32[$12 + 8 >> 2] = 0; //@line 12848
  HEAP32[$12 >> 2] = 184; //@line 12849
  HEAP32[$12 + 4 >> 2] = $33; //@line 12851
  $35 = $12 + 12 | 0; //@line 12852
  HEAP32[$35 >> 2] = 724; //@line 12853
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 12854
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($6, 0, $12) | 0; //@line 12855
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 12858
   $36 = $ReallocAsyncCtx8 + 4 | 0; //@line 12859
   HEAP32[$36 >> 2] = $2; //@line 12860
   $37 = $ReallocAsyncCtx8 + 8 | 0; //@line 12861
   HEAP32[$37 >> 2] = $4; //@line 12862
   $38 = $ReallocAsyncCtx8 + 12 | 0; //@line 12863
   HEAP32[$38 >> 2] = $32; //@line 12864
   $39 = $ReallocAsyncCtx8 + 16 | 0; //@line 12865
   HEAP32[$39 >> 2] = $6; //@line 12866
   $40 = $ReallocAsyncCtx8 + 20 | 0; //@line 12867
   HEAP32[$40 >> 2] = $8; //@line 12868
   $41 = $ReallocAsyncCtx8 + 24 | 0; //@line 12869
   HEAP32[$41 >> 2] = $10; //@line 12870
   $42 = $ReallocAsyncCtx8 + 28 | 0; //@line 12871
   HEAP32[$42 >> 2] = $35; //@line 12872
   $43 = $ReallocAsyncCtx8 + 32 | 0; //@line 12873
   HEAP32[$43 >> 2] = $12; //@line 12874
   sp = STACKTOP; //@line 12875
   return;
  }
  ___async_unwind = 0; //@line 12878
  HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 12879
  $36 = $ReallocAsyncCtx8 + 4 | 0; //@line 12880
  HEAP32[$36 >> 2] = $2; //@line 12881
  $37 = $ReallocAsyncCtx8 + 8 | 0; //@line 12882
  HEAP32[$37 >> 2] = $4; //@line 12883
  $38 = $ReallocAsyncCtx8 + 12 | 0; //@line 12884
  HEAP32[$38 >> 2] = $32; //@line 12885
  $39 = $ReallocAsyncCtx8 + 16 | 0; //@line 12886
  HEAP32[$39 >> 2] = $6; //@line 12887
  $40 = $ReallocAsyncCtx8 + 20 | 0; //@line 12888
  HEAP32[$40 >> 2] = $8; //@line 12889
  $41 = $ReallocAsyncCtx8 + 24 | 0; //@line 12890
  HEAP32[$41 >> 2] = $10; //@line 12891
  $42 = $ReallocAsyncCtx8 + 28 | 0; //@line 12892
  HEAP32[$42 >> 2] = $35; //@line 12893
  $43 = $ReallocAsyncCtx8 + 32 | 0; //@line 12894
  HEAP32[$43 >> 2] = $12; //@line 12895
  sp = STACKTOP; //@line 12896
  return;
 } else {
  $23 = HEAP32[$19 + 4 >> 2] | 0; //@line 12901
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 12902
  FUNCTION_TABLE_vii[$23 & 7]($6, $$124$450 + 32 | 0); //@line 12903
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 225; //@line 12906
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 12907
   HEAP32[$24 >> 2] = $2; //@line 12908
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 12909
   HEAP32[$25 >> 2] = $4; //@line 12910
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 12911
   HEAP32[$26 >> 2] = $8; //@line 12912
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 12913
   HEAP32[$27 >> 2] = $10; //@line 12914
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 12915
   HEAP32[$28 >> 2] = $18; //@line 12916
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 12917
   HEAP32[$29 >> 2] = $6; //@line 12918
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 12919
   HEAP32[$30 >> 2] = $$124$450; //@line 12920
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 12921
   HEAP32[$31 >> 2] = $12; //@line 12922
   sp = STACKTOP; //@line 12923
   return;
  }
  ___async_unwind = 0; //@line 12926
  HEAP32[$ReallocAsyncCtx2 >> 2] = 225; //@line 12927
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 12928
  HEAP32[$24 >> 2] = $2; //@line 12929
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 12930
  HEAP32[$25 >> 2] = $4; //@line 12931
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 12932
  HEAP32[$26 >> 2] = $8; //@line 12933
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 12934
  HEAP32[$27 >> 2] = $10; //@line 12935
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 12936
  HEAP32[$28 >> 2] = $18; //@line 12937
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 12938
  HEAP32[$29 >> 2] = $6; //@line 12939
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 12940
  HEAP32[$30 >> 2] = $$124$450; //@line 12941
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 12942
  HEAP32[$31 >> 2] = $12; //@line 12943
  sp = STACKTOP; //@line 12944
  return;
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_158($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $85 = 0, $91 = 0, $97 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30455
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30457
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30459
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30461
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30463
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30465
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30467
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30469
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30471
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30473
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30475
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30477
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30479
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30481
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($22); //@line 30486
  return;
 }
 $33 = (HEAPU8[$22 >> 0] | 0) << 8 | (HEAPU8[$24 >> 0] | 0); //@line 30494
 $34 = $33 & 65535; //@line 30495
 $35 = HEAP32[2518] | 0; //@line 30496
 if (!$35) {
  label = 4; //@line 30499
 } else {
  if (($33 | 0) == (HEAPU16[$35 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $35; //@line 30506
  } else {
   label = 4; //@line 30508
  }
 }
 do {
  if ((label | 0) == 4) {
   $41 = HEAP32[2519] | 0; //@line 30513
   if ($41 | 0) {
    if (($33 | 0) == (HEAPU16[$41 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $41; //@line 30521
     break;
    }
   }
   $85 = HEAP32[2520] | 0; //@line 30525
   if ($85 | 0) {
    if (($33 | 0) == (HEAPU16[$85 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $85; //@line 30533
     break;
    }
   }
   $91 = HEAP32[2521] | 0; //@line 30537
   if ($91 | 0) {
    if (($33 | 0) == (HEAPU16[$91 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $91; //@line 30545
     break;
    }
   }
   $97 = HEAP32[2522] | 0; //@line 30549
   if ($97 | 0) {
    if (($33 | 0) == (HEAPU16[$97 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $97; //@line 30557
     break;
    }
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 30561
   $65 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($20, 0, $22, 512) | 0; //@line 30562
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 30565
    $66 = $ReallocAsyncCtx6 + 4 | 0; //@line 30566
    HEAP32[$66 >> 2] = $2; //@line 30567
    $67 = $ReallocAsyncCtx6 + 8 | 0; //@line 30568
    HEAP32[$67 >> 2] = $4; //@line 30569
    $68 = $ReallocAsyncCtx6 + 12 | 0; //@line 30570
    HEAP32[$68 >> 2] = $6; //@line 30571
    $69 = $ReallocAsyncCtx6 + 16 | 0; //@line 30572
    HEAP32[$69 >> 2] = $8; //@line 30573
    $70 = $ReallocAsyncCtx6 + 20 | 0; //@line 30574
    HEAP32[$70 >> 2] = $10; //@line 30575
    $71 = $ReallocAsyncCtx6 + 24 | 0; //@line 30576
    HEAP32[$71 >> 2] = $12; //@line 30577
    $72 = $ReallocAsyncCtx6 + 28 | 0; //@line 30578
    HEAP32[$72 >> 2] = $14; //@line 30579
    $73 = $ReallocAsyncCtx6 + 32 | 0; //@line 30580
    HEAP32[$73 >> 2] = $16; //@line 30581
    $74 = $ReallocAsyncCtx6 + 36 | 0; //@line 30582
    HEAP32[$74 >> 2] = $18; //@line 30583
    $75 = $ReallocAsyncCtx6 + 40 | 0; //@line 30584
    HEAP32[$75 >> 2] = $20; //@line 30585
    $76 = $ReallocAsyncCtx6 + 44 | 0; //@line 30586
    HEAP32[$76 >> 2] = $22; //@line 30587
    $77 = $ReallocAsyncCtx6 + 48 | 0; //@line 30588
    HEAP32[$77 >> 2] = $24; //@line 30589
    $78 = $ReallocAsyncCtx6 + 52 | 0; //@line 30590
    HEAP32[$78 >> 2] = $26; //@line 30591
    sp = STACKTOP; //@line 30592
    return;
   }
   HEAP32[___async_retval >> 2] = $65; //@line 30596
   ___async_unwind = 0; //@line 30597
   HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 30598
   $66 = $ReallocAsyncCtx6 + 4 | 0; //@line 30599
   HEAP32[$66 >> 2] = $2; //@line 30600
   $67 = $ReallocAsyncCtx6 + 8 | 0; //@line 30601
   HEAP32[$67 >> 2] = $4; //@line 30602
   $68 = $ReallocAsyncCtx6 + 12 | 0; //@line 30603
   HEAP32[$68 >> 2] = $6; //@line 30604
   $69 = $ReallocAsyncCtx6 + 16 | 0; //@line 30605
   HEAP32[$69 >> 2] = $8; //@line 30606
   $70 = $ReallocAsyncCtx6 + 20 | 0; //@line 30607
   HEAP32[$70 >> 2] = $10; //@line 30608
   $71 = $ReallocAsyncCtx6 + 24 | 0; //@line 30609
   HEAP32[$71 >> 2] = $12; //@line 30610
   $72 = $ReallocAsyncCtx6 + 28 | 0; //@line 30611
   HEAP32[$72 >> 2] = $14; //@line 30612
   $73 = $ReallocAsyncCtx6 + 32 | 0; //@line 30613
   HEAP32[$73 >> 2] = $16; //@line 30614
   $74 = $ReallocAsyncCtx6 + 36 | 0; //@line 30615
   HEAP32[$74 >> 2] = $18; //@line 30616
   $75 = $ReallocAsyncCtx6 + 40 | 0; //@line 30617
   HEAP32[$75 >> 2] = $20; //@line 30618
   $76 = $ReallocAsyncCtx6 + 44 | 0; //@line 30619
   HEAP32[$76 >> 2] = $22; //@line 30620
   $77 = $ReallocAsyncCtx6 + 48 | 0; //@line 30621
   HEAP32[$77 >> 2] = $24; //@line 30622
   $78 = $ReallocAsyncCtx6 + 52 | 0; //@line 30623
   HEAP32[$78 >> 2] = $26; //@line 30624
   sp = STACKTOP; //@line 30625
   return;
  }
 } while (0);
 $44 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 30630
 $$ = $44 >>> 0 > 1 ? $44 : 1; //@line 30632
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 30636
 $47 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 12052) | 0; //@line 30637
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 242; //@line 30640
  $48 = $ReallocAsyncCtx4 + 4 | 0; //@line 30641
  HEAP32[$48 >> 2] = $2; //@line 30642
  $49 = $ReallocAsyncCtx4 + 8 | 0; //@line 30643
  HEAP32[$49 >> 2] = $4; //@line 30644
  $50 = $ReallocAsyncCtx4 + 12 | 0; //@line 30645
  HEAP32[$50 >> 2] = $$lcssa; //@line 30646
  $51 = $ReallocAsyncCtx4 + 16 | 0; //@line 30647
  HEAP32[$51 >> 2] = $6; //@line 30648
  $52 = $ReallocAsyncCtx4 + 20 | 0; //@line 30649
  HEAP32[$52 >> 2] = $8; //@line 30650
  $53 = $ReallocAsyncCtx4 + 24 | 0; //@line 30651
  HEAP32[$53 >> 2] = $10; //@line 30652
  $54 = $ReallocAsyncCtx4 + 28 | 0; //@line 30653
  HEAP32[$54 >> 2] = $12; //@line 30654
  $55 = $ReallocAsyncCtx4 + 32 | 0; //@line 30655
  HEAP32[$55 >> 2] = $14; //@line 30656
  $56 = $ReallocAsyncCtx4 + 36 | 0; //@line 30657
  HEAP32[$56 >> 2] = $16; //@line 30658
  $57 = $ReallocAsyncCtx4 + 40 | 0; //@line 30659
  HEAP32[$57 >> 2] = $18; //@line 30660
  $58 = $ReallocAsyncCtx4 + 44 | 0; //@line 30661
  HEAP32[$58 >> 2] = $20; //@line 30662
  $59 = $ReallocAsyncCtx4 + 48 | 0; //@line 30663
  HEAP32[$59 >> 2] = $22; //@line 30664
  $60 = $ReallocAsyncCtx4 + 52 | 0; //@line 30665
  HEAP32[$60 >> 2] = $24; //@line 30666
  $61 = $ReallocAsyncCtx4 + 56 | 0; //@line 30667
  HEAP32[$61 >> 2] = $26; //@line 30668
  $62 = $ReallocAsyncCtx4 + 60 | 0; //@line 30669
  HEAP16[$62 >> 1] = $34; //@line 30670
  $63 = $ReallocAsyncCtx4 + 64 | 0; //@line 30671
  HEAP32[$63 >> 2] = $$; //@line 30672
  sp = STACKTOP; //@line 30673
  return;
 }
 HEAP32[___async_retval >> 2] = $47; //@line 30677
 ___async_unwind = 0; //@line 30678
 HEAP32[$ReallocAsyncCtx4 >> 2] = 242; //@line 30679
 $48 = $ReallocAsyncCtx4 + 4 | 0; //@line 30680
 HEAP32[$48 >> 2] = $2; //@line 30681
 $49 = $ReallocAsyncCtx4 + 8 | 0; //@line 30682
 HEAP32[$49 >> 2] = $4; //@line 30683
 $50 = $ReallocAsyncCtx4 + 12 | 0; //@line 30684
 HEAP32[$50 >> 2] = $$lcssa; //@line 30685
 $51 = $ReallocAsyncCtx4 + 16 | 0; //@line 30686
 HEAP32[$51 >> 2] = $6; //@line 30687
 $52 = $ReallocAsyncCtx4 + 20 | 0; //@line 30688
 HEAP32[$52 >> 2] = $8; //@line 30689
 $53 = $ReallocAsyncCtx4 + 24 | 0; //@line 30690
 HEAP32[$53 >> 2] = $10; //@line 30691
 $54 = $ReallocAsyncCtx4 + 28 | 0; //@line 30692
 HEAP32[$54 >> 2] = $12; //@line 30693
 $55 = $ReallocAsyncCtx4 + 32 | 0; //@line 30694
 HEAP32[$55 >> 2] = $14; //@line 30695
 $56 = $ReallocAsyncCtx4 + 36 | 0; //@line 30696
 HEAP32[$56 >> 2] = $16; //@line 30697
 $57 = $ReallocAsyncCtx4 + 40 | 0; //@line 30698
 HEAP32[$57 >> 2] = $18; //@line 30699
 $58 = $ReallocAsyncCtx4 + 44 | 0; //@line 30700
 HEAP32[$58 >> 2] = $20; //@line 30701
 $59 = $ReallocAsyncCtx4 + 48 | 0; //@line 30702
 HEAP32[$59 >> 2] = $22; //@line 30703
 $60 = $ReallocAsyncCtx4 + 52 | 0; //@line 30704
 HEAP32[$60 >> 2] = $24; //@line 30705
 $61 = $ReallocAsyncCtx4 + 56 | 0; //@line 30706
 HEAP32[$61 >> 2] = $26; //@line 30707
 $62 = $ReallocAsyncCtx4 + 60 | 0; //@line 30708
 HEAP16[$62 >> 1] = $34; //@line 30709
 $63 = $ReallocAsyncCtx4 + 64 | 0; //@line 30710
 HEAP32[$63 >> 2] = $$; //@line 30711
 sp = STACKTOP; //@line 30712
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18930
 STACKTOP = STACKTOP + 32 | 0; //@line 18931
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 18931
 $0 = sp; //@line 18932
 _gpio_init_out($0, 50); //@line 18933
 while (1) {
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 18936
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18937
  _wait_ms(150); //@line 18938
  if (___async) {
   label = 3; //@line 18941
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 18944
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 18946
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18947
  _wait_ms(150); //@line 18948
  if (___async) {
   label = 5; //@line 18951
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 18954
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 18956
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18957
  _wait_ms(150); //@line 18958
  if (___async) {
   label = 7; //@line 18961
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 18964
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 18966
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18967
  _wait_ms(150); //@line 18968
  if (___async) {
   label = 9; //@line 18971
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 18974
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 18976
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18977
  _wait_ms(150); //@line 18978
  if (___async) {
   label = 11; //@line 18981
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 18984
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 18986
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18987
  _wait_ms(150); //@line 18988
  if (___async) {
   label = 13; //@line 18991
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 18994
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 18996
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18997
  _wait_ms(150); //@line 18998
  if (___async) {
   label = 15; //@line 19001
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 19004
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19006
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19007
  _wait_ms(150); //@line 19008
  if (___async) {
   label = 17; //@line 19011
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 19014
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19016
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19017
  _wait_ms(400); //@line 19018
  if (___async) {
   label = 19; //@line 19021
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 19024
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19026
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19027
  _wait_ms(400); //@line 19028
  if (___async) {
   label = 21; //@line 19031
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 19034
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19036
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19037
  _wait_ms(400); //@line 19038
  if (___async) {
   label = 23; //@line 19041
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19044
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19046
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19047
  _wait_ms(400); //@line 19048
  if (___async) {
   label = 25; //@line 19051
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19054
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19056
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19057
  _wait_ms(400); //@line 19058
  if (___async) {
   label = 27; //@line 19061
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19064
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19066
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19067
  _wait_ms(400); //@line 19068
  if (___async) {
   label = 29; //@line 19071
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19074
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19076
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19077
  _wait_ms(400); //@line 19078
  if (___async) {
   label = 31; //@line 19081
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19084
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19086
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19087
  _wait_ms(400); //@line 19088
  if (___async) {
   label = 33; //@line 19091
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19094
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 267; //@line 19098
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 19100
   sp = STACKTOP; //@line 19101
   STACKTOP = sp; //@line 19102
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 268; //@line 19106
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 19108
   sp = STACKTOP; //@line 19109
   STACKTOP = sp; //@line 19110
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 269; //@line 19114
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 19116
   sp = STACKTOP; //@line 19117
   STACKTOP = sp; //@line 19118
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 270; //@line 19122
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 19124
   sp = STACKTOP; //@line 19125
   STACKTOP = sp; //@line 19126
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 271; //@line 19130
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 19132
   sp = STACKTOP; //@line 19133
   STACKTOP = sp; //@line 19134
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 272; //@line 19138
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 19140
   sp = STACKTOP; //@line 19141
   STACKTOP = sp; //@line 19142
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 273; //@line 19146
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 19148
   sp = STACKTOP; //@line 19149
   STACKTOP = sp; //@line 19150
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 274; //@line 19154
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 19156
   sp = STACKTOP; //@line 19157
   STACKTOP = sp; //@line 19158
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 275; //@line 19162
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 19164
   sp = STACKTOP; //@line 19165
   STACKTOP = sp; //@line 19166
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 276; //@line 19170
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 19172
   sp = STACKTOP; //@line 19173
   STACKTOP = sp; //@line 19174
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 277; //@line 19178
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 19180
   sp = STACKTOP; //@line 19181
   STACKTOP = sp; //@line 19182
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 278; //@line 19186
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 19188
   sp = STACKTOP; //@line 19189
   STACKTOP = sp; //@line 19190
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 279; //@line 19194
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 19196
   sp = STACKTOP; //@line 19197
   STACKTOP = sp; //@line 19198
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 280; //@line 19202
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 19204
   sp = STACKTOP; //@line 19205
   STACKTOP = sp; //@line 19206
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 281; //@line 19210
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 19212
   sp = STACKTOP; //@line 19213
   STACKTOP = sp; //@line 19214
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 282; //@line 19218
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19220
   sp = STACKTOP; //@line 19221
   STACKTOP = sp; //@line 19222
   return;
  }
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_83($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18322
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18324
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18326
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18328
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18330
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18335
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18337
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18339
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18341
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18343
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18345
 if (HEAP8[$0 + 20 >> 0] & 1) {
  $39 = HEAP32[$12 >> 2] | 0; //@line 18347
  if (!$39) {
   $53 = $16 + 12 | 0; //@line 18350
   HEAP32[$53 >> 2] = 0; //@line 18351
   $54 = HEAP32[$4 >> 2] | 0; //@line 18352
   HEAP32[$18 + 8 >> 2] = 0; //@line 18354
   HEAP32[$18 >> 2] = 184; //@line 18355
   HEAP32[$18 + 4 >> 2] = $54; //@line 18357
   $56 = $18 + 12 | 0; //@line 18358
   HEAP32[$56 >> 2] = 724; //@line 18359
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(48) | 0; //@line 18360
   $57 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 18361
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 185; //@line 18364
    $58 = $ReallocAsyncCtx18 + 4 | 0; //@line 18365
    HEAP32[$58 >> 2] = $2; //@line 18366
    $59 = $ReallocAsyncCtx18 + 8 | 0; //@line 18367
    HEAP32[$59 >> 2] = $4; //@line 18368
    $60 = $ReallocAsyncCtx18 + 12 | 0; //@line 18369
    HEAP32[$60 >> 2] = $6; //@line 18370
    $61 = $ReallocAsyncCtx18 + 16 | 0; //@line 18371
    HEAP32[$61 >> 2] = $8; //@line 18372
    $62 = $ReallocAsyncCtx18 + 20 | 0; //@line 18373
    HEAP32[$62 >> 2] = $12; //@line 18374
    $63 = $ReallocAsyncCtx18 + 24 | 0; //@line 18375
    HEAP32[$63 >> 2] = $14; //@line 18376
    $64 = $ReallocAsyncCtx18 + 28 | 0; //@line 18377
    HEAP32[$64 >> 2] = $22; //@line 18378
    $65 = $ReallocAsyncCtx18 + 32 | 0; //@line 18379
    HEAP32[$65 >> 2] = $53; //@line 18380
    $66 = $ReallocAsyncCtx18 + 36 | 0; //@line 18381
    HEAP32[$66 >> 2] = $16; //@line 18382
    $67 = $ReallocAsyncCtx18 + 40 | 0; //@line 18383
    HEAP32[$67 >> 2] = $18; //@line 18384
    $68 = $ReallocAsyncCtx18 + 44 | 0; //@line 18385
    HEAP32[$68 >> 2] = $56; //@line 18386
    sp = STACKTOP; //@line 18387
    return;
   }
   HEAP32[___async_retval >> 2] = $57; //@line 18391
   ___async_unwind = 0; //@line 18392
   HEAP32[$ReallocAsyncCtx18 >> 2] = 185; //@line 18393
   $58 = $ReallocAsyncCtx18 + 4 | 0; //@line 18394
   HEAP32[$58 >> 2] = $2; //@line 18395
   $59 = $ReallocAsyncCtx18 + 8 | 0; //@line 18396
   HEAP32[$59 >> 2] = $4; //@line 18397
   $60 = $ReallocAsyncCtx18 + 12 | 0; //@line 18398
   HEAP32[$60 >> 2] = $6; //@line 18399
   $61 = $ReallocAsyncCtx18 + 16 | 0; //@line 18400
   HEAP32[$61 >> 2] = $8; //@line 18401
   $62 = $ReallocAsyncCtx18 + 20 | 0; //@line 18402
   HEAP32[$62 >> 2] = $12; //@line 18403
   $63 = $ReallocAsyncCtx18 + 24 | 0; //@line 18404
   HEAP32[$63 >> 2] = $14; //@line 18405
   $64 = $ReallocAsyncCtx18 + 28 | 0; //@line 18406
   HEAP32[$64 >> 2] = $22; //@line 18407
   $65 = $ReallocAsyncCtx18 + 32 | 0; //@line 18408
   HEAP32[$65 >> 2] = $53; //@line 18409
   $66 = $ReallocAsyncCtx18 + 36 | 0; //@line 18410
   HEAP32[$66 >> 2] = $16; //@line 18411
   $67 = $ReallocAsyncCtx18 + 40 | 0; //@line 18412
   HEAP32[$67 >> 2] = $18; //@line 18413
   $68 = $ReallocAsyncCtx18 + 44 | 0; //@line 18414
   HEAP32[$68 >> 2] = $56; //@line 18415
   sp = STACKTOP; //@line 18416
   return;
  } else {
   $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 18420
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(44) | 0; //@line 18421
   FUNCTION_TABLE_vii[$42 & 7]($16, $14); //@line 18422
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 183; //@line 18425
    $43 = $ReallocAsyncCtx11 + 4 | 0; //@line 18426
    HEAP32[$43 >> 2] = $2; //@line 18427
    $44 = $ReallocAsyncCtx11 + 8 | 0; //@line 18428
    HEAP32[$44 >> 2] = $4; //@line 18429
    $45 = $ReallocAsyncCtx11 + 12 | 0; //@line 18430
    HEAP32[$45 >> 2] = $6; //@line 18431
    $46 = $ReallocAsyncCtx11 + 16 | 0; //@line 18432
    HEAP32[$46 >> 2] = $8; //@line 18433
    $47 = $ReallocAsyncCtx11 + 20 | 0; //@line 18434
    HEAP32[$47 >> 2] = $12; //@line 18435
    $48 = $ReallocAsyncCtx11 + 24 | 0; //@line 18436
    HEAP32[$48 >> 2] = $14; //@line 18437
    $49 = $ReallocAsyncCtx11 + 28 | 0; //@line 18438
    HEAP32[$49 >> 2] = $20; //@line 18439
    $50 = $ReallocAsyncCtx11 + 32 | 0; //@line 18440
    HEAP32[$50 >> 2] = $16; //@line 18441
    $51 = $ReallocAsyncCtx11 + 36 | 0; //@line 18442
    HEAP32[$51 >> 2] = $18; //@line 18443
    $52 = $ReallocAsyncCtx11 + 40 | 0; //@line 18444
    HEAP32[$52 >> 2] = $22; //@line 18445
    sp = STACKTOP; //@line 18446
    return;
   }
   ___async_unwind = 0; //@line 18449
   HEAP32[$ReallocAsyncCtx11 >> 2] = 183; //@line 18450
   $43 = $ReallocAsyncCtx11 + 4 | 0; //@line 18451
   HEAP32[$43 >> 2] = $2; //@line 18452
   $44 = $ReallocAsyncCtx11 + 8 | 0; //@line 18453
   HEAP32[$44 >> 2] = $4; //@line 18454
   $45 = $ReallocAsyncCtx11 + 12 | 0; //@line 18455
   HEAP32[$45 >> 2] = $6; //@line 18456
   $46 = $ReallocAsyncCtx11 + 16 | 0; //@line 18457
   HEAP32[$46 >> 2] = $8; //@line 18458
   $47 = $ReallocAsyncCtx11 + 20 | 0; //@line 18459
   HEAP32[$47 >> 2] = $12; //@line 18460
   $48 = $ReallocAsyncCtx11 + 24 | 0; //@line 18461
   HEAP32[$48 >> 2] = $14; //@line 18462
   $49 = $ReallocAsyncCtx11 + 28 | 0; //@line 18463
   HEAP32[$49 >> 2] = $20; //@line 18464
   $50 = $ReallocAsyncCtx11 + 32 | 0; //@line 18465
   HEAP32[$50 >> 2] = $16; //@line 18466
   $51 = $ReallocAsyncCtx11 + 36 | 0; //@line 18467
   HEAP32[$51 >> 2] = $18; //@line 18468
   $52 = $ReallocAsyncCtx11 + 40 | 0; //@line 18469
   HEAP32[$52 >> 2] = $22; //@line 18470
   sp = STACKTOP; //@line 18471
   return;
  }
 }
 $23 = HEAP32[$2 >> 2] | 0; //@line 18475
 if ($23 | 0) {
  __ZdlPv($23); //@line 18478
 }
 $25 = HEAP32[$12 >> 2] | 0; //@line 18480
 if ($25 | 0) {
  $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 18484
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 18485
  FUNCTION_TABLE_vi[$28 & 511]($14); //@line 18486
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 18489
   $29 = $ReallocAsyncCtx9 + 4 | 0; //@line 18490
   HEAP32[$29 >> 2] = $6; //@line 18491
   $30 = $ReallocAsyncCtx9 + 8 | 0; //@line 18492
   HEAP32[$30 >> 2] = $8; //@line 18493
   $31 = $ReallocAsyncCtx9 + 12 | 0; //@line 18494
   HEAP32[$31 >> 2] = $22; //@line 18495
   sp = STACKTOP; //@line 18496
   return;
  }
  ___async_unwind = 0; //@line 18499
  HEAP32[$ReallocAsyncCtx9 >> 2] = 181; //@line 18500
  $29 = $ReallocAsyncCtx9 + 4 | 0; //@line 18501
  HEAP32[$29 >> 2] = $6; //@line 18502
  $30 = $ReallocAsyncCtx9 + 8 | 0; //@line 18503
  HEAP32[$30 >> 2] = $8; //@line 18504
  $31 = $ReallocAsyncCtx9 + 12 | 0; //@line 18505
  HEAP32[$31 >> 2] = $22; //@line 18506
  sp = STACKTOP; //@line 18507
  return;
 }
 $33 = HEAP32[$6 + 28 >> 2] | 0; //@line 18511
 if (!$33) {
  __ZdlPv($6); //@line 18514
  HEAP32[___async_retval >> 2] = -3007; //@line 18516
  return;
 }
 $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 18520
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 18521
 FUNCTION_TABLE_vi[$36 & 511]($8); //@line 18522
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 18525
  $37 = $ReallocAsyncCtx10 + 4 | 0; //@line 18526
  HEAP32[$37 >> 2] = $6; //@line 18527
  $38 = $ReallocAsyncCtx10 + 8 | 0; //@line 18528
  HEAP32[$38 >> 2] = $22; //@line 18529
  sp = STACKTOP; //@line 18530
  return;
 }
 ___async_unwind = 0; //@line 18533
 HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 18534
 $37 = $ReallocAsyncCtx10 + 4 | 0; //@line 18535
 HEAP32[$37 >> 2] = $6; //@line 18536
 $38 = $ReallocAsyncCtx10 + 8 | 0; //@line 18537
 HEAP32[$38 >> 2] = $22; //@line 18538
 sp = STACKTOP; //@line 18539
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_159($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$sroa_idx5$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $71 = 0, $77 = 0, $8 = 0, $83 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30722
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30724
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30726
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30728
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30730
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($8); //@line 30735
  return;
 }
 $11 = $8 + 1 | 0; //@line 30738
 $12 = $2 + 12 | 0; //@line 30739
 $13 = $4 + 8 | 0; //@line 30740
 $$sroa_idx5$i$i = $4 + 4 | 0; //@line 30741
 $14 = $4 + 12 | 0; //@line 30742
 $20 = (HEAPU8[$8 >> 0] | 0) << 8 | (HEAPU8[$11 >> 0] | 0); //@line 30748
 $21 = $20 & 65535; //@line 30749
 $22 = HEAP32[2518] | 0; //@line 30750
 if (!$22) {
  label = 6; //@line 30753
 } else {
  if (($20 | 0) == (HEAPU16[$22 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $22; //@line 30760
  } else {
   label = 6; //@line 30762
  }
 }
 do {
  if ((label | 0) == 6) {
   $28 = HEAP32[2519] | 0; //@line 30767
   if ($28 | 0) {
    if (($20 | 0) == (HEAPU16[$28 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $28; //@line 30775
     break;
    }
   }
   $71 = HEAP32[2520] | 0; //@line 30779
   if ($71 | 0) {
    if (($20 | 0) == (HEAPU16[$71 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $71; //@line 30787
     break;
    }
   }
   $77 = HEAP32[2521] | 0; //@line 30791
   if ($77 | 0) {
    if (($20 | 0) == (HEAPU16[$77 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $77; //@line 30799
     break;
    }
   }
   $83 = HEAP32[2522] | 0; //@line 30803
   if ($83 | 0) {
    if (($20 | 0) == (HEAPU16[$83 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $83; //@line 30811
     break;
    }
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 30815
   $52 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($6, 0, $8, 512) | 0; //@line 30816
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 30819
    $53 = $ReallocAsyncCtx6 + 4 | 0; //@line 30820
    HEAP32[$53 >> 2] = $14; //@line 30821
    $54 = $ReallocAsyncCtx6 + 8 | 0; //@line 30822
    HEAP32[$54 >> 2] = $12; //@line 30823
    $55 = $ReallocAsyncCtx6 + 12 | 0; //@line 30824
    HEAP32[$55 >> 2] = $13; //@line 30825
    $56 = $ReallocAsyncCtx6 + 16 | 0; //@line 30826
    HEAP32[$56 >> 2] = $4; //@line 30827
    $57 = $ReallocAsyncCtx6 + 20 | 0; //@line 30828
    HEAP32[$57 >> 2] = $$sroa_idx5$i$i; //@line 30829
    $58 = $ReallocAsyncCtx6 + 24 | 0; //@line 30830
    HEAP32[$58 >> 2] = $2; //@line 30831
    $59 = $ReallocAsyncCtx6 + 28 | 0; //@line 30832
    HEAP32[$59 >> 2] = $4; //@line 30833
    $60 = $ReallocAsyncCtx6 + 32 | 0; //@line 30834
    HEAP32[$60 >> 2] = $4; //@line 30835
    $61 = $ReallocAsyncCtx6 + 36 | 0; //@line 30836
    HEAP32[$61 >> 2] = $12; //@line 30837
    $62 = $ReallocAsyncCtx6 + 40 | 0; //@line 30838
    HEAP32[$62 >> 2] = $6; //@line 30839
    $63 = $ReallocAsyncCtx6 + 44 | 0; //@line 30840
    HEAP32[$63 >> 2] = $8; //@line 30841
    $64 = $ReallocAsyncCtx6 + 48 | 0; //@line 30842
    HEAP32[$64 >> 2] = $11; //@line 30843
    $65 = $ReallocAsyncCtx6 + 52 | 0; //@line 30844
    HEAP32[$65 >> 2] = $2; //@line 30845
    sp = STACKTOP; //@line 30846
    return;
   }
   HEAP32[___async_retval >> 2] = $52; //@line 30850
   ___async_unwind = 0; //@line 30851
   HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 30852
   $53 = $ReallocAsyncCtx6 + 4 | 0; //@line 30853
   HEAP32[$53 >> 2] = $14; //@line 30854
   $54 = $ReallocAsyncCtx6 + 8 | 0; //@line 30855
   HEAP32[$54 >> 2] = $12; //@line 30856
   $55 = $ReallocAsyncCtx6 + 12 | 0; //@line 30857
   HEAP32[$55 >> 2] = $13; //@line 30858
   $56 = $ReallocAsyncCtx6 + 16 | 0; //@line 30859
   HEAP32[$56 >> 2] = $4; //@line 30860
   $57 = $ReallocAsyncCtx6 + 20 | 0; //@line 30861
   HEAP32[$57 >> 2] = $$sroa_idx5$i$i; //@line 30862
   $58 = $ReallocAsyncCtx6 + 24 | 0; //@line 30863
   HEAP32[$58 >> 2] = $2; //@line 30864
   $59 = $ReallocAsyncCtx6 + 28 | 0; //@line 30865
   HEAP32[$59 >> 2] = $4; //@line 30866
   $60 = $ReallocAsyncCtx6 + 32 | 0; //@line 30867
   HEAP32[$60 >> 2] = $4; //@line 30868
   $61 = $ReallocAsyncCtx6 + 36 | 0; //@line 30869
   HEAP32[$61 >> 2] = $12; //@line 30870
   $62 = $ReallocAsyncCtx6 + 40 | 0; //@line 30871
   HEAP32[$62 >> 2] = $6; //@line 30872
   $63 = $ReallocAsyncCtx6 + 44 | 0; //@line 30873
   HEAP32[$63 >> 2] = $8; //@line 30874
   $64 = $ReallocAsyncCtx6 + 48 | 0; //@line 30875
   HEAP32[$64 >> 2] = $11; //@line 30876
   $65 = $ReallocAsyncCtx6 + 52 | 0; //@line 30877
   HEAP32[$65 >> 2] = $2; //@line 30878
   sp = STACKTOP; //@line 30879
   return;
  }
 } while (0);
 $31 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 30884
 $$ = $31 >>> 0 > 1 ? $31 : 1; //@line 30886
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 30890
 $34 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 12052) | 0; //@line 30891
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 242; //@line 30894
  $35 = $ReallocAsyncCtx4 + 4 | 0; //@line 30895
  HEAP32[$35 >> 2] = $14; //@line 30896
  $36 = $ReallocAsyncCtx4 + 8 | 0; //@line 30897
  HEAP32[$36 >> 2] = $12; //@line 30898
  $37 = $ReallocAsyncCtx4 + 12 | 0; //@line 30899
  HEAP32[$37 >> 2] = $$lcssa; //@line 30900
  $38 = $ReallocAsyncCtx4 + 16 | 0; //@line 30901
  HEAP32[$38 >> 2] = $13; //@line 30902
  $39 = $ReallocAsyncCtx4 + 20 | 0; //@line 30903
  HEAP32[$39 >> 2] = $4; //@line 30904
  $40 = $ReallocAsyncCtx4 + 24 | 0; //@line 30905
  HEAP32[$40 >> 2] = $$sroa_idx5$i$i; //@line 30906
  $41 = $ReallocAsyncCtx4 + 28 | 0; //@line 30907
  HEAP32[$41 >> 2] = $2; //@line 30908
  $42 = $ReallocAsyncCtx4 + 32 | 0; //@line 30909
  HEAP32[$42 >> 2] = $4; //@line 30910
  $43 = $ReallocAsyncCtx4 + 36 | 0; //@line 30911
  HEAP32[$43 >> 2] = $4; //@line 30912
  $44 = $ReallocAsyncCtx4 + 40 | 0; //@line 30913
  HEAP32[$44 >> 2] = $12; //@line 30914
  $45 = $ReallocAsyncCtx4 + 44 | 0; //@line 30915
  HEAP32[$45 >> 2] = $6; //@line 30916
  $46 = $ReallocAsyncCtx4 + 48 | 0; //@line 30917
  HEAP32[$46 >> 2] = $8; //@line 30918
  $47 = $ReallocAsyncCtx4 + 52 | 0; //@line 30919
  HEAP32[$47 >> 2] = $11; //@line 30920
  $48 = $ReallocAsyncCtx4 + 56 | 0; //@line 30921
  HEAP32[$48 >> 2] = $2; //@line 30922
  $49 = $ReallocAsyncCtx4 + 60 | 0; //@line 30923
  HEAP16[$49 >> 1] = $21; //@line 30924
  $50 = $ReallocAsyncCtx4 + 64 | 0; //@line 30925
  HEAP32[$50 >> 2] = $$; //@line 30926
  sp = STACKTOP; //@line 30927
  return;
 }
 HEAP32[___async_retval >> 2] = $34; //@line 30931
 ___async_unwind = 0; //@line 30932
 HEAP32[$ReallocAsyncCtx4 >> 2] = 242; //@line 30933
 $35 = $ReallocAsyncCtx4 + 4 | 0; //@line 30934
 HEAP32[$35 >> 2] = $14; //@line 30935
 $36 = $ReallocAsyncCtx4 + 8 | 0; //@line 30936
 HEAP32[$36 >> 2] = $12; //@line 30937
 $37 = $ReallocAsyncCtx4 + 12 | 0; //@line 30938
 HEAP32[$37 >> 2] = $$lcssa; //@line 30939
 $38 = $ReallocAsyncCtx4 + 16 | 0; //@line 30940
 HEAP32[$38 >> 2] = $13; //@line 30941
 $39 = $ReallocAsyncCtx4 + 20 | 0; //@line 30942
 HEAP32[$39 >> 2] = $4; //@line 30943
 $40 = $ReallocAsyncCtx4 + 24 | 0; //@line 30944
 HEAP32[$40 >> 2] = $$sroa_idx5$i$i; //@line 30945
 $41 = $ReallocAsyncCtx4 + 28 | 0; //@line 30946
 HEAP32[$41 >> 2] = $2; //@line 30947
 $42 = $ReallocAsyncCtx4 + 32 | 0; //@line 30948
 HEAP32[$42 >> 2] = $4; //@line 30949
 $43 = $ReallocAsyncCtx4 + 36 | 0; //@line 30950
 HEAP32[$43 >> 2] = $4; //@line 30951
 $44 = $ReallocAsyncCtx4 + 40 | 0; //@line 30952
 HEAP32[$44 >> 2] = $12; //@line 30953
 $45 = $ReallocAsyncCtx4 + 44 | 0; //@line 30954
 HEAP32[$45 >> 2] = $6; //@line 30955
 $46 = $ReallocAsyncCtx4 + 48 | 0; //@line 30956
 HEAP32[$46 >> 2] = $8; //@line 30957
 $47 = $ReallocAsyncCtx4 + 52 | 0; //@line 30958
 HEAP32[$47 >> 2] = $11; //@line 30959
 $48 = $ReallocAsyncCtx4 + 56 | 0; //@line 30960
 HEAP32[$48 >> 2] = $2; //@line 30961
 $49 = $ReallocAsyncCtx4 + 60 | 0; //@line 30962
 HEAP16[$49 >> 1] = $21; //@line 30963
 $50 = $ReallocAsyncCtx4 + 64 | 0; //@line 30964
 HEAP32[$50 >> 2] = $$; //@line 30965
 sp = STACKTOP; //@line 30966
 return;
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 23272
 $3 = HEAP32[$2 >> 2] | 0; //@line 23273
 $4 = $3 & -8; //@line 23274
 $5 = $0 + $4 | 0; //@line 23275
 $6 = HEAP32[2545] | 0; //@line 23276
 $8 = $3 & 3; //@line 23278
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 23284
 }
 $11 = $5 + 4 | 0; //@line 23287
 $12 = HEAP32[$11 >> 2] | 0; //@line 23288
 if (!($12 & 1)) {
  _abort(); //@line 23292
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 23299
   return $$2 | 0; //@line 23300
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[2661] << 1 >>> 0) {
    $$2 = $0; //@line 23310
    return $$2 | 0; //@line 23311
   }
  }
  $$2 = 0; //@line 23314
  return $$2 | 0; //@line 23315
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 23319
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 23322
   return $$2 | 0; //@line 23323
  }
  $26 = $0 + $1 | 0; //@line 23325
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 23329
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 23332
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 23335
  _dispose_chunk($26, $24); //@line 23336
  $$2 = $0; //@line 23337
  return $$2 | 0; //@line 23338
 }
 if ((HEAP32[2547] | 0) == ($5 | 0)) {
  $37 = (HEAP32[2544] | 0) + $4 | 0; //@line 23344
  $39 = $37 - $1 | 0; //@line 23346
  $40 = $0 + $1 | 0; //@line 23347
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 23349
   return $$2 | 0; //@line 23350
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 23357
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 23358
  HEAP32[2547] = $40; //@line 23359
  HEAP32[2544] = $39; //@line 23360
  $$2 = $0; //@line 23361
  return $$2 | 0; //@line 23362
 }
 if ((HEAP32[2546] | 0) == ($5 | 0)) {
  $49 = (HEAP32[2543] | 0) + $4 | 0; //@line 23368
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 23371
   return $$2 | 0; //@line 23372
  }
  $51 = $49 - $1 | 0; //@line 23374
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 23377
   $54 = $0 + $49 | 0; //@line 23378
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 23382
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 23385
   HEAP32[$54 >> 2] = $51; //@line 23386
   $60 = $54 + 4 | 0; //@line 23387
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 23390
   $storemerge = $53; //@line 23391
   $storemerge4 = $51; //@line 23391
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 23396
   $67 = $0 + $49 + 4 | 0; //@line 23398
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 23401
   $storemerge = 0; //@line 23402
   $storemerge4 = 0; //@line 23402
  }
  HEAP32[2543] = $storemerge4; //@line 23404
  HEAP32[2546] = $storemerge; //@line 23405
  $$2 = $0; //@line 23406
  return $$2 | 0; //@line 23407
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 23412
  return $$2 | 0; //@line 23413
 }
 $73 = ($12 & -8) + $4 | 0; //@line 23416
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 23419
  return $$2 | 0; //@line 23420
 }
 $75 = $73 - $1 | 0; //@line 23422
 $76 = $12 >>> 3; //@line 23423
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 23428
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 23430
   $83 = 10204 + ($76 << 1 << 2) | 0; //@line 23432
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 23437
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 23444
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[2541] = HEAP32[2541] & ~(1 << $76); //@line 23454
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 23460
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 23464
    }
    $96 = $81 + 8 | 0; //@line 23467
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 23471
    } else {
     _abort(); //@line 23473
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 23478
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 23479
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 23482
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 23484
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 23488
     $115 = $114 + 4 | 0; //@line 23489
     $116 = HEAP32[$115 >> 2] | 0; //@line 23490
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 23493
      if (!$118) {
       $$3 = 0; //@line 23496
       break;
      } else {
       $$1272 = $118; //@line 23499
       $$1275 = $114; //@line 23499
      }
     } else {
      $$1272 = $116; //@line 23502
      $$1275 = $115; //@line 23502
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 23505
      $121 = HEAP32[$120 >> 2] | 0; //@line 23506
      if ($121 | 0) {
       $$1272 = $121; //@line 23509
       $$1275 = $120; //@line 23509
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 23512
      $124 = HEAP32[$123 >> 2] | 0; //@line 23513
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 23518
       $$1275 = $123; //@line 23518
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 23523
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 23526
      $$3 = $$1272; //@line 23527
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 23532
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 23535
     }
     $108 = $106 + 12 | 0; //@line 23538
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 23542
     }
     $111 = $103 + 8 | 0; //@line 23545
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 23549
      HEAP32[$111 >> 2] = $106; //@line 23550
      $$3 = $103; //@line 23551
      break;
     } else {
      _abort(); //@line 23554
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 23562
    $130 = 10468 + ($129 << 2) | 0; //@line 23563
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 23568
      if (!$$3) {
       HEAP32[2542] = HEAP32[2542] & ~(1 << $129); //@line 23575
       break L49;
      }
     } else {
      if ((HEAP32[2545] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 23582
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 23590
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[2545] | 0; //@line 23600
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 23603
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 23607
    $147 = $5 + 16 | 0; //@line 23608
    $148 = HEAP32[$147 >> 2] | 0; //@line 23609
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 23615
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 23619
       HEAP32[$148 + 24 >> 2] = $$3; //@line 23621
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 23627
    if ($154 | 0) {
     if ((HEAP32[2545] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 23633
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 23637
      HEAP32[$154 + 24 >> 2] = $$3; //@line 23639
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 23651
  $165 = $0 + $73 + 4 | 0; //@line 23653
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 23656
  $$2 = $0; //@line 23657
  return $$2 | 0; //@line 23658
 } else {
  $168 = $0 + $1 | 0; //@line 23660
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 23664
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 23667
  $175 = $0 + $73 + 4 | 0; //@line 23669
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 23672
  _dispose_chunk($168, $75); //@line 23673
  $$2 = $0; //@line 23674
  return $$2 | 0; //@line 23675
 }
 return 0; //@line 23677
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 1889
   $$0106$ph = 24; //@line 1889
   label = 4; //@line 1890
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 1894
   $$0106$ph = 53; //@line 1894
   label = 4; //@line 1895
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 1899
   $$0106$ph = 53; //@line 1899
   label = 4; //@line 1900
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 1904
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 1909
   $4 = $0 + 100 | 0; //@line 1910
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 1912
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 1917
     $12 = HEAPU8[$5 >> 0] | 0; //@line 1920
    } else {
     $12 = ___shgetc($0) | 0; //@line 1923
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 1937
      $19 = HEAP32[$3 >> 2] | 0; //@line 1938
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 1943
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 1946
       $$0113 = $18; //@line 1946
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 1950
       $$0113 = $18; //@line 1950
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 1956
      $$0113 = 1; //@line 1956
     }
    }
   } while (0);
   $$0107127 = 0; //@line 1960
   $$1128 = $$0; //@line 1960
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[6540 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 1968
     $$1$lcssa = $$1128; //@line 1968
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 1974
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 1979
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 1982
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 1986
       break;
      }
     } else {
      $$2 = $$1128; //@line 1990
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 1993
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 1996
     $$1128 = $$2; //@line 1996
    } else {
     $$0107$lcssa = $39; //@line 1998
     $$1$lcssa = $$2; //@line 1998
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 2008
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 2013
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 2020
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 2027
        $$3126 = $$1$lcssa; //@line 2027
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[7323 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 2035
          $$5 = $$3126; //@line 2035
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 2041
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 2046
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 2049
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 2053
            break;
           }
          } else {
           $$4 = $$3126; //@line 2057
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 2060
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 2063
          $$3126 = $$4; //@line 2063
         } else {
          $$3110 = $70; //@line 2065
          $$5 = $$4; //@line 2065
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 2070
        $$5 = $$1$lcssa; //@line 2070
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 2075
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 2080
         $80 = HEAPU8[$72 >> 0] | 0; //@line 2083
        } else {
         $80 = ___shgetc($0) | 0; //@line 2086
        }
        if (($80 | 0) == 40) {
         $$4111 = 1; //@line 2090
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 2095
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 2100
         $$0114 = nan; //@line 2101
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 2105
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 2110
          $93 = HEAPU8[$85 >> 0] | 0; //@line 2113
         } else {
          $93 = ___shgetc($0) | 0; //@line 2116
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 2133
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 2137
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 2141
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 2145
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 2149
         ___shlim($0, 0); //@line 2150
         $$0114 = 0.0; //@line 2151
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 2156
         break L4;
        } else {
         $$in = $$4111; //@line 2159
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 2162
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 2166
         }
         if (!$$in) {
          $$0114 = nan; //@line 2170
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 2181
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 2186
          $126 = HEAPU8[$118 >> 0] | 0; //@line 2189
         } else {
          $126 = ___shgetc($0) | 0; //@line 2192
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 2198
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 2204
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 2208
          $$6 = 48; //@line 2209
         }
        } else {
         $$6 = $$5; //@line 2212
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 2215
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 2225
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 2228
        ___shlim($0, 0); //@line 2229
        $$0114 = 0.0; //@line 2230
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 2239
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 2243
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 2249
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 2254
      }
      $$1108 = $$1108 + -1 | 0; //@line 2256
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 2269
  }
 } while (0);
 return +$$0114;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_93($0) {
 $0 = $0 | 0;
 var $$391 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 19793
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19795
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19797
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19799
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19801
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19803
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19805
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19807
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19809
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19811
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19813
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19817
 $24 = HEAP32[HEAP32[$0 + 44 >> 2] >> 2] | 0; //@line 19818
 if ($24 | 0) {
  $27 = HEAP32[$24 + 8 >> 2] | 0; //@line 19822
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(44) | 0; //@line 19823
  FUNCTION_TABLE_vi[$27 & 511]($20); //@line 19824
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 186; //@line 19827
   $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 19828
   HEAP32[$28 >> 2] = $2; //@line 19829
   $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 19830
   HEAP32[$29 >> 2] = $4; //@line 19831
   $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 19832
   HEAP32[$30 >> 2] = $6; //@line 19833
   $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 19834
   HEAP32[$31 >> 2] = $8; //@line 19835
   $32 = $ReallocAsyncCtx12 + 20 | 0; //@line 19836
   HEAP32[$32 >> 2] = $10; //@line 19837
   $33 = $ReallocAsyncCtx12 + 24 | 0; //@line 19838
   HEAP32[$33 >> 2] = $12; //@line 19839
   $34 = $ReallocAsyncCtx12 + 28 | 0; //@line 19840
   HEAP32[$34 >> 2] = $AsyncRetVal; //@line 19841
   $35 = $ReallocAsyncCtx12 + 32 | 0; //@line 19842
   HEAP32[$35 >> 2] = $16; //@line 19843
   $36 = $ReallocAsyncCtx12 + 36 | 0; //@line 19844
   HEAP32[$36 >> 2] = $18; //@line 19845
   $37 = $ReallocAsyncCtx12 + 40 | 0; //@line 19846
   HEAP32[$37 >> 2] = $14; //@line 19847
   sp = STACKTOP; //@line 19848
   return;
  }
  ___async_unwind = 0; //@line 19851
  HEAP32[$ReallocAsyncCtx12 >> 2] = 186; //@line 19852
  $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 19853
  HEAP32[$28 >> 2] = $2; //@line 19854
  $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 19855
  HEAP32[$29 >> 2] = $4; //@line 19856
  $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 19857
  HEAP32[$30 >> 2] = $6; //@line 19858
  $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 19859
  HEAP32[$31 >> 2] = $8; //@line 19860
  $32 = $ReallocAsyncCtx12 + 20 | 0; //@line 19861
  HEAP32[$32 >> 2] = $10; //@line 19862
  $33 = $ReallocAsyncCtx12 + 24 | 0; //@line 19863
  HEAP32[$33 >> 2] = $12; //@line 19864
  $34 = $ReallocAsyncCtx12 + 28 | 0; //@line 19865
  HEAP32[$34 >> 2] = $AsyncRetVal; //@line 19866
  $35 = $ReallocAsyncCtx12 + 32 | 0; //@line 19867
  HEAP32[$35 >> 2] = $16; //@line 19868
  $36 = $ReallocAsyncCtx12 + 36 | 0; //@line 19869
  HEAP32[$36 >> 2] = $18; //@line 19870
  $37 = $ReallocAsyncCtx12 + 40 | 0; //@line 19871
  HEAP32[$37 >> 2] = $14; //@line 19872
  sp = STACKTOP; //@line 19873
  return;
 }
 $38 = ($AsyncRetVal | 0) == 0; //@line 19876
 $39 = HEAP32[$16 >> 2] | 0; //@line 19877
 if ($39 | 0) {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 19881
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(36) | 0; //@line 19882
  FUNCTION_TABLE_vi[$42 & 511]($18); //@line 19883
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 187; //@line 19886
   $43 = $ReallocAsyncCtx13 + 4 | 0; //@line 19887
   $$expand_i1_val = $38 & 1; //@line 19888
   HEAP8[$43 >> 0] = $$expand_i1_val; //@line 19889
   $44 = $ReallocAsyncCtx13 + 8 | 0; //@line 19890
   HEAP32[$44 >> 2] = $4; //@line 19891
   $45 = $ReallocAsyncCtx13 + 12 | 0; //@line 19892
   HEAP32[$45 >> 2] = $2; //@line 19893
   $46 = $ReallocAsyncCtx13 + 16 | 0; //@line 19894
   HEAP32[$46 >> 2] = $10; //@line 19895
   $47 = $ReallocAsyncCtx13 + 20 | 0; //@line 19896
   HEAP32[$47 >> 2] = $6; //@line 19897
   $48 = $ReallocAsyncCtx13 + 24 | 0; //@line 19898
   HEAP32[$48 >> 2] = $12; //@line 19899
   $49 = $ReallocAsyncCtx13 + 28 | 0; //@line 19900
   HEAP32[$49 >> 2] = $8; //@line 19901
   $50 = $ReallocAsyncCtx13 + 32 | 0; //@line 19902
   HEAP32[$50 >> 2] = $14; //@line 19903
   sp = STACKTOP; //@line 19904
   return;
  }
  ___async_unwind = 0; //@line 19907
  HEAP32[$ReallocAsyncCtx13 >> 2] = 187; //@line 19908
  $43 = $ReallocAsyncCtx13 + 4 | 0; //@line 19909
  $$expand_i1_val = $38 & 1; //@line 19910
  HEAP8[$43 >> 0] = $$expand_i1_val; //@line 19911
  $44 = $ReallocAsyncCtx13 + 8 | 0; //@line 19912
  HEAP32[$44 >> 2] = $4; //@line 19913
  $45 = $ReallocAsyncCtx13 + 12 | 0; //@line 19914
  HEAP32[$45 >> 2] = $2; //@line 19915
  $46 = $ReallocAsyncCtx13 + 16 | 0; //@line 19916
  HEAP32[$46 >> 2] = $10; //@line 19917
  $47 = $ReallocAsyncCtx13 + 20 | 0; //@line 19918
  HEAP32[$47 >> 2] = $6; //@line 19919
  $48 = $ReallocAsyncCtx13 + 24 | 0; //@line 19920
  HEAP32[$48 >> 2] = $12; //@line 19921
  $49 = $ReallocAsyncCtx13 + 28 | 0; //@line 19922
  HEAP32[$49 >> 2] = $8; //@line 19923
  $50 = $ReallocAsyncCtx13 + 32 | 0; //@line 19924
  HEAP32[$50 >> 2] = $14; //@line 19925
  sp = STACKTOP; //@line 19926
  return;
 }
 do {
  if ($38) {
   $$391 = HEAP32[$4 >> 2] | 0; //@line 19932
  } else {
   $51 = HEAP32[$2 >> 2] | 0; //@line 19934
   if ($51 | 0) {
    __ZdlPv($51); //@line 19937
   }
   $53 = HEAP32[$10 >> 2] | 0; //@line 19939
   if ($53 | 0) {
    $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 19943
    $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 19944
    FUNCTION_TABLE_vi[$56 & 511]($12); //@line 19945
    if (___async) {
     HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 19948
     $57 = $ReallocAsyncCtx14 + 4 | 0; //@line 19949
     HEAP32[$57 >> 2] = $6; //@line 19950
     $58 = $ReallocAsyncCtx14 + 8 | 0; //@line 19951
     HEAP32[$58 >> 2] = $8; //@line 19952
     $59 = $ReallocAsyncCtx14 + 12 | 0; //@line 19953
     HEAP32[$59 >> 2] = $14; //@line 19954
     sp = STACKTOP; //@line 19955
     return;
    }
    ___async_unwind = 0; //@line 19958
    HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 19959
    $57 = $ReallocAsyncCtx14 + 4 | 0; //@line 19960
    HEAP32[$57 >> 2] = $6; //@line 19961
    $58 = $ReallocAsyncCtx14 + 8 | 0; //@line 19962
    HEAP32[$58 >> 2] = $8; //@line 19963
    $59 = $ReallocAsyncCtx14 + 12 | 0; //@line 19964
    HEAP32[$59 >> 2] = $14; //@line 19965
    sp = STACKTOP; //@line 19966
    return;
   }
   $61 = HEAP32[$6 + 28 >> 2] | 0; //@line 19970
   if (!$61) {
    __ZdlPv($6); //@line 19973
    $$391 = -3007; //@line 19974
    break;
   }
   $64 = HEAP32[$61 + 8 >> 2] | 0; //@line 19978
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 19979
   FUNCTION_TABLE_vi[$64 & 511]($8); //@line 19980
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 189; //@line 19983
    $65 = $ReallocAsyncCtx15 + 4 | 0; //@line 19984
    HEAP32[$65 >> 2] = $6; //@line 19985
    $66 = $ReallocAsyncCtx15 + 8 | 0; //@line 19986
    HEAP32[$66 >> 2] = $14; //@line 19987
    sp = STACKTOP; //@line 19988
    return;
   }
   ___async_unwind = 0; //@line 19991
   HEAP32[$ReallocAsyncCtx15 >> 2] = 189; //@line 19992
   $65 = $ReallocAsyncCtx15 + 4 | 0; //@line 19993
   HEAP32[$65 >> 2] = $6; //@line 19994
   $66 = $ReallocAsyncCtx15 + 8 | 0; //@line 19995
   HEAP32[$66 >> 2] = $14; //@line 19996
   sp = STACKTOP; //@line 19997
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$391; //@line 20002
 return;
}
function __ZN13SocketAddress14set_ip_addressEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i = 0, $$025$i = 0, $$02537$i = 0, $$026$i = 0, $$02636$i = 0, $$1$1$i = 0, $$1$2$i = 0, $$1$3$i = 0, $$1$i = 0, $$pre$phi$iZ2D = 0, $100 = 0, $107 = 0, $114 = 0, $121 = 0, $128 = 0, $134 = 0, $2 = 0, $26 = 0, $35 = 0, $4 = 0, $45 = 0, $56 = 0, $6 = 0, $66 = 0, $69 = 0, $76 = 0, $80 = 0, $86 = 0, $9 = 0, $93 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11101
 STACKTOP = STACKTOP + 48 | 0; //@line 11102
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11102
 $vararg_buffer7 = sp + 24 | 0; //@line 11103
 $vararg_buffer4 = sp + 16 | 0; //@line 11104
 $vararg_buffer1 = sp + 8 | 0; //@line 11105
 $vararg_buffer = sp; //@line 11106
 $2 = sp + 32 | 0; //@line 11107
 HEAP8[$0 >> 0] = 0; //@line 11108
 L1 : do {
  if ($1 | 0) {
   $4 = HEAP8[$1 >> 0] | 0; //@line 11112
   do {
    if ($4 << 24 >> 24) {
     $$016$i = 0; //@line 11116
     $6 = $4; //@line 11116
     while (1) {
      if (!($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10)) {
       $$02537$i = 0; //@line 11123
       $$02636$i = 0; //@line 11123
       $56 = $4; //@line 11123
       break;
      }
      $9 = $$016$i + 1 | 0; //@line 11126
      $6 = HEAP8[$1 + $9 >> 0] | 0; //@line 11128
      if (!($6 << 24 >> 24)) {
       label = 5; //@line 11131
       break;
      } else {
       $$016$i = $9; //@line 11134
      }
     }
     if ((label | 0) == 5) {
      if (($$016$i | 0) <= -1) {
       break;
      }
      if ((HEAP8[$1 + $$016$i >> 0] | 0) == 46) {
       $$02537$i = 0; //@line 11146
       $$02636$i = 0; //@line 11146
       $56 = $4; //@line 11146
      } else {
       break;
      }
     }
     do {
      if (!(($56 + -48 & 255) < 10 | ($56 + -97 & 255) < 6)) {
       switch ($56 << 24 >> 24) {
       case 58:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
        {
         break;
        }
       default:
        {
         break L1;
        }
       }
      }
      $$02636$i = $$02636$i + ($56 << 24 >> 24 == 58 & 1) | 0; //@line 11169
      $$02537$i = $$02537$i + 1 | 0; //@line 11170
      $56 = HEAP8[$1 + $$02537$i >> 0] | 0; //@line 11172
     } while ($56 << 24 >> 24 != 0);
     if (($$02636$i | 0) <= 1) {
      break L1;
     }
     HEAP32[$0 + 40 >> 2] = 2; //@line 11185
     $66 = $0 + 44 | 0; //@line 11186
     $$025$i = 0; //@line 11187
     L17 : while (1) {
      switch (HEAP8[$1 + $$025$i >> 0] | 0) {
      case 0:
       {
        label = 34; //@line 11193
        break L17;
        break;
       }
      case 58:
       {
        $69 = $$025$i + 1 | 0; //@line 11198
        if ((HEAP8[$1 + $69 >> 0] | 0) == 58) {
         label = 33; //@line 11203
         break L17;
        } else {
         $$025$i = $69; //@line 11206
         continue L17;
        }
        break;
       }
      default:
       {
        $$025$i = $$025$i + 1 | 0; //@line 11213
        continue L17;
       }
      }
     }
     if ((label | 0) == 33) {
      $$026$i = __ZL15ipv6_scan_chunkPtPKc($2, $1 + ($$025$i + 2) | 0) | 0; //@line 11222
      $$pre$phi$iZ2D = $2; //@line 11222
     } else if ((label | 0) == 34) {
      $$026$i = 0; //@line 11225
      $$pre$phi$iZ2D = $2; //@line 11225
     }
     $76 = 8 - $$026$i | 0; //@line 11227
     _memmove($2 + ($76 << 1) | 0, $2 | 0, $$026$i << 1 | 0) | 0; //@line 11230
     _memset($2 | 0, 0, $76 << 1 | 0) | 0; //@line 11232
     __ZL15ipv6_scan_chunkPtPKc($$pre$phi$iZ2D, $1) | 0; //@line 11233
     $80 = HEAP16[$$pre$phi$iZ2D >> 1] | 0; //@line 11234
     HEAP8[$66 >> 0] = ($80 & 65535) >>> 8; //@line 11237
     HEAP8[$0 + 45 >> 0] = $80; //@line 11240
     $86 = HEAP16[$2 + 2 >> 1] | 0; //@line 11242
     HEAP8[$0 + 46 >> 0] = ($86 & 65535) >>> 8; //@line 11246
     HEAP8[$0 + 47 >> 0] = $86; //@line 11249
     $93 = HEAP16[$2 + 4 >> 1] | 0; //@line 11251
     HEAP8[$0 + 48 >> 0] = ($93 & 65535) >>> 8; //@line 11255
     HEAP8[$0 + 49 >> 0] = $93; //@line 11258
     $100 = HEAP16[$2 + 6 >> 1] | 0; //@line 11260
     HEAP8[$0 + 50 >> 0] = ($100 & 65535) >>> 8; //@line 11264
     HEAP8[$0 + 51 >> 0] = $100; //@line 11267
     $107 = HEAP16[$2 + 8 >> 1] | 0; //@line 11269
     HEAP8[$0 + 52 >> 0] = ($107 & 65535) >>> 8; //@line 11273
     HEAP8[$0 + 53 >> 0] = $107; //@line 11276
     $114 = HEAP16[$2 + 10 >> 1] | 0; //@line 11278
     HEAP8[$0 + 54 >> 0] = ($114 & 65535) >>> 8; //@line 11282
     HEAP8[$0 + 55 >> 0] = $114; //@line 11285
     $121 = HEAP16[$2 + 12 >> 1] | 0; //@line 11287
     HEAP8[$0 + 56 >> 0] = ($121 & 65535) >>> 8; //@line 11291
     HEAP8[$0 + 57 >> 0] = $121; //@line 11294
     $128 = HEAP16[$2 + 14 >> 1] | 0; //@line 11296
     HEAP8[$0 + 58 >> 0] = ($128 & 65535) >>> 8; //@line 11300
     HEAP8[$0 + 59 >> 0] = $128; //@line 11303
     $$0 = 1; //@line 11304
     STACKTOP = sp; //@line 11305
     return $$0 | 0; //@line 11305
    }
   } while (0);
   HEAP32[$0 + 40 >> 2] = 1; //@line 11309
   HEAP32[$vararg_buffer >> 2] = $2; //@line 11310
   L28 : do {
    if ((_sscanf($1, 5838, $vararg_buffer) | 0) >= 1) {
     HEAP8[$0 + 44 >> 0] = HEAP32[$2 >> 2]; //@line 11318
     $$1$i = 0; //@line 11319
     L30 : while (1) {
      switch (HEAP8[$1 + $$1$i >> 0] | 0) {
      case 0:
       {
        break L28;
        break;
       }
      case 46:
       {
        break L30;
        break;
       }
      default:
       {}
      }
      $$1$i = $$1$i + 1 | 0; //@line 11336
     }
     $26 = $$1$i + 1 | 0; //@line 11338
     HEAP32[$vararg_buffer1 >> 2] = $2; //@line 11340
     if ((_sscanf($1 + $26 | 0, 5838, $vararg_buffer1) | 0) >= 1) {
      HEAP8[$0 + 45 >> 0] = HEAP32[$2 >> 2]; //@line 11347
      $$1$1$i = $26; //@line 11348
      L35 : while (1) {
       switch (HEAP8[$1 + $$1$1$i >> 0] | 0) {
       case 0:
        {
         break L28;
         break;
        }
       case 46:
        {
         break L35;
         break;
        }
       default:
        {}
       }
       $$1$1$i = $$1$1$i + 1 | 0; //@line 11365
      }
      $35 = $$1$1$i + 1 | 0; //@line 11367
      HEAP32[$vararg_buffer4 >> 2] = $2; //@line 11369
      if ((_sscanf($1 + $35 | 0, 5838, $vararg_buffer4) | 0) >= 1) {
       HEAP8[$0 + 46 >> 0] = HEAP32[$2 >> 2]; //@line 11376
       $$1$2$i = $35; //@line 11377
       L40 : while (1) {
        switch (HEAP8[$1 + $$1$2$i >> 0] | 0) {
        case 0:
         {
          break L28;
          break;
         }
        case 46:
         {
          break L40;
          break;
         }
        default:
         {}
        }
        $$1$2$i = $$1$2$i + 1 | 0; //@line 11394
       }
       $45 = $$1$2$i + 1 | 0; //@line 11396
       HEAP32[$vararg_buffer7 >> 2] = $2; //@line 11398
       if ((_sscanf($1 + $45 | 0, 5838, $vararg_buffer7) | 0) >= 1) {
        HEAP8[$0 + 47 >> 0] = HEAP32[$2 >> 2]; //@line 11405
        $$1$3$i = $45; //@line 11406
        L45 : while (1) {
         switch (HEAP8[$1 + $$1$3$i >> 0] | 0) {
         case 0:
          {
           break L28;
           break;
          }
         case 46:
          {
           break L45;
           break;
          }
         default:
          {}
         }
         $$1$3$i = $$1$3$i + 1 | 0; //@line 11423
        }
        $$0 = 1; //@line 11425
        STACKTOP = sp; //@line 11426
        return $$0 | 0; //@line 11426
       }
      }
     }
    }
   } while (0);
   $$0 = 1; //@line 11432
   STACKTOP = sp; //@line 11433
   return $$0 | 0; //@line 11433
  }
 } while (0);
 $134 = $0 + 40 | 0; //@line 11436
 HEAP32[$134 >> 2] = 0; //@line 11437
 HEAP32[$134 + 4 >> 2] = 0; //@line 11437
 HEAP32[$134 + 8 >> 2] = 0; //@line 11437
 HEAP32[$134 + 12 >> 2] = 0; //@line 11437
 HEAP32[$134 + 16 >> 2] = 0; //@line 11437
 $$0 = 0; //@line 11438
 STACKTOP = sp; //@line 11439
 return $$0 | 0; //@line 11439
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 3827
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 3827
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 3828
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 3829
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 3829
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 3830
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 3831
 $8 = $6 & 2047; //@line 3833
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 3834
 $11 = $9 & 2047; //@line 3836
 $12 = $3 & -2147483648; //@line 3837
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 3838
 $14 = tempRet0; //@line 3839
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 3845
  } else {
   $18 = ___DOUBLE_BITS_563($1) | 0; //@line 3847
   $20 = tempRet0 & 2147483647; //@line 3849
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 3858
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 3860
    $30 = tempRet0; //@line 3861
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 3877
     $42 = tempRet0; //@line 3878
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 3885
      $49 = $41; //@line 3885
      $50 = $42; //@line 3885
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 3887
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 3888
       $50 = tempRet0; //@line 3889
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 3898
        break;
       } else {
        $$073100 = $48; //@line 3896
       }
      }
     } else {
      $$073$lcssa = 0; //@line 3903
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 3906
     $$174 = $$073$lcssa; //@line 3908
     $87 = $59; //@line 3908
     $88 = tempRet0; //@line 3908
    } else {
     $$174 = $8; //@line 3912
     $87 = $2; //@line 3912
     $88 = $3 & 1048575 | 1048576; //@line 3912
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 3916
     $65 = tempRet0; //@line 3917
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 3924
      $72 = $64; //@line 3924
      $73 = $65; //@line 3924
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 3926
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 3927
       $73 = tempRet0; //@line 3928
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 3937
        break;
       } else {
        $$07194 = $71; //@line 3935
       }
      }
     } else {
      $$071$lcssa = 0; //@line 3942
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 3945
     $$172$ph = $$071$lcssa; //@line 3947
     $89 = $82; //@line 3947
     $90 = tempRet0; //@line 3947
    } else {
     $$172$ph = $11; //@line 3951
     $89 = $4; //@line 3951
     $90 = $5 & 1048575 | 1048576; //@line 3951
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 3954
    $92 = tempRet0; //@line 3955
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 3960
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 3963
      $101 = $92; //@line 3963
      $156 = $97; //@line 3963
      $157 = $87; //@line 3963
      $158 = $88; //@line 3963
      $99 = $91; //@line 3963
      while (1) {
       if ($156) {
        if (($99 | 0) == 0 & ($101 | 0) == 0) {
         break;
        } else {
         $104 = $99; //@line 3972
         $105 = $101; //@line 3972
        }
       } else {
        $104 = $157; //@line 3975
        $105 = $158; //@line 3975
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 3977
       $107 = tempRet0; //@line 3978
       $108 = $$27586 + -1 | 0; //@line 3979
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 3981
       $111 = tempRet0; //@line 3982
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 3987
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 3989
        $101 = $111; //@line 3989
        $156 = $116; //@line 3989
        $157 = $106; //@line 3989
        $158 = $107; //@line 3989
        $99 = $110; //@line 3989
       } else {
        $$275$lcssa = $108; //@line 3991
        $$lcssa = $116; //@line 3991
        $118 = $110; //@line 3991
        $120 = $111; //@line 3991
        $159 = $106; //@line 3991
        $160 = $107; //@line 3991
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 3996
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 3999
      $$lcssa = $97; //@line 3999
      $118 = $91; //@line 3999
      $120 = $92; //@line 3999
      $159 = $87; //@line 3999
      $160 = $88; //@line 3999
     }
    } while (0);
    if ($$lcssa) {
     if (($118 | 0) == 0 & ($120 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 4008
      break;
     } else {
      $123 = $120; //@line 4011
      $125 = $118; //@line 4011
     }
    } else {
     $123 = $160; //@line 4014
     $125 = $159; //@line 4014
    }
    if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 4022
     $130 = $125; //@line 4022
     $131 = $123; //@line 4022
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 4024
      $133 = tempRet0; //@line 4025
      $134 = $$37683 + -1 | 0; //@line 4026
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 4033
       $130 = $132; //@line 4033
       $131 = $133; //@line 4033
      } else {
       $$376$lcssa = $134; //@line 4035
       $141 = $132; //@line 4035
       $142 = $133; //@line 4035
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 4040
     $141 = $125; //@line 4040
     $142 = $123; //@line 4040
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 4044
     $144 = tempRet0; //@line 4045
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 4046
     $153 = $144 | tempRet0; //@line 4050
     $154 = $143 | $145; //@line 4050
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 4053
     $153 = tempRet0; //@line 4055
     $154 = $150; //@line 4055
    }
    HEAP32[tempDoublePtr >> 2] = $154; //@line 4058
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 4058
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 4059
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 4064
  $$070 = $27 / $27; //@line 4066
 }
 return +$$070;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_65($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15000
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15002
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15004
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15006
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15008
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15010
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15012
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15014
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15016
 HEAP32[$AsyncRetVal >> 2] = 0; //@line 15017
 HEAP32[$AsyncRetVal + 4 >> 2] = 0; //@line 15017
 HEAP32[$AsyncRetVal + 8 >> 2] = 0; //@line 15017
 HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 15017
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 15018
 $17 = $2 + 32 | 0; //@line 15020
 do {
  if (($AsyncRetVal | 0) == ($17 | 0)) {
   $51 = $AsyncRetVal; //@line 15024
   $53 = $AsyncRetVal; //@line 15024
  } else {
   $19 = $AsyncRetVal + 12 | 0; //@line 15026
   $20 = HEAP32[$19 >> 2] | 0; //@line 15027
   if ($20 | 0) {
    $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 15031
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 15032
    FUNCTION_TABLE_vi[$23 & 511]($AsyncRetVal); //@line 15033
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 216; //@line 15036
     $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 15037
     HEAP32[$24 >> 2] = $2; //@line 15038
     $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 15039
     HEAP32[$25 >> 2] = $4; //@line 15040
     $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 15041
     HEAP32[$26 >> 2] = $6; //@line 15042
     $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 15043
     HEAP32[$27 >> 2] = $8; //@line 15044
     $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 15045
     HEAP32[$28 >> 2] = $10; //@line 15046
     $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 15047
     HEAP32[$29 >> 2] = $12; //@line 15048
     $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 15049
     HEAP32[$30 >> 2] = $19; //@line 15050
     $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 15051
     HEAP32[$31 >> 2] = $14; //@line 15052
     $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 15053
     HEAP32[$32 >> 2] = $AsyncRetVal; //@line 15054
     $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 15055
     HEAP32[$33 >> 2] = $17; //@line 15056
     sp = STACKTOP; //@line 15057
     return;
    }
    ___async_unwind = 0; //@line 15060
    HEAP32[$ReallocAsyncCtx2 >> 2] = 216; //@line 15061
    $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 15062
    HEAP32[$24 >> 2] = $2; //@line 15063
    $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 15064
    HEAP32[$25 >> 2] = $4; //@line 15065
    $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 15066
    HEAP32[$26 >> 2] = $6; //@line 15067
    $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 15068
    HEAP32[$27 >> 2] = $8; //@line 15069
    $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 15070
    HEAP32[$28 >> 2] = $10; //@line 15071
    $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 15072
    HEAP32[$29 >> 2] = $12; //@line 15073
    $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 15074
    HEAP32[$30 >> 2] = $19; //@line 15075
    $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 15076
    HEAP32[$31 >> 2] = $14; //@line 15077
    $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 15078
    HEAP32[$32 >> 2] = $AsyncRetVal; //@line 15079
    $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 15080
    HEAP32[$33 >> 2] = $17; //@line 15081
    sp = STACKTOP; //@line 15082
    return;
   }
   $34 = $2 + 44 | 0; //@line 15085
   $35 = HEAP32[$34 >> 2] | 0; //@line 15086
   if (!$35) {
    HEAP32[$19 >> 2] = 0; //@line 15089
    $$pre = HEAP32[$14 >> 2] | 0; //@line 15090
    $51 = $$pre; //@line 15092
    $53 = $$pre; //@line 15092
    break;
   }
   $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 15096
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 15097
   FUNCTION_TABLE_vii[$38 & 7]($AsyncRetVal, $17); //@line 15098
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 15101
    $39 = $ReallocAsyncCtx3 + 4 | 0; //@line 15102
    HEAP32[$39 >> 2] = $34; //@line 15103
    $40 = $ReallocAsyncCtx3 + 8 | 0; //@line 15104
    HEAP32[$40 >> 2] = $19; //@line 15105
    $41 = $ReallocAsyncCtx3 + 12 | 0; //@line 15106
    HEAP32[$41 >> 2] = $14; //@line 15107
    $42 = $ReallocAsyncCtx3 + 16 | 0; //@line 15108
    HEAP32[$42 >> 2] = $10; //@line 15109
    $43 = $ReallocAsyncCtx3 + 20 | 0; //@line 15110
    HEAP32[$43 >> 2] = $8; //@line 15111
    $44 = $ReallocAsyncCtx3 + 24 | 0; //@line 15112
    HEAP32[$44 >> 2] = $12; //@line 15113
    $45 = $ReallocAsyncCtx3 + 28 | 0; //@line 15114
    HEAP32[$45 >> 2] = $4; //@line 15115
    $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 15116
    HEAP32[$46 >> 2] = $6; //@line 15117
    $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 15118
    HEAP32[$47 >> 2] = $2; //@line 15119
    sp = STACKTOP; //@line 15120
    return;
   }
   ___async_unwind = 0; //@line 15123
   HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 15124
   $39 = $ReallocAsyncCtx3 + 4 | 0; //@line 15125
   HEAP32[$39 >> 2] = $34; //@line 15126
   $40 = $ReallocAsyncCtx3 + 8 | 0; //@line 15127
   HEAP32[$40 >> 2] = $19; //@line 15128
   $41 = $ReallocAsyncCtx3 + 12 | 0; //@line 15129
   HEAP32[$41 >> 2] = $14; //@line 15130
   $42 = $ReallocAsyncCtx3 + 16 | 0; //@line 15131
   HEAP32[$42 >> 2] = $10; //@line 15132
   $43 = $ReallocAsyncCtx3 + 20 | 0; //@line 15133
   HEAP32[$43 >> 2] = $8; //@line 15134
   $44 = $ReallocAsyncCtx3 + 24 | 0; //@line 15135
   HEAP32[$44 >> 2] = $12; //@line 15136
   $45 = $ReallocAsyncCtx3 + 28 | 0; //@line 15137
   HEAP32[$45 >> 2] = $4; //@line 15138
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 15139
   HEAP32[$46 >> 2] = $6; //@line 15140
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 15141
   HEAP32[$47 >> 2] = $2; //@line 15142
   sp = STACKTOP; //@line 15143
   return;
  }
 } while (0);
 HEAP32[$51 + 16 >> 2] = HEAP32[$10 >> 2]; //@line 15149
 HEAP32[$8 + 8 >> 2] = 0; //@line 15151
 HEAP32[$8 >> 2] = 218; //@line 15152
 HEAP32[$8 + 4 >> 2] = $53; //@line 15154
 $54 = $8 + 12 | 0; //@line 15155
 HEAP32[$54 >> 2] = 724; //@line 15156
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 15157
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $8); //@line 15158
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 219; //@line 15161
  $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 15162
  HEAP32[$55 >> 2] = $54; //@line 15163
  $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 15164
  HEAP32[$56 >> 2] = $4; //@line 15165
  $57 = $ReallocAsyncCtx10 + 12 | 0; //@line 15166
  HEAP32[$57 >> 2] = $6; //@line 15167
  $58 = $ReallocAsyncCtx10 + 16 | 0; //@line 15168
  HEAP32[$58 >> 2] = $8; //@line 15169
  $59 = $ReallocAsyncCtx10 + 20 | 0; //@line 15170
  HEAP32[$59 >> 2] = $2; //@line 15171
  sp = STACKTOP; //@line 15172
  return;
 }
 ___async_unwind = 0; //@line 15175
 HEAP32[$ReallocAsyncCtx10 >> 2] = 219; //@line 15176
 $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 15177
 HEAP32[$55 >> 2] = $54; //@line 15178
 $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 15179
 HEAP32[$56 >> 2] = $4; //@line 15180
 $57 = $ReallocAsyncCtx10 + 12 | 0; //@line 15181
 HEAP32[$57 >> 2] = $6; //@line 15182
 $58 = $ReallocAsyncCtx10 + 16 | 0; //@line 15183
 HEAP32[$58 >> 2] = $8; //@line 15184
 $59 = $ReallocAsyncCtx10 + 20 | 0; //@line 15185
 HEAP32[$59 >> 2] = $2; //@line 15186
 sp = STACKTOP; //@line 15187
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_194($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1169
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1171
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1173
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1175
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1177
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1179
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1181
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1183
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1185
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1187
 $19 = $8 + 12 | 0; //@line 1188
 $20 = HEAP32[$19 >> 2] | 0; //@line 1189
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 1193
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 1194
  FUNCTION_TABLE_vii[$23 & 7]($6, $8); //@line 1195
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 104; //@line 1198
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 1199
   HEAP32[$24 >> 2] = $2; //@line 1200
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 1201
   HEAP32[$25 >> 2] = $4; //@line 1202
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 1203
   HEAP32[$26 >> 2] = $19; //@line 1204
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 1205
   HEAP32[$27 >> 2] = $6; //@line 1206
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 1207
   HEAP32[$28 >> 2] = $10; //@line 1208
   $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 1209
   HEAP32[$29 >> 2] = $12; //@line 1210
   $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 1211
   HEAP32[$30 >> 2] = $14; //@line 1212
   $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 1213
   HEAP32[$31 >> 2] = $16; //@line 1214
   $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 1215
   HEAP32[$32 >> 2] = $18; //@line 1216
   sp = STACKTOP; //@line 1217
   return;
  }
  ___async_unwind = 0; //@line 1220
  HEAP32[$ReallocAsyncCtx4 >> 2] = 104; //@line 1221
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 1222
  HEAP32[$24 >> 2] = $2; //@line 1223
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 1224
  HEAP32[$25 >> 2] = $4; //@line 1225
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 1226
  HEAP32[$26 >> 2] = $19; //@line 1227
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 1228
  HEAP32[$27 >> 2] = $6; //@line 1229
  $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 1230
  HEAP32[$28 >> 2] = $10; //@line 1231
  $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 1232
  HEAP32[$29 >> 2] = $12; //@line 1233
  $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 1234
  HEAP32[$30 >> 2] = $14; //@line 1235
  $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 1236
  HEAP32[$31 >> 2] = $16; //@line 1237
  $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 1238
  HEAP32[$32 >> 2] = $18; //@line 1239
  sp = STACKTOP; //@line 1240
  return;
 }
 $33 = $6 + 12 | 0; //@line 1243
 HEAP32[$33 >> 2] = 0; //@line 1244
 $34 = $10 + 12 | 0; //@line 1245
 $35 = HEAP32[$34 >> 2] | 0; //@line 1246
 if (!$35) {
  $48 = $12 + 12 | 0; //@line 1249
  HEAP32[$48 >> 2] = 0; //@line 1250
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 1251
  $49 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $6, $12, $18) | 0; //@line 1252
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 106; //@line 1255
   $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 1256
   HEAP32[$50 >> 2] = $48; //@line 1257
   $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 1258
   HEAP32[$51 >> 2] = $33; //@line 1259
   $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 1260
   HEAP32[$52 >> 2] = $12; //@line 1261
   $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 1262
   HEAP32[$53 >> 2] = $34; //@line 1263
   $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 1264
   HEAP32[$54 >> 2] = $6; //@line 1265
   $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 1266
   HEAP32[$55 >> 2] = $4; //@line 1267
   $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 1268
   HEAP32[$56 >> 2] = $2; //@line 1269
   sp = STACKTOP; //@line 1270
   return;
  }
  HEAP32[___async_retval >> 2] = $49; //@line 1274
  ___async_unwind = 0; //@line 1275
  HEAP32[$ReallocAsyncCtx9 >> 2] = 106; //@line 1276
  $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 1277
  HEAP32[$50 >> 2] = $48; //@line 1278
  $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 1279
  HEAP32[$51 >> 2] = $33; //@line 1280
  $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 1281
  HEAP32[$52 >> 2] = $12; //@line 1282
  $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 1283
  HEAP32[$53 >> 2] = $34; //@line 1284
  $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 1285
  HEAP32[$54 >> 2] = $6; //@line 1286
  $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 1287
  HEAP32[$55 >> 2] = $4; //@line 1288
  $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 1289
  HEAP32[$56 >> 2] = $2; //@line 1290
  sp = STACKTOP; //@line 1291
  return;
 } else {
  $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 1295
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 1296
  FUNCTION_TABLE_vii[$38 & 7]($12, $4); //@line 1297
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 105; //@line 1300
   $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 1301
   HEAP32[$39 >> 2] = $34; //@line 1302
   $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 1303
   HEAP32[$40 >> 2] = $2; //@line 1304
   $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 1305
   HEAP32[$41 >> 2] = $4; //@line 1306
   $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 1307
   HEAP32[$42 >> 2] = $6; //@line 1308
   $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 1309
   HEAP32[$43 >> 2] = $33; //@line 1310
   $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 1311
   HEAP32[$44 >> 2] = $12; //@line 1312
   $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 1313
   HEAP32[$45 >> 2] = $14; //@line 1314
   $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 1315
   HEAP32[$46 >> 2] = $16; //@line 1316
   $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 1317
   HEAP32[$47 >> 2] = $18; //@line 1318
   sp = STACKTOP; //@line 1319
   return;
  }
  ___async_unwind = 0; //@line 1322
  HEAP32[$ReallocAsyncCtx5 >> 2] = 105; //@line 1323
  $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 1324
  HEAP32[$39 >> 2] = $34; //@line 1325
  $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 1326
  HEAP32[$40 >> 2] = $2; //@line 1327
  $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 1328
  HEAP32[$41 >> 2] = $4; //@line 1329
  $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 1330
  HEAP32[$42 >> 2] = $6; //@line 1331
  $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 1332
  HEAP32[$43 >> 2] = $33; //@line 1333
  $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 1334
  HEAP32[$44 >> 2] = $12; //@line 1335
  $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 1336
  HEAP32[$45 >> 2] = $14; //@line 1337
  $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 1338
  HEAP32[$46 >> 2] = $16; //@line 1339
  $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 1340
  HEAP32[$47 >> 2] = $18; //@line 1341
  sp = STACKTOP; //@line 1342
  return;
 }
}
function __Z17recv_coap_messagev__async_cb_10($0) {
 $0 = $0 | 0;
 var $$017$i$i = 0, $$pre$phi23Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10977
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10979
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10981
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10983
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10985
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10987
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10989
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10991
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10993
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10995
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10997
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10999
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11001
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11003
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11005
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11007
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11009
 $33 = HEAP32[$AsyncRetVal + 36 >> 2] | 0; //@line 11011
 $34 = $AsyncRetVal + 24 | 0; //@line 11012
 $35 = HEAP16[$34 >> 1] | 0; //@line 11013
 $36 = $35 & 65535; //@line 11014
 HEAP32[$2 >> 2] = 0; //@line 11015
 HEAP32[$2 + 4 >> 2] = 0; //@line 11015
 HEAP32[$2 + 8 >> 2] = 0; //@line 11015
 if (($35 & 65535) >= 11) {
  $39 = $36 + 16 & 131056; //@line 11019
  $ReallocAsyncCtx = _emscripten_realloc_async_context(88) | 0; //@line 11020
  $40 = __Znwj($39) | 0; //@line 11021
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 297; //@line 11024
   $41 = $ReallocAsyncCtx + 4 | 0; //@line 11025
   HEAP32[$41 >> 2] = $2; //@line 11026
   $42 = $ReallocAsyncCtx + 8 | 0; //@line 11027
   HEAP32[$42 >> 2] = $39; //@line 11028
   $43 = $ReallocAsyncCtx + 12 | 0; //@line 11029
   HEAP32[$43 >> 2] = $36; //@line 11030
   $44 = $ReallocAsyncCtx + 16 | 0; //@line 11031
   HEAP32[$44 >> 2] = $33; //@line 11032
   $45 = $ReallocAsyncCtx + 20 | 0; //@line 11033
   HEAP32[$45 >> 2] = $AsyncRetVal; //@line 11034
   $46 = $ReallocAsyncCtx + 24 | 0; //@line 11035
   HEAP32[$46 >> 2] = $4; //@line 11036
   $47 = $ReallocAsyncCtx + 28 | 0; //@line 11037
   HEAP32[$47 >> 2] = $6; //@line 11038
   $48 = $ReallocAsyncCtx + 32 | 0; //@line 11039
   HEAP32[$48 >> 2] = $8; //@line 11040
   $49 = $ReallocAsyncCtx + 36 | 0; //@line 11041
   HEAP32[$49 >> 2] = $10; //@line 11042
   $50 = $ReallocAsyncCtx + 40 | 0; //@line 11043
   HEAP32[$50 >> 2] = $12; //@line 11044
   $51 = $ReallocAsyncCtx + 44 | 0; //@line 11045
   HEAP32[$51 >> 2] = $14; //@line 11046
   $52 = $ReallocAsyncCtx + 48 | 0; //@line 11047
   HEAP32[$52 >> 2] = $34; //@line 11048
   $53 = $ReallocAsyncCtx + 52 | 0; //@line 11049
   HEAP32[$53 >> 2] = $16; //@line 11050
   $54 = $ReallocAsyncCtx + 56 | 0; //@line 11051
   HEAP32[$54 >> 2] = $18; //@line 11052
   $55 = $ReallocAsyncCtx + 60 | 0; //@line 11053
   HEAP32[$55 >> 2] = $2; //@line 11054
   $56 = $ReallocAsyncCtx + 64 | 0; //@line 11055
   HEAP32[$56 >> 2] = $20; //@line 11056
   $57 = $ReallocAsyncCtx + 68 | 0; //@line 11057
   HEAP32[$57 >> 2] = $22; //@line 11058
   $58 = $ReallocAsyncCtx + 72 | 0; //@line 11059
   HEAP32[$58 >> 2] = $24; //@line 11060
   $59 = $ReallocAsyncCtx + 76 | 0; //@line 11061
   HEAP32[$59 >> 2] = $26; //@line 11062
   $60 = $ReallocAsyncCtx + 80 | 0; //@line 11063
   HEAP32[$60 >> 2] = $28; //@line 11064
   $61 = $ReallocAsyncCtx + 84 | 0; //@line 11065
   HEAP32[$61 >> 2] = $30; //@line 11066
   sp = STACKTOP; //@line 11067
   return;
  }
  HEAP32[___async_retval >> 2] = $40; //@line 11071
  ___async_unwind = 0; //@line 11072
  HEAP32[$ReallocAsyncCtx >> 2] = 297; //@line 11073
  $41 = $ReallocAsyncCtx + 4 | 0; //@line 11074
  HEAP32[$41 >> 2] = $2; //@line 11075
  $42 = $ReallocAsyncCtx + 8 | 0; //@line 11076
  HEAP32[$42 >> 2] = $39; //@line 11077
  $43 = $ReallocAsyncCtx + 12 | 0; //@line 11078
  HEAP32[$43 >> 2] = $36; //@line 11079
  $44 = $ReallocAsyncCtx + 16 | 0; //@line 11080
  HEAP32[$44 >> 2] = $33; //@line 11081
  $45 = $ReallocAsyncCtx + 20 | 0; //@line 11082
  HEAP32[$45 >> 2] = $AsyncRetVal; //@line 11083
  $46 = $ReallocAsyncCtx + 24 | 0; //@line 11084
  HEAP32[$46 >> 2] = $4; //@line 11085
  $47 = $ReallocAsyncCtx + 28 | 0; //@line 11086
  HEAP32[$47 >> 2] = $6; //@line 11087
  $48 = $ReallocAsyncCtx + 32 | 0; //@line 11088
  HEAP32[$48 >> 2] = $8; //@line 11089
  $49 = $ReallocAsyncCtx + 36 | 0; //@line 11090
  HEAP32[$49 >> 2] = $10; //@line 11091
  $50 = $ReallocAsyncCtx + 40 | 0; //@line 11092
  HEAP32[$50 >> 2] = $12; //@line 11093
  $51 = $ReallocAsyncCtx + 44 | 0; //@line 11094
  HEAP32[$51 >> 2] = $14; //@line 11095
  $52 = $ReallocAsyncCtx + 48 | 0; //@line 11096
  HEAP32[$52 >> 2] = $34; //@line 11097
  $53 = $ReallocAsyncCtx + 52 | 0; //@line 11098
  HEAP32[$53 >> 2] = $16; //@line 11099
  $54 = $ReallocAsyncCtx + 56 | 0; //@line 11100
  HEAP32[$54 >> 2] = $18; //@line 11101
  $55 = $ReallocAsyncCtx + 60 | 0; //@line 11102
  HEAP32[$55 >> 2] = $2; //@line 11103
  $56 = $ReallocAsyncCtx + 64 | 0; //@line 11104
  HEAP32[$56 >> 2] = $20; //@line 11105
  $57 = $ReallocAsyncCtx + 68 | 0; //@line 11106
  HEAP32[$57 >> 2] = $22; //@line 11107
  $58 = $ReallocAsyncCtx + 72 | 0; //@line 11108
  HEAP32[$58 >> 2] = $24; //@line 11109
  $59 = $ReallocAsyncCtx + 76 | 0; //@line 11110
  HEAP32[$59 >> 2] = $26; //@line 11111
  $60 = $ReallocAsyncCtx + 80 | 0; //@line 11112
  HEAP32[$60 >> 2] = $28; //@line 11113
  $61 = $ReallocAsyncCtx + 84 | 0; //@line 11114
  HEAP32[$61 >> 2] = $30; //@line 11115
  sp = STACKTOP; //@line 11116
  return;
 }
 $64 = $2 + 11 | 0; //@line 11120
 HEAP8[$64 >> 0] = $35; //@line 11121
 if (!($35 << 16 >> 16)) {
  $$017$i$i = $2; //@line 11124
  $$pre$phi23Z2D = $64; //@line 11124
 } else {
  _memcpy($2 | 0, $33 | 0, $36 | 0) | 0; //@line 11126
  $$017$i$i = $2; //@line 11127
  $$pre$phi23Z2D = $64; //@line 11127
 }
 HEAP8[$$017$i$i + $36 >> 0] = 0; //@line 11130
 HEAP32[$4 >> 2] = HEAPU16[$AsyncRetVal + 20 >> 1]; //@line 11134
 _printf(6169, $4) | 0; //@line 11135
 HEAP32[$8 >> 2] = HEAP32[$AsyncRetVal + 8 >> 2]; //@line 11138
 _printf(6192, $8) | 0; //@line 11139
 HEAP32[$12 >> 2] = HEAP32[$AsyncRetVal + 16 >> 2]; //@line 11142
 _printf(6215, $12) | 0; //@line 11143
 HEAP32[$16 >> 2] = HEAPU16[$34 >> 1]; //@line 11146
 _printf(6238, $16) | 0; //@line 11147
 HEAP32[$20 >> 2] = (HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2; //@line 11152
 _printf(6261, $20) | 0; //@line 11153
 HEAP32[$24 >> 2] = HEAP32[$AsyncRetVal + 40 >> 2]; //@line 11156
 _printf(6284, $24) | 0; //@line 11157
 if ((HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 11162
 }
 _free($28); //@line 11164
 return;
}
function _main() {
 var $$0 = 0, $0 = 0, $12 = 0, $13 = 0, $19 = 0, $25 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 19839
 STACKTOP = STACKTOP + 880 | 0; //@line 19840
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(880); //@line 19840
 $vararg_buffer1 = sp + 8 | 0; //@line 19841
 $vararg_buffer = sp; //@line 19842
 $0 = sp + 16 | 0; //@line 19843
 __ZN17EthernetInterfaceC2Ev($0); //@line 19844
 if (__ZN17EthernetInterface7connectEv($0) | 0) {
  $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19848
  _puts(6339) | 0; //@line 19849
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 298; //@line 19852
   HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 19854
   sp = STACKTOP; //@line 19855
   STACKTOP = sp; //@line 19856
   return 0; //@line 19856
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 19858
  $$0 = 1; //@line 19859
  STACKTOP = sp; //@line 19860
  return $$0 | 0; //@line 19860
 }
 $AsyncCtx13 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19862
 _puts(6388) | 0; //@line 19863
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 299; //@line 19866
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 19868
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 19870
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 19872
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 19874
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 19876
  HEAP32[$AsyncCtx13 + 24 >> 2] = $0; //@line 19878
  sp = STACKTOP; //@line 19879
  STACKTOP = sp; //@line 19880
  return 0; //@line 19880
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 19882
 $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 19885
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 19886
 $13 = FUNCTION_TABLE_ii[$12 & 31]($0) | 0; //@line 19887
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 300; //@line 19890
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 19892
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 19894
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 19896
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 19898
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 19900
  sp = STACKTOP; //@line 19901
  STACKTOP = sp; //@line 19902
  return 0; //@line 19902
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19904
 $19 = __Z18nsapi_create_stackP12NetworkStack($13) | 0; //@line 19905
 $AsyncCtx24 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19906
 __ZN6Socket4openEP12NetworkStack(10104, $19) | 0; //@line 19907
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 301; //@line 19910
  HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer; //@line 19912
  HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer; //@line 19914
  HEAP32[$AsyncCtx24 + 12 >> 2] = $vararg_buffer1; //@line 19916
  HEAP32[$AsyncCtx24 + 16 >> 2] = $vararg_buffer1; //@line 19918
  HEAP32[$AsyncCtx24 + 20 >> 2] = $0; //@line 19920
  sp = STACKTOP; //@line 19921
  STACKTOP = sp; //@line 19922
  return 0; //@line 19922
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 19924
 $AsyncCtx27 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19925
 $25 = _sn_coap_protocol_init(18, 302, 12, 17) | 0; //@line 19926
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 303; //@line 19929
  HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer; //@line 19931
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 19933
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 19935
  HEAP32[$AsyncCtx27 + 16 >> 2] = $vararg_buffer1; //@line 19937
  HEAP32[$AsyncCtx27 + 20 >> 2] = $0; //@line 19939
  sp = STACKTOP; //@line 19940
  STACKTOP = sp; //@line 19941
  return 0; //@line 19941
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 19943
 HEAP32[2540] = $25; //@line 19944
 $31 = _calloc(44, 1) | 0; //@line 19945
 HEAP32[$31 + 32 >> 2] = 6434; //@line 19947
 HEAP16[$31 + 22 >> 1] = 6; //@line 19949
 HEAP32[$31 + 8 >> 2] = 1; //@line 19951
 HEAP16[$31 + 20 >> 1] = 7; //@line 19953
 $37 = (_sn_coap_builder_calc_needed_packet_data_size($31) | 0) & 65535; //@line 19955
 HEAP32[$vararg_buffer >> 2] = $37; //@line 19956
 _printf(6441, $vararg_buffer) | 0; //@line 19957
 $38 = _malloc($37) | 0; //@line 19958
 _sn_coap_builder($38, $31) | 0; //@line 19959
 $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19960
 $39 = __ZN9UDPSocket6sendtoEPKctPKvj(10104, 6478, 5683, $38, $37) | 0; //@line 19961
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 304; //@line 19964
  HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 19966
  HEAP32[$AsyncCtx20 + 8 >> 2] = $vararg_buffer1; //@line 19968
  HEAP32[$AsyncCtx20 + 12 >> 2] = $31; //@line 19970
  HEAP32[$AsyncCtx20 + 16 >> 2] = $38; //@line 19972
  HEAP32[$AsyncCtx20 + 20 >> 2] = $0; //@line 19974
  sp = STACKTOP; //@line 19975
  STACKTOP = sp; //@line 19976
  return 0; //@line 19976
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 19978
 HEAP32[$vararg_buffer1 >> 2] = $39; //@line 19979
 HEAP32[$vararg_buffer1 + 4 >> 2] = 6434; //@line 19981
 _printf(6486, $vararg_buffer1) | 0; //@line 19982
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19983
 __Z17recv_coap_messagev(); //@line 19984
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 305; //@line 19987
  HEAP32[$AsyncCtx6 + 4 >> 2] = $31; //@line 19989
  HEAP32[$AsyncCtx6 + 8 >> 2] = $38; //@line 19991
  HEAP32[$AsyncCtx6 + 12 >> 2] = $0; //@line 19993
  sp = STACKTOP; //@line 19994
  STACKTOP = sp; //@line 19995
  return 0; //@line 19995
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 19997
 _free($31); //@line 19998
 _free($38); //@line 19999
 $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20000
 _puts(6534) | 0; //@line 20001
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 306; //@line 20004
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 20006
  sp = STACKTOP; //@line 20007
  STACKTOP = sp; //@line 20008
  return 0; //@line 20008
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 20010
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20011
 _wait(4294967296.0); //@line 20012
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 307; //@line 20015
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 20017
  sp = STACKTOP; //@line 20018
  STACKTOP = sp; //@line 20019
  return 0; //@line 20019
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 20021
 $$0 = 0; //@line 20022
 STACKTOP = sp; //@line 20023
 return $$0 | 0; //@line 20023
}
function __ZN6Socket4openEP12NetworkStack($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10599
 STACKTOP = STACKTOP + 32 | 0; //@line 10600
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10600
 $2 = sp + 16 | 0; //@line 10601
 $3 = sp; //@line 10602
 $4 = $0 + 4 | 0; //@line 10603
 if (($1 | 0) == 0 | (HEAP32[$4 >> 2] | 0) != 0) {
  $$1 = -3003; //@line 10609
  STACKTOP = sp; //@line 10610
  return $$1 | 0; //@line 10610
 }
 HEAP32[$4 >> 2] = $1; //@line 10612
 $10 = HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0; //@line 10615
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 10618
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 10619
 $14 = FUNCTION_TABLE_ii[$13 & 31]($0) | 0; //@line 10620
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 130; //@line 10623
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10625
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 10627
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 10629
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 10631
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 10633
  HEAP32[$AsyncCtx + 24 >> 2] = $10; //@line 10635
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 10637
  sp = STACKTOP; //@line 10638
  STACKTOP = sp; //@line 10639
  return 0; //@line 10639
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10641
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10642
 $22 = FUNCTION_TABLE_iiii[$10 & 31]($1, $2, $14) | 0; //@line 10643
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 131; //@line 10646
  HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 10648
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10650
  HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 10652
  HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 10654
  HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 10656
  sp = STACKTOP; //@line 10657
  STACKTOP = sp; //@line 10658
  return 0; //@line 10658
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10660
 do {
  if (!$22) {
   $30 = $0 + 8 | 0; //@line 10665
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 10666
   $31 = $3 + 12 | 0; //@line 10667
   HEAP32[$3 >> 2] = 12; //@line 10668
   HEAP32[$3 + 4 >> 2] = 1; //@line 10670
   HEAP32[$3 + 8 >> 2] = $0; //@line 10672
   HEAP32[$31 >> 2] = 572; //@line 10673
   $32 = $0 + 16 | 0; //@line 10674
   do {
    if (($32 | 0) == ($3 | 0)) {
     $60 = 572; //@line 10678
     label = 16; //@line 10679
    } else {
     $34 = $0 + 28 | 0; //@line 10681
     $35 = HEAP32[$34 >> 2] | 0; //@line 10682
     if (!$35) {
      $48 = 572; //@line 10685
     } else {
      $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 10688
      $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10689
      FUNCTION_TABLE_vi[$38 & 511]($32); //@line 10690
      if (___async) {
       HEAP32[$AsyncCtx5 >> 2] = 132; //@line 10693
       HEAP32[$AsyncCtx5 + 4 >> 2] = $31; //@line 10695
       HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 10697
       HEAP32[$AsyncCtx5 + 12 >> 2] = $32; //@line 10699
       HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 10701
       HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 10703
       HEAP32[$AsyncCtx5 + 24 >> 2] = $30; //@line 10705
       HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 10707
       sp = STACKTOP; //@line 10708
       STACKTOP = sp; //@line 10709
       return 0; //@line 10709
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10711
      $$pre = HEAP32[$31 >> 2] | 0; //@line 10712
      if (!$$pre) {
       HEAP32[$34 >> 2] = 0; //@line 10715
       break;
      } else {
       $48 = $$pre; //@line 10718
      }
     }
     $49 = HEAP32[$48 + 4 >> 2] | 0; //@line 10722
     $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10723
     FUNCTION_TABLE_vii[$49 & 7]($32, $3); //@line 10724
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 133; //@line 10727
      HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 10729
      HEAP32[$AsyncCtx8 + 8 >> 2] = $34; //@line 10731
      HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 10733
      HEAP32[$AsyncCtx8 + 16 >> 2] = $4; //@line 10735
      HEAP32[$AsyncCtx8 + 20 >> 2] = $30; //@line 10737
      HEAP32[$AsyncCtx8 + 24 >> 2] = $32; //@line 10739
      HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 10741
      sp = STACKTOP; //@line 10742
      STACKTOP = sp; //@line 10743
      return 0; //@line 10743
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10745
      $$pre$i$i = HEAP32[$31 >> 2] | 0; //@line 10746
      HEAP32[$34 >> 2] = $$pre$i$i; //@line 10748
      if (!$$pre$i$i) {
       break;
      } else {
       $60 = $$pre$i$i; //@line 10753
       label = 16; //@line 10754
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 16) {
     $61 = HEAP32[$60 + 8 >> 2] | 0; //@line 10763
     $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10764
     FUNCTION_TABLE_vi[$61 & 511]($3); //@line 10765
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 134; //@line 10768
      HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 10770
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 10772
      HEAP32[$AsyncCtx11 + 12 >> 2] = $30; //@line 10774
      HEAP32[$AsyncCtx11 + 16 >> 2] = $32; //@line 10776
      HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 10778
      sp = STACKTOP; //@line 10779
      STACKTOP = sp; //@line 10780
      return 0; //@line 10780
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10782
      break;
     }
    }
   } while (0);
   $67 = HEAP32[$4 >> 2] | 0; //@line 10787
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 84 >> 2] | 0; //@line 10790
   $71 = HEAP32[$30 >> 2] | 0; //@line 10791
   $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10792
   FUNCTION_TABLE_viiii[$70 & 7]($67, $71, 135, $32); //@line 10793
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 136; //@line 10796
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 10798
    sp = STACKTOP; //@line 10799
    STACKTOP = sp; //@line 10800
    return 0; //@line 10800
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 10802
    $$0 = 0; //@line 10803
    break;
   }
  } else {
   $$0 = $22; //@line 10807
  }
 } while (0);
 $$1 = $$0; //@line 10810
 STACKTOP = sp; //@line 10811
 return $$1 | 0; //@line 10811
}
function _sn_coap_parser_options_parse_multiple_options__async_cb($0) {
 $0 = $0 | 0;
 var $$06378 = 0, $$06378$us = 0, $$064 = 0, $$065$be$in = 0, $$065$be$us$in = 0, $$06577 = 0, $$06577$us = 0, $$080 = 0, $$080$us = 0, $$1 = 0, $$1$us = 0, $$sink = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $100 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $28 = 0, $30 = 0, $33 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $47 = 0, $56 = 0, $6 = 0, $61 = 0, $65 = 0, $67 = 0, $70 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $84 = 0, $89 = 0, $91 = 0, $AsyncRetVal = 0, $trunc = 0, $trunc110 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29156
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 29158
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29160
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29162
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29164
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 29168
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29170
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29172
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29174
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29176
 HEAP32[$18 >> 2] = $AsyncRetVal; //@line 29177
 if (!$AsyncRetVal) {
  _mbed_tracef(2, 3844, 5600, $10); //@line 29180
  $$064 = -1; //@line 29181
  $100 = ___async_retval; //@line 29182
  HEAP8[$100 >> 0] = $$064; //@line 29183
  return;
 }
 HEAP16[$16 >> 1] = $14; //@line 29186
 $23 = HEAP32[$18 >> 2] | 0; //@line 29187
 if (($20 | 0) <= 0) {
  $$064 = 0; //@line 29190
  $100 = ___async_retval; //@line 29191
  HEAP8[$100 >> 0] = $$064; //@line 29192
  return;
 }
 if (($2 | 0) == 20) {
  $$06378$us = $23; //@line 29197
  $$06577$us = $4; //@line 29197
  $$080$us = 0; //@line 29197
  while (1) {
   if (!($$080$us << 24 >> 24)) {
    $$1$us = $$06378$us; //@line 29201
   } else {
    HEAP8[$$06378$us >> 0] = 38; //@line 29203
    $$1$us = $$06378$us + 1 | 0; //@line 29205
   }
   $28 = $$080$us + 1 << 24 >> 24; //@line 29207
   $30 = (HEAP32[$6 >> 2] | 0) + 1 | 0; //@line 29209
   HEAP32[$6 >> 2] = $30; //@line 29210
   $33 = $$06577$us & 65535; //@line 29213
   if (($$1$us + $33 - (HEAP32[$18 >> 2] | 0) | 0) > ($8 | 0)) {
    $$064 = -1; //@line 29218
    label = 29; //@line 29219
    break;
   }
   _memcpy($$1$us | 0, $30 | 0, $33 | 0) | 0; //@line 29222
   $38 = (HEAP32[$6 >> 2] | 0) + $33 | 0; //@line 29224
   HEAP32[$6 >> 2] = $38; //@line 29225
   $$06378$us = $$1$us + $33 | 0; //@line 29226
   $40 = HEAP32[$18 >> 2] | 0; //@line 29227
   $41 = $$06378$us; //@line 29228
   if (($41 - $40 | 0) >= ($8 | 0)) {
    $$064 = $28; //@line 29232
    label = 29; //@line 29233
    break;
   }
   $trunc110 = HEAP8[$38 >> 0] | 0; //@line 29236
   $44 = $trunc110 & 255; //@line 29237
   if ($44 & 240 | 0) {
    $$064 = $28; //@line 29241
    label = 29; //@line 29242
    break;
   }
   switch ($trunc110 & 15) {
   case 13:
    {
     $56 = $38 + 1 | 0; //@line 29249
     $$sink87 = $56; //@line 29253
     $$sink88 = (HEAPU8[$56 >> 0] | 0) + 13 | 0; //@line 29253
     label = 14; //@line 29254
     break;
    }
   case 14:
    {
     $47 = $38 + 2 | 0; //@line 29258
     $$sink87 = $47; //@line 29267
     $$sink88 = (HEAPU8[$47 >> 0] | 0) + 269 + ((HEAPU8[$38 + 1 >> 0] | 0) << 8) | 0; //@line 29267
     label = 14; //@line 29268
     break;
    }
   default:
    {
     $$065$be$us$in = $44 & 15; //@line 29272
     $61 = $40; //@line 29272
    }
   }
   if ((label | 0) == 14) {
    label = 0; //@line 29276
    HEAP32[$6 >> 2] = $$sink87; //@line 29277
    $$065$be$us$in = $$sink88; //@line 29279
    $61 = HEAP32[$18 >> 2] | 0; //@line 29279
   }
   if (($41 - $61 | 0) >= ($8 | 0)) {
    $$064 = $28; //@line 29287
    label = 29; //@line 29288
    break;
   } else {
    $$06577$us = $$065$be$us$in & 65535; //@line 29285
    $$080$us = $28; //@line 29285
   }
  }
  if ((label | 0) == 29) {
   $100 = ___async_retval; //@line 29293
   HEAP8[$100 >> 0] = $$064; //@line 29294
   return;
  }
 } else {
  $$06378 = $23; //@line 29298
  $$06577 = $4; //@line 29298
  $$080 = 0; //@line 29298
 }
 while (1) {
  if (!($$080 << 24 >> 24)) {
   $$1 = $$06378; //@line 29303
  } else {
   switch ($2 | 0) {
   case 4:
   case 15:
   case 17:
   case 20:
    {
     $$sink = 38; //@line 29307
     label = 19; //@line 29308
     break;
    }
   case 8:
   case 11:
    {
     $$sink = 47; //@line 29312
     label = 19; //@line 29313
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 19) {
    label = 0; //@line 29320
    HEAP8[$$06378 >> 0] = $$sink; //@line 29321
   }
   $$1 = $$06378 + 1 | 0; //@line 29324
  }
  $65 = $$080 + 1 << 24 >> 24; //@line 29326
  $67 = (HEAP32[$6 >> 2] | 0) + 1 | 0; //@line 29328
  HEAP32[$6 >> 2] = $67; //@line 29329
  $70 = $$06577 & 65535; //@line 29332
  if (($$1 + $70 - (HEAP32[$18 >> 2] | 0) | 0) > ($8 | 0)) {
   $$064 = -1; //@line 29337
   label = 29; //@line 29338
   break;
  }
  _memcpy($$1 | 0, $67 | 0, $70 | 0) | 0; //@line 29341
  $75 = (HEAP32[$6 >> 2] | 0) + $70 | 0; //@line 29343
  HEAP32[$6 >> 2] = $75; //@line 29344
  $$06378 = $$1 + $70 | 0; //@line 29345
  $77 = HEAP32[$18 >> 2] | 0; //@line 29346
  $78 = $$06378; //@line 29347
  if (($78 - $77 | 0) >= ($8 | 0)) {
   $$064 = $65; //@line 29351
   label = 29; //@line 29352
   break;
  }
  $trunc = HEAP8[$75 >> 0] | 0; //@line 29355
  $81 = $trunc & 255; //@line 29356
  if ($81 & 240 | 0) {
   $$064 = $65; //@line 29360
   label = 29; //@line 29361
   break;
  }
  switch ($trunc & 15) {
  case 13:
   {
    $84 = $75 + 1 | 0; //@line 29368
    $$sink89 = $84; //@line 29372
    $$sink90 = (HEAPU8[$84 >> 0] | 0) + 13 | 0; //@line 29372
    label = 26; //@line 29373
    break;
   }
  case 14:
   {
    $91 = $75 + 2 | 0; //@line 29377
    $$sink89 = $91; //@line 29386
    $$sink90 = (HEAPU8[$91 >> 0] | 0) + 269 + ((HEAPU8[$75 + 1 >> 0] | 0) << 8) | 0; //@line 29386
    label = 26; //@line 29387
    break;
   }
  default:
   {
    $$065$be$in = $81 & 15; //@line 29391
    $89 = $77; //@line 29391
   }
  }
  if ((label | 0) == 26) {
   label = 0; //@line 29395
   HEAP32[$6 >> 2] = $$sink89; //@line 29396
   $$065$be$in = $$sink90; //@line 29398
   $89 = HEAP32[$18 >> 2] | 0; //@line 29398
  }
  if (($78 - $89 | 0) >= ($8 | 0)) {
   $$064 = $65; //@line 29406
   label = 29; //@line 29407
   break;
  } else {
   $$06577 = $$065$be$in & 65535; //@line 29404
   $$080 = $65; //@line 29404
  }
 }
 if ((label | 0) == 29) {
  $100 = ___async_retval; //@line 29412
  HEAP8[$100 >> 0] = $$064; //@line 29413
  return;
 }
}
function __ZL15ipv6_scan_chunkPtPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$ph = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $$124$4 = 0, $$124$5 = 0, $$124$6 = 0, $$124$7 = 0, $$2 = 0, $17 = 0, $2 = 0, $26 = 0, $35 = 0, $44 = 0, $53 = 0, $62 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 11449
 STACKTOP = STACKTOP + 64 | 0; //@line 11450
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 11450
 $vararg_buffer19 = sp + 56 | 0; //@line 11451
 $vararg_buffer16 = sp + 48 | 0; //@line 11452
 $vararg_buffer13 = sp + 40 | 0; //@line 11453
 $vararg_buffer10 = sp + 32 | 0; //@line 11454
 $vararg_buffer7 = sp + 24 | 0; //@line 11455
 $vararg_buffer4 = sp + 16 | 0; //@line 11456
 $vararg_buffer1 = sp + 8 | 0; //@line 11457
 $vararg_buffer = sp; //@line 11458
 $2 = sp + 60 | 0; //@line 11459
 HEAP32[$vararg_buffer >> 2] = $2; //@line 11460
 L1 : do {
  if ((_sscanf($1, 5841, $vararg_buffer) | 0) < 1) {
   $$1$ph = 0; //@line 11465
  } else {
   HEAP16[$0 >> 1] = HEAP16[$2 >> 1] | 0; //@line 11468
   $$124 = 0; //@line 11469
   L3 : while (1) {
    switch (HEAP8[$1 + $$124 >> 0] | 0) {
    case 0:
     {
      $$1$ph = 1; //@line 11475
      break L1;
      break;
     }
    case 58:
     {
      break L3;
      break;
     }
    default:
     {}
    }
    $$124 = $$124 + 1 | 0; //@line 11487
   }
   $9 = $$124 + 1 | 0; //@line 11489
   HEAP32[$vararg_buffer1 >> 2] = $2; //@line 11491
   if ((_sscanf($1 + $9 | 0, 5841, $vararg_buffer1) | 0) < 1) {
    $$1$ph = 1; //@line 11495
   } else {
    HEAP16[$0 + 2 >> 1] = HEAP16[$2 >> 1] | 0; //@line 11499
    $$124$1 = $9; //@line 11500
    L8 : while (1) {
     switch (HEAP8[$1 + $$124$1 >> 0] | 0) {
     case 0:
      {
       $$1$ph = 2; //@line 11506
       break L1;
       break;
      }
     case 58:
      {
       break L8;
       break;
      }
     default:
      {}
     }
     $$124$1 = $$124$1 + 1 | 0; //@line 11518
    }
    $17 = $$124$1 + 1 | 0; //@line 11520
    HEAP32[$vararg_buffer4 >> 2] = $2; //@line 11522
    if ((_sscanf($1 + $17 | 0, 5841, $vararg_buffer4) | 0) < 1) {
     $$1$ph = 2; //@line 11526
    } else {
     HEAP16[$0 + 4 >> 1] = HEAP16[$2 >> 1] | 0; //@line 11530
     $$124$2 = $17; //@line 11531
     L13 : while (1) {
      switch (HEAP8[$1 + $$124$2 >> 0] | 0) {
      case 0:
       {
        $$1$ph = 3; //@line 11537
        break L1;
        break;
       }
      case 58:
       {
        break L13;
        break;
       }
      default:
       {}
      }
      $$124$2 = $$124$2 + 1 | 0; //@line 11549
     }
     $26 = $$124$2 + 1 | 0; //@line 11551
     HEAP32[$vararg_buffer7 >> 2] = $2; //@line 11553
     if ((_sscanf($1 + $26 | 0, 5841, $vararg_buffer7) | 0) < 1) {
      $$1$ph = 3; //@line 11557
     } else {
      HEAP16[$0 + 6 >> 1] = HEAP16[$2 >> 1] | 0; //@line 11561
      $$124$3 = $26; //@line 11562
      L18 : while (1) {
       switch (HEAP8[$1 + $$124$3 >> 0] | 0) {
       case 0:
        {
         $$1$ph = 4; //@line 11568
         break L1;
         break;
        }
       case 58:
        {
         break L18;
         break;
        }
       default:
        {}
       }
       $$124$3 = $$124$3 + 1 | 0; //@line 11580
      }
      $35 = $$124$3 + 1 | 0; //@line 11582
      HEAP32[$vararg_buffer10 >> 2] = $2; //@line 11584
      if ((_sscanf($1 + $35 | 0, 5841, $vararg_buffer10) | 0) < 1) {
       $$1$ph = 4; //@line 11588
      } else {
       HEAP16[$0 + 8 >> 1] = HEAP16[$2 >> 1] | 0; //@line 11592
       $$124$4 = $35; //@line 11593
       L23 : while (1) {
        switch (HEAP8[$1 + $$124$4 >> 0] | 0) {
        case 0:
         {
          $$1$ph = 5; //@line 11599
          break L1;
          break;
         }
        case 58:
         {
          break L23;
          break;
         }
        default:
         {}
        }
        $$124$4 = $$124$4 + 1 | 0; //@line 11611
       }
       $44 = $$124$4 + 1 | 0; //@line 11613
       HEAP32[$vararg_buffer13 >> 2] = $2; //@line 11615
       if ((_sscanf($1 + $44 | 0, 5841, $vararg_buffer13) | 0) < 1) {
        $$1$ph = 5; //@line 11619
       } else {
        HEAP16[$0 + 10 >> 1] = HEAP16[$2 >> 1] | 0; //@line 11623
        $$124$5 = $44; //@line 11624
        L28 : while (1) {
         switch (HEAP8[$1 + $$124$5 >> 0] | 0) {
         case 0:
          {
           $$1$ph = 6; //@line 11630
           break L1;
           break;
          }
         case 58:
          {
           break L28;
           break;
          }
         default:
          {}
         }
         $$124$5 = $$124$5 + 1 | 0; //@line 11642
        }
        $53 = $$124$5 + 1 | 0; //@line 11644
        HEAP32[$vararg_buffer16 >> 2] = $2; //@line 11646
        if ((_sscanf($1 + $53 | 0, 5841, $vararg_buffer16) | 0) < 1) {
         $$1$ph = 6; //@line 11650
        } else {
         HEAP16[$0 + 12 >> 1] = HEAP16[$2 >> 1] | 0; //@line 11654
         $$124$6 = $53; //@line 11655
         L33 : while (1) {
          switch (HEAP8[$1 + $$124$6 >> 0] | 0) {
          case 0:
           {
            $$1$ph = 7; //@line 11661
            break L1;
            break;
           }
          case 58:
           {
            break L33;
            break;
           }
          default:
           {}
          }
          $$124$6 = $$124$6 + 1 | 0; //@line 11673
         }
         $62 = $$124$6 + 1 | 0; //@line 11675
         HEAP32[$vararg_buffer19 >> 2] = $2; //@line 11677
         if ((_sscanf($1 + $62 | 0, 5841, $vararg_buffer19) | 0) < 1) {
          $$1$ph = 7; //@line 11681
         } else {
          HEAP16[$0 + 14 >> 1] = HEAP16[$2 >> 1] | 0; //@line 11685
          $$124$7 = $62; //@line 11686
          L38 : while (1) {
           switch (HEAP8[$1 + $$124$7 >> 0] | 0) {
           case 0:
            {
             $$1$ph = 8; //@line 11692
             break L1;
             break;
            }
           case 58:
            {
             break L38;
             break;
            }
           default:
            {}
           }
           $$124$7 = $$124$7 + 1 | 0; //@line 11704
          }
          $$2 = 8; //@line 11706
          STACKTOP = sp; //@line 11707
          return $$2 | 0; //@line 11707
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 $$2 = $$1$ph; //@line 11717
 STACKTOP = sp; //@line 11718
 return $$2 | 0; //@line 11718
}
function __ZN6Socket4openEP12NetworkStack__async_cb_127($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27004
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27006
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27008
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27010
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27012
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27014
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27016
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 27020
  return;
 }
 $14 = $4 + 8 | 0; //@line 27024
 HEAP32[$14 >> 2] = HEAP32[$6 >> 2]; //@line 27025
 $15 = $8 + 12 | 0; //@line 27026
 HEAP32[$8 >> 2] = 12; //@line 27027
 HEAP32[$8 + 4 >> 2] = 1; //@line 27029
 HEAP32[$8 + 8 >> 2] = $4; //@line 27031
 HEAP32[$15 >> 2] = 572; //@line 27032
 $16 = $4 + 16 | 0; //@line 27033
 if (($16 | 0) == ($8 | 0)) {
  $40 = HEAP32[145] | 0; //@line 27037
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 27038
  FUNCTION_TABLE_vi[$40 & 511]($8); //@line 27039
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 134; //@line 27042
   $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 27043
   HEAP32[$41 >> 2] = $8; //@line 27044
   $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 27045
   HEAP32[$42 >> 2] = $2; //@line 27046
   $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 27047
   HEAP32[$43 >> 2] = $14; //@line 27048
   $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 27049
   HEAP32[$44 >> 2] = $16; //@line 27050
   $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 27051
   HEAP32[$45 >> 2] = $10; //@line 27052
   sp = STACKTOP; //@line 27053
   return;
  }
  ___async_unwind = 0; //@line 27056
  HEAP32[$ReallocAsyncCtx5 >> 2] = 134; //@line 27057
  $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 27058
  HEAP32[$41 >> 2] = $8; //@line 27059
  $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 27060
  HEAP32[$42 >> 2] = $2; //@line 27061
  $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 27062
  HEAP32[$43 >> 2] = $14; //@line 27063
  $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 27064
  HEAP32[$44 >> 2] = $16; //@line 27065
  $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 27066
  HEAP32[$45 >> 2] = $10; //@line 27067
  sp = STACKTOP; //@line 27068
  return;
 }
 $18 = $4 + 28 | 0; //@line 27071
 $19 = HEAP32[$18 >> 2] | 0; //@line 27072
 if (!$19) {
  $31 = HEAP32[144] | 0; //@line 27076
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 27077
  FUNCTION_TABLE_vii[$31 & 7]($16, $8); //@line 27078
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 27081
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 27082
   HEAP32[$32 >> 2] = $15; //@line 27083
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 27084
   HEAP32[$33 >> 2] = $18; //@line 27085
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 27086
   HEAP32[$34 >> 2] = $8; //@line 27087
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 27088
   HEAP32[$35 >> 2] = $2; //@line 27089
   $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 27090
   HEAP32[$36 >> 2] = $14; //@line 27091
   $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 27092
   HEAP32[$37 >> 2] = $16; //@line 27093
   $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 27094
   HEAP32[$38 >> 2] = $10; //@line 27095
   sp = STACKTOP; //@line 27096
   return;
  }
  ___async_unwind = 0; //@line 27099
  HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 27100
  $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 27101
  HEAP32[$32 >> 2] = $15; //@line 27102
  $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 27103
  HEAP32[$33 >> 2] = $18; //@line 27104
  $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 27105
  HEAP32[$34 >> 2] = $8; //@line 27106
  $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 27107
  HEAP32[$35 >> 2] = $2; //@line 27108
  $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 27109
  HEAP32[$36 >> 2] = $14; //@line 27110
  $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 27111
  HEAP32[$37 >> 2] = $16; //@line 27112
  $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 27113
  HEAP32[$38 >> 2] = $10; //@line 27114
  sp = STACKTOP; //@line 27115
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 27119
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 27120
  FUNCTION_TABLE_vi[$22 & 511]($16); //@line 27121
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 132; //@line 27124
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 27125
   HEAP32[$23 >> 2] = $15; //@line 27126
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 27127
   HEAP32[$24 >> 2] = $18; //@line 27128
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 27129
   HEAP32[$25 >> 2] = $16; //@line 27130
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 27131
   HEAP32[$26 >> 2] = $8; //@line 27132
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 27133
   HEAP32[$27 >> 2] = $2; //@line 27134
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 27135
   HEAP32[$28 >> 2] = $14; //@line 27136
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 27137
   HEAP32[$29 >> 2] = $10; //@line 27138
   sp = STACKTOP; //@line 27139
   return;
  }
  ___async_unwind = 0; //@line 27142
  HEAP32[$ReallocAsyncCtx3 >> 2] = 132; //@line 27143
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 27144
  HEAP32[$23 >> 2] = $15; //@line 27145
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 27146
  HEAP32[$24 >> 2] = $18; //@line 27147
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 27148
  HEAP32[$25 >> 2] = $16; //@line 27149
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 27150
  HEAP32[$26 >> 2] = $8; //@line 27151
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 27152
  HEAP32[$27 >> 2] = $2; //@line 27153
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 27154
  HEAP32[$28 >> 2] = $14; //@line 27155
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 27156
  HEAP32[$29 >> 2] = $10; //@line 27157
  sp = STACKTOP; //@line 27158
  return;
 }
}
function __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0100153 = 0, $$0103158 = 0, $$0104152 = 0, $$0105151 = 0, $$0137$lcssa = 0, $$0137157 = 0, $$098 = 0, $$1 = 0, $$1106 = 0, $$1138$lcssa = 0, $$1138155 = 0, $$2150 = 0, $$4 = 0, $$7 = 0, $103 = 0, $106 = 0, $111 = 0, $112 = 0, $116 = 0, $26 = 0, $33 = 0, $34 = 0, $41 = 0, $47 = 0, $48 = 0, $51 = 0, $55 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $77 = 0, $85 = 0, label = 0;
 $26 = (HEAPU8[$0 + 4 >> 0] | 0) << 8 | (HEAPU8[$0 + 5 >> 0] | 0); //@line 13473
 $33 = (HEAPU8[$0 + 6 >> 0] | 0) << 8 | (HEAPU8[$0 + 7 >> 0] | 0); //@line 13480
 $34 = $0 + 12 | 0; //@line 13481
 if (!((HEAP8[$0 + 3 >> 0] & 15) == 0 & ((HEAP8[$0 + 2 >> 0] & -8) << 24 >> 24 == -128 ? (((HEAPU8[$0 >> 0] | 0) << 8 | (HEAPU8[$0 + 1 >> 0] | 0)) & 65535) << 16 >> 16 == $1 << 16 >> 16 : 0))) {
  $$098 = -1; //@line 13489
  return $$098 | 0; //@line 13490
 }
 if (!$26) {
  $$0137$lcssa = $34; //@line 13494
 } else {
  $$0103158 = 0; //@line 13496
  $$0137157 = $34; //@line 13496
  while (1) {
   $41 = HEAP8[$$0137157 >> 0] | 0; //@line 13498
   if (!($41 << 24 >> 24)) {
    $$1138$lcssa = $$0137157; //@line 13501
   } else {
    $$1138155 = $$0137157; //@line 13503
    $47 = $41; //@line 13503
    while (1) {
     $48 = $$1138155 + 1 + ($47 & 255) | 0; //@line 13507
     $47 = HEAP8[$48 >> 0] | 0; //@line 13508
     if (!($47 << 24 >> 24)) {
      $$1138$lcssa = $48; //@line 13511
      break;
     } else {
      $$1138155 = $48; //@line 13514
     }
    }
   }
   $51 = $$1138$lcssa + 5 | 0; //@line 13518
   $$0103158 = $$0103158 + 1 | 0; //@line 13519
   if (($$0103158 | 0) >= ($26 | 0)) {
    $$0137$lcssa = $51; //@line 13524
    break;
   } else {
    $$0137157 = $51; //@line 13522
   }
  }
 }
 if (($4 | 0) != 0 & ($33 | 0) != 0) {
  $$0100153 = $3; //@line 13533
  $$0104152 = 0; //@line 13533
  $$0105151 = 0; //@line 13533
  $$2150 = $$0137$lcssa; //@line 13533
 } else {
  $$098 = 0; //@line 13535
  return $$098 | 0; //@line 13536
 }
 while (1) {
  $55 = HEAP8[$$2150 >> 0] | 0; //@line 13540
  do {
   if (!($55 << 24 >> 24)) {
    $$4 = $$2150 + 1 | 0; //@line 13544
   } else {
    $59 = $55 & 255; //@line 13547
    $62 = $$2150; //@line 13547
    while (1) {
     if ($59 & 192 | 0) {
      label = 10; //@line 13552
      break;
     }
     $64 = $62 + 1 + $59 | 0; //@line 13556
     $65 = HEAP8[$64 >> 0] | 0; //@line 13557
     if (!($65 << 24 >> 24)) {
      label = 12; //@line 13561
      break;
     } else {
      $59 = $65 & 255; //@line 13564
      $62 = $64; //@line 13564
     }
    }
    if ((label | 0) == 10) {
     label = 0; //@line 13568
     $$4 = $62 + 2 | 0; //@line 13570
     break;
    } else if ((label | 0) == 12) {
     label = 0; //@line 13574
     $$4 = $64 + 1 | 0; //@line 13576
     break;
    }
   }
  } while (0);
  $77 = ((HEAPU8[$$4 >> 0] | 0) << 8 | (HEAPU8[$$4 + 1 >> 0] | 0)) & 65535; //@line 13589
  $85 = (HEAPU8[$$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$$4 + 3 >> 0] | 0); //@line 13597
  $103 = (HEAPU8[$$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$$4 + 7 >> 0] | 0); //@line 13615
  $106 = $$4 + 10 | 0; //@line 13618
  $111 = (HEAPU8[$$4 + 8 >> 0] | 0) << 8 | (HEAPU8[$$4 + 9 >> 0] | 0); //@line 13623
  $112 = $111 & 65535; //@line 13624
  if (!$$0104152) {
   HEAP32[$2 >> 2] = $103 >>> 0 < 2147483647 ? $103 : 2147483647; //@line 13629
  }
  $116 = ($85 | 0) == 1; //@line 13632
  do {
   if ($77 << 16 >> 16 == 1 & $116 & $112 << 16 >> 16 == 4) {
    HEAP32[$$0100153 >> 2] = 1; //@line 13638
    HEAP8[$$0100153 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 13642
    HEAP8[$$0100153 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 13646
    HEAP8[$$0100153 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 13650
    HEAP8[$$0100153 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 13653
    $$1 = $$0100153 + 20 | 0; //@line 13657
    $$1106 = $$0105151 + 1 | 0; //@line 13657
    $$7 = $$4 + 14 | 0; //@line 13657
   } else {
    if ($77 << 16 >> 16 == 28 & $116 & $112 << 16 >> 16 == 16) {
     HEAP32[$$0100153 >> 2] = 2; //@line 13664
     HEAP8[$$0100153 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 13668
     HEAP8[$$0100153 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 13672
     HEAP8[$$0100153 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 13676
     HEAP8[$$0100153 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 13680
     HEAP8[$$0100153 + 8 >> 0] = HEAP8[$$4 + 14 >> 0] | 0; //@line 13684
     HEAP8[$$0100153 + 9 >> 0] = HEAP8[$$4 + 15 >> 0] | 0; //@line 13688
     HEAP8[$$0100153 + 10 >> 0] = HEAP8[$$4 + 16 >> 0] | 0; //@line 13692
     HEAP8[$$0100153 + 11 >> 0] = HEAP8[$$4 + 17 >> 0] | 0; //@line 13696
     HEAP8[$$0100153 + 12 >> 0] = HEAP8[$$4 + 18 >> 0] | 0; //@line 13700
     HEAP8[$$0100153 + 13 >> 0] = HEAP8[$$4 + 19 >> 0] | 0; //@line 13704
     HEAP8[$$0100153 + 14 >> 0] = HEAP8[$$4 + 20 >> 0] | 0; //@line 13708
     HEAP8[$$0100153 + 15 >> 0] = HEAP8[$$4 + 21 >> 0] | 0; //@line 13712
     HEAP8[$$0100153 + 16 >> 0] = HEAP8[$$4 + 22 >> 0] | 0; //@line 13716
     HEAP8[$$0100153 + 17 >> 0] = HEAP8[$$4 + 23 >> 0] | 0; //@line 13720
     HEAP8[$$0100153 + 18 >> 0] = HEAP8[$$4 + 24 >> 0] | 0; //@line 13724
     HEAP8[$$0100153 + 19 >> 0] = HEAP8[$$4 + 25 >> 0] | 0; //@line 13727
     $$1 = $$0100153 + 20 | 0; //@line 13731
     $$1106 = $$0105151 + 1 | 0; //@line 13731
     $$7 = $$4 + 26 | 0; //@line 13731
     break;
    } else {
     $$1 = $$0100153; //@line 13735
     $$1106 = $$0105151; //@line 13735
     $$7 = $106 + $111 | 0; //@line 13735
     break;
    }
   }
  } while (0);
  $$0104152 = $$0104152 + 1 | 0; //@line 13740
  if (!($$1106 >>> 0 < $4 >>> 0 & ($$0104152 | 0) < ($33 | 0))) {
   $$098 = $$1106; //@line 13747
   break;
  } else {
   $$0100153 = $$1; //@line 13745
   $$0105151 = $$1106; //@line 13745
   $$2150 = $$7; //@line 13745
  }
 }
 return $$098 | 0; //@line 13751
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25953
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25955
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25957
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25959
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25961
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 25964
 $11 = $2 + 12 | 0; //@line 25965
 HEAP32[$11 >> 2] = $$pre$i; //@line 25966
 $12 = $6 + 12 | 0; //@line 25967
 $13 = HEAP32[$12 >> 2] | 0; //@line 25968
 $15 = $$pre$i; //@line 25970
 if (!$13) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 25972
  _mbed_assert_internal(6023, 6028, 1677); //@line 25973
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 259; //@line 25976
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 25977
   HEAP32[$16 >> 2] = $12; //@line 25978
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 25979
   HEAP32[$17 >> 2] = $11; //@line 25980
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 25981
   HEAP32[$18 >> 2] = $6; //@line 25982
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 25983
   HEAP32[$19 >> 2] = $4; //@line 25984
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 25985
   HEAP32[$20 >> 2] = $8; //@line 25986
   $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 25987
   HEAP32[$21 >> 2] = $2; //@line 25988
   $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 25989
   HEAP32[$22 >> 2] = $4; //@line 25990
   $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 25991
   HEAP32[$23 >> 2] = $11; //@line 25992
   sp = STACKTOP; //@line 25993
   return;
  }
  ___async_unwind = 0; //@line 25996
  HEAP32[$ReallocAsyncCtx6 >> 2] = 259; //@line 25997
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 25998
  HEAP32[$16 >> 2] = $12; //@line 25999
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 26000
  HEAP32[$17 >> 2] = $11; //@line 26001
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 26002
  HEAP32[$18 >> 2] = $6; //@line 26003
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 26004
  HEAP32[$19 >> 2] = $4; //@line 26005
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 26006
  HEAP32[$20 >> 2] = $8; //@line 26007
  $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 26008
  HEAP32[$21 >> 2] = $2; //@line 26009
  $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 26010
  HEAP32[$22 >> 2] = $4; //@line 26011
  $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 26012
  HEAP32[$23 >> 2] = $11; //@line 26013
  sp = STACKTOP; //@line 26014
  return;
 }
 $24 = HEAP32[$13 >> 2] | 0; //@line 26017
 if (!$15) {
  $36 = $4 + 12 | 0; //@line 26020
  HEAP32[$36 >> 2] = 0; //@line 26021
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 26022
  $37 = FUNCTION_TABLE_iiii[$24 & 31]($6, $8, $4) | 0; //@line 26023
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 26026
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 26027
   HEAP32[$38 >> 2] = $36; //@line 26028
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 26029
   HEAP32[$39 >> 2] = $4; //@line 26030
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 26031
   HEAP32[$40 >> 2] = $11; //@line 26032
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 26033
   HEAP32[$41 >> 2] = $2; //@line 26034
   sp = STACKTOP; //@line 26035
   return;
  }
  HEAP32[___async_retval >> 2] = $37; //@line 26039
  ___async_unwind = 0; //@line 26040
  HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 26041
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 26042
  HEAP32[$38 >> 2] = $36; //@line 26043
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 26044
  HEAP32[$39 >> 2] = $4; //@line 26045
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 26046
  HEAP32[$40 >> 2] = $11; //@line 26047
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 26048
  HEAP32[$41 >> 2] = $2; //@line 26049
  sp = STACKTOP; //@line 26050
  return;
 } else {
  $27 = HEAP32[$15 + 4 >> 2] | 0; //@line 26054
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 26055
  FUNCTION_TABLE_vii[$27 & 7]($4, $2); //@line 26056
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 260; //@line 26059
   $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 26060
   HEAP32[$28 >> 2] = $11; //@line 26061
   $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 26062
   HEAP32[$29 >> 2] = $4; //@line 26063
   $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 26064
   HEAP32[$30 >> 2] = $6; //@line 26065
   $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 26066
   HEAP32[$31 >> 2] = $8; //@line 26067
   $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 26068
   HEAP32[$32 >> 2] = $24; //@line 26069
   $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 26070
   HEAP32[$33 >> 2] = $4; //@line 26071
   $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 26072
   HEAP32[$34 >> 2] = $11; //@line 26073
   $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 26074
   HEAP32[$35 >> 2] = $2; //@line 26075
   sp = STACKTOP; //@line 26076
   return;
  }
  ___async_unwind = 0; //@line 26079
  HEAP32[$ReallocAsyncCtx2 >> 2] = 260; //@line 26080
  $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 26081
  HEAP32[$28 >> 2] = $11; //@line 26082
  $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 26083
  HEAP32[$29 >> 2] = $4; //@line 26084
  $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 26085
  HEAP32[$30 >> 2] = $6; //@line 26086
  $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 26087
  HEAP32[$31 >> 2] = $8; //@line 26088
  $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 26089
  HEAP32[$32 >> 2] = $24; //@line 26090
  $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 26091
  HEAP32[$33 >> 2] = $4; //@line 26092
  $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 26093
  HEAP32[$34 >> 2] = $11; //@line 26094
  $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 26095
  HEAP32[$35 >> 2] = $2; //@line 26096
  sp = STACKTOP; //@line 26097
  return;
 }
}
function __ZL30nsapi_dns_query_async_responsePv($0) {
 $0 = $0 | 0;
 var $$048 = 0, $$052 = 0, $$byval_copy14 = 0, $$lcssa = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $40 = 0, $42 = 0, $53 = 0, $57 = 0, $61 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18071
 STACKTOP = STACKTOP + 48 | 0; //@line 18072
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 18072
 $$byval_copy14 = sp + 20 | 0; //@line 18073
 $1 = sp; //@line 18074
 $2 = $0; //@line 18075
 $3 = HEAP32[2518] | 0; //@line 18076
 if (!$3) {
  label = 3; //@line 18079
 } else {
  if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) {
   $$lcssa = $3; //@line 18084
  } else {
   label = 3; //@line 18086
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = HEAP32[2519] | 0; //@line 18091
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $7; //@line 18097
     break;
    }
   }
   $53 = HEAP32[2520] | 0; //@line 18101
   if ($53 | 0) {
    if ((HEAP32[$53 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $53; //@line 18107
     break;
    }
   }
   $57 = HEAP32[2521] | 0; //@line 18111
   if ($57 | 0) {
    if ((HEAP32[$57 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $57; //@line 18117
     break;
    }
   }
   $61 = HEAP32[2522] | 0; //@line 18121
   if (!$61) {
    STACKTOP = sp; //@line 18124
    return;
   }
   if ((HEAP32[$61 >> 2] | 0) == ($2 | 0)) {
    $$lcssa = $61; //@line 18129
   } else {
    STACKTOP = sp; //@line 18131
    return;
   }
  }
 } while (0);
 $9 = $$lcssa + 85 | 0; //@line 18135
 $10 = HEAP8[$9 >> 0] | 0; //@line 18136
 $11 = $10 & 255; //@line 18137
 if (!($10 << 24 >> 24)) {
  $14 = HEAP32[$$lcssa + 4 >> 2] | 0; //@line 18141
  $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 18142
  __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa, $14, 0); //@line 18143
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 249; //@line 18146
   sp = STACKTOP; //@line 18147
   STACKTOP = sp; //@line 18148
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 18150
  STACKTOP = sp; //@line 18151
  return;
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18154
 $16 = __ZnajRKSt9nothrow_t($11 << 6, 12052) | 0; //@line 18155
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 250; //@line 18158
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 18160
  HEAP32[$AsyncCtx2 + 8 >> 2] = $$lcssa; //@line 18162
  HEAP32[$AsyncCtx2 + 12 >> 2] = $11; //@line 18164
  HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 18166
  sp = STACKTOP; //@line 18167
  STACKTOP = sp; //@line 18168
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 18170
 if (!$16) {
  $35 = 0; //@line 18173
 } else {
  $22 = $16 + ($11 << 6) | 0; //@line 18175
  $23 = $16; //@line 18176
  do {
   HEAP32[$1 >> 2] = 0; //@line 18178
   HEAP32[$1 + 4 >> 2] = 0; //@line 18178
   HEAP32[$1 + 8 >> 2] = 0; //@line 18178
   HEAP32[$1 + 12 >> 2] = 0; //@line 18178
   HEAP32[$1 + 16 >> 2] = 0; //@line 18178
   HEAP32[$$byval_copy14 >> 2] = HEAP32[$1 >> 2]; //@line 18179
   HEAP32[$$byval_copy14 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 18179
   HEAP32[$$byval_copy14 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 18179
   HEAP32[$$byval_copy14 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 18179
   HEAP32[$$byval_copy14 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 18179
   __ZN13SocketAddressC2E10nsapi_addrt($23, $$byval_copy14, 0); //@line 18180
   $23 = $23 + 64 | 0; //@line 18181
  } while (($23 | 0) != ($22 | 0));
  $35 = $16; //@line 18184
 }
 $$pre = $$lcssa + 64 | 0; //@line 18193
 if (HEAP8[$9 >> 0] | 0) {
  $$052 = 0; //@line 18195
  do {
   $40 = $35 + ($$052 << 6) | 0; //@line 18197
   $42 = (HEAP32[$$pre >> 2] | 0) + ($$052 * 20 | 0) | 0; //@line 18199
   HEAP32[$$byval_copy14 >> 2] = HEAP32[$42 >> 2]; //@line 18200
   HEAP32[$$byval_copy14 + 4 >> 2] = HEAP32[$42 + 4 >> 2]; //@line 18200
   HEAP32[$$byval_copy14 + 8 >> 2] = HEAP32[$42 + 8 >> 2]; //@line 18200
   HEAP32[$$byval_copy14 + 12 >> 2] = HEAP32[$42 + 12 >> 2]; //@line 18200
   HEAP32[$$byval_copy14 + 16 >> 2] = HEAP32[$42 + 16 >> 2]; //@line 18200
   __ZN13SocketAddress8set_addrE10nsapi_addr($40, $$byval_copy14); //@line 18201
   $$052 = $$052 + 1 | 0; //@line 18202
  } while (($$052 | 0) < (HEAPU8[$9 >> 0] | 0));
 }
 $29 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 18214
 $30 = HEAP32[$$pre >> 2] | 0; //@line 18215
 $32 = HEAP32[$$lcssa + 68 >> 2] | 0; //@line 18217
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18218
 __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($29, $30, $32); //@line 18219
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 251; //@line 18222
  HEAP32[$AsyncCtx + 4 >> 2] = $$lcssa; //@line 18224
  HEAP32[$AsyncCtx + 8 >> 2] = $35; //@line 18226
  HEAP32[$AsyncCtx + 12 >> 2] = $9; //@line 18228
  sp = STACKTOP; //@line 18229
  STACKTOP = sp; //@line 18230
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18232
 if (!(HEAP32[$$lcssa + 48 >> 2] | 0)) {
  $$048 = 0; //@line 18237
 } else {
  $$048 = HEAPU8[$9 >> 0] | 0; //@line 18241
 }
 $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18243
 __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa, $$048, $35); //@line 18244
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 252; //@line 18247
  HEAP32[$AsyncCtx6 + 4 >> 2] = $35; //@line 18249
  sp = STACKTOP; //@line 18250
  STACKTOP = sp; //@line 18251
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 18253
 if (!$35) {
  STACKTOP = sp; //@line 18256
  return;
 }
 __ZdaPv($35); //@line 18258
 STACKTOP = sp; //@line 18259
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $53 = 0, $58 = 0, $6 = 0, $61 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18664
 STACKTOP = STACKTOP + 32 | 0; //@line 18665
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 18665
 $3 = sp + 16 | 0; //@line 18666
 $4 = sp; //@line 18667
 $5 = $2 + 12 | 0; //@line 18668
 $6 = HEAP32[$5 >> 2] | 0; //@line 18669
 do {
  if (!$6) {
   $16 = 0; //@line 18673
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 18676
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 18677
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 18678
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 258; //@line 18681
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 18683
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 18685
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 18687
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 18689
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 18691
    sp = STACKTOP; //@line 18692
    STACKTOP = sp; //@line 18693
    return 0; //@line 18693
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18695
    $16 = HEAP32[$5 >> 2] | 0; //@line 18697
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 18702
 HEAP32[$15 >> 2] = $16; //@line 18703
 $17 = $0 + 12 | 0; //@line 18704
 $18 = HEAP32[$17 >> 2] | 0; //@line 18705
 $20 = $16; //@line 18707
 do {
  if (!$18) {
   $AsyncCtx16 = _emscripten_alloc_async_context(36, sp) | 0; //@line 18710
   _mbed_assert_internal(6023, 6028, 1677); //@line 18711
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 259; //@line 18714
    HEAP32[$AsyncCtx16 + 4 >> 2] = $17; //@line 18716
    HEAP32[$AsyncCtx16 + 8 >> 2] = $15; //@line 18718
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 18720
    HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 18722
    HEAP32[$AsyncCtx16 + 20 >> 2] = $1; //@line 18724
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 18726
    HEAP32[$AsyncCtx16 + 28 >> 2] = $3; //@line 18728
    HEAP32[$AsyncCtx16 + 32 >> 2] = $15; //@line 18730
    sp = STACKTOP; //@line 18731
    STACKTOP = sp; //@line 18732
    return 0; //@line 18732
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 18734
    $30 = HEAP32[$17 >> 2] | 0; //@line 18737
    $32 = HEAP32[$15 >> 2] | 0; //@line 18737
    break;
   }
  } else {
   $30 = $18; //@line 18741
   $32 = $20; //@line 18741
  }
 } while (0);
 $29 = HEAP32[$30 >> 2] | 0; //@line 18744
 do {
  if (!$32) {
   $44 = 0; //@line 18748
  } else {
   $34 = HEAP32[$32 + 4 >> 2] | 0; //@line 18751
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 18752
   FUNCTION_TABLE_vii[$34 & 7]($3, $4); //@line 18753
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 260; //@line 18756
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 18758
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 18760
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 18762
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 18764
    HEAP32[$AsyncCtx2 + 20 >> 2] = $29; //@line 18766
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 18768
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 18770
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 18772
    sp = STACKTOP; //@line 18773
    STACKTOP = sp; //@line 18774
    return 0; //@line 18774
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 18776
    $44 = HEAP32[$15 >> 2] | 0; //@line 18778
    break;
   }
  }
 } while (0);
 $43 = $3 + 12 | 0; //@line 18783
 HEAP32[$43 >> 2] = $44; //@line 18784
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18785
 $45 = FUNCTION_TABLE_iiii[$29 & 31]($0, $1, $3) | 0; //@line 18786
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 261; //@line 18789
  HEAP32[$AsyncCtx5 + 4 >> 2] = $43; //@line 18791
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 18793
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 18795
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 18797
  sp = STACKTOP; //@line 18798
  STACKTOP = sp; //@line 18799
  return 0; //@line 18799
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 18801
 $50 = HEAP32[$43 >> 2] | 0; //@line 18802
 do {
  if ($50 | 0) {
   $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 18807
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18808
   FUNCTION_TABLE_vi[$53 & 511]($3); //@line 18809
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 262; //@line 18812
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 18814
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 18816
    HEAP32[$AsyncCtx9 + 12 >> 2] = $45; //@line 18818
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 18820
    sp = STACKTOP; //@line 18821
    STACKTOP = sp; //@line 18822
    return 0; //@line 18822
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 18824
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$15 >> 2] | 0; //@line 18829
 if (!$58) {
  STACKTOP = sp; //@line 18832
  return $45 | 0; //@line 18832
 }
 $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 18835
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18836
 FUNCTION_TABLE_vi[$61 & 511]($4); //@line 18837
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 263; //@line 18840
  HEAP32[$AsyncCtx13 + 4 >> 2] = $45; //@line 18842
  sp = STACKTOP; //@line 18843
  STACKTOP = sp; //@line 18844
  return 0; //@line 18844
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 18846
 STACKTOP = sp; //@line 18847
 return $45 | 0; //@line 18847
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_43($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12953
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12955
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12957
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12959
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12961
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12963
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12965
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12969
 $17 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 12970
 if ($17 | 0) {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 12974
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 12975
  FUNCTION_TABLE_vi[$20 & 511]($16); //@line 12976
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 227; //@line 12979
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 12980
   HEAP32[$21 >> 2] = $6; //@line 12981
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 12982
   HEAP32[$22 >> 2] = $2; //@line 12983
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 12984
   HEAP32[$23 >> 2] = $8; //@line 12985
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 12986
   HEAP32[$24 >> 2] = $4; //@line 12987
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 12988
   HEAP32[$25 >> 2] = $10; //@line 12989
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 12990
   HEAP32[$26 >> 2] = $12; //@line 12991
   sp = STACKTOP; //@line 12992
   return;
  }
  ___async_unwind = 0; //@line 12995
  HEAP32[$ReallocAsyncCtx3 >> 2] = 227; //@line 12996
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 12997
  HEAP32[$21 >> 2] = $6; //@line 12998
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 12999
  HEAP32[$22 >> 2] = $2; //@line 13000
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 13001
  HEAP32[$23 >> 2] = $8; //@line 13002
  $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 13003
  HEAP32[$24 >> 2] = $4; //@line 13004
  $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 13005
  HEAP32[$25 >> 2] = $10; //@line 13006
  $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 13007
  HEAP32[$26 >> 2] = $12; //@line 13008
  sp = STACKTOP; //@line 13009
  return;
 }
 $27 = HEAP32[$6 >> 2] | 0; //@line 13012
 if ($27 | 0) {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 13016
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 13017
  FUNCTION_TABLE_vi[$30 & 511]($8); //@line 13018
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 13021
   $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 13022
   HEAP32[$31 >> 2] = $2; //@line 13023
   $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 13024
   HEAP32[$32 >> 2] = $4; //@line 13025
   $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 13026
   HEAP32[$33 >> 2] = $10; //@line 13027
   $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 13028
   HEAP32[$34 >> 2] = $12; //@line 13029
   sp = STACKTOP; //@line 13030
   return;
  }
  ___async_unwind = 0; //@line 13033
  HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 13034
  $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 13035
  HEAP32[$31 >> 2] = $2; //@line 13036
  $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 13037
  HEAP32[$32 >> 2] = $4; //@line 13038
  $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 13039
  HEAP32[$33 >> 2] = $10; //@line 13040
  $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 13041
  HEAP32[$34 >> 2] = $12; //@line 13042
  sp = STACKTOP; //@line 13043
  return;
 }
 $35 = HEAP32[$2 >> 2] | 0; //@line 13046
 if (!$35) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 13049
  _mbed_assert_internal(6023, 6028, 1677); //@line 13050
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 13053
   $37 = $ReallocAsyncCtx9 + 4 | 0; //@line 13054
   HEAP32[$37 >> 2] = $2; //@line 13055
   $38 = $ReallocAsyncCtx9 + 8 | 0; //@line 13056
   HEAP32[$38 >> 2] = $4; //@line 13057
   $39 = $ReallocAsyncCtx9 + 12 | 0; //@line 13058
   HEAP32[$39 >> 2] = $10; //@line 13059
   $40 = $ReallocAsyncCtx9 + 16 | 0; //@line 13060
   HEAP32[$40 >> 2] = $12; //@line 13061
   sp = STACKTOP; //@line 13062
   return;
  }
  ___async_unwind = 0; //@line 13065
  HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 13066
  $37 = $ReallocAsyncCtx9 + 4 | 0; //@line 13067
  HEAP32[$37 >> 2] = $2; //@line 13068
  $38 = $ReallocAsyncCtx9 + 8 | 0; //@line 13069
  HEAP32[$38 >> 2] = $4; //@line 13070
  $39 = $ReallocAsyncCtx9 + 12 | 0; //@line 13071
  HEAP32[$39 >> 2] = $10; //@line 13072
  $40 = $ReallocAsyncCtx9 + 16 | 0; //@line 13073
  HEAP32[$40 >> 2] = $12; //@line 13074
  sp = STACKTOP; //@line 13075
  return;
 } else {
  $41 = HEAP32[$35 >> 2] | 0; //@line 13078
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 13079
  FUNCTION_TABLE_viii[$41 & 0]($4, $10, $12); //@line 13080
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 230; //@line 13083
   $42 = $ReallocAsyncCtx5 + 4 | 0; //@line 13084
   HEAP32[$42 >> 2] = $2; //@line 13085
   $43 = $ReallocAsyncCtx5 + 8 | 0; //@line 13086
   HEAP32[$43 >> 2] = $4; //@line 13087
   sp = STACKTOP; //@line 13088
   return;
  }
  ___async_unwind = 0; //@line 13091
  HEAP32[$ReallocAsyncCtx5 >> 2] = 230; //@line 13092
  $42 = $ReallocAsyncCtx5 + 4 | 0; //@line 13093
  HEAP32[$42 >> 2] = $2; //@line 13094
  $43 = $ReallocAsyncCtx5 + 8 | 0; //@line 13095
  HEAP32[$43 >> 2] = $4; //@line 13096
  sp = STACKTOP; //@line 13097
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87($0) {
 $0 = $0 | 0;
 var $$391 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 18674
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18676
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18678
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18680
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18682
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18684
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18686
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18692
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18694
 $21 = (HEAP32[$0 + 28 >> 2] | 0) == 0; //@line 18695
 $22 = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 18696
 if ($22 | 0) {
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 18700
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(36) | 0; //@line 18701
  FUNCTION_TABLE_vi[$25 & 511]($18); //@line 18702
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 187; //@line 18705
   $26 = $ReallocAsyncCtx13 + 4 | 0; //@line 18706
   $$expand_i1_val = $21 & 1; //@line 18707
   HEAP8[$26 >> 0] = $$expand_i1_val; //@line 18708
   $27 = $ReallocAsyncCtx13 + 8 | 0; //@line 18709
   HEAP32[$27 >> 2] = $4; //@line 18710
   $28 = $ReallocAsyncCtx13 + 12 | 0; //@line 18711
   HEAP32[$28 >> 2] = $2; //@line 18712
   $29 = $ReallocAsyncCtx13 + 16 | 0; //@line 18713
   HEAP32[$29 >> 2] = $10; //@line 18714
   $30 = $ReallocAsyncCtx13 + 20 | 0; //@line 18715
   HEAP32[$30 >> 2] = $6; //@line 18716
   $31 = $ReallocAsyncCtx13 + 24 | 0; //@line 18717
   HEAP32[$31 >> 2] = $12; //@line 18718
   $32 = $ReallocAsyncCtx13 + 28 | 0; //@line 18719
   HEAP32[$32 >> 2] = $8; //@line 18720
   $33 = $ReallocAsyncCtx13 + 32 | 0; //@line 18721
   HEAP32[$33 >> 2] = $20; //@line 18722
   sp = STACKTOP; //@line 18723
   return;
  }
  ___async_unwind = 0; //@line 18726
  HEAP32[$ReallocAsyncCtx13 >> 2] = 187; //@line 18727
  $26 = $ReallocAsyncCtx13 + 4 | 0; //@line 18728
  $$expand_i1_val = $21 & 1; //@line 18729
  HEAP8[$26 >> 0] = $$expand_i1_val; //@line 18730
  $27 = $ReallocAsyncCtx13 + 8 | 0; //@line 18731
  HEAP32[$27 >> 2] = $4; //@line 18732
  $28 = $ReallocAsyncCtx13 + 12 | 0; //@line 18733
  HEAP32[$28 >> 2] = $2; //@line 18734
  $29 = $ReallocAsyncCtx13 + 16 | 0; //@line 18735
  HEAP32[$29 >> 2] = $10; //@line 18736
  $30 = $ReallocAsyncCtx13 + 20 | 0; //@line 18737
  HEAP32[$30 >> 2] = $6; //@line 18738
  $31 = $ReallocAsyncCtx13 + 24 | 0; //@line 18739
  HEAP32[$31 >> 2] = $12; //@line 18740
  $32 = $ReallocAsyncCtx13 + 28 | 0; //@line 18741
  HEAP32[$32 >> 2] = $8; //@line 18742
  $33 = $ReallocAsyncCtx13 + 32 | 0; //@line 18743
  HEAP32[$33 >> 2] = $20; //@line 18744
  sp = STACKTOP; //@line 18745
  return;
 }
 do {
  if ($21) {
   $$391 = HEAP32[$4 >> 2] | 0; //@line 18751
  } else {
   $34 = HEAP32[$2 >> 2] | 0; //@line 18753
   if ($34 | 0) {
    __ZdlPv($34); //@line 18756
   }
   $36 = HEAP32[$10 >> 2] | 0; //@line 18758
   if ($36 | 0) {
    $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 18762
    $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 18763
    FUNCTION_TABLE_vi[$39 & 511]($12); //@line 18764
    if (___async) {
     HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 18767
     $40 = $ReallocAsyncCtx14 + 4 | 0; //@line 18768
     HEAP32[$40 >> 2] = $6; //@line 18769
     $41 = $ReallocAsyncCtx14 + 8 | 0; //@line 18770
     HEAP32[$41 >> 2] = $8; //@line 18771
     $42 = $ReallocAsyncCtx14 + 12 | 0; //@line 18772
     HEAP32[$42 >> 2] = $20; //@line 18773
     sp = STACKTOP; //@line 18774
     return;
    }
    ___async_unwind = 0; //@line 18777
    HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 18778
    $40 = $ReallocAsyncCtx14 + 4 | 0; //@line 18779
    HEAP32[$40 >> 2] = $6; //@line 18780
    $41 = $ReallocAsyncCtx14 + 8 | 0; //@line 18781
    HEAP32[$41 >> 2] = $8; //@line 18782
    $42 = $ReallocAsyncCtx14 + 12 | 0; //@line 18783
    HEAP32[$42 >> 2] = $20; //@line 18784
    sp = STACKTOP; //@line 18785
    return;
   }
   $44 = HEAP32[$6 + 28 >> 2] | 0; //@line 18789
   if (!$44) {
    __ZdlPv($6); //@line 18792
    $$391 = -3007; //@line 18793
    break;
   }
   $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 18797
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 18798
   FUNCTION_TABLE_vi[$47 & 511]($8); //@line 18799
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 189; //@line 18802
    $48 = $ReallocAsyncCtx15 + 4 | 0; //@line 18803
    HEAP32[$48 >> 2] = $6; //@line 18804
    $49 = $ReallocAsyncCtx15 + 8 | 0; //@line 18805
    HEAP32[$49 >> 2] = $20; //@line 18806
    sp = STACKTOP; //@line 18807
    return;
   }
   ___async_unwind = 0; //@line 18810
   HEAP32[$ReallocAsyncCtx15 >> 2] = 189; //@line 18811
   $48 = $ReallocAsyncCtx15 + 4 | 0; //@line 18812
   HEAP32[$48 >> 2] = $6; //@line 18813
   $49 = $ReallocAsyncCtx15 + 8 | 0; //@line 18814
   HEAP32[$49 >> 2] = $20; //@line 18815
   sp = STACKTOP; //@line 18816
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$391; //@line 18821
 return;
}
function _mbed_vtracef__async_cb_139($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28460
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 28463
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28465
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28467
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28469
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28471
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28473
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28479
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28481
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28483
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28485
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28489
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28493
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28495
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 28499
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 28501
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 28503
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 28507
 HEAP32[$8 >> 2] = HEAP32[___async_retval >> 2]; //@line 28512
 $50 = _snprintf($10, $12, 5708, $8) | 0; //@line 28513
 $$10 = ($50 | 0) >= ($12 | 0) ? 0 : $50; //@line 28515
 $53 = $10 + $$10 | 0; //@line 28517
 $54 = $12 - $$10 | 0; //@line 28518
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 28522
   $$3169 = $53; //@line 28522
   label = 4; //@line 28523
  }
 } else {
  $$3147168 = $12; //@line 28526
  $$3169 = $10; //@line 28526
  label = 4; //@line 28527
 }
 if ((label | 0) == 4) {
  $56 = $32 + -2 | 0; //@line 28530
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$34 >> 2] = $24; //@line 28536
    $$5156 = _snprintf($$3169, $$3147168, 5711, $34) | 0; //@line 28538
    break;
   }
  case 1:
   {
    HEAP32[$22 >> 2] = $24; //@line 28542
    $$5156 = _snprintf($$3169, $$3147168, 5726, $22) | 0; //@line 28544
    break;
   }
  case 3:
   {
    HEAP32[$28 >> 2] = $24; //@line 28548
    $$5156 = _snprintf($$3169, $$3147168, 5741, $28) | 0; //@line 28550
    break;
   }
  case 7:
   {
    HEAP32[$42 >> 2] = $24; //@line 28554
    $$5156 = _snprintf($$3169, $$3147168, 5756, $42) | 0; //@line 28556
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 5771, $46) | 0; //@line 28561
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 28565
  $67 = $$3169 + $$5156$ | 0; //@line 28567
  $68 = $$3147168 - $$5156$ | 0; //@line 28568
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 28572
   $70 = _vsnprintf($67, $68, $38, $40) | 0; //@line 28573
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 80; //@line 28576
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 28577
    $$expand_i1_val = $2 & 1; //@line 28578
    HEAP8[$71 >> 0] = $$expand_i1_val; //@line 28579
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 28580
    HEAP32[$72 >> 2] = $4; //@line 28581
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 28582
    HEAP32[$73 >> 2] = $6; //@line 28583
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 28584
    HEAP32[$74 >> 2] = $18; //@line 28585
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 28586
    HEAP32[$75 >> 2] = $20; //@line 28587
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 28588
    HEAP32[$76 >> 2] = $68; //@line 28589
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 28590
    HEAP32[$77 >> 2] = $67; //@line 28591
    sp = STACKTOP; //@line 28592
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 28596
   ___async_unwind = 0; //@line 28597
   HEAP32[$ReallocAsyncCtx10 >> 2] = 80; //@line 28598
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 28599
   $$expand_i1_val = $2 & 1; //@line 28600
   HEAP8[$71 >> 0] = $$expand_i1_val; //@line 28601
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 28602
   HEAP32[$72 >> 2] = $4; //@line 28603
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 28604
   HEAP32[$73 >> 2] = $6; //@line 28605
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 28606
   HEAP32[$74 >> 2] = $18; //@line 28607
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 28608
   HEAP32[$75 >> 2] = $20; //@line 28609
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 28610
   HEAP32[$76 >> 2] = $68; //@line 28611
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 28612
   HEAP32[$77 >> 2] = $67; //@line 28613
   sp = STACKTOP; //@line 28614
   return;
  }
 }
 $79 = HEAP32[129] | 0; //@line 28618
 $80 = HEAP32[122] | 0; //@line 28619
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 28620
 FUNCTION_TABLE_vi[$79 & 511]($80); //@line 28621
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 28624
  sp = STACKTOP; //@line 28625
  return;
 }
 ___async_unwind = 0; //@line 28628
 HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 28629
 sp = STACKTOP; //@line 28630
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_195($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1351
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1353
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1355
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1359
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1361
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1363
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1365
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1367
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1369
 $19 = $8 + 12 | 0; //@line 1371
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 1372
 $20 = $10 + 12 | 0; //@line 1373
 $21 = HEAP32[$20 >> 2] | 0; //@line 1374
 if (!$21) {
  $34 = $12 + 12 | 0; //@line 1377
  HEAP32[$34 >> 2] = 0; //@line 1378
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 1379
  $35 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $8, $12, $18) | 0; //@line 1380
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 106; //@line 1383
   $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 1384
   HEAP32[$36 >> 2] = $34; //@line 1385
   $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 1386
   HEAP32[$37 >> 2] = $19; //@line 1387
   $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 1388
   HEAP32[$38 >> 2] = $12; //@line 1389
   $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 1390
   HEAP32[$39 >> 2] = $20; //@line 1391
   $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 1392
   HEAP32[$40 >> 2] = $8; //@line 1393
   $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 1394
   HEAP32[$41 >> 2] = $4; //@line 1395
   $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 1396
   HEAP32[$42 >> 2] = $2; //@line 1397
   sp = STACKTOP; //@line 1398
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 1402
  ___async_unwind = 0; //@line 1403
  HEAP32[$ReallocAsyncCtx9 >> 2] = 106; //@line 1404
  $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 1405
  HEAP32[$36 >> 2] = $34; //@line 1406
  $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 1407
  HEAP32[$37 >> 2] = $19; //@line 1408
  $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 1409
  HEAP32[$38 >> 2] = $12; //@line 1410
  $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 1411
  HEAP32[$39 >> 2] = $20; //@line 1412
  $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 1413
  HEAP32[$40 >> 2] = $8; //@line 1414
  $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 1415
  HEAP32[$41 >> 2] = $4; //@line 1416
  $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 1417
  HEAP32[$42 >> 2] = $2; //@line 1418
  sp = STACKTOP; //@line 1419
  return;
 } else {
  $24 = HEAP32[$21 + 4 >> 2] | 0; //@line 1423
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 1424
  FUNCTION_TABLE_vii[$24 & 7]($12, $4); //@line 1425
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 105; //@line 1428
   $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 1429
   HEAP32[$25 >> 2] = $20; //@line 1430
   $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 1431
   HEAP32[$26 >> 2] = $2; //@line 1432
   $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 1433
   HEAP32[$27 >> 2] = $4; //@line 1434
   $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 1435
   HEAP32[$28 >> 2] = $8; //@line 1436
   $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 1437
   HEAP32[$29 >> 2] = $19; //@line 1438
   $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 1439
   HEAP32[$30 >> 2] = $12; //@line 1440
   $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 1441
   HEAP32[$31 >> 2] = $14; //@line 1442
   $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 1443
   HEAP32[$32 >> 2] = $16; //@line 1444
   $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 1445
   HEAP32[$33 >> 2] = $18; //@line 1446
   sp = STACKTOP; //@line 1447
   return;
  }
  ___async_unwind = 0; //@line 1450
  HEAP32[$ReallocAsyncCtx5 >> 2] = 105; //@line 1451
  $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 1452
  HEAP32[$25 >> 2] = $20; //@line 1453
  $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 1454
  HEAP32[$26 >> 2] = $2; //@line 1455
  $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 1456
  HEAP32[$27 >> 2] = $4; //@line 1457
  $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 1458
  HEAP32[$28 >> 2] = $8; //@line 1459
  $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 1460
  HEAP32[$29 >> 2] = $19; //@line 1461
  $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 1462
  HEAP32[$30 >> 2] = $12; //@line 1463
  $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 1464
  HEAP32[$31 >> 2] = $14; //@line 1465
  $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 1466
  HEAP32[$32 >> 2] = $16; //@line 1467
  $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 1468
  HEAP32[$33 >> 2] = $18; //@line 1469
  sp = STACKTOP; //@line 1470
  return;
 }
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$unpack$i = 0, $$unpack4$i = 0, $15 = 0, $16 = 0, $20 = 0, $3 = 0, $30 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $5 = 0, $50 = 0, $55 = 0, $58 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10338
 STACKTOP = STACKTOP + 32 | 0; //@line 10339
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10339
 $3 = sp + 16 | 0; //@line 10340
 $4 = sp; //@line 10341
 $5 = $2 + 12 | 0; //@line 10342
 $6 = HEAP32[$5 >> 2] | 0; //@line 10343
 do {
  if (!$6) {
   $16 = 0; //@line 10347
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 10350
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 10351
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 10352
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 123; //@line 10355
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10357
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 10359
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 10361
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 10363
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 10365
    sp = STACKTOP; //@line 10366
    STACKTOP = sp; //@line 10367
    return 0; //@line 10367
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10369
    $16 = HEAP32[$5 >> 2] | 0; //@line 10371
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 10376
 HEAP32[$15 >> 2] = $16; //@line 10377
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 10380
 $$unpack4$i = HEAP32[$0 + 4 >> 2] | 0; //@line 10382
 $20 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 10384
 if (!($$unpack4$i & 1)) {
  $36 = $$unpack$i; //@line 10390
 } else {
  $36 = HEAP32[(HEAP32[$20 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 10395
 }
 do {
  if (!$16) {
   $41 = 0; //@line 10400
  } else {
   $30 = HEAP32[$16 + 4 >> 2] | 0; //@line 10403
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10404
   FUNCTION_TABLE_vii[$30 & 7]($3, $4); //@line 10405
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 124; //@line 10408
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 10410
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 10412
    HEAP32[$AsyncCtx2 + 12 >> 2] = $20; //@line 10414
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 10416
    HEAP32[$AsyncCtx2 + 20 >> 2] = $36; //@line 10418
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 10420
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 10422
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 10424
    sp = STACKTOP; //@line 10425
    STACKTOP = sp; //@line 10426
    return 0; //@line 10426
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10428
    $41 = HEAP32[$15 >> 2] | 0; //@line 10430
    break;
   }
  }
 } while (0);
 $40 = $3 + 12 | 0; //@line 10435
 HEAP32[$40 >> 2] = $41; //@line 10436
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10437
 $42 = FUNCTION_TABLE_iiii[$36 & 31]($20, $1, $3) | 0; //@line 10438
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 125; //@line 10441
  HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 10443
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 10445
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 10447
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 10449
  sp = STACKTOP; //@line 10450
  STACKTOP = sp; //@line 10451
  return 0; //@line 10451
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10453
 $47 = HEAP32[$40 >> 2] | 0; //@line 10454
 do {
  if ($47 | 0) {
   $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 10459
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10460
   FUNCTION_TABLE_vi[$50 & 511]($3); //@line 10461
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 126; //@line 10464
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 10466
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 10468
    HEAP32[$AsyncCtx9 + 12 >> 2] = $42; //@line 10470
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 10472
    sp = STACKTOP; //@line 10473
    STACKTOP = sp; //@line 10474
    return 0; //@line 10474
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10476
    break;
   }
  }
 } while (0);
 $55 = HEAP32[$15 >> 2] | 0; //@line 10481
 if (!$55) {
  STACKTOP = sp; //@line 10484
  return $42 | 0; //@line 10484
 }
 $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 10487
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10488
 FUNCTION_TABLE_vi[$58 & 511]($4); //@line 10489
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 127; //@line 10492
  HEAP32[$AsyncCtx13 + 4 >> 2] = $42; //@line 10494
  sp = STACKTOP; //@line 10495
  STACKTOP = sp; //@line 10496
  return 0; //@line 10496
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10498
 STACKTOP = sp; //@line 10499
 return $42 | 0; //@line 10499
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13962
 STACKTOP = STACKTOP + 32 | 0; //@line 13963
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13963
 $5 = sp + 16 | 0; //@line 13964
 $6 = sp; //@line 13965
 $7 = $2 + 12 | 0; //@line 13966
 $8 = HEAP32[$7 >> 2] | 0; //@line 13967
 do {
  if (!$8) {
   $20 = 0; //@line 13971
  } else {
   $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 13974
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 13975
   FUNCTION_TABLE_vii[$11 & 7]($5, $2); //@line 13976
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 164; //@line 13979
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 13981
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 13983
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 13985
    HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 13987
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 13989
    HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 13991
    HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 13993
    sp = STACKTOP; //@line 13994
    STACKTOP = sp; //@line 13995
    return 0; //@line 13995
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13997
    $20 = HEAP32[$7 >> 2] | 0; //@line 13999
    break;
   }
  }
 } while (0);
 $19 = $5 + 12 | 0; //@line 14004
 HEAP32[$19 >> 2] = $20; //@line 14005
 $21 = $3 + 12 | 0; //@line 14006
 $22 = HEAP32[$21 >> 2] | 0; //@line 14007
 do {
  if (!$22) {
   $34 = 0; //@line 14011
  } else {
   $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 14014
   $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14015
   FUNCTION_TABLE_vii[$25 & 7]($6, $3); //@line 14016
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 165; //@line 14019
    HEAP32[$AsyncCtx2 + 4 >> 2] = $21; //@line 14021
    HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 14023
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 14025
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 14027
    HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 14029
    HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 14031
    HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 14033
    sp = STACKTOP; //@line 14034
    STACKTOP = sp; //@line 14035
    return 0; //@line 14035
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14037
    $34 = HEAP32[$21 >> 2] | 0; //@line 14039
    break;
   }
  }
 } while (0);
 $33 = $6 + 12 | 0; //@line 14044
 HEAP32[$33 >> 2] = $34; //@line 14045
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14046
 $35 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $5, 0, $6, $4) | 0; //@line 14047
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 166; //@line 14050
  HEAP32[$AsyncCtx13 + 4 >> 2] = $33; //@line 14052
  HEAP32[$AsyncCtx13 + 8 >> 2] = $19; //@line 14054
  HEAP32[$AsyncCtx13 + 12 >> 2] = $6; //@line 14056
  HEAP32[$AsyncCtx13 + 16 >> 2] = $5; //@line 14058
  sp = STACKTOP; //@line 14059
  STACKTOP = sp; //@line 14060
  return 0; //@line 14060
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14062
 $40 = HEAP32[$33 >> 2] | 0; //@line 14063
 do {
  if ($40 | 0) {
   $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 14068
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14069
   FUNCTION_TABLE_vi[$43 & 511]($6); //@line 14070
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 167; //@line 14073
    HEAP32[$AsyncCtx6 + 4 >> 2] = $19; //@line 14075
    HEAP32[$AsyncCtx6 + 8 >> 2] = $35; //@line 14077
    HEAP32[$AsyncCtx6 + 12 >> 2] = $5; //@line 14079
    sp = STACKTOP; //@line 14080
    STACKTOP = sp; //@line 14081
    return 0; //@line 14081
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14083
    break;
   }
  }
 } while (0);
 $47 = HEAP32[$19 >> 2] | 0; //@line 14088
 if (!$47) {
  STACKTOP = sp; //@line 14091
  return $35 | 0; //@line 14091
 }
 $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 14094
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14095
 FUNCTION_TABLE_vi[$50 & 511]($5); //@line 14096
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 168; //@line 14099
  HEAP32[$AsyncCtx10 + 4 >> 2] = $35; //@line 14101
  sp = STACKTOP; //@line 14102
  STACKTOP = sp; //@line 14103
  return 0; //@line 14103
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14105
 STACKTOP = sp; //@line 14106
 return $35 | 0; //@line 14106
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$04 = 0, $11 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15987
 STACKTOP = STACKTOP + 32 | 0; //@line 15988
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15988
 $3 = sp + 16 | 0; //@line 15989
 $4 = sp; //@line 15990
 $7 = $2 + 12 | 0; //@line 15993
 $8 = HEAP32[$7 >> 2] | 0; //@line 15994
 $9 = ($8 | 0) == 0; //@line 15995
 if (!(HEAP32[2514] | 0)) {
  do {
   if ($9) {
    $30 = 0; //@line 15999
   } else {
    $24 = HEAP32[$8 + 4 >> 2] | 0; //@line 16002
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16003
    FUNCTION_TABLE_vii[$24 & 7]($4, $2); //@line 16004
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 207; //@line 16007
     HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 16009
     HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 16011
     HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 16013
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 16015
     sp = STACKTOP; //@line 16016
     STACKTOP = sp; //@line 16017
     return 0; //@line 16017
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16019
     $30 = HEAP32[$7 >> 2] | 0; //@line 16021
     break;
    }
   }
  } while (0);
  $29 = $4 + 12 | 0; //@line 16026
  HEAP32[$29 >> 2] = $30; //@line 16027
  $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16028
  $31 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $4) | 0; //@line 16029
  if (___async) {
   HEAP32[$AsyncCtx14 >> 2] = 208; //@line 16032
   HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 16034
   HEAP32[$AsyncCtx14 + 8 >> 2] = $4; //@line 16036
   sp = STACKTOP; //@line 16037
   STACKTOP = sp; //@line 16038
   return 0; //@line 16038
  }
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16040
  $34 = HEAP32[$29 >> 2] | 0; //@line 16041
  if (!$34) {
   $$04 = $31; //@line 16044
   STACKTOP = sp; //@line 16045
   return $$04 | 0; //@line 16045
  }
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 16048
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 16049
  FUNCTION_TABLE_vi[$37 & 511]($4); //@line 16050
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 209; //@line 16053
   HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 16055
   sp = STACKTOP; //@line 16056
   STACKTOP = sp; //@line 16057
   return 0; //@line 16057
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16059
  $$04 = $31; //@line 16060
  STACKTOP = sp; //@line 16061
  return $$04 | 0; //@line 16061
 } else {
  do {
   if ($9) {
    $16 = 0; //@line 16065
   } else {
    $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 16068
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16069
    FUNCTION_TABLE_vii[$11 & 7]($3, $2); //@line 16070
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 204; //@line 16073
     HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 16075
     HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 16077
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 16079
     sp = STACKTOP; //@line 16080
     STACKTOP = sp; //@line 16081
     return 0; //@line 16081
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16083
     $16 = HEAP32[$7 >> 2] | 0; //@line 16085
     break;
    }
   }
  } while (0);
  $15 = $3 + 12 | 0; //@line 16090
  HEAP32[$15 >> 2] = $16; //@line 16091
  $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16092
  __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(10044, $1, $3) | 0; //@line 16093
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 205; //@line 16096
   HEAP32[$AsyncCtx17 + 4 >> 2] = $15; //@line 16098
   HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 16100
   sp = STACKTOP; //@line 16101
   STACKTOP = sp; //@line 16102
   return 0; //@line 16102
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16104
  $19 = HEAP32[$15 >> 2] | 0; //@line 16105
  if (!$19) {
   $$04 = 0; //@line 16108
   STACKTOP = sp; //@line 16109
   return $$04 | 0; //@line 16109
  }
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 16112
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16113
  FUNCTION_TABLE_vi[$22 & 511]($3); //@line 16114
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 206; //@line 16117
   sp = STACKTOP; //@line 16118
   STACKTOP = sp; //@line 16119
   return 0; //@line 16119
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16121
  $$04 = 0; //@line 16122
  STACKTOP = sp; //@line 16123
  return $$04 | 0; //@line 16123
 }
 return 0; //@line 16125
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_200($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 1676
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1680
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1682
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1684
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1686
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1688
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1690
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1692
 $16 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1693
 if ($16 | 0) {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 1697
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 1698
  FUNCTION_TABLE_vi[$19 & 511]($6); //@line 1699
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 107; //@line 1702
   $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 1703
   HEAP32[$20 >> 2] = $4; //@line 1704
   $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 1705
   HEAP32[$21 >> 2] = $8; //@line 1706
   $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 1707
   HEAP32[$22 >> 2] = $10; //@line 1708
   $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 1709
   HEAP32[$23 >> 2] = $12; //@line 1710
   $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 1711
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 1712
   $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 1713
   HEAP32[$25 >> 2] = $14; //@line 1714
   sp = STACKTOP; //@line 1715
   return;
  }
  ___async_unwind = 0; //@line 1718
  HEAP32[$ReallocAsyncCtx6 >> 2] = 107; //@line 1719
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 1720
  HEAP32[$20 >> 2] = $4; //@line 1721
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 1722
  HEAP32[$21 >> 2] = $8; //@line 1723
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 1724
  HEAP32[$22 >> 2] = $10; //@line 1725
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 1726
  HEAP32[$23 >> 2] = $12; //@line 1727
  $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 1728
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 1729
  $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 1730
  HEAP32[$25 >> 2] = $14; //@line 1731
  sp = STACKTOP; //@line 1732
  return;
 }
 $26 = HEAP32[$4 >> 2] | 0; //@line 1735
 if ($26 | 0) {
  $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 1739
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 1740
  FUNCTION_TABLE_vi[$29 & 511]($10); //@line 1741
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 108; //@line 1744
   $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 1745
   HEAP32[$30 >> 2] = $8; //@line 1746
   $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 1747
   HEAP32[$31 >> 2] = $12; //@line 1748
   $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 1749
   HEAP32[$32 >> 2] = $AsyncRetVal; //@line 1750
   $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 1751
   HEAP32[$33 >> 2] = $14; //@line 1752
   sp = STACKTOP; //@line 1753
   return;
  }
  ___async_unwind = 0; //@line 1756
  HEAP32[$ReallocAsyncCtx7 >> 2] = 108; //@line 1757
  $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 1758
  HEAP32[$30 >> 2] = $8; //@line 1759
  $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 1760
  HEAP32[$31 >> 2] = $12; //@line 1761
  $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 1762
  HEAP32[$32 >> 2] = $AsyncRetVal; //@line 1763
  $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 1764
  HEAP32[$33 >> 2] = $14; //@line 1765
  sp = STACKTOP; //@line 1766
  return;
 }
 $34 = HEAP32[$8 >> 2] | 0; //@line 1769
 if (!$34) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 1773
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 1777
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 1778
 FUNCTION_TABLE_vi[$37 & 511]($12); //@line 1779
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 1782
  $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 1783
  HEAP32[$38 >> 2] = $12; //@line 1784
  $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 1785
  HEAP32[$39 >> 2] = $AsyncRetVal; //@line 1786
  $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 1787
  HEAP32[$40 >> 2] = $14; //@line 1788
  sp = STACKTOP; //@line 1789
  return;
 }
 ___async_unwind = 0; //@line 1792
 HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 1793
 $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 1794
 HEAP32[$38 >> 2] = $12; //@line 1795
 $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 1796
 HEAP32[$39 >> 2] = $AsyncRetVal; //@line 1797
 $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 1798
 HEAP32[$40 >> 2] = $14; //@line 1799
 sp = STACKTOP; //@line 1800
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_62($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14777
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14779
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14781
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14783
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14785
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14787
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14789
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14791
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14793
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14795
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14797
 $21 = $2 + 44 | 0; //@line 14798
 $22 = HEAP32[$21 >> 2] | 0; //@line 14799
 if ($22 | 0) {
  $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 14803
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 14804
  FUNCTION_TABLE_vii[$25 & 7]($18, $20); //@line 14805
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 14808
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 14809
   HEAP32[$26 >> 2] = $21; //@line 14810
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 14811
   HEAP32[$27 >> 2] = $14; //@line 14812
   $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 14813
   HEAP32[$28 >> 2] = $16; //@line 14814
   $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 14815
   HEAP32[$29 >> 2] = $10; //@line 14816
   $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 14817
   HEAP32[$30 >> 2] = $8; //@line 14818
   $31 = $ReallocAsyncCtx3 + 24 | 0; //@line 14819
   HEAP32[$31 >> 2] = $12; //@line 14820
   $32 = $ReallocAsyncCtx3 + 28 | 0; //@line 14821
   HEAP32[$32 >> 2] = $4; //@line 14822
   $33 = $ReallocAsyncCtx3 + 32 | 0; //@line 14823
   HEAP32[$33 >> 2] = $6; //@line 14824
   $34 = $ReallocAsyncCtx3 + 36 | 0; //@line 14825
   HEAP32[$34 >> 2] = $2; //@line 14826
   sp = STACKTOP; //@line 14827
   return;
  }
  ___async_unwind = 0; //@line 14830
  HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 14831
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 14832
  HEAP32[$26 >> 2] = $21; //@line 14833
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 14834
  HEAP32[$27 >> 2] = $14; //@line 14835
  $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 14836
  HEAP32[$28 >> 2] = $16; //@line 14837
  $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 14838
  HEAP32[$29 >> 2] = $10; //@line 14839
  $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 14840
  HEAP32[$30 >> 2] = $8; //@line 14841
  $31 = $ReallocAsyncCtx3 + 24 | 0; //@line 14842
  HEAP32[$31 >> 2] = $12; //@line 14843
  $32 = $ReallocAsyncCtx3 + 28 | 0; //@line 14844
  HEAP32[$32 >> 2] = $4; //@line 14845
  $33 = $ReallocAsyncCtx3 + 32 | 0; //@line 14846
  HEAP32[$33 >> 2] = $6; //@line 14847
  $34 = $ReallocAsyncCtx3 + 36 | 0; //@line 14848
  HEAP32[$34 >> 2] = $2; //@line 14849
  sp = STACKTOP; //@line 14850
  return;
 }
 HEAP32[$14 >> 2] = 0; //@line 14853
 $$pre = HEAP32[$16 >> 2] | 0; //@line 14854
 HEAP32[$$pre + 16 >> 2] = HEAP32[$10 >> 2]; //@line 14858
 HEAP32[$8 + 8 >> 2] = 0; //@line 14860
 HEAP32[$8 >> 2] = 218; //@line 14861
 HEAP32[$8 + 4 >> 2] = $$pre; //@line 14863
 $39 = $8 + 12 | 0; //@line 14864
 HEAP32[$39 >> 2] = 724; //@line 14865
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 14866
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $8); //@line 14867
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 219; //@line 14870
  $40 = $ReallocAsyncCtx10 + 4 | 0; //@line 14871
  HEAP32[$40 >> 2] = $39; //@line 14872
  $41 = $ReallocAsyncCtx10 + 8 | 0; //@line 14873
  HEAP32[$41 >> 2] = $4; //@line 14874
  $42 = $ReallocAsyncCtx10 + 12 | 0; //@line 14875
  HEAP32[$42 >> 2] = $6; //@line 14876
  $43 = $ReallocAsyncCtx10 + 16 | 0; //@line 14877
  HEAP32[$43 >> 2] = $8; //@line 14878
  $44 = $ReallocAsyncCtx10 + 20 | 0; //@line 14879
  HEAP32[$44 >> 2] = $2; //@line 14880
  sp = STACKTOP; //@line 14881
  return;
 }
 ___async_unwind = 0; //@line 14884
 HEAP32[$ReallocAsyncCtx10 >> 2] = 219; //@line 14885
 $40 = $ReallocAsyncCtx10 + 4 | 0; //@line 14886
 HEAP32[$40 >> 2] = $39; //@line 14887
 $41 = $ReallocAsyncCtx10 + 8 | 0; //@line 14888
 HEAP32[$41 >> 2] = $4; //@line 14889
 $42 = $ReallocAsyncCtx10 + 12 | 0; //@line 14890
 HEAP32[$42 >> 2] = $6; //@line 14891
 $43 = $ReallocAsyncCtx10 + 16 | 0; //@line 14892
 HEAP32[$43 >> 2] = $8; //@line 14893
 $44 = $ReallocAsyncCtx10 + 20 | 0; //@line 14894
 HEAP32[$44 >> 2] = $2; //@line 14895
 sp = STACKTOP; //@line 14896
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_135($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27675
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27677
 $3 = HEAP32[$2 >> 2] | 0; //@line 27678
 $5 = HEAP32[$3 + 56 >> 2] | 0; //@line 27680
 if ($5 | 0) {
  $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0; //@line 27685
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 27686
  FUNCTION_TABLE_vi[$9 & 511]($5); //@line 27687
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 254; //@line 27690
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 27691
   HEAP32[$10 >> 2] = $2; //@line 27692
   sp = STACKTOP; //@line 27693
   return;
  }
  ___async_unwind = 0; //@line 27696
  HEAP32[$ReallocAsyncCtx >> 2] = 254; //@line 27697
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 27698
  HEAP32[$10 >> 2] = $2; //@line 27699
  sp = STACKTOP; //@line 27700
  return;
 }
 $12 = HEAP32[$3 + 60 >> 2] | 0; //@line 27704
 do {
  if (!$12) {
   $22 = $3; //@line 27708
  } else {
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 27711
   if (!$15) {
    __ZdlPv($12); //@line 27714
    $22 = HEAP32[$2 >> 2] | 0; //@line 27716
    break;
   }
   $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 27720
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 27721
   FUNCTION_TABLE_vi[$18 & 511]($12); //@line 27722
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 255; //@line 27725
    $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 27726
    HEAP32[$19 >> 2] = $2; //@line 27727
    $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 27728
    HEAP32[$20 >> 2] = $12; //@line 27729
    sp = STACKTOP; //@line 27730
    return;
   }
   ___async_unwind = 0; //@line 27733
   HEAP32[$ReallocAsyncCtx2 >> 2] = 255; //@line 27734
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 27735
   HEAP32[$19 >> 2] = $2; //@line 27736
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 27737
   HEAP32[$20 >> 2] = $12; //@line 27738
   sp = STACKTOP; //@line 27739
   return;
  }
 } while (0);
 $23 = HEAP32[$22 + 64 >> 2] | 0; //@line 27744
 if (!$23) {
  $26 = $22; //@line 27747
 } else {
  __ZdaPv($23); //@line 27749
  $26 = HEAP32[$2 >> 2] | 0; //@line 27751
 }
 $27 = HEAP32[$26 + 12 >> 2] | 0; //@line 27754
 if (!$27) {
  $30 = $26; //@line 27757
 } else {
  __ZdlPv($27); //@line 27759
  $30 = HEAP32[$2 >> 2] | 0; //@line 27761
 }
 do {
  if ($30 | 0) {
   $32 = HEAP32[$30 + 44 >> 2] | 0; //@line 27767
   if ($32 | 0) {
    $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 27772
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27773
    FUNCTION_TABLE_vi[$36 & 511]($30 + 32 | 0); //@line 27774
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 256; //@line 27777
     $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 27778
     HEAP32[$37 >> 2] = $30; //@line 27779
     $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 27780
     HEAP32[$38 >> 2] = $2; //@line 27781
     sp = STACKTOP; //@line 27782
     return;
    }
    ___async_unwind = 0; //@line 27785
    HEAP32[$ReallocAsyncCtx3 >> 2] = 256; //@line 27786
    $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 27787
    HEAP32[$37 >> 2] = $30; //@line 27788
    $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 27789
    HEAP32[$38 >> 2] = $2; //@line 27790
    sp = STACKTOP; //@line 27791
    return;
   }
   $40 = HEAP32[$30 + 28 >> 2] | 0; //@line 27795
   if (!$40) {
    __ZdlPv($30); //@line 27798
    break;
   }
   $44 = HEAP32[$40 + 8 >> 2] | 0; //@line 27803
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27804
   FUNCTION_TABLE_vi[$44 & 511]($30 + 16 | 0); //@line 27805
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 27808
    $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 27809
    HEAP32[$45 >> 2] = $30; //@line 27810
    $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 27811
    HEAP32[$46 >> 2] = $2; //@line 27812
    sp = STACKTOP; //@line 27813
    return;
   }
   ___async_unwind = 0; //@line 27816
   HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 27817
   $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 27818
   HEAP32[$45 >> 2] = $30; //@line 27819
   $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 27820
   HEAP32[$46 >> 2] = $2; //@line 27821
   sp = STACKTOP; //@line 27822
   return;
  }
 } while (0);
 HEAP32[$2 >> 2] = 0; //@line 27826
 HEAP32[___async_retval >> 2] = 0; //@line 27828
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_19($0) {
 $0 = $0 | 0;
 var $$010 = 0, $$expand_i1_val = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11576
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11578
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11580
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11582
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11584
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11586
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11588
 if (!$AsyncRetVal) {
  $28 = 0 == 0; //@line 11591
  $29 = HEAP32[$2 >> 2] | 0; //@line 11592
  if (!$29) {
   if ($28) {
    $$010 = -3007; //@line 11596
    $34 = ___async_retval; //@line 11597
    HEAP32[$34 >> 2] = $$010; //@line 11598
    return;
   }
   $$010 = 0; //@line 11601
   $34 = ___async_retval; //@line 11602
   HEAP32[$34 >> 2] = $$010; //@line 11603
   return;
  } else {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 11607
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 11608
   FUNCTION_TABLE_vi[$32 & 511]($8); //@line 11609
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 11612
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 11613
    $$expand_i1_val = $28 & 1; //@line 11614
    HEAP8[$33 >> 0] = $$expand_i1_val; //@line 11615
    sp = STACKTOP; //@line 11616
    return;
   }
   ___async_unwind = 0; //@line 11619
   HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 11620
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 11621
   $$expand_i1_val = $28 & 1; //@line 11622
   HEAP8[$33 >> 0] = $$expand_i1_val; //@line 11623
   sp = STACKTOP; //@line 11624
   return;
  }
 } else {
  $13 = HEAP32[$2 >> 2] | 0; //@line 11628
  if (!$13) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 11632
   _equeue_event_delay($AsyncRetVal, $4); //@line 11633
   _equeue_event_dtor($AsyncRetVal, 114); //@line 11634
   $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 11635
   $24 = _equeue_post($6, 115, $AsyncRetVal) | 0; //@line 11636
   if (___async) {
    HEAP32[$ReallocAsyncCtx8 >> 2] = 116; //@line 11639
    $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 11640
    HEAP32[$25 >> 2] = $2; //@line 11641
    $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 11642
    HEAP32[$26 >> 2] = $8; //@line 11643
    sp = STACKTOP; //@line 11644
    return;
   }
   HEAP32[___async_retval >> 2] = $24; //@line 11648
   ___async_unwind = 0; //@line 11649
   HEAP32[$ReallocAsyncCtx8 >> 2] = 116; //@line 11650
   $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 11651
   HEAP32[$25 >> 2] = $2; //@line 11652
   $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 11653
   HEAP32[$26 >> 2] = $8; //@line 11654
   sp = STACKTOP; //@line 11655
   return;
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 11659
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 11660
   FUNCTION_TABLE_vii[$16 & 7]($AsyncRetVal, $8); //@line 11661
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 11664
    $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 11665
    HEAP32[$17 >> 2] = $10; //@line 11666
    $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 11667
    HEAP32[$18 >> 2] = $AsyncRetVal; //@line 11668
    $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 11669
    HEAP32[$19 >> 2] = $4; //@line 11670
    $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 11671
    HEAP32[$20 >> 2] = $6; //@line 11672
    $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 11673
    HEAP32[$21 >> 2] = $2; //@line 11674
    $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 11675
    HEAP32[$22 >> 2] = $8; //@line 11676
    sp = STACKTOP; //@line 11677
    return;
   }
   ___async_unwind = 0; //@line 11680
   HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 11681
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 11682
   HEAP32[$17 >> 2] = $10; //@line 11683
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 11684
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 11685
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 11686
   HEAP32[$19 >> 2] = $4; //@line 11687
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 11688
   HEAP32[$20 >> 2] = $6; //@line 11689
   $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 11690
   HEAP32[$21 >> 2] = $2; //@line 11691
   $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 11692
   HEAP32[$22 >> 2] = $8; //@line 11693
   sp = STACKTOP; //@line 11694
   return;
  }
 }
}
function __ZNK13SocketAddress14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $23 = 0, $31 = 0, $39 = 0, $47 = 0, $55 = 0, $63 = 0, $71 = 0, $79 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 11745
 STACKTOP = STACKTOP + 80 | 0; //@line 11746
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 11746
 $vararg_buffer32 = sp + 72 | 0; //@line 11747
 $vararg_buffer28 = sp + 64 | 0; //@line 11748
 $vararg_buffer24 = sp + 56 | 0; //@line 11749
 $vararg_buffer20 = sp + 48 | 0; //@line 11750
 $vararg_buffer16 = sp + 40 | 0; //@line 11751
 $vararg_buffer12 = sp + 32 | 0; //@line 11752
 $vararg_buffer8 = sp + 24 | 0; //@line 11753
 $vararg_buffer4 = sp + 16 | 0; //@line 11754
 $vararg_buffer = sp; //@line 11755
 $2 = HEAP32[$0 + 40 >> 2] | 0; //@line 11757
 if (!$2) {
  $$0 = 0; //@line 11760
  STACKTOP = sp; //@line 11761
  return $$0 | 0; //@line 11761
 }
 if (HEAP8[$0 >> 0] | 0) {
  $$0 = $0; //@line 11766
  STACKTOP = sp; //@line 11767
  return $$0 | 0; //@line 11767
 }
 switch ($2 | 0) {
 case 1:
  {
   $11 = HEAPU8[$0 + 45 >> 0] | 0; //@line 11776
   $14 = HEAPU8[$0 + 46 >> 0] | 0; //@line 11779
   $17 = HEAPU8[$0 + 47 >> 0] | 0; //@line 11782
   HEAP32[$vararg_buffer >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 11783
   HEAP32[$vararg_buffer + 4 >> 2] = $11; //@line 11785
   HEAP32[$vararg_buffer + 8 >> 2] = $14; //@line 11787
   HEAP32[$vararg_buffer + 12 >> 2] = $17; //@line 11789
   _sprintf($0, 5845, $vararg_buffer) | 0; //@line 11790
   $$0 = $0; //@line 11791
   STACKTOP = sp; //@line 11792
   return $$0 | 0; //@line 11792
  }
 case 2:
  {
   $23 = HEAPU8[$0 + 45 >> 0] | 0; //@line 11801
   HEAP32[$vararg_buffer4 >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 11802
   HEAP32[$vararg_buffer4 + 4 >> 2] = $23; //@line 11804
   _sprintf($0, 5857, $vararg_buffer4) | 0; //@line 11805
   HEAP8[$0 + 4 >> 0] = 58; //@line 11807
   $31 = HEAPU8[$0 + 47 >> 0] | 0; //@line 11814
   HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$0 + 46 >> 0]; //@line 11815
   HEAP32[$vararg_buffer8 + 4 >> 2] = $31; //@line 11817
   _sprintf($0 + 5 | 0, 5857, $vararg_buffer8) | 0; //@line 11818
   HEAP8[$0 + 9 >> 0] = 58; //@line 11820
   $39 = HEAPU8[$0 + 49 >> 0] | 0; //@line 11827
   HEAP32[$vararg_buffer12 >> 2] = HEAPU8[$0 + 48 >> 0]; //@line 11828
   HEAP32[$vararg_buffer12 + 4 >> 2] = $39; //@line 11830
   _sprintf($0 + 10 | 0, 5857, $vararg_buffer12) | 0; //@line 11831
   HEAP8[$0 + 14 >> 0] = 58; //@line 11833
   $47 = HEAPU8[$0 + 51 >> 0] | 0; //@line 11840
   HEAP32[$vararg_buffer16 >> 2] = HEAPU8[$0 + 50 >> 0]; //@line 11841
   HEAP32[$vararg_buffer16 + 4 >> 2] = $47; //@line 11843
   _sprintf($0 + 15 | 0, 5857, $vararg_buffer16) | 0; //@line 11844
   HEAP8[$0 + 19 >> 0] = 58; //@line 11846
   $55 = HEAPU8[$0 + 53 >> 0] | 0; //@line 11853
   HEAP32[$vararg_buffer20 >> 2] = HEAPU8[$0 + 52 >> 0]; //@line 11854
   HEAP32[$vararg_buffer20 + 4 >> 2] = $55; //@line 11856
   _sprintf($0 + 20 | 0, 5857, $vararg_buffer20) | 0; //@line 11857
   HEAP8[$0 + 24 >> 0] = 58; //@line 11859
   $63 = HEAPU8[$0 + 55 >> 0] | 0; //@line 11866
   HEAP32[$vararg_buffer24 >> 2] = HEAPU8[$0 + 54 >> 0]; //@line 11867
   HEAP32[$vararg_buffer24 + 4 >> 2] = $63; //@line 11869
   _sprintf($0 + 25 | 0, 5857, $vararg_buffer24) | 0; //@line 11870
   HEAP8[$0 + 29 >> 0] = 58; //@line 11872
   $71 = HEAPU8[$0 + 57 >> 0] | 0; //@line 11879
   HEAP32[$vararg_buffer28 >> 2] = HEAPU8[$0 + 56 >> 0]; //@line 11880
   HEAP32[$vararg_buffer28 + 4 >> 2] = $71; //@line 11882
   _sprintf($0 + 30 | 0, 5857, $vararg_buffer28) | 0; //@line 11883
   HEAP8[$0 + 34 >> 0] = 58; //@line 11885
   $79 = HEAPU8[$0 + 59 >> 0] | 0; //@line 11892
   HEAP32[$vararg_buffer32 >> 2] = HEAPU8[$0 + 58 >> 0]; //@line 11893
   HEAP32[$vararg_buffer32 + 4 >> 2] = $79; //@line 11895
   _sprintf($0 + 35 | 0, 5857, $vararg_buffer32) | 0; //@line 11896
   HEAP8[$0 + 39 >> 0] = 0; //@line 11898
   $$0 = $0; //@line 11899
   STACKTOP = sp; //@line 11900
   return $$0 | 0; //@line 11900
  }
 default:
  {
   $$0 = $0; //@line 11904
   STACKTOP = sp; //@line 11905
   return $$0 | 0; //@line 11905
  }
 }
 return 0; //@line 11908
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $$unpack$i = 0, $$unpack4$i = 0, $10 = 0, $11 = 0, $15 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10219
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10221
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10223
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10225
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10229
 $$pre$i = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 10230
 $11 = $2 + 12 | 0; //@line 10231
 HEAP32[$11 >> 2] = $$pre$i; //@line 10232
 $$unpack$i = HEAP32[$10 >> 2] | 0; //@line 10235
 $$unpack4$i = HEAP32[$10 + 4 >> 2] | 0; //@line 10237
 $15 = (HEAP32[$10 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 10239
 $18 = $$pre$i; //@line 10242
 if (!($$unpack4$i & 1)) {
  $31 = $$unpack$i; //@line 10245
 } else {
  $31 = HEAP32[(HEAP32[$15 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 10250
 }
 if (!$$pre$i) {
  $35 = $4 + 12 | 0; //@line 10254
  HEAP32[$35 >> 2] = 0; //@line 10255
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 10256
  $36 = FUNCTION_TABLE_iiii[$31 & 31]($15, $6, $4) | 0; //@line 10257
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 125; //@line 10260
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 10261
   HEAP32[$37 >> 2] = $35; //@line 10262
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 10263
   HEAP32[$38 >> 2] = $4; //@line 10264
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 10265
   HEAP32[$39 >> 2] = $11; //@line 10266
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 10267
   HEAP32[$40 >> 2] = $2; //@line 10268
   sp = STACKTOP; //@line 10269
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 10273
  ___async_unwind = 0; //@line 10274
  HEAP32[$ReallocAsyncCtx3 >> 2] = 125; //@line 10275
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 10276
  HEAP32[$37 >> 2] = $35; //@line 10277
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 10278
  HEAP32[$38 >> 2] = $4; //@line 10279
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 10280
  HEAP32[$39 >> 2] = $11; //@line 10281
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 10282
  HEAP32[$40 >> 2] = $2; //@line 10283
  sp = STACKTOP; //@line 10284
  return;
 } else {
  $25 = HEAP32[$18 + 4 >> 2] | 0; //@line 10288
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 10289
  FUNCTION_TABLE_vii[$25 & 7]($4, $2); //@line 10290
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 124; //@line 10293
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 10294
   HEAP32[$26 >> 2] = $11; //@line 10295
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 10296
   HEAP32[$27 >> 2] = $4; //@line 10297
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 10298
   HEAP32[$28 >> 2] = $15; //@line 10299
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 10300
   HEAP32[$29 >> 2] = $6; //@line 10301
   $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 10302
   HEAP32[$30 >> 2] = $31; //@line 10303
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 10304
   HEAP32[$32 >> 2] = $4; //@line 10305
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 10306
   HEAP32[$33 >> 2] = $11; //@line 10307
   $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 10308
   HEAP32[$34 >> 2] = $2; //@line 10309
   sp = STACKTOP; //@line 10310
   return;
  }
  ___async_unwind = 0; //@line 10313
  HEAP32[$ReallocAsyncCtx2 >> 2] = 124; //@line 10314
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 10315
  HEAP32[$26 >> 2] = $11; //@line 10316
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 10317
  HEAP32[$27 >> 2] = $4; //@line 10318
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 10319
  HEAP32[$28 >> 2] = $15; //@line 10320
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 10321
  HEAP32[$29 >> 2] = $6; //@line 10322
  $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 10323
  HEAP32[$30 >> 2] = $31; //@line 10324
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 10325
  HEAP32[$32 >> 2] = $4; //@line 10326
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 10327
  HEAP32[$33 >> 2] = $11; //@line 10328
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 10329
  HEAP32[$34 >> 2] = $2; //@line 10330
  sp = STACKTOP; //@line 10331
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_52($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13944
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13946
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13948
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13950
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13952
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13954
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13956
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13958
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13960
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 13963
 $20 = HEAP8[$0 + 37 >> 0] & 1; //@line 13966
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 13968
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 13970
 $26 = HEAP8[$0 + 48 >> 0] & 1; //@line 13973
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 13975
 L2 : do {
  if (!(HEAP8[$2 >> 0] | 0)) {
   do {
    if (!(HEAP8[$24 >> 0] | 0)) {
     $$182$off0 = $20; //@line 13984
     $$186$off0 = $18; //@line 13984
    } else {
     if (!(HEAP8[$8 >> 0] | 0)) {
      if (!(HEAP32[$6 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $18; //@line 13993
       $$283$off0 = 1; //@line 13993
       label = 13; //@line 13994
       break L2;
      } else {
       $$182$off0 = 1; //@line 13997
       $$186$off0 = $18; //@line 13997
       break;
      }
     }
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      label = 18; //@line 14004
      break L2;
     }
     if (!(HEAP32[$6 >> 2] & 2)) {
      label = 18; //@line 14011
      break L2;
     } else {
      $$182$off0 = 1; //@line 14014
      $$186$off0 = 1; //@line 14014
     }
    }
   } while (0);
   $30 = $22 + 8 | 0; //@line 14018
   if ($30 >>> 0 < $28 >>> 0) {
    HEAP8[$8 >> 0] = 0; //@line 14021
    HEAP8[$24 >> 0] = 0; //@line 14022
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 14023
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $16, $12, $12, 1, $26); //@line 14024
    if (!___async) {
     ___async_unwind = 0; //@line 14027
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 346; //@line 14029
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 14031
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 14033
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 14035
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 14037
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 14039
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 14041
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 14043
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 14045
    HEAP8[$ReallocAsyncCtx5 + 36 >> 0] = $$186$off0 & 1; //@line 14048
    HEAP8[$ReallocAsyncCtx5 + 37 >> 0] = $$182$off0 & 1; //@line 14051
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $30; //@line 14053
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 14055
    HEAP8[$ReallocAsyncCtx5 + 48 >> 0] = $26 & 1; //@line 14058
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 14060
    sp = STACKTOP; //@line 14061
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 14064
    $$283$off0 = $$182$off0; //@line 14064
    label = 13; //@line 14065
   }
  } else {
   $$085$off0$reg2mem$0 = $18; //@line 14068
   $$283$off0 = $20; //@line 14068
   label = 13; //@line 14069
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$14 >> 2] = $12; //@line 14075
    $59 = $16 + 40 | 0; //@line 14076
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 14079
    if ((HEAP32[$16 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 2) {
      HEAP8[$2 >> 0] = 1; //@line 14087
      if ($$283$off0) {
       label = 18; //@line 14089
       break;
      } else {
       $67 = 4; //@line 14092
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 14099
   } else {
    $67 = 4; //@line 14101
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 14106
 }
 HEAP32[$4 >> 2] = $67; //@line 14108
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_18($0) {
 $0 = $0 | 0;
 var $$010 = 0, $$expand_i1_val = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11455
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11457
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11459
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11461
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11463
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11465
 if (!$AsyncRetVal) {
  $25 = 0 == 0; //@line 11468
  $26 = HEAP32[$2 >> 2] | 0; //@line 11469
  if (!$26) {
   if ($25) {
    $$010 = -3007; //@line 11473
    $31 = ___async_retval; //@line 11474
    HEAP32[$31 >> 2] = $$010; //@line 11475
    return;
   }
   $$010 = 0; //@line 11478
   $31 = ___async_retval; //@line 11479
   HEAP32[$31 >> 2] = $$010; //@line 11480
   return;
  } else {
   $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 11484
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11485
   FUNCTION_TABLE_vi[$29 & 511]($6); //@line 11486
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 122; //@line 11489
    $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 11490
    $$expand_i1_val = $25 & 1; //@line 11491
    HEAP8[$30 >> 0] = $$expand_i1_val; //@line 11492
    sp = STACKTOP; //@line 11493
    return;
   }
   ___async_unwind = 0; //@line 11496
   HEAP32[$ReallocAsyncCtx6 >> 2] = 122; //@line 11497
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 11498
   $$expand_i1_val = $25 & 1; //@line 11499
   HEAP8[$30 >> 0] = $$expand_i1_val; //@line 11500
   sp = STACKTOP; //@line 11501
   return;
  }
 } else {
  $11 = HEAP32[$2 >> 2] | 0; //@line 11505
  if (!$11) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 11509
   _equeue_event_dtor($AsyncRetVal, 114); //@line 11510
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 11511
   $21 = _equeue_post($4, 115, $AsyncRetVal) | 0; //@line 11512
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 121; //@line 11515
    $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 11516
    HEAP32[$22 >> 2] = $2; //@line 11517
    $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 11518
    HEAP32[$23 >> 2] = $6; //@line 11519
    sp = STACKTOP; //@line 11520
    return;
   }
   HEAP32[___async_retval >> 2] = $21; //@line 11524
   ___async_unwind = 0; //@line 11525
   HEAP32[$ReallocAsyncCtx7 >> 2] = 121; //@line 11526
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 11527
   HEAP32[$22 >> 2] = $2; //@line 11528
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 11529
   HEAP32[$23 >> 2] = $6; //@line 11530
   sp = STACKTOP; //@line 11531
   return;
  } else {
   $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 11535
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 11536
   FUNCTION_TABLE_vii[$14 & 7]($AsyncRetVal, $6); //@line 11537
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 120; //@line 11540
    $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 11541
    HEAP32[$15 >> 2] = $8; //@line 11542
    $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 11543
    HEAP32[$16 >> 2] = $AsyncRetVal; //@line 11544
    $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 11545
    HEAP32[$17 >> 2] = $4; //@line 11546
    $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 11547
    HEAP32[$18 >> 2] = $2; //@line 11548
    $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 11549
    HEAP32[$19 >> 2] = $6; //@line 11550
    sp = STACKTOP; //@line 11551
    return;
   }
   ___async_unwind = 0; //@line 11554
   HEAP32[$ReallocAsyncCtx5 >> 2] = 120; //@line 11555
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 11556
   HEAP32[$15 >> 2] = $8; //@line 11557
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 11558
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 11559
   $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 11560
   HEAP32[$17 >> 2] = $4; //@line 11561
   $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 11562
   HEAP32[$18 >> 2] = $2; //@line 11563
   $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 11564
   HEAP32[$19 >> 2] = $6; //@line 11565
   sp = STACKTOP; //@line 11566
   return;
  }
 }
}
function _sn_coap_builder_options_build_add_multiple_option($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$i = 0, $$012$lcssa$i10 = 0, $$01213$i = 0, $$014$i = 0, $$02441$i = 0, $$02540$i = 0, $$02542$i = 0, $$02641$i = 0, $$028$lcssa$i$ph = 0, $$02839$i = 0, $$03138$i = 0, $$03139$i = 0, $$07$us = 0, $$126$i = 0, $$127$i = 0, $$129$i = 0, $13 = 0, $15 = 0, $27 = 0, $29 = 0, $34 = 0, $39 = 0, $49 = 0, $5 = 0, $50 = 0, $61 = 0, $66 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $or$cond$i3 = 0, $phitmp$i = 0, $wide$trip$count = 0;
 $5 = HEAP32[$1 >> 2] | 0; //@line 5019
 if (!$5) {
  return;
 }
 $7 = HEAP16[$2 >> 1] | 0; //@line 5024
 $9 = ($7 & 65535) + -1 | 0; //@line 5026
 if (($7 & 65535) > 2) {
  $13 = ($3 | 0) == 11 | ($3 | 0) == 8 ? 47 : 38; //@line 5032
  $$01213$i = 0; //@line 5033
  $$014$i = 1; //@line 5033
  $15 = 1; //@line 5033
  do {
   $$01213$i = $$01213$i + (($13 | 0) == (HEAPU8[$5 + $15 >> 0] | 0) & 1) << 24 >> 24; //@line 5040
   $$014$i = $$014$i + 1 << 16 >> 16; //@line 5041
   $15 = $$014$i & 65535; //@line 5042
  } while (($9 | 0) > ($15 | 0));
  $phitmp$i = $$01213$i + 1 << 24 >> 24; //@line 5050
  if (!($phitmp$i << 24 >> 24)) {
   return;
  } else {
   $$012$lcssa$i10 = $phitmp$i; //@line 5055
  }
 } else {
  $$012$lcssa$i10 = 1; //@line 5058
 }
 $or$cond$i3 = ($3 | 0) == 11 | ($3 | 0) == 8; //@line 5063
 $$$i = $or$cond$i3 ? 47 : 38; //@line 5064
 $27 = $or$cond$i3 ? 47 : 38; //@line 5065
 if (!($7 << 16 >> 16)) {
  $$07$us = 0; //@line 5067
  do {
   if (!($$07$us << 24 >> 24)) {
    $29 = HEAP8[$5 >> 0] | 0; //@line 5071
    $34 = ($29 << 24 >> 24 == 0 ? 1 : $29 << 24 >> 24 == $$$i << 24 >> 24) & 1; //@line 5076
   } else {
    $34 = 65535; //@line 5078
   }
   _sn_coap_builder_options_build_add_one_option($0, 0, (HEAP32[$1 >> 2] | 0) + $34 | 0, $3, $4) | 0; //@line 5082
   $$07$us = $$07$us + 1 << 24 >> 24; //@line 5083
  } while (($$07$us & 255) < ($$012$lcssa$i10 & 255));
  return;
 }
 $wide$trip$count = $$012$lcssa$i10 & 255; //@line 5093
 $indvars$iv = 0; //@line 5094
 do {
  $$02441$i = 0; //@line 5096
  $$02540$i = 0; //@line 5096
  $$02839$i = 0; //@line 5096
  $$03138$i = $5; //@line 5096
  while (1) {
   $39 = ($27 | 0) != (HEAPU8[$$03138$i >> 0] | 0); //@line 5100
   if ($$02839$i << 16 >> 16 == 0 | $39) {
    $$126$i = $$02540$i; //@line 5106
    $$129$i = $$02839$i + ($39 & 1) << 16 >> 16; //@line 5106
   } else {
    if (($indvars$iv | 0) == ($$02540$i & 255 | 0)) {
     $$028$lcssa$i$ph = $$02839$i; //@line 5111
     break;
    }
    $$126$i = $$02540$i + 1 << 24 >> 24; //@line 5115
    $$129$i = 0; //@line 5115
   }
   $$02441$i = $$02441$i + 1 << 16 >> 16; //@line 5118
   if (($$02441$i & 65535) >= ($7 & 65535)) {
    $$028$lcssa$i$ph = $$129$i; //@line 5123
    break;
   } else {
    $$02540$i = $$126$i; //@line 5121
    $$02839$i = $$129$i; //@line 5121
    $$03138$i = $$03138$i + 1 | 0; //@line 5121
   }
  }
  L29 : do {
   if (!$indvars$iv) {
    $50 = HEAP8[$5 >> 0] | 0; //@line 5130
    $66 = ($50 << 24 >> 24 == 0 ? 1 : $50 << 24 >> 24 == $$$i << 24 >> 24) & 1; //@line 5135
   } else {
    $49 = $indvars$iv + -1 | 0; //@line 5137
    $$02542$i = 0; //@line 5138
    $$02641$i = 0; //@line 5138
    $$03139$i = $5; //@line 5138
    while (1) {
     if ($$02542$i << 16 >> 16 == 0 ? 1 : (HEAP8[$$03139$i >> 0] | 0) != $$$i << 24 >> 24) {
      $$127$i = $$02641$i; //@line 5145
     } else {
      if (($49 | 0) == ($$02641$i & 255 | 0)) {
       break;
      }
      $$127$i = $$02641$i + 1 << 24 >> 24; //@line 5153
     }
     $61 = $$02542$i + 1 << 16 >> 16; //@line 5155
     if (($61 & 65535) < ($7 & 65535)) {
      $$02542$i = $61; //@line 5159
      $$02641$i = $$127$i; //@line 5159
      $$03139$i = $$03139$i + 1 | 0; //@line 5159
     } else {
      $66 = 65535; //@line 5161
      break L29;
     }
    }
    $66 = ($$02542$i & 65535) + 1 | 0; //@line 5167
   }
  } while (0);
  _sn_coap_builder_options_build_add_one_option($0, $$028$lcssa$i$ph, (HEAP32[$1 >> 2] | 0) + ($66 & 65535) | 0, $3, $4) | 0; //@line 5173
  $indvars$iv = $indvars$iv + 1 | 0; //@line 5174
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 3563
 $3 = HEAP32[$2 >> 2] | 0; //@line 3564
 $4 = $0 + 100 | 0; //@line 3565
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 3570
  $11 = HEAPU8[$3 >> 0] | 0; //@line 3573
 } else {
  $11 = ___shgetc($0) | 0; //@line 3576
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 3581
   $14 = HEAP32[$2 >> 2] | 0; //@line 3582
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 3587
    $22 = HEAPU8[$14 >> 0] | 0; //@line 3590
   } else {
    $22 = ___shgetc($0) | 0; //@line 3593
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 3603
     $$049 = $22; //@line 3603
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 3607
     $$0 = $13; //@line 3608
     $$049 = $22; //@line 3608
    }
   } else {
    $$0 = $13; //@line 3611
    $$049 = $22; //@line 3611
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 3616
   $$049 = $11; //@line 3616
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 3625
   $101 = 0; //@line 3625
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 3629
   $100 = -2147483648; //@line 3630
   $101 = 0; //@line 3630
  }
 } else {
  $$04860 = 0; //@line 3633
  $$159 = $$049; //@line 3633
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 3637
   $38 = HEAP32[$2 >> 2] | 0; //@line 3638
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 3643
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 3646
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 3649
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 3656
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 3662
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 3666
   $55 = $$04860; //@line 3666
   $56 = $50; //@line 3666
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 3668
    $58 = tempRet0; //@line 3669
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 3672
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 3674
    $64 = tempRet0; //@line 3675
    $65 = HEAP32[$2 >> 2] | 0; //@line 3676
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 3681
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 3684
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 3687
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 3698
     $55 = $63; //@line 3698
     $56 = $64; //@line 3698
    } else {
     $$2$lcssa = $$2$be; //@line 3700
     $94 = $63; //@line 3700
     $95 = $64; //@line 3700
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 3705
   $94 = $$04860; //@line 3705
   $95 = $50; //@line 3705
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 3711
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 3716
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 3719
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 3722
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 3736
  }
  $93 = ($$0 | 0) != 0; //@line 3738
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 3739
  $100 = $93 ? tempRet0 : $95; //@line 3743
  $101 = $93 ? $96 : $94; //@line 3743
 }
 tempRet0 = $100; //@line 3745
 return $101 | 0; //@line 3746
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13788
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13790
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13792
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13794
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 13797
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13799
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13801
 $15 = $12 + 24 | 0; //@line 13804
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 13809
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 13813
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 13820
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 13831
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 13832
      if (!___async) {
       ___async_unwind = 0; //@line 13835
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 350; //@line 13837
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 13839
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 13841
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 13843
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 13845
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 13847
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $4; //@line 13849
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $6; //@line 13851
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $8 & 1; //@line 13854
      sp = STACKTOP; //@line 13855
      return;
     }
     $36 = $2 + 24 | 0; //@line 13858
     $37 = $2 + 54 | 0; //@line 13859
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 13874
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 13875
     if (!___async) {
      ___async_unwind = 0; //@line 13878
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 349; //@line 13880
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 13882
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 13884
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 13886
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 13888
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 13890
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 13892
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 13894
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $6; //@line 13896
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $8 & 1; //@line 13899
     sp = STACKTOP; //@line 13900
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 13904
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 13908
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 13909
    if (!___async) {
     ___async_unwind = 0; //@line 13912
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 348; //@line 13914
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 13916
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $10; //@line 13918
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 13920
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 13922
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $4; //@line 13924
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $6; //@line 13926
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $8 & 1; //@line 13929
    sp = STACKTOP; //@line 13930
    return;
   }
  }
 } while (0);
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $$pr = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $54 = 0, $59 = 0, $61 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13762
 if (!$2) {
  return;
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, HEAP32[$1 >> 2] | 0, 0) | 0)) {
  return;
 }
 $7 = HEAP32[2515] | 0; //@line 13773
 if (!$7) {
  $$2 = 0; //@line 13776
 } else {
  $10 = $7 + 32 | 0; //@line 13779
  $12 = HEAP32[$10 >> 2] | 0; //@line 13781
  $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 13784
  $16 = HEAP32[2516] | 0; //@line 13785
  if (!$16) {
   $$2 = 1; //@line 13788
  } else {
   $59 = $16 + 32 | 0; //@line 13791
   $61 = HEAP32[$59 >> 2] | 0; //@line 13793
   $64 = HEAP32[$59 + 4 >> 2] | 0; //@line 13796
   $69 = $64 >>> 0 > $15 >>> 0 | ($64 | 0) == ($15 | 0) & $61 >>> 0 > $12 >>> 0; //@line 13801
   $70 = HEAP32[2517] | 0; //@line 13802
   if (!$70) {
    $$2 = 2; //@line 13805
   } else {
    $73 = $69 ? $15 : $64; //@line 13810
    $75 = $70 + 32 | 0; //@line 13812
    $80 = HEAP32[$75 + 4 >> 2] | 0; //@line 13817
    $$2 = $80 >>> 0 > $73 >>> 0 | (($80 | 0) == ($73 | 0) ? (HEAP32[$75 >> 2] | 0) >>> 0 > ($69 ? $12 : $61) >>> 0 : 0) ? ($69 ^ 1) & 1 : 2; //@line 13824
   }
  }
 }
 $18 = 10060 + ($$2 << 2) | 0; //@line 13828
 $19 = HEAP32[$18 >> 2] | 0; //@line 13829
 do {
  if (!$19) {
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 13833
   $21 = __ZnwjRKSt9nothrow_t(40, 12052) | 0; //@line 13834
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 161; //@line 13837
    HEAP32[$AsyncCtx + 4 >> 2] = $18; //@line 13839
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 13841
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 13843
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 13845
    sp = STACKTOP; //@line 13846
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13849
    HEAP32[$18 >> 2] = $21; //@line 13850
    $30 = $21; //@line 13851
    $31 = $21; //@line 13851
    break;
   }
  } else {
   $27 = HEAP32[$19 + 20 >> 2] | 0; //@line 13856
   if (!$27) {
    $$pr = $19; //@line 13859
   } else {
    __ZdlPv($27); //@line 13861
    $$pr = HEAP32[$18 >> 2] | 0; //@line 13863
   }
   $30 = $$pr; //@line 13865
   $31 = $$pr; //@line 13865
  }
 } while (0);
 if (!$30) {
  return;
 }
 HEAP32[$31 >> 2] = HEAP32[$1 >> 2]; //@line 13872
 HEAP32[$31 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13872
 HEAP32[$31 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 13872
 HEAP32[$31 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 13872
 HEAP32[$31 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 13872
 $33 = (_strlen($0) | 0) + 1 | 0; //@line 13874
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13875
 $34 = __ZnajRKSt9nothrow_t($33, 12052) | 0; //@line 13876
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 162; //@line 13879
  HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 13881
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 13883
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 13885
  HEAP32[$AsyncCtx3 + 16 >> 2] = $18; //@line 13887
  sp = STACKTOP; //@line 13888
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13891
 HEAP32[$30 + 20 >> 2] = $34; //@line 13893
 _strcpy($34, $0) | 0; //@line 13894
 $40 = _emscripten_asm_const_i(9) | 0; //@line 13895
 $42 = (($40 | 0) < 0) << 31 >> 31; //@line 13897
 $43 = ___muldi3($2 | 0, 0, 1e3, 0) | 0; //@line 13898
 $45 = _i64Add($43 | 0, tempRet0 | 0, $40 | 0, $42 | 0) | 0; //@line 13900
 $47 = HEAP32[$18 >> 2] | 0; //@line 13902
 $49 = $47 + 24 | 0; //@line 13904
 HEAP32[$49 >> 2] = $45; //@line 13906
 HEAP32[$49 + 4 >> 2] = tempRet0; //@line 13909
 $54 = $47 + 32 | 0; //@line 13911
 HEAP32[$54 >> 2] = $40; //@line 13913
 HEAP32[$54 + 4 >> 2] = $42; //@line 13916
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26679
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26683
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26685
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26687
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26689
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26691
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26693
 $15 = $4 + 12 | 0; //@line 26695
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26696
 $16 = $6 + 12 | 0; //@line 26697
 $17 = HEAP32[$16 >> 2] | 0; //@line 26698
 if (!$17) {
  $28 = $8 + 12 | 0; //@line 26701
  HEAP32[$28 >> 2] = 0; //@line 26702
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 26703
  $29 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($10, $12, $4, 0, $8, $14) | 0; //@line 26704
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 166; //@line 26707
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 26708
   HEAP32[$30 >> 2] = $28; //@line 26709
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 26710
   HEAP32[$31 >> 2] = $15; //@line 26711
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 26712
   HEAP32[$32 >> 2] = $8; //@line 26713
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 26714
   HEAP32[$33 >> 2] = $4; //@line 26715
   sp = STACKTOP; //@line 26716
   return;
  }
  HEAP32[___async_retval >> 2] = $29; //@line 26720
  ___async_unwind = 0; //@line 26721
  HEAP32[$ReallocAsyncCtx5 >> 2] = 166; //@line 26722
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 26723
  HEAP32[$30 >> 2] = $28; //@line 26724
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 26725
  HEAP32[$31 >> 2] = $15; //@line 26726
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 26727
  HEAP32[$32 >> 2] = $8; //@line 26728
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 26729
  HEAP32[$33 >> 2] = $4; //@line 26730
  sp = STACKTOP; //@line 26731
  return;
 } else {
  $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 26735
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 26736
  FUNCTION_TABLE_vii[$20 & 7]($8, $6); //@line 26737
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 165; //@line 26740
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 26741
   HEAP32[$21 >> 2] = $16; //@line 26742
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 26743
   HEAP32[$22 >> 2] = $8; //@line 26744
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 26745
   HEAP32[$23 >> 2] = $10; //@line 26746
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 26747
   HEAP32[$24 >> 2] = $12; //@line 26748
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 26749
   HEAP32[$25 >> 2] = $4; //@line 26750
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 26751
   HEAP32[$26 >> 2] = $14; //@line 26752
   $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 26753
   HEAP32[$27 >> 2] = $15; //@line 26754
   sp = STACKTOP; //@line 26755
   return;
  }
  ___async_unwind = 0; //@line 26758
  HEAP32[$ReallocAsyncCtx2 >> 2] = 165; //@line 26759
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 26760
  HEAP32[$21 >> 2] = $16; //@line 26761
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 26762
  HEAP32[$22 >> 2] = $8; //@line 26763
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 26764
  HEAP32[$23 >> 2] = $10; //@line 26765
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 26766
  HEAP32[$24 >> 2] = $12; //@line 26767
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 26768
  HEAP32[$25 >> 2] = $4; //@line 26769
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 26770
  HEAP32[$26 >> 2] = $14; //@line 26771
  $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 26772
  HEAP32[$27 >> 2] = $15; //@line 26773
  sp = STACKTOP; //@line 26774
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9362
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 9367
 } else {
  $9 = $1 + 52 | 0; //@line 9369
  $10 = HEAP8[$9 >> 0] | 0; //@line 9370
  $11 = $1 + 53 | 0; //@line 9371
  $12 = HEAP8[$11 >> 0] | 0; //@line 9372
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 9375
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 9376
  HEAP8[$9 >> 0] = 0; //@line 9377
  HEAP8[$11 >> 0] = 0; //@line 9378
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 9379
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 9380
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 344; //@line 9383
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 9385
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 9387
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 9389
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 9391
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 9393
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 9395
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 9397
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 9399
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 9401
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 9403
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 9406
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 9408
   sp = STACKTOP; //@line 9409
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9412
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 9417
    $32 = $0 + 8 | 0; //@line 9418
    $33 = $1 + 54 | 0; //@line 9419
    $$0 = $0 + 24 | 0; //@line 9420
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 9453
     HEAP8[$11 >> 0] = 0; //@line 9454
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 9455
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 9456
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9461
     $62 = $$0 + 8 | 0; //@line 9462
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 9465
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 345; //@line 9470
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 9472
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 9474
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 9476
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 9478
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 9480
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 9482
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 9484
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 9486
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 9488
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 9490
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 9492
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 9494
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 9496
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 9499
    sp = STACKTOP; //@line 9500
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 9504
  HEAP8[$11 >> 0] = $12; //@line 9505
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5437
      $10 = HEAP32[$9 >> 2] | 0; //@line 5438
      HEAP32[$2 >> 2] = $9 + 4; //@line 5440
      HEAP32[$0 >> 2] = $10; //@line 5441
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5457
      $17 = HEAP32[$16 >> 2] | 0; //@line 5458
      HEAP32[$2 >> 2] = $16 + 4; //@line 5460
      $20 = $0; //@line 5463
      HEAP32[$20 >> 2] = $17; //@line 5465
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 5468
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5484
      $30 = HEAP32[$29 >> 2] | 0; //@line 5485
      HEAP32[$2 >> 2] = $29 + 4; //@line 5487
      $31 = $0; //@line 5488
      HEAP32[$31 >> 2] = $30; //@line 5490
      HEAP32[$31 + 4 >> 2] = 0; //@line 5493
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 5509
      $41 = $40; //@line 5510
      $43 = HEAP32[$41 >> 2] | 0; //@line 5512
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 5515
      HEAP32[$2 >> 2] = $40 + 8; //@line 5517
      $47 = $0; //@line 5518
      HEAP32[$47 >> 2] = $43; //@line 5520
      HEAP32[$47 + 4 >> 2] = $46; //@line 5523
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5539
      $57 = HEAP32[$56 >> 2] | 0; //@line 5540
      HEAP32[$2 >> 2] = $56 + 4; //@line 5542
      $59 = ($57 & 65535) << 16 >> 16; //@line 5544
      $62 = $0; //@line 5547
      HEAP32[$62 >> 2] = $59; //@line 5549
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 5552
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5568
      $72 = HEAP32[$71 >> 2] | 0; //@line 5569
      HEAP32[$2 >> 2] = $71 + 4; //@line 5571
      $73 = $0; //@line 5573
      HEAP32[$73 >> 2] = $72 & 65535; //@line 5575
      HEAP32[$73 + 4 >> 2] = 0; //@line 5578
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5594
      $83 = HEAP32[$82 >> 2] | 0; //@line 5595
      HEAP32[$2 >> 2] = $82 + 4; //@line 5597
      $85 = ($83 & 255) << 24 >> 24; //@line 5599
      $88 = $0; //@line 5602
      HEAP32[$88 >> 2] = $85; //@line 5604
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 5607
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5623
      $98 = HEAP32[$97 >> 2] | 0; //@line 5624
      HEAP32[$2 >> 2] = $97 + 4; //@line 5626
      $99 = $0; //@line 5628
      HEAP32[$99 >> 2] = $98 & 255; //@line 5630
      HEAP32[$99 + 4 >> 2] = 0; //@line 5633
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 5649
      $109 = +HEAPF64[$108 >> 3]; //@line 5650
      HEAP32[$2 >> 2] = $108 + 8; //@line 5652
      HEAPF64[$0 >> 3] = $109; //@line 5653
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 5669
      $116 = +HEAPF64[$115 >> 3]; //@line 5670
      HEAP32[$2 >> 2] = $115 + 8; //@line 5672
      HEAPF64[$0 >> 3] = $116; //@line 5673
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27383
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27385
 $$pre = HEAP32[$2 >> 2] | 0; //@line 27386
 $4 = HEAP32[$$pre + 60 >> 2] | 0; //@line 27388
 do {
  if (!$4) {
   $14 = $$pre; //@line 27392
  } else {
   $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 27395
   if (!$7) {
    __ZdlPv($4); //@line 27398
    $14 = HEAP32[$2 >> 2] | 0; //@line 27400
    break;
   }
   $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 27404
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 27405
   FUNCTION_TABLE_vi[$10 & 511]($4); //@line 27406
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 255; //@line 27409
    $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 27410
    HEAP32[$11 >> 2] = $2; //@line 27411
    $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 27412
    HEAP32[$12 >> 2] = $4; //@line 27413
    sp = STACKTOP; //@line 27414
    return;
   }
   ___async_unwind = 0; //@line 27417
   HEAP32[$ReallocAsyncCtx2 >> 2] = 255; //@line 27418
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 27419
   HEAP32[$11 >> 2] = $2; //@line 27420
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 27421
   HEAP32[$12 >> 2] = $4; //@line 27422
   sp = STACKTOP; //@line 27423
   return;
  }
 } while (0);
 $15 = HEAP32[$14 + 64 >> 2] | 0; //@line 27428
 if (!$15) {
  $18 = $14; //@line 27431
 } else {
  __ZdaPv($15); //@line 27433
  $18 = HEAP32[$2 >> 2] | 0; //@line 27435
 }
 $19 = HEAP32[$18 + 12 >> 2] | 0; //@line 27438
 if (!$19) {
  $22 = $18; //@line 27441
 } else {
  __ZdlPv($19); //@line 27443
  $22 = HEAP32[$2 >> 2] | 0; //@line 27445
 }
 do {
  if ($22 | 0) {
   $24 = HEAP32[$22 + 44 >> 2] | 0; //@line 27451
   if ($24 | 0) {
    $28 = HEAP32[$24 + 8 >> 2] | 0; //@line 27456
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27457
    FUNCTION_TABLE_vi[$28 & 511]($22 + 32 | 0); //@line 27458
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 256; //@line 27461
     $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 27462
     HEAP32[$29 >> 2] = $22; //@line 27463
     $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 27464
     HEAP32[$30 >> 2] = $2; //@line 27465
     sp = STACKTOP; //@line 27466
     return;
    }
    ___async_unwind = 0; //@line 27469
    HEAP32[$ReallocAsyncCtx3 >> 2] = 256; //@line 27470
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 27471
    HEAP32[$29 >> 2] = $22; //@line 27472
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 27473
    HEAP32[$30 >> 2] = $2; //@line 27474
    sp = STACKTOP; //@line 27475
    return;
   }
   $32 = HEAP32[$22 + 28 >> 2] | 0; //@line 27479
   if (!$32) {
    __ZdlPv($22); //@line 27482
    break;
   }
   $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 27487
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27488
   FUNCTION_TABLE_vi[$36 & 511]($22 + 16 | 0); //@line 27489
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 27492
    $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 27493
    HEAP32[$37 >> 2] = $22; //@line 27494
    $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 27495
    HEAP32[$38 >> 2] = $2; //@line 27496
    sp = STACKTOP; //@line 27497
    return;
   }
   ___async_unwind = 0; //@line 27500
   HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 27501
   $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 27502
   HEAP32[$37 >> 2] = $22; //@line 27503
   $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 27504
   HEAP32[$38 >> 2] = $2; //@line 27505
   sp = STACKTOP; //@line 27506
   return;
  }
 } while (0);
 HEAP32[$2 >> 2] = 0; //@line 27510
 HEAP32[___async_retval >> 2] = 0; //@line 27512
 return;
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_38($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12495
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12499
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12501
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12503
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12505
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12507
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12508
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 12512
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 12513
  FUNCTION_TABLE_vi[$16 & 511]($6); //@line 12514
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 12517
   $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 12518
   HEAP32[$17 >> 2] = $4; //@line 12519
   $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 12520
   HEAP32[$18 >> 2] = $8; //@line 12521
   $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 12522
   HEAP32[$19 >> 2] = $10; //@line 12523
   $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 12524
   HEAP32[$20 >> 2] = $12; //@line 12525
   sp = STACKTOP; //@line 12526
   return;
  }
  ___async_unwind = 0; //@line 12529
  HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 12530
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 12531
  HEAP32[$17 >> 2] = $4; //@line 12532
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 12533
  HEAP32[$18 >> 2] = $8; //@line 12534
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 12535
  HEAP32[$19 >> 2] = $10; //@line 12536
  $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 12537
  HEAP32[$20 >> 2] = $12; //@line 12538
  sp = STACKTOP; //@line 12539
  return;
 }
 $21 = HEAP32[$4 >> 2] | 0; //@line 12542
 if (!$21) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 12545
  _mbed_assert_internal(6023, 6028, 1677); //@line 12546
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 12549
   $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 12550
   HEAP32[$23 >> 2] = $4; //@line 12551
   $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 12552
   HEAP32[$24 >> 2] = $8; //@line 12553
   $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 12554
   HEAP32[$25 >> 2] = $10; //@line 12555
   $26 = $ReallocAsyncCtx9 + 16 | 0; //@line 12556
   HEAP32[$26 >> 2] = $12; //@line 12557
   sp = STACKTOP; //@line 12558
   return;
  }
  ___async_unwind = 0; //@line 12561
  HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 12562
  $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 12563
  HEAP32[$23 >> 2] = $4; //@line 12564
  $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 12565
  HEAP32[$24 >> 2] = $8; //@line 12566
  $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 12567
  HEAP32[$25 >> 2] = $10; //@line 12568
  $26 = $ReallocAsyncCtx9 + 16 | 0; //@line 12569
  HEAP32[$26 >> 2] = $12; //@line 12570
  sp = STACKTOP; //@line 12571
  return;
 } else {
  $27 = HEAP32[$21 >> 2] | 0; //@line 12574
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 12575
  FUNCTION_TABLE_viii[$27 & 0]($8, $10, $12); //@line 12576
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 230; //@line 12579
   $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 12580
   HEAP32[$28 >> 2] = $4; //@line 12581
   $29 = $ReallocAsyncCtx5 + 8 | 0; //@line 12582
   HEAP32[$29 >> 2] = $8; //@line 12583
   sp = STACKTOP; //@line 12584
   return;
  }
  ___async_unwind = 0; //@line 12587
  HEAP32[$ReallocAsyncCtx5 >> 2] = 230; //@line 12588
  $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 12589
  HEAP32[$28 >> 2] = $4; //@line 12590
  $29 = $ReallocAsyncCtx5 + 8 | 0; //@line 12591
  HEAP32[$29 >> 2] = $8; //@line 12592
  sp = STACKTOP; //@line 12593
  return;
 }
}
function __ZN9UDPSocket6sendtoEPKctPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12262
 STACKTOP = STACKTOP + 112 | 0; //@line 12263
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 12263
 $$byval_copy = sp + 88 | 0; //@line 12264
 $5 = sp + 24 | 0; //@line 12265
 $6 = sp; //@line 12266
 HEAP32[$6 >> 2] = 0; //@line 12267
 HEAP32[$6 + 4 >> 2] = 0; //@line 12267
 HEAP32[$6 + 8 >> 2] = 0; //@line 12267
 HEAP32[$6 + 12 >> 2] = 0; //@line 12267
 HEAP32[$6 + 16 >> 2] = 0; //@line 12267
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 12268
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 12268
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 12268
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 12268
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 12268
 __ZN13SocketAddressC2E10nsapi_addrt($5, $$byval_copy, 0); //@line 12269
 $7 = $0 + 4 | 0; //@line 12270
 $8 = HEAP32[$7 >> 2] | 0; //@line 12271
 $10 = HEAP32[HEAP32[$8 >> 2] >> 2] | 0; //@line 12273
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 12274
 $11 = FUNCTION_TABLE_iiiii[$10 & 15]($8, $1, $5, 0) | 0; //@line 12275
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 150; //@line 12278
  HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 12280
  HEAP16[$AsyncCtx + 8 >> 1] = $2; //@line 12282
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 12284
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 12286
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 12288
  HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 12290
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 12292
  sp = STACKTOP; //@line 12293
  STACKTOP = sp; //@line 12294
  return 0; //@line 12294
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12296
 if ($11 | 0) {
  $$0 = -3009; //@line 12299
  STACKTOP = sp; //@line 12300
  return $$0 | 0; //@line 12300
 }
 __ZN13SocketAddress8set_portEt($5, $2); //@line 12302
 $20 = $0 + 8 | 0; //@line 12303
 $21 = $0 + 52 | 0; //@line 12304
 $22 = $0 + 12 | 0; //@line 12305
 while (1) {
  $23 = HEAP32[$20 >> 2] | 0; //@line 12307
  if (!$23) {
   $$0 = -3005; //@line 12310
   label = 9; //@line 12311
   break;
  }
  HEAP32[$21 >> 2] = 0; //@line 12314
  $25 = HEAP32[$7 >> 2] | 0; //@line 12315
  $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 76 >> 2] | 0; //@line 12318
  $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12319
  $29 = FUNCTION_TABLE_iiiiii[$28 & 7]($25, $23, $5, $3, $4) | 0; //@line 12320
  if (___async) {
   label = 7; //@line 12323
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12326
  if (($29 | 0) != -3001 | (HEAP32[$22 >> 2] | 0) == 0) {
   $$0 = $29; //@line 12332
   label = 9; //@line 12333
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx3 >> 2] = 151; //@line 12338
  HEAP32[$AsyncCtx3 + 4 >> 2] = $22; //@line 12340
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 12342
  HEAP32[$AsyncCtx3 + 12 >> 2] = $20; //@line 12344
  HEAP32[$AsyncCtx3 + 16 >> 2] = $21; //@line 12346
  HEAP32[$AsyncCtx3 + 20 >> 2] = $7; //@line 12348
  HEAP32[$AsyncCtx3 + 24 >> 2] = $5; //@line 12350
  HEAP32[$AsyncCtx3 + 28 >> 2] = $3; //@line 12352
  HEAP32[$AsyncCtx3 + 32 >> 2] = $4; //@line 12354
  sp = STACKTOP; //@line 12355
  STACKTOP = sp; //@line 12356
  return 0; //@line 12356
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 12359
  return $$0 | 0; //@line 12359
 }
 return 0; //@line 12361
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_102($0) {
 $0 = $0 | 0;
 var $$pre74 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 22299
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22303
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22305
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22307
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22309
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22311
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22313
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22315
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22317
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22319
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22321
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22323
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22325
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22327
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22329
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22331
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22333
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22335
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22337
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 22339
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 22341
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 22343
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 22345
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 22347
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 22349
 $$pre74 = HEAP32[$2 >> 2] | 0; //@line 22353
 HEAP32[$34 >> 2] = HEAP32[HEAP32[$0 + 104 >> 2] >> 2]; //@line 22354
 $53 = HEAP32[$$pre74 >> 2] | 0; //@line 22355
 HEAP32[$36 >> 2] = 0; //@line 22356
 HEAP32[$38 >> 2] = 196; //@line 22357
 HEAP32[$40 >> 2] = $53; //@line 22358
 HEAP32[$42 >> 2] = 724; //@line 22359
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 22360
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 22361
 if (!___async) {
  ___async_unwind = 0; //@line 22364
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 197; //@line 22366
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 22368
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 22370
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 22372
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 22374
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 22376
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $12; //@line 22378
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $14; //@line 22380
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $16; //@line 22382
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $18; //@line 22384
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $20; //@line 22386
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $22; //@line 22388
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $24; //@line 22390
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $26; //@line 22392
 HEAP32[$ReallocAsyncCtx11 + 56 >> 2] = $28; //@line 22394
 HEAP32[$ReallocAsyncCtx11 + 60 >> 2] = $30; //@line 22396
 HEAP32[$ReallocAsyncCtx11 + 64 >> 2] = $32; //@line 22398
 HEAP32[$ReallocAsyncCtx11 + 68 >> 2] = $34; //@line 22400
 HEAP32[$ReallocAsyncCtx11 + 72 >> 2] = $36; //@line 22402
 HEAP32[$ReallocAsyncCtx11 + 76 >> 2] = $38; //@line 22404
 HEAP32[$ReallocAsyncCtx11 + 80 >> 2] = $40; //@line 22406
 HEAP32[$ReallocAsyncCtx11 + 84 >> 2] = $42; //@line 22408
 HEAP32[$ReallocAsyncCtx11 + 88 >> 2] = $44; //@line 22410
 HEAP32[$ReallocAsyncCtx11 + 92 >> 2] = $46; //@line 22412
 HEAP32[$ReallocAsyncCtx11 + 96 >> 2] = $48; //@line 22414
 HEAP32[$ReallocAsyncCtx11 + 100 >> 2] = $50; //@line 22416
 sp = STACKTOP; //@line 22417
 return;
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 20657
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20659
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20661
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20663
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20665
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20667
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20669
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20671
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20673
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20675
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20677
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20679
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20681
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20683
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20685
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20687
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20691
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20693
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20695
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20697
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20699
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20701
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20703
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20705
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 20707
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 20709
 $$pre = HEAP32[$4 >> 2] | 0; //@line 20711
 HEAP32[$14 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] >> 2]; //@line 20712
 $53 = HEAP32[$$pre >> 2] | 0; //@line 20713
 HEAP32[$16 >> 2] = 0; //@line 20714
 HEAP32[$18 >> 2] = 191; //@line 20715
 HEAP32[$20 >> 2] = $53; //@line 20716
 HEAP32[$22 >> 2] = 724; //@line 20717
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 20718
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 20719
 if (!___async) {
  ___async_unwind = 0; //@line 20722
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 192; //@line 20724
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 20726
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 20728
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 20730
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 20732
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 20734
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 20736
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 20738
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 20740
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $18; //@line 20742
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $20; //@line 20744
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $22; //@line 20746
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $24; //@line 20748
 HEAP32[$ReallocAsyncCtx12 + 52 >> 2] = $26; //@line 20750
 HEAP32[$ReallocAsyncCtx12 + 56 >> 2] = $28; //@line 20752
 HEAP32[$ReallocAsyncCtx12 + 60 >> 2] = $30; //@line 20754
 HEAP32[$ReallocAsyncCtx12 + 64 >> 2] = $34; //@line 20756
 HEAP32[$ReallocAsyncCtx12 + 68 >> 2] = $36; //@line 20758
 HEAP32[$ReallocAsyncCtx12 + 72 >> 2] = $38; //@line 20760
 HEAP32[$ReallocAsyncCtx12 + 76 >> 2] = $40; //@line 20762
 HEAP32[$ReallocAsyncCtx12 + 80 >> 2] = $42; //@line 20764
 HEAP32[$ReallocAsyncCtx12 + 84 >> 2] = $44; //@line 20766
 HEAP32[$ReallocAsyncCtx12 + 88 >> 2] = $46; //@line 20768
 HEAP32[$ReallocAsyncCtx12 + 92 >> 2] = $48; //@line 20770
 HEAP32[$ReallocAsyncCtx12 + 96 >> 2] = $50; //@line 20772
 HEAP32[$ReallocAsyncCtx12 + 100 >> 2] = $52; //@line 20774
 sp = STACKTOP; //@line 20775
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4337
 STACKTOP = STACKTOP + 224 | 0; //@line 4338
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 4338
 $3 = sp + 120 | 0; //@line 4339
 $4 = sp + 80 | 0; //@line 4340
 $5 = sp; //@line 4341
 $6 = sp + 136 | 0; //@line 4342
 dest = $4; //@line 4343
 stop = dest + 40 | 0; //@line 4343
 do {
  HEAP32[dest >> 2] = 0; //@line 4343
  dest = dest + 4 | 0; //@line 4343
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 4345
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 4349
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 4356
  } else {
   $43 = 0; //@line 4358
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 4360
  $14 = $13 & 32; //@line 4361
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 4367
  }
  $19 = $0 + 48 | 0; //@line 4369
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 4374
    $24 = HEAP32[$23 >> 2] | 0; //@line 4375
    HEAP32[$23 >> 2] = $6; //@line 4376
    $25 = $0 + 28 | 0; //@line 4377
    HEAP32[$25 >> 2] = $6; //@line 4378
    $26 = $0 + 20 | 0; //@line 4379
    HEAP32[$26 >> 2] = $6; //@line 4380
    HEAP32[$19 >> 2] = 80; //@line 4381
    $28 = $0 + 16 | 0; //@line 4383
    HEAP32[$28 >> 2] = $6 + 80; //@line 4384
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 4385
    if (!$24) {
     $$1 = $29; //@line 4388
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 4391
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 4392
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 4393
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 317; //@line 4396
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 4398
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 4400
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 4402
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 4404
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 4406
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 4408
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 4410
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 4412
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 4414
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 4416
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 4418
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 4420
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 4422
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 4424
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 4426
      sp = STACKTOP; //@line 4427
      STACKTOP = sp; //@line 4428
      return 0; //@line 4428
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4430
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 4433
      HEAP32[$23 >> 2] = $24; //@line 4434
      HEAP32[$19 >> 2] = 0; //@line 4435
      HEAP32[$28 >> 2] = 0; //@line 4436
      HEAP32[$25 >> 2] = 0; //@line 4437
      HEAP32[$26 >> 2] = 0; //@line 4438
      $$1 = $$; //@line 4439
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 4445
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 4448
  HEAP32[$0 >> 2] = $51 | $14; //@line 4453
  if ($43 | 0) {
   ___unlockfile($0); //@line 4456
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 4458
 }
 STACKTOP = sp; //@line 4460
 return $$0 | 0; //@line 4460
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 8897
 STACKTOP = STACKTOP + 64 | 0; //@line 8898
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 8898
 $4 = sp; //@line 8899
 $5 = HEAP32[$0 >> 2] | 0; //@line 8900
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 8903
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 8905
 HEAP32[$4 >> 2] = $2; //@line 8906
 HEAP32[$4 + 4 >> 2] = $0; //@line 8908
 HEAP32[$4 + 8 >> 2] = $1; //@line 8910
 HEAP32[$4 + 12 >> 2] = $3; //@line 8912
 $14 = $4 + 16 | 0; //@line 8913
 $15 = $4 + 20 | 0; //@line 8914
 $16 = $4 + 24 | 0; //@line 8915
 $17 = $4 + 28 | 0; //@line 8916
 $18 = $4 + 32 | 0; //@line 8917
 $19 = $4 + 40 | 0; //@line 8918
 dest = $14; //@line 8919
 stop = dest + 36 | 0; //@line 8919
 do {
  HEAP32[dest >> 2] = 0; //@line 8919
  dest = dest + 4 | 0; //@line 8919
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 8919
 HEAP8[$14 + 38 >> 0] = 0; //@line 8919
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 8924
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 8927
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 8928
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 8929
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 336; //@line 8932
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 8934
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 8936
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 8938
    sp = STACKTOP; //@line 8939
    STACKTOP = sp; //@line 8940
    return 0; //@line 8940
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8942
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 8946
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 8950
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 8953
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8954
   FUNCTION_TABLE_viiiii[$33 & 3]($10, $4, $8, 1, 0); //@line 8955
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 337; //@line 8958
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 8960
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 8962
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 8964
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 8966
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 8968
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 8970
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 8972
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 8974
    sp = STACKTOP; //@line 8975
    STACKTOP = sp; //@line 8976
    return 0; //@line 8976
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8978
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 8992
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 9000
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 9016
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 9021
  }
 } while (0);
 STACKTOP = sp; //@line 9024
 return $$0 | 0; //@line 9024
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 25419
 do {
  if (!$0) {
   do {
    if (!(HEAP32[252] | 0)) {
     $34 = 0; //@line 25427
    } else {
     $12 = HEAP32[252] | 0; //@line 25429
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25430
     $13 = _fflush($12) | 0; //@line 25431
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 313; //@line 25434
      sp = STACKTOP; //@line 25435
      return 0; //@line 25436
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 25438
      $34 = $13; //@line 25439
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 25445
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 25449
    } else {
     $$02327 = $$02325; //@line 25451
     $$02426 = $34; //@line 25451
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 25458
      } else {
       $28 = 0; //@line 25460
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 25468
       $25 = ___fflush_unlocked($$02327) | 0; //@line 25469
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 25474
       $$1 = $25 | $$02426; //@line 25476
      } else {
       $$1 = $$02426; //@line 25478
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 25482
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 25485
      if (!$$023) {
       $$024$lcssa = $$1; //@line 25488
       break L9;
      } else {
       $$02327 = $$023; //@line 25491
       $$02426 = $$1; //@line 25491
      }
     }
     HEAP32[$AsyncCtx >> 2] = 314; //@line 25494
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 25496
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 25498
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 25500
     sp = STACKTOP; //@line 25501
     return 0; //@line 25502
    }
   } while (0);
   ___ofl_unlock(); //@line 25505
   $$0 = $$024$lcssa; //@line 25506
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25512
    $5 = ___fflush_unlocked($0) | 0; //@line 25513
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 311; //@line 25516
     sp = STACKTOP; //@line 25517
     return 0; //@line 25518
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 25520
     $$0 = $5; //@line 25521
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 25526
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 25527
   $7 = ___fflush_unlocked($0) | 0; //@line 25528
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 312; //@line 25531
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 25534
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 25536
    sp = STACKTOP; //@line 25537
    return 0; //@line 25538
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 25540
   if ($phitmp) {
    $$0 = $7; //@line 25542
   } else {
    ___unlockfile($0); //@line 25544
    $$0 = $7; //@line 25545
   }
  }
 } while (0);
 return $$0 | 0; //@line 25549
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_118($0) {
 $0 = $0 | 0;
 var $$052 = 0, $$byval_copy8 = 0, $$pre = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26487
 STACKTOP = STACKTOP + 32 | 0; //@line 26488
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 26488
 $$byval_copy8 = sp; //@line 26489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26491
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26493
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26497
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26499
 if (!$AsyncRetVal) {
  $24 = 0; //@line 26502
 } else {
  $11 = $AsyncRetVal + (HEAP32[$0 + 12 >> 2] << 6) | 0; //@line 26504
  $12 = $AsyncRetVal; //@line 26505
  do {
   HEAP32[$8 >> 2] = 0; //@line 26507
   HEAP32[$8 + 4 >> 2] = 0; //@line 26507
   HEAP32[$8 + 8 >> 2] = 0; //@line 26507
   HEAP32[$8 + 12 >> 2] = 0; //@line 26507
   HEAP32[$8 + 16 >> 2] = 0; //@line 26507
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$8 >> 2]; //@line 26508
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 26508
   HEAP32[$$byval_copy8 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 26508
   HEAP32[$$byval_copy8 + 12 >> 2] = HEAP32[$8 + 12 >> 2]; //@line 26508
   HEAP32[$$byval_copy8 + 16 >> 2] = HEAP32[$8 + 16 >> 2]; //@line 26508
   __ZN13SocketAddressC2E10nsapi_addrt($12, $$byval_copy8, 0); //@line 26509
   $12 = $12 + 64 | 0; //@line 26510
  } while (($12 | 0) != ($11 | 0));
  $24 = $AsyncRetVal; //@line 26513
 }
 $$pre = $4 + 64 | 0; //@line 26522
 if (HEAP8[$2 >> 0] | 0) {
  $$052 = 0; //@line 26524
  do {
   $26 = $24 + ($$052 << 6) | 0; //@line 26526
   $28 = (HEAP32[$$pre >> 2] | 0) + ($$052 * 20 | 0) | 0; //@line 26528
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$28 >> 2]; //@line 26529
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 26529
   HEAP32[$$byval_copy8 + 8 >> 2] = HEAP32[$28 + 8 >> 2]; //@line 26529
   HEAP32[$$byval_copy8 + 12 >> 2] = HEAP32[$28 + 12 >> 2]; //@line 26529
   HEAP32[$$byval_copy8 + 16 >> 2] = HEAP32[$28 + 16 >> 2]; //@line 26529
   __ZN13SocketAddress8set_addrE10nsapi_addr($26, $$byval_copy8); //@line 26530
   $$052 = $$052 + 1 | 0; //@line 26531
  } while (($$052 | 0) < (HEAPU8[$2 >> 0] | 0));
 }
 $18 = HEAP32[$4 + 12 >> 2] | 0; //@line 26543
 $19 = HEAP32[$$pre >> 2] | 0; //@line 26544
 $21 = HEAP32[$4 + 68 >> 2] | 0; //@line 26546
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 26547
 __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($18, $19, $21); //@line 26548
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 251; //@line 26551
  $22 = $ReallocAsyncCtx + 4 | 0; //@line 26552
  HEAP32[$22 >> 2] = $4; //@line 26553
  $23 = $ReallocAsyncCtx + 8 | 0; //@line 26554
  HEAP32[$23 >> 2] = $24; //@line 26555
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 26556
  HEAP32[$25 >> 2] = $2; //@line 26557
  sp = STACKTOP; //@line 26558
  STACKTOP = sp; //@line 26559
  return;
 }
 ___async_unwind = 0; //@line 26561
 HEAP32[$ReallocAsyncCtx >> 2] = 251; //@line 26562
 $22 = $ReallocAsyncCtx + 4 | 0; //@line 26563
 HEAP32[$22 >> 2] = $4; //@line 26564
 $23 = $ReallocAsyncCtx + 8 | 0; //@line 26565
 HEAP32[$23 >> 2] = $24; //@line 26566
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 26567
 HEAP32[$25 >> 2] = $2; //@line 26568
 sp = STACKTOP; //@line 26569
 STACKTOP = sp; //@line 26570
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 4209
 $7 = ($2 | 0) != 0; //@line 4213
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 4217
   $$03555 = $0; //@line 4218
   $$03654 = $2; //@line 4218
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 4223
     $$036$lcssa64 = $$03654; //@line 4223
     label = 6; //@line 4224
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 4227
    $12 = $$03654 + -1 | 0; //@line 4228
    $16 = ($12 | 0) != 0; //@line 4232
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 4235
     $$03654 = $12; //@line 4235
    } else {
     $$035$lcssa = $11; //@line 4237
     $$036$lcssa = $12; //@line 4237
     $$lcssa = $16; //@line 4237
     label = 5; //@line 4238
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 4243
   $$036$lcssa = $2; //@line 4243
   $$lcssa = $7; //@line 4243
   label = 5; //@line 4244
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 4249
   $$036$lcssa64 = $$036$lcssa; //@line 4249
   label = 6; //@line 4250
  } else {
   $$2 = $$035$lcssa; //@line 4252
   $$3 = 0; //@line 4252
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 4258
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 4261
    $$3 = $$036$lcssa64; //@line 4261
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 4263
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 4267
      $$13745 = $$036$lcssa64; //@line 4267
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 4270
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 4279
       $30 = $$13745 + -4 | 0; //@line 4280
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 4283
        $$13745 = $30; //@line 4283
       } else {
        $$0$lcssa = $29; //@line 4285
        $$137$lcssa = $30; //@line 4285
        label = 11; //@line 4286
        break L11;
       }
      }
      $$140 = $$046; //@line 4290
      $$23839 = $$13745; //@line 4290
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 4292
      $$137$lcssa = $$036$lcssa64; //@line 4292
      label = 11; //@line 4293
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 4299
      $$3 = 0; //@line 4299
      break;
     } else {
      $$140 = $$0$lcssa; //@line 4302
      $$23839 = $$137$lcssa; //@line 4302
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 4309
      $$3 = $$23839; //@line 4309
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 4312
     $$23839 = $$23839 + -1 | 0; //@line 4313
     if (!$$23839) {
      $$2 = $35; //@line 4316
      $$3 = 0; //@line 4316
      break;
     } else {
      $$140 = $35; //@line 4319
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 4327
}
function _mbed_vtracef__async_cb_144($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28790
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 28793
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28795
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28797
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28799
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28801
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28803
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28807
 $$13 = ($AsyncRetVal | 0) >= ($12 | 0) ? 0 : $AsyncRetVal; //@line 28809
 $18 = (HEAP32[$0 + 28 >> 2] | 0) + $$13 | 0; //@line 28811
 $19 = $12 - $$13 | 0; //@line 28812
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[128] | 0; //@line 28816
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $2 ^ 1) {
     break;
    }
    _snprintf($18, $19, 5786, $4) | 0; //@line 28828
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 28831
   $23 = FUNCTION_TABLE_i[$21 & 0]() | 0; //@line 28832
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 81; //@line 28835
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 28836
    HEAP32[$24 >> 2] = $8; //@line 28837
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 28838
    HEAP32[$25 >> 2] = $18; //@line 28839
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 28840
    HEAP32[$26 >> 2] = $19; //@line 28841
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 28842
    HEAP32[$27 >> 2] = $10; //@line 28843
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 28844
    $$expand_i1_val = $2 & 1; //@line 28845
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 28846
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 28847
    HEAP32[$29 >> 2] = $4; //@line 28848
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 28849
    HEAP32[$30 >> 2] = $6; //@line 28850
    sp = STACKTOP; //@line 28851
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 28855
   ___async_unwind = 0; //@line 28856
   HEAP32[$ReallocAsyncCtx6 >> 2] = 81; //@line 28857
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 28858
   HEAP32[$24 >> 2] = $8; //@line 28859
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 28860
   HEAP32[$25 >> 2] = $18; //@line 28861
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 28862
   HEAP32[$26 >> 2] = $19; //@line 28863
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 28864
   HEAP32[$27 >> 2] = $10; //@line 28865
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 28866
   $$expand_i1_val = $2 & 1; //@line 28867
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 28868
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 28869
   HEAP32[$29 >> 2] = $4; //@line 28870
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 28871
   HEAP32[$30 >> 2] = $6; //@line 28872
   sp = STACKTOP; //@line 28873
   return;
  }
 } while (0);
 $34 = HEAP32[129] | 0; //@line 28877
 $35 = HEAP32[122] | 0; //@line 28878
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 28879
 FUNCTION_TABLE_vi[$34 & 511]($35); //@line 28880
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 28883
  sp = STACKTOP; //@line 28884
  return;
 }
 ___async_unwind = 0; //@line 28887
 HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 28888
 sp = STACKTOP; //@line 28889
 return;
}
function _mbed_vtracef__async_cb_145($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28899
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 28902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28904
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28906
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28908
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28910
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28912
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28914
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28916
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28918
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28920
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28922
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28924
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28926
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28928
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28930
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28932
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28934
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 28936
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 28938
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 28940
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 28942
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 28944
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 28946
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 28948
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 28950
 $55 = ($8 | 0 ? 4 : 0) + $8 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 28956
 $56 = HEAP32[127] | 0; //@line 28957
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 28958
 $57 = FUNCTION_TABLE_ii[$56 & 31]($55) | 0; //@line 28959
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 28963
  ___async_unwind = 0; //@line 28964
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 79; //@line 28966
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $2 & 1; //@line 28969
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 28971
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 28973
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 28975
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $12; //@line 28977
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 28979
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 28981
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 28983
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 28985
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 28987
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 28989
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 28991
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 28993
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $30; //@line 28995
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $32; //@line 28997
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $34; //@line 28999
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $36; //@line 29001
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $38; //@line 29003
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $40; //@line 29005
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $42; //@line 29007
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $44; //@line 29009
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $46; //@line 29011
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $48; //@line 29013
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $50; //@line 29015
 sp = STACKTOP; //@line 29016
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9079
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 9085
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 9091
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 9094
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9095
    FUNCTION_TABLE_viiiii[$53 & 3]($50, $1, $2, $3, $4); //@line 9096
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 340; //@line 9099
     sp = STACKTOP; //@line 9100
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9103
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 9111
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 9116
     $19 = $1 + 44 | 0; //@line 9117
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 9123
     HEAP8[$22 >> 0] = 0; //@line 9124
     $23 = $1 + 53 | 0; //@line 9125
     HEAP8[$23 >> 0] = 0; //@line 9126
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 9128
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 9131
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9132
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 9133
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 339; //@line 9136
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 9138
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 9140
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 9142
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9144
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 9146
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 9148
      sp = STACKTOP; //@line 9149
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9152
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 9156
      label = 13; //@line 9157
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 9162
       label = 13; //@line 9163
      } else {
       $$037$off039 = 3; //@line 9165
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 9169
      $39 = $1 + 40 | 0; //@line 9170
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 9173
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 9183
        $$037$off039 = $$037$off038; //@line 9184
       } else {
        $$037$off039 = $$037$off038; //@line 9186
       }
      } else {
       $$037$off039 = $$037$off038; //@line 9189
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 9192
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 9199
   }
  }
 } while (0);
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1429
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 1440
 $14 = $1 + 20 | 0; //@line 1441
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1443
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 1448
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 1452
 $24 = $0 + 128 | 0; //@line 1453
 _equeue_mutex_lock($24); //@line 1454
 $25 = HEAP32[$0 >> 2] | 0; //@line 1455
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 1459
   label = 5; //@line 1460
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 1462
   $$053 = $0; //@line 1463
   $29 = $25; //@line 1463
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 1472
    $34 = HEAP32[$33 >> 2] | 0; //@line 1473
    if (!$34) {
     $$051$ph = $33; //@line 1476
     label = 5; //@line 1477
     break L1;
    } else {
     $$053 = $33; //@line 1480
     $29 = $34; //@line 1480
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 1488
    HEAP32[$49 >> 2] = $29; //@line 1489
    HEAP32[$29 + 16 >> 2] = $49; //@line 1491
    $$0515859 = $$053; //@line 1492
    label = 11; //@line 1493
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 1497
   $43 = $1 + 8 | 0; //@line 1498
   HEAP32[$43 >> 2] = $42; //@line 1499
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 1503
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 1505
   $47 = $1 + 12 | 0; //@line 1506
   HEAP32[$47 >> 2] = $46; //@line 1507
   HEAP32[$46 + 16 >> 2] = $47; //@line 1509
   $$05157 = $$053; //@line 1510
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 1515
  $$0515859 = $$051$ph; //@line 1516
  label = 11; //@line 1517
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 1521
  $$05157 = $$0515859; //@line 1522
 }
 HEAP32[$$05157 >> 2] = $1; //@line 1524
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 1526
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 1528
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 1531
  return $13 | 0; //@line 1532
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 1538
  return $13 | 0; //@line 1539
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 1544
  return $13 | 0; //@line 1545
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 1551
  return $13 | 0; //@line 1552
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 1555
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1557
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1561
 FUNCTION_TABLE_vii[$54 & 7]($65, $67 & ~($67 >> 31)); //@line 1562
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 58; //@line 1565
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 1567
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 1569
  sp = STACKTOP; //@line 1570
  return 0; //@line 1571
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1573
 _equeue_mutex_unlock($24); //@line 1574
 return $13 | 0; //@line 1575
}
function __ZL37nsapi_dns_query_async_socket_callbackPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $26 = 0, $29 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17050
 STACKTOP = STACKTOP + 32 | 0; //@line 17051
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17051
 $1 = sp + 16 | 0; //@line 17052
 $2 = sp; //@line 17053
 if (!$0) {
  STACKTOP = sp; //@line 17056
  return;
 }
 $4 = $0 + 12 | 0; //@line 17058
 $5 = HEAP32[$4 >> 2] | 0; //@line 17059
 do {
  if (!$5) {
   $14 = 0; //@line 17063
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 17066
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 17067
   FUNCTION_TABLE_vii[$8 & 7]($1, $0); //@line 17068
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 232; //@line 17071
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 17073
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17075
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 17077
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 17079
    sp = STACKTOP; //@line 17080
    STACKTOP = sp; //@line 17081
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17083
    $14 = HEAP32[$4 >> 2] | 0; //@line 17085
    break;
   }
  }
 } while (0);
 $13 = $1 + 12 | 0; //@line 17090
 HEAP32[$13 >> 2] = $14; //@line 17091
 $16 = HEAP32[$0 + 16 >> 2] | 0; //@line 17093
 HEAP32[$2 + 8 >> 2] = 0; //@line 17095
 HEAP32[$2 >> 2] = 233; //@line 17096
 HEAP32[$2 + 4 >> 2] = $16; //@line 17098
 $18 = $2 + 12 | 0; //@line 17099
 HEAP32[$18 >> 2] = 736; //@line 17100
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17101
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 17102
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 234; //@line 17105
  HEAP32[$AsyncCtx10 + 4 >> 2] = $18; //@line 17107
  HEAP32[$AsyncCtx10 + 8 >> 2] = $13; //@line 17109
  HEAP32[$AsyncCtx10 + 12 >> 2] = $2; //@line 17111
  HEAP32[$AsyncCtx10 + 16 >> 2] = $1; //@line 17113
  sp = STACKTOP; //@line 17114
  STACKTOP = sp; //@line 17115
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 17117
 $23 = HEAP32[$18 >> 2] | 0; //@line 17118
 do {
  if ($23 | 0) {
   $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 17123
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17124
   FUNCTION_TABLE_vi[$26 & 511]($2); //@line 17125
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 235; //@line 17128
    HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 17130
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 17132
    sp = STACKTOP; //@line 17133
    STACKTOP = sp; //@line 17134
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17136
    break;
   }
  }
 } while (0);
 $29 = HEAP32[$13 >> 2] | 0; //@line 17141
 if (!$29) {
  STACKTOP = sp; //@line 17144
  return;
 }
 $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 17147
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17148
 FUNCTION_TABLE_vi[$32 & 511]($1); //@line 17149
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 236; //@line 17152
  sp = STACKTOP; //@line 17153
  STACKTOP = sp; //@line 17154
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17156
 STACKTOP = sp; //@line 17157
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $35 = 0, $4 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9315
 STACKTOP = STACKTOP + 16 | 0; //@line 9316
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9316
 $4 = sp; //@line 9317
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 9320
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9321
 $8 = FUNCTION_TABLE_ii[$7 & 31]($0) | 0; //@line 9322
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 90; //@line 9325
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 9327
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 9329
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 9331
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 9333
  sp = STACKTOP; //@line 9334
  STACKTOP = sp; //@line 9335
  return 0; //@line 9335
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9337
 $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0; //@line 9340
 $16 = $2 + 12 | 0; //@line 9341
 $17 = HEAP32[$16 >> 2] | 0; //@line 9342
 do {
  if (!$17) {
   $28 = 0; //@line 9346
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 9349
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9350
   FUNCTION_TABLE_vii[$20 & 7]($4, $2); //@line 9351
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 91; //@line 9354
    HEAP32[$AsyncCtx3 + 4 >> 2] = $16; //@line 9356
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 9358
    HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 9360
    HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 9362
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 9364
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 9366
    sp = STACKTOP; //@line 9367
    STACKTOP = sp; //@line 9368
    return 0; //@line 9368
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9370
    $28 = HEAP32[$16 >> 2] | 0; //@line 9372
    break;
   }
  }
 } while (0);
 $27 = $4 + 12 | 0; //@line 9377
 HEAP32[$27 >> 2] = $28; //@line 9378
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9379
 $29 = FUNCTION_TABLE_iiiii[$15 & 15]($8, $1, $4, $3) | 0; //@line 9380
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 92; //@line 9383
  HEAP32[$AsyncCtx6 + 4 >> 2] = $27; //@line 9385
  HEAP32[$AsyncCtx6 + 8 >> 2] = $4; //@line 9387
  sp = STACKTOP; //@line 9388
  STACKTOP = sp; //@line 9389
  return 0; //@line 9389
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 9391
 $32 = HEAP32[$27 >> 2] | 0; //@line 9392
 if (!$32) {
  STACKTOP = sp; //@line 9395
  return $29 | 0; //@line 9395
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 9398
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9399
 FUNCTION_TABLE_vi[$35 & 511]($4); //@line 9400
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 93; //@line 9403
  HEAP32[$AsyncCtx10 + 4 >> 2] = $29; //@line 9405
  sp = STACKTOP; //@line 9406
  STACKTOP = sp; //@line 9407
  return 0; //@line 9407
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 9409
 STACKTOP = sp; //@line 9410
 return $29 | 0; //@line 9410
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 8391
 STACKTOP = STACKTOP + 48 | 0; //@line 8392
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8392
 $vararg_buffer10 = sp + 32 | 0; //@line 8393
 $vararg_buffer7 = sp + 24 | 0; //@line 8394
 $vararg_buffer3 = sp + 16 | 0; //@line 8395
 $vararg_buffer = sp; //@line 8396
 $0 = sp + 36 | 0; //@line 8397
 $1 = ___cxa_get_globals_fast() | 0; //@line 8398
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 8401
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 8406
   $9 = HEAP32[$7 >> 2] | 0; //@line 8408
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 8411
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 9377; //@line 8417
    _abort_message(9327, $vararg_buffer7); //@line 8418
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 8427
   } else {
    $22 = $3 + 80 | 0; //@line 8429
   }
   HEAP32[$0 >> 2] = $22; //@line 8431
   $23 = HEAP32[$3 >> 2] | 0; //@line 8432
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 8434
   $28 = HEAP32[(HEAP32[26] | 0) + 16 >> 2] | 0; //@line 8437
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 8438
   $29 = FUNCTION_TABLE_iiii[$28 & 31](104, $23, $0) | 0; //@line 8439
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 330; //@line 8442
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8444
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 8446
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 8448
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 8450
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 8452
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 8454
    sp = STACKTOP; //@line 8455
    STACKTOP = sp; //@line 8456
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8458
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 9377; //@line 8460
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 8462
    _abort_message(9286, $vararg_buffer3); //@line 8463
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 8466
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 8469
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8470
   $40 = FUNCTION_TABLE_ii[$39 & 31]($36) | 0; //@line 8471
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 331; //@line 8474
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 8476
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 8478
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 8480
    sp = STACKTOP; //@line 8481
    STACKTOP = sp; //@line 8482
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 8484
    HEAP32[$vararg_buffer >> 2] = 9377; //@line 8485
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 8487
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 8489
    _abort_message(9241, $vararg_buffer); //@line 8490
   }
  }
 }
 _abort_message(9365, $vararg_buffer10); //@line 8495
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1$i = 0, $14 = 0, $15 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 820
 $5 = $0 + -4 | 0; //@line 821
 $6 = $1 + 8 | 0; //@line 822
 do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   label = 7; //@line 827
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$6 >> 0] | 0)) {
     label = 7; //@line 835
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 841
   _puts(1750) | 0; //@line 842
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 50; //@line 845
    sp = STACKTOP; //@line 846
    return 0; //@line 847
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 849
   $$1$i = -3012; //@line 850
   return $$1$i | 0; //@line 851
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $14 = HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0; //@line 858
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 859
   $15 = FUNCTION_TABLE_iiii[$14 & 31]($5, $1, $2) | 0; //@line 860
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 51; //@line 863
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 865
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 867
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 869
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 871
    HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 873
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 875
    sp = STACKTOP; //@line 876
    return 0; //@line 877
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 879
   if (($15 | 0) < 0) {
    $$1$i = $15; //@line 882
    return $$1$i | 0; //@line 883
   } else {
    $23 = $1 + 12 | 0; //@line 885
    dest = $23; //@line 886
    src = $2; //@line 886
    stop = dest + 60 | 0; //@line 886
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 886
     dest = dest + 4 | 0; //@line 886
     src = src + 4 | 0; //@line 886
    } while ((dest | 0) < (stop | 0));
    HEAP16[$23 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 886
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 891
 _wait_ms(1); //@line 892
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 52; //@line 895
  HEAP32[$AsyncCtx10 + 4 >> 2] = $5; //@line 897
  HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 899
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 901
  HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 903
  HEAP32[$AsyncCtx10 + 20 >> 2] = $4; //@line 905
  sp = STACKTOP; //@line 906
  return 0; //@line 907
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 909
 $31 = HEAP32[(HEAP32[$5 >> 2] | 0) + 116 >> 2] | 0; //@line 912
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 913
 $32 = FUNCTION_TABLE_iiiii[$31 & 15]($5, $1, $3, $4) | 0; //@line 914
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 53; //@line 917
  sp = STACKTOP; //@line 918
  return 0; //@line 919
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 921
 $$1$i = $32; //@line 922
 return $$1$i | 0; //@line 923
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10601
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10603
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10605
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10607
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10609
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10611
 $12 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 4 >> 2] | 0; //@line 10614
 $13 = $2 + 12 | 0; //@line 10615
 $14 = HEAP32[$13 >> 2] | 0; //@line 10616
 if (!$14) {
  $24 = $4 + 12 | 0; //@line 10619
  HEAP32[$24 >> 2] = 0; //@line 10620
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 10621
  $25 = FUNCTION_TABLE_iiiii[$12 & 15]($AsyncRetVal, $6, $4, $8) | 0; //@line 10622
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 10625
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 10626
   HEAP32[$26 >> 2] = $24; //@line 10627
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 10628
   HEAP32[$27 >> 2] = $4; //@line 10629
   sp = STACKTOP; //@line 10630
   return;
  }
  HEAP32[___async_retval >> 2] = $25; //@line 10634
  ___async_unwind = 0; //@line 10635
  HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 10636
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 10637
  HEAP32[$26 >> 2] = $24; //@line 10638
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 10639
  HEAP32[$27 >> 2] = $4; //@line 10640
  sp = STACKTOP; //@line 10641
  return;
 } else {
  $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 10645
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 10646
  FUNCTION_TABLE_vii[$17 & 7]($4, $2); //@line 10647
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 91; //@line 10650
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 10651
   HEAP32[$18 >> 2] = $13; //@line 10652
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 10653
   HEAP32[$19 >> 2] = $4; //@line 10654
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 10655
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 10656
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 10657
   HEAP32[$21 >> 2] = $6; //@line 10658
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 10659
   HEAP32[$22 >> 2] = $8; //@line 10660
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 10661
   HEAP32[$23 >> 2] = $12; //@line 10662
   sp = STACKTOP; //@line 10663
   return;
  }
  ___async_unwind = 0; //@line 10666
  HEAP32[$ReallocAsyncCtx2 >> 2] = 91; //@line 10667
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 10668
  HEAP32[$18 >> 2] = $13; //@line 10669
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 10670
  HEAP32[$19 >> 2] = $4; //@line 10671
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 10672
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 10673
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 10674
  HEAP32[$21 >> 2] = $6; //@line 10675
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 10676
  HEAP32[$22 >> 2] = $8; //@line 10677
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 10678
  HEAP32[$23 >> 2] = $12; //@line 10679
  sp = STACKTOP; //@line 10680
  return;
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29747
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29749
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29751
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29753
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29755
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29757
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29759
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29761
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29763
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29765
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29767
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29769
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29771
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29773
 $42 = HEAP32[$18 >> 2] | 0; //@line 29774
 if (!$42) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 29777
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($20, 0, $22, 512) | 0; //@line 29778
  if (!___async) {
   HEAP32[___async_retval >> 2] = $27; //@line 29782
   ___async_unwind = 0; //@line 29783
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 29785
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 29787
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 29789
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 29791
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 29793
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 29795
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 29797
  HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 29799
  HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 29801
  HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 29803
  HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 29805
  HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 29807
  HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 29809
  HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 29811
  sp = STACKTOP; //@line 29812
  return;
 } else {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 29816
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 29817
  FUNCTION_TABLE_vi[$45 & 511]($26); //@line 29818
  if (!___async) {
   ___async_unwind = 0; //@line 29821
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 29823
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 29825
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 29827
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 29829
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 29831
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 29833
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 29835
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 29837
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 29839
  HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 29841
  HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 29843
  HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 29845
  HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 29847
  HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $26; //@line 29849
  sp = STACKTOP; //@line 29850
  return;
 }
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11703
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11705
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11707
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11709
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[2523] | 0)) {
  _serial_init(10096, 2, 3); //@line 11717
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 11719
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 11725
  _serial_putc(10096, $9 << 24 >> 24); //@line 11726
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 11729
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 11730
   HEAP32[$18 >> 2] = 0; //@line 11731
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 11732
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 11733
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 11734
   HEAP32[$20 >> 2] = $2; //@line 11735
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 11736
   HEAP8[$21 >> 0] = $9; //@line 11737
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 11738
   HEAP32[$22 >> 2] = $4; //@line 11739
   sp = STACKTOP; //@line 11740
   return;
  }
  ___async_unwind = 0; //@line 11743
  HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 11744
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 11745
  HEAP32[$18 >> 2] = 0; //@line 11746
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 11747
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 11748
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 11749
  HEAP32[$20 >> 2] = $2; //@line 11750
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 11751
  HEAP8[$21 >> 0] = $9; //@line 11752
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 11753
  HEAP32[$22 >> 2] = $4; //@line 11754
  sp = STACKTOP; //@line 11755
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 11758
  _serial_putc(10096, 13); //@line 11759
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 11762
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 11763
   HEAP8[$12 >> 0] = $9; //@line 11764
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 11765
   HEAP32[$13 >> 2] = 0; //@line 11766
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 11767
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 11768
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 11769
   HEAP32[$15 >> 2] = $2; //@line 11770
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 11771
   HEAP32[$16 >> 2] = $4; //@line 11772
   sp = STACKTOP; //@line 11773
   return;
  }
  ___async_unwind = 0; //@line 11776
  HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 11777
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 11778
  HEAP8[$12 >> 0] = $9; //@line 11779
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 11780
  HEAP32[$13 >> 2] = 0; //@line 11781
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 11782
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 11783
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 11784
  HEAP32[$15 >> 2] = $2; //@line 11785
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 11786
  HEAP32[$16 >> 2] = $4; //@line 11787
  sp = STACKTOP; //@line 11788
  return;
 }
}
function _mbed_error_vfprintf__async_cb_20($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11796
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11800
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11802
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11806
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 11807
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 11813
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 11819
  _serial_putc(10096, $13 << 24 >> 24); //@line 11820
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 11823
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 11824
   HEAP32[$22 >> 2] = $12; //@line 11825
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 11826
   HEAP32[$23 >> 2] = $4; //@line 11827
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 11828
   HEAP32[$24 >> 2] = $6; //@line 11829
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 11830
   HEAP8[$25 >> 0] = $13; //@line 11831
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 11832
   HEAP32[$26 >> 2] = $10; //@line 11833
   sp = STACKTOP; //@line 11834
   return;
  }
  ___async_unwind = 0; //@line 11837
  HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 11838
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 11839
  HEAP32[$22 >> 2] = $12; //@line 11840
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 11841
  HEAP32[$23 >> 2] = $4; //@line 11842
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 11843
  HEAP32[$24 >> 2] = $6; //@line 11844
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 11845
  HEAP8[$25 >> 0] = $13; //@line 11846
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 11847
  HEAP32[$26 >> 2] = $10; //@line 11848
  sp = STACKTOP; //@line 11849
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 11852
  _serial_putc(10096, 13); //@line 11853
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 11856
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 11857
   HEAP8[$16 >> 0] = $13; //@line 11858
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 11859
   HEAP32[$17 >> 2] = $12; //@line 11860
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 11861
   HEAP32[$18 >> 2] = $4; //@line 11862
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 11863
   HEAP32[$19 >> 2] = $6; //@line 11864
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 11865
   HEAP32[$20 >> 2] = $10; //@line 11866
   sp = STACKTOP; //@line 11867
   return;
  }
  ___async_unwind = 0; //@line 11870
  HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 11871
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 11872
  HEAP8[$16 >> 0] = $13; //@line 11873
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 11874
  HEAP32[$17 >> 2] = $12; //@line 11875
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 11876
  HEAP32[$18 >> 2] = $4; //@line 11877
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 11878
  HEAP32[$19 >> 2] = $6; //@line 11879
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 11880
  HEAP32[$20 >> 2] = $10; //@line 11881
  sp = STACKTOP; //@line 11882
  return;
 }
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1146
 STACKTOP = STACKTOP + 16 | 0; //@line 1147
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1147
 $4 = sp; //@line 1148
 $$ = ($3 | 0) == 0 ? 10740 : $3; //@line 1150
 $6 = HEAP32[$$ >> 2] | 0; //@line 1151
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 1157
   } else {
    label = 17; //@line 1159
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 1163
   if (!$2) {
    $$0 = -2; //@line 1166
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 1170
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 1174
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 1177
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_913() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 1184
     $22 = HEAP8[$1 >> 0] | 0; //@line 1185
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 1189
      $$0 = 1; //@line 1190
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 1194
     if ($26 >>> 0 > 50) {
      label = 17; //@line 1197
      break;
     }
     $30 = HEAP32[1012 + ($26 << 2) >> 2] | 0; //@line 1202
     $31 = $2 + -1 | 0; //@line 1203
     if (!$31) {
      $$2 = $30; //@line 1206
     } else {
      $$03952 = $1 + 1 | 0; //@line 1208
      $$04051 = $30; //@line 1208
      $$04350 = $31; //@line 1208
      label = 11; //@line 1209
     }
    } else {
     $$03952 = $1; //@line 1212
     $$04051 = $6; //@line 1212
     $$04350 = $2; //@line 1212
     label = 11; //@line 1213
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 1217
      $35 = ($33 & 255) >>> 3; //@line 1219
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 1226
       break L1;
      } else {
       $$1 = $$03952; //@line 1229
       $$141 = $$04051; //@line 1229
       $$144 = $$04350; //@line 1229
       $44 = $33; //@line 1229
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 1233
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 1236
       $$144 = $$144 + -1 | 0; //@line 1237
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 1244
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 1247
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 1253
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 1257
      HEAP32[$$47 >> 2] = $$141; //@line 1258
      $$0 = $2 - $$144 | 0; //@line 1260
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 1264
    $$0 = -2; //@line 1265
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 1270
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 1272
  $$0 = -1; //@line 1273
 }
 STACKTOP = sp; //@line 1275
 return $$0 | 0; //@line 1275
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14547
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14549
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 14551
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14553
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14555
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14557
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14559
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14561
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -3009; //@line 14566
  $36 = ___async_retval; //@line 14567
  HEAP32[$36 >> 2] = $$0; //@line 14568
  return;
 }
 __ZN13SocketAddress8set_portEt($2, $4); //@line 14571
 $17 = $6 + 8 | 0; //@line 14572
 $18 = $6 + 52 | 0; //@line 14573
 $19 = $6 + 12 | 0; //@line 14574
 $20 = HEAP32[$17 >> 2] | 0; //@line 14575
 if (!$20) {
  $$0 = -3005; //@line 14578
  $36 = ___async_retval; //@line 14579
  HEAP32[$36 >> 2] = $$0; //@line 14580
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 14583
 $22 = HEAP32[$10 >> 2] | 0; //@line 14584
 $25 = HEAP32[(HEAP32[$22 >> 2] | 0) + 76 >> 2] | 0; //@line 14587
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 14588
 $26 = FUNCTION_TABLE_iiiiii[$25 & 7]($22, $20, $2, $12, $14) | 0; //@line 14589
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 151; //@line 14592
  $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 14593
  HEAP32[$27 >> 2] = $19; //@line 14594
  $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 14595
  HEAP32[$28 >> 2] = $8; //@line 14596
  $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 14597
  HEAP32[$29 >> 2] = $17; //@line 14598
  $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 14599
  HEAP32[$30 >> 2] = $18; //@line 14600
  $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 14601
  HEAP32[$31 >> 2] = $10; //@line 14602
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 14603
  HEAP32[$32 >> 2] = $2; //@line 14604
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 14605
  HEAP32[$33 >> 2] = $12; //@line 14606
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 14607
  HEAP32[$34 >> 2] = $14; //@line 14608
  sp = STACKTOP; //@line 14609
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 14613
 ___async_unwind = 0; //@line 14614
 HEAP32[$ReallocAsyncCtx2 >> 2] = 151; //@line 14615
 $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 14616
 HEAP32[$27 >> 2] = $19; //@line 14617
 $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 14618
 HEAP32[$28 >> 2] = $8; //@line 14619
 $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 14620
 HEAP32[$29 >> 2] = $17; //@line 14621
 $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 14622
 HEAP32[$30 >> 2] = $18; //@line 14623
 $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 14624
 HEAP32[$31 >> 2] = $10; //@line 14625
 $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 14626
 HEAP32[$32 >> 2] = $2; //@line 14627
 $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 14628
 HEAP32[$33 >> 2] = $12; //@line 14629
 $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 14630
 HEAP32[$34 >> 2] = $14; //@line 14631
 sp = STACKTOP; //@line 14632
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_128($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27166
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27168
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27170
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27172
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27174
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27176
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27178
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27180
 $$pre = HEAP32[$2 >> 2] | 0; //@line 27181
 if ($$pre | 0) {
  $17 = HEAP32[$$pre + 4 >> 2] | 0; //@line 27185
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 27186
  FUNCTION_TABLE_vii[$17 & 7]($6, $8); //@line 27187
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 27190
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 27191
   HEAP32[$18 >> 2] = $2; //@line 27192
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 27193
   HEAP32[$19 >> 2] = $4; //@line 27194
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 27195
   HEAP32[$20 >> 2] = $8; //@line 27196
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 27197
   HEAP32[$21 >> 2] = $10; //@line 27198
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 27199
   HEAP32[$22 >> 2] = $12; //@line 27200
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 27201
   HEAP32[$23 >> 2] = $6; //@line 27202
   $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 27203
   HEAP32[$24 >> 2] = $14; //@line 27204
   sp = STACKTOP; //@line 27205
   return;
  }
  ___async_unwind = 0; //@line 27208
  HEAP32[$ReallocAsyncCtx4 >> 2] = 133; //@line 27209
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 27210
  HEAP32[$18 >> 2] = $2; //@line 27211
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 27212
  HEAP32[$19 >> 2] = $4; //@line 27213
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 27214
  HEAP32[$20 >> 2] = $8; //@line 27215
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 27216
  HEAP32[$21 >> 2] = $10; //@line 27217
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 27218
  HEAP32[$22 >> 2] = $12; //@line 27219
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 27220
  HEAP32[$23 >> 2] = $6; //@line 27221
  $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 27222
  HEAP32[$24 >> 2] = $14; //@line 27223
  sp = STACKTOP; //@line 27224
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 27227
 $25 = HEAP32[$10 >> 2] | 0; //@line 27228
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 84 >> 2] | 0; //@line 27231
 $29 = HEAP32[$12 >> 2] | 0; //@line 27232
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27233
 FUNCTION_TABLE_viiii[$28 & 7]($25, $29, 135, $6); //@line 27234
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 27237
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 27238
  HEAP32[$30 >> 2] = $14; //@line 27239
  sp = STACKTOP; //@line 27240
  return;
 }
 ___async_unwind = 0; //@line 27243
 HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 27244
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 27245
 HEAP32[$30 >> 2] = $14; //@line 27246
 sp = STACKTOP; //@line 27247
 return;
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb_61($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14640
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14642
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14644
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14646
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14648
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14650
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14652
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14654
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14656
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14658
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$0 = $AsyncRetVal; //@line 14664
  $37 = ___async_retval; //@line 14665
  HEAP32[$37 >> 2] = $$0; //@line 14666
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 14669
 if (!$18) {
  $$0 = -3005; //@line 14672
  $37 = ___async_retval; //@line 14673
  HEAP32[$37 >> 2] = $$0; //@line 14674
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 14677
 $20 = HEAP32[$10 >> 2] | 0; //@line 14678
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 76 >> 2] | 0; //@line 14681
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 14682
 $24 = FUNCTION_TABLE_iiiiii[$23 & 7]($20, $18, $12, $14, $16) | 0; //@line 14683
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 151; //@line 14686
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 14687
  HEAP32[$25 >> 2] = $2; //@line 14688
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 14689
  HEAP32[$26 >> 2] = $4; //@line 14690
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 14691
  HEAP32[$27 >> 2] = $6; //@line 14692
  $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 14693
  HEAP32[$28 >> 2] = $8; //@line 14694
  $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 14695
  HEAP32[$29 >> 2] = $10; //@line 14696
  $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 14697
  HEAP32[$30 >> 2] = $12; //@line 14698
  $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 14699
  HEAP32[$31 >> 2] = $14; //@line 14700
  $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 14701
  HEAP32[$32 >> 2] = $16; //@line 14702
  sp = STACKTOP; //@line 14703
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 14707
 ___async_unwind = 0; //@line 14708
 HEAP32[$ReallocAsyncCtx2 >> 2] = 151; //@line 14709
 $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 14710
 HEAP32[$25 >> 2] = $2; //@line 14711
 $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 14712
 HEAP32[$26 >> 2] = $4; //@line 14713
 $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 14714
 HEAP32[$27 >> 2] = $6; //@line 14715
 $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 14716
 HEAP32[$28 >> 2] = $8; //@line 14717
 $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 14718
 HEAP32[$29 >> 2] = $10; //@line 14719
 $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 14720
 HEAP32[$30 >> 2] = $12; //@line 14721
 $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 14722
 HEAP32[$31 >> 2] = $14; //@line 14723
 $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 14724
 HEAP32[$32 >> 2] = $16; //@line 14725
 sp = STACKTOP; //@line 14726
 return;
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24449
 STACKTOP = STACKTOP + 48 | 0; //@line 24450
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 24450
 $vararg_buffer3 = sp + 16 | 0; //@line 24451
 $vararg_buffer = sp; //@line 24452
 $3 = sp + 32 | 0; //@line 24453
 $4 = $0 + 28 | 0; //@line 24454
 $5 = HEAP32[$4 >> 2] | 0; //@line 24455
 HEAP32[$3 >> 2] = $5; //@line 24456
 $7 = $0 + 20 | 0; //@line 24458
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 24460
 HEAP32[$3 + 4 >> 2] = $9; //@line 24461
 HEAP32[$3 + 8 >> 2] = $1; //@line 24463
 HEAP32[$3 + 12 >> 2] = $2; //@line 24465
 $12 = $9 + $2 | 0; //@line 24466
 $13 = $0 + 60 | 0; //@line 24467
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 24470
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 24472
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 24474
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 24476
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 24480
  } else {
   $$04756 = 2; //@line 24482
   $$04855 = $12; //@line 24482
   $$04954 = $3; //@line 24482
   $27 = $17; //@line 24482
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 24488
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 24490
    $38 = $27 >>> 0 > $37 >>> 0; //@line 24491
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 24493
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 24495
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 24497
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 24500
    $44 = $$150 + 4 | 0; //@line 24501
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 24504
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 24507
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 24509
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 24511
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 24513
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 24516
     break L1;
    } else {
     $$04756 = $$1; //@line 24519
     $$04954 = $$150; //@line 24519
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 24523
   HEAP32[$4 >> 2] = 0; //@line 24524
   HEAP32[$7 >> 2] = 0; //@line 24525
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 24528
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 24531
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 24536
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 24542
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 24547
  $25 = $20; //@line 24548
  HEAP32[$4 >> 2] = $25; //@line 24549
  HEAP32[$7 >> 2] = $25; //@line 24550
  $$051 = $2; //@line 24551
 }
 STACKTOP = sp; //@line 24553
 return $$051 | 0; //@line 24553
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 416
 $5 = $1 + 8 | 0; //@line 417
 do {
  if (!(HEAP8[$5 >> 0] | 0)) {
   label = 7; //@line 422
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$5 >> 0] | 0)) {
     label = 7; //@line 430
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 436
   _puts(1750) | 0; //@line 437
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 37; //@line 440
    sp = STACKTOP; //@line 441
    return 0; //@line 442
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 444
   $$1 = -3012; //@line 445
   return $$1 | 0; //@line 446
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 108 >> 2] | 0; //@line 453
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 454
   $14 = FUNCTION_TABLE_iiii[$13 & 31]($0, $1, $2) | 0; //@line 455
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 38; //@line 458
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 460
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 462
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 464
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 466
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 468
    sp = STACKTOP; //@line 469
    return 0; //@line 470
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 472
   if (($14 | 0) < 0) {
    $$1 = $14; //@line 475
    return $$1 | 0; //@line 476
   } else {
    $21 = $1 + 12 | 0; //@line 478
    dest = $21; //@line 479
    src = $2; //@line 479
    stop = dest + 60 | 0; //@line 479
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 479
     dest = dest + 4 | 0; //@line 479
     src = src + 4 | 0; //@line 479
    } while ((dest | 0) < (stop | 0));
    HEAP16[$21 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 479
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 484
 _wait_ms(1); //@line 485
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 39; //@line 488
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 490
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 492
  HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 494
  HEAP32[$AsyncCtx10 + 16 >> 2] = $4; //@line 496
  sp = STACKTOP; //@line 497
  return 0; //@line 498
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 500
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 116 >> 2] | 0; //@line 503
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 504
 $29 = FUNCTION_TABLE_iiiii[$28 & 15]($0, $1, $3, $4) | 0; //@line 505
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 40; //@line 508
  sp = STACKTOP; //@line 509
  return 0; //@line 510
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 512
 $$1 = $29; //@line 513
 return $$1 | 0; //@line 514
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_88($0) {
 $0 = $0 | 0;
 var $$391 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 18829
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18838
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18840
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18842
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18844
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18846
 do {
  if (HEAP8[$0 + 4 >> 0] & 1) {
   $$391 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 18850
  } else {
   $17 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 18852
   if ($17 | 0) {
    __ZdlPv($17); //@line 18855
   }
   $19 = HEAP32[$8 >> 2] | 0; //@line 18857
   if ($19 | 0) {
    $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 18861
    $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 18862
    FUNCTION_TABLE_vi[$22 & 511]($12); //@line 18863
    if (___async) {
     HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 18866
     $23 = $ReallocAsyncCtx14 + 4 | 0; //@line 18867
     HEAP32[$23 >> 2] = $10; //@line 18868
     $24 = $ReallocAsyncCtx14 + 8 | 0; //@line 18869
     HEAP32[$24 >> 2] = $14; //@line 18870
     $25 = $ReallocAsyncCtx14 + 12 | 0; //@line 18871
     HEAP32[$25 >> 2] = $16; //@line 18872
     sp = STACKTOP; //@line 18873
     return;
    }
    ___async_unwind = 0; //@line 18876
    HEAP32[$ReallocAsyncCtx14 >> 2] = 188; //@line 18877
    $23 = $ReallocAsyncCtx14 + 4 | 0; //@line 18878
    HEAP32[$23 >> 2] = $10; //@line 18879
    $24 = $ReallocAsyncCtx14 + 8 | 0; //@line 18880
    HEAP32[$24 >> 2] = $14; //@line 18881
    $25 = $ReallocAsyncCtx14 + 12 | 0; //@line 18882
    HEAP32[$25 >> 2] = $16; //@line 18883
    sp = STACKTOP; //@line 18884
    return;
   }
   $27 = HEAP32[$10 + 28 >> 2] | 0; //@line 18888
   if (!$27) {
    __ZdlPv($10); //@line 18891
    $$391 = -3007; //@line 18892
    break;
   }
   $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 18896
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 18897
   FUNCTION_TABLE_vi[$30 & 511]($14); //@line 18898
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 189; //@line 18901
    $31 = $ReallocAsyncCtx15 + 4 | 0; //@line 18902
    HEAP32[$31 >> 2] = $10; //@line 18903
    $32 = $ReallocAsyncCtx15 + 8 | 0; //@line 18904
    HEAP32[$32 >> 2] = $16; //@line 18905
    sp = STACKTOP; //@line 18906
    return;
   }
   ___async_unwind = 0; //@line 18909
   HEAP32[$ReallocAsyncCtx15 >> 2] = 189; //@line 18910
   $31 = $ReallocAsyncCtx15 + 4 | 0; //@line 18911
   HEAP32[$31 >> 2] = $10; //@line 18912
   $32 = $ReallocAsyncCtx15 + 8 | 0; //@line 18913
   HEAP32[$32 >> 2] = $16; //@line 18914
   sp = STACKTOP; //@line 18915
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$391; //@line 18920
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$09 = 0, $$1 = 0, $$byval_copy = 0, $12 = 0, $13 = 0, $22 = 0, $4 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9509
 STACKTOP = STACKTOP + 112 | 0; //@line 9510
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 9510
 $$byval_copy = sp + 88 | 0; //@line 9511
 $4 = sp + 24 | 0; //@line 9512
 $5 = sp; //@line 9513
 $7 = ($3 | 0) == 0; //@line 9515
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, $1) | 0) {
  if (!$7) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($2) | 0) != ($3 | 0)) {
    $$09 = -3009; //@line 9521
    STACKTOP = sp; //@line 9522
    return $$09 | 0; //@line 9522
   }
  }
  $$09 = 0; //@line 9525
  STACKTOP = sp; //@line 9526
  return $$09 | 0; //@line 9526
 }
 if ($7) {
  HEAP32[$5 >> 2] = 0; //@line 9529
  HEAP32[$5 + 4 >> 2] = 0; //@line 9529
  HEAP32[$5 + 8 >> 2] = 0; //@line 9529
  HEAP32[$5 + 12 >> 2] = 0; //@line 9529
  HEAP32[$5 + 16 >> 2] = 0; //@line 9529
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 9530
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 9530
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 9530
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 9530
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 9530
  __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 9531
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 9534
  $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9535
  $13 = FUNCTION_TABLE_ii[$12 & 31]($0) | 0; //@line 9536
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 98; //@line 9539
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 9541
   HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 9543
   HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 9545
   HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 9547
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 9549
   HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 9551
   sp = STACKTOP; //@line 9552
   STACKTOP = sp; //@line 9553
   return 0; //@line 9553
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9555
  if (__ZN13SocketAddress14set_ip_addressEPKc($4, $13) | 0) {
   $$0 = __ZNK13SocketAddress14get_ip_versionEv($4) | 0; //@line 9559
  } else {
   $$0 = 0; //@line 9561
  }
  $$1 = $$0; //@line 9563
 } else {
  $$1 = $3; //@line 9565
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9567
 $22 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $$1) | 0; //@line 9568
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 99; //@line 9571
  sp = STACKTOP; //@line 9572
  STACKTOP = sp; //@line 9573
  return 0; //@line 9573
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9575
 $$09 = $22; //@line 9576
 STACKTOP = sp; //@line 9577
 return $$09 | 0; //@line 9577
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14122
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14124
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14126
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14128
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14130
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14132
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14134
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14136
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14138
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 14144
  $34 = ___async_retval; //@line 14145
  HEAP32[$34 >> 2] = $$2; //@line 14146
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 14149
 if (!$16) {
  $$2 = -3005; //@line 14152
  $34 = ___async_retval; //@line 14153
  HEAP32[$34 >> 2] = $$2; //@line 14154
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 14157
 $18 = HEAP32[$8 >> 2] | 0; //@line 14158
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 80 >> 2] | 0; //@line 14161
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 14162
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 14163
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 14166
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 14167
  HEAP32[$23 >> 2] = $2; //@line 14168
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 14169
  HEAP32[$24 >> 2] = $4; //@line 14170
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 14171
  HEAP32[$25 >> 2] = $6; //@line 14172
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 14173
  HEAP32[$26 >> 2] = $8; //@line 14174
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 14175
  HEAP32[$27 >> 2] = $10; //@line 14176
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 14177
  HEAP32[$28 >> 2] = $12; //@line 14178
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 14179
  HEAP32[$29 >> 2] = $14; //@line 14180
  sp = STACKTOP; //@line 14181
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 14185
 ___async_unwind = 0; //@line 14186
 HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 14187
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 14188
 HEAP32[$23 >> 2] = $2; //@line 14189
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 14190
 HEAP32[$24 >> 2] = $4; //@line 14191
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 14192
 HEAP32[$25 >> 2] = $6; //@line 14193
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 14194
 HEAP32[$26 >> 2] = $8; //@line 14195
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 14196
 HEAP32[$27 >> 2] = $10; //@line 14197
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 14198
 HEAP32[$28 >> 2] = $12; //@line 14199
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 14200
 HEAP32[$29 >> 2] = $14; //@line 14201
 sp = STACKTOP; //@line 14202
 return;
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13271
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13273
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13275
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13277
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13279
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13281
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13283
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13285
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13287
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 13293
  $34 = ___async_retval; //@line 13294
  HEAP32[$34 >> 2] = $$2; //@line 13295
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 13298
 if (!$16) {
  $$2 = -3005; //@line 13301
  $34 = ___async_retval; //@line 13302
  HEAP32[$34 >> 2] = $$2; //@line 13303
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 13306
 $18 = HEAP32[$8 >> 2] | 0; //@line 13307
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 76 >> 2] | 0; //@line 13310
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 13311
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 13312
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 152; //@line 13315
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 13316
  HEAP32[$23 >> 2] = $2; //@line 13317
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 13318
  HEAP32[$24 >> 2] = $4; //@line 13319
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 13320
  HEAP32[$25 >> 2] = $6; //@line 13321
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 13322
  HEAP32[$26 >> 2] = $8; //@line 13323
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 13324
  HEAP32[$27 >> 2] = $10; //@line 13325
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 13326
  HEAP32[$28 >> 2] = $12; //@line 13327
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 13328
  HEAP32[$29 >> 2] = $14; //@line 13329
  sp = STACKTOP; //@line 13330
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 13334
 ___async_unwind = 0; //@line 13335
 HEAP32[$ReallocAsyncCtx >> 2] = 152; //@line 13336
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 13337
 HEAP32[$23 >> 2] = $2; //@line 13338
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 13339
 HEAP32[$24 >> 2] = $4; //@line 13340
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 13341
 HEAP32[$25 >> 2] = $6; //@line 13342
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 13343
 HEAP32[$26 >> 2] = $8; //@line 13344
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 13345
 HEAP32[$27 >> 2] = $10; //@line 13346
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 13347
 HEAP32[$28 >> 2] = $12; //@line 13348
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 13349
 HEAP32[$29 >> 2] = $14; //@line 13350
 sp = STACKTOP; //@line 13351
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_197($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 1530
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1534
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1536
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1538
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1540
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1542
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1543
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 1547
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 1548
  FUNCTION_TABLE_vi[$16 & 511]($6); //@line 1549
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 108; //@line 1552
   $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 1553
   HEAP32[$17 >> 2] = $4; //@line 1554
   $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 1555
   HEAP32[$18 >> 2] = $8; //@line 1556
   $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 1557
   HEAP32[$19 >> 2] = $10; //@line 1558
   $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 1559
   HEAP32[$20 >> 2] = $12; //@line 1560
   sp = STACKTOP; //@line 1561
   return;
  }
  ___async_unwind = 0; //@line 1564
  HEAP32[$ReallocAsyncCtx7 >> 2] = 108; //@line 1565
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 1566
  HEAP32[$17 >> 2] = $4; //@line 1567
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 1568
  HEAP32[$18 >> 2] = $8; //@line 1569
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 1570
  HEAP32[$19 >> 2] = $10; //@line 1571
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 1572
  HEAP32[$20 >> 2] = $12; //@line 1573
  sp = STACKTOP; //@line 1574
  return;
 }
 $21 = HEAP32[$4 >> 2] | 0; //@line 1577
 if (!$21) {
  HEAP32[___async_retval >> 2] = $10; //@line 1581
  return;
 }
 $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 1585
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 1586
 FUNCTION_TABLE_vi[$24 & 511]($8); //@line 1587
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 1590
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 1591
  HEAP32[$25 >> 2] = $8; //@line 1592
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 1593
  HEAP32[$26 >> 2] = $10; //@line 1594
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 1595
  HEAP32[$27 >> 2] = $12; //@line 1596
  sp = STACKTOP; //@line 1597
  return;
 }
 ___async_unwind = 0; //@line 1600
 HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 1601
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 1602
 HEAP32[$25 >> 2] = $8; //@line 1603
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 1604
 HEAP32[$26 >> 2] = $10; //@line 1605
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 1606
 HEAP32[$27 >> 2] = $12; //@line 1607
 sp = STACKTOP; //@line 1608
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_129($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27254
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27260
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27262
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27264
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27266
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27268
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27269
 $15 = $$pre$i$i; //@line 27270
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 27271
 if (!$$pre$i$i) {
  $24 = HEAP32[$8 >> 2] | 0; //@line 27274
  $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 84 >> 2] | 0; //@line 27277
  $28 = HEAP32[$10 >> 2] | 0; //@line 27278
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27279
  FUNCTION_TABLE_viiii[$27 & 7]($24, $28, 135, $12); //@line 27280
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 27283
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 27284
   HEAP32[$29 >> 2] = $14; //@line 27285
   sp = STACKTOP; //@line 27286
   return;
  }
  ___async_unwind = 0; //@line 27289
  HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 27290
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 27291
  HEAP32[$29 >> 2] = $14; //@line 27292
  sp = STACKTOP; //@line 27293
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 27297
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 27298
  FUNCTION_TABLE_vi[$18 & 511]($6); //@line 27299
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 134; //@line 27302
   $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 27303
   HEAP32[$19 >> 2] = $6; //@line 27304
   $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 27305
   HEAP32[$20 >> 2] = $8; //@line 27306
   $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 27307
   HEAP32[$21 >> 2] = $10; //@line 27308
   $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 27309
   HEAP32[$22 >> 2] = $12; //@line 27310
   $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 27311
   HEAP32[$23 >> 2] = $14; //@line 27312
   sp = STACKTOP; //@line 27313
   return;
  }
  ___async_unwind = 0; //@line 27316
  HEAP32[$ReallocAsyncCtx5 >> 2] = 134; //@line 27317
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 27318
  HEAP32[$19 >> 2] = $6; //@line 27319
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 27320
  HEAP32[$20 >> 2] = $8; //@line 27321
  $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 27322
  HEAP32[$21 >> 2] = $10; //@line 27323
  $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 27324
  HEAP32[$22 >> 2] = $12; //@line 27325
  $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 27326
  HEAP32[$23 >> 2] = $14; //@line 27327
  sp = STACKTOP; //@line 27328
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_115($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26273
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26277
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26279
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26281
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26283
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26285
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26287
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26289
 $$pre = HEAP32[$4 >> 2] | 0; //@line 26291
 $17 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 26292
 if ($$pre | 0) {
  $20 = HEAP32[$$pre + 4 >> 2] | 0; //@line 26296
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 26297
  FUNCTION_TABLE_vii[$20 & 7]($14, $12); //@line 26298
  if (!___async) {
   ___async_unwind = 0; //@line 26301
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 260; //@line 26303
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $16; //@line 26305
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 26307
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 26309
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $10; //@line 26311
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $17; //@line 26313
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $14; //@line 26315
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 26317
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $12; //@line 26319
  sp = STACKTOP; //@line 26320
  return;
 }
 $29 = $8 + 12 | 0; //@line 26323
 HEAP32[$29 >> 2] = 0; //@line 26324
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 26325
 $30 = FUNCTION_TABLE_iiii[$17 & 31]($6, $10, $8) | 0; //@line 26326
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 26329
  $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 26330
  HEAP32[$31 >> 2] = $29; //@line 26331
  $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 26332
  HEAP32[$32 >> 2] = $14; //@line 26333
  $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 26334
  HEAP32[$33 >> 2] = $4; //@line 26335
  $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 26336
  HEAP32[$34 >> 2] = $12; //@line 26337
  sp = STACKTOP; //@line 26338
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 26342
 ___async_unwind = 0; //@line 26343
 HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 26344
 $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 26345
 HEAP32[$31 >> 2] = $29; //@line 26346
 $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 26347
 HEAP32[$32 >> 2] = $14; //@line 26348
 $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 26349
 HEAP32[$33 >> 2] = $4; //@line 26350
 $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 26351
 HEAP32[$34 >> 2] = $12; //@line 26352
 sp = STACKTOP; //@line 26353
 return;
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 19254
 STACKTOP = STACKTOP + 128 | 0; //@line 19255
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 19255
 $2 = sp; //@line 19256
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 19257
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 19258
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 284; //@line 19261
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 19263
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 19265
  sp = STACKTOP; //@line 19266
  STACKTOP = sp; //@line 19267
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19269
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 19272
  return;
 }
 if (!(HEAP32[2523] | 0)) {
  _serial_init(10096, 2, 3); //@line 19277
  $$01213 = 0; //@line 19278
  $$014 = 0; //@line 19278
 } else {
  $$01213 = 0; //@line 19280
  $$014 = 0; //@line 19280
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 19284
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19289
   _serial_putc(10096, 13); //@line 19290
   if (___async) {
    label = 8; //@line 19293
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19296
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19299
  _serial_putc(10096, $$01213 << 24 >> 24); //@line 19300
  if (___async) {
   label = 11; //@line 19303
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19306
  $24 = $$014 + 1 | 0; //@line 19307
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 19310
   break;
  } else {
   $$014 = $24; //@line 19313
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 285; //@line 19317
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 19319
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 19321
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 19323
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 19325
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 19327
  sp = STACKTOP; //@line 19328
  STACKTOP = sp; //@line 19329
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 286; //@line 19332
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 19334
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 19336
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 19338
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 19340
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 19342
  sp = STACKTOP; //@line 19343
  STACKTOP = sp; //@line 19344
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 19347
  return;
 }
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_132($0) {
 $0 = $0 | 0;
 var $$pre50 = 0, $10 = 0, $13 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27519
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27521
 __ZdlPv(HEAP32[$0 + 8 >> 2] | 0); //@line 27524
 $$pre50 = HEAP32[$2 >> 2] | 0; //@line 27525
 $6 = HEAP32[$$pre50 + 64 >> 2] | 0; //@line 27527
 if (!$6) {
  $9 = $$pre50; //@line 27530
 } else {
  __ZdaPv($6); //@line 27532
  $9 = HEAP32[$2 >> 2] | 0; //@line 27534
 }
 $10 = HEAP32[$9 + 12 >> 2] | 0; //@line 27537
 if (!$10) {
  $13 = $9; //@line 27540
 } else {
  __ZdlPv($10); //@line 27542
  $13 = HEAP32[$2 >> 2] | 0; //@line 27544
 }
 do {
  if ($13 | 0) {
   $15 = HEAP32[$13 + 44 >> 2] | 0; //@line 27550
   if ($15 | 0) {
    $19 = HEAP32[$15 + 8 >> 2] | 0; //@line 27555
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27556
    FUNCTION_TABLE_vi[$19 & 511]($13 + 32 | 0); //@line 27557
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 256; //@line 27560
     $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 27561
     HEAP32[$20 >> 2] = $13; //@line 27562
     $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 27563
     HEAP32[$21 >> 2] = $2; //@line 27564
     sp = STACKTOP; //@line 27565
     return;
    }
    ___async_unwind = 0; //@line 27568
    HEAP32[$ReallocAsyncCtx3 >> 2] = 256; //@line 27569
    $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 27570
    HEAP32[$20 >> 2] = $13; //@line 27571
    $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 27572
    HEAP32[$21 >> 2] = $2; //@line 27573
    sp = STACKTOP; //@line 27574
    return;
   }
   $23 = HEAP32[$13 + 28 >> 2] | 0; //@line 27578
   if (!$23) {
    __ZdlPv($13); //@line 27581
    break;
   }
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 27586
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27587
   FUNCTION_TABLE_vi[$27 & 511]($13 + 16 | 0); //@line 27588
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 27591
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 27592
    HEAP32[$28 >> 2] = $13; //@line 27593
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 27594
    HEAP32[$29 >> 2] = $2; //@line 27595
    sp = STACKTOP; //@line 27596
    return;
   }
   ___async_unwind = 0; //@line 27599
   HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 27600
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 27601
   HEAP32[$28 >> 2] = $13; //@line 27602
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 27603
   HEAP32[$29 >> 2] = $2; //@line 27604
   sp = STACKTOP; //@line 27605
   return;
  }
 } while (0);
 HEAP32[$2 >> 2] = 0; //@line 27609
 HEAP32[___async_retval >> 2] = 0; //@line 27611
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_151($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29428
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29432
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29434
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 29436
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29438
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 29440
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29442
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29444
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29446
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29448
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 29451
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29453
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 29457
   $27 = $6 + 24 | 0; //@line 29458
   $28 = $4 + 8 | 0; //@line 29459
   $29 = $6 + 54 | 0; //@line 29460
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 29490
    HEAP8[$14 >> 0] = 0; //@line 29491
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 29492
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 29493
    if (!___async) {
     ___async_unwind = 0; //@line 29496
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 345; //@line 29498
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 29500
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 29502
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 29504
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 29506
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 29508
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 29510
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 29512
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 29514
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 29516
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 29518
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 29520
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 29522
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 29524
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 29527
    sp = STACKTOP; //@line 29528
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 29533
 HEAP8[$14 >> 0] = $12; //@line 29534
 return;
}
function _randLIB_seed_random() {
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $37 = 0, $38 = 0, $39 = 0, $43 = 0, $44 = 0, $45 = 0, $49 = 0, $50 = 0, $51 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0;
 $0 = _arm_random_seed_get() | 0; //@line 1671
 $1 = _arm_random_seed_get() | 0; //@line 1672
 $2 = 9824; //@line 1673
 $9 = $0 ^ HEAP32[$2 + 4 >> 2]; //@line 1680
 $10 = 9824; //@line 1681
 HEAP32[$10 >> 2] = $1 ^ HEAP32[$2 >> 2]; //@line 1683
 HEAP32[$10 + 4 >> 2] = $9; //@line 1686
 $14 = _arm_random_seed_get() | 0; //@line 1687
 $15 = _arm_random_seed_get() | 0; //@line 1688
 $16 = 9832; //@line 1689
 $22 = $15 ^ HEAP32[$16 >> 2]; //@line 1695
 $23 = $14 ^ HEAP32[$16 + 4 >> 2]; //@line 1696
 $24 = 9832; //@line 1697
 HEAP32[$24 >> 2] = $22; //@line 1699
 HEAP32[$24 + 4 >> 2] = $23; //@line 1702
 $28 = 9824; //@line 1703
 if (!((HEAP32[$28 >> 2] | 0) == ($22 | 0) ? (HEAP32[$28 + 4 >> 2] | 0) == ($23 | 0) : 0)) {
  return;
 }
 $37 = _i64Add($22 | 0, $23 | 0, 2135587861, -1640531527) | 0; //@line 1715
 $38 = tempRet0; //@line 1716
 $39 = _bitshift64Lshr($37 | 0, $38 | 0, 30) | 0; //@line 1717
 $43 = ___muldi3($39 ^ $37 | 0, tempRet0 ^ $38 | 0, 484763065, -1084733587) | 0; //@line 1721
 $44 = tempRet0; //@line 1722
 $45 = _bitshift64Lshr($43 | 0, $44 | 0, 27) | 0; //@line 1723
 $49 = ___muldi3($45 ^ $43 | 0, tempRet0 ^ $44 | 0, 321982955, -1798288965) | 0; //@line 1727
 $50 = tempRet0; //@line 1728
 $51 = _bitshift64Lshr($49 | 0, $50 | 0, 31) | 0; //@line 1729
 $55 = $49 ^ $22 ^ $51; //@line 1733
 $56 = $50 ^ $23 ^ tempRet0; //@line 1734
 $57 = 9824; //@line 1735
 HEAP32[$57 >> 2] = $55; //@line 1737
 HEAP32[$57 + 4 >> 2] = $56; //@line 1740
 $61 = _i64Add($22 | 0, $23 | 0, -23791574, 1013904242) | 0; //@line 1741
 $62 = tempRet0; //@line 1742
 $63 = _bitshift64Lshr($61 | 0, $62 | 0, 30) | 0; //@line 1743
 $67 = ___muldi3($63 ^ $61 | 0, tempRet0 ^ $62 | 0, 484763065, -1084733587) | 0; //@line 1747
 $68 = tempRet0; //@line 1748
 $69 = _bitshift64Lshr($67 | 0, $68 | 0, 27) | 0; //@line 1749
 $73 = ___muldi3($69 ^ $67 | 0, tempRet0 ^ $68 | 0, 321982955, -1798288965) | 0; //@line 1753
 $74 = tempRet0; //@line 1754
 $75 = _bitshift64Lshr($73 | 0, $74 | 0, 31) | 0; //@line 1755
 $79 = $75 ^ $73 ^ $22; //@line 1759
 $80 = tempRet0 ^ $74 ^ $23; //@line 1760
 $81 = 9832; //@line 1761
 HEAP32[$81 >> 2] = $79; //@line 1763
 HEAP32[$81 + 4 >> 2] = $80; //@line 1766
 if (!(($79 | $55 | 0) == 0 & ($80 | $56 | 0) == 0)) {
  return;
 }
 $90 = 9824; //@line 1775
 HEAP32[$90 >> 2] = 1; //@line 1777
 HEAP32[$90 + 4 >> 2] = 0; //@line 1780
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29312
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29316
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29318
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 29320
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29322
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 29324
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29326
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29328
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29330
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29332
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29334
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29336
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29338
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 29341
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 29342
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 29375
    HEAP8[$14 >> 0] = 0; //@line 29376
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 29377
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 29378
    if (!___async) {
     ___async_unwind = 0; //@line 29381
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 345; //@line 29383
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 29385
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 29387
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 29389
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 29391
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 29393
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 29395
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 29397
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 29399
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 29401
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 29403
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 29405
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 29407
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 29409
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 29412
    sp = STACKTOP; //@line 29413
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 29418
 HEAP8[$14 >> 0] = $12; //@line 29419
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_91($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 18983
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18985
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18987
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18989
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18991
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18993
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18995
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18997
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18999
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19001
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19003
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19005
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19007
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19009
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19011
 if (!$AsyncRetVal) {
  HEAP32[___async_retval >> 2] = -3007; //@line 19015
  return;
 }
 $29 = $AsyncRetVal + 16 | 0; //@line 19018
 HEAP32[$29 >> 2] = 0; //@line 19019
 HEAP32[$29 + 4 >> 2] = 0; //@line 19019
 HEAP32[$29 + 8 >> 2] = 0; //@line 19019
 HEAP32[$29 + 12 >> 2] = 0; //@line 19019
 HEAP32[$29 + 16 >> 2] = 0; //@line 19019
 HEAP32[$29 + 20 >> 2] = 0; //@line 19019
 HEAP32[$29 + 24 >> 2] = 0; //@line 19019
 HEAP32[$29 + 28 >> 2] = 0; //@line 19019
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 19023
 $33 = __ZnajRKSt9nothrow_t(($26 | 0) < -1 ? -1 : $26 + 1 | 0, 12052) | 0; //@line 19024
 if (!___async) {
  HEAP32[___async_retval >> 2] = $33; //@line 19028
  ___async_unwind = 0; //@line 19029
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 172; //@line 19031
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 19033
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 19035
 HEAP32[$ReallocAsyncCtx17 + 12 >> 2] = $AsyncRetVal; //@line 19037
 HEAP32[$ReallocAsyncCtx17 + 16 >> 2] = $29; //@line 19039
 HEAP32[$ReallocAsyncCtx17 + 20 >> 2] = $6; //@line 19041
 HEAP32[$ReallocAsyncCtx17 + 24 >> 2] = $8; //@line 19043
 HEAP32[$ReallocAsyncCtx17 + 28 >> 2] = $10; //@line 19045
 HEAP32[$ReallocAsyncCtx17 + 32 >> 2] = $12; //@line 19047
 HEAP32[$ReallocAsyncCtx17 + 36 >> 2] = $14; //@line 19049
 HEAP32[$ReallocAsyncCtx17 + 40 >> 2] = $16; //@line 19051
 HEAP32[$ReallocAsyncCtx17 + 44 >> 2] = $18; //@line 19053
 HEAP32[$ReallocAsyncCtx17 + 48 >> 2] = $20; //@line 19055
 HEAP32[$ReallocAsyncCtx17 + 52 >> 2] = $22; //@line 19057
 HEAP32[$ReallocAsyncCtx17 + 56 >> 2] = $24; //@line 19059
 sp = STACKTOP; //@line 19060
 return;
}
function __Z17recv_coap_messagev__async_cb_9($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $41 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10876
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10878
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10882
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10884
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10888
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10890
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10892
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10894
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10896
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10898
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10900
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10902
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10904
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10906
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10908
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 10910
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 10912
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 10914
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10916
 if (($AsyncRetVal | 0) <= 0) {
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 10919
  _printf(6307, $8) | 0; //@line 10920
  _free($6); //@line 10921
  return;
 }
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 10924
 _printf(6134, $2) | 0; //@line 10925
 $41 = HEAP32[2540] | 0; //@line 10926
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 10928
 $43 = _sn_coap_parser($41, $AsyncRetVal & 65535, $6, 748) | 0; //@line 10929
 if (!___async) {
  HEAP32[___async_retval >> 2] = $43; //@line 10933
  ___async_unwind = 0; //@line 10934
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 296; //@line 10936
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $14; //@line 10938
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $16; //@line 10940
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $18; //@line 10942
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $20; //@line 10944
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $22; //@line 10946
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $24; //@line 10948
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $26; //@line 10950
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $28; //@line 10952
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $30; //@line 10954
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $32; //@line 10956
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $34; //@line 10958
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $36; //@line 10960
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $38; //@line 10962
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $6; //@line 10964
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $12; //@line 10966
 sp = STACKTOP; //@line 10967
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 2656
 }
 ret = dest | 0; //@line 2659
 dest_end = dest + num | 0; //@line 2660
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 2664
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2665
   dest = dest + 1 | 0; //@line 2666
   src = src + 1 | 0; //@line 2667
   num = num - 1 | 0; //@line 2668
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 2670
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 2671
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 2673
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 2674
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 2675
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 2676
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 2677
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 2678
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 2679
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 2680
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 2681
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 2682
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 2683
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 2684
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 2685
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 2686
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 2687
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 2688
   dest = dest + 64 | 0; //@line 2689
   src = src + 64 | 0; //@line 2690
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 2693
   dest = dest + 4 | 0; //@line 2694
   src = src + 4 | 0; //@line 2695
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 2699
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2701
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 2702
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 2703
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 2704
   dest = dest + 4 | 0; //@line 2705
   src = src + 4 | 0; //@line 2706
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2711
  dest = dest + 1 | 0; //@line 2712
  src = src + 1 | 0; //@line 2713
 }
 return ret | 0; //@line 2715
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1281
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1287
   _wait_ms(10); //@line 1288
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 56; //@line 1291
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1293
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1295
    sp = STACKTOP; //@line 1296
    return 0; //@line 1297
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1299
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 1305
 $9 = $0 + 156 | 0; //@line 1306
 _equeue_mutex_lock($9); //@line 1307
 $10 = $0 + 24 | 0; //@line 1308
 $11 = HEAP32[$10 >> 2] | 0; //@line 1309
 L7 : do {
  if (!$11) {
   label = 11; //@line 1313
  } else {
   $$03842$i = $10; //@line 1315
   $14 = $11; //@line 1315
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 1322
    $21 = HEAP32[$20 >> 2] | 0; //@line 1323
    if (!$21) {
     label = 11; //@line 1326
     break L7;
    } else {
     $$03842$i = $20; //@line 1329
     $14 = $21; //@line 1329
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 1333
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 1336
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 1338
    $$038$sink$i = $17 + 8 | 0; //@line 1340
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 1344
   _equeue_mutex_unlock($9); //@line 1345
   $$1$i9 = $14; //@line 1346
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 1351
   $24 = HEAP32[$23 >> 2] | 0; //@line 1352
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 1355
    $$0 = 0; //@line 1356
    return $$0 | 0; //@line 1357
   } else {
    $26 = $0 + 32 | 0; //@line 1359
    $27 = HEAP32[$26 >> 2] | 0; //@line 1360
    HEAP32[$26 >> 2] = $27 + $8; //@line 1362
    HEAP32[$23 >> 2] = $24 - $8; //@line 1364
    HEAP32[$27 >> 2] = $8; //@line 1365
    HEAP8[$27 + 4 >> 0] = 1; //@line 1367
    _equeue_mutex_unlock($9); //@line 1368
    if (!$27) {
     $$0 = 0; //@line 1371
    } else {
     $$1$i9 = $27; //@line 1373
     break;
    }
    return $$0 | 0; //@line 1376
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 1381
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 1383
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 1385
 $$0 = $$1$i9 + 36 | 0; //@line 1387
 return $$0 | 0; //@line 1388
}
function ___stpcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $9 = 0, label = 0;
 $2 = $1; //@line 7848
 L1 : do {
  if (!(($2 ^ $0) & 3)) {
   if (!($2 & 3)) {
    $$026$lcssa = $1; //@line 7858
    $$027$lcssa = $0; //@line 7858
   } else {
    $$02642 = $1; //@line 7860
    $$02741 = $0; //@line 7860
    while (1) {
     $9 = HEAP8[$$02642 >> 0] | 0; //@line 7862
     HEAP8[$$02741 >> 0] = $9; //@line 7863
     if (!($9 << 24 >> 24)) {
      $$029 = $$02741; //@line 7866
      break L1;
     }
     $11 = $$02642 + 1 | 0; //@line 7869
     $12 = $$02741 + 1 | 0; //@line 7870
     if (!($11 & 3)) {
      $$026$lcssa = $11; //@line 7875
      $$027$lcssa = $12; //@line 7875
      break;
     } else {
      $$02642 = $11; //@line 7878
      $$02741 = $12; //@line 7878
     }
    }
   }
   $16 = HEAP32[$$026$lcssa >> 2] | 0; //@line 7882
   if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
    $$02536 = $$027$lcssa; //@line 7889
    $$037 = $$026$lcssa; //@line 7889
    $24 = $16; //@line 7889
    while (1) {
     $22 = $$037 + 4 | 0; //@line 7891
     $23 = $$02536 + 4 | 0; //@line 7892
     HEAP32[$$02536 >> 2] = $24; //@line 7893
     $24 = HEAP32[$22 >> 2] | 0; //@line 7894
     if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
      $$0$lcssa = $22; //@line 7903
      $$025$lcssa = $23; //@line 7903
      break;
     } else {
      $$02536 = $23; //@line 7901
      $$037 = $22; //@line 7901
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa; //@line 7908
    $$025$lcssa = $$027$lcssa; //@line 7908
   }
   $$1$ph = $$0$lcssa; //@line 7910
   $$128$ph = $$025$lcssa; //@line 7910
   label = 8; //@line 7911
  } else {
   $$1$ph = $1; //@line 7913
   $$128$ph = $0; //@line 7913
   label = 8; //@line 7914
  }
 } while (0);
 if ((label | 0) == 8) {
  $31 = HEAP8[$$1$ph >> 0] | 0; //@line 7918
  HEAP8[$$128$ph >> 0] = $31; //@line 7919
  if (!($31 << 24 >> 24)) {
   $$029 = $$128$ph; //@line 7922
  } else {
   $$12834 = $$128$ph; //@line 7924
   $$135 = $$1$ph; //@line 7924
   while (1) {
    $$135 = $$135 + 1 | 0; //@line 7926
    $34 = $$12834 + 1 | 0; //@line 7927
    $35 = HEAP8[$$135 >> 0] | 0; //@line 7928
    HEAP8[$34 >> 0] = $35; //@line 7929
    if (!($35 << 24 >> 24)) {
     $$029 = $34; //@line 7932
     break;
    } else {
     $$12834 = $34; //@line 7935
    }
   }
  }
 }
 return $$029 | 0; //@line 7940
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1839
 STACKTOP = STACKTOP + 32 | 0; //@line 1840
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1840
 $$byval_copy = sp; //@line 1841
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1843
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1845
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1847
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1849
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1851
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1853
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1855
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1857
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1859
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1861
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1863
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  HEAP8[$6 >> 0] = 5; //@line 1868
  $27 = 608 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 1871
  HEAP32[$$byval_copy >> 2] = HEAP32[$27 >> 2]; //@line 1872
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$27 + 4 >> 2]; //@line 1872
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$27 + 8 >> 2]; //@line 1872
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$27 + 12 >> 2]; //@line 1872
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$27 + 16 >> 2]; //@line 1872
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 1873
 }
 __ZN13SocketAddress8set_portEt($2, 53); //@line 1875
 $28 = HEAP32[$16 >> 2] | 0; //@line 1876
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(48) | 0; //@line 1877
 $29 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($28, $2, $10, $18) | 0; //@line 1878
 if (!___async) {
  HEAP32[___async_retval >> 2] = $29; //@line 1882
  ___async_unwind = 0; //@line 1883
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 240; //@line 1885
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 1887
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 1889
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 1891
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 1893
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 1895
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 1897
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 1899
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 1901
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 1903
 HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $20; //@line 1905
 HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $22; //@line 1907
 sp = STACKTOP; //@line 1908
 STACKTOP = sp; //@line 1909
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_2($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10383
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10387
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10389
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10391
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10393
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10394
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 10398
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 10399
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 10400
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 126; //@line 10403
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 10404
   HEAP32[$14 >> 2] = $4; //@line 10405
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 10406
   HEAP32[$15 >> 2] = $6; //@line 10407
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 10408
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 10409
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 10410
   HEAP32[$17 >> 2] = $8; //@line 10411
   sp = STACKTOP; //@line 10412
   return;
  }
  ___async_unwind = 0; //@line 10415
  HEAP32[$ReallocAsyncCtx4 >> 2] = 126; //@line 10416
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 10417
  HEAP32[$14 >> 2] = $4; //@line 10418
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 10419
  HEAP32[$15 >> 2] = $6; //@line 10420
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 10421
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 10422
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 10423
  HEAP32[$17 >> 2] = $8; //@line 10424
  sp = STACKTOP; //@line 10425
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 10428
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10432
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 10436
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10437
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 10438
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 127; //@line 10441
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 10442
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 10443
  sp = STACKTOP; //@line 10444
  return;
 }
 ___async_unwind = 0; //@line 10447
 HEAP32[$ReallocAsyncCtx5 >> 2] = 127; //@line 10448
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 10449
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 10450
 sp = STACKTOP; //@line 10451
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_112($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26149
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26153
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26155
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26157
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26159
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26160
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 26164
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 26165
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 26166
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 262; //@line 26169
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 26170
   HEAP32[$14 >> 2] = $4; //@line 26171
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 26172
   HEAP32[$15 >> 2] = $6; //@line 26173
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 26174
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 26175
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 26176
   HEAP32[$17 >> 2] = $8; //@line 26177
   sp = STACKTOP; //@line 26178
   return;
  }
  ___async_unwind = 0; //@line 26181
  HEAP32[$ReallocAsyncCtx4 >> 2] = 262; //@line 26182
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 26183
  HEAP32[$14 >> 2] = $4; //@line 26184
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 26185
  HEAP32[$15 >> 2] = $6; //@line 26186
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 26187
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 26188
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 26189
  HEAP32[$17 >> 2] = $8; //@line 26190
  sp = STACKTOP; //@line 26191
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 26194
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26198
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 26202
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26203
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 26204
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 26207
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 26208
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 26209
  sp = STACKTOP; //@line 26210
  return;
 }
 ___async_unwind = 0; //@line 26213
 HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 26214
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 26215
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 26216
 sp = STACKTOP; //@line 26217
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_81($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx19 = 0, sp = 0;
 sp = STACKTOP; //@line 17941
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17943
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17945
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17947
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17949
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17951
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17953
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17955
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17957
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17959
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17961
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17963
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17965
 $25 = $6 + 12 | 0; //@line 17967
 HEAP32[$25 >> 2] = HEAP32[$4 >> 2]; //@line 17968
 $27 = $8 + 4 | 0; //@line 17970
 HEAP32[$27 >> 2] = 0; //@line 17972
 HEAP32[$27 + 4 >> 2] = 0; //@line 17975
 HEAP32[$8 >> 2] = 3; //@line 17976
 $31 = $8 + 12 | 0; //@line 17977
 HEAP32[$31 >> 2] = 712; //@line 17978
 $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 17979
 $32 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($6, 100, $8) | 0; //@line 17980
 if (!___async) {
  HEAP32[___async_retval >> 2] = $32; //@line 17984
  ___async_unwind = 0; //@line 17985
 }
 HEAP32[$ReallocAsyncCtx19 >> 2] = 178; //@line 17987
 HEAP32[$ReallocAsyncCtx19 + 4 >> 2] = $2; //@line 17989
 HEAP32[$ReallocAsyncCtx19 + 8 >> 2] = $10; //@line 17991
 HEAP32[$ReallocAsyncCtx19 + 12 >> 2] = $12; //@line 17993
 HEAP32[$ReallocAsyncCtx19 + 16 >> 2] = $14; //@line 17995
 HEAP32[$ReallocAsyncCtx19 + 20 >> 2] = $16; //@line 17997
 HEAP32[$ReallocAsyncCtx19 + 24 >> 2] = $20; //@line 17999
 HEAP32[$ReallocAsyncCtx19 + 28 >> 2] = $18; //@line 18001
 HEAP32[$ReallocAsyncCtx19 + 32 >> 2] = $22; //@line 18003
 HEAP32[$ReallocAsyncCtx19 + 36 >> 2] = $4; //@line 18005
 HEAP32[$ReallocAsyncCtx19 + 40 >> 2] = $24; //@line 18007
 HEAP32[$ReallocAsyncCtx19 + 44 >> 2] = $25; //@line 18009
 HEAP32[$ReallocAsyncCtx19 + 48 >> 2] = $8; //@line 18011
 HEAP32[$ReallocAsyncCtx19 + 52 >> 2] = $6; //@line 18013
 HEAP32[$ReallocAsyncCtx19 + 56 >> 2] = $31; //@line 18015
 sp = STACKTOP; //@line 18016
 return;
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_39($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12601
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12603
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12605
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12607
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12609
 $9 = HEAP32[$2 >> 2] | 0; //@line 12610
 if (!$9) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 12613
  _mbed_assert_internal(6023, 6028, 1677); //@line 12614
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 12617
   $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 12618
   HEAP32[$11 >> 2] = $2; //@line 12619
   $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 12620
   HEAP32[$12 >> 2] = $4; //@line 12621
   $13 = $ReallocAsyncCtx9 + 12 | 0; //@line 12622
   HEAP32[$13 >> 2] = $6; //@line 12623
   $14 = $ReallocAsyncCtx9 + 16 | 0; //@line 12624
   HEAP32[$14 >> 2] = $8; //@line 12625
   sp = STACKTOP; //@line 12626
   return;
  }
  ___async_unwind = 0; //@line 12629
  HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 12630
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 12631
  HEAP32[$11 >> 2] = $2; //@line 12632
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 12633
  HEAP32[$12 >> 2] = $4; //@line 12634
  $13 = $ReallocAsyncCtx9 + 12 | 0; //@line 12635
  HEAP32[$13 >> 2] = $6; //@line 12636
  $14 = $ReallocAsyncCtx9 + 16 | 0; //@line 12637
  HEAP32[$14 >> 2] = $8; //@line 12638
  sp = STACKTOP; //@line 12639
  return;
 } else {
  $15 = HEAP32[$9 >> 2] | 0; //@line 12642
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 12643
  FUNCTION_TABLE_viii[$15 & 0]($4, $6, $8); //@line 12644
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 230; //@line 12647
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 12648
   HEAP32[$16 >> 2] = $2; //@line 12649
   $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 12650
   HEAP32[$17 >> 2] = $4; //@line 12651
   sp = STACKTOP; //@line 12652
   return;
  }
  ___async_unwind = 0; //@line 12655
  HEAP32[$ReallocAsyncCtx5 >> 2] = 230; //@line 12656
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 12657
  HEAP32[$16 >> 2] = $2; //@line 12658
  $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 12659
  HEAP32[$17 >> 2] = $4; //@line 12660
  sp = STACKTOP; //@line 12661
  return;
 }
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13455
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 13457
 $7 = $4 + 156 | 0; //@line 13458
 _equeue_mutex_lock($7); //@line 13459
 $8 = $4 + 24 | 0; //@line 13460
 $9 = HEAP32[$8 >> 2] | 0; //@line 13461
 L3 : do {
  if (!$9) {
   label = 9; //@line 13465
  } else {
   $$03842$i = $8; //@line 13467
   $12 = $9; //@line 13467
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 13474
    $19 = HEAP32[$18 >> 2] | 0; //@line 13475
    if (!$19) {
     label = 9; //@line 13478
     break L3;
    } else {
     $$03842$i = $18; //@line 13481
     $12 = $19; //@line 13481
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 13485
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 13488
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 13490
    $$038$sink$i = $15 + 8 | 0; //@line 13492
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 13496
   _equeue_mutex_unlock($7); //@line 13497
   $$1$i9 = $12; //@line 13498
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 13503
   $22 = HEAP32[$21 >> 2] | 0; //@line 13504
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 13507
    $$0 = 0; //@line 13508
    $34 = ___async_retval; //@line 13509
    HEAP32[$34 >> 2] = $$0; //@line 13510
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 13513
    $25 = HEAP32[$24 >> 2] | 0; //@line 13514
    HEAP32[$24 >> 2] = $25 + $6; //@line 13516
    HEAP32[$21 >> 2] = $22 - $6; //@line 13518
    HEAP32[$25 >> 2] = $6; //@line 13519
    HEAP8[$25 + 4 >> 0] = 1; //@line 13521
    _equeue_mutex_unlock($7); //@line 13522
    if (!$25) {
     $$0 = 0; //@line 13525
    } else {
     $$1$i9 = $25; //@line 13527
     break;
    }
    $34 = ___async_retval; //@line 13530
    HEAP32[$34 >> 2] = $$0; //@line 13531
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 13537
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 13539
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 13541
 $$0 = $$1$i9 + 36 | 0; //@line 13543
 $34 = ___async_retval; //@line 13544
 HEAP32[$34 >> 2] = $$0; //@line 13545
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 8580
 STACKTOP = STACKTOP + 64 | 0; //@line 8581
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 8581
 $3 = sp; //@line 8582
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 8585
 } else {
  if (!$1) {
   $$2 = 0; //@line 8589
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8591
   $6 = ___dynamic_cast($1, 128, 112, 0) | 0; //@line 8592
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 334; //@line 8595
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 8597
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 8599
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 8601
    sp = STACKTOP; //@line 8602
    STACKTOP = sp; //@line 8603
    return 0; //@line 8603
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8605
   if (!$6) {
    $$2 = 0; //@line 8608
   } else {
    dest = $3 + 4 | 0; //@line 8611
    stop = dest + 52 | 0; //@line 8611
    do {
     HEAP32[dest >> 2] = 0; //@line 8611
     dest = dest + 4 | 0; //@line 8611
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 8612
    HEAP32[$3 + 8 >> 2] = $0; //@line 8614
    HEAP32[$3 + 12 >> 2] = -1; //@line 8616
    HEAP32[$3 + 48 >> 2] = 1; //@line 8618
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 8621
    $18 = HEAP32[$2 >> 2] | 0; //@line 8622
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 8623
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 8624
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 335; //@line 8627
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 8629
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 8631
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 8633
     sp = STACKTOP; //@line 8634
     STACKTOP = sp; //@line 8635
     return 0; //@line 8635
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8637
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 8644
     $$0 = 1; //@line 8645
    } else {
     $$0 = 0; //@line 8647
    }
    $$2 = $$0; //@line 8649
   }
  }
 }
 STACKTOP = sp; //@line 8653
 return $$2 | 0; //@line 8653
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 622
 STACKTOP = STACKTOP + 48 | 0; //@line 623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 623
 $$byval_copy = sp + 20 | 0; //@line 624
 $3 = sp; //@line 625
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 626
 $4 = __Znwj(76) | 0; //@line 627
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 44; //@line 630
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 632
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 634
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 636
  sp = STACKTOP; //@line 637
  STACKTOP = sp; //@line 638
  return 0; //@line 638
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 640
 dest = $4; //@line 641
 stop = dest + 76 | 0; //@line 641
 do {
  HEAP32[dest >> 2] = 0; //@line 641
  dest = dest + 4 | 0; //@line 641
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 642
 HEAP32[$3 >> 2] = 0; //@line 643
 HEAP32[$3 + 4 >> 2] = 0; //@line 643
 HEAP32[$3 + 8 >> 2] = 0; //@line 643
 HEAP32[$3 + 12 >> 2] = 0; //@line 643
 HEAP32[$3 + 16 >> 2] = 0; //@line 643
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 644
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 644
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 644
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 644
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 644
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 645
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 646
 if (($9 | 0) == -1) {
  $$0$i = -3001; //@line 649
  STACKTOP = sp; //@line 650
  return $$0$i | 0; //@line 650
 }
 HEAP32[$4 >> 2] = $9; //@line 652
 HEAP8[$4 + 8 >> 0] = 0; //@line 654
 HEAP32[$4 + 4 >> 2] = $2; //@line 656
 HEAP32[$1 >> 2] = $4; //@line 657
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 658
 _wait_ms(1); //@line 659
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 45; //@line 662
  sp = STACKTOP; //@line 663
  STACKTOP = sp; //@line 664
  return 0; //@line 664
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 666
 $$0$i = 0; //@line 667
 STACKTOP = sp; //@line 668
 return $$0$i | 0; //@line 668
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9912
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 9918
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 9922
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 9923
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9924
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 9925
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 351; //@line 9928
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 9930
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 9932
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 9934
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 9936
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 9938
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 9940
    sp = STACKTOP; //@line 9941
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9944
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 9948
    $$0 = $0 + 24 | 0; //@line 9949
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9951
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 9952
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9957
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 9963
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 9966
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 352; //@line 9971
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 9973
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 9975
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 9977
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9979
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 9981
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 9983
    sp = STACKTOP; //@line 9984
    return;
   }
  }
 } while (0);
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 219
 STACKTOP = STACKTOP + 48 | 0; //@line 220
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 220
 $$byval_copy = sp + 20 | 0; //@line 221
 $3 = sp; //@line 222
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 223
 $4 = __Znwj(76) | 0; //@line 224
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 31; //@line 227
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 229
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 231
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 233
  sp = STACKTOP; //@line 234
  STACKTOP = sp; //@line 235
  return 0; //@line 235
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 237
 dest = $4; //@line 238
 stop = dest + 76 | 0; //@line 238
 do {
  HEAP32[dest >> 2] = 0; //@line 238
  dest = dest + 4 | 0; //@line 238
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 239
 HEAP32[$3 >> 2] = 0; //@line 240
 HEAP32[$3 + 4 >> 2] = 0; //@line 240
 HEAP32[$3 + 8 >> 2] = 0; //@line 240
 HEAP32[$3 + 12 >> 2] = 0; //@line 240
 HEAP32[$3 + 16 >> 2] = 0; //@line 240
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 241
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 241
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 241
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 241
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 241
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 242
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 243
 if (($9 | 0) == -1) {
  $$0 = -3001; //@line 246
  STACKTOP = sp; //@line 247
  return $$0 | 0; //@line 247
 }
 HEAP32[$4 >> 2] = $9; //@line 249
 HEAP8[$4 + 8 >> 0] = 0; //@line 251
 HEAP32[$4 + 4 >> 2] = $2; //@line 253
 HEAP32[$1 >> 2] = $4; //@line 254
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 255
 _wait_ms(1); //@line 256
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 32; //@line 259
  sp = STACKTOP; //@line 260
  STACKTOP = sp; //@line 261
  return 0; //@line 261
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 263
 $$0 = 0; //@line 264
 STACKTOP = sp; //@line 265
 return $$0 | 0; //@line 265
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 7742
 STACKTOP = STACKTOP + 128 | 0; //@line 7743
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 7743
 $4 = sp + 124 | 0; //@line 7744
 $5 = sp; //@line 7745
 dest = $5; //@line 7746
 src = 1500; //@line 7746
 stop = dest + 124 | 0; //@line 7746
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 7746
  dest = dest + 4 | 0; //@line 7746
  src = src + 4 | 0; //@line 7746
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 7752
   $$015 = 1; //@line 7752
   label = 4; //@line 7753
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 7756
   $$0 = -1; //@line 7757
  }
 } else {
  $$014 = $0; //@line 7760
  $$015 = $1; //@line 7760
  label = 4; //@line 7761
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 7765
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 7767
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 7769
  $14 = $5 + 20 | 0; //@line 7770
  HEAP32[$14 >> 2] = $$014; //@line 7771
  HEAP32[$5 + 44 >> 2] = $$014; //@line 7773
  $16 = $$014 + $$$015 | 0; //@line 7774
  $17 = $5 + 16 | 0; //@line 7775
  HEAP32[$17 >> 2] = $16; //@line 7776
  HEAP32[$5 + 28 >> 2] = $16; //@line 7778
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7779
  $19 = _vfprintf($5, $2, $3) | 0; //@line 7780
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 319; //@line 7783
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 7785
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 7787
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 7789
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 7791
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 7793
   sp = STACKTOP; //@line 7794
   STACKTOP = sp; //@line 7795
   return 0; //@line 7795
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7797
  if (!$$$015) {
   $$0 = $19; //@line 7800
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 7802
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 7807
   $$0 = $19; //@line 7808
  }
 }
 STACKTOP = sp; //@line 7811
 return $$0 | 0; //@line 7811
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_126($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26870
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26874
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26876
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26878
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26880
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26881
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 26885
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 26886
  FUNCTION_TABLE_vi[$13 & 511]($6); //@line 26887
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 167; //@line 26890
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 26891
   HEAP32[$14 >> 2] = $4; //@line 26892
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 26893
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 26894
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 26895
   HEAP32[$16 >> 2] = $8; //@line 26896
   sp = STACKTOP; //@line 26897
   return;
  }
  ___async_unwind = 0; //@line 26900
  HEAP32[$ReallocAsyncCtx3 >> 2] = 167; //@line 26901
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 26902
  HEAP32[$14 >> 2] = $4; //@line 26903
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 26904
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 26905
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 26906
  HEAP32[$16 >> 2] = $8; //@line 26907
  sp = STACKTOP; //@line 26908
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 26911
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26915
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 26919
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 26920
 FUNCTION_TABLE_vi[$20 & 511]($8); //@line 26921
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 168; //@line 26924
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 26925
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 26926
  sp = STACKTOP; //@line 26927
  return;
 }
 ___async_unwind = 0; //@line 26930
 HEAP32[$ReallocAsyncCtx4 >> 2] = 168; //@line 26931
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 26932
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 26933
 sp = STACKTOP; //@line 26934
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 25170
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 25173
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 25176
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 25179
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 25185
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 25194
     $24 = $13 >>> 2; //@line 25195
     $$090 = 0; //@line 25196
     $$094 = $7; //@line 25196
     while (1) {
      $25 = $$094 >>> 1; //@line 25198
      $26 = $$090 + $25 | 0; //@line 25199
      $27 = $26 << 1; //@line 25200
      $28 = $27 + $23 | 0; //@line 25201
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 25204
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 25208
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 25214
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 25222
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 25226
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 25232
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 25237
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 25240
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 25240
      }
     }
     $46 = $27 + $24 | 0; //@line 25243
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 25246
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 25250
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 25262
     } else {
      $$4 = 0; //@line 25264
     }
    } else {
     $$4 = 0; //@line 25267
    }
   } else {
    $$4 = 0; //@line 25270
   }
  } else {
   $$4 = 0; //@line 25273
  }
 } while (0);
 return $$4 | 0; //@line 25276
}
function _sn_coap_builder_options_build_add_one_option($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$sink13 = 0, $$sink63 = 0, $$sink7 = 0, $14 = 0, $17 = 0, $23 = 0, $25 = 0, $34 = 0, $43 = 0, $47 = 0, $52 = 0, $54 = 0, $56 = 0, $8 = 0, $9 = 0, label = 0;
 if (!$2) {
  $$0 = 0; //@line 5197
  return $$0 | 0; //@line 5198
 }
 $8 = $3 - (HEAPU16[$4 >> 1] | 0) | 0; //@line 5202
 $9 = $1 & 65535; //@line 5203
 HEAP8[HEAP32[$0 >> 2] >> 0] = ($1 & 65535) < 13 ? $1 & 255 : ($1 & 65535) < 269 ? 13 : 14; //@line 5210
 $14 = $8 & 65535; //@line 5211
 do {
  if ($14 >>> 0 < 13) {
   $17 = HEAP32[$0 >> 2] | 0; //@line 5216
   HEAP8[$17 >> 0] = ($14 << 4) + (HEAPU8[$17 >> 0] | 0); //@line 5221
   $$sink7 = 1; //@line 5222
  } else {
   $23 = HEAP32[$0 >> 2] | 0; //@line 5225
   $25 = HEAPU8[$23 >> 0] | 0; //@line 5227
   if ($14 >>> 0 < 269) {
    HEAP8[$23 >> 0] = $25 + 208; //@line 5231
    HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = $8 + 243; //@line 5236
    $$sink7 = 2; //@line 5237
    break;
   } else {
    HEAP8[$23 >> 0] = $25 + 224; //@line 5242
    $34 = $8 + 65267 | 0; //@line 5243
    HEAP8[(HEAP32[$0 >> 2] | 0) + 2 >> 0] = $34; //@line 5247
    HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = $34 >>> 8; //@line 5252
    $$sink7 = 3; //@line 5253
    break;
   }
  }
 } while (0);
 $43 = (HEAP32[$0 >> 2] | 0) + $$sink7 | 0; //@line 5259
 HEAP32[$0 >> 2] = $43; //@line 5260
 if (($1 + -13 & 65535) < 256) {
  $$sink13 = 1; //@line 5265
  $$sink63 = $9 + 243 | 0; //@line 5265
  $52 = $43; //@line 5265
  label = 11; //@line 5266
 } else {
  if (($1 & 65535) > 268) {
   $47 = $9 + -269 | 0; //@line 5270
   HEAP8[$43 + 1 >> 0] = $47; //@line 5273
   $$sink13 = 2; //@line 5276
   $$sink63 = $47 >>> 8; //@line 5276
   $52 = HEAP32[$0 >> 2] | 0; //@line 5276
   label = 11; //@line 5277
  } else {
   $56 = $43; //@line 5279
  }
 }
 if ((label | 0) == 11) {
  HEAP8[$52 >> 0] = $$sink63; //@line 5284
  $54 = (HEAP32[$0 >> 2] | 0) + $$sink13 | 0; //@line 5286
  HEAP32[$0 >> 2] = $54; //@line 5287
  $56 = $54; //@line 5288
 }
 HEAP16[$4 >> 1] = $3; //@line 5291
 _memcpy($56 | 0, $2 | 0, $9 | 0) | 0; //@line 5292
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $9; //@line 5295
 $$0 = 1; //@line 5296
 return $$0 | 0; //@line 5297
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29667
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29669
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29671
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29673
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29675
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29677
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29679
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29681
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29683
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29685
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29687
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29689
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29691
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29693
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29697
 HEAP32[$4 >> 2] = HEAP32[HEAP32[$0 + 56 >> 2] >> 2]; //@line 29699
 $31 = HEAP32[$6 >> 2] | 0; //@line 29700
 HEAP32[$8 >> 2] = 0; //@line 29701
 HEAP32[$10 >> 2] = 191; //@line 29702
 HEAP32[$12 >> 2] = $31; //@line 29703
 HEAP32[$2 >> 2] = 724; //@line 29704
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 29705
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($14, 0, $16) | 0; //@line 29706
 if (!___async) {
  ___async_unwind = 0; //@line 29709
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 245; //@line 29711
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 29713
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 29715
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $8; //@line 29717
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 29719
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $12; //@line 29721
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 29723
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 29725
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 29727
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 29729
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 29731
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 29733
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 29735
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 29737
 sp = STACKTOP; //@line 29738
 return;
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24835
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 24840
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 24845
  } else {
   $20 = $0 & 255; //@line 24847
   $21 = $0 & 255; //@line 24848
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 24854
   } else {
    $26 = $1 + 20 | 0; //@line 24856
    $27 = HEAP32[$26 >> 2] | 0; //@line 24857
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 24863
     HEAP8[$27 >> 0] = $20; //@line 24864
     $34 = $21; //@line 24865
    } else {
     label = 12; //@line 24867
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 24872
     $32 = ___overflow($1, $0) | 0; //@line 24873
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 309; //@line 24876
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 24878
      sp = STACKTOP; //@line 24879
      return 0; //@line 24880
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 24882
      $34 = $32; //@line 24883
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 24888
   $$0 = $34; //@line 24889
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 24894
   $8 = $0 & 255; //@line 24895
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 24901
    $14 = HEAP32[$13 >> 2] | 0; //@line 24902
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 24908
     HEAP8[$14 >> 0] = $7; //@line 24909
     $$0 = $8; //@line 24910
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 24914
   $19 = ___overflow($1, $0) | 0; //@line 24915
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 308; //@line 24918
    sp = STACKTOP; //@line 24919
    return 0; //@line 24920
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 24922
    $$0 = $19; //@line 24923
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 24928
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25555
 $1 = $0 + 20 | 0; //@line 25556
 $3 = $0 + 28 | 0; //@line 25558
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 25564
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 25565
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 25566
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 315; //@line 25569
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25571
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 25573
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 25575
    sp = STACKTOP; //@line 25576
    return 0; //@line 25577
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 25579
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 25583
     break;
    } else {
     label = 5; //@line 25586
     break;
    }
   }
  } else {
   label = 5; //@line 25591
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 25595
  $14 = HEAP32[$13 >> 2] | 0; //@line 25596
  $15 = $0 + 8 | 0; //@line 25597
  $16 = HEAP32[$15 >> 2] | 0; //@line 25598
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 25606
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 25607
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 25608
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 316; //@line 25611
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 25613
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 25615
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 25617
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 25619
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 25621
     sp = STACKTOP; //@line 25622
     return 0; //@line 25623
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 25625
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 25631
  HEAP32[$3 >> 2] = 0; //@line 25632
  HEAP32[$1 >> 2] = 0; //@line 25633
  HEAP32[$15 >> 2] = 0; //@line 25634
  HEAP32[$13 >> 2] = 0; //@line 25635
  $$0 = 0; //@line 25636
 }
 return $$0 | 0; //@line 25638
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_63($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 14903
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14909
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14911
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14913
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14915
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14917
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14919
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14921
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14923
 $$pre = HEAP32[$6 >> 2] | 0; //@line 14924
 HEAP32[$$pre + 16 >> 2] = HEAP32[$8 >> 2]; //@line 14928
 HEAP32[$10 + 8 >> 2] = 0; //@line 14930
 HEAP32[$10 >> 2] = 218; //@line 14931
 HEAP32[$10 + 4 >> 2] = $$pre; //@line 14933
 $23 = $10 + 12 | 0; //@line 14934
 HEAP32[$23 >> 2] = 724; //@line 14935
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 14936
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $10); //@line 14937
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 219; //@line 14940
  $24 = $ReallocAsyncCtx10 + 4 | 0; //@line 14941
  HEAP32[$24 >> 2] = $23; //@line 14942
  $25 = $ReallocAsyncCtx10 + 8 | 0; //@line 14943
  HEAP32[$25 >> 2] = $14; //@line 14944
  $26 = $ReallocAsyncCtx10 + 12 | 0; //@line 14945
  HEAP32[$26 >> 2] = $16; //@line 14946
  $27 = $ReallocAsyncCtx10 + 16 | 0; //@line 14947
  HEAP32[$27 >> 2] = $10; //@line 14948
  $28 = $ReallocAsyncCtx10 + 20 | 0; //@line 14949
  HEAP32[$28 >> 2] = $18; //@line 14950
  sp = STACKTOP; //@line 14951
  return;
 }
 ___async_unwind = 0; //@line 14954
 HEAP32[$ReallocAsyncCtx10 >> 2] = 219; //@line 14955
 $24 = $ReallocAsyncCtx10 + 4 | 0; //@line 14956
 HEAP32[$24 >> 2] = $23; //@line 14957
 $25 = $ReallocAsyncCtx10 + 8 | 0; //@line 14958
 HEAP32[$25 >> 2] = $14; //@line 14959
 $26 = $ReallocAsyncCtx10 + 12 | 0; //@line 14960
 HEAP32[$26 >> 2] = $16; //@line 14961
 $27 = $ReallocAsyncCtx10 + 16 | 0; //@line 14962
 HEAP32[$27 >> 2] = $10; //@line 14963
 $28 = $ReallocAsyncCtx10 + 20 | 0; //@line 14964
 HEAP32[$28 >> 2] = $18; //@line 14965
 sp = STACKTOP; //@line 14966
 return;
}
function __ZN6Socket5closeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10908
 $1 = $0 + 8 | 0; //@line 10909
 $2 = HEAP32[$1 >> 2] | 0; //@line 10910
 $$pre = $0 + 4 | 0; //@line 10912
 do {
  if (!$2) {
   $$0 = 0; //@line 10915
  } else {
   $4 = HEAP32[$$pre >> 2] | 0; //@line 10917
   $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 84 >> 2] | 0; //@line 10920
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 10921
   FUNCTION_TABLE_viiii[$7 & 7]($4, $2, 0, 0); //@line 10922
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 140; //@line 10925
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10927
    HEAP32[$AsyncCtx + 8 >> 2] = $$pre; //@line 10929
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10931
    sp = STACKTOP; //@line 10932
    return 0; //@line 10933
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10935
   $11 = HEAP32[$1 >> 2] | 0; //@line 10936
   HEAP32[$1 >> 2] = 0; //@line 10937
   $12 = HEAP32[$$pre >> 2] | 0; //@line 10938
   $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 48 >> 2] | 0; //@line 10941
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10942
   $16 = FUNCTION_TABLE_iii[$15 & 15]($12, $11) | 0; //@line 10943
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 141; //@line 10946
    HEAP32[$AsyncCtx2 + 4 >> 2] = $$pre; //@line 10948
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10950
    sp = STACKTOP; //@line 10951
    return 0; //@line 10952
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10954
    $$0 = $16; //@line 10955
    break;
   }
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0; //@line 10960
 $21 = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0; //@line 10963
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10964
 FUNCTION_TABLE_vi[$21 & 511]($0); //@line 10965
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 142; //@line 10968
  HEAP32[$AsyncCtx5 + 4 >> 2] = $$0; //@line 10970
  sp = STACKTOP; //@line 10971
  return 0; //@line 10972
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10974
  return $$0 | 0; //@line 10975
 }
 return 0; //@line 10977
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8014
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 8019
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 8024
  } else {
   $20 = $0 & 255; //@line 8026
   $21 = $0 & 255; //@line 8027
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 8033
   } else {
    $26 = $1 + 20 | 0; //@line 8035
    $27 = HEAP32[$26 >> 2] | 0; //@line 8036
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 8042
     HEAP8[$27 >> 0] = $20; //@line 8043
     $34 = $21; //@line 8044
    } else {
     label = 12; //@line 8046
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8051
     $32 = ___overflow($1, $0) | 0; //@line 8052
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 324; //@line 8055
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 8057
      sp = STACKTOP; //@line 8058
      return 0; //@line 8059
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 8061
      $34 = $32; //@line 8062
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 8067
   $$0 = $34; //@line 8068
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 8073
   $8 = $0 & 255; //@line 8074
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 8080
    $14 = HEAP32[$13 >> 2] | 0; //@line 8081
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 8087
     HEAP8[$14 >> 0] = $7; //@line 8088
     $$0 = $8; //@line 8089
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8093
   $19 = ___overflow($1, $0) | 0; //@line 8094
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 323; //@line 8097
    sp = STACKTOP; //@line 8098
    return 0; //@line 8099
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8101
    $$0 = $19; //@line 8102
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 8107
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15774
 STACKTOP = STACKTOP + 32 | 0; //@line 15775
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15775
 $$byval_copy = sp; //@line 15776
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15778
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15780
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15782
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15784
 dest = $AsyncRetVal; //@line 15785
 stop = dest + 76 | 0; //@line 15785
 do {
  HEAP32[dest >> 2] = 0; //@line 15785
  dest = dest + 4 | 0; //@line 15785
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 15786
 HEAP32[$2 >> 2] = 0; //@line 15787
 HEAP32[$2 + 4 >> 2] = 0; //@line 15787
 HEAP32[$2 + 8 >> 2] = 0; //@line 15787
 HEAP32[$2 + 12 >> 2] = 0; //@line 15787
 HEAP32[$2 + 16 >> 2] = 0; //@line 15787
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 15788
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 15788
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 15788
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 15788
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 15788
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 15789
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 15790
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 15794
  STACKTOP = sp; //@line 15795
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 15797
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 15799
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 15801
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 15802
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15803
 _wait_ms(1); //@line 15804
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 15807
  sp = STACKTOP; //@line 15808
  STACKTOP = sp; //@line 15809
  return;
 }
 ___async_unwind = 0; //@line 15811
 HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 15812
 sp = STACKTOP; //@line 15813
 STACKTOP = sp; //@line 15814
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 20484
 STACKTOP = STACKTOP + 32 | 0; //@line 20485
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 20485
 $$byval_copy = sp; //@line 20486
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20488
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20490
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20492
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20494
 dest = $AsyncRetVal; //@line 20495
 stop = dest + 76 | 0; //@line 20495
 do {
  HEAP32[dest >> 2] = 0; //@line 20495
  dest = dest + 4 | 0; //@line 20495
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 20496
 HEAP32[$2 >> 2] = 0; //@line 20497
 HEAP32[$2 + 4 >> 2] = 0; //@line 20497
 HEAP32[$2 + 8 >> 2] = 0; //@line 20497
 HEAP32[$2 + 12 >> 2] = 0; //@line 20497
 HEAP32[$2 + 16 >> 2] = 0; //@line 20497
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 20498
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 20498
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 20498
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 20498
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 20498
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 20499
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 20500
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 20504
  STACKTOP = sp; //@line 20505
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 20507
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 20509
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 20511
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 20512
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20513
 _wait_ms(1); //@line 20514
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 20517
  sp = STACKTOP; //@line 20518
  STACKTOP = sp; //@line 20519
  return;
 }
 ___async_unwind = 0; //@line 20521
 HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 20522
 sp = STACKTOP; //@line 20523
 STACKTOP = sp; //@line 20524
 return;
}
function _main__async_cb_191($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1016
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1018
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1022
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1024
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1026
 HEAP32[2540] = HEAP32[___async_retval >> 2]; //@line 1029
 $12 = _calloc(44, 1) | 0; //@line 1030
 HEAP32[$12 + 32 >> 2] = 6434; //@line 1032
 HEAP16[$12 + 22 >> 1] = 6; //@line 1034
 HEAP32[$12 + 8 >> 2] = 1; //@line 1036
 HEAP16[$12 + 20 >> 1] = 7; //@line 1038
 $18 = (_sn_coap_builder_calc_needed_packet_data_size($12) | 0) & 65535; //@line 1040
 HEAP32[$2 >> 2] = $18; //@line 1041
 _printf(6441, $2) | 0; //@line 1042
 $19 = _malloc($18) | 0; //@line 1043
 _sn_coap_builder($19, $12) | 0; //@line 1044
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 1045
 $20 = __ZN9UDPSocket6sendtoEPKctPKvj(10104, 6478, 5683, $19, $18) | 0; //@line 1046
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 304; //@line 1049
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 1050
  HEAP32[$21 >> 2] = $6; //@line 1051
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 1052
  HEAP32[$22 >> 2] = $8; //@line 1053
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 1054
  HEAP32[$23 >> 2] = $12; //@line 1055
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 1056
  HEAP32[$24 >> 2] = $19; //@line 1057
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 1058
  HEAP32[$25 >> 2] = $10; //@line 1059
  sp = STACKTOP; //@line 1060
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 1064
 ___async_unwind = 0; //@line 1065
 HEAP32[$ReallocAsyncCtx6 >> 2] = 304; //@line 1066
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 1067
 HEAP32[$21 >> 2] = $6; //@line 1068
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 1069
 HEAP32[$22 >> 2] = $8; //@line 1070
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 1071
 HEAP32[$23 >> 2] = $12; //@line 1072
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 1073
 HEAP32[$24 >> 2] = $19; //@line 1074
 $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 1075
 HEAP32[$25 >> 2] = $10; //@line 1076
 sp = STACKTOP; //@line 1077
 return;
}
function __ZNK13SocketAddresscvbEv($0) {
 $0 = $0 | 0;
 var $12 = 0;
 switch (HEAP32[$0 + 40 >> 2] | 0) {
 case 1:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 11933
    return $12 | 0; //@line 11934
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 11940
    return $12 | 0; //@line 11941
   }
   if (!(HEAP8[$0 + 46 >> 0] | 0)) {
    return (HEAP8[$0 + 47 >> 0] | 0) != 0 | 0; //@line 11950
   } else {
    $12 = 1; //@line 11952
    return $12 | 0; //@line 11953
   }
   break;
  }
 case 2:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 11962
    return $12 | 0; //@line 11963
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 11969
    return $12 | 0; //@line 11970
   }
   if (HEAP8[$0 + 46 >> 0] | 0) {
    $12 = 1; //@line 11976
    return $12 | 0; //@line 11977
   }
   if (HEAP8[$0 + 47 >> 0] | 0) {
    $12 = 1; //@line 11983
    return $12 | 0; //@line 11984
   }
   if (HEAP8[$0 + 48 >> 0] | 0) {
    $12 = 1; //@line 11990
    return $12 | 0; //@line 11991
   }
   if (HEAP8[$0 + 49 >> 0] | 0) {
    $12 = 1; //@line 11997
    return $12 | 0; //@line 11998
   }
   if (HEAP8[$0 + 50 >> 0] | 0) {
    $12 = 1; //@line 12004
    return $12 | 0; //@line 12005
   }
   if (HEAP8[$0 + 51 >> 0] | 0) {
    $12 = 1; //@line 12011
    return $12 | 0; //@line 12012
   }
   if (HEAP8[$0 + 52 >> 0] | 0) {
    $12 = 1; //@line 12018
    return $12 | 0; //@line 12019
   }
   if (HEAP8[$0 + 53 >> 0] | 0) {
    $12 = 1; //@line 12025
    return $12 | 0; //@line 12026
   }
   if (HEAP8[$0 + 54 >> 0] | 0) {
    $12 = 1; //@line 12032
    return $12 | 0; //@line 12033
   }
   if (HEAP8[$0 + 55 >> 0] | 0) {
    $12 = 1; //@line 12039
    return $12 | 0; //@line 12040
   }
   if (HEAP8[$0 + 56 >> 0] | 0) {
    $12 = 1; //@line 12046
    return $12 | 0; //@line 12047
   }
   if (HEAP8[$0 + 57 >> 0] | 0) {
    $12 = 1; //@line 12053
    return $12 | 0; //@line 12054
   }
   if (HEAP8[$0 + 58 >> 0] | 0) {
    $12 = 1; //@line 12060
    return $12 | 0; //@line 12061
   }
   $12 = (HEAP8[$0 + 59 >> 0] | 0) != 0; //@line 12066
   return $12 | 0; //@line 12067
  }
 default:
  {
   $12 = 0; //@line 12071
   return $12 | 0; //@line 12072
  }
 }
 return 0; //@line 12075
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1031
 STACKTOP = STACKTOP + 48 | 0; //@line 1032
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1032
 $vararg_buffer12 = sp + 32 | 0; //@line 1033
 $vararg_buffer8 = sp + 24 | 0; //@line 1034
 $vararg_buffer4 = sp + 16 | 0; //@line 1035
 $vararg_buffer = sp; //@line 1036
 $6 = $4 & 255; //@line 1037
 $7 = $5 & 255; //@line 1038
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1039
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1041
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1043
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1045
 _mbed_tracef(16, 2409, 2414, $vararg_buffer); //@line 1046
 _emscripten_asm_const_i(8) | 0; //@line 1047
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 1049
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 1052
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1054
  _mbed_tracef(16, 2409, 2496, $vararg_buffer4); //@line 1055
  STACKTOP = sp; //@line 1056
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1059
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 1062
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1064
  _mbed_tracef(16, 2409, 2543, $vararg_buffer8); //@line 1065
  STACKTOP = sp; //@line 1066
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 1069
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1073
  HEAP8[$0 + 782 >> 0] = $2; //@line 1076
  HEAP8[$0 + 781 >> 0] = -35; //@line 1078
  HEAP8[$0 + 780 >> 0] = -5; //@line 1080
  HEAP8[$0 + 783 >> 0] = 1; //@line 1082
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(9) | 0; //@line 1085
  STACKTOP = sp; //@line 1086
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 1088
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1090
  _mbed_tracef(16, 2409, 2590, $vararg_buffer12); //@line 1091
  STACKTOP = sp; //@line 1092
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_86($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 18602
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18604
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18606
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18608
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18610
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18612
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18614
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18618
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18620
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18622
 $21 = $16 + 12 | 0; //@line 18624
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$0 + 28 >> 2] >> 2]; //@line 18625
 $22 = HEAP32[$4 >> 2] | 0; //@line 18626
 HEAP32[$18 + 8 >> 2] = 0; //@line 18628
 HEAP32[$18 >> 2] = 184; //@line 18629
 HEAP32[$18 + 4 >> 2] = $22; //@line 18631
 $24 = $18 + 12 | 0; //@line 18632
 HEAP32[$24 >> 2] = 724; //@line 18633
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(48) | 0; //@line 18634
 $25 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 0, $18) | 0; //@line 18635
 if (!___async) {
  HEAP32[___async_retval >> 2] = $25; //@line 18639
  ___async_unwind = 0; //@line 18640
 }
 HEAP32[$ReallocAsyncCtx18 >> 2] = 185; //@line 18642
 HEAP32[$ReallocAsyncCtx18 + 4 >> 2] = $2; //@line 18644
 HEAP32[$ReallocAsyncCtx18 + 8 >> 2] = $4; //@line 18646
 HEAP32[$ReallocAsyncCtx18 + 12 >> 2] = $6; //@line 18648
 HEAP32[$ReallocAsyncCtx18 + 16 >> 2] = $8; //@line 18650
 HEAP32[$ReallocAsyncCtx18 + 20 >> 2] = $10; //@line 18652
 HEAP32[$ReallocAsyncCtx18 + 24 >> 2] = $12; //@line 18654
 HEAP32[$ReallocAsyncCtx18 + 28 >> 2] = $20; //@line 18656
 HEAP32[$ReallocAsyncCtx18 + 32 >> 2] = $21; //@line 18658
 HEAP32[$ReallocAsyncCtx18 + 36 >> 2] = $16; //@line 18660
 HEAP32[$ReallocAsyncCtx18 + 40 >> 2] = $18; //@line 18662
 HEAP32[$ReallocAsyncCtx18 + 44 >> 2] = $24; //@line 18664
 sp = STACKTOP; //@line 18665
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29044
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29046
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29048
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29050
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29052
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29054
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 29055
 if (!$AsyncRetVal) {
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = HEAP32[$4 >> 2]; //@line 29060
 HEAP32[$AsyncRetVal + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 29060
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 29060
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 29060
 HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 29060
 $12 = (_strlen($6) | 0) + 1 | 0; //@line 29062
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 29063
 $13 = __ZnajRKSt9nothrow_t($12, 12052) | 0; //@line 29064
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 162; //@line 29067
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 29068
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 29069
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 29070
  HEAP32[$15 >> 2] = $6; //@line 29071
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 29072
  HEAP32[$16 >> 2] = $8; //@line 29073
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 29074
  HEAP32[$17 >> 2] = $2; //@line 29075
  sp = STACKTOP; //@line 29076
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 29080
 ___async_unwind = 0; //@line 29081
 HEAP32[$ReallocAsyncCtx2 >> 2] = 162; //@line 29082
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 29083
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 29084
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 29085
 HEAP32[$15 >> 2] = $6; //@line 29086
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 29087
 HEAP32[$16 >> 2] = $8; //@line 29088
 $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 29089
 HEAP32[$17 >> 2] = $2; //@line 29090
 sp = STACKTOP; //@line 29091
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 2151
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2153
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2155
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2157
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2159
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2161
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2163
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2167
  return;
 }
 $13 = $2 + 12 | 0; //@line 2170
 dest = $13; //@line 2171
 src = $4; //@line 2171
 stop = dest + 60 | 0; //@line 2171
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 2171
  dest = dest + 4 | 0; //@line 2171
  src = src + 4 | 0; //@line 2171
 } while ((dest | 0) < (stop | 0));
 HEAP16[$13 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 2171
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 2172
 _wait_ms(1); //@line 2173
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 39; //@line 2176
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 2177
  HEAP32[$14 >> 2] = $6; //@line 2178
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 2179
  HEAP32[$15 >> 2] = $2; //@line 2180
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 2181
  HEAP32[$16 >> 2] = $8; //@line 2182
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 2183
  HEAP32[$17 >> 2] = $10; //@line 2184
  sp = STACKTOP; //@line 2185
  return;
 }
 ___async_unwind = 0; //@line 2188
 HEAP32[$ReallocAsyncCtx4 >> 2] = 39; //@line 2189
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 2190
 HEAP32[$14 >> 2] = $6; //@line 2191
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 2192
 HEAP32[$15 >> 2] = $2; //@line 2193
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 2194
 HEAP32[$16 >> 2] = $8; //@line 2195
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 2196
 HEAP32[$17 >> 2] = $10; //@line 2197
 sp = STACKTOP; //@line 2198
 return;
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 25319
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 25325
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 25331
   } else {
    $7 = $1 & 255; //@line 25333
    $$03039 = $0; //@line 25334
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 25336
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 25341
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 25344
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 25349
      break;
     } else {
      $$03039 = $13; //@line 25352
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 25356
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 25357
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 25365
     $25 = $18; //@line 25365
     while (1) {
      $24 = $25 ^ $17; //@line 25367
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 25374
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 25377
      $25 = HEAP32[$31 >> 2] | 0; //@line 25378
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 25387
       break;
      } else {
       $$02936 = $31; //@line 25385
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 25392
    }
   } while (0);
   $38 = $1 & 255; //@line 25395
   $$1 = $$029$lcssa; //@line 25396
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 25398
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 25404
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 25407
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 25412
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_155($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29859
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29861
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29863
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29865
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29867
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29869
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29871
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29873
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29875
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29877
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29879
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29881
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29883
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29885
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 29886
 $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($20, 0, $22, 512) | 0; //@line 29887
 if (!___async) {
  HEAP32[___async_retval >> 2] = $27; //@line 29891
  ___async_unwind = 0; //@line 29892
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 243; //@line 29894
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 29896
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 29898
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 29900
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 29902
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 29904
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 29906
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 29908
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 29910
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 29912
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 29914
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 29916
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 29918
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 29920
 sp = STACKTOP; //@line 29921
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 25061
 $4 = HEAP32[$3 >> 2] | 0; //@line 25062
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 25069
   label = 5; //@line 25070
  } else {
   $$1 = 0; //@line 25072
  }
 } else {
  $12 = $4; //@line 25076
  label = 5; //@line 25077
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 25081
   $10 = HEAP32[$9 >> 2] | 0; //@line 25082
   $14 = $10; //@line 25085
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 25090
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 25098
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 25102
       $$141 = $0; //@line 25102
       $$143 = $1; //@line 25102
       $31 = $14; //@line 25102
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 25105
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 25112
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 25117
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 25120
      break L5;
     }
     $$139 = $$038; //@line 25126
     $$141 = $0 + $$038 | 0; //@line 25126
     $$143 = $1 - $$038 | 0; //@line 25126
     $31 = HEAP32[$9 >> 2] | 0; //@line 25126
    } else {
     $$139 = 0; //@line 25128
     $$141 = $0; //@line 25128
     $$143 = $1; //@line 25128
     $31 = $14; //@line 25128
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 25131
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 25134
   $$1 = $$139 + $$143 | 0; //@line 25136
  }
 } while (0);
 return $$1 | 0; //@line 25139
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 964
 $2 = HEAP32[$1 >> 2] | 0; //@line 965
 if (!$2) {
  label = 3; //@line 968
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 974
  } else {
   label = 4; //@line 976
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 980
  if (($7 | 0) < 0) {
   label = 4; //@line 983
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 985
   $$phi$trans$insert = $0 + 8 | 0; //@line 987
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 989
    $$sink = $$pre; //@line 990
    $26 = $$pre; //@line 990
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 992
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 994
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 999
    $21 = $12; //@line 1001
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 1003
     $26 = $21; //@line 1003
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 1007
     $26 = $21; //@line 1007
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 1011
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 1013
   if (!$26) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 1016
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 1018
    $29 = $0 + 108 | 0; //@line 1020
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 1025
    $36 = $27; //@line 1027
   }
   $35 = $36 + -1 | 0; //@line 1029
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 1034
   } else {
    HEAP8[$35 >> 0] = $7; //@line 1037
    $$0 = $7; //@line 1038
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 1044
  $$0 = -1; //@line 1045
 }
 return $$0 | 0; //@line 1047
}
function __Z17recv_coap_messagev__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $36 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10781
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10783
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10785
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10787
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10789
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10791
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10795
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10799
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10803
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10805
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10809
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10811
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 10815
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 10819
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10823
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 10824
 HEAP32[$2 + 8 >> 2] = $4 | -2147483648; //@line 10827
 HEAP32[$2 + 4 >> 2] = $6; //@line 10829
 $$pre = $2 + 11 | 0; //@line 10830
 _memcpy($AsyncRetVal | 0, $8 | 0, $6 | 0) | 0; //@line 10831
 HEAP8[$AsyncRetVal + $6 >> 0] = 0; //@line 10833
 HEAP32[$12 >> 2] = HEAPU16[$10 + 20 >> 1]; //@line 10837
 _printf(6169, $12) | 0; //@line 10838
 HEAP32[$16 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 10841
 _printf(6192, $16) | 0; //@line 10842
 HEAP32[$20 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 10845
 _printf(6215, $20) | 0; //@line 10846
 HEAP32[$26 >> 2] = HEAPU16[$24 >> 1]; //@line 10849
 _printf(6238, $26) | 0; //@line 10850
 HEAP32[$32 >> 2] = (HEAP8[$$pre >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $30; //@line 10855
 _printf(6261, $32) | 0; //@line 10856
 HEAP32[$36 >> 2] = HEAP32[$10 + 40 >> 2]; //@line 10859
 _printf(6284, $36) | 0; //@line 10860
 if ((HEAP8[$$pre >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 10865
 }
 _free($40); //@line 10867
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_66($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15194
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15196
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15198
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15200
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15202
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15204
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15206
 if ($AsyncRetVal | 0) {
  __ZN9UDPSocketC2Ev($AsyncRetVal); //@line 15209
  $13 = HEAP32[$8 >> 2] | 0; //@line 15210
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(36) | 0; //@line 15211
  $14 = __ZN6Socket4openEP12NetworkStack($AsyncRetVal, $13) | 0; //@line 15212
  if (!___async) {
   HEAP32[___async_retval >> 2] = $14; //@line 15216
   ___async_unwind = 0; //@line 15217
  }
  HEAP32[$ReallocAsyncCtx11 >> 2] = 211; //@line 15219
  HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 15221
  HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 15223
  HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $AsyncRetVal; //@line 15225
  HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $6; //@line 15227
  HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $8; //@line 15229
  HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $AsyncRetVal; //@line 15231
  HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $10; //@line 15233
  HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $AsyncRetVal; //@line 15235
  sp = STACKTOP; //@line 15236
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 15239
 __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($2, -3007, 0); //@line 15240
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 212; //@line 15243
  sp = STACKTOP; //@line 15244
  return;
 }
 ___async_unwind = 0; //@line 15247
 HEAP32[$ReallocAsyncCtx9 >> 2] = 212; //@line 15248
 sp = STACKTOP; //@line 15249
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_70($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15274
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15278
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15280
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15282
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15284
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15285
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 15289
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 15290
  FUNCTION_TABLE_vi[$14 & 511]($8); //@line 15291
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 220; //@line 15294
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 15295
   HEAP32[$15 >> 2] = $4; //@line 15296
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 15297
   HEAP32[$16 >> 2] = $6; //@line 15298
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 15299
   HEAP32[$17 >> 2] = $10; //@line 15300
   sp = STACKTOP; //@line 15301
   return;
  }
  ___async_unwind = 0; //@line 15304
  HEAP32[$ReallocAsyncCtx4 >> 2] = 220; //@line 15305
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 15306
  HEAP32[$15 >> 2] = $4; //@line 15307
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 15308
  HEAP32[$16 >> 2] = $6; //@line 15309
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 15310
  HEAP32[$17 >> 2] = $10; //@line 15311
  sp = STACKTOP; //@line 15312
  return;
 }
 HEAP32[$4 >> 2] = $6; //@line 15315
 $18 = HEAP32[$10 >> 2] | 0; //@line 15316
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 15317
 __ZL26nsapi_dns_query_async_sendPv($18); //@line 15318
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 15321
  sp = STACKTOP; //@line 15322
  return;
 }
 ___async_unwind = 0; //@line 15325
 HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 15326
 sp = STACKTOP; //@line 15327
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_49($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13659
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13663
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13665
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13667
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13669
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13671
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13673
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13675
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 13678
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 13679
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 13695
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 13696
    if (!___async) {
     ___async_unwind = 0; //@line 13699
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 349; //@line 13701
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 13703
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 13705
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 13707
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 13709
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 13711
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 13713
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 13715
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 13717
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 13720
    sp = STACKTOP; //@line 13721
    return;
   }
  }
 } while (0);
 return;
}
function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8178
 STACKTOP = STACKTOP + 32 | 0; //@line 8179
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8179
 $2 = sp; //@line 8180
 $3 = HEAP8[$1 >> 0] | 0; //@line 8181
 L1 : do {
  if (!($3 << 24 >> 24)) {
   label = 3; //@line 8185
  } else {
   if (!(HEAP8[$1 + 1 >> 0] | 0)) {
    label = 3; //@line 8191
   } else {
    _memset($2 | 0, 0, 32) | 0; //@line 8193
    $10 = HEAP8[$1 >> 0] | 0; //@line 8194
    if ($10 << 24 >> 24) {
     $$01824 = $1; //@line 8197
     $15 = $10; //@line 8197
     do {
      $19 = $2 + ((($15 & 255) >>> 5 & 255) << 2) | 0; //@line 8204
      HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($15 & 31); //@line 8207
      $$01824 = $$01824 + 1 | 0; //@line 8208
      $15 = HEAP8[$$01824 >> 0] | 0; //@line 8209
     } while ($15 << 24 >> 24 != 0);
    }
    $12 = HEAP8[$0 >> 0] | 0; //@line 8218
    if (!($12 << 24 >> 24)) {
     $$019$sink = $0; //@line 8221
    } else {
     $$01922 = $0; //@line 8223
     $25 = $12; //@line 8223
     while (1) {
      if (HEAP32[$2 + ((($25 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($25 & 31) | 0) {
       $$019$sink = $$01922; //@line 8235
       break L1;
      }
      $34 = $$01922 + 1 | 0; //@line 8238
      $25 = HEAP8[$34 >> 0] | 0; //@line 8239
      if (!($25 << 24 >> 24)) {
       $$019$sink = $34; //@line 8242
       break;
      } else {
       $$01922 = $34; //@line 8245
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0; //@line 8255
 }
 STACKTOP = sp; //@line 8260
 return $$019$sink - $0 | 0; //@line 8260
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24947
 STACKTOP = STACKTOP + 16 | 0; //@line 24948
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 24948
 $2 = sp; //@line 24949
 $3 = $1 & 255; //@line 24950
 HEAP8[$2 >> 0] = $3; //@line 24951
 $4 = $0 + 16 | 0; //@line 24952
 $5 = HEAP32[$4 >> 2] | 0; //@line 24953
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 24960
   label = 4; //@line 24961
  } else {
   $$0 = -1; //@line 24963
  }
 } else {
  $12 = $5; //@line 24966
  label = 4; //@line 24967
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 24971
   $10 = HEAP32[$9 >> 2] | 0; //@line 24972
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 24975
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 24982
     HEAP8[$10 >> 0] = $3; //@line 24983
     $$0 = $13; //@line 24984
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 24989
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 24990
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 24991
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 310; //@line 24994
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 24996
    sp = STACKTOP; //@line 24997
    STACKTOP = sp; //@line 24998
    return 0; //@line 24998
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 25000
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 25005
   } else {
    $$0 = -1; //@line 25007
   }
  }
 } while (0);
 STACKTOP = sp; //@line 25011
 return $$0 | 0; //@line 25011
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 472
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 476
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 478
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 480
 $9 = $4 + 12 | 0; //@line 482
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 483
 $11 = HEAP32[$6 + 16 >> 2] | 0; //@line 485
 HEAP32[$8 + 8 >> 2] = 0; //@line 487
 HEAP32[$8 >> 2] = 233; //@line 488
 HEAP32[$8 + 4 >> 2] = $11; //@line 490
 $13 = $8 + 12 | 0; //@line 491
 HEAP32[$13 >> 2] = 736; //@line 492
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 493
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 494
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 234; //@line 497
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 498
  HEAP32[$14 >> 2] = $13; //@line 499
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 500
  HEAP32[$15 >> 2] = $9; //@line 501
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 502
  HEAP32[$16 >> 2] = $8; //@line 503
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 504
  HEAP32[$17 >> 2] = $4; //@line 505
  sp = STACKTOP; //@line 506
  return;
 }
 ___async_unwind = 0; //@line 509
 HEAP32[$ReallocAsyncCtx4 >> 2] = 234; //@line 510
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 511
 HEAP32[$14 >> 2] = $13; //@line 512
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 513
 HEAP32[$15 >> 2] = $9; //@line 514
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 515
 HEAP32[$16 >> 2] = $8; //@line 516
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 517
 HEAP32[$17 >> 2] = $4; //@line 518
 sp = STACKTOP; //@line 519
 return;
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_105($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 23934
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23938
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23940
 $7 = $4 + 12 | 0; //@line 23942
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23943
 $9 = $6 + 4 | 0; //@line 23945
 HEAP32[$9 >> 2] = 0; //@line 23947
 HEAP32[$9 + 4 >> 2] = 0; //@line 23950
 HEAP32[$6 >> 2] = 3; //@line 23951
 $13 = $6 + 12 | 0; //@line 23952
 HEAP32[$13 >> 2] = 712; //@line 23953
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 23954
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $6) | 0; //@line 23955
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 23958
  $14 = $ReallocAsyncCtx10 + 4 | 0; //@line 23959
  HEAP32[$14 >> 2] = $13; //@line 23960
  $15 = $ReallocAsyncCtx10 + 8 | 0; //@line 23961
  HEAP32[$15 >> 2] = $7; //@line 23962
  $16 = $ReallocAsyncCtx10 + 12 | 0; //@line 23963
  HEAP32[$16 >> 2] = $6; //@line 23964
  $17 = $ReallocAsyncCtx10 + 16 | 0; //@line 23965
  HEAP32[$17 >> 2] = $4; //@line 23966
  sp = STACKTOP; //@line 23967
  return;
 }
 ___async_unwind = 0; //@line 23970
 HEAP32[$ReallocAsyncCtx10 >> 2] = 201; //@line 23971
 $14 = $ReallocAsyncCtx10 + 4 | 0; //@line 23972
 HEAP32[$14 >> 2] = $13; //@line 23973
 $15 = $ReallocAsyncCtx10 + 8 | 0; //@line 23974
 HEAP32[$15 >> 2] = $7; //@line 23975
 $16 = $ReallocAsyncCtx10 + 12 | 0; //@line 23976
 HEAP32[$16 >> 2] = $6; //@line 23977
 $17 = $ReallocAsyncCtx10 + 16 | 0; //@line 23978
 HEAP32[$17 >> 2] = $4; //@line 23979
 sp = STACKTOP; //@line 23980
 return;
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_108($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24021
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24025
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24027
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24029
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24030
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 24034
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 24035
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 24036
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 202; //@line 24039
   $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 24040
   HEAP32[$13 >> 2] = $4; //@line 24041
   $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 24042
   HEAP32[$14 >> 2] = $8; //@line 24043
   sp = STACKTOP; //@line 24044
   return;
  }
  ___async_unwind = 0; //@line 24047
  HEAP32[$ReallocAsyncCtx8 >> 2] = 202; //@line 24048
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 24049
  HEAP32[$13 >> 2] = $4; //@line 24050
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 24051
  HEAP32[$14 >> 2] = $8; //@line 24052
  sp = STACKTOP; //@line 24053
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 24056
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 24062
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 24063
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 24064
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 203; //@line 24067
  sp = STACKTOP; //@line 24068
  return;
 }
 ___async_unwind = 0; //@line 24071
 HEAP32[$ReallocAsyncCtx9 >> 2] = 203; //@line 24072
 sp = STACKTOP; //@line 24073
 return;
}
function _sn_coap_protocol_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8419
 if (($0 | 0) == 0 | ($1 | 0) == 0 | ($2 | 0) == 0) {
  $$1 = 0; //@line 8426
  return $$1 | 0; //@line 8427
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 8429
 $7 = FUNCTION_TABLE_ii[$0 & 31](44) | 0; //@line 8430
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 70; //@line 8433
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 8435
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8437
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8439
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 8441
  sp = STACKTOP; //@line 8442
  return 0; //@line 8443
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8445
 if (!$7) {
  $$1 = 0; //@line 8448
  return $$1 | 0; //@line 8449
 }
 $13 = $7 + 16 | 0; //@line 8451
 HEAP32[$13 >> 2] = 0; //@line 8452
 HEAP32[$13 + 4 >> 2] = 0; //@line 8452
 HEAP32[$13 + 8 >> 2] = 0; //@line 8452
 HEAP32[$13 + 12 >> 2] = 0; //@line 8452
 HEAP32[$13 + 16 >> 2] = 0; //@line 8452
 HEAP32[$13 + 20 >> 2] = 0; //@line 8452
 HEAP32[$13 + 24 >> 2] = 0; //@line 8452
 HEAP32[$7 + 8 >> 2] = $2; //@line 8454
 HEAP32[$7 + 4 >> 2] = $1; //@line 8456
 HEAP32[$7 >> 2] = $0; //@line 8457
 HEAP32[$7 + 12 >> 2] = $3; //@line 8459
 HEAP8[$7 + 43 >> 0] = 1; //@line 8461
 _ns_list_init_($7 + 16 | 0); //@line 8463
 HEAP8[$7 + 34 >> 0] = 2; //@line 8465
 HEAP32[$7 + 36 >> 2] = 0; //@line 8467
 HEAP8[$7 + 41 >> 0] = 10; //@line 8469
 HEAP8[$7 + 40 >> 0] = 3; //@line 8471
 _randLIB_seed_random(); //@line 8472
 _randLIB_get_16bit() | 0; //@line 8473
 $$1 = $7; //@line 8474
 return $$1 | 0; //@line 8475
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_193($0) {
 $0 = $0 | 0;
 var $$010 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1104
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1106
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1108
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1110
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1112
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1114
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1116
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1118
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1120
 if (__ZN13SocketAddress14set_ip_addressEPKc($16, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$010 = __ZNK13SocketAddress14get_ip_versionEv($16) | 0; //@line 1128
 } else {
  $$010 = 0; //@line 1130
 }
 $24 = HEAP32[(HEAP32[$12 >> 2] | 0) + 96 >> 2] | 0; //@line 1134
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 1135
 FUNCTION_TABLE_vii[$24 & 7]($8, $12); //@line 1136
 if (!___async) {
  ___async_unwind = 0; //@line 1139
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 103; //@line 1141
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 1143
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 1145
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 1147
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 1149
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 1151
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $10; //@line 1153
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $12; //@line 1155
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $14; //@line 1157
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $$010; //@line 1159
 sp = STACKTOP; //@line 1160
 return;
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_37($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12437
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12439
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12441
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12443
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12445
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12449
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12451
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12453
 $17 = $12 + 12 | 0; //@line 12455
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 12456
 $18 = HEAP32[$14 >> 2] | 0; //@line 12457
 HEAP32[$16 + 8 >> 2] = 0; //@line 12459
 HEAP32[$16 >> 2] = 184; //@line 12460
 HEAP32[$16 + 4 >> 2] = $18; //@line 12462
 $20 = $16 + 12 | 0; //@line 12463
 HEAP32[$20 >> 2] = 724; //@line 12464
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 12465
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($12, 0, $16) | 0; //@line 12466
 if (!___async) {
  ___async_unwind = 0; //@line 12469
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 12471
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 12473
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 12475
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $17; //@line 12477
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $12; //@line 12479
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $6; //@line 12481
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $8; //@line 12483
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $20; //@line 12485
 HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $16; //@line 12487
 sp = STACKTOP; //@line 12488
 return;
}
function _fflush__async_cb_74($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15703
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15705
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 15707
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 15711
  } else {
   $$02327 = $$02325; //@line 15713
   $$02426 = $AsyncRetVal; //@line 15713
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 15720
    } else {
     $16 = 0; //@line 15722
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 15734
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 15737
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 15740
     break L3;
    } else {
     $$02327 = $$023; //@line 15743
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 15746
   $13 = ___fflush_unlocked($$02327) | 0; //@line 15747
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 15751
    ___async_unwind = 0; //@line 15752
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 314; //@line 15754
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 15756
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 15758
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 15760
   sp = STACKTOP; //@line 15761
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 15765
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 15767
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10995
 $2 = $0 + 32 | 0; //@line 10996
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 44 | 0; //@line 11001
 $5 = HEAP32[$4 >> 2] | 0; //@line 11002
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 11007
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11008
   FUNCTION_TABLE_vi[$8 & 511]($2); //@line 11009
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 143; //@line 11012
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11014
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 11016
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 11018
    sp = STACKTOP; //@line 11019
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11022
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 11027
 $13 = HEAP32[$12 >> 2] | 0; //@line 11028
 do {
  if (!$13) {
   $19 = 0; //@line 11032
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 11035
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11036
   FUNCTION_TABLE_vii[$16 & 7]($2, $1); //@line 11037
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 144; //@line 11040
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 11042
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 11044
    sp = STACKTOP; //@line 11045
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11048
    $19 = HEAP32[$12 >> 2] | 0; //@line 11050
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 11055
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_181($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 560
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 564
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 566
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 568
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 569
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 573
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 574
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 575
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 578
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 579
   HEAP32[$13 >> 2] = $4; //@line 580
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 581
   HEAP32[$14 >> 2] = $8; //@line 582
   sp = STACKTOP; //@line 583
   return;
  }
  ___async_unwind = 0; //@line 586
  HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 587
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 588
  HEAP32[$13 >> 2] = $4; //@line 589
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 590
  HEAP32[$14 >> 2] = $8; //@line 591
  sp = STACKTOP; //@line 592
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 595
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 601
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 602
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 603
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 606
  sp = STACKTOP; //@line 607
  return;
 }
 ___async_unwind = 0; //@line 610
 HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 611
 sp = STACKTOP; //@line 612
 return;
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12437
 $4 = $0 + 8 | 0; //@line 12438
 $5 = $0 + 52 | 0; //@line 12439
 $6 = $0 + 4 | 0; //@line 12440
 $7 = $0 + 12 | 0; //@line 12441
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 12443
  if (!$8) {
   $$2 = -3005; //@line 12446
   label = 6; //@line 12447
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 12450
  $10 = HEAP32[$6 >> 2] | 0; //@line 12451
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 80 >> 2] | 0; //@line 12454
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 12455
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 12456
  if (___async) {
   label = 4; //@line 12459
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12462
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 12468
   label = 6; //@line 12469
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 153; //@line 12474
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 12476
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 12478
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 12480
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 12482
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 12484
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 12486
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 12488
  sp = STACKTOP; //@line 12489
  return 0; //@line 12490
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 12493
 }
 return 0; //@line 12495
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12370
 $4 = $0 + 8 | 0; //@line 12371
 $5 = $0 + 52 | 0; //@line 12372
 $6 = $0 + 4 | 0; //@line 12373
 $7 = $0 + 12 | 0; //@line 12374
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 12376
  if (!$8) {
   $$2 = -3005; //@line 12379
   label = 6; //@line 12380
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 12383
  $10 = HEAP32[$6 >> 2] | 0; //@line 12384
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 12387
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 12388
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 12389
  if (___async) {
   label = 4; //@line 12392
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12395
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 12401
   label = 6; //@line 12402
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 152; //@line 12407
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 12409
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 12411
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 12413
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 12415
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 12417
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 12419
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 12421
  sp = STACKTOP; //@line 12422
  return 0; //@line 12423
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 12426
 }
 return 0; //@line 12428
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 2740
 value = value & 255; //@line 2742
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 2745
   ptr = ptr + 1 | 0; //@line 2746
  }
  aligned_end = end & -4 | 0; //@line 2749
  block_aligned_end = aligned_end - 64 | 0; //@line 2750
  value4 = value | value << 8 | value << 16 | value << 24; //@line 2751
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 2754
   HEAP32[ptr + 4 >> 2] = value4; //@line 2755
   HEAP32[ptr + 8 >> 2] = value4; //@line 2756
   HEAP32[ptr + 12 >> 2] = value4; //@line 2757
   HEAP32[ptr + 16 >> 2] = value4; //@line 2758
   HEAP32[ptr + 20 >> 2] = value4; //@line 2759
   HEAP32[ptr + 24 >> 2] = value4; //@line 2760
   HEAP32[ptr + 28 >> 2] = value4; //@line 2761
   HEAP32[ptr + 32 >> 2] = value4; //@line 2762
   HEAP32[ptr + 36 >> 2] = value4; //@line 2763
   HEAP32[ptr + 40 >> 2] = value4; //@line 2764
   HEAP32[ptr + 44 >> 2] = value4; //@line 2765
   HEAP32[ptr + 48 >> 2] = value4; //@line 2766
   HEAP32[ptr + 52 >> 2] = value4; //@line 2767
   HEAP32[ptr + 56 >> 2] = value4; //@line 2768
   HEAP32[ptr + 60 >> 2] = value4; //@line 2769
   ptr = ptr + 64 | 0; //@line 2770
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 2774
   ptr = ptr + 4 | 0; //@line 2775
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 2780
  ptr = ptr + 1 | 0; //@line 2781
 }
 return end - num | 0; //@line 2783
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_196($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1478
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1480
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1482
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1484
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1486
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1488
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1490
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1492
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1494
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1496
 $19 = $12 + 12 | 0; //@line 1498
 HEAP32[$19 >> 2] = HEAP32[$2 >> 2]; //@line 1499
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 1500
 $20 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $8, $12, $18) | 0; //@line 1501
 if (!___async) {
  HEAP32[___async_retval >> 2] = $20; //@line 1505
  ___async_unwind = 0; //@line 1506
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 106; //@line 1508
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $19; //@line 1510
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $10; //@line 1512
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $12; //@line 1514
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $2; //@line 1516
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $8; //@line 1518
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $6; //@line 1520
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $4; //@line 1522
 sp = STACKTOP; //@line 1523
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13596
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13600
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13602
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13604
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13606
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13608
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13610
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 13613
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 13614
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 13623
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 13624
    if (!___async) {
     ___async_unwind = 0; //@line 13627
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 350; //@line 13629
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 13631
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 13633
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 13635
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 13637
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13639
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 13641
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 13643
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 13646
    sp = STACKTOP; //@line 13647
    return;
   }
  }
 }
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15604
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 15614
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 15614
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 15614
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 15618
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 15621
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 15624
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 15632
  } else {
   $20 = 0; //@line 15634
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 15644
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 15648
  HEAP32[___async_retval >> 2] = $$1; //@line 15650
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 15653
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 15654
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 15658
  ___async_unwind = 0; //@line 15659
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 314; //@line 15661
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 15663
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 15665
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 15667
 sp = STACKTOP; //@line 15668
 return;
}
function __ZN9UDPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12127
 HEAP32[$0 >> 2] = 592; //@line 12128
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12129
 __ZN6Socket5closeEv($0) | 0; //@line 12130
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 145; //@line 12133
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12135
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 12137
  sp = STACKTOP; //@line 12138
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12141
 HEAP32[$0 >> 2] = 556; //@line 12142
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 12144
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 12150
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12151
   FUNCTION_TABLE_vi[$8 & 511]($0 + 32 | 0); //@line 12152
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 146; //@line 12155
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12157
    sp = STACKTOP; //@line 12158
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12161
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 12167
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 12174
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12175
 FUNCTION_TABLE_vi[$15 & 511]($0 + 16 | 0); //@line 12176
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 147; //@line 12179
  sp = STACKTOP; //@line 12180
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12183
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14460
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14462
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14464
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14466
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 14471
  } else {
   $9 = $4 + 4 | 0; //@line 14473
   $10 = HEAP32[$9 >> 2] | 0; //@line 14474
   $11 = $4 + 8 | 0; //@line 14475
   $12 = HEAP32[$11 >> 2] | 0; //@line 14476
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 14480
    HEAP32[$6 >> 2] = 0; //@line 14481
    HEAP32[$2 >> 2] = 0; //@line 14482
    HEAP32[$11 >> 2] = 0; //@line 14483
    HEAP32[$9 >> 2] = 0; //@line 14484
    $$0 = 0; //@line 14485
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 14492
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 14493
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 14494
   if (!___async) {
    ___async_unwind = 0; //@line 14497
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 316; //@line 14499
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 14501
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 14503
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 14505
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 14507
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 14509
   sp = STACKTOP; //@line 14510
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 14515
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 933
 $5 = $0 + -4 | 0; //@line 934
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 120 >> 2] | 0; //@line 937
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 938
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($5, $1, $3, $4) | 0; //@line 939
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 54; //@line 942
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 944
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 946
  sp = STACKTOP; //@line 947
  return 0; //@line 948
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 950
 if (($2 | 0) != 0 & ($9 | 0) > -1) {
  $14 = $1 + 12 | 0; //@line 955
  dest = $2; //@line 956
  src = $14; //@line 956
  stop = dest + 60 | 0; //@line 956
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 956
   dest = dest + 4 | 0; //@line 956
   src = src + 4 | 0; //@line 956
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$14 + 60 >> 1] | 0; //@line 956
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 958
 _wait_ms(1); //@line 959
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 55; //@line 962
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 964
  sp = STACKTOP; //@line 965
  return 0; //@line 966
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 968
  return $9 | 0; //@line 969
 }
 return 0; //@line 971
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 1132
 if (!$2) {
  $$0 = -1; //@line 1135
  return $$0 | 0; //@line 1136
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 1139
 $5 = $0 + 20 | 0; //@line 1140
 HEAP32[$5 >> 2] = 0; //@line 1141
 $6 = $0 + 16 | 0; //@line 1142
 HEAP32[$6 >> 2] = 0; //@line 1143
 if ($1 | 0) {
  $$034$i = $1; //@line 1146
  $23 = 0; //@line 1146
  do {
   $23 = $23 + 1 | 0; //@line 1148
   $$034$i = $$034$i >>> 1; //@line 1149
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 1157
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1160
 HEAP32[$0 + 28 >> 2] = $1; //@line 1162
 HEAP32[$0 + 32 >> 2] = $2; //@line 1164
 HEAP32[$0 >> 2] = 0; //@line 1165
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1168
 HEAP8[$0 + 9 >> 0] = 0; //@line 1170
 HEAP8[$0 + 8 >> 0] = 0; //@line 1172
 HEAP8[$0 + 36 >> 0] = 0; //@line 1174
 HEAP32[$0 + 40 >> 2] = 0; //@line 1176
 HEAP32[$0 + 44 >> 2] = 0; //@line 1178
 HEAP8[$0 + 184 >> 0] = 0; //@line 1180
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1182
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 1185
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1188
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 1191
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1194
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 1197
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 1200
 $$0 = $$033$i; //@line 1201
 return $$0 | 0; //@line 1202
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 641
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 643
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 645
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 647
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 649
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 651
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 653
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 655
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 659
  return;
 }
 $15 = $2 + 12 | 0; //@line 662
 dest = $15; //@line 663
 src = $4; //@line 663
 stop = dest + 60 | 0; //@line 663
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 663
  dest = dest + 4 | 0; //@line 663
  src = src + 4 | 0; //@line 663
 } while ((dest | 0) < (stop | 0));
 HEAP16[$15 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 663
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 664
 _wait_ms(1); //@line 665
 if (!___async) {
  ___async_unwind = 0; //@line 668
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 670
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $6; //@line 672
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $8; //@line 674
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $2; //@line 676
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 678
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $12; //@line 680
 sp = STACKTOP; //@line 681
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 523
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 120 >> 2] | 0; //@line 526
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 527
 $8 = FUNCTION_TABLE_iiiii[$7 & 15]($0, $1, $3, $4) | 0; //@line 528
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 41; //@line 531
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 533
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 535
  sp = STACKTOP; //@line 536
  return 0; //@line 537
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 539
 if (($2 | 0) != 0 & ($8 | 0) > -1) {
  $13 = $1 + 12 | 0; //@line 544
  dest = $2; //@line 545
  src = $13; //@line 545
  stop = dest + 60 | 0; //@line 545
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 545
   dest = dest + 4 | 0; //@line 545
   src = src + 4 | 0; //@line 545
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$13 + 60 >> 1] | 0; //@line 545
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 547
 _wait_ms(1); //@line 548
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 42; //@line 551
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 553
  sp = STACKTOP; //@line 554
  return 0; //@line 555
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 557
  return $8 | 0; //@line 558
 }
 return 0; //@line 560
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13925
 STACKTOP = STACKTOP + 48 | 0; //@line 13926
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13926
 $$byval_copy = sp + 20 | 0; //@line 13927
 $4 = sp; //@line 13928
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13929
 $5 = __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $4, 1, $3) | 0; //@line 13930
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 163; //@line 13933
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13935
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 13937
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 13939
  sp = STACKTOP; //@line 13940
  STACKTOP = sp; //@line 13941
  return 0; //@line 13941
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13943
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 13944
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 13944
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 13944
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 13944
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 13944
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 13945
  STACKTOP = sp; //@line 13948
  return (($5 | 0) < 0 ? $5 : 0) | 0; //@line 13948
 }
 return 0; //@line 13950
}
function _sn_coap_protocol_init__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $11 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 740
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 742
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 744
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 746
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 748
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 751
  $21 = ___async_retval; //@line 752
  HEAP32[$21 >> 2] = $$1; //@line 753
  return;
 }
 $11 = $AsyncRetVal + 16 | 0; //@line 756
 HEAP32[$11 >> 2] = 0; //@line 757
 HEAP32[$11 + 4 >> 2] = 0; //@line 757
 HEAP32[$11 + 8 >> 2] = 0; //@line 757
 HEAP32[$11 + 12 >> 2] = 0; //@line 757
 HEAP32[$11 + 16 >> 2] = 0; //@line 757
 HEAP32[$11 + 20 >> 2] = 0; //@line 757
 HEAP32[$11 + 24 >> 2] = 0; //@line 757
 HEAP32[$AsyncRetVal + 8 >> 2] = $2; //@line 759
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 761
 HEAP32[$AsyncRetVal >> 2] = $6; //@line 762
 HEAP32[$AsyncRetVal + 12 >> 2] = $8; //@line 764
 HEAP8[$AsyncRetVal + 43 >> 0] = 1; //@line 766
 _ns_list_init_($AsyncRetVal + 16 | 0); //@line 768
 HEAP8[$AsyncRetVal + 34 >> 0] = 2; //@line 770
 HEAP32[$AsyncRetVal + 36 >> 2] = 0; //@line 772
 HEAP8[$AsyncRetVal + 41 >> 0] = 10; //@line 774
 HEAP8[$AsyncRetVal + 40 >> 0] = 3; //@line 776
 _randLIB_seed_random(); //@line 777
 _randLIB_get_16bit() | 0; //@line 778
 $$1 = $AsyncRetVal; //@line 779
 $21 = ___async_retval; //@line 780
 HEAP32[$21 >> 2] = $$1; //@line 781
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_149($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 29236
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29238
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29240
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29242
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29244
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 29249
  return;
 }
 dest = $2 + 4 | 0; //@line 29253
 stop = dest + 52 | 0; //@line 29253
 do {
  HEAP32[dest >> 2] = 0; //@line 29253
  dest = dest + 4 | 0; //@line 29253
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 29254
 HEAP32[$2 + 8 >> 2] = $4; //@line 29256
 HEAP32[$2 + 12 >> 2] = -1; //@line 29258
 HEAP32[$2 + 48 >> 2] = 1; //@line 29260
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 29263
 $16 = HEAP32[$6 >> 2] | 0; //@line 29264
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 29265
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 29266
 if (!___async) {
  ___async_unwind = 0; //@line 29269
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 335; //@line 29271
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 29273
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 29275
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 29277
 sp = STACKTOP; //@line 29278
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_117($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26394
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26398
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 556; //@line 26399
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 26401
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 26406
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 26407
  FUNCTION_TABLE_vi[$10 & 511]($4 + 32 | 0); //@line 26408
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 146; //@line 26411
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 26412
   HEAP32[$11 >> 2] = $4; //@line 26413
   sp = STACKTOP; //@line 26414
   return;
  }
  ___async_unwind = 0; //@line 26417
  HEAP32[$ReallocAsyncCtx >> 2] = 146; //@line 26418
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 26419
  HEAP32[$11 >> 2] = $4; //@line 26420
  sp = STACKTOP; //@line 26421
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 26425
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 26432
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26433
 FUNCTION_TABLE_vi[$17 & 511]($4 + 16 | 0); //@line 26434
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 147; //@line 26437
  sp = STACKTOP; //@line 26438
  return;
 }
 ___async_unwind = 0; //@line 26441
 HEAP32[$ReallocAsyncCtx2 >> 2] = 147; //@line 26442
 sp = STACKTOP; //@line 26443
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 6888
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 6893
    $$0 = 1; //@line 6894
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 6907
     $$0 = 1; //@line 6908
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 6912
     $$0 = -1; //@line 6913
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 6923
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 6927
    $$0 = 2; //@line 6928
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 6940
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 6946
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 6950
    $$0 = 3; //@line 6951
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 6961
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 6967
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 6973
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 6977
    $$0 = 4; //@line 6978
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 6982
    $$0 = -1; //@line 6983
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 6988
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_50($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13732
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13736
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13738
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13740
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13742
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13744
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 13747
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 13748
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 13754
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 13755
   if (!___async) {
    ___async_unwind = 0; //@line 13758
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 348; //@line 13760
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 13762
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 13764
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 13766
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 13768
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 13770
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 13772
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 13775
   sp = STACKTOP; //@line 13776
   return;
  }
 }
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_198($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 1614
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1618
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1620
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1622
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1623
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 1627
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 1631
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 1632
 FUNCTION_TABLE_vi[$12 & 511]($4); //@line 1633
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 1636
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 1637
  HEAP32[$13 >> 2] = $4; //@line 1638
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 1639
  HEAP32[$14 >> 2] = $6; //@line 1640
  $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 1641
  HEAP32[$15 >> 2] = $8; //@line 1642
  sp = STACKTOP; //@line 1643
  return;
 }
 ___async_unwind = 0; //@line 1646
 HEAP32[$ReallocAsyncCtx8 >> 2] = 109; //@line 1647
 $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 1648
 HEAP32[$13 >> 2] = $4; //@line 1649
 $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 1650
 HEAP32[$14 >> 2] = $6; //@line 1651
 $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 1652
 HEAP32[$15 >> 2] = $8; //@line 1653
 sp = STACKTOP; //@line 1654
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_6($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10688
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10692
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10694
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10696
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10698
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10700
 $13 = $4 + 12 | 0; //@line 10702
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10703
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 10704
 $14 = FUNCTION_TABLE_iiiii[$12 & 15]($6, $8, $4, $10) | 0; //@line 10705
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 10708
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 10709
  HEAP32[$15 >> 2] = $13; //@line 10710
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 10711
  HEAP32[$16 >> 2] = $4; //@line 10712
  sp = STACKTOP; //@line 10713
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 10717
 ___async_unwind = 0; //@line 10718
 HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 10719
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 10720
 HEAP32[$15 >> 2] = $13; //@line 10721
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 10722
 HEAP32[$16 >> 2] = $4; //@line 10723
 sp = STACKTOP; //@line 10724
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_17($0) {
 $0 = $0 | 0;
 var $$010 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11406
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11410
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 11413
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11414
 if (!$7) {
  if ($6) {
   $$010 = -3007; //@line 11418
   $12 = ___async_retval; //@line 11419
   HEAP32[$12 >> 2] = $$010; //@line 11420
   return;
  }
  $$010 = 0; //@line 11423
  $12 = ___async_retval; //@line 11424
  HEAP32[$12 >> 2] = $$010; //@line 11425
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 11429
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 11430
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 11431
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 11434
   $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 11435
   $$expand_i1_val = $6 & 1; //@line 11436
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 11437
   sp = STACKTOP; //@line 11438
   return;
  }
  ___async_unwind = 0; //@line 11441
  HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 11442
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 11443
  $$expand_i1_val = $6 & 1; //@line 11444
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 11445
  sp = STACKTOP; //@line 11446
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_16($0) {
 $0 = $0 | 0;
 var $$010 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11359
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11363
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 11366
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11367
 if (!$7) {
  if ($6) {
   $$010 = -3007; //@line 11371
   $12 = ___async_retval; //@line 11372
   HEAP32[$12 >> 2] = $$010; //@line 11373
   return;
  }
  $$010 = 0; //@line 11376
  $12 = ___async_retval; //@line 11377
  HEAP32[$12 >> 2] = $$010; //@line 11378
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 11382
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11383
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 11384
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 122; //@line 11387
   $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 11388
   $$expand_i1_val = $6 & 1; //@line 11389
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 11390
   sp = STACKTOP; //@line 11391
   return;
  }
  ___async_unwind = 0; //@line 11394
  HEAP32[$ReallocAsyncCtx6 >> 2] = 122; //@line 11395
  $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 11396
  $$expand_i1_val = $6 & 1; //@line 11397
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 11398
  sp = STACKTOP; //@line 11399
  return;
 }
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 1212
 HEAP32[$0 + 20 >> 2] = 0; //@line 1214
 $5 = $0 + 16 | 0; //@line 1215
 HEAP32[$5 >> 2] = 0; //@line 1216
 if ($1 | 0) {
  $$034 = $1; //@line 1219
  $22 = 0; //@line 1219
  do {
   $22 = $22 + 1 | 0; //@line 1221
   $$034 = $$034 >>> 1; //@line 1222
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 1230
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1233
 HEAP32[$0 + 28 >> 2] = $1; //@line 1235
 HEAP32[$0 + 32 >> 2] = $2; //@line 1237
 HEAP32[$0 >> 2] = 0; //@line 1238
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1241
 HEAP8[$0 + 9 >> 0] = 0; //@line 1243
 HEAP8[$0 + 8 >> 0] = 0; //@line 1245
 HEAP8[$0 + 36 >> 0] = 0; //@line 1247
 HEAP32[$0 + 40 >> 2] = 0; //@line 1249
 HEAP32[$0 + 44 >> 2] = 0; //@line 1251
 HEAP8[$0 + 184 >> 0] = 0; //@line 1253
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1255
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 1258
  return $$033 | 0; //@line 1259
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1262
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 1265
  return $$033 | 0; //@line 1266
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1269
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 1272
 return $$033 | 0; //@line 1273
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_11($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11209
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11213
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11215
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11217
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11219
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11221
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11224
 _equeue_event_delay($4, $6); //@line 11225
 _equeue_event_dtor($4, 114); //@line 11226
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 11227
 $14 = _equeue_post($8, 115, $4) | 0; //@line 11228
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 116; //@line 11231
  $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 11232
  HEAP32[$15 >> 2] = $10; //@line 11233
  $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 11234
  HEAP32[$16 >> 2] = $12; //@line 11235
  sp = STACKTOP; //@line 11236
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 11240
 ___async_unwind = 0; //@line 11241
 HEAP32[$ReallocAsyncCtx8 >> 2] = 116; //@line 11242
 $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 11243
 HEAP32[$15 >> 2] = $10; //@line 11244
 $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 11245
 HEAP32[$16 >> 2] = $12; //@line 11246
 sp = STACKTOP; //@line 11247
 return;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 5772
  $8 = $0; //@line 5772
  $9 = $1; //@line 5772
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 5774
   $$0914 = $$0914 + -1 | 0; //@line 5778
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 5779
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 5780
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 5788
   }
  }
  $$010$lcssa$off0 = $8; //@line 5793
  $$09$lcssa = $$0914; //@line 5793
 } else {
  $$010$lcssa$off0 = $0; //@line 5795
  $$09$lcssa = $2; //@line 5795
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 5799
 } else {
  $$012 = $$010$lcssa$off0; //@line 5801
  $$111 = $$09$lcssa; //@line 5801
  while (1) {
   $26 = $$111 + -1 | 0; //@line 5806
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 5807
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 5811
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 5814
    $$111 = $26; //@line 5814
   }
  }
 }
 return $$1$lcssa | 0; //@line 5818
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_123($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26782
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26786
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26788
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26790
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26792
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26794
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26796
 $15 = $4 + 12 | 0; //@line 26798
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26799
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 26800
 $16 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($6, $8, $10, 0, $4, $12) | 0; //@line 26801
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 26805
  ___async_unwind = 0; //@line 26806
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 166; //@line 26808
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $15; //@line 26810
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $14; //@line 26812
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $4; //@line 26814
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 26816
 sp = STACKTOP; //@line 26817
 return;
}
function _randLIB_get_16bit() {
 var $0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $42 = 0, $5 = 0, $6 = 0, $8 = 0;
 $0 = 9824; //@line 1788
 $2 = HEAP32[$0 >> 2] | 0; //@line 1790
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 1793
 $6 = 9832; //@line 1794
 $8 = HEAP32[$6 >> 2] | 0; //@line 1796
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 1799
 $12 = _i64Add($8 | 0, $11 | 0, $2 | 0, $5 | 0) | 0; //@line 1800
 $13 = tempRet0; //@line 1801
 $14 = $8 ^ $2; //@line 1802
 $15 = $11 ^ $5; //@line 1803
 $16 = _bitshift64Shl($2 | 0, $5 | 0, 55) | 0; //@line 1804
 $17 = tempRet0; //@line 1805
 $18 = _bitshift64Lshr($2 | 0, $5 | 0, 9) | 0; //@line 1806
 $23 = (tempRet0 | $17) ^ $15; //@line 1811
 $24 = _bitshift64Shl($14 | 0, $15 | 0, 14) | 0; //@line 1812
 $28 = 9824; //@line 1816
 HEAP32[$28 >> 2] = ($18 | $16) ^ $14 ^ $24; //@line 1818
 HEAP32[$28 + 4 >> 2] = $23 ^ tempRet0; //@line 1821
 $32 = _bitshift64Shl($14 | 0, $15 | 0, 36) | 0; //@line 1822
 $33 = tempRet0; //@line 1823
 $34 = _bitshift64Lshr($14 | 0, $15 | 0, 28) | 0; //@line 1824
 $38 = 9832; //@line 1828
 HEAP32[$38 >> 2] = $34 | $32; //@line 1830
 HEAP32[$38 + 4 >> 2] = tempRet0 | $33; //@line 1833
 $42 = _bitshift64Lshr($12 | 0, $13 | 0, 48) | 0; //@line 1834
 return $42 & 65535 | 0; //@line 1837
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_89($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 18926
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18928
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18930
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18932
 $8 = HEAP32[$2 + 28 >> 2] | 0; //@line 18934
 if (!$8) {
  __ZdlPv($2); //@line 18937
  HEAP32[___async_retval >> 2] = -3007; //@line 18939
  return;
 }
 $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 18943
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 18944
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 18945
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 189; //@line 18948
  $12 = $ReallocAsyncCtx15 + 4 | 0; //@line 18949
  HEAP32[$12 >> 2] = $2; //@line 18950
  $13 = $ReallocAsyncCtx15 + 8 | 0; //@line 18951
  HEAP32[$13 >> 2] = $6; //@line 18952
  sp = STACKTOP; //@line 18953
  return;
 }
 ___async_unwind = 0; //@line 18956
 HEAP32[$ReallocAsyncCtx15 >> 2] = 189; //@line 18957
 $12 = $ReallocAsyncCtx15 + 4 | 0; //@line 18958
 HEAP32[$12 >> 2] = $2; //@line 18959
 $13 = $ReallocAsyncCtx15 + 8 | 0; //@line 18960
 HEAP32[$13 >> 2] = $6; //@line 18961
 sp = STACKTOP; //@line 18962
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_84($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 18545
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18547
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18549
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18551
 $8 = HEAP32[$2 + 28 >> 2] | 0; //@line 18553
 if (!$8) {
  __ZdlPv($2); //@line 18556
  HEAP32[___async_retval >> 2] = -3007; //@line 18558
  return;
 }
 $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 18562
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 18563
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 18564
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 18567
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 18568
  HEAP32[$12 >> 2] = $2; //@line 18569
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 18570
  HEAP32[$13 >> 2] = $6; //@line 18571
  sp = STACKTOP; //@line 18572
  return;
 }
 ___async_unwind = 0; //@line 18575
 HEAP32[$ReallocAsyncCtx10 >> 2] = 182; //@line 18576
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 18577
 HEAP32[$12 >> 2] = $2; //@line 18578
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 18579
 HEAP32[$13 >> 2] = $6; //@line 18580
 sp = STACKTOP; //@line 18581
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13169
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13171
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13175
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13177
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13179
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13181
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 13185
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 13188
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 13189
   if (!___async) {
    ___async_unwind = 0; //@line 13192
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 352; //@line 13194
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 13196
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 13198
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 13200
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 13202
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13204
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 13206
   sp = STACKTOP; //@line 13207
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 24713
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 24718
   label = 4; //@line 24719
  } else {
   $$01519 = $0; //@line 24721
   $23 = $1; //@line 24721
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 24726
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 24729
    $23 = $6; //@line 24730
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 24734
     label = 4; //@line 24735
     break;
    } else {
     $$01519 = $6; //@line 24738
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 24744
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 24746
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 24754
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 24762
  } else {
   $$pn = $$0; //@line 24764
   while (1) {
    $19 = $$pn + 1 | 0; //@line 24766
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 24770
     break;
    } else {
     $$pn = $19; //@line 24773
    }
   }
  }
  $$sink = $$1$lcssa; //@line 24778
 }
 return $$sink - $1 | 0; //@line 24781
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 29621
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29623
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29627
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 29632
  dest = $2; //@line 29633
  src = $8; //@line 29633
  stop = dest + 60 | 0; //@line 29633
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 29633
   dest = dest + 4 | 0; //@line 29633
   src = src + 4 | 0; //@line 29633
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 29633
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29635
 _wait_ms(1); //@line 29636
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 55; //@line 29639
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 29640
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 29641
  sp = STACKTOP; //@line 29642
  return;
 }
 ___async_unwind = 0; //@line 29645
 HEAP32[$ReallocAsyncCtx2 >> 2] = 55; //@line 29646
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 29647
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 29648
 sp = STACKTOP; //@line 29649
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 30972
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30974
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30978
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 30983
  dest = $2; //@line 30984
  src = $8; //@line 30984
  stop = dest + 60 | 0; //@line 30984
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 30984
   dest = dest + 4 | 0; //@line 30984
   src = src + 4 | 0; //@line 30984
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 30984
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30986
 _wait_ms(1); //@line 30987
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 42; //@line 30990
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 30991
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 30992
  sp = STACKTOP; //@line 30993
  return;
 }
 ___async_unwind = 0; //@line 30996
 HEAP32[$ReallocAsyncCtx2 >> 2] = 42; //@line 30997
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 30998
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 30999
 sp = STACKTOP; //@line 31000
 return;
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12390
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12392
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12394
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12396
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12400
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12404
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12406
 $17 = (HEAP32[$0 + 16 >> 2] | 0) + 12 | 0; //@line 12408
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 12409
 $18 = HEAP32[$10 >> 2] | 0; //@line 12410
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 12411
 __ZL28nsapi_dns_query_async_deletei($18) | 0; //@line 12412
 if (!___async) {
  ___async_unwind = 0; //@line 12415
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 224; //@line 12417
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $17; //@line 12419
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $2; //@line 12421
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $14; //@line 12423
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $4; //@line 12425
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $6; //@line 12427
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $16; //@line 12429
 sp = STACKTOP; //@line 12430
 return;
}
function __ZN6Socket5closeEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14218
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14220
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14222
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14224
 $7 = HEAP32[$2 >> 2] | 0; //@line 14225
 HEAP32[$2 >> 2] = 0; //@line 14226
 $8 = HEAP32[$4 >> 2] | 0; //@line 14227
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0; //@line 14230
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 14231
 $12 = FUNCTION_TABLE_iii[$11 & 15]($8, $7) | 0; //@line 14232
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 14235
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 14236
  HEAP32[$13 >> 2] = $4; //@line 14237
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 14238
  HEAP32[$14 >> 2] = $6; //@line 14239
  sp = STACKTOP; //@line 14240
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 14244
 ___async_unwind = 0; //@line 14245
 HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 14246
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 14247
 HEAP32[$13 >> 2] = $4; //@line 14248
 $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 14249
 HEAP32[$14 >> 2] = $6; //@line 14250
 sp = STACKTOP; //@line 14251
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 8827
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 8834
   $10 = $1 + 16 | 0; //@line 8835
   $11 = HEAP32[$10 >> 2] | 0; //@line 8836
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 8839
    HEAP32[$1 + 24 >> 2] = $4; //@line 8841
    HEAP32[$1 + 36 >> 2] = 1; //@line 8843
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 8853
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 8858
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 8861
    HEAP8[$1 + 54 >> 0] = 1; //@line 8863
    break;
   }
   $21 = $1 + 24 | 0; //@line 8866
   $22 = HEAP32[$21 >> 2] | 0; //@line 8867
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 8870
    $28 = $4; //@line 8871
   } else {
    $28 = $22; //@line 8873
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 8882
   }
  }
 } while (0);
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_1($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10339
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10343
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10345
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10347
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10349
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10351
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10353
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10355
 $17 = $4 + 12 | 0; //@line 10357
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10358
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 10359
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 10360
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 10364
  ___async_unwind = 0; //@line 10365
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 125; //@line 10367
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 10369
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 10371
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 10373
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 10375
 sp = STACKTOP; //@line 10376
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_14($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11302
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11306
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11308
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11310
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11312
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11315
 _equeue_event_dtor($4, 114); //@line 11316
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 11317
 $12 = _equeue_post($6, 115, $4) | 0; //@line 11318
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 121; //@line 11321
  $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 11322
  HEAP32[$13 >> 2] = $8; //@line 11323
  $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 11324
  HEAP32[$14 >> 2] = $10; //@line 11325
  sp = STACKTOP; //@line 11326
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 11330
 ___async_unwind = 0; //@line 11331
 HEAP32[$ReallocAsyncCtx7 >> 2] = 121; //@line 11332
 $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 11333
 HEAP32[$13 >> 2] = $8; //@line 11334
 $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 11335
 HEAP32[$14 >> 2] = $10; //@line 11336
 sp = STACKTOP; //@line 11337
 return;
}
function _sn_coap_header_validity_check($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 5310
 STACKTOP = STACKTOP + 16 | 0; //@line 5311
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5311
 $vararg_buffer1 = sp + 8 | 0; //@line 5312
 $vararg_buffer = sp; //@line 5313
 L1 : do {
  if (($1 | 0) == 64) {
   $4 = HEAP32[$0 + 12 >> 2] | 0; //@line 5318
   if (($4 >>> 4 | $4 << 28) >>> 0 >= 4) {
    _mbed_tracef(2, 3844, 3736, $vararg_buffer); //@line 5324
    $$0 = -1; //@line 5325
    break;
   }
   switch (HEAP32[$0 + 8 >> 2] | 0) {
   case 95:
   case 165:
   case 164:
   case 163:
   case 162:
   case 161:
   case 160:
   case 143:
   case 141:
   case 140:
   case 136:
   case 134:
   case 133:
   case 132:
   case 131:
   case 130:
   case 129:
   case 128:
   case 69:
   case 68:
   case 67:
   case 66:
   case 65:
   case 4:
   case 3:
   case 2:
   case 1:
   case 0:
    {
     $$0 = 0; //@line 5332
     break L1;
     break;
    }
   default:
    {}
   }
   _mbed_tracef(2, 3844, 3790, $vararg_buffer1); //@line 5339
   $$0 = -1; //@line 5340
  } else {
   $$0 = -1; //@line 5342
  }
 } while (0);
 STACKTOP = sp; //@line 5345
 return $$0 | 0; //@line 5345
}
function _mbed_vtracef__async_cb_140($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28637
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28639
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28641
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28643
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 28648
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28650
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 28655
 $16 = _snprintf($4, $6, 5708, $2) | 0; //@line 28656
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 28658
 $19 = $4 + $$18 | 0; //@line 28660
 $20 = $6 - $$18 | 0; //@line 28661
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 5786, $12) | 0; //@line 28669
  }
 }
 $23 = HEAP32[129] | 0; //@line 28672
 $24 = HEAP32[122] | 0; //@line 28673
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 28674
 FUNCTION_TABLE_vi[$23 & 511]($24); //@line 28675
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 28678
  sp = STACKTOP; //@line 28679
  return;
 }
 ___async_unwind = 0; //@line 28682
 HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 28683
 sp = STACKTOP; //@line 28684
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_56($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14333
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14337
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14339
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14341
 $9 = $4 + 12 | 0; //@line 14343
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14344
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 14345
 $10 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($6, $8, $4) | 0; //@line 14346
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 208; //@line 14349
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 14350
  HEAP32[$11 >> 2] = $9; //@line 14351
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 14352
  HEAP32[$12 >> 2] = $4; //@line 14353
  sp = STACKTOP; //@line 14354
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 14358
 ___async_unwind = 0; //@line 14359
 HEAP32[$ReallocAsyncCtx5 >> 2] = 208; //@line 14360
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 14361
 HEAP32[$11 >> 2] = $9; //@line 14362
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 14363
 HEAP32[$12 >> 2] = $4; //@line 14364
 sp = STACKTOP; //@line 14365
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8113
 $1 = HEAP32[220] | 0; //@line 8114
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 8120
 } else {
  $19 = 0; //@line 8122
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 8128
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 8134
    $12 = HEAP32[$11 >> 2] | 0; //@line 8135
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 8141
     HEAP8[$12 >> 0] = 10; //@line 8142
     $22 = 0; //@line 8143
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 8147
   $17 = ___overflow($1, 10) | 0; //@line 8148
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 325; //@line 8151
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 8153
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8155
    sp = STACKTOP; //@line 8156
    return 0; //@line 8157
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8159
    $22 = $17 >> 31; //@line 8161
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 8168
 }
 return $22 | 0; //@line 8170
}
function __ZN6Socket4openEP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26960
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26962
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26964
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26966
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26968
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26970
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26972
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26974
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26976
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26977
 $16 = FUNCTION_TABLE_iiii[$12 & 31]($10, $6, $AsyncRetVal) | 0; //@line 26978
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 26982
  ___async_unwind = 0; //@line 26983
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 131; //@line 26985
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 26987
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 26989
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 26991
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 26993
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 26995
 sp = STACKTOP; //@line 26996
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15845
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15847
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15851
 $7 = $2 + 12 | 0; //@line 15852
 $8 = HEAP32[$7 >> 2] | 0; //@line 15853
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 15856
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 15860
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 15861
 FUNCTION_TABLE_vii[$11 & 7]($6, $2); //@line 15862
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 15865
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 15866
  HEAP32[$12 >> 2] = $7; //@line 15867
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 15868
  HEAP32[$13 >> 2] = $4; //@line 15869
  sp = STACKTOP; //@line 15870
  return;
 }
 ___async_unwind = 0; //@line 15873
 HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 15874
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 15875
 HEAP32[$12 >> 2] = $7; //@line 15876
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 15877
 HEAP32[$13 >> 2] = $4; //@line 15878
 sp = STACKTOP; //@line 15879
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_46($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13223
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13225
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13227
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13229
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 13234
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 13236
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 13237
 if (!___async) {
  ___async_unwind = 0; //@line 13240
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 352; //@line 13242
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 13244
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 13246
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 13248
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 13250
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 13252
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 13254
 sp = STACKTOP; //@line 13255
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_133($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27617
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27619
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27621
 $6 = HEAP32[$2 + 28 >> 2] | 0; //@line 27623
 if (!$6) {
  __ZdlPv($2); //@line 27626
  HEAP32[$4 >> 2] = 0; //@line 27627
  HEAP32[___async_retval >> 2] = 0; //@line 27629
  return;
 }
 $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 27634
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27635
 FUNCTION_TABLE_vi[$10 & 511]($2 + 16 | 0); //@line 27636
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 27639
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 27640
  HEAP32[$11 >> 2] = $2; //@line 27641
  $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 27642
  HEAP32[$12 >> 2] = $4; //@line 27643
  sp = STACKTOP; //@line 27644
  return;
 }
 ___async_unwind = 0; //@line 27647
 HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 27648
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 27649
 HEAP32[$11 >> 2] = $2; //@line 27650
 $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 27651
 HEAP32[$12 >> 2] = $4; //@line 27652
 sp = STACKTOP; //@line 27653
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_111($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26105
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26109
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26111
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26113
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26115
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26117
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26119
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26121
 $17 = $4 + 12 | 0; //@line 26123
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26124
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 26125
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 26126
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 26130
  ___async_unwind = 0; //@line 26131
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 26133
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 26135
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 26137
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 26139
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 26141
 sp = STACKTOP; //@line 26142
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9273
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 9276
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9277
 $7 = FUNCTION_TABLE_ii[$6 & 31]($0) | 0; //@line 9278
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 88; //@line 9281
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9283
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 9285
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 9287
  sp = STACKTOP; //@line 9288
  return 0; //@line 9289
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9291
 $12 = HEAP32[HEAP32[$7 >> 2] >> 2] | 0; //@line 9293
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9294
 $13 = FUNCTION_TABLE_iiiii[$12 & 15]($7, $1, $2, $3) | 0; //@line 9295
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 89; //@line 9298
  sp = STACKTOP; //@line 9299
  return 0; //@line 9300
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9302
  return $13 | 0; //@line 9303
 }
 return 0; //@line 9305
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10524
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10526
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10528
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10530
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 10532
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 10534
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 9377; //@line 10539
  HEAP32[$4 + 4 >> 2] = $6; //@line 10541
  _abort_message(9286, $4); //@line 10542
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 10545
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 10548
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 10549
 $16 = FUNCTION_TABLE_ii[$15 & 31]($12) | 0; //@line 10550
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 10554
  ___async_unwind = 0; //@line 10555
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 331; //@line 10557
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 10559
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 10561
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 10563
 sp = STACKTOP; //@line 10564
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20593
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20595
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20597
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20601
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 20605
  label = 4; //@line 20606
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 20611
   label = 4; //@line 20612
  } else {
   $$037$off039 = 3; //@line 20614
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 20618
  $17 = $8 + 40 | 0; //@line 20619
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 20622
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 20632
    $$037$off039 = $$037$off038; //@line 20633
   } else {
    $$037$off039 = $$037$off038; //@line 20635
   }
  } else {
   $$037$off039 = $$037$off038; //@line 20638
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 20641
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_176($0) {
 $0 = $0 | 0;
 var $$4$ = 0, $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30809
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30813
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30815
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30817
 $$4$ = ($AsyncRetVal | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : $AsyncRetVal; //@line 30819
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 30820
 __ZN9UDPSocketD2Ev($4); //@line 30821
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 160; //@line 30824
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 30825
  HEAP32[$9 >> 2] = $6; //@line 30826
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 30827
  HEAP32[$10 >> 2] = $$4$; //@line 30828
  sp = STACKTOP; //@line 30829
  return;
 }
 ___async_unwind = 0; //@line 30832
 HEAP32[$ReallocAsyncCtx5 >> 2] = 160; //@line 30833
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 30834
 HEAP32[$9 >> 2] = $6; //@line 30835
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 30836
 HEAP32[$10 >> 2] = $$4$; //@line 30837
 sp = STACKTOP; //@line 30838
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 8686
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 8695
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 8700
      HEAP32[$13 >> 2] = $2; //@line 8701
      $19 = $1 + 40 | 0; //@line 8702
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 8705
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 8715
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 8719
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 8726
    }
   }
  }
 } while (0);
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 7008
 while (1) {
  if ((HEAPU8[7349 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 7015
   break;
  }
  $7 = $$016 + 1 | 0; //@line 7018
  if (($7 | 0) == 87) {
   $$01214 = 7437; //@line 7021
   $$115 = 87; //@line 7021
   label = 5; //@line 7022
   break;
  } else {
   $$016 = $7; //@line 7025
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 7437; //@line 7031
  } else {
   $$01214 = 7437; //@line 7033
   $$115 = $$016; //@line 7033
   label = 5; //@line 7034
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 7039
   $$113 = $$01214; //@line 7040
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 7044
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 7051
   if (!$$115) {
    $$012$lcssa = $$113; //@line 7054
    break;
   } else {
    $$01214 = $$113; //@line 7057
    label = 5; //@line 7058
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 7065
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9227
 $1 = $0 + 12 | 0; //@line 9228
 $2 = HEAP32[$1 >> 2] | 0; //@line 9229
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9233
   _mbed_assert_internal(6023, 6028, 528); //@line 9234
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 86; //@line 9237
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 9239
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9241
    sp = STACKTOP; //@line 9242
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9245
    $7 = HEAP32[$1 >> 2] | 0; //@line 9247
    break;
   }
  } else {
   $7 = $2; //@line 9251
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 9254
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9255
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 9256
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 87; //@line 9259
  sp = STACKTOP; //@line 9260
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9263
  return;
 }
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 7081
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 7085
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 7088
   if (!$5) {
    $$0 = 0; //@line 7091
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 7097
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 7103
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 7110
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 7117
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 7124
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 7131
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 7138
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 7142
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 7152
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10816
 $1 = $0 + 12 | 0; //@line 10817
 $2 = HEAP32[$1 >> 2] | 0; //@line 10818
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10822
   _mbed_assert_internal(6023, 6028, 528); //@line 10823
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 137; //@line 10826
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 10828
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10830
    sp = STACKTOP; //@line 10831
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10834
    $7 = HEAP32[$1 >> 2] | 0; //@line 10836
    break;
   }
  } else {
   $7 = $2; //@line 10840
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 10843
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10844
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 10845
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 138; //@line 10848
  sp = STACKTOP; //@line 10849
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10852
  return;
 }
}
function _mbed_vtracef__async_cb_146($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29022
 $3 = HEAP32[130] | 0; //@line 29026
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[122] | 0; //@line 29030
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 29031
  FUNCTION_TABLE_vi[$3 & 511]($5); //@line 29032
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 75; //@line 29035
   sp = STACKTOP; //@line 29036
   return;
  }
  ___async_unwind = 0; //@line 29039
  HEAP32[$ReallocAsyncCtx2 >> 2] = 75; //@line 29040
  sp = STACKTOP; //@line 29041
  return;
 } else {
  $6 = HEAP32[129] | 0; //@line 29044
  $7 = HEAP32[122] | 0; //@line 29045
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 29046
  FUNCTION_TABLE_vi[$6 & 511]($7); //@line 29047
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 77; //@line 29050
   sp = STACKTOP; //@line 29051
   return;
  }
  ___async_unwind = 0; //@line 29054
  HEAP32[$ReallocAsyncCtx4 >> 2] = 77; //@line 29055
  sp = STACKTOP; //@line 29056
  return;
 }
}
function __ZN6SocketD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10539
 HEAP32[$0 >> 2] = 556; //@line 10540
 $2 = HEAP32[$0 + 44 >> 2] | 0; //@line 10542
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 10548
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10549
   FUNCTION_TABLE_vi[$6 & 511]($0 + 32 | 0); //@line 10550
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 128; //@line 10553
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10555
    sp = STACKTOP; //@line 10556
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10559
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 28 >> 2] | 0; //@line 10565
 if (!$9) {
  return;
 }
 $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 10572
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10573
 FUNCTION_TABLE_vi[$13 & 511]($0 + 16 | 0); //@line 10574
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 129; //@line 10577
  sp = STACKTOP; //@line 10578
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10581
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19428
 $2 = $0 + 12 | 0; //@line 19430
 $3 = HEAP32[$2 >> 2] | 0; //@line 19431
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19435
   _mbed_assert_internal(6023, 6028, 528); //@line 19436
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 289; //@line 19439
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 19441
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 19443
    sp = STACKTOP; //@line 19444
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19447
    $8 = HEAP32[$2 >> 2] | 0; //@line 19449
    break;
   }
  } else {
   $8 = $3; //@line 19453
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 19456
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19458
 FUNCTION_TABLE_vi[$7 & 511]($0); //@line 19459
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 290; //@line 19462
  sp = STACKTOP; //@line 19463
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19466
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 7277
 $32 = $0 + 3 | 0; //@line 7291
 $33 = HEAP8[$32 >> 0] | 0; //@line 7292
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 7294
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 7299
  $$sink21$lcssa = $32; //@line 7299
 } else {
  $$sink2123 = $32; //@line 7301
  $39 = $35; //@line 7301
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 7304
   $41 = HEAP8[$40 >> 0] | 0; //@line 7305
   $39 = $39 << 8 | $41 & 255; //@line 7307
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 7312
    $$sink21$lcssa = $40; //@line 7312
    break;
   } else {
    $$sink2123 = $40; //@line 7315
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 7322
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_7($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10730
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10734
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10736
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10737
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10741
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 10745
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 10746
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 10747
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 93; //@line 10750
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 10751
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 10752
  sp = STACKTOP; //@line 10753
  return;
 }
 ___async_unwind = 0; //@line 10756
 HEAP32[$ReallocAsyncCtx4 >> 2] = 93; //@line 10757
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 10758
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 10759
 sp = STACKTOP; //@line 10760
 return;
}
function _main__async_cb_187($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 891
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 893
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 895
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 897
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 899
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 901
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 903
 $15 = HEAP32[(HEAP32[$2 >> 2] | 0) + 88 >> 2] | 0; //@line 906
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 907
 $16 = FUNCTION_TABLE_ii[$15 & 31]($2) | 0; //@line 908
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 912
  ___async_unwind = 0; //@line 913
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 300; //@line 915
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $4; //@line 917
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 919
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 921
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 923
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 925
 sp = STACKTOP; //@line 926
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8519
 STACKTOP = STACKTOP + 16 | 0; //@line 8520
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8520
 $1 = sp; //@line 8521
 HEAP32[$1 >> 2] = $varargs; //@line 8522
 $2 = HEAP32[188] | 0; //@line 8523
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8524
 _vfprintf($2, $0, $1) | 0; //@line 8525
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 332; //@line 8528
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 8530
  sp = STACKTOP; //@line 8531
  STACKTOP = sp; //@line 8532
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8534
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8535
 _fputc(10, $2) | 0; //@line 8536
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 333; //@line 8539
  sp = STACKTOP; //@line 8540
  STACKTOP = sp; //@line 8541
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8543
  _abort(); //@line 8544
 }
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_124($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26823
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26827
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26829
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26830
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 26834
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 26838
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 26839
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 26840
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 168; //@line 26843
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 26844
  HEAP32[$11 >> 2] = $4; //@line 26845
  sp = STACKTOP; //@line 26846
  return;
 }
 ___async_unwind = 0; //@line 26849
 HEAP32[$ReallocAsyncCtx4 >> 2] = 168; //@line 26850
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 26851
 HEAP32[$11 >> 2] = $4; //@line 26852
 sp = STACKTOP; //@line 26853
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_58($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14381
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14385
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14387
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14388
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 14392
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 14396
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 14397
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 14398
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 209; //@line 14401
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 14402
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 14403
  sp = STACKTOP; //@line 14404
  return;
 }
 ___async_unwind = 0; //@line 14407
 HEAP32[$ReallocAsyncCtx4 >> 2] = 209; //@line 14408
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 14409
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 14410
 sp = STACKTOP; //@line 14411
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_3($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10457
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10463
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10465
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 10466
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 10470
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 10474
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10475
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 10476
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 127; //@line 10479
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 10480
  HEAP32[$13 >> 2] = $6; //@line 10481
  sp = STACKTOP; //@line 10482
  return;
 }
 ___async_unwind = 0; //@line 10485
 HEAP32[$ReallocAsyncCtx5 >> 2] = 127; //@line 10486
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 10487
 HEAP32[$13 >> 2] = $6; //@line 10488
 sp = STACKTOP; //@line 10489
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9451
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 9454
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9455
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 9456
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 96; //@line 9459
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9461
  sp = STACKTOP; //@line 9462
  return 0; //@line 9463
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9465
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0; //@line 9468
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9469
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 9470
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 97; //@line 9473
  sp = STACKTOP; //@line 9474
  return 0; //@line 9475
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9477
  return $10 | 0; //@line 9478
 }
 return 0; //@line 9480
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 7211
 $23 = $0 + 2 | 0; //@line 7220
 $24 = HEAP8[$23 >> 0] | 0; //@line 7221
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 7224
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 7229
  $$lcssa = $24; //@line 7229
 } else {
  $$01618 = $23; //@line 7231
  $$019 = $27; //@line 7231
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 7233
   $31 = HEAP8[$30 >> 0] | 0; //@line 7234
   $$019 = ($$019 | $31 & 255) << 8; //@line 7237
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 7242
    $$lcssa = $31; //@line 7242
    break;
   } else {
    $$01618 = $30; //@line 7245
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 7252
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9416
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 9419
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9420
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 9421
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 94; //@line 9424
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9426
  sp = STACKTOP; //@line 9427
  return 0; //@line 9428
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9430
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0; //@line 9433
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9434
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 9435
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 95; //@line 9438
  sp = STACKTOP; //@line 9439
  return 0; //@line 9440
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9442
  return $10 | 0; //@line 9443
 }
 return 0; //@line 9445
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 423
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 425
 $6 = HEAP32[$0 + 16 >> 2] | 0; //@line 429
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 431
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 433
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$0 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 439
 } else {
  $$0 = 0; //@line 441
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 443
 $14 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($6, $8, $10, $$0) | 0; //@line 444
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 447
  sp = STACKTOP; //@line 448
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 452
 ___async_unwind = 0; //@line 453
 HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 454
 sp = STACKTOP; //@line 455
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10157
 STACKTOP = STACKTOP + 16 | 0; //@line 10158
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10158
 $3 = sp; //@line 10159
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 10161
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 10164
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 10165
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 10166
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 356; //@line 10169
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 10171
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 10173
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 10175
  sp = STACKTOP; //@line 10176
  STACKTOP = sp; //@line 10177
  return 0; //@line 10177
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10179
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 10183
 }
 STACKTOP = sp; //@line 10185
 return $8 & 1 | 0; //@line 10185
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, sp = 0;
 sp = STACKTOP; //@line 29187
 STACKTOP = STACKTOP + 32 | 0; //@line 29188
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 29188
 $$byval_copy = sp; //@line 29189
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29191
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29193
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29197
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 29198
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 29198
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 29198
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 29198
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 29198
 __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 29199
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) < 0 ? $AsyncRetVal : 0; //@line 29203
 STACKTOP = sp; //@line 29204
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 6839
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 6839
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 6840
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 6841
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 6850
    $$016 = $9; //@line 6853
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 6853
   } else {
    $$016 = $0; //@line 6855
    $storemerge = 0; //@line 6855
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 6857
   $$0 = $$016; //@line 6858
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 6862
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 6868
   HEAP32[tempDoublePtr >> 2] = $2; //@line 6871
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 6871
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 6872
  }
 }
 return +$$0;
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 3756
  $5 = ($1 | 0) > 2046; //@line 3758
  $7 = $1 + -2046 | 0; //@line 3760
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 3765
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 3765
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 3769
   $12 = ($1 | 0) < -2044; //@line 3771
   $14 = $1 + 2044 | 0; //@line 3773
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 3778
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 3778
  } else {
   $$0 = $0; //@line 3780
   $$020 = $1; //@line 3780
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 3784
 $18 = tempRet0; //@line 3785
 HEAP32[tempDoublePtr >> 2] = $17; //@line 3786
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 3786
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 11171
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11173
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11175
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11179
 $9 = $2 + 12 | 0; //@line 11181
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 11182
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 11183
 $10 = _equeue_alloc($4, 16) | 0; //@line 11184
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 11188
  ___async_unwind = 0; //@line 11189
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 112; //@line 11191
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $9; //@line 11193
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $8; //@line 11195
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 11197
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $2; //@line 11199
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $9; //@line 11201
 sp = STACKTOP; //@line 11202
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29567
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29575
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29577
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29579
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29581
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29583
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29585
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29587
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 29598
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 29599
 HEAP32[$10 >> 2] = 0; //@line 29600
 HEAP32[$12 >> 2] = 0; //@line 29601
 HEAP32[$14 >> 2] = 0; //@line 29602
 HEAP32[$2 >> 2] = 0; //@line 29603
 $33 = HEAP32[$16 >> 2] | 0; //@line 29604
 HEAP32[$16 >> 2] = $33 | $18; //@line 29609
 if ($20 | 0) {
  ___unlockfile($22); //@line 29612
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 29615
 return;
}
function _mbed_vtracef__async_cb_143($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28753
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28757
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 28762
 $$pre = HEAP32[132] | 0; //@line 28763
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 28764
 FUNCTION_TABLE_v[$$pre & 7](); //@line 28765
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 84; //@line 28768
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 28769
  HEAP32[$6 >> 2] = $4; //@line 28770
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 28771
  HEAP32[$7 >> 2] = $5; //@line 28772
  sp = STACKTOP; //@line 28773
  return;
 }
 ___async_unwind = 0; //@line 28776
 HEAP32[$ReallocAsyncCtx9 >> 2] = 84; //@line 28777
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 28778
 HEAP32[$6 >> 2] = $4; //@line 28779
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 28780
 HEAP32[$7 >> 2] = $5; //@line 28781
 sp = STACKTOP; //@line 28782
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_170($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29102
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29104
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29106
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29108
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 20 >> 2] = $AsyncRetVal; //@line 29110
 _strcpy($AsyncRetVal, $4) | 0; //@line 29111
 $11 = _emscripten_asm_const_i(9) | 0; //@line 29112
 $13 = (($11 | 0) < 0) << 31 >> 31; //@line 29114
 $14 = ___muldi3($6 | 0, 0, 1e3, 0) | 0; //@line 29115
 $16 = _i64Add($14 | 0, tempRet0 | 0, $11 | 0, $13 | 0) | 0; //@line 29117
 $18 = HEAP32[$8 >> 2] | 0; //@line 29119
 $20 = $18 + 24 | 0; //@line 29121
 HEAP32[$20 >> 2] = $16; //@line 29123
 HEAP32[$20 + 4 >> 2] = tempRet0; //@line 29126
 $25 = $18 + 32 | 0; //@line 29128
 HEAP32[$25 >> 2] = $11; //@line 29130
 HEAP32[$25 + 4 >> 2] = $13; //@line 29133
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_130($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27335
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27343
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27345
 $11 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 27346
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 84 >> 2] | 0; //@line 27349
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 27350
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 27351
 FUNCTION_TABLE_viiii[$14 & 7]($11, $15, 135, $8); //@line 27352
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 27355
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27356
  HEAP32[$16 >> 2] = $10; //@line 27357
  sp = STACKTOP; //@line 27358
  return;
 }
 ___async_unwind = 0; //@line 27361
 HEAP32[$ReallocAsyncCtx6 >> 2] = 136; //@line 27362
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27363
 HEAP32[$16 >> 2] = $10; //@line 27364
 sp = STACKTOP; //@line 27365
 return;
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 806
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 810
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 812
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 814
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 816
 $12 = __Z18nsapi_create_stackP12NetworkStack(HEAP32[___async_retval >> 2] | 0) | 0; //@line 819
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 820
 __ZN6Socket4openEP12NetworkStack(10104, $12) | 0; //@line 821
 if (!___async) {
  ___async_unwind = 0; //@line 824
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 301; //@line 826
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 828
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 830
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 832
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 834
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 836
 sp = STACKTOP; //@line 837
 return;
}
function _mbed_vtracef__async_cb_142($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28720
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28722
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 28727
 $$pre = HEAP32[132] | 0; //@line 28728
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 28729
 FUNCTION_TABLE_v[$$pre & 7](); //@line 28730
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 84; //@line 28733
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 28734
  HEAP32[$5 >> 2] = $2; //@line 28735
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 28736
  HEAP32[$6 >> 2] = $4; //@line 28737
  sp = STACKTOP; //@line 28738
  return;
 }
 ___async_unwind = 0; //@line 28741
 HEAP32[$ReallocAsyncCtx9 >> 2] = 84; //@line 28742
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 28743
 HEAP32[$5 >> 2] = $2; //@line 28744
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 28745
 HEAP32[$6 >> 2] = $4; //@line 28746
 sp = STACKTOP; //@line 28747
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9042
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 9048
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 9051
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 9054
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9055
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 9056
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 338; //@line 9059
    sp = STACKTOP; //@line 9060
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9063
    break;
   }
  }
 } while (0);
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_113($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26223
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26229
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26231
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 26232
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 26236
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 26240
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26241
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 26242
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 26245
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 26246
  HEAP32[$13 >> 2] = $6; //@line 26247
  sp = STACKTOP; //@line 26248
  return;
 }
 ___async_unwind = 0; //@line 26251
 HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 26252
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 26253
 HEAP32[$13 >> 2] = $6; //@line 26254
 sp = STACKTOP; //@line 26255
 return;
}
function _main__async_cb_190($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 979
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 981
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 983
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 985
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 987
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 989
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 990
 $11 = _sn_coap_protocol_init(18, 302, 12, 17) | 0; //@line 991
 if (!___async) {
  HEAP32[___async_retval >> 2] = $11; //@line 995
  ___async_unwind = 0; //@line 996
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 303; //@line 998
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 1000
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 1002
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 1004
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 1006
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 1008
 sp = STACKTOP; //@line 1009
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb($0) {
 $0 = $0 | 0;
 var $$048 = 0, $12 = 0, $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26449
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26451
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26453
 if (!(HEAP32[$2 + 48 >> 2] | 0)) {
  $$048 = 0; //@line 26460
 } else {
  $$048 = HEAPU8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 26464
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 26466
 __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($2, $$048, $4); //@line 26467
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 252; //@line 26470
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 26471
  HEAP32[$12 >> 2] = $4; //@line 26472
  sp = STACKTOP; //@line 26473
  return;
 }
 ___async_unwind = 0; //@line 26476
 HEAP32[$ReallocAsyncCtx3 >> 2] = 252; //@line 26477
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 26478
 HEAP32[$12 >> 2] = $4; //@line 26479
 sp = STACKTOP; //@line 26480
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10041
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 10043
 $8 = $7 >> 8; //@line 10044
 if (!($7 & 1)) {
  $$0 = $8; //@line 10048
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 10053
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 10055
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 10058
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10063
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 10064
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 354; //@line 10067
  sp = STACKTOP; //@line 10068
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10071
  return;
 }
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_201($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1806
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1810
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1812
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1814
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 1816
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 1817
 FUNCTION_TABLE_viii[$9 & 0]($4, 0, $6); //@line 1818
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 101; //@line 1821
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 1822
  HEAP32[$10 >> 2] = $8; //@line 1823
  sp = STACKTOP; //@line 1824
  return;
 }
 ___async_unwind = 0; //@line 1827
 HEAP32[$ReallocAsyncCtx >> 2] = 101; //@line 1828
 $10 = $ReallocAsyncCtx + 4 | 0; //@line 1829
 HEAP32[$10 >> 2] = $8; //@line 1830
 sp = STACKTOP; //@line 1831
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_172($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29742
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29744
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29752
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29754
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29756
 _free(HEAP32[$0 + 16 >> 2] | 0); //@line 29757
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 29758
 $15 = __ZN6Socket5closeEv($10) | 0; //@line 29759
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 29763
  ___async_unwind = 0; //@line 29764
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 159; //@line 29766
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 29768
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $12; //@line 29770
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $14; //@line 29772
 sp = STACKTOP; //@line 29773
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9211
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 9217
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 9220
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 9223
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9224
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 9225
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 341; //@line 9228
    sp = STACKTOP; //@line 9229
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9232
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_error_vfprintf__async_cb_21($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11889
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 11891
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11893
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11895
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11897
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11899
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 11901
 _serial_putc(10096, $2 << 24 >> 24); //@line 11902
 if (!___async) {
  ___async_unwind = 0; //@line 11905
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 11907
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 11909
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 11911
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 11913
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 11915
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 11917
 sp = STACKTOP; //@line 11918
 return;
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8265
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 8267
 while (1) {
  $2 = _malloc($$) | 0; //@line 8269
  if ($2 | 0) {
   $$lcssa = $2; //@line 8272
   label = 7; //@line 8273
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 8276
  if (!$4) {
   $$lcssa = 0; //@line 8279
   label = 7; //@line 8280
   break;
  }
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8283
  FUNCTION_TABLE_v[$4 & 7](); //@line 8284
  if (___async) {
   label = 5; //@line 8287
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8290
 }
 if ((label | 0) == 5) {
  HEAP32[$AsyncCtx >> 2] = 326; //@line 8293
  HEAP32[$AsyncCtx + 4 >> 2] = $$; //@line 8295
  sp = STACKTOP; //@line 8296
  return 0; //@line 8297
 } else if ((label | 0) == 7) {
  return $$lcssa | 0; //@line 8300
 }
 return 0; //@line 8302
}
function ___dynamic_cast__async_cb_47($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13388
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13390
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13392
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13398
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 13413
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 13429
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 13434
    break;
   }
  default:
   {
    $$0 = 0; //@line 13438
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 13443
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10083
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 10085
 $7 = $6 >> 8; //@line 10086
 if (!($6 & 1)) {
  $$0 = $7; //@line 10090
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 10095
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 10097
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 10100
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10105
 FUNCTION_TABLE_viiiii[$16 & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 10106
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 355; //@line 10109
  sp = STACKTOP; //@line 10110
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10113
  return;
 }
}
function __ZN6Socket5closeEv__async_cb_53($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14257
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14261
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14263
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 14264
 $8 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; //@line 14267
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14268
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 14269
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 14272
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 14273
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 14274
  sp = STACKTOP; //@line 14275
  return;
 }
 ___async_unwind = 0; //@line 14278
 HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 14279
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 14280
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 14281
 sp = STACKTOP; //@line 14282
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20537
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20539
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20541
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20543
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20545
 $9 = HEAP32[HEAP32[$AsyncRetVal >> 2] >> 2] | 0; //@line 20547
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20548
 $10 = FUNCTION_TABLE_iiiii[$9 & 15]($AsyncRetVal, $2, $4, $6) | 0; //@line 20549
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 89; //@line 20552
  sp = STACKTOP; //@line 20553
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 20557
 ___async_unwind = 0; //@line 20558
 HEAP32[$ReallocAsyncCtx2 >> 2] = 89; //@line 20559
 sp = STACKTOP; //@line 20560
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9998
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 10000
 $6 = $5 >> 8; //@line 10001
 if (!($5 & 1)) {
  $$0 = $6; //@line 10005
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 10010
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 10012
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 10015
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10020
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 10021
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 353; //@line 10024
  sp = STACKTOP; //@line 10025
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10028
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_13($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11269
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11271
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11273
 $7 = $2 + 12 | 0; //@line 11277
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 11278
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 11279
 $8 = _equeue_alloc($4, 16) | 0; //@line 11280
 if (!___async) {
  HEAP32[___async_retval >> 2] = $8; //@line 11284
  ___async_unwind = 0; //@line 11285
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 119; //@line 11287
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $7; //@line 11289
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 11291
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $2; //@line 11293
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $7; //@line 11295
 sp = STACKTOP; //@line 11296
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_95($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20379
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20383
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20385
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20387
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20389
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 20391
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 20392
 FUNCTION_TABLE_viii[$11 & 0]($4, 0, $6); //@line 20393
 if (!___async) {
  ___async_unwind = 0; //@line 20396
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 170; //@line 20398
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 20400
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 20402
 sp = STACKTOP; //@line 20403
 return;
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 23216
  return $$1 | 0; //@line 23217
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 23222
  $$1 = 0; //@line 23223
  return $$1 | 0; //@line 23224
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 23231
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 23235
  return $$1 | 0; //@line 23236
 }
 $14 = _malloc($1) | 0; //@line 23238
 if (!$14) {
  $$1 = 0; //@line 23241
  return $$1 | 0; //@line 23242
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 23245
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 23250
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 23253
 _free($0); //@line 23254
 $$1 = $14; //@line 23255
 return $$1 | 0; //@line 23256
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 4130
 $3 = HEAP8[$1 >> 0] | 0; //@line 4132
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 4136
 $7 = $0 + 20 | 0; //@line 4137
 $9 = $0 + 28 | 0; //@line 4139
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0; //@line 4145
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 4148
 HEAP32[$9 >> 2] = 0; //@line 4149
 HEAP32[$7 >> 2] = 0; //@line 4150
 $15 = HEAP32[$0 >> 2] | 0; //@line 4151
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 4159
  HEAP32[$0 + 8 >> 2] = $23; //@line 4161
  HEAP32[$0 + 4 >> 2] = $23; //@line 4163
  $$0 = $15 << 27 >> 31; //@line 4166
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 4169
  $$0 = -1; //@line 4170
 }
 return $$0 | 0; //@line 4172
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_40($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12668
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12672
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12673
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 12679
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 12680
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 12681
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 231; //@line 12684
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 12685
  HEAP32[$9 >> 2] = $4; //@line 12686
  sp = STACKTOP; //@line 12687
  return;
 }
 ___async_unwind = 0; //@line 12690
 HEAP32[$ReallocAsyncCtx6 >> 2] = 231; //@line 12691
 $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 12692
 HEAP32[$9 >> 2] = $4; //@line 12693
 sp = STACKTOP; //@line 12694
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_184($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 705
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 709
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 711
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 713
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 715
 $13 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 116 >> 2] | 0; //@line 718
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 719
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($4, $6, $8, $10) | 0; //@line 720
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 723
  sp = STACKTOP; //@line 724
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 728
 ___async_unwind = 0; //@line 729
 HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 730
 sp = STACKTOP; //@line 731
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 720
 $3 = HEAP32[$1 >> 2] | 0; //@line 721
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 723
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0$i = -3012; //@line 729
  return $$0$i | 0; //@line 730
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 732
 _wait_ms(1); //@line 733
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 736
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 738
  sp = STACKTOP; //@line 739
  return 0; //@line 740
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 742
 HEAP8[$1 + 8 >> 0] = 1; //@line 744
 $$0$i = 0; //@line 745
 return $$0$i | 0; //@line 746
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 5837
 STACKTOP = STACKTOP + 256 | 0; //@line 5838
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 5838
 $5 = sp; //@line 5839
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 5845
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 5849
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 5852
   $$011 = $9; //@line 5853
   do {
    _out_670($0, $5, 256); //@line 5855
    $$011 = $$011 + -256 | 0; //@line 5856
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 5865
  } else {
   $$0$lcssa = $9; //@line 5867
  }
  _out_670($0, $5, $$0$lcssa); //@line 5869
 }
 STACKTOP = sp; //@line 5871
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_207($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2222
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2224
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2226
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2228
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2230
 $11 = HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0; //@line 2233
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 2234
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($2, $4, $6, $8) | 0; //@line 2235
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 40; //@line 2238
  sp = STACKTOP; //@line 2239
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 2243
 ___async_unwind = 0; //@line 2244
 HEAP32[$ReallocAsyncCtx2 >> 2] = 40; //@line 2245
 sp = STACKTOP; //@line 2246
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 317
 $3 = HEAP32[$1 >> 2] | 0; //@line 318
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 320
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0 = -3012; //@line 326
  return $$0 | 0; //@line 327
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 329
 _wait_ms(1); //@line 330
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 34; //@line 333
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 335
  sp = STACKTOP; //@line 336
  return 0; //@line 337
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 339
 HEAP8[$1 + 8 >> 0] = 1; //@line 341
 $$0 = 0; //@line 342
 return $$0 | 0; //@line 343
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 24560
 STACKTOP = STACKTOP + 32 | 0; //@line 24561
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 24561
 $vararg_buffer = sp; //@line 24562
 $3 = sp + 20 | 0; //@line 24563
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 24567
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 24569
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 24571
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 24573
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 24575
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 24580
  $10 = -1; //@line 24581
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 24584
 }
 STACKTOP = sp; //@line 24586
 return $10 | 0; //@line 24586
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 18903
 STACKTOP = STACKTOP + 16 | 0; //@line 18904
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18904
 $vararg_buffer = sp; //@line 18905
 HEAP32[$vararg_buffer >> 2] = $0; //@line 18906
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 18908
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 18910
 _mbed_error_printf(5900, $vararg_buffer); //@line 18911
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18912
 _mbed_die(); //@line 18913
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 266; //@line 18916
  sp = STACKTOP; //@line 18917
  STACKTOP = sp; //@line 18918
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18920
  STACKTOP = sp; //@line 18921
  return;
 }
}
function _main__async_cb_189($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 942
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 944
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 948
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 950
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 952
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 955
 HEAP32[$2 + 4 >> 2] = 6434; //@line 957
 _printf(6486, $2) | 0; //@line 958
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 959
 __Z17recv_coap_messagev(); //@line 960
 if (!___async) {
  ___async_unwind = 0; //@line 963
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 965
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 967
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 969
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 971
 sp = STACKTOP; //@line 972
 return;
}
function __ZN12NetworkStack14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 9956
 STACKTOP = STACKTOP + 48 | 0; //@line 9957
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9957
 $$byval_copy = sp + 20 | 0; //@line 9958
 $2 = sp; //@line 9959
 __ZNK13SocketAddress8get_addrEv($2, $1); //@line 9960
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 9961
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 9961
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 9961
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 9961
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 9961
 $3 = _nsapi_dns_add_server($$byval_copy) | 0; //@line 9962
 STACKTOP = sp; //@line 9963
 return $3 | 0; //@line 9963
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10859
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 10862
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 10864
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 10866
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 10871
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 10876
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10878
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 10879
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 10882
  sp = STACKTOP; //@line 10883
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10886
  return;
 }
}
function _mbed_vtracef__async_cb_141($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28690
 HEAP32[126] = HEAP32[124]; //@line 28692
 $2 = HEAP32[132] | 0; //@line 28693
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 28698
 HEAP32[133] = 0; //@line 28699
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 28700
 FUNCTION_TABLE_v[$2 & 7](); //@line 28701
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 28704
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28705
  HEAP32[$5 >> 2] = $4; //@line 28706
  sp = STACKTOP; //@line 28707
  return;
 }
 ___async_unwind = 0; //@line 28710
 HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 28711
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28712
 HEAP32[$5 >> 2] = $4; //@line 28713
 sp = STACKTOP; //@line 28714
 return;
}
function _mbed_vtracef__async_cb_138($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28426
 HEAP32[126] = HEAP32[124]; //@line 28428
 $2 = HEAP32[132] | 0; //@line 28429
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 28434
 HEAP32[133] = 0; //@line 28435
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 28436
 FUNCTION_TABLE_v[$2 & 7](); //@line 28437
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 28440
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28441
  HEAP32[$5 >> 2] = $4; //@line 28442
  sp = STACKTOP; //@line 28443
  return;
 }
 ___async_unwind = 0; //@line 28446
 HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 28447
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28448
 HEAP32[$5 >> 2] = $4; //@line 28449
 sp = STACKTOP; //@line 28450
 return;
}
function _mbed_vtracef__async_cb_137($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28396
 HEAP32[126] = HEAP32[124]; //@line 28398
 $2 = HEAP32[132] | 0; //@line 28399
 if (!$2) {
  return;
 }
 $4 = HEAP32[133] | 0; //@line 28404
 HEAP32[133] = 0; //@line 28405
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 28406
 FUNCTION_TABLE_v[$2 & 7](); //@line 28407
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 28410
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28411
  HEAP32[$5 >> 2] = $4; //@line 28412
  sp = STACKTOP; //@line 28413
  return;
 }
 ___async_unwind = 0; //@line 28416
 HEAP32[$ReallocAsyncCtx8 >> 2] = 83; //@line 28417
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 28418
 HEAP32[$5 >> 2] = $4; //@line 28419
 sp = STACKTOP; //@line 28420
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7989
 STACKTOP = STACKTOP + 16 | 0; //@line 7990
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7990
 $1 = sp; //@line 7991
 HEAP32[$1 >> 2] = $varargs; //@line 7992
 $2 = HEAP32[220] | 0; //@line 7993
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7994
 $3 = _vfprintf($2, $0, $1) | 0; //@line 7995
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 322; //@line 7998
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 8000
  sp = STACKTOP; //@line 8001
  STACKTOP = sp; //@line 8002
  return 0; //@line 8002
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8004
  STACKTOP = sp; //@line 8005
  return $3 | 0; //@line 8005
 }
 return 0; //@line 8007
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7716
 STACKTOP = STACKTOP + 16 | 0; //@line 7717
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7717
 $3 = sp; //@line 7718
 HEAP32[$3 >> 2] = $varargs; //@line 7719
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7720
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 7721
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 318; //@line 7724
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 7726
  sp = STACKTOP; //@line 7727
  STACKTOP = sp; //@line 7728
  return 0; //@line 7728
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7730
  STACKTOP = sp; //@line 7731
  return $4 | 0; //@line 7731
 }
 return 0; //@line 7733
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_44($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13104
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13106
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13108
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13110
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13112
 $9 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 13114
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 13115
 FUNCTION_TABLE_viii[$9 & 0]($4, $6, $8); //@line 13116
 if (!___async) {
  ___async_unwind = 0; //@line 13119
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 230; //@line 13121
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 13123
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 13125
 sp = STACKTOP; //@line 13126
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13551
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13553
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13555
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 12 >> 2] | 0; //@line 13558
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 13559
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 13560
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 97; //@line 13563
  sp = STACKTOP; //@line 13564
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 13568
 ___async_unwind = 0; //@line 13569
 HEAP32[$ReallocAsyncCtx2 >> 2] = 97; //@line 13570
 sp = STACKTOP; //@line 13571
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13132
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13134
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13136
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 8 >> 2] | 0; //@line 13139
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 13140
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 13141
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 95; //@line 13144
  sp = STACKTOP; //@line 13145
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 13149
 ___async_unwind = 0; //@line 13150
 HEAP32[$ReallocAsyncCtx2 >> 2] = 95; //@line 13151
 sp = STACKTOP; //@line 13152
 return;
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7947
 STACKTOP = STACKTOP + 16 | 0; //@line 7948
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7948
 $2 = sp; //@line 7949
 HEAP32[$2 >> 2] = $varargs; //@line 7950
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7951
 $3 = _vsprintf($0, $1, $2) | 0; //@line 7952
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 320; //@line 7955
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7957
  sp = STACKTOP; //@line 7958
  STACKTOP = sp; //@line 7959
  return 0; //@line 7959
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7961
  STACKTOP = sp; //@line 7962
  return $3 | 0; //@line 7962
 }
 return 0; //@line 7964
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 8764
 $5 = HEAP32[$4 >> 2] | 0; //@line 8765
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 8769
   HEAP32[$1 + 24 >> 2] = $3; //@line 8771
   HEAP32[$1 + 36 >> 2] = 1; //@line 8773
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 8777
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 8780
    HEAP32[$1 + 24 >> 2] = 2; //@line 8782
    HEAP8[$1 + 54 >> 0] = 1; //@line 8784
    break;
   }
   $10 = $1 + 24 | 0; //@line 8787
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 8791
   }
  }
 } while (0);
 return;
}
function __ZneRK13SocketAddressS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $5 = 0, label = 0;
 if (__ZNK13SocketAddresscvbEv($0) | 0) {
  label = 3; //@line 12084
 } else {
  if (__ZNK13SocketAddresscvbEv($1) | 0) {
   label = 3; //@line 12088
  } else {
   $$0$i = 1; //@line 12090
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = HEAP32[$0 + 40 >> 2] | 0; //@line 12096
   if (($5 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
    $10 = $0 + 44 | 0; //@line 12102
    $11 = $1 + 44 | 0; //@line 12103
    if (($5 | 0) == 1) {
     $$0$i = (_memcmp($10, $11, 4) | 0) == 0; //@line 12107
     break;
    } else {
     $$0$i = (_memcmp($10, $11, 16) | 0) == 0; //@line 12112
     break;
    }
   } else {
    $$0$i = 0; //@line 12116
   }
  }
 } while (0);
 return $$0$i ^ 1 | 0; //@line 12121
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1395
 $4 = _equeue_tick() | 0; //@line 1397
 HEAP32[$2 + -4 >> 2] = $1; //@line 1399
 $6 = $2 + -16 | 0; //@line 1400
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 1403
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1404
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 1405
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 57; //@line 1408
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1410
  sp = STACKTOP; //@line 1411
  return 0; //@line 1412
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1414
  _equeue_sema_signal($0 + 48 | 0); //@line 1416
  return $9 | 0; //@line 1417
 }
 return 0; //@line 1419
}
function __Znwj__async_cb($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27844
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27846
 $3 = _malloc($2) | 0; //@line 27847
 if (!$3) {
  $5 = __ZSt15get_new_handlerv() | 0; //@line 27850
  if (!$5) {
   $$lcssa = 0; //@line 27853
  } else {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 27855
   FUNCTION_TABLE_v[$5 & 7](); //@line 27856
   if (!___async) {
    ___async_unwind = 0; //@line 27859
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 326; //@line 27861
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 27863
   sp = STACKTOP; //@line 27864
   return;
  }
 } else {
  $$lcssa = $3; //@line 27868
 }
 HEAP32[___async_retval >> 2] = $$lcssa; //@line 27871
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19400
 $2 = HEAP32[220] | 0; //@line 19401
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19402
 _putc($1, $2) | 0; //@line 19403
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 287; //@line 19406
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 19408
  sp = STACKTOP; //@line 19409
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19412
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19413
 _fflush($2) | 0; //@line 19414
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 288; //@line 19417
  sp = STACKTOP; //@line 19418
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19421
  return;
 }
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14298
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14302
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14304
 $7 = $4 + 12 | 0; //@line 14306
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14307
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 14308
 __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(10044, $6, $4) | 0; //@line 14309
 if (!___async) {
  ___async_unwind = 0; //@line 14312
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 205; //@line 14314
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $7; //@line 14316
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 14318
 sp = STACKTOP; //@line 14319
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 24667
 $3 = HEAP8[$1 >> 0] | 0; //@line 24668
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 24673
  $$lcssa8 = $2; //@line 24673
 } else {
  $$011 = $1; //@line 24675
  $$0710 = $0; //@line 24675
  do {
   $$0710 = $$0710 + 1 | 0; //@line 24677
   $$011 = $$011 + 1 | 0; //@line 24678
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 24679
   $9 = HEAP8[$$011 >> 0] | 0; //@line 24680
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 24685
  $$lcssa8 = $8; //@line 24685
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 24695
}
function _main__async_cb_185($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 843
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 847
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 849
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 850
 _free($4); //@line 851
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 852
 _puts(6534) | 0; //@line 853
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 306; //@line 856
  $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 857
  HEAP32[$7 >> 2] = $6; //@line 858
  sp = STACKTOP; //@line 859
  return;
 }
 ___async_unwind = 0; //@line 862
 HEAP32[$ReallocAsyncCtx3 >> 2] = 306; //@line 863
 $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 864
 HEAP32[$7 >> 2] = $6; //@line 865
 sp = STACKTOP; //@line 866
 return;
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 24619
 STACKTOP = STACKTOP + 32 | 0; //@line 24620
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 24620
 $vararg_buffer = sp; //@line 24621
 HEAP32[$0 + 36 >> 2] = 12; //@line 24624
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 24632
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 24634
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 24636
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 24641
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 24644
 STACKTOP = sp; //@line 24645
 return $14 | 0; //@line 24645
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_59($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14417
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14421
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14422
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 14426
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 14430
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 14431
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 14432
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 206; //@line 14435
  sp = STACKTOP; //@line 14436
  return;
 }
 ___async_unwind = 0; //@line 14439
 HEAP32[$ReallocAsyncCtx2 >> 2] = 206; //@line 14440
 sp = STACKTOP; //@line 14441
 return;
}
function _mbed_die__async_cb_35($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 12290
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12292
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12294
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 12295
 _wait_ms(150); //@line 12296
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 269; //@line 12299
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 12300
  HEAP32[$4 >> 2] = $2; //@line 12301
  sp = STACKTOP; //@line 12302
  return;
 }
 ___async_unwind = 0; //@line 12305
 HEAP32[$ReallocAsyncCtx14 >> 2] = 269; //@line 12306
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 12307
 HEAP32[$4 >> 2] = $2; //@line 12308
 sp = STACKTOP; //@line 12309
 return;
}
function _mbed_die__async_cb_34($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 12265
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12267
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12269
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 12270
 _wait_ms(150); //@line 12271
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 270; //@line 12274
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 12275
  HEAP32[$4 >> 2] = $2; //@line 12276
  sp = STACKTOP; //@line 12277
  return;
 }
 ___async_unwind = 0; //@line 12280
 HEAP32[$ReallocAsyncCtx13 >> 2] = 270; //@line 12281
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 12282
 HEAP32[$4 >> 2] = $2; //@line 12283
 sp = STACKTOP; //@line 12284
 return;
}
function _mbed_die__async_cb_33($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 12240
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12242
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12244
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 12245
 _wait_ms(150); //@line 12246
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 271; //@line 12249
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 12250
  HEAP32[$4 >> 2] = $2; //@line 12251
  sp = STACKTOP; //@line 12252
  return;
 }
 ___async_unwind = 0; //@line 12255
 HEAP32[$ReallocAsyncCtx12 >> 2] = 271; //@line 12256
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 12257
 HEAP32[$4 >> 2] = $2; //@line 12258
 sp = STACKTOP; //@line 12259
 return;
}
function _mbed_die__async_cb_32($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 12215
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12217
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12219
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 12220
 _wait_ms(150); //@line 12221
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 272; //@line 12224
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 12225
  HEAP32[$4 >> 2] = $2; //@line 12226
  sp = STACKTOP; //@line 12227
  return;
 }
 ___async_unwind = 0; //@line 12230
 HEAP32[$ReallocAsyncCtx11 >> 2] = 272; //@line 12231
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 12232
 HEAP32[$4 >> 2] = $2; //@line 12233
 sp = STACKTOP; //@line 12234
 return;
}
function _mbed_die__async_cb_31($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 12190
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12192
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12194
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 12195
 _wait_ms(150); //@line 12196
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 273; //@line 12199
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 12200
  HEAP32[$4 >> 2] = $2; //@line 12201
  sp = STACKTOP; //@line 12202
  return;
 }
 ___async_unwind = 0; //@line 12205
 HEAP32[$ReallocAsyncCtx10 >> 2] = 273; //@line 12206
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 12207
 HEAP32[$4 >> 2] = $2; //@line 12208
 sp = STACKTOP; //@line 12209
 return;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 9314
 STACKTOP = STACKTOP + 16 | 0; //@line 9315
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9315
 $vararg_buffer = sp; //@line 9316
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 9317
 FUNCTION_TABLE_v[$0 & 7](); //@line 9318
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 343; //@line 9321
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 9323
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 9325
  sp = STACKTOP; //@line 9326
  STACKTOP = sp; //@line 9327
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9329
  _abort_message(9668, $vararg_buffer); //@line 9330
 }
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8499
 STACKTOP = STACKTOP + 16 | 0; //@line 8500
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8500
 $3 = sp; //@line 8501
 HEAP32[$3 >> 2] = $varargs; //@line 8502
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8503
 _mbed_vtracef($0, $1, $2, $3); //@line 8504
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 72; //@line 8507
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 8509
  sp = STACKTOP; //@line 8510
  STACKTOP = sp; //@line 8511
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8513
  STACKTOP = sp; //@line 8514
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 7681
  } else {
   $$01318 = $0; //@line 7683
   $$01417 = $2; //@line 7683
   $$019 = $1; //@line 7683
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 7685
    $5 = HEAP8[$$019 >> 0] | 0; //@line 7686
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 7691
    if (!$$01417) {
     $14 = 0; //@line 7696
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 7699
     $$019 = $$019 + 1 | 0; //@line 7699
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 7705
  }
 } while (0);
 return $14 | 0; //@line 7708
}
function _mbed_die__async_cb_30($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12165
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12167
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12169
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 12170
 _wait_ms(150); //@line 12171
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 274; //@line 12174
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 12175
  HEAP32[$4 >> 2] = $2; //@line 12176
  sp = STACKTOP; //@line 12177
  return;
 }
 ___async_unwind = 0; //@line 12180
 HEAP32[$ReallocAsyncCtx9 >> 2] = 274; //@line 12181
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 12182
 HEAP32[$4 >> 2] = $2; //@line 12183
 sp = STACKTOP; //@line 12184
 return;
}
function _mbed_die__async_cb_29($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12140
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12142
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12144
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 12145
 _wait_ms(400); //@line 12146
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 275; //@line 12149
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 12150
  HEAP32[$4 >> 2] = $2; //@line 12151
  sp = STACKTOP; //@line 12152
  return;
 }
 ___async_unwind = 0; //@line 12155
 HEAP32[$ReallocAsyncCtx8 >> 2] = 275; //@line 12156
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 12157
 HEAP32[$4 >> 2] = $2; //@line 12158
 sp = STACKTOP; //@line 12159
 return;
}
function _mbed_die__async_cb_28($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12115
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12117
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12119
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 12120
 _wait_ms(400); //@line 12121
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 276; //@line 12124
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 12125
  HEAP32[$4 >> 2] = $2; //@line 12126
  sp = STACKTOP; //@line 12127
  return;
 }
 ___async_unwind = 0; //@line 12130
 HEAP32[$ReallocAsyncCtx7 >> 2] = 276; //@line 12131
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 12132
 HEAP32[$4 >> 2] = $2; //@line 12133
 sp = STACKTOP; //@line 12134
 return;
}
function _mbed_die__async_cb_27($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12090
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12092
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12094
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 12095
 _wait_ms(400); //@line 12096
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 277; //@line 12099
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 12100
  HEAP32[$4 >> 2] = $2; //@line 12101
  sp = STACKTOP; //@line 12102
  return;
 }
 ___async_unwind = 0; //@line 12105
 HEAP32[$ReallocAsyncCtx6 >> 2] = 277; //@line 12106
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 12107
 HEAP32[$4 >> 2] = $2; //@line 12108
 sp = STACKTOP; //@line 12109
 return;
}
function _mbed_die__async_cb_26($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12065
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12067
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12069
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 12070
 _wait_ms(400); //@line 12071
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 12074
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 12075
  HEAP32[$4 >> 2] = $2; //@line 12076
  sp = STACKTOP; //@line 12077
  return;
 }
 ___async_unwind = 0; //@line 12080
 HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 12081
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 12082
 HEAP32[$4 >> 2] = $2; //@line 12083
 sp = STACKTOP; //@line 12084
 return;
}
function _mbed_die__async_cb_25($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12040
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12042
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 12044
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 12045
 _wait_ms(400); //@line 12046
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 279; //@line 12049
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 12050
  HEAP32[$4 >> 2] = $2; //@line 12051
  sp = STACKTOP; //@line 12052
  return;
 }
 ___async_unwind = 0; //@line 12055
 HEAP32[$ReallocAsyncCtx4 >> 2] = 279; //@line 12056
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 12057
 HEAP32[$4 >> 2] = $2; //@line 12058
 sp = STACKTOP; //@line 12059
 return;
}
function _mbed_die__async_cb_24($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12015
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12017
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12019
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 12020
 _wait_ms(400); //@line 12021
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 280; //@line 12024
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 12025
  HEAP32[$4 >> 2] = $2; //@line 12026
  sp = STACKTOP; //@line 12027
  return;
 }
 ___async_unwind = 0; //@line 12030
 HEAP32[$ReallocAsyncCtx3 >> 2] = 280; //@line 12031
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 12032
 HEAP32[$4 >> 2] = $2; //@line 12033
 sp = STACKTOP; //@line 12034
 return;
}
function _mbed_die__async_cb_23($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11990
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11992
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 11994
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 11995
 _wait_ms(400); //@line 11996
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 281; //@line 11999
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 12000
  HEAP32[$4 >> 2] = $2; //@line 12001
  sp = STACKTOP; //@line 12002
  return;
 }
 ___async_unwind = 0; //@line 12005
 HEAP32[$ReallocAsyncCtx2 >> 2] = 281; //@line 12006
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 12007
 HEAP32[$4 >> 2] = $2; //@line 12008
 sp = STACKTOP; //@line 12009
 return;
}
function _mbed_die__async_cb_22($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11967
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 11969
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 11970
 _wait_ms(400); //@line 11971
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 11974
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 11975
  HEAP32[$4 >> 2] = $2; //@line 11976
  sp = STACKTOP; //@line 11977
  return;
 }
 ___async_unwind = 0; //@line 11980
 HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 11981
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 11982
 HEAP32[$4 >> 2] = $2; //@line 11983
 sp = STACKTOP; //@line 11984
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 25657
 STACKTOP = STACKTOP + 128 | 0; //@line 25658
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 25658
 $3 = sp; //@line 25659
 dest = $3; //@line 25660
 stop = dest + 124 | 0; //@line 25660
 do {
  HEAP32[dest >> 2] = 0; //@line 25660
  dest = dest + 4 | 0; //@line 25660
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 18; //@line 25662
 HEAP32[$3 + 44 >> 2] = $0; //@line 25664
 HEAP32[$3 + 76 >> 2] = -1; //@line 25666
 HEAP32[$3 + 84 >> 2] = $0; //@line 25668
 $8 = _vfscanf($3, $1, $2) | 0; //@line 25669
 STACKTOP = sp; //@line 25670
 return $8 | 0; //@line 25670
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19231
 STACKTOP = STACKTOP + 16 | 0; //@line 19232
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19232
 $1 = sp; //@line 19233
 HEAP32[$1 >> 2] = $varargs; //@line 19234
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19235
 _mbed_error_vfprintf($0, $1); //@line 19236
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 283; //@line 19239
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 19241
  sp = STACKTOP; //@line 19242
  STACKTOP = sp; //@line 19243
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19245
  STACKTOP = sp; //@line 19246
  return;
 }
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 788
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 791
 if (($6 | 0) < 0) {
  $$0$i = -3001; //@line 794
  return $$0$i | 0; //@line 795
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 797
 _wait_ms(1); //@line 798
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 801
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 803
  sp = STACKTOP; //@line 804
  return 0; //@line 805
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 807
 $$0$i = $6; //@line 808
 return $$0$i | 0; //@line 809
}
function _store_int_728($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 1099
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 1105
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 1110
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 1115
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 1120
     HEAP32[$7 >> 2] = $2; //@line 1122
     HEAP32[$7 + 4 >> 2] = $3; //@line 1125
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 385
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 388
 if (($6 | 0) < 0) {
  $$0 = -3001; //@line 391
  return $$0 | 0; //@line 392
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 394
 _wait_ms(1); //@line 395
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 36; //@line 398
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 400
  sp = STACKTOP; //@line 401
  return 0; //@line 402
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 404
 $$0 = $6; //@line 405
 return $$0 | 0; //@line 406
}
function __ZThn4_N17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 674
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 676
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 677
 _wait_ms(1); //@line 678
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 681
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 683
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 685
  sp = STACKTOP; //@line 686
  return 0; //@line 687
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 689
 HEAP8[$1 + 8 >> 0] = 0; //@line 691
 if (!$1) {
  return $3 | 0; //@line 694
 }
 __ZdlPv($1); //@line 696
 return $3 | 0; //@line 697
}
function __ZN17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 271
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 273
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 274
 _wait_ms(1); //@line 275
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 33; //@line 278
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 280
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 282
  sp = STACKTOP; //@line 283
  return 0; //@line 284
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 286
 HEAP8[$1 + 8 >> 0] = 0; //@line 288
 if (!$1) {
  return $3 | 0; //@line 291
 }
 __ZdlPv($1); //@line 293
 return $3 | 0; //@line 294
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 24801
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 24803
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 24809
  $11 = ___fwritex($0, $4, $3) | 0; //@line 24810
  if ($phitmp) {
   $13 = $11; //@line 24812
  } else {
   ___unlockfile($3); //@line 24814
   $13 = $11; //@line 24815
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 24819
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 24823
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 24826
 }
 return $15 | 0; //@line 24828
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 2799
 newDynamicTop = oldDynamicTop + increment | 0; //@line 2800
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 2804
  ___setErrNo(12); //@line 2805
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 2809
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 2813
   ___setErrNo(12); //@line 2814
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 2818
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_106($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23986
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23990
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23991
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23997
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 23998
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 23999
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 203; //@line 24002
  sp = STACKTOP; //@line 24003
  return;
 }
 ___async_unwind = 0; //@line 24006
 HEAP32[$ReallocAsyncCtx9 >> 2] = 203; //@line 24007
 sp = STACKTOP; //@line 24008
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 5698
 } else {
  $$056 = $2; //@line 5700
  $15 = $1; //@line 5700
  $8 = $0; //@line 5700
  while (1) {
   $14 = $$056 + -1 | 0; //@line 5708
   HEAP8[$14 >> 0] = HEAPU8[7331 + ($8 & 15) >> 0] | 0 | $3; //@line 5709
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 5710
   $15 = tempRet0; //@line 5711
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 5716
    break;
   } else {
    $$056 = $14; //@line 5719
   }
  }
 }
 return $$05$lcssa | 0; //@line 5723
}
function __ZN9UDPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12214
 $1 = $0 + 52 | 0; //@line 12215
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 12218
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 12221
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 12231
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12232
 FUNCTION_TABLE_vi[$$pre & 511]($0 + 32 | 0); //@line 12233
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 149; //@line 12236
  sp = STACKTOP; //@line 12237
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12240
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_179($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 525
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 529
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 530
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 536
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 537
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 538
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 541
  sp = STACKTOP; //@line 542
  return;
 }
 ___async_unwind = 0; //@line 545
 HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 546
 sp = STACKTOP; //@line 547
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 25018
 $3 = HEAP8[$1 >> 0] | 0; //@line 25020
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 25024
 $7 = HEAP32[$0 >> 2] | 0; //@line 25025
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 25030
  HEAP32[$0 + 4 >> 2] = 0; //@line 25032
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 25034
  HEAP32[$0 + 28 >> 2] = $14; //@line 25036
  HEAP32[$0 + 20 >> 2] = $14; //@line 25038
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 25044
  $$0 = 0; //@line 25045
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 25048
  $$0 = -1; //@line 25049
 }
 return $$0 | 0; //@line 25051
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_64($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14972
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14978
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 14979
 $7 = HEAP32[$6 >> 2] | 0; //@line 14980
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14981
 __ZL26nsapi_dns_query_async_sendPv($7); //@line 14982
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 14985
  sp = STACKTOP; //@line 14986
  return;
 }
 ___async_unwind = 0; //@line 14989
 HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 14990
 sp = STACKTOP; //@line 14991
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 9279
 $0 = ___cxa_get_globals_fast() | 0; //@line 9280
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 9283
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 9287
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 9299
    _emscripten_alloc_async_context(4, sp) | 0; //@line 9300
    __ZSt11__terminatePFvvE($16); //@line 9301
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 9306
 _emscripten_alloc_async_context(4, sp) | 0; //@line 9307
 __ZSt11__terminatePFvvE($17); //@line 9308
}
function __ZN9UDPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26359
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26361
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 26363
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 26370
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26371
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 26372
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 147; //@line 26375
  sp = STACKTOP; //@line 26376
  return;
 }
 ___async_unwind = 0; //@line 26379
 HEAP32[$ReallocAsyncCtx2 >> 2] = 147; //@line 26380
 sp = STACKTOP; //@line 26381
 return;
}
function __ZN6SocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2252
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2254
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 2256
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 2263
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 2264
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 2265
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 129; //@line 2268
  sp = STACKTOP; //@line 2269
  return;
 }
 ___async_unwind = 0; //@line 2272
 HEAP32[$ReallocAsyncCtx2 >> 2] = 129; //@line 2273
 sp = STACKTOP; //@line 2274
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_96($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20421
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20425
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 20427
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 20428
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 20429
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 87; //@line 20432
  sp = STACKTOP; //@line 20433
  return;
 }
 ___async_unwind = 0; //@line 20436
 HEAP32[$ReallocAsyncCtx >> 2] = 87; //@line 20437
 sp = STACKTOP; //@line 20438
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 766
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 767
 _wait_ms(1); //@line 768
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 48; //@line 771
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 773
  sp = STACKTOP; //@line 774
  return 0; //@line 775
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 777
  return $6 | 0; //@line 778
 }
 return 0; //@line 780
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 4180
 $4 = HEAP32[$3 >> 2] | 0; //@line 4181
 $5 = $2 + 256 | 0; //@line 4182
 $6 = _memchr($4, 0, $5) | 0; //@line 4183
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 4188
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 4190
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 4191
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 4194
 $14 = $4 + $$027 | 0; //@line 4195
 HEAP32[$0 + 8 >> 2] = $14; //@line 4197
 HEAP32[$3 >> 2] = $14; //@line 4198
 return $$027$ | 0; //@line 4199
}
function __ZN17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 360
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 363
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 364
 _wait_ms(1); //@line 365
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 35; //@line 368
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 370
  sp = STACKTOP; //@line 371
  return 0; //@line 372
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 374
  return $6 | 0; //@line 375
 }
 return 0; //@line 377
}
function _arg_n_727($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 1054
 STACKTOP = STACKTOP + 16 | 0; //@line 1055
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1055
 $2 = sp; //@line 1056
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 1058
 $$0 = $1; //@line 1059
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 1073
  $10 = HEAP32[$9 >> 2] | 0; //@line 1074
  HEAP32[$2 >> 2] = $9 + 4; //@line 1076
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 1079
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 1084
 return $10 | 0; //@line 1084
}
function __ZL28nsapi_dns_query_async_createPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14754
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14756
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14758
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 14759
 __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($2, $4, 0); //@line 14760
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 214; //@line 14763
  sp = STACKTOP; //@line 14764
  return;
 }
 ___async_unwind = 0; //@line 14767
 HEAP32[$ReallocAsyncCtx8 >> 2] = 214; //@line 14768
 sp = STACKTOP; //@line 14769
 return;
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 7166
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 7169
 $$sink17$sink = $0; //@line 7169
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 7171
  $12 = HEAP8[$11 >> 0] | 0; //@line 7172
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 7180
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 7185
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 7190
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 5735
 } else {
  $$06 = $2; //@line 5737
  $11 = $1; //@line 5737
  $7 = $0; //@line 5737
  while (1) {
   $10 = $$06 + -1 | 0; //@line 5742
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 5743
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 5744
   $11 = tempRet0; //@line 5745
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 5750
    break;
   } else {
    $$06 = $10; //@line 5753
   }
  }
 }
 return $$0$lcssa | 0; //@line 5757
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_121($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26613
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 26615
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 26616
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 26617
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 138; //@line 26620
  sp = STACKTOP; //@line 26621
  return;
 }
 ___async_unwind = 0; //@line 26624
 HEAP32[$ReallocAsyncCtx >> 2] = 138; //@line 26625
 sp = STACKTOP; //@line 26626
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10190
 do {
  if (!$0) {
   $3 = 0; //@line 10194
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10196
   $2 = ___dynamic_cast($0, 128, 184, 0) | 0; //@line 10197
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 357; //@line 10200
    sp = STACKTOP; //@line 10201
    return 0; //@line 10202
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10204
    $3 = ($2 | 0) != 0 & 1; //@line 10207
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 10212
}
function _invoke_ticker__async_cb_148($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29139
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 29145
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 29146
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 29147
 FUNCTION_TABLE_vi[$5 & 511]($6); //@line 29148
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 290; //@line 29151
  sp = STACKTOP; //@line 29152
  return;
 }
 ___async_unwind = 0; //@line 29155
 HEAP32[$ReallocAsyncCtx >> 2] = 290; //@line 29156
 sp = STACKTOP; //@line 29157
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 5379
 } else {
  $$04 = 0; //@line 5381
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 5384
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 5388
   $12 = $7 + 1 | 0; //@line 5389
   HEAP32[$0 >> 2] = $12; //@line 5390
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 5396
    break;
   } else {
    $$04 = $11; //@line 5399
   }
  }
 }
 return $$0$lcssa | 0; //@line 5403
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 2304
 $y_sroa_0_0_extract_trunc = $b$0; //@line 2305
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 2306
 $1$1 = tempRet0; //@line 2307
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 2309
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18024
 $1 = HEAP32[$0 >> 2] | 0; //@line 18025
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 18027
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18028
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 18029
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 248; //@line 18032
  sp = STACKTOP; //@line 18033
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18036
  return;
 }
}
function __ZN6SocketC2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 556; //@line 10525
 HEAP32[$0 + 4 >> 2] = 0; //@line 10527
 HEAP32[$0 + 8 >> 2] = 0; //@line 10529
 HEAP32[$0 + 12 >> 2] = -1; //@line 10531
 $4 = $0 + 16 | 0; //@line 10532
 HEAP32[$4 >> 2] = 0; //@line 10533
 HEAP32[$4 + 4 >> 2] = 0; //@line 10533
 HEAP32[$4 + 8 >> 2] = 0; //@line 10533
 HEAP32[$4 + 12 >> 2] = 0; //@line 10533
 HEAP32[$4 + 16 >> 2] = 0; //@line 10533
 HEAP32[$4 + 20 >> 2] = 0; //@line 10533
 HEAP32[$4 + 24 >> 2] = 0; //@line 10533
 HEAP32[$4 + 28 >> 2] = 0; //@line 10533
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16661
 $1 = HEAP32[$0 >> 2] | 0; //@line 16662
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 16664
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16665
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 16666
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 222; //@line 16669
  sp = STACKTOP; //@line 16670
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16673
  return;
 }
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 593
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 595
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 596
 _wait_ms(1); //@line 597
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 43; //@line 600
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 602
  sp = STACKTOP; //@line 603
  return 0; //@line 604
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 606
  return $2 | 0; //@line 607
 }
 return 0; //@line 609
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9204
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 9206
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 9212
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9213
 FUNCTION_TABLE_vi[$5 & 511]($0); //@line 9214
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 9217
  sp = STACKTOP; //@line 9218
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9221
 return;
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 2722
  src = src + num | 0; //@line 2723
  dest = dest + num | 0; //@line 2724
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 2726
   src = src - 1 | 0; //@line 2727
   num = num - 1 | 0; //@line 2728
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2729
  }
  dest = ret; //@line 2731
 } else {
  _memcpy(dest, src, num) | 0; //@line 2733
 }
 return dest | 0; //@line 2735
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 2289
 $2 = $b & 65535; //@line 2290
 $3 = Math_imul($2, $1) | 0; //@line 2291
 $6 = $a >>> 16; //@line 2292
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 2293
 $11 = $b >>> 16; //@line 2294
 $12 = Math_imul($11, $1) | 0; //@line 2295
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 2296
}
function __ZN17EthernetInterface11get_netmaskEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 103
 $2 = _emscripten_asm_const_ii(2, 0) | 0; //@line 105
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 106
 _wait_ms(1); //@line 107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 28; //@line 110
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 112
  sp = STACKTOP; //@line 113
  return 0; //@line 114
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 116
  return $2 | 0; //@line 117
 }
 return 0; //@line 119
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 23178
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 23180
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 23187
  } else {
   $$0 = $3; //@line 23189
  }
 }
 $8 = _malloc($$0) | 0; //@line 23192
 if (!$8) {
  return $8 | 0; //@line 23195
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 23202
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 23204
 return $8 | 0; //@line 23205
}
function _mbed_die__async_cb_36($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 12315
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12317
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 12319
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 12320
 _wait_ms(150); //@line 12321
 if (!___async) {
  ___async_unwind = 0; //@line 12324
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 268; //@line 12326
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 12328
 sp = STACKTOP; //@line 12329
 return;
}
function __ZN17EthernetInterface15get_mac_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 61
 $2 = _emscripten_asm_const_ii(0, 0) | 0; //@line 63
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 64
 _wait_ms(1); //@line 65
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 26; //@line 68
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 70
  sp = STACKTOP; //@line 71
  return 0; //@line 72
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 74
  return $2 | 0; //@line 75
 }
 return 0; //@line 77
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 11945
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11947
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 11949
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 11950
 _wait_ms(150); //@line 11951
 if (!___async) {
  ___async_unwind = 0; //@line 11954
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 267; //@line 11956
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 11958
 sp = STACKTOP; //@line 11959
 return;
}
function __ZN17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 82
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 84
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _wait_ms(1); //@line 86
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 27; //@line 89
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 91
  sp = STACKTOP; //@line 92
  return 0; //@line 93
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 95
  return $2 | 0; //@line 96
 }
 return 0; //@line 98
}
function ___fflush_unlocked__async_cb_60($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14525
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14527
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14529
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14531
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 14533
 HEAP32[$4 >> 2] = 0; //@line 14534
 HEAP32[$6 >> 2] = 0; //@line 14535
 HEAP32[$8 >> 2] = 0; //@line 14536
 HEAP32[$10 >> 2] = 0; //@line 14537
 HEAP32[___async_retval >> 2] = 0; //@line 14539
 return;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9938
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9939
 $2 = __Z28nsapi_dns_query_async_canceli($1) | 0; //@line 9940
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 110; //@line 9943
  sp = STACKTOP; //@line 9944
  return 0; //@line 9945
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9947
  return $2 | 0; //@line 9948
 }
 return 0; //@line 9950
}
function _mbed_vtracef__async_cb_136($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28378
 $1 = HEAP32[130] | 0; //@line 28379
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28380
 FUNCTION_TABLE_vi[$1 & 511](5676); //@line 28381
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 76; //@line 28384
  sp = STACKTOP; //@line 28385
  return;
 }
 ___async_unwind = 0; //@line 28388
 HEAP32[$ReallocAsyncCtx3 >> 2] = 76; //@line 28389
 sp = STACKTOP; //@line 28390
 return;
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 4103
 STACKTOP = STACKTOP + 16 | 0; //@line 4104
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4104
 $1 = sp; //@line 4105
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 31]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 4116
  } else {
   $$0 = -1; //@line 4118
  }
 } else {
  $$0 = -1; //@line 4121
 }
 STACKTOP = sp; //@line 4123
 return $$0 | 0; //@line 4123
}
function __Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19552
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19553
 _puts(6112) | 0; //@line 19554
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 293; //@line 19557
  sp = STACKTOP; //@line 19558
  return 0; //@line 19559
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19561
  return 0; //@line 19562
 }
 return 0; //@line 19564
}
function _serial_putc__async_cb_150($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29290
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29292
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 29293
 _fflush($2) | 0; //@line 29294
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 288; //@line 29297
  sp = STACKTOP; //@line 29298
  return;
 }
 ___async_unwind = 0; //@line 29301
 HEAP32[$ReallocAsyncCtx >> 2] = 288; //@line 29302
 sp = STACKTOP; //@line 29303
 return;
}
function __Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19571
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19572
 _puts(6123) | 0; //@line 19573
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 294; //@line 19576
  sp = STACKTOP; //@line 19577
  return 0; //@line 19578
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19580
  return 0; //@line 19581
 }
 return 0; //@line 19583
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 133
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 134
 _puts(2235) | 0; //@line 135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 29; //@line 138
  sp = STACKTOP; //@line 139
  return 0; //@line 140
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 142
  return 0; //@line 143
 }
 return 0; //@line 145
}
function __ZN13SocketAddressC2E10nsapi_addrt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP8[$0 >> 0] = 0; //@line 11064
 $3 = $0 + 40 | 0; //@line 11065
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2]; //@line 11066
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11066
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11066
 HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 11066
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 11066
 HEAP16[$0 + 60 >> 1] = $2; //@line 11068
 return;
}
function __Z28nsapi_dns_query_async_canceli($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18884
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18885
 $1 = __ZL28nsapi_dns_query_async_deletei($0) | 0; //@line 18886
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 265; //@line 18889
  sp = STACKTOP; //@line 18890
  return 0; //@line 18891
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18893
  return $1 | 0; //@line 18894
 }
 return 0; //@line 18896
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7971
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7972
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 7973
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 321; //@line 7976
  sp = STACKTOP; //@line 7977
  return 0; //@line 7978
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7980
  return $3 | 0; //@line 7981
 }
 return 0; //@line 7983
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 4084
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 4084
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 4085
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 4086
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 4090
 HEAP32[tempDoublePtr >> 2] = $2; //@line 4091
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 4091
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 24430
 STACKTOP = STACKTOP + 16 | 0; //@line 24431
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 24431
 $vararg_buffer = sp; //@line 24432
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 24436
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 24438
 STACKTOP = sp; //@line 24439
 return $5 | 0; //@line 24439
}
function _emscripten_async_resume() {
 ___async = 0; //@line 2622
 ___async_unwind = 1; //@line 2623
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 2629
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 2633
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 2637
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 2639
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18852
 $1 = HEAP32[$0 >> 2] | 0; //@line 18853
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18854
 FUNCTION_TABLE_v[$1 & 7](); //@line 18855
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 264; //@line 18858
  sp = STACKTOP; //@line 18859
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18862
  return;
 }
}
function __ZnwjRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8308
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8309
 $2 = __Znwj($0) | 0; //@line 8310
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 327; //@line 8313
  sp = STACKTOP; //@line 8314
  return 0; //@line 8315
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8317
  return $2 | 0; //@line 8318
 }
 return 0; //@line 8320
}
function __ZnajRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8343
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8344
 $2 = __Znaj($0) | 0; //@line 8345
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 329; //@line 8348
  sp = STACKTOP; //@line 8349
  return 0; //@line 8350
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8352
  return $2 | 0; //@line 8353
 }
 return 0; //@line 8355
}
function __ZN9UDPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12189
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12190
 __ZN9UDPSocketD2Ev($0); //@line 12191
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 148; //@line 12194
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12196
  sp = STACKTOP; //@line 12197
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12200
  __ZdlPv($0); //@line 12201
  return;
 }
}
function _main__async_cb_186($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 872
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 874
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 875
 _wait(4294967296.0); //@line 876
 if (!___async) {
  ___async_unwind = 0; //@line 879
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 307; //@line 881
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 883
 sp = STACKTOP; //@line 884
 return;
}
function __ZN17EthernetInterface8set_dhcpEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 151
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 152
 _puts(2190) | 0; //@line 153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 30; //@line 156
  sp = STACKTOP; //@line 157
  return 0; //@line 158
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 160
  return 0; //@line 161
 }
 return 0; //@line 163
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 2564
 STACKTOP = STACKTOP + 16 | 0; //@line 2565
 $rem = __stackBase__ | 0; //@line 2566
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 2567
 STACKTOP = __stackBase__; //@line 2568
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 2569
}
function __ZN13SocketAddress8set_addrE10nsapi_addr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP8[$0 >> 0] = 0; //@line 11076
 $2 = $0 + 40 | 0; //@line 11077
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2]; //@line 11078
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11078
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11078
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 11078
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 11078
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 2334
 if ((ret | 0) < 8) return ret | 0; //@line 2335
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 2336
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 2337
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 2338
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 2339
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 2340
}
function __ZThn4_N17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20464
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20466
 HEAP8[$2 + 8 >> 0] = 0; //@line 20468
 if (!$2) {
  $7 = ___async_retval; //@line 20471
  HEAP32[$7 >> 2] = $4; //@line 20472
  return;
 }
 __ZdlPv($2); //@line 20475
 $7 = ___async_retval; //@line 20476
 HEAP32[$7 >> 2] = $4; //@line 20477
 return;
}
function __Znaj($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8325
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8326
 $1 = __Znwj($0) | 0; //@line 8327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 328; //@line 8330
  sp = STACKTOP; //@line 8331
  return 0; //@line 8332
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8334
  return $1 | 0; //@line 8335
 }
 return 0; //@line 8337
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 8500
 STACKTOP = STACKTOP + 16 | 0; //@line 8501
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8501
 if (!(_pthread_once(10744, 4) | 0)) {
  $3 = _pthread_getspecific(HEAP32[2687] | 0) | 0; //@line 8507
  STACKTOP = sp; //@line 8508
  return $3 | 0; //@line 8508
 } else {
  _abort_message(9516, sp); //@line 8510
 }
 return 0; //@line 8513
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 8668
 }
 return;
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 25645
 STACKTOP = STACKTOP + 16 | 0; //@line 25646
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25646
 $2 = sp; //@line 25647
 HEAP32[$2 >> 2] = $varargs; //@line 25648
 $3 = _vsscanf($0, $1, $2) | 0; //@line 25649
 STACKTOP = sp; //@line 25650
 return $3 | 0; //@line 25650
}
function __ZL25default_terminate_handlerv__async_cb_5($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10572
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10574
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10576
 HEAP32[$2 >> 2] = 9377; //@line 10577
 HEAP32[$2 + 4 >> 2] = $4; //@line 10579
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 10581
 _abort_message(9241, $2); //@line 10582
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 1101
 HEAP32[$3 >> 2] = 0; //@line 1102
 HEAP32[$3 + 4 >> 2] = 0; //@line 1102
 HEAP32[$3 + 8 >> 2] = 0; //@line 1102
 HEAP32[$3 + 12 >> 2] = 0; //@line 1102
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 1105
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 1108
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29073
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29075
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 29076
 _fputc(10, $2) | 0; //@line 29077
 if (!___async) {
  ___async_unwind = 0; //@line 29080
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 333; //@line 29082
 sp = STACKTOP; //@line 29083
 return;
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 7821
 $6 = HEAP32[$5 >> 2] | 0; //@line 7822
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 7823
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 7825
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 7827
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 7830
 return $2 | 0; //@line 7831
}
function _wait($0) {
 $0 = +$0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19493
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19497
 _emscripten_sleep((~~($0 * 1.0e6) | 0) / 1e3 | 0 | 0); //@line 19498
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 291; //@line 19501
  sp = STACKTOP; //@line 19502
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19505
  return;
 }
}
function __ZNK13SocketAddress8get_addrEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1 + 40 | 0; //@line 11725
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 11726
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 11726
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 11726
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 11726
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 11726
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29211
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 29222
  $$0 = 1; //@line 29223
 } else {
  $$0 = 0; //@line 29225
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 29229
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12358
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 12361
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 12366
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12369
 return;
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 19379
 HEAP32[$0 >> 2] = $1; //@line 19380
 HEAP32[2523] = 1; //@line 19381
 $4 = $0; //@line 19382
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 19387
 $10 = 10096; //@line 19388
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 19390
 HEAP32[$10 + 4 >> 2] = $9; //@line 19393
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 9262
 STACKTOP = STACKTOP + 16 | 0; //@line 9263
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9263
 _free($0); //@line 9265
 if (!(_pthread_setspecific(HEAP32[2687] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 9270
  return;
 } else {
  _abort_message(9615, sp); //@line 9272
 }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 8744
 }
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19512
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19513
 _emscripten_sleep($0 | 0); //@line 19514
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 19517
  sp = STACKTOP; //@line 19518
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19521
  return;
 }
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8480
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8481
 _puts($0) | 0; //@line 8482
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 71; //@line 8485
  sp = STACKTOP; //@line 8486
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8489
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 1634
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 1638
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 1642
   $$0 = 0; //@line 1643
  } else {
   $$0 = $4; //@line 1645
  }
 } else {
  $$0 = $1; //@line 1648
 }
 return $$0 | 0; //@line 1650
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 1597
 STACKTOP = STACKTOP + 16 | 0; //@line 1598
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1598
 $0 = sp; //@line 1599
 _gettimeofday($0 | 0, 0) | 0; //@line 1600
 STACKTOP = sp; //@line 1607
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 1607
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 939
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 941
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 943
 $7 = $4 - $6 | 0; //@line 944
 HEAP32[$0 + 108 >> 2] = $7; //@line 946
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 955
 return;
}
function _nsapi_dns_add_server($0) {
 $0 = $0 | 0;
 _memmove(628, 608, 80) | 0; //@line 12501
 HEAP32[152] = HEAP32[$0 >> 2]; //@line 12502
 HEAP32[153] = HEAP32[$0 + 4 >> 2]; //@line 12502
 HEAP32[154] = HEAP32[$0 + 8 >> 2]; //@line 12502
 HEAP32[155] = HEAP32[$0 + 12 >> 2]; //@line 12502
 HEAP32[156] = HEAP32[$0 + 16 >> 2]; //@line 12502
 return 0; //@line 12503
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 18045
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 18050
 $8 = $0; //@line 18051
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 18053
 HEAP32[$8 + 4 >> 2] = $7; //@line 18056
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 8808
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 8812
  }
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 9247
 STACKTOP = STACKTOP + 16 | 0; //@line 9248
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9248
 if (!(_pthread_key_create(10748, 342) | 0)) {
  STACKTOP = sp; //@line 9253
  return;
 } else {
  _abort_message(9565, sp); //@line 9255
 }
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 2598
 HEAP32[new_frame + 4 >> 2] = sp; //@line 2600
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 2602
 ___async_cur_frame = new_frame; //@line 2603
 return ___async_cur_frame + 8 | 0; //@line 2604
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 16682
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 16687
 $8 = $0; //@line 16688
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 16690
 HEAP32[$8 + 4 >> 2] = $7; //@line 16693
 return;
}
function __ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + -4 | 0; //@line 980
 $5 = HEAP32[$1 >> 2] | 0; //@line 981
 HEAP32[$4 + 60 + ($5 << 3) >> 2] = $2; //@line 983
 HEAP32[$4 + 60 + ($5 << 3) + 4 >> 2] = $3; //@line 985
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 10506
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10506
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 10506
 return;
}
function __ZN17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 789
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 791
 HEAP8[$2 + 8 >> 0] = 0; //@line 793
 if ($2 | 0) {
  __ZdlPv($2); //@line 796
 }
 HEAP32[___async_retval >> 2] = $4; //@line 799
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 29429
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29433
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 29436
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 2587
  return low << bits; //@line 2588
 }
 tempRet0 = low << bits - 32; //@line 2590
 return 0; //@line 2591
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 2576
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 2577
 }
 tempRet0 = 0; //@line 2579
 return high >>> bits - 32 | 0; //@line 2580
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 10895
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10895
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 10895
 return;
}
function __ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 569
 HEAP32[$0 + 60 + ($4 << 3) >> 2] = $2; //@line 571
 HEAP32[$0 + 60 + ($4 << 3) + 4 >> 2] = $3; //@line 573
 return;
}
function _fflush__async_cb_72($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15681
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 15683
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15686
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_90($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 18973
 HEAP32[___async_retval >> 2] = -3007; //@line 18975
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_85($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 18592
 HEAP32[___async_retval >> 2] = -3007; //@line 18594
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12379
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 12381
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12383
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_134($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27663
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 27664
 HEAP32[$4 >> 2] = 0; //@line 27665
 HEAP32[___async_retval >> 2] = 0; //@line 27667
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 26947
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 26950
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 26953
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_15($0) {
 $0 = $0 | 0;
 var $$010 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$010 = -3007; //@line 11348
 } else {
  $$010 = 0; //@line 11350
 }
 HEAP32[___async_retval >> 2] = $$010; //@line 11353
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_12($0) {
 $0 = $0 | 0;
 var $$010 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$010 = -3007; //@line 11258
 } else {
  $$010 = 0; //@line 11260
 }
 HEAP32[___async_retval >> 2] = $$010; //@line 11263
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 29113
 } else {
  $$0 = -1; //@line 29115
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 29118
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 2867
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 25148
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 25154
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 25158
}
function __ZN12NetworkStack20get_call_in_callbackEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 100; //@line 10021
 HEAP32[$0 + 4 >> 2] = 1; //@line 10023
 HEAP32[$0 + 8 >> 2] = $1; //@line 10025
 HEAP32[$0 + 12 >> 2] = 536; //@line 10026
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 2916
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29544
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 29545
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29547
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26642
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 26643
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26645
 return;
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 2610
 stackRestore(___async_cur_frame | 0); //@line 2611
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 2612
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 19355
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 19361
 _emscripten_asm_const_iii(11, $0 | 0, $1 | 0) | 0; //@line 19362
 return;
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 24596
  $$0 = -1; //@line 24597
 } else {
  $$0 = $0; //@line 24599
 }
 return $$0 | 0; //@line 24601
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 6820
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 6820
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 6822
 return $1 | 0; //@line 6823
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 4074
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 4074
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 4076
 return $1 | 0; //@line 4077
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1656
 HEAP8[$0 + 76 >> 0] = 1; //@line 1658
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 1660
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1661
 return;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 2860
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 2327
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 2328
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 2329
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_125($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26863
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11936
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 11937
 HEAP32[___async_retval >> 2] = $4; //@line 11939
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1002
 ___cxa_begin_catch($0 | 0) | 0; //@line 1003
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1004
 __ZSt9terminatev(); //@line 1005
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 2909
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1019
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 10124
 } else {
  HEAP8[$0 >> 0] = 1; //@line 10126
  $$0 = 1; //@line 10127
 }
 return $$0 | 0; //@line 10129
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_4($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10499
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15903
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 29167
 HEAP32[___async_retval >> 2] = 0; //@line 29169
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 29179
 HEAP32[___async_retval >> 2] = 0; //@line 29181
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_8($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10770
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 2853
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_199($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 1668
 return;
}
function __ZN4mbed16mbed_event_queueEv() {
 if (!(HEAP8[9816] | 0)) {
  if (___cxa_guard_acquire(9816) | 0) {
   __ZN6events10EventQueueC2EjPh(9840, 256, 10756); //@line 1121
  }
 }
 return 9840; //@line 1124
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 2319
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 2321
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 2902
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_98($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20570
 return;
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 25293
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 25298
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_175($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 30803
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_119($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26577
 if ($2 | 0) {
  __ZdaPv($2); //@line 26580
 }
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_178($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 465
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 5880
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 5883
 }
 return $$0 | 0; //@line 5885
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_182($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 691
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 1097
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_205($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2208
 return;
}
function __ZN17EthernetInterfaceC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 224; //@line 993
 HEAP32[$0 + 4 >> 2] = 368; //@line 994
 _memset($0 + 60 | 0, 0, 800) | 0; //@line 996
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_153($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 29659
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 2846
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 24788
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 24792
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 2556
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 13374
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_48($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13581
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_160($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 31010
 return;
}
function b51(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 3052
 return 0; //@line 3052
}
function b50(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 3049
 return 0; //@line 3049
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 1283
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 1288
 }
 return $4 | 0; //@line 1290
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_45($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13162
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 2617
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 2618
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_57($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14375
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_76($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15891
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 0](a1 | 0, a2 | 0, a3 | 0); //@line 2895
}
function __ZN12NetworkStack10getsockoptEPviiS0_Pj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN12NetworkStack10setsockoptEPviiPKvj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26671
 return;
}
function __ZN9UDPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 12247
 HEAP32[$0 >> 2] = 592; //@line 12248
 HEAP32[$0 + 52 >> 2] = 0; //@line 12250
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_183($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 699
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 25284
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 25286
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_206($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 2216
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 9347
 __ZdlPv($0); //@line 9348
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 9030
 __ZdlPv($0); //@line 9031
 return;
}
function __ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27881
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 29468
 return;
}
function b48(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 3046
 return 0; //@line 3046
}
function b47(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 3043
 return 0; //@line 3043
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_114($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26265
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 8558
 __ZdlPv($0); //@line 8559
 return;
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12339
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_75($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15821
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 5365
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 624
 return;
}
function __ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_55($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 14327
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 2839
}
function b224(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 3553
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 18872
 return;
}
function __ZN17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 29067
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 29478
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14212
 return;
}
function __ZN17EthernetInterface15get_mac_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 15831
 return;
}
function __ZN17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27838
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_97($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20531
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 8755
}
function _sn_coap_builder_calc_needed_packet_data_size($0) {
 $0 = $0 | 0;
 return _sn_coap_builder_calc_needed_packet_data_size_2($0, 0) | 0; //@line 5304
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[2688] | 0; //@line 10146
 HEAP32[2688] = $0 + 0; //@line 10148
 return $0 | 0; //@line 10150
}
function __ZN12NetworkStack11setstackoptEiiPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN12NetworkStack11getstackoptEiiPvPj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN17EthernetInterface11get_netmaskEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26597
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[406] | 0; //@line 9337
 HEAP32[406] = $0 + 0; //@line 9339
 return $0 | 0; //@line 9341
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0); //@line 2888
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6Socket11set_timeoutEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 12 >> 2] = ($1 | 0) > -1 ? $1 : -1; //@line 10987
 return;
}
function b45(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(15); //@line 3040
 return 0; //@line 3040
}
function b44(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(14); //@line 3037
 return 0; //@line 3037
}
function b43(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(13); //@line 3034
 return 0; //@line 3034
}
function __ZnwjRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29446
 return;
}
function __ZnajRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31020
 return;
}
function __Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 11926
 return;
}
function b42(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 3031
 return 0; //@line 3031
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 29098
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 2644
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_99($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b222(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 3550
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6Socket5closeEv__async_cb_54($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14292
 return;
}
function __ZN17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function _fputc__async_cb_152($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29557
 return;
}
function _fflush__async_cb_73($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15696
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14742
 return;
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 5828
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14453
 return;
}
function _putc__async_cb_122($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26655
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_131($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 27375
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10517
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack14get_dns_serverEiP13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_202($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 1919
 return;
}
function __Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 13263
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29458
 return;
}
function __ZN17EthernetInterface8set_dhcpEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 29031
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0; //@line 2832
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __Znaj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 634
 return;
}
function __ZN13SocketAddress8set_portEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP16[$0 + 60 >> 1] = $1; //@line 11087
 return;
}
function _ns_list_init_($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 9196
 HEAP32[$0 + 4 >> 2] = $0; //@line 9198
 return;
}
function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 25679
}
function __ZThn4_N17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 3028
 return 0; //@line 3028
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 3025
 return 0; //@line 3025
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 3022
 return 0; //@line 3022
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 3019
 return 0; //@line 3019
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 3016
 return 0; //@line 3016
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 3013
 return 0; //@line 3013
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 3010
 return 0; //@line 3010
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 3007
 return 0; //@line 3007
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 3004
 return 0; //@line 3004
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 3001
 return 0; //@line 3001
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 2998
 return 0; //@line 2998
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 2995
 return 0; //@line 2995
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 2992
 return 0; //@line 2992
}
function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 2989
 return 0; //@line 2989
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(9668, HEAP32[$0 + 4 >> 2] | 0); //@line 29127
}
function __ZN17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 511](a1 | 0); //@line 2881
}
function b220(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 3547
}
function b219(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 3544
}
function b218(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 3541
}
function _strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 ___stpcpy($0, $1) | 0; //@line 7838
 return $0 | 0; //@line 7839
}
function _sn_coap_builder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _sn_coap_builder_2($0, $1, 0) | 0; //@line 1845
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 1583
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 1592
 return;
}
function __ZNK13SocketAddress14get_ip_versionEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0; //@line 11916
}
function __ZN9UDPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 29142
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 24706
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_41($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK13SocketAddress8get_portEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 60 >> 1] | 0; //@line 11735
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1627
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 7073
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15); //@line 2986
 return 0; //@line 2986
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14); //@line 2983
 return 0; //@line 2983
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(13); //@line 2980
 return 0; //@line 2980
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(12); //@line 2977
 return 0; //@line 2977
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(11); //@line 2974
 return 0; //@line 2974
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(10); //@line 2971
 return 0; //@line 2971
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 1614
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(9); //@line 2968
 return 0; //@line 2968
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 2965
 return 0; //@line 2965
}
function _main__async_cb_192($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 1087
 return;
}
function __ZThn4_N17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0 + -4 | 0); //@line 587
 return;
}
function _main__async_cb_188($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 1; //@line 936
 return;
}
function __ZdlPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdlPv($0); //@line 8369
 return;
}
function __ZdaPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdaPv($0); //@line 8384
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 0]() | 0; //@line 2825
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1620
 return;
}
function b216(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 3538
}
function __ZN16NetworkInterface12set_blockingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_180($0) {
 $0 = $0 | 0;
 return;
}
function __Z18nsapi_create_stackP12NetworkStack($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 10519
}
function __ZN17EthernetInterface9get_stackEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 212
}
function __ZN12NetworkStack19onboardNetworkStackEv($0) {
 $0 = $0 | 0;
 return 0; //@line 615
}
function __Z11coap_malloct($0) {
 $0 = $0 | 0;
 return _malloc($0 & 65535) | 0; //@line 19537
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 2874
}
function __ZNK16NetworkInterface21get_connection_statusEv($0) {
 $0 = $0 | 0;
 return -3002;
}
function __ZN16NetworkInterface13wifiInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 187
}
function __ZN16NetworkInterface13meshInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 193
}
function __ZN16NetworkInterface13emacInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 205
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 24654
}
function __ZN17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 55
 return;
}
function __ZN17EthernetInterface11get_gatewayEv($0) {
 $0 = $0 | 0;
 return 0; //@line 125
}
function __ZN16NetworkInterface12ethInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 181
}
function __ZN16NetworkInterface12cellularBaseEv($0) {
 $0 = $0 | 0;
 return 0; //@line 199
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_120($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 175
}
function __GLOBAL__sub_I_main_cpp() {
 __ZN9UDPSocketC2Ev(10104); //@line 19528
 return;
}
function b16(p0) {
 p0 = p0 | 0;
 nullFunc_ii(31); //@line 2962
 return 0; //@line 2962
}
function b15(p0) {
 p0 = p0 | 0;
 nullFunc_ii(30); //@line 2959
 return 0; //@line 2959
}
function b14(p0) {
 p0 = p0 | 0;
 nullFunc_ii(29); //@line 2956
 return 0; //@line 2956
}
function b13(p0) {
 p0 = p0 | 0;
 nullFunc_ii(28); //@line 2953
 return 0; //@line 2953
}
function b12(p0) {
 p0 = p0 | 0;
 nullFunc_ii(27); //@line 2950
 return 0; //@line 2950
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(26); //@line 2947
 return 0; //@line 2947
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(25); //@line 2944
 return 0; //@line 2944
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_69($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_68($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_67($0) {
 $0 = $0 | 0;
 return;
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_107($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(24); //@line 2941
 return 0; //@line 2941
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(23); //@line 2938
 return 0; //@line 2938
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(22); //@line 2935
 return 0; //@line 2935
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(21); //@line 2932
 return 0; //@line 2932
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(20); //@line 2929
 return 0; //@line 2929
}
function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(19); //@line 2926
 return 0; //@line 2926
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_203($0) {
 $0 = $0 | 0;
 return;
}
function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 2923
 return 0; //@line 2923
}
function __ZN17EthernetInterface7connectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 169
}
function ___ofl_lock() {
 ___lock(10728); //@line 25303
 return 10736; //@line 25304
}
function b214(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 3535
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function _abort_message__async_cb_147($0) {
 $0 = $0 | 0;
 _abort(); //@line 29090
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 1; //@line 12209
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __Z9coap_freePv($0) {
 $0 = $0 | 0;
 _free($0); //@line 19543
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 3058
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_913() {
 return _pthread_self() | 0; //@line 4098
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 6994
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 7000
}
function __ZN6SocketD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 10588
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 8376
 return;
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 2791
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 8361
 return;
}
function __ZThn4_N17EthernetInterfaceD1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_116($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 2787
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b1() {
 nullFunc_i(0); //@line 2920
 return 0; //@line 2920
}
function ___ofl_unlock() {
 ___unlock(10728); //@line 25309
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function __ZN6SocketD2Ev__async_cb_208($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(511); //@line 3532
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(510); //@line 3529
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(509); //@line 3526
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(508); //@line 3523
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(507); //@line 3520
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(506); //@line 3517
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(505); //@line 3514
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(504); //@line 3511
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(503); //@line 3508
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(502); //@line 3505
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(501); //@line 3502
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(500); //@line 3499
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(499); //@line 3496
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(498); //@line 3493
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(497); //@line 3490
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(496); //@line 3487
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(495); //@line 3484
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(494); //@line 3481
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(493); //@line 3478
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(492); //@line 3475
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(491); //@line 3472
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(490); //@line 3469
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(489); //@line 3466
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(488); //@line 3463
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(487); //@line 3460
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(486); //@line 3457
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(485); //@line 3454
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(484); //@line 3451
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(483); //@line 3448
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(482); //@line 3445
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(481); //@line 3442
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(480); //@line 3439
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(479); //@line 3436
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(478); //@line 3433
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(477); //@line 3430
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(476); //@line 3427
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(475); //@line 3424
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(474); //@line 3421
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(473); //@line 3418
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(472); //@line 3415
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(471); //@line 3412
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(470); //@line 3409
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(469); //@line 3406
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(468); //@line 3403
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(467); //@line 3400
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(466); //@line 3397
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(465); //@line 3394
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(464); //@line 3391
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(463); //@line 3388
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(462); //@line 3385
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(461); //@line 3382
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(460); //@line 3379
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(459); //@line 3376
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(458); //@line 3373
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(457); //@line 3370
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(456); //@line 3367
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(455); //@line 3364
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(454); //@line 3361
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(453); //@line 3358
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(452); //@line 3355
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(451); //@line 3352
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(450); //@line 3349
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(449); //@line 3346
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(448); //@line 3343
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(447); //@line 3340
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(446); //@line 3337
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(445); //@line 3334
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(444); //@line 3331
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(443); //@line 3328
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(442); //@line 3325
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(441); //@line 3322
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(440); //@line 3319
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(439); //@line 3316
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(438); //@line 3313
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(437); //@line 3310
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(436); //@line 3307
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(435); //@line 3304
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(434); //@line 3301
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(433); //@line 3298
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(432); //@line 3295
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(431); //@line 3292
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(430); //@line 3289
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(429); //@line 3286
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(428); //@line 3283
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(427); //@line 3280
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(426); //@line 3277
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(425); //@line 3274
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(424); //@line 3271
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(423); //@line 3268
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(422); //@line 3265
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(421); //@line 3262
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(420); //@line 3259
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(419); //@line 3256
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(418); //@line 3253
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(417); //@line 3250
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(416); //@line 3247
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(415); //@line 3244
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(414); //@line 3241
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(413); //@line 3238
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(412); //@line 3235
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(411); //@line 3232
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(410); //@line 3229
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(409); //@line 3226
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(408); //@line 3223
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(407); //@line 3220
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(406); //@line 3217
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(405); //@line 3214
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(404); //@line 3211
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(403); //@line 3208
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(402); //@line 3205
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(401); //@line 3202
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(400); //@line 3199
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(399); //@line 3196
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 24612
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 24940
}
function __ZN17EthernetInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(398); //@line 3193
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(397); //@line 3190
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(396); //@line 3187
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(395); //@line 3184
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(394); //@line 3181
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(393); //@line 3178
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(392); //@line 3175
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(391); //@line 3172
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(390); //@line 3169
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(389); //@line 3166
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(388); //@line 3163
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(387); //@line 3160
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(386); //@line 3157
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(385); //@line 3154
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(384); //@line 3151
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(383); //@line 3148
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(382); //@line 3145
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(381); //@line 3142
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(380); //@line 3139
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(379); //@line 3136
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(378); //@line 3133
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(377); //@line 3130
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(376); //@line 3127
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(375); //@line 3124
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(374); //@line 3121
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(373); //@line 3118
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(372); //@line 3115
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(371); //@line 3112
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(370); //@line 3109
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(369); //@line 3106
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(368); //@line 3103
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(367); //@line 3100
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(366); //@line 3097
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(365); //@line 3094
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(364); //@line 3091
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(363); //@line 3088
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(362); //@line 3085
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(361); //@line 3082
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(360); //@line 3079
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(359); //@line 3076
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(358); //@line 3073
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 3070
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___errno_location() {
 return 10724; //@line 24606
}
function __ZSt9terminatev__async_cb_171($0) {
 $0 = $0 | 0;
}
function _arm_random_seed_get() {
 return 0; //@line 19478
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _pthread_self() {
 return 1216; //@line 24659
}
function _core_util_critical_section_exit() {
 return;
}
function _wait__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b56() {
 nullFunc_v(7); //@line 3067
}
function b55() {
 nullFunc_v(6); //@line 3064
}
function b54() {
 nullFunc_v(5); //@line 3061
}
function b53() {
 nullFunc_v(0); //@line 3055
}
function _arm_random_module_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1];
var FUNCTION_TABLE_ii = [b3,__ZN17EthernetInterface15get_mac_addressEv,__ZN17EthernetInterface14get_ip_addressEv,__ZN17EthernetInterface11get_netmaskEv,__ZN17EthernetInterface11get_gatewayEv,__ZN17EthernetInterface7connectEv,__ZN17EthernetInterface10disconnectEv,__ZNK16NetworkInterface21get_connection_statusEv,__ZN16NetworkInterface12ethInterfaceEv,__ZN16NetworkInterface13wifiInterfaceEv,__ZN16NetworkInterface13meshInterfaceEv,__ZN16NetworkInterface12cellularBaseEv,__ZN16NetworkInterface13emacInterfaceEv,__ZN17EthernetInterface9get_stackEv,__ZThn4_N17EthernetInterface14get_ip_addressEv,__ZN12NetworkStack19onboardNetworkStackEv,__ZN9UDPSocket9get_protoEv,___stdio_close,__Z11coap_malloct,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13
,b14,b15,b16];
var FUNCTION_TABLE_iii = [b18,__ZN16NetworkInterface26gethostbyname_async_cancelEi,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress,__ZN17EthernetInterface8set_dhcpEb,__ZN16NetworkInterface12set_blockingEb,__ZN17EthernetInterface12socket_closeEPv,__ZN12NetworkStack26gethostbyname_async_cancelEi,__ZN12NetworkStack14add_dns_serverERK13SocketAddress,__ZThn4_N17EthernetInterface12socket_closeEPv,b19,b20,b21,b22,b23,b24,b25];
var FUNCTION_TABLE_iiii = [b27,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZN17EthernetInterface13socket_listenEPvi,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack14get_dns_serverEiP13SocketAddress,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZThn4_N17EthernetInterface13socket_listenEPvi,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv,_do_read,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37
,b38,b39,b40];
var FUNCTION_TABLE_iiiii = [b42,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZN17EthernetInterface11set_networkEPKcS1_S1_,__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZN17EthernetInterface11socket_sendEPvPKvj,__ZN17EthernetInterface11socket_recvEPvS0_j,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j,__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv,b43,b44,b45];
var FUNCTION_TABLE_iiiiii = [b47,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,__ZN12NetworkStack11setstackoptEiiPKvj,__ZN12NetworkStack11getstackoptEiiPvPj,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,b48];
var FUNCTION_TABLE_iiiiiii = [b50,__ZN12NetworkStack10setsockoptEPviiPKvj,__ZN12NetworkStack10getsockoptEPviiS0_Pj,b51];
var FUNCTION_TABLE_v = [b53,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__Z29nsapi_dns_query_async_timeoutv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b54,b55,b56];
var FUNCTION_TABLE_vi = [b58,__ZN17EthernetInterfaceD2Ev,__ZN17EthernetInterfaceD0Ev,__ZThn4_N17EthernetInterfaceD1Ev,__ZThn4_N17EthernetInterfaceD0Ev,_mbed_trace_default_print,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv,__ZN6SocketD2Ev,__ZN6SocketD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv,__ZN9UDPSocketD2Ev,__ZN9UDPSocketD0Ev,__ZN9UDPSocket5eventEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN17EthernetInterface15get_mac_addressEv__async_cb,__ZN17EthernetInterface14get_ip_addressEv__async_cb,__ZN17EthernetInterface11get_netmaskEv__async_cb
,__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb,__ZN17EthernetInterface8set_dhcpEb__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_97,__ZN17EthernetInterface12socket_closeEPv__async_cb,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_206,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_207,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_205,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_160,__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_75,__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_183,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_184,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_182,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_153,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb
,_sn_coap_parser__async_cb,_sn_coap_parser__async_cb_161,_sn_coap_parser__async_cb_162,_sn_coap_parser__async_cb_163,_sn_coap_parser__async_cb_169,_sn_coap_parser__async_cb_164,_sn_coap_parser__async_cb_168,_sn_coap_parser__async_cb_167,_sn_coap_parser__async_cb_166,_sn_coap_parser__async_cb_165,_sn_coap_parser_options_parse_multiple_options__async_cb,_sn_coap_protocol_init__async_cb,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_146,_mbed_vtracef__async_cb_136,_mbed_vtracef__async_cb_137,_mbed_vtracef__async_cb_138,_mbed_vtracef__async_cb_145,_mbed_vtracef__async_cb_139,_mbed_vtracef__async_cb_144,_mbed_vtracef__async_cb_140,_mbed_vtracef__async_cb_141,_mbed_vtracef__async_cb_142,_mbed_vtracef__async_cb_143,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_96,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb
,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_98,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_6,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_7,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_8,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_45,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_48,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_178,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_201,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_193,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_194,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_195,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_196,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_200,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_197,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_198,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_199,__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_19,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_11,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_17,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_12,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_13
,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_18,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_14,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_16,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_15,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_1,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_2,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_3,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_4,__ZN6SocketD2Ev__async_cb,__ZN6SocketD2Ev__async_cb_208,__ZN6Socket4openEP12NetworkStack__async_cb,__ZN6Socket4openEP12NetworkStack__async_cb_127,__ZN6Socket4openEP12NetworkStack__async_cb_128,__ZN6Socket4openEP12NetworkStack__async_cb_129,__ZN6Socket4openEP12NetworkStack__async_cb_130,__ZN4mbed8CallbackIFvvEE5thunkEPv,__ZN6Socket4openEP12NetworkStack__async_cb_131,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_121,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb,__ZN6Socket5closeEv__async_cb,__ZN6Socket5closeEv__async_cb_53,__ZN6Socket5closeEv__async_cb_54,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_76,__ZN9UDPSocketD2Ev__async_cb_117,__ZN9UDPSocketD2Ev__async_cb,__ZN9UDPSocketD2Ev__async_cb_116,__ZN9UDPSocketD0Ev__async_cb
,__ZN9UDPSocket5eventEv__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_61,__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb,__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_177,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_174,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_173,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_172,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_176,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_175,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_170,__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_123,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_126,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_124,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_125,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_95,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_91,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_92,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_77,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_78,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_79,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_80,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_81,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_94
,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_82,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_83,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_84,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_85,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_86,__ZL28nsapi_dns_query_async_createPv,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_93,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_88,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_89,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_90,__Z29nsapi_dns_query_async_timeoutv__async_cb,__ZL30nsapi_dns_query_async_responsePv,__Z29nsapi_dns_query_async_timeoutv__async_cb_110,__Z29nsapi_dns_query_async_timeoutv__async_cb_100,__Z29nsapi_dns_query_async_timeoutv__async_cb_101,__Z29nsapi_dns_query_async_timeoutv__async_cb_102,__ZL26nsapi_dns_query_async_sendPv,__Z29nsapi_dns_query_async_timeoutv__async_cb_109,__Z29nsapi_dns_query_async_timeoutv__async_cb_103,__Z29nsapi_dns_query_async_timeoutv__async_cb_104,__Z29nsapi_dns_query_async_timeoutv__async_cb_105,__Z29nsapi_dns_query_async_timeoutv__async_cb_108,__Z29nsapi_dns_query_async_timeoutv__async_cb_106,__Z29nsapi_dns_query_async_timeoutv__async_cb_107,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_59,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_55,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_56,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_58
,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_57,__ZL28nsapi_dns_query_async_createPv__async_cb_66,__ZL28nsapi_dns_query_async_createPv__async_cb_71,__ZL28nsapi_dns_query_async_createPv__async_cb_69,__ZL28nsapi_dns_query_async_createPv__async_cb,__ZL28nsapi_dns_query_async_createPv__async_cb_68,__ZL28nsapi_dns_query_async_createPv__async_cb_65,__ZL28nsapi_dns_query_async_createPv__async_cb_62,__ZL28nsapi_dns_query_async_createPv__async_cb_63,__ZL37nsapi_dns_query_async_socket_callbackPv,__ZL28nsapi_dns_query_async_createPv__async_cb_70,__ZL28nsapi_dns_query_async_createPv__async_cb_64,__ZL28nsapi_dns_query_async_createPv__async_cb_67,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_42,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_37,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_43,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_38,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_39,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_44,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_40,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_41,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_181,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_179,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_180,__ZL26nsapi_dns_query_async_sendPv__async_cb_203,__ZL26nsapi_dns_query_async_sendPv__async_cb
,__ZL26nsapi_dns_query_async_sendPv__async_cb_202,__ZL26nsapi_dns_query_async_sendPv__async_cb_204,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_159,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_156,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_158,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_157,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_154,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_155,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_120,__ZL30nsapi_dns_query_async_responsePv__async_cb_118,__ZL30nsapi_dns_query_async_responsePv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_119,__ZL28nsapi_dns_query_async_deletei__async_cb_135,__ZL28nsapi_dns_query_async_deletei__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_132,__ZL28nsapi_dns_query_async_deletei__async_cb_133,__ZL28nsapi_dns_query_async_deletei__async_cb_134,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_115,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_111,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_112,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_113,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_114,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_36,_mbed_die__async_cb_35
,_mbed_die__async_cb_34,_mbed_die__async_cb_33,_mbed_die__async_cb_32,_mbed_die__async_cb_31,_mbed_die__async_cb_30,_mbed_die__async_cb_29,_mbed_die__async_cb_28,_mbed_die__async_cb_27,_mbed_die__async_cb_26,_mbed_die__async_cb_25,_mbed_die__async_cb_24,_mbed_die__async_cb_23,_mbed_die__async_cb_22,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_21,_mbed_error_vfprintf__async_cb_20,_serial_putc__async_cb_150,_serial_putc__async_cb,_invoke_ticker__async_cb_148,_invoke_ticker__async_cb,_wait__async_cb,_wait_ms__async_cb,__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb,__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb,__Z17recv_coap_messagev__async_cb_9,__Z17recv_coap_messagev__async_cb_10,__Z17recv_coap_messagev__async_cb,_main__async_cb_188
,_main__async_cb_187,_main__async_cb,_main__async_cb_190,__Z9coap_freePv,_main__async_cb_191,_main__async_cb_189,_main__async_cb_185,_main__async_cb_186,_main__async_cb_192,_putc__async_cb_122,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_73,_fflush__async_cb_72,_fflush__async_cb_74,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_60,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_fputc__async_cb_152,_fputc__async_cb,_puts__async_cb,__Znwj__async_cb,__ZnwjRKSt9nothrow_t__async_cb,__Znaj__async_cb
,__ZnajRKSt9nothrow_t__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_5,_abort_message__async_cb,_abort_message__async_cb_147,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_149,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_47,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_99,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_151,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_52,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_51,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_50,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_49,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_46,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b59
,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89
,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119
,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149
,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179
,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209
,b210,b211,b212];
var FUNCTION_TABLE_vii = [b214,__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE,__ZN12NetworkStack20get_call_in_callbackEv,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv];
var FUNCTION_TABLE_viii = [b216];
var FUNCTION_TABLE_viiii = [b218,__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b219,b220];
var FUNCTION_TABLE_viiiii = [b222,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b224,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=coap.js.map